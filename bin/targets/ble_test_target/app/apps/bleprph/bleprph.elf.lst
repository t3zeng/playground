
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x000257ac vaddr 0x000357ac paddr 0x000357ac align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000257c4 memsz 0x000257c4 flags rwx
    LOAD off    0x00030100 vaddr 0x10000100 paddr 0x000357c4 align 2**16
         filesz 0x0000046c memsz 0x0000046c flags rw-
    LOAD off    0x00030570 vaddr 0x10000570 paddr 0x00035c30 align 2**16
         filesz 0x00000000 memsz 0x00003934 flags rw-
    LOAD off    0x00040000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              0002178c  00014020  00014020  00004020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000357ac  000357ac  0003056c  2**0  CONTENTS
  3 .ARM.exidx         00000018  000357ac  000357ac  000257ac  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00040000  2**0  ALLOC
  5 .data              0000046c  10000100  000357c4  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00003934  10000570  00035c30  00030570  2**3  ALLOC
  7 .stack_dummy       000001b0  10003ea8  10003ea8  00030570  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00030720  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  0003074a  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000307c3  2**0  CONTENTS, READONLY
 11 .debug_line        000755e4  00000000  00000000  000307c7  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0015c552  00000000  00000000  000a5dab  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      000237ff  00000000  00000000  002022fd  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00005c18  00000000  00000000  00225b00  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         00023a0e  00000000  00000000  0022b718  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00006048  00000000  00000000  0024f126  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00010570  00000000  00000000  00255170  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         0005fea7  00000000  00000000  002656e0  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
000357ac l    d  .ARM.extab	00000000 .ARM.extab
000357ac l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000570 l    d  .bss	00000000 .bss
10003ea8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000570 l     O .bss	00000004 brk
10000574 l     O .bss	00000004 sbrk_base
10000578 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
000146f8 l     F .text	00000014 bleprph_on_reset
0001470c l     F .text	000000dc bleprph_advertise
000148a4 l     F .text	000001d8 bleprph_gap_event
000147e8 l     F .text	00000024 bleprph_on_sync
0001480c l     F .text	00000098 bleprph_print_conn_desc
1000057c l     O .bss	00000019 ver_str.22247
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 gatt_svr.c
00014b20 l     F .text	00000026 gatt_svr_chr_write
00014b48 l     F .text	000000b0 gatt_svr_chr_access_sec_test
10000595 l     O .bss	00000001 gatt_svr_sec_test_static_val
10000104 l     O .data	00000048 __compound_literal.0
0003404c l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00034060 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
00034074 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
00034088 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 ble_test_target-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
10000596 l     O .bss	00000001 split_app_active
10000597 l     O .bss	00000001 split_mode_cur
1000014c l     O .data	00000024 split_scfg
000340b8 l     O .text	00000020 __compound_literal.0
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00014ef8 l     F .text	0000001e os_main
100005e8 l     O .bss	00000100 g_idle_task_stack
100006f0 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00015264 l     F .text	00000060 os_dev_add
000152c4 l     F .text	00000022 os_dev_initialize
000152e6 l     F .text	00000024 os_dev_init
10000f4c l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
10000f54 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00015d3c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00015e90 l     F .text	00000010 os_msys_find_biggest_pool
00015ea0 l     F .text	0000002c os_msys_find_pool
00015f18 l     F .text	00000058 os_msys_init_once
10000f6c l     O .bss	000009a0 os_msys_1_data
1000190c l     O .bss	0000000c os_msys_1_mbuf_pool
10001918 l     O .bss	0000001c os_msys_1_mempool
10000170 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00015fd8 l     F .text	00000020 os_sanity_check_list_lock
00015ff8 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0001636c l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
000164d0 l     F .text	00000044 os_deltatime
00016514 l     F .text	00000064 os_time_tick
10001958 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
000166e4 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
00016a7c l       .text	00000000 test1
00016a70 l       .text	00000000 loop1
00016a82 l       .text	00000000 res1
00016a9e l       .text	00000000 test2
00016aa6 l       .text	00000000 done
00016a92 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00016ab2 l       .text	00000000 test1
00016aae l       .text	00000000 loop1
00016ac0 l       .text	00000000 test2
00016abc l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 imgmgr.c
00016c30 l     F .text	0000005c imgr_erase_state
10000188 l     O .data	0000000c imgr_mgmt_group
00034264 l     O .text	00000038 imgr_mgmt_handlers
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 smp.c
00016cf4 l     F .text	0000000c smp_free_buf
00016d00 l     F .text	00000010 smp_init_writer
00016d10 l     F .text	00000012 smp_init_reader
00016d22 l     F .text	00000028 smp_write_at
00016d4a l     F .text	00000010 smp_reset_buf
00016d5a l     F .text	00000008 smp_trim_front
00016d62 l     F .text	0000002c smp_alloc_rsp
00016d8e l     F .text	00000024 smp_rsp_frag_alloc
00016df8 l     F .text	0000004c smp_process_packet
00016e44 l     F .text	0000000a smp_event_data_in
00000000 l    df *ABS*	00000000 smp_ble.c
00016edc l     F .text	00000028 smp_ble_out
00016f04 l     F .text	00000040 smp_ble_event_data_in
00016f44 l     F .text	00000090 gatt_svr_chr_access_smp
10000194 l     O .data	00000030 __compound_literal.0
000342d4 l     O .text	00000011 gatt_svr_chr_smp
000342e8 l     O .text	00000011 gatt_svr_svc_smp
000342fc l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 config_init.c
0001706c l     F .text	000000e4 config_init_fcb
100019ec l     O .bss	0000006c conf_fcb_area
100001c4 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_store.c
0001717e l     F .text	0000003c conf_dup_check_cb
000171ba l     F .text	0000001c conf_load_cb
000172e0 l     F .text	00000008 conf_store_one
10001a5c l     O .bss	00000001 conf_loaded
10001a5d l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
00017354 l     F .text	00000032 conf_get_cb
00017386 l     F .text	00000028 conf_set_cb
000173ae l     F .text	00000020 conf_commit_cb
000173ce l     F .text	00000008 conf_ev_fn_load
10001a68 l     O .bss	0000000c conf_mtx
100001fc l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_fcb.c
0001780c l     F .text	00000024 conf_fcb_load
00017830 l     F .text	00000044 conf_fcb_load_cb
00017874 l     F .text	0000002c conf_fcb_var_read
000178a0 l     F .text	000000d6 conf_fcb_compress_internal
00017976 l     F .text	00000066 conf_fcb_append
00017a7a l     F .text	0000000a conf_fcb_save
1000020c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 config_mgmt.c
00017b78 l     F .text	000000b8 conf_mgmt_write
00017c30 l     F .text	0000007c conf_mgmt_read
1000021c l     O .data	0000000c conf_mgmt_group
0003433c l     O .text	00000008 conf_mgmt_handlers
00000000 l    df *ABS*	00000000 console.c
00017cbc l     F .text	0000004c add_ascii_num_with_char
00017d08 l     F .text	0000003c console_handle_line
00017d44 l     F .text	0000003c console_filter_out
00017d80 l     F .text	0000001e console_filter_write
00017da0 l     F .text	00000044 console_append_char
00017de4 l     F .text	0000001e console_write_nolock
00017e04 l     F .text	00000050 handle_end
00017e54 l     F .text	00000050 handle_home
00017ea4 l     F .text	00000068 del_char
00017f0c l     F .text	00000020 handle_delete
00017f2c l     F .text	00000190 handle_ansi
000180bc l     F .text	00000058 handle_backspace
00018114 l     F .text	0000005c console_clear_line
00018170 l     F .text	000000a8 insert_char
00018224 l     F .text	0000000a console_nlip_enable_echo
0001822e l     F .text	0000000a console_nlip_disable_echo
00018238 l     F .text	00000104 handle_nlip
10001a74 l     O .bss	00000004 ansi_val
10001a78 l     O .bss	00000004 ansi_val_2
10001a7c l     O .bss	00000010 avail_queue
10001a8c l     O .bss	00000004 completion
10001a90 l     O .bss	00000004 console_compat_rx_cb
10001a98 l     O .bss	0000000c console_write_lock
10001aa4 l     O .bss	00000002 cur
10001aa8 l     O .bss	00000004 current_line_ev
10001aac l     O .bss	00000004 esc_state
10001ab4 l     O .bss	00000004 lines_queue
10001ab8 l     O .bss	00000004 nlip_state
10001abc l     O .bss	00000001 prev_endl.19772
10001abd l     O .bss	00000001 rx_stalled
10001abe l     O .bss	00000002 trailing_chars
10000228 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
1000022c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
00018680 l     F .text	00000008 uart_blocking_tx
00018688 l     F .text	00000014 uart_console_ring_add_char
0001869c l     F .text	00000014 uart_console_ring_pull_char
000186b0 l     F .text	00000016 uart_console_ring_is_full
000186c6 l     F .text	0000000e uart_console_ring_is_empty
000186d4 l     F .text	00000030 uart_console_tx_flush
00018704 l     F .text	0000001c uart_console_tx_char
00018720 l     F .text	00000058 uart_console_queue_char
00018778 l     F .text	00000044 uart_console_rx_char
000187bc l     F .text	00000074 uart_console_rx_char_event
10001ac0 l     O .bss	00000008 cr_rx
10001ac8 l     O .bss	00000020 cr_rx_buf
10001ae8 l     O .bss	00000008 cr_tx
10001af0 l     O .bss	00000020 cr_tx_buf
10001b20 l     O .bss	00000001 uart_console_rx_stalled
10001b24 l     O .bss	00000004 uart_dev
10001b28 l     O .bss	00000004 write_char_cb
10000230 l     O .data	00000004 b.19620
00000000 l    df *ABS*	00000000 flash_map.c
00018944 l     F .text	00000038 flash_area_find_idx
0001897c l     F .text	00000058 flash_map_area_overlaps
000189d4 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 id.c
00018c4c l     F .text	00000074 id_conf_export
00018cc0 l     F .text	000000a0 id_conf_get
00018d60 l     F .text	00000034 id_conf_set
00018d94 l     F .text	00000060 id_read_mfghash
00000000 l    df *ABS*	00000000 log.c
00018e48 l     F .text	00000028 log_module_find_idx
00018e70 l     F .text	0000001c log_registered
00018e8c l     F .text	0000000c log_chk_type
00018e98 l     F .text	00000014 log_chk_max_entry_len
00018eac l     F .text	00000016 log_call_append_cb
00018ec8 l     F .text	00000138 log_append_prepare
0001910c l     F .text	0000003c log_read_last_hdr
00019332 l     F .text	00000040 log_read_hdr_walk
0001929e l     F .text	0000004a log_walk_body_fn
10001bd8 l     O .bss	00000004 g_log_module_count
10001bdc l     O .bss	00000008 g_log_module_list
10001be4 l     O .bss	00000001 log_written
1000025c l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00019372 l     F .text	00000004 log_console_read
00019376 l     F .text	00000004 log_console_walk
0001937a l     F .text	00000004 log_console_flush
00019380 l     F .text	00000048 log_console_print_hdr
000193c8 l     F .text	00000048 log_console_dump_cbor_entry
00019410 l     F .text	00000040 log_console_append_body
00019450 l     F .text	0000001c log_console_append
10001be8 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
10001c04 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
000194f0 l     F .text	00000028 modlog_find_by_module
00019518 l     F .text	0000003c modlog_insert
00019554 l     F .text	0000001c modlog_alloc
00019570 l     F .text	00000058 modlog_infer_handle
000195c8 l     F .text	00000046 modlog_register_no_lock
0001960e l     F .text	0000002a modlog_append_one
00019638 l     F .text	00000084 modlog_append_no_lock
10001c84 l     O .bss	00000004 modlog_first_dflt
10001c88 l     O .bss	000000c0 modlog_mapping_buf
10001d64 l     O .bss	00000004 modlog_mappings
10001d68 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
00019834 l     F .text	00000090 mfg_seek_next_aux
000198c4 l     F .text	0000006c mfg_read_mmr
00019930 l     F .text	00000050 mfg_read_next_mmr
00019980 l     F .text	00000040 mfg_open_flash_area
000199c0 l     F .text	0000003e mfg_read_tlv_body
00019a90 l     F .text	00000042 mfg_read_mmr_refs
10001d8c l     O .bss	00000001 mfg_initialized
10001d90 l     O .bss	00000018 mfg_mmrs
10001da8 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
00019ad4 l     F .text	00000048 reboot_conf_export
00019b1c l     F .text	00000054 reboot_conf_get
00019b70 l     F .text	00000054 reboot_conf_set
00019bc4 l     F .text	0000009c log_reboot_init_fcb
00019c60 l     F .text	00000014 log_reboot_init_console
00019d00 l     F .text	00000284 log_reboot_write
10001dac l     O .bss	00000001 log_reboot_written
10001db0 l     O .bss	0000001c reboot_log
10001dcc l     O .bss	00000034 reboot_log_fcb
10001e00 l     O .bss	0000000c reboot_sector
10001e0c l     O .bss	00000020 str_reason.20394
00000000 l    df *ABS*	00000000 stats.c
0001a058 l     F .text	00000010 stats_offset
0001a068 l     F .text	0000004c stats_register_internal
0001a14c l     F .text	00000038 stats_module_init_internal
00000000 l    df *ABS*	00000000 sysinit.c
0001a244 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
0001a2dc l     F .text	0000000c rwlock_complete_handoff
0001a2e8 l     F .text	0000001a rwlock_read_must_block
0001a302 l     F .text	00000016 rwlock_write_must_block
0001a318 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 scfg.c
0001a474 l     F .text	00000016 scfg_find_setting_by_val
0001a48a l     F .text	0000005e scfg_setting_id
0001a4e8 l     F .text	00000040 scfg_handler_export
0001a528 l     F .text	0000001a scfg_find_setting_by_name
0001a542 l     F .text	00000026 scfg_handler_get
0001a568 l     F .text	00000036 scfg_handler_set
00000000 l    df *ABS*	00000000 cborattr.c
0001a664 l     F .text	0000006c valid_attr_type
0001a6d0 l     F .text	0000004c cbor_target_address
0001a914 l     F .text	000002ea cbor_internal_read_object
00000000 l    df *ABS*	00000000 img_mgmt.c
0001ac0a l     F .text	0000003a img_mgmt_find_tlvs
0001ac44 l     F .text	0000004c img_mgmt_upload_good_rsp
0001adcc l     F .text	00000036 img_mgmt_upload_log
0001ae54 l     F .text	00000058 img_mgmt_erase
0001aed4 l     F .text	00000220 img_mgmt_upload
10001e74 l     O .bss	00000004 img_mgmt_upload_arg
10001e78 l     O .bss	00000004 img_mgmt_upload_cb
10000290 l     O .data	0000000c img_mgmt_group
000345a8 l     O .text	00000030 img_mgmt_handlers
00000000 l    df *ABS*	00000000 img_mgmt_state.c
00000000 l    df *ABS*	00000000 img_mgmt_util.c
00000000 l    df *ABS*	00000000 mynewt_img_mgmt.c
0001b506 l     F .text	00000040 img_mgmt_vercmp
0001b546 l     F .text	00000048 img_mgmt_find_best_area_id
00000000 l    df *ABS*	00000000 mynewt_img_mgmt_log.c
0001b934 l     F .text	00000004 img_mgmt_log_gen
00000000 l    df *ABS*	00000000 mynewt_log_mgmt.c
0001b988 l     F .text	00000020 mynewt_log_mgmt_find_log
0001b9a8 l     F .text	000000da mynewt_log_mgmt_walk_cb
00000000 l    df *ABS*	00000000 os_mgmt.c
0001bbd0 l     F .text	0000000a os_mgmt_reset
0001bbdc l     F .text	00000144 os_mgmt_taskstat_encode_one
0001bd20 l     F .text	00000070 os_mgmt_taskstat_read
0001bd90 l     F .text	00000074 os_mgmt_echo
1000029c l     O .data	0000000c os_mgmt_group
000346c4 l     O .text	00000030 os_mgmt_group_handlers
00000000 l    df *ABS*	00000000 mynewt_os_mgmt.c
0001be1c l     F .text	0000001c mynewt_os_mgmt_task_at
0001be38 l     F .text	00000014 mynewt_os_mgmt_stack_usage
0001be4c l     F .text	0000000a mynewt_os_mgmt_reset_tmo
10001e7c l     O .bss	00000020 mynewt_os_mgmt_reset_callout
00000000 l    df *ABS*	00000000 mynewt_stat_mgmt.c
0001bf00 l     F .text	00000042 mynewt_stat_mgmt_walk_cb
00000000 l    df *ABS*	00000000 mgmt.c
0001bfb8 l     F .text	00000050 mgmt_find_group
10001e9c l     O .bss	00000004 evt_cb
10001ea0 l     O .bss	00000004 mgmt_group_list
10001ea4 l     O .bss	00000004 mgmt_group_list_end
00000000 l    df *ABS*	00000000 smp.c
0001c154 l     F .text	0000001a smp_align4
0001c16e l     F .text	0000000a smp_rsp_op
0001c178 l     F .text	0000002a smp_init_rsp_hdr
0001c1a2 l     F .text	0000001a smp_read_hdr
0001c1bc l     F .text	00000076 smp_handle_single_payload
0001c232 l     F .text	00000012 smp_write_hdr
0001c244 l     F .text	0000005e smp_handle_single_req
0001c2a2 l     F .text	0000006e smp_build_err_rsp
0001c310 l     F .text	0000004c smp_on_err
00000000 l    df *ABS*	00000000 mcumgr_util.c
00000000 l    df *ABS*	00000000 ble_ll.c
0001c4d8 l     F .text	00000070 ble_ll_count_rx_adv_pdus
0001c548 l     F .text	00000060 ble_ll_count_rx_stats
0001c5a8 l     F .text	00000020 ble_ll_flush_pkt_queue
0001c61c l     F .text	00000038 ble_ll_validate_task
0001c654 l     F .text	0000001c ble_ll_hw_err_timer_cb
0001c670 l     F .text	0000000a ble_ll_event_comp_pkts
0001c67a l     F .text	00000008 ble_ll_event_dbuf_overflow
0001c684 l     F .text	00000080 ble_ll_tx_pkt_in
0001c704 l     F .text	00000008 ble_ll_event_tx_pkt
0001c70c l     F .text	00000088 ble_ll_rx_pkt_in
0001c794 l     F .text	00000008 ble_ll_event_rx_pkt
10002048 l     O .bss	00000180 g_ble_ll_stack
00000000 l    df *ABS*	00000000 ble_ll_adv.c
0001cb6c l     F .text	0000001a ble_ll_adv_first_chan
0001cb86 l     F .text	0000001a ble_ll_adv_final_chan
0001cba0 l     F .text	00000016 ble_ll_adv_flags_set
0001cbb6 l     F .text	00000018 ble_ll_adv_flags_clear
0001cbce l     F .text	0000007c ble_ll_adv_rpa_update
0001cc4a l     F .text	00000016 ble_ll_adv_active_chanset_clear
0001cc60 l     F .text	00000030 ble_ll_adv_drop_event
0001cc90 l     F .text	00000038 ble_ll_adv_tx_done
0001ccc8 l     F .text	00000050 ble_ll_adv_sm_find_configured
0001cd18 l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
0001cd4c l     F .text	0000002c ble_ll_adv_scheduled
0001cd78 l     F .text	00000068 ble_ll_adv_set_sched
0001cf0c l     F .text	000000ec ble_ll_adv_tx_start_cb
0001cde0 l     F .text	0000012c ble_ll_adv_sm_start
0001cff8 l     F .text	000000aa ble_ll_adv_legacy_pdu_make
0001d0a2 l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
0001d0f4 l     F .text	00000068 ble_ll_adv_sm_stop
0001d15c l     F .text	0000002e ble_ll_adv_set_enable
0001d18a l     F .text	0000006a ble_ll_adv_update_data_mbuf
0001d1f4 l     F .text	000000a2 ble_ll_adv_set_scan_rsp_data
0001d296 l     F .text	000000bc ble_ll_adv_set_adv_data
0001d354 l     F .text	000000fc ble_ll_adv_conn_req_rxd
0001d450 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
0001d478 l     F .text	00000054 ble_ll_adv_reschedule_event
0001d4cc l     F .text	00000034 ble_ll_adv_sm_init
0001d658 l     F .text	0000000a ble_ll_adv_event_done
0001d528 l     F .text	00000120 ble_ll_adv_done
0001d648 l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
0001d99c l     F .text	0000004a ble_ll_conn_calc_dci_csa1
0001d9e8 l     F .text	00000018 ble_ll_conn_halt
0001da00 l     F .text	00000014 ble_ll_conn_current_sm_over
0001da14 l     F .text	0000010c ble_ll_conn_event_start_cb
0001db20 l     F .text	0000006c ble_ll_conn_chk_csm_flags
0001dc68 l     F .text	000002ec ble_ll_conn_next_event
0001df54 l     F .text	00000154 ble_ll_conn_created
0001e0a8 l     F .text	00000016 ble_ll_conn_set_csa
0001e36c l     F .text	00000148 ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
0001eb26 l     F .text	00000066 ble_ll_conn_process_conn_params
100024f8 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
0001f3ac l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
0001f3e4 l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
0001f3fe l     F .text	0000000e ble_ll_ctrl_start_rsp_timer
0001f40c l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
0001f42c l     F .text	00000032 ble_ll_ctrl_rx_pause_enc_rsp
0001f45e l     F .text	000000ca ble_ll_ctrl_conn_param_pdu_make
0001f528 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
0001f63c l     F .text	00000026 ble_ll_ctrl_version_ind_make
0001f662 l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
0001f68c l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
0001f6d0 l     F .text	00000028 ble_ll_ctrl_update_features
0001f6f8 l     F .text	0000004c ble_ll_ctrl_rx_feature_req
0001f744 l     F .text	00000048 ble_ll_ctrl_enc_req_make
0001f78c l     F .text	000000f0 ble_ll_ctrl_proc_init
0001f87c l     F .text	00000078 ble_ll_ctrl_rx_conn_update
0001f8f4 l     F .text	00000040 ble_ll_ctrl_rx_chanmap_req
0001f934 l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
0001f940 l     F .text	00000066 ble_ll_ctrl_len_proc
0001f9a6 l     F .text	00000072 ble_ll_ctrl_rx_enc_req
0001fa2a l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
0001faea l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
0001fc4e l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
0001fe0c l     F .text	000000ac ble_ll_ctrl_proc_unk_rsp
0001feb8 l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
0001fef0 l     F .text	00000060 ble_ll_ctrl_rx_version_ind
0001ff50 l     F .text	00000046 ble_ll_ctrl_rx_start_enc_rsp
0001ff96 l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
0001ffa0 l     F .text	00000056 ble_ll_ctrl_rx_conn_param_req
0001fff6 l     F .text	00000074 ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
00020480 l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
00020484 l     F .text	00000020 ble_ll_hci_rd_local_version
000204a4 l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
000204c0 l     F .text	00000018 ble_ll_hci_rd_bd_addr
000204d8 l     F .text	0000001c ble_ll_hci_set_le_event_mask
000204f4 l     F .text	00000018 ble_ll_hci_le_read_bufsize
0002050c l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
00020524 l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
00020544 l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
00020590 l     F .text	0000001c ble_ll_read_rf_path_compensation
000205ac l     F .text	0000001c ble_ll_hci_cb_set_event_mask
000205c8 l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
000205e4 l     F .text	00000010 ble_ll_hci_disconnect
000205f4 l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
00020616 l     F .text	0000004c ble_ll_hci_ctlr_bb_cmd_proc
00020664 l     F .text	0000004c ble_ll_hci_rd_local_supp_cmd
000206b0 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
0002070a l     F .text	00000016 ble_ll_hci_status_params_cmd_proc
00020720 l     F .text	00000016 ble_ll_hci_le_read_local_features
00020736 l     F .text	00000042 ble_ll_hci_le_encrypt
00020778 l     F .text	00000012 ble_ll_hci_le_rand
0002078a l     F .text	00000016 ble_ll_hci_le_read_supp_states
000207a0 l     F .text	00000060 ble_ll_hci_le_wr_sugg_data_len
00020800 l     F .text	00000020 ble_ll_read_tx_power
00020820 l     F .text	00000064 ble_ll_write_rf_path_compensation
00020884 l     F .text	0000028e ble_ll_hci_le_cmd_proc
00020b48 l     F .text	00000148 ble_ll_hci_cmd_proc
100024fc l     O .bss	00000010 g_ble_ll_hci_cmd_ev
10002510 l     O .bss	00000008 g_ble_ll_hci_event_mask
10002518 l     O .bss	00000008 g_ble_ll_hci_event_mask2
10002520 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
10002528 l     O .bss	00000002 rx_path_pwr_compensation
1000252a l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_hci_vs.c
00021088 l     F .text	00000018 ble_ll_hci_vs_find_by_ocf
000210a0 l     F .text	0000002c ble_ll_hci_vs_is_controller_busy
000210cc l     F .text	00000048 ble_ll_hci_vs_set_tx_power
00021114 l     F .text	00000032 ble_ll_hci_vs_rd_static_addr
1000252c l     O .bss	00000004 g_ble_ll_hci_vs_list
100002a8 l     O .data	00000018 g_ble_ll_hci_vs_cmds
00000000 l    df *ABS*	00000000 ble_ll_rand.c
1000255c l     O .bss	00000006 xsubi.20469
100002c0 l     O .data	00000001 init.20470
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
0002134c l     F .text	00000018 ble_ll_resolv_irk_nonzero
00021364 l     F .text	0000000e ble_ll_is_controller_busy
00021374 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
00021394 l     F .text	00000040 ble_ll_is_on_resolv_list
000213d4 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
0002144c l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
10002664 l     O .bss	00000001 enabled.20605
00000000 l    df *ABS*	00000000 ble_ll_sched.c
00021970 l     F .text	00000004 preempt_any
00021974 l     F .text	00000004 preempt_none
00021978 l     F .text	00000030 preempt_any_except_conn
000219a8 l     F .text	00000024 ble_ll_sched_overlaps_current
000219cc l     F .text	00000060 ble_ll_sched_preempt
00021a2c l     F .text	00000138 ble_ll_sched_insert
00021b64 l     F .text	00000074 ble_ll_sched_execute_item
00021bd8 l     F .text	00000054 ble_ll_sched_run
10002668 l     O .bss	00000008 g_ble_ll_sched_q
10002670 l     O .bss	00000001 g_ble_ll_sched_q_head_changed
10002674 l     O .bss	00000018 g_ble_ll_sched_timer
00000000 l    df *ABS*	00000000 ble_ll_utils.c
00034764 l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
0002209c l     F .text	00000004 ble_ll_whitelist_search
000220a0 l     F .text	0000000e ble_ll_whitelist_chg_allowed
00000000 l    df *ABS*	00000000 ble_hw.c
1000268c l     O .bss	00000004 rng_cb
10002690 l     O .bss	00000001 rng_started
00000000 l    df *ABS*	00000000 ble_phy.c
100026f0 l     O .bss	00000101 g_ble_phy_tx_buf
00000000 l    df *ABS*	00000000 ble_att.c
0002231c l     F .text	00000028 ble_att_rx_dispatch_entry_find
00022344 l     F .text	000001f4 ble_att_inc_rx_stat
00022538 l     F .text	00000032 ble_att_rx_handle_unknown_request
0002256a l     F .text	00000084 ble_att_rx
100027f2 l     O .bss	00000002 ble_att_preferred_mtu_val
0003477c l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
00022ab4 l     F .text	00000010 ble_att_svr_next_id
00022ac4 l     F .text	00000024 ble_att_svr_prep_find_prev
00022ae8 l     F .text	0000005c ble_att_svr_prep_validate
00022b44 l     F .text	00000020 ble_att_svr_entry_alloc
00022b64 l     F .text	0000001a ble_att_svr_get_sec_state
00022b7e l     F .text	0000010c ble_att_svr_check_perms
00022c8a l     F .text	00000062 ble_att_svr_read
00022cec l     F .text	00000064 ble_att_svr_write
00022d50 l     F .text	00000018 ble_att_svr_pullup_req_base
00022d68 l     F .text	0000006e ble_att_svr_build_mtu_rsp
00022dd6 l     F .text	00000024 ble_att_svr_pkt
00022dfa l     F .text	00000032 ble_att_svr_build_write_rsp
00022e2c l     F .text	00000032 ble_att_svr_build_indicate_rsp
00022e60 l     F .text	0000009c ble_att_svr_fill_info
00022efc l     F .text	0000005e ble_att_svr_build_find_info_rsp
00022f5a l     F .text	00000050 ble_att_svr_read_group_type_entry_write
00022faa l     F .text	00000024 ble_att_svr_is_valid_find_group_type
00022fce l     F .text	00000058 ble_att_svr_is_valid_group_end
00023026 l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0002303c l     F .text	0000005c ble_att_svr_read_flat
00023098 l     F .text	0000005c ble_att_svr_fill_type_value_entry
000230f4 l     F .text	000000e8 ble_att_svr_fill_type_value
000231dc l     F .text	0000005e ble_att_svr_build_find_type_value_rsp
0002323a l     F .text	00000034 ble_att_svr_service_uuid
00023270 l     F .text	00000178 ble_att_svr_build_read_group_type_rsp
000233e8 l     F .text	0000001c ble_att_svr_prep_free
00023404 l     F .text	0000003c ble_att_svr_prep_alloc
00023440 l     F .text	0000007a ble_att_svr_insert_prep_entry
000234ba l     F .text	00000048 ble_att_svr_prep_extract
00023504 l     F .text	00000014 ble_att_svr_free_start_mem
0002358c l     F .text	00000030 ble_att_svr_write_handle
000235bc l     F .text	00000064 ble_att_svr_prep_write
00023658 l     F .text	0000013e ble_att_svr_build_read_type_rsp
000237dc l     F .text	000000a4 ble_att_svr_build_read_mult_rsp
000238b0 l     F .text	000000ac ble_att_svr_tx_rsp
100028d8 l     O .bss	00000004 ble_att_svr_entry_mem
100028dc l     O .bss	0000001c ble_att_svr_entry_pool
100028f8 l     O .bss	00000008 ble_att_svr_hidden_list
10002900 l     O .bss	00000002 ble_att_svr_id
10002904 l     O .bss	00000008 ble_att_svr_list
1000290c l     O .bss	00000300 ble_att_svr_prep_entry_mem
10002c0c l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_gap.c
000240f4 l     F .text	0000002a ble_gap_call_event_cb
00024120 l     F .text	00000024 ble_gap_is_preempted
00024144 l     F .text	00000010 ble_gap_has_client
00024154 l     F .text	00000012 ble_gap_update_to_l2cap
00024168 l     F .text	00000014 ble_gap_adv_active_instance
0002417c l     F .text	00000020 ble_gap_accept_master_conn
0002419c l     F .text	0000003c ble_gap_accept_slave_conn
000241d8 l     F .text	00000028 ble_gap_adv_type
00024200 l     F .text	00000032 ble_gap_adv_dflt_itvls
00024234 l     F .text	00000024 ble_gap_update_entry_find
00024258 l     F .text	00000046 ble_gap_validate_conn_params
000242a0 l     F .text	00000020 ble_gap_event_listener_call
000242c0 l     F .text	00000034 ble_gap_extract_conn_cb
000242f4 l     F .text	00000022 ble_gap_call_conn_event_cb
00024316 l     F .text	0000009a ble_gap_fill_conn_desc
000243b0 l     F .text	00000016 ble_gap_conn_to_snapshot
000243c6 l     F .text	00000028 ble_gap_find_snapshot
000243ee l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0002440c l     F .text	0000001a ble_gap_conn_cancel_tx
00024426 l     F .text	00000024 ble_gap_adv_enable_tx
0002444a l     F .text	00000094 ble_gap_adv_params_tx
000244de l     F .text	00000042 ble_gap_tx_param_pos_reply
00024520 l     F .text	00000022 ble_gap_tx_param_neg_reply
00024542 l     F .text	00000042 ble_gap_update_tx
00024584 l     F .text	00000030 ble_gap_update_entry_remove
000245b4 l     F .text	00000020 ble_gap_slave_reset_state
000245d4 l     F .text	0000002c ble_gap_slave_extract_cb
00024600 l     F .text	00000038 ble_gap_adv_finished
00024638 l     F .text	00000028 ble_gap_master_reset_state
00024660 l     F .text	00000030 ble_gap_master_extract_state
00024690 l     F .text	00000038 ble_gap_master_connect_failure
000246c8 l     F .text	00000024 ble_gap_master_failed
000246ec l     F .text	00000046 ble_gap_master_connect_cancelled
00024734 l     F .text	00000014 ble_gap_update_entry_free
00024748 l     F .text	00000034 ble_gap_master_ticks_until_exp
0002477c l     F .text	0000003c ble_gap_update_next_exp
000247b8 l     F .text	0000003c ble_gap_update_timer
000247f4 l     F .text	00000034 ble_gap_slave_ticks_until_exp
00024828 l     F .text	0000002c ble_gap_slave_timer
00024854 l     F .text	00000020 ble_gap_slave_set_timer
00024874 l     F .text	00000074 ble_gap_log_adv
000248e8 l     F .text	00000030 ble_gap_log_update
00024918 l     F .text	0000004c ble_gap_master_timer
00024964 l     F .text	00000084 ble_gap_adv_validate
000249e8 l     F .text	00000024 ble_gap_update_entry_alloc
00024e50 l     F .text	00000044 ble_gap_adv_stop_no_lock
00024e9c l     F .text	0000004c ble_gap_conn_cancel_no_lock
00024f7c l     F .text	0000003e ble_gap_update_notify
000251a8 l     F .text	0000002c ble_gap_update_l2cap_cb
000251d4 l     F .text	00000034 ble_gap_update_failed
10002c28 l     O .bss	00000004 ble_gap_event_listener_list
10002cb4 l     O .bss	00000004 ble_gap_update_entries
10002cb8 l     O .bss	00000018 ble_gap_update_entry_mem
10002cd0 l     O .bss	0000001c ble_gap_update_entry_pool
10002cec l     O .bss	00000010 ble_gap_slave
10002cfc l     O .bss	00000014 ble_gap_master
10002d10 l     O .bss	0000000c preempt_done_mutex
10002d1c l     O .bss	00000008 slaves.24108
00000000 l    df *ABS*	00000000 ble_gattc.c
00025868 l     F .text	0000000c ble_gattc_err_dispatch_get
00025874 l     F .text	0000000c ble_gattc_resume_dispatch_get
00025880 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0002588c l     F .text	00000024 ble_gattc_proc_matches_conn_op
000258b0 l     F .text	0000001e ble_gattc_proc_matches_expired
000258ce l     F .text	00000008 ble_gattc_proc_matches_stalled
000258d6 l     F .text	00000014 ble_gattc_proc_timeout
000258ec l     F .text	0000001c ble_gattc_error
00025908 l     F .text	00000038 ble_gattc_mtu_cb
00025940 l     F .text	0000000e ble_gattc_mtu_tmo
0002594e l     F .text	0000000a ble_gattc_mtu_err
00025958 l     F .text	00000038 ble_gattc_disc_all_svcs_cb
00025990 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0002599e l     F .text	00000016 ble_gattc_disc_all_svcs_err
000259b4 l     F .text	00000038 ble_gattc_disc_svc_uuid_cb
000259ec l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
000259fa l     F .text	00000014 ble_gattc_disc_svc_uuid_err
00025a10 l     F .text	00000038 ble_gattc_find_inc_svcs_cb
00025a48 l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
00025a56 l     F .text	00000018 ble_gattc_find_inc_svcs_err
00025a70 l     F .text	00000038 ble_gattc_disc_all_chrs_cb
00025aa8 l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
00025ab6 l     F .text	00000014 ble_gattc_disc_all_chrs_err
00025acc l     F .text	00000038 ble_gattc_disc_chr_uuid_cb
00025b04 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
00025b12 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
00025b28 l     F .text	00000040 ble_gattc_disc_all_dscs_cb
00025b68 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
00025b76 l     F .text	00000014 ble_gattc_disc_all_dscs_err
00025b8c l     F .text	00000038 ble_gattc_read_cb
00025bc4 l     F .text	0000000e ble_gattc_read_tmo
00025bd2 l     F .text	0000000a ble_gattc_read_err
00025bdc l     F .text	00000038 ble_gattc_read_uuid_cb
00025c14 l     F .text	0000000e ble_gattc_read_uuid_tmo
00025c22 l     F .text	0000000a ble_gattc_read_uuid_err
00025c2c l     F .text	00000038 ble_gattc_read_long_cb
00025c64 l     F .text	0000000e ble_gattc_read_long_tmo
00025c72 l     F .text	0000000a ble_gattc_read_long_err
00025c7c l     F .text	00000054 ble_gattc_read_mult_cb
00025cd0 l     F .text	0000000e ble_gattc_read_mult_tmo
00025cde l     F .text	0000000a ble_gattc_read_mult_err
00025ce8 l     F .text	00000038 ble_gattc_write_long_cb
00025d20 l     F .text	0000000c ble_gattc_write_long_tmo
00025d2c l     F .text	00000044 ble_gattc_write_reliable_cb
00025d70 l     F .text	0000000c ble_gattc_write_reliable_tmo
00025d7c l     F .text	0000002c ble_gattc_proc_set_resume_timer
00025da8 l     F .text	00000014 ble_gattc_process_resume_status
00025dbc l     F .text	00000010 ble_gattc_proc_set_exp_timer
00025dcc l     F .text	00000028 ble_gattc_ticks_until_resume
00025df4 l     F .text	00000078 ble_gattc_extract
00025e6c l     F .text	0000002c ble_gattc_extract_expired
00025e98 l     F .text	00000014 ble_gattc_extract_stalled
00025eac l     F .text	00000020 ble_gattc_extract_by_conn_op
00025ecc l     F .text	00000014 ble_gattc_extract_first_by_conn_op
00025ee0 l     F .text	00000020 ble_gattc_proc_insert
00025f00 l     F .text	00000010 ble_gattc_indicate_tmo
00025f10 l     F .text	00000044 ble_gattc_write_cb
00025f54 l     F .text	0000000c ble_gattc_write_tmo
00025f60 l     F .text	00000008 ble_gattc_write_err
00025f68 l     F .text	00000014 ble_gattc_proc_free
00025f7c l     F .text	0000003e ble_gattc_fail_procs
00025fba l     F .text	00000020 ble_gattc_write_reliable_err
00025fda l     F .text	0000002a ble_gattc_write_long_err
00026004 l     F .text	0000008a ble_gattc_write_reliable_tx
0002608e l     F .text	00000024 ble_gattc_write_reliable_resume
000260b2 l     F .text	0000006e ble_gattc_write_long_tx
00026120 l     F .text	00000024 ble_gattc_write_long_resume
00026144 l     F .text	0000001a ble_gattc_read_long_tx
0002615e l     F .text	00000026 ble_gattc_read_long_resume
00026184 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
00026196 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
000261bc l     F .text	00000024 ble_gattc_disc_chr_uuid_tx
000261e0 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
00026208 l     F .text	00000024 ble_gattc_disc_all_chrs_tx
0002622c l     F .text	00000026 ble_gattc_disc_all_chrs_resume
00026254 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
00026284 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
000262aa l     F .text	00000038 ble_gattc_disc_svc_uuid_tx
000262e2 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
00026308 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
00026330 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
00026356 l     F .text	00000026 ble_gattc_process_status
0002637c l     F .text	0000003c ble_gattc_resume_procs
000263b8 l     F .text	0000001c ble_gattc_proc_alloc
000263d4 l     F .text	00000014 ble_gattc_log_proc_init
000263e8 l     F .text	00000020 ble_gattc_log_notify
00026408 l     F .text	00000020 ble_gattc_log_indicate
00026428 l     F .text	00000028 ble_gattc_indicate_err
00026450 l     F .text	00000024 ble_gattc_indicate_rx_rsp
10002d24 l     O .bss	000000e0 ble_gattc_proc_mem
10002e04 l     O .bss	0000001c ble_gattc_proc_pool
10002e20 l     O .bss	00000008 ble_gattc_procs
10002e28 l     O .bss	00000004 ble_gattc_resume_at
10002ec4 l     O .bss	00000004 error.23837
00034ba8 l     O .text	0000003c ble_gattc_err_dispatch
00034be4 l     O .text	0000003c ble_gattc_resume_dispatch
00034c20 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
00026704 l     F .text	00000016 ble_gatts_chr_clt_cfg_allowed
0002671a l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
00026770 l     F .text	00000056 ble_gatts_chr_properties
000267c6 l     F .text	00000014 ble_gatts_chr_is_sane
000267da l     F .text	0000000c ble_gatts_chr_op
000267e8 l     F .text	00000020 ble_gatts_chr_inc_val_stat
00026808 l     F .text	0000002c ble_gatts_find_svc_entry_idx
00026834 l     F .text	00000040 ble_gatts_svc_incs_satisfied
00026874 l     F .text	0000000c ble_gatts_dsc_op
00026880 l     F .text	00000024 ble_gatts_dsc_inc_stat
000268a4 l     F .text	00000014 ble_gatts_dsc_is_sane
000268b8 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
000268dc l     F .text	00000018 ble_gatts_clt_cfg_find
000268f4 l     F .text	00000024 ble_gatts_svc_type_to_uuid
00026918 l     F .text	0000001a ble_gatts_svc_is_sane
00026934 l     F .text	0000000c ble_gatts_clt_cfg_size
00026940 l     F .text	00000038 ble_gatts_schedule_update
00026978 l     F .text	000000e8 ble_gatts_count_resources
00026a60 l     F .text	000000f4 ble_gatts_clt_cfg_access_locked
00026b54 l     F .text	00000032 ble_gatts_subscribe_event
00026c14 l     F .text	00000028 ble_gatts_register_inc
00026fac l     F .text	00000058 ble_gatts_inc_access
00026c3c l     F .text	00000034 ble_gatts_register_clt_cfg_dsc
00026c70 l     F .text	00000064 ble_gatts_register_dsc
000270de l     F .text	00000038 ble_gatts_dsc_access
00026cd4 l     F .text	00000108 ble_gatts_register_chr
00026f50 l     F .text	0000005c ble_gatts_chr_def_access
000270a6 l     F .text	00000038 ble_gatts_chr_val_access
00026ddc l     F .text	000000cc ble_gatts_register_svc
00026f1c l     F .text	00000034 ble_gatts_svc_access
00026ea8 l     F .text	00000074 ble_gatts_register_round
00027004 l     F .text	000000a2 ble_gatts_val_access
00027116 l     F .text	0000002a ble_gatts_mutable
00027140 l     F .text	00000024 ble_gatts_free_mem
00027164 l     F .text	0000001c ble_gatts_free_svc_defs
00027180 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
10002ec8 l     O .bss	00000004 ble_gatts_clt_cfg_mem
10002ecc l     O .bss	0000001c ble_gatts_clt_cfg_pool
10002ee8 l     O .bss	00000004 ble_gatts_clt_cfgs
10002eec l     O .bss	00000004 ble_gatts_num_cfgable_chrs
10002ef0 l     O .bss	00000004 ble_gatts_num_svc_defs
10002ef4 l     O .bss	00000002 ble_gatts_num_svc_entries
10002f2c l     O .bss	00000004 ble_gatts_svc_defs
10002f30 l     O .bss	00000004 ble_gatts_svc_entries
100002c4 l     O .data	00000004 __compound_literal.0
100002c8 l     O .data	00000004 __compound_literal.1
100002cc l     O .data	00000004 __compound_literal.2
100002d0 l     O .data	00000004 __compound_literal.3
100002d4 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
000277f4 l     F .text	00000048 ble_hs_wakeup_tx_conn
0002783c l     F .text	00000018 ble_hs_event_rx_hci_ev
00027854 l     F .text	0000001c ble_hs_clear_rx_queue
00027870 l     F .text	0000002c ble_hs_rx_data
0002789c l     F .text	00000008 ble_hs_event_tx_notify
000278b0 l     F .text	00000014 ble_hs_sched_start_stage2
000278c4 l     F .text	00000008 ble_hs_event_start_stage1
0002794c l     F .text	00000008 ble_hs_event_rx_data
000279a4 l     F .text	00000020 ble_hs_timer_reset
000279c4 l     F .text	00000030 ble_hs_timer_sched
000279f4 l     F .text	00000064 ble_hs_sync
00027a58 l     F .text	00000050 ble_hs_reset
00027aa8 l     F .text	00000008 ble_hs_event_reset
00027ab0 l     F .text	00000054 ble_hs_timer_exp
00027bf4 l     F .text	0000001e ble_hs_event_start_stage2
10002f38 l     O .bss	00000010 ble_hs_ev_reset
10002f48 l     O .bss	00000010 ble_hs_ev_start_stage1
10002f58 l     O .bss	00000010 ble_hs_ev_start_stage2
10002f68 l     O .bss	00000010 ble_hs_ev_tx_notifications
10002f78 l     O .bss	00000004 ble_hs_evq
10002f98 l     O .bss	000000a0 ble_hs_hci_os_event_buf
10003040 l     O .bss	0000000c ble_hs_mutex
1000304c l     O .bss	00000004 ble_hs_parent_task
10003050 l     O .bss	00000004 ble_hs_reset_reason
10003054 l     O .bss	00000018 ble_hs_rx_q
100030a8 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00027e84 l     F .text	00000062 ble_hs_adv_set_hdr
00027ee6 l     F .text	00000050 ble_hs_adv_set_flat_mbuf
00027f36 l     F .text	00000068 ble_hs_adv_set_array_uuid16
00027f9e l     F .text	0000006c ble_hs_adv_set_array_uuid128
0002800a l     F .text	00000072 ble_hs_adv_set_array_uuid32
0002807c l     F .text	00000072 ble_hs_adv_set_array16
000280ee l     F .text	000002ce adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
100030c8 l     O .bss	00000064 ble_hs_conn_elem_mem
1000312c l     O .bss	0000001c ble_hs_conn_pool
10003148 l     O .bss	00000004 ble_hs_conns
00034ce0 l     O .text	00000006 ble_hs_conn_null_addr
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00028850 l     F .text	00000058 ble_hs_flow_inc_completed_pkts
000288a8 l     F .text	0000003c ble_hs_flow_acl_free
000288e4 l     F .text	00000046 ble_hs_flow_tx_num_comp_pkts
0002892c l     F .text	0000002c ble_hs_flow_event_cb
1000314c l     O .bss	00000010 ble_hs_flow_ev
1000315c l     O .bss	00000008 ble_hs_flow_mbuf_conn_handle
10003164 l     O .bss	00000002 ble_hs_flow_num_completed_pkts
10003168 l     O .bss	00000020 ble_hs_flow_timer
00000000 l    df *ABS*	00000000 ble_hs_hci.c
00028a34 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
00028a7e l     F .text	00000024 ble_hs_hci_rx_cmd_status
00028aa4 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
00028ab0 l     F .text	00000014 ble_hs_hci_lock
00028ac4 l     F .text	00000010 ble_hs_hci_unlock
00028ad4 l     F .text	0000002c ble_hs_hci_wait_for_ack
00028b00 l     F .text	00000090 ble_hs_hci_process_ack
00028b90 l     F .text	00000024 ble_hs_hci_rx_ack
00028bb4 l     F .text	00000020 ble_hs_hci_frag_alloc
00028bd4 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
10003188 l     O .bss	00000004 ble_hs_hci_ack
1000318e l     O .bss	00000002 ble_hs_hci_buf_sz
10003190 l     O .bss	0000012c ble_hs_hci_frag_data
100032bc l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
100032c8 l     O .bss	0000001c ble_hs_hci_frag_mempool
100032e4 l     O .bss	0000000c ble_hs_hci_mutex
100032f0 l     O .bss	00000008 ble_hs_hci_sem
100032f8 l     O .bss	00000004 ble_hs_hci_sup_feat
100032fc l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00028e64 l     F .text	00000018 ble_hs_hci_cmd_transport
00028e7c l     F .text	00000038 ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00028eec l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00028f10 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00028f24 l     F .text	00000026 ble_hs_hci_evt_le_meta
00028f4a l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
00028f96 l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00028f9a l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00028f9e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00028fa2 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00028fa6 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00028faa l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00028fae l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00028fb2 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00028fb6 l     F .text	00000014 ble_hs_hci_evt_hw_error
00028fca l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
00028fde l     F .text	00000014 ble_hs_hci_evt_encrypt_change
00028ff2 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00029024 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
00029086 l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
0002909a l     F .text	00000082 ble_hs_hci_evt_le_dir_adv_rpt
0002911c l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
0002919a l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
00029220 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
00029286 l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
0002929a l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
000292ae l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
000292c2 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00034cf8 l     O .text	00000030 ble_hs_hci_evt_dispatch
00034d28 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
00029588 l     F .text	00000038 ble_hs_id_addr_type_usable
10003300 l     O .bss	00000006 ble_hs_id_pub
10003308 l     O .bss	00000006 ble_hs_id_rnd
00034dac l     O .text	00000002 priv_addr_types.23229
00034db0 l     O .text	00000002 pub_addr_types.23228
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
000296a4 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
00029738 l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
00029868 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
00029896 l     F .text	0000001a ble_hs_pvcy_clear_entries
000298b0 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
00029970 l     F .text	00000084 ble_hs_pvcy_add_entry_hci
10003310 l     O .bss	00000010 ble_hs_pvcy_irk
10003320 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00029aa4 l     F .text	0000001a ble_hs_startup_reset_tx
00029abe l     F .text	0000002c ble_hs_startup_le_read_buf_sz_tx
00029aea l     F .text	0000002c ble_hs_startup_read_buf_sz_tx
00029b16 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00029b40 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00029b98 l     F .text	00000046 ble_hs_startup_le_set_evmask_tx
00029bde l     F .text	00000060 ble_hs_startup_read_buf_sz
00029c3e l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00029c66 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00029ce4 l     F .text	00000044 ble_hs_stop_done
00029d28 l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
10003321 l     O .bss	00000001 ble_hs_stop_conn_cnt
10003324 l     O .bss	0000000c ble_hs_stop_gap_listener
10003330 l     O .bss	00000004 ble_hs_stop_listeners
10003334 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00029d64 l     F .text	00000012 ble_l2cap_get_mtu
00029d76 l     F .text	00000020 ble_l2cap_append_rx
00029e76 l     F .text	0000004c ble_l2cap_rx_payload
10003354 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
0002a02c l     F .text	0000001c ble_l2cap_sig_next_id
0002a048 l     F .text	00000014 ble_l2cap_sig_dispatch_get
0002a05c l     F .text	0000002c ble_l2cap_sig_proc_matches
0002a088 l     F .text	00000004 ble_l2cap_sig_rx_noop
0002a08c l     F .text	00000020 ble_l2cap_sig_update_call_cb
0002a0ac l     F .text	00000024 ble_l2cap_sig_proc_insert
0002a0d0 l     F .text	00000068 ble_l2cap_sig_proc_extract
0002a138 l     F .text	00000020 ble_l2cap_sig_proc_alloc
0002a158 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
0002a16c l     F .text	00000058 ble_l2cap_sig_extract_expired
0002a1c4 l     F .text	00000014 ble_l2cap_sig_proc_free
0002a1d8 l     F .text	00000018 ble_l2cap_sig_process_status
0002a1f0 l     F .text	00000014 ble_l2cap_sig_rx_reject
0002a204 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
0002a250 l     F .text	00000084 ble_l2cap_sig_rx
0002a2d4 l     F .text	0000009c ble_l2cap_sig_update_req_rx
100033f8 l     O .bss	00000001 ble_l2cap_sig_cur_id
100033fc l     O .bss	00000014 ble_l2cap_sig_proc_mem
10003410 l     O .bss	0000001c ble_l2cap_sig_proc_pool
1000342c l     O .bss	00000008 ble_l2cap_sig_procs
00034e6c l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
0002a5e8 l     F .text	00000014 ble_sm_dispatch_get
0002a5fc l     F .text	00000028 ble_sm_proc_remove
0002a624 l     F .text	00000038 ble_sm_proc_matches
0002a65c l     F .text	00000018 ble_sm_insert
0002a674 l     F .text	0000000c ble_sm_rx_noop
0002a680 l     F .text	00000028 ble_sm_build_authreq
0002a6a8 l     F .text	00000022 ble_sm_key_dist
0002a6ca l     F .text	00000004 ble_sm_chk_store_overflow_by_type
0002a6ce l     F .text	00000018 ble_sm_chk_store_overflow
0002a6e6 l     F .text	00000010 ble_sm_state_after_pair
0002a6f8 l     F .text	00000024 ble_sm_pair_base_fill
0002a71c l     F .text	00000020 ble_sm_pair_req_fill
0002a73c l     F .text	00000028 ble_sm_pair_rsp_fill
0002a764 l     F .text	00000004 ble_sm_verify_auth_requirements
0002a768 l     F .text	0000000a ble_sm_gen_ediv
0002a772 l     F .text	0000000c ble_sm_gen_master_id_rand
0002a77e l     F .text	0000000c ble_sm_gen_csrk
0002a78a l     F .text	00000014 ble_sm_io_action
0002a79e l     F .text	000000b2 ble_sm_pair_cfg
0002a850 l     F .text	00000026 ble_sm_gen_ltk
0002a878 l     F .text	0000003c ble_sm_exec
0002a8b4 l     F .text	00000034 ble_sm_sec_req_exec
0002a8e8 l     F .text	000000e6 ble_sm_fill_store_value
0002a9ce l     F .text	0000004a ble_sm_update_sec_state
0002aa18 l     F .text	00000032 ble_sm_key_exch_success
0002aa4a l     F .text	0000027c ble_sm_key_exch_exec
0002acc6 l     F .text	0000001e ble_sm_key_rxed
0002ace4 l     F .text	00000040 ble_sm_start_encrypt_tx
0002ad24 l     F .text	0000000e ble_sm_enc_restore_exec
0002ad32 l     F .text	00000044 ble_sm_enc_start_exec
0002ad76 l     F .text	00000046 ble_sm_ltk_req_reply_tx
0002adbc l     F .text	00000024 ble_sm_ltk_start_exec
0002ade0 l     F .text	0000002c ble_sm_ltk_req_neg_reply_tx
0002ae0c l     F .text	0000004e ble_sm_ltk_restore_exec
0002ae5a l     F .text	00000012 ble_sm_random_exec
0002ae6c l     F .text	00000012 ble_sm_confirm_exec
0002ae7e l     F .text	00000014 ble_sm_proc_set_timer
0002ae94 l     F .text	00000070 ble_sm_extract_expired
0002af04 l     F .text	00000038 ble_sm_pair_fail_tx
0002af3c l     F .text	000000e8 ble_sm_persist_keys
0002b024 l     F .text	00000014 ble_sm_proc_free
0002b038 l     F .text	00000020 ble_sm_proc_alloc
0002b058 l     F .text	00000044 ble_sm_retrieve_ltk
0002b09c l     F .text	0000002a ble_sm_fail_rx
0002b0c6 l     F .text	00000040 ble_sm_read_bond
0002b106 l     F .text	0000007e ble_sm_chk_repeat_pairing
0002b24c l     F .text	00000080 ble_sm_sign_info_rx
0002b2cc l     F .text	0000007a ble_sm_id_addr_info_rx
0002b346 l     F .text	00000080 ble_sm_id_info_rx
0002b3c6 l     F .text	0000007a ble_sm_master_id_rx
0002b440 l     F .text	00000086 ble_sm_enc_info_rx
0002b4c6 l     F .text	0000013a ble_sm_pair_req_rx
0002b65a l     F .text	000000ae ble_sm_confirm_rx
0002b708 l     F .text	000000d6 ble_sm_pair_rsp_rx
0002b8c2 l     F .text	00000108 ble_sm_enc_event_rx
0002b9cc l     F .text	00000078 ble_sm_rx
0002bb64 l     F .text	000000a4 ble_sm_pair_exec
0002bc18 l     F .text	0000006c ble_sm_random_rx
0002bde4 l     F .text	000000dc ble_sm_sec_req_rx
10003434 l     O .bss	00000100 ble_sm_proc_mem
10003534 l     O .bss	0000001c ble_sm_proc_pool
10003550 l     O .bss	00000008 ble_sm_procs
00034f14 l     O .text	0000003c ble_sm_dispatch
00034f50 l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_lgcy.c
0002bfac l     F .text	0000003e ble_sm_gen_stk
00034f7c l     O .text	00000019 ble_sm_lgcy_init_ioa
00034f98 l     O .text	00000019 ble_sm_lgcy_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
0002c250 l     F .text	00000018 ble_store_status
0002c314 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
0002c478 l     F .text	0000005c ble_store_util_iter_unique_peer
00000000 l    df *ABS*	00000000 ble_uuid.c
0003500c l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_sm_alg.c
0002c7ea l     F .text	0000001c ble_sm_alg_xor_128
0002c806 l     F .text	00000048 ble_sm_alg_encrypt
00000000 l    df *ABS*	00000000 ble_svc_ans.c
0002c994 l     F .text	00000074 ble_svc_ans_new_alert_notify
0002ca08 l     F .text	0000002c ble_svc_ans_unr_alert_notify
0002ca34 l     F .text	00000026 ble_svc_ans_chr_write
0002ca5c l     F .text	00000200 ble_svc_ans_access
10003558 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
1000355a l     O .bss	00000002 ble_svc_ans_conn_handle
1000355c l     O .bss	00000001 ble_svc_ans_new_alert_cat
10003560 l     O .bss	00000008 ble_svc_ans_new_alert_cnt
10003568 l     O .bss	00000014 ble_svc_ans_new_alert_val
1000357c l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
1000357e l     O .bss	00000002 ble_svc_ans_new_alert_val_len
10003580 l     O .bss	00000001 ble_svc_ans_unr_alert_cat
10003584 l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
1000358c l     O .bss	00000002 ble_svc_ans_unr_alert_stat
1000358e l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
10000300 l     O .data	00000004 __compound_literal.0
10000304 l     O .data	00000004 __compound_literal.1
10000308 l     O .data	00000004 __compound_literal.2
1000030c l     O .data	00000004 __compound_literal.3
10000310 l     O .data	00000004 __compound_literal.4
10000314 l     O .data	00000004 __compound_literal.5
10000318 l     O .data	00000090 __compound_literal.6
0003501c l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_dis.c
0002cce0 l     F .text	00000060 ble_svc_dis_access
100003a8 l     O .data	00000004 __compound_literal.0
100003ac l     O .data	00000004 __compound_literal.1
100003b0 l     O .data	00000004 __compound_literal.2
100003b4 l     O .data	00000048 __compound_literal.3
00035054 l     O .text	00000020 ble_svc_dis_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
0002cdc0 l     F .text	00000016 ble_svc_gap_device_name_write_access
0002cdd6 l     F .text	00000016 ble_svc_gap_appearance_write_access
0002cdec l     F .text	00000024 ble_svc_gap_device_name_read_access
0002ce10 l     F .text	00000028 ble_svc_gap_appearance_read_access
0002ce38 l     F .text	00000098 ble_svc_gap_access
10003590 l     O .bss	00000002 ble_svc_gap_appearance
10000418 l     O .data	00000004 __compound_literal.0
1000041c l     O .data	00000004 __compound_literal.1
10000420 l     O .data	00000004 __compound_literal.2
10000424 l     O .data	00000048 __compound_literal.3
1000046c l     O .data	00000020 ble_svc_gap_name
00035074 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
0002cf4c l     F .text	00000068 ble_svc_gatt_access
10003592 l     O .bss	00000002 ble_svc_gatt_changed_val_handle
10003594 l     O .bss	00000002 ble_svc_gatt_end_handle
10003596 l     O .bss	00000002 ble_svc_gatt_start_handle
1000048c l     O .data	00000004 __compound_literal.0
10000490 l     O .data	00000004 __compound_literal.1
10000494 l     O .data	00000030 __compound_literal.2
00035094 l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
0002d028 l     F .text	00000098 ble_store_config_find_sec
0002d0c0 l     F .text	00000038 ble_store_config_read_peer_sec
0002d0f8 l     F .text	00000038 ble_store_config_read_our_sec
0002d130 l     F .text	00000084 ble_store_config_find_cccd
0002d1b4 l     F .text	00000028 ble_store_config_read_cccd
0002d1dc l     F .text	0000002e ble_store_config_print_key_sec
0002d24a l     F .text	00000046 ble_store_config_print_value_sec
0002d290 l     F .text	00000058 ble_store_config_write_peer_sec
0002d2e8 l     F .text	00000058 ble_store_config_write_our_sec
0002d340 l     F .text	0000004c ble_store_config_write_cccd
0002d3b4 l     F .text	00000022 ble_store_config_delete_obj
0002d3d6 l     F .text	00000024 ble_store_config_delete_sec
0002d3fc l     F .text	00000014 ble_store_config_delete_peer_sec
0002d410 l     F .text	00000014 ble_store_config_delete_our_sec
0002d424 l     F .text	00000028 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 addr.c
0002d4d0 l     F .text	0000003a ble_hs_util_load_rand_addr
0002d50a l     F .text	00000032 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 ble_hci_ram.c
10003808 l     O .bss	00000104 ble_hci_ram_cmd_buf
1000390c l     O .bss	0000001c ble_hci_ram_cmd_pool
10003928 l     O .bss	00000090 ble_hci_ram_evt_hi_buf
100039b8 l     O .bss	0000001c ble_hci_ram_evt_hi_pool
100039d4 l     O .bss	00000240 ble_hci_ram_evt_lo_buf
10003c14 l     O .bss	0000001c ble_hci_ram_evt_lo_pool
10003c30 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
10003c34 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
10003c38 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
10003c3c l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
10003c40 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
10003c44 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
10003c48 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
10003c4c l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 bootutil_public.c
0002d83c l     F .text	0000000a boot_flag_decode
0002d848 l     F .text	00000018 boot_magic_decode
0002d8b4 l     F .text	00000038 boot_read_flag
0003510c l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 aes_encrypt.c
00035168 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 base64.c
00035268 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
0002e4fc l     F .text	00000006 cbuf_buf_reader_get8
0002e502 l     F .text	00000014 cbor_buf_reader_cpy
0002e516 l     F .text	0000001a cbor_buf_reader_cmp
0002e530 l     F .text	0000001c cbuf_buf_reader_get64
0002e54c l     F .text	00000008 cbuf_buf_reader_get32
0002e554 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cbor_buf_writer.c
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
0002e5de l     F .text	0000001c cbor_mbuf_reader_cpy
0002e5fa l     F .text	0000001c cbor_mbuf_reader_get8
0002e616 l     F .text	00000018 cbor_mbuf_reader_cmp
0002e62e l     F .text	0000001e cbor_mbuf_reader_get64
0002e64c l     F .text	0000001a cbor_mbuf_reader_get32
0002e666 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
0002e710 l     F .text	00000094 create_container
0002e7a4 l     F .text	00000074 encode_string
00000000 l    df *ABS*	00000000 cborparser.c
0002e9ea l     F .text	00000024 is_fixed_type
0002ea0e l     F .text	00000004 iterate_noop
0002ea12 l     F .text	0000013c preparse_value
0002eb4e l     F .text	0000004a preparse_next_value
0002eb98 l     F .text	000000ba extract_length
0002ec52 l     F .text	00000172 iterate_string_chunks
0002edc4 l     F .text	000000f6 advance_internal
0002f18c l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 cborpretty.c
0002f250 l     F .text	00000028 hexDump
0002f278 l     F .text	0000022c utf8EscapedDump
0002f4a4 l     F .text	000003dc value_to_pretty
0002f880 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
0002fc0c l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
10003c54 l     O .bss	0000003c os_bsp_uart0
00035364 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
00030168 l     F .text	00000022 uart_hal_blocking_tx
0003018a l     F .text	00000022 uart_hal_start_rx
000301ac l     F .text	00000022 uart_hal_start_tx
000301ce l     F .text	0000002c uart_hal_resume
000301fa l     F .text	0000002c uart_hal_suspend
00030226 l     F .text	00000012 uart_hal_close
00030238 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00030328 l     F .text	0000001e hal_flash_check_addr
10003c90 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
000305fa l     F .text	0000000e apollo3_flash_sector_info
00030608 l     F .text	00000004 apollo3_flash_init
0003060c l     F .text	00000018 apollo3_flash_erase_sector
00030624 l     F .text	0000004c apollo3_flash_write_odd
00030670 l     F .text	000000ac apollo3_flash_write
0003071c l     F .text	0000000e apollo3_flash_read
00035380 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0003072c l     F .text	00000044 apollo2_os_tick_set_timer
00030770 l     F .text	00000048 apollo2_os_tick_handler
10003c94 l     O .bss	00000004 apollo2_os_tick_dur
10003c98 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00030854 l     F .text	00000010 apollo3_timer_resolve
00030864 l     F .text	00000040 apollo3_timer_tbl_find
000308a4 l     F .text	0000007c apollo3_timer_sdk_cfg
00030920 l     F .text	00000014 apollo3_timer_isr_cfg
00030934 l     F .text	0000000e apollo3_timer_cur_ticks
00030942 l     F .text	00000060 apollo3_timer_set_ocmp
000309a2 l     F .text	00000042 apollo3_timer_set_ocmp_at
000309e4 l     F .text	0000002c apollo3_timer_clear_ocmp
00030a10 l     F .text	00000058 apollo3_timer_chk_queue
00030a68 l     F .text	00000024 apollo3_timer_isr
10003c9c l     O .bss	00000004 nvic_configured.22009
100004c4 l     O .data	00000014 apollo3_timer_0
0003539c l     O .text	00000030 apollo3_timer_tbl_hfrc
000353cc l     O .text	00000028 apollo3_timer_tbl_lfrc
000353f4 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
00030c4c l     F .text	000000cc apollo3_uart_irqh_x
00030d18 l     F .text	0000000a apollo3_uart_irqh_0
00030d22 l     F .text	0000000a apollo3_uart_irqh_1
00030d2c l     F .text	00000030 apollo3_uart_irq_info
00030d5c l     F .text	0000003c apollo3_uart_set_nvic
10003da4 l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
000311c8 l     F .text	00000028 ctimer_clr
100004d8 l     O .data	00000010 g_ui8ClkSrc
00035444 l     O .text	00000020 g_ui32TMRAddrTbl
00035464 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
000315a8 l     F .text	0000000e pincfg_equ
00035488 l     O .text	00000032 g_ui8Bit76Capabilities
000354bc l     O .text	00000032 g_ui8Inpen
000354f0 l     O .text	000000c8 g_ui8NCEtable
000355b8 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0003182c l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00031a98 l     F .text	000000b0 config_baudrate
00031c00 l     F .text	00000084 buffer_configure
10003dd4 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0003219c l     F .text	00000004 malloc_lock_nop
000321a0 l     F .text	00000002 malloc_unlock_nop
000321a2 l     F .text	00000048 __malloc_from_block
000321ec l     F .text	00000064 __free_block
100004e8 l     O .data	00000018 __malloc_head
10000500 l     O .data	00000004 malloc_lock
10000504 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
00032338 l     F .text	00000004 stdin_read
0003233c l     F .text	00000010 stdout_write
10000508 l     O .data	00000004 _stdin
1000050c l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00032454 l     F .text	000000fc ui2a
00032550 l     F .text	00000028 i2a
00032578 l     F .text	00000030 a2d
000325a8 l     F .text	00000036 a2i
000325de l     F .text	00000024 putf
00032604 l     F .text	00000124 putchw
00032728 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 log_fcb.c
00032cd6 l     F .text	00000004 log_fcb_registered
00032cda l     F .text	0000000a log_fcb_flush
00032ce4 l     F .text	0000001e fcb_get_fa_hdr
00032d02 l     F .text	0000008a fcb_walk_back_find_start
00032d8c l     F .text	000000b6 log_fcb_find_gte
00032e42 l     F .text	00000068 log_fcb_walk_impl
00032eaa l     F .text	0000000a log_fcb_walk_area
00032eb4 l     F .text	0000000a log_fcb_walk
00032ebe l     F .text	0000002c log_fcb_write_mbuf
00032eea l     F .text	0000002a log_fcb_hdr_body_bytes
00032f14 l     F .text	0000002c log_fcb_read
00032f40 l     F .text	00000058 log_fcb_copy_entry
00033292 l     F .text	0000001c log_fcb_append
00032f98 l     F .text	00000040 log_fcb_copy
00032fd8 l     F .text	000000a0 log_fcb_rtr_erase
00033078 l     F .text	00000060 log_fcb_start_append
000330d8 l     F .text	00000094 log_fcb_append_mbuf_body
0003316c l     F .text	0000006a log_fcb_append_mbuf
000331d6 l     F .text	000000bc log_fcb_append_body
000332ae l     F .text	00000062 log_fcb_read_mbuf
00000000 l    df *ABS*	00000000 crc8.c
000356d8 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 log_mgmt.c
00033344 l     F .text	0000000a cbor_cnt_writer
00033350 l     F .text	00000098 log_mgmt_logs_list
000333e8 l     F .text	000000a0 log_mgmt_level_list
00033488 l     F .text	000000a0 log_mgmt_module_list
00033528 l     F .text	00000098 log_mgmt_clear
000335c0 l     F .text	000000cc log_encode_entries
00033a68 l     F .text	00000084 log_mgmt_cb_encode
0003368c l     F .text	00000098 log_encode
00033724 l     F .text	00000158 log_mgmt_show
0003387c l     F .text	000001ec log_mgmt_encode_entry
10000514 l     O .data	0000000c log_mgmt_group
10000520 l     O .data	00000030 log_mgmt_handlers
00000000 l    df *ABS*	00000000 stat_mgmt.c
00033afc l     F .text	0000008c stat_mgmt_list
00033b88 l     F .text	000000bc stat_mgmt_show
00033c44 l     F .text	00000032 stat_mgmt_cb_encode
10000550 l     O .data	0000000c stat_mgmt_group
1000055c l     O .data	00000010 stat_mgmt_handlers
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 ble_test_target-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00000000 l    df *ABS*	00000000 
1000056c l       .data	00000000 __init_array_end
1000056c l       .data	00000000 __preinit_array_end
1000056c l       .data	00000000 __init_array_start
1000056c l       .data	00000000 __preinit_array_start
0002eeba g     F .text	00000090 _cbor_value_decode_int64_internal
00015c38 g     F .text	00000054 os_mbuf_trim_front
10003718 g     O .bss	000000f0 ble_store_config_peer_secs
00014190  w    F .text	00000002 GPIO_IRQHandler
0001f188 g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
00022980 g     F .text	00000004 ble_att_clt_tx_read_group_type
00028610 g     F .text	0000001c ble_hs_conn_find_by_idx
0001a5f8 g     F .text	0000006c scfg_register
0001b90c g     F .text	00000028 img_mgmt_module_init
00029314 g     F .text	000000a0 ble_hs_hci_evt_acl_process
000188a4 g     F .text	000000a0 uart_console_init
0001d664 g     F .text	00000030 ble_ll_adv_rpa_timeout
0002e700 g     F .text	00000010 cbor_mbuf_writer_init
0001b590 g     F .text	00000190 img_mgmt_impl_upload_inspect
0002960c g     F .text	00000050 ble_hs_id_infer_auto
10002665 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
00022984 g     F .text	00000004 ble_att_clt_rx_read_group_type
0001680c g     F .text	00000030 os_arch_start
00018bbe g     F .text	00000024 flash_area_id_from_image_slot
1000306c g     O .bss	00000038 ble_hs_stats
00017a34 g     F .text	00000014 conf_fcb_dst
10003ea8 g       .bss	00000000 __HeapBase
1000194c g     O .bss	00000008 g_os_task_list
00014e74 g     F .text	00000084 os_idle_task
00022974 g     F .text	00000004 ble_att_clt_tx_read_blob
000323cc g     F .text	00000014 strcpy
00031a8c g     F .text	0000000c am_hal_stimer_int_clear
0002227c g     F .text	0000000c ble_phy_state_get
0001e788 g     F .text	00000024 ble_ll_conn_set_global_chanmap
100027f4 g     O .bss	000000e4 ble_att_stats
10001990 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
00032b70 g     F .text	00000018 fmemopen_w
0001b3fc g     F .text	000000a4 img_mgmt_state_write
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001a294 g     F .text	00000048 mem_split_frag
0002b626 g     F .text	00000034 ble_sm_proc_can_advance
0001418a  w    F .text	00000002 DebugMon_Handler
00014af4 g     F .text	0000002c print_addr
000157bc g     F .text	0000005a os_mbuf_copydata
10000f64 g     O .bss	00000008 g_os_mempool_list
000150f4 g     F .text	0000001a os_callout_init
00015110 g     F .text	0000003c os_callout_stop
00025572 g     F .text	0000004a ble_gap_notify_rx_event
00021e88 g     F .text	00000070 ble_ll_sched_adv_resched_pdu
0001bf90 g     F .text	00000028 stat_mgmt_module_init
00028c64 g     F .text	00000020 ble_hs_hci_cmd_tx_no_rsp
0002d99a g     F .text	0000009a boot_read_swap_state
00022288 g     F .text	00000074 ble_phy_tx
0002cfb4 g     F .text	00000074 ble_svc_gatt_init
0001fce8 g     F .text	00000050 ble_ll_ctrl_proc_start
00032250 g     F .text	00000050 add_malloc_block
1000268c g     O .bss	00000000 g_ble_ll_whitelist
00026636 g     F .text	0000002c ble_gattc_rx_err
00028958 g     F .text	00000002 ble_hs_flow_connection_broken
0001c0b0 g     F .text	00000024 mgmt_write_rsp_status
0001f20a g     F .text	00000070 ble_ll_conn_hci_set_data_len
0001c944 g     F .text	00000074 ble_ll_reset
000153fe g     F .text	00000070 os_eventq_put
000314cc g     F .text	00000034 am_hal_ctimer_int_status_get
000294a4 g     F .text	0000001c ble_hs_id_set_pub
0001bb34 g     F .text	0000005c log_mgmt_impl_foreach_entry
0002152c g     F .text	0000012c ble_ll_resolv_list_add
10000100 g       .data	00000000 __data_start__
0002c3bc g     F .text	00000018 ble_store_key_from_value_cccd
00015ac2 g     F .text	0000005c os_mbuf_extend
0003241c g     F .text	00000020 strtok_r
0002a480 g     F .text	00000048 ble_l2cap_sig_timer
00031ea4 g     F .text	00000024 am_hal_uart_control
0002fd6a g     F .text	00000040 fcb_append_finish
100026c4 g     O .bss	0000002c g_ble_phy_stats
10002f7c g     O .bss	0000001c ble_hs_hci_ev_pool
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0002e5c4 g     F .text	00000014 cbor_buf_writer_init
00032ab0 g     F .text	00000024 printf
000356a0 g     O .text	00000004 stdout
00031b48 g     F .text	00000058 am_hal_uart_initialize
000356ac g     O .text	0000002c log_fcb_handler
0002c3fe g     F .text	0000007a ble_store_iterate
0002f96a g     F .text	00000024 fcb_free_sector_cnt
0001931c g     F .text	0000000a log_flush
100033a8 g     O .bss	0000001c ble_l2cap_chan_pool
0001f2cc g     F .text	00000042 ble_ll_conn_hci_le_ltk_neg_reply
0001677c g     F .text	0000008c os_arch_os_init
00019f84 g     F .text	00000044 log_reboot
0001417e  w    F .text	00000002 HardFault_Handler
00023ada g     F .text	000000a6 ble_att_svr_rx_read_type
00030a8c g     F .text	00000050 hal_timer_init
000275c0 g     F .text	00000080 ble_gatts_bonding_established
00019a10 g     F .text	0000001a mfg_seek_next_with_type
00023cbe g     F .text	000000c2 ble_att_svr_rx_read_group_type
000266ac g     F .text	00000058 ble_gattc_init
00031ffa g     F .text	00000008 os_cputime_timer_stop
0002e892 g     F .text	0000007e cbor_encode_int
000221e8 g     F .text	00000004 ble_phy_rx_set_start_time
0002da54 g     F .text	00000054 boot_write_swap_info
0001683c g     F .text	00000060 os_arch_os_start
10002c2c g     O .bss	00000088 ble_gap_stats
10002ef8 g     O .bss	00000034 ble_gatts_stats
10001ab0 g     O .bss	00000001 g_console_ignore_non_nlip
1000023c g     O .data	00000020 id_conf
00024a36 g     F .text	00000004 ble_gap_master_in_progress
0002d5bc g     F .text	0000002c ble_hci_trans_hs_cmd_tx
000283cc g     F .text	0000002a ble_hs_atomic_conn_delete
10001ab2 g     O .bss	00000001 g_console_silence_non_nlip
00014bf8 g     F .text	00000090 gatt_svr_register_cb
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
0002ef6c g     F .text	00000048 cbor_value_advance_fixed
000240ac g     F .text	00000048 ble_att_svr_init
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00030372 g     F .text	00000010 hal_flash_align
00019240 g     F .text	00000014 log_read
0001bba8 g     F .text	00000028 log_mgmt_module_init
000277b8 g     F .text	0000003c ble_gatts_init
0001c908 g     F .text	0000000c ble_ll_state_get
0002b600 g     F .text	00000026 ble_sm_ioact_state
0002d866 g     F .text	0000001e boot_magic_compatible_check
0001b108 g     F .text	00000018 img_mgmt_my_version
0002c396 g     F .text	0000000e ble_store_read_cccd
00026662 g     F .text	00000024 ble_gattc_rx_mtu
0001421e g     F .text	0000000c SysTick_Handler
0002a4fc g     F .text	0000003a ble_l2cap_sig_tx
00020e9e g     F .text	00000044 ble_ll_hci_ev_conn_update
000239f0 g     F .text	0000006e ble_att_svr_rx_find_info
00021238 g     F .text	00000080 ble_ll_rand_data_get
0002c2d4 g     F .text	00000040 ble_store_write
00023c80 g     F .text	0000003e ble_att_svr_rx_read_mult
0002a428 g     F .text	00000020 ble_l2cap_sig_create_chan
000318a8 g     F .text	00000090 am_hal_pwrctrl_periph_enable
00022164 g     F .text	0000000c ble_hw_rng_init
0001abfe g     F .text	0000000c cbor_read_object
0002e6e0 g     F .text	0000001e cbor_mbuf_writer
00015e56 g     F .text	0000002a os_memblock_put
00017200 g     F .text	0000000c conf_dst_register
00015f80 g     F .text	00000024 os_msys_get_pkthdr
0003181c g     F .text	00000008 am_hal_interrupt_master_disable
10001b2c g     O .bss	00000004 flash_map
00016ac6 g     F .text	00000030 memmove
00021788 g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
00022970 g     F .text	00000004 ble_att_clt_rx_read
00030534 g     F .text	00000032 hal_flash_is_erased
00027920 g     F .text	00000008 ble_hs_lock
00021752 g     F .text	00000036 ble_ll_resolv_local_addr_rd
0002c2bc g     F .text	00000018 ble_store_overflow_event
000141f4 g     F .text	0000002a PendSV_Handler
00032b0e g     F .text	0000001c snprintf
00029e62 g     F .text	00000014 ble_l2cap_remove_rx
0001417c  w    F .text	00000002 NMI_Handler
00027264 g     F .text	0000005c ble_gatts_connection_broken
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
000357c4 g       .ARM.exidx	00000000 __exidx_end
000221b4 g     F .text	00000002 ble_hw_resolv_list_clear
00014c88 g     F .text	00000018 gatt_svr_init
00014020 g       .text	00000000 __isr_vector_start
0001f07e g     F .text	00000098 ble_ll_conn_hci_disconnect_cmd
00019000 g     F .text	00000048 log_init
00032b40 g     F .text	0000002e memfile_write
000166f0 g     F .text	00000014 os_arch_ctx_sw
0001e7ac g     F .text	000001ec ble_ll_conn_periph_start
0002e910 g     F .text	0000005e cbor_encode_simple_value
0001a224 g     F .text	00000020 stats_init_and_reg
000302c0 g     F .text	00000068 uart_hal_init
00014664 g     F .text	0000002c hal_system_reset
00032032 g     F .text	00000042 os_error_to_sys
00021904 g     F .text	00000034 ble_ll_resolv_init
00014190  w    F .text	00000002 STIMER_IRQHandler
00014f24 g     F .text	00000088 os_init_idle_task
0002e560 g     F .text	00000038 cbor_buf_reader_init
00014190  w    F .text	00000002 UART1_IRQHandler
0002bc84 g     F .text	0000003a ble_sm_timer
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00016168 g     F .text	0000000c os_sched_set_current_task
00029dfc g     F .text	0000002c ble_l2cap_parse_hdr
0001e1f8 g     F .text	00000060 ble_ll_conn_update_eff_data_len
000357c4 g       .ARM.exidx	00000000 __etext
00024a62 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00034708 g     O .text	0000002a g_ble_ll_ctrl_pkt_lengths
0001c890 g     F .text	00000038 ble_ll_set_random_addr
00029930 g     F .text	0000003e ble_hs_pvcy_set_mode
0002662c g     F .text	0000000a ble_gattc_indicate
0001666c g     F .text	0000004e os_get_uptime_usec
0001861c g     F .text	0000003c console_vprintf
00027c1c g     F .text	00000268 ble_hs_init
000221bc g     F .text	00000004 ble_hw_resolv_list_size
000252a0 g     F .text	0000012c ble_gap_update_params
0001ede0 g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
000319e0 g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
000284e4 g     F .text	00000050 ble_hs_conn_free
00018b2a g     F .text	00000026 flash_area_write
0001d6d8 g     F .text	00000108 ble_ll_adv_set_adv_params
00015b1e g     F .text	00000108 os_mbuf_pullup
00026474 g     F .text	00000068 ble_gattc_timer
10001b10 g     O .bss	00000010 rx_ev
10001ea8 g     O .bss	0000010c ble_ll_stats
0001baac g     F .text	00000016 log_mgmt_impl_get_module
000168b4 g     F .text	000000c0 os_mutex_release
0001a0b4 g     F .text	0000000a stats_size
0001c05c g     F .text	0000000e mgmt_streamer_init_writer
0001a1fc g     F .text	00000028 stats_register
00029716 g     F .text	00000022 ble_hs_mbuf_pullup_base
00026686 g     F .text	0000001a ble_gattc_rx_indicate_rsp
00016024 g     F .text	00000020 os_sanity_check_register
10001a58 g     O .bss	00000004 conf_load_srcs
0002f9ce g     F .text	00000020 fcb_get_len
0001d924 g     F .text	00000034 ble_ll_adv_reset
000165d0 g     F .text	00000026 os_time_delay
000255bc g     F .text	00000044 ble_gap_notify_tx_event
0002db44 g     F .text	0000000a boot_swap_type
10002694 g     O .bss	00000030 g_ble_phy_data
0002d764 g     F .text	00000004 ble_hci_trans_reset
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
000159f6 g     F .text	00000088 os_mbuf_copyinto
0002862c g     F .text	0000000e ble_hs_conn_exists
0001fc84 g     F .text	00000064 ble_ll_ctrl_terminate_start
00014190  w    F .text	00000002 PDM_IRQHandler
00024c60 g     F .text	00000024 ble_gap_adv_set_fields
00018674 g     F .text	0000000c console_get_ticks
0002bb54 g     F .text	00000010 ble_sm_our_pair_rand
00022224 g     F .text	00000016 ble_phy_txpower_round
100019b8 g     O .bss	00000034 g_smp_ble_transport
0001d958 g     F .text	00000024 ble_ll_adv_enabled
0002ef4a g     F .text	00000022 cbor_parser_init
00028e04 g     F .text	0000000c ble_hs_hci_set_hci_version
00015932 g     F .text	000000c4 os_mbuf_prepend
0001c8c8 g     F .text	00000034 ble_ll_acl_data_in
100002d8 g     O .data	00000028 ble_hs_cfg
00023e2e g     F .text	00000014 ble_att_svr_prep_clear
0002c588 g     F .text	00000038 ble_store_util_status_rr
0002215c g     F .text	00000006 ble_hw_encrypt_block
0002ba68 g     F .text	000000ec ble_sm_ltk_req_rx
1000258c g     O .bss	000000d8 g_ble_ll_resolv_list
00015e80 g     F .text	00000010 os_mempool_module_init
00016e50 g     F .text	0000000c mgmt_evq_set
00016716 g     F .text	0000000a os_arch_in_critical
0002c6f4 g     F .text	0000000e ble_uuid_u16
0001e0be g     F .text	00000026 ble_ll_conn_auth_pyld_timer_start
00031d90 g     F .text	0000002c am_hal_uart_interrupt_clear
00028720 g     F .text	00000080 ble_hs_conn_find_by_addr
0001c144 g     F .text	00000010 mgmt_evt
000221a8 g     F .text	0000000c ble_hw_rng_stop
00014190  w    F .text	00000002 UART0_IRQHandler
0001c7f0 g     F .text	00000078 ble_ll_is_valid_random_addr
0001e510 g     F .text	00000198 ble_ll_conn_rx_data_pdu
000166e6 g     F .text	0000000a timer_handler
0001bf44 g     F .text	00000024 stat_mgmt_impl_get_group
00015370 g     F .text	00000020 os_dev_lookup
00016174 g     F .text	00000090 os_sched_sleep
0002895c g     F .text	00000024 ble_hs_flow_track_data_mbuf
0001c02a g     F .text	00000010 mgmt_streamer_reset_buf
00016aac g     F .text	0000001a memcpy
000278a4 g     F .text	0000000c ble_hs_evq_get
0002214e g     F .text	00000006 ble_hw_get_static_addr
0001c0d4 g     F .text	00000012 mgmt_err_from_cbor
00028608 g     F .text	00000008 ble_hs_conn_find_assert
0001d8f4 g     F .text	0000002c ble_ll_adv_get_local_rpa
0001748c g     F .text	00000034 conf_parse_name
000217dc g     F .text	0000003a ble_ll_resolve_set_priv_mode
000311c0 g     F .text	00000004 hal_watchdog_init
000214d8 g     F .text	00000014 ble_ll_resolv_list_read_size
0001b1e0 g     F .text	00000056 img_mgmt_state_set_pending
00021d00 g     F .text	0000008c ble_ll_sched_conn_periph_new
000216f0 g     F .text	0000002c ble_ll_resolv_enable_cmd
10002218 g     O .bss	00000001 g_ble_ll_tx_power
0002dc34 g     F .text	000000bc tc_aes128_set_encrypt_key
0001720c g     F .text	00000054 conf_load
00022318 g     F .text	00000002 ble_phy_wfr_enable
0001b86a g     F .text	0000002a img_mgmt_impl_erase_image_data
000271ec g     F .text	00000078 ble_gatts_register_svcs
0001f018 g     F .text	00000066 ble_ll_conn_hci_param_nrr
00031fa8 g     F .text	0000000c os_cputime_init
10001a64 g     O .bss	00000004 conf_handlers
00035368 g     O .text	00000018 apollo3_flash_dev
00030b72 g     F .text	00000020 hal_timer_set_cb
00023ef4 g     F .text	000000b4 ble_att_svr_rx_exec_write
00024ee8 g     F .text	00000054 ble_gap_terminate_with_conn
000294c0 g     F .text	00000078 ble_hs_id_set_rnd
0001fd38 g     F .text	00000030 ble_ll_ctrl_initiate_dle
0001425c g     F .text	00000000 .hidden __aeabi_uldivmod
000229dc g     F .text	00000040 ble_att_clt_tx_indicate
00030566 g     F .text	00000062 hal_flash_isempty
00014d10 g     F .text	00000048 split_app_init
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
0001612c g     F .text	00000030 os_sched_ctx_sw_hook
0002fe72 g     F .text	00000052 fcb_elem_info
10001a94 g     O .bss	00000004 console_is_midline
00015654 g     F .text	00000014 os_mbuf_free
0002566e g     F .text	00000038 ble_gap_mtu_event
00022a26 g     F .text	00000026 ble_att_cmd_prepare
10000100 g     O .data	00000004 SystemCoreClock
000211cc g     F .text	0000001c ble_ll_hci_vs_init
00014650 g     F .text	00000002 hal_system_init
0002bf70 g     F .text	0000003c ble_sm_tx
00029dcc g     F .text	00000028 ble_l2cap_chan_free
0002e96e g     F .text	0000000e cbor_encode_byte_string
00025520 g     F .text	00000026 ble_gap_identity_event
00016720 g     F .text	00000044 os_arch_task_stack_init
0002c702 g     F .text	0000003e ble_uuid_init_from_att_buf
0001ee0a g     F .text	00000034 ble_ll_disconn_comp_event_send
000322a0 g     F .text	0000006c malloc
000237ac g     F .text	00000030 ble_att_svr_read_handle
00018b04 g     F .text	00000026 flash_area_read
0001b938 g     F .text	00000014 img_mgmt_impl_log_upload_start
00020468 g     F .text	00000018 ble_ll_ctrl_init_conn_sm
000176fc g     F .text	0000002c conf_str_from_bytes
00014d98 g     F .text	00000044 __assert_func
000214ec g     F .text	00000040 ble_ll_resolv_list_find
000274cc g     F .text	000000cc ble_gatts_rx_indicate_ack
00016bd0 g     F .text	00000018 imgr_my_version
0003158c g     F .text	0000001c am_hal_triple_read
000225fc g     F .text	000001f8 ble_att_inc_tx_stat
0001b80a g     F .text	00000032 img_mgmt_impl_read
000162c8 g     F .text	00000048 os_sched_wakeup_ticks
000185bc g     F .text	00000060 console_pkg_init
00016c8c g     F .text	0000002c imgmgr_module_init
00014184  w    F .text	00000002 UsageFault_Handler
000313a8 g     F .text	00000094 am_hal_ctimer_period_set
0001dc24 g     F .text	00000028 ble_ll_conn_sm_get
00032ad4 g     F .text	0000003a vsnprintf
0003243c g     F .text	0000000c strtoll
10000f44 g     O .bss	00000008 g_callout_list
000299f4 g     F .text	00000038 ble_hs_pvcy_add_entry
0003143c g     F .text	00000028 am_hal_ctimer_int_enable
0002c740 g     F .text	00000026 ble_uuid_init_from_att_mbuf
00028df8 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
00022170 g     F .text	00000038 ble_hw_rng_start
00027598 g     F .text	00000028 ble_gatts_tx_notifications
0001c7ac g     F .text	00000016 ble_ll_chk_txrx_time
0003150c g     F .text	00000058 am_hal_flash_program_main
1000233c g     O .bss	00000016 g_ble_ll_conn_params
0001be14 g     F .text	00000008 os_mgmt_module_init
0003278c g     F .text	00000300 tfp_format
0001b25c g     F .text	000001a0 img_mgmt_state_read
1005fe48 g       *ABS*	00000000 __HeapLimit
10000570 g       .bss	00000000 __bss_start__
00027928 g     F .text	00000008 ble_hs_unlock
00014654 g     F .text	00000010 hal_debugger_connected
0002c7c0 g     F .text	00000006 ble_uuid_length
00022994 g     F .text	00000004 ble_att_clt_tx_exec_write
00022958 g     F .text	00000004 ble_att_clt_rx_find_info
000303e4 g     F .text	00000070 hal_flash_write
00026574 g     F .text	000000b8 ble_gattc_indicate_custom
00022148 g     F .text	00000006 ble_hw_get_public_addr
00025600 g     F .text	0000006e ble_gap_subscribe_event
000142b4 g     F .text	000002be .hidden __udivmoddi4
0002bfec g     F .text	000000a8 ble_sm_lgcy_io_action
00020d00 g     F .text	0000006c ble_ll_hci_is_event_enabled
0002dbea g     F .text	00000040 boot_set_confirmed_multi
000221d4 g     F .text	00000002 ble_phy_encrypt_enable
0002f154 g     F .text	00000038 _cbor_value_copy_string
000221d8 g     F .text	0000000c ble_phy_set_txend_cb
000221b6 g     F .text	00000004 ble_hw_resolv_list_add
000293b4 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
000212e0 g     F .text	0000002c ble_ll_rand_prand_get
00028648 g     F .text	000000d8 ble_hs_conn_addrs
10001944 g     O .bss	00000004 g_current_task
00016044 g     F .text	00000084 os_sanity_run
0002223c g     F .text	0000000c ble_phy_set_rx_pwr_compensation
0001e4e0 g     F .text	00000030 ble_ll_conn_timeout
100022a8 g     O .bss	00000004 g_ble_ll_cur_adv_sm
0002e9be g     F .text	0000002c cbor_encoder_close_container
00016704 g     F .text	0000000c os_arch_save_sr
000297ce g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
00027640 g     F .text	000000e4 ble_gatts_bonding_restored
000214b0 g     F .text	00000028 ble_ll_resolv_list_clr
0003113c g     F .text	00000084 hal_uart_close
0002d8ec g     F .text	0000001c boot_write_magic
00015db4 g     F .text	00000014 os_mempool_init
00017150 g     F .text	0000002c config_pkg_init
0001b19c g     F .text	00000026 img_mgmt_state_any_pending
000165f8 g     F .text	00000038 os_gettimeofday
10001954 g     O .bss	00000001 g_task_id
000174c0 g     F .text	00000016 conf_parse_and_lookup
0001f1dc g     F .text	0000002e ble_ll_conn_hci_set_chan_class
100030a4 g     O .bss	00000001 ble_hs_sync_state
0001ac90 g     F .text	0000013c img_mgmt_read_info
10000284 g     O .data	00000008 g_stats_registry
00024af4 g     F .text	00000124 ble_gap_adv_start
0002299c g     F .text	00000040 ble_att_clt_tx_notify
0001746c g     F .text	00000020 conf_handler_lookup
0001c03a g     F .text	00000014 mgmt_streamer_write_at
00028de8 g     F .text	00000010 ble_hs_hci_acl_tx
0001db8c g     F .text	00000048 ble_ll_conn_itvl_to_ticks
10002550 g     O .bss	0000000c g_ble_ll_rnum_data
0001be04 g     F .text	00000010 os_mgmt_register_group
00023b80 g     F .text	0000007e ble_att_svr_rx_read
00031dbc g     F .text	000000e8 am_hal_uart_power_control
00031f28 g     F .text	00000016 get_le32
00030ee4 g     F .text	0000002c hal_uart_blocking_tx
000357ac g       .text	00000000 __exidx_start
00032b88 g     F .text	0000011c strntoumax
00024e94 g     F .text	00000004 ble_gap_disc_active
000160c8 g     F .text	00000010 os_sanity_init
10002330 g     O .bss	00000004 g_ble_ll_conn_cur_sm
000342b8 g     O .text	0000001c g_smp_cbor_cfg
0001569a g     F .text	000000a8 os_mbuf_append
00019a2a g     F .text	0000000a mfg_read_tlv_mmr_ref
0002296c g     F .text	00000004 ble_att_clt_tx_read
00014194 g     F .text	00000014 os_set_env
00022990 g     F .text	00000004 ble_att_clt_rx_prep_write
000300cc g     F .text	00000010 hal_bsp_flash_dev
00031270 g     F .text	00000054 am_hal_ctimer_start
00014694 g     F .text	0000004c __libc_init_array
00029924 g     F .text	0000000c ble_hs_pvcy_our_irk
000356a4 g     O .text	00000008 MemFile_methods
10001938 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
00027930 g     F .text	0000001c ble_hs_process_rx_data_queue
0002c84e g     F .text	00000050 ble_sm_alg_s1
00034dd8 g     O .text	00000006 ble_hs_misc_null_addr
00018b76 g     F .text	0000000a flash_area_align
00016474 g     F .text	0000005c os_task_info_get
00014618 g     F .text	00000038 _sbrk
0002c3b0 g     F .text	0000000c ble_store_delete_cccd
0002f23a g     F .text	00000014 cbor_value_calculate_string_length
000307b8 g     F .text	00000038 os_tick_idle
0001e258 g     F .text	00000114 ble_ll_conn_end
00018658 g     F .text	0000001c console_printf
000298ce g     F .text	00000032 ble_hs_pvcy_remove_entry
00022064 g     F .text	00000038 ble_ll_utils_calc_window_widening
00018424 g     F .text	00000008 console_blocking_mode
00017260 g     F .text	00000018 conf_ensure_loaded
0002efb4 g     F .text	0000014e cbor_value_enter_container
00024c84 g     F .text	0000000a ble_gap_adv_active
00031500 g     F .text	0000000c am_hal_flash_page_erase
00014690  w    F .text	00000002 _init
0001d82e g     F .text	00000020 ble_ll_hci_set_adv_data
0003148c g     F .text	00000020 am_hal_ctimer_int_clear
00022a68 g     F .text	0000004a ble_att_tx
0002776c g     F .text	0000004c ble_gatts_count_cfg
00030454 g     F .text	000000e0 hal_flash_erase
00022154 g     F .text	00000002 ble_hw_whitelist_clear
0002d860 g     F .text	00000006 boot_swap_info_off
0001d7f4 g     F .text	0000001a ble_ll_hci_adv_set_enable
000295c0 g     F .text	00000032 ble_hs_id_copy_addr
0001d850 g     F .text	00000044 ble_ll_adv_rx_pkt_in
0002fec4 g     F .text	00000048 fcb_getnext_in_area
0002655c g     F .text	0000000a ble_gattc_notify
0001a5dc g     F .text	0000001a scfg_save_val
000257b0 g     F .text	00000038 ble_gap_event_listener_unregister
00029ec2 g     F .text	000000ca ble_l2cap_rx
00016e5c g     F .text	00000026 smp_rx_req
000307f0 g     F .text	00000064 os_tick_init
00025546 g     F .text	0000002c ble_gap_repeat_pairing_event
0002fbee g     F .text	0000001e fcb_clear
0002d20a g     F .text	00000040 ble_store_config_read
000296ce g     F .text	0000000a ble_hs_mbuf_acl_pkt
00014190  w    F .text	00000002 RTC_IRQHandler
0002fdaa g     F .text	000000c8 fcb_elem_crc8
0002d908 g     F .text	00000062 boot_write_trailer
00022998 g     F .text	00000004 ble_att_clt_rx_exec_write
0001aec0 g     F .text	00000014 img_mgmt_dfu_pending
0001946c g     F .text	00000008 log_console_get
0002d66c g     F .text	00000050 ble_hci_trans_buf_alloc
0002b184 g     F .text	0000000a ble_sm_gen_pair_rand
00014fac g     F .text	000000d8 os_init
0002daa8 g     F .text	0000009c boot_swap_type_multi
000272c0 g     F .text	00000148 ble_gatts_start
00014120 g     F .text	0000005c Reset_Handler
00028c20 g     F .text	00000020 ble_hs_hci_set_buf_sz
0002f9a8 g     F .text	00000026 fcb_put_len
0003201c g     F .text	00000016 os_cputime_ticks_to_usecs
000196f0 g     F .text	00000040 modlog_append
00017020 g     F .text	0000004c smp_ble_pkg_init
1000318c g     O .bss	00000002 ble_hs_hci_avail_pkts
00018218 g     F .text	0000000c console_echo
0002e43c g     F .text	0000001a _copy
0002bd3e g     F .text	000000a6 ble_sm_enc_initiate
10001e3c g     O .bss	00000001 sysinit_active
0002215a g     F .text	00000002 ble_hw_whitelist_disable
00021d8c g     F .text	00000074 ble_ll_sched_adv_new
0001f116 g     F .text	00000042 ble_ll_conn_hci_rd_rem_ver_cmd
10001ab1 g     O .bss	00000001 g_console_silence
000212b8 g     F .text	00000028 ble_ll_rand
00027474 g     F .text	00000058 ble_gatts_send_next_indicate
00035484 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00014d58 g     F .text	0000000c split_app_active_get
00031edc g     F .text	00000008 put_le16
0002541a g     F .text	00000024 ble_gap_unpair_oldest_peer
1000303c g     O .bss	00000002 ble_hs_max_services
000155ea g     F .text	0000000a os_mbuf_pool_init
00023620 g     F .text	00000038 ble_att_svr_find_by_uuid
0002e98a g     F .text	0000000a cbor_encoder_create_array
0001422a g     F .text	0000001e os_default_irq_asm
00016310 g     F .text	0000000c os_sched_next_task
00024fbc g     F .text	00000090 ble_gap_conn_broken
000160d8 g     F .text	00000054 os_sched_insert
0001514c g     F .text	00000080 os_callout_reset
00019a40 g     F .text	00000040 mfg_init
0002283a g     F .text	0000002c ble_att_mtu
000153d4 g     F .text	00000010 os_dev_reset
000228c8 g     F .text	00000028 ble_att_clt_rx_error
0002a448 g     F .text	00000038 ble_l2cap_sig_conn_broken
000287a0 g     F .text	0000007c ble_hs_conn_timer
00032a94 g     F .text	0000001c fprintf
000297be g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
00027b6c g     F .text	0000000c ble_hs_hw_error
000292d8 g     F .text	0000003c ble_hs_hci_evt_process
000168a0 g     F .text	00000014 os_mutex_init
0001b720 g     F .text	00000040 img_mgmt_impl_erase_slot
000145fc g     F .text	0000001c _sbrkInit
00027428 g     F .text	0000004c ble_gatts_conn_init
0001c008 g     F .text	00000010 mgmt_streamer_alloc_rsp
0001546e g     F .text	0000001a os_eventq_get_no_wait
00022a4c g     F .text	0000001c ble_att_cmd_get
00018be4 g     F .text	00000068 flash_map_init
0002cd40 g     F .text	0000000c ble_svc_dis_firmware_revision_set
00032b2c g     F .text	00000014 vprintf
0002c19e g     F .text	000000b2 ble_sm_lgcy_random_rx
0001428c g     F .text	00000028 .hidden __popcountsi2
00014f18 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
0002c610 g     F .text	0000003c ble_uuid_cmp
10000264 g     O .data	00000020 reboot_conf_handler
10001998 g     O .bss	00000004 g_smp_evq
00017440 g     F .text	00000010 conf_unlock
0002ba58 g     F .text	00000010 ble_sm_enc_key_refresh_rx
00028e1c g     F .text	00000048 ble_hs_hci_init
0001628c g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00020d6c g     F .text	0000003c ble_ll_hci_cmd_rx
000278d8 g     F .text	00000024 ble_hs_is_parent_task
0001b120 g     F .text	00000010 img_mgmt_register_group
0001a1dc g     F .text	00000020 stats_group_find
00021032 g     F .text	00000030 ble_ll_hci_ev_hw_err
000220c2 g     F .text	0000000c ble_ll_whitelist_read_size
00034414 g     O .text	0000002c log_console_handler
0002171c g     F .text	00000036 ble_ll_resolv_peer_addr_rd
0001a426 g     F .text	0000001e rwlock_release_write
00031ba0 g     F .text	00000030 am_hal_uart_interrupt_enable
0001a59e g     F .text	0000003e scfg_save_setting
0001ae02 g     F .text	0000003c img_mgmt_find_by_hash
0002f20e g     F .text	0000002c cbor_value_advance
00015764 g     F .text	00000058 os_mbuf_appendfrom
0002e9b0 g     F .text	0000000e cbor_encoder_create_indef_byte_string
00019048 g     F .text	00000010 log_list_get_next
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
00027b4c g     F .text	00000020 ble_hs_sched_reset
0001fdd8 g     F .text	00000034 ble_ll_ctrl_proc_stop
00016cb8 g     F .text	0000003c imgr_ver_str
00019a34 g     F .text	0000000a mfg_read_tlv_hash
00023a5e g     F .text	0000007c ble_att_svr_rx_find_type_value
10002224 g     O .bss	00000006 g_random_addr
1000056c g       .data	00000000 __data_end__
0002e598 g     F .text	0000002c cbor_buf_writer
00019148 g     F .text	000000d4 log_register
0002946c g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0002ff0c g     F .text	00000018 fcb_getnext_area
00017728 g     F .text	00000026 conf_export_cb
0001a3ac g     F .text	00000026 rwlock_release_read
000264dc g     F .text	00000080 ble_gattc_notify_custom
0002db4e g     F .text	00000090 boot_set_pending_multi
0002c768 g     F .text	00000058 ble_uuid_flat
00021f98 g     F .text	00000010 ble_ll_sched_stop
00016ec8 g     F .text	00000014 smp_ble_get_mtu
0001eb8c g     F .text	0000016a ble_ll_conn_comp_event_send
10003620 g     O .bss	00000004 ble_store_config_num_peer_secs
0002bf1c g     F .text	00000020 ble_sm_create_chan
0002bee8 g     F .text	00000034 ble_sm_init
00022300 g     F .text	0000000c ble_phy_resolv_list_enable
00031c84 g     F .text	0000010c am_hal_uart_configure
00020db4 g     F .text	00000058 ble_ll_hci_init
0002395c g     F .text	00000094 ble_att_svr_rx_mtu
00023568 g     F .text	0000000c ble_att_svr_prev_handle
000221e4 g     F .text	00000004 ble_phy_tx_set_start_time
0002c268 g     F .text	0000002c ble_store_read
10001988 g     O .bss	00000004 g_os_time
00031824 g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
000227f4 g     F .text	0000000a ble_att_set_peer_mtu
00030d98 g     F .text	00000040 hal_uart_init_cbs
00022868 g     F .text	00000028 ble_att_create_chan
000311c6 g     F .text	00000002 hal_watchdog_tickle
0001c018 g     F .text	00000012 mgmt_streamer_trim_front
10003ea4 g       .bss	00000000 __bss_end__
000155f4 g     F .text	0000002e os_mbuf_get
000297e0 g     F .text	00000014 ble_hs_misc_restore_irks
0002c522 g     F .text	00000066 ble_store_util_delete_peer
00022158 g     F .text	00000002 ble_hw_whitelist_enable
10000234 g     O .data	00000004 id_app_str
00019c74 g     F .text	0000008c log_reboot_reason_str
00024a3c g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
0002f9ee g     F .text	00000034 fcb_sector_hdr_init
0002281e g     F .text	0000001c ble_att_truncate_to_mtu
0002bc08 g     F .text	00000010 ble_sm_peer_pair_rand
0002f98e g     F .text	0000001a fcb_is_empty
0001c9c0 g     F .text	000001ac ble_ll_init
00028482 g     F .text	00000034 ble_hs_conn_chan_insert
00019098 g     F .text	00000010 log_hdr_len
10003038 g     O .bss	00000002 ble_hs_max_attrs
10003598 g     O .bss	00000080 ble_store_config_cccds
000221ba g     F .text	00000002 ble_hw_resolv_list_rmv
00015f70 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
000146e0 g     F .text	00000018 _start
00033aec g     F .text	00000010 log_mgmt_register_group
00024054 g     F .text	00000058 ble_att_svr_start
00022156 g     F .text	00000002 ble_hw_whitelist_rmv
0001d80e g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
00019326 g     F .text	0000000c log_fill_current_img_hash
0001be56 g     F .text	0000004c os_mgmt_impl_task_info
10000238 g     O .data	00000004 id_bsp_str
0002cc5c g     F .text	00000084 ble_svc_ans_init
10001e2c g     O .bss	00000010 g_stats_stats
0001b236 g     F .text	00000024 img_mgmt_state_confirm
0002e470 g     F .text	0000008c base64_encode
000141a8 g     F .text	00000006 os_arch_init_task_stack
1000361c g     O .bss	00000004 ble_store_config_num_our_secs
0001fac4 g     F .text	00000026 ble_ll_ctrl_conn_param_reply
0001550a g     F .text	00000022 os_eventq_run
0001ef6c g     F .text	000000ac ble_ll_conn_hci_param_rr
0001bf68 g     F .text	00000028 stat_mgmt_impl_foreach_entry
0003200c g     F .text	00000010 os_cputime_usecs_to_ticks
00031f6c g     F .text	00000020 swap_in_place
0001742c g     F .text	00000014 conf_lock
00015dc8 g     F .text	0000003e os_memblock_from
000350fc g     O .text	00000010 boot_img_magic
1000221c g     O .bss	00000006 g_dev_addr
00021fd4 g     F .text	00000052 ble_ll_utils_remapped_channel
00014d7c g     F .text	0000001c split_write_split
0001c116 g     F .text	00000016 mgmt_ntoh_hdr
0001833c g     F .text	00000034 console_lock
0001c914 g     F .text	00000010 ble_ll_event_send
0001a0c0 g     F .text	00000068 stats_walk
00014190  w    F .text	00000002 ADC_IRQHandler
10001a60 g     O .bss	00000004 conf_save_dst
0002bcbe g     F .text	00000080 ble_sm_pair_initiate
0002a544 g     F .text	0000003e ble_l2cap_sig_cmd_get
0002c4d4 g     F .text	00000030 ble_store_util_bonded_peers
10001b34 g     O .bss	0000005a id_mfghash
00021e00 g     F .text	00000088 ble_ll_sched_adv_reschedule
0001b0f4 g     F .text	00000014 img_mgmt_dfu_confirmed
10000598 g     O .bss	00000050 g_idle_task
000314ac g     F .text	00000020 am_hal_ctimer_int_set
1000028c g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
00030b92 g     F .text	00000070 hal_timer_start_at
00022026 g     F .text	0000003e ble_ll_utils_calc_num_used_chans
000297f4 g     F .text	00000014 ble_mqueue_init
0001c8fc g     F .text	0000000c ble_ll_state_set
10003ca0 g     O .bss	00000002 g_pui8RxBuffer
0001c04e g     F .text	0000000e mgmt_streamer_init_reader
10001934 g     O .bss	00000004 g_os_sanity_check_list
000285d8 g     F .text	00000018 ble_hs_conn_find
0002d5e8 g     F .text	0000002c ble_hci_trans_ll_evt_tx
00029538 g     F .text	00000050 ble_hs_id_addr
000323e0 g     F .text	0000001e strncpy
00030dd8 g     F .text	000000a4 hal_uart_start_tx
0002c294 g     F .text	00000028 ble_store_delete
00014190  w    F .text	00000002 CTIMER_IRQHandler
00015e06 g     F .text	00000032 os_memblock_get
00016204 g     F .text	00000088 os_sched_wakeup
0002d474 g     F .text	0000005c ble_store_config_init
0001558a g     F .text	00000022 os_mqueue_get
00032074 g     F .text	00000010 os_sem_init
000278cc g     F .text	0000000c ble_hs_evq_set
000256a8 g     F .text	00000028 ble_gap_preempt_no_lock
0003234c g     F .text	00000060 realloc
0001a264 g     F .text	00000030 mem_init_mbuf_pool
0002863c g     F .text	0000000c ble_hs_conn_first
00022270 g     F .text	0000000c ble_phy_disable
00014ddc g     F .text	00000098 os_default_irq
00016e9c g     F .text	0000002c smp_pkg_init
00018b80 g     F .text	0000000a flash_area_erased_val
0001f158 g     F .text	00000030 ble_ll_conn_hci_rd_rssi
000312f0 g     F .text	00000028 am_hal_ctimer_clear
10002f34 g     O .bss	00000001 ble_hs_enabled_state
0001dc00 g     F .text	00000024 ble_ll_conn_find_active_conn
00024acc g     F .text	00000026 ble_gap_timer
00028d34 g     F .text	000000b4 ble_hs_hci_acl_tx_now
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
0002bec0 g     F .text	00000026 ble_sm_connection_broken
10001948 g     O .bss	00000004 g_os_last_ctx_sw_time
10002334 g     O .bss	00000008 g_ble_ll_conn_free_list
00032084 g     F .text	00000064 os_sem_release
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
0001b1c2 g     F .text	0000001e img_mgmt_slot_in_use
0001c928 g     F .text	00000010 ble_ll_read_supp_states
00016a64 g     F .text	00000048 memcmp
00016764 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
0002d884 g     F .text	00000030 bootutil_buffer_is_erased
0001c07c g     F .text	0000001c mgmt_register_group
000221ec g     F .text	00000038 ble_phy_txpwr_set
0002fa22 g     F .text	0000004e fcb_sector_hdr_read
00017a84 g     F .text	00000096 conf_line_parse
00014574  w    F .text	00000002 .hidden __aeabi_ldiv0
00031f3e g     F .text	0000002e get_le64
00033314 g     F .text	00000030 crc8_calc
000177b8 g     F .text	00000054 conf_commit
0001a24c g     F .text	0000000c sysinit_start
00030adc g     F .text	0000007a hal_timer_config
00015390 g     F .text	00000044 os_dev_open
0002d38c g     F .text	00000028 ble_store_config_write
00016b54 g     F .text	0000002a strncat
000254d6 g     F .text	0000004a ble_gap_enc_event
0001d894 g     F .text	00000030 ble_ll_adv_can_chg_whitelist
00014d64 g     F .text	00000018 split_mode_set
0001dbd4 g     F .text	00000012 ble_ll_conn_is_lru
0002fa70 g     F .text	0000012c fcb_init
00015c8c g     F .text	000000ae os_mbuf_pack_chains
00016fd4 g     F .text	0000004c smp_ble_gatt_svr_init
000185b4 g     F .text	00000008 console_is_init
00028c84 g     F .text	0000007c ble_hs_hci_cmd_tx
000220ce g     F .text	0000002a ble_ll_whitelist_add
0001e0e4 g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
000172e8 g     F .text	00000058 conf_save
000320e8 g     F .text	000000b4 os_sem_pend
000311c4 g     F .text	00000002 hal_watchdog_enable
0001b94c g     F .text	00000014 img_mgmt_impl_log_upload_done
0001a444 g     F .text	00000030 rwlock_init
0001d8c4 g     F .text	00000030 ble_ll_adv_send_conn_comp_ev
00029c8e g     F .text	00000054 ble_hs_startup_go
0001a352 g     F .text	0000005a rwlock_acquire_read
00027b78 g     F .text	0000007c ble_hs_start
0001d69c g     F .text	0000003c ble_ll_adv_halt
00031ff2 g     F .text	00000008 os_cputime_timer_start
0001d500 g     F .text	00000026 ble_ll_adv_chk_rpa_timeout
0001fa66 g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
000221d6 g     F .text	00000002 ble_phy_encrypt_disable
000155ac g     F .text	0000003e os_mqueue_put
00027b04 g     F .text	0000000a ble_hs_timer_resched
00020c90 g     F .text	00000028 ble_ll_hci_send_noop
00015ecc g     F .text	0000004c os_msys_register
100006e8 g     O .bss	00000004 g_os_idle_ctr
00018a54 g     F .text	00000034 flash_area_open
0001f340 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
00032448 g     F .text	0000000c strtoull
000158b8 g     F .text	0000007a os_mbuf_cmpf
0001921c g     F .text	00000024 log_walk_body
00018df4 g     F .text	00000054 id_init
0002da34 g     F .text	00000020 boot_read_swap_state_by_id
0001fa18 g     F .text	00000012 ble_ll_calc_session_key
0002d640 g     F .text	0000002c ble_hci_trans_ll_acl_tx
0002c64c g     F .text	000000a8 ble_uuid_to_str
00026b86 g     F .text	0000008e ble_gatts_clt_cfg_access
0001aeac g     F .text	00000014 img_mgmt_dfu_started
00021146 g     F .text	00000032 ble_ll_hci_vs_cmd_proc
00016af6 g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
00023d80 g     F .text	0000006e ble_att_svr_rx_write
10001e40 g     O .bss	00000030 g_img_mgmt_state
00014a7c g     F .text	00000078 main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
000192e8 g     F .text	00000034 log_read_body
00023fe6 g     F .text	0000006c ble_att_svr_rx_indicate
0002ffac g     F .text	00000034 fcb_getnext
0001f27a g     F .text	00000052 ble_ll_conn_hci_le_ltk_reply
0002c504 g     F .text	0000001e ble_store_util_delete_all
00021fa8 g     F .text	0000002c ble_ll_sched_init
00021328 g     F .text	00000024 ble_ll_rand_init
100019a0 g     O .bss	00000018 g_smp_ble_mq
0001885c g     F .text	00000038 console_out_nolock
00020f54 g     F .text	00000050 ble_ll_hci_ev_ltk_req
0002e822 g     F .text	00000070 cbor_encode_uint
0001c5c8 g     F .text	00000054 ble_ll_task
00029e56 g     F .text	0000000c ble_l2cap_get_conn_handle
000196bc g     F .text	00000034 modlog_register
0002d98e g     F .text	0000000c boot_read_image_ok
0001ead0 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
0002ffe0 g     F .text	00000078 fcb_rotate
100021c8 g     O .bss	00000050 g_ble_ll_task
00020ff0 g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
0001a258 g     F .text	0000000c sysinit_end
00024f3c g     F .text	00000040 ble_gap_terminate
0001976c g     F .text	000000c8 modlog_init
000141ae g     F .text	00000046 SVC_Handler
000257e8 g     F .text	00000080 ble_gap_init
0001b8e4 g     F .text	00000028 img_mgmt_impl_erased_val
0002c136 g     F .text	00000068 ble_sm_lgcy_random_exec
0002d760 g     F .text	00000004 ble_hci_trans_set_acl_free_cb
00020cb8 g     F .text	00000048 ble_ll_hci_is_le_event_enabled
00024e98 g     F .text	00000004 ble_gap_conn_active
00021062 g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
00020b12 g     F .text	00000004 ble_ll_hci_adv_mode_ext
000153f4 g     F .text	0000000a os_eventq_inited
00021658 g     F .text	00000098 ble_ll_resolv_list_rmv
00020e54 g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
0001bea4 g     F .text	0000005c os_mgmt_impl_reset
0001c0e6 g     F .text	00000030 mgmt_ctxt_init
0001ee3e g     F .text	00000060 ble_ll_conn_hci_read_rem_features
00030392 g     F .text	00000052 hal_flash_read
0002965c g     F .text	00000018 ble_hs_id_reset
00018370 g     F .text	0000003c console_unlock
00015570 g     F .text	00000008 os_eventq_dflt_get
00030b56 g     F .text	0000001c hal_timer_read
00015488 g     F .text	00000082 os_eventq_get
00018b50 g     F .text	00000026 flash_area_erase
0001bb24 g     F .text	00000010 log_mgmt_impl_get_next_idx
00015688 g     F .text	00000012 os_mbuf_len
000166ba g     F .text	0000002a os_time_ms_to_ticks
00019100 g     F .text	0000000a log_walk
00015228 g     F .text	0000003c os_callout_wakeup_ticks
00024a3a g     F .text	00000002 ble_gap_rx_adv_report
00029e28 g     F .text	0000002e ble_l2cap_prepend_hdr
0001d97c g     F .text	00000020 ble_ll_adv_init
0002d768 g     F .text	000000d4 ble_hci_ram_init
000296e2 g     F .text	0000000a ble_hs_mbuf_att_pkt
10001b30 g     O .bss	00000004 flash_map_entries
00015816 g     F .text	000000a2 os_mbuf_adj
00014190  w    F .text	00000002 SCARD_IRQHandler
000250b0 g     F .text	00000036 ble_gap_reset_state
0001c12c g     F .text	00000016 mgmt_hton_hdr
10001dae g     O .bss	00000002 reboot_cnt
00017450 g     F .text	0000001c conf_register
00014020 g       .imghdr	00000000 __text
00033310 g     F .text	00000004 crc8_init
10001e70 g     O .bss	00000004 img_mgmt_dfu_callbacks_fn
00017a48 g     F .text	00000032 conf_fcb_kv_save
000199fe g     F .text	00000012 mfg_seek_next
00033c78 g     F .text	00000010 stat_mgmt_register_group
100033c4 g     O .bss	00000034 ble_l2cap_stats
00027c12 g     F .text	00000008 ble_hs_tx_data
00016b2e g     F .text	00000018 strcmp
00018bb0 g     F .text	0000000e flash_area_read_is_empty
00018830 g     F .text	0000002c uart_console_blocking_mode
0002ba44 g     F .text	00000014 ble_sm_enc_change_rx
0001615c g     F .text	0000000c os_sched_get_current_task
0002e994 g     F .text	0000001c cbor_encoder_create_map
000183ac g     F .text	00000078 console_write
10002564 g     O .bss	00000028 g_ble_ll_resolv_data
000254a4 g     F .text	00000032 ble_gap_passkey_event
00029df4 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
00016a54 g     F .text	00000010 lrand48
00030164 g     F .text	00000004 hal_bsp_hw_id
000221c0 g     F .text	00000014 ble_phy_init
00022964 g     F .text	00000004 ble_att_clt_tx_read_type
00014598 g     F .text	00000030 SystemInit
00032002 g     F .text	0000000a os_cputime_get32
000179dc g     F .text	00000058 conf_fcb_src
0002c5c0 g     F .text	00000050 ble_uuid_init_from_buf
0001c7da g     F .text	00000016 ble_ll_is_valid_public_addr
0002b7de g     F .text	000000e4 ble_sm_process_result
00029674 g     F .text	00000024 ble_hs_log_mbuf
00019254 g     F .text	0000004a log_read_hdr
0001552c g     F .text	00000042 os_eventq_remove
000220f8 g     F .text	00000040 ble_ll_whitelist_rmv
10001fb8 g     O .bss	00000090 g_ble_ll_data
000285f0 g     F .text	00000018 ble_hs_conn_insert
000222fc g     F .text	00000004 ble_phy_max_data_pdu_pyld
00017278 g     F .text	00000068 conf_save_one
0002a370 g     F .text	000000b8 ble_l2cap_sig_update
000174d6 g     F .text	00000176 conf_value_from_str
00019058 g     F .text	00000040 log_module_get_name
0002ced8 g     F .text	00000074 ble_svc_gap_init
000319c0 g     F .text	00000020 am_hal_stimer_counter_get
00022988 g     F .text	00000004 ble_att_clt_rx_write
00031ee4 g     F .text	00000014 put_le32
000319ac g     F .text	00000014 am_hal_stimer_config
0001ae40 g     F .text	00000014 img_mgmt_dfu_stopped
00021c2c g     F .text	000000d4 ble_ll_sched_conn_reschedule
00027724 g     F .text	00000048 ble_gatts_add_svcs
0001b894 g     F .text	00000050 img_mgmt_impl_swap_type
000323ac g     F .text	00000020 sprintf
00031bd0 g     F .text	00000030 am_hal_uart_interrupt_disable
00028eb4 g     F .text	00000038 ble_hs_hci_cmd_send_buf
00022a1c g     F .text	0000000a ble_att_clt_rx_indicate
0002295c g     F .text	00000004 ble_att_clt_tx_find_type_value
00022978 g     F .text	00000004 ble_att_clt_rx_read_blob
0001631c g     F .text	00000022 os_sched
00022960 g     F .text	00000004 ble_att_clt_rx_find_type_value
0002846c g     F .text	00000016 ble_hs_conn_chan_find_by_scid
100003fc g     O .data	0000001c ble_svc_dis_data
00030e7c g     F .text	00000068 hal_uart_start_rx
00030382 g     F .text	00000010 hal_flash_erased_val
00022968 g     F .text	00000004 ble_att_clt_rx_read_type
0001b960 g     F .text	00000014 img_mgmt_impl_log_pending
000296ec g     F .text	0000002a ble_hs_mbuf_to_flat
0001e740 g     F .text	00000048 ble_ll_conn_tx_pkt_in
10003618 g     O .bss	00000004 ble_store_config_num_cccds
1000222c g     O .bss	0000007c g_ble_ll_adv_sm
00016974 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000296d8 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
0002189c g     F .text	00000028 ble_ll_resolv_set_peer_rpa
0002b20c g     F .text	00000040 ble_sm_proc_find
000218f8 g     F .text	0000000c ble_ll_resolv_enabled
000357c4 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
000227fe g     F .text	00000020 ble_att_chan_mtu
0002e97c g     F .text	0000000e cbor_encode_text_string
000293c4 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
0001a71c g     F .text	000001f6 cbor_read_array
00020fa4 g     F .text	0000004c ble_ll_hci_ev_rd_rem_used_feat
00015578 g     F .text	00000012 os_mqueue_init
0001717c g     F .text	00000002 config_pkg_init_stage2
0002e45e g     F .text	00000012 _double_byte
0002c32a g     F .text	0000000c ble_store_write_our_sec
00031938 g     F .text	00000074 am_hal_pwrctrl_periph_disable
0002979c g     F .text	00000022 ble_hs_misc_conn_chan_find_reqd
000311f0 g     F .text	00000080 am_hal_ctimer_config_single
000323fe g     F .text	0000001e strsep
00021178 g     F .text	00000054 ble_ll_hci_vs_register
00020e0c g     F .text	00000048 ble_ll_hci_ev_datalen_chg
0001b130 g     F .text	0000006c img_mgmt_state_flags
00017b1c g     F .text	0000005a conf_line_make
00023fa8 g     F .text	0000003e ble_att_svr_rx_notify
00022890 g     F .text	00000038 ble_att_init
00023796 g     F .text	00000016 ble_att_svr_ticks_until_tmo
00014190  w    F .text	00000002 VCOMP_IRQHandler
000295f2 g     F .text	0000001a ble_hs_id_use_addr
00028440 g     F .text	0000002c ble_hs_conn_can_alloc
000283f6 g     F .text	0000002c ble_hs_atomic_conn_flags
0002ced0 g     F .text	00000008 ble_svc_gap_device_name
0001ba82 g     F .text	0000002a log_mgmt_impl_get_log
0002982a g     F .text	0000003e ble_mqueue_put
00029446 g     F .text	00000026 ble_hs_hci_util_set_random_addr
00031a00 g     F .text	00000078 am_hal_stimer_compare_delta_set
00018a88 g     F .text	0000007c flash_area_to_sectors
00024c18 g     F .text	00000048 ble_gap_adv_set_data
00028980 g     F .text	000000b4 ble_hs_flow_startup
0002a4c8 g     F .text	00000034 ble_l2cap_sig_init
00031318 g     F .text	00000090 am_hal_ctimer_read
000151cc g     F .text	0000005c os_callout_tick
0002881c g     F .text	00000034 ble_hs_conn_init
00035120 g     O .text	00000048 sysflash_map_dflt
000256d0 g     F .text	00000018 ble_gap_preempt
00018894 g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
00015084 g     F .text	00000022 os_start
0001c868 g     F .text	00000028 ble_ll_is_valid_own_addr_type
0002a5c8 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
00020418 g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001c7c2 g     F .text	00000018 ble_ll_is_rpa
00025208 g     F .text	00000098 ble_gap_rx_param_req
00031f8c g     F .text	0000001c swap_buf
0001fa82 g     F .text	00000042 ble_ll_ctrl_start_enc_send
0001c938 g     F .text	0000000c ble_ll_read_supp_features
0001e100 g     F .text	000000f8 ble_ll_conn_sm_new
0001ee9e g     F .text	000000ce ble_ll_conn_hci_update
000211e8 g     F .text	00000050 ble_ll_rand_sample
0002c336 g     F .text	0000000e ble_store_read_peer_sec
0002e456 g     F .text	00000008 _set
0002dbde g     F .text	0000000c boot_set_pending
00016384 g     F .text	0000000a os_task_stacktop_get
10002e2c g     O .bss	00000098 ble_gattc_stats
00014190  w    F .text	00000002 MSPI_IRQHandler
00029404 g     F .text	00000042 ble_hs_hci_util_rand
0001c9b8 g     F .text	00000006 ble_ll_pdu_tx_time_get
00031008 g     F .text	00000134 hal_uart_config
00031fb4 g     F .text	0000003e os_cputime_timer_init
00031a78 g     F .text	00000014 am_hal_stimer_int_enable
0002a536 g     F .text	0000000e ble_l2cap_sig_hdr_parse
00023880 g     F .text	00000030 ble_att_svr_tx_error_rsp
0001dc4c g     F .text	0000001a ble_ll_conn_calc_dci
0001c06a g     F .text	00000010 mgmt_streamer_free_buf
0001bb90 g     F .text	00000018 log_mgmt_impl_clear
00031464 g     F .text	00000028 am_hal_ctimer_int_disable
00017340 g     F .text	00000014 conf_store_init
00022140 g     F .text	00000008 ble_ll_whitelist_disable
0001b760 g     F .text	0000007c img_mgmt_impl_write_pending
00029a2c g     F .text	00000078 ble_hs_pvcy_set_our_irk
000250e8 g     F .text	000000c0 ble_gap_rx_update_complete
00015a7e g     F .text	00000044 os_mbuf_concat
0002c344 g     F .text	00000052 ble_store_write_peer_sec
0001842c g     F .text	00000188 console_handle_char
000312c4 g     F .text	0000002c am_hal_ctimer_stop
00016e84 g     F .text	00000018 smp_transport_init
0002f8ec g     F .text	0000007e _cbor_value_dup_string
0002c094 g     F .text	000000a2 ble_sm_lgcy_confirm_exec
00019a80 g     F .text	00000010 mfg_open
10000178 g     O .data	00000008 g_os_run_list
00021954 g     F .text	0000001c ble_ll_rfmgmt_init
0001c35c g     F .text	00000100 smp_process_request_packet
000145c8 g     F .text	00000034 NVIC_Relocate
00027910 g     F .text	00000010 ble_hs_unlock_nested
000171d8 g     F .text	00000028 conf_src_register
000355ec g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
0002e818 g     F .text	0000000a cbor_encoder_init
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
00014ca0 g     F .text	00000070 sysinit_app
00029d98 g     F .text	00000034 ble_l2cap_chan_alloc
00022954 g     F .text	00000004 ble_att_clt_tx_find_info
1000198c g     O .bss	00000004 os_flags
0002e5d8 g     F .text	00000006 cbor_buf_writer_buffer_size
0001b7dc g     F .text	0000002e img_mgmt_impl_write_confirmed
00016710 g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
00029fcc g     F .text	00000060 ble_l2cap_init
0003541c g     O .text	00000028 g_sUartConfig
00016db4 g     F .text	00000044 smp_tx_rsp
00020b18 g     F .text	00000030 ble_ll_hci_event_send
00019fc8 g     F .text	00000090 log_reboot_pkg_init
0002fb9c g     F .text	00000052 fcb_offset_last_n
0001d920 g     F .text	00000004 ble_ll_adv_get_peer_rpa
0002d53c g     F .text	0000002e ble_hs_util_ensure_addr
1005fe48 g       *ABS*	000001b0 __StackLimit
00018b8a g     F .text	00000026 flash_area_is_empty
10000f40 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00024c90 g     F .text	000001c0 ble_gap_rx_conn_complete
0002d6bc g     F .text	000000a4 ble_hci_trans_buf_free
00029f8c g     F .text	0000003e ble_l2cap_tx
0002d56c g     F .text	00000028 ble_hci_trans_cfg_hs
00020da8 g     F .text	0000000a ble_ll_hci_acl_rx
10002358 g     O .bss	000001a0 g_ble_ll_conn_sm
0002f102 g     F .text	00000050 cbor_value_leave_container
0002543e g     F .text	00000066 ble_gap_unpair_oldest_except
00031ef8 g     F .text	00000026 put_le64
0001c79c g     F .text	00000010 ble_ll_chk_txrx_octets
0002c3a4 g     F .text	0000000c ble_store_write_cccd
0002fc3e g     F .text	00000032 fcb_append_to_scratch
0001b83c g     F .text	0000002e img_mgmt_impl_write_image_data
00014578 g     F .text	00000020 SystemCoreClockUpdate
0002dcf0 g     F .text	0000074c tc_aes_encrypt
00015668 g     F .text	00000020 os_mbuf_free_chain
0002d44c g     F .text	00000028 ble_store_config_delete
0001b4a0 g     F .text	00000066 img_mgmt_ver_str
00027954 g     F .text	0000003a ble_hs_wakeup_tx
00016630 g     F .text	0000003c os_get_uptime
00015fa4 g     F .text	00000034 os_msys_init
000285b4 g     F .text	00000024 ble_hs_conn_remove
00023574 g     F .text	00000018 ble_att_svr_find_by_handle
0002ff24 g     F .text	00000088 fcb_getnext_nolock
00015742 g     F .text	00000022 os_mbuf_off
10001ab3 g     O .bss	00000001 g_is_output_nlip
00028c40 g     F .text	00000024 ble_hs_hci_add_avail_pkts
00016578 g     F .text	0000000c os_time_get
10001d48 g     O .bss	0000001c modlog_mapping_pool
00031564 g     F .text	00000028 am_hal_flash_delay
0002d594 g     F .text	00000028 ble_hci_trans_cfg_ll
0002c31c g     F .text	0000000e ble_store_read_our_sec
00023e42 g     F .text	000000b2 ble_att_svr_rx_prep_write
00030c02 g     F .text	0000004a hal_timer_stop
00017782 g     F .text	00000036 conf_get_value
000190a8 g     F .text	00000058 log_append_body
00021816 g     F .text	00000086 ble_ll_resolv_get_priv_addr
0002298c g     F .text	00000004 ble_att_clt_tx_prep_write
00015622 g     F .text	00000032 os_mbuf_get_pkthdr
10003628 g     O .bss	000000f0 ble_store_config_our_secs
10001bd0 g     O .bss	00000008 g_log_info
0001764c g     F .text	000000b0 conf_str_from_value
0002231a g     F .text	00000002 ble_phy_rfclk_enable
00014574  w    F .text	00000002 .hidden __aeabi_idiv0
0002e688 g     F .text	00000058 cbor_mbuf_reader_init
1000303a g     O .bss	00000002 ble_hs_max_client_configs
00023bfe g     F .text	00000082 ble_att_svr_rx_read_blob
00027408 g     F .text	00000020 ble_gatts_conn_can_alloc
0001bac4 g     F .text	00000060 log_mgmt_impl_get_level
0002fc70 g     F .text	000000fa fcb_append
0001c45c g     F .text	0000007c ull_to_s
0002cd4c g     F .text	00000074 ble_svc_dis_init
0001774e g     F .text	00000034 conf_set_value
00022138 g     F .text	00000008 ble_ll_whitelist_enable
000278fc g     F .text	00000014 ble_hs_lock_nested
000283bc g     F .text	00000010 ble_hs_adv_set_fields
00034734 g     O .text	0000002d g_ble_ll_supp_cmds
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00016390 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
0002c3d4 g     F .text	0000002a ble_store_key_from_value_sec
00014182  w    F .text	00000002 BusFault_Handler
00029d48 g     F .text	0000001c ble_hs_stop_init
00019474 g     F .text	00000060 log_console_init
0002b18e g     F .text	0000007e ble_sm_ia_ra
00027b10 g     F .text	0000003c ble_hs_enqueue_hci_event
00020ee2 g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
00016b46 g     F .text	0000000e strlen
0001530c g     F .text	00000038 os_dev_create
000284b6 g     F .text	0000002c ble_hs_conn_delete_chan
00015e38 g     F .text	0000001e os_memblock_put_from_cb
0002230c g     F .text	0000000c ble_phy_resolv_list_disable
0001a3d2 g     F .text	00000054 rwlock_acquire_write
10002530 g     O .bss	00000020 g_ble_ll_rnum_buf
000153e4 g     F .text	00000010 os_eventq_init
0002297c g     F .text	00000004 ble_att_clt_rx_read_mult
00016584 g     F .text	0000004c os_time_advance
0001f30e g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
0001dbe8 g     F .text	00000018 ble_ll_conn_get_ce_end_time
00016340 g     F .text	0000002c os_sched_resort
10003c50 g     O .bss	00000004 boot_current_slot
0002c7c6 g     F .text	00000024 ble_uuid_to_mbuf
00024a0c g     F .text	0000002a ble_gap_conn_find
10003ca4 g     O .bss	00000100 g_pui8TxBuffer
00015c26 g     F .text	00000012 os_mbuf_prepend_pullup
000225ee g     F .text	0000000e ble_att_conn_chan_find
00030346 g     F .text	0000002c hal_flash_init
00031f1e g     F .text	0000000a get_le16
0001a184 g     F .text	00000058 stats_module_init
00024a8c g     F .text	00000040 ble_gap_rx_phy_update_complete
0001e998 g     F .text	000000ac ble_ll_conn_module_reset
0001c098 g     F .text	00000016 mgmt_find_handler
0002c89e g     F .text	000000f4 ble_sm_alg_c1
00014180  w    F .text	00000002 MemoryManagement_Handler
00031ec8 g     F .text	00000014 am_hal_queue_init
000256e8 g     F .text	000000c8 ble_gap_preempt_done
0001d7e0 g     F .text	00000014 ble_ll_adv_read_txpwr
0002bf3c g     F .text	00000032 ble_sm_cmd_get
00028e10 g     F .text	0000000c ble_hs_hci_get_hci_version
000228f0 g     F .text	00000064 ble_att_clt_rx_mtu
0002d614 g     F .text	0000002c ble_hci_trans_hs_acl_tx
100022ac g     O .bss	00000080 ble_ll_conn_stats
10001b90 g     O .bss	00000040 id_serial
00027990 g     F .text	00000014 ble_hs_is_enabled
000194d4 g     F .text	0000001c log_level_get
0001e6a8 g     F .text	00000096 ble_ll_conn_enqueue_pkt
0001d694 g     F .text	00000008 ble_ll_adv_event_rmvd_from_sched
00029698 g     F .text	0000000c ble_hs_log_flat_buf
0002dc2a g     F .text	0000000a boot_set_confirmed
0001fd68 g     F .text	00000070 ble_ll_ctrl_chk_proc_start
0002a584 g     F .text	00000044 ble_l2cap_sig_reject_tx
00023dee g     F .text	00000040 ble_att_svr_rx_write_no_rsp
000305c8 g     F .text	00000032 hal_flash_isempty_no_buf
00023518 g     F .text	00000050 ble_att_svr_register
00015344 g     F .text	0000002c os_dev_initialize_all
00029808 g     F .text	00000022 ble_mqueue_get
000315b8 g     F .text	00000264 am_hal_gpio_pinconfig
0001ea44 g     F .text	0000008c ble_ll_conn_module_init
00019730 g     F .text	0000003a modlog_printf
000253cc g     F .text	0000004e ble_gap_unpair
00021ef8 g     F .text	000000a0 ble_ll_sched_rmv_elem
00017cac g     F .text	00000010 conf_mgmt_register
0002976c g     F .text	00000030 ble_hs_misc_conn_chan_find
0002d96a g     F .text	00000016 boot_write_trailer_flag
00026566 g     F .text	0000000c ble_gatts_indicate_fail_notconn
00028422 g     F .text	0000001c ble_hs_atomic_first_conn_handle
00016be8 g     F .text	00000048 imgmgr_find_best_area_id
10000180 g     O .data	00000008 g_os_sleep_list
00016b80 g     F .text	00000050 jrand48
00029900 g     F .text	00000024 ble_hs_pvcy_ensure_started
0002006c g     F .text	000003aa ble_ll_ctrl_rx_pdu
000300dc g     F .text	00000088 hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
000266a0 g     F .text	0000000c ble_gattc_connection_broken
000150a8 g     F .text	0000004c os_pkg_init
00022248 g     F .text	00000028 ble_phy_setchan
1000232c g     O .bss	00000004 g_ble_ll_conn_active_list
0001ecf8 g     F .text	000000e8 ble_ll_conn_num_comp_pkts_event_send
0001b974 g     F .text	00000014 img_mgmt_impl_log_confirm
0002130c g     F .text	0000001c ble_ll_rand_start
0002504c g     F .text	00000064 ble_gap_rx_disconn_complete
000173d8 g     F .text	00000054 conf_init
00016014 g     F .text	00000010 os_sanity_check_init
00021938 g     F .text	0000001c ble_ll_resolv_list_reset
00030058 g     F .text	00000074 fcb_walk
000220ae g     F .text	00000014 ble_ll_whitelist_clear
00028534 g     F .text	00000080 ble_hs_conn_alloc
00028d00 g     F .text	00000032 ble_hs_hci_rx_evt
00030f10 g     F .text	000000f8 hal_uart_init
0002f8e4 g     F .text	00000008 cbor_value_to_pretty_advance
0001e4b4 g     F .text	0000002c ble_ll_conn_event_halt
0001a128 g     F .text	00000022 stats_init
00032a8c g     F .text	00000008 vfprintf
1000199c g     O .bss	00000002 g_ble_smp_attr_handle
00032ca4 g     F .text	00000032 strpbrk
000218c4 g     F .text	00000034 ble_ll_resolv_gen_rpa
10000ef0 g     O .bss	00000050 g_os_main_task
0003230c g     F .text	0000002c free
0002d980 g     F .text	0000000e boot_write_image_ok



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 fa58 	bl	145fc <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 fa7e 	bl	14650 <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	10000570 	.word	0x10000570
    ldr     r3, =__bss_end__
   1415c:	10003ea4 	.word	0x10003ea4
    ldr    r1, =__etext
   14160:	000357c4 	.word	0x000357c4
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	1000056c 	.word	0x1000056c
    LDR     R0, =__HeapBase
   1416c:	10003ea8 	.word	0x10003ea8
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	00014599 	.word	0x00014599
    LDR     R0, =_start
   14178:	000146e1 	.word	0x000146e1

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f002 fa61 	bl	166e6 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f000 fdcd 	bl	14ddc <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	1000198c 	.word	0x1000198c
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	10000178 	.word	0x10000178
        LDR     R3,=g_current_task      /* Get current task */
   14258:	10001944 	.word	0x10001944

0001425c <__aeabi_uldivmod>:
   1425c:	b953      	cbnz	r3, 14274 <__aeabi_uldivmod+0x18>
   1425e:	b94a      	cbnz	r2, 14274 <__aeabi_uldivmod+0x18>
   14260:	2900      	cmp	r1, #0
   14262:	bf08      	it	eq
   14264:	2800      	cmpeq	r0, #0
   14266:	bf1c      	itt	ne
   14268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1426c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14270:	f000 b980 	b.w	14574 <__aeabi_idiv0>
   14274:	f1ad 0c08 	sub.w	ip, sp, #8
   14278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1427c:	f000 f81a 	bl	142b4 <__udivmoddi4>
   14280:	f8dd e004 	ldr.w	lr, [sp, #4]
   14284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14288:	b004      	add	sp, #16
   1428a:	4770      	bx	lr

0001428c <__popcountsi2>:
   1428c:	0843      	lsrs	r3, r0, #1
   1428e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   14292:	1ac0      	subs	r0, r0, r3
   14294:	0883      	lsrs	r3, r0, #2
   14296:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1429a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   1429e:	4418      	add	r0, r3
   142a0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   142a4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   142a8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   142ac:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   142b0:	0e00      	lsrs	r0, r0, #24
   142b2:	4770      	bx	lr

000142b4 <__udivmoddi4>:
   142b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   142b8:	9e08      	ldr	r6, [sp, #32]
   142ba:	460d      	mov	r5, r1
   142bc:	4604      	mov	r4, r0
   142be:	468e      	mov	lr, r1
   142c0:	2b00      	cmp	r3, #0
   142c2:	f040 8082 	bne.w	143ca <__udivmoddi4+0x116>
   142c6:	428a      	cmp	r2, r1
   142c8:	4617      	mov	r7, r2
   142ca:	d946      	bls.n	1435a <__udivmoddi4+0xa6>
   142cc:	fab2 f282 	clz	r2, r2
   142d0:	b14a      	cbz	r2, 142e6 <__udivmoddi4+0x32>
   142d2:	f1c2 0120 	rsb	r1, r2, #32
   142d6:	fa05 f302 	lsl.w	r3, r5, r2
   142da:	fa20 f101 	lsr.w	r1, r0, r1
   142de:	4097      	lsls	r7, r2
   142e0:	ea41 0e03 	orr.w	lr, r1, r3
   142e4:	4094      	lsls	r4, r2
   142e6:	ea4f 4817 	mov.w	r8, r7, lsr #16
   142ea:	0c23      	lsrs	r3, r4, #16
   142ec:	fbbe fcf8 	udiv	ip, lr, r8
   142f0:	b2b9      	uxth	r1, r7
   142f2:	fb08 ee1c 	mls	lr, r8, ip, lr
   142f6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   142fa:	fb0c f001 	mul.w	r0, ip, r1
   142fe:	4298      	cmp	r0, r3
   14300:	d90a      	bls.n	14318 <__udivmoddi4+0x64>
   14302:	18fb      	adds	r3, r7, r3
   14304:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   14308:	f080 8116 	bcs.w	14538 <__udivmoddi4+0x284>
   1430c:	4298      	cmp	r0, r3
   1430e:	f240 8113 	bls.w	14538 <__udivmoddi4+0x284>
   14312:	f1ac 0c02 	sub.w	ip, ip, #2
   14316:	443b      	add	r3, r7
   14318:	1a1b      	subs	r3, r3, r0
   1431a:	b2a4      	uxth	r4, r4
   1431c:	fbb3 f0f8 	udiv	r0, r3, r8
   14320:	fb08 3310 	mls	r3, r8, r0, r3
   14324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   14328:	fb00 f101 	mul.w	r1, r0, r1
   1432c:	42a1      	cmp	r1, r4
   1432e:	d909      	bls.n	14344 <__udivmoddi4+0x90>
   14330:	193c      	adds	r4, r7, r4
   14332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   14336:	f080 8101 	bcs.w	1453c <__udivmoddi4+0x288>
   1433a:	42a1      	cmp	r1, r4
   1433c:	f240 80fe 	bls.w	1453c <__udivmoddi4+0x288>
   14340:	3802      	subs	r0, #2
   14342:	443c      	add	r4, r7
   14344:	1a64      	subs	r4, r4, r1
   14346:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1434a:	2100      	movs	r1, #0
   1434c:	b11e      	cbz	r6, 14356 <__udivmoddi4+0xa2>
   1434e:	40d4      	lsrs	r4, r2
   14350:	2300      	movs	r3, #0
   14352:	e9c6 4300 	strd	r4, r3, [r6]
   14356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1435a:	b902      	cbnz	r2, 1435e <__udivmoddi4+0xaa>
   1435c:	deff      	udf	#255	; 0xff
   1435e:	fab2 f282 	clz	r2, r2
   14362:	2a00      	cmp	r2, #0
   14364:	d14f      	bne.n	14406 <__udivmoddi4+0x152>
   14366:	1bcb      	subs	r3, r1, r7
   14368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1436c:	fa1f f887 	uxth.w	r8, r7
   14370:	2101      	movs	r1, #1
   14372:	fbb3 fcfe 	udiv	ip, r3, lr
   14376:	0c25      	lsrs	r5, r4, #16
   14378:	fb0e 331c 	mls	r3, lr, ip, r3
   1437c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14380:	fb08 f30c 	mul.w	r3, r8, ip
   14384:	42ab      	cmp	r3, r5
   14386:	d907      	bls.n	14398 <__udivmoddi4+0xe4>
   14388:	197d      	adds	r5, r7, r5
   1438a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1438e:	d202      	bcs.n	14396 <__udivmoddi4+0xe2>
   14390:	42ab      	cmp	r3, r5
   14392:	f200 80e7 	bhi.w	14564 <__udivmoddi4+0x2b0>
   14396:	4684      	mov	ip, r0
   14398:	1aed      	subs	r5, r5, r3
   1439a:	b2a3      	uxth	r3, r4
   1439c:	fbb5 f0fe 	udiv	r0, r5, lr
   143a0:	fb0e 5510 	mls	r5, lr, r0, r5
   143a4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   143a8:	fb08 f800 	mul.w	r8, r8, r0
   143ac:	45a0      	cmp	r8, r4
   143ae:	d907      	bls.n	143c0 <__udivmoddi4+0x10c>
   143b0:	193c      	adds	r4, r7, r4
   143b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   143b6:	d202      	bcs.n	143be <__udivmoddi4+0x10a>
   143b8:	45a0      	cmp	r8, r4
   143ba:	f200 80d7 	bhi.w	1456c <__udivmoddi4+0x2b8>
   143be:	4618      	mov	r0, r3
   143c0:	eba4 0408 	sub.w	r4, r4, r8
   143c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143c8:	e7c0      	b.n	1434c <__udivmoddi4+0x98>
   143ca:	428b      	cmp	r3, r1
   143cc:	d908      	bls.n	143e0 <__udivmoddi4+0x12c>
   143ce:	2e00      	cmp	r6, #0
   143d0:	f000 80af 	beq.w	14532 <__udivmoddi4+0x27e>
   143d4:	2100      	movs	r1, #0
   143d6:	e9c6 0500 	strd	r0, r5, [r6]
   143da:	4608      	mov	r0, r1
   143dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143e0:	fab3 f183 	clz	r1, r3
   143e4:	2900      	cmp	r1, #0
   143e6:	d14b      	bne.n	14480 <__udivmoddi4+0x1cc>
   143e8:	42ab      	cmp	r3, r5
   143ea:	d302      	bcc.n	143f2 <__udivmoddi4+0x13e>
   143ec:	4282      	cmp	r2, r0
   143ee:	f200 80b7 	bhi.w	14560 <__udivmoddi4+0x2ac>
   143f2:	1a84      	subs	r4, r0, r2
   143f4:	eb65 0303 	sbc.w	r3, r5, r3
   143f8:	2001      	movs	r0, #1
   143fa:	469e      	mov	lr, r3
   143fc:	2e00      	cmp	r6, #0
   143fe:	d0aa      	beq.n	14356 <__udivmoddi4+0xa2>
   14400:	e9c6 4e00 	strd	r4, lr, [r6]
   14404:	e7a7      	b.n	14356 <__udivmoddi4+0xa2>
   14406:	f1c2 0c20 	rsb	ip, r2, #32
   1440a:	fa01 f302 	lsl.w	r3, r1, r2
   1440e:	4097      	lsls	r7, r2
   14410:	fa20 f00c 	lsr.w	r0, r0, ip
   14414:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14418:	fa21 fc0c 	lsr.w	ip, r1, ip
   1441c:	4318      	orrs	r0, r3
   1441e:	fbbc f1fe 	udiv	r1, ip, lr
   14422:	0c05      	lsrs	r5, r0, #16
   14424:	fb0e cc11 	mls	ip, lr, r1, ip
   14428:	fa1f f887 	uxth.w	r8, r7
   1442c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   14430:	fb01 f308 	mul.w	r3, r1, r8
   14434:	42ab      	cmp	r3, r5
   14436:	fa04 f402 	lsl.w	r4, r4, r2
   1443a:	d909      	bls.n	14450 <__udivmoddi4+0x19c>
   1443c:	197d      	adds	r5, r7, r5
   1443e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   14442:	f080 808b 	bcs.w	1455c <__udivmoddi4+0x2a8>
   14446:	42ab      	cmp	r3, r5
   14448:	f240 8088 	bls.w	1455c <__udivmoddi4+0x2a8>
   1444c:	3902      	subs	r1, #2
   1444e:	443d      	add	r5, r7
   14450:	1aeb      	subs	r3, r5, r3
   14452:	b285      	uxth	r5, r0
   14454:	fbb3 f0fe 	udiv	r0, r3, lr
   14458:	fb0e 3310 	mls	r3, lr, r0, r3
   1445c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14460:	fb00 f308 	mul.w	r3, r0, r8
   14464:	42ab      	cmp	r3, r5
   14466:	d907      	bls.n	14478 <__udivmoddi4+0x1c4>
   14468:	197d      	adds	r5, r7, r5
   1446a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1446e:	d271      	bcs.n	14554 <__udivmoddi4+0x2a0>
   14470:	42ab      	cmp	r3, r5
   14472:	d96f      	bls.n	14554 <__udivmoddi4+0x2a0>
   14474:	3802      	subs	r0, #2
   14476:	443d      	add	r5, r7
   14478:	1aeb      	subs	r3, r5, r3
   1447a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1447e:	e778      	b.n	14372 <__udivmoddi4+0xbe>
   14480:	f1c1 0c20 	rsb	ip, r1, #32
   14484:	408b      	lsls	r3, r1
   14486:	fa22 f70c 	lsr.w	r7, r2, ip
   1448a:	431f      	orrs	r7, r3
   1448c:	fa20 f40c 	lsr.w	r4, r0, ip
   14490:	fa05 f301 	lsl.w	r3, r5, r1
   14494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14498:	fa25 f50c 	lsr.w	r5, r5, ip
   1449c:	431c      	orrs	r4, r3
   1449e:	0c23      	lsrs	r3, r4, #16
   144a0:	fbb5 f9fe 	udiv	r9, r5, lr
   144a4:	fa1f f887 	uxth.w	r8, r7
   144a8:	fb0e 5519 	mls	r5, lr, r9, r5
   144ac:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   144b0:	fb09 fa08 	mul.w	sl, r9, r8
   144b4:	45aa      	cmp	sl, r5
   144b6:	fa02 f201 	lsl.w	r2, r2, r1
   144ba:	fa00 f301 	lsl.w	r3, r0, r1
   144be:	d908      	bls.n	144d2 <__udivmoddi4+0x21e>
   144c0:	197d      	adds	r5, r7, r5
   144c2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   144c6:	d247      	bcs.n	14558 <__udivmoddi4+0x2a4>
   144c8:	45aa      	cmp	sl, r5
   144ca:	d945      	bls.n	14558 <__udivmoddi4+0x2a4>
   144cc:	f1a9 0902 	sub.w	r9, r9, #2
   144d0:	443d      	add	r5, r7
   144d2:	eba5 050a 	sub.w	r5, r5, sl
   144d6:	b2a4      	uxth	r4, r4
   144d8:	fbb5 f0fe 	udiv	r0, r5, lr
   144dc:	fb0e 5510 	mls	r5, lr, r0, r5
   144e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   144e4:	fb00 f808 	mul.w	r8, r0, r8
   144e8:	45a0      	cmp	r8, r4
   144ea:	d907      	bls.n	144fc <__udivmoddi4+0x248>
   144ec:	193c      	adds	r4, r7, r4
   144ee:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   144f2:	d22d      	bcs.n	14550 <__udivmoddi4+0x29c>
   144f4:	45a0      	cmp	r8, r4
   144f6:	d92b      	bls.n	14550 <__udivmoddi4+0x29c>
   144f8:	3802      	subs	r0, #2
   144fa:	443c      	add	r4, r7
   144fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   14500:	eba4 0408 	sub.w	r4, r4, r8
   14504:	fba0 8902 	umull	r8, r9, r0, r2
   14508:	454c      	cmp	r4, r9
   1450a:	46c6      	mov	lr, r8
   1450c:	464d      	mov	r5, r9
   1450e:	d319      	bcc.n	14544 <__udivmoddi4+0x290>
   14510:	d016      	beq.n	14540 <__udivmoddi4+0x28c>
   14512:	b15e      	cbz	r6, 1452c <__udivmoddi4+0x278>
   14514:	ebb3 020e 	subs.w	r2, r3, lr
   14518:	eb64 0405 	sbc.w	r4, r4, r5
   1451c:	fa04 fc0c 	lsl.w	ip, r4, ip
   14520:	40ca      	lsrs	r2, r1
   14522:	ea4c 0202 	orr.w	r2, ip, r2
   14526:	40cc      	lsrs	r4, r1
   14528:	e9c6 2400 	strd	r2, r4, [r6]
   1452c:	2100      	movs	r1, #0
   1452e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14532:	4631      	mov	r1, r6
   14534:	4630      	mov	r0, r6
   14536:	e70e      	b.n	14356 <__udivmoddi4+0xa2>
   14538:	46ac      	mov	ip, r5
   1453a:	e6ed      	b.n	14318 <__udivmoddi4+0x64>
   1453c:	4618      	mov	r0, r3
   1453e:	e701      	b.n	14344 <__udivmoddi4+0x90>
   14540:	4543      	cmp	r3, r8
   14542:	d2e6      	bcs.n	14512 <__udivmoddi4+0x25e>
   14544:	ebb8 0e02 	subs.w	lr, r8, r2
   14548:	eb69 0507 	sbc.w	r5, r9, r7
   1454c:	3801      	subs	r0, #1
   1454e:	e7e0      	b.n	14512 <__udivmoddi4+0x25e>
   14550:	4628      	mov	r0, r5
   14552:	e7d3      	b.n	144fc <__udivmoddi4+0x248>
   14554:	4660      	mov	r0, ip
   14556:	e78f      	b.n	14478 <__udivmoddi4+0x1c4>
   14558:	4681      	mov	r9, r0
   1455a:	e7ba      	b.n	144d2 <__udivmoddi4+0x21e>
   1455c:	4661      	mov	r1, ip
   1455e:	e777      	b.n	14450 <__udivmoddi4+0x19c>
   14560:	4608      	mov	r0, r1
   14562:	e74b      	b.n	143fc <__udivmoddi4+0x148>
   14564:	f1ac 0c02 	sub.w	ip, ip, #2
   14568:	443d      	add	r5, r7
   1456a:	e715      	b.n	14398 <__udivmoddi4+0xe4>
   1456c:	3802      	subs	r0, #2
   1456e:	443c      	add	r4, r7
   14570:	e726      	b.n	143c0 <__udivmoddi4+0x10c>
   14572:	bf00      	nop

00014574 <__aeabi_idiv0>:
   14574:	4770      	bx	lr
   14576:	bf00      	nop

00014578 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1457c:	699b      	ldr	r3, [r3, #24]
   1457e:	f003 0301 	and.w	r3, r3, #1
   14582:	3301      	adds	r3, #1
   14584:	4a02      	ldr	r2, [pc, #8]	; (14590 <SystemCoreClockUpdate+0x18>)
   14586:	fb92 f3f3 	sdiv	r3, r2, r3
   1458a:	4a02      	ldr	r2, [pc, #8]	; (14594 <SystemCoreClockUpdate+0x1c>)
   1458c:	6013      	str	r3, [r2, #0]
}
   1458e:	4770      	bx	lr
   14590:	02dc6c00 	.word	0x02dc6c00
   14594:	10000100 	.word	0x10000100

00014598 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14598:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1459a:	4b09      	ldr	r3, [pc, #36]	; (145c0 <SystemInit+0x28>)
   1459c:	4a09      	ldr	r2, [pc, #36]	; (145c4 <SystemInit+0x2c>)
   1459e:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   145a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   145a4:	2247      	movs	r2, #71	; 0x47
   145a6:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   145a8:	699a      	ldr	r2, [r3, #24]
   145aa:	f36f 0200 	bfc	r2, #0, #1
   145ae:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   145b0:	2200      	movs	r2, #0
   145b2:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   145b4:	f7ff ffe0 	bl	14578 <SystemCoreClockUpdate>

    NVIC_Relocate();
   145b8:	f000 f806 	bl	145c8 <NVIC_Relocate>
}
   145bc:	bd08      	pop	{r3, pc}
   145be:	bf00      	nop
   145c0:	10000100 	.word	0x10000100
   145c4:	02dc6c00 	.word	0x02dc6c00

000145c8 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   145c8:	4a09      	ldr	r2, [pc, #36]	; (145f0 <NVIC_Relocate+0x28>)
   145ca:	4b0a      	ldr	r3, [pc, #40]	; (145f4 <NVIC_Relocate+0x2c>)
   145cc:	429a      	cmp	r2, r3
   145ce:	d00a      	beq.n	145e6 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145d0:	2300      	movs	r3, #0
   145d2:	2b29      	cmp	r3, #41	; 0x29
   145d4:	dc07      	bgt.n	145e6 <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   145d6:	4a07      	ldr	r2, [pc, #28]	; (145f4 <NVIC_Relocate+0x2c>)
   145d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   145dc:	4a04      	ldr	r2, [pc, #16]	; (145f0 <NVIC_Relocate+0x28>)
   145de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145e2:	3301      	adds	r3, #1
   145e4:	e7f5      	b.n	145d2 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   145e6:	4a02      	ldr	r2, [pc, #8]	; (145f0 <NVIC_Relocate+0x28>)
   145e8:	4b03      	ldr	r3, [pc, #12]	; (145f8 <NVIC_Relocate+0x30>)
   145ea:	609a      	str	r2, [r3, #8]
#endif
}
   145ec:	4770      	bx	lr
   145ee:	bf00      	nop
   145f0:	10000000 	.word	0x10000000
   145f4:	00014020 	.word	0x00014020
   145f8:	e000ed00 	.word	0xe000ed00

000145fc <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   145fc:	4b03      	ldr	r3, [pc, #12]	; (1460c <_sbrkInit+0x10>)
   145fe:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   14600:	4b03      	ldr	r3, [pc, #12]	; (14610 <_sbrkInit+0x14>)
   14602:	6019      	str	r1, [r3, #0]
    brk = base;
   14604:	4b03      	ldr	r3, [pc, #12]	; (14614 <_sbrkInit+0x18>)
   14606:	6018      	str	r0, [r3, #0]
}
   14608:	4770      	bx	lr
   1460a:	bf00      	nop
   1460c:	10000574 	.word	0x10000574
   14610:	10000578 	.word	0x10000578
   14614:	10000570 	.word	0x10000570

00014618 <_sbrk>:

void *
_sbrk(int incr)
{
   14618:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   1461a:	4a0a      	ldr	r2, [pc, #40]	; (14644 <_sbrk+0x2c>)
   1461c:	6810      	ldr	r0, [r2, #0]
   1461e:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   14620:	4a09      	ldr	r2, [pc, #36]	; (14648 <_sbrk+0x30>)
   14622:	6812      	ldr	r2, [r2, #0]
   14624:	429a      	cmp	r2, r3
   14626:	d806      	bhi.n	14636 <_sbrk+0x1e>
   14628:	4a08      	ldr	r2, [pc, #32]	; (1464c <_sbrk+0x34>)
   1462a:	6812      	ldr	r2, [r2, #0]
   1462c:	429a      	cmp	r2, r3
   1462e:	d305      	bcc.n	1463c <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   14630:	4a04      	ldr	r2, [pc, #16]	; (14644 <_sbrk+0x2c>)
   14632:	6013      	str	r3, [r2, #0]
   14634:	4770      	bx	lr
        prev_brk = (char *)-1;
   14636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1463a:	4770      	bx	lr
   1463c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   14640:	4770      	bx	lr
   14642:	bf00      	nop
   14644:	10000570 	.word	0x10000570
   14648:	10000574 	.word	0x10000574
   1464c:	10000578 	.word	0x10000578

00014650 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   14650:	4770      	bx	lr
	...

00014654 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14654:	4b02      	ldr	r3, [pc, #8]	; (14660 <hal_debugger_connected+0xc>)
   14656:	6818      	ldr	r0, [r3, #0]
}
   14658:	f000 0001 	and.w	r0, r0, #1
   1465c:	4770      	bx	lr
   1465e:	bf00      	nop
   14660:	e000edf0 	.word	0xe000edf0

00014664 <hal_system_reset>:
{
   14664:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14666:	f7ff fff5 	bl	14654 <hal_debugger_connected>
   1466a:	b100      	cbz	r0, 1466e <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   1466c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1466e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14672:	4905      	ldr	r1, [pc, #20]	; (14688 <hal_system_reset+0x24>)
   14674:	68ca      	ldr	r2, [r1, #12]
   14676:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1467a:	4b04      	ldr	r3, [pc, #16]	; (1468c <hal_system_reset+0x28>)
   1467c:	4313      	orrs	r3, r2
   1467e:	60cb      	str	r3, [r1, #12]
   14680:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14684:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14686:	e7fd      	b.n	14684 <hal_system_reset+0x20>
   14688:	e000ed00 	.word	0xe000ed00
   1468c:	05fa0004 	.word	0x05fa0004

00014690 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14690:	4770      	bx	lr
	...

00014694 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14694:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14696:	4d0e      	ldr	r5, [pc, #56]	; (146d0 <__libc_init_array+0x3c>)
   14698:	4b0e      	ldr	r3, [pc, #56]	; (146d4 <__libc_init_array+0x40>)
   1469a:	1aed      	subs	r5, r5, r3
   1469c:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1469e:	2400      	movs	r4, #0
   146a0:	42ac      	cmp	r4, r5
   146a2:	d205      	bcs.n	146b0 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   146a4:	4b0b      	ldr	r3, [pc, #44]	; (146d4 <__libc_init_array+0x40>)
   146a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   146aa:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146ac:	3401      	adds	r4, #1
   146ae:	e7f7      	b.n	146a0 <__libc_init_array+0xc>

    _init();
   146b0:	f7ff ffee 	bl	14690 <_init>

    count = __init_array_end - __init_array_start;
   146b4:	4d08      	ldr	r5, [pc, #32]	; (146d8 <__libc_init_array+0x44>)
   146b6:	4b09      	ldr	r3, [pc, #36]	; (146dc <__libc_init_array+0x48>)
   146b8:	1aed      	subs	r5, r5, r3
   146ba:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   146bc:	2400      	movs	r4, #0
   146be:	e004      	b.n	146ca <__libc_init_array+0x36>
        __init_array_start[i]();
   146c0:	4b06      	ldr	r3, [pc, #24]	; (146dc <__libc_init_array+0x48>)
   146c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   146c6:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146c8:	3401      	adds	r4, #1
   146ca:	42ac      	cmp	r4, r5
   146cc:	d3f8      	bcc.n	146c0 <__libc_init_array+0x2c>
}
   146ce:	bd38      	pop	{r3, r4, r5, pc}
   146d0:	1000056c 	.word	0x1000056c
   146d4:	1000056c 	.word	0x1000056c
   146d8:	1000056c 	.word	0x1000056c
   146dc:	1000056c 	.word	0x1000056c

000146e0 <_start>:
{
   146e0:	b508      	push	{r3, lr}
        __libc_init_array();
   146e2:	f7ff ffd7 	bl	14694 <__libc_init_array>
    os_init(main);
   146e6:	4803      	ldr	r0, [pc, #12]	; (146f4 <_start+0x14>)
   146e8:	f000 fc60 	bl	14fac <os_init>
    os_start();
   146ec:	f000 fcca 	bl	15084 <os_start>
}
   146f0:	bd08      	pop	{r3, pc}
   146f2:	bf00      	nop
   146f4:	00014a7d 	.word	0x00014a7d

000146f8 <bleprph_on_reset>:
    return 0;
}

static void
bleprph_on_reset(int reason)
{
   146f8:	b508      	push	{r3, lr}
   146fa:	4603      	mov	r3, r0
    MODLOG_DFLT(ERROR, "Resetting state; reason=%d\n", reason);
   146fc:	4a02      	ldr	r2, [pc, #8]	; (14708 <bleprph_on_reset+0x10>)
   146fe:	2103      	movs	r1, #3
   14700:	2000      	movs	r0, #0
   14702:	f005 f815 	bl	19730 <modlog_printf>
}
   14706:	bd08      	pop	{r3, pc}
   14708:	00033cc8 	.word	0x00033cc8

0001470c <bleprph_advertise>:
{
   1470c:	b500      	push	{lr}
   1470e:	b09f      	sub	sp, #124	; 0x7c
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
   14710:	f10d 0173 	add.w	r1, sp, #115	; 0x73
   14714:	2000      	movs	r0, #0
   14716:	f014 ff79 	bl	2960c <ble_hs_id_infer_auto>
    if (rc != 0) {
   1471a:	2800      	cmp	r0, #0
   1471c:	d146      	bne.n	147ac <bleprph_advertise+0xa0>
    memset(&fields, 0, sizeof fields);
   1471e:	2260      	movs	r2, #96	; 0x60
   14720:	2100      	movs	r1, #0
   14722:	a802      	add	r0, sp, #8
   14724:	f002 f9e7 	bl	16af6 <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
   14728:	2306      	movs	r3, #6
   1472a:	f88d 3008 	strb.w	r3, [sp, #8]
    fields.tx_pwr_lvl_is_present = 1;
   1472e:	2301      	movs	r3, #1
   14730:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
   14734:	2380      	movs	r3, #128	; 0x80
   14736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    name = ble_svc_gap_device_name();
   1473a:	f018 fbc9 	bl	2ced0 <ble_svc_gap_device_name>
    fields.name = (uint8_t *)name;
   1473e:	9009      	str	r0, [sp, #36]	; 0x24
    fields.name_len = strlen(name);
   14740:	f002 fa01 	bl	16b46 <strlen>
   14744:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    fields.name_is_complete = 1;
   14748:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1474c:	f043 0301 	orr.w	r3, r3, #1
   14750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    fields.uuids16 = (ble_uuid16_t[]){
   14754:	4b1f      	ldr	r3, [pc, #124]	; (147d4 <bleprph_advertise+0xc8>)
   14756:	681b      	ldr	r3, [r3, #0]
   14758:	931d      	str	r3, [sp, #116]	; 0x74
   1475a:	ab1d      	add	r3, sp, #116	; 0x74
   1475c:	9303      	str	r3, [sp, #12]
    fields.num_uuids16 = 1;
   1475e:	2301      	movs	r3, #1
   14760:	f88d 3010 	strb.w	r3, [sp, #16]
    fields.uuids16_is_complete = 1;
   14764:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14768:	f043 0301 	orr.w	r3, r3, #1
   1476c:	f88d 3011 	strb.w	r3, [sp, #17]
    rc = ble_gap_adv_set_fields(&fields);
   14770:	a802      	add	r0, sp, #8
   14772:	f010 fa75 	bl	24c60 <ble_gap_adv_set_fields>
    if (rc != 0) {
   14776:	4603      	mov	r3, r0
   14778:	b9f8      	cbnz	r0, 147ba <bleprph_advertise+0xae>
    memset(&adv_params, 0, sizeof adv_params);
   1477a:	2100      	movs	r1, #0
   1477c:	911a      	str	r1, [sp, #104]	; 0x68
   1477e:	911b      	str	r1, [sp, #108]	; 0x6c
   14780:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
    adv_params.conn_mode = BLE_GAP_CONN_MODE_UND;
   14784:	2302      	movs	r3, #2
   14786:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
   1478a:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    rc = ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER,
   1478e:	9101      	str	r1, [sp, #4]
   14790:	4b11      	ldr	r3, [pc, #68]	; (147d8 <bleprph_advertise+0xcc>)
   14792:	9300      	str	r3, [sp, #0]
   14794:	ab1a      	add	r3, sp, #104	; 0x68
   14796:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1479a:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
   1479e:	f010 f9a9 	bl	24af4 <ble_gap_adv_start>
    if (rc != 0) {
   147a2:	4603      	mov	r3, r0
   147a4:	b978      	cbnz	r0, 147c6 <bleprph_advertise+0xba>
}
   147a6:	b01f      	add	sp, #124	; 0x7c
   147a8:	f85d fb04 	ldr.w	pc, [sp], #4
   147ac:	4603      	mov	r3, r0
        MODLOG_DFLT(ERROR, "error determining address type; rc=%d\n", rc);
   147ae:	4a0b      	ldr	r2, [pc, #44]	; (147dc <bleprph_advertise+0xd0>)
   147b0:	2103      	movs	r1, #3
   147b2:	2000      	movs	r0, #0
   147b4:	f004 ffbc 	bl	19730 <modlog_printf>
        return;
   147b8:	e7f5      	b.n	147a6 <bleprph_advertise+0x9a>
        MODLOG_DFLT(ERROR, "error setting advertisement data; rc=%d\n", rc);
   147ba:	4a09      	ldr	r2, [pc, #36]	; (147e0 <bleprph_advertise+0xd4>)
   147bc:	2103      	movs	r1, #3
   147be:	2000      	movs	r0, #0
   147c0:	f004 ffb6 	bl	19730 <modlog_printf>
        return;
   147c4:	e7ef      	b.n	147a6 <bleprph_advertise+0x9a>
        MODLOG_DFLT(ERROR, "error enabling advertisement; rc=%d\n", rc);
   147c6:	4a07      	ldr	r2, [pc, #28]	; (147e4 <bleprph_advertise+0xd8>)
   147c8:	2103      	movs	r1, #3
   147ca:	2000      	movs	r0, #0
   147cc:	f004 ffb0 	bl	19730 <modlog_printf>
        return;
   147d0:	e7e9      	b.n	147a6 <bleprph_advertise+0x9a>
   147d2:	bf00      	nop
   147d4:	00033c88 	.word	0x00033c88
   147d8:	000148a5 	.word	0x000148a5
   147dc:	00033ce4 	.word	0x00033ce4
   147e0:	00033d0c 	.word	0x00033d0c
   147e4:	00033d38 	.word	0x00033d38

000147e8 <bleprph_on_sync>:

static void
bleprph_on_sync(void)
{
   147e8:	b508      	push	{r3, lr}
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
   147ea:	2000      	movs	r0, #0
   147ec:	f018 fea6 	bl	2d53c <ble_hs_util_ensure_addr>
    assert(rc == 0);
   147f0:	b910      	cbnz	r0, 147f8 <bleprph_on_sync+0x10>

    /* Begin advertising. */
    bleprph_advertise();
   147f2:	f7ff ff8b 	bl	1470c <bleprph_advertise>
}
   147f6:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   147f8:	f7ff ff2c 	bl	14654 <hal_debugger_connected>
   147fc:	b100      	cbz	r0, 14800 <bleprph_on_sync+0x18>
   147fe:	be01      	bkpt	0x0001
   14800:	2300      	movs	r3, #0
   14802:	461a      	mov	r2, r3
   14804:	4619      	mov	r1, r3
   14806:	4618      	mov	r0, r3
   14808:	f000 fac6 	bl	14d98 <__assert_func>

0001480c <bleprph_print_conn_desc>:
{
   1480c:	b530      	push	{r4, r5, lr}
   1480e:	b087      	sub	sp, #28
   14810:	4604      	mov	r4, r0
    MODLOG_DFLT(INFO, "handle=%d our_ota_addr_type=%d our_ota_addr=",
   14812:	7c83      	ldrb	r3, [r0, #18]
   14814:	9300      	str	r3, [sp, #0]
   14816:	8c03      	ldrh	r3, [r0, #32]
   14818:	4a1d      	ldr	r2, [pc, #116]	; (14890 <bleprph_print_conn_desc+0x84>)
   1481a:	2101      	movs	r1, #1
   1481c:	2000      	movs	r0, #0
   1481e:	f004 ff87 	bl	19730 <modlog_printf>
    print_addr(desc->our_ota_addr.val);
   14822:	f104 0013 	add.w	r0, r4, #19
   14826:	f000 f965 	bl	14af4 <print_addr>
    MODLOG_DFLT(INFO, " our_id_addr_type=%d our_id_addr=",
   1482a:	7923      	ldrb	r3, [r4, #4]
   1482c:	4a19      	ldr	r2, [pc, #100]	; (14894 <bleprph_print_conn_desc+0x88>)
   1482e:	2101      	movs	r1, #1
   14830:	2000      	movs	r0, #0
   14832:	f004 ff7d 	bl	19730 <modlog_printf>
    print_addr(desc->our_id_addr.val);
   14836:	1d60      	adds	r0, r4, #5
   14838:	f000 f95c 	bl	14af4 <print_addr>
    MODLOG_DFLT(INFO, " peer_ota_addr_type=%d peer_ota_addr=",
   1483c:	7e63      	ldrb	r3, [r4, #25]
   1483e:	4a16      	ldr	r2, [pc, #88]	; (14898 <bleprph_print_conn_desc+0x8c>)
   14840:	2101      	movs	r1, #1
   14842:	2000      	movs	r0, #0
   14844:	f004 ff74 	bl	19730 <modlog_printf>
    print_addr(desc->peer_ota_addr.val);
   14848:	f104 001a 	add.w	r0, r4, #26
   1484c:	f000 f952 	bl	14af4 <print_addr>
    MODLOG_DFLT(INFO, " peer_id_addr_type=%d peer_id_addr=",
   14850:	7ae3      	ldrb	r3, [r4, #11]
   14852:	4a12      	ldr	r2, [pc, #72]	; (1489c <bleprph_print_conn_desc+0x90>)
   14854:	2101      	movs	r1, #1
   14856:	2000      	movs	r0, #0
   14858:	f004 ff6a 	bl	19730 <modlog_printf>
    print_addr(desc->peer_id_addr.val);
   1485c:	f104 000c 	add.w	r0, r4, #12
   14860:	f000 f948 	bl	14af4 <print_addr>
    MODLOG_DFLT(INFO, " conn_itvl=%d conn_latency=%d supervision_timeout=%d "
   14864:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   14866:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   14868:	7823      	ldrb	r3, [r4, #0]
   1486a:	f003 0001 	and.w	r0, r3, #1
   1486e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   14872:	f3c3 0380 	ubfx	r3, r3, #2, #1
   14876:	9304      	str	r3, [sp, #16]
   14878:	9503      	str	r5, [sp, #12]
   1487a:	9002      	str	r0, [sp, #8]
   1487c:	9101      	str	r1, [sp, #4]
   1487e:	9200      	str	r2, [sp, #0]
   14880:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   14882:	4a07      	ldr	r2, [pc, #28]	; (148a0 <bleprph_print_conn_desc+0x94>)
   14884:	2101      	movs	r1, #1
   14886:	2000      	movs	r0, #0
   14888:	f004 ff52 	bl	19730 <modlog_printf>
}
   1488c:	b007      	add	sp, #28
   1488e:	bd30      	pop	{r4, r5, pc}
   14890:	00033d60 	.word	0x00033d60
   14894:	00033d90 	.word	0x00033d90
   14898:	00033db4 	.word	0x00033db4
   1489c:	00033ddc 	.word	0x00033ddc
   148a0:	00033e00 	.word	0x00033e00

000148a4 <bleprph_gap_event>:
{
   148a4:	b570      	push	{r4, r5, r6, lr}
   148a6:	b092      	sub	sp, #72	; 0x48
   148a8:	4604      	mov	r4, r0
    switch (event->type) {
   148aa:	7803      	ldrb	r3, [r0, #0]
   148ac:	2b11      	cmp	r3, #17
   148ae:	f200 80cc 	bhi.w	14a4a <bleprph_gap_event+0x1a6>
   148b2:	e8df f003 	tbb	[pc, r3]
   148b6:	3509      	.short	0x3509
   148b8:	caca48ca 	.word	0xcaca48ca
   148bc:	67cacaca 	.word	0x67cacaca
   148c0:	cacaca71 	.word	0xcacaca71
   148c4:	b5caa990 	.word	0xb5caa990
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
   148c8:	6842      	ldr	r2, [r0, #4]
   148ca:	b9ea      	cbnz	r2, 14908 <bleprph_gap_event+0x64>
   148cc:	4b61      	ldr	r3, [pc, #388]	; (14a54 <bleprph_gap_event+0x1b0>)
   148ce:	9200      	str	r2, [sp, #0]
   148d0:	4a61      	ldr	r2, [pc, #388]	; (14a58 <bleprph_gap_event+0x1b4>)
   148d2:	2101      	movs	r1, #1
   148d4:	2000      	movs	r0, #0
   148d6:	f004 ff2b 	bl	19730 <modlog_printf>
        if (event->connect.status == 0) {
   148da:	6863      	ldr	r3, [r4, #4]
   148dc:	b93b      	cbnz	r3, 148ee <bleprph_gap_event+0x4a>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   148de:	a907      	add	r1, sp, #28
   148e0:	8920      	ldrh	r0, [r4, #8]
   148e2:	f010 f893 	bl	24a0c <ble_gap_conn_find>
            assert(rc == 0);
   148e6:	b988      	cbnz	r0, 1490c <bleprph_gap_event+0x68>
            bleprph_print_conn_desc(&desc);
   148e8:	a807      	add	r0, sp, #28
   148ea:	f7ff ff8f 	bl	1480c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   148ee:	4a5b      	ldr	r2, [pc, #364]	; (14a5c <bleprph_gap_event+0x1b8>)
   148f0:	2101      	movs	r1, #1
   148f2:	2000      	movs	r0, #0
   148f4:	f004 ff1c 	bl	19730 <modlog_printf>
        if (event->connect.status != 0) {
   148f8:	6864      	ldr	r4, [r4, #4]
   148fa:	2c00      	cmp	r4, #0
   148fc:	f000 80a6 	beq.w	14a4c <bleprph_gap_event+0x1a8>
            bleprph_advertise();
   14900:	f7ff ff04 	bl	1470c <bleprph_advertise>
        return 0;
   14904:	2400      	movs	r4, #0
   14906:	e0a1      	b.n	14a4c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
   14908:	4b55      	ldr	r3, [pc, #340]	; (14a60 <bleprph_gap_event+0x1bc>)
   1490a:	e7e0      	b.n	148ce <bleprph_gap_event+0x2a>
            assert(rc == 0);
   1490c:	f7ff fea2 	bl	14654 <hal_debugger_connected>
   14910:	b100      	cbz	r0, 14914 <bleprph_gap_event+0x70>
   14912:	be01      	bkpt	0x0001
   14914:	2300      	movs	r3, #0
   14916:	461a      	mov	r2, r3
   14918:	4619      	mov	r1, r3
   1491a:	4618      	mov	r0, r3
   1491c:	f000 fa3c 	bl	14d98 <__assert_func>
        MODLOG_DFLT(INFO, "disconnect; reason=%d ", event->disconnect.reason);
   14920:	6843      	ldr	r3, [r0, #4]
   14922:	4a50      	ldr	r2, [pc, #320]	; (14a64 <bleprph_gap_event+0x1c0>)
   14924:	2101      	movs	r1, #1
   14926:	2000      	movs	r0, #0
   14928:	f004 ff02 	bl	19730 <modlog_printf>
        bleprph_print_conn_desc(&event->disconnect.conn);
   1492c:	f104 0008 	add.w	r0, r4, #8
   14930:	f7ff ff6c 	bl	1480c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   14934:	4a49      	ldr	r2, [pc, #292]	; (14a5c <bleprph_gap_event+0x1b8>)
   14936:	2101      	movs	r1, #1
   14938:	2000      	movs	r0, #0
   1493a:	f004 fef9 	bl	19730 <modlog_printf>
        bleprph_advertise();
   1493e:	f7ff fee5 	bl	1470c <bleprph_advertise>
        return 0;
   14942:	2400      	movs	r4, #0
   14944:	e082      	b.n	14a4c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "connection updated; status=%d ",
   14946:	6843      	ldr	r3, [r0, #4]
   14948:	4a47      	ldr	r2, [pc, #284]	; (14a68 <bleprph_gap_event+0x1c4>)
   1494a:	2101      	movs	r1, #1
   1494c:	2000      	movs	r0, #0
   1494e:	f004 feef 	bl	19730 <modlog_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
   14952:	a907      	add	r1, sp, #28
   14954:	8920      	ldrh	r0, [r4, #8]
   14956:	f010 f859 	bl	24a0c <ble_gap_conn_find>
        assert(rc == 0);
   1495a:	4604      	mov	r4, r0
   1495c:	b940      	cbnz	r0, 14970 <bleprph_gap_event+0xcc>
        bleprph_print_conn_desc(&desc);
   1495e:	a807      	add	r0, sp, #28
   14960:	f7ff ff54 	bl	1480c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   14964:	4a3d      	ldr	r2, [pc, #244]	; (14a5c <bleprph_gap_event+0x1b8>)
   14966:	2101      	movs	r1, #1
   14968:	2000      	movs	r0, #0
   1496a:	f004 fee1 	bl	19730 <modlog_printf>
        return 0;
   1496e:	e06d      	b.n	14a4c <bleprph_gap_event+0x1a8>
        assert(rc == 0);
   14970:	f7ff fe70 	bl	14654 <hal_debugger_connected>
   14974:	b100      	cbz	r0, 14978 <bleprph_gap_event+0xd4>
   14976:	be01      	bkpt	0x0001
   14978:	2300      	movs	r3, #0
   1497a:	461a      	mov	r2, r3
   1497c:	4619      	mov	r1, r3
   1497e:	4618      	mov	r0, r3
   14980:	f000 fa0a 	bl	14d98 <__assert_func>
        MODLOG_DFLT(INFO, "advertise complete; reason=%d",
   14984:	6843      	ldr	r3, [r0, #4]
   14986:	4a39      	ldr	r2, [pc, #228]	; (14a6c <bleprph_gap_event+0x1c8>)
   14988:	2101      	movs	r1, #1
   1498a:	2000      	movs	r0, #0
   1498c:	f004 fed0 	bl	19730 <modlog_printf>
        bleprph_advertise();
   14990:	f7ff febc 	bl	1470c <bleprph_advertise>
        return 0;
   14994:	2400      	movs	r4, #0
   14996:	e059      	b.n	14a4c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "encryption change event; status=%d ",
   14998:	6843      	ldr	r3, [r0, #4]
   1499a:	4a35      	ldr	r2, [pc, #212]	; (14a70 <bleprph_gap_event+0x1cc>)
   1499c:	2101      	movs	r1, #1
   1499e:	2000      	movs	r0, #0
   149a0:	f004 fec6 	bl	19730 <modlog_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   149a4:	a907      	add	r1, sp, #28
   149a6:	8920      	ldrh	r0, [r4, #8]
   149a8:	f010 f830 	bl	24a0c <ble_gap_conn_find>
        assert(rc == 0);
   149ac:	4604      	mov	r4, r0
   149ae:	b940      	cbnz	r0, 149c2 <bleprph_gap_event+0x11e>
        bleprph_print_conn_desc(&desc);
   149b0:	a807      	add	r0, sp, #28
   149b2:	f7ff ff2b 	bl	1480c <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
   149b6:	4a29      	ldr	r2, [pc, #164]	; (14a5c <bleprph_gap_event+0x1b8>)
   149b8:	2101      	movs	r1, #1
   149ba:	2000      	movs	r0, #0
   149bc:	f004 feb8 	bl	19730 <modlog_printf>
        return 0;
   149c0:	e044      	b.n	14a4c <bleprph_gap_event+0x1a8>
        assert(rc == 0);
   149c2:	f7ff fe47 	bl	14654 <hal_debugger_connected>
   149c6:	b100      	cbz	r0, 149ca <bleprph_gap_event+0x126>
   149c8:	be01      	bkpt	0x0001
   149ca:	2300      	movs	r3, #0
   149cc:	461a      	mov	r2, r3
   149ce:	4619      	mov	r1, r3
   149d0:	4618      	mov	r0, r3
   149d2:	f000 f9e1 	bl	14d98 <__assert_func>
        MODLOG_DFLT(INFO, "subscribe event; conn_handle=%d attr_handle=%d "
   149d6:	88c2      	ldrh	r2, [r0, #6]
   149d8:	7a01      	ldrb	r1, [r0, #8]
   149da:	7a43      	ldrb	r3, [r0, #9]
   149dc:	f003 0001 	and.w	r0, r3, #1
   149e0:	f3c3 0540 	ubfx	r5, r3, #1, #1
   149e4:	f3c3 0680 	ubfx	r6, r3, #2, #1
   149e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   149ec:	9305      	str	r3, [sp, #20]
   149ee:	9604      	str	r6, [sp, #16]
   149f0:	9503      	str	r5, [sp, #12]
   149f2:	9002      	str	r0, [sp, #8]
   149f4:	9101      	str	r1, [sp, #4]
   149f6:	9200      	str	r2, [sp, #0]
   149f8:	88a3      	ldrh	r3, [r4, #4]
   149fa:	4a1e      	ldr	r2, [pc, #120]	; (14a74 <bleprph_gap_event+0x1d0>)
   149fc:	2101      	movs	r1, #1
   149fe:	2000      	movs	r0, #0
   14a00:	f004 fe96 	bl	19730 <modlog_printf>
        return 0;
   14a04:	2400      	movs	r4, #0
   14a06:	e021      	b.n	14a4c <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "mtu update event; conn_handle=%d cid=%d mtu=%d\n",
   14a08:	88c3      	ldrh	r3, [r0, #6]
   14a0a:	8902      	ldrh	r2, [r0, #8]
   14a0c:	9201      	str	r2, [sp, #4]
   14a0e:	9300      	str	r3, [sp, #0]
   14a10:	8883      	ldrh	r3, [r0, #4]
   14a12:	4a19      	ldr	r2, [pc, #100]	; (14a78 <bleprph_gap_event+0x1d4>)
   14a14:	2101      	movs	r1, #1
   14a16:	2000      	movs	r0, #0
   14a18:	f004 fe8a 	bl	19730 <modlog_printf>
        return 0;
   14a1c:	2400      	movs	r4, #0
   14a1e:	e015      	b.n	14a4c <bleprph_gap_event+0x1a8>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
   14a20:	a907      	add	r1, sp, #28
   14a22:	8880      	ldrh	r0, [r0, #4]
   14a24:	f00f fff2 	bl	24a0c <ble_gap_conn_find>
        assert(rc == 0);
   14a28:	b928      	cbnz	r0, 14a36 <bleprph_gap_event+0x192>
        ble_store_util_delete_peer(&desc.peer_id_addr);
   14a2a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   14a2e:	f017 fd78 	bl	2c522 <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
   14a32:	2401      	movs	r4, #1
   14a34:	e00a      	b.n	14a4c <bleprph_gap_event+0x1a8>
        assert(rc == 0);
   14a36:	f7ff fe0d 	bl	14654 <hal_debugger_connected>
   14a3a:	b100      	cbz	r0, 14a3e <bleprph_gap_event+0x19a>
   14a3c:	be01      	bkpt	0x0001
   14a3e:	2300      	movs	r3, #0
   14a40:	461a      	mov	r2, r3
   14a42:	4619      	mov	r1, r3
   14a44:	4618      	mov	r0, r3
   14a46:	f000 f9a7 	bl	14d98 <__assert_func>
    switch (event->type) {
   14a4a:	2400      	movs	r4, #0
}
   14a4c:	4620      	mov	r0, r4
   14a4e:	b012      	add	sp, #72	; 0x48
   14a50:	bd70      	pop	{r4, r5, r6, pc}
   14a52:	bf00      	nop
   14a54:	00033e68 	.word	0x00033e68
   14a58:	00033e74 	.word	0x00033e74
   14a5c:	00034dd4 	.word	0x00034dd4
   14a60:	00033e60 	.word	0x00033e60
   14a64:	00033e90 	.word	0x00033e90
   14a68:	00033ea8 	.word	0x00033ea8
   14a6c:	00033ec8 	.word	0x00033ec8
   14a70:	00033ee8 	.word	0x00033ee8
   14a74:	00033f0c 	.word	0x00033f0c
   14a78:	00033f68 	.word	0x00033f68

00014a7c <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(void)
{
   14a7c:	b510      	push	{r4, lr}
   14a7e:	b082      	sub	sp, #8
    static char ver_str[IMGMGR_NMGR_MAX_VER];
#endif
    int rc;

    /* Initialize OS */
    sysinit();
   14a80:	f005 fbe4 	bl	1a24c <sysinit_start>
   14a84:	f000 f90c 	bl	14ca0 <sysinit_app>
   14a88:	f005 fbe6 	bl	1a258 <sysinit_end>

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = bleprph_on_reset;
   14a8c:	4b13      	ldr	r3, [pc, #76]	; (14adc <main+0x60>)
   14a8e:	4a14      	ldr	r2, [pc, #80]	; (14ae0 <main+0x64>)
   14a90:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = bleprph_on_sync;
   14a92:	4a14      	ldr	r2, [pc, #80]	; (14ae4 <main+0x68>)
   14a94:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
   14a96:	4a14      	ldr	r2, [pc, #80]	; (14ae8 <main+0x6c>)
   14a98:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
   14a9a:	4a14      	ldr	r2, [pc, #80]	; (14aec <main+0x70>)
   14a9c:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
   14a9e:	f000 f8f3 	bl	14c88 <gatt_svr_init>
    assert(rc == 0);
   14aa2:	b148      	cbz	r0, 14ab8 <main+0x3c>
   14aa4:	f7ff fdd6 	bl	14654 <hal_debugger_connected>
   14aa8:	b100      	cbz	r0, 14aac <main+0x30>
   14aaa:	be01      	bkpt	0x0001
   14aac:	2300      	movs	r3, #0
   14aae:	461a      	mov	r2, r3
   14ab0:	4619      	mov	r1, r3
   14ab2:	4618      	mov	r0, r3
   14ab4:	f000 f970 	bl	14d98 <__assert_func>

#if MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0
    /* Set firmware version in DIS */
    imgr_my_version(&ver);
   14ab8:	4668      	mov	r0, sp
   14aba:	f002 f889 	bl	16bd0 <imgr_my_version>
    imgr_ver_str(&ver, ver_str);
   14abe:	4c0c      	ldr	r4, [pc, #48]	; (14af0 <main+0x74>)
   14ac0:	4621      	mov	r1, r4
   14ac2:	4668      	mov	r0, sp
   14ac4:	f002 f8f8 	bl	16cb8 <imgr_ver_str>
    ble_svc_dis_firmware_revision_set(ver_str);
   14ac8:	4620      	mov	r0, r4
   14aca:	f018 f939 	bl	2cd40 <ble_svc_dis_firmware_revision_set>

#if MYNEWT_VAL(BLEPRPH_LE_PHY_SUPPORT)
    phy_init();
#endif

    conf_load();
   14ace:	f002 fb9d 	bl	1720c <conf_load>

    /*
     * As the last thing, process events from default event queue.
     */
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
   14ad2:	f000 fd4d 	bl	15570 <os_eventq_dflt_get>
   14ad6:	f000 fd18 	bl	1550a <os_eventq_run>
    while (1) {
   14ada:	e7fa      	b.n	14ad2 <main+0x56>
   14adc:	100002d8 	.word	0x100002d8
   14ae0:	000146f9 	.word	0x000146f9
   14ae4:	000147e9 	.word	0x000147e9
   14ae8:	00014bf9 	.word	0x00014bf9
   14aec:	0002c589 	.word	0x0002c589
   14af0:	1000057c 	.word	0x1000057c

00014af4 <print_addr>:
    }
}

void
print_addr(const void *addr)
{
   14af4:	b530      	push	{r4, r5, lr}
   14af6:	b087      	sub	sp, #28
    const uint8_t *u8p;

    u8p = addr;
    MODLOG_DFLT(INFO, "%02x:%02x:%02x:%02x:%02x:%02x",
   14af8:	7903      	ldrb	r3, [r0, #4]
   14afa:	78c2      	ldrb	r2, [r0, #3]
   14afc:	7881      	ldrb	r1, [r0, #2]
   14afe:	7844      	ldrb	r4, [r0, #1]
   14b00:	7805      	ldrb	r5, [r0, #0]
   14b02:	9504      	str	r5, [sp, #16]
   14b04:	9403      	str	r4, [sp, #12]
   14b06:	9102      	str	r1, [sp, #8]
   14b08:	9201      	str	r2, [sp, #4]
   14b0a:	9300      	str	r3, [sp, #0]
   14b0c:	7943      	ldrb	r3, [r0, #5]
   14b0e:	4a03      	ldr	r2, [pc, #12]	; (14b1c <print_addr+0x28>)
   14b10:	2101      	movs	r1, #1
   14b12:	2000      	movs	r0, #0
   14b14:	f004 fe0c 	bl	19730 <modlog_printf>
                u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
}
   14b18:	b007      	add	sp, #28
   14b1a:	bd30      	pop	{r4, r5, pc}
   14b1c:	00033f98 	.word	0x00033f98

00014b20 <gatt_svr_chr_write>:
};

static int
gatt_svr_chr_write(struct os_mbuf *om, uint16_t min_len, uint16_t max_len,
                   void *dst, uint16_t *len)
{
   14b20:	b510      	push	{r4, lr}
   14b22:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   14b24:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   14b26:	428b      	cmp	r3, r1
   14b28:	d307      	bcc.n	14b3a <gatt_svr_chr_write+0x1a>
   14b2a:	4293      	cmp	r3, r2
   14b2c:	d807      	bhi.n	14b3e <gatt_svr_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   14b2e:	9b02      	ldr	r3, [sp, #8]
   14b30:	4621      	mov	r1, r4
   14b32:	f014 fddb 	bl	296ec <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   14b36:	b920      	cbnz	r0, 14b42 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   14b38:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   14b3a:	200d      	movs	r0, #13
   14b3c:	e7fc      	b.n	14b38 <gatt_svr_chr_write+0x18>
   14b3e:	200d      	movs	r0, #13
   14b40:	e7fa      	b.n	14b38 <gatt_svr_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   14b42:	200e      	movs	r0, #14
   14b44:	e7f8      	b.n	14b38 <gatt_svr_chr_write+0x18>
	...

00014b48 <gatt_svr_chr_access_sec_test>:

static int
gatt_svr_chr_access_sec_test(uint16_t conn_handle, uint16_t attr_handle,
                             struct ble_gatt_access_ctxt *ctxt,
                             void *arg)
{
   14b48:	b530      	push	{r4, r5, lr}
   14b4a:	b085      	sub	sp, #20
   14b4c:	4614      	mov	r4, r2
    const ble_uuid_t *uuid;
    int rand_num;
    int rc;

    uuid = ctxt->chr->uuid;
   14b4e:	6893      	ldr	r3, [r2, #8]
   14b50:	681d      	ldr	r5, [r3, #0]

    /* Determine which characteristic is being accessed by examining its
     * 128-bit UUID.
     */

    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
   14b52:	4926      	ldr	r1, [pc, #152]	; (14bec <gatt_svr_chr_access_sec_test+0xa4>)
   14b54:	4628      	mov	r0, r5
   14b56:	f017 fd5b 	bl	2c610 <ble_uuid_cmp>
   14b5a:	b9b8      	cbnz	r0, 14b8c <gatt_svr_chr_access_sec_test+0x44>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   14b5c:	7823      	ldrb	r3, [r4, #0]
   14b5e:	b95b      	cbnz	r3, 14b78 <gatt_svr_chr_access_sec_test+0x30>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
   14b60:	f001 ff78 	bl	16a54 <lrand48>

        /* Respond with a 32-bit random number. */
        rand_num = rand();
   14b64:	9003      	str	r0, [sp, #12]
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
   14b66:	2204      	movs	r2, #4
   14b68:	a903      	add	r1, sp, #12
   14b6a:	6860      	ldr	r0, [r4, #4]
   14b6c:	f000 fd95 	bl	1569a <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   14b70:	b100      	cbz	r0, 14b74 <gatt_svr_chr_access_sec_test+0x2c>
   14b72:	2011      	movs	r0, #17
    /* Unknown characteristic; the nimble stack should not have called this
     * function.
     */
    assert(0);
    return BLE_ATT_ERR_UNLIKELY;
}
   14b74:	b005      	add	sp, #20
   14b76:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   14b78:	f7ff fd6c 	bl	14654 <hal_debugger_connected>
   14b7c:	b100      	cbz	r0, 14b80 <gatt_svr_chr_access_sec_test+0x38>
   14b7e:	be01      	bkpt	0x0001
   14b80:	2300      	movs	r3, #0
   14b82:	461a      	mov	r2, r3
   14b84:	4619      	mov	r1, r3
   14b86:	4618      	mov	r0, r3
   14b88:	f000 f906 	bl	14d98 <__assert_func>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0) {
   14b8c:	4918      	ldr	r1, [pc, #96]	; (14bf0 <gatt_svr_chr_access_sec_test+0xa8>)
   14b8e:	4628      	mov	r0, r5
   14b90:	f017 fd3e 	bl	2c610 <ble_uuid_cmp>
   14b94:	b9f8      	cbnz	r0, 14bd6 <gatt_svr_chr_access_sec_test+0x8e>
        switch (ctxt->op) {
   14b96:	7823      	ldrb	r3, [r4, #0]
   14b98:	b153      	cbz	r3, 14bb0 <gatt_svr_chr_access_sec_test+0x68>
   14b9a:	2b01      	cmp	r3, #1
   14b9c:	d111      	bne.n	14bc2 <gatt_svr_chr_access_sec_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,
   14b9e:	2300      	movs	r3, #0
   14ba0:	9300      	str	r3, [sp, #0]
   14ba2:	4b14      	ldr	r3, [pc, #80]	; (14bf4 <gatt_svr_chr_access_sec_test+0xac>)
   14ba4:	2201      	movs	r2, #1
   14ba6:	4611      	mov	r1, r2
   14ba8:	6860      	ldr	r0, [r4, #4]
   14baa:	f7ff ffb9 	bl	14b20 <gatt_svr_chr_write>
            return rc;
   14bae:	e7e1      	b.n	14b74 <gatt_svr_chr_access_sec_test+0x2c>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
   14bb0:	2201      	movs	r2, #1
   14bb2:	4910      	ldr	r1, [pc, #64]	; (14bf4 <gatt_svr_chr_access_sec_test+0xac>)
   14bb4:	6860      	ldr	r0, [r4, #4]
   14bb6:	f000 fd70 	bl	1569a <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   14bba:	2800      	cmp	r0, #0
   14bbc:	d0da      	beq.n	14b74 <gatt_svr_chr_access_sec_test+0x2c>
   14bbe:	2011      	movs	r0, #17
   14bc0:	e7d8      	b.n	14b74 <gatt_svr_chr_access_sec_test+0x2c>
            assert(0);
   14bc2:	f7ff fd47 	bl	14654 <hal_debugger_connected>
   14bc6:	b100      	cbz	r0, 14bca <gatt_svr_chr_access_sec_test+0x82>
   14bc8:	be01      	bkpt	0x0001
   14bca:	2300      	movs	r3, #0
   14bcc:	461a      	mov	r2, r3
   14bce:	4619      	mov	r1, r3
   14bd0:	4618      	mov	r0, r3
   14bd2:	f000 f8e1 	bl	14d98 <__assert_func>
    assert(0);
   14bd6:	f7ff fd3d 	bl	14654 <hal_debugger_connected>
   14bda:	b100      	cbz	r0, 14bde <gatt_svr_chr_access_sec_test+0x96>
   14bdc:	be01      	bkpt	0x0001
   14bde:	2300      	movs	r3, #0
   14be0:	461a      	mov	r2, r3
   14be2:	4619      	mov	r1, r3
   14be4:	4618      	mov	r0, r3
   14be6:	f000 f8d7 	bl	14d98 <__assert_func>
   14bea:	bf00      	nop
   14bec:	0003404c 	.word	0x0003404c
   14bf0:	00034060 	.word	0x00034060
   14bf4:	10000595 	.word	0x10000595

00014bf8 <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
   14bf8:	b510      	push	{r4, lr}
   14bfa:	b08c      	sub	sp, #48	; 0x30
   14bfc:	4604      	mov	r4, r0
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
   14bfe:	7803      	ldrb	r3, [r0, #0]
   14c00:	2b02      	cmp	r3, #2
   14c02:	d01c      	beq.n	14c3e <gatt_svr_register_cb+0x46>
   14c04:	2b03      	cmp	r3, #3
   14c06:	d02a      	beq.n	14c5e <gatt_svr_register_cb+0x66>
   14c08:	2b01      	cmp	r3, #1
   14c0a:	d009      	beq.n	14c20 <gatt_svr_register_cb+0x28>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
   14c0c:	f7ff fd22 	bl	14654 <hal_debugger_connected>
   14c10:	b100      	cbz	r0, 14c14 <gatt_svr_register_cb+0x1c>
   14c12:	be01      	bkpt	0x0001
   14c14:	2300      	movs	r3, #0
   14c16:	461a      	mov	r2, r3
   14c18:	4619      	mov	r1, r3
   14c1a:	4618      	mov	r0, r3
   14c1c:	f000 f8bc 	bl	14d98 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
   14c20:	6883      	ldr	r3, [r0, #8]
   14c22:	a902      	add	r1, sp, #8
   14c24:	6858      	ldr	r0, [r3, #4]
   14c26:	f017 fd11 	bl	2c64c <ble_uuid_to_str>
   14c2a:	4603      	mov	r3, r0
   14c2c:	88a2      	ldrh	r2, [r4, #4]
   14c2e:	9200      	str	r2, [sp, #0]
   14c30:	4a12      	ldr	r2, [pc, #72]	; (14c7c <gatt_svr_register_cb+0x84>)
   14c32:	2100      	movs	r1, #0
   14c34:	4608      	mov	r0, r1
   14c36:	f004 fd7b 	bl	19730 <modlog_printf>
        break;
    }
}
   14c3a:	b00c      	add	sp, #48	; 0x30
   14c3c:	bd10      	pop	{r4, pc}
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
   14c3e:	6883      	ldr	r3, [r0, #8]
   14c40:	a902      	add	r1, sp, #8
   14c42:	6818      	ldr	r0, [r3, #0]
   14c44:	f017 fd02 	bl	2c64c <ble_uuid_to_str>
   14c48:	4603      	mov	r3, r0
   14c4a:	88a2      	ldrh	r2, [r4, #4]
   14c4c:	88e1      	ldrh	r1, [r4, #6]
   14c4e:	9101      	str	r1, [sp, #4]
   14c50:	9200      	str	r2, [sp, #0]
   14c52:	4a0b      	ldr	r2, [pc, #44]	; (14c80 <gatt_svr_register_cb+0x88>)
   14c54:	2100      	movs	r1, #0
   14c56:	4608      	mov	r0, r1
   14c58:	f004 fd6a 	bl	19730 <modlog_printf>
        break;
   14c5c:	e7ed      	b.n	14c3a <gatt_svr_register_cb+0x42>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
   14c5e:	6883      	ldr	r3, [r0, #8]
   14c60:	a902      	add	r1, sp, #8
   14c62:	6818      	ldr	r0, [r3, #0]
   14c64:	f017 fcf2 	bl	2c64c <ble_uuid_to_str>
   14c68:	4603      	mov	r3, r0
   14c6a:	88a2      	ldrh	r2, [r4, #4]
   14c6c:	9200      	str	r2, [sp, #0]
   14c6e:	4a05      	ldr	r2, [pc, #20]	; (14c84 <gatt_svr_register_cb+0x8c>)
   14c70:	2100      	movs	r1, #0
   14c72:	4608      	mov	r0, r1
   14c74:	f004 fd5c 	bl	19730 <modlog_printf>
        break;
   14c78:	e7df      	b.n	14c3a <gatt_svr_register_cb+0x42>
   14c7a:	bf00      	nop
   14c7c:	00033fb8 	.word	0x00033fb8
   14c80:	00033fe0 	.word	0x00033fe0
   14c84:	00034020 	.word	0x00034020

00014c88 <gatt_svr_init>:

int
gatt_svr_init(void)
{
   14c88:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   14c8a:	4804      	ldr	r0, [pc, #16]	; (14c9c <gatt_svr_init+0x14>)
   14c8c:	f012 fd6e 	bl	2776c <ble_gatts_count_cfg>
    if (rc != 0) {
   14c90:	b100      	cbz	r0, 14c94 <gatt_svr_init+0xc>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   14c92:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   14c94:	4801      	ldr	r0, [pc, #4]	; (14c9c <gatt_svr_init+0x14>)
   14c96:	f012 fd45 	bl	27724 <ble_gatts_add_svcs>
    if (rc != 0) {
   14c9a:	e7fa      	b.n	14c92 <gatt_svr_init+0xa>
   14c9c:	00034088 	.word	0x00034088

00014ca0 <sysinit_app>:
void smp_ble_pkg_init(void);
void stat_mgmt_module_init(void);

void
sysinit_app(void)
{
   14ca0:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   14ca2:	f000 fa01 	bl	150a8 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   14ca6:	f003 ff9d 	bl	18be4 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   14caa:	f005 fa6b 	bl	1a184 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   14cae:	f003 fc85 	bl	185bc <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   14cb2:	f002 fa4d 	bl	17150 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
   14cb6:	f018 fd57 	bl	2d768 <ble_hci_ram_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   14cba:	f004 f9a1 	bl	19000 <log_init>
    /* 100.2: mfg_init (sys/mfg) */
    mfg_init();
   14cbe:	f004 febf 	bl	19a40 <mfg_init>
    /* 100.3: modlog_init (sys/log/modlog) */
    modlog_init();
   14cc2:	f004 fd53 	bl	1976c <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   14cc6:	f012 ffa9 	bl	27c1c <ble_hs_init>
    /* 200.1: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   14cca:	f005 f97d 	bl	19fc8 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   14cce:	f002 fa55 	bl	1717c <config_pkg_init_stage2>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
   14cd2:	f007 fe75 	bl	1c9c0 <ble_ll_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   14cd6:	f018 f8ff 	bl	2ced8 <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   14cda:	f018 f96b 	bl	2cfb4 <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   14cde:	f017 ffbd 	bl	2cc5c <ble_svc_ans_init>
    /* 303.1: ble_svc_dis_init (nimble/host/services/dis) */
    ble_svc_dis_init();
   14ce2:	f018 f833 	bl	2cd4c <ble_svc_dis_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   14ce6:	f018 fbc5 	bl	2d474 <ble_store_config_init>
    /* 500.1: id_init (sys/id) */
    id_init();
   14cea:	f004 f883 	bl	18df4 <id_init>
    /* 500.2: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   14cee:	f001 ffcd 	bl	16c8c <imgmgr_module_init>
    /* 500.3: smp_pkg_init (mgmt/smp) */
    smp_pkg_init();
   14cf2:	f002 f8d3 	bl	16e9c <smp_pkg_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   14cf6:	f000 f80b 	bl	14d10 <split_app_init>

    /*** Stage 501 */
    /* 501.0: img_mgmt_module_init (cmd/img_mgmt/port/mynewt) */
    img_mgmt_module_init();
   14cfa:	f006 fe07 	bl	1b90c <img_mgmt_module_init>
    /* 501.1: log_mgmt_module_init (cmd/log_mgmt/port/mynewt) */
    log_mgmt_module_init();
   14cfe:	f006 ff53 	bl	1bba8 <log_mgmt_module_init>
    /* 501.2: os_mgmt_module_init (cmd/os_mgmt) */
    os_mgmt_module_init();
   14d02:	f007 f887 	bl	1be14 <os_mgmt_module_init>
    /* 501.3: smp_ble_pkg_init (mgmt/smp/transport/ble) */
    smp_ble_pkg_init();
   14d06:	f002 f98b 	bl	17020 <smp_ble_pkg_init>
    /* 501.4: stat_mgmt_module_init (cmd/stat_mgmt/port/mynewt) */
    stat_mgmt_module_init();
   14d0a:	f007 f941 	bl	1bf90 <stat_mgmt_module_init>
}
   14d0e:	bd08      	pop	{r3, pc}

00014d10 <split_app_init>:
    },
};

void
split_app_init(void)
{
   14d10:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14d12:	4b0e      	ldr	r3, [pc, #56]	; (14d4c <split_app_init+0x3c>)
   14d14:	781b      	ldrb	r3, [r3, #0]
   14d16:	b12b      	cbz	r3, 14d24 <split_app_init+0x14>

    rc = scfg_register(&split_scfg, "split");
   14d18:	490d      	ldr	r1, [pc, #52]	; (14d50 <split_app_init+0x40>)
   14d1a:	480e      	ldr	r0, [pc, #56]	; (14d54 <split_app_init+0x44>)
   14d1c:	f005 fc6c 	bl	1a5f8 <scfg_register>
    assert(rc == 0);
   14d20:	b950      	cbnz	r0, 14d38 <split_app_init+0x28>
}
   14d22:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14d24:	f7ff fc96 	bl	14654 <hal_debugger_connected>
   14d28:	b100      	cbz	r0, 14d2c <split_app_init+0x1c>
   14d2a:	be01      	bkpt	0x0001
   14d2c:	2300      	movs	r3, #0
   14d2e:	461a      	mov	r2, r3
   14d30:	4619      	mov	r1, r3
   14d32:	4618      	mov	r0, r3
   14d34:	f000 f830 	bl	14d98 <__assert_func>
    assert(rc == 0);
   14d38:	f7ff fc8c 	bl	14654 <hal_debugger_connected>
   14d3c:	b100      	cbz	r0, 14d40 <split_app_init+0x30>
   14d3e:	be01      	bkpt	0x0001
   14d40:	2300      	movs	r3, #0
   14d42:	461a      	mov	r2, r3
   14d44:	4619      	mov	r1, r3
   14d46:	4618      	mov	r0, r3
   14d48:	f000 f826 	bl	14d98 <__assert_func>
   14d4c:	10001e3c 	.word	0x10001e3c
   14d50:	000340a8 	.word	0x000340a8
   14d54:	1000014c 	.word	0x1000014c

00014d58 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   14d58:	4b01      	ldr	r3, [pc, #4]	; (14d60 <split_app_active_get+0x8>)
   14d5a:	f993 0000 	ldrsb.w	r0, [r3]
   14d5e:	4770      	bx	lr
   14d60:	10000596 	.word	0x10000596

00014d64 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   14d64:	2803      	cmp	r0, #3
   14d66:	d803      	bhi.n	14d70 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   14d68:	4b03      	ldr	r3, [pc, #12]	; (14d78 <split_mode_set+0x14>)
   14d6a:	7018      	strb	r0, [r3, #0]
    return 0;
   14d6c:	2000      	movs	r0, #0
   14d6e:	4770      	bx	lr
        return SYS_EINVAL;
   14d70:	f06f 0001 	mvn.w	r0, #1
}
   14d74:	4770      	bx	lr
   14d76:	bf00      	nop
   14d78:	10000597 	.word	0x10000597

00014d7c <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   14d7c:	b508      	push	{r3, lr}
    int rc;

    rc = split_mode_set(split_mode);
   14d7e:	f7ff fff1 	bl	14d64 <split_mode_set>
    if (rc != 0) {
   14d82:	b100      	cbz	r0, 14d86 <split_write_split+0xa>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   14d84:	bd08      	pop	{r3, pc}
    rc = scfg_save_val(&split_scfg, &split_mode_cur);
   14d86:	4902      	ldr	r1, [pc, #8]	; (14d90 <split_write_split+0x14>)
   14d88:	4802      	ldr	r0, [pc, #8]	; (14d94 <split_write_split+0x18>)
   14d8a:	f005 fc27 	bl	1a5dc <scfg_save_val>
    if (rc != 0) {
   14d8e:	e7f9      	b.n	14d84 <split_write_split+0x8>
   14d90:	10000597 	.word	0x10000597
   14d94:	1000014c 	.word	0x1000014c

00014d98 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   14d98:	b508      	push	{r3, lr}
   14d9a:	4675      	mov	r5, lr
   14d9c:	4604      	mov	r4, r0
   14d9e:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   14da0:	f001 fcb0 	bl	16704 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   14da4:	f003 fb3e 	bl	18424 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   14da8:	b16c      	cbz	r4, 14dc6 <__assert_func+0x2e>
   14daa:	4633      	mov	r3, r6
   14dac:	4622      	mov	r2, r4
   14dae:	4629      	mov	r1, r5
   14db0:	4807      	ldr	r0, [pc, #28]	; (14dd0 <__assert_func+0x38>)
   14db2:	f003 fc51 	bl	18658 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   14db6:	4b07      	ldr	r3, [pc, #28]	; (14dd4 <__assert_func+0x3c>)
   14db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14dbc:	605a      	str	r2, [r3, #4]
    asm("isb");
   14dbe:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   14dc2:	f7ff fc4f 	bl	14664 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   14dc6:	4629      	mov	r1, r5
   14dc8:	4803      	ldr	r0, [pc, #12]	; (14dd8 <__assert_func+0x40>)
   14dca:	f003 fc45 	bl	18658 <console_printf>
   14dce:	e7f2      	b.n	14db6 <__assert_func+0x1e>
   14dd0:	000340e8 	.word	0x000340e8
   14dd4:	e000ed00 	.word	0xe000ed00
   14dd8:	000340d8 	.word	0x000340d8

00014ddc <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   14ddc:	b500      	push	{lr}
   14dde:	b083      	sub	sp, #12
   14de0:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   14de2:	f003 fb1f 	bl	18424 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   14de6:	4d1b      	ldr	r5, [pc, #108]	; (14e54 <os_default_irq+0x78>)
   14de8:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   14dea:	6822      	ldr	r2, [r4, #0]
   14dec:	f3c1 0108 	ubfx	r1, r1, #0, #9
   14df0:	4819      	ldr	r0, [pc, #100]	; (14e58 <os_default_irq+0x7c>)
   14df2:	f003 fc31 	bl	18658 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   14df6:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   14df8:	6883      	ldr	r3, [r0, #8]
   14dfa:	6842      	ldr	r2, [r0, #4]
   14dfc:	6801      	ldr	r1, [r0, #0]
   14dfe:	68c0      	ldr	r0, [r0, #12]
   14e00:	9000      	str	r0, [sp, #0]
   14e02:	4816      	ldr	r0, [pc, #88]	; (14e5c <os_default_irq+0x80>)
   14e04:	f003 fc28 	bl	18658 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   14e08:	6923      	ldr	r3, [r4, #16]
   14e0a:	9300      	str	r3, [sp, #0]
   14e0c:	68e3      	ldr	r3, [r4, #12]
   14e0e:	68a2      	ldr	r2, [r4, #8]
   14e10:	6861      	ldr	r1, [r4, #4]
   14e12:	4813      	ldr	r0, [pc, #76]	; (14e60 <os_default_irq+0x84>)
   14e14:	f003 fc20 	bl	18658 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   14e18:	6a23      	ldr	r3, [r4, #32]
   14e1a:	9300      	str	r3, [sp, #0]
   14e1c:	69e3      	ldr	r3, [r4, #28]
   14e1e:	69a2      	ldr	r2, [r4, #24]
   14e20:	6961      	ldr	r1, [r4, #20]
   14e22:	4810      	ldr	r0, [pc, #64]	; (14e64 <os_default_irq+0x88>)
   14e24:	f003 fc18 	bl	18658 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   14e28:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   14e2a:	6983      	ldr	r3, [r0, #24]
   14e2c:	6942      	ldr	r2, [r0, #20]
   14e2e:	6901      	ldr	r1, [r0, #16]
   14e30:	69c0      	ldr	r0, [r0, #28]
   14e32:	9000      	str	r0, [sp, #0]
   14e34:	480c      	ldr	r0, [pc, #48]	; (14e68 <os_default_irq+0x8c>)
   14e36:	f003 fc0f 	bl	18658 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   14e3a:	6869      	ldr	r1, [r5, #4]
   14e3c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   14e3e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14e40:	480a      	ldr	r0, [pc, #40]	; (14e6c <os_default_irq+0x90>)
   14e42:	f003 fc09 	bl	18658 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   14e46:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   14e48:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14e4a:	4809      	ldr	r0, [pc, #36]	; (14e70 <os_default_irq+0x94>)
   14e4c:	f003 fc04 	bl	18658 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   14e50:	f7ff fc08 	bl	14664 <hal_system_reset>
   14e54:	e000ed00 	.word	0xe000ed00
   14e58:	00034100 	.word	0x00034100
   14e5c:	00034134 	.word	0x00034134
   14e60:	00034168 	.word	0x00034168
   14e64:	0003419c 	.word	0x0003419c
   14e68:	000341d0 	.word	0x000341d0
   14e6c:	00034204 	.word	0x00034204
   14e70:	0003422c 	.word	0x0003422c

00014e74 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   14e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   14e76:	f01c f9a6 	bl	311c6 <hal_watchdog_tickle>
    sanity_last = 0;
   14e7a:	2600      	movs	r6, #0
   14e7c:	e00e      	b.n	14e9c <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   14e7e:	f001 f8e1 	bl	16044 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   14e82:	f01c f9a0 	bl	311c6 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   14e86:	4626      	mov	r6, r4
   14e88:	e014      	b.n	14eb4 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   14e8a:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   14e8e:	e025      	b.n	14edc <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   14e90:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   14e92:	f01b fc91 	bl	307b8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   14e96:	4628      	mov	r0, r5
   14e98:	f001 fc3a 	bl	16710 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   14e9c:	4a15      	ldr	r2, [pc, #84]	; (14ef4 <os_idle_task+0x80>)
   14e9e:	6813      	ldr	r3, [r2, #0]
   14ea0:	3301      	adds	r3, #1
   14ea2:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   14ea4:	f001 fb68 	bl	16578 <os_time_get>
   14ea8:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   14eaa:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14eae:	1ac3      	subs	r3, r0, r3
   14eb0:	2b00      	cmp	r3, #0
   14eb2:	dae4      	bge.n	14e7e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   14eb4:	f001 fc26 	bl	16704 <os_arch_save_sr>
   14eb8:	4605      	mov	r5, r0
        now = os_time_get();
   14eba:	f001 fb5d 	bl	16578 <os_time_get>
   14ebe:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   14ec0:	f001 fa02 	bl	162c8 <os_sched_wakeup_ticks>
   14ec4:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   14ec6:	4638      	mov	r0, r7
   14ec8:	f000 f9ae 	bl	15228 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   14ecc:	4284      	cmp	r4, r0
   14ece:	bf28      	it	cs
   14ed0:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   14ed2:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14ed6:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   14ed8:	2800      	cmp	r0, #0
   14eda:	ddd6      	ble.n	14e8a <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   14edc:	42a0      	cmp	r0, r4
   14ede:	bf28      	it	cs
   14ee0:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   14ee2:	280b      	cmp	r0, #11
   14ee4:	d9d4      	bls.n	14e90 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   14ee6:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   14eea:	d9d2      	bls.n	14e92 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   14eec:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   14ef0:	e7cf      	b.n	14e92 <os_idle_task+0x1e>
   14ef2:	bf00      	nop
   14ef4:	100006e8 	.word	0x100006e8

00014ef8 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   14ef8:	b508      	push	{r3, lr}
   14efa:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   14efc:	2100      	movs	r1, #0
   14efe:	4608      	mov	r0, r1
   14f00:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   14f02:	f7ff fba7 	bl	14654 <hal_debugger_connected>
   14f06:	b100      	cbz	r0, 14f0a <os_main+0x12>
   14f08:	be01      	bkpt	0x0001
   14f0a:	2300      	movs	r3, #0
   14f0c:	461a      	mov	r2, r3
   14f0e:	4619      	mov	r1, r3
   14f10:	4618      	mov	r0, r3
   14f12:	f7ff ff41 	bl	14d98 <__assert_func>
	...

00014f18 <os_started>:
}
   14f18:	4b01      	ldr	r3, [pc, #4]	; (14f20 <os_started+0x8>)
   14f1a:	6818      	ldr	r0, [r3, #0]
   14f1c:	4770      	bx	lr
   14f1e:	bf00      	nop
   14f20:	10000f40 	.word	0x10000f40

00014f24 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   14f24:	b500      	push	{lr}
   14f26:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   14f28:	2340      	movs	r3, #64	; 0x40
   14f2a:	9303      	str	r3, [sp, #12]
   14f2c:	4b1b      	ldr	r3, [pc, #108]	; (14f9c <os_init_idle_task+0x78>)
   14f2e:	9302      	str	r3, [sp, #8]
   14f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f34:	9301      	str	r3, [sp, #4]
   14f36:	23ff      	movs	r3, #255	; 0xff
   14f38:	9300      	str	r3, [sp, #0]
   14f3a:	2300      	movs	r3, #0
   14f3c:	4a18      	ldr	r2, [pc, #96]	; (14fa0 <os_init_idle_task+0x7c>)
   14f3e:	4919      	ldr	r1, [pc, #100]	; (14fa4 <os_init_idle_task+0x80>)
   14f40:	4819      	ldr	r0, [pc, #100]	; (14fa8 <os_init_idle_task+0x84>)
   14f42:	f001 fa25 	bl	16390 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   14f46:	b950      	cbnz	r0, 14f5e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   14f48:	f001 f8be 	bl	160c8 <os_sanity_init>
    assert(rc == 0);
   14f4c:	b988      	cbnz	r0, 14f72 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   14f4e:	f247 5030 	movw	r0, #30000	; 0x7530
   14f52:	f01c f935 	bl	311c0 <hal_watchdog_init>
    assert(rc == 0);
   14f56:	b9b0      	cbnz	r0, 14f86 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   14f58:	b005      	add	sp, #20
   14f5a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   14f5e:	f7ff fb79 	bl	14654 <hal_debugger_connected>
   14f62:	b100      	cbz	r0, 14f66 <os_init_idle_task+0x42>
   14f64:	be01      	bkpt	0x0001
   14f66:	2300      	movs	r3, #0
   14f68:	461a      	mov	r2, r3
   14f6a:	4619      	mov	r1, r3
   14f6c:	4618      	mov	r0, r3
   14f6e:	f7ff ff13 	bl	14d98 <__assert_func>
    assert(rc == 0);
   14f72:	f7ff fb6f 	bl	14654 <hal_debugger_connected>
   14f76:	b100      	cbz	r0, 14f7a <os_init_idle_task+0x56>
   14f78:	be01      	bkpt	0x0001
   14f7a:	2300      	movs	r3, #0
   14f7c:	461a      	mov	r2, r3
   14f7e:	4619      	mov	r1, r3
   14f80:	4618      	mov	r0, r3
   14f82:	f7ff ff09 	bl	14d98 <__assert_func>
    assert(rc == 0);
   14f86:	f7ff fb65 	bl	14654 <hal_debugger_connected>
   14f8a:	b100      	cbz	r0, 14f8e <os_init_idle_task+0x6a>
   14f8c:	be01      	bkpt	0x0001
   14f8e:	2300      	movs	r3, #0
   14f90:	461a      	mov	r2, r3
   14f92:	4619      	mov	r1, r3
   14f94:	4618      	mov	r0, r3
   14f96:	f7ff feff 	bl	14d98 <__assert_func>
   14f9a:	bf00      	nop
   14f9c:	100005e8 	.word	0x100005e8
   14fa0:	00014e75 	.word	0x00014e75
   14fa4:	00034248 	.word	0x00034248
   14fa8:	10000598 	.word	0x10000598

00014fac <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   14fac:	b510      	push	{r4, lr}
   14fae:	b084      	sub	sp, #16
   14fb0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   14fb2:	4b2e      	ldr	r3, [pc, #184]	; (1506c <os_init+0xc0>)
   14fb4:	2200      	movs	r2, #0
   14fb6:	601a      	str	r2, [r3, #0]
   14fb8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   14fba:	4b2d      	ldr	r3, [pc, #180]	; (15070 <os_init+0xc4>)
   14fbc:	601a      	str	r2, [r3, #0]
   14fbe:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   14fc0:	f000 fad6 	bl	15570 <os_eventq_dflt_get>
   14fc4:	f000 fa0e 	bl	153e4 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   14fc8:	f000 fa04 	bl	153d4 <os_dev_reset>

    err = os_arch_os_init();
   14fcc:	f001 fbd6 	bl	1677c <os_arch_os_init>
    assert(err == OS_OK);
   14fd0:	bb18      	cbnz	r0, 1501a <os_init+0x6e>

    if (main_fn) {
   14fd2:	b194      	cbz	r4, 14ffa <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   14fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
   14fd8:	9303      	str	r3, [sp, #12]
   14fda:	4b26      	ldr	r3, [pc, #152]	; (15074 <os_init+0xc8>)
   14fdc:	9302      	str	r3, [sp, #8]
   14fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fe2:	9301      	str	r3, [sp, #4]
   14fe4:	237f      	movs	r3, #127	; 0x7f
   14fe6:	9300      	str	r3, [sp, #0]
   14fe8:	4623      	mov	r3, r4
   14fea:	4a23      	ldr	r2, [pc, #140]	; (15078 <os_init+0xcc>)
   14fec:	4923      	ldr	r1, [pc, #140]	; (1507c <os_init+0xd0>)
   14fee:	4824      	ldr	r0, [pc, #144]	; (15080 <os_init+0xd4>)
   14ff0:	f001 f9ce 	bl	16390 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   14ff4:	f010 0fff 	tst.w	r0, #255	; 0xff
   14ff8:	d119      	bne.n	1502e <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   14ffa:	f01b f86f 	bl	300dc <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   14ffe:	2001      	movs	r0, #1
   15000:	f000 f9a0 	bl	15344 <os_dev_initialize_all>
    assert(err == OS_OK);
   15004:	f010 0fff 	tst.w	r0, #255	; 0xff
   15008:	d11b      	bne.n	15042 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1500a:	2002      	movs	r0, #2
   1500c:	f000 f99a 	bl	15344 <os_dev_initialize_all>
    assert(err == OS_OK);
   15010:	f010 0fff 	tst.w	r0, #255	; 0xff
   15014:	d11f      	bne.n	15056 <os_init+0xaa>
}
   15016:	b004      	add	sp, #16
   15018:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1501a:	f7ff fb1b 	bl	14654 <hal_debugger_connected>
   1501e:	b100      	cbz	r0, 15022 <os_init+0x76>
   15020:	be01      	bkpt	0x0001
   15022:	2300      	movs	r3, #0
   15024:	461a      	mov	r2, r3
   15026:	4619      	mov	r1, r3
   15028:	4618      	mov	r0, r3
   1502a:	f7ff feb5 	bl	14d98 <__assert_func>
        assert(err == 0);
   1502e:	f7ff fb11 	bl	14654 <hal_debugger_connected>
   15032:	b100      	cbz	r0, 15036 <os_init+0x8a>
   15034:	be01      	bkpt	0x0001
   15036:	2300      	movs	r3, #0
   15038:	461a      	mov	r2, r3
   1503a:	4619      	mov	r1, r3
   1503c:	4618      	mov	r0, r3
   1503e:	f7ff feab 	bl	14d98 <__assert_func>
    assert(err == OS_OK);
   15042:	f7ff fb07 	bl	14654 <hal_debugger_connected>
   15046:	b100      	cbz	r0, 1504a <os_init+0x9e>
   15048:	be01      	bkpt	0x0001
   1504a:	2300      	movs	r3, #0
   1504c:	461a      	mov	r2, r3
   1504e:	4619      	mov	r1, r3
   15050:	4618      	mov	r0, r3
   15052:	f7ff fea1 	bl	14d98 <__assert_func>
    assert(err == OS_OK);
   15056:	f7ff fafd 	bl	14654 <hal_debugger_connected>
   1505a:	b100      	cbz	r0, 1505e <os_init+0xb2>
   1505c:	be01      	bkpt	0x0001
   1505e:	2300      	movs	r3, #0
   15060:	461a      	mov	r2, r3
   15062:	4619      	mov	r1, r3
   15064:	4618      	mov	r0, r3
   15066:	f7ff fe97 	bl	14d98 <__assert_func>
   1506a:	bf00      	nop
   1506c:	10000f44 	.word	0x10000f44
   15070:	1000194c 	.word	0x1000194c
   15074:	100006f0 	.word	0x100006f0
   15078:	00014ef9 	.word	0x00014ef9
   1507c:	00034250 	.word	0x00034250
   15080:	10000ef0 	.word	0x10000ef0

00015084 <os_start>:

void
os_start(void)
{
   15084:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   15086:	f01c f89d 	bl	311c4 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   1508a:	f001 fbd7 	bl	1683c <os_arch_os_start>
    assert(err == OS_OK);
   1508e:	b900      	cbnz	r0, 15092 <os_start+0xe>
#else
    assert(0);
#endif
}
   15090:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   15092:	f7ff fadf 	bl	14654 <hal_debugger_connected>
   15096:	b100      	cbz	r0, 1509a <os_start+0x16>
   15098:	be01      	bkpt	0x0001
   1509a:	2300      	movs	r3, #0
   1509c:	461a      	mov	r2, r3
   1509e:	4619      	mov	r1, r3
   150a0:	4618      	mov	r0, r3
   150a2:	f7ff fe79 	bl	14d98 <__assert_func>
	...

000150a8 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   150a8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   150aa:	4b11      	ldr	r3, [pc, #68]	; (150f0 <os_pkg_init+0x48>)
   150ac:	781b      	ldrb	r3, [r3, #0]
   150ae:	b153      	cbz	r3, 150c6 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   150b0:	2003      	movs	r0, #3
   150b2:	f000 f947 	bl	15344 <os_dev_initialize_all>
    assert(err == OS_OK);
   150b6:	f010 0fff 	tst.w	r0, #255	; 0xff
   150ba:	d10e      	bne.n	150da <os_pkg_init+0x32>

    os_mempool_module_init();
   150bc:	f000 fee0 	bl	15e80 <os_mempool_module_init>
    os_msys_init();
   150c0:	f000 ff70 	bl	15fa4 <os_msys_init>
}
   150c4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   150c6:	f7ff fac5 	bl	14654 <hal_debugger_connected>
   150ca:	b100      	cbz	r0, 150ce <os_pkg_init+0x26>
   150cc:	be01      	bkpt	0x0001
   150ce:	2300      	movs	r3, #0
   150d0:	461a      	mov	r2, r3
   150d2:	4619      	mov	r1, r3
   150d4:	4618      	mov	r0, r3
   150d6:	f7ff fe5f 	bl	14d98 <__assert_func>
    assert(err == OS_OK);
   150da:	f7ff fabb 	bl	14654 <hal_debugger_connected>
   150de:	b100      	cbz	r0, 150e2 <os_pkg_init+0x3a>
   150e0:	be01      	bkpt	0x0001
   150e2:	2300      	movs	r3, #0
   150e4:	461a      	mov	r2, r3
   150e6:	4619      	mov	r1, r3
   150e8:	4618      	mov	r0, r3
   150ea:	f7ff fe55 	bl	14d98 <__assert_func>
   150ee:	bf00      	nop
   150f0:	10001e3c 	.word	0x10001e3c

000150f4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   150f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150f6:	4604      	mov	r4, r0
   150f8:	460d      	mov	r5, r1
   150fa:	4617      	mov	r7, r2
   150fc:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   150fe:	2220      	movs	r2, #32
   15100:	2100      	movs	r1, #0
   15102:	f001 fcf8 	bl	16af6 <memset>
    c->c_ev.ev_cb = ev_cb;
   15106:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   15108:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1510a:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00015110 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   15110:	b538      	push	{r3, r4, r5, lr}
   15112:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   15114:	f001 faf6 	bl	16704 <os_arch_save_sr>
   15118:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1511a:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1511c:	b13b      	cbz	r3, 1512e <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1511e:	69a2      	ldr	r2, [r4, #24]
   15120:	b172      	cbz	r2, 15140 <os_callout_stop+0x30>
   15122:	61d3      	str	r3, [r2, #28]
   15124:	69e3      	ldr	r3, [r4, #28]
   15126:	69a2      	ldr	r2, [r4, #24]
   15128:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1512a:	2300      	movs	r3, #0
   1512c:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1512e:	6920      	ldr	r0, [r4, #16]
   15130:	b110      	cbz	r0, 15138 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   15132:	4621      	mov	r1, r4
   15134:	f000 f9fa 	bl	1552c <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   15138:	4628      	mov	r0, r5
   1513a:	f001 fae9 	bl	16710 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1513e:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   15140:	4a01      	ldr	r2, [pc, #4]	; (15148 <os_callout_stop+0x38>)
   15142:	6053      	str	r3, [r2, #4]
   15144:	e7ee      	b.n	15124 <os_callout_stop+0x14>
   15146:	bf00      	nop
   15148:	10000f44 	.word	0x10000f44

0001514c <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1514c:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1514e:	6903      	ldr	r3, [r0, #16]
   15150:	b1c3      	cbz	r3, 15184 <os_callout_reset+0x38>
   15152:	4604      	mov	r4, r0
   15154:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   15156:	2900      	cmp	r1, #0
   15158:	db34      	blt.n	151c4 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1515a:	f001 fad3 	bl	16704 <os_arch_save_sr>
   1515e:	4605      	mov	r5, r0

    os_callout_stop(c);
   15160:	4620      	mov	r0, r4
   15162:	f7ff ffd5 	bl	15110 <os_callout_stop>

    if (ticks == 0) {
   15166:	b906      	cbnz	r6, 1516a <os_callout_reset+0x1e>
        ticks = 1;
   15168:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1516a:	f001 fa05 	bl	16578 <os_time_get>
   1516e:	4430      	add	r0, r6
   15170:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   15172:	4b15      	ldr	r3, [pc, #84]	; (151c8 <os_callout_reset+0x7c>)
   15174:	681b      	ldr	r3, [r3, #0]
   15176:	b17b      	cbz	r3, 15198 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   15178:	695a      	ldr	r2, [r3, #20]
   1517a:	1a82      	subs	r2, r0, r2
   1517c:	2a00      	cmp	r2, #0
   1517e:	db0b      	blt.n	15198 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   15180:	699b      	ldr	r3, [r3, #24]
   15182:	e7f8      	b.n	15176 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   15184:	f7ff fa66 	bl	14654 <hal_debugger_connected>
   15188:	b100      	cbz	r0, 1518c <os_callout_reset+0x40>
   1518a:	be01      	bkpt	0x0001
   1518c:	2300      	movs	r3, #0
   1518e:	461a      	mov	r2, r3
   15190:	4619      	mov	r1, r3
   15192:	4618      	mov	r0, r3
   15194:	f7ff fe00 	bl	14d98 <__assert_func>
            break;
        }
    }

    if (entry) {
   15198:	b15b      	cbz	r3, 151b2 <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1519a:	69da      	ldr	r2, [r3, #28]
   1519c:	61e2      	str	r2, [r4, #28]
   1519e:	61a3      	str	r3, [r4, #24]
   151a0:	69da      	ldr	r2, [r3, #28]
   151a2:	6014      	str	r4, [r2, #0]
   151a4:	3418      	adds	r4, #24
   151a6:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   151a8:	4628      	mov	r0, r5
   151aa:	f001 fab1 	bl	16710 <os_arch_restore_sr>

    ret = OS_OK;
   151ae:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   151b0:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   151b2:	2300      	movs	r3, #0
   151b4:	61a3      	str	r3, [r4, #24]
   151b6:	4b04      	ldr	r3, [pc, #16]	; (151c8 <os_callout_reset+0x7c>)
   151b8:	685a      	ldr	r2, [r3, #4]
   151ba:	61e2      	str	r2, [r4, #28]
   151bc:	6014      	str	r4, [r2, #0]
   151be:	3418      	adds	r4, #24
   151c0:	605c      	str	r4, [r3, #4]
   151c2:	e7f1      	b.n	151a8 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
   151c4:	2002      	movs	r0, #2
    return ret;
   151c6:	e7f3      	b.n	151b0 <os_callout_reset+0x64>
   151c8:	10000f44 	.word	0x10000f44

000151cc <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   151cc:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   151ce:	f001 f9d3 	bl	16578 <os_time_get>
   151d2:	4605      	mov	r5, r0
   151d4:	e00f      	b.n	151f6 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   151d6:	69e2      	ldr	r2, [r4, #28]
   151d8:	4b12      	ldr	r3, [pc, #72]	; (15224 <os_callout_tick+0x58>)
   151da:	605a      	str	r2, [r3, #4]
   151dc:	69e3      	ldr	r3, [r4, #28]
   151de:	69a2      	ldr	r2, [r4, #24]
   151e0:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   151e2:	2300      	movs	r3, #0
   151e4:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   151e6:	f001 fa93 	bl	16710 <os_arch_restore_sr>

        if (c) {
   151ea:	b1d4      	cbz	r4, 15222 <os_callout_tick+0x56>
            if (c->c_evq) {
   151ec:	6920      	ldr	r0, [r4, #16]
   151ee:	b1a0      	cbz	r0, 1521a <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   151f0:	4621      	mov	r1, r4
   151f2:	f000 f904 	bl	153fe <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   151f6:	f001 fa85 	bl	16704 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   151fa:	4b0a      	ldr	r3, [pc, #40]	; (15224 <os_callout_tick+0x58>)
   151fc:	681c      	ldr	r4, [r3, #0]
        if (c) {
   151fe:	2c00      	cmp	r4, #0
   15200:	d0f1      	beq.n	151e6 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   15202:	6963      	ldr	r3, [r4, #20]
   15204:	1aeb      	subs	r3, r5, r3
   15206:	2b00      	cmp	r3, #0
   15208:	db05      	blt.n	15216 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1520a:	69a3      	ldr	r3, [r4, #24]
   1520c:	2b00      	cmp	r3, #0
   1520e:	d0e2      	beq.n	151d6 <os_callout_tick+0xa>
   15210:	69e2      	ldr	r2, [r4, #28]
   15212:	61da      	str	r2, [r3, #28]
   15214:	e7e2      	b.n	151dc <os_callout_tick+0x10>
                c = NULL;
   15216:	2400      	movs	r4, #0
   15218:	e7e5      	b.n	151e6 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1521a:	6863      	ldr	r3, [r4, #4]
   1521c:	4620      	mov	r0, r4
   1521e:	4798      	blx	r3
   15220:	e7e9      	b.n	151f6 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   15222:	bd38      	pop	{r3, r4, r5, pc}
   15224:	10000f44 	.word	0x10000f44

00015228 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   15228:	b510      	push	{r4, lr}
   1522a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1522c:	f001 fa73 	bl	16716 <os_arch_in_critical>
   15230:	b130      	cbz	r0, 15240 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   15232:	4b0b      	ldr	r3, [pc, #44]	; (15260 <os_callout_wakeup_ticks+0x38>)
   15234:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   15236:	b17b      	cbz	r3, 15258 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   15238:	6958      	ldr	r0, [r3, #20]
   1523a:	1b00      	subs	r0, r0, r4
   1523c:	d40a      	bmi.n	15254 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1523e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   15240:	f7ff fa08 	bl	14654 <hal_debugger_connected>
   15244:	b100      	cbz	r0, 15248 <os_callout_wakeup_ticks+0x20>
   15246:	be01      	bkpt	0x0001
   15248:	2300      	movs	r3, #0
   1524a:	461a      	mov	r2, r3
   1524c:	4619      	mov	r1, r3
   1524e:	4618      	mov	r0, r3
   15250:	f7ff fda2 	bl	14d98 <__assert_func>
            rt = 0;     /* callout time is in the past */
   15254:	2000      	movs	r0, #0
   15256:	e7f2      	b.n	1523e <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   15258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1525c:	e7ef      	b.n	1523e <os_callout_wakeup_ticks+0x16>
   1525e:	bf00      	nop
   15260:	10000f44 	.word	0x10000f44

00015264 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   15264:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   15266:	4b16      	ldr	r3, [pc, #88]	; (152c0 <os_dev_add+0x5c>)
   15268:	681d      	ldr	r5, [r3, #0]
   1526a:	b115      	cbz	r5, 15272 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1526c:	462b      	mov	r3, r5
    prev_dev = NULL;
   1526e:	2400      	movs	r4, #0
   15270:	e008      	b.n	15284 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15272:	4603      	mov	r3, r0
   15274:	f843 5f20 	str.w	r5, [r3, #32]!
   15278:	4a11      	ldr	r2, [pc, #68]	; (152c0 <os_dev_add+0x5c>)
   1527a:	6053      	str	r3, [r2, #4]
   1527c:	6010      	str	r0, [r2, #0]
        return (0);
   1527e:	e012      	b.n	152a6 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   15280:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15282:	6a1b      	ldr	r3, [r3, #32]
   15284:	b153      	cbz	r3, 1529c <os_dev_add+0x38>
        if (dev == cur_dev) {
   15286:	4283      	cmp	r3, r0
   15288:	d00d      	beq.n	152a6 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   1528a:	7e01      	ldrb	r1, [r0, #24]
   1528c:	7e1a      	ldrb	r2, [r3, #24]
   1528e:	4291      	cmp	r1, r2
   15290:	d304      	bcc.n	1529c <os_dev_add+0x38>
   15292:	d1f5      	bne.n	15280 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   15294:	7e41      	ldrb	r1, [r0, #25]
   15296:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   15298:	4291      	cmp	r1, r2
   1529a:	d2f1      	bcs.n	15280 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1529c:	b15c      	cbz	r4, 152b6 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1529e:	6a23      	ldr	r3, [r4, #32]
   152a0:	6203      	str	r3, [r0, #32]
   152a2:	b11b      	cbz	r3, 152ac <os_dev_add+0x48>
   152a4:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   152a6:	2000      	movs	r0, #0
   152a8:	bc30      	pop	{r4, r5}
   152aa:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   152ac:	f100 0320 	add.w	r3, r0, #32
   152b0:	4a03      	ldr	r2, [pc, #12]	; (152c0 <os_dev_add+0x5c>)
   152b2:	6053      	str	r3, [r2, #4]
   152b4:	e7f6      	b.n	152a4 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   152b6:	6205      	str	r5, [r0, #32]
   152b8:	4b01      	ldr	r3, [pc, #4]	; (152c0 <os_dev_add+0x5c>)
   152ba:	6018      	str	r0, [r3, #0]
   152bc:	e7f3      	b.n	152a6 <os_dev_add+0x42>
   152be:	bf00      	nop
   152c0:	10000f4c 	.word	0x10000f4c

000152c4 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   152c4:	b510      	push	{r4, lr}
   152c6:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   152c8:	6903      	ldr	r3, [r0, #16]
   152ca:	6941      	ldr	r1, [r0, #20]
   152cc:	4798      	blx	r3
    if (rc != 0) {
   152ce:	b128      	cbz	r0, 152dc <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   152d0:	7ee3      	ldrb	r3, [r4, #27]
   152d2:	f013 0f08 	tst.w	r3, #8
   152d6:	d105      	bne.n	152e4 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   152d8:	2000      	movs	r0, #0
   152da:	e003      	b.n	152e4 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   152dc:	7ee3      	ldrb	r3, [r4, #27]
   152de:	f043 0301 	orr.w	r3, r3, #1
   152e2:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   152e4:	bd10      	pop	{r4, pc}

000152e6 <os_dev_init>:
{
   152e6:	b410      	push	{r4}
   152e8:	4604      	mov	r4, r0
    dev->od_name = name;
   152ea:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   152ec:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   152ee:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   152f0:	2000      	movs	r0, #0
   152f2:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   152f4:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   152f6:	9b01      	ldr	r3, [sp, #4]
   152f8:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   152fa:	9b02      	ldr	r3, [sp, #8]
   152fc:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   152fe:	6020      	str	r0, [r4, #0]
   15300:	6060      	str	r0, [r4, #4]
   15302:	60a0      	str	r0, [r4, #8]
   15304:	60e0      	str	r0, [r4, #12]
}
   15306:	bc10      	pop	{r4}
   15308:	4770      	bx	lr
	...

0001530c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1530c:	b530      	push	{r4, r5, lr}
   1530e:	b083      	sub	sp, #12
   15310:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   15312:	9d07      	ldr	r5, [sp, #28]
   15314:	9501      	str	r5, [sp, #4]
   15316:	9d06      	ldr	r5, [sp, #24]
   15318:	9500      	str	r5, [sp, #0]
   1531a:	f7ff ffe4 	bl	152e6 <os_dev_init>
    if (rc != 0) {
   1531e:	b108      	cbz	r0, 15324 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   15320:	b003      	add	sp, #12
   15322:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   15324:	4620      	mov	r0, r4
   15326:	f7ff ff9d 	bl	15264 <os_dev_add>
    if (rc != 0) {
   1532a:	2800      	cmp	r0, #0
   1532c:	d1f8      	bne.n	15320 <os_dev_create+0x14>
    if (g_os_started) {
   1532e:	4b04      	ldr	r3, [pc, #16]	; (15340 <os_dev_create+0x34>)
   15330:	681b      	ldr	r3, [r3, #0]
   15332:	2b00      	cmp	r3, #0
   15334:	d0f4      	beq.n	15320 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   15336:	4620      	mov	r0, r4
   15338:	f7ff ffc4 	bl	152c4 <os_dev_initialize>
    return (rc);
   1533c:	e7f0      	b.n	15320 <os_dev_create+0x14>
   1533e:	bf00      	nop
   15340:	10000f40 	.word	0x10000f40

00015344 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   15344:	b538      	push	{r3, r4, r5, lr}
   15346:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15348:	4b08      	ldr	r3, [pc, #32]	; (1536c <os_dev_initialize_all+0x28>)
   1534a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1534c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1534e:	e000      	b.n	15352 <os_dev_initialize_all+0xe>
   15350:	6a24      	ldr	r4, [r4, #32]
   15352:	b144      	cbz	r4, 15366 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   15354:	7e23      	ldrb	r3, [r4, #24]
   15356:	42ab      	cmp	r3, r5
   15358:	d1fa      	bne.n	15350 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1535a:	4620      	mov	r0, r4
   1535c:	f7ff ffb2 	bl	152c4 <os_dev_initialize>
            if (rc) {
   15360:	4602      	mov	r2, r0
   15362:	2800      	cmp	r0, #0
   15364:	d0f4      	beq.n	15350 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   15366:	4610      	mov	r0, r2
   15368:	bd38      	pop	{r3, r4, r5, pc}
   1536a:	bf00      	nop
   1536c:	10000f4c 	.word	0x10000f4c

00015370 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   15370:	b538      	push	{r3, r4, r5, lr}
   15372:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15374:	4b05      	ldr	r3, [pc, #20]	; (1538c <os_dev_lookup+0x1c>)
   15376:	681c      	ldr	r4, [r3, #0]
   15378:	b134      	cbz	r4, 15388 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1537a:	4629      	mov	r1, r5
   1537c:	69e0      	ldr	r0, [r4, #28]
   1537e:	f001 fbd6 	bl	16b2e <strcmp>
   15382:	b108      	cbz	r0, 15388 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15384:	6a24      	ldr	r4, [r4, #32]
   15386:	e7f7      	b.n	15378 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   15388:	4620      	mov	r0, r4
   1538a:	bd38      	pop	{r3, r4, r5, pc}
   1538c:	10000f4c 	.word	0x10000f4c

00015390 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   15390:	b570      	push	{r4, r5, r6, lr}
   15392:	460d      	mov	r5, r1
   15394:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   15396:	f7ff ffeb 	bl	15370 <os_dev_lookup>
    if (dev == NULL) {
   1539a:	4604      	mov	r4, r0
   1539c:	b1a0      	cbz	r0, 153c8 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1539e:	7ec3      	ldrb	r3, [r0, #27]
   153a0:	f013 0f01 	tst.w	r3, #1
   153a4:	d012      	beq.n	153cc <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   153a6:	6803      	ldr	r3, [r0, #0]
   153a8:	b11b      	cbz	r3, 153b2 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   153aa:	4632      	mov	r2, r6
   153ac:	4629      	mov	r1, r5
   153ae:	4798      	blx	r3
        if (rc != 0) {
   153b0:	b970      	cbnz	r0, 153d0 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   153b2:	f001 f9a7 	bl	16704 <os_arch_save_sr>
    ++dev->od_open_ref;
   153b6:	7ea3      	ldrb	r3, [r4, #26]
   153b8:	3301      	adds	r3, #1
   153ba:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   153bc:	7ee3      	ldrb	r3, [r4, #27]
   153be:	f043 0302 	orr.w	r3, r3, #2
   153c2:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   153c4:	f001 f9a4 	bl	16710 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   153c8:	4620      	mov	r0, r4
   153ca:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   153cc:	2400      	movs	r4, #0
   153ce:	e7fb      	b.n	153c8 <os_dev_open+0x38>
    return (NULL);
   153d0:	2400      	movs	r4, #0
   153d2:	e7f9      	b.n	153c8 <os_dev_open+0x38>

000153d4 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   153d4:	4b02      	ldr	r3, [pc, #8]	; (153e0 <os_dev_reset+0xc>)
   153d6:	2200      	movs	r2, #0
   153d8:	601a      	str	r2, [r3, #0]
   153da:	605b      	str	r3, [r3, #4]
}
   153dc:	4770      	bx	lr
   153de:	bf00      	nop
   153e0:	10000f4c 	.word	0x10000f4c

000153e4 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   153e4:	2200      	movs	r2, #0
   153e6:	6002      	str	r2, [r0, #0]
   153e8:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   153ea:	4603      	mov	r3, r0
   153ec:	f843 2f08 	str.w	r2, [r3, #8]!
   153f0:	60c3      	str	r3, [r0, #12]
}
   153f2:	4770      	bx	lr

000153f4 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   153f4:	68c0      	ldr	r0, [r0, #12]
}
   153f6:	3800      	subs	r0, #0
   153f8:	bf18      	it	ne
   153fa:	2001      	movne	r0, #1
   153fc:	4770      	bx	lr

000153fe <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   153fe:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   15400:	b1f0      	cbz	r0, 15440 <os_eventq_put+0x42>
   15402:	460c      	mov	r4, r1
   15404:	4606      	mov	r6, r0
   15406:	f7ff fff5 	bl	153f4 <os_eventq_inited>
   1540a:	b1c8      	cbz	r0, 15440 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1540c:	f001 f97a 	bl	16704 <os_arch_save_sr>
   15410:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   15412:	7823      	ldrb	r3, [r4, #0]
   15414:	b9f3      	cbnz	r3, 15454 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   15416:	2301      	movs	r3, #1
   15418:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1541a:	2300      	movs	r3, #0
   1541c:	60e3      	str	r3, [r4, #12]
   1541e:	68f3      	ldr	r3, [r6, #12]
   15420:	601c      	str	r4, [r3, #0]
   15422:	340c      	adds	r4, #12
   15424:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   15426:	6870      	ldr	r0, [r6, #4]
   15428:	b1d8      	cbz	r0, 15462 <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1542a:	7b03      	ldrb	r3, [r0, #12]
   1542c:	2b02      	cmp	r3, #2
   1542e:	d014      	beq.n	1545a <os_eventq_put+0x5c>
    resched = 0;
   15430:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   15432:	2300      	movs	r3, #0
   15434:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15436:	4628      	mov	r0, r5
   15438:	f001 f96a 	bl	16710 <os_arch_restore_sr>

    if (resched) {
   1543c:	b99c      	cbnz	r4, 15466 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1543e:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   15440:	f7ff f908 	bl	14654 <hal_debugger_connected>
   15444:	b100      	cbz	r0, 15448 <os_eventq_put+0x4a>
   15446:	be01      	bkpt	0x0001
   15448:	2300      	movs	r3, #0
   1544a:	461a      	mov	r2, r3
   1544c:	4619      	mov	r1, r3
   1544e:	4618      	mov	r0, r3
   15450:	f7ff fca2 	bl	14d98 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15454:	f001 f95c 	bl	16710 <os_arch_restore_sr>
        return;
   15458:	e7f1      	b.n	1543e <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1545a:	f000 fed3 	bl	16204 <os_sched_wakeup>
            resched = 1;
   1545e:	2401      	movs	r4, #1
   15460:	e7e7      	b.n	15432 <os_eventq_put+0x34>
    resched = 0;
   15462:	2400      	movs	r4, #0
   15464:	e7e7      	b.n	15436 <os_eventq_put+0x38>
        os_sched(NULL);
   15466:	2000      	movs	r0, #0
   15468:	f000 ff58 	bl	1631c <os_sched>
   1546c:	e7e7      	b.n	1543e <os_eventq_put+0x40>

0001546e <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   1546e:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   15470:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   15472:	b120      	cbz	r0, 1547e <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15474:	68c2      	ldr	r2, [r0, #12]
   15476:	609a      	str	r2, [r3, #8]
   15478:	b112      	cbz	r2, 15480 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   1547a:	2300      	movs	r3, #0
   1547c:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   1547e:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15480:	f103 0208 	add.w	r2, r3, #8
   15484:	60da      	str	r2, [r3, #12]
   15486:	e7f8      	b.n	1547a <os_eventq_get_no_wait+0xc>

00015488 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   15488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1548a:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1548c:	f000 fe66 	bl	1615c <os_sched_get_current_task>
   15490:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   15492:	6833      	ldr	r3, [r6, #0]
   15494:	4283      	cmp	r3, r0
   15496:	d001      	beq.n	1549c <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   15498:	b9db      	cbnz	r3, 154d2 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1549a:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1549c:	f001 f932 	bl	16704 <os_arch_save_sr>
   154a0:	4605      	mov	r5, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   154a2:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
   154a4:	b9ff      	cbnz	r7, 154e6 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   154a6:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   154a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   154ac:	4620      	mov	r0, r4
   154ae:	f000 fe61 	bl	16174 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   154b2:	7b63      	ldrb	r3, [r4, #13]
   154b4:	f043 0308 	orr.w	r3, r3, #8
   154b8:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   154ba:	4628      	mov	r0, r5
   154bc:	f001 f928 	bl	16710 <os_arch_restore_sr>

        os_sched(NULL);
   154c0:	2000      	movs	r0, #0
   154c2:	f000 ff2b 	bl	1631c <os_sched>

        OS_ENTER_CRITICAL(sr);
   154c6:	f001 f91d 	bl	16704 <os_arch_save_sr>
   154ca:	4605      	mov	r5, r0
        evq->evq_task = NULL;
   154cc:	2300      	movs	r3, #0
   154ce:	6073      	str	r3, [r6, #4]
        goto pull_one;
   154d0:	e7e7      	b.n	154a2 <os_eventq_get+0x1a>
            assert(0);
   154d2:	f7ff f8bf 	bl	14654 <hal_debugger_connected>
   154d6:	b100      	cbz	r0, 154da <os_eventq_get+0x52>
   154d8:	be01      	bkpt	0x0001
   154da:	2300      	movs	r3, #0
   154dc:	461a      	mov	r2, r3
   154de:	4619      	mov	r1, r3
   154e0:	4618      	mov	r0, r3
   154e2:	f7ff fc59 	bl	14d98 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   154e6:	68fb      	ldr	r3, [r7, #12]
   154e8:	60b3      	str	r3, [r6, #8]
   154ea:	b153      	cbz	r3, 15502 <os_eventq_get+0x7a>
        ev->ev_queued = 0;
   154ec:	2300      	movs	r3, #0
   154ee:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   154f0:	7b63      	ldrb	r3, [r4, #13]
   154f2:	f023 0308 	bic.w	r3, r3, #8
   154f6:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   154f8:	4628      	mov	r0, r5
   154fa:	f001 f909 	bl	16710 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   154fe:	4638      	mov	r0, r7
   15500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15502:	f106 0308 	add.w	r3, r6, #8
   15506:	60f3      	str	r3, [r6, #12]
   15508:	e7f0      	b.n	154ec <os_eventq_get+0x64>

0001550a <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1550a:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1550c:	f7ff ffbc 	bl	15488 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   15510:	6843      	ldr	r3, [r0, #4]
   15512:	b10b      	cbz	r3, 15518 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   15514:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   15516:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   15518:	f7ff f89c 	bl	14654 <hal_debugger_connected>
   1551c:	b100      	cbz	r0, 15520 <os_eventq_run+0x16>
   1551e:	be01      	bkpt	0x0001
   15520:	2300      	movs	r3, #0
   15522:	461a      	mov	r2, r3
   15524:	4619      	mov	r1, r3
   15526:	4618      	mov	r0, r3
   15528:	f7ff fc36 	bl	14d98 <__assert_func>

0001552c <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1552c:	b538      	push	{r3, r4, r5, lr}
   1552e:	4605      	mov	r5, r0
   15530:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   15532:	f001 f8e7 	bl	16704 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   15536:	7823      	ldrb	r3, [r4, #0]
   15538:	b14b      	cbz	r3, 1554e <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1553a:	68ab      	ldr	r3, [r5, #8]
   1553c:	42a3      	cmp	r3, r4
   1553e:	d00b      	beq.n	15558 <os_eventq_remove+0x2c>
   15540:	461a      	mov	r2, r3
   15542:	68db      	ldr	r3, [r3, #12]
   15544:	42a3      	cmp	r3, r4
   15546:	d1fb      	bne.n	15540 <os_eventq_remove+0x14>
   15548:	68db      	ldr	r3, [r3, #12]
   1554a:	60d3      	str	r3, [r2, #12]
   1554c:	b163      	cbz	r3, 15568 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
   1554e:	2300      	movs	r3, #0
   15550:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   15552:	f001 f8dd 	bl	16710 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   15556:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15558:	68db      	ldr	r3, [r3, #12]
   1555a:	60ab      	str	r3, [r5, #8]
   1555c:	2b00      	cmp	r3, #0
   1555e:	d1f6      	bne.n	1554e <os_eventq_remove+0x22>
   15560:	f105 0308 	add.w	r3, r5, #8
   15564:	60eb      	str	r3, [r5, #12]
   15566:	e7f2      	b.n	1554e <os_eventq_remove+0x22>
   15568:	320c      	adds	r2, #12
   1556a:	60ea      	str	r2, [r5, #12]
   1556c:	e7ef      	b.n	1554e <os_eventq_remove+0x22>
	...

00015570 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   15570:	4800      	ldr	r0, [pc, #0]	; (15574 <os_eventq_dflt_get+0x4>)
   15572:	4770      	bx	lr
   15574:	10000f54 	.word	0x10000f54

00015578 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   15578:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1557a:	2000      	movs	r0, #0
   1557c:	6018      	str	r0, [r3, #0]
   1557e:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   15580:	6098      	str	r0, [r3, #8]
   15582:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   15584:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   15586:	611a      	str	r2, [r3, #16]

    return (0);
}
   15588:	4770      	bx	lr

0001558a <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1558a:	b538      	push	{r3, r4, r5, lr}
   1558c:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1558e:	f001 f8b9 	bl	16704 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   15592:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   15594:	b114      	cbz	r4, 1559c <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   15596:	6863      	ldr	r3, [r4, #4]
   15598:	602b      	str	r3, [r5, #0]
   1559a:	b12b      	cbz	r3, 155a8 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1559c:	f001 f8b8 	bl	16710 <os_arch_restore_sr>

    if (mp) {
   155a0:	b104      	cbz	r4, 155a4 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   155a2:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   155a4:	4620      	mov	r0, r4
   155a6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   155a8:	606d      	str	r5, [r5, #4]
   155aa:	e7f7      	b.n	1559c <os_mqueue_get+0x12>

000155ac <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   155ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   155ae:	7953      	ldrb	r3, [r2, #5]
   155b0:	2b07      	cmp	r3, #7
   155b2:	d916      	bls.n	155e2 <os_mqueue_put+0x36>
   155b4:	4605      	mov	r5, r0
   155b6:	460e      	mov	r6, r1
   155b8:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   155ba:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   155be:	f001 f8a1 	bl	16704 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   155c2:	2300      	movs	r3, #0
   155c4:	f844 3f14 	str.w	r3, [r4, #20]!
   155c8:	686b      	ldr	r3, [r5, #4]
   155ca:	601f      	str	r7, [r3, #0]
   155cc:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   155ce:	f001 f89f 	bl	16710 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   155d2:	b146      	cbz	r6, 155e6 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   155d4:	f105 0108 	add.w	r1, r5, #8
   155d8:	4630      	mov	r0, r6
   155da:	f7ff ff10 	bl	153fe <os_eventq_put>
    }

    return (0);
   155de:	2000      	movs	r0, #0
   155e0:	e000      	b.n	155e4 <os_mqueue_put+0x38>
err:
    return (rc);
   155e2:	2002      	movs	r0, #2
}
   155e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   155e6:	2000      	movs	r0, #0
   155e8:	e7fc      	b.n	155e4 <os_mqueue_put+0x38>

000155ea <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   155ea:	3a10      	subs	r2, #16
   155ec:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   155ee:	6041      	str	r1, [r0, #4]

    return (0);
}
   155f0:	2000      	movs	r0, #0
   155f2:	4770      	bx	lr

000155f4 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   155f4:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   155f6:	8803      	ldrh	r3, [r0, #0]
   155f8:	428b      	cmp	r3, r1
   155fa:	d310      	bcc.n	1561e <os_mbuf_get+0x2a>
   155fc:	4604      	mov	r4, r0
   155fe:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   15600:	6840      	ldr	r0, [r0, #4]
   15602:	f000 fc00 	bl	15e06 <os_memblock_get>
    if (!om) {
   15606:	b148      	cbz	r0, 1561c <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   15608:	2300      	movs	r3, #0
   1560a:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   1560c:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   1560e:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   15610:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   15612:	f100 0110 	add.w	r1, r0, #16
   15616:	440d      	add	r5, r1
   15618:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   1561a:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1561c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1561e:	2000      	movs	r0, #0
    return om;
   15620:	e7fc      	b.n	1561c <os_mbuf_get+0x28>

00015622 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   15622:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   15624:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   15628:	8803      	ldrh	r3, [r0, #0]
   1562a:	42ab      	cmp	r3, r5
   1562c:	d30e      	bcc.n	1564c <os_mbuf_get_pkthdr+0x2a>
   1562e:	2dff      	cmp	r5, #255	; 0xff
   15630:	d80e      	bhi.n	15650 <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   15632:	2100      	movs	r1, #0
   15634:	f7ff ffde 	bl	155f4 <os_mbuf_get>
    if (om) {
   15638:	b138      	cbz	r0, 1564a <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
   1563a:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
   1563c:	6803      	ldr	r3, [r0, #0]
   1563e:	441d      	add	r5, r3
   15640:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   15642:	2300      	movs	r3, #0
   15644:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
   15646:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   15648:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1564a:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1564c:	2000      	movs	r0, #0
   1564e:	e7fc      	b.n	1564a <os_mbuf_get_pkthdr+0x28>
   15650:	2000      	movs	r0, #0
    return om;
   15652:	e7fa      	b.n	1564a <os_mbuf_get_pkthdr+0x28>

00015654 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   15654:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   15656:	6883      	ldr	r3, [r0, #8]
   15658:	b123      	cbz	r3, 15664 <os_mbuf_free+0x10>
   1565a:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1565c:	6858      	ldr	r0, [r3, #4]
   1565e:	f000 fbfa 	bl	15e56 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   15662:	bd08      	pop	{r3, pc}
    rc = 0;
   15664:	2000      	movs	r0, #0
    return (rc);
   15666:	e7fc      	b.n	15662 <os_mbuf_free+0xe>

00015668 <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   15668:	b158      	cbz	r0, 15682 <os_mbuf_free_chain+0x1a>
{
   1566a:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1566c:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
   1566e:	f7ff fff1 	bl	15654 <os_mbuf_free>
        if (rc != 0) {
   15672:	4603      	mov	r3, r0
   15674:	b918      	cbnz	r0, 1567e <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
   15676:	4620      	mov	r0, r4
    while (om != NULL) {
   15678:	2c00      	cmp	r4, #0
   1567a:	d1f7      	bne.n	1566c <os_mbuf_free_chain+0x4>
    }

    rc = 0;
   1567c:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1567e:	4618      	mov	r0, r3
   15680:	bd10      	pop	{r4, pc}
    rc = 0;
   15682:	2300      	movs	r3, #0
}
   15684:	4618      	mov	r0, r3
   15686:	4770      	bx	lr

00015688 <os_mbuf_len>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
   15688:	4603      	mov	r3, r0
    uint16_t len;

    len = 0;
   1568a:	2000      	movs	r0, #0
    while (om != NULL) {
   1568c:	b123      	cbz	r3, 15698 <os_mbuf_len+0x10>
        len += om->om_len;
   1568e:	88da      	ldrh	r2, [r3, #6]
   15690:	4410      	add	r0, r2
   15692:	b280      	uxth	r0, r0
        om = SLIST_NEXT(om, om_next);
   15694:	68db      	ldr	r3, [r3, #12]
   15696:	e7f9      	b.n	1568c <os_mbuf_len+0x4>
    }

    return len;
}
   15698:	4770      	bx	lr

0001569a <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1569a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1569e:	2800      	cmp	r0, #0
   156a0:	d04b      	beq.n	1573a <os_mbuf_append+0xa0>
   156a2:	460f      	mov	r7, r1
   156a4:	4691      	mov	r9, r2
   156a6:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   156a8:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   156ac:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   156ae:	461e      	mov	r6, r3
   156b0:	68db      	ldr	r3, [r3, #12]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d1fb      	bne.n	156ae <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   156b6:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   156b8:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   156ba:	f106 0410 	add.w	r4, r6, #16
   156be:	881b      	ldrh	r3, [r3, #0]
   156c0:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   156c2:	6830      	ldr	r0, [r6, #0]
   156c4:	88f3      	ldrh	r3, [r6, #6]
   156c6:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   156c8:	1a24      	subs	r4, r4, r0
   156ca:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   156cc:	b164      	cbz	r4, 156e8 <os_mbuf_append+0x4e>
        if (space > remainder) {
   156ce:	454c      	cmp	r4, r9
   156d0:	dd00      	ble.n	156d4 <os_mbuf_append+0x3a>
            space = remainder;
   156d2:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   156d4:	4622      	mov	r2, r4
   156d6:	4639      	mov	r1, r7
   156d8:	f001 f9e8 	bl	16aac <memcpy>

        last->om_len += space;
   156dc:	88f3      	ldrh	r3, [r6, #6]
   156de:	4423      	add	r3, r4
   156e0:	80f3      	strh	r3, [r6, #6]
        data += space;
   156e2:	4427      	add	r7, r4
        remainder -= space;
   156e4:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   156e8:	2d00      	cmp	r5, #0
   156ea:	dd16      	ble.n	1571a <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
   156ec:	2100      	movs	r1, #0
   156ee:	4640      	mov	r0, r8
   156f0:	f7ff ff80 	bl	155f4 <os_mbuf_get>
        if (!new) {
   156f4:	4604      	mov	r4, r0
   156f6:	b180      	cbz	r0, 1571a <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   156f8:	f8b8 2000 	ldrh.w	r2, [r8]
   156fc:	42aa      	cmp	r2, r5
   156fe:	bfa8      	it	ge
   15700:	462a      	movge	r2, r5
   15702:	b292      	uxth	r2, r2
   15704:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   15706:	4639      	mov	r1, r7
   15708:	6800      	ldr	r0, [r0, #0]
   1570a:	f001 f9cf 	bl	16aac <memcpy>
        data += new->om_len;
   1570e:	88e3      	ldrh	r3, [r4, #6]
   15710:	441f      	add	r7, r3
        remainder -= new->om_len;
   15712:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   15714:	60f4      	str	r4, [r6, #12]
        last = new;
   15716:	4626      	mov	r6, r4
   15718:	e7e6      	b.n	156e8 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1571a:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1571e:	2b07      	cmp	r3, #7
   15720:	d907      	bls.n	15732 <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   15722:	eba9 0905 	sub.w	r9, r9, r5
   15726:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1572a:	fa13 f989 	uxtah	r9, r3, r9
   1572e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   15732:	b925      	cbnz	r5, 1573e <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   15734:	4628      	mov	r0, r5
   15736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1573a:	2502      	movs	r5, #2
   1573c:	e7fa      	b.n	15734 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
   1573e:	2501      	movs	r5, #1
   15740:	e7f8      	b.n	15734 <os_mbuf_append+0x9a>

00015742 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   15742:	b170      	cbz	r0, 15762 <os_mbuf_off+0x20>
{
   15744:	b410      	push	{r4}
   15746:	e002      	b.n	1574e <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   15748:	1ac9      	subs	r1, r1, r3
        cur = next;
   1574a:	4620      	mov	r0, r4
        if (cur == NULL) {
   1574c:	b13c      	cbz	r4, 1575e <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   1574e:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   15750:	88c3      	ldrh	r3, [r0, #6]
   15752:	428b      	cmp	r3, r1
   15754:	dc02      	bgt.n	1575c <os_mbuf_off+0x1a>
   15756:	d1f7      	bne.n	15748 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   15758:	2c00      	cmp	r4, #0
   1575a:	d1f5      	bne.n	15748 <os_mbuf_off+0x6>
            *out_off = off;
   1575c:	8011      	strh	r1, [r2, #0]
    }
}
   1575e:	bc10      	pop	{r4}
   15760:	4770      	bx	lr
   15762:	4770      	bx	lr

00015764 <os_mbuf_appendfrom>:
{
   15764:	b5f0      	push	{r4, r5, r6, r7, lr}
   15766:	b083      	sub	sp, #12
   15768:	4607      	mov	r7, r0
   1576a:	4608      	mov	r0, r1
   1576c:	4611      	mov	r1, r2
   1576e:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
   15770:	f10d 0206 	add.w	r2, sp, #6
   15774:	f7ff ffe5 	bl	15742 <os_mbuf_off>
   15778:	4605      	mov	r5, r0
    while (len > 0) {
   1577a:	e005      	b.n	15788 <os_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   1577c:	1b34      	subs	r4, r6, r4
   1577e:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   15780:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   15782:	2300      	movs	r3, #0
   15784:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   15788:	b196      	cbz	r6, 157b0 <os_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   1578a:	b1ad      	cbz	r5, 157b8 <os_mbuf_appendfrom+0x54>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
   1578c:	88ec      	ldrh	r4, [r5, #6]
   1578e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15792:	1ae4      	subs	r4, r4, r3
   15794:	42b4      	cmp	r4, r6
   15796:	bfa8      	it	ge
   15798:	4634      	movge	r4, r6
   1579a:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   1579c:	6829      	ldr	r1, [r5, #0]
   1579e:	4622      	mov	r2, r4
   157a0:	4419      	add	r1, r3
   157a2:	4638      	mov	r0, r7
   157a4:	f7ff ff79 	bl	1569a <os_mbuf_append>
        if (rc != 0) {
   157a8:	4603      	mov	r3, r0
   157aa:	2800      	cmp	r0, #0
   157ac:	d0e6      	beq.n	1577c <os_mbuf_appendfrom+0x18>
   157ae:	e000      	b.n	157b2 <os_mbuf_appendfrom+0x4e>
    return 0;
   157b0:	2300      	movs	r3, #0
}
   157b2:	4618      	mov	r0, r3
   157b4:	b003      	add	sp, #12
   157b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
   157b8:	2302      	movs	r3, #2
   157ba:	e7fa      	b.n	157b2 <os_mbuf_appendfrom+0x4e>

000157bc <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
   157bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157be:	4604      	mov	r4, r0
   157c0:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   157c2:	4616      	mov	r6, r2
   157c4:	b91a      	cbnz	r2, 157ce <os_mbuf_copydata+0x12>
        return 0;
   157c6:	4610      	mov	r0, r2
   157c8:	e01e      	b.n	15808 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
   157ca:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
   157cc:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
   157ce:	2900      	cmp	r1, #0
   157d0:	dd13      	ble.n	157fa <os_mbuf_copydata+0x3e>
        if (!m) {
   157d2:	b1ec      	cbz	r4, 15810 <os_mbuf_copydata+0x54>
        if (off < m->om_len)
   157d4:	88e2      	ldrh	r2, [r4, #6]
   157d6:	428a      	cmp	r2, r1
   157d8:	ddf7      	ble.n	157ca <os_mbuf_copydata+0xe>
   157da:	e00e      	b.n	157fa <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
   157dc:	88e5      	ldrh	r5, [r4, #6]
   157de:	1a6d      	subs	r5, r5, r1
   157e0:	42b5      	cmp	r5, r6
   157e2:	bfa8      	it	ge
   157e4:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   157e6:	6823      	ldr	r3, [r4, #0]
   157e8:	462a      	mov	r2, r5
   157ea:	4419      	add	r1, r3
   157ec:	4638      	mov	r0, r7
   157ee:	f001 f95d 	bl	16aac <memcpy>
        len -= count;
   157f2:	1b76      	subs	r6, r6, r5
        udst += count;
   157f4:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   157f6:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   157f8:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
   157fa:	2e00      	cmp	r6, #0
   157fc:	dd01      	ble.n	15802 <os_mbuf_copydata+0x46>
   157fe:	2c00      	cmp	r4, #0
   15800:	d1ec      	bne.n	157dc <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
   15802:	2e00      	cmp	r6, #0
   15804:	dc01      	bgt.n	1580a <os_mbuf_copydata+0x4e>
   15806:	2000      	movs	r0, #0
}
   15808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
   1580a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1580e:	e7fb      	b.n	15808 <os_mbuf_copydata+0x4c>
            return (-1);
   15810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15814:	e7f8      	b.n	15808 <os_mbuf_copydata+0x4c>

00015816 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   15816:	2800      	cmp	r0, #0
   15818:	d04d      	beq.n	158b6 <os_mbuf_adj+0xa0>
{
   1581a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1581c:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   1581e:	2900      	cmp	r1, #0
   15820:	db1b      	blt.n	1585a <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   15822:	4603      	mov	r3, r0
    int len = req_len;
   15824:	460a      	mov	r2, r1
   15826:	e005      	b.n	15834 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   15828:	1a80      	subs	r0, r0, r2
   1582a:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   1582c:	6818      	ldr	r0, [r3, #0]
   1582e:	4402      	add	r2, r0
   15830:	601a      	str	r2, [r3, #0]
                len = 0;
   15832:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   15834:	b14b      	cbz	r3, 1584a <os_mbuf_adj+0x34>
   15836:	2a00      	cmp	r2, #0
   15838:	dd07      	ble.n	1584a <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
   1583a:	88d8      	ldrh	r0, [r3, #6]
   1583c:	4290      	cmp	r0, r2
   1583e:	dcf3      	bgt.n	15828 <os_mbuf_adj+0x12>
                len -= m->om_len;
   15840:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   15842:	2000      	movs	r0, #0
   15844:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   15846:	68db      	ldr	r3, [r3, #12]
   15848:	e7f4      	b.n	15834 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
   1584a:	7963      	ldrb	r3, [r4, #5]
   1584c:	2b07      	cmp	r3, #7
   1584e:	d903      	bls.n	15858 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   15850:	1a52      	subs	r2, r2, r1
   15852:	8a23      	ldrh	r3, [r4, #16]
   15854:	441a      	add	r2, r3
   15856:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   15858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
   1585a:	424f      	negs	r7, r1
    if ((m = mp) == NULL)
   1585c:	4603      	mov	r3, r0
        count = 0;
   1585e:	2200      	movs	r2, #0
            count += m->om_len;
   15860:	88d8      	ldrh	r0, [r3, #6]
   15862:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
   15864:	461e      	mov	r6, r3
   15866:	68db      	ldr	r3, [r3, #12]
   15868:	2b00      	cmp	r3, #0
   1586a:	d1f9      	bne.n	15860 <os_mbuf_adj+0x4a>
        if (m->om_len >= len) {
   1586c:	42b8      	cmp	r0, r7
   1586e:	da0d      	bge.n	1588c <os_mbuf_adj+0x76>
        if (count < 0)
   15870:	188a      	adds	r2, r1, r2
   15872:	d415      	bmi.n	158a0 <os_mbuf_adj+0x8a>
        if (OS_MBUF_IS_PKTHDR(m))
   15874:	7963      	ldrb	r3, [r4, #5]
   15876:	2b07      	cmp	r3, #7
   15878:	d900      	bls.n	1587c <os_mbuf_adj+0x66>
            OS_MBUF_PKTHDR(m)->omp_len = count;
   1587a:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   1587c:	2c00      	cmp	r4, #0
   1587e:	d0eb      	beq.n	15858 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
   15880:	88e3      	ldrh	r3, [r4, #6]
   15882:	4293      	cmp	r3, r2
   15884:	da0e      	bge.n	158a4 <os_mbuf_adj+0x8e>
            count -= m->om_len;
   15886:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   15888:	68e4      	ldr	r4, [r4, #12]
   1588a:	e7f7      	b.n	1587c <os_mbuf_adj+0x66>
            m->om_len -= len;
   1588c:	b2bf      	uxth	r7, r7
   1588e:	1bc0      	subs	r0, r0, r7
   15890:	80f0      	strh	r0, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
   15892:	7963      	ldrb	r3, [r4, #5]
   15894:	2b07      	cmp	r3, #7
   15896:	d9df      	bls.n	15858 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
   15898:	8a23      	ldrh	r3, [r4, #16]
   1589a:	1bdf      	subs	r7, r3, r7
   1589c:	8227      	strh	r7, [r4, #16]
            return;
   1589e:	e7db      	b.n	15858 <os_mbuf_adj+0x42>
            count = 0;
   158a0:	2200      	movs	r2, #0
   158a2:	e7e7      	b.n	15874 <os_mbuf_adj+0x5e>
                m->om_len = count;
   158a4:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   158a6:	68e0      	ldr	r0, [r4, #12]
   158a8:	2800      	cmp	r0, #0
   158aa:	d0d5      	beq.n	15858 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
   158ac:	f7ff fedc 	bl	15668 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   158b0:	2300      	movs	r3, #0
   158b2:	60e3      	str	r3, [r4, #12]
   158b4:	e7d0      	b.n	15858 <os_mbuf_adj+0x42>
   158b6:	4770      	bx	lr

000158b8 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
   158b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158bc:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
   158be:	1e1e      	subs	r6, r3, #0
   158c0:	dd2d      	ble.n	1591e <os_mbuf_cmpf+0x66>
   158c2:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
   158c4:	f10d 0206 	add.w	r2, sp, #6
   158c8:	f7ff ff3b 	bl	15742 <os_mbuf_off>
   158cc:	4604      	mov	r4, r0
    data_off = 0;
   158ce:	f04f 0800 	mov.w	r8, #0
   158d2:	e009      	b.n	158e8 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
   158d4:	4445      	add	r5, r8
   158d6:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
   158da:	45b0      	cmp	r8, r6
   158dc:	d027      	beq.n	1592e <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
   158de:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
   158e0:	2300      	movs	r3, #0
   158e2:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
   158e6:	b1bc      	cbz	r4, 15918 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
   158e8:	b1f4      	cbz	r4, 15928 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
   158ea:	eba6 0208 	sub.w	r2, r6, r8
   158ee:	88e3      	ldrh	r3, [r4, #6]
   158f0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   158f4:	1a1b      	subs	r3, r3, r0
   158f6:	429a      	cmp	r2, r3
   158f8:	bfa8      	it	ge
   158fa:	461a      	movge	r2, r3
   158fc:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
   158fe:	2d00      	cmp	r5, #0
   15900:	d0e8      	beq.n	158d4 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
   15902:	6823      	ldr	r3, [r4, #0]
   15904:	462a      	mov	r2, r5
   15906:	eb07 0108 	add.w	r1, r7, r8
   1590a:	4418      	add	r0, r3
   1590c:	f001 f8aa 	bl	16a64 <memcmp>
            if (rc != 0) {
   15910:	4603      	mov	r3, r0
   15912:	2800      	cmp	r0, #0
   15914:	d0de      	beq.n	158d4 <os_mbuf_cmpf+0x1c>
   15916:	e003      	b.n	15920 <os_mbuf_cmpf+0x68>
            return INT_MAX;
   15918:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1591c:	e000      	b.n	15920 <os_mbuf_cmpf+0x68>
        return 0;
   1591e:	2300      	movs	r3, #0
        }
    }
}
   15920:	4618      	mov	r0, r3
   15922:	b002      	add	sp, #8
   15924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
   15928:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1592c:	e7f8      	b.n	15920 <os_mbuf_cmpf+0x68>
            return 0;
   1592e:	2300      	movs	r3, #0
   15930:	e7f6      	b.n	15920 <os_mbuf_cmpf+0x68>

00015932 <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
   15932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15934:	4604      	mov	r4, r0
   15936:	460e      	mov	r6, r1
   15938:	e019      	b.n	1596e <os_mbuf_prepend+0x3c>
    startoff = 0;
   1593a:	2000      	movs	r0, #0
   1593c:	e01b      	b.n	15976 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
   1593e:	2100      	movs	r1, #0
   15940:	68a0      	ldr	r0, [r4, #8]
   15942:	f7ff fe57 	bl	155f4 <os_mbuf_get>
   15946:	4605      	mov	r5, r0
        }
        if (p == NULL) {
   15948:	2d00      	cmp	r5, #0
   1594a:	d033      	beq.n	159b4 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   1594c:	7963      	ldrb	r3, [r4, #5]
   1594e:	2b07      	cmp	r3, #7
   15950:	d836      	bhi.n	159c0 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
   15952:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15954:	f105 0310 	add.w	r3, r5, #16
   15958:	8812      	ldrh	r2, [r2, #0]
   1595a:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   1595c:	6829      	ldr	r1, [r5, #0]
   1595e:	88ea      	ldrh	r2, [r5, #6]
   15960:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15962:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
   15964:	fa11 f383 	uxtah	r3, r1, r3
   15968:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
   1596a:	60ec      	str	r4, [r5, #12]
        om = p;
   1596c:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
   1596e:	7961      	ldrb	r1, [r4, #5]
   15970:	2907      	cmp	r1, #7
   15972:	d9e2      	bls.n	1593a <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
   15974:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15976:	4623      	mov	r3, r4
   15978:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1597c:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1597e:	1ad3      	subs	r3, r2, r3
    return (leadingspace);
   15980:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
   15982:	429e      	cmp	r6, r3
   15984:	da00      	bge.n	15988 <os_mbuf_prepend+0x56>
   15986:	4633      	mov	r3, r6
        om->om_data -= leading;
   15988:	1ad2      	subs	r2, r2, r3
   1598a:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
   1598c:	b298      	uxth	r0, r3
   1598e:	88e2      	ldrh	r2, [r4, #6]
   15990:	4402      	add	r2, r0
   15992:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
   15994:	2907      	cmp	r1, #7
   15996:	d902      	bls.n	1599e <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
   15998:	8a22      	ldrh	r2, [r4, #16]
   1599a:	4410      	add	r0, r2
   1599c:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
   1599e:	1af6      	subs	r6, r6, r3
   159a0:	d00c      	beq.n	159bc <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
   159a2:	2907      	cmp	r1, #7
   159a4:	d9cb      	bls.n	1593e <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
   159a6:	3908      	subs	r1, #8
   159a8:	b2c9      	uxtb	r1, r1
   159aa:	68a0      	ldr	r0, [r4, #8]
   159ac:	f7ff fe39 	bl	15622 <os_mbuf_get_pkthdr>
   159b0:	4605      	mov	r5, r0
   159b2:	e7c9      	b.n	15948 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
   159b4:	4620      	mov	r0, r4
   159b6:	f7ff fe57 	bl	15668 <os_mbuf_free_chain>
            om = NULL;
   159ba:	462c      	mov	r4, r5
    }

    return om;
}
   159bc:	4620      	mov	r0, r4
   159be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
   159c0:	88eb      	ldrh	r3, [r5, #6]
   159c2:	b973      	cbnz	r3, 159e2 <os_mbuf_prepend+0xb0>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   159c4:	f105 0710 	add.w	r7, r5, #16
   159c8:	7962      	ldrb	r2, [r4, #5]
   159ca:	f104 0110 	add.w	r1, r4, #16
   159ce:	4638      	mov	r0, r7
   159d0:	f001 f86c 	bl	16aac <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   159d4:	7963      	ldrb	r3, [r4, #5]
   159d6:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   159d8:	441f      	add	r7, r3
   159da:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
   159dc:	2300      	movs	r3, #0
   159de:	7163      	strb	r3, [r4, #5]
   159e0:	e7b7      	b.n	15952 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
   159e2:	f7fe fe37 	bl	14654 <hal_debugger_connected>
   159e6:	b100      	cbz	r0, 159ea <os_mbuf_prepend+0xb8>
   159e8:	be01      	bkpt	0x0001
   159ea:	2300      	movs	r3, #0
   159ec:	461a      	mov	r2, r3
   159ee:	4619      	mov	r1, r3
   159f0:	4618      	mov	r0, r3
   159f2:	f7ff f9d1 	bl	14d98 <__assert_func>

000159f6 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
   159f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159fa:	b083      	sub	sp, #12
   159fc:	4681      	mov	r9, r0
   159fe:	4688      	mov	r8, r1
   15a00:	4617      	mov	r7, r2
   15a02:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
   15a04:	f10d 0206 	add.w	r2, sp, #6
   15a08:	f7ff fe9b 	bl	15742 <os_mbuf_off>
    if (cur == NULL) {
   15a0c:	4605      	mov	r5, r0
   15a0e:	b948      	cbnz	r0, 15a24 <os_mbuf_copyinto+0x2e>
        return -1;
   15a10:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15a14:	e02d      	b.n	15a72 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   15a16:	b366      	cbz	r6, 15a72 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   15a18:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   15a1a:	b1ab      	cbz	r3, 15a48 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   15a1c:	2200      	movs	r2, #0
   15a1e:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   15a22:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
   15a24:	88ec      	ldrh	r4, [r5, #6]
   15a26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15a2a:	1ae4      	subs	r4, r4, r3
   15a2c:	42b4      	cmp	r4, r6
   15a2e:	bfa8      	it	ge
   15a30:	4634      	movge	r4, r6
        if (copylen > 0) {
   15a32:	2c00      	cmp	r4, #0
   15a34:	ddef      	ble.n	15a16 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   15a36:	6828      	ldr	r0, [r5, #0]
   15a38:	4622      	mov	r2, r4
   15a3a:	4639      	mov	r1, r7
   15a3c:	4418      	add	r0, r3
   15a3e:	f001 f835 	bl	16aac <memcpy>
            sptr += copylen;
   15a42:	4427      	add	r7, r4
            len -= copylen;
   15a44:	1b36      	subs	r6, r6, r4
            copylen = 0;
   15a46:	e7e6      	b.n	15a16 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
   15a48:	b2b2      	uxth	r2, r6
   15a4a:	4639      	mov	r1, r7
   15a4c:	4628      	mov	r0, r5
   15a4e:	f7ff fe24 	bl	1569a <os_mbuf_append>
    if (rc != 0) {
   15a52:	b968      	cbnz	r0, 15a70 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
   15a54:	f899 2005 	ldrb.w	r2, [r9, #5]
   15a58:	2a07      	cmp	r2, #7
   15a5a:	d90e      	bls.n	15a7a <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
   15a5c:	4446      	add	r6, r8
   15a5e:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   15a62:	4546      	cmp	r6, r8
   15a64:	bfb8      	it	lt
   15a66:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
   15a68:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   15a6c:	4606      	mov	r6, r0
   15a6e:	e000      	b.n	15a72 <os_mbuf_copyinto+0x7c>
        return rc;
   15a70:	4606      	mov	r6, r0
}
   15a72:	4630      	mov	r0, r6
   15a74:	b003      	add	sp, #12
   15a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   15a7a:	4606      	mov	r6, r0
   15a7c:	e7f9      	b.n	15a72 <os_mbuf_copyinto+0x7c>

00015a7e <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
   15a7e:	4603      	mov	r3, r0
    while (1) {
        next = SLIST_NEXT(cur, om_next);
   15a80:	461a      	mov	r2, r3
   15a82:	68db      	ldr	r3, [r3, #12]
        if (next == NULL) {
   15a84:	2b00      	cmp	r3, #0
   15a86:	d1fb      	bne.n	15a80 <os_mbuf_concat+0x2>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
   15a88:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
   15a8a:	7943      	ldrb	r3, [r0, #5]
   15a8c:	2b07      	cmp	r3, #7
   15a8e:	d906      	bls.n	15a9e <os_mbuf_concat+0x20>
        if (OS_MBUF_IS_PKTHDR(second)) {
   15a90:	794b      	ldrb	r3, [r1, #5]
   15a92:	2b07      	cmp	r3, #7
   15a94:	d906      	bls.n	15aa4 <os_mbuf_concat+0x26>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
   15a96:	8a0b      	ldrh	r3, [r1, #16]
   15a98:	8a02      	ldrh	r2, [r0, #16]
   15a9a:	4413      	add	r3, r2
   15a9c:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
   15a9e:	2300      	movs	r3, #0
   15aa0:	714b      	strb	r3, [r1, #5]
   15aa2:	4770      	bx	lr
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   15aa4:	460b      	mov	r3, r1
   15aa6:	2900      	cmp	r1, #0
   15aa8:	d0f9      	beq.n	15a9e <os_mbuf_concat+0x20>
{
   15aaa:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
   15aac:	88da      	ldrh	r2, [r3, #6]
   15aae:	8a04      	ldrh	r4, [r0, #16]
   15ab0:	4422      	add	r2, r4
   15ab2:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   15ab4:	68db      	ldr	r3, [r3, #12]
   15ab6:	2b00      	cmp	r3, #0
   15ab8:	d1f8      	bne.n	15aac <os_mbuf_concat+0x2e>
    second->om_pkthdr_len = 0;
   15aba:	2300      	movs	r3, #0
   15abc:	714b      	strb	r3, [r1, #5]
}
   15abe:	bc10      	pop	{r4}
   15ac0:	4770      	bx	lr

00015ac2 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
   15ac2:	b570      	push	{r4, r5, r6, lr}
   15ac4:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   15ac6:	6880      	ldr	r0, [r0, #8]
   15ac8:	8803      	ldrh	r3, [r0, #0]
   15aca:	428b      	cmp	r3, r1
   15acc:	d325      	bcc.n	15b1a <os_mbuf_extend+0x58>
   15ace:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   15ad0:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
   15ad2:	461c      	mov	r4, r3
   15ad4:	68db      	ldr	r3, [r3, #12]
   15ad6:	2b00      	cmp	r3, #0
   15ad8:	d1fb      	bne.n	15ad2 <os_mbuf_extend+0x10>
    omp = om->om_omp;
   15ada:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15adc:	f104 0310 	add.w	r3, r4, #16
   15ae0:	8812      	ldrh	r2, [r2, #0]
   15ae2:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   15ae4:	6822      	ldr	r2, [r4, #0]
   15ae6:	88e1      	ldrh	r1, [r4, #6]
   15ae8:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15aea:	1a9b      	subs	r3, r3, r2
   15aec:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
   15aee:	429d      	cmp	r5, r3
   15af0:	d80b      	bhi.n	15b0a <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   15af2:	6820      	ldr	r0, [r4, #0]
   15af4:	88e3      	ldrh	r3, [r4, #6]
   15af6:	4418      	add	r0, r3
    last->om_len += len;
   15af8:	442b      	add	r3, r5
   15afa:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
   15afc:	7973      	ldrb	r3, [r6, #5]
   15afe:	2b07      	cmp	r3, #7
   15b00:	d902      	bls.n	15b08 <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
   15b02:	8a33      	ldrh	r3, [r6, #16]
   15b04:	441d      	add	r5, r3
   15b06:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   15b08:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
   15b0a:	2100      	movs	r1, #0
   15b0c:	f7ff fd72 	bl	155f4 <os_mbuf_get>
        if (newm == NULL) {
   15b10:	2800      	cmp	r0, #0
   15b12:	d0f9      	beq.n	15b08 <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
   15b14:	60e0      	str	r0, [r4, #12]
        last = newm;
   15b16:	4604      	mov	r4, r0
   15b18:	e7eb      	b.n	15af2 <os_mbuf_extend+0x30>
        return NULL;
   15b1a:	2000      	movs	r0, #0
   15b1c:	e7f4      	b.n	15b08 <os_mbuf_extend+0x46>

00015b1e <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
   15b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b22:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
   15b24:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
   15b26:	88e2      	ldrh	r2, [r4, #6]
   15b28:	428a      	cmp	r2, r1
   15b2a:	d27a      	bcs.n	15c22 <os_mbuf_pullup+0x104>
   15b2c:	460d      	mov	r5, r1
   15b2e:	f104 0310 	add.w	r3, r4, #16
   15b32:	8806      	ldrh	r6, [r0, #0]
   15b34:	4433      	add	r3, r6
      (om->om_data + om->om_len);
   15b36:	6821      	ldr	r1, [r4, #0]
   15b38:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15b3a:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   15b3c:	fa12 f383 	uxtah	r3, r2, r3
   15b40:	4629      	mov	r1, r5
   15b42:	42ab      	cmp	r3, r5
   15b44:	db12      	blt.n	15b6c <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
   15b46:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   15b48:	b183      	cbz	r3, 15b6c <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
   15b4a:	1aad      	subs	r5, r5, r2
   15b4c:	b2ad      	uxth	r5, r5
        om2 = om;
   15b4e:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
   15b50:	461c      	mov	r4, r3
    omp = om->om_omp;
   15b52:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15b54:	f107 0810 	add.w	r8, r7, #16
   15b58:	881b      	ldrh	r3, [r3, #0]
   15b5a:	4498      	add	r8, r3
      (om->om_data + om->om_len);
   15b5c:	683b      	ldr	r3, [r7, #0]
   15b5e:	88fa      	ldrh	r2, [r7, #6]
   15b60:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15b62:	eba8 0803 	sub.w	r8, r8, r3
   15b66:	fa1f f888 	uxth.w	r8, r8
   15b6a:	e02c      	b.n	15bc6 <os_mbuf_pullup+0xa8>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
   15b6c:	7963      	ldrb	r3, [r4, #5]
   15b6e:	1af6      	subs	r6, r6, r3
   15b70:	42b1      	cmp	r1, r6
   15b72:	dc51      	bgt.n	15c18 <os_mbuf_pullup+0xfa>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
   15b74:	2100      	movs	r1, #0
   15b76:	f7ff fd3d 	bl	155f4 <os_mbuf_get>
        if (om2 == NULL) {
   15b7a:	4607      	mov	r7, r0
   15b7c:	2800      	cmp	r0, #0
   15b7e:	d04b      	beq.n	15c18 <os_mbuf_pullup+0xfa>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   15b80:	7963      	ldrb	r3, [r4, #5]
   15b82:	2b07      	cmp	r3, #7
   15b84:	d9e5      	bls.n	15b52 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   15b86:	88c3      	ldrh	r3, [r0, #6]
   15b88:	b963      	cbnz	r3, 15ba4 <os_mbuf_pullup+0x86>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   15b8a:	f100 0610 	add.w	r6, r0, #16
   15b8e:	7962      	ldrb	r2, [r4, #5]
   15b90:	f104 0110 	add.w	r1, r4, #16
   15b94:	4630      	mov	r0, r6
   15b96:	f000 ff89 	bl	16aac <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   15b9a:	7963      	ldrb	r3, [r4, #5]
   15b9c:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   15b9e:	441e      	add	r6, r3
   15ba0:	603e      	str	r6, [r7, #0]
}
   15ba2:	e7d6      	b.n	15b52 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   15ba4:	f7fe fd56 	bl	14654 <hal_debugger_connected>
   15ba8:	b100      	cbz	r0, 15bac <os_mbuf_pullup+0x8e>
   15baa:	be01      	bkpt	0x0001
   15bac:	2300      	movs	r3, #0
   15bae:	461a      	mov	r2, r3
   15bb0:	4619      	mov	r1, r3
   15bb2:	4618      	mov	r0, r3
   15bb4:	f7ff f8f0 	bl	14d98 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
   15bb8:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
   15bba:	4620      	mov	r0, r4
   15bbc:	f7ff fd4a 	bl	15654 <os_mbuf_free>
            om = next;
   15bc0:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
   15bc2:	b30d      	cbz	r5, 15c08 <os_mbuf_pullup+0xea>
   15bc4:	b304      	cbz	r4, 15c08 <os_mbuf_pullup+0xea>
        count = min(min(len, space), om->om_len);
   15bc6:	88e6      	ldrh	r6, [r4, #6]
   15bc8:	462b      	mov	r3, r5
   15bca:	4545      	cmp	r5, r8
   15bcc:	bfa8      	it	ge
   15bce:	4643      	movge	r3, r8
   15bd0:	429e      	cmp	r6, r3
   15bd2:	bfa8      	it	ge
   15bd4:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
   15bd6:	6838      	ldr	r0, [r7, #0]
   15bd8:	88fb      	ldrh	r3, [r7, #6]
   15bda:	4632      	mov	r2, r6
   15bdc:	6821      	ldr	r1, [r4, #0]
   15bde:	4418      	add	r0, r3
   15be0:	f000 ff64 	bl	16aac <memcpy>
        len -= count;
   15be4:	b2b2      	uxth	r2, r6
   15be6:	1aad      	subs	r5, r5, r2
   15be8:	b2ad      	uxth	r5, r5
        om2->om_len += count;
   15bea:	88fb      	ldrh	r3, [r7, #6]
   15bec:	4413      	add	r3, r2
   15bee:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
   15bf0:	88e3      	ldrh	r3, [r4, #6]
   15bf2:	1a9b      	subs	r3, r3, r2
   15bf4:	b29b      	uxth	r3, r3
   15bf6:	80e3      	strh	r3, [r4, #6]
        space -= count;
   15bf8:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d0db      	beq.n	15bb8 <os_mbuf_pullup+0x9a>
            om->om_data += count;
   15c00:	6823      	ldr	r3, [r4, #0]
   15c02:	441e      	add	r6, r3
   15c04:	6026      	str	r6, [r4, #0]
   15c06:	e7dc      	b.n	15bc2 <os_mbuf_pullup+0xa4>
    if (len > 0) {
   15c08:	b91d      	cbnz	r5, 15c12 <os_mbuf_pullup+0xf4>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
   15c0a:	60fc      	str	r4, [r7, #12]
    return (om2);
bad:
    os_mbuf_free_chain(om);
    return (NULL);
}
   15c0c:	4638      	mov	r0, r7
   15c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free(om2);
   15c12:	4638      	mov	r0, r7
   15c14:	f7ff fd1e 	bl	15654 <os_mbuf_free>
    os_mbuf_free_chain(om);
   15c18:	4620      	mov	r0, r4
   15c1a:	f7ff fd25 	bl	15668 <os_mbuf_free_chain>
    return (NULL);
   15c1e:	2700      	movs	r7, #0
   15c20:	e7f4      	b.n	15c0c <os_mbuf_pullup+0xee>
        return (om);
   15c22:	4627      	mov	r7, r4
   15c24:	e7f2      	b.n	15c0c <os_mbuf_pullup+0xee>

00015c26 <os_mbuf_prepend_pullup>:
{
   15c26:	b510      	push	{r4, lr}
   15c28:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
   15c2a:	f7ff fe82 	bl	15932 <os_mbuf_prepend>
    if (om == NULL) {
   15c2e:	b110      	cbz	r0, 15c36 <os_mbuf_prepend_pullup+0x10>
    om = os_mbuf_pullup(om, len);
   15c30:	4621      	mov	r1, r4
   15c32:	f7ff ff74 	bl	15b1e <os_mbuf_pullup>
}
   15c36:	bd10      	pop	{r4, pc}

00015c38 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
   15c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c3a:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   15c3c:	88c7      	ldrh	r7, [r0, #6]
   15c3e:	b9cf      	cbnz	r7, 15c74 <os_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   15c40:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   15c42:	b144      	cbz	r4, 15c56 <os_mbuf_trim_front+0x1e>
   15c44:	88e3      	ldrh	r3, [r4, #6]
   15c46:	b933      	cbnz	r3, 15c56 <os_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   15c48:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   15c4a:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
   15c4c:	4620      	mov	r0, r4
   15c4e:	f7ff fd01 	bl	15654 <os_mbuf_free>

        cur = next;
   15c52:	462c      	mov	r4, r5
   15c54:	e7f5      	b.n	15c42 <os_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   15c56:	b16c      	cbz	r4, 15c74 <os_mbuf_trim_front+0x3c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   15c58:	7963      	ldrb	r3, [r4, #5]
   15c5a:	2b07      	cmp	r3, #7
   15c5c:	d900      	bls.n	15c60 <os_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   15c5e:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15c60:	4620      	mov	r0, r4
   15c62:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   15c66:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15c68:	1bdf      	subs	r7, r3, r7
   15c6a:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   15c6c:	7972      	ldrb	r2, [r6, #5]
   15c6e:	b293      	uxth	r3, r2
   15c70:	42bb      	cmp	r3, r7
   15c72:	d901      	bls.n	15c78 <os_mbuf_trim_front+0x40>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
   15c74:	4630      	mov	r0, r6
   15c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   15c78:	7162      	strb	r2, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
   15c7a:	f106 0110 	add.w	r1, r6, #16
   15c7e:	f000 ff15 	bl	16aac <memcpy>
        os_mbuf_free(om);
   15c82:	4630      	mov	r0, r6
   15c84:	f7ff fce6 	bl	15654 <os_mbuf_free>
        om = cur;
   15c88:	4626      	mov	r6, r4
   15c8a:	e7f3      	b.n	15c74 <os_mbuf_trim_front+0x3c>

00015c8c <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
   15c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
   15c90:	4681      	mov	r9, r0
   15c92:	2800      	cmp	r0, #0
   15c94:	d04e      	beq.n	15d34 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
   15c96:	b109      	cbz	r1, 15c9c <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
   15c98:	f7ff fef1 	bl	15a7e <os_mbuf_concat>
{
   15c9c:	464d      	mov	r5, r9
   15c9e:	e006      	b.n	15cae <os_mbuf_pack_chains+0x22>
    startoff = 0;
   15ca0:	2300      	movs	r3, #0
   15ca2:	e008      	b.n	15cb6 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
   15ca4:	4634      	mov	r4, r6
   15ca6:	e010      	b.n	15cca <os_mbuf_pack_chains+0x3e>
                }
            }
        }

        /* If no mbufs are left, we are done */
        if (next == NULL) {
   15ca8:	2c00      	cmp	r4, #0
   15caa:	d043      	beq.n	15d34 <os_mbuf_pack_chains+0xa8>
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
   15cac:	4625      	mov	r5, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
   15cae:	796a      	ldrb	r2, [r5, #5]
   15cb0:	2a07      	cmp	r2, #7
   15cb2:	d9f5      	bls.n	15ca0 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
   15cb4:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15cb6:	462e      	mov	r6, r5
   15cb8:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   15cbc:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   15cbe:	1acb      	subs	r3, r1, r3
   15cc0:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
   15cc2:	b13b      	cbz	r3, 15cd4 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
   15cc4:	2a07      	cmp	r2, #7
   15cc6:	d9ed      	bls.n	15ca4 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
   15cc8:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
   15cca:	88ea      	ldrh	r2, [r5, #6]
   15ccc:	4620      	mov	r0, r4
   15cce:	f000 fefa 	bl	16ac6 <memmove>
            cur->om_data = dptr;
   15cd2:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
   15cd4:	682b      	ldr	r3, [r5, #0]
   15cd6:	f8b5 8006 	ldrh.w	r8, [r5, #6]
   15cda:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
   15cdc:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
   15cde:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   15ce0:	881f      	ldrh	r7, [r3, #0]
   15ce2:	4437      	add	r7, r6
   15ce4:	eba7 0708 	sub.w	r7, r7, r8
   15ce8:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
   15cea:	2f00      	cmp	r7, #0
   15cec:	d0dc      	beq.n	15ca8 <os_mbuf_pack_chains+0x1c>
   15cee:	2c00      	cmp	r4, #0
   15cf0:	d0da      	beq.n	15ca8 <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
   15cf2:	88e6      	ldrh	r6, [r4, #6]
   15cf4:	42be      	cmp	r6, r7
   15cf6:	bf28      	it	cs
   15cf8:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
   15cfa:	4632      	mov	r2, r6
   15cfc:	6821      	ldr	r1, [r4, #0]
   15cfe:	4640      	mov	r0, r8
   15d00:	f000 fed4 	bl	16aac <memcpy>
            cur->om_len += copylen;
   15d04:	88eb      	ldrh	r3, [r5, #6]
   15d06:	4433      	add	r3, r6
   15d08:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
   15d0a:	44b0      	add	r8, r6
            rem_len -= copylen;
   15d0c:	1bbf      	subs	r7, r7, r6
   15d0e:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
   15d10:	6823      	ldr	r3, [r4, #0]
   15d12:	4433      	add	r3, r6
   15d14:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
   15d16:	88e3      	ldrh	r3, [r4, #6]
   15d18:	1b9e      	subs	r6, r3, r6
   15d1a:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
   15d1c:	88e3      	ldrh	r3, [r4, #6]
   15d1e:	2b00      	cmp	r3, #0
   15d20:	d1e3      	bne.n	15cea <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
   15d22:	68e3      	ldr	r3, [r4, #12]
   15d24:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
   15d26:	4620      	mov	r0, r4
   15d28:	f7ff fc94 	bl	15654 <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
   15d2c:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
   15d2e:	2c00      	cmp	r4, #0
   15d30:	d1f4      	bne.n	15d1c <os_mbuf_pack_chains+0x90>
   15d32:	e7da      	b.n	15cea <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
   15d34:	4648      	mov	r0, r9
   15d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00015d3c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   15d3c:	2800      	cmp	r0, #0
   15d3e:	d031      	beq.n	15da4 <os_mempool_init_internal+0x68>
{
   15d40:	b430      	push	{r4, r5}
   15d42:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15d44:	2a00      	cmp	r2, #0
   15d46:	d02f      	beq.n	15da8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   15d48:	b1bb      	cbz	r3, 15d7a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   15d4a:	b113      	cbz	r3, 15d52 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   15d4c:	f013 0f03 	tst.w	r3, #3
   15d50:	d12c      	bne.n	15dac <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15d52:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15d54:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   15d56:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   15d58:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15d5c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   15d5e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   15d60:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   15d62:	9802      	ldr	r0, [sp, #8]
   15d64:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   15d66:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   15d68:	b199      	cbz	r1, 15d92 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15d6a:	f012 0f03 	tst.w	r2, #3
   15d6e:	d002      	beq.n	15d76 <os_mempool_init_internal+0x3a>
   15d70:	f022 0203 	bic.w	r2, r2, #3
   15d74:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   15d76:	2001      	movs	r0, #1
   15d78:	e007      	b.n	15d8a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   15d7a:	2900      	cmp	r1, #0
   15d7c:	d0e5      	beq.n	15d4a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   15d7e:	2003      	movs	r0, #3
   15d80:	e00e      	b.n	15da0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   15d82:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   15d84:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   15d86:	3001      	adds	r0, #1
            block_addr += true_block_size;
   15d88:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   15d8a:	4281      	cmp	r1, r0
   15d8c:	dcf9      	bgt.n	15d82 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   15d8e:	2200      	movs	r2, #0
   15d90:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   15d92:	2000      	movs	r0, #0
   15d94:	6120      	str	r0, [r4, #16]
   15d96:	4b06      	ldr	r3, [pc, #24]	; (15db0 <os_mempool_init_internal+0x74>)
   15d98:	685a      	ldr	r2, [r3, #4]
   15d9a:	6014      	str	r4, [r2, #0]
   15d9c:	3410      	adds	r4, #16
   15d9e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   15da0:	bc30      	pop	{r4, r5}
   15da2:	4770      	bx	lr
        return OS_INVALID_PARM;
   15da4:	2003      	movs	r0, #3
}
   15da6:	4770      	bx	lr
        return OS_INVALID_PARM;
   15da8:	2003      	movs	r0, #3
   15daa:	e7f9      	b.n	15da0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   15dac:	2004      	movs	r0, #4
   15dae:	e7f7      	b.n	15da0 <os_mempool_init_internal+0x64>
   15db0:	10000f64 	.word	0x10000f64

00015db4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   15db4:	b510      	push	{r4, lr}
   15db6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   15db8:	2400      	movs	r4, #0
   15dba:	9401      	str	r4, [sp, #4]
   15dbc:	9c04      	ldr	r4, [sp, #16]
   15dbe:	9400      	str	r4, [sp, #0]
   15dc0:	f7ff ffbc 	bl	15d3c <os_mempool_init_internal>
}
   15dc4:	b002      	add	sp, #8
   15dc6:	bd10      	pop	{r4, pc}

00015dc8 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
   15dc8:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15dca:	6803      	ldr	r3, [r0, #0]
   15dcc:	f013 0f03 	tst.w	r3, #3
   15dd0:	d002      	beq.n	15dd8 <os_memblock_from+0x10>
   15dd2:	f023 0303 	bic.w	r3, r3, #3
   15dd6:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
   15dd8:	68c4      	ldr	r4, [r0, #12]
   15dda:	8882      	ldrh	r2, [r0, #4]
   15ddc:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
   15de0:	428c      	cmp	r4, r1
   15de2:	d809      	bhi.n	15df8 <os_memblock_from+0x30>
   15de4:	4291      	cmp	r1, r2
   15de6:	d20a      	bcs.n	15dfe <os_memblock_from+0x36>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
   15de8:	1b09      	subs	r1, r1, r4
   15dea:	fbb1 f2f3 	udiv	r2, r1, r3
   15dee:	fb03 1112 	mls	r1, r3, r2, r1
   15df2:	b931      	cbnz	r1, 15e02 <os_memblock_from+0x3a>
        return 0;
    }

    return 1;
   15df4:	2001      	movs	r0, #1
   15df6:	e000      	b.n	15dfa <os_memblock_from+0x32>
        return 0;
   15df8:	2000      	movs	r0, #0
}
   15dfa:	bc10      	pop	{r4}
   15dfc:	4770      	bx	lr
        return 0;
   15dfe:	2000      	movs	r0, #0
   15e00:	e7fb      	b.n	15dfa <os_memblock_from+0x32>
        return 0;
   15e02:	2000      	movs	r0, #0
   15e04:	e7f9      	b.n	15dfa <os_memblock_from+0x32>

00015e06 <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
   15e06:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   15e08:	4604      	mov	r4, r0
   15e0a:	b198      	cbz	r0, 15e34 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   15e0c:	f000 fc7a 	bl	16704 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   15e10:	88e3      	ldrh	r3, [r4, #6]
   15e12:	b153      	cbz	r3, 15e2a <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   15e14:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   15e16:	682a      	ldr	r2, [r5, #0]
   15e18:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   15e1a:	3b01      	subs	r3, #1
   15e1c:	b29b      	uxth	r3, r3
   15e1e:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   15e20:	8922      	ldrh	r2, [r4, #8]
   15e22:	4293      	cmp	r3, r2
   15e24:	d202      	bcs.n	15e2c <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   15e26:	8123      	strh	r3, [r4, #8]
   15e28:	e000      	b.n	15e2c <os_memblock_get+0x26>
    block = NULL;
   15e2a:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   15e2c:	f000 fc70 	bl	16710 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   15e30:	4628      	mov	r0, r5
   15e32:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   15e34:	4605      	mov	r5, r0
    return (void *)block;
   15e36:	e7fb      	b.n	15e30 <os_memblock_get+0x2a>

00015e38 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   15e38:	b538      	push	{r3, r4, r5, lr}
   15e3a:	4604      	mov	r4, r0
   15e3c:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   15e3e:	f000 fc61 	bl	16704 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   15e42:	6963      	ldr	r3, [r4, #20]
   15e44:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   15e46:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   15e48:	88e3      	ldrh	r3, [r4, #6]
   15e4a:	3301      	adds	r3, #1
   15e4c:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   15e4e:	f000 fc5f 	bl	16710 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   15e52:	2000      	movs	r0, #0
   15e54:	bd38      	pop	{r3, r4, r5, pc}

00015e56 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   15e56:	b178      	cbz	r0, 15e78 <os_memblock_put+0x22>
   15e58:	4603      	mov	r3, r0
   15e5a:	b179      	cbz	r1, 15e7c <os_memblock_put+0x26>
{
   15e5c:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   15e5e:	7a82      	ldrb	r2, [r0, #10]
   15e60:	f012 0f01 	tst.w	r2, #1
   15e64:	d004      	beq.n	15e70 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   15e66:	69c4      	ldr	r4, [r0, #28]
   15e68:	b114      	cbz	r4, 15e70 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   15e6a:	6a02      	ldr	r2, [r0, #32]
   15e6c:	47a0      	blx	r4
            goto done;
   15e6e:	e002      	b.n	15e76 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
   15e70:	4618      	mov	r0, r3
   15e72:	f7ff ffe1 	bl	15e38 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   15e76:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
   15e78:	2003      	movs	r0, #3
   15e7a:	4770      	bx	lr
   15e7c:	2003      	movs	r0, #3
}
   15e7e:	4770      	bx	lr

00015e80 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   15e80:	4b02      	ldr	r3, [pc, #8]	; (15e8c <os_mempool_module_init+0xc>)
   15e82:	2200      	movs	r2, #0
   15e84:	601a      	str	r2, [r3, #0]
   15e86:	605b      	str	r3, [r3, #4]
}
   15e88:	4770      	bx	lr
   15e8a:	bf00      	nop
   15e8c:	10000f64 	.word	0x10000f64

00015e90 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   15e90:	4b02      	ldr	r3, [pc, #8]	; (15e9c <os_msys_find_biggest_pool+0xc>)
   15e92:	6818      	ldr	r0, [r3, #0]
   15e94:	b108      	cbz	r0, 15e9a <os_msys_find_biggest_pool+0xa>
   15e96:	6858      	ldr	r0, [r3, #4]
   15e98:	3808      	subs	r0, #8
}
   15e9a:	4770      	bx	lr
   15e9c:	10000170 	.word	0x10000170

00015ea0 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
   15ea0:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15ea2:	4b09      	ldr	r3, [pc, #36]	; (15ec8 <os_msys_find_pool+0x28>)
   15ea4:	6819      	ldr	r1, [r3, #0]
   15ea6:	4608      	mov	r0, r1
   15ea8:	b120      	cbz	r0, 15eb4 <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
   15eaa:	8803      	ldrh	r3, [r0, #0]
   15eac:	4293      	cmp	r3, r2
   15eae:	d201      	bcs.n	15eb4 <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15eb0:	6880      	ldr	r0, [r0, #8]
   15eb2:	e7f9      	b.n	15ea8 <os_msys_find_pool+0x8>
            break;
        }
    }

    if (!pool) {
   15eb4:	b100      	cbz	r0, 15eb8 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   15eb6:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   15eb8:	b119      	cbz	r1, 15ec2 <os_msys_find_pool+0x22>
   15eba:	4b03      	ldr	r3, [pc, #12]	; (15ec8 <os_msys_find_pool+0x28>)
   15ebc:	6858      	ldr	r0, [r3, #4]
   15ebe:	3808      	subs	r0, #8
   15ec0:	4770      	bx	lr
   15ec2:	4608      	mov	r0, r1
    return (pool);
   15ec4:	e7f7      	b.n	15eb6 <os_msys_find_pool+0x16>
   15ec6:	bf00      	nop
   15ec8:	10000170 	.word	0x10000170

00015ecc <os_msys_register>:
{
   15ecc:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15ece:	4b11      	ldr	r3, [pc, #68]	; (15f14 <os_msys_register+0x48>)
   15ed0:	681d      	ldr	r5, [r3, #0]
   15ed2:	462b      	mov	r3, r5
    prev = NULL;
   15ed4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15ed6:	b133      	cbz	r3, 15ee6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   15ed8:	8801      	ldrh	r1, [r0, #0]
   15eda:	881a      	ldrh	r2, [r3, #0]
   15edc:	4291      	cmp	r1, r2
   15ede:	d302      	bcc.n	15ee6 <os_msys_register+0x1a>
        prev = pool;
   15ee0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15ee2:	689b      	ldr	r3, [r3, #8]
   15ee4:	e7f7      	b.n	15ed6 <os_msys_register+0xa>
    if (prev) {
   15ee6:	b15c      	cbz	r4, 15f00 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15ee8:	68a3      	ldr	r3, [r4, #8]
   15eea:	6083      	str	r3, [r0, #8]
   15eec:	b11b      	cbz	r3, 15ef6 <os_msys_register+0x2a>
   15eee:	60a0      	str	r0, [r4, #8]
}
   15ef0:	2000      	movs	r0, #0
   15ef2:	bc30      	pop	{r4, r5}
   15ef4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15ef6:	f100 0308 	add.w	r3, r0, #8
   15efa:	4a06      	ldr	r2, [pc, #24]	; (15f14 <os_msys_register+0x48>)
   15efc:	6053      	str	r3, [r2, #4]
   15efe:	e7f6      	b.n	15eee <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15f00:	6085      	str	r5, [r0, #8]
   15f02:	b115      	cbz	r5, 15f0a <os_msys_register+0x3e>
   15f04:	4b03      	ldr	r3, [pc, #12]	; (15f14 <os_msys_register+0x48>)
   15f06:	6018      	str	r0, [r3, #0]
   15f08:	e7f2      	b.n	15ef0 <os_msys_register+0x24>
   15f0a:	f100 0308 	add.w	r3, r0, #8
   15f0e:	4a01      	ldr	r2, [pc, #4]	; (15f14 <os_msys_register+0x48>)
   15f10:	6053      	str	r3, [r2, #4]
   15f12:	e7f7      	b.n	15f04 <os_msys_register+0x38>
   15f14:	10000170 	.word	0x10000170

00015f18 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   15f18:	b530      	push	{r4, r5, lr}
   15f1a:	b083      	sub	sp, #12
   15f1c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   15f1e:	9d07      	ldr	r5, [sp, #28]
   15f20:	9501      	str	r5, [sp, #4]
   15f22:	9d06      	ldr	r5, [sp, #24]
   15f24:	9500      	str	r5, [sp, #0]
   15f26:	f004 f99d 	bl	1a264 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f2a:	b928      	cbnz	r0, 15f38 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   15f2c:	4620      	mov	r0, r4
   15f2e:	f7ff ffcd 	bl	15ecc <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f32:	b970      	cbnz	r0, 15f52 <os_msys_init_once+0x3a>
}
   15f34:	b003      	add	sp, #12
   15f36:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f38:	f7fe fb8c 	bl	14654 <hal_debugger_connected>
   15f3c:	b100      	cbz	r0, 15f40 <os_msys_init_once+0x28>
   15f3e:	be01      	bkpt	0x0001
   15f40:	2000      	movs	r0, #0
   15f42:	9000      	str	r0, [sp, #0]
   15f44:	4b09      	ldr	r3, [pc, #36]	; (15f6c <os_msys_init_once+0x54>)
   15f46:	681d      	ldr	r5, [r3, #0]
   15f48:	4603      	mov	r3, r0
   15f4a:	4602      	mov	r2, r0
   15f4c:	4601      	mov	r1, r0
   15f4e:	47a8      	blx	r5
   15f50:	e7ec      	b.n	15f2c <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15f52:	f7fe fb7f 	bl	14654 <hal_debugger_connected>
   15f56:	b100      	cbz	r0, 15f5a <os_msys_init_once+0x42>
   15f58:	be01      	bkpt	0x0001
   15f5a:	2000      	movs	r0, #0
   15f5c:	9000      	str	r0, [sp, #0]
   15f5e:	4b03      	ldr	r3, [pc, #12]	; (15f6c <os_msys_init_once+0x54>)
   15f60:	681c      	ldr	r4, [r3, #0]
   15f62:	4603      	mov	r3, r0
   15f64:	4602      	mov	r2, r0
   15f66:	4601      	mov	r1, r0
   15f68:	47a0      	blx	r4
}
   15f6a:	e7e3      	b.n	15f34 <os_msys_init_once+0x1c>
   15f6c:	1000028c 	.word	0x1000028c

00015f70 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   15f70:	4b02      	ldr	r3, [pc, #8]	; (15f7c <os_msys_reset+0xc>)
   15f72:	2200      	movs	r2, #0
   15f74:	601a      	str	r2, [r3, #0]
   15f76:	605b      	str	r3, [r3, #4]
}
   15f78:	4770      	bx	lr
   15f7a:	bf00      	nop
   15f7c:	10000170 	.word	0x10000170

00015f80 <os_msys_get_pkthdr>:
{
   15f80:	b510      	push	{r4, lr}
   15f82:	460c      	mov	r4, r1
    if (dsize == 0) {
   15f84:	b930      	cbnz	r0, 15f94 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   15f86:	f7ff ff83 	bl	15e90 <os_msys_find_biggest_pool>
    if (!pool) {
   15f8a:	b110      	cbz	r0, 15f92 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   15f8c:	b2e1      	uxtb	r1, r4
   15f8e:	f7ff fb48 	bl	15622 <os_mbuf_get_pkthdr>
}
   15f92:	bd10      	pop	{r4, pc}
   15f94:	f101 0308 	add.w	r3, r1, #8
   15f98:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   15f9a:	4403      	add	r3, r0
   15f9c:	b298      	uxth	r0, r3
   15f9e:	f7ff ff7f 	bl	15ea0 <os_msys_find_pool>
   15fa2:	e7f2      	b.n	15f8a <os_msys_get_pkthdr+0xa>

00015fa4 <os_msys_init>:

void
os_msys_init(void)
{
   15fa4:	b500      	push	{lr}
   15fa6:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   15fa8:	f7ff ffe2 	bl	15f70 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   15fac:	4b06      	ldr	r3, [pc, #24]	; (15fc8 <os_msys_init+0x24>)
   15fae:	9301      	str	r3, [sp, #4]
   15fb0:	2370      	movs	r3, #112	; 0x70
   15fb2:	9300      	str	r3, [sp, #0]
   15fb4:	2316      	movs	r3, #22
   15fb6:	4a05      	ldr	r2, [pc, #20]	; (15fcc <os_msys_init+0x28>)
   15fb8:	4905      	ldr	r1, [pc, #20]	; (15fd0 <os_msys_init+0x2c>)
   15fba:	4806      	ldr	r0, [pc, #24]	; (15fd4 <os_msys_init+0x30>)
   15fbc:	f7ff ffac 	bl	15f18 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   15fc0:	b003      	add	sp, #12
   15fc2:	f85d fb04 	ldr.w	pc, [sp], #4
   15fc6:	bf00      	nop
   15fc8:	00034258 	.word	0x00034258
   15fcc:	1000190c 	.word	0x1000190c
   15fd0:	10001918 	.word	0x10001918
   15fd4:	10000f6c 	.word	0x10000f6c

00015fd8 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   15fd8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   15fda:	4b05      	ldr	r3, [pc, #20]	; (15ff0 <os_sanity_check_list_lock+0x18>)
   15fdc:	6818      	ldr	r0, [r3, #0]
   15fde:	b900      	cbnz	r0, 15fe2 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   15fe0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   15fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15fe6:	4803      	ldr	r0, [pc, #12]	; (15ff4 <os_sanity_check_list_lock+0x1c>)
   15fe8:	f000 fcc4 	bl	16974 <os_mutex_pend>
    if (rc != OS_OK) {
   15fec:	e7f8      	b.n	15fe0 <os_sanity_check_list_lock+0x8>
   15fee:	bf00      	nop
   15ff0:	10000f40 	.word	0x10000f40
   15ff4:	10001938 	.word	0x10001938

00015ff8 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   15ff8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   15ffa:	4b04      	ldr	r3, [pc, #16]	; (1600c <os_sanity_check_list_unlock+0x14>)
   15ffc:	6818      	ldr	r0, [r3, #0]
   15ffe:	b900      	cbnz	r0, 16002 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   16000:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   16002:	4803      	ldr	r0, [pc, #12]	; (16010 <os_sanity_check_list_unlock+0x18>)
   16004:	f000 fc56 	bl	168b4 <os_mutex_release>
    if (rc != 0) {
   16008:	e7fa      	b.n	16000 <os_sanity_check_list_unlock+0x8>
   1600a:	bf00      	nop
   1600c:	10000f40 	.word	0x10000f40
   16010:	10001938 	.word	0x10001938

00016014 <os_sanity_check_init>:
{
   16014:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   16016:	2000      	movs	r0, #0
   16018:	6018      	str	r0, [r3, #0]
   1601a:	6058      	str	r0, [r3, #4]
   1601c:	6098      	str	r0, [r3, #8]
   1601e:	60d8      	str	r0, [r3, #12]
   16020:	6118      	str	r0, [r3, #16]
}
   16022:	4770      	bx	lr

00016024 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   16024:	b510      	push	{r4, lr}
   16026:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   16028:	f7ff ffd6 	bl	15fd8 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1602c:	b100      	cbz	r0, 16030 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   1602e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   16030:	4b03      	ldr	r3, [pc, #12]	; (16040 <os_sanity_check_register+0x1c>)
   16032:	681a      	ldr	r2, [r3, #0]
   16034:	6122      	str	r2, [r4, #16]
   16036:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   16038:	f7ff ffde 	bl	15ff8 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   1603c:	e7f7      	b.n	1602e <os_sanity_check_register+0xa>
   1603e:	bf00      	nop
   16040:	10001934 	.word	0x10001934

00016044 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   16044:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   16046:	f7ff ffc7 	bl	15fd8 <os_sanity_check_list_lock>
    if (rc != 0) {
   1604a:	b910      	cbnz	r0, 16052 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1604c:	4b1d      	ldr	r3, [pc, #116]	; (160c4 <os_sanity_run+0x80>)
   1604e:	681c      	ldr	r4, [r3, #0]
   16050:	e012      	b.n	16078 <os_sanity_run+0x34>
        assert(0);
   16052:	f7fe faff 	bl	14654 <hal_debugger_connected>
   16056:	b100      	cbz	r0, 1605a <os_sanity_run+0x16>
   16058:	be01      	bkpt	0x0001
   1605a:	2300      	movs	r3, #0
   1605c:	461a      	mov	r2, r3
   1605e:	4619      	mov	r1, r3
   16060:	4618      	mov	r0, r3
   16062:	f7fe fe99 	bl	14d98 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   16066:	f000 fa87 	bl	16578 <os_time_get>
   1606a:	6823      	ldr	r3, [r4, #0]
   1606c:	6862      	ldr	r2, [r4, #4]
   1606e:	4413      	add	r3, r2
   16070:	1ac0      	subs	r0, r0, r3
   16072:	2800      	cmp	r0, #0
   16074:	dc0d      	bgt.n	16092 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   16076:	6924      	ldr	r4, [r4, #16]
   16078:	b1ac      	cbz	r4, 160a6 <os_sanity_run+0x62>
        if (sc->sc_func) {
   1607a:	68a3      	ldr	r3, [r4, #8]
   1607c:	2b00      	cmp	r3, #0
   1607e:	d0f2      	beq.n	16066 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   16080:	68e1      	ldr	r1, [r4, #12]
   16082:	4620      	mov	r0, r4
   16084:	4798      	blx	r3
            if (rc == OS_OK) {
   16086:	2800      	cmp	r0, #0
   16088:	d1ed      	bne.n	16066 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1608a:	f000 fa75 	bl	16578 <os_time_get>
   1608e:	6020      	str	r0, [r4, #0]
                continue;
   16090:	e7f1      	b.n	16076 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   16092:	f7fe fadf 	bl	14654 <hal_debugger_connected>
   16096:	b100      	cbz	r0, 1609a <os_sanity_run+0x56>
   16098:	be01      	bkpt	0x0001
   1609a:	2300      	movs	r3, #0
   1609c:	461a      	mov	r2, r3
   1609e:	4619      	mov	r1, r3
   160a0:	4618      	mov	r0, r3
   160a2:	f7fe fe79 	bl	14d98 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   160a6:	f7ff ffa7 	bl	15ff8 <os_sanity_check_list_unlock>
    if (rc != 0) {
   160aa:	b900      	cbnz	r0, 160ae <os_sanity_run+0x6a>
        assert(0);
    }
}
   160ac:	bd10      	pop	{r4, pc}
        assert(0);
   160ae:	f7fe fad1 	bl	14654 <hal_debugger_connected>
   160b2:	b100      	cbz	r0, 160b6 <os_sanity_run+0x72>
   160b4:	be01      	bkpt	0x0001
   160b6:	2300      	movs	r3, #0
   160b8:	461a      	mov	r2, r3
   160ba:	4619      	mov	r1, r3
   160bc:	4618      	mov	r0, r3
   160be:	f7fe fe6b 	bl	14d98 <__assert_func>
   160c2:	bf00      	nop
   160c4:	10001934 	.word	0x10001934

000160c8 <os_sanity_init>:

int
os_sanity_init(void)
{
   160c8:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   160ca:	4802      	ldr	r0, [pc, #8]	; (160d4 <os_sanity_init+0xc>)
   160cc:	f000 fbe8 	bl	168a0 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   160d0:	bd08      	pop	{r3, pc}
   160d2:	bf00      	nop
   160d4:	10001938 	.word	0x10001938

000160d8 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   160d8:	7b03      	ldrb	r3, [r0, #12]
   160da:	2b01      	cmp	r3, #1
   160dc:	d001      	beq.n	160e2 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   160de:	2002      	movs	r0, #2
}
   160e0:	4770      	bx	lr
{
   160e2:	b510      	push	{r4, lr}
   160e4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   160e6:	f000 fb0d 	bl	16704 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   160ea:	4b0f      	ldr	r3, [pc, #60]	; (16128 <os_sched_insert+0x50>)
   160ec:	681b      	ldr	r3, [r3, #0]
   160ee:	b12b      	cbz	r3, 160fc <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   160f0:	7ae1      	ldrb	r1, [r4, #11]
   160f2:	7ada      	ldrb	r2, [r3, #11]
   160f4:	4291      	cmp	r1, r2
   160f6:	d301      	bcc.n	160fc <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   160f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   160fa:	e7f8      	b.n	160ee <os_sched_insert+0x16>
    if (entry) {
   160fc:	b153      	cbz	r3, 16114 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   160fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16100:	64a2      	str	r2, [r4, #72]	; 0x48
   16102:	6463      	str	r3, [r4, #68]	; 0x44
   16104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16106:	6014      	str	r4, [r2, #0]
   16108:	3444      	adds	r4, #68	; 0x44
   1610a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1610c:	f000 fb00 	bl	16710 <os_arch_restore_sr>
    return (0);
   16110:	2000      	movs	r0, #0
}
   16112:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   16114:	2300      	movs	r3, #0
   16116:	6463      	str	r3, [r4, #68]	; 0x44
   16118:	4b03      	ldr	r3, [pc, #12]	; (16128 <os_sched_insert+0x50>)
   1611a:	685a      	ldr	r2, [r3, #4]
   1611c:	64a2      	str	r2, [r4, #72]	; 0x48
   1611e:	6014      	str	r4, [r2, #0]
   16120:	3444      	adds	r4, #68	; 0x44
   16122:	605c      	str	r4, [r3, #4]
   16124:	e7f2      	b.n	1610c <os_sched_insert+0x34>
   16126:	bf00      	nop
   16128:	10000178 	.word	0x10000178

0001612c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1612c:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1612e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   16130:	3301      	adds	r3, #1
   16132:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   16134:	4b06      	ldr	r3, [pc, #24]	; (16150 <os_sched_ctx_sw_hook+0x24>)
   16136:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   16138:	4b06      	ldr	r3, [pc, #24]	; (16154 <os_sched_ctx_sw_hook+0x28>)
   1613a:	681c      	ldr	r4, [r3, #0]
   1613c:	4906      	ldr	r1, [pc, #24]	; (16158 <os_sched_ctx_sw_hook+0x2c>)
   1613e:	680b      	ldr	r3, [r1, #0]
   16140:	1ac2      	subs	r2, r0, r3
   16142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16144:	4413      	add	r3, r2
   16146:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   16148:	6008      	str	r0, [r1, #0]
}
   1614a:	bc10      	pop	{r4}
   1614c:	4770      	bx	lr
   1614e:	bf00      	nop
   16150:	10001988 	.word	0x10001988
   16154:	10001944 	.word	0x10001944
   16158:	10001948 	.word	0x10001948

0001615c <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1615c:	4b01      	ldr	r3, [pc, #4]	; (16164 <os_sched_get_current_task+0x8>)
   1615e:	6818      	ldr	r0, [r3, #0]
   16160:	4770      	bx	lr
   16162:	bf00      	nop
   16164:	10001944 	.word	0x10001944

00016168 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   16168:	4b01      	ldr	r3, [pc, #4]	; (16170 <os_sched_set_current_task+0x8>)
   1616a:	6018      	str	r0, [r3, #0]
}
   1616c:	4770      	bx	lr
   1616e:	bf00      	nop
   16170:	10001944 	.word	0x10001944

00016174 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   16174:	b538      	push	{r3, r4, r5, lr}
   16176:	4604      	mov	r4, r0
   16178:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1617a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1617c:	b183      	cbz	r3, 161a0 <os_sched_sleep+0x2c>
   1617e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16180:	649a      	str	r2, [r3, #72]	; 0x48
   16182:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16184:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16186:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   16188:	2302      	movs	r3, #2
   1618a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1618c:	f000 f9f4 	bl	16578 <os_time_get>
   16190:	4428      	add	r0, r5
   16192:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   16194:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   16198:	d006      	beq.n	161a8 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1619a:	4b18      	ldr	r3, [pc, #96]	; (161fc <os_sched_sleep+0x88>)
   1619c:	681b      	ldr	r3, [r3, #0]
   1619e:	e011      	b.n	161c4 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   161a0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   161a2:	4b17      	ldr	r3, [pc, #92]	; (16200 <os_sched_sleep+0x8c>)
   161a4:	605a      	str	r2, [r3, #4]
   161a6:	e7ec      	b.n	16182 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   161a8:	7b63      	ldrb	r3, [r4, #13]
   161aa:	f043 0301 	orr.w	r3, r3, #1
   161ae:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   161b0:	2300      	movs	r3, #0
   161b2:	6463      	str	r3, [r4, #68]	; 0x44
   161b4:	4b11      	ldr	r3, [pc, #68]	; (161fc <os_sched_sleep+0x88>)
   161b6:	685a      	ldr	r2, [r3, #4]
   161b8:	64a2      	str	r2, [r4, #72]	; 0x48
   161ba:	6014      	str	r4, [r2, #0]
   161bc:	3444      	adds	r4, #68	; 0x44
   161be:	605c      	str	r4, [r3, #4]
   161c0:	e011      	b.n	161e6 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   161c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   161c4:	b13b      	cbz	r3, 161d6 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   161c6:	7b5a      	ldrb	r2, [r3, #13]
   161c8:	f012 0f01 	tst.w	r2, #1
   161cc:	d103      	bne.n	161d6 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   161ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   161d0:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   161d2:	2a00      	cmp	r2, #0
   161d4:	ddf5      	ble.n	161c2 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   161d6:	b143      	cbz	r3, 161ea <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   161d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   161da:	64a2      	str	r2, [r4, #72]	; 0x48
   161dc:	6463      	str	r3, [r4, #68]	; 0x44
   161de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   161e0:	6014      	str	r4, [r2, #0]
   161e2:	3444      	adds	r4, #68	; 0x44
   161e4:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   161e6:	2000      	movs	r0, #0
   161e8:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   161ea:	2300      	movs	r3, #0
   161ec:	6463      	str	r3, [r4, #68]	; 0x44
   161ee:	4b03      	ldr	r3, [pc, #12]	; (161fc <os_sched_sleep+0x88>)
   161f0:	685a      	ldr	r2, [r3, #4]
   161f2:	64a2      	str	r2, [r4, #72]	; 0x48
   161f4:	6014      	str	r4, [r2, #0]
   161f6:	3444      	adds	r4, #68	; 0x44
   161f8:	605c      	str	r4, [r3, #4]
   161fa:	e7f4      	b.n	161e6 <os_sched_sleep+0x72>
   161fc:	10000180 	.word	0x10000180
   16200:	10000178 	.word	0x10000178

00016204 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   16204:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   16206:	7b03      	ldrb	r3, [r0, #12]
   16208:	2b02      	cmp	r3, #2
   1620a:	d121      	bne.n	16250 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1620c:	69c2      	ldr	r2, [r0, #28]
   1620e:	b162      	cbz	r2, 1622a <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   16210:	6813      	ldr	r3, [r2, #0]
   16212:	b33b      	cbz	r3, 16264 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   16214:	4283      	cmp	r3, r0
   16216:	d02f      	beq.n	16278 <os_sched_wakeup+0x74>
   16218:	461a      	mov	r2, r3
   1621a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1621c:	4283      	cmp	r3, r0
   1621e:	d1fb      	bne.n	16218 <os_sched_wakeup+0x14>
   16220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   16222:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   16224:	2300      	movs	r3, #0
   16226:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   16228:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1622a:	2301      	movs	r3, #1
   1622c:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1622e:	2300      	movs	r3, #0
   16230:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   16232:	7b43      	ldrb	r3, [r0, #13]
   16234:	f023 0301 	bic.w	r3, r3, #1
   16238:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1623a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1623c:	b1fb      	cbz	r3, 1627e <os_sched_wakeup+0x7a>
   1623e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16240:	649a      	str	r2, [r3, #72]	; 0x48
   16242:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16244:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16246:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   16248:	f7ff ff46 	bl	160d8 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1624c:	2000      	movs	r0, #0
   1624e:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   16250:	f7fe fa00 	bl	14654 <hal_debugger_connected>
   16254:	b100      	cbz	r0, 16258 <os_sched_wakeup+0x54>
   16256:	be01      	bkpt	0x0001
   16258:	2300      	movs	r3, #0
   1625a:	461a      	mov	r2, r3
   1625c:	4619      	mov	r1, r3
   1625e:	4618      	mov	r0, r3
   16260:	f7fe fd9a 	bl	14d98 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   16264:	f7fe f9f6 	bl	14654 <hal_debugger_connected>
   16268:	b100      	cbz	r0, 1626c <os_sched_wakeup+0x68>
   1626a:	be01      	bkpt	0x0001
   1626c:	2300      	movs	r3, #0
   1626e:	461a      	mov	r2, r3
   16270:	4619      	mov	r1, r3
   16272:	4618      	mov	r0, r3
   16274:	f7fe fd90 	bl	14d98 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   16278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1627a:	6013      	str	r3, [r2, #0]
   1627c:	e7d2      	b.n	16224 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1627e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16280:	4b01      	ldr	r3, [pc, #4]	; (16288 <os_sched_wakeup+0x84>)
   16282:	605a      	str	r2, [r3, #4]
   16284:	e7dd      	b.n	16242 <os_sched_wakeup+0x3e>
   16286:	bf00      	nop
   16288:	10000180 	.word	0x10000180

0001628c <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1628c:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1628e:	f000 f973 	bl	16578 <os_time_get>
   16292:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   16294:	f000 fa36 	bl	16704 <os_arch_save_sr>
   16298:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1629a:	4b0a      	ldr	r3, [pc, #40]	; (162c4 <os_sched_os_timer_exp+0x38>)
   1629c:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1629e:	e002      	b.n	162a6 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   162a0:	f7ff ffb0 	bl	16204 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   162a4:	4620      	mov	r0, r4
    while (t) {
   162a6:	b140      	cbz	r0, 162ba <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   162a8:	7b43      	ldrb	r3, [r0, #13]
   162aa:	f013 0f01 	tst.w	r3, #1
   162ae:	d104      	bne.n	162ba <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   162b0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   162b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   162b4:	1aeb      	subs	r3, r5, r3
   162b6:	2b00      	cmp	r3, #0
   162b8:	daf2      	bge.n	162a0 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   162ba:	4630      	mov	r0, r6
   162bc:	f000 fa28 	bl	16710 <os_arch_restore_sr>
}
   162c0:	bd70      	pop	{r4, r5, r6, pc}
   162c2:	bf00      	nop
   162c4:	10000180 	.word	0x10000180

000162c8 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   162c8:	b510      	push	{r4, lr}
   162ca:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   162cc:	f000 fa23 	bl	16716 <os_arch_in_critical>
   162d0:	b150      	cbz	r0, 162e8 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   162d2:	4b0e      	ldr	r3, [pc, #56]	; (1630c <os_sched_wakeup_ticks+0x44>)
   162d4:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   162d6:	b19b      	cbz	r3, 16300 <os_sched_wakeup_ticks+0x38>
   162d8:	7b5a      	ldrb	r2, [r3, #13]
   162da:	f012 0f01 	tst.w	r2, #1
   162de:	d112      	bne.n	16306 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   162e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   162e2:	1b00      	subs	r0, r0, r4
   162e4:	d40a      	bmi.n	162fc <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   162e6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   162e8:	f7fe f9b4 	bl	14654 <hal_debugger_connected>
   162ec:	b100      	cbz	r0, 162f0 <os_sched_wakeup_ticks+0x28>
   162ee:	be01      	bkpt	0x0001
   162f0:	2300      	movs	r3, #0
   162f2:	461a      	mov	r2, r3
   162f4:	4619      	mov	r1, r3
   162f6:	4618      	mov	r0, r3
   162f8:	f7fe fd4e 	bl	14d98 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   162fc:	2000      	movs	r0, #0
   162fe:	e7f2      	b.n	162e6 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   16300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16304:	e7ef      	b.n	162e6 <os_sched_wakeup_ticks+0x1e>
   16306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1630a:	e7ec      	b.n	162e6 <os_sched_wakeup_ticks+0x1e>
   1630c:	10000180 	.word	0x10000180

00016310 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   16310:	4b01      	ldr	r3, [pc, #4]	; (16318 <os_sched_next_task+0x8>)
   16312:	6818      	ldr	r0, [r3, #0]
   16314:	4770      	bx	lr
   16316:	bf00      	nop
   16318:	10000178 	.word	0x10000178

0001631c <os_sched>:
{
   1631c:	b538      	push	{r3, r4, r5, lr}
   1631e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   16320:	f000 f9f0 	bl	16704 <os_arch_save_sr>
   16324:	4605      	mov	r5, r0
    if (!next_t) {
   16326:	b134      	cbz	r4, 16336 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   16328:	4620      	mov	r0, r4
   1632a:	f000 f9e1 	bl	166f0 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1632e:	4628      	mov	r0, r5
   16330:	f000 f9ee 	bl	16710 <os_arch_restore_sr>
}
   16334:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   16336:	f7ff ffeb 	bl	16310 <os_sched_next_task>
   1633a:	4604      	mov	r4, r0
   1633c:	e7f4      	b.n	16328 <os_sched+0xc>
	...

00016340 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   16340:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   16342:	7b03      	ldrb	r3, [r0, #12]
   16344:	2b01      	cmp	r3, #1
   16346:	d000      	beq.n	1634a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   16348:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1634a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1634c:	b13b      	cbz	r3, 1635e <os_sched_resort+0x1e>
   1634e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16350:	649a      	str	r2, [r3, #72]	; 0x48
   16352:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16354:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16356:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   16358:	f7ff febe 	bl	160d8 <os_sched_insert>
}
   1635c:	e7f4      	b.n	16348 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1635e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16360:	4b01      	ldr	r3, [pc, #4]	; (16368 <os_sched_resort+0x28>)
   16362:	605a      	str	r2, [r3, #4]
   16364:	e7f5      	b.n	16352 <os_sched_resort+0x12>
   16366:	bf00      	nop
   16368:	10000178 	.word	0x10000178

0001636c <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1636c:	2300      	movs	r3, #0
   1636e:	428b      	cmp	r3, r1
   16370:	da04      	bge.n	1637c <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   16372:	4a03      	ldr	r2, [pc, #12]	; (16380 <_clear_stack+0x14>)
   16374:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   16378:	3301      	adds	r3, #1
   1637a:	e7f8      	b.n	1636e <_clear_stack+0x2>
    }
}
   1637c:	4770      	bx	lr
   1637e:	bf00      	nop
   16380:	deadbeef 	.word	0xdeadbeef

00016384 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   16384:	6843      	ldr	r3, [r0, #4]
   16386:	8900      	ldrh	r0, [r0, #8]
}
   16388:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1638c:	4770      	bx	lr
	...

00016390 <os_task_init>:
{
   16390:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   16394:	4604      	mov	r4, r0
   16396:	460d      	mov	r5, r1
   16398:	4617      	mov	r7, r2
   1639a:	461e      	mov	r6, r3
   1639c:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   163a0:	2250      	movs	r2, #80	; 0x50
   163a2:	2100      	movs	r1, #0
   163a4:	f000 fba7 	bl	16af6 <memset>
    t->t_func = func;
   163a8:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   163aa:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   163ac:	f000 f9aa 	bl	16704 <os_arch_save_sr>
    rc = g_task_id;
   163b0:	4b2e      	ldr	r3, [pc, #184]	; (1646c <os_task_init+0xdc>)
   163b2:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   163b4:	1c72      	adds	r2, r6, #1
   163b6:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   163b8:	f000 f9aa 	bl	16710 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   163bc:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   163be:	f89d 3018 	ldrb.w	r3, [sp, #24]
   163c2:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   163c4:	2301      	movs	r3, #1
   163c6:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   163c8:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   163ca:	2300      	movs	r3, #0
   163cc:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   163ce:	f104 0620 	add.w	r6, r4, #32
   163d2:	4630      	mov	r0, r6
   163d4:	f7ff fe1e 	bl	16014 <os_sanity_check_init>
    if (rc != OS_OK) {
   163d8:	4605      	mov	r5, r0
   163da:	2800      	cmp	r0, #0
   163dc:	d139      	bne.n	16452 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   163de:	9b07      	ldr	r3, [sp, #28]
   163e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   163e4:	d005      	beq.n	163f2 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   163e6:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   163e8:	4630      	mov	r0, r6
   163ea:	f7ff fe1b 	bl	16024 <os_sanity_check_register>
        if (rc != OS_OK) {
   163ee:	4605      	mov	r5, r0
   163f0:	bb78      	cbnz	r0, 16452 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   163f2:	4649      	mov	r1, r9
   163f4:	9808      	ldr	r0, [sp, #32]
   163f6:	f7ff ffb9 	bl	1636c <_clear_stack>
    t->t_stackbottom = stack_bottom;
   163fa:	9b08      	ldr	r3, [sp, #32]
   163fc:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   163fe:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   16402:	4620      	mov	r0, r4
   16404:	f7ff ffbe 	bl	16384 <os_task_stacktop_get>
   16408:	4601      	mov	r1, r0
   1640a:	464a      	mov	r2, r9
   1640c:	4620      	mov	r0, r4
   1640e:	f000 f987 	bl	16720 <os_arch_task_stack_init>
   16412:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   16414:	4b16      	ldr	r3, [pc, #88]	; (16470 <os_task_init+0xe0>)
   16416:	681b      	ldr	r3, [r3, #0]
   16418:	b17b      	cbz	r3, 1643a <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1641a:	7ae1      	ldrb	r1, [r4, #11]
   1641c:	7ada      	ldrb	r2, [r3, #11]
   1641e:	4291      	cmp	r1, r2
   16420:	d001      	beq.n	16426 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   16422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16424:	e7f8      	b.n	16418 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   16426:	f7fe f915 	bl	14654 <hal_debugger_connected>
   1642a:	b100      	cbz	r0, 1642e <os_task_init+0x9e>
   1642c:	be01      	bkpt	0x0001
   1642e:	2300      	movs	r3, #0
   16430:	461a      	mov	r2, r3
   16432:	4619      	mov	r1, r3
   16434:	4618      	mov	r0, r3
   16436:	f7fe fcaf 	bl	14d98 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1643a:	6423      	str	r3, [r4, #64]	; 0x40
   1643c:	4b0c      	ldr	r3, [pc, #48]	; (16470 <os_task_init+0xe0>)
   1643e:	685a      	ldr	r2, [r3, #4]
   16440:	6014      	str	r4, [r2, #0]
   16442:	f104 0240 	add.w	r2, r4, #64	; 0x40
   16446:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   16448:	4620      	mov	r0, r4
   1644a:	f7ff fe45 	bl	160d8 <os_sched_insert>
   1644e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   16450:	b110      	cbz	r0, 16458 <os_task_init+0xc8>
}
   16452:	4628      	mov	r0, r5
   16454:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   16458:	f7fe fd5e 	bl	14f18 <os_started>
   1645c:	b908      	cbnz	r0, 16462 <os_task_init+0xd2>
    return (0);
   1645e:	4605      	mov	r5, r0
   16460:	e7f7      	b.n	16452 <os_task_init+0xc2>
        os_sched(NULL);
   16462:	2000      	movs	r0, #0
   16464:	f7ff ff5a 	bl	1631c <os_sched>
   16468:	e7f3      	b.n	16452 <os_task_init+0xc2>
   1646a:	bf00      	nop
   1646c:	10001954 	.word	0x10001954
   16470:	1000194c 	.word	0x1000194c

00016474 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
   16474:	b570      	push	{r4, r5, r6, lr}
   16476:	4606      	mov	r6, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
   16478:	7ac3      	ldrb	r3, [r0, #11]
   1647a:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
   1647c:	7a83      	ldrb	r3, [r0, #10]
   1647e:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
   16480:	7b03      	ldrb	r3, [r0, #12]
   16482:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
   16484:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
   16486:	8905      	ldrh	r5, [r0, #8]
   16488:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    while (bottom < top) {
   1648c:	42ab      	cmp	r3, r5
   1648e:	d205      	bcs.n	1649c <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
   16490:	681c      	ldr	r4, [r3, #0]
   16492:	4a0e      	ldr	r2, [pc, #56]	; (164cc <os_task_info_get+0x58>)
   16494:	4294      	cmp	r4, r2
   16496:	d101      	bne.n	1649c <os_task_info_get+0x28>
            break;
        }
        ++bottom;
   16498:	3304      	adds	r3, #4
   1649a:	e7f7      	b.n	1648c <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
   1649c:	1aeb      	subs	r3, r5, r3
   1649e:	f3c3 038f 	ubfx	r3, r3, #2, #16
   164a2:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
   164a4:	8933      	ldrh	r3, [r6, #8]
   164a6:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
   164a8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   164aa:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
   164ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   164ae:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   164b0:	6a33      	ldr	r3, [r6, #32]
   164b2:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                            task->t_sanity_check.sc_checkin_itvl;
   164b4:	6a72      	ldr	r2, [r6, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   164b6:	4413      	add	r3, r2
   164b8:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
   164ba:	4608      	mov	r0, r1
   164bc:	2300      	movs	r3, #0
   164be:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
   164c2:	221f      	movs	r2, #31
   164c4:	6931      	ldr	r1, [r6, #16]
   164c6:	f000 fb45 	bl	16b54 <strncat>
}
   164ca:	bd70      	pop	{r4, r5, r6, pc}
   164cc:	deadbeef 	.word	0xdeadbeef

000164d0 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   164d0:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   164d2:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   164d4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   164d8:	e9d1 4500 	ldrd	r4, r5, [r1]
   164dc:	18e4      	adds	r4, r4, r3
   164de:	f145 0500 	adc.w	r5, r5, #0
   164e2:	e9c2 4500 	strd	r4, r5, [r2]
   164e6:	688b      	ldr	r3, [r1, #8]
   164e8:	f641 6184 	movw	r1, #7812	; 0x1e84
   164ec:	fb01 3000 	mla	r0, r1, r0, r3
   164f0:	6090      	str	r0, [r2, #8]
   164f2:	4b07      	ldr	r3, [pc, #28]	; (16510 <os_deltatime+0x40>)
   164f4:	4298      	cmp	r0, r3
   164f6:	dd09      	ble.n	1650c <os_deltatime+0x3c>
   164f8:	1c61      	adds	r1, r4, #1
   164fa:	f145 0300 	adc.w	r3, r5, #0
   164fe:	6011      	str	r1, [r2, #0]
   16500:	6053      	str	r3, [r2, #4]
   16502:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   16506:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1650a:	6090      	str	r0, [r2, #8]
}
   1650c:	bc30      	pop	{r4, r5}
   1650e:	4770      	bx	lr
   16510:	000f423f 	.word	0x000f423f

00016514 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   16514:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   16516:	1e04      	subs	r4, r0, #0
   16518:	db0d      	blt.n	16536 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1651a:	f000 f8f3 	bl	16704 <os_arch_save_sr>
   1651e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   16520:	4913      	ldr	r1, [pc, #76]	; (16570 <os_time_tick+0x5c>)
   16522:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   16524:	18a3      	adds	r3, r4, r2
   16526:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   16528:	ea93 0f02 	teq	r3, r2
   1652c:	d40d      	bmi.n	1654a <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1652e:	4628      	mov	r0, r5
   16530:	f000 f8ee 	bl	16710 <os_arch_restore_sr>
}
   16534:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   16536:	f7fe f88d 	bl	14654 <hal_debugger_connected>
   1653a:	b100      	cbz	r0, 1653e <os_time_tick+0x2a>
   1653c:	be01      	bkpt	0x0001
   1653e:	2300      	movs	r3, #0
   16540:	461a      	mov	r2, r3
   16542:	4619      	mov	r1, r3
   16544:	4618      	mov	r0, r3
   16546:	f7fe fc27 	bl	14d98 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1654a:	4e0a      	ldr	r6, [pc, #40]	; (16574 <os_time_tick+0x60>)
   1654c:	4631      	mov	r1, r6
   1654e:	f851 4b08 	ldr.w	r4, [r1], #8
   16552:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   16554:	460a      	mov	r2, r1
   16556:	4620      	mov	r0, r4
   16558:	f7ff ffba 	bl	164d0 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1655c:	f106 0118 	add.w	r1, r6, #24
   16560:	460a      	mov	r2, r1
   16562:	4620      	mov	r0, r4
   16564:	f7ff ffb4 	bl	164d0 <os_deltatime>
        basetod.ostime = g_os_time;
   16568:	4b01      	ldr	r3, [pc, #4]	; (16570 <os_time_tick+0x5c>)
   1656a:	681b      	ldr	r3, [r3, #0]
   1656c:	6033      	str	r3, [r6, #0]
   1656e:	e7de      	b.n	1652e <os_time_tick+0x1a>
   16570:	10001988 	.word	0x10001988
   16574:	10001958 	.word	0x10001958

00016578 <os_time_get>:
}
   16578:	4b01      	ldr	r3, [pc, #4]	; (16580 <os_time_get+0x8>)
   1657a:	6818      	ldr	r0, [r3, #0]
   1657c:	4770      	bx	lr
   1657e:	bf00      	nop
   16580:	10001988 	.word	0x10001988

00016584 <os_time_advance>:

void
os_time_advance(int ticks)
{
   16584:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   16586:	1e04      	subs	r4, r0, #0
   16588:	db02      	blt.n	16590 <os_time_advance+0xc>

    if (ticks > 0) {
   1658a:	2c00      	cmp	r4, #0
   1658c:	dc0a      	bgt.n	165a4 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1658e:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   16590:	f7fe f860 	bl	14654 <hal_debugger_connected>
   16594:	b100      	cbz	r0, 16598 <os_time_advance+0x14>
   16596:	be01      	bkpt	0x0001
   16598:	2300      	movs	r3, #0
   1659a:	461a      	mov	r2, r3
   1659c:	4619      	mov	r1, r3
   1659e:	4618      	mov	r0, r3
   165a0:	f7fe fbfa 	bl	14d98 <__assert_func>
        if (!os_started()) {
   165a4:	f7fe fcb8 	bl	14f18 <os_started>
   165a8:	b920      	cbnz	r0, 165b4 <os_time_advance+0x30>
            g_os_time += ticks;
   165aa:	4b08      	ldr	r3, [pc, #32]	; (165cc <os_time_advance+0x48>)
   165ac:	6818      	ldr	r0, [r3, #0]
   165ae:	4420      	add	r0, r4
   165b0:	6018      	str	r0, [r3, #0]
   165b2:	e7ec      	b.n	1658e <os_time_advance+0xa>
            os_time_tick(ticks);
   165b4:	4620      	mov	r0, r4
   165b6:	f7ff ffad 	bl	16514 <os_time_tick>
            os_callout_tick();
   165ba:	f7fe fe07 	bl	151cc <os_callout_tick>
            os_sched_os_timer_exp();
   165be:	f7ff fe65 	bl	1628c <os_sched_os_timer_exp>
            os_sched(NULL);
   165c2:	2000      	movs	r0, #0
   165c4:	f7ff feaa 	bl	1631c <os_sched>
}
   165c8:	e7e1      	b.n	1658e <os_time_advance+0xa>
   165ca:	bf00      	nop
   165cc:	10001988 	.word	0x10001988

000165d0 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   165d0:	b900      	cbnz	r0, 165d4 <os_time_delay+0x4>
   165d2:	4770      	bx	lr
{
   165d4:	b538      	push	{r3, r4, r5, lr}
   165d6:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   165d8:	f000 f894 	bl	16704 <os_arch_save_sr>
   165dc:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   165de:	f7ff fdbd 	bl	1615c <os_sched_get_current_task>
   165e2:	4621      	mov	r1, r4
   165e4:	f7ff fdc6 	bl	16174 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   165e8:	4628      	mov	r0, r5
   165ea:	f000 f891 	bl	16710 <os_arch_restore_sr>
        os_sched(NULL);
   165ee:	2000      	movs	r0, #0
   165f0:	f7ff fe94 	bl	1631c <os_sched>
    }
}
   165f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000165f8 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   165f8:	b570      	push	{r4, r5, r6, lr}
   165fa:	4605      	mov	r5, r0
   165fc:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   165fe:	f000 f881 	bl	16704 <os_arch_save_sr>
   16602:	4606      	mov	r6, r0
    if (tv != NULL) {
   16604:	b145      	cbz	r5, 16618 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   16606:	f7ff ffb7 	bl	16578 <os_time_get>
   1660a:	4908      	ldr	r1, [pc, #32]	; (1662c <os_gettimeofday+0x34>)
   1660c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   16610:	462a      	mov	r2, r5
   16612:	1ac0      	subs	r0, r0, r3
   16614:	f7ff ff5c 	bl	164d0 <os_deltatime>
    }

    if (tz != NULL) {
   16618:	b114      	cbz	r4, 16620 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1661a:	4b04      	ldr	r3, [pc, #16]	; (1662c <os_gettimeofday+0x34>)
   1661c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1661e:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   16620:	4630      	mov	r0, r6
   16622:	f000 f875 	bl	16710 <os_arch_restore_sr>

    return (0);
}
   16626:	2000      	movs	r0, #0
   16628:	bd70      	pop	{r4, r5, r6, pc}
   1662a:	bf00      	nop
   1662c:	10001958 	.word	0x10001958

00016630 <os_get_uptime>:
    return basetod.utctime.tv_sec > 0;
}

void
os_get_uptime(struct os_timeval *tvp)
{
   16630:	b5f0      	push	{r4, r5, r6, r7, lr}
   16632:	b085      	sub	sp, #20
   16634:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
   16636:	f000 f865 	bl	16704 <os_arch_save_sr>
   1663a:	4607      	mov	r7, r0
  tv = basetod.uptime;
   1663c:	4d0a      	ldr	r5, [pc, #40]	; (16668 <os_get_uptime+0x38>)
   1663e:	466c      	mov	r4, sp
   16640:	f105 0308 	add.w	r3, r5, #8
   16644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   16646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
   1664a:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
   1664c:	f7ff ff94 	bl	16578 <os_time_get>
   16650:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
   16652:	4638      	mov	r0, r7
   16654:	f000 f85c 	bl	16710 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
   16658:	4632      	mov	r2, r6
   1665a:	4621      	mov	r1, r4
   1665c:	4628      	mov	r0, r5
   1665e:	f7ff ff37 	bl	164d0 <os_deltatime>
}
   16662:	b005      	add	sp, #20
   16664:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16666:	bf00      	nop
   16668:	10001958 	.word	0x10001958

0001666c <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
   1666c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1666e:	b085      	sub	sp, #20
  struct os_timeval tv;

  os_get_uptime(&tv);
   16670:	4668      	mov	r0, sp
   16672:	f7ff ffdd 	bl	16630 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
   16676:	9900      	ldr	r1, [sp, #0]
   16678:	9f01      	ldr	r7, [sp, #4]
   1667a:	0178      	lsls	r0, r7, #5
   1667c:	014b      	lsls	r3, r1, #5
   1667e:	ea40 62d1 	orr.w	r2, r0, r1, lsr #27
   16682:	1a5b      	subs	r3, r3, r1
   16684:	eb62 0207 	sbc.w	r2, r2, r7
   16688:	0250      	lsls	r0, r2, #9
   1668a:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
   1668e:	025e      	lsls	r6, r3, #9
   16690:	4602      	mov	r2, r0
   16692:	1873      	adds	r3, r6, r1
   16694:	eb47 0202 	adc.w	r2, r7, r2
   16698:	0196      	lsls	r6, r2, #6
   1669a:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
   1669e:	0198      	lsls	r0, r3, #6
   166a0:	1ac3      	subs	r3, r0, r3
   166a2:	eb66 0202 	sbc.w	r2, r6, r2
   166a6:	185c      	adds	r4, r3, r1
   166a8:	eb42 0507 	adc.w	r5, r2, r7
}
   166ac:	9802      	ldr	r0, [sp, #8]
   166ae:	4603      	mov	r3, r0
   166b0:	1820      	adds	r0, r4, r0
   166b2:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
   166b6:	b005      	add	sp, #20
   166b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000166ba <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   166ba:	b570      	push	{r4, r5, r6, lr}
   166bc:	460e      	mov	r6, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   166be:	0e45      	lsrs	r5, r0, #25
   166c0:	01c4      	lsls	r4, r0, #7
   166c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   166c6:	2300      	movs	r3, #0
   166c8:	4620      	mov	r0, r4
   166ca:	4629      	mov	r1, r5
   166cc:	f7fd fdc6 	bl	1425c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   166d0:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   166d4:	bf08      	it	eq
   166d6:	2c00      	cmpeq	r4, #0
   166d8:	d202      	bcs.n	166e0 <os_time_ms_to_ticks+0x26>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   166da:	6030      	str	r0, [r6, #0]
    return 0;
   166dc:	2000      	movs	r0, #0
}
   166de:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   166e0:	2002      	movs	r0, #2
   166e2:	e7fc      	b.n	166de <os_time_ms_to_ticks+0x24>

000166e4 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   166e4:	e7fe      	b.n	166e4 <os_arch_task_return_handler>

000166e6 <timer_handler>:
{
   166e6:	b508      	push	{r3, lr}
    os_time_advance(1);
   166e8:	2001      	movs	r0, #1
   166ea:	f7ff ff4b 	bl	16584 <os_time_advance>
}
   166ee:	bd08      	pop	{r3, pc}

000166f0 <os_arch_ctx_sw>:
{
   166f0:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   166f2:	f7ff fd1b 	bl	1612c <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   166f6:	4b02      	ldr	r3, [pc, #8]	; (16700 <os_arch_ctx_sw+0x10>)
   166f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   166fc:	605a      	str	r2, [r3, #4]
}
   166fe:	bd08      	pop	{r3, pc}
   16700:	e000ed00 	.word	0xe000ed00

00016704 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16704:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   16708:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   1670c:	b672      	cpsid	i
}
   1670e:	4770      	bx	lr

00016710 <os_arch_restore_sr>:
    if (!isr_ctx) {
   16710:	b900      	cbnz	r0, 16714 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   16712:	b662      	cpsie	i
}
   16714:	4770      	bx	lr

00016716 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16716:	f3ef 8010 	mrs	r0, PRIMASK
}
   1671a:	f000 0001 	and.w	r0, r0, #1
   1671e:	4770      	bx	lr

00016720 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   16720:	b570      	push	{r4, r5, r6, lr}
   16722:	4606      	mov	r6, r0
   16724:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   16726:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   1672a:	2309      	movs	r3, #9
   1672c:	e003      	b.n	16736 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1672e:	2200      	movs	r2, #0
   16730:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   16734:	3301      	adds	r3, #1
   16736:	2b0c      	cmp	r3, #12
   16738:	ddf9      	ble.n	1672e <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1673a:	4628      	mov	r0, r5
   1673c:	f7fd fd34 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   16740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16744:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   16748:	6973      	ldr	r3, [r6, #20]
   1674a:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1674e:	69b3      	ldr	r3, [r6, #24]
   16750:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   16754:	4b02      	ldr	r3, [pc, #8]	; (16760 <os_arch_task_stack_init+0x40>)
   16756:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   1675a:	4628      	mov	r0, r5
   1675c:	bd70      	pop	{r4, r5, r6, pc}
   1675e:	bf00      	nop
   16760:	000166e5 	.word	0x000166e5

00016764 <os_arch_init>:

void
os_arch_init(void)
{
   16764:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   16766:	4a04      	ldr	r2, [pc, #16]	; (16778 <os_arch_init+0x14>)
   16768:	6953      	ldr	r3, [r2, #20]
   1676a:	f043 0310 	orr.w	r3, r3, #16
   1676e:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   16770:	f7fe fbd8 	bl	14f24 <os_init_idle_task>
}
   16774:	bd08      	pop	{r3, pc}
   16776:	bf00      	nop
   16778:	e000ed00 	.word	0xe000ed00

0001677c <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1677e:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   16782:	b90c      	cbnz	r4, 16788 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   16784:	2400      	movs	r4, #0
   16786:	e009      	b.n	1679c <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   16788:	2007      	movs	r0, #7
   1678a:	e02e      	b.n	167ea <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1678c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   16790:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   16794:	26ff      	movs	r6, #255	; 0xff
   16796:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1679a:	3401      	adds	r4, #1
   1679c:	2cef      	cmp	r4, #239	; 0xef
   1679e:	d9f5      	bls.n	1678c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   167a0:	f06f 040d 	mvn.w	r4, #13
   167a4:	e007      	b.n	167b6 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   167a6:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167a8:	4e12      	ldr	r6, [pc, #72]	; (167f4 <os_arch_os_init+0x78>)
   167aa:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167ac:	3510      	adds	r5, #16
   167ae:	4f12      	ldr	r7, [pc, #72]	; (167f8 <os_arch_os_init+0x7c>)
   167b0:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   167b4:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   167b6:	2c19      	cmp	r4, #25
   167b8:	ddf5      	ble.n	167a6 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167ba:	4c0e      	ldr	r4, [pc, #56]	; (167f4 <os_arch_os_init+0x78>)
   167bc:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167be:	4e0f      	ldr	r6, [pc, #60]	; (167fc <os_arch_os_init+0x80>)
   167c0:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167c2:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167c4:	4e0e      	ldr	r6, [pc, #56]	; (16800 <os_arch_os_init+0x84>)
   167c6:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   167c8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   167ca:	4e0e      	ldr	r6, [pc, #56]	; (16804 <os_arch_os_init+0x88>)
   167cc:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   167ce:	25e0      	movs	r5, #224	; 0xe0
   167d0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   167d4:	2520      	movs	r5, #32
   167d6:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   167d8:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   167dc:	f014 0f01 	tst.w	r4, #1
   167e0:	d004      	beq.n	167ec <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   167e2:	f8df c024 	ldr.w	ip, [pc, #36]	; 16808 <os_arch_os_init+0x8c>
   167e6:	df00      	svc	0
        err = OS_OK;
   167e8:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   167ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   167ec:	f7ff ffba 	bl	16764 <os_arch_init>
        err = OS_OK;
   167f0:	2000      	movs	r0, #0
   167f2:	e7fa      	b.n	167ea <os_arch_os_init+0x6e>
   167f4:	e000ed00 	.word	0xe000ed00
   167f8:	0001422b 	.word	0x0001422b
   167fc:	000141af 	.word	0x000141af
   16800:	000141f5 	.word	0x000141f5
   16804:	0001421f 	.word	0x0001421f
   16808:	00016765 	.word	0x00016765

0001680c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1680c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1680e:	f7ff fd7f 	bl	16310 <os_sched_next_task>
   16812:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   16814:	f7ff fca8 	bl	16168 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   16818:	6823      	ldr	r3, [r4, #0]
   1681a:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1681c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   16820:	2106      	movs	r1, #6
   16822:	2080      	movs	r0, #128	; 0x80
   16824:	f019 ffe4 	bl	307f0 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   16828:	4b03      	ldr	r3, [pc, #12]	; (16838 <os_arch_start+0x2c>)
   1682a:	2201      	movs	r2, #1
   1682c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1682e:	4620      	mov	r0, r4
   16830:	f7ff ff5e 	bl	166f0 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   16834:	69a0      	ldr	r0, [r4, #24]
   16836:	bd10      	pop	{r4, pc}
   16838:	10000f40 	.word	0x10000f40

0001683c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1683c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1683e:	4815      	ldr	r0, [pc, #84]	; (16894 <os_arch_os_start+0x58>)
   16840:	6800      	ldr	r0, [r0, #0]
   16842:	3804      	subs	r0, #4
   16844:	f7fd fca6 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16848:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1684c:	b9ec      	cbnz	r4, 1688a <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1684e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   16852:	f004 0403 	and.w	r4, r4, #3
   16856:	2c02      	cmp	r4, #2
   16858:	d00d      	beq.n	16876 <os_arch_os_start+0x3a>
   1685a:	d803      	bhi.n	16864 <os_arch_os_start+0x28>
   1685c:	2c01      	cmp	r4, #1
   1685e:	d80f      	bhi.n	16880 <os_arch_os_start+0x44>
   16860:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   16862:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   16864:	2c03      	cmp	r4, #3
   16866:	d10b      	bne.n	16880 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   16868:	4c0b      	ldr	r4, [pc, #44]	; (16898 <os_arch_os_start+0x5c>)
   1686a:	6824      	ldr	r4, [r4, #0]
   1686c:	f014 0f01 	tst.w	r4, #1
   16870:	d106      	bne.n	16880 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   16872:	2008      	movs	r0, #8
   16874:	e7f5      	b.n	16862 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   16876:	4c08      	ldr	r4, [pc, #32]	; (16898 <os_arch_os_start+0x5c>)
   16878:	6824      	ldr	r4, [r4, #0]
   1687a:	f014 0f01 	tst.w	r4, #1
   1687e:	d106      	bne.n	1688e <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   16880:	f8df c018 	ldr.w	ip, [pc, #24]	; 1689c <os_arch_os_start+0x60>
   16884:	df00      	svc	0
}
   16886:	2000      	movs	r0, #0
   16888:	e7eb      	b.n	16862 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   1688a:	2007      	movs	r0, #7
   1688c:	e7e9      	b.n	16862 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   1688e:	2008      	movs	r0, #8
   16890:	e7e7      	b.n	16862 <os_arch_os_start+0x26>
   16892:	bf00      	nop
   16894:	10000598 	.word	0x10000598
   16898:	1000198c 	.word	0x1000198c
   1689c:	0001680d 	.word	0x0001680d

000168a0 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   168a0:	4603      	mov	r3, r0
   168a2:	b128      	cbz	r0, 168b0 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   168a4:	2000      	movs	r0, #0
   168a6:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   168a8:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   168aa:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   168ac:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   168ae:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   168b0:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   168b2:	4770      	bx	lr

000168b4 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   168b6:	4b2e      	ldr	r3, [pc, #184]	; (16970 <os_mutex_release+0xbc>)
   168b8:	681b      	ldr	r3, [r3, #0]
   168ba:	2b00      	cmp	r3, #0
   168bc:	d050      	beq.n	16960 <os_mutex_release+0xac>
   168be:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   168c0:	2800      	cmp	r0, #0
   168c2:	d04f      	beq.n	16964 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   168c4:	f7ff fc4a 	bl	1615c <os_sched_get_current_task>
   168c8:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   168ca:	88e3      	ldrh	r3, [r4, #6]
   168cc:	2b00      	cmp	r3, #0
   168ce:	d04b      	beq.n	16968 <os_mutex_release+0xb4>
   168d0:	68a2      	ldr	r2, [r4, #8]
   168d2:	4282      	cmp	r2, r0
   168d4:	d14a      	bne.n	1696c <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   168d6:	2b01      	cmp	r3, #1
   168d8:	d003      	beq.n	168e2 <os_mutex_release+0x2e>
        --mu->mu_level;
   168da:	3b01      	subs	r3, #1
   168dc:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   168de:	2000      	movs	r0, #0
        goto done;
   168e0:	e03f      	b.n	16962 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   168e2:	f7ff ff0f 	bl	16704 <os_arch_save_sr>
   168e6:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   168e8:	88e3      	ldrh	r3, [r4, #6]
   168ea:	3b01      	subs	r3, #1
   168ec:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   168ee:	7aea      	ldrb	r2, [r5, #11]
   168f0:	7963      	ldrb	r3, [r4, #5]
   168f2:	429a      	cmp	r2, r3
   168f4:	d11e      	bne.n	16934 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   168f6:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   168f8:	b146      	cbz	r6, 1690c <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   168fa:	69f3      	ldr	r3, [r6, #28]
   168fc:	b1fb      	cbz	r3, 1693e <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   168fe:	4630      	mov	r0, r6
   16900:	f7ff fc80 	bl	16204 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   16904:	2301      	movs	r3, #1
   16906:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   16908:	7af3      	ldrb	r3, [r6, #11]
   1690a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1690c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1690e:	b116      	cbz	r6, 16916 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   16910:	7bb3      	ldrb	r3, [r6, #14]
   16912:	3301      	adds	r3, #1
   16914:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   16916:	7bab      	ldrb	r3, [r5, #14]
   16918:	3b01      	subs	r3, #1
   1691a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1691c:	f7ff fcf8 	bl	16310 <os_sched_next_task>
   16920:	4604      	mov	r4, r0
    if (rdy != current) {
   16922:	4285      	cmp	r5, r0
   16924:	d015      	beq.n	16952 <os_mutex_release+0x9e>
        resched = 1;
   16926:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   16928:	4638      	mov	r0, r7
   1692a:	f7ff fef1 	bl	16710 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1692e:	b995      	cbnz	r5, 16956 <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   16930:	2000      	movs	r0, #0
   16932:	e016      	b.n	16962 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   16934:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   16936:	4628      	mov	r0, r5
   16938:	f7ff fd02 	bl	16340 <os_sched_resort>
   1693c:	e7db      	b.n	168f6 <os_mutex_release+0x42>
        assert(rdy->t_obj);
   1693e:	f7fd fe89 	bl	14654 <hal_debugger_connected>
   16942:	b100      	cbz	r0, 16946 <os_mutex_release+0x92>
   16944:	be01      	bkpt	0x0001
   16946:	2300      	movs	r3, #0
   16948:	461a      	mov	r2, r3
   1694a:	4619      	mov	r1, r3
   1694c:	4618      	mov	r0, r3
   1694e:	f7fe fa23 	bl	14d98 <__assert_func>
    resched = 0;
   16952:	2500      	movs	r5, #0
   16954:	e7e8      	b.n	16928 <os_mutex_release+0x74>
        os_sched(rdy);
   16956:	4620      	mov	r0, r4
   16958:	f7ff fce0 	bl	1631c <os_sched>
    ret = OS_OK;
   1695c:	2000      	movs	r0, #0
   1695e:	e000      	b.n	16962 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   16960:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   16962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   16964:	2003      	movs	r0, #3
   16966:	e7fc      	b.n	16962 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   16968:	2005      	movs	r0, #5
   1696a:	e7fa      	b.n	16962 <os_mutex_release+0xae>
   1696c:	2005      	movs	r0, #5
   1696e:	e7f8      	b.n	16962 <os_mutex_release+0xae>
   16970:	10000f40 	.word	0x10000f40

00016974 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   16974:	4b36      	ldr	r3, [pc, #216]	; (16a50 <os_mutex_pend+0xdc>)
   16976:	681b      	ldr	r3, [r3, #0]
   16978:	2b00      	cmp	r3, #0
   1697a:	d065      	beq.n	16a48 <os_mutex_pend+0xd4>
{
   1697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16980:	4605      	mov	r5, r0
   16982:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   16984:	2800      	cmp	r0, #0
   16986:	d061      	beq.n	16a4c <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   16988:	f7ff febc 	bl	16704 <os_arch_save_sr>
   1698c:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1698e:	f7ff fbe5 	bl	1615c <os_sched_get_current_task>
   16992:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   16994:	88ea      	ldrh	r2, [r5, #6]
   16996:	b19a      	cbz	r2, 169c0 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   16998:	68ab      	ldr	r3, [r5, #8]
   1699a:	4283      	cmp	r3, r0
   1699c:	d01d      	beq.n	169da <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1699e:	b31f      	cbz	r7, 169e8 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   169a0:	7ad9      	ldrb	r1, [r3, #11]
   169a2:	7ac2      	ldrb	r2, [r0, #11]
   169a4:	4291      	cmp	r1, r2
   169a6:	d824      	bhi.n	169f2 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   169a8:	6828      	ldr	r0, [r5, #0]
   169aa:	b360      	cbz	r0, 16a06 <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   169ac:	4603      	mov	r3, r0
    last = NULL;
   169ae:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   169b0:	b323      	cbz	r3, 169fc <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   169b2:	7ae6      	ldrb	r6, [r4, #11]
   169b4:	7ada      	ldrb	r2, [r3, #11]
   169b6:	4296      	cmp	r6, r2
   169b8:	d320      	bcc.n	169fc <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   169ba:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   169bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   169be:	e7f7      	b.n	169b0 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   169c0:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   169c2:	7ac3      	ldrb	r3, [r0, #11]
   169c4:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   169c6:	7b83      	ldrb	r3, [r0, #14]
   169c8:	3301      	adds	r3, #1
   169ca:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   169cc:	2301      	movs	r3, #1
   169ce:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   169d0:	4640      	mov	r0, r8
   169d2:	f7ff fe9d 	bl	16710 <os_arch_restore_sr>
        ret = OS_OK;
   169d6:	2000      	movs	r0, #0
        goto done;
   169d8:	e032      	b.n	16a40 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   169da:	3201      	adds	r2, #1
   169dc:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   169de:	4640      	mov	r0, r8
   169e0:	f7ff fe96 	bl	16710 <os_arch_restore_sr>
        ret = OS_OK;
   169e4:	2000      	movs	r0, #0
        goto done;
   169e6:	e02b      	b.n	16a40 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   169e8:	4640      	mov	r0, r8
   169ea:	f7ff fe91 	bl	16710 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   169ee:	2006      	movs	r0, #6
        goto done;
   169f0:	e026      	b.n	16a40 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   169f2:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   169f4:	68a8      	ldr	r0, [r5, #8]
   169f6:	f7ff fca3 	bl	16340 <os_sched_resort>
   169fa:	e7d5      	b.n	169a8 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   169fc:	b119      	cbz	r1, 16a06 <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   169fe:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   16a00:	64e3      	str	r3, [r4, #76]	; 0x4c
   16a02:	64cc      	str	r4, [r1, #76]	; 0x4c
   16a04:	e001      	b.n	16a0a <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   16a06:	64e0      	str	r0, [r4, #76]	; 0x4c
   16a08:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   16a0a:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   16a0c:	7b63      	ldrb	r3, [r4, #13]
   16a0e:	f043 0304 	orr.w	r3, r3, #4
   16a12:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   16a14:	4639      	mov	r1, r7
   16a16:	4620      	mov	r0, r4
   16a18:	f7ff fbac 	bl	16174 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   16a1c:	4640      	mov	r0, r8
   16a1e:	f7ff fe77 	bl	16710 <os_arch_restore_sr>

    os_sched(NULL);
   16a22:	2000      	movs	r0, #0
   16a24:	f7ff fc7a 	bl	1631c <os_sched>

    OS_ENTER_CRITICAL(sr);
   16a28:	f7ff fe6c 	bl	16704 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   16a2c:	7b63      	ldrb	r3, [r4, #13]
   16a2e:	f023 0304 	bic.w	r3, r3, #4
   16a32:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   16a34:	f7ff fe6c 	bl	16710 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   16a38:	68ab      	ldr	r3, [r5, #8]
   16a3a:	42a3      	cmp	r3, r4
   16a3c:	d002      	beq.n	16a44 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   16a3e:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   16a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   16a44:	2000      	movs	r0, #0
   16a46:	e7fb      	b.n	16a40 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   16a48:	2009      	movs	r0, #9
}
   16a4a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   16a4c:	2003      	movs	r0, #3
   16a4e:	e7f7      	b.n	16a40 <os_mutex_pend+0xcc>
   16a50:	10000f40 	.word	0x10000f40

00016a54 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   16a54:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   16a56:	4802      	ldr	r0, [pc, #8]	; (16a60 <lrand48+0xc>)
   16a58:	f000 f892 	bl	16b80 <jrand48>
}
   16a5c:	0840      	lsrs	r0, r0, #1
   16a5e:	bd08      	pop	{r3, pc}
   16a60:	10001990 	.word	0x10001990

00016a64 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   16a64:	b470      	push	{r4, r5, r6}
   16a66:	f04f 0500 	mov.w	r5, #0
   16a6a:	f022 0603 	bic.w	r6, r2, #3
   16a6e:	e005      	b.n	16a7c <test1>

00016a70 <loop1>:
   16a70:	5943      	ldr	r3, [r0, r5]
   16a72:	594c      	ldr	r4, [r1, r5]
   16a74:	42a3      	cmp	r3, r4
   16a76:	d104      	bne.n	16a82 <res1>
   16a78:	f105 0504 	add.w	r5, r5, #4

00016a7c <test1>:
   16a7c:	42b5      	cmp	r5, r6
   16a7e:	d1f7      	bne.n	16a70 <loop1>
   16a80:	e00d      	b.n	16a9e <test2>

00016a82 <res1>:
   16a82:	ba1b      	rev	r3, r3
   16a84:	ba24      	rev	r4, r4
   16a86:	1b1b      	subs	r3, r3, r4
   16a88:	bf8c      	ite	hi
   16a8a:	2301      	movhi	r3, #1
   16a8c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   16a90:	e009      	b.n	16aa6 <done>

00016a92 <loop2>:
   16a92:	5d43      	ldrb	r3, [r0, r5]
   16a94:	5d4c      	ldrb	r4, [r1, r5]
   16a96:	1b1b      	subs	r3, r3, r4
   16a98:	d105      	bne.n	16aa6 <done>
   16a9a:	f105 0501 	add.w	r5, r5, #1

00016a9e <test2>:
   16a9e:	4295      	cmp	r5, r2
   16aa0:	d1f7      	bne.n	16a92 <loop2>
   16aa2:	f04f 0300 	mov.w	r3, #0

00016aa6 <done>:
   16aa6:	4618      	mov	r0, r3
   16aa8:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   16aaa:	4770      	bx	lr

00016aac <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   16aac:	e001      	b.n	16ab2 <test1>

00016aae <loop1>:
   16aae:	588b      	ldr	r3, [r1, r2]
   16ab0:	5083      	str	r3, [r0, r2]

00016ab2 <test1>:
   16ab2:	3a04      	subs	r2, #4
   16ab4:	d5fb      	bpl.n	16aae <loop1>
   16ab6:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   16aba:	e001      	b.n	16ac0 <test2>

00016abc <loop2>:
   16abc:	5c8b      	ldrb	r3, [r1, r2]
   16abe:	5483      	strb	r3, [r0, r2]

00016ac0 <test2>:
   16ac0:	3a01      	subs	r2, #1
   16ac2:	d5fb      	bpl.n	16abc <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   16ac4:	4770      	bx	lr

00016ac6 <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
   16ac6:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
   16ac8:	4281      	cmp	r1, r0
   16aca:	d809      	bhi.n	16ae0 <memmove+0x1a>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
   16acc:	4411      	add	r1, r2
		q += n;
   16ace:	1883      	adds	r3, r0, r2
		while (n--) {
   16ad0:	1e54      	subs	r4, r2, #1
   16ad2:	b172      	cbz	r2, 16af2 <memmove+0x2c>
			*--q = *--p;
   16ad4:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   16ad8:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
   16adc:	4622      	mov	r2, r4
   16ade:	e7f7      	b.n	16ad0 <memmove+0xa>
	char *q = dst;
   16ae0:	4603      	mov	r3, r0
		while (n--) {
   16ae2:	1e54      	subs	r4, r2, #1
   16ae4:	b12a      	cbz	r2, 16af2 <memmove+0x2c>
			*q++ = *p++;
   16ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
   16aea:	f803 2b01 	strb.w	r2, [r3], #1
		while (n--) {
   16aee:	4622      	mov	r2, r4
   16af0:	e7f7      	b.n	16ae2 <memmove+0x1c>
		}
	}
#endif

	return dst;
}
   16af2:	bc10      	pop	{r4}
   16af4:	4770      	bx	lr

00016af6 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   16af6:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   16af8:	4605      	mov	r5, r0
   16afa:	b2c9      	uxtb	r1, r1
   16afc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   16b00:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   16b04:	18ab      	adds	r3, r5, r2
   16b06:	2403      	movs	r4, #3
   16b08:	4023      	ands	r3, r4
   16b0a:	1ad3      	subs	r3, r2, r3
   16b0c:	d40b      	bmi.n	16b26 <memset+0x30>
   16b0e:	e001      	b.n	16b14 <memset+0x1e>
   16b10:	3a01      	subs	r2, #1
   16b12:	54a9      	strb	r1, [r5, r2]
   16b14:	429a      	cmp	r2, r3
   16b16:	d1fb      	bne.n	16b10 <memset+0x1a>
   16b18:	e000      	b.n	16b1c <memset+0x26>
   16b1a:	50a9      	str	r1, [r5, r2]
   16b1c:	3a04      	subs	r2, #4
   16b1e:	d5fc      	bpl.n	16b1a <memset+0x24>
   16b20:	3204      	adds	r2, #4
   16b22:	e000      	b.n	16b26 <memset+0x30>
   16b24:	54a9      	strb	r1, [r5, r2]
   16b26:	3a01      	subs	r2, #1
   16b28:	d5fc      	bpl.n	16b24 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   16b2a:	bc30      	pop	{r4, r5}
   16b2c:	4770      	bx	lr

00016b2e <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   16b2e:	b410      	push	{r4}
   16b30:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   16b32:	7822      	ldrb	r2, [r4, #0]
   16b34:	3401      	adds	r4, #1
   16b36:	7808      	ldrb	r0, [r1, #0]
   16b38:	3101      	adds	r1, #1
		if (d || !ch)
   16b3a:	1a10      	subs	r0, r2, r0
   16b3c:	d101      	bne.n	16b42 <strcmp+0x14>
   16b3e:	2a00      	cmp	r2, #0
   16b40:	d1f7      	bne.n	16b32 <strcmp+0x4>
			break;
	}

	return d;
}
   16b42:	bc10      	pop	{r4}
   16b44:	4770      	bx	lr

00016b46 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   16b46:	4603      	mov	r3, r0
	while (*ss)
   16b48:	781a      	ldrb	r2, [r3, #0]
   16b4a:	b10a      	cbz	r2, 16b50 <strlen+0xa>
		ss++;
   16b4c:	3301      	adds	r3, #1
   16b4e:	e7fb      	b.n	16b48 <strlen+0x2>
	return ss - s;
}
   16b50:	1a18      	subs	r0, r3, r0
   16b52:	4770      	bx	lr

00016b54 <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
   16b54:	b570      	push	{r4, r5, r6, lr}
   16b56:	4606      	mov	r6, r0
   16b58:	460c      	mov	r4, r1
   16b5a:	4615      	mov	r5, r2
	char *q = strchr(dst, '\0');
   16b5c:	f7ff fff3 	bl	16b46 <strlen>
   16b60:	4430      	add	r0, r6
	const char *p = src;
	char ch;

	while (n--) {
   16b62:	462b      	mov	r3, r5
   16b64:	3d01      	subs	r5, #1
   16b66:	b13b      	cbz	r3, 16b78 <strncat+0x24>
		*q++ = ch = *p++;
   16b68:	4621      	mov	r1, r4
   16b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
   16b6e:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   16b72:	b113      	cbz	r3, 16b7a <strncat+0x26>
		*q++ = ch = *p++;
   16b74:	460c      	mov	r4, r1
   16b76:	e7f4      	b.n	16b62 <strncat+0xe>
			return dst;
	}
	*q = '\0';
   16b78:	7003      	strb	r3, [r0, #0]

	return dst;
}
   16b7a:	4630      	mov	r0, r6
   16b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00016b80 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   16b80:	b4f0      	push	{r4, r5, r6, r7}
   16b82:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   16b84:	8804      	ldrh	r4, [r0, #0]
   16b86:	2500      	movs	r5, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   16b88:	8846      	ldrh	r6, [r0, #2]
   16b8a:	0432      	lsls	r2, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   16b8c:	18a2      	adds	r2, r4, r2
   16b8e:	f04f 0000 	mov.w	r0, #0
   16b92:	eb45 0000 	adc.w	r0, r5, r0
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   16b96:	2300      	movs	r3, #0
   16b98:	888c      	ldrh	r4, [r1, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   16b9a:	18d2      	adds	r2, r2, r3
   16b9c:	eb44 0000 	adc.w	r0, r4, r0

	x = (0x5deece66dULL * x) + 0xb;
   16ba0:	4c0a      	ldr	r4, [pc, #40]	; (16bcc <jrand48+0x4c>)
   16ba2:	2305      	movs	r3, #5
   16ba4:	fb03 f302 	mul.w	r3, r3, r2
   16ba8:	fb04 3000 	mla	r0, r4, r0, r3
   16bac:	fba2 2304 	umull	r2, r3, r2, r4
   16bb0:	4403      	add	r3, r0
   16bb2:	f112 000b 	adds.w	r0, r2, #11
   16bb6:	f143 0300 	adc.w	r3, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   16bba:	8008      	strh	r0, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   16bbc:	0c00      	lsrs	r0, r0, #16
   16bbe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   16bc2:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   16bc4:	808b      	strh	r3, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   16bc6:	bcf0      	pop	{r4, r5, r6, r7}
   16bc8:	4770      	bx	lr
   16bca:	bf00      	nop
   16bcc:	deece66d 	.word	0xdeece66d

00016bd0 <imgr_my_version>:
    return 0;
}

int
imgr_my_version(struct image_version *ver)
{
   16bd0:	b508      	push	{r3, lr}
   16bd2:	4601      	mov	r1, r0
    return img_mgmt_read_info(boot_current_slot, ver, NULL, NULL);
   16bd4:	2300      	movs	r3, #0
   16bd6:	461a      	mov	r2, r3
   16bd8:	4802      	ldr	r0, [pc, #8]	; (16be4 <imgr_my_version+0x14>)
   16bda:	6800      	ldr	r0, [r0, #0]
   16bdc:	f004 f858 	bl	1ac90 <img_mgmt_read_info>
}
   16be0:	bd08      	pop	{r3, pc}
   16be2:	bf00      	nop
   16be4:	10003c50 	.word	0x10003c50

00016be8 <imgmgr_find_best_area_id>:
    return -1;
}

int
imgmgr_find_best_area_id(void)
{
   16be8:	b530      	push	{r4, r5, lr}
   16bea:	b083      	sub	sp, #12
    struct image_version ver;
    int best = -1;
    int i;
    int rc;

    for (i = 0; i < 2; i++) {
   16bec:	2400      	movs	r4, #0
    int best = -1;
   16bee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   16bf2:	e000      	b.n	16bf6 <imgmgr_find_best_area_id+0xe>
   16bf4:	3401      	adds	r4, #1
   16bf6:	2c01      	cmp	r4, #1
   16bf8:	dc10      	bgt.n	16c1c <imgmgr_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   16bfa:	2300      	movs	r3, #0
   16bfc:	461a      	mov	r2, r3
   16bfe:	4669      	mov	r1, sp
   16c00:	4620      	mov	r0, r4
   16c02:	f004 f845 	bl	1ac90 <img_mgmt_read_info>
        if (rc < 0) {
   16c06:	2800      	cmp	r0, #0
   16c08:	dbf4      	blt.n	16bf4 <imgmgr_find_best_area_id+0xc>
            continue;
        }
        if (rc == 0) {
   16c0a:	b930      	cbnz	r0, 16c1a <imgmgr_find_best_area_id+0x32>
            /* Image in slot is ok. */
            if (img_mgmt_slot_in_use(i)) {
   16c0c:	4620      	mov	r0, r4
   16c0e:	f004 fad8 	bl	1b1c2 <img_mgmt_slot_in_use>
   16c12:	2800      	cmp	r0, #0
   16c14:	d1ee      	bne.n	16bf4 <imgmgr_find_best_area_id+0xc>
            } else {
                /*
                 * Not active slot, but image is ok. Use it if there are
                 * no better candidates.
                 */
                best = i;
   16c16:	4625      	mov	r5, r4
   16c18:	e7ec      	b.n	16bf4 <imgmgr_find_best_area_id+0xc>
            }
            continue;
        }
        best = i;
   16c1a:	4625      	mov	r5, r4
        break;
    }
    if (best >= 0) {
   16c1c:	2d00      	cmp	r5, #0
   16c1e:	da02      	bge.n	16c26 <imgmgr_find_best_area_id+0x3e>
        best = flash_area_id_from_image_slot(best);
    }
    return best;
}
   16c20:	4628      	mov	r0, r5
   16c22:	b003      	add	sp, #12
   16c24:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   16c26:	4628      	mov	r0, r5
   16c28:	f001 ffc9 	bl	18bbe <flash_area_id_from_image_slot>
   16c2c:	4605      	mov	r5, r0
    return best;
   16c2e:	e7f7      	b.n	16c20 <imgmgr_find_best_area_id+0x38>

00016c30 <imgr_erase_state>:

static int
imgr_erase_state(struct mgmt_ctxt *ctxt)
{
   16c30:	b570      	push	{r4, r5, r6, lr}
   16c32:	b082      	sub	sp, #8
   16c34:	4604      	mov	r4, r0
    const struct flash_area *fa;
    int area_id;
    int rc;
    CborError g_err = CborNoError;

    area_id = imgmgr_find_best_area_id();
   16c36:	f7ff ffd7 	bl	16be8 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
   16c3a:	2800      	cmp	r0, #0
   16c3c:	db1b      	blt.n	16c76 <imgr_erase_state+0x46>
        rc = flash_area_open(area_id, &fa);
   16c3e:	a901      	add	r1, sp, #4
   16c40:	b2c0      	uxtb	r0, r0
   16c42:	f001 ff07 	bl	18a54 <flash_area_open>
        if (rc) {
   16c46:	b9d0      	cbnz	r0, 16c7e <imgr_erase_state+0x4e>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
                                      img_mgmt_err_str_flash_open_failed);
        }

        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
   16c48:	2220      	movs	r2, #32
   16c4a:	2100      	movs	r1, #0
   16c4c:	9801      	ldr	r0, [sp, #4]
   16c4e:	f001 ff7f 	bl	18b50 <flash_area_erase>
        if (rc) {
   16c52:	4605      	mov	r5, r0
   16c54:	b9a8      	cbnz	r0, 16c82 <imgr_erase_state+0x52>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   16c56:	2202      	movs	r2, #2
   16c58:	490b      	ldr	r1, [pc, #44]	; (16c88 <imgr_erase_state+0x58>)
   16c5a:	4620      	mov	r0, r4
   16c5c:	f017 fe8e 	bl	2e97c <cbor_encode_text_string>
   16c60:	4606      	mov	r6, r0
    } else {
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    }

    g_err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    g_err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   16c62:	2200      	movs	r2, #0
   16c64:	2300      	movs	r3, #0
   16c66:	4620      	mov	r0, r4
   16c68:	f017 fe13 	bl	2e892 <cbor_encode_int>

    if (g_err) {
   16c6c:	ea50 0306 	orrs.w	r3, r0, r6
   16c70:	d002      	beq.n	16c78 <imgr_erase_state+0x48>
        return MGMT_ERR_ENOMEM;
   16c72:	2502      	movs	r5, #2
   16c74:	e000      	b.n	16c78 <imgr_erase_state+0x48>
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
   16c76:	2502      	movs	r5, #2
    }

    return 0;
}
   16c78:	4628      	mov	r0, r5
   16c7a:	b002      	add	sp, #8
   16c7c:	bd70      	pop	{r4, r5, r6, pc}
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
   16c7e:	2503      	movs	r5, #3
   16c80:	e7fa      	b.n	16c78 <imgr_erase_state+0x48>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
   16c82:	2503      	movs	r5, #3
   16c84:	e7f8      	b.n	16c78 <imgr_erase_state+0x48>
   16c86:	bf00      	nop
   16c88:	00034260 	.word	0x00034260

00016c8c <imgmgr_module_init>:

void
imgmgr_module_init(void)
{
   16c8c:	b508      	push	{r3, lr}
    int rc;
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16c8e:	4b08      	ldr	r3, [pc, #32]	; (16cb0 <imgmgr_module_init+0x24>)
   16c90:	781b      	ldrb	r3, [r3, #0]
   16c92:	b11b      	cbz	r3, 16c9c <imgmgr_module_init+0x10>

    mgmt_register_group(&imgr_mgmt_group);
   16c94:	4807      	ldr	r0, [pc, #28]	; (16cb4 <imgmgr_module_init+0x28>)
   16c96:	f005 f9f1 	bl	1c07c <mgmt_register_group>
    rc = imgr_cli_register();
    SYSINIT_PANIC_ASSERT(rc == 0);
#else
    (void) rc;
#endif
}
   16c9a:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16c9c:	f7fd fcda 	bl	14654 <hal_debugger_connected>
   16ca0:	b100      	cbz	r0, 16ca4 <imgmgr_module_init+0x18>
   16ca2:	be01      	bkpt	0x0001
   16ca4:	2300      	movs	r3, #0
   16ca6:	461a      	mov	r2, r3
   16ca8:	4619      	mov	r1, r3
   16caa:	4618      	mov	r0, r3
   16cac:	f7fe f874 	bl	14d98 <__assert_func>
   16cb0:	10001e3c 	.word	0x10001e3c
   16cb4:	10000188 	.word	0x10000188

00016cb8 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
   16cb8:	b500      	push	{lr}
   16cba:	b083      	sub	sp, #12
   16cbc:	4602      	mov	r2, r0
   16cbe:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
   16cc0:	6853      	ldr	r3, [r2, #4]
   16cc2:	b153      	cbz	r3, 16cda <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
   16cc4:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
   16cc6:	9301      	str	r3, [sp, #4]
   16cc8:	9100      	str	r1, [sp, #0]
   16cca:	7853      	ldrb	r3, [r2, #1]
   16ccc:	7812      	ldrb	r2, [r2, #0]
   16cce:	4907      	ldr	r1, [pc, #28]	; (16cec <imgr_ver_str+0x34>)
   16cd0:	f01b fb6c 	bl	323ac <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
   16cd4:	b003      	add	sp, #12
   16cd6:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
   16cda:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
   16cdc:	9300      	str	r3, [sp, #0]
   16cde:	7853      	ldrb	r3, [r2, #1]
   16ce0:	7812      	ldrb	r2, [r2, #0]
   16ce2:	4903      	ldr	r1, [pc, #12]	; (16cf0 <imgr_ver_str+0x38>)
   16ce4:	f01b fb62 	bl	323ac <sprintf>
   16ce8:	e7f4      	b.n	16cd4 <imgr_ver_str+0x1c>
   16cea:	bf00      	nop
   16cec:	0003429c 	.word	0x0003429c
   16cf0:	000342ac 	.word	0x000342ac

00016cf4 <smp_free_buf>:
}

static void
smp_free_buf(void *m, void *arg)
{
    if (!m) {
   16cf4:	b118      	cbz	r0, 16cfe <smp_free_buf+0xa>
{
   16cf6:	b508      	push	{r3, lr}
        return;
    }

    os_mbuf_free_chain(m);
   16cf8:	f7fe fcb6 	bl	15668 <os_mbuf_free_chain>
}
   16cfc:	bd08      	pop	{r3, pc}
   16cfe:	4770      	bx	lr

00016d00 <smp_init_writer>:
smp_init_writer(struct cbor_encoder_writer *writer, void *m,
		void *arg)
{
    struct cbor_mbuf_writer *cmw;
     
    if (!writer) {
   16d00:	b120      	cbz	r0, 16d0c <smp_init_writer+0xc>
{
   16d02:	b508      	push	{r3, lr}
        return MGMT_ERR_EINVAL;
    }

    cmw = (struct cbor_mbuf_writer *)writer;
    cbor_mbuf_writer_init(cmw, m);
   16d04:	f017 fcfc 	bl	2e700 <cbor_mbuf_writer_init>

    return 0;
   16d08:	2000      	movs	r0, #0
}
   16d0a:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   16d0c:	2003      	movs	r0, #3
}
   16d0e:	4770      	bx	lr

00016d10 <smp_init_reader>:
    if (!reader) {
   16d10:	b128      	cbz	r0, 16d1e <smp_init_reader+0xe>
{
   16d12:	b508      	push	{r3, lr}
    cbor_mbuf_reader_init(cmr, m, 0);
   16d14:	2200      	movs	r2, #0
   16d16:	f017 fcb7 	bl	2e688 <cbor_mbuf_reader_init>
    return 0;
   16d1a:	2000      	movs	r0, #0
}
   16d1c:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   16d1e:	2003      	movs	r0, #3
}
   16d20:	4770      	bx	lr

00016d22 <smp_write_at>:
    if (!writer) {
   16d22:	b160      	cbz	r0, 16d3e <smp_write_at+0x1c>
{
   16d24:	b538      	push	{r3, r4, r5, lr}
   16d26:	4605      	mov	r5, r0
    m = cmw->m;
   16d28:	6884      	ldr	r4, [r0, #8]
    if (offset > OS_MBUF_PKTLEN(m)) {
   16d2a:	8a20      	ldrh	r0, [r4, #16]
   16d2c:	4288      	cmp	r0, r1
   16d2e:	d308      	bcc.n	16d42 <smp_write_at+0x20>
    rc = os_mbuf_copyinto(m, offset, data, len);
   16d30:	4620      	mov	r0, r4
   16d32:	f7fe fe60 	bl	159f6 <os_mbuf_copyinto>
    if (rc) {
   16d36:	b930      	cbnz	r0, 16d46 <smp_write_at+0x24>
    writer->bytes_written = OS_MBUF_PKTLEN(m);
   16d38:	8a23      	ldrh	r3, [r4, #16]
   16d3a:	606b      	str	r3, [r5, #4]
}
   16d3c:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_EINVAL;
   16d3e:	2003      	movs	r0, #3
}
   16d40:	4770      	bx	lr
        return MGMT_ERR_EINVAL;
   16d42:	2003      	movs	r0, #3
   16d44:	e7fa      	b.n	16d3c <smp_write_at+0x1a>
        return MGMT_ERR_ENOMEM;
   16d46:	2002      	movs	r0, #2
   16d48:	e7f8      	b.n	16d3c <smp_write_at+0x1a>

00016d4a <smp_reset_buf>:
    if (!m) {
   16d4a:	b128      	cbz	r0, 16d58 <smp_reset_buf+0xe>
{
   16d4c:	b508      	push	{r3, lr}
    os_mbuf_adj(m, -1 * OS_MBUF_PKTLEN((struct os_mbuf *)m));
   16d4e:	8a01      	ldrh	r1, [r0, #16]
   16d50:	4249      	negs	r1, r1
   16d52:	f7fe fd60 	bl	15816 <os_mbuf_adj>
}
   16d56:	bd08      	pop	{r3, pc}
   16d58:	4770      	bx	lr

00016d5a <smp_trim_front>:
{
   16d5a:	b508      	push	{r3, lr}
    os_mbuf_adj(m, len);
   16d5c:	f7fe fd5b 	bl	15816 <os_mbuf_adj>
}
   16d60:	bd08      	pop	{r3, pc}

00016d62 <smp_alloc_rsp>:
{
   16d62:	b538      	push	{r3, r4, r5, lr}
   if (!req) {
   16d64:	4604      	mov	r4, r0
   16d66:	b180      	cbz	r0, 16d8a <smp_alloc_rsp+0x28>
   rsp = os_msys_get_pkthdr(0, OS_MBUF_USRHDR_LEN(m));
   16d68:	7941      	ldrb	r1, [r0, #5]
   16d6a:	3908      	subs	r1, #8
   16d6c:	b289      	uxth	r1, r1
   16d6e:	2000      	movs	r0, #0
   16d70:	f7ff f906 	bl	15f80 <os_msys_get_pkthdr>
   if (!rsp) {
   16d74:	4605      	mov	r5, r0
   16d76:	b130      	cbz	r0, 16d86 <smp_alloc_rsp+0x24>
   memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(m), OS_MBUF_USRHDR_LEN(m));
   16d78:	7962      	ldrb	r2, [r4, #5]
   16d7a:	3a08      	subs	r2, #8
   16d7c:	f104 0118 	add.w	r1, r4, #24
   16d80:	3018      	adds	r0, #24
   16d82:	f7ff fe93 	bl	16aac <memcpy>
}
   16d86:	4628      	mov	r0, r5
   16d88:	bd38      	pop	{r3, r4, r5, pc}
       return NULL;
   16d8a:	4605      	mov	r5, r0
   16d8c:	e7fb      	b.n	16d86 <smp_alloc_rsp+0x24>

00016d8e <smp_rsp_frag_alloc>:
/**
 * Allocates an mbuf to costain an outgoing response fragment.
 */
static struct os_mbuf *
smp_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   16d8e:	b538      	push	{r3, r4, r5, lr}
   16d90:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   16d92:	7949      	ldrb	r1, [r1, #5]
   16d94:	3908      	subs	r1, #8
   16d96:	b289      	uxth	r1, r1
   16d98:	f7ff f8f2 	bl	15f80 <os_msys_get_pkthdr>
    if (frag != NULL) {
   16d9c:	4605      	mov	r5, r0
   16d9e:	b130      	cbz	r0, 16dae <smp_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragmest mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   16da0:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   16da2:	3a08      	subs	r2, #8
   16da4:	f104 0118 	add.w	r1, r4, #24
   16da8:	3018      	adds	r0, #24
   16daa:	f7ff fe7f 	bl	16aac <memcpy>
    }

    return frag;
}
   16dae:	4628      	mov	r0, r5
   16db0:	bd38      	pop	{r3, r4, r5, pc}
	...

00016db4 <smp_tx_rsp>:

int
smp_tx_rsp(struct smp_streamer *ns, void *rsp, void *arg)
{
   16db4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16db6:	b083      	sub	sp, #12
   16db8:	460d      	mov	r5, r1
   16dba:	4616      	mov	r6, r2
    struct os_mbuf *m;
    uint16_t mtu;
    int rc;

    st = arg;
    m  = rsp;
   16dbc:	9101      	str	r1, [sp, #4]

    mtu = st->st_get_mtu(rsp);
   16dbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   16dc0:	4608      	mov	r0, r1
   16dc2:	4798      	blx	r3
    if (mtu == 0U) {
   16dc4:	4607      	mov	r7, r0
   16dc6:	b180      	cbz	r0, 16dea <smp_tx_rsp+0x36>
        /* The transport cannot support a transmission right now. */
        return MGMT_ERR_EUNKNOWN;
    }

    while (m != NULL) {
   16dc8:	9b01      	ldr	r3, [sp, #4]
   16dca:	b163      	cbz	r3, 16de6 <smp_tx_rsp+0x32>
        frag = mem_split_frag(&m, mtu, smp_rsp_frag_alloc, rsp);
   16dcc:	462b      	mov	r3, r5
   16dce:	4a09      	ldr	r2, [pc, #36]	; (16df4 <smp_tx_rsp+0x40>)
   16dd0:	4639      	mov	r1, r7
   16dd2:	a801      	add	r0, sp, #4
   16dd4:	f003 fa5e 	bl	1a294 <mem_split_frag>
        if (frag == NULL) {
   16dd8:	b150      	cbz	r0, 16df0 <smp_tx_rsp+0x3c>
            return MGMT_ERR_ENOMEM;
        }

        rc = st->st_output(frag);
   16dda:	6af4      	ldr	r4, [r6, #44]	; 0x2c
   16ddc:	47a0      	blx	r4
        if (rc != 0) {
   16dde:	2800      	cmp	r0, #0
   16de0:	d0f2      	beq.n	16dc8 <smp_tx_rsp+0x14>
            return MGMT_ERR_EUNKNOWN;
   16de2:	2001      	movs	r0, #1
   16de4:	e002      	b.n	16dec <smp_tx_rsp+0x38>
        }
    }

    return 0;
   16de6:	2000      	movs	r0, #0
   16de8:	e000      	b.n	16dec <smp_tx_rsp+0x38>
        return MGMT_ERR_EUNKNOWN;
   16dea:	2001      	movs	r0, #1
}
   16dec:	b003      	add	sp, #12
   16dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return MGMT_ERR_ENOMEM;
   16df0:	2002      	movs	r0, #2
   16df2:	e7fb      	b.n	16dec <smp_tx_rsp+0x38>
   16df4:	00016d8f 	.word	0x00016d8f

00016df8 <smp_process_packet>:
    struct cbor_mbuf_reader reader;
    struct cbor_mbuf_writer writer;
    struct os_mbuf *m;
    int rc;

    if (!st) {
   16df8:	b1c0      	cbz	r0, 16e2c <smp_process_packet+0x34>
{
   16dfa:	b510      	push	{r4, lr}
   16dfc:	b08c      	sub	sp, #48	; 0x30
   16dfe:	4604      	mov	r4, r0
        return MGMT_ERR_EINVAL;
    }

    st->st_streamer = (struct smp_streamer) {
   16e00:	4b0e      	ldr	r3, [pc, #56]	; (16e3c <smp_process_packet+0x44>)
   16e02:	6003      	str	r3, [r0, #0]
   16e04:	6040      	str	r0, [r0, #4]
   16e06:	ab03      	add	r3, sp, #12
   16e08:	6083      	str	r3, [r0, #8]
   16e0a:	f8c0 d00c 	str.w	sp, [r0, #12]
   16e0e:	4b0c      	ldr	r3, [pc, #48]	; (16e40 <smp_process_packet+0x48>)
   16e10:	6103      	str	r3, [r0, #16]
        },
        .tx_rsp_cb = smp_tx_rsp,
    };

    while (1) {
        m = os_mqueue_get(&st->st_imq);
   16e12:	f104 0014 	add.w	r0, r4, #20
   16e16:	f7fe fbb8 	bl	1558a <os_mqueue_get>
        if (!m) {
   16e1a:	4601      	mov	r1, r0
   16e1c:	b148      	cbz	r0, 16e32 <smp_process_packet+0x3a>
            break;
        }

        rc = smp_process_request_packet(&st->st_streamer, m);
   16e1e:	4620      	mov	r0, r4
   16e20:	f005 fa9c 	bl	1c35c <smp_process_request_packet>
        if (rc) {
   16e24:	4603      	mov	r3, r0
   16e26:	2800      	cmp	r0, #0
   16e28:	d0f3      	beq.n	16e12 <smp_process_packet+0x1a>
   16e2a:	e003      	b.n	16e34 <smp_process_packet+0x3c>
        return MGMT_ERR_EINVAL;
   16e2c:	2303      	movs	r3, #3
            return rc;
        }
    }
    
    return 0;
}
   16e2e:	4618      	mov	r0, r3
   16e30:	4770      	bx	lr
    return 0;
   16e32:	2300      	movs	r3, #0
}
   16e34:	4618      	mov	r0, r3
   16e36:	b00c      	add	sp, #48	; 0x30
   16e38:	bd10      	pop	{r4, pc}
   16e3a:	bf00      	nop
   16e3c:	000342b8 	.word	0x000342b8
   16e40:	00016db5 	.word	0x00016db5

00016e44 <smp_event_data_in>:
    return rc;
}

static void
smp_event_data_in(struct os_event *ev)
{
   16e44:	b508      	push	{r3, lr}
    smp_process_packet(ev->ev_arg);
   16e46:	6880      	ldr	r0, [r0, #8]
   16e48:	f7ff ffd6 	bl	16df8 <smp_process_packet>
}
   16e4c:	bd08      	pop	{r3, pc}
	...

00016e50 <mgmt_evq_set>:
    g_smp_evq = evq;
   16e50:	4b01      	ldr	r3, [pc, #4]	; (16e58 <mgmt_evq_set+0x8>)
   16e52:	6018      	str	r0, [r3, #0]
}
   16e54:	4770      	bx	lr
   16e56:	bf00      	nop
   16e58:	10001998 	.word	0x10001998

00016e5c <smp_rx_req>:
{
   16e5c:	b538      	push	{r3, r4, r5, lr}
   16e5e:	4605      	mov	r5, r0
   16e60:	460c      	mov	r4, r1
    rc = os_mqueue_put(&st->st_imq, os_eventq_dflt_get(), req);
   16e62:	f7fe fb85 	bl	15570 <os_eventq_dflt_get>
   16e66:	4601      	mov	r1, r0
   16e68:	4622      	mov	r2, r4
   16e6a:	f105 0014 	add.w	r0, r5, #20
   16e6e:	f7fe fb9d 	bl	155ac <os_mqueue_put>
    if (rc) {
   16e72:	4605      	mov	r5, r0
   16e74:	b908      	cbnz	r0, 16e7a <smp_rx_req+0x1e>
}
   16e76:	4628      	mov	r0, r5
   16e78:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(req);
   16e7a:	4620      	mov	r0, r4
   16e7c:	f7fe fbf4 	bl	15668 <os_mbuf_free_chain>
    return rc;
   16e80:	e7f9      	b.n	16e76 <smp_rx_req+0x1a>
	...

00016e84 <smp_transport_init>:

int
smp_transport_init(struct smp_transport *st,
                   smp_transport_out_func_t output_func,
                   smp_transport_get_mtu_func_t get_mtu_func)
{
   16e84:	b508      	push	{r3, lr}
    int rc;

    st->st_output = output_func;
   16e86:	62c1      	str	r1, [r0, #44]	; 0x2c
    st->st_get_mtu = get_mtu_func;
   16e88:	6302      	str	r2, [r0, #48]	; 0x30

    rc = os_mqueue_init(&st->st_imq, smp_event_data_in, st);
   16e8a:	4602      	mov	r2, r0
   16e8c:	4902      	ldr	r1, [pc, #8]	; (16e98 <smp_transport_init+0x14>)
   16e8e:	3014      	adds	r0, #20
   16e90:	f7fe fb72 	bl	15578 <os_mqueue_init>
    }

    return 0;
err:
    return rc;
}
   16e94:	bd08      	pop	{r3, pc}
   16e96:	bf00      	nop
   16e98:	00016e45 	.word	0x00016e45

00016e9c <smp_pkg_init>:

void
smp_pkg_init(void)
{
   16e9c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16e9e:	4b09      	ldr	r3, [pc, #36]	; (16ec4 <smp_pkg_init+0x28>)
   16ea0:	781b      	ldrb	r3, [r3, #0]
   16ea2:	b123      	cbz	r3, 16eae <smp_pkg_init+0x12>

    mgmt_evq_set(os_eventq_dflt_get());
   16ea4:	f7fe fb64 	bl	15570 <os_eventq_dflt_get>
   16ea8:	f7ff ffd2 	bl	16e50 <mgmt_evq_set>
}
   16eac:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16eae:	f7fd fbd1 	bl	14654 <hal_debugger_connected>
   16eb2:	b100      	cbz	r0, 16eb6 <smp_pkg_init+0x1a>
   16eb4:	be01      	bkpt	0x0001
   16eb6:	2300      	movs	r3, #0
   16eb8:	461a      	mov	r2, r3
   16eba:	4619      	mov	r1, r3
   16ebc:	4618      	mov	r0, r3
   16ebe:	f7fd ff6b 	bl	14d98 <__assert_func>
   16ec2:	bf00      	nop
   16ec4:	10001e3c 	.word	0x10001e3c

00016ec8 <smp_ble_get_mtu>:
            return BLE_ATT_ERR_UNLIKELY;
    }
}

uint16_t
smp_ble_get_mtu(struct os_mbuf *req) {
   16ec8:	b508      	push	{r3, lr}

    uint16_t conn_handle;
    uint16_t mtu;

    memcpy(&conn_handle, OS_MBUF_USRHDR(req), sizeof (conn_handle));
    mtu = ble_att_mtu(conn_handle);
   16eca:	8b00      	ldrh	r0, [r0, #24]
   16ecc:	f00b fcb5 	bl	2283a <ble_att_mtu>
    if (!mtu) {
   16ed0:	4603      	mov	r3, r0
   16ed2:	b108      	cbz	r0, 16ed8 <smp_ble_get_mtu+0x10>
        /* No longer connected. */
        return 0;
    }

    /* 3 is the number of bytes for ATT notification base */
    mtu = mtu - 3;
   16ed4:	1ec3      	subs	r3, r0, #3
   16ed6:	b29b      	uxth	r3, r3

    return (mtu);
}
   16ed8:	4618      	mov	r0, r3
   16eda:	bd08      	pop	{r3, pc}

00016edc <smp_ble_out>:
    }
}

static int
smp_ble_out(struct os_mbuf *om)
{
   16edc:	b538      	push	{r3, r4, r5, lr}
   16ede:	4604      	mov	r4, r0
    int rc;

    rc = os_mqueue_put(&g_smp_ble_mq, os_eventq_dflt_get(), om);
   16ee0:	f7fe fb46 	bl	15570 <os_eventq_dflt_get>
   16ee4:	4601      	mov	r1, r0
   16ee6:	4622      	mov	r2, r4
   16ee8:	4805      	ldr	r0, [pc, #20]	; (16f00 <smp_ble_out+0x24>)
   16eea:	f7fe fb5f 	bl	155ac <os_mqueue_put>
    if (rc != 0) {
   16eee:	4605      	mov	r5, r0
   16ef0:	b908      	cbnz	r0, 16ef6 <smp_ble_out+0x1a>

    return 0;
err:
    os_mbuf_free_chain(om);
    return rc;
}
   16ef2:	4628      	mov	r0, r5
   16ef4:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(om);
   16ef6:	4620      	mov	r0, r4
   16ef8:	f7fe fbb6 	bl	15668 <os_mbuf_free_chain>
    return rc;
   16efc:	e7f9      	b.n	16ef2 <smp_ble_out+0x16>
   16efe:	bf00      	nop
   16f00:	100019a0 	.word	0x100019a0

00016f04 <smp_ble_event_data_in>:
{
   16f04:	b508      	push	{r3, lr}
    while ((m_resp = os_mqueue_get(&g_smp_ble_mq)) != NULL) {
   16f06:	480d      	ldr	r0, [pc, #52]	; (16f3c <smp_ble_event_data_in+0x38>)
   16f08:	f7fe fb3f 	bl	1558a <os_mqueue_get>
   16f0c:	4602      	mov	r2, r0
   16f0e:	b198      	cbz	r0, 16f38 <smp_ble_event_data_in+0x34>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   16f10:	7953      	ldrb	r3, [r2, #5]
   16f12:	3b08      	subs	r3, #8
   16f14:	2b01      	cmp	r3, #1
   16f16:	d905      	bls.n	16f24 <smp_ble_event_data_in+0x20>
        ble_gattc_notify_custom(conn_handle, g_ble_smp_attr_handle,
   16f18:	4b09      	ldr	r3, [pc, #36]	; (16f40 <smp_ble_event_data_in+0x3c>)
   16f1a:	8819      	ldrh	r1, [r3, #0]
   16f1c:	8b10      	ldrh	r0, [r2, #24]
   16f1e:	f00f fadd 	bl	264dc <ble_gattc_notify_custom>
   16f22:	e7f0      	b.n	16f06 <smp_ble_event_data_in+0x2>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   16f24:	f7fd fb96 	bl	14654 <hal_debugger_connected>
   16f28:	b100      	cbz	r0, 16f2c <smp_ble_event_data_in+0x28>
   16f2a:	be01      	bkpt	0x0001
   16f2c:	2300      	movs	r3, #0
   16f2e:	461a      	mov	r2, r3
   16f30:	4619      	mov	r1, r3
   16f32:	4618      	mov	r0, r3
   16f34:	f7fd ff30 	bl	14d98 <__assert_func>
}
   16f38:	bd08      	pop	{r3, pc}
   16f3a:	bf00      	nop
   16f3c:	100019a0 	.word	0x100019a0
   16f40:	1000199c 	.word	0x1000199c

00016f44 <gatt_svr_chr_access_smp>:
{
   16f44:	b570      	push	{r4, r5, r6, lr}
    switch (ctxt->op) {
   16f46:	7813      	ldrb	r3, [r2, #0]
   16f48:	2b01      	cmp	r3, #1
   16f4a:	d132      	bne.n	16fb2 <gatt_svr_chr_access_smp+0x6e>
   16f4c:	4606      	mov	r6, r0
   16f4e:	4614      	mov	r4, r2
            if (OS_MBUF_USRHDR_LEN(ctxt->om) >= sizeof (conn_handle)) {
   16f50:	6855      	ldr	r5, [r2, #4]
   16f52:	796b      	ldrb	r3, [r5, #5]
   16f54:	f1a3 0208 	sub.w	r2, r3, #8
   16f58:	2a01      	cmp	r2, #1
   16f5a:	d908      	bls.n	16f6e <gatt_svr_chr_access_smp+0x2a>
                ctxt->om = NULL;
   16f5c:	2300      	movs	r3, #0
   16f5e:	6063      	str	r3, [r4, #4]
            memcpy(OS_MBUF_USRHDR(m_req), &conn_handle, sizeof(conn_handle));
   16f60:	832e      	strh	r6, [r5, #24]
            rc = smp_rx_req(&g_smp_ble_transport, m_req);
   16f62:	4629      	mov	r1, r5
   16f64:	481a      	ldr	r0, [pc, #104]	; (16fd0 <gatt_svr_chr_access_smp+0x8c>)
   16f66:	f7ff ff79 	bl	16e5c <smp_rx_req>
            if (rc) {
   16f6a:	bb70      	cbnz	r0, 16fca <gatt_svr_chr_access_smp+0x86>
}
   16f6c:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   16f6e:	2b07      	cmp	r3, #7
   16f70:	d90e      	bls.n	16f90 <gatt_svr_chr_access_smp+0x4c>
        startoff = om->om_pkthdr_len;
   16f72:	b29b      	uxth	r3, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   16f74:	4629      	mov	r1, r5
   16f76:	f851 2b10 	ldr.w	r2, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   16f7a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   16f7c:	1ad3      	subs	r3, r2, r3
   16f7e:	b29b      	uxth	r3, r3
            } else if (OS_MBUF_LEADINGSPACE(ctxt->om) >=
   16f80:	2b01      	cmp	r3, #1
   16f82:	d907      	bls.n	16f94 <gatt_svr_chr_access_smp+0x50>
                ctxt->om = NULL;
   16f84:	2300      	movs	r3, #0
   16f86:	6063      	str	r3, [r4, #4]
                m_req->om_pkthdr_len += sizeof (conn_handle);
   16f88:	796b      	ldrb	r3, [r5, #5]
   16f8a:	3302      	adds	r3, #2
   16f8c:	716b      	strb	r3, [r5, #5]
   16f8e:	e7e7      	b.n	16f60 <gatt_svr_chr_access_smp+0x1c>
    startoff = 0;
   16f90:	2300      	movs	r3, #0
   16f92:	e7ef      	b.n	16f74 <gatt_svr_chr_access_smp+0x30>
                m_req = os_msys_get_pkthdr(OS_MBUF_PKTLEN(ctxt->om),
   16f94:	2102      	movs	r1, #2
   16f96:	8a28      	ldrh	r0, [r5, #16]
   16f98:	f7fe fff2 	bl	15f80 <os_msys_get_pkthdr>
                if (!m_req) {
   16f9c:	4605      	mov	r5, r0
   16f9e:	b190      	cbz	r0, 16fc6 <gatt_svr_chr_access_smp+0x82>
                rc = os_mbuf_appendfrom(m_req, ctxt->om, 0,
   16fa0:	6861      	ldr	r1, [r4, #4]
   16fa2:	8a0b      	ldrh	r3, [r1, #16]
   16fa4:	2200      	movs	r2, #0
   16fa6:	f7fe fbdd 	bl	15764 <os_mbuf_appendfrom>
                if (rc) {
   16faa:	2800      	cmp	r0, #0
   16fac:	d0d8      	beq.n	16f60 <gatt_svr_chr_access_smp+0x1c>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   16fae:	2011      	movs	r0, #17
   16fb0:	e7dc      	b.n	16f6c <gatt_svr_chr_access_smp+0x28>
            assert(0);
   16fb2:	f7fd fb4f 	bl	14654 <hal_debugger_connected>
   16fb6:	b100      	cbz	r0, 16fba <gatt_svr_chr_access_smp+0x76>
   16fb8:	be01      	bkpt	0x0001
   16fba:	2300      	movs	r3, #0
   16fbc:	461a      	mov	r2, r3
   16fbe:	4619      	mov	r1, r3
   16fc0:	4618      	mov	r0, r3
   16fc2:	f7fd fee9 	bl	14d98 <__assert_func>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   16fc6:	2011      	movs	r0, #17
   16fc8:	e7d0      	b.n	16f6c <gatt_svr_chr_access_smp+0x28>
                return BLE_ATT_ERR_UNLIKELY;
   16fca:	200e      	movs	r0, #14
   16fcc:	e7ce      	b.n	16f6c <gatt_svr_chr_access_smp+0x28>
   16fce:	bf00      	nop
   16fd0:	100019b8 	.word	0x100019b8

00016fd4 <smp_ble_gatt_svr_init>:
 * @param eventq
 * @return 0 on success; non-zero on failure
 */
int
smp_ble_gatt_svr_init(void)
{
   16fd4:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   16fd6:	480c      	ldr	r0, [pc, #48]	; (17008 <smp_ble_gatt_svr_init+0x34>)
   16fd8:	f010 fbc8 	bl	2776c <ble_gatts_count_cfg>
    if (rc != 0) {
   16fdc:	4603      	mov	r3, r0
   16fde:	b108      	cbz	r0, 16fe4 <smp_ble_gatt_svr_init+0x10>

    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);

err:
    return rc;
}
   16fe0:	4618      	mov	r0, r3
   16fe2:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   16fe4:	4808      	ldr	r0, [pc, #32]	; (17008 <smp_ble_gatt_svr_init+0x34>)
   16fe6:	f010 fb9d 	bl	27724 <ble_gatts_add_svcs>
    if (rc != 0) {
   16fea:	4603      	mov	r3, r0
   16fec:	2800      	cmp	r0, #0
   16fee:	d1f7      	bne.n	16fe0 <smp_ble_gatt_svr_init+0xc>
    os_mqueue_init(&g_smp_ble_mq, &smp_ble_event_data_in, NULL);
   16ff0:	2200      	movs	r2, #0
   16ff2:	4906      	ldr	r1, [pc, #24]	; (1700c <smp_ble_gatt_svr_init+0x38>)
   16ff4:	4806      	ldr	r0, [pc, #24]	; (17010 <smp_ble_gatt_svr_init+0x3c>)
   16ff6:	f7fe fabf 	bl	15578 <os_mqueue_init>
    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);
   16ffa:	4a06      	ldr	r2, [pc, #24]	; (17014 <smp_ble_gatt_svr_init+0x40>)
   16ffc:	4906      	ldr	r1, [pc, #24]	; (17018 <smp_ble_gatt_svr_init+0x44>)
   16ffe:	4807      	ldr	r0, [pc, #28]	; (1701c <smp_ble_gatt_svr_init+0x48>)
   17000:	f7ff ff40 	bl	16e84 <smp_transport_init>
   17004:	4603      	mov	r3, r0
   17006:	e7eb      	b.n	16fe0 <smp_ble_gatt_svr_init+0xc>
   17008:	000342fc 	.word	0x000342fc
   1700c:	00016f05 	.word	0x00016f05
   17010:	100019a0 	.word	0x100019a0
   17014:	00016ec9 	.word	0x00016ec9
   17018:	00016edd 	.word	0x00016edd
   1701c:	100019b8 	.word	0x100019b8

00017020 <smp_ble_pkg_init>:

void
smp_ble_pkg_init(void)
{
   17020:	b510      	push	{r4, lr}
   17022:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17024:	4b0f      	ldr	r3, [pc, #60]	; (17064 <smp_ble_pkg_init+0x44>)
   17026:	781b      	ldrb	r3, [r3, #0]
   17028:	b123      	cbz	r3, 17034 <smp_ble_pkg_init+0x14>

    rc = smp_ble_gatt_svr_init();
   1702a:	f7ff ffd3 	bl	16fd4 <smp_ble_gatt_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1702e:	b958      	cbnz	r0, 17048 <smp_ble_pkg_init+0x28>
}
   17030:	b002      	add	sp, #8
   17032:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   17034:	f7fd fb0e 	bl	14654 <hal_debugger_connected>
   17038:	b100      	cbz	r0, 1703c <smp_ble_pkg_init+0x1c>
   1703a:	be01      	bkpt	0x0001
   1703c:	2300      	movs	r3, #0
   1703e:	461a      	mov	r2, r3
   17040:	4619      	mov	r1, r3
   17042:	4618      	mov	r0, r3
   17044:	f7fd fea8 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17048:	f7fd fb04 	bl	14654 <hal_debugger_connected>
   1704c:	b100      	cbz	r0, 17050 <smp_ble_pkg_init+0x30>
   1704e:	be01      	bkpt	0x0001
   17050:	2000      	movs	r0, #0
   17052:	9000      	str	r0, [sp, #0]
   17054:	4b04      	ldr	r3, [pc, #16]	; (17068 <smp_ble_pkg_init+0x48>)
   17056:	681c      	ldr	r4, [r3, #0]
   17058:	4603      	mov	r3, r0
   1705a:	4602      	mov	r2, r0
   1705c:	4601      	mov	r1, r0
   1705e:	47a0      	blx	r4
}
   17060:	e7e6      	b.n	17030 <smp_ble_pkg_init+0x10>
   17062:	bf00      	nop
   17064:	10001e3c 	.word	0x10001e3c
   17068:	1000028c 	.word	0x1000028c

0001706c <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
   1706c:	b510      	push	{r4, lr}
   1706e:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
   17070:	2200      	movs	r2, #0
   17072:	a903      	add	r1, sp, #12
   17074:	2011      	movs	r0, #17
   17076:	f001 fd07 	bl	18a88 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1707a:	bb20      	cbnz	r0, 170c6 <config_init_fcb+0x5a>
    SYSINIT_PANIC_ASSERT(
   1707c:	9b03      	ldr	r3, [sp, #12]
   1707e:	2b09      	cmp	r3, #9
   17080:	d82e      	bhi.n	170e0 <config_init_fcb+0x74>
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
   17082:	4a30      	ldr	r2, [pc, #192]	; (17144 <config_init_fcb+0xd8>)
   17084:	a903      	add	r1, sp, #12
   17086:	2011      	movs	r0, #17
   17088:	f001 fcfe 	bl	18a88 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
   1708c:	482e      	ldr	r0, [pc, #184]	; (17148 <config_init_fcb+0xdc>)
   1708e:	9b03      	ldr	r3, [sp, #12]
   17090:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
   17092:	f000 fca3 	bl	179dc <conf_fcb_src>
    if (rc) {
   17096:	4603      	mov	r3, r0
   17098:	2800      	cmp	r0, #0
   1709a:	d032      	beq.n	17102 <config_init_fcb+0x96>
        for (cnt = 0;
   1709c:	2300      	movs	r3, #0
   1709e:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
   170a0:	4b29      	ldr	r3, [pc, #164]	; (17148 <config_init_fcb+0xdc>)
   170a2:	7b5a      	ldrb	r2, [r3, #13]
   170a4:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
   170a6:	429a      	cmp	r2, r3
   170a8:	dd27      	ble.n	170fa <config_init_fcb+0x8e>
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
   170aa:	4826      	ldr	r0, [pc, #152]	; (17144 <config_init_fcb+0xd8>)
   170ac:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   170b0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   170b4:	689a      	ldr	r2, [r3, #8]
   170b6:	2100      	movs	r1, #0
   170b8:	4618      	mov	r0, r3
   170ba:	f001 fd49 	bl	18b50 <flash_area_erase>
             cnt++) {
   170be:	9b03      	ldr	r3, [sp, #12]
   170c0:	3301      	adds	r3, #1
   170c2:	9303      	str	r3, [sp, #12]
   170c4:	e7ec      	b.n	170a0 <config_init_fcb+0x34>
    SYSINIT_PANIC_ASSERT(rc == 0);
   170c6:	f7fd fac5 	bl	14654 <hal_debugger_connected>
   170ca:	b100      	cbz	r0, 170ce <config_init_fcb+0x62>
   170cc:	be01      	bkpt	0x0001
   170ce:	2000      	movs	r0, #0
   170d0:	9000      	str	r0, [sp, #0]
   170d2:	4b1e      	ldr	r3, [pc, #120]	; (1714c <config_init_fcb+0xe0>)
   170d4:	681c      	ldr	r4, [r3, #0]
   170d6:	4603      	mov	r3, r0
   170d8:	4602      	mov	r2, r0
   170da:	4601      	mov	r1, r0
   170dc:	47a0      	blx	r4
   170de:	e7cd      	b.n	1707c <config_init_fcb+0x10>
    SYSINIT_PANIC_ASSERT(
   170e0:	f7fd fab8 	bl	14654 <hal_debugger_connected>
   170e4:	b100      	cbz	r0, 170e8 <config_init_fcb+0x7c>
   170e6:	be01      	bkpt	0x0001
   170e8:	2000      	movs	r0, #0
   170ea:	9000      	str	r0, [sp, #0]
   170ec:	4b17      	ldr	r3, [pc, #92]	; (1714c <config_init_fcb+0xe0>)
   170ee:	681c      	ldr	r4, [r3, #0]
   170f0:	4603      	mov	r3, r0
   170f2:	4602      	mov	r2, r0
   170f4:	4601      	mov	r1, r0
   170f6:	47a0      	blx	r4
   170f8:	e7c3      	b.n	17082 <config_init_fcb+0x16>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
   170fa:	4813      	ldr	r0, [pc, #76]	; (17148 <config_init_fcb+0xdc>)
   170fc:	f000 fc6e 	bl	179dc <conf_fcb_src>
   17100:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
   17102:	b92b      	cbnz	r3, 17110 <config_init_fcb+0xa4>
    rc = conf_fcb_dst(&config_init_conf_fcb);
   17104:	4810      	ldr	r0, [pc, #64]	; (17148 <config_init_fcb+0xdc>)
   17106:	f000 fc95 	bl	17a34 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1710a:	b970      	cbnz	r0, 1712a <config_init_fcb+0xbe>
}
   1710c:	b004      	add	sp, #16
   1710e:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   17110:	f7fd faa0 	bl	14654 <hal_debugger_connected>
   17114:	b100      	cbz	r0, 17118 <config_init_fcb+0xac>
   17116:	be01      	bkpt	0x0001
   17118:	2000      	movs	r0, #0
   1711a:	9000      	str	r0, [sp, #0]
   1711c:	4b0b      	ldr	r3, [pc, #44]	; (1714c <config_init_fcb+0xe0>)
   1711e:	681c      	ldr	r4, [r3, #0]
   17120:	4603      	mov	r3, r0
   17122:	4602      	mov	r2, r0
   17124:	4601      	mov	r1, r0
   17126:	47a0      	blx	r4
   17128:	e7ec      	b.n	17104 <config_init_fcb+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1712a:	f7fd fa93 	bl	14654 <hal_debugger_connected>
   1712e:	b100      	cbz	r0, 17132 <config_init_fcb+0xc6>
   17130:	be01      	bkpt	0x0001
   17132:	2000      	movs	r0, #0
   17134:	9000      	str	r0, [sp, #0]
   17136:	4b05      	ldr	r3, [pc, #20]	; (1714c <config_init_fcb+0xe0>)
   17138:	681c      	ldr	r4, [r3, #0]
   1713a:	4603      	mov	r3, r0
   1713c:	4602      	mov	r2, r0
   1713e:	4601      	mov	r1, r0
   17140:	47a0      	blx	r4
}
   17142:	e7e3      	b.n	1710c <config_init_fcb+0xa0>
   17144:	100019ec 	.word	0x100019ec
   17148:	100001c4 	.word	0x100001c4
   1714c:	1000028c 	.word	0x1000028c

00017150 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   17150:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17152:	4b09      	ldr	r3, [pc, #36]	; (17178 <config_pkg_init+0x28>)
   17154:	781b      	ldrb	r3, [r3, #0]
   17156:	b123      	cbz	r3, 17162 <config_pkg_init+0x12>

    conf_init();
   17158:	f000 f93e 	bl	173d8 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
   1715c:	f7ff ff86 	bl	1706c <config_init_fcb>
#elif MYNEWT_VAL(CONFIG_FCB2)
    config_init_fcb2();
#endif
#endif
}
   17160:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   17162:	f7fd fa77 	bl	14654 <hal_debugger_connected>
   17166:	b100      	cbz	r0, 1716a <config_pkg_init+0x1a>
   17168:	be01      	bkpt	0x0001
   1716a:	2300      	movs	r3, #0
   1716c:	461a      	mov	r2, r3
   1716e:	4619      	mov	r1, r3
   17170:	4618      	mov	r0, r3
   17172:	f7fd fe11 	bl	14d98 <__assert_func>
   17176:	bf00      	nop
   17178:	10001e3c 	.word	0x10001e3c

0001717c <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   1717c:	4770      	bx	lr

0001717e <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   1717e:	b538      	push	{r3, r4, r5, lr}
   17180:	460d      	mov	r5, r1
   17182:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   17184:	6811      	ldr	r1, [r2, #0]
   17186:	f7ff fcd2 	bl	16b2e <strcmp>
   1718a:	b9a8      	cbnz	r0, 171b8 <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
   1718c:	b145      	cbz	r5, 171a0 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   1718e:	6861      	ldr	r1, [r4, #4]
   17190:	b181      	cbz	r1, 171b4 <conf_dup_check_cb+0x36>
   17192:	4628      	mov	r0, r5
   17194:	f7ff fccb 	bl	16b2e <strcmp>
   17198:	b960      	cbnz	r0, 171b4 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
   1719a:	2301      	movs	r3, #1
   1719c:	60a3      	str	r3, [r4, #8]
   1719e:	e00b      	b.n	171b8 <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
   171a0:	6863      	ldr	r3, [r4, #4]
   171a2:	b10b      	cbz	r3, 171a8 <conf_dup_check_cb+0x2a>
   171a4:	781b      	ldrb	r3, [r3, #0]
   171a6:	b913      	cbnz	r3, 171ae <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   171a8:	2301      	movs	r3, #1
   171aa:	60a3      	str	r3, [r4, #8]
   171ac:	e004      	b.n	171b8 <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
   171ae:	2300      	movs	r3, #0
   171b0:	60a3      	str	r3, [r4, #8]
   171b2:	e001      	b.n	171b8 <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
   171b4:	2300      	movs	r3, #0
   171b6:	60a3      	str	r3, [r4, #8]
        }
    }
}
   171b8:	bd38      	pop	{r3, r4, r5, pc}

000171ba <conf_load_cb>:
{
   171ba:	b538      	push	{r3, r4, r5, lr}
   171bc:	4604      	mov	r4, r0
   171be:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   171c0:	b122      	cbz	r2, 171cc <conf_load_cb+0x12>
   171c2:	4610      	mov	r0, r2
   171c4:	4621      	mov	r1, r4
   171c6:	f7ff fcb2 	bl	16b2e <strcmp>
   171ca:	b918      	cbnz	r0, 171d4 <conf_load_cb+0x1a>
        conf_set_value(name, val);
   171cc:	4629      	mov	r1, r5
   171ce:	4620      	mov	r0, r4
   171d0:	f000 fabd 	bl	1774e <conf_set_value>
}
   171d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000171d8 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   171d8:	4b08      	ldr	r3, [pc, #32]	; (171fc <conf_src_register+0x24>)
   171da:	6819      	ldr	r1, [r3, #0]
   171dc:	460b      	mov	r3, r1
    prev = NULL;
   171de:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   171e0:	b113      	cbz	r3, 171e8 <conf_src_register+0x10>
        prev = cur;
   171e2:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
   171e4:	681b      	ldr	r3, [r3, #0]
   171e6:	e7fb      	b.n	171e0 <conf_src_register+0x8>
    if (!prev) {
   171e8:	b11a      	cbz	r2, 171f2 <conf_src_register+0x1a>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
   171ea:	6813      	ldr	r3, [r2, #0]
   171ec:	6003      	str	r3, [r0, #0]
   171ee:	6010      	str	r0, [r2, #0]
}
   171f0:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
   171f2:	6001      	str	r1, [r0, #0]
   171f4:	4b01      	ldr	r3, [pc, #4]	; (171fc <conf_src_register+0x24>)
   171f6:	6018      	str	r0, [r3, #0]
   171f8:	4770      	bx	lr
   171fa:	bf00      	nop
   171fc:	10001a58 	.word	0x10001a58

00017200 <conf_dst_register>:
    conf_save_dst = cs;
   17200:	4b01      	ldr	r3, [pc, #4]	; (17208 <conf_dst_register+0x8>)
   17202:	6018      	str	r0, [r3, #0]
}
   17204:	4770      	bx	lr
   17206:	bf00      	nop
   17208:	10001a60 	.word	0x10001a60

0001720c <conf_load>:
{
   1720c:	b510      	push	{r4, lr}
    conf_lock();
   1720e:	f000 f90d 	bl	1742c <conf_lock>
    conf_loaded = true;
   17212:	2301      	movs	r3, #1
   17214:	4a0e      	ldr	r2, [pc, #56]	; (17250 <conf_load+0x44>)
   17216:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   17218:	4a0e      	ldr	r2, [pc, #56]	; (17254 <conf_load+0x48>)
   1721a:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   1721c:	4b0e      	ldr	r3, [pc, #56]	; (17258 <conf_load+0x4c>)
   1721e:	681c      	ldr	r4, [r3, #0]
   17220:	e003      	b.n	1722a <conf_load+0x1e>
            conf_commit(NULL);
   17222:	2000      	movs	r0, #0
   17224:	f000 fac8 	bl	177b8 <conf_commit>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   17228:	6824      	ldr	r4, [r4, #0]
   1722a:	b14c      	cbz	r4, 17240 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   1722c:	6863      	ldr	r3, [r4, #4]
   1722e:	681b      	ldr	r3, [r3, #0]
   17230:	2200      	movs	r2, #0
   17232:	490a      	ldr	r1, [pc, #40]	; (1725c <conf_load+0x50>)
   17234:	4620      	mov	r0, r4
   17236:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   17238:	6823      	ldr	r3, [r4, #0]
   1723a:	2b00      	cmp	r3, #0
   1723c:	d1f1      	bne.n	17222 <conf_load+0x16>
   1723e:	e7f3      	b.n	17228 <conf_load+0x1c>
    conf_loading = false;
   17240:	4b04      	ldr	r3, [pc, #16]	; (17254 <conf_load+0x48>)
   17242:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   17244:	f000 f8fc 	bl	17440 <conf_unlock>
    return conf_commit(NULL);
   17248:	4620      	mov	r0, r4
   1724a:	f000 fab5 	bl	177b8 <conf_commit>
}
   1724e:	bd10      	pop	{r4, pc}
   17250:	10001a5c 	.word	0x10001a5c
   17254:	10001a5d 	.word	0x10001a5d
   17258:	10001a58 	.word	0x10001a58
   1725c:	000171bb 	.word	0x000171bb

00017260 <conf_ensure_loaded>:
{
   17260:	b508      	push	{r3, lr}
    if (conf_loaded) {
   17262:	4b04      	ldr	r3, [pc, #16]	; (17274 <conf_ensure_loaded+0x14>)
   17264:	781b      	ldrb	r3, [r3, #0]
   17266:	b10b      	cbz	r3, 1726c <conf_ensure_loaded+0xc>
        return 0;
   17268:	2000      	movs	r0, #0
}
   1726a:	bd08      	pop	{r3, pc}
    return conf_load();
   1726c:	f7ff ffce 	bl	1720c <conf_load>
   17270:	e7fb      	b.n	1726a <conf_ensure_loaded+0xa>
   17272:	bf00      	nop
   17274:	10001a5c 	.word	0x10001a5c

00017278 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   17278:	b570      	push	{r4, r5, r6, lr}
   1727a:	b084      	sub	sp, #16
   1727c:	4605      	mov	r5, r0
   1727e:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   17280:	f000 f8d4 	bl	1742c <conf_lock>
    if (!conf_save_dst) {
   17284:	4b13      	ldr	r3, [pc, #76]	; (172d4 <conf_save_one+0x5c>)
   17286:	681b      	ldr	r3, [r3, #0]
   17288:	b1fb      	cbz	r3, 172ca <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   1728a:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   1728c:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   1728e:	2300      	movs	r3, #0
   17290:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   17292:	4b11      	ldr	r3, [pc, #68]	; (172d8 <conf_save_one+0x60>)
   17294:	681c      	ldr	r4, [r3, #0]
   17296:	e006      	b.n	172a6 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   17298:	6863      	ldr	r3, [r4, #4]
   1729a:	681b      	ldr	r3, [r3, #0]
   1729c:	aa01      	add	r2, sp, #4
   1729e:	490f      	ldr	r1, [pc, #60]	; (172dc <conf_save_one+0x64>)
   172a0:	4620      	mov	r0, r4
   172a2:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   172a4:	6824      	ldr	r4, [r4, #0]
   172a6:	2c00      	cmp	r4, #0
   172a8:	d1f6      	bne.n	17298 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   172aa:	9b03      	ldr	r3, [sp, #12]
   172ac:	2b01      	cmp	r3, #1
   172ae:	d00e      	beq.n	172ce <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   172b0:	4b08      	ldr	r3, [pc, #32]	; (172d4 <conf_save_one+0x5c>)
   172b2:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   172b4:	6843      	ldr	r3, [r0, #4]
   172b6:	689b      	ldr	r3, [r3, #8]
   172b8:	4632      	mov	r2, r6
   172ba:	4629      	mov	r1, r5
   172bc:	4798      	blx	r3
   172be:	4604      	mov	r4, r0
out:
    conf_unlock();
   172c0:	f000 f8be 	bl	17440 <conf_unlock>
    return rc;
}
   172c4:	4620      	mov	r0, r4
   172c6:	b004      	add	sp, #16
   172c8:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   172ca:	240a      	movs	r4, #10
   172cc:	e7f8      	b.n	172c0 <conf_save_one+0x48>
        rc = 0;
   172ce:	2400      	movs	r4, #0
   172d0:	e7f6      	b.n	172c0 <conf_save_one+0x48>
   172d2:	bf00      	nop
   172d4:	10001a60 	.word	0x10001a60
   172d8:	10001a58 	.word	0x10001a58
   172dc:	0001717f 	.word	0x0001717f

000172e0 <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
   172e0:	b508      	push	{r3, lr}
    conf_save_one(name, value);
   172e2:	f7ff ffc9 	bl	17278 <conf_save_one>
}
   172e6:	bd08      	pop	{r3, pc}

000172e8 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
   172e8:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   172ea:	f000 f89f 	bl	1742c <conf_lock>
    cs = conf_save_dst;
   172ee:	4b11      	ldr	r3, [pc, #68]	; (17334 <conf_save+0x4c>)
   172f0:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
   172f2:	b1e6      	cbz	r6, 1732e <conf_save+0x46>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
   172f4:	6873      	ldr	r3, [r6, #4]
   172f6:	685b      	ldr	r3, [r3, #4]
   172f8:	b10b      	cbz	r3, 172fe <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
   172fa:	4630      	mov	r0, r6
   172fc:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   172fe:	4b0e      	ldr	r3, [pc, #56]	; (17338 <conf_save+0x50>)
   17300:	681c      	ldr	r4, [r3, #0]
    rc = 0;
   17302:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   17304:	e000      	b.n	17308 <conf_save+0x20>
   17306:	6824      	ldr	r4, [r4, #0]
   17308:	b144      	cbz	r4, 1731c <conf_save+0x34>
        rc2 = conf_export_cb(ch, conf_store_one, CONF_EXPORT_PERSIST);
   1730a:	2200      	movs	r2, #0
   1730c:	490b      	ldr	r1, [pc, #44]	; (1733c <conf_save+0x54>)
   1730e:	4620      	mov	r0, r4
   17310:	f000 fa0a 	bl	17728 <conf_export_cb>
        if (!rc) {
   17314:	2d00      	cmp	r5, #0
   17316:	d1f6      	bne.n	17306 <conf_save+0x1e>
            rc = rc2;
   17318:	4605      	mov	r5, r0
   1731a:	e7f4      	b.n	17306 <conf_save+0x1e>
        }
    }
    if (cs->cs_itf->csi_save_end) {
   1731c:	6873      	ldr	r3, [r6, #4]
   1731e:	68db      	ldr	r3, [r3, #12]
   17320:	b10b      	cbz	r3, 17326 <conf_save+0x3e>
        cs->cs_itf->csi_save_end(cs);
   17322:	4630      	mov	r0, r6
   17324:	4798      	blx	r3
    }
out:
    conf_unlock();
   17326:	f000 f88b 	bl	17440 <conf_unlock>
    return rc;
}
   1732a:	4628      	mov	r0, r5
   1732c:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   1732e:	250a      	movs	r5, #10
   17330:	e7f9      	b.n	17326 <conf_save+0x3e>
   17332:	bf00      	nop
   17334:	10001a60 	.word	0x10001a60
   17338:	10001a64 	.word	0x10001a64
   1733c:	000172e1 	.word	0x000172e1

00017340 <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
   17340:	2300      	movs	r3, #0
   17342:	4a02      	ldr	r2, [pc, #8]	; (1734c <conf_store_init+0xc>)
   17344:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   17346:	4a02      	ldr	r2, [pc, #8]	; (17350 <conf_store_init+0x10>)
   17348:	6013      	str	r3, [r2, #0]
}
   1734a:	4770      	bx	lr
   1734c:	10001a5c 	.word	0x10001a5c
   17350:	10001a58 	.word	0x10001a58

00017354 <conf_get_cb>:
 * Executes a conf_handler's "get" callback and returns the result.
 */
static char *
conf_get_cb(struct conf_handler *ch, int argc, char **argv, char *val,
            int val_len_max)
{
   17354:	b530      	push	{r4, r5, lr}
   17356:	b083      	sub	sp, #12
   17358:	4604      	mov	r4, r0
   1735a:	4608      	mov	r0, r1
   1735c:	4611      	mov	r1, r2
   1735e:	461a      	mov	r2, r3
    if (ch->ch_ext) {
   17360:	7a23      	ldrb	r3, [r4, #8]
   17362:	b13b      	cbz	r3, 17374 <conf_get_cb+0x20>
        if (ch->ch_get_ext != NULL) {
   17364:	68e5      	ldr	r5, [r4, #12]
   17366:	b155      	cbz	r5, 1737e <conf_get_cb+0x2a>
            return ch->ch_get_ext(argc, argv, val, val_len_max, ch->ch_arg);
   17368:	69e3      	ldr	r3, [r4, #28]
   1736a:	9300      	str	r3, [sp, #0]
   1736c:	9b06      	ldr	r3, [sp, #24]
   1736e:	47a8      	blx	r5
            return ch->ch_get(argc, argv, val, val_len_max);
        }
    }

    return NULL;
}
   17370:	b003      	add	sp, #12
   17372:	bd30      	pop	{r4, r5, pc}
        if (ch->ch_get != NULL) {
   17374:	68e4      	ldr	r4, [r4, #12]
   17376:	b124      	cbz	r4, 17382 <conf_get_cb+0x2e>
            return ch->ch_get(argc, argv, val, val_len_max);
   17378:	9b06      	ldr	r3, [sp, #24]
   1737a:	47a0      	blx	r4
   1737c:	e7f8      	b.n	17370 <conf_get_cb+0x1c>
    return NULL;
   1737e:	2000      	movs	r0, #0
   17380:	e7f6      	b.n	17370 <conf_get_cb+0x1c>
   17382:	2000      	movs	r0, #0
   17384:	e7f4      	b.n	17370 <conf_get_cb+0x1c>

00017386 <conf_set_cb>:
/**
 * Executes a conf_handler's "set" callback and returns the result.
 */
static int
conf_set_cb(struct conf_handler *ch, int argc, char **argv, char *val)
{
   17386:	b538      	push	{r3, r4, r5, lr}
   17388:	4604      	mov	r4, r0
   1738a:	4608      	mov	r0, r1
   1738c:	4611      	mov	r1, r2
   1738e:	461a      	mov	r2, r3
    if (ch->ch_ext) {
   17390:	7a23      	ldrb	r3, [r4, #8]
   17392:	b123      	cbz	r3, 1739e <conf_set_cb+0x18>
        if (ch->ch_set_ext != NULL) {
   17394:	6925      	ldr	r5, [r4, #16]
   17396:	b135      	cbz	r5, 173a6 <conf_set_cb+0x20>
            return ch->ch_set_ext(argc, argv, val, ch->ch_arg);
   17398:	69e3      	ldr	r3, [r4, #28]
   1739a:	47a8      	blx	r5
            return ch->ch_set(argc, argv, val);
        }
    }

    return OS_ERROR;
}
   1739c:	bd38      	pop	{r3, r4, r5, pc}
        if (ch->ch_set != NULL) {
   1739e:	6923      	ldr	r3, [r4, #16]
   173a0:	b11b      	cbz	r3, 173aa <conf_set_cb+0x24>
            return ch->ch_set(argc, argv, val);
   173a2:	4798      	blx	r3
   173a4:	e7fa      	b.n	1739c <conf_set_cb+0x16>
    return OS_ERROR;
   173a6:	200c      	movs	r0, #12
   173a8:	e7f8      	b.n	1739c <conf_set_cb+0x16>
   173aa:	200c      	movs	r0, #12
   173ac:	e7f6      	b.n	1739c <conf_set_cb+0x16>

000173ae <conf_commit_cb>:
/**
 * Executes a conf_handler's "commit" callback and returns the result.
 */
static int
conf_commit_cb(struct conf_handler *ch)
{
   173ae:	b508      	push	{r3, lr}
    if (ch->ch_ext) {
   173b0:	7a03      	ldrb	r3, [r0, #8]
   173b2:	b123      	cbz	r3, 173be <conf_commit_cb+0x10>
        if (ch->ch_commit_ext != NULL) {
   173b4:	6943      	ldr	r3, [r0, #20]
   173b6:	b133      	cbz	r3, 173c6 <conf_commit_cb+0x18>
            return ch->ch_commit_ext(ch->ch_arg);
   173b8:	69c0      	ldr	r0, [r0, #28]
   173ba:	4798      	blx	r3
            return ch->ch_commit();
        }
    }

    return 0;
}
   173bc:	bd08      	pop	{r3, pc}
        if (ch->ch_commit != NULL) {
   173be:	6943      	ldr	r3, [r0, #20]
   173c0:	b11b      	cbz	r3, 173ca <conf_commit_cb+0x1c>
            return ch->ch_commit();
   173c2:	4798      	blx	r3
   173c4:	e7fa      	b.n	173bc <conf_commit_cb+0xe>
    return 0;
   173c6:	2000      	movs	r0, #0
   173c8:	e7f8      	b.n	173bc <conf_commit_cb+0xe>
   173ca:	2000      	movs	r0, #0
   173cc:	e7f6      	b.n	173bc <conf_commit_cb+0xe>

000173ce <conf_ev_fn_load>:
{
   173ce:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   173d0:	f7ff ff46 	bl	17260 <conf_ensure_loaded>
}
   173d4:	bd08      	pop	{r3, pc}
	...

000173d8 <conf_init>:
{
   173d8:	b510      	push	{r4, lr}
   173da:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
   173dc:	480f      	ldr	r0, [pc, #60]	; (1741c <conf_init+0x44>)
   173de:	f7ff fa5f 	bl	168a0 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   173e2:	4b0f      	ldr	r3, [pc, #60]	; (17420 <conf_init+0x48>)
   173e4:	2200      	movs	r2, #0
   173e6:	601a      	str	r2, [r3, #0]
    conf_store_init();
   173e8:	f7ff ffaa 	bl	17340 <conf_store_init>
    rc = conf_mgmt_register();
   173ec:	f000 fc5e 	bl	17cac <conf_mgmt_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   173f0:	b930      	cbnz	r0, 17400 <conf_init+0x28>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   173f2:	f7fe f8bd 	bl	15570 <os_eventq_dflt_get>
   173f6:	490b      	ldr	r1, [pc, #44]	; (17424 <conf_init+0x4c>)
   173f8:	f7fe f801 	bl	153fe <os_eventq_put>
}
   173fc:	b002      	add	sp, #8
   173fe:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   17400:	f7fd f928 	bl	14654 <hal_debugger_connected>
   17404:	b100      	cbz	r0, 17408 <conf_init+0x30>
   17406:	be01      	bkpt	0x0001
   17408:	2000      	movs	r0, #0
   1740a:	9000      	str	r0, [sp, #0]
   1740c:	4b06      	ldr	r3, [pc, #24]	; (17428 <conf_init+0x50>)
   1740e:	681c      	ldr	r4, [r3, #0]
   17410:	4603      	mov	r3, r0
   17412:	4602      	mov	r2, r0
   17414:	4601      	mov	r1, r0
   17416:	47a0      	blx	r4
   17418:	e7eb      	b.n	173f2 <conf_init+0x1a>
   1741a:	bf00      	nop
   1741c:	10001a68 	.word	0x10001a68
   17420:	10001a64 	.word	0x10001a64
   17424:	100001fc 	.word	0x100001fc
   17428:	1000028c 	.word	0x1000028c

0001742c <conf_lock>:
{
   1742c:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   1742e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17432:	4802      	ldr	r0, [pc, #8]	; (1743c <conf_lock+0x10>)
   17434:	f7ff fa9e 	bl	16974 <os_mutex_pend>
}
   17438:	bd08      	pop	{r3, pc}
   1743a:	bf00      	nop
   1743c:	10001a68 	.word	0x10001a68

00017440 <conf_unlock>:
{
   17440:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   17442:	4802      	ldr	r0, [pc, #8]	; (1744c <conf_unlock+0xc>)
   17444:	f7ff fa36 	bl	168b4 <os_mutex_release>
}
   17448:	bd08      	pop	{r3, pc}
   1744a:	bf00      	nop
   1744c:	10001a68 	.word	0x10001a68

00017450 <conf_register>:
{
   17450:	b510      	push	{r4, lr}
   17452:	4604      	mov	r4, r0
    conf_lock();
   17454:	f7ff ffea 	bl	1742c <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   17458:	4b03      	ldr	r3, [pc, #12]	; (17468 <conf_register+0x18>)
   1745a:	681a      	ldr	r2, [r3, #0]
   1745c:	6022      	str	r2, [r4, #0]
   1745e:	601c      	str	r4, [r3, #0]
    conf_unlock();
   17460:	f7ff ffee 	bl	17440 <conf_unlock>
}
   17464:	2000      	movs	r0, #0
   17466:	bd10      	pop	{r4, pc}
   17468:	10001a64 	.word	0x10001a64

0001746c <conf_handler_lookup>:
{
   1746c:	b538      	push	{r3, r4, r5, lr}
   1746e:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   17470:	4b05      	ldr	r3, [pc, #20]	; (17488 <conf_handler_lookup+0x1c>)
   17472:	681c      	ldr	r4, [r3, #0]
   17474:	b134      	cbz	r4, 17484 <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
   17476:	6861      	ldr	r1, [r4, #4]
   17478:	4628      	mov	r0, r5
   1747a:	f7ff fb58 	bl	16b2e <strcmp>
   1747e:	b108      	cbz	r0, 17484 <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   17480:	6824      	ldr	r4, [r4, #0]
   17482:	e7f7      	b.n	17474 <conf_handler_lookup+0x8>
}
   17484:	4620      	mov	r0, r4
   17486:	bd38      	pop	{r3, r4, r5, pc}
   17488:	10001a64 	.word	0x10001a64

0001748c <conf_parse_name>:
{
   1748c:	b570      	push	{r4, r5, r6, lr}
   1748e:	b082      	sub	sp, #8
   17490:	460e      	mov	r6, r1
   17492:	4615      	mov	r5, r2
    tok = strtok_r(name, sep, &tok_ptr);
   17494:	aa01      	add	r2, sp, #4
   17496:	4909      	ldr	r1, [pc, #36]	; (174bc <conf_parse_name+0x30>)
   17498:	f01a ffc0 	bl	3241c <strtok_r>
    i = 0;
   1749c:	2300      	movs	r3, #0
    while (tok) {
   1749e:	b148      	cbz	r0, 174b4 <conf_parse_name+0x28>
        name_argv[i++] = tok;
   174a0:	1c5c      	adds	r4, r3, #1
   174a2:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   174a6:	aa01      	add	r2, sp, #4
   174a8:	4904      	ldr	r1, [pc, #16]	; (174bc <conf_parse_name+0x30>)
   174aa:	2000      	movs	r0, #0
   174ac:	f01a ffb6 	bl	3241c <strtok_r>
        name_argv[i++] = tok;
   174b0:	4623      	mov	r3, r4
   174b2:	e7f4      	b.n	1749e <conf_parse_name+0x12>
    *name_argc = i;
   174b4:	6033      	str	r3, [r6, #0]
}
   174b6:	b002      	add	sp, #8
   174b8:	bd70      	pop	{r4, r5, r6, pc}
   174ba:	bf00      	nop
   174bc:	0003431c 	.word	0x0003431c

000174c0 <conf_parse_and_lookup>:
{
   174c0:	b510      	push	{r4, lr}
   174c2:	4614      	mov	r4, r2
    rc = conf_parse_name(name, name_argc, name_argv);
   174c4:	f7ff ffe2 	bl	1748c <conf_parse_name>
    if (rc) {
   174c8:	b918      	cbnz	r0, 174d2 <conf_parse_and_lookup+0x12>
    return conf_handler_lookup(name_argv[0]);
   174ca:	6820      	ldr	r0, [r4, #0]
   174cc:	f7ff ffce 	bl	1746c <conf_handler_lookup>
}
   174d0:	bd10      	pop	{r4, pc}
        return NULL;
   174d2:	2000      	movs	r0, #0
   174d4:	e7fc      	b.n	174d0 <conf_parse_and_lookup+0x10>

000174d6 <conf_value_from_str>:
    if (!val_str) {
   174d6:	2800      	cmp	r0, #0
   174d8:	f000 80a0 	beq.w	1761c <conf_value_from_str+0x146>
{
   174dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174e0:	b085      	sub	sp, #20
   174e2:	460c      	mov	r4, r1
   174e4:	4692      	mov	sl, r2
   174e6:	461d      	mov	r5, r3
   174e8:	4683      	mov	fp, r0
    switch (type) {
   174ea:	1e8b      	subs	r3, r1, #2
   174ec:	2b0c      	cmp	r3, #12
   174ee:	f200 8097 	bhi.w	17620 <conf_value_from_str+0x14a>
   174f2:	e8df f003 	tbb	[pc, r3]
   174f6:	0707      	.short	0x0707
   174f8:	95830707 	.word	0x95830707
   174fc:	55079595 	.word	0x55079595
   17500:	5555      	.short	0x5555
   17502:	55          	.byte	0x55
   17503:	00          	.byte	0x00
        val = strtoll(val_str, &eptr, 0);
   17504:	2200      	movs	r2, #0
   17506:	a903      	add	r1, sp, #12
   17508:	f01a ff98 	bl	3243c <strtoll>
   1750c:	4602      	mov	r2, r0
   1750e:	460b      	mov	r3, r1
        if (*eptr != '\0') {
   17510:	9903      	ldr	r1, [sp, #12]
   17512:	7809      	ldrb	r1, [r1, #0]
   17514:	2900      	cmp	r1, #0
   17516:	f040 8085 	bne.w	17624 <conf_value_from_str+0x14e>
        if (type == CONF_BOOL) {
   1751a:	2c0a      	cmp	r4, #10
   1751c:	d009      	beq.n	17532 <conf_value_from_str+0x5c>
        } else if (type == CONF_INT8) {
   1751e:	2c02      	cmp	r4, #2
   17520:	d013      	beq.n	1754a <conf_value_from_str+0x74>
        } else if (type == CONF_INT16) {
   17522:	2c03      	cmp	r4, #3
   17524:	d01e      	beq.n	17564 <conf_value_from_str+0x8e>
        } else if (type == CONF_INT32) {
   17526:	2c04      	cmp	r4, #4
   17528:	d02a      	beq.n	17580 <conf_value_from_str+0xaa>
            *(int64_t *)vp = val;
   1752a:	e9ca 2300 	strd	r2, r3, [sl]
    return 0;
   1752e:	2000      	movs	r0, #0
   17530:	e071      	b.n	17616 <conf_value_from_str+0x140>
            if (val < 0 || val > 1) {
   17532:	2b00      	cmp	r3, #0
   17534:	bf08      	it	eq
   17536:	2a02      	cmpeq	r2, #2
   17538:	d276      	bcs.n	17628 <conf_value_from_str+0x152>
            *(bool *)vp = val;
   1753a:	4313      	orrs	r3, r2
   1753c:	bf14      	ite	ne
   1753e:	2301      	movne	r3, #1
   17540:	2300      	moveq	r3, #0
   17542:	f88a 3000 	strb.w	r3, [sl]
    return 0;
   17546:	2000      	movs	r0, #0
   17548:	e065      	b.n	17616 <conf_value_from_str+0x140>
            if (val < INT8_MIN || val > INT8_MAX) {
   1754a:	f112 0680 	adds.w	r6, r2, #128	; 0x80
   1754e:	f143 0700 	adc.w	r7, r3, #0
   17552:	2f00      	cmp	r7, #0
   17554:	bf08      	it	eq
   17556:	f5b6 7f80 	cmpeq.w	r6, #256	; 0x100
   1755a:	d267      	bcs.n	1762c <conf_value_from_str+0x156>
            *(int8_t *)vp = val;
   1755c:	f88a 2000 	strb.w	r2, [sl]
    return 0;
   17560:	2000      	movs	r0, #0
   17562:	e058      	b.n	17616 <conf_value_from_str+0x140>
            if (val < INT16_MIN || val > INT16_MAX) {
   17564:	f512 4800 	adds.w	r8, r2, #32768	; 0x8000
   17568:	f143 0900 	adc.w	r9, r3, #0
   1756c:	f1b9 0f00 	cmp.w	r9, #0
   17570:	bf08      	it	eq
   17572:	f5b8 3f80 	cmpeq.w	r8, #65536	; 0x10000
   17576:	d25b      	bcs.n	17630 <conf_value_from_str+0x15a>
            *(int16_t *)vp = val;
   17578:	f8aa 2000 	strh.w	r2, [sl]
    return 0;
   1757c:	2000      	movs	r0, #0
   1757e:	e04a      	b.n	17616 <conf_value_from_str+0x140>
            if (val < INT32_MIN || val > INT32_MAX) {
   17580:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
   17584:	9100      	str	r1, [sp, #0]
   17586:	f143 0100 	adc.w	r1, r3, #0
   1758a:	9101      	str	r1, [sp, #4]
   1758c:	e9dd 0100 	ldrd	r0, r1, [sp]
   17590:	2901      	cmp	r1, #1
   17592:	bf08      	it	eq
   17594:	2800      	cmpeq	r0, #0
   17596:	d24d      	bcs.n	17634 <conf_value_from_str+0x15e>
            *(int32_t *)vp = val;
   17598:	f8ca 2000 	str.w	r2, [sl]
    return 0;
   1759c:	2000      	movs	r0, #0
   1759e:	e03a      	b.n	17616 <conf_value_from_str+0x140>
        uval = strtoull(val_str, &eptr, 0);
   175a0:	2200      	movs	r2, #0
   175a2:	a903      	add	r1, sp, #12
   175a4:	f01a ff50 	bl	32448 <strtoull>
   175a8:	4602      	mov	r2, r0
   175aa:	460b      	mov	r3, r1
        if (*eptr != '\0') {
   175ac:	9903      	ldr	r1, [sp, #12]
   175ae:	7809      	ldrb	r1, [r1, #0]
   175b0:	2900      	cmp	r1, #0
   175b2:	d141      	bne.n	17638 <conf_value_from_str+0x162>
        if (type == CONF_UINT8) {
   175b4:	2c0b      	cmp	r4, #11
   175b6:	d007      	beq.n	175c8 <conf_value_from_str+0xf2>
        } else if (type == CONF_UINT16) {
   175b8:	2c0c      	cmp	r4, #12
   175ba:	d00e      	beq.n	175da <conf_value_from_str+0x104>
        } else if (type == CONF_UINT32) {
   175bc:	2c0d      	cmp	r4, #13
   175be:	d015      	beq.n	175ec <conf_value_from_str+0x116>
            *(uint64_t *)vp = uval;
   175c0:	e9ca 2300 	strd	r2, r3, [sl]
    return 0;
   175c4:	2000      	movs	r0, #0
   175c6:	e026      	b.n	17616 <conf_value_from_str+0x140>
            if (uval > UINT8_MAX) {
   175c8:	2b00      	cmp	r3, #0
   175ca:	bf08      	it	eq
   175cc:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   175d0:	d234      	bcs.n	1763c <conf_value_from_str+0x166>
            *(uint8_t *)vp = uval;
   175d2:	f88a 2000 	strb.w	r2, [sl]
    return 0;
   175d6:	2000      	movs	r0, #0
   175d8:	e01d      	b.n	17616 <conf_value_from_str+0x140>
            if (uval > UINT16_MAX) {
   175da:	2b00      	cmp	r3, #0
   175dc:	bf08      	it	eq
   175de:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   175e2:	d22d      	bcs.n	17640 <conf_value_from_str+0x16a>
            *(uint16_t *)vp = uval;
   175e4:	f8aa 2000 	strh.w	r2, [sl]
    return 0;
   175e8:	2000      	movs	r0, #0
   175ea:	e014      	b.n	17616 <conf_value_from_str+0x140>
            if (uval > UINT32_MAX) {
   175ec:	2b01      	cmp	r3, #1
   175ee:	bf08      	it	eq
   175f0:	2a00      	cmpeq	r2, #0
   175f2:	d227      	bcs.n	17644 <conf_value_from_str+0x16e>
            *(uint32_t *)vp = uval;
   175f4:	f8ca 2000 	str.w	r2, [sl]
    return 0;
   175f8:	2000      	movs	r0, #0
   175fa:	e00c      	b.n	17616 <conf_value_from_str+0x140>
        val = strlen(val_str);
   175fc:	f7ff faa3 	bl	16b46 <strlen>
   17600:	2100      	movs	r1, #0
        if (val + 1 > maxlen) {
   17602:	17eb      	asrs	r3, r5, #31
   17604:	42a8      	cmp	r0, r5
   17606:	eb71 0303 	sbcs.w	r3, r1, r3
   1760a:	da1d      	bge.n	17648 <conf_value_from_str+0x172>
        strcpy(vp, val_str);
   1760c:	4659      	mov	r1, fp
   1760e:	4650      	mov	r0, sl
   17610:	f01a fedc 	bl	323cc <strcpy>
    return 0;
   17614:	2000      	movs	r0, #0
}
   17616:	b005      	add	sp, #20
   17618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return OS_INVALID_PARM;
   1761c:	2003      	movs	r0, #3
}
   1761e:	4770      	bx	lr
    if (!val_str) {
   17620:	2003      	movs	r0, #3
   17622:	e7f8      	b.n	17616 <conf_value_from_str+0x140>
    return OS_INVALID_PARM;
   17624:	2003      	movs	r0, #3
   17626:	e7f6      	b.n	17616 <conf_value_from_str+0x140>
   17628:	2003      	movs	r0, #3
   1762a:	e7f4      	b.n	17616 <conf_value_from_str+0x140>
   1762c:	2003      	movs	r0, #3
   1762e:	e7f2      	b.n	17616 <conf_value_from_str+0x140>
   17630:	2003      	movs	r0, #3
   17632:	e7f0      	b.n	17616 <conf_value_from_str+0x140>
   17634:	2003      	movs	r0, #3
   17636:	e7ee      	b.n	17616 <conf_value_from_str+0x140>
   17638:	2003      	movs	r0, #3
   1763a:	e7ec      	b.n	17616 <conf_value_from_str+0x140>
   1763c:	2003      	movs	r0, #3
   1763e:	e7ea      	b.n	17616 <conf_value_from_str+0x140>
   17640:	2003      	movs	r0, #3
   17642:	e7e8      	b.n	17616 <conf_value_from_str+0x140>
   17644:	2003      	movs	r0, #3
   17646:	e7e6      	b.n	17616 <conf_value_from_str+0x140>
   17648:	2003      	movs	r0, #3
   1764a:	e7e4      	b.n	17616 <conf_value_from_str+0x140>

0001764c <conf_str_from_value>:
{
   1764c:	b530      	push	{r4, r5, lr}
   1764e:	b083      	sub	sp, #12
   17650:	460d      	mov	r5, r1
    if (type == CONF_STRING) {
   17652:	2806      	cmp	r0, #6
   17654:	d046      	beq.n	176e4 <conf_str_from_value+0x98>
   17656:	4614      	mov	r4, r2
   17658:	4619      	mov	r1, r3
    switch (type) {
   1765a:	280a      	cmp	r0, #10
   1765c:	d012      	beq.n	17684 <conf_str_from_value+0x38>
   1765e:	d90d      	bls.n	1767c <conf_str_from_value+0x30>
   17660:	f1a0 020b 	sub.w	r2, r0, #11
   17664:	b2d2      	uxtb	r2, r2
   17666:	2a03      	cmp	r2, #3
   17668:	d841      	bhi.n	176ee <conf_str_from_value+0xa2>
        if (type == CONF_UINT8) {
   1766a:	280b      	cmp	r0, #11
   1766c:	d02a      	beq.n	176c4 <conf_str_from_value+0x78>
        } else if (type == CONF_UINT16) {
   1766e:	280c      	cmp	r0, #12
   17670:	d032      	beq.n	176d8 <conf_str_from_value+0x8c>
        } else if (type == CONF_UINT32) {
   17672:	280d      	cmp	r0, #13
   17674:	d033      	beq.n	176de <conf_str_from_value+0x92>
            uval = *(uint64_t *)vp;
   17676:	e9d5 2300 	ldrd	r2, r3, [r5]
   1767a:	e025      	b.n	176c8 <conf_str_from_value+0x7c>
    switch (type) {
   1767c:	1e82      	subs	r2, r0, #2
   1767e:	b2d2      	uxtb	r2, r2
   17680:	2a03      	cmp	r2, #3
   17682:	d831      	bhi.n	176e8 <conf_str_from_value+0x9c>
        if (type == CONF_BOOL) {
   17684:	280a      	cmp	r0, #10
   17686:	d008      	beq.n	1769a <conf_str_from_value+0x4e>
        } else if (type == CONF_INT8) {
   17688:	2802      	cmp	r0, #2
   1768a:	d010      	beq.n	176ae <conf_str_from_value+0x62>
        } else if (type == CONF_INT16) {
   1768c:	2803      	cmp	r0, #3
   1768e:	d012      	beq.n	176b6 <conf_str_from_value+0x6a>
        } else if (type == CONF_INT32) {
   17690:	2804      	cmp	r0, #4
   17692:	d014      	beq.n	176be <conf_str_from_value+0x72>
            val = *(int64_t *)vp;
   17694:	e9d5 2300 	ldrd	r2, r3, [r5]
   17698:	e001      	b.n	1769e <conf_str_from_value+0x52>
            val = *(bool *)vp;
   1769a:	782a      	ldrb	r2, [r5, #0]
   1769c:	2300      	movs	r3, #0
        snprintf(buf, buf_len, "%lld", val);
   1769e:	e9cd 2300 	strd	r2, r3, [sp]
   176a2:	4a14      	ldr	r2, [pc, #80]	; (176f4 <conf_str_from_value+0xa8>)
   176a4:	4620      	mov	r0, r4
   176a6:	f01b fa32 	bl	32b0e <snprintf>
        return buf;
   176aa:	4620      	mov	r0, r4
   176ac:	e01d      	b.n	176ea <conf_str_from_value+0x9e>
            val = *(int8_t *)vp;
   176ae:	f995 2000 	ldrsb.w	r2, [r5]
   176b2:	17d3      	asrs	r3, r2, #31
   176b4:	e7f3      	b.n	1769e <conf_str_from_value+0x52>
            val = *(int16_t *)vp;
   176b6:	f9b5 2000 	ldrsh.w	r2, [r5]
   176ba:	17d3      	asrs	r3, r2, #31
   176bc:	e7ef      	b.n	1769e <conf_str_from_value+0x52>
            val = *(int32_t *)vp;
   176be:	682a      	ldr	r2, [r5, #0]
   176c0:	17d3      	asrs	r3, r2, #31
   176c2:	e7ec      	b.n	1769e <conf_str_from_value+0x52>
            uval = *(uint8_t *)vp;
   176c4:	782a      	ldrb	r2, [r5, #0]
   176c6:	2300      	movs	r3, #0
        snprintf(buf, buf_len, "%llu", uval);
   176c8:	e9cd 2300 	strd	r2, r3, [sp]
   176cc:	4a0a      	ldr	r2, [pc, #40]	; (176f8 <conf_str_from_value+0xac>)
   176ce:	4620      	mov	r0, r4
   176d0:	f01b fa1d 	bl	32b0e <snprintf>
        return buf;
   176d4:	4620      	mov	r0, r4
   176d6:	e008      	b.n	176ea <conf_str_from_value+0x9e>
            uval = *(uint16_t *)vp;
   176d8:	882a      	ldrh	r2, [r5, #0]
   176da:	2300      	movs	r3, #0
   176dc:	e7f4      	b.n	176c8 <conf_str_from_value+0x7c>
            uval = *(uint32_t *)vp;
   176de:	682a      	ldr	r2, [r5, #0]
   176e0:	2300      	movs	r3, #0
   176e2:	e7f1      	b.n	176c8 <conf_str_from_value+0x7c>
        return vp;
   176e4:	4608      	mov	r0, r1
   176e6:	e000      	b.n	176ea <conf_str_from_value+0x9e>
    switch (type) {
   176e8:	2000      	movs	r0, #0
}
   176ea:	b003      	add	sp, #12
   176ec:	bd30      	pop	{r4, r5, pc}
    switch (type) {
   176ee:	2000      	movs	r0, #0
   176f0:	e7fb      	b.n	176ea <conf_str_from_value+0x9e>
   176f2:	bf00      	nop
   176f4:	00034320 	.word	0x00034320
   176f8:	00034328 	.word	0x00034328

000176fc <conf_str_from_bytes>:
{
   176fc:	b538      	push	{r3, r4, r5, lr}
   176fe:	4615      	mov	r5, r2
    if (BASE64_ENCODE_SIZE(vp_len) > buf_len) {
   17700:	1e4a      	subs	r2, r1, #1
   17702:	4c08      	ldr	r4, [pc, #32]	; (17724 <conf_str_from_bytes+0x28>)
   17704:	fb84 c402 	smull	ip, r4, r4, r2
   17708:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
   1770c:	3401      	adds	r4, #1
   1770e:	ebb3 0f84 	cmp.w	r3, r4, lsl #2
   17712:	db05      	blt.n	17720 <conf_str_from_bytes+0x24>
    base64_encode(vp, vp_len, buf, 1);
   17714:	2301      	movs	r3, #1
   17716:	462a      	mov	r2, r5
   17718:	f016 feaa 	bl	2e470 <base64_encode>
    return buf;
   1771c:	4628      	mov	r0, r5
}
   1771e:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   17720:	2000      	movs	r0, #0
   17722:	e7fc      	b.n	1771e <conf_str_from_bytes+0x22>
   17724:	55555556 	.word	0x55555556

00017728 <conf_export_cb>:
 * Executes a conf_handler's "export" callback and returns the result.
 */
int
conf_export_cb(struct conf_handler *ch, conf_export_func_t export_func,
               conf_export_tgt_t tgt)
{
   17728:	b510      	push	{r4, lr}
   1772a:	4603      	mov	r3, r0
   1772c:	4608      	mov	r0, r1
   1772e:	4611      	mov	r1, r2
    if (ch->ch_ext) {
   17730:	7a1a      	ldrb	r2, [r3, #8]
   17732:	b122      	cbz	r2, 1773e <conf_export_cb+0x16>
        if (ch->ch_export_ext != NULL) {
   17734:	699c      	ldr	r4, [r3, #24]
   17736:	b134      	cbz	r4, 17746 <conf_export_cb+0x1e>
            return ch->ch_export_ext(export_func, tgt, ch->ch_arg);
   17738:	69da      	ldr	r2, [r3, #28]
   1773a:	47a0      	blx	r4
            return ch->ch_export(export_func, tgt);
        }
    }

    return 0;
}
   1773c:	bd10      	pop	{r4, pc}
        if (ch->ch_export != NULL) {
   1773e:	699b      	ldr	r3, [r3, #24]
   17740:	b11b      	cbz	r3, 1774a <conf_export_cb+0x22>
            return ch->ch_export(export_func, tgt);
   17742:	4798      	blx	r3
   17744:	e7fa      	b.n	1773c <conf_export_cb+0x14>
    return 0;
   17746:	2000      	movs	r0, #0
   17748:	e7f8      	b.n	1773c <conf_export_cb+0x14>
   1774a:	2000      	movs	r0, #0
   1774c:	e7f6      	b.n	1773c <conf_export_cb+0x14>

0001774e <conf_set_value>:

int
conf_set_value(char *name, char *val_str)
{
   1774e:	b530      	push	{r4, r5, lr}
   17750:	b08b      	sub	sp, #44	; 0x2c
   17752:	4604      	mov	r4, r0
   17754:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   17756:	f7ff fe69 	bl	1742c <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   1775a:	aa01      	add	r2, sp, #4
   1775c:	a909      	add	r1, sp, #36	; 0x24
   1775e:	4620      	mov	r0, r4
   17760:	f7ff feae 	bl	174c0 <conf_parse_and_lookup>
    if (!ch) {
   17764:	b158      	cbz	r0, 1777e <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }

    rc = conf_set_cb(ch, name_argc - 1, &name_argv[1], val_str);
   17766:	462b      	mov	r3, r5
   17768:	aa02      	add	r2, sp, #8
   1776a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1776c:	3901      	subs	r1, #1
   1776e:	f7ff fe0a 	bl	17386 <conf_set_cb>
   17772:	4604      	mov	r4, r0

out:
    conf_unlock();
   17774:	f7ff fe64 	bl	17440 <conf_unlock>
    return rc;
}
   17778:	4620      	mov	r0, r4
   1777a:	b00b      	add	sp, #44	; 0x2c
   1777c:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   1777e:	2403      	movs	r4, #3
   17780:	e7f8      	b.n	17774 <conf_set_value+0x26>

00017782 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
   17782:	b570      	push	{r4, r5, r6, lr}
   17784:	b08c      	sub	sp, #48	; 0x30
   17786:	4604      	mov	r4, r0
   17788:	460d      	mov	r5, r1
   1778a:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
   1778c:	f7ff fe4e 	bl	1742c <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   17790:	aa03      	add	r2, sp, #12
   17792:	a90b      	add	r1, sp, #44	; 0x2c
   17794:	4620      	mov	r0, r4
   17796:	f7ff fe93 	bl	174c0 <conf_parse_and_lookup>
    if (!ch) {
   1779a:	4604      	mov	r4, r0
   1779c:	b138      	cbz	r0, 177ae <conf_get_value+0x2c>
        goto out;
    }

    rval = conf_get_cb(ch, name_argc - 1, &name_argv[1], buf, buf_len);
   1779e:	9600      	str	r6, [sp, #0]
   177a0:	462b      	mov	r3, r5
   177a2:	aa04      	add	r2, sp, #16
   177a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   177a6:	3901      	subs	r1, #1
   177a8:	f7ff fdd4 	bl	17354 <conf_get_cb>
   177ac:	4604      	mov	r4, r0

out:
    conf_unlock();
   177ae:	f7ff fe47 	bl	17440 <conf_unlock>
    return rval;
}
   177b2:	4620      	mov	r0, r4
   177b4:	b00c      	add	sp, #48	; 0x30
   177b6:	bd70      	pop	{r4, r5, r6, pc}

000177b8 <conf_commit>:


int
conf_commit(char *name)
{
   177b8:	b530      	push	{r4, r5, lr}
   177ba:	b08b      	sub	sp, #44	; 0x2c
   177bc:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   177be:	f7ff fe35 	bl	1742c <conf_lock>
    if (name) {
   177c2:	b16c      	cbz	r4, 177e0 <conf_commit+0x28>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   177c4:	aa01      	add	r2, sp, #4
   177c6:	a909      	add	r1, sp, #36	; 0x24
   177c8:	4620      	mov	r0, r4
   177ca:	f7ff fe79 	bl	174c0 <conf_parse_and_lookup>
        if (!ch) {
   177ce:	b1c0      	cbz	r0, 17802 <conf_commit+0x4a>
            rc = OS_INVALID_PARM;
            goto out;
        }
        rc = conf_commit_cb(ch);
   177d0:	f7ff fded 	bl	173ae <conf_commit_cb>
   177d4:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   177d6:	f7ff fe33 	bl	17440 <conf_unlock>
    return rc;
}
   177da:	4628      	mov	r0, r5
   177dc:	b00b      	add	sp, #44	; 0x2c
   177de:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   177e0:	4b09      	ldr	r3, [pc, #36]	; (17808 <conf_commit+0x50>)
   177e2:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   177e4:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   177e6:	e000      	b.n	177ea <conf_commit+0x32>
   177e8:	6824      	ldr	r4, [r4, #0]
   177ea:	2c00      	cmp	r4, #0
   177ec:	d0f3      	beq.n	177d6 <conf_commit+0x1e>
            if (ch->ch_commit) {
   177ee:	6963      	ldr	r3, [r4, #20]
   177f0:	2b00      	cmp	r3, #0
   177f2:	d0f9      	beq.n	177e8 <conf_commit+0x30>
                rc2 = conf_commit_cb(ch);
   177f4:	4620      	mov	r0, r4
   177f6:	f7ff fdda 	bl	173ae <conf_commit_cb>
                if (!rc) {
   177fa:	2d00      	cmp	r5, #0
   177fc:	d1f4      	bne.n	177e8 <conf_commit+0x30>
                    rc = rc2;
   177fe:	4605      	mov	r5, r0
   17800:	e7f2      	b.n	177e8 <conf_commit+0x30>
            rc = OS_INVALID_PARM;
   17802:	2503      	movs	r5, #3
   17804:	e7e7      	b.n	177d6 <conf_commit+0x1e>
   17806:	bf00      	nop
   17808:	10001a64 	.word	0x10001a64

0001780c <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
   1780c:	b500      	push	{lr}
   1780e:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
   17810:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
   17812:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
   17814:	466b      	mov	r3, sp
   17816:	4a05      	ldr	r2, [pc, #20]	; (1782c <conf_fcb_load+0x20>)
   17818:	2100      	movs	r1, #0
   1781a:	3008      	adds	r0, #8
   1781c:	f018 fc1c 	bl	30058 <fcb_walk>
    if (rc) {
   17820:	b910      	cbnz	r0, 17828 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
   17822:	b003      	add	sp, #12
   17824:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
   17828:	2002      	movs	r0, #2
   1782a:	e7fa      	b.n	17822 <conf_fcb_load+0x16>
   1782c:	00017831 	.word	0x00017831

00017830 <conf_fcb_load_cb>:
{
   17830:	b530      	push	{r4, r5, lr}
   17832:	b0db      	sub	sp, #364	; 0x16c
   17834:	460d      	mov	r5, r1
    len = loc->fe_data_len;
   17836:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
   17838:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
   1783c:	d301      	bcc.n	17842 <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
   1783e:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
   17842:	4623      	mov	r3, r4
   17844:	aa02      	add	r2, sp, #8
   17846:	6881      	ldr	r1, [r0, #8]
   17848:	6800      	ldr	r0, [r0, #0]
   1784a:	f001 f95b 	bl	18b04 <flash_area_read>
    if (rc) {
   1784e:	b110      	cbz	r0, 17856 <conf_fcb_load_cb+0x26>
}
   17850:	2000      	movs	r0, #0
   17852:	b05b      	add	sp, #364	; 0x16c
   17854:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
   17856:	a802      	add	r0, sp, #8
   17858:	2300      	movs	r3, #0
   1785a:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
   1785c:	466a      	mov	r2, sp
   1785e:	a901      	add	r1, sp, #4
   17860:	f000 f910 	bl	17a84 <conf_line_parse>
    if (rc) {
   17864:	2800      	cmp	r0, #0
   17866:	d1f3      	bne.n	17850 <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
   17868:	682b      	ldr	r3, [r5, #0]
   1786a:	686a      	ldr	r2, [r5, #4]
   1786c:	9900      	ldr	r1, [sp, #0]
   1786e:	9801      	ldr	r0, [sp, #4]
   17870:	4798      	blx	r3
    return 0;
   17872:	e7ed      	b.n	17850 <conf_fcb_load_cb+0x20>

00017874 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
   17874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17876:	4604      	mov	r4, r0
   17878:	460d      	mov	r5, r1
   1787a:	4617      	mov	r7, r2
   1787c:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
   1787e:	8983      	ldrh	r3, [r0, #12]
   17880:	460a      	mov	r2, r1
   17882:	6881      	ldr	r1, [r0, #8]
   17884:	6800      	ldr	r0, [r0, #0]
   17886:	f001 f93d 	bl	18b04 <flash_area_read>
    if (rc) {
   1788a:	b100      	cbz	r0, 1788e <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
   1788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
   1788e:	89a3      	ldrh	r3, [r4, #12]
   17890:	2200      	movs	r2, #0
   17892:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
   17894:	4632      	mov	r2, r6
   17896:	4639      	mov	r1, r7
   17898:	4628      	mov	r0, r5
   1789a:	f000 f8f3 	bl	17a84 <conf_line_parse>
    return rc;
   1789e:	e7f5      	b.n	1788c <conf_fcb_var_read+0x18>

000178a0 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
   178a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   178a2:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
   178a6:	4604      	mov	r4, r0
   178a8:	460d      	mov	r5, r1
   178aa:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
   178ac:	f018 f9c7 	bl	2fc3e <fcb_append_to_scratch>
    if (rc) {
   178b0:	2800      	cmp	r0, #0
   178b2:	d15d      	bne.n	17970 <conf_fcb_compress_internal+0xd0>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
   178b4:	2300      	movs	r3, #0
   178b6:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
   178b8:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
   178ba:	a908      	add	r1, sp, #32
   178bc:	4620      	mov	r0, r4
   178be:	f018 fb75 	bl	2ffac <fcb_getnext>
   178c2:	2800      	cmp	r0, #0
   178c4:	d151      	bne.n	1796a <conf_fcb_compress_internal+0xca>
        if (loc1.fe_area != fcb->f_oldest) {
   178c6:	9a08      	ldr	r2, [sp, #32]
   178c8:	69a3      	ldr	r3, [r4, #24]
   178ca:	429a      	cmp	r2, r3
   178cc:	d14d      	bne.n	1796a <conf_fcb_compress_internal+0xca>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
   178ce:	ab02      	add	r3, sp, #8
   178d0:	aa03      	add	r2, sp, #12
   178d2:	a964      	add	r1, sp, #400	; 0x190
   178d4:	a808      	add	r0, sp, #32
   178d6:	f7ff ffcd 	bl	17874 <conf_fcb_var_read>
        if (rc) {
   178da:	2800      	cmp	r0, #0
   178dc:	d1ed      	bne.n	178ba <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
   178de:	9b02      	ldr	r3, [sp, #8]
   178e0:	2b00      	cmp	r3, #0
   178e2:	d0ea      	beq.n	178ba <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
   178e4:	af04      	add	r7, sp, #16
   178e6:	ab08      	add	r3, sp, #32
   178e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   178ea:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
   178ee:	a904      	add	r1, sp, #16
   178f0:	4620      	mov	r0, r4
   178f2:	f018 fb5b 	bl	2ffac <fcb_getnext>
   178f6:	b978      	cbnz	r0, 17918 <conf_fcb_compress_internal+0x78>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
   178f8:	466b      	mov	r3, sp
   178fa:	aa01      	add	r2, sp, #4
   178fc:	a90c      	add	r1, sp, #48	; 0x30
   178fe:	a804      	add	r0, sp, #16
   17900:	f7ff ffb8 	bl	17874 <conf_fcb_var_read>
            if (rc) {
   17904:	2800      	cmp	r0, #0
   17906:	d1f2      	bne.n	178ee <conf_fcb_compress_internal+0x4e>
                continue;
            }
            if (!strcmp(name1, name2)) {
   17908:	9901      	ldr	r1, [sp, #4]
   1790a:	9803      	ldr	r0, [sp, #12]
   1790c:	f7ff f90f 	bl	16b2e <strcmp>
   17910:	4603      	mov	r3, r0
   17912:	2800      	cmp	r0, #0
   17914:	d1eb      	bne.n	178ee <conf_fcb_compress_internal+0x4e>
   17916:	e000      	b.n	1791a <conf_fcb_compress_internal+0x7a>
        copy = 1;
   17918:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
   1791a:	2b00      	cmp	r3, #0
   1791c:	d0cd      	beq.n	178ba <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
   1791e:	b12d      	cbz	r5, 1792c <conf_fcb_compress_internal+0x8c>
            if (copy_or_not(name1, val1, cn_arg)) {
   17920:	4632      	mov	r2, r6
   17922:	9902      	ldr	r1, [sp, #8]
   17924:	9803      	ldr	r0, [sp, #12]
   17926:	47a8      	blx	r5
   17928:	2800      	cmp	r0, #0
   1792a:	d1c6      	bne.n	178ba <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
   1792c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   17930:	aa64      	add	r2, sp, #400	; 0x190
   17932:	990a      	ldr	r1, [sp, #40]	; 0x28
   17934:	9808      	ldr	r0, [sp, #32]
   17936:	f001 f8e5 	bl	18b04 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
   1793a:	2800      	cmp	r0, #0
   1793c:	d1bd      	bne.n	178ba <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
   1793e:	aa04      	add	r2, sp, #16
   17940:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
   17944:	4620      	mov	r0, r4
   17946:	f018 f993 	bl	2fc70 <fcb_append>
        if (rc) {
   1794a:	2800      	cmp	r0, #0
   1794c:	d1b5      	bne.n	178ba <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
   1794e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   17952:	aa64      	add	r2, sp, #400	; 0x190
   17954:	9906      	ldr	r1, [sp, #24]
   17956:	9804      	ldr	r0, [sp, #16]
   17958:	f001 f8e7 	bl	18b2a <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
   1795c:	2800      	cmp	r0, #0
   1795e:	d1ac      	bne.n	178ba <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
   17960:	a904      	add	r1, sp, #16
   17962:	4620      	mov	r0, r4
   17964:	f018 fa01 	bl	2fd6a <fcb_append_finish>
   17968:	e7a7      	b.n	178ba <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
   1796a:	4620      	mov	r0, r4
   1796c:	f018 fb38 	bl	2ffe0 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
   17970:	f50d 7d3d 	add.w	sp, sp, #756	; 0x2f4
   17974:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017976 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
   17976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1797a:	b084      	sub	sp, #16
   1797c:	4606      	mov	r6, r0
   1797e:	4688      	mov	r8, r1
   17980:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
   17982:	2500      	movs	r5, #0
   17984:	e005      	b.n	17992 <conf_fcb_append+0x1c>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
   17986:	2200      	movs	r2, #0
   17988:	4611      	mov	r1, r2
   1798a:	4630      	mov	r0, r6
   1798c:	f7ff ff88 	bl	178a0 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
   17990:	3501      	adds	r5, #1
   17992:	2d09      	cmp	r5, #9
   17994:	dc0d      	bgt.n	179b2 <conf_fcb_append+0x3c>
        rc = fcb_append(fcb, len, &loc);
   17996:	466a      	mov	r2, sp
   17998:	b2b9      	uxth	r1, r7
   1799a:	4630      	mov	r0, r6
   1799c:	f018 f968 	bl	2fc70 <fcb_append>
   179a0:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
   179a2:	f110 0f04 	cmn.w	r0, #4
   179a6:	d104      	bne.n	179b2 <conf_fcb_append+0x3c>
        if (fcb->f_scratch_cnt == 0) {
   179a8:	79b3      	ldrb	r3, [r6, #6]
   179aa:	2b00      	cmp	r3, #0
   179ac:	d1eb      	bne.n	17986 <conf_fcb_append+0x10>
            return OS_ENOMEM;
   179ae:	2401      	movs	r4, #1
   179b0:	e00c      	b.n	179cc <conf_fcb_append+0x56>
    }
    if (rc) {
   179b2:	b97c      	cbnz	r4, 179d4 <conf_fcb_append+0x5e>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
   179b4:	463b      	mov	r3, r7
   179b6:	4642      	mov	r2, r8
   179b8:	9902      	ldr	r1, [sp, #8]
   179ba:	9800      	ldr	r0, [sp, #0]
   179bc:	f001 f8b5 	bl	18b2a <flash_area_write>
    if (rc) {
   179c0:	4604      	mov	r4, r0
   179c2:	b948      	cbnz	r0, 179d8 <conf_fcb_append+0x62>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
   179c4:	4669      	mov	r1, sp
   179c6:	4630      	mov	r0, r6
   179c8:	f018 f9cf 	bl	2fd6a <fcb_append_finish>
    return OS_OK;
}
   179cc:	4620      	mov	r0, r4
   179ce:	b004      	add	sp, #16
   179d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return OS_EINVAL;
   179d4:	2402      	movs	r4, #2
   179d6:	e7f9      	b.n	179cc <conf_fcb_append+0x56>
        return OS_EINVAL;
   179d8:	2402      	movs	r4, #2
   179da:	e7f7      	b.n	179cc <conf_fcb_append+0x56>

000179dc <conf_fcb_src>:
{
   179dc:	b570      	push	{r4, r5, r6, lr}
   179de:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
   179e0:	2301      	movs	r3, #1
   179e2:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
   179e4:	7b43      	ldrb	r3, [r0, #13]
   179e6:	2b01      	cmp	r3, #1
   179e8:	d902      	bls.n	179f0 <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
   179ea:	2301      	movs	r3, #1
   179ec:	7383      	strb	r3, [r0, #14]
   179ee:	e007      	b.n	17a00 <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
   179f0:	2300      	movs	r3, #0
   179f2:	7383      	strb	r3, [r0, #14]
   179f4:	e004      	b.n	17a00 <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
   179f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   179f8:	6882      	ldr	r2, [r0, #8]
   179fa:	2100      	movs	r1, #0
   179fc:	f001 f8a8 	bl	18b50 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
   17a00:	f104 0508 	add.w	r5, r4, #8
   17a04:	4628      	mov	r0, r5
   17a06:	f018 f833 	bl	2fa70 <fcb_init>
        if (rc) {
   17a0a:	4606      	mov	r6, r0
   17a0c:	b968      	cbnz	r0, 17a2a <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
   17a0e:	7ba3      	ldrb	r3, [r4, #14]
   17a10:	b123      	cbz	r3, 17a1c <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   17a12:	4628      	mov	r0, r5
   17a14:	f017 ffa9 	bl	2f96a <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
   17a18:	2800      	cmp	r0, #0
   17a1a:	ddec      	ble.n	179f6 <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
   17a1c:	4b04      	ldr	r3, [pc, #16]	; (17a30 <conf_fcb_src+0x54>)
   17a1e:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
   17a20:	4620      	mov	r0, r4
   17a22:	f7ff fbd9 	bl	171d8 <conf_src_register>
}
   17a26:	4630      	mov	r0, r6
   17a28:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
   17a2a:	2603      	movs	r6, #3
   17a2c:	e7fb      	b.n	17a26 <conf_fcb_src+0x4a>
   17a2e:	bf00      	nop
   17a30:	1000020c 	.word	0x1000020c

00017a34 <conf_fcb_dst>:
{
   17a34:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
   17a36:	4b03      	ldr	r3, [pc, #12]	; (17a44 <conf_fcb_dst+0x10>)
   17a38:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
   17a3a:	f7ff fbe1 	bl	17200 <conf_dst_register>
}
   17a3e:	2000      	movs	r0, #0
   17a40:	bd08      	pop	{r3, pc}
   17a42:	bf00      	nop
   17a44:	1000020c 	.word	0x1000020c

00017a48 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
   17a48:	b199      	cbz	r1, 17a72 <conf_fcb_kv_save+0x2a>
{
   17a4a:	b510      	push	{r4, lr}
   17a4c:	b0d8      	sub	sp, #352	; 0x160
   17a4e:	4604      	mov	r4, r0
   17a50:	4613      	mov	r3, r2
   17a52:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
   17a54:	f44f 71b0 	mov.w	r1, #352	; 0x160
   17a58:	4668      	mov	r0, sp
   17a5a:	f000 f85f 	bl	17b1c <conf_line_make>
   17a5e:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
   17a60:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
   17a64:	d807      	bhi.n	17a76 <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
   17a66:	4669      	mov	r1, sp
   17a68:	4620      	mov	r0, r4
   17a6a:	f7ff ff84 	bl	17976 <conf_fcb_append>
}
   17a6e:	b058      	add	sp, #352	; 0x160
   17a70:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
   17a72:	2003      	movs	r0, #3
}
   17a74:	4770      	bx	lr
        return OS_INVALID_PARM;
   17a76:	2003      	movs	r0, #3
   17a78:	e7f9      	b.n	17a6e <conf_fcb_kv_save+0x26>

00017a7a <conf_fcb_save>:
{
   17a7a:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
   17a7c:	3008      	adds	r0, #8
   17a7e:	f7ff ffe3 	bl	17a48 <conf_fcb_kv_save>
}
   17a82:	bd08      	pop	{r3, pc}

00017a84 <conf_line_parse>:
#include "config/config.h"
#include "config_priv.h"

int
conf_line_parse(char *buf, char **namep, char **valp)
{
   17a84:	b410      	push	{r4}
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
   17a86:	2400      	movs	r4, #0
   17a88:	6014      	str	r4, [r2, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   17a8a:	e017      	b.n	17abc <conf_line_parse+0x38>
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   17a8c:	2b20      	cmp	r3, #32
   17a8e:	d014      	beq.n	17aba <conf_line_parse+0x36>
   17a90:	2b0a      	cmp	r3, #10
   17a92:	d012      	beq.n	17aba <conf_line_parse+0x36>
   17a94:	2b09      	cmp	r3, #9
   17a96:	d010      	beq.n	17aba <conf_line_parse+0x36>
   17a98:	2b0d      	cmp	r3, #13
   17a9a:	d00e      	beq.n	17aba <conf_line_parse+0x36>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
   17a9c:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
   17a9e:	2401      	movs	r4, #1
   17aa0:	e00b      	b.n	17aba <conf_line_parse+0x36>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
   17aa2:	2b3d      	cmp	r3, #61	; 0x3d
   17aa4:	d01a      	beq.n	17adc <conf_line_parse+0x58>
   17aa6:	2b20      	cmp	r3, #32
   17aa8:	d005      	beq.n	17ab6 <conf_line_parse+0x32>
   17aaa:	2b0a      	cmp	r3, #10
   17aac:	d003      	beq.n	17ab6 <conf_line_parse+0x32>
   17aae:	2b09      	cmp	r3, #9
   17ab0:	d001      	beq.n	17ab6 <conf_line_parse+0x32>
   17ab2:	2b0d      	cmp	r3, #13
   17ab4:	d101      	bne.n	17aba <conf_line_parse+0x36>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
   17ab6:	2300      	movs	r3, #0
   17ab8:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
   17aba:	3001      	adds	r0, #1
   17abc:	7803      	ldrb	r3, [r0, #0]
   17abe:	b313      	cbz	r3, 17b06 <conf_line_parse+0x82>
        switch (state) {
   17ac0:	2c03      	cmp	r4, #3
   17ac2:	d8fa      	bhi.n	17aba <conf_line_parse+0x36>
   17ac4:	f20f 0c04 	addw	ip, pc, #4
   17ac8:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   17acc:	00017a8d 	.word	0x00017a8d
   17ad0:	00017aa3 	.word	0x00017aa3
   17ad4:	00017ae5 	.word	0x00017ae5
   17ad8:	00017afb 	.word	0x00017afb
                *cp = '\0';
   17adc:	2300      	movs	r3, #0
   17ade:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
   17ae0:	2402      	movs	r4, #2
   17ae2:	e7ea      	b.n	17aba <conf_line_parse+0x36>
   17ae4:	2b20      	cmp	r3, #32
   17ae6:	d0e8      	beq.n	17aba <conf_line_parse+0x36>
   17ae8:	2b0a      	cmp	r3, #10
   17aea:	d0e6      	beq.n	17aba <conf_line_parse+0x36>
   17aec:	2b09      	cmp	r3, #9
   17aee:	d0e4      	beq.n	17aba <conf_line_parse+0x36>
   17af0:	2b0d      	cmp	r3, #13
   17af2:	d0e2      	beq.n	17aba <conf_line_parse+0x36>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
   17af4:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
   17af6:	2403      	movs	r4, #3
   17af8:	e7df      	b.n	17aba <conf_line_parse+0x36>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   17afa:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
   17afc:	2b5e      	cmp	r3, #94	; 0x5e
   17afe:	d9dc      	bls.n	17aba <conf_line_parse+0x36>
                *cp = '\0';
   17b00:	2300      	movs	r3, #0
   17b02:	7003      	strb	r3, [r0, #0]
   17b04:	e7d9      	b.n	17aba <conf_line_parse+0x36>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
   17b06:	3c02      	subs	r4, #2
   17b08:	b2e4      	uxtb	r4, r4
   17b0a:	2c01      	cmp	r4, #1
   17b0c:	d802      	bhi.n	17b14 <conf_line_parse+0x90>
        return 0;
   17b0e:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
   17b10:	bc10      	pop	{r4}
   17b12:	4770      	bx	lr
        return -1;
   17b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b18:	e7fa      	b.n	17b10 <conf_line_parse+0x8c>
   17b1a:	bf00      	nop

00017b1c <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
   17b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17b20:	4606      	mov	r6, r0
   17b22:	4689      	mov	r9, r1
   17b24:	4690      	mov	r8, r2
   17b26:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
   17b28:	4610      	mov	r0, r2
   17b2a:	f7ff f80c 	bl	16b46 <strlen>
   17b2e:	4605      	mov	r5, r0
    if (value) {
   17b30:	b1e7      	cbz	r7, 17b6c <conf_line_make+0x50>
        vlen = strlen(value);
   17b32:	4638      	mov	r0, r7
   17b34:	f7ff f807 	bl	16b46 <strlen>
   17b38:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
   17b3a:	1963      	adds	r3, r4, r5
   17b3c:	3301      	adds	r3, #1
   17b3e:	454b      	cmp	r3, r9
   17b40:	da16      	bge.n	17b70 <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
   17b42:	462a      	mov	r2, r5
   17b44:	4641      	mov	r1, r8
   17b46:	4630      	mov	r0, r6
   17b48:	f7fe ffb0 	bl	16aac <memcpy>
    off = nlen;
    dst[off++] = '=';
   17b4c:	f105 0801 	add.w	r8, r5, #1
   17b50:	233d      	movs	r3, #61	; 0x3d
   17b52:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
   17b54:	4622      	mov	r2, r4
   17b56:	4639      	mov	r1, r7
   17b58:	eb06 0008 	add.w	r0, r6, r8
   17b5c:	f7fe ffa6 	bl	16aac <memcpy>
    off += vlen;
   17b60:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
   17b64:	2300      	movs	r3, #0
   17b66:	5433      	strb	r3, [r6, r0]

    return off;
}
   17b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
   17b6c:	2400      	movs	r4, #0
   17b6e:	e7e4      	b.n	17b3a <conf_line_make+0x1e>
        return -1;
   17b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b74:	e7f8      	b.n	17b68 <conf_line_make+0x4c>
	...

00017b78 <conf_mgmt_write>:
#endif

#if CONFIG_MGMT_WRITE
static int
conf_mgmt_write(struct mgmt_ctxt *cb)
{
   17b78:	b570      	push	{r4, r5, r6, lr}
   17b7a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
   17b7e:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
   17b80:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
   17b84:	2400      	movs	r4, #0
   17b86:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
   17b8a:	22bc      	movs	r2, #188	; 0xbc
   17b8c:	4621      	mov	r1, r4
   17b8e:	a801      	add	r0, sp, #4
   17b90:	f7fe ffb1 	bl	16af6 <memset>
   17b94:	4b23      	ldr	r3, [pc, #140]	; (17c24 <conf_mgmt_write+0xac>)
   17b96:	9300      	str	r3, [sp, #0]
   17b98:	2304      	movs	r3, #4
   17b9a:	f88d 3004 	strb.w	r3, [sp, #4]
   17b9e:	aa72      	add	r2, sp, #456	; 0x1c8
   17ba0:	9202      	str	r2, [sp, #8]
   17ba2:	2240      	movs	r2, #64	; 0x40
   17ba4:	920a      	str	r2, [sp, #40]	; 0x28
   17ba6:	4a20      	ldr	r2, [pc, #128]	; (17c28 <conf_mgmt_write+0xb0>)
   17ba8:	920c      	str	r2, [sp, #48]	; 0x30
   17baa:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   17bae:	ab32      	add	r3, sp, #200	; 0xc8
   17bb0:	930e      	str	r3, [sp, #56]	; 0x38
   17bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
   17bb6:	9216      	str	r2, [sp, #88]	; 0x58
   17bb8:	4a1c      	ldr	r2, [pc, #112]	; (17c2c <conf_mgmt_write+0xb4>)
   17bba:	9218      	str	r2, [sp, #96]	; 0x60
   17bbc:	2205      	movs	r2, #5
   17bbe:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
   17bc2:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
   17bc4:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
   17bc8:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
   17bcc:	4669      	mov	r1, sp
   17bce:	f105 001c 	add.w	r0, r5, #28
   17bd2:	f003 f814 	bl	1abfe <cbor_read_object>
    if (rc) {
   17bd6:	b9f8      	cbnz	r0, 17c18 <conf_mgmt_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
   17bd8:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
   17bdc:	b13b      	cbz	r3, 17bee <conf_mgmt_write+0x76>
        if (val_str[0] != '\0') {
   17bde:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
   17be2:	b173      	cbz	r3, 17c02 <conf_mgmt_write+0x8a>
            rc = conf_set_value(name_str, val_str);
   17be4:	a932      	add	r1, sp, #200	; 0xc8
   17be6:	a872      	add	r0, sp, #456	; 0x1c8
   17be8:	f7ff fdb1 	bl	1774e <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
   17bec:	b9b0      	cbnz	r0, 17c1c <conf_mgmt_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
   17bee:	2000      	movs	r0, #0
   17bf0:	f7ff fde2 	bl	177b8 <conf_commit>
    if (rc) {
   17bf4:	b9a0      	cbnz	r0, 17c20 <conf_mgmt_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
   17bf6:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
   17bfa:	b93b      	cbnz	r3, 17c0c <conf_mgmt_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
   17bfc:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
   17c00:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
   17c02:	2100      	movs	r1, #0
   17c04:	a872      	add	r0, sp, #456	; 0x1c8
   17c06:	f7ff fda2 	bl	1774e <conf_set_value>
   17c0a:	e7ef      	b.n	17bec <conf_mgmt_write+0x74>
        rc = conf_save();
   17c0c:	f7ff fb6c 	bl	172e8 <conf_save>
        if (rc) {
   17c10:	2800      	cmp	r0, #0
   17c12:	d0f3      	beq.n	17bfc <conf_mgmt_write+0x84>
            return MGMT_ERR_EINVAL;
   17c14:	2003      	movs	r0, #3
   17c16:	e7f1      	b.n	17bfc <conf_mgmt_write+0x84>
        return MGMT_ERR_EINVAL;
   17c18:	2003      	movs	r0, #3
   17c1a:	e7ef      	b.n	17bfc <conf_mgmt_write+0x84>
            return MGMT_ERR_EINVAL;
   17c1c:	2003      	movs	r0, #3
   17c1e:	e7ed      	b.n	17bfc <conf_mgmt_write+0x84>
        return MGMT_ERR_EINVAL;
   17c20:	2003      	movs	r0, #3
   17c22:	e7eb      	b.n	17bfc <conf_mgmt_write+0x84>
   17c24:	00035710 	.word	0x00035710
   17c28:	00034330 	.word	0x00034330
   17c2c:	00034334 	.word	0x00034334

00017c30 <conf_mgmt_read>:
{
   17c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c32:	b0e9      	sub	sp, #420	; 0x1a4
   17c34:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
   17c36:	225c      	movs	r2, #92	; 0x5c
   17c38:	2100      	movs	r1, #0
   17c3a:	a801      	add	r0, sp, #4
   17c3c:	f7fe ff5b 	bl	16af6 <memset>
   17c40:	4b18      	ldr	r3, [pc, #96]	; (17ca4 <conf_mgmt_read+0x74>)
   17c42:	9300      	str	r3, [sp, #0]
   17c44:	2304      	movs	r3, #4
   17c46:	f88d 3004 	strb.w	r3, [sp, #4]
   17c4a:	ab58      	add	r3, sp, #352	; 0x160
   17c4c:	9302      	str	r3, [sp, #8]
   17c4e:	2340      	movs	r3, #64	; 0x40
   17c50:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
   17c52:	4669      	mov	r1, sp
   17c54:	f104 001c 	add.w	r0, r4, #28
   17c58:	f002 ffd1 	bl	1abfe <cbor_read_object>
    if (rc) {
   17c5c:	b9e0      	cbnz	r0, 17c98 <conf_mgmt_read+0x68>
   17c5e:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
   17c60:	f44f 7280 	mov.w	r2, #256	; 0x100
   17c64:	a918      	add	r1, sp, #96	; 0x60
   17c66:	a858      	add	r0, sp, #352	; 0x160
   17c68:	f7ff fd8b 	bl	17782 <conf_get_value>
    if (!val) {
   17c6c:	4607      	mov	r7, r0
   17c6e:	b1a8      	cbz	r0, 17c9c <conf_mgmt_read+0x6c>
   17c70:	2203      	movs	r2, #3
   17c72:	490d      	ldr	r1, [pc, #52]	; (17ca8 <conf_mgmt_read+0x78>)
   17c74:	4620      	mov	r0, r4
   17c76:	f016 fe81 	bl	2e97c <cbor_encode_text_string>
   17c7a:	4606      	mov	r6, r0
   17c7c:	4638      	mov	r0, r7
   17c7e:	f7fe ff62 	bl	16b46 <strlen>
   17c82:	4602      	mov	r2, r0
   17c84:	4639      	mov	r1, r7
   17c86:	4620      	mov	r0, r4
   17c88:	f016 fe78 	bl	2e97c <cbor_encode_text_string>
    if (g_err) {
   17c8c:	ea50 0306 	orrs.w	r3, r0, r6
   17c90:	d106      	bne.n	17ca0 <conf_mgmt_read+0x70>
}
   17c92:	4628      	mov	r0, r5
   17c94:	b069      	add	sp, #420	; 0x1a4
   17c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
   17c98:	2503      	movs	r5, #3
   17c9a:	e7fa      	b.n	17c92 <conf_mgmt_read+0x62>
        return MGMT_ERR_EINVAL;
   17c9c:	2503      	movs	r5, #3
   17c9e:	e7f8      	b.n	17c92 <conf_mgmt_read+0x62>
        return MGMT_ERR_ENOMEM;
   17ca0:	2502      	movs	r5, #2
   17ca2:	e7f6      	b.n	17c92 <conf_mgmt_read+0x62>
   17ca4:	00035710 	.word	0x00035710
   17ca8:	00034330 	.word	0x00034330

00017cac <conf_mgmt_register>:
#endif

int
conf_mgmt_register(void)
{
   17cac:	b508      	push	{r3, lr}
     mgmt_register_group(&conf_mgmt_group);
   17cae:	4802      	ldr	r0, [pc, #8]	; (17cb8 <conf_mgmt_register+0xc>)
   17cb0:	f004 f9e4 	bl	1c07c <mgmt_register_group>
     return 0;
}
   17cb4:	2000      	movs	r0, #0
   17cb6:	bd08      	pop	{r3, pc}
   17cb8:	1000021c 	.word	0x1000021c

00017cbc <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   17cbc:	b470      	push	{r4, r5, r6}
    char *p = str;
   17cbe:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   17cc0:	4b10      	ldr	r3, [pc, #64]	; (17d04 <add_ascii_num_with_char+0x48>)
   17cc2:	fba3 5301 	umull	r5, r3, r3, r1
   17cc6:	08db      	lsrs	r3, r3, #3
   17cc8:	461e      	mov	r6, r3
   17cca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17cce:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   17cd2:	4625      	mov	r5, r4
   17cd4:	3401      	adds	r4, #1
   17cd6:	3330      	adds	r3, #48	; 0x30
   17cd8:	702b      	strb	r3, [r5, #0]
        num /= 10;
   17cda:	460b      	mov	r3, r1
   17cdc:	4631      	mov	r1, r6
    } while (num);
   17cde:	2b09      	cmp	r3, #9
   17ce0:	d8ee      	bhi.n	17cc0 <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   17ce2:	462b      	mov	r3, r5
   17ce4:	e005      	b.n	17cf2 <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   17ce6:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   17ce8:	781e      	ldrb	r6, [r3, #0]
   17cea:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   17cee:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   17cf2:	4283      	cmp	r3, r0
   17cf4:	d8f7      	bhi.n	17ce6 <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   17cf6:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   17cf8:	2300      	movs	r3, #0
   17cfa:	7063      	strb	r3, [r4, #1]

    return str;
}
   17cfc:	1ca8      	adds	r0, r5, #2
   17cfe:	bc70      	pop	{r4, r5, r6}
   17d00:	4770      	bx	lr
   17d02:	bf00      	nop
   17d04:	cccccccd 	.word	0xcccccccd

00017d08 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   17d08:	b508      	push	{r3, lr}
    cur = 0;
   17d0a:	2300      	movs	r3, #0
   17d0c:	4a08      	ldr	r2, [pc, #32]	; (17d30 <console_handle_line+0x28>)
   17d0e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   17d10:	4a08      	ldr	r2, [pc, #32]	; (17d34 <console_handle_line+0x2c>)
   17d12:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   17d14:	4b08      	ldr	r3, [pc, #32]	; (17d38 <console_handle_line+0x30>)
   17d16:	6819      	ldr	r1, [r3, #0]
   17d18:	4b08      	ldr	r3, [pc, #32]	; (17d3c <console_handle_line+0x34>)
   17d1a:	6818      	ldr	r0, [r3, #0]
   17d1c:	f7fd fb6f 	bl	153fe <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   17d20:	4b07      	ldr	r3, [pc, #28]	; (17d40 <console_handle_line+0x38>)
   17d22:	681b      	ldr	r3, [r3, #0]
   17d24:	b103      	cbz	r3, 17d28 <console_handle_line+0x20>
        console_compat_rx_cb();
   17d26:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   17d28:	4b03      	ldr	r3, [pc, #12]	; (17d38 <console_handle_line+0x30>)
   17d2a:	2200      	movs	r2, #0
   17d2c:	601a      	str	r2, [r3, #0]
}
   17d2e:	bd08      	pop	{r3, pc}
   17d30:	10001aa4 	.word	0x10001aa4
   17d34:	10001abe 	.word	0x10001abe
   17d38:	10001aa8 	.word	0x10001aa8
   17d3c:	10001ab4 	.word	0x10001ab4
   17d40:	10001a90 	.word	0x10001a90

00017d44 <console_filter_out>:
{
   17d44:	b508      	push	{r3, lr}
    if (g_console_silence) {
   17d46:	4b0b      	ldr	r3, [pc, #44]	; (17d74 <console_filter_out+0x30>)
   17d48:	781b      	ldrb	r3, [r3, #0]
   17d4a:	b95b      	cbnz	r3, 17d64 <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   17d4c:	4b0a      	ldr	r3, [pc, #40]	; (17d78 <console_filter_out+0x34>)
   17d4e:	781b      	ldrb	r3, [r3, #0]
   17d50:	b94b      	cbnz	r3, 17d66 <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   17d52:	280a      	cmp	r0, #10
   17d54:	d00c      	beq.n	17d70 <console_filter_out+0x2c>
   17d56:	280d      	cmp	r0, #13
   17d58:	d008      	beq.n	17d6c <console_filter_out+0x28>
   17d5a:	2201      	movs	r2, #1
   17d5c:	4b07      	ldr	r3, [pc, #28]	; (17d7c <console_filter_out+0x38>)
   17d5e:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   17d60:	f000 fd7c 	bl	1885c <console_out_nolock>
}
   17d64:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   17d66:	f000 fd79 	bl	1885c <console_out_nolock>
   17d6a:	e7fb      	b.n	17d64 <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   17d6c:	2200      	movs	r2, #0
   17d6e:	e7f5      	b.n	17d5c <console_filter_out+0x18>
   17d70:	2200      	movs	r2, #0
   17d72:	e7f3      	b.n	17d5c <console_filter_out+0x18>
   17d74:	10001ab1 	.word	0x10001ab1
   17d78:	10001ab3 	.word	0x10001ab3
   17d7c:	10001a94 	.word	0x10001a94

00017d80 <console_filter_write>:
{
   17d80:	b570      	push	{r4, r5, r6, lr}
   17d82:	4606      	mov	r6, r0
   17d84:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   17d86:	2400      	movs	r4, #0
   17d88:	42ac      	cmp	r4, r5
   17d8a:	da07      	bge.n	17d9c <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   17d8c:	5d30      	ldrb	r0, [r6, r4]
   17d8e:	f7ff ffd9 	bl	17d44 <console_filter_out>
   17d92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17d96:	d001      	beq.n	17d9c <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   17d98:	3401      	adds	r4, #1
   17d9a:	e7f5      	b.n	17d88 <console_filter_write+0x8>
}
   17d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00017da0 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   17da0:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   17da2:	4b0d      	ldr	r3, [pc, #52]	; (17dd8 <console_append_char+0x38>)
   17da4:	881b      	ldrh	r3, [r3, #0]
   17da6:	4a0d      	ldr	r2, [pc, #52]	; (17ddc <console_append_char+0x3c>)
   17da8:	8812      	ldrh	r2, [r2, #0]
   17daa:	4413      	add	r3, r2
   17dac:	2bfe      	cmp	r3, #254	; 0xfe
   17dae:	dc0e      	bgt.n	17dce <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   17db0:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   17db2:	b171      	cbz	r1, 17dd2 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   17db4:	4b0a      	ldr	r3, [pc, #40]	; (17de0 <console_append_char+0x40>)
   17db6:	681b      	ldr	r3, [r3, #0]
   17db8:	b92b      	cbnz	r3, 17dc6 <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   17dba:	4a07      	ldr	r2, [pc, #28]	; (17dd8 <console_append_char+0x38>)
   17dbc:	8813      	ldrh	r3, [r2, #0]
   17dbe:	3301      	adds	r3, #1
   17dc0:	8013      	strh	r3, [r2, #0]
    return 1;
   17dc2:	2001      	movs	r0, #1
}
   17dc4:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   17dc6:	4608      	mov	r0, r1
   17dc8:	f000 fd48 	bl	1885c <console_out_nolock>
        console_switch_to_logs();
   17dcc:	e7f5      	b.n	17dba <console_append_char+0x1a>
        return 0;
   17dce:	2000      	movs	r0, #0
   17dd0:	e7f8      	b.n	17dc4 <console_append_char+0x24>
        return 1;
   17dd2:	2001      	movs	r0, #1
   17dd4:	e7f6      	b.n	17dc4 <console_append_char+0x24>
   17dd6:	bf00      	nop
   17dd8:	10001aa4 	.word	0x10001aa4
   17ddc:	10001abe 	.word	0x10001abe
   17de0:	10000228 	.word	0x10000228

00017de4 <console_write_nolock>:
{
   17de4:	b570      	push	{r4, r5, r6, lr}
   17de6:	4606      	mov	r6, r0
   17de8:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   17dea:	2400      	movs	r4, #0
   17dec:	42ac      	cmp	r4, r5
   17dee:	da07      	bge.n	17e00 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   17df0:	5d30      	ldrb	r0, [r6, r4]
   17df2:	f000 fd33 	bl	1885c <console_out_nolock>
   17df6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17dfa:	d001      	beq.n	17e00 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   17dfc:	3401      	adds	r4, #1
   17dfe:	e7f5      	b.n	17dec <console_write_nolock+0x8>
}
   17e00:	bd70      	pop	{r4, r5, r6, pc}
	...

00017e04 <handle_end>:
    if (trailing_chars) {
   17e04:	4b11      	ldr	r3, [pc, #68]	; (17e4c <handle_end+0x48>)
   17e06:	8819      	ldrh	r1, [r3, #0]
   17e08:	b901      	cbnz	r1, 17e0c <handle_end+0x8>
   17e0a:	4770      	bx	lr
{
   17e0c:	b510      	push	{r4, lr}
   17e0e:	b084      	sub	sp, #16
    char seq[14] = CSI;
   17e10:	f645 331b 	movw	r3, #23323	; 0x5b1b
   17e14:	9300      	str	r3, [sp, #0]
   17e16:	2300      	movs	r3, #0
   17e18:	9301      	str	r3, [sp, #4]
   17e1a:	9302      	str	r3, [sp, #8]
   17e1c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   17e20:	b949      	cbnz	r1, 17e36 <handle_end+0x32>
        cur += trailing_chars;
   17e22:	490b      	ldr	r1, [pc, #44]	; (17e50 <handle_end+0x4c>)
   17e24:	4a09      	ldr	r2, [pc, #36]	; (17e4c <handle_end+0x48>)
   17e26:	880b      	ldrh	r3, [r1, #0]
   17e28:	8810      	ldrh	r0, [r2, #0]
   17e2a:	4403      	add	r3, r0
   17e2c:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   17e2e:	2300      	movs	r3, #0
   17e30:	8013      	strh	r3, [r2, #0]
}
   17e32:	b004      	add	sp, #16
   17e34:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   17e36:	466c      	mov	r4, sp
   17e38:	2243      	movs	r2, #67	; 0x43
   17e3a:	f10d 0002 	add.w	r0, sp, #2
   17e3e:	f7ff ff3d 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   17e42:	1b01      	subs	r1, r0, r4
   17e44:	4620      	mov	r0, r4
   17e46:	f7ff ffcd 	bl	17de4 <console_write_nolock>
   17e4a:	e7ea      	b.n	17e22 <handle_end+0x1e>
   17e4c:	10001abe 	.word	0x10001abe
   17e50:	10001aa4 	.word	0x10001aa4

00017e54 <handle_home>:
    if (cur) {
   17e54:	4b11      	ldr	r3, [pc, #68]	; (17e9c <handle_home+0x48>)
   17e56:	8819      	ldrh	r1, [r3, #0]
   17e58:	b901      	cbnz	r1, 17e5c <handle_home+0x8>
   17e5a:	4770      	bx	lr
{
   17e5c:	b510      	push	{r4, lr}
   17e5e:	b084      	sub	sp, #16
    char seq[14] = CSI;
   17e60:	f645 331b 	movw	r3, #23323	; 0x5b1b
   17e64:	9300      	str	r3, [sp, #0]
   17e66:	2300      	movs	r3, #0
   17e68:	9301      	str	r3, [sp, #4]
   17e6a:	9302      	str	r3, [sp, #8]
   17e6c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   17e70:	b949      	cbnz	r1, 17e86 <handle_home+0x32>
        trailing_chars += cur;
   17e72:	490b      	ldr	r1, [pc, #44]	; (17ea0 <handle_home+0x4c>)
   17e74:	4a09      	ldr	r2, [pc, #36]	; (17e9c <handle_home+0x48>)
   17e76:	880b      	ldrh	r3, [r1, #0]
   17e78:	8810      	ldrh	r0, [r2, #0]
   17e7a:	4403      	add	r3, r0
   17e7c:	800b      	strh	r3, [r1, #0]
        cur = 0;
   17e7e:	2300      	movs	r3, #0
   17e80:	8013      	strh	r3, [r2, #0]
}
   17e82:	b004      	add	sp, #16
   17e84:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   17e86:	466c      	mov	r4, sp
   17e88:	2244      	movs	r2, #68	; 0x44
   17e8a:	f10d 0002 	add.w	r0, sp, #2
   17e8e:	f7ff ff15 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   17e92:	1b01      	subs	r1, r0, r4
   17e94:	4620      	mov	r0, r4
   17e96:	f7ff ffa5 	bl	17de4 <console_write_nolock>
   17e9a:	e7ea      	b.n	17e72 <handle_home+0x1e>
   17e9c:	10001aa4 	.word	0x10001aa4
   17ea0:	10001abe 	.word	0x10001abe

00017ea4 <del_char>:
{
   17ea4:	b530      	push	{r4, r5, lr}
   17ea6:	b085      	sub	sp, #20
   17ea8:	4604      	mov	r4, r0
    left = trailing_chars;
   17eaa:	4b17      	ldr	r3, [pc, #92]	; (17f08 <del_char+0x64>)
   17eac:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   17eae:	1e5d      	subs	r5, r3, #1
   17eb0:	2b01      	cmp	r3, #1
   17eb2:	dd06      	ble.n	17ec2 <del_char+0x1e>
        *pos = *(pos + 1);
   17eb4:	7860      	ldrb	r0, [r4, #1]
   17eb6:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   17eba:	f000 fccf 	bl	1885c <console_out_nolock>
    while (left-- > 1) {
   17ebe:	462b      	mov	r3, r5
   17ec0:	e7f5      	b.n	17eae <del_char+0xa>
    if (trailing_chars) {
   17ec2:	4b11      	ldr	r3, [pc, #68]	; (17f08 <del_char+0x64>)
   17ec4:	881b      	ldrh	r3, [r3, #0]
   17ec6:	b90b      	cbnz	r3, 17ecc <del_char+0x28>
}
   17ec8:	b005      	add	sp, #20
   17eca:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   17ecc:	2020      	movs	r0, #32
   17ece:	f000 fcc5 	bl	1885c <console_out_nolock>
        cursor_backward(trailing_chars);
   17ed2:	4b0d      	ldr	r3, [pc, #52]	; (17f08 <del_char+0x64>)
   17ed4:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   17ed6:	f645 331b 	movw	r3, #23323	; 0x5b1b
   17eda:	9300      	str	r3, [sp, #0]
   17edc:	2300      	movs	r3, #0
   17ede:	9301      	str	r3, [sp, #4]
   17ee0:	9302      	str	r3, [sp, #8]
   17ee2:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   17ee6:	b921      	cbnz	r1, 17ef2 <del_char+0x4e>
        trailing_chars--;
   17ee8:	4a07      	ldr	r2, [pc, #28]	; (17f08 <del_char+0x64>)
   17eea:	8813      	ldrh	r3, [r2, #0]
   17eec:	3b01      	subs	r3, #1
   17eee:	8013      	strh	r3, [r2, #0]
}
   17ef0:	e7ea      	b.n	17ec8 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   17ef2:	466c      	mov	r4, sp
   17ef4:	2244      	movs	r2, #68	; 0x44
   17ef6:	f10d 0002 	add.w	r0, sp, #2
   17efa:	f7ff fedf 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   17efe:	1b01      	subs	r1, r0, r4
   17f00:	4620      	mov	r0, r4
   17f02:	f7ff ff6f 	bl	17de4 <console_write_nolock>
   17f06:	e7ef      	b.n	17ee8 <del_char+0x44>
   17f08:	10001abe 	.word	0x10001abe

00017f0c <handle_delete>:
{
   17f0c:	b508      	push	{r3, lr}
    if (trailing_chars) {
   17f0e:	4b05      	ldr	r3, [pc, #20]	; (17f24 <handle_delete+0x18>)
   17f10:	881b      	ldrh	r3, [r3, #0]
   17f12:	b903      	cbnz	r3, 17f16 <handle_delete+0xa>
}
   17f14:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   17f16:	4b04      	ldr	r3, [pc, #16]	; (17f28 <handle_delete+0x1c>)
   17f18:	881b      	ldrh	r3, [r3, #0]
   17f1a:	4418      	add	r0, r3
   17f1c:	f7ff ffc2 	bl	17ea4 <del_char>
}
   17f20:	e7f8      	b.n	17f14 <handle_delete+0x8>
   17f22:	bf00      	nop
   17f24:	10001abe 	.word	0x10001abe
   17f28:	10001aa4 	.word	0x10001aa4

00017f2c <handle_ansi>:
{
   17f2c:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   17f2e:	4a5e      	ldr	r2, [pc, #376]	; (180a8 <handle_ansi+0x17c>)
   17f30:	6812      	ldr	r2, [r2, #0]
   17f32:	f012 0f04 	tst.w	r2, #4
   17f36:	d025      	beq.n	17f84 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   17f38:	f022 0204 	bic.w	r2, r2, #4
   17f3c:	485a      	ldr	r0, [pc, #360]	; (180a8 <handle_ansi+0x17c>)
   17f3e:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   17f40:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   17f44:	2809      	cmp	r0, #9
   17f46:	d912      	bls.n	17f6e <handle_ansi+0x42>
            ansi_val = 1;
   17f48:	4a58      	ldr	r2, [pc, #352]	; (180ac <handle_ansi+0x180>)
   17f4a:	2001      	movs	r0, #1
   17f4c:	6010      	str	r0, [r2, #0]
{
   17f4e:	b510      	push	{r4, lr}
   17f50:	b084      	sub	sp, #16
    switch (byte) {
   17f52:	2b48      	cmp	r3, #72	; 0x48
   17f54:	d840      	bhi.n	17fd8 <handle_ansi+0xac>
   17f56:	2b43      	cmp	r3, #67	; 0x43
   17f58:	f0c0 8093 	bcc.w	18082 <handle_ansi+0x156>
   17f5c:	3b43      	subs	r3, #67	; 0x43
   17f5e:	2b05      	cmp	r3, #5
   17f60:	f200 808f 	bhi.w	18082 <handle_ansi+0x156>
   17f64:	e8df f003 	tbb	[pc, r3]
   17f68:	948d4668 	.word	0x948d4668
   17f6c:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   17f6e:	f042 0208 	orr.w	r2, r2, #8
   17f72:	494d      	ldr	r1, [pc, #308]	; (180a8 <handle_ansi+0x17c>)
   17f74:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   17f76:	3b30      	subs	r3, #48	; 0x30
   17f78:	4a4c      	ldr	r2, [pc, #304]	; (180ac <handle_ansi+0x180>)
   17f7a:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   17f7c:	4b4c      	ldr	r3, [pc, #304]	; (180b0 <handle_ansi+0x184>)
   17f7e:	2200      	movs	r2, #0
   17f80:	601a      	str	r2, [r3, #0]
        return;
   17f82:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   17f84:	f012 0f08 	tst.w	r2, #8
   17f88:	d0e1      	beq.n	17f4e <handle_ansi+0x22>
        if (isdigit(byte)) {
   17f8a:	3830      	subs	r0, #48	; 0x30
   17f8c:	2809      	cmp	r0, #9
   17f8e:	d906      	bls.n	17f9e <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   17f90:	2b3b      	cmp	r3, #59	; 0x3b
   17f92:	d019      	beq.n	17fc8 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   17f94:	f022 0218 	bic.w	r2, r2, #24
   17f98:	4843      	ldr	r0, [pc, #268]	; (180a8 <handle_ansi+0x17c>)
   17f9a:	6002      	str	r2, [r0, #0]
   17f9c:	e7d7      	b.n	17f4e <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   17f9e:	f012 0f10 	tst.w	r2, #16
   17fa2:	d008      	beq.n	17fb6 <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   17fa4:	4942      	ldr	r1, [pc, #264]	; (180b0 <handle_ansi+0x184>)
   17fa6:	680a      	ldr	r2, [r1, #0]
   17fa8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   17fac:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   17fb0:	3b30      	subs	r3, #48	; 0x30
   17fb2:	600b      	str	r3, [r1, #0]
   17fb4:	4770      	bx	lr
                ansi_val *= 10;
   17fb6:	493d      	ldr	r1, [pc, #244]	; (180ac <handle_ansi+0x180>)
   17fb8:	680a      	ldr	r2, [r1, #0]
   17fba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   17fbe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   17fc2:	3b30      	subs	r3, #48	; 0x30
   17fc4:	600b      	str	r3, [r1, #0]
            return;
   17fc6:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   17fc8:	f012 0f10 	tst.w	r2, #16
   17fcc:	d1e2      	bne.n	17f94 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   17fce:	f042 0210 	orr.w	r2, r2, #16
   17fd2:	4b35      	ldr	r3, [pc, #212]	; (180a8 <handle_ansi+0x17c>)
   17fd4:	601a      	str	r2, [r3, #0]
            return;
   17fd6:	4770      	bx	lr
    switch (byte) {
   17fd8:	2b7e      	cmp	r3, #126	; 0x7e
   17fda:	d152      	bne.n	18082 <handle_ansi+0x156>
        switch (ansi_val) {
   17fdc:	4b33      	ldr	r3, [pc, #204]	; (180ac <handle_ansi+0x180>)
   17fde:	681b      	ldr	r3, [r3, #0]
   17fe0:	2b03      	cmp	r3, #3
   17fe2:	d059      	beq.n	18098 <handle_ansi+0x16c>
   17fe4:	2b04      	cmp	r3, #4
   17fe6:	d05b      	beq.n	180a0 <handle_ansi+0x174>
   17fe8:	2b01      	cmp	r3, #1
   17fea:	d14a      	bne.n	18082 <handle_ansi+0x156>
            handle_home(line);
   17fec:	4608      	mov	r0, r1
   17fee:	f7ff ff31 	bl	17e54 <handle_home>
            break;
   17ff2:	e046      	b.n	18082 <handle_ansi+0x156>
        if (ansi_val > cur) {
   17ff4:	4b2f      	ldr	r3, [pc, #188]	; (180b4 <handle_ansi+0x188>)
   17ff6:	881b      	ldrh	r3, [r3, #0]
   17ff8:	4a2c      	ldr	r2, [pc, #176]	; (180ac <handle_ansi+0x180>)
   17ffa:	6811      	ldr	r1, [r2, #0]
   17ffc:	428b      	cmp	r3, r1
   17ffe:	d340      	bcc.n	18082 <handle_ansi+0x156>
        trailing_chars += ansi_val;
   18000:	b28a      	uxth	r2, r1
   18002:	4c2d      	ldr	r4, [pc, #180]	; (180b8 <handle_ansi+0x18c>)
   18004:	8820      	ldrh	r0, [r4, #0]
   18006:	4410      	add	r0, r2
   18008:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   1800a:	1a9b      	subs	r3, r3, r2
   1800c:	4a29      	ldr	r2, [pc, #164]	; (180b4 <handle_ansi+0x188>)
   1800e:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   18010:	f645 331b 	movw	r3, #23323	; 0x5b1b
   18014:	9300      	str	r3, [sp, #0]
   18016:	2300      	movs	r3, #0
   18018:	9301      	str	r3, [sp, #4]
   1801a:	9302      	str	r3, [sp, #8]
   1801c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   18020:	b379      	cbz	r1, 18082 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   18022:	466c      	mov	r4, sp
   18024:	2244      	movs	r2, #68	; 0x44
   18026:	f10d 0002 	add.w	r0, sp, #2
   1802a:	f7ff fe47 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1802e:	1b01      	subs	r1, r0, r4
   18030:	4620      	mov	r0, r4
   18032:	f7ff fed7 	bl	17de4 <console_write_nolock>
}
   18036:	e024      	b.n	18082 <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   18038:	4b1f      	ldr	r3, [pc, #124]	; (180b8 <handle_ansi+0x18c>)
   1803a:	881b      	ldrh	r3, [r3, #0]
   1803c:	4a1b      	ldr	r2, [pc, #108]	; (180ac <handle_ansi+0x180>)
   1803e:	6811      	ldr	r1, [r2, #0]
   18040:	428b      	cmp	r3, r1
   18042:	d31e      	bcc.n	18082 <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   18044:	b28a      	uxth	r2, r1
   18046:	1a9b      	subs	r3, r3, r2
   18048:	481b      	ldr	r0, [pc, #108]	; (180b8 <handle_ansi+0x18c>)
   1804a:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   1804c:	4b19      	ldr	r3, [pc, #100]	; (180b4 <handle_ansi+0x188>)
   1804e:	8818      	ldrh	r0, [r3, #0]
   18050:	4402      	add	r2, r0
   18052:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   18054:	f645 331b 	movw	r3, #23323	; 0x5b1b
   18058:	9300      	str	r3, [sp, #0]
   1805a:	2300      	movs	r3, #0
   1805c:	9301      	str	r3, [sp, #4]
   1805e:	9302      	str	r3, [sp, #8]
   18060:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   18064:	b169      	cbz	r1, 18082 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   18066:	466c      	mov	r4, sp
   18068:	2243      	movs	r2, #67	; 0x43
   1806a:	f10d 0002 	add.w	r0, sp, #2
   1806e:	f7ff fe25 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   18072:	1b01      	subs	r1, r0, r4
   18074:	4620      	mov	r0, r4
   18076:	f7ff feb5 	bl	17de4 <console_write_nolock>
}
   1807a:	e002      	b.n	18082 <handle_ansi+0x156>
        handle_home(line);
   1807c:	4608      	mov	r0, r1
   1807e:	f7ff fee9 	bl	17e54 <handle_home>
    esc_state &= ~ESC_ANSI;
   18082:	4a09      	ldr	r2, [pc, #36]	; (180a8 <handle_ansi+0x17c>)
   18084:	6813      	ldr	r3, [r2, #0]
   18086:	f023 0302 	bic.w	r3, r3, #2
   1808a:	6013      	str	r3, [r2, #0]
}
   1808c:	b004      	add	sp, #16
   1808e:	bd10      	pop	{r4, pc}
        handle_end(line);
   18090:	4608      	mov	r0, r1
   18092:	f7ff feb7 	bl	17e04 <handle_end>
        break;
   18096:	e7f4      	b.n	18082 <handle_ansi+0x156>
            handle_delete(line);
   18098:	4608      	mov	r0, r1
   1809a:	f7ff ff37 	bl	17f0c <handle_delete>
            break;
   1809e:	e7f0      	b.n	18082 <handle_ansi+0x156>
            handle_end(line);
   180a0:	4608      	mov	r0, r1
   180a2:	f7ff feaf 	bl	17e04 <handle_end>
            break;
   180a6:	e7ec      	b.n	18082 <handle_ansi+0x156>
   180a8:	10001aac 	.word	0x10001aac
   180ac:	10001a74 	.word	0x10001a74
   180b0:	10001a78 	.word	0x10001a78
   180b4:	10001aa4 	.word	0x10001aa4
   180b8:	10001abe 	.word	0x10001abe

000180bc <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   180bc:	4b13      	ldr	r3, [pc, #76]	; (1810c <handle_backspace+0x50>)
   180be:	881b      	ldrh	r3, [r3, #0]
   180c0:	b903      	cbnz	r3, 180c4 <handle_backspace+0x8>
   180c2:	4770      	bx	lr
{
   180c4:	b530      	push	{r4, r5, lr}
   180c6:	b085      	sub	sp, #20
   180c8:	4604      	mov	r4, r0
    char seq[14] = CSI;
   180ca:	f645 331b 	movw	r3, #23323	; 0x5b1b
   180ce:	9300      	str	r3, [sp, #0]
   180d0:	2300      	movs	r3, #0
   180d2:	9301      	str	r3, [sp, #4]
   180d4:	9302      	str	r3, [sp, #8]
   180d6:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   180da:	466d      	mov	r5, sp
   180dc:	2244      	movs	r2, #68	; 0x44
   180de:	2101      	movs	r1, #1
   180e0:	f10d 0002 	add.w	r0, sp, #2
   180e4:	f7ff fdea 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   180e8:	1b41      	subs	r1, r0, r5
   180ea:	4628      	mov	r0, r5
   180ec:	f7ff fe7a 	bl	17de4 <console_write_nolock>
        cursor_backward(1);
        cur--;
   180f0:	4a06      	ldr	r2, [pc, #24]	; (1810c <handle_backspace+0x50>)
   180f2:	8813      	ldrh	r3, [r2, #0]
   180f4:	3b01      	subs	r3, #1
   180f6:	b29b      	uxth	r3, r3
   180f8:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   180fa:	4905      	ldr	r1, [pc, #20]	; (18110 <handle_backspace+0x54>)
   180fc:	880a      	ldrh	r2, [r1, #0]
   180fe:	3201      	adds	r2, #1
   18100:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   18102:	18e0      	adds	r0, r4, r3
   18104:	f7ff fece 	bl	17ea4 <del_char>
    }
}
   18108:	b005      	add	sp, #20
   1810a:	bd30      	pop	{r4, r5, pc}
   1810c:	10001aa4 	.word	0x10001aa4
   18110:	10001abe 	.word	0x10001abe

00018114 <console_clear_line>:
{
   18114:	b510      	push	{r4, lr}
   18116:	b084      	sub	sp, #16
    if (cur) {
   18118:	4b13      	ldr	r3, [pc, #76]	; (18168 <console_clear_line+0x54>)
   1811a:	8819      	ldrh	r1, [r3, #0]
   1811c:	b979      	cbnz	r1, 1813e <console_clear_line+0x2a>
    cur = 0;
   1811e:	2300      	movs	r3, #0
   18120:	4a11      	ldr	r2, [pc, #68]	; (18168 <console_clear_line+0x54>)
   18122:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   18124:	4a11      	ldr	r2, [pc, #68]	; (1816c <console_clear_line+0x58>)
   18126:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   18128:	201b      	movs	r0, #27
   1812a:	f000 fb97 	bl	1885c <console_out_nolock>
    console_out_nolock('[');
   1812e:	205b      	movs	r0, #91	; 0x5b
   18130:	f000 fb94 	bl	1885c <console_out_nolock>
    console_out_nolock('K');
   18134:	204b      	movs	r0, #75	; 0x4b
   18136:	f000 fb91 	bl	1885c <console_out_nolock>
}
   1813a:	b004      	add	sp, #16
   1813c:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   1813e:	f645 331b 	movw	r3, #23323	; 0x5b1b
   18142:	9300      	str	r3, [sp, #0]
   18144:	2300      	movs	r3, #0
   18146:	9301      	str	r3, [sp, #4]
   18148:	9302      	str	r3, [sp, #8]
   1814a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1814e:	2900      	cmp	r1, #0
   18150:	d0e5      	beq.n	1811e <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   18152:	466c      	mov	r4, sp
   18154:	2244      	movs	r2, #68	; 0x44
   18156:	f10d 0002 	add.w	r0, sp, #2
   1815a:	f7ff fdaf 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1815e:	1b01      	subs	r1, r0, r4
   18160:	4620      	mov	r0, r4
   18162:	f7ff fe3f 	bl	17de4 <console_write_nolock>
}
   18166:	e7da      	b.n	1811e <console_clear_line+0xa>
   18168:	10001aa4 	.word	0x10001aa4
   1816c:	10001abe 	.word	0x10001abe

00018170 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   18170:	4b26      	ldr	r3, [pc, #152]	; (1820c <insert_char+0x9c>)
   18172:	881b      	ldrh	r3, [r3, #0]
   18174:	4a26      	ldr	r2, [pc, #152]	; (18210 <insert_char+0xa0>)
   18176:	8812      	ldrh	r2, [r2, #0]
   18178:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   1817a:	2bfe      	cmp	r3, #254	; 0xfe
   1817c:	dc44      	bgt.n	18208 <insert_char+0x98>
{
   1817e:	b570      	push	{r4, r5, r6, lr}
   18180:	b084      	sub	sp, #16
   18182:	4604      	mov	r4, r0
   18184:	460e      	mov	r6, r1
    if (echo) {
   18186:	4b23      	ldr	r3, [pc, #140]	; (18214 <insert_char+0xa4>)
   18188:	681b      	ldr	r3, [r3, #0]
   1818a:	b95b      	cbnz	r3, 181a4 <insert_char+0x34>
    ++cur;
   1818c:	4a1f      	ldr	r2, [pc, #124]	; (1820c <insert_char+0x9c>)
   1818e:	8813      	ldrh	r3, [r2, #0]
   18190:	3301      	adds	r3, #1
   18192:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   18194:	4b1e      	ldr	r3, [pc, #120]	; (18210 <insert_char+0xa0>)
   18196:	881b      	ldrh	r3, [r3, #0]
   18198:	b903      	cbnz	r3, 1819c <insert_char+0x2c>
        *pos = c;
   1819a:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   1819c:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   1819e:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   181a2:	e00d      	b.n	181c0 <insert_char+0x50>
        console_out_nolock(c);
   181a4:	4608      	mov	r0, r1
   181a6:	f000 fb59 	bl	1885c <console_out_nolock>
   181aa:	e7ef      	b.n	1818c <insert_char+0x1c>
            console_out_nolock(tmp);
   181ac:	4628      	mov	r0, r5
   181ae:	f000 fb55 	bl	1885c <console_out_nolock>
        c = *pos;
   181b2:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   181b4:	4620      	mov	r0, r4
   181b6:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   181ba:	4633      	mov	r3, r6
        tmp = c;
   181bc:	4615      	mov	r5, r2
        *(pos++) = tmp;
   181be:	4604      	mov	r4, r0
    while (end-- > 0) {
   181c0:	1e5e      	subs	r6, r3, #1
   181c2:	2b00      	cmp	r3, #0
   181c4:	dd04      	ble.n	181d0 <insert_char+0x60>
        if (echo) {
   181c6:	4b13      	ldr	r3, [pc, #76]	; (18214 <insert_char+0xa4>)
   181c8:	681b      	ldr	r3, [r3, #0]
   181ca:	2b00      	cmp	r3, #0
   181cc:	d0f1      	beq.n	181b2 <insert_char+0x42>
   181ce:	e7ed      	b.n	181ac <insert_char+0x3c>
    if (echo) {
   181d0:	4b10      	ldr	r3, [pc, #64]	; (18214 <insert_char+0xa4>)
   181d2:	681b      	ldr	r3, [r3, #0]
   181d4:	b90b      	cbnz	r3, 181da <insert_char+0x6a>
}
   181d6:	b004      	add	sp, #16
   181d8:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   181da:	4b0d      	ldr	r3, [pc, #52]	; (18210 <insert_char+0xa0>)
   181dc:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   181de:	f645 331b 	movw	r3, #23323	; 0x5b1b
   181e2:	9300      	str	r3, [sp, #0]
   181e4:	2300      	movs	r3, #0
   181e6:	9301      	str	r3, [sp, #4]
   181e8:	9302      	str	r3, [sp, #8]
   181ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   181ee:	2900      	cmp	r1, #0
   181f0:	d0f1      	beq.n	181d6 <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   181f2:	466c      	mov	r4, sp
   181f4:	2244      	movs	r2, #68	; 0x44
   181f6:	f10d 0002 	add.w	r0, sp, #2
   181fa:	f7ff fd5f 	bl	17cbc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   181fe:	1b01      	subs	r1, r0, r4
   18200:	4620      	mov	r0, r4
   18202:	f7ff fdef 	bl	17de4 <console_write_nolock>
}
   18206:	e7e6      	b.n	181d6 <insert_char+0x66>
   18208:	4770      	bx	lr
   1820a:	bf00      	nop
   1820c:	10001aa4 	.word	0x10001aa4
   18210:	10001abe 	.word	0x10001abe
   18214:	10000228 	.word	0x10000228

00018218 <console_echo>:
    echo = on;
   18218:	4b01      	ldr	r3, [pc, #4]	; (18220 <console_echo+0x8>)
   1821a:	6018      	str	r0, [r3, #0]
}
   1821c:	4770      	bx	lr
   1821e:	bf00      	nop
   18220:	10000228 	.word	0x10000228

00018224 <console_nlip_enable_echo>:
{
   18224:	b508      	push	{r3, lr}
    console_echo(1);
   18226:	2001      	movs	r0, #1
   18228:	f7ff fff6 	bl	18218 <console_echo>
}
   1822c:	bd08      	pop	{r3, pc}

0001822e <console_nlip_disable_echo>:
{
   1822e:	b508      	push	{r3, lr}
    console_echo(0);
   18230:	2000      	movs	r0, #0
   18232:	f7ff fff1 	bl	18218 <console_echo>
}
   18236:	bd08      	pop	{r3, pc}

00018238 <handle_nlip>:
{
   18238:	b570      	push	{r4, r5, r6, lr}
   1823a:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   1823c:	4b3b      	ldr	r3, [pc, #236]	; (1832c <handle_nlip+0xf4>)
   1823e:	681b      	ldr	r3, [r3, #0]
   18240:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   18242:	4b3b      	ldr	r3, [pc, #236]	; (18330 <handle_nlip+0xf8>)
   18244:	681b      	ldr	r3, [r3, #0]
   18246:	3b04      	subs	r3, #4
   18248:	2b10      	cmp	r3, #16
   1824a:	d852      	bhi.n	182f2 <handle_nlip+0xba>
   1824c:	e8df f003 	tbb	[pc, r3]
   18250:	511f5138 	.word	0x511f5138
   18254:	51510951 	.word	0x51510951
   18258:	51515151 	.word	0x51515151
   1825c:	51515151 	.word	0x51515151
   18260:	09          	.byte	0x09
   18261:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   18262:	4b34      	ldr	r3, [pc, #208]	; (18334 <handle_nlip+0xfc>)
   18264:	8818      	ldrh	r0, [r3, #0]
   18266:	4621      	mov	r1, r4
   18268:	4428      	add	r0, r5
   1826a:	f7ff ff81 	bl	18170 <insert_char>
        if (byte == '\n') {
   1826e:	2c0a      	cmp	r4, #10
   18270:	d001      	beq.n	18276 <handle_nlip+0x3e>
    handled = 1;
   18272:	2001      	movs	r0, #1
}
   18274:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   18276:	4b2f      	ldr	r3, [pc, #188]	; (18334 <handle_nlip+0xfc>)
   18278:	881b      	ldrh	r3, [r3, #0]
   1827a:	2400      	movs	r4, #0
   1827c:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   1827e:	f7ff ffd1 	bl	18224 <console_nlip_enable_echo>
            nlip_state = 0;
   18282:	4b2b      	ldr	r3, [pc, #172]	; (18330 <handle_nlip+0xf8>)
   18284:	601c      	str	r4, [r3, #0]
            console_handle_line();
   18286:	f7ff fd3f 	bl	17d08 <console_handle_line>
    handled = 1;
   1828a:	2001      	movs	r0, #1
   1828c:	e7f2      	b.n	18274 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   1828e:	2809      	cmp	r0, #9
   18290:	d005      	beq.n	1829e <handle_nlip+0x66>
            nlip_state = 0;
   18292:	4b27      	ldr	r3, [pc, #156]	; (18330 <handle_nlip+0xf8>)
   18294:	2200      	movs	r2, #0
   18296:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   18298:	4b27      	ldr	r3, [pc, #156]	; (18338 <handle_nlip+0x100>)
   1829a:	7818      	ldrb	r0, [r3, #0]
   1829c:	e7ea      	b.n	18274 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   1829e:	4b24      	ldr	r3, [pc, #144]	; (18330 <handle_nlip+0xf8>)
   182a0:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   182a2:	f7ff ffc4 	bl	1822e <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   182a6:	4e23      	ldr	r6, [pc, #140]	; (18334 <handle_nlip+0xfc>)
   182a8:	8830      	ldrh	r0, [r6, #0]
   182aa:	2106      	movs	r1, #6
   182ac:	4428      	add	r0, r5
   182ae:	f7ff ff5f 	bl	18170 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   182b2:	8830      	ldrh	r0, [r6, #0]
   182b4:	4621      	mov	r1, r4
   182b6:	4428      	add	r0, r5
   182b8:	f7ff ff5a 	bl	18170 <insert_char>
    handled = 1;
   182bc:	2001      	movs	r0, #1
   182be:	e7d9      	b.n	18274 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   182c0:	2814      	cmp	r0, #20
   182c2:	d005      	beq.n	182d0 <handle_nlip+0x98>
            nlip_state = 0;
   182c4:	4b1a      	ldr	r3, [pc, #104]	; (18330 <handle_nlip+0xf8>)
   182c6:	2200      	movs	r2, #0
   182c8:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   182ca:	4b1b      	ldr	r3, [pc, #108]	; (18338 <handle_nlip+0x100>)
   182cc:	7818      	ldrb	r0, [r3, #0]
   182ce:	e7d1      	b.n	18274 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   182d0:	4b17      	ldr	r3, [pc, #92]	; (18330 <handle_nlip+0xf8>)
   182d2:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   182d4:	f7ff ffab 	bl	1822e <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   182d8:	4e16      	ldr	r6, [pc, #88]	; (18334 <handle_nlip+0xfc>)
   182da:	8830      	ldrh	r0, [r6, #0]
   182dc:	2104      	movs	r1, #4
   182de:	4428      	add	r0, r5
   182e0:	f7ff ff46 	bl	18170 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   182e4:	8830      	ldrh	r0, [r6, #0]
   182e6:	4621      	mov	r1, r4
   182e8:	4428      	add	r0, r5
   182ea:	f7ff ff41 	bl	18170 <insert_char>
    handled = 1;
   182ee:	2001      	movs	r0, #1
   182f0:	e7c0      	b.n	18274 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   182f2:	2804      	cmp	r0, #4
   182f4:	d00a      	beq.n	1830c <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   182f6:	2806      	cmp	r0, #6
   182f8:	d00d      	beq.n	18316 <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   182fa:	4b0f      	ldr	r3, [pc, #60]	; (18338 <handle_nlip+0x100>)
   182fc:	781b      	ldrb	r3, [r3, #0]
   182fe:	b18b      	cbz	r3, 18324 <handle_nlip+0xec>
   18300:	280d      	cmp	r0, #13
   18302:	d011      	beq.n	18328 <handle_nlip+0xf0>
   18304:	280a      	cmp	r0, #10
   18306:	d00b      	beq.n	18320 <handle_nlip+0xe8>
   18308:	2001      	movs	r0, #1
    return handled;
   1830a:	e7b3      	b.n	18274 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   1830c:	4b08      	ldr	r3, [pc, #32]	; (18330 <handle_nlip+0xf8>)
   1830e:	2204      	movs	r2, #4
   18310:	601a      	str	r2, [r3, #0]
    handled = 1;
   18312:	2001      	movs	r0, #1
   18314:	e7ae      	b.n	18274 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   18316:	4b06      	ldr	r3, [pc, #24]	; (18330 <handle_nlip+0xf8>)
   18318:	2206      	movs	r2, #6
   1831a:	601a      	str	r2, [r3, #0]
    handled = 1;
   1831c:	2001      	movs	r0, #1
   1831e:	e7a9      	b.n	18274 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   18320:	2000      	movs	r0, #0
   18322:	e7a7      	b.n	18274 <handle_nlip+0x3c>
   18324:	2000      	movs	r0, #0
   18326:	e7a5      	b.n	18274 <handle_nlip+0x3c>
   18328:	2000      	movs	r0, #0
   1832a:	e7a3      	b.n	18274 <handle_nlip+0x3c>
   1832c:	10001aa8 	.word	0x10001aa8
   18330:	10001ab8 	.word	0x10001ab8
   18334:	10001aa4 	.word	0x10001aa4
   18338:	10001ab0 	.word	0x10001ab0

0001833c <console_lock>:
{
   1833c:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1833e:	4b0a      	ldr	r3, [pc, #40]	; (18368 <console_lock+0x2c>)
   18340:	685b      	ldr	r3, [r3, #4]
   18342:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   18346:	b133      	cbz	r3, 18356 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   18348:	4b08      	ldr	r3, [pc, #32]	; (1836c <console_lock+0x30>)
   1834a:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   1834c:	b90b      	cbnz	r3, 18352 <console_lock+0x16>
    int rc = OS_OK;
   1834e:	2000      	movs	r0, #0
   18350:	e007      	b.n	18362 <console_lock+0x26>
            rc = OS_EBUSY;
   18352:	200b      	movs	r0, #11
        goto end;
   18354:	e005      	b.n	18362 <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   18356:	4601      	mov	r1, r0
   18358:	4804      	ldr	r0, [pc, #16]	; (1836c <console_lock+0x30>)
   1835a:	f7fe fb0b 	bl	16974 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   1835e:	2809      	cmp	r0, #9
   18360:	d000      	beq.n	18364 <console_lock+0x28>
}
   18362:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   18364:	2000      	movs	r0, #0
    return rc;
   18366:	e7fc      	b.n	18362 <console_lock+0x26>
   18368:	e000ed00 	.word	0xe000ed00
   1836c:	10001a98 	.word	0x10001a98

00018370 <console_unlock>:
{
   18370:	b508      	push	{r3, lr}
   18372:	4b0c      	ldr	r3, [pc, #48]	; (183a4 <console_unlock+0x34>)
   18374:	685b      	ldr	r3, [r3, #4]
   18376:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   1837a:	b10b      	cbz	r3, 18380 <console_unlock+0x10>
    int rc = OS_OK;
   1837c:	2000      	movs	r0, #0
}
   1837e:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   18380:	4809      	ldr	r0, [pc, #36]	; (183a8 <console_unlock+0x38>)
   18382:	f7fe fa97 	bl	168b4 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   18386:	2800      	cmp	r0, #0
   18388:	d0f9      	beq.n	1837e <console_unlock+0xe>
   1838a:	2809      	cmp	r0, #9
   1838c:	d0f7      	beq.n	1837e <console_unlock+0xe>
   1838e:	f7fc f961 	bl	14654 <hal_debugger_connected>
   18392:	b100      	cbz	r0, 18396 <console_unlock+0x26>
   18394:	be01      	bkpt	0x0001
   18396:	2300      	movs	r3, #0
   18398:	461a      	mov	r2, r3
   1839a:	4619      	mov	r1, r3
   1839c:	4618      	mov	r0, r3
   1839e:	f7fc fcfb 	bl	14d98 <__assert_func>
   183a2:	bf00      	nop
   183a4:	e000ed00 	.word	0xe000ed00
   183a8:	10001a98 	.word	0x10001a98

000183ac <console_write>:
{
   183ac:	b538      	push	{r3, r4, r5, lr}
   183ae:	4605      	mov	r5, r0
   183b0:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   183b2:	2080      	movs	r0, #128	; 0x80
   183b4:	f7ff ffc2 	bl	1833c <console_lock>
   183b8:	b9e0      	cbnz	r0, 183f4 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   183ba:	2c01      	cmp	r4, #1
   183bc:	dd02      	ble.n	183c4 <console_write+0x18>
   183be:	782b      	ldrb	r3, [r5, #0]
   183c0:	2b04      	cmp	r3, #4
   183c2:	d018      	beq.n	183f6 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   183c4:	2c02      	cmp	r4, #2
   183c6:	dd02      	ble.n	183ce <console_write+0x22>
   183c8:	786b      	ldrb	r3, [r5, #1]
   183ca:	2b06      	cmp	r3, #6
   183cc:	d01a      	beq.n	18404 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   183ce:	4b13      	ldr	r3, [pc, #76]	; (1841c <console_write+0x70>)
   183d0:	781b      	ldrb	r3, [r3, #0]
   183d2:	b913      	cbnz	r3, 183da <console_write+0x2e>
   183d4:	4b12      	ldr	r3, [pc, #72]	; (18420 <console_write+0x74>)
   183d6:	781b      	ldrb	r3, [r3, #0]
   183d8:	b91b      	cbnz	r3, 183e2 <console_write+0x36>
    console_filter_write(str, cnt);
   183da:	4621      	mov	r1, r4
   183dc:	4628      	mov	r0, r5
   183de:	f7ff fccf 	bl	17d80 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   183e2:	2c00      	cmp	r4, #0
   183e4:	dd04      	ble.n	183f0 <console_write+0x44>
   183e6:	1928      	adds	r0, r5, r4
   183e8:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   183ec:	2b0a      	cmp	r3, #10
   183ee:	d010      	beq.n	18412 <console_write+0x66>
    (void)console_unlock();
   183f0:	f7ff ffbe 	bl	18370 <console_unlock>
}
   183f4:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   183f6:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   183f8:	2b14      	cmp	r3, #20
   183fa:	d1e3      	bne.n	183c4 <console_write+0x18>
        g_is_output_nlip = 1;
   183fc:	4b07      	ldr	r3, [pc, #28]	; (1841c <console_write+0x70>)
   183fe:	2201      	movs	r2, #1
   18400:	701a      	strb	r2, [r3, #0]
   18402:	e7df      	b.n	183c4 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   18404:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   18406:	2b09      	cmp	r3, #9
   18408:	d1e1      	bne.n	183ce <console_write+0x22>
        g_is_output_nlip = 1;
   1840a:	4b04      	ldr	r3, [pc, #16]	; (1841c <console_write+0x70>)
   1840c:	2201      	movs	r2, #1
   1840e:	701a      	strb	r2, [r3, #0]
   18410:	e7dd      	b.n	183ce <console_write+0x22>
        g_is_output_nlip = 0;
   18412:	4b02      	ldr	r3, [pc, #8]	; (1841c <console_write+0x70>)
   18414:	2200      	movs	r2, #0
   18416:	701a      	strb	r2, [r3, #0]
   18418:	e7ea      	b.n	183f0 <console_write+0x44>
   1841a:	bf00      	nop
   1841c:	10001ab3 	.word	0x10001ab3
   18420:	10001ab2 	.word	0x10001ab2

00018424 <console_blocking_mode>:
{
   18424:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   18426:	f000 fa03 	bl	18830 <uart_console_blocking_mode>
}
   1842a:	bd08      	pop	{r3, pc}

0001842c <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   1842c:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   1842e:	4b57      	ldr	r3, [pc, #348]	; (1858c <console_handle_char+0x160>)
   18430:	681b      	ldr	r3, [r3, #0]
   18432:	2b00      	cmp	r3, #0
   18434:	f000 80a5 	beq.w	18582 <console_handle_char+0x156>
   18438:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   1843a:	4b55      	ldr	r3, [pc, #340]	; (18590 <console_handle_char+0x164>)
   1843c:	681b      	ldr	r3, [r3, #0]
   1843e:	b14b      	cbz	r3, 18454 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   18440:	4b53      	ldr	r3, [pc, #332]	; (18590 <console_handle_char+0x164>)
   18442:	681b      	ldr	r3, [r3, #0]
   18444:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   18446:	4620      	mov	r0, r4
   18448:	f7ff fef6 	bl	18238 <handle_nlip>
   1844c:	b178      	cbz	r0, 1846e <console_handle_char+0x42>
        return 0;
   1844e:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   18450:	4628      	mov	r0, r5
   18452:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   18454:	484f      	ldr	r0, [pc, #316]	; (18594 <console_handle_char+0x168>)
   18456:	f7fd f80a 	bl	1546e <os_eventq_get_no_wait>
   1845a:	4b4d      	ldr	r3, [pc, #308]	; (18590 <console_handle_char+0x164>)
   1845c:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   1845e:	2800      	cmp	r0, #0
   18460:	d1ee      	bne.n	18440 <console_handle_char+0x14>
            rx_stalled = true;
   18462:	4b4d      	ldr	r3, [pc, #308]	; (18598 <console_handle_char+0x16c>)
   18464:	2201      	movs	r2, #1
   18466:	701a      	strb	r2, [r3, #0]
            return -1;
   18468:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1846c:	e7f0      	b.n	18450 <console_handle_char+0x24>
    if (console_lock(1000)) {
   1846e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18472:	f7ff ff63 	bl	1833c <console_lock>
   18476:	4605      	mov	r5, r0
   18478:	2800      	cmp	r0, #0
   1847a:	f040 8084 	bne.w	18586 <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   1847e:	4b47      	ldr	r3, [pc, #284]	; (1859c <console_handle_char+0x170>)
   18480:	681b      	ldr	r3, [r3, #0]
   18482:	f013 0f02 	tst.w	r3, #2
   18486:	d120      	bne.n	184ca <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   18488:	f013 0f01 	tst.w	r3, #1
   1848c:	d122      	bne.n	184d4 <console_handle_char+0xa8>
   1848e:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   18492:	2b5e      	cmp	r3, #94	; 0x5e
   18494:	d96c      	bls.n	18570 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   18496:	4631      	mov	r1, r6
   18498:	4620      	mov	r0, r4
   1849a:	f7ff fd47 	bl	17f2c <handle_ansi>
        switch (byte) {
   1849e:	2c1b      	cmp	r4, #27
   184a0:	d828      	bhi.n	184f4 <console_handle_char+0xc8>
   184a2:	2c03      	cmp	r4, #3
   184a4:	d332      	bcc.n	1850c <console_handle_char+0xe0>
   184a6:	1ee3      	subs	r3, r4, #3
   184a8:	2b18      	cmp	r3, #24
   184aa:	d82f      	bhi.n	1850c <console_handle_char+0xe0>
   184ac:	e8df f003 	tbb	[pc, r3]
   184b0:	2e2e2e59 	.word	0x2e2e2e59
   184b4:	344f242e 	.word	0x344f242e
   184b8:	2e345c2e 	.word	0x2e345c2e
   184bc:	2e2e2e2e 	.word	0x2e2e2e2e
   184c0:	2e2e2e2e 	.word	0x2e2e2e2e
   184c4:	2e2e2e2e 	.word	0x2e2e2e2e
   184c8:	28          	.byte	0x28
   184c9:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   184ca:	4631      	mov	r1, r6
   184cc:	4620      	mov	r0, r4
   184ce:	f7ff fd2d 	bl	17f2c <handle_ansi>
        goto unlock;
   184d2:	e053      	b.n	1857c <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   184d4:	f023 0301 	bic.w	r3, r3, #1
   184d8:	4a30      	ldr	r2, [pc, #192]	; (1859c <console_handle_char+0x170>)
   184da:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   184dc:	4631      	mov	r1, r6
   184de:	4620      	mov	r0, r4
   184e0:	f7ff fd24 	bl	17f2c <handle_ansi>
        switch (byte) {
   184e4:	2c5b      	cmp	r4, #91	; 0x5b
   184e6:	d149      	bne.n	1857c <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   184e8:	4a2c      	ldr	r2, [pc, #176]	; (1859c <console_handle_char+0x170>)
   184ea:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   184ec:	f043 0306 	orr.w	r3, r3, #6
   184f0:	6013      	str	r3, [r2, #0]
        goto unlock;
   184f2:	e043      	b.n	1857c <console_handle_char+0x150>
        switch (byte) {
   184f4:	2c7f      	cmp	r4, #127	; 0x7f
   184f6:	d109      	bne.n	1850c <console_handle_char+0xe0>
            handle_backspace(input->line);
   184f8:	4630      	mov	r0, r6
   184fa:	f7ff fddf 	bl	180bc <handle_backspace>
            break;
   184fe:	e03d      	b.n	1857c <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   18500:	4a26      	ldr	r2, [pc, #152]	; (1859c <console_handle_char+0x170>)
   18502:	6813      	ldr	r3, [r2, #0]
   18504:	f043 0301 	orr.w	r3, r3, #1
   18508:	6013      	str	r3, [r2, #0]
            break;
   1850a:	e037      	b.n	1857c <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   1850c:	4b24      	ldr	r3, [pc, #144]	; (185a0 <console_handle_char+0x174>)
   1850e:	8818      	ldrh	r0, [r3, #0]
   18510:	4621      	mov	r1, r4
   18512:	4430      	add	r0, r6
   18514:	f7ff fe2c 	bl	18170 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   18518:	2c0a      	cmp	r4, #10
   1851a:	d103      	bne.n	18524 <console_handle_char+0xf8>
   1851c:	4b21      	ldr	r3, [pc, #132]	; (185a4 <console_handle_char+0x178>)
   1851e:	781b      	ldrb	r3, [r3, #0]
   18520:	2b0d      	cmp	r3, #13
   18522:	d011      	beq.n	18548 <console_handle_char+0x11c>
            prev_endl = byte;
   18524:	4b1f      	ldr	r3, [pc, #124]	; (185a4 <console_handle_char+0x178>)
   18526:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   18528:	4b1d      	ldr	r3, [pc, #116]	; (185a0 <console_handle_char+0x174>)
   1852a:	881b      	ldrh	r3, [r3, #0]
   1852c:	4a1e      	ldr	r2, [pc, #120]	; (185a8 <console_handle_char+0x17c>)
   1852e:	8812      	ldrh	r2, [r2, #0]
   18530:	4413      	add	r3, r2
   18532:	2200      	movs	r2, #0
   18534:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   18536:	200d      	movs	r0, #13
   18538:	f7ff fc04 	bl	17d44 <console_filter_out>
                console_filter_out('\n');
   1853c:	200a      	movs	r0, #10
   1853e:	f7ff fc01 	bl	17d44 <console_filter_out>
            console_handle_line();
   18542:	f7ff fbe1 	bl	17d08 <console_handle_line>
            break;
   18546:	e019      	b.n	1857c <console_handle_char+0x150>
                prev_endl = byte;
   18548:	4b16      	ldr	r3, [pc, #88]	; (185a4 <console_handle_char+0x178>)
   1854a:	701c      	strb	r4, [r3, #0]
                break;
   1854c:	e016      	b.n	1857c <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   1854e:	4b17      	ldr	r3, [pc, #92]	; (185ac <console_handle_char+0x180>)
   18550:	681b      	ldr	r3, [r3, #0]
   18552:	b19b      	cbz	r3, 1857c <console_handle_char+0x150>
   18554:	4a14      	ldr	r2, [pc, #80]	; (185a8 <console_handle_char+0x17c>)
   18556:	8812      	ldrh	r2, [r2, #0]
   18558:	b982      	cbnz	r2, 1857c <console_handle_char+0x150>
                completion(input->line, console_append_char);
   1855a:	4915      	ldr	r1, [pc, #84]	; (185b0 <console_handle_char+0x184>)
   1855c:	4630      	mov	r0, r6
   1855e:	4798      	blx	r3
                console_switch_to_prompt();
   18560:	e00c      	b.n	1857c <console_handle_char+0x150>
            console_clear_line();
   18562:	f7ff fdd7 	bl	18114 <console_clear_line>
            break;
   18566:	e009      	b.n	1857c <console_handle_char+0x150>
                console_out_nolock(VT);
   18568:	200c      	movs	r0, #12
   1856a:	f000 f977 	bl	1885c <console_out_nolock>
            break;
   1856e:	e005      	b.n	1857c <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   18570:	4b0b      	ldr	r3, [pc, #44]	; (185a0 <console_handle_char+0x174>)
   18572:	8818      	ldrh	r0, [r3, #0]
   18574:	4621      	mov	r1, r4
   18576:	4430      	add	r0, r6
   18578:	f7ff fdfa 	bl	18170 <insert_char>
    (void)console_unlock();
   1857c:	f7ff fef8 	bl	18370 <console_unlock>
    return 0;
   18580:	e766      	b.n	18450 <console_handle_char+0x24>
        return 0;
   18582:	2500      	movs	r5, #0
   18584:	e764      	b.n	18450 <console_handle_char+0x24>
        return -1;
   18586:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1858a:	e761      	b.n	18450 <console_handle_char+0x24>
   1858c:	10001ab4 	.word	0x10001ab4
   18590:	10001aa8 	.word	0x10001aa8
   18594:	10001a7c 	.word	0x10001a7c
   18598:	10001abd 	.word	0x10001abd
   1859c:	10001aac 	.word	0x10001aac
   185a0:	10001aa4 	.word	0x10001aa4
   185a4:	10001abc 	.word	0x10001abc
   185a8:	10001abe 	.word	0x10001abe
   185ac:	10001a8c 	.word	0x10001a8c
   185b0:	00017da1 	.word	0x00017da1

000185b4 <console_is_init>:

int
console_is_init(void)
{
   185b4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   185b6:	f000 f96d 	bl	18894 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   185ba:	bd08      	pop	{r3, pc}

000185bc <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   185bc:	b510      	push	{r4, lr}
   185be:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   185c0:	4b12      	ldr	r3, [pc, #72]	; (1860c <console_pkg_init+0x50>)
   185c2:	781b      	ldrb	r3, [r3, #0]
   185c4:	b153      	cbz	r3, 185dc <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   185c6:	4812      	ldr	r0, [pc, #72]	; (18610 <console_pkg_init+0x54>)
   185c8:	f7fc ff0c 	bl	153e4 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   185cc:	4811      	ldr	r0, [pc, #68]	; (18614 <console_pkg_init+0x58>)
   185ce:	f7fe f967 	bl	168a0 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   185d2:	f000 f967 	bl	188a4 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   185d6:	b958      	cbnz	r0, 185f0 <console_pkg_init+0x34>
}
   185d8:	b002      	add	sp, #8
   185da:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   185dc:	f7fc f83a 	bl	14654 <hal_debugger_connected>
   185e0:	b100      	cbz	r0, 185e4 <console_pkg_init+0x28>
   185e2:	be01      	bkpt	0x0001
   185e4:	2300      	movs	r3, #0
   185e6:	461a      	mov	r2, r3
   185e8:	4619      	mov	r1, r3
   185ea:	4618      	mov	r0, r3
   185ec:	f7fc fbd4 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   185f0:	f7fc f830 	bl	14654 <hal_debugger_connected>
   185f4:	b100      	cbz	r0, 185f8 <console_pkg_init+0x3c>
   185f6:	be01      	bkpt	0x0001
   185f8:	2000      	movs	r0, #0
   185fa:	9000      	str	r0, [sp, #0]
   185fc:	4b06      	ldr	r3, [pc, #24]	; (18618 <console_pkg_init+0x5c>)
   185fe:	681c      	ldr	r4, [r3, #0]
   18600:	4603      	mov	r3, r0
   18602:	4602      	mov	r2, r0
   18604:	4601      	mov	r1, r0
   18606:	47a0      	blx	r4
}
   18608:	e7e6      	b.n	185d8 <console_pkg_init+0x1c>
   1860a:	bf00      	nop
   1860c:	10001e3c 	.word	0x10001e3c
   18610:	10001a7c 	.word	0x10001a7c
   18614:	10001a98 	.word	0x10001a98
   18618:	1000028c 	.word	0x1000028c

0001861c <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   1861c:	b570      	push	{r4, r5, r6, lr}
   1861e:	4604      	mov	r4, r0
   18620:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   18622:	f000 f827 	bl	18674 <console_get_ticks>
   18626:	b160      	cbz	r0, 18642 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18628:	4b09      	ldr	r3, [pc, #36]	; (18650 <console_vprintf+0x34>)
   1862a:	681b      	ldr	r3, [r3, #0]
   1862c:	b10b      	cbz	r3, 18632 <console_vprintf+0x16>
    num_chars = 0;
   1862e:	2600      	movs	r6, #0
   18630:	e008      	b.n	18644 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   18632:	f7fd ffa1 	bl	16578 <os_time_get>
   18636:	4601      	mov	r1, r0
   18638:	4806      	ldr	r0, [pc, #24]	; (18654 <console_vprintf+0x38>)
   1863a:	f01a fa39 	bl	32ab0 <printf>
   1863e:	4606      	mov	r6, r0
   18640:	e000      	b.n	18644 <console_vprintf+0x28>
    num_chars = 0;
   18642:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   18644:	4629      	mov	r1, r5
   18646:	4620      	mov	r0, r4
   18648:	f01a fa70 	bl	32b2c <vprintf>

    return num_chars;
}
   1864c:	4430      	add	r0, r6
   1864e:	bd70      	pop	{r4, r5, r6, pc}
   18650:	10001a94 	.word	0x10001a94
   18654:	00034344 	.word	0x00034344

00018658 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18658:	b40f      	push	{r0, r1, r2, r3}
   1865a:	b500      	push	{lr}
   1865c:	b083      	sub	sp, #12
   1865e:	a904      	add	r1, sp, #16
   18660:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   18664:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   18666:	f7ff ffd9 	bl	1861c <console_vprintf>
    va_end(args);

    return num_chars;
}
   1866a:	b003      	add	sp, #12
   1866c:	f85d eb04 	ldr.w	lr, [sp], #4
   18670:	b004      	add	sp, #16
   18672:	4770      	bx	lr

00018674 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   18674:	4b01      	ldr	r3, [pc, #4]	; (1867c <console_get_ticks+0x8>)
   18676:	7818      	ldrb	r0, [r3, #0]
   18678:	4770      	bx	lr
   1867a:	bf00      	nop
   1867c:	1000022c 	.word	0x1000022c

00018680 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   18680:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   18682:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   18684:	4798      	blx	r3
}
   18686:	bd08      	pop	{r3, pc}

00018688 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   18688:	6842      	ldr	r2, [r0, #4]
   1868a:	7803      	ldrb	r3, [r0, #0]
   1868c:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   1868e:	7803      	ldrb	r3, [r0, #0]
   18690:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   18692:	3301      	adds	r3, #1
   18694:	3a01      	subs	r2, #1
   18696:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   18698:	7003      	strb	r3, [r0, #0]
}
   1869a:	4770      	bx	lr

0001869c <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   1869c:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   1869e:	6841      	ldr	r1, [r0, #4]
   186a0:	7842      	ldrb	r2, [r0, #1]
   186a2:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   186a4:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   186a6:	3201      	adds	r2, #1
   186a8:	3901      	subs	r1, #1
   186aa:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   186ac:	705a      	strb	r2, [r3, #1]
    return ch;
}
   186ae:	4770      	bx	lr

000186b0 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   186b0:	7803      	ldrb	r3, [r0, #0]
   186b2:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   186b4:	3301      	adds	r3, #1
   186b6:	3a01      	subs	r2, #1
   186b8:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   186ba:	7840      	ldrb	r0, [r0, #1]
}
   186bc:	4298      	cmp	r0, r3
   186be:	bf14      	ite	ne
   186c0:	2000      	movne	r0, #0
   186c2:	2001      	moveq	r0, #1
   186c4:	4770      	bx	lr

000186c6 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   186c6:	7802      	ldrb	r2, [r0, #0]
   186c8:	7840      	ldrb	r0, [r0, #1]
}
   186ca:	4282      	cmp	r2, r0
   186cc:	bf14      	ite	ne
   186ce:	2000      	movne	r0, #0
   186d0:	2001      	moveq	r0, #1
   186d2:	4770      	bx	lr

000186d4 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   186d4:	b538      	push	{r3, r4, r5, lr}
   186d6:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   186d8:	2400      	movs	r4, #0
   186da:	42ac      	cmp	r4, r5
   186dc:	da0d      	bge.n	186fa <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   186de:	4807      	ldr	r0, [pc, #28]	; (186fc <uart_console_tx_flush+0x28>)
   186e0:	f7ff fff1 	bl	186c6 <uart_console_ring_is_empty>
   186e4:	b948      	cbnz	r0, 186fa <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   186e6:	4805      	ldr	r0, [pc, #20]	; (186fc <uart_console_tx_flush+0x28>)
   186e8:	f7ff ffd8 	bl	1869c <uart_console_ring_pull_char>
   186ec:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   186ee:	4b04      	ldr	r3, [pc, #16]	; (18700 <uart_console_tx_flush+0x2c>)
   186f0:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   186f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   186f4:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   186f6:	3401      	adds	r4, #1
   186f8:	e7ef      	b.n	186da <uart_console_tx_flush+0x6>
    }
}
   186fa:	bd38      	pop	{r3, r4, r5, pc}
   186fc:	10001ae8 	.word	0x10001ae8
   18700:	10001b24 	.word	0x10001b24

00018704 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   18704:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   18706:	4805      	ldr	r0, [pc, #20]	; (1871c <uart_console_tx_char+0x18>)
   18708:	f7ff ffdd 	bl	186c6 <uart_console_ring_is_empty>
   1870c:	b918      	cbnz	r0, 18716 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   1870e:	4803      	ldr	r0, [pc, #12]	; (1871c <uart_console_tx_char+0x18>)
   18710:	f7ff ffc4 	bl	1869c <uart_console_ring_pull_char>
}
   18714:	bd08      	pop	{r3, pc}
        return -1;
   18716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1871a:	e7fb      	b.n	18714 <uart_console_tx_char+0x10>
   1871c:	10001ae8 	.word	0x10001ae8

00018720 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   18720:	7ec3      	ldrb	r3, [r0, #27]
   18722:	f003 0306 	and.w	r3, r3, #6
   18726:	2b02      	cmp	r3, #2
   18728:	d000      	beq.n	1872c <uart_console_queue_char+0xc>
   1872a:	4770      	bx	lr
{
   1872c:	b570      	push	{r4, r5, r6, lr}
   1872e:	4605      	mov	r5, r0
   18730:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   18732:	f7fd ffe7 	bl	16704 <os_arch_save_sr>
   18736:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   18738:	e005      	b.n	18746 <uart_console_queue_char+0x26>
            os_time_delay(1);
   1873a:	2001      	movs	r0, #1
   1873c:	f7fd ff48 	bl	165d0 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   18740:	f7fd ffe0 	bl	16704 <os_arch_save_sr>
   18744:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   18746:	480b      	ldr	r0, [pc, #44]	; (18774 <uart_console_queue_char+0x54>)
   18748:	f7ff ffb2 	bl	186b0 <uart_console_ring_is_full>
   1874c:	b150      	cbz	r0, 18764 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   1874e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   18750:	4628      	mov	r0, r5
   18752:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   18754:	4620      	mov	r0, r4
   18756:	f7fd ffdb 	bl	16710 <os_arch_restore_sr>
        if (os_started()) {
   1875a:	f7fc fbdd 	bl	14f18 <os_started>
   1875e:	2800      	cmp	r0, #0
   18760:	d0ee      	beq.n	18740 <uart_console_queue_char+0x20>
   18762:	e7ea      	b.n	1873a <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   18764:	4631      	mov	r1, r6
   18766:	4803      	ldr	r0, [pc, #12]	; (18774 <uart_console_queue_char+0x54>)
   18768:	f7ff ff8e 	bl	18688 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   1876c:	4620      	mov	r0, r4
   1876e:	f7fd ffcf 	bl	16710 <os_arch_restore_sr>
}
   18772:	bd70      	pop	{r4, r5, r6, pc}
   18774:	10001ae8 	.word	0x10001ae8

00018778 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   18778:	b510      	push	{r4, lr}
   1877a:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   1877c:	480c      	ldr	r0, [pc, #48]	; (187b0 <uart_console_rx_char+0x38>)
   1877e:	f7ff ff97 	bl	186b0 <uart_console_ring_is_full>
   18782:	b940      	cbnz	r0, 18796 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   18784:	4621      	mov	r1, r4
   18786:	480a      	ldr	r0, [pc, #40]	; (187b0 <uart_console_rx_char+0x38>)
   18788:	f7ff ff7e 	bl	18688 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   1878c:	4b09      	ldr	r3, [pc, #36]	; (187b4 <uart_console_rx_char+0x3c>)
   1878e:	781b      	ldrb	r3, [r3, #0]
   18790:	b13b      	cbz	r3, 187a2 <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   18792:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   18794:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   18796:	4b08      	ldr	r3, [pc, #32]	; (187b8 <uart_console_rx_char+0x40>)
   18798:	2201      	movs	r2, #1
   1879a:	701a      	strb	r2, [r3, #0]
        return -1;
   1879c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187a0:	e7f8      	b.n	18794 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   187a2:	f7fc fee5 	bl	15570 <os_eventq_dflt_get>
   187a6:	4903      	ldr	r1, [pc, #12]	; (187b4 <uart_console_rx_char+0x3c>)
   187a8:	f7fc fe29 	bl	153fe <os_eventq_put>
    return 0;
   187ac:	2000      	movs	r0, #0
   187ae:	e7f1      	b.n	18794 <uart_console_rx_char+0x1c>
   187b0:	10001ac0 	.word	0x10001ac0
   187b4:	10001b10 	.word	0x10001b10
   187b8:	10001b20 	.word	0x10001b20

000187bc <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   187bc:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   187be:	4b18      	ldr	r3, [pc, #96]	; (18820 <uart_console_rx_char_event+0x64>)
   187c0:	6818      	ldr	r0, [r3, #0]
   187c2:	2800      	cmp	r0, #0
   187c4:	db0b      	blt.n	187de <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   187c6:	b2c0      	uxtb	r0, r0
   187c8:	f7ff fe30 	bl	1842c <console_handle_char>
        if (ret < 0) {
   187cc:	2800      	cmp	r0, #0
   187ce:	da06      	bge.n	187de <uart_console_rx_char_event+0x22>
   187d0:	e024      	b.n	1881c <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   187d2:	4b13      	ldr	r3, [pc, #76]	; (18820 <uart_console_rx_char_event+0x64>)
   187d4:	7818      	ldrb	r0, [r3, #0]
   187d6:	f7ff fe29 	bl	1842c <console_handle_char>
        if (ret < 0) {
   187da:	2800      	cmp	r0, #0
   187dc:	db1e      	blt.n	1881c <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   187de:	4811      	ldr	r0, [pc, #68]	; (18824 <uart_console_rx_char_event+0x68>)
   187e0:	f7ff ff71 	bl	186c6 <uart_console_ring_is_empty>
   187e4:	b9b0      	cbnz	r0, 18814 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   187e6:	f7fd ff8d 	bl	16704 <os_arch_save_sr>
   187ea:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   187ec:	480d      	ldr	r0, [pc, #52]	; (18824 <uart_console_rx_char_event+0x68>)
   187ee:	f7ff ff55 	bl	1869c <uart_console_ring_pull_char>
   187f2:	4b0b      	ldr	r3, [pc, #44]	; (18820 <uart_console_rx_char_event+0x64>)
   187f4:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   187f6:	4620      	mov	r0, r4
   187f8:	f7fd ff8a 	bl	16710 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   187fc:	4b0a      	ldr	r3, [pc, #40]	; (18828 <uart_console_rx_char_event+0x6c>)
   187fe:	781b      	ldrb	r3, [r3, #0]
   18800:	2b00      	cmp	r3, #0
   18802:	d0e6      	beq.n	187d2 <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   18804:	4b08      	ldr	r3, [pc, #32]	; (18828 <uart_console_rx_char_event+0x6c>)
   18806:	2200      	movs	r2, #0
   18808:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   1880a:	4b08      	ldr	r3, [pc, #32]	; (1882c <uart_console_rx_char_event+0x70>)
   1880c:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   1880e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   18810:	4798      	blx	r3
}
   18812:	e7de      	b.n	187d2 <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   18814:	4b02      	ldr	r3, [pc, #8]	; (18820 <uart_console_rx_char_event+0x64>)
   18816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1881a:	601a      	str	r2, [r3, #0]
}
   1881c:	bd10      	pop	{r4, pc}
   1881e:	bf00      	nop
   18820:	10000230 	.word	0x10000230
   18824:	10001ac0 	.word	0x10001ac0
   18828:	10001b20 	.word	0x10001b20
   1882c:	10001b24 	.word	0x10001b24

00018830 <uart_console_blocking_mode>:
{
   18830:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   18832:	f7fd ff67 	bl	16704 <os_arch_save_sr>
   18836:	4604      	mov	r4, r0
    if (write_char_cb) {
   18838:	4b06      	ldr	r3, [pc, #24]	; (18854 <uart_console_blocking_mode+0x24>)
   1883a:	681b      	ldr	r3, [r3, #0]
   1883c:	b12b      	cbz	r3, 1884a <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   1883e:	4b05      	ldr	r3, [pc, #20]	; (18854 <uart_console_blocking_mode+0x24>)
   18840:	4a05      	ldr	r2, [pc, #20]	; (18858 <uart_console_blocking_mode+0x28>)
   18842:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   18844:	2020      	movs	r0, #32
   18846:	f7ff ff45 	bl	186d4 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   1884a:	4620      	mov	r0, r4
   1884c:	f7fd ff60 	bl	16710 <os_arch_restore_sr>
}
   18850:	bd10      	pop	{r4, pc}
   18852:	bf00      	nop
   18854:	10001b28 	.word	0x10001b28
   18858:	00018681 	.word	0x00018681

0001885c <console_out_nolock>:
{
   1885c:	b538      	push	{r3, r4, r5, lr}
   1885e:	4604      	mov	r4, r0
    if (!write_char_cb) {
   18860:	4b0a      	ldr	r3, [pc, #40]	; (1888c <console_out_nolock+0x30>)
   18862:	681b      	ldr	r3, [r3, #0]
   18864:	b153      	cbz	r3, 1887c <console_out_nolock+0x20>
    if ('\n' == c) {
   18866:	280a      	cmp	r0, #10
   18868:	d00a      	beq.n	18880 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   1886a:	4d09      	ldr	r5, [pc, #36]	; (18890 <console_out_nolock+0x34>)
   1886c:	4b07      	ldr	r3, [pc, #28]	; (1888c <console_out_nolock+0x30>)
   1886e:	681b      	ldr	r3, [r3, #0]
   18870:	b2e1      	uxtb	r1, r4
   18872:	6828      	ldr	r0, [r5, #0]
   18874:	4798      	blx	r3
    uart_start_tx(uart_dev);
   18876:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   18878:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1887a:	4798      	blx	r3
}
   1887c:	4620      	mov	r0, r4
   1887e:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   18880:	210d      	movs	r1, #13
   18882:	4a03      	ldr	r2, [pc, #12]	; (18890 <console_out_nolock+0x34>)
   18884:	6810      	ldr	r0, [r2, #0]
   18886:	4798      	blx	r3
   18888:	e7ef      	b.n	1886a <console_out_nolock+0xe>
   1888a:	bf00      	nop
   1888c:	10001b28 	.word	0x10001b28
   18890:	10001b24 	.word	0x10001b24

00018894 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   18894:	4b02      	ldr	r3, [pc, #8]	; (188a0 <uart_console_is_init+0xc>)
   18896:	6818      	ldr	r0, [r3, #0]
}
   18898:	3800      	subs	r0, #0
   1889a:	bf18      	it	ne
   1889c:	2001      	movne	r0, #1
   1889e:	4770      	bx	lr
   188a0:	10001b24 	.word	0x10001b24

000188a4 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   188a4:	b500      	push	{lr}
   188a6:	b087      	sub	sp, #28
    struct uart_conf uc = {
   188a8:	2300      	movs	r3, #0
   188aa:	9301      	str	r3, [sp, #4]
   188ac:	9304      	str	r3, [sp, #16]
   188ae:	9305      	str	r3, [sp, #20]
   188b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   188b4:	9300      	str	r3, [sp, #0]
   188b6:	2308      	movs	r3, #8
   188b8:	f88d 3004 	strb.w	r3, [sp, #4]
   188bc:	2301      	movs	r3, #1
   188be:	f88d 3005 	strb.w	r3, [sp, #5]
   188c2:	4b14      	ldr	r3, [pc, #80]	; (18914 <uart_console_init+0x70>)
   188c4:	9302      	str	r3, [sp, #8]
   188c6:	4b14      	ldr	r3, [pc, #80]	; (18918 <uart_console_init+0x74>)
   188c8:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   188ca:	4b14      	ldr	r3, [pc, #80]	; (1891c <uart_console_init+0x78>)
   188cc:	2220      	movs	r2, #32
   188ce:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   188d0:	4913      	ldr	r1, [pc, #76]	; (18920 <uart_console_init+0x7c>)
   188d2:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   188d4:	4b13      	ldr	r3, [pc, #76]	; (18924 <uart_console_init+0x80>)
   188d6:	4914      	ldr	r1, [pc, #80]	; (18928 <uart_console_init+0x84>)
   188d8:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   188da:	4b14      	ldr	r3, [pc, #80]	; (1892c <uart_console_init+0x88>)
   188dc:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   188de:	4a14      	ldr	r2, [pc, #80]	; (18930 <uart_console_init+0x8c>)
   188e0:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   188e2:	4b14      	ldr	r3, [pc, #80]	; (18934 <uart_console_init+0x90>)
   188e4:	4a14      	ldr	r2, [pc, #80]	; (18938 <uart_console_init+0x94>)
   188e6:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   188e8:	4b14      	ldr	r3, [pc, #80]	; (1893c <uart_console_init+0x98>)
   188ea:	681b      	ldr	r3, [r3, #0]
   188ec:	b11b      	cbz	r3, 188f6 <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   188ee:	2000      	movs	r0, #0
}
   188f0:	b007      	add	sp, #28
   188f2:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   188f6:	466a      	mov	r2, sp
   188f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   188fc:	4810      	ldr	r0, [pc, #64]	; (18940 <uart_console_init+0x9c>)
   188fe:	f7fc fd47 	bl	15390 <os_dev_open>
   18902:	4b0e      	ldr	r3, [pc, #56]	; (1893c <uart_console_init+0x98>)
   18904:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   18906:	b108      	cbz	r0, 1890c <uart_console_init+0x68>
    return 0;
   18908:	2000      	movs	r0, #0
   1890a:	e7f1      	b.n	188f0 <uart_console_init+0x4c>
            return -1;
   1890c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18910:	e7ee      	b.n	188f0 <uart_console_init+0x4c>
   18912:	bf00      	nop
   18914:	00018705 	.word	0x00018705
   18918:	00018779 	.word	0x00018779
   1891c:	10001ae8 	.word	0x10001ae8
   18920:	10001af0 	.word	0x10001af0
   18924:	10001b28 	.word	0x10001b28
   18928:	00018721 	.word	0x00018721
   1892c:	10001ac0 	.word	0x10001ac0
   18930:	10001ac8 	.word	0x10001ac8
   18934:	10001b10 	.word	0x10001b10
   18938:	000187bd 	.word	0x000187bd
   1893c:	10001b24 	.word	0x10001b24
   18940:	0003434c 	.word	0x0003434c

00018944 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   18944:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   18946:	4b0b      	ldr	r3, [pc, #44]	; (18974 <flash_area_find_idx+0x30>)
   18948:	6819      	ldr	r1, [r3, #0]
   1894a:	b179      	cbz	r1, 1896c <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   1894c:	2000      	movs	r0, #0
   1894e:	4b0a      	ldr	r3, [pc, #40]	; (18978 <flash_area_find_idx+0x34>)
   18950:	681b      	ldr	r3, [r3, #0]
   18952:	4283      	cmp	r3, r0
   18954:	dd07      	ble.n	18966 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   18956:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1895a:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   1895e:	4293      	cmp	r3, r2
   18960:	d006      	beq.n	18970 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   18962:	3001      	adds	r0, #1
   18964:	e7f3      	b.n	1894e <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   18966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1896a:	4770      	bx	lr
        return -1;
   1896c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18970:	4770      	bx	lr
   18972:	bf00      	nop
   18974:	10001b2c 	.word	0x10001b2c
   18978:	10001b30 	.word	0x10001b30

0001897c <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   1897c:	2300      	movs	r3, #0
   1897e:	4a13      	ldr	r2, [pc, #76]	; (189cc <flash_map_area_overlaps+0x50>)
   18980:	6812      	ldr	r2, [r2, #0]
   18982:	429a      	cmp	r2, r3
   18984:	dd1f      	ble.n	189c6 <flash_map_area_overlaps+0x4a>
{
   18986:	b430      	push	{r4, r5}
   18988:	e004      	b.n	18994 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   1898a:	3301      	adds	r3, #1
   1898c:	4a0f      	ldr	r2, [pc, #60]	; (189cc <flash_map_area_overlaps+0x50>)
   1898e:	6812      	ldr	r2, [r2, #0]
   18990:	429a      	cmp	r2, r3
   18992:	dd15      	ble.n	189c0 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   18994:	4a0e      	ldr	r2, [pc, #56]	; (189d0 <flash_map_area_overlaps+0x54>)
   18996:	6812      	ldr	r2, [r2, #0]
   18998:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1899c:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   189a0:	7844      	ldrb	r4, [r0, #1]
   189a2:	7851      	ldrb	r1, [r2, #1]
   189a4:	428c      	cmp	r4, r1
   189a6:	d1f0      	bne.n	1898a <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   189a8:	6845      	ldr	r5, [r0, #4]
   189aa:	6881      	ldr	r1, [r0, #8]
   189ac:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   189ae:	6854      	ldr	r4, [r2, #4]
   189b0:	6892      	ldr	r2, [r2, #8]
   189b2:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   189b4:	428c      	cmp	r4, r1
   189b6:	d2e8      	bcs.n	1898a <flash_map_area_overlaps+0xe>
   189b8:	4295      	cmp	r5, r2
   189ba:	d2e6      	bcs.n	1898a <flash_map_area_overlaps+0xe>
                return true;
   189bc:	2001      	movs	r0, #1
   189be:	e000      	b.n	189c2 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   189c0:	2000      	movs	r0, #0
}
   189c2:	bc30      	pop	{r4, r5}
   189c4:	4770      	bx	lr
    return false;
   189c6:	2000      	movs	r0, #0
}
   189c8:	4770      	bx	lr
   189ca:	bf00      	nop
   189cc:	10001b30 	.word	0x10001b30
   189d0:	10001b2c 	.word	0x10001b2c

000189d4 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   189d4:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   189d6:	2400      	movs	r4, #0
   189d8:	e00a      	b.n	189f0 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   189da:	f7fb fe3b 	bl	14654 <hal_debugger_connected>
   189de:	b100      	cbz	r0, 189e2 <flash_map_add_new_dflt_areas+0xe>
   189e0:	be01      	bkpt	0x0001
   189e2:	2300      	movs	r3, #0
   189e4:	461a      	mov	r2, r3
   189e6:	4619      	mov	r1, r3
   189e8:	4618      	mov	r0, r3
   189ea:	f7fc f9d5 	bl	14d98 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   189ee:	3401      	adds	r4, #1
   189f0:	2c05      	cmp	r4, #5
   189f2:	dc28      	bgt.n	18a46 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   189f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   189f8:	4a13      	ldr	r2, [pc, #76]	; (18a48 <flash_map_add_new_dflt_areas+0x74>)
   189fa:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   189fe:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   18a02:	f7ff ff9f 	bl	18944 <flash_area_find_idx>
   18a06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18a0a:	d1f0      	bne.n	189ee <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   18a0c:	4b0f      	ldr	r3, [pc, #60]	; (18a4c <flash_map_add_new_dflt_areas+0x78>)
   18a0e:	681d      	ldr	r5, [r3, #0]
   18a10:	2d09      	cmp	r5, #9
   18a12:	dce2      	bgt.n	189da <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   18a14:	4630      	mov	r0, r6
   18a16:	f7ff ffb1 	bl	1897c <flash_map_area_overlaps>
   18a1a:	2800      	cmp	r0, #0
   18a1c:	d1e7      	bne.n	189ee <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   18a1e:	4b0c      	ldr	r3, [pc, #48]	; (18a50 <flash_map_add_new_dflt_areas+0x7c>)
   18a20:	681b      	ldr	r3, [r3, #0]
   18a22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   18a26:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   18a2a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18a2e:	4a06      	ldr	r2, [pc, #24]	; (18a48 <flash_map_add_new_dflt_areas+0x74>)
   18a30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18a34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18a38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   18a3c:	4a03      	ldr	r2, [pc, #12]	; (18a4c <flash_map_add_new_dflt_areas+0x78>)
   18a3e:	6813      	ldr	r3, [r2, #0]
   18a40:	3301      	adds	r3, #1
   18a42:	6013      	str	r3, [r2, #0]
   18a44:	e7d3      	b.n	189ee <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   18a46:	bd70      	pop	{r4, r5, r6, pc}
   18a48:	00035120 	.word	0x00035120
   18a4c:	10001b30 	.word	0x10001b30
   18a50:	10001b2c 	.word	0x10001b2c

00018a54 <flash_area_open>:
{
   18a54:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
   18a56:	4b0b      	ldr	r3, [pc, #44]	; (18a84 <flash_area_open+0x30>)
   18a58:	681c      	ldr	r4, [r3, #0]
   18a5a:	b164      	cbz	r4, 18a76 <flash_area_open+0x22>
   18a5c:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
   18a5e:	f7ff ff71 	bl	18944 <flash_area_find_idx>
    if (idx == -1) {
   18a62:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18a66:	d009      	beq.n	18a7c <flash_area_open+0x28>
    *fap = &flash_map[idx];
   18a68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18a6c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   18a70:	6028      	str	r0, [r5, #0]
    return 0;
   18a72:	2000      	movs	r0, #0
}
   18a74:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
   18a76:	f06f 0006 	mvn.w	r0, #6
   18a7a:	e7fb      	b.n	18a74 <flash_area_open+0x20>
        return SYS_ENOENT;
   18a7c:	f06f 0003 	mvn.w	r0, #3
   18a80:	e7f8      	b.n	18a74 <flash_area_open+0x20>
   18a82:	bf00      	nop
   18a84:	10001b2c 	.word	0x10001b2c

00018a88 <flash_area_to_sectors>:
{
   18a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18a8c:	b084      	sub	sp, #16
   18a8e:	460f      	mov	r7, r1
   18a90:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   18a92:	fa5f f880 	uxtb.w	r8, r0
   18a96:	a903      	add	r1, sp, #12
   18a98:	4640      	mov	r0, r8
   18a9a:	f7ff ffdb 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   18a9e:	4681      	mov	r9, r0
   18aa0:	b118      	cbz	r0, 18aaa <flash_area_to_sectors+0x22>
}
   18aa2:	4648      	mov	r0, r9
   18aa4:	b004      	add	sp, #16
   18aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   18aaa:	2300      	movs	r3, #0
   18aac:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   18aae:	9b03      	ldr	r3, [sp, #12]
   18ab0:	7858      	ldrb	r0, [r3, #1]
   18ab2:	f017 fb0b 	bl	300cc <hal_bsp_flash_dev>
   18ab6:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   18ab8:	464c      	mov	r4, r9
   18aba:	e003      	b.n	18ac4 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   18abc:	683b      	ldr	r3, [r7, #0]
   18abe:	3301      	adds	r3, #1
   18ac0:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   18ac2:	3401      	adds	r4, #1
   18ac4:	68eb      	ldr	r3, [r5, #12]
   18ac6:	42a3      	cmp	r3, r4
   18ac8:	ddeb      	ble.n	18aa2 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   18aca:	682b      	ldr	r3, [r5, #0]
   18acc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   18ad0:	ab01      	add	r3, sp, #4
   18ad2:	aa02      	add	r2, sp, #8
   18ad4:	4621      	mov	r1, r4
   18ad6:	4628      	mov	r0, r5
   18ad8:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   18ada:	9903      	ldr	r1, [sp, #12]
   18adc:	684b      	ldr	r3, [r1, #4]
   18ade:	9a02      	ldr	r2, [sp, #8]
   18ae0:	4293      	cmp	r3, r2
   18ae2:	d8ee      	bhi.n	18ac2 <flash_area_to_sectors+0x3a>
   18ae4:	6889      	ldr	r1, [r1, #8]
   18ae6:	440b      	add	r3, r1
   18ae8:	429a      	cmp	r2, r3
   18aea:	d2ea      	bcs.n	18ac2 <flash_area_to_sectors+0x3a>
            if (ret) {
   18aec:	2e00      	cmp	r6, #0
   18aee:	d0e5      	beq.n	18abc <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   18af0:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   18af4:	9b03      	ldr	r3, [sp, #12]
   18af6:	785b      	ldrb	r3, [r3, #1]
   18af8:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   18afa:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   18afc:	9b01      	ldr	r3, [sp, #4]
   18afe:	60b3      	str	r3, [r6, #8]
                ret++;
   18b00:	360c      	adds	r6, #12
   18b02:	e7db      	b.n	18abc <flash_area_to_sectors+0x34>

00018b04 <flash_area_read>:
{
   18b04:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b06:	6884      	ldr	r4, [r0, #8]
   18b08:	428c      	cmp	r4, r1
   18b0a:	d308      	bcc.n	18b1e <flash_area_read+0x1a>
   18b0c:	18cd      	adds	r5, r1, r3
   18b0e:	42ac      	cmp	r4, r5
   18b10:	d308      	bcc.n	18b24 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   18b12:	6844      	ldr	r4, [r0, #4]
   18b14:	4421      	add	r1, r4
   18b16:	7840      	ldrb	r0, [r0, #1]
   18b18:	f017 fc3b 	bl	30392 <hal_flash_read>
}
   18b1c:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   18b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b22:	e7fb      	b.n	18b1c <flash_area_read+0x18>
   18b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b28:	e7f8      	b.n	18b1c <flash_area_read+0x18>

00018b2a <flash_area_write>:
{
   18b2a:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b2c:	6884      	ldr	r4, [r0, #8]
   18b2e:	428c      	cmp	r4, r1
   18b30:	d308      	bcc.n	18b44 <flash_area_write+0x1a>
   18b32:	18cd      	adds	r5, r1, r3
   18b34:	42ac      	cmp	r4, r5
   18b36:	d308      	bcc.n	18b4a <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   18b38:	6844      	ldr	r4, [r0, #4]
   18b3a:	4421      	add	r1, r4
   18b3c:	7840      	ldrb	r0, [r0, #1]
   18b3e:	f017 fc51 	bl	303e4 <hal_flash_write>
}
   18b42:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   18b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b48:	e7fb      	b.n	18b42 <flash_area_write+0x18>
   18b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b4e:	e7f8      	b.n	18b42 <flash_area_write+0x18>

00018b50 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b50:	6883      	ldr	r3, [r0, #8]
   18b52:	428b      	cmp	r3, r1
   18b54:	d309      	bcc.n	18b6a <flash_area_erase+0x1a>
{
   18b56:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   18b58:	188c      	adds	r4, r1, r2
   18b5a:	42a3      	cmp	r3, r4
   18b5c:	d308      	bcc.n	18b70 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   18b5e:	6843      	ldr	r3, [r0, #4]
   18b60:	4419      	add	r1, r3
   18b62:	7840      	ldrb	r0, [r0, #1]
   18b64:	f017 fc76 	bl	30454 <hal_flash_erase>
}
   18b68:	bd10      	pop	{r4, pc}
        return -1;
   18b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18b6e:	4770      	bx	lr
        return -1;
   18b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18b74:	e7f8      	b.n	18b68 <flash_area_erase+0x18>

00018b76 <flash_area_align>:
{
   18b76:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   18b78:	7840      	ldrb	r0, [r0, #1]
   18b7a:	f017 fbfa 	bl	30372 <hal_flash_align>
}
   18b7e:	bd08      	pop	{r3, pc}

00018b80 <flash_area_erased_val>:
{
   18b80:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   18b82:	7840      	ldrb	r0, [r0, #1]
   18b84:	f017 fbfd 	bl	30382 <hal_flash_erased_val>
}
   18b88:	bd08      	pop	{r3, pc}

00018b8a <flash_area_is_empty>:
{
   18b8a:	b510      	push	{r4, lr}
   18b8c:	460c      	mov	r4, r1
    *empty = false;
   18b8e:	2300      	movs	r3, #0
   18b90:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   18b92:	6882      	ldr	r2, [r0, #8]
   18b94:	6841      	ldr	r1, [r0, #4]
   18b96:	7840      	ldrb	r0, [r0, #1]
   18b98:	f017 fd16 	bl	305c8 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   18b9c:	2800      	cmp	r0, #0
   18b9e:	db02      	blt.n	18ba6 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   18ba0:	2801      	cmp	r0, #1
   18ba2:	d001      	beq.n	18ba8 <flash_area_is_empty+0x1e>
    return 0;
   18ba4:	2000      	movs	r0, #0
}
   18ba6:	bd10      	pop	{r4, pc}
        *empty = true;
   18ba8:	2301      	movs	r3, #1
   18baa:	7023      	strb	r3, [r4, #0]
    return 0;
   18bac:	2000      	movs	r0, #0
   18bae:	e7fa      	b.n	18ba6 <flash_area_is_empty+0x1c>

00018bb0 <flash_area_read_is_empty>:
{
   18bb0:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   18bb2:	6844      	ldr	r4, [r0, #4]
   18bb4:	4421      	add	r1, r4
   18bb6:	7840      	ldrb	r0, [r0, #1]
   18bb8:	f017 fcd5 	bl	30566 <hal_flash_isempty>
}
   18bbc:	bd10      	pop	{r4, pc}

00018bbe <flash_area_id_from_image_slot>:
    switch (slot) {
   18bbe:	b170      	cbz	r0, 18bde <flash_area_id_from_image_slot+0x20>
{
   18bc0:	b508      	push	{r3, lr}
    switch (slot) {
   18bc2:	2801      	cmp	r0, #1
   18bc4:	d101      	bne.n	18bca <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   18bc6:	2002      	movs	r0, #2
}
   18bc8:	bd08      	pop	{r3, pc}
        assert(0);
   18bca:	f7fb fd43 	bl	14654 <hal_debugger_connected>
   18bce:	b100      	cbz	r0, 18bd2 <flash_area_id_from_image_slot+0x14>
   18bd0:	be01      	bkpt	0x0001
   18bd2:	2300      	movs	r3, #0
   18bd4:	461a      	mov	r2, r3
   18bd6:	4619      	mov	r1, r3
   18bd8:	4618      	mov	r0, r3
   18bda:	f7fc f8dd 	bl	14d98 <__assert_func>
    switch (slot) {
   18bde:	2001      	movs	r0, #1
}
   18be0:	4770      	bx	lr
	...

00018be4 <flash_map_init>:

void
flash_map_init(void)
{
   18be4:	b510      	push	{r4, lr}
   18be6:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18be8:	4b13      	ldr	r3, [pc, #76]	; (18c38 <flash_map_init+0x54>)
   18bea:	781b      	ldrb	r3, [r3, #0]
   18bec:	b163      	cbz	r3, 18c08 <flash_map_init+0x24>

    rc = hal_flash_init();
   18bee:	f017 fbaa 	bl	30346 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18bf2:	b998      	cbnz	r0, 18c1c <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   18bf4:	4b11      	ldr	r3, [pc, #68]	; (18c3c <flash_map_init+0x58>)
   18bf6:	4a12      	ldr	r2, [pc, #72]	; (18c40 <flash_map_init+0x5c>)
   18bf8:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   18bfa:	4b12      	ldr	r3, [pc, #72]	; (18c44 <flash_map_init+0x60>)
   18bfc:	2206      	movs	r2, #6
   18bfe:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   18c00:	f7ff fee8 	bl	189d4 <flash_map_add_new_dflt_areas>
}
   18c04:	b002      	add	sp, #8
   18c06:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18c08:	f7fb fd24 	bl	14654 <hal_debugger_connected>
   18c0c:	b100      	cbz	r0, 18c10 <flash_map_init+0x2c>
   18c0e:	be01      	bkpt	0x0001
   18c10:	2300      	movs	r3, #0
   18c12:	461a      	mov	r2, r3
   18c14:	4619      	mov	r1, r3
   18c16:	4618      	mov	r0, r3
   18c18:	f7fc f8be 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18c1c:	f7fb fd1a 	bl	14654 <hal_debugger_connected>
   18c20:	b100      	cbz	r0, 18c24 <flash_map_init+0x40>
   18c22:	be01      	bkpt	0x0001
   18c24:	2000      	movs	r0, #0
   18c26:	9000      	str	r0, [sp, #0]
   18c28:	4b07      	ldr	r3, [pc, #28]	; (18c48 <flash_map_init+0x64>)
   18c2a:	681c      	ldr	r4, [r3, #0]
   18c2c:	4603      	mov	r3, r0
   18c2e:	4602      	mov	r2, r0
   18c30:	4601      	mov	r1, r0
   18c32:	47a0      	blx	r4
   18c34:	e7de      	b.n	18bf4 <flash_map_init+0x10>
   18c36:	bf00      	nop
   18c38:	10001e3c 	.word	0x10001e3c
   18c3c:	10001b2c 	.word	0x10001b2c
   18c40:	00035120 	.word	0x00035120
   18c44:	10001b30 	.word	0x10001b30
   18c48:	1000028c 	.word	0x1000028c

00018c4c <id_conf_export>:
}

static int
id_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   18c4c:	b510      	push	{r4, lr}
   18c4e:	b098      	sub	sp, #96	; 0x60
   18c50:	4604      	mov	r4, r0
    uint8_t src_buf[HAL_BSP_MAX_ID_LEN];
    char str[sizeof(src_buf) * 2];
    int len;

    if (tgt == CONF_EXPORT_SHOW) {
   18c52:	2901      	cmp	r1, #1
   18c54:	d005      	beq.n	18c62 <id_conf_export+0x16>
#if MYNEWT_VAL(ID_TARGET_PRESENT)
        export_func("id/target", MYNEWT_VAL(TARGET_NAME));
#endif
    }
#if MYNEWT_VAL(ID_SERIAL_PRESENT)
    export_func("id/serial", id_serial);
   18c56:	4911      	ldr	r1, [pc, #68]	; (18c9c <id_conf_export+0x50>)
   18c58:	4811      	ldr	r0, [pc, #68]	; (18ca0 <id_conf_export+0x54>)
   18c5a:	47a0      	blx	r4
        export_func("id/model", (char *)id_model);
    }
#endif /* ID_MODEL_LOCAL */
#endif /* ID_MODEL_PRESENT */
    return 0;
}
   18c5c:	2000      	movs	r0, #0
   18c5e:	b018      	add	sp, #96	; 0x60
   18c60:	bd10      	pop	{r4, pc}
        len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   18c62:	2120      	movs	r1, #32
   18c64:	a810      	add	r0, sp, #64	; 0x40
   18c66:	f017 fa7d 	bl	30164 <hal_bsp_hw_id>
        if (len > 0) {
   18c6a:	1e01      	subs	r1, r0, #0
   18c6c:	dc0e      	bgt.n	18c8c <id_conf_export+0x40>
        export_func("id/hwid", str);
   18c6e:	4669      	mov	r1, sp
   18c70:	480c      	ldr	r0, [pc, #48]	; (18ca4 <id_conf_export+0x58>)
   18c72:	47a0      	blx	r4
        export_func("id/bsp", (char *)id_bsp_str);
   18c74:	4b0c      	ldr	r3, [pc, #48]	; (18ca8 <id_conf_export+0x5c>)
   18c76:	6819      	ldr	r1, [r3, #0]
   18c78:	480c      	ldr	r0, [pc, #48]	; (18cac <id_conf_export+0x60>)
   18c7a:	47a0      	blx	r4
        export_func("id/app", (char *)id_app_str);
   18c7c:	4b0c      	ldr	r3, [pc, #48]	; (18cb0 <id_conf_export+0x64>)
   18c7e:	6819      	ldr	r1, [r3, #0]
   18c80:	480c      	ldr	r0, [pc, #48]	; (18cb4 <id_conf_export+0x68>)
   18c82:	47a0      	blx	r4
        export_func("id/mfghash", (char *)id_mfghash);
   18c84:	490c      	ldr	r1, [pc, #48]	; (18cb8 <id_conf_export+0x6c>)
   18c86:	480d      	ldr	r0, [pc, #52]	; (18cbc <id_conf_export+0x70>)
   18c88:	47a0      	blx	r4
   18c8a:	e7e4      	b.n	18c56 <id_conf_export+0xa>
            conf_str_from_bytes(src_buf, len, str, sizeof(str));
   18c8c:	2340      	movs	r3, #64	; 0x40
   18c8e:	466a      	mov	r2, sp
   18c90:	eb0d 0003 	add.w	r0, sp, r3
   18c94:	f7fe fd32 	bl	176fc <conf_str_from_bytes>
   18c98:	e7e9      	b.n	18c6e <id_conf_export+0x22>
   18c9a:	bf00      	nop
   18c9c:	10001b90 	.word	0x10001b90
   18ca0:	00034378 	.word	0x00034378
   18ca4:	00034354 	.word	0x00034354
   18ca8:	10000238 	.word	0x10000238
   18cac:	0003435c 	.word	0x0003435c
   18cb0:	10000234 	.word	0x10000234
   18cb4:	00034364 	.word	0x00034364
   18cb8:	10001b34 	.word	0x10001b34
   18cbc:	0003436c 	.word	0x0003436c

00018cc0 <id_conf_get>:
    if (argc == 1) {
   18cc0:	2801      	cmp	r0, #1
   18cc2:	d136      	bne.n	18d32 <id_conf_get+0x72>
{
   18cc4:	b570      	push	{r4, r5, r6, lr}
   18cc6:	b088      	sub	sp, #32
   18cc8:	4616      	mov	r6, r2
   18cca:	461c      	mov	r4, r3
        if (!strcmp(argv[0], "hwid")) {
   18ccc:	680d      	ldr	r5, [r1, #0]
   18cce:	491b      	ldr	r1, [pc, #108]	; (18d3c <id_conf_get+0x7c>)
   18cd0:	4628      	mov	r0, r5
   18cd2:	f7fd ff2c 	bl	16b2e <strcmp>
   18cd6:	b1a8      	cbz	r0, 18d04 <id_conf_get+0x44>
        } else if (!strcmp(argv[0], "bsp")) {
   18cd8:	4919      	ldr	r1, [pc, #100]	; (18d40 <id_conf_get+0x80>)
   18cda:	4628      	mov	r0, r5
   18cdc:	f7fd ff27 	bl	16b2e <strcmp>
   18ce0:	b1f0      	cbz	r0, 18d20 <id_conf_get+0x60>
        } else if (!strcmp(argv[0], "app")) {
   18ce2:	4918      	ldr	r1, [pc, #96]	; (18d44 <id_conf_get+0x84>)
   18ce4:	4628      	mov	r0, r5
   18ce6:	f7fd ff22 	bl	16b2e <strcmp>
   18cea:	b1e8      	cbz	r0, 18d28 <id_conf_get+0x68>
        } else if (!strcmp(argv[0], "serial")) {
   18cec:	4916      	ldr	r1, [pc, #88]	; (18d48 <id_conf_get+0x88>)
   18cee:	4628      	mov	r0, r5
   18cf0:	f7fd ff1d 	bl	16b2e <strcmp>
   18cf4:	b1f8      	cbz	r0, 18d36 <id_conf_get+0x76>
        } else if (!strcmp(argv[0], "mfghash")) {
   18cf6:	4915      	ldr	r1, [pc, #84]	; (18d4c <id_conf_get+0x8c>)
   18cf8:	4628      	mov	r0, r5
   18cfa:	f7fd ff18 	bl	16b2e <strcmp>
   18cfe:	b9b0      	cbnz	r0, 18d2e <id_conf_get+0x6e>
            return id_mfghash;
   18d00:	4813      	ldr	r0, [pc, #76]	; (18d50 <id_conf_get+0x90>)
   18d02:	e00f      	b.n	18d24 <id_conf_get+0x64>
            len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   18d04:	2120      	movs	r1, #32
   18d06:	4668      	mov	r0, sp
   18d08:	f017 fa2c 	bl	30164 <hal_bsp_hw_id>
            if (len > 0) {
   18d0c:	1e01      	subs	r1, r0, #0
   18d0e:	dc01      	bgt.n	18d14 <id_conf_get+0x54>
    return NULL;
   18d10:	2000      	movs	r0, #0
   18d12:	e007      	b.n	18d24 <id_conf_get+0x64>
                return conf_str_from_bytes(src_buf, len, val, val_len_max);
   18d14:	4623      	mov	r3, r4
   18d16:	4632      	mov	r2, r6
   18d18:	4668      	mov	r0, sp
   18d1a:	f7fe fcef 	bl	176fc <conf_str_from_bytes>
   18d1e:	e001      	b.n	18d24 <id_conf_get+0x64>
            return (char *)id_bsp_str;
   18d20:	4b0c      	ldr	r3, [pc, #48]	; (18d54 <id_conf_get+0x94>)
   18d22:	6818      	ldr	r0, [r3, #0]
}
   18d24:	b008      	add	sp, #32
   18d26:	bd70      	pop	{r4, r5, r6, pc}
            return (char *)id_app_str;
   18d28:	4b0b      	ldr	r3, [pc, #44]	; (18d58 <id_conf_get+0x98>)
   18d2a:	6818      	ldr	r0, [r3, #0]
   18d2c:	e7fa      	b.n	18d24 <id_conf_get+0x64>
    return NULL;
   18d2e:	2000      	movs	r0, #0
   18d30:	e7f8      	b.n	18d24 <id_conf_get+0x64>
   18d32:	2000      	movs	r0, #0
}
   18d34:	4770      	bx	lr
            return (char *)id_serial;
   18d36:	4809      	ldr	r0, [pc, #36]	; (18d5c <id_conf_get+0x9c>)
   18d38:	e7f4      	b.n	18d24 <id_conf_get+0x64>
   18d3a:	bf00      	nop
   18d3c:	00034384 	.word	0x00034384
   18d40:	0003438c 	.word	0x0003438c
   18d44:	00034390 	.word	0x00034390
   18d48:	00034394 	.word	0x00034394
   18d4c:	0003439c 	.word	0x0003439c
   18d50:	10001b34 	.word	0x10001b34
   18d54:	10000238 	.word	0x10000238
   18d58:	10000234 	.word	0x10000234
   18d5c:	10001b90 	.word	0x10001b90

00018d60 <id_conf_set>:
    if (argc == 1) {
   18d60:	2801      	cmp	r0, #1
   18d62:	d001      	beq.n	18d68 <id_conf_set+0x8>
    return OS_ENOENT;
   18d64:	200a      	movs	r0, #10
}
   18d66:	4770      	bx	lr
{
   18d68:	b510      	push	{r4, lr}
   18d6a:	460b      	mov	r3, r1
   18d6c:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "serial")) {
   18d6e:	4907      	ldr	r1, [pc, #28]	; (18d8c <id_conf_set+0x2c>)
   18d70:	6818      	ldr	r0, [r3, #0]
   18d72:	f7fd fedc 	bl	16b2e <strcmp>
   18d76:	b108      	cbz	r0, 18d7c <id_conf_set+0x1c>
    return OS_ENOENT;
   18d78:	200a      	movs	r0, #10
}
   18d7a:	bd10      	pop	{r4, pc}
            return CONF_VALUE_SET(val, CONF_STRING, id_serial);
   18d7c:	2340      	movs	r3, #64	; 0x40
   18d7e:	4a04      	ldr	r2, [pc, #16]	; (18d90 <id_conf_set+0x30>)
   18d80:	2106      	movs	r1, #6
   18d82:	4620      	mov	r0, r4
   18d84:	f7fe fba7 	bl	174d6 <conf_value_from_str>
   18d88:	e7f7      	b.n	18d7a <id_conf_set+0x1a>
   18d8a:	bf00      	nop
   18d8c:	00034394 	.word	0x00034394
   18d90:	10001b90 	.word	0x10001b90

00018d94 <id_read_mfghash>:

static void
id_read_mfghash(void)
{
   18d94:	b530      	push	{r4, r5, lr}
   18d96:	b08b      	sub	sp, #44	; 0x2c
    uint8_t raw_hash[MFG_HASH_SZ];
    struct mfg_reader reader;
    int str_off;
    int rc;

    memset(id_mfghash, 0, sizeof id_mfghash);
   18d98:	225a      	movs	r2, #90	; 0x5a
   18d9a:	2100      	movs	r1, #0
   18d9c:	4814      	ldr	r0, [pc, #80]	; (18df0 <id_read_mfghash+0x5c>)
   18d9e:	f7fd feaa 	bl	16af6 <memset>

    mfg_open(&reader);
   18da2:	4668      	mov	r0, sp
   18da4:	f000 fe6c 	bl	19a80 <mfg_open>

    str_off = 0;
   18da8:	2400      	movs	r4, #0
   18daa:	e009      	b.n	18dc0 <id_read_mfghash+0x2c>
            id_mfghash[str_off] = ':';
            str_off++;
        }

        /* Append the SHA256 hash as a base64-encoded string. */
        base64_encode(raw_hash, sizeof raw_hash, &id_mfghash[str_off], 1);
   18dac:	4d10      	ldr	r5, [pc, #64]	; (18df0 <id_read_mfghash+0x5c>)
   18dae:	2301      	movs	r3, #1
   18db0:	192a      	adds	r2, r5, r4
   18db2:	2120      	movs	r1, #32
   18db4:	a802      	add	r0, sp, #8
   18db6:	f015 fb5b 	bl	2e470 <base64_encode>
        str_off += ID_BASE64_MFG_HASH_SZ;
   18dba:	342c      	adds	r4, #44	; 0x2c

        id_mfghash[str_off] = '\0';
   18dbc:	2300      	movs	r3, #0
   18dbe:	552b      	strb	r3, [r5, r4]
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_HASH);
   18dc0:	2101      	movs	r1, #1
   18dc2:	4668      	mov	r0, sp
   18dc4:	f000 fe24 	bl	19a10 <mfg_seek_next_with_type>
        if (rc != 0) {
   18dc8:	b978      	cbnz	r0, 18dea <id_read_mfghash+0x56>
        if (str_off + ID_BASE64_MFG_HASH_SZ + 1 > sizeof id_mfghash) {
   18dca:	f104 032d 	add.w	r3, r4, #45	; 0x2d
   18dce:	2b5a      	cmp	r3, #90	; 0x5a
   18dd0:	d80b      	bhi.n	18dea <id_read_mfghash+0x56>
        rc = mfg_read_tlv_hash(&reader, raw_hash);
   18dd2:	a902      	add	r1, sp, #8
   18dd4:	4668      	mov	r0, sp
   18dd6:	f000 fe2d 	bl	19a34 <mfg_read_tlv_hash>
        if (rc != 0) {
   18dda:	b930      	cbnz	r0, 18dea <id_read_mfghash+0x56>
        if (str_off != 0) {
   18ddc:	2c00      	cmp	r4, #0
   18dde:	d0e5      	beq.n	18dac <id_read_mfghash+0x18>
            id_mfghash[str_off] = ':';
   18de0:	4b03      	ldr	r3, [pc, #12]	; (18df0 <id_read_mfghash+0x5c>)
   18de2:	223a      	movs	r2, #58	; 0x3a
   18de4:	551a      	strb	r2, [r3, r4]
            str_off++;
   18de6:	3401      	adds	r4, #1
   18de8:	e7e0      	b.n	18dac <id_read_mfghash+0x18>
    }
}
   18dea:	b00b      	add	sp, #44	; 0x2c
   18dec:	bd30      	pop	{r4, r5, pc}
   18dee:	bf00      	nop
   18df0:	10001b34 	.word	0x10001b34

00018df4 <id_init>:

void
id_init(void)
{
   18df4:	b510      	push	{r4, lr}
   18df6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18df8:	4b10      	ldr	r3, [pc, #64]	; (18e3c <id_init+0x48>)
   18dfa:	781b      	ldrb	r3, [r3, #0]
   18dfc:	b13b      	cbz	r3, 18e0e <id_init+0x1a>

    rc = conf_register(&id_conf);
   18dfe:	4810      	ldr	r0, [pc, #64]	; (18e40 <id_init+0x4c>)
   18e00:	f7fe fb26 	bl	17450 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18e04:	b968      	cbnz	r0, 18e22 <id_init+0x2e>

    /* Attempt to read the manufacturing image hash from the meta region. */
    id_read_mfghash();
   18e06:	f7ff ffc5 	bl	18d94 <id_read_mfghash>
}
   18e0a:	b002      	add	sp, #8
   18e0c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18e0e:	f7fb fc21 	bl	14654 <hal_debugger_connected>
   18e12:	b100      	cbz	r0, 18e16 <id_init+0x22>
   18e14:	be01      	bkpt	0x0001
   18e16:	2300      	movs	r3, #0
   18e18:	461a      	mov	r2, r3
   18e1a:	4619      	mov	r1, r3
   18e1c:	4618      	mov	r0, r3
   18e1e:	f7fb ffbb 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18e22:	f7fb fc17 	bl	14654 <hal_debugger_connected>
   18e26:	b100      	cbz	r0, 18e2a <id_init+0x36>
   18e28:	be01      	bkpt	0x0001
   18e2a:	2000      	movs	r0, #0
   18e2c:	9000      	str	r0, [sp, #0]
   18e2e:	4b05      	ldr	r3, [pc, #20]	; (18e44 <id_init+0x50>)
   18e30:	681c      	ldr	r4, [r3, #0]
   18e32:	4603      	mov	r3, r0
   18e34:	4602      	mov	r2, r0
   18e36:	4601      	mov	r1, r0
   18e38:	47a0      	blx	r4
   18e3a:	e7e4      	b.n	18e06 <id_init+0x12>
   18e3c:	10001e3c 	.word	0x10001e3c
   18e40:	1000023c 	.word	0x1000023c
   18e44:	1000028c 	.word	0x1000028c

00018e48 <log_module_find_idx>:
    return (next);
}

static int
log_module_find_idx(uint8_t id)
{
   18e48:	4602      	mov	r2, r0
    const struct log_module_entry *entry;
    int i;

    for (i = 0; i < g_log_module_count; i++) {
   18e4a:	2000      	movs	r0, #0
   18e4c:	4b06      	ldr	r3, [pc, #24]	; (18e68 <log_module_find_idx+0x20>)
   18e4e:	681b      	ldr	r3, [r3, #0]
   18e50:	4283      	cmp	r3, r0
   18e52:	dd06      	ble.n	18e62 <log_module_find_idx+0x1a>
        entry = &g_log_module_list[i];
        if (entry->id == id) {
   18e54:	4b05      	ldr	r3, [pc, #20]	; (18e6c <log_module_find_idx+0x24>)
   18e56:	f933 3030 	ldrsh.w	r3, [r3, r0, lsl #3]
   18e5a:	4293      	cmp	r3, r2
   18e5c:	d003      	beq.n	18e66 <log_module_find_idx+0x1e>
    for (i = 0; i < g_log_module_count; i++) {
   18e5e:	3001      	adds	r0, #1
   18e60:	e7f4      	b.n	18e4c <log_module_find_idx+0x4>
            return i;
        }
    }

    return -1;
   18e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18e66:	4770      	bx	lr
   18e68:	10001bd8 	.word	0x10001bd8
   18e6c:	10001bdc 	.word	0x10001bdc

00018e70 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   18e70:	4b05      	ldr	r3, [pc, #20]	; (18e88 <log_registered+0x18>)
   18e72:	681b      	ldr	r3, [r3, #0]
   18e74:	b11b      	cbz	r3, 18e7e <log_registered+0xe>
        if (cur == log) {
   18e76:	4283      	cmp	r3, r0
   18e78:	d003      	beq.n	18e82 <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   18e7a:	68db      	ldr	r3, [r3, #12]
   18e7c:	e7fa      	b.n	18e74 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   18e7e:	2000      	movs	r0, #0
   18e80:	4770      	bx	lr
            return 1;
   18e82:	2001      	movs	r0, #1
}
   18e84:	4770      	bx	lr
   18e86:	bf00      	nop
   18e88:	1000025c 	.word	0x1000025c

00018e8c <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   18e8c:	2802      	cmp	r0, #2
   18e8e:	d801      	bhi.n	18e94 <log_chk_type+0x8>
    rc = OS_OK;
   18e90:	2000      	movs	r0, #0
   18e92:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   18e94:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   18e96:	4770      	bx	lr

00018e98 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   18e98:	8b43      	ldrh	r3, [r0, #26]
   18e9a:	b11b      	cbz	r3, 18ea4 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   18e9c:	428b      	cmp	r3, r1
   18e9e:	d303      	bcc.n	18ea8 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   18ea0:	2000      	movs	r0, #0
   18ea2:	4770      	bx	lr
   18ea4:	2000      	movs	r0, #0
   18ea6:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   18ea8:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   18eaa:	4770      	bx	lr

00018eac <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   18eac:	b500      	push	{lr}
   18eae:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   18eb0:	6903      	ldr	r3, [r0, #16]
   18eb2:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   18eb4:	9b01      	ldr	r3, [sp, #4]
   18eb6:	b10b      	cbz	r3, 18ebc <log_call_append_cb+0x10>
        cb(log, idx);
   18eb8:	9b01      	ldr	r3, [sp, #4]
   18eba:	4798      	blx	r3
    }
}
   18ebc:	b003      	add	sp, #12
   18ebe:	f85d fb04 	ldr.w	pc, [sp], #4
   18ec2:	0000      	movs	r0, r0
   18ec4:	0000      	movs	r0, r0
	...

00018ec8 <log_append_prepare>:
{
   18ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ecc:	b085      	sub	sp, #20
   18ece:	4606      	mov	r6, r0
   18ed0:	468a      	mov	sl, r1
   18ed2:	4615      	mov	r5, r2
   18ed4:	461f      	mov	r7, r3
   18ed6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    rc = log_chk_type(etype);
   18ed8:	4618      	mov	r0, r3
   18eda:	f7ff ffd7 	bl	18e8c <log_chk_type>
    assert(rc == OS_OK);
   18ede:	2800      	cmp	r0, #0
   18ee0:	d13e      	bne.n	18f60 <log_append_prepare+0x98>
    if (log->l_name == NULL || log->l_log == NULL) {
   18ee2:	6833      	ldr	r3, [r6, #0]
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d074      	beq.n	18fd2 <log_append_prepare+0x10a>
   18ee8:	6873      	ldr	r3, [r6, #4]
   18eea:	2b00      	cmp	r3, #0
   18eec:	d074      	beq.n	18fd8 <log_append_prepare+0x110>
    if (level > LOG_LEVEL_MAX) {
   18eee:	2d0f      	cmp	r5, #15
   18ef0:	d900      	bls.n	18ef4 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   18ef2:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   18ef4:	681b      	ldr	r3, [r3, #0]
   18ef6:	2b02      	cmp	r3, #2
   18ef8:	d03c      	beq.n	18f74 <log_append_prepare+0xac>
    if (level < log->l_level) {
   18efa:	7e33      	ldrb	r3, [r6, #24]
   18efc:	42ab      	cmp	r3, r5
   18efe:	d86e      	bhi.n	18fde <log_append_prepare+0x116>
    if (level < log_level_get(module)) {
   18f00:	4650      	mov	r0, sl
   18f02:	f000 fae7 	bl	194d4 <log_level_get>
   18f06:	42a8      	cmp	r0, r5
   18f08:	d86c      	bhi.n	18fe4 <log_append_prepare+0x11c>
    OS_ENTER_CRITICAL(sr);
   18f0a:	f7fd fbfb 	bl	16704 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   18f0e:	4b3a      	ldr	r3, [pc, #232]	; (18ff8 <log_append_prepare+0x130>)
   18f10:	f8d3 b000 	ldr.w	fp, [r3]
   18f14:	f10b 0201 	add.w	r2, fp, #1
   18f18:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   18f1a:	f7fd fbf9 	bl	16710 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   18f1e:	2100      	movs	r1, #0
   18f20:	4668      	mov	r0, sp
   18f22:	f7fd fb69 	bl	165f8 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   18f26:	4606      	mov	r6, r0
   18f28:	b938      	cbnz	r0, 18f3a <log_append_prepare+0x72>
   18f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
   18f2e:	a330      	add	r3, pc, #192	; (adr r3, 18ff0 <log_append_prepare+0x128>)
   18f30:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f34:	4282      	cmp	r2, r0
   18f36:	418b      	sbcs	r3, r1
   18f38:	db20      	blt.n	18f7c <log_append_prepare+0xb4>
        ue->ue_ts = os_get_uptime_usec();
   18f3a:	f7fd fb97 	bl	1666c <os_get_uptime_usec>
   18f3e:	6020      	str	r0, [r4, #0]
   18f40:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   18f42:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   18f44:	f884 a00c 	strb.w	sl, [r4, #12]
    ue->ue_index = idx;
   18f48:	f8c4 b008 	str.w	fp, [r4, #8]
    ue->ue_etype = etype;
   18f4c:	7ba3      	ldrb	r3, [r4, #14]
   18f4e:	f367 0303 	bfi	r3, r7, #0, #4
    ue->ue_flags = 0;
   18f52:	f36f 1307 	bfc	r3, #4, #4
   18f56:	73a3      	strb	r3, [r4, #14]
}
   18f58:	4630      	mov	r0, r6
   18f5a:	b005      	add	sp, #20
   18f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   18f60:	f7fb fb78 	bl	14654 <hal_debugger_connected>
   18f64:	b100      	cbz	r0, 18f68 <log_append_prepare+0xa0>
   18f66:	be01      	bkpt	0x0001
   18f68:	2300      	movs	r3, #0
   18f6a:	461a      	mov	r2, r3
   18f6c:	4619      	mov	r1, r3
   18f6e:	4618      	mov	r0, r3
   18f70:	f7fb ff12 	bl	14d98 <__assert_func>
        log_written = 1;
   18f74:	4b21      	ldr	r3, [pc, #132]	; (18ffc <log_append_prepare+0x134>)
   18f76:	2201      	movs	r2, #1
   18f78:	701a      	strb	r2, [r3, #0]
   18f7a:	e7be      	b.n	18efa <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   18f7c:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   18f80:	0143      	lsls	r3, r0, #5
   18f82:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   18f86:	1a1b      	subs	r3, r3, r0
   18f88:	eb62 0201 	sbc.w	r2, r2, r1
   18f8c:	ea4f 2c42 	mov.w	ip, r2, lsl #9
   18f90:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
   18f94:	ea4f 2e43 	mov.w	lr, r3, lsl #9
   18f98:	4662      	mov	r2, ip
   18f9a:	eb1e 0300 	adds.w	r3, lr, r0
   18f9e:	eb41 0202 	adc.w	r2, r1, r2
   18fa2:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   18fa6:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
   18faa:	ea4f 1e83 	mov.w	lr, r3, lsl #6
   18fae:	ebbe 0303 	subs.w	r3, lr, r3
   18fb2:	eb6c 0202 	sbc.w	r2, ip, r2
   18fb6:	eb13 0800 	adds.w	r8, r3, r0
   18fba:	eb42 0901 	adc.w	r9, r2, r1
   18fbe:	9b02      	ldr	r3, [sp, #8]
   18fc0:	eb18 0803 	adds.w	r8, r8, r3
   18fc4:	eb49 79e3 	adc.w	r9, r9, r3, asr #31
   18fc8:	f8c4 8000 	str.w	r8, [r4]
   18fcc:	f8c4 9004 	str.w	r9, [r4, #4]
   18fd0:	e7b7      	b.n	18f42 <log_append_prepare+0x7a>
        rc = -1;
   18fd2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18fd6:	e7bf      	b.n	18f58 <log_append_prepare+0x90>
   18fd8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18fdc:	e7bc      	b.n	18f58 <log_append_prepare+0x90>
        rc = -1;
   18fde:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   18fe2:	e7b9      	b.n	18f58 <log_append_prepare+0x90>
        rc = -1;
   18fe4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return (rc);
   18fe8:	e7b6      	b.n	18f58 <log_append_prepare+0x90>
   18fea:	bf00      	nop
   18fec:	f3af 8000 	nop.w
   18ff0:	5685c17f 	.word	0x5685c17f
   18ff4:	00000000 	.word	0x00000000
   18ff8:	10001bd0 	.word	0x10001bd0
   18ffc:	10001be4 	.word	0x10001be4

00019000 <log_init>:
{
   19000:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   19002:	4b0d      	ldr	r3, [pc, #52]	; (19038 <log_init+0x38>)
   19004:	781b      	ldrb	r3, [r3, #0]
   19006:	b163      	cbz	r3, 19022 <log_init+0x22>
    log_written = 0;
   19008:	2300      	movs	r3, #0
   1900a:	4a0c      	ldr	r2, [pc, #48]	; (1903c <log_init+0x3c>)
   1900c:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   1900e:	4a0c      	ldr	r2, [pc, #48]	; (19040 <log_init+0x40>)
   19010:	6013      	str	r3, [r2, #0]
   19012:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   19014:	4a0b      	ldr	r2, [pc, #44]	; (19044 <log_init+0x44>)
   19016:	2103      	movs	r1, #3
   19018:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   1901a:	6013      	str	r3, [r2, #0]
    log_console_init();
   1901c:	f000 fa2a 	bl	19474 <log_console_init>
}
   19020:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19022:	f7fb fb17 	bl	14654 <hal_debugger_connected>
   19026:	b100      	cbz	r0, 1902a <log_init+0x2a>
   19028:	be01      	bkpt	0x0001
   1902a:	2300      	movs	r3, #0
   1902c:	461a      	mov	r2, r3
   1902e:	4619      	mov	r1, r3
   19030:	4618      	mov	r0, r3
   19032:	f7fb feb1 	bl	14d98 <__assert_func>
   19036:	bf00      	nop
   19038:	10001e3c 	.word	0x10001e3c
   1903c:	10001be4 	.word	0x10001be4
   19040:	1000025c 	.word	0x1000025c
   19044:	10001bd0 	.word	0x10001bd0

00019048 <log_list_get_next>:
    if (log == NULL) {
   19048:	b108      	cbz	r0, 1904e <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   1904a:	68c0      	ldr	r0, [r0, #12]
}
   1904c:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   1904e:	4b01      	ldr	r3, [pc, #4]	; (19054 <log_list_get_next+0xc>)
   19050:	6818      	ldr	r0, [r3, #0]
   19052:	4770      	bx	lr
   19054:	1000025c 	.word	0x1000025c

00019058 <log_module_get_name>:
    switch (module) {
   19058:	2804      	cmp	r0, #4
   1905a:	d00d      	beq.n	19078 <log_module_get_name+0x20>
   1905c:	2806      	cmp	r0, #6
   1905e:	d00d      	beq.n	1907c <log_module_get_name+0x24>
   19060:	b170      	cbz	r0, 19080 <log_module_get_name+0x28>
{
   19062:	b508      	push	{r3, lr}
        idx = log_module_find_idx(module);
   19064:	f7ff fef0 	bl	18e48 <log_module_find_idx>
        if (idx != -1) {
   19068:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1906c:	d00a      	beq.n	19084 <log_module_get_name+0x2c>
            return g_log_module_list[idx].name;
   1906e:	4b06      	ldr	r3, [pc, #24]	; (19088 <log_module_get_name+0x30>)
   19070:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19074:	6840      	ldr	r0, [r0, #4]
}
   19076:	bd08      	pop	{r3, pc}
        return "NIMBLE_HOST";
   19078:	4804      	ldr	r0, [pc, #16]	; (1908c <log_module_get_name+0x34>)
   1907a:	4770      	bx	lr
        return "REBOOT";
   1907c:	4804      	ldr	r0, [pc, #16]	; (19090 <log_module_get_name+0x38>)
   1907e:	4770      	bx	lr
    switch (module) {
   19080:	4804      	ldr	r0, [pc, #16]	; (19094 <log_module_get_name+0x3c>)
}
   19082:	4770      	bx	lr
    return NULL;
   19084:	2000      	movs	r0, #0
   19086:	e7f6      	b.n	19076 <log_module_get_name+0x1e>
   19088:	10001bdc 	.word	0x10001bdc
   1908c:	000343cc 	.word	0x000343cc
   19090:	000343bc 	.word	0x000343bc
   19094:	000343c4 	.word	0x000343c4

00019098 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   19098:	7b83      	ldrb	r3, [r0, #14]
   1909a:	f013 0f10 	tst.w	r3, #16
   1909e:	d101      	bne.n	190a4 <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   190a0:	200f      	movs	r0, #15
   190a2:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   190a4:	2013      	movs	r0, #19
}
   190a6:	4770      	bx	lr

000190a8 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   190a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   190ac:	b089      	sub	sp, #36	; 0x24
   190ae:	4604      	mov	r4, r0
   190b0:	460d      	mov	r5, r1
   190b2:	4691      	mov	r9, r2
   190b4:	461e      	mov	r6, r3
   190b6:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   190ba:	4641      	mov	r1, r8
   190bc:	f7ff feec 	bl	18e98 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   190c0:	4607      	mov	r7, r0
   190c2:	b118      	cbz	r0, 190cc <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   190c4:	4638      	mov	r0, r7
   190c6:	b009      	add	sp, #36	; 0x24
   190c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   190cc:	ab03      	add	r3, sp, #12
   190ce:	9300      	str	r3, [sp, #0]
   190d0:	4633      	mov	r3, r6
   190d2:	464a      	mov	r2, r9
   190d4:	4629      	mov	r1, r5
   190d6:	4620      	mov	r0, r4
   190d8:	f7ff fef6 	bl	18ec8 <log_append_prepare>
    if (rc != 0) {
   190dc:	4607      	mov	r7, r0
   190de:	2800      	cmp	r0, #0
   190e0:	d1f0      	bne.n	190c4 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   190e2:	6863      	ldr	r3, [r4, #4]
   190e4:	691d      	ldr	r5, [r3, #16]
   190e6:	4643      	mov	r3, r8
   190e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   190ea:	a903      	add	r1, sp, #12
   190ec:	4620      	mov	r0, r4
   190ee:	47a8      	blx	r5
    if (rc != 0) {
   190f0:	4607      	mov	r7, r0
   190f2:	2800      	cmp	r0, #0
   190f4:	d1e6      	bne.n	190c4 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   190f6:	9905      	ldr	r1, [sp, #20]
   190f8:	4620      	mov	r0, r4
   190fa:	f7ff fed7 	bl	18eac <log_call_append_cb>
    return 0;
   190fe:	e7e1      	b.n	190c4 <log_append_body+0x1c>

00019100 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   19100:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   19102:	6843      	ldr	r3, [r0, #4]
   19104:	69db      	ldr	r3, [r3, #28]
   19106:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   19108:	bd08      	pop	{r3, pc}
	...

0001910c <log_read_last_hdr>:
{
   1910c:	b530      	push	{r4, r5, lr}
   1910e:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   19110:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   19112:	2300      	movs	r3, #0
   19114:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   19116:	aa06      	add	r2, sp, #24
   19118:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1911a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1911e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19122:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   19126:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   19128:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1912a:	466a      	mov	r2, sp
   1912c:	4905      	ldr	r1, [pc, #20]	; (19144 <log_read_last_hdr+0x38>)
   1912e:	f7ff ffe7 	bl	19100 <log_walk>
    if (!arg.read_success) {
   19132:	9b07      	ldr	r3, [sp, #28]
   19134:	b113      	cbz	r3, 1913c <log_read_last_hdr+0x30>
    return 0;
   19136:	2000      	movs	r0, #0
}
   19138:	b009      	add	sp, #36	; 0x24
   1913a:	bd30      	pop	{r4, r5, pc}
        return -1;
   1913c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19140:	e7fa      	b.n	19138 <log_read_last_hdr+0x2c>
   19142:	bf00      	nop
   19144:	00019333 	.word	0x00019333

00019148 <log_register>:
{
   19148:	b530      	push	{r4, r5, lr}
   1914a:	b087      	sub	sp, #28
   1914c:	460c      	mov	r4, r1
   1914e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   19152:	4d2f      	ldr	r5, [pc, #188]	; (19210 <log_register+0xc8>)
   19154:	782d      	ldrb	r5, [r5, #0]
   19156:	bb25      	cbnz	r5, 191a2 <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   19158:	290f      	cmp	r1, #15
   1915a:	d900      	bls.n	1915e <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1915c:	210f      	movs	r1, #15
    log->l_name = name;
   1915e:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   19160:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   19162:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   19164:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   19166:	2300      	movs	r3, #0
   19168:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1916a:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   1916c:	4620      	mov	r0, r4
   1916e:	f7ff fe7f 	bl	18e70 <log_registered>
   19172:	b938      	cbnz	r0, 19184 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   19174:	2300      	movs	r3, #0
   19176:	60e3      	str	r3, [r4, #12]
   19178:	4b26      	ldr	r3, [pc, #152]	; (19214 <log_register+0xcc>)
   1917a:	685a      	ldr	r2, [r3, #4]
   1917c:	6014      	str	r4, [r2, #0]
   1917e:	f104 020c 	add.w	r2, r4, #12
   19182:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   19184:	6863      	ldr	r3, [r4, #4]
   19186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19188:	b11b      	cbz	r3, 19192 <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   1918a:	4620      	mov	r0, r4
   1918c:	4798      	blx	r3
        if (rc) {
   1918e:	4605      	mov	r5, r0
   19190:	b988      	cbnz	r0, 191b6 <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   19192:	6863      	ldr	r3, [r4, #4]
   19194:	681b      	ldr	r3, [r3, #0]
   19196:	2b02      	cmp	r3, #2
   19198:	d024      	beq.n	191e4 <log_register+0x9c>
    return (0);
   1919a:	2500      	movs	r5, #0
}
   1919c:	4628      	mov	r0, r5
   1919e:	b007      	add	sp, #28
   191a0:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   191a2:	f7fb fa57 	bl	14654 <hal_debugger_connected>
   191a6:	b100      	cbz	r0, 191aa <log_register+0x62>
   191a8:	be01      	bkpt	0x0001
   191aa:	2300      	movs	r3, #0
   191ac:	461a      	mov	r2, r3
   191ae:	4619      	mov	r1, r3
   191b0:	4618      	mov	r0, r3
   191b2:	f7fb fdf1 	bl	14d98 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   191b6:	4b17      	ldr	r3, [pc, #92]	; (19214 <log_register+0xcc>)
   191b8:	681b      	ldr	r3, [r3, #0]
   191ba:	42a3      	cmp	r3, r4
   191bc:	d00b      	beq.n	191d6 <log_register+0x8e>
   191be:	461a      	mov	r2, r3
   191c0:	68db      	ldr	r3, [r3, #12]
   191c2:	42a3      	cmp	r3, r4
   191c4:	d1fb      	bne.n	191be <log_register+0x76>
   191c6:	68db      	ldr	r3, [r3, #12]
   191c8:	60d3      	str	r3, [r2, #12]
   191ca:	2b00      	cmp	r3, #0
   191cc:	d1e6      	bne.n	1919c <log_register+0x54>
   191ce:	320c      	adds	r2, #12
   191d0:	4b10      	ldr	r3, [pc, #64]	; (19214 <log_register+0xcc>)
   191d2:	605a      	str	r2, [r3, #4]
            return rc;
   191d4:	e7e2      	b.n	1919c <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   191d6:	68db      	ldr	r3, [r3, #12]
   191d8:	4a0e      	ldr	r2, [pc, #56]	; (19214 <log_register+0xcc>)
   191da:	6013      	str	r3, [r2, #0]
   191dc:	2b00      	cmp	r3, #0
   191de:	d1dd      	bne.n	1919c <log_register+0x54>
   191e0:	6052      	str	r2, [r2, #4]
   191e2:	e7db      	b.n	1919c <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   191e4:	a901      	add	r1, sp, #4
   191e6:	4620      	mov	r0, r4
   191e8:	f7ff ff90 	bl	1910c <log_read_last_hdr>
        if (rc == 0) {
   191ec:	4605      	mov	r5, r0
   191ee:	b108      	cbz	r0, 191f4 <log_register+0xac>
    return (0);
   191f0:	2500      	movs	r5, #0
   191f2:	e7d3      	b.n	1919c <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   191f4:	f7fd fa86 	bl	16704 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   191f8:	9b03      	ldr	r3, [sp, #12]
   191fa:	4a07      	ldr	r2, [pc, #28]	; (19218 <log_register+0xd0>)
   191fc:	6812      	ldr	r2, [r2, #0]
   191fe:	4293      	cmp	r3, r2
   19200:	d302      	bcc.n	19208 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   19202:	3301      	adds	r3, #1
   19204:	4a04      	ldr	r2, [pc, #16]	; (19218 <log_register+0xd0>)
   19206:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   19208:	f7fd fa82 	bl	16710 <os_arch_restore_sr>
   1920c:	e7c6      	b.n	1919c <log_register+0x54>
   1920e:	bf00      	nop
   19210:	10001be4 	.word	0x10001be4
   19214:	1000025c 	.word	0x1000025c
   19218:	10001bd0 	.word	0x10001bd0

0001921c <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   1921c:	b510      	push	{r4, lr}
   1921e:	b082      	sub	sp, #8
   19220:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   19222:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   19224:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   19226:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   19228:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   1922c:	6843      	ldr	r3, [r0, #4]
   1922e:	69db      	ldr	r3, [r3, #28]
   19230:	4902      	ldr	r1, [pc, #8]	; (1923c <log_walk_body+0x20>)
   19232:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   19234:	9b01      	ldr	r3, [sp, #4]
   19236:	6123      	str	r3, [r4, #16]

    return rc;
}
   19238:	b002      	add	sp, #8
   1923a:	bd10      	pop	{r4, pc}
   1923c:	0001929f 	.word	0x0001929f

00019240 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   19240:	b530      	push	{r4, r5, lr}
   19242:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   19244:	6844      	ldr	r4, [r0, #4]
   19246:	6864      	ldr	r4, [r4, #4]
   19248:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1924c:	9500      	str	r5, [sp, #0]
   1924e:	47a0      	blx	r4

    return (rc);
}
   19250:	b003      	add	sp, #12
   19252:	bd30      	pop	{r4, r5, pc}

00019254 <log_read_hdr>:

int
log_read_hdr(struct log *log, const void *dptr, struct log_entry_hdr *hdr)
{
   19254:	b570      	push	{r4, r5, r6, lr}
   19256:	b082      	sub	sp, #8
   19258:	4606      	mov	r6, r0
   1925a:	460d      	mov	r5, r1
   1925c:	4614      	mov	r4, r2
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   1925e:	230f      	movs	r3, #15
   19260:	9300      	str	r3, [sp, #0]
   19262:	2300      	movs	r3, #0
   19264:	f7ff ffec 	bl	19240 <log_read>
    if (bytes_read != LOG_BASE_ENTRY_HDR_SIZE) {
   19268:	280f      	cmp	r0, #15
   1926a:	d112      	bne.n	19292 <log_read_hdr+0x3e>
        return SYS_EIO;
    }

    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1926c:	7ba3      	ldrb	r3, [r4, #14]
   1926e:	f013 0f10 	tst.w	r3, #16
   19272:	d102      	bne.n	1927a <log_read_hdr+0x26>
        if (bytes_read != LOG_IMG_HASHLEN) {
            return SYS_EIO;
        }
    }

    return 0;
   19274:	2000      	movs	r0, #0
}
   19276:	b002      	add	sp, #8
   19278:	bd70      	pop	{r4, r5, r6, pc}
        bytes_read = log_read(log, dptr, hdr->ue_imghash,
   1927a:	2304      	movs	r3, #4
   1927c:	9300      	str	r3, [sp, #0]
   1927e:	230f      	movs	r3, #15
   19280:	18e2      	adds	r2, r4, r3
   19282:	4629      	mov	r1, r5
   19284:	4630      	mov	r0, r6
   19286:	f7ff ffdb 	bl	19240 <log_read>
        if (bytes_read != LOG_IMG_HASHLEN) {
   1928a:	2804      	cmp	r0, #4
   1928c:	d104      	bne.n	19298 <log_read_hdr+0x44>
    return 0;
   1928e:	2000      	movs	r0, #0
   19290:	e7f1      	b.n	19276 <log_read_hdr+0x22>
        return SYS_EIO;
   19292:	f06f 0004 	mvn.w	r0, #4
   19296:	e7ee      	b.n	19276 <log_read_hdr+0x22>
            return SYS_EIO;
   19298:	f06f 0004 	mvn.w	r0, #4
   1929c:	e7eb      	b.n	19276 <log_read_hdr+0x22>

0001929e <log_walk_body_fn>:
{
   1929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192a2:	b088      	sub	sp, #32
   192a4:	4607      	mov	r7, r0
   192a6:	460c      	mov	r4, r1
   192a8:	4615      	mov	r5, r2
   192aa:	4698      	mov	r8, r3
    lwba = log_offset->lo_arg;
   192ac:	690e      	ldr	r6, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   192ae:	aa03      	add	r2, sp, #12
   192b0:	4629      	mov	r1, r5
   192b2:	f7ff ffcf 	bl	19254 <log_read_hdr>
    if (rc != 0) {
   192b6:	b9a0      	cbnz	r0, 192e2 <log_walk_body_fn+0x44>
    if (log_offset->lo_index <= ueh.ue_index) {
   192b8:	68a2      	ldr	r2, [r4, #8]
   192ba:	9b05      	ldr	r3, [sp, #20]
   192bc:	429a      	cmp	r2, r3
   192be:	d810      	bhi.n	192e2 <log_walk_body_fn+0x44>
        len -= log_hdr_len(&ueh);
   192c0:	a803      	add	r0, sp, #12
   192c2:	f7ff fee9 	bl	19098 <log_hdr_len>
   192c6:	eba8 0300 	sub.w	r3, r8, r0
   192ca:	b29b      	uxth	r3, r3
        log_offset->lo_arg = lwba->arg;
   192cc:	6872      	ldr	r2, [r6, #4]
   192ce:	6122      	str	r2, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   192d0:	f8d6 8000 	ldr.w	r8, [r6]
   192d4:	9300      	str	r3, [sp, #0]
   192d6:	462b      	mov	r3, r5
   192d8:	aa03      	add	r2, sp, #12
   192da:	4621      	mov	r1, r4
   192dc:	4638      	mov	r0, r7
   192de:	47c0      	blx	r8
        log_offset->lo_arg = lwba;
   192e0:	6126      	str	r6, [r4, #16]
}
   192e2:	b008      	add	sp, #32
   192e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000192e8 <log_read_body>:

int
log_read_body(struct log *log, const void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   192e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   192ea:	b089      	sub	sp, #36	; 0x24
   192ec:	4604      	mov	r4, r0
   192ee:	460f      	mov	r7, r1
   192f0:	4616      	mov	r6, r2
   192f2:	461d      	mov	r5, r3
    int rc;
    struct log_entry_hdr hdr;

    rc = log_read_hdr(log, dptr, &hdr);
   192f4:	aa03      	add	r2, sp, #12
   192f6:	f7ff ffad 	bl	19254 <log_read_hdr>
    if (rc) {
   192fa:	b108      	cbz	r0, 19300 <log_read_body+0x18>
        return rc;
    }

    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
}
   192fc:	b009      	add	sp, #36	; 0x24
   192fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
   19300:	a803      	add	r0, sp, #12
   19302:	f7ff fec9 	bl	19098 <log_hdr_len>
   19306:	1943      	adds	r3, r0, r5
   19308:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1930c:	9200      	str	r2, [sp, #0]
   1930e:	b29b      	uxth	r3, r3
   19310:	4632      	mov	r2, r6
   19312:	4639      	mov	r1, r7
   19314:	4620      	mov	r0, r4
   19316:	f7ff ff93 	bl	19240 <log_read>
   1931a:	e7ef      	b.n	192fc <log_read_body+0x14>

0001931c <log_flush>:
    return log_read_mbuf(log, dptr, om, log_hdr_len(&hdr) + off, len);
}

int
log_flush(struct log *log)
{
   1931c:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   1931e:	6843      	ldr	r3, [r0, #4]
   19320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19322:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   19324:	bd08      	pop	{r3, pc}

00019326 <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   19326:	2300      	movs	r3, #0
   19328:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   1932c:	f06f 000b 	mvn.w	r0, #11
   19330:	4770      	bx	lr

00019332 <log_read_hdr_walk>:
{
   19332:	b510      	push	{r4, lr}
   19334:	b082      	sub	sp, #8
   19336:	460b      	mov	r3, r1
   19338:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   1933a:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   1933c:	6822      	ldr	r2, [r4, #0]
   1933e:	230f      	movs	r3, #15
   19340:	9300      	str	r3, [sp, #0]
   19342:	2300      	movs	r3, #0
   19344:	f7ff ff7c 	bl	19240 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   19348:	280e      	cmp	r0, #14
   1934a:	dd01      	ble.n	19350 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   1934c:	2301      	movs	r3, #1
   1934e:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   19350:	6820      	ldr	r0, [r4, #0]
   19352:	7b83      	ldrb	r3, [r0, #14]
   19354:	f013 0f10 	tst.w	r3, #16
   19358:	d102      	bne.n	19360 <log_read_hdr_walk+0x2e>
}
   1935a:	2001      	movs	r0, #1
   1935c:	b002      	add	sp, #8
   1935e:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   19360:	f7ff ffe1 	bl	19326 <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   19364:	b110      	cbz	r0, 1936c <log_read_hdr_walk+0x3a>
   19366:	f110 0f0c 	cmn.w	r0, #12
   1936a:	d1f6      	bne.n	1935a <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   1936c:	2301      	movs	r3, #1
   1936e:	6063      	str	r3, [r4, #4]
   19370:	e7f3      	b.n	1935a <log_read_hdr_walk+0x28>

00019372 <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   19372:	2002      	movs	r0, #2
   19374:	4770      	bx	lr

00019376 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   19376:	2002      	movs	r0, #2
   19378:	4770      	bx	lr

0001937a <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1937a:	2002      	movs	r0, #2
   1937c:	4770      	bx	lr
	...

00019380 <log_console_print_hdr>:
{
   19380:	b510      	push	{r4, lr}
   19382:	b082      	sub	sp, #8
   19384:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   19386:	7b03      	ldrb	r3, [r0, #12]
   19388:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   1938a:	9201      	str	r2, [sp, #4]
   1938c:	9300      	str	r3, [sp, #0]
   1938e:	6802      	ldr	r2, [r0, #0]
   19390:	6843      	ldr	r3, [r0, #4]
   19392:	480a      	ldr	r0, [pc, #40]	; (193bc <log_console_print_hdr+0x3c>)
   19394:	f7ff f960 	bl	18658 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   19398:	7ba3      	ldrb	r3, [r4, #14]
   1939a:	f013 0f10 	tst.w	r3, #16
   1939e:	d104      	bne.n	193aa <log_console_print_hdr+0x2a>
    console_printf("]");
   193a0:	4807      	ldr	r0, [pc, #28]	; (193c0 <log_console_print_hdr+0x40>)
   193a2:	f7ff f959 	bl	18658 <console_printf>
}
   193a6:	b002      	add	sp, #8
   193a8:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   193aa:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   193ac:	9300      	str	r3, [sp, #0]
   193ae:	7c63      	ldrb	r3, [r4, #17]
   193b0:	7c22      	ldrb	r2, [r4, #16]
   193b2:	7be1      	ldrb	r1, [r4, #15]
   193b4:	4803      	ldr	r0, [pc, #12]	; (193c4 <log_console_print_hdr+0x44>)
   193b6:	f7ff f94f 	bl	18658 <console_printf>
   193ba:	e7f1      	b.n	193a0 <log_console_print_hdr+0x20>
   193bc:	000343d8 	.word	0x000343d8
   193c0:	00034408 	.word	0x00034408
   193c4:	000343f8 	.word	0x000343f8

000193c8 <log_console_dump_cbor_entry>:
{
   193c8:	b530      	push	{r4, r5, lr}
   193ca:	b095      	sub	sp, #84	; 0x54
   193cc:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   193ce:	4601      	mov	r1, r0
   193d0:	a805      	add	r0, sp, #20
   193d2:	f015 f8c5 	bl	2e560 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   193d6:	ad0d      	add	r5, sp, #52	; 0x34
   193d8:	462b      	mov	r3, r5
   193da:	aa11      	add	r2, sp, #68	; 0x44
   193dc:	2100      	movs	r1, #0
   193de:	a805      	add	r0, sp, #20
   193e0:	f015 fdb3 	bl	2ef4a <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   193e4:	ac01      	add	r4, sp, #4
   193e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   193ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   193ee:	4621      	mov	r1, r4
   193f0:	4b05      	ldr	r3, [pc, #20]	; (19408 <log_console_dump_cbor_entry+0x40>)
   193f2:	6818      	ldr	r0, [r3, #0]
   193f4:	f016 fa76 	bl	2f8e4 <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   193f8:	2101      	movs	r1, #1
   193fa:	4804      	ldr	r0, [pc, #16]	; (1940c <log_console_dump_cbor_entry+0x44>)
   193fc:	f7fe ffd6 	bl	183ac <console_write>
}
   19400:	2000      	movs	r0, #0
   19402:	b015      	add	sp, #84	; 0x54
   19404:	bd30      	pop	{r4, r5, pc}
   19406:	bf00      	nop
   19408:	000356a0 	.word	0x000356a0
   1940c:	00034dd4 	.word	0x00034dd4

00019410 <log_console_append_body>:
{
   19410:	b570      	push	{r4, r5, r6, lr}
   19412:	460c      	mov	r4, r1
   19414:	4616      	mov	r6, r2
   19416:	461d      	mov	r5, r3
    if (!console_is_init()) {
   19418:	f7ff f8cc 	bl	185b4 <console_is_init>
   1941c:	b158      	cbz	r0, 19436 <log_console_append_body+0x26>
    if (!console_is_midline) {
   1941e:	4b0b      	ldr	r3, [pc, #44]	; (1944c <log_console_append_body+0x3c>)
   19420:	681b      	ldr	r3, [r3, #0]
   19422:	b153      	cbz	r3, 1943a <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   19424:	7ba3      	ldrb	r3, [r4, #14]
   19426:	f003 030f 	and.w	r3, r3, #15
   1942a:	2b01      	cmp	r3, #1
   1942c:	d009      	beq.n	19442 <log_console_append_body+0x32>
        console_write(body, body_len);
   1942e:	4629      	mov	r1, r5
   19430:	4630      	mov	r0, r6
   19432:	f7fe ffbb 	bl	183ac <console_write>
}
   19436:	2000      	movs	r0, #0
   19438:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   1943a:	4620      	mov	r0, r4
   1943c:	f7ff ffa0 	bl	19380 <log_console_print_hdr>
   19440:	e7f0      	b.n	19424 <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   19442:	b2a9      	uxth	r1, r5
   19444:	4630      	mov	r0, r6
   19446:	f7ff ffbf 	bl	193c8 <log_console_dump_cbor_entry>
   1944a:	e7f4      	b.n	19436 <log_console_append_body+0x26>
   1944c:	10001a94 	.word	0x10001a94

00019450 <log_console_append>:
{
   19450:	b570      	push	{r4, r5, r6, lr}
   19452:	4605      	mov	r5, r0
   19454:	460c      	mov	r4, r1
   19456:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   19458:	4608      	mov	r0, r1
   1945a:	f7ff fe1d 	bl	19098 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   1945e:	1a33      	subs	r3, r6, r0
   19460:	1822      	adds	r2, r4, r0
   19462:	4621      	mov	r1, r4
   19464:	4628      	mov	r0, r5
   19466:	f7ff ffd3 	bl	19410 <log_console_append_body>
}
   1946a:	bd70      	pop	{r4, r5, r6, pc}

0001946c <log_console_get>:
}
   1946c:	4800      	ldr	r0, [pc, #0]	; (19470 <log_console_get+0x4>)
   1946e:	4770      	bx	lr
   19470:	10001be8 	.word	0x10001be8

00019474 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   19474:	b510      	push	{r4, lr}
   19476:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19478:	4b11      	ldr	r3, [pc, #68]	; (194c0 <log_console_init+0x4c>)
   1947a:	781b      	ldrb	r3, [r3, #0]
   1947c:	b14b      	cbz	r3, 19492 <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   1947e:	2300      	movs	r3, #0
   19480:	9300      	str	r3, [sp, #0]
   19482:	4a10      	ldr	r2, [pc, #64]	; (194c4 <log_console_init+0x50>)
   19484:	4910      	ldr	r1, [pc, #64]	; (194c8 <log_console_init+0x54>)
   19486:	4811      	ldr	r0, [pc, #68]	; (194cc <log_console_init+0x58>)
   19488:	f7ff fe5e 	bl	19148 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   1948c:	b958      	cbnz	r0, 194a6 <log_console_init+0x32>
}
   1948e:	b002      	add	sp, #8
   19490:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   19492:	f7fb f8df 	bl	14654 <hal_debugger_connected>
   19496:	b100      	cbz	r0, 1949a <log_console_init+0x26>
   19498:	be01      	bkpt	0x0001
   1949a:	2300      	movs	r3, #0
   1949c:	461a      	mov	r2, r3
   1949e:	4619      	mov	r1, r3
   194a0:	4618      	mov	r0, r3
   194a2:	f7fb fc79 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   194a6:	f7fb f8d5 	bl	14654 <hal_debugger_connected>
   194aa:	b100      	cbz	r0, 194ae <log_console_init+0x3a>
   194ac:	be01      	bkpt	0x0001
   194ae:	2000      	movs	r0, #0
   194b0:	9000      	str	r0, [sp, #0]
   194b2:	4b07      	ldr	r3, [pc, #28]	; (194d0 <log_console_init+0x5c>)
   194b4:	681c      	ldr	r4, [r3, #0]
   194b6:	4603      	mov	r3, r0
   194b8:	4602      	mov	r2, r0
   194ba:	4601      	mov	r1, r0
   194bc:	47a0      	blx	r4
}
   194be:	e7e6      	b.n	1948e <log_console_init+0x1a>
   194c0:	10001e3c 	.word	0x10001e3c
   194c4:	00034414 	.word	0x00034414
   194c8:	10001be8 	.word	0x10001be8
   194cc:	0003440c 	.word	0x0003440c
   194d0:	1000028c 	.word	0x1000028c

000194d4 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   194d4:	0843      	lsrs	r3, r0, #1
   194d6:	4a05      	ldr	r2, [pc, #20]	; (194ec <log_level_get+0x18>)
   194d8:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   194da:	f010 0f01 	tst.w	r0, #1
   194de:	d102      	bne.n	194e6 <log_level_get+0x12>
        return byte & 0x0f;
   194e0:	f003 000f 	and.w	r0, r3, #15
   194e4:	4770      	bx	lr
    } else {
        return byte >> 4;
   194e6:	0918      	lsrs	r0, r3, #4
    }
}
   194e8:	4770      	bx	lr
   194ea:	bf00      	nop
   194ec:	10001c04 	.word	0x10001c04

000194f0 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   194f0:	b410      	push	{r4}
   194f2:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   194f4:	4b07      	ldr	r3, [pc, #28]	; (19514 <modlog_find_by_module+0x24>)
   194f6:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   194f8:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   194fa:	e001      	b.n	19500 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   194fc:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   194fe:	6800      	ldr	r0, [r0, #0]
   19500:	b120      	cbz	r0, 1950c <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   19502:	7a43      	ldrb	r3, [r0, #9]
   19504:	4293      	cmp	r3, r2
   19506:	d001      	beq.n	1950c <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   19508:	d9f8      	bls.n	194fc <modlog_find_by_module+0xc>
            cur = NULL;
   1950a:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   1950c:	b101      	cbz	r1, 19510 <modlog_find_by_module+0x20>
        *out_prev = prev;
   1950e:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   19510:	bc10      	pop	{r4}
   19512:	4770      	bx	lr
   19514:	10001d64 	.word	0x10001d64

00019518 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   19518:	b510      	push	{r4, lr}
   1951a:	b082      	sub	sp, #8
   1951c:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   1951e:	a901      	add	r1, sp, #4
   19520:	7a40      	ldrb	r0, [r0, #9]
   19522:	f7ff ffe5 	bl	194f0 <modlog_find_by_module>
    if (prev == NULL) {
   19526:	9b01      	ldr	r3, [sp, #4]
   19528:	b143      	cbz	r3, 1953c <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   1952a:	681b      	ldr	r3, [r3, #0]
   1952c:	6023      	str	r3, [r4, #0]
   1952e:	9b01      	ldr	r3, [sp, #4]
   19530:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   19532:	7a63      	ldrb	r3, [r4, #9]
   19534:	2bff      	cmp	r3, #255	; 0xff
   19536:	d006      	beq.n	19546 <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   19538:	b002      	add	sp, #8
   1953a:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   1953c:	4b03      	ldr	r3, [pc, #12]	; (1954c <modlog_insert+0x34>)
   1953e:	681a      	ldr	r2, [r3, #0]
   19540:	6022      	str	r2, [r4, #0]
   19542:	601c      	str	r4, [r3, #0]
   19544:	e7f5      	b.n	19532 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   19546:	4b02      	ldr	r3, [pc, #8]	; (19550 <modlog_insert+0x38>)
   19548:	601c      	str	r4, [r3, #0]
}
   1954a:	e7f5      	b.n	19538 <modlog_insert+0x20>
   1954c:	10001d64 	.word	0x10001d64
   19550:	10001c84 	.word	0x10001c84

00019554 <modlog_alloc>:
{
   19554:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   19556:	4805      	ldr	r0, [pc, #20]	; (1956c <modlog_alloc+0x18>)
   19558:	f7fc fc55 	bl	15e06 <os_memblock_get>
    if (mm != NULL) {
   1955c:	4603      	mov	r3, r0
   1955e:	b118      	cbz	r0, 19568 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   19560:	2200      	movs	r2, #0
   19562:	6002      	str	r2, [r0, #0]
   19564:	6042      	str	r2, [r0, #4]
   19566:	6082      	str	r2, [r0, #8]
}
   19568:	4618      	mov	r0, r3
   1956a:	bd08      	pop	{r3, pc}
   1956c:	10001d48 	.word	0x10001d48

00019570 <modlog_infer_handle>:
{
   19570:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   19572:	4a13      	ldr	r2, [pc, #76]	; (195c0 <modlog_infer_handle+0x50>)
   19574:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   19576:	4813      	ldr	r0, [pc, #76]	; (195c4 <modlog_infer_handle+0x54>)
   19578:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1957c:	2abf      	cmp	r2, #191	; 0xbf
   1957e:	d80b      	bhi.n	19598 <modlog_infer_handle+0x28>
   19580:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   19582:	4b10      	ldr	r3, [pc, #64]	; (195c4 <modlog_infer_handle+0x54>)
   19584:	fba3 1302 	umull	r1, r3, r3, r2
   19588:	08db      	lsrs	r3, r3, #3
   1958a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1958e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   19592:	d10b      	bne.n	195ac <modlog_infer_handle+0x3c>
}
   19594:	b2c0      	uxtb	r0, r0
   19596:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   19598:	f7fb f85c 	bl	14654 <hal_debugger_connected>
   1959c:	b100      	cbz	r0, 195a0 <modlog_infer_handle+0x30>
   1959e:	be01      	bkpt	0x0001
   195a0:	2300      	movs	r3, #0
   195a2:	461a      	mov	r2, r3
   195a4:	4619      	mov	r1, r3
   195a6:	4618      	mov	r0, r3
   195a8:	f7fb fbf6 	bl	14d98 <__assert_func>
    assert(off % elem_sz == 0);
   195ac:	f7fb f852 	bl	14654 <hal_debugger_connected>
   195b0:	b100      	cbz	r0, 195b4 <modlog_infer_handle+0x44>
   195b2:	be01      	bkpt	0x0001
   195b4:	2300      	movs	r3, #0
   195b6:	461a      	mov	r2, r3
   195b8:	4619      	mov	r1, r3
   195ba:	4618      	mov	r0, r3
   195bc:	f7fb fbec 	bl	14d98 <__assert_func>
   195c0:	10001c88 	.word	0x10001c88
   195c4:	aaaaaaab 	.word	0xaaaaaaab

000195c8 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   195c8:	b1c9      	cbz	r1, 195fe <modlog_register_no_lock+0x36>
{
   195ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195ce:	4607      	mov	r7, r0
   195d0:	4616      	mov	r6, r2
   195d2:	461d      	mov	r5, r3
   195d4:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   195d6:	f7ff ffbd 	bl	19554 <modlog_alloc>
    if (mm == NULL) {
   195da:	4604      	mov	r4, r0
   195dc:	b190      	cbz	r0, 19604 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   195de:	f7ff ffc7 	bl	19570 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   195e2:	f8c4 8004 	str.w	r8, [r4, #4]
   195e6:	7220      	strb	r0, [r4, #8]
   195e8:	7267      	strb	r7, [r4, #9]
   195ea:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   195ec:	4620      	mov	r0, r4
   195ee:	f7ff ff93 	bl	19518 <modlog_insert>

    if (out_handle != NULL) {
   195f2:	b155      	cbz	r5, 1960a <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   195f4:	7a23      	ldrb	r3, [r4, #8]
   195f6:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   195f8:	2000      	movs	r0, #0
}
   195fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   195fe:	f06f 0001 	mvn.w	r0, #1
}
   19602:	4770      	bx	lr
        return SYS_ENOMEM;
   19604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19608:	e7f7      	b.n	195fa <modlog_register_no_lock+0x32>
    return 0;
   1960a:	2000      	movs	r0, #0
   1960c:	e7f5      	b.n	195fa <modlog_register_no_lock+0x32>

0001960e <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   1960e:	b510      	push	{r4, lr}
   19610:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   19612:	7a84      	ldrb	r4, [r0, #10]
   19614:	4294      	cmp	r4, r2
   19616:	d902      	bls.n	1961e <modlog_append_one+0x10>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   19618:	2000      	movs	r0, #0
}
   1961a:	b002      	add	sp, #8
   1961c:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   1961e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   19622:	9401      	str	r4, [sp, #4]
   19624:	9c04      	ldr	r4, [sp, #16]
   19626:	9400      	str	r4, [sp, #0]
   19628:	6840      	ldr	r0, [r0, #4]
   1962a:	f7ff fd3d 	bl	190a8 <log_append_body>
        if (rc != 0) {
   1962e:	2800      	cmp	r0, #0
   19630:	d0f3      	beq.n	1961a <modlog_append_one+0xc>
            return SYS_EIO;
   19632:	f06f 0004 	mvn.w	r0, #4
   19636:	e7f0      	b.n	1961a <modlog_append_one+0xc>

00019638 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   19638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1963c:	b083      	sub	sp, #12
   1963e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   19642:	28ff      	cmp	r0, #255	; 0xff
   19644:	d030      	beq.n	196a8 <modlog_append_no_lock+0x70>
   19646:	4605      	mov	r5, r0
   19648:	460e      	mov	r6, r1
   1964a:	4617      	mov	r7, r2
   1964c:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   1964e:	2100      	movs	r1, #0
   19650:	f7ff ff4e 	bl	194f0 <modlog_find_by_module>
    if (mm != NULL) {
   19654:	4604      	mov	r4, r0
   19656:	b988      	cbnz	r0, 1967c <modlog_append_no_lock+0x44>
        }
        return 0;
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   19658:	4b17      	ldr	r3, [pc, #92]	; (196b8 <modlog_append_no_lock+0x80>)
   1965a:	681c      	ldr	r4, [r3, #0]
   1965c:	b314      	cbz	r4, 196a4 <modlog_append_no_lock+0x6c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1965e:	f8cd 9004 	str.w	r9, [sp, #4]
   19662:	f8cd 8000 	str.w	r8, [sp]
   19666:	463b      	mov	r3, r7
   19668:	4632      	mov	r2, r6
   1966a:	4629      	mov	r1, r5
   1966c:	4620      	mov	r0, r4
   1966e:	f7ff ffce 	bl	1960e <modlog_append_one>
        if (rc != 0) {
   19672:	4603      	mov	r3, r0
   19674:	b9e0      	cbnz	r0, 196b0 <modlog_append_no_lock+0x78>
         mm = SLIST_NEXT(mm, next)) {
   19676:	6824      	ldr	r4, [r4, #0]
   19678:	e7f0      	b.n	1965c <modlog_append_no_lock+0x24>
            mm = SLIST_NEXT(mm, next);
   1967a:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   1967c:	b1bc      	cbz	r4, 196ae <modlog_append_no_lock+0x76>
   1967e:	7a60      	ldrb	r0, [r4, #9]
   19680:	42a8      	cmp	r0, r5
   19682:	d10d      	bne.n	196a0 <modlog_append_no_lock+0x68>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   19684:	f8cd 9004 	str.w	r9, [sp, #4]
   19688:	f8cd 8000 	str.w	r8, [sp]
   1968c:	463b      	mov	r3, r7
   1968e:	4632      	mov	r2, r6
   19690:	4629      	mov	r1, r5
   19692:	4620      	mov	r0, r4
   19694:	f7ff ffbb 	bl	1960e <modlog_append_one>
            if (rc != 0) {
   19698:	4603      	mov	r3, r0
   1969a:	2800      	cmp	r0, #0
   1969c:	d0ed      	beq.n	1967a <modlog_append_no_lock+0x42>
   1969e:	e007      	b.n	196b0 <modlog_append_no_lock+0x78>
        return 0;
   196a0:	2300      	movs	r3, #0
   196a2:	e005      	b.n	196b0 <modlog_append_no_lock+0x78>
            return rc;
        }
    }

    return 0;
   196a4:	2300      	movs	r3, #0
   196a6:	e003      	b.n	196b0 <modlog_append_no_lock+0x78>
        return SYS_EINVAL;
   196a8:	f06f 0301 	mvn.w	r3, #1
   196ac:	e000      	b.n	196b0 <modlog_append_no_lock+0x78>
        return 0;
   196ae:	2300      	movs	r3, #0
}
   196b0:	4618      	mov	r0, r3
   196b2:	b003      	add	sp, #12
   196b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   196b8:	10001c84 	.word	0x10001c84

000196bc <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   196bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196c0:	4604      	mov	r4, r0
   196c2:	460d      	mov	r5, r1
   196c4:	4616      	mov	r6, r2
   196c6:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   196c8:	f8df 8020 	ldr.w	r8, [pc, #32]	; 196ec <modlog_register+0x30>
   196cc:	4640      	mov	r0, r8
   196ce:	f000 fe80 	bl	1a3d2 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   196d2:	463b      	mov	r3, r7
   196d4:	4632      	mov	r2, r6
   196d6:	4629      	mov	r1, r5
   196d8:	4620      	mov	r0, r4
   196da:	f7ff ff75 	bl	195c8 <modlog_register_no_lock>
   196de:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   196e0:	4640      	mov	r0, r8
   196e2:	f000 fea0 	bl	1a426 <rwlock_release_write>

    return rc;
}
   196e6:	4620      	mov	r0, r4
   196e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196ec:	10001d68 	.word	0x10001d68

000196f0 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   196f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196f4:	b082      	sub	sp, #8
   196f6:	4604      	mov	r4, r0
   196f8:	460d      	mov	r5, r1
   196fa:	4616      	mov	r6, r2
   196fc:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   196fe:	f8df 802c 	ldr.w	r8, [pc, #44]	; 1972c <modlog_append+0x3c>
   19702:	4640      	mov	r0, r8
   19704:	f000 fe25 	bl	1a352 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   19708:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1970c:	9300      	str	r3, [sp, #0]
   1970e:	463b      	mov	r3, r7
   19710:	4632      	mov	r2, r6
   19712:	4629      	mov	r1, r5
   19714:	4620      	mov	r0, r4
   19716:	f7ff ff8f 	bl	19638 <modlog_append_no_lock>
   1971a:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   1971c:	4640      	mov	r0, r8
   1971e:	f000 fe45 	bl	1a3ac <rwlock_release_read>

    return rc;
}
   19722:	4620      	mov	r0, r4
   19724:	b002      	add	sp, #8
   19726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1972a:	bf00      	nop
   1972c:	10001d68 	.word	0x10001d68

00019730 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   19730:	b40c      	push	{r2, r3}
   19732:	b530      	push	{r4, r5, lr}
   19734:	b0a5      	sub	sp, #148	; 0x94
   19736:	4604      	mov	r4, r0
   19738:	460d      	mov	r5, r1
   1973a:	ab28      	add	r3, sp, #160	; 0xa0
   1973c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   19740:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   19742:	2180      	movs	r1, #128	; 0x80
   19744:	a803      	add	r0, sp, #12
   19746:	f019 f9c5 	bl	32ad4 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   1974a:	287f      	cmp	r0, #127	; 0x7f
   1974c:	dd00      	ble.n	19750 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   1974e:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   19750:	b280      	uxth	r0, r0
   19752:	9000      	str	r0, [sp, #0]
   19754:	ab03      	add	r3, sp, #12
   19756:	2200      	movs	r2, #0
   19758:	4629      	mov	r1, r5
   1975a:	4620      	mov	r0, r4
   1975c:	f7ff ffc8 	bl	196f0 <modlog_append>
}
   19760:	b025      	add	sp, #148	; 0x94
   19762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   19766:	b002      	add	sp, #8
   19768:	4770      	bx	lr
	...

0001976c <modlog_init>:

void
modlog_init(void)
{
   1976c:	b510      	push	{r4, lr}
   1976e:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   19770:	4b28      	ldr	r3, [pc, #160]	; (19814 <modlog_init+0xa8>)
   19772:	781b      	ldrb	r3, [r3, #0]
   19774:	b1e3      	cbz	r3, 197b0 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   19776:	4b28      	ldr	r3, [pc, #160]	; (19818 <modlog_init+0xac>)
   19778:	9300      	str	r3, [sp, #0]
   1977a:	4b28      	ldr	r3, [pc, #160]	; (1981c <modlog_init+0xb0>)
   1977c:	220c      	movs	r2, #12
   1977e:	2110      	movs	r1, #16
   19780:	4827      	ldr	r0, [pc, #156]	; (19820 <modlog_init+0xb4>)
   19782:	f7fc fb17 	bl	15db4 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   19786:	b9e8      	cbnz	r0, 197c4 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   19788:	2300      	movs	r3, #0
   1978a:	4a26      	ldr	r2, [pc, #152]	; (19824 <modlog_init+0xb8>)
   1978c:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1978e:	4a26      	ldr	r2, [pc, #152]	; (19828 <modlog_init+0xbc>)
   19790:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   19792:	4826      	ldr	r0, [pc, #152]	; (1982c <modlog_init+0xc0>)
   19794:	f000 fe56 	bl	1a444 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19798:	bb08      	cbnz	r0, 197de <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1979a:	f7ff fe67 	bl	1946c <log_console_get>
   1979e:	4601      	mov	r1, r0
   197a0:	2300      	movs	r3, #0
   197a2:	461a      	mov	r2, r3
   197a4:	20ff      	movs	r0, #255	; 0xff
   197a6:	f7ff ff89 	bl	196bc <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   197aa:	bb28      	cbnz	r0, 197f8 <modlog_init+0x8c>
#endif
}
   197ac:	b002      	add	sp, #8
   197ae:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   197b0:	f7fa ff50 	bl	14654 <hal_debugger_connected>
   197b4:	b100      	cbz	r0, 197b8 <modlog_init+0x4c>
   197b6:	be01      	bkpt	0x0001
   197b8:	2300      	movs	r3, #0
   197ba:	461a      	mov	r2, r3
   197bc:	4619      	mov	r1, r3
   197be:	4618      	mov	r0, r3
   197c0:	f7fb faea 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   197c4:	f7fa ff46 	bl	14654 <hal_debugger_connected>
   197c8:	b100      	cbz	r0, 197cc <modlog_init+0x60>
   197ca:	be01      	bkpt	0x0001
   197cc:	2000      	movs	r0, #0
   197ce:	9000      	str	r0, [sp, #0]
   197d0:	4b17      	ldr	r3, [pc, #92]	; (19830 <modlog_init+0xc4>)
   197d2:	681c      	ldr	r4, [r3, #0]
   197d4:	4603      	mov	r3, r0
   197d6:	4602      	mov	r2, r0
   197d8:	4601      	mov	r1, r0
   197da:	47a0      	blx	r4
   197dc:	e7d4      	b.n	19788 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   197de:	f7fa ff39 	bl	14654 <hal_debugger_connected>
   197e2:	b100      	cbz	r0, 197e6 <modlog_init+0x7a>
   197e4:	be01      	bkpt	0x0001
   197e6:	2000      	movs	r0, #0
   197e8:	9000      	str	r0, [sp, #0]
   197ea:	4b11      	ldr	r3, [pc, #68]	; (19830 <modlog_init+0xc4>)
   197ec:	681c      	ldr	r4, [r3, #0]
   197ee:	4603      	mov	r3, r0
   197f0:	4602      	mov	r2, r0
   197f2:	4601      	mov	r1, r0
   197f4:	47a0      	blx	r4
   197f6:	e7d0      	b.n	1979a <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   197f8:	f7fa ff2c 	bl	14654 <hal_debugger_connected>
   197fc:	b100      	cbz	r0, 19800 <modlog_init+0x94>
   197fe:	be01      	bkpt	0x0001
   19800:	2000      	movs	r0, #0
   19802:	9000      	str	r0, [sp, #0]
   19804:	4b0a      	ldr	r3, [pc, #40]	; (19830 <modlog_init+0xc4>)
   19806:	681c      	ldr	r4, [r3, #0]
   19808:	4603      	mov	r3, r0
   1980a:	4602      	mov	r2, r0
   1980c:	4601      	mov	r1, r0
   1980e:	47a0      	blx	r4
}
   19810:	e7cc      	b.n	197ac <modlog_init+0x40>
   19812:	bf00      	nop
   19814:	10001e3c 	.word	0x10001e3c
   19818:	00034440 	.word	0x00034440
   1981c:	10001c88 	.word	0x10001c88
   19820:	10001d48 	.word	0x10001d48
   19824:	10001d64 	.word	0x10001d64
   19828:	10001c84 	.word	0x10001c84
   1982c:	10001d68 	.word	0x10001d68
   19830:	1000028c 	.word	0x1000028c

00019834 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   19834:	b530      	push	{r4, r5, lr}
   19836:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   19838:	7885      	ldrb	r5, [r0, #2]
   1983a:	4b20      	ldr	r3, [pc, #128]	; (198bc <mfg_seek_next_aux+0x88>)
   1983c:	681b      	ldr	r3, [r3, #0]
   1983e:	429d      	cmp	r5, r3
   19840:	da33      	bge.n	198aa <mfg_seek_next_aux+0x76>
   19842:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   19844:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   19848:	a901      	add	r1, sp, #4
   1984a:	4a1d      	ldr	r2, [pc, #116]	; (198c0 <mfg_seek_next_aux+0x8c>)
   1984c:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   19850:	f7ff f900 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   19854:	bb60      	cbnz	r0, 198b0 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   19856:	6862      	ldr	r2, [r4, #4]
   19858:	b9c2      	cbnz	r2, 1988c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1985a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1985e:	4b18      	ldr	r3, [pc, #96]	; (198c0 <mfg_seek_next_aux+0x8c>)
   19860:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   19864:	686b      	ldr	r3, [r5, #4]
   19866:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   19868:	6861      	ldr	r1, [r4, #4]
   1986a:	9801      	ldr	r0, [sp, #4]
   1986c:	6883      	ldr	r3, [r0, #8]
   1986e:	3b08      	subs	r3, #8
   19870:	4299      	cmp	r1, r3
   19872:	d313      	bcc.n	1989c <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   19874:	78a3      	ldrb	r3, [r4, #2]
   19876:	1c59      	adds	r1, r3, #1
   19878:	4a10      	ldr	r2, [pc, #64]	; (198bc <mfg_seek_next_aux+0x88>)
   1987a:	6812      	ldr	r2, [r2, #0]
   1987c:	4291      	cmp	r1, r2
   1987e:	da0a      	bge.n	19896 <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   19880:	2200      	movs	r2, #0
   19882:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   19884:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   19886:	f06f 0005 	mvn.w	r0, #5
   1988a:	e00c      	b.n	198a6 <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1988c:	7863      	ldrb	r3, [r4, #1]
   1988e:	4413      	add	r3, r2
   19890:	3302      	adds	r3, #2
   19892:	6063      	str	r3, [r4, #4]
   19894:	e7e8      	b.n	19868 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   19896:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   1989a:	e004      	b.n	198a6 <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1989c:	2302      	movs	r3, #2
   1989e:	4622      	mov	r2, r4
   198a0:	f7ff f930 	bl	18b04 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   198a4:	b938      	cbnz	r0, 198b6 <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   198a6:	b003      	add	sp, #12
   198a8:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   198aa:	f06f 0001 	mvn.w	r0, #1
   198ae:	e7fa      	b.n	198a6 <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   198b0:	f06f 0004 	mvn.w	r0, #4
   198b4:	e7f7      	b.n	198a6 <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   198b6:	f06f 0004 	mvn.w	r0, #4
   198ba:	e7f4      	b.n	198a6 <mfg_seek_next_aux+0x72>
   198bc:	10001da8 	.word	0x10001da8
   198c0:	10001d90 	.word	0x10001d90

000198c4 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   198c4:	b530      	push	{r4, r5, lr}
   198c6:	b085      	sub	sp, #20
   198c8:	4605      	mov	r5, r0
   198ca:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   198cc:	a903      	add	r1, sp, #12
   198ce:	f7ff f8c1 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   198d2:	b9d8      	cbnz	r0, 1990c <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   198d4:	9803      	ldr	r0, [sp, #12]
   198d6:	6881      	ldr	r1, [r0, #8]
   198d8:	2308      	movs	r3, #8
   198da:	aa01      	add	r2, sp, #4
   198dc:	3908      	subs	r1, #8
   198de:	f7ff f911 	bl	18b04 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   198e2:	b9b0      	cbnz	r0, 19912 <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   198e4:	9a02      	ldr	r2, [sp, #8]
   198e6:	4b11      	ldr	r3, [pc, #68]	; (1992c <mfg_read_mmr+0x68>)
   198e8:	429a      	cmp	r2, r3
   198ea:	d115      	bne.n	19918 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   198ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
   198f0:	2b02      	cmp	r3, #2
   198f2:	d114      	bne.n	1991e <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   198f4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   198f8:	9b03      	ldr	r3, [sp, #12]
   198fa:	689b      	ldr	r3, [r3, #8]
   198fc:	429a      	cmp	r2, r3
   198fe:	d811      	bhi.n	19924 <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   19900:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   19902:	7025      	strb	r5, [r4, #0]
   19904:	6063      	str	r3, [r4, #4]
   19906:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   19908:	b005      	add	sp, #20
   1990a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1990c:	f06f 0004 	mvn.w	r0, #4
   19910:	e7fa      	b.n	19908 <mfg_read_mmr+0x44>
        return SYS_EIO;
   19912:	f06f 0004 	mvn.w	r0, #4
   19916:	e7f7      	b.n	19908 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   19918:	f06f 0008 	mvn.w	r0, #8
   1991c:	e7f4      	b.n	19908 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   1991e:	f06f 000b 	mvn.w	r0, #11
   19922:	e7f1      	b.n	19908 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   19924:	f06f 0008 	mvn.w	r0, #8
   19928:	e7ee      	b.n	19908 <mfg_read_mmr+0x44>
   1992a:	bf00      	nop
   1992c:	3bb2a269 	.word	0x3bb2a269

00019930 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   19930:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   19932:	2300      	movs	r3, #0
   19934:	4a10      	ldr	r2, [pc, #64]	; (19978 <mfg_read_next_mmr+0x48>)
   19936:	6811      	ldr	r1, [r2, #0]
   19938:	4299      	cmp	r1, r3
   1993a:	dd08      	ble.n	1994e <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1993c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   19940:	490e      	ldr	r1, [pc, #56]	; (1997c <mfg_read_next_mmr+0x4c>)
   19942:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   19946:	4282      	cmp	r2, r0
   19948:	d010      	beq.n	1996c <mfg_read_next_mmr+0x3c>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1994a:	3301      	adds	r3, #1
   1994c:	e7f2      	b.n	19934 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1994e:	2901      	cmp	r1, #1
   19950:	dc0f      	bgt.n	19972 <mfg_read_next_mmr+0x42>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   19952:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19956:	4b09      	ldr	r3, [pc, #36]	; (1997c <mfg_read_next_mmr+0x4c>)
   19958:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1995c:	f7ff ffb2 	bl	198c4 <mfg_read_mmr>
    if (rc != 0) {
   19960:	b930      	cbnz	r0, 19970 <mfg_read_next_mmr+0x40>
        return rc;
    }

    mfg_num_mmrs++;
   19962:	4a05      	ldr	r2, [pc, #20]	; (19978 <mfg_read_next_mmr+0x48>)
   19964:	6813      	ldr	r3, [r2, #0]
   19966:	3301      	adds	r3, #1
   19968:	6013      	str	r3, [r2, #0]
    return 0;
   1996a:	e001      	b.n	19970 <mfg_read_next_mmr+0x40>
            return SYS_EALREADY;
   1996c:	f06f 000a 	mvn.w	r0, #10
}
   19970:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   19972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19976:	e7fb      	b.n	19970 <mfg_read_next_mmr+0x40>
   19978:	10001da8 	.word	0x10001da8
   1997c:	10001d90 	.word	0x10001d90

00019980 <mfg_open_flash_area>:
{
   19980:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   19982:	7883      	ldrb	r3, [r0, #2]
   19984:	4a0c      	ldr	r2, [pc, #48]	; (199b8 <mfg_open_flash_area+0x38>)
   19986:	6812      	ldr	r2, [r2, #0]
   19988:	4293      	cmp	r3, r2
   1998a:	da08      	bge.n	1999e <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   1998c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19990:	4a0a      	ldr	r2, [pc, #40]	; (199bc <mfg_open_flash_area+0x3c>)
   19992:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   19996:	f7ff f85d 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   1999a:	b950      	cbnz	r0, 199b2 <mfg_open_flash_area+0x32>
}
   1999c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1999e:	f7fa fe59 	bl	14654 <hal_debugger_connected>
   199a2:	b100      	cbz	r0, 199a6 <mfg_open_flash_area+0x26>
   199a4:	be01      	bkpt	0x0001
   199a6:	2300      	movs	r3, #0
   199a8:	461a      	mov	r2, r3
   199aa:	4619      	mov	r1, r3
   199ac:	4618      	mov	r0, r3
   199ae:	f7fb f9f3 	bl	14d98 <__assert_func>
        return SYS_EIO;
   199b2:	f06f 0004 	mvn.w	r0, #4
   199b6:	e7f1      	b.n	1999c <mfg_open_flash_area+0x1c>
   199b8:	10001da8 	.word	0x10001da8
   199bc:	10001d90 	.word	0x10001d90

000199c0 <mfg_read_tlv_body>:
{
   199c0:	b570      	push	{r4, r5, r6, lr}
   199c2:	b082      	sub	sp, #8
   199c4:	4606      	mov	r6, r0
   199c6:	460c      	mov	r4, r1
   199c8:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   199ca:	a901      	add	r1, sp, #4
   199cc:	f7ff ffd8 	bl	19980 <mfg_open_flash_area>
    if (rc != 0) {
   199d0:	b108      	cbz	r0, 199d6 <mfg_read_tlv_body+0x16>
}
   199d2:	b002      	add	sp, #8
   199d4:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   199d6:	462a      	mov	r2, r5
   199d8:	2100      	movs	r1, #0
   199da:	4620      	mov	r0, r4
   199dc:	f7fd f88b 	bl	16af6 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   199e0:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   199e2:	6871      	ldr	r1, [r6, #4]
   199e4:	42ab      	cmp	r3, r5
   199e6:	bfa8      	it	ge
   199e8:	462b      	movge	r3, r5
   199ea:	4622      	mov	r2, r4
   199ec:	3102      	adds	r1, #2
   199ee:	9801      	ldr	r0, [sp, #4]
   199f0:	f7ff f888 	bl	18b04 <flash_area_read>
    if (rc != 0) {
   199f4:	2800      	cmp	r0, #0
   199f6:	d0ec      	beq.n	199d2 <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   199f8:	f06f 0004 	mvn.w	r0, #4
   199fc:	e7e9      	b.n	199d2 <mfg_read_tlv_body+0x12>

000199fe <mfg_seek_next>:
{
   199fe:	b510      	push	{r4, lr}
   19a00:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   19a02:	4620      	mov	r0, r4
   19a04:	f7ff ff16 	bl	19834 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   19a08:	f110 0f06 	cmn.w	r0, #6
   19a0c:	d0f9      	beq.n	19a02 <mfg_seek_next+0x4>
}
   19a0e:	bd10      	pop	{r4, pc}

00019a10 <mfg_seek_next_with_type>:
{
   19a10:	b538      	push	{r3, r4, r5, lr}
   19a12:	4604      	mov	r4, r0
   19a14:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   19a16:	4620      	mov	r0, r4
   19a18:	f7ff fff1 	bl	199fe <mfg_seek_next>
        if (rc != 0) {
   19a1c:	4602      	mov	r2, r0
   19a1e:	b910      	cbnz	r0, 19a26 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   19a20:	7823      	ldrb	r3, [r4, #0]
   19a22:	42ab      	cmp	r3, r5
   19a24:	d1f7      	bne.n	19a16 <mfg_seek_next_with_type+0x6>
}
   19a26:	4610      	mov	r0, r2
   19a28:	bd38      	pop	{r3, r4, r5, pc}

00019a2a <mfg_read_tlv_mmr_ref>:
{
   19a2a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   19a2c:	2201      	movs	r2, #1
   19a2e:	f7ff ffc7 	bl	199c0 <mfg_read_tlv_body>
}
   19a32:	bd08      	pop	{r3, pc}

00019a34 <mfg_read_tlv_hash>:
{
   19a34:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_hash, MFG_HASH_SZ);
   19a36:	2220      	movs	r2, #32
   19a38:	f7ff ffc2 	bl	199c0 <mfg_read_tlv_body>
}
   19a3c:	bd08      	pop	{r3, pc}
	...

00019a40 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   19a40:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   19a42:	4b0d      	ldr	r3, [pc, #52]	; (19a78 <mfg_init+0x38>)
   19a44:	781b      	ldrb	r3, [r3, #0]
   19a46:	b94b      	cbnz	r3, 19a5c <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   19a48:	4b0b      	ldr	r3, [pc, #44]	; (19a78 <mfg_init+0x38>)
   19a4a:	2201      	movs	r2, #1
   19a4c:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19a4e:	4b0b      	ldr	r3, [pc, #44]	; (19a7c <mfg_init+0x3c>)
   19a50:	781b      	ldrb	r3, [r3, #0]
   19a52:	b123      	cbz	r3, 19a5e <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   19a54:	2000      	movs	r0, #0
   19a56:	f7ff ff6b 	bl	19930 <mfg_read_next_mmr>
    if (rc != 0) {
   19a5a:	b150      	cbz	r0, 19a72 <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
   19a5c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19a5e:	f7fa fdf9 	bl	14654 <hal_debugger_connected>
   19a62:	b100      	cbz	r0, 19a66 <mfg_init+0x26>
   19a64:	be01      	bkpt	0x0001
   19a66:	2300      	movs	r3, #0
   19a68:	461a      	mov	r2, r3
   19a6a:	4619      	mov	r1, r3
   19a6c:	4618      	mov	r0, r3
   19a6e:	f7fb f993 	bl	14d98 <__assert_func>
    rc = mfg_read_mmr_refs();
   19a72:	f000 f80d 	bl	19a90 <mfg_read_mmr_refs>
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
   19a76:	e7f1      	b.n	19a5c <mfg_init+0x1c>
   19a78:	10001d8c 	.word	0x10001d8c
   19a7c:	10001e3c 	.word	0x10001e3c

00019a80 <mfg_open>:
{
   19a80:	b510      	push	{r4, lr}
   19a82:	4604      	mov	r4, r0
    mfg_init();
   19a84:	f7ff ffdc 	bl	19a40 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   19a88:	2300      	movs	r3, #0
   19a8a:	6023      	str	r3, [r4, #0]
   19a8c:	6063      	str	r3, [r4, #4]
}
   19a8e:	bd10      	pop	{r4, pc}

00019a90 <mfg_read_mmr_refs>:
{
   19a90:	b500      	push	{lr}
   19a92:	b085      	sub	sp, #20
    mfg_open(&reader);
   19a94:	a801      	add	r0, sp, #4
   19a96:	f7ff fff3 	bl	19a80 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   19a9a:	2104      	movs	r1, #4
   19a9c:	eb0d 0001 	add.w	r0, sp, r1
   19aa0:	f7ff ffb6 	bl	19a10 <mfg_seek_next_with_type>
        switch (rc) {
   19aa4:	f110 0f0f 	cmn.w	r0, #15
   19aa8:	d00f      	beq.n	19aca <mfg_read_mmr_refs+0x3a>
   19aaa:	b978      	cbnz	r0, 19acc <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   19aac:	a903      	add	r1, sp, #12
   19aae:	a801      	add	r0, sp, #4
   19ab0:	f7ff ffbb 	bl	19a2a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   19ab4:	b950      	cbnz	r0, 19acc <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   19ab6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   19aba:	f7ff ff39 	bl	19930 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   19abe:	2800      	cmp	r0, #0
   19ac0:	d0eb      	beq.n	19a9a <mfg_read_mmr_refs+0xa>
   19ac2:	f110 0f0b 	cmn.w	r0, #11
   19ac6:	d0e8      	beq.n	19a9a <mfg_read_mmr_refs+0xa>
   19ac8:	e000      	b.n	19acc <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   19aca:	2000      	movs	r0, #0
}
   19acc:	b005      	add	sp, #20
   19ace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00019ad4 <reboot_conf_export>:
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    char str[12];

    if (tgt == CONF_EXPORT_SHOW) {
   19ad4:	2901      	cmp	r1, #1
   19ad6:	d001      	beq.n	19adc <reboot_conf_export+0x8>
        func("reboot/written",
             conf_str_from_value(CONF_BOOL, &log_reboot_written, str,
                                 sizeof str));
    }
    return 0;
}
   19ad8:	2000      	movs	r0, #0
   19ada:	4770      	bx	lr
{
   19adc:	b510      	push	{r4, lr}
   19ade:	b084      	sub	sp, #16
   19ae0:	4604      	mov	r4, r0
        func("reboot/reboot_cnt",
   19ae2:	230c      	movs	r3, #12
   19ae4:	aa01      	add	r2, sp, #4
   19ae6:	4909      	ldr	r1, [pc, #36]	; (19b0c <reboot_conf_export+0x38>)
   19ae8:	2003      	movs	r0, #3
   19aea:	f7fd fdaf 	bl	1764c <conf_str_from_value>
   19aee:	4601      	mov	r1, r0
   19af0:	4807      	ldr	r0, [pc, #28]	; (19b10 <reboot_conf_export+0x3c>)
   19af2:	47a0      	blx	r4
        func("reboot/written",
   19af4:	230c      	movs	r3, #12
   19af6:	aa01      	add	r2, sp, #4
   19af8:	4906      	ldr	r1, [pc, #24]	; (19b14 <reboot_conf_export+0x40>)
   19afa:	200a      	movs	r0, #10
   19afc:	f7fd fda6 	bl	1764c <conf_str_from_value>
   19b00:	4601      	mov	r1, r0
   19b02:	4805      	ldr	r0, [pc, #20]	; (19b18 <reboot_conf_export+0x44>)
   19b04:	47a0      	blx	r4
}
   19b06:	2000      	movs	r0, #0
   19b08:	b004      	add	sp, #16
   19b0a:	bd10      	pop	{r4, pc}
   19b0c:	10001dae 	.word	0x10001dae
   19b10:	00034454 	.word	0x00034454
   19b14:	10001dac 	.word	0x10001dac
   19b18:	00034468 	.word	0x00034468

00019b1c <reboot_conf_get>:
    if (argc == 1) {
   19b1c:	2801      	cmp	r0, #1
   19b1e:	d11d      	bne.n	19b5c <reboot_conf_get+0x40>
{
   19b20:	b570      	push	{r4, r5, r6, lr}
   19b22:	4614      	mov	r4, r2
   19b24:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "reboot_cnt")) {
   19b26:	680e      	ldr	r6, [r1, #0]
   19b28:	490d      	ldr	r1, [pc, #52]	; (19b60 <reboot_conf_get+0x44>)
   19b2a:	4630      	mov	r0, r6
   19b2c:	f7fc ffff 	bl	16b2e <strcmp>
   19b30:	b130      	cbz	r0, 19b40 <reboot_conf_get+0x24>
        } else if (!strcmp(argv[0], "written")) {
   19b32:	490c      	ldr	r1, [pc, #48]	; (19b64 <reboot_conf_get+0x48>)
   19b34:	4630      	mov	r0, r6
   19b36:	f7fc fffa 	bl	16b2e <strcmp>
   19b3a:	b140      	cbz	r0, 19b4e <reboot_conf_get+0x32>
    return NULL;
   19b3c:	2000      	movs	r0, #0
}
   19b3e:	bd70      	pop	{r4, r5, r6, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt, buf, max_len);
   19b40:	462b      	mov	r3, r5
   19b42:	4622      	mov	r2, r4
   19b44:	4908      	ldr	r1, [pc, #32]	; (19b68 <reboot_conf_get+0x4c>)
   19b46:	2003      	movs	r0, #3
   19b48:	f7fd fd80 	bl	1764c <conf_str_from_value>
   19b4c:	e7f7      	b.n	19b3e <reboot_conf_get+0x22>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   19b4e:	462b      	mov	r3, r5
   19b50:	4622      	mov	r2, r4
   19b52:	4906      	ldr	r1, [pc, #24]	; (19b6c <reboot_conf_get+0x50>)
   19b54:	200a      	movs	r0, #10
   19b56:	f7fd fd79 	bl	1764c <conf_str_from_value>
   19b5a:	e7f0      	b.n	19b3e <reboot_conf_get+0x22>
    return NULL;
   19b5c:	2000      	movs	r0, #0
}
   19b5e:	4770      	bx	lr
   19b60:	00034478 	.word	0x00034478
   19b64:	00034484 	.word	0x00034484
   19b68:	10001dae 	.word	0x10001dae
   19b6c:	10001dac 	.word	0x10001dac

00019b70 <reboot_conf_set>:
    if (argc == 1) {
   19b70:	2801      	cmp	r0, #1
   19b72:	d001      	beq.n	19b78 <reboot_conf_set+0x8>
    return OS_ENOENT;
   19b74:	200a      	movs	r0, #10
}
   19b76:	4770      	bx	lr
{
   19b78:	b538      	push	{r3, r4, r5, lr}
   19b7a:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   19b7c:	680d      	ldr	r5, [r1, #0]
   19b7e:	490d      	ldr	r1, [pc, #52]	; (19bb4 <reboot_conf_set+0x44>)
   19b80:	4628      	mov	r0, r5
   19b82:	f7fc ffd4 	bl	16b2e <strcmp>
   19b86:	b130      	cbz	r0, 19b96 <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   19b88:	490b      	ldr	r1, [pc, #44]	; (19bb8 <reboot_conf_set+0x48>)
   19b8a:	4628      	mov	r0, r5
   19b8c:	f7fc ffcf 	bl	16b2e <strcmp>
   19b90:	b140      	cbz	r0, 19ba4 <reboot_conf_set+0x34>
    return OS_ENOENT;
   19b92:	200a      	movs	r0, #10
}
   19b94:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   19b96:	2302      	movs	r3, #2
   19b98:	4a08      	ldr	r2, [pc, #32]	; (19bbc <reboot_conf_set+0x4c>)
   19b9a:	2103      	movs	r1, #3
   19b9c:	4620      	mov	r0, r4
   19b9e:	f7fd fc9a 	bl	174d6 <conf_value_from_str>
   19ba2:	e7f7      	b.n	19b94 <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   19ba4:	2301      	movs	r3, #1
   19ba6:	4a06      	ldr	r2, [pc, #24]	; (19bc0 <reboot_conf_set+0x50>)
   19ba8:	2103      	movs	r1, #3
   19baa:	4620      	mov	r0, r4
   19bac:	f7fd fc93 	bl	174d6 <conf_value_from_str>
   19bb0:	e7f0      	b.n	19b94 <reboot_conf_set+0x24>
   19bb2:	bf00      	nop
   19bb4:	00034478 	.word	0x00034478
   19bb8:	00034484 	.word	0x00034484
   19bbc:	10001dae 	.word	0x10001dae
   19bc0:	10001dac 	.word	0x10001dac

00019bc4 <log_reboot_init_fcb>:
{
   19bc4:	b510      	push	{r4, lr}
   19bc6:	b084      	sub	sp, #16
    if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   19bc8:	a903      	add	r1, sp, #12
   19bca:	2010      	movs	r0, #16
   19bcc:	f7fe ff42 	bl	18a54 <flash_area_open>
   19bd0:	2800      	cmp	r0, #0
   19bd2:	d133      	bne.n	19c3c <log_reboot_init_fcb+0x78>
    reboot_log_fcb.fl_entries = MYNEWT_VAL(REBOOT_LOG_ENTRY_COUNT);
   19bd4:	4b1b      	ldr	r3, [pc, #108]	; (19c44 <log_reboot_init_fcb+0x80>)
   19bd6:	220a      	movs	r2, #10
   19bd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    reboot_sector = *ptr;
   19bdc:	9a03      	ldr	r2, [sp, #12]
   19bde:	4c1a      	ldr	r4, [pc, #104]	; (19c48 <log_reboot_init_fcb+0x84>)
   19be0:	ca07      	ldmia	r2, {r0, r1, r2}
   19be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fcbp->f_magic = 0x7EADBADF;
   19be6:	4a19      	ldr	r2, [pc, #100]	; (19c4c <log_reboot_init_fcb+0x88>)
   19be8:	601a      	str	r2, [r3, #0]
    fcbp->f_version = g_log_info.li_version;
   19bea:	4a19      	ldr	r2, [pc, #100]	; (19c50 <log_reboot_init_fcb+0x8c>)
   19bec:	7912      	ldrb	r2, [r2, #4]
   19bee:	711a      	strb	r2, [r3, #4]
    fcbp->f_sector_cnt = 1;
   19bf0:	2201      	movs	r2, #1
   19bf2:	715a      	strb	r2, [r3, #5]
    fcbp->f_sectors = &reboot_sector;
   19bf4:	609c      	str	r4, [r3, #8]
    rc = fcb_init(fcbp);
   19bf6:	4618      	mov	r0, r3
   19bf8:	f015 ff3a 	bl	2fa70 <fcb_init>
    if (rc) {
   19bfc:	b148      	cbz	r0, 19c12 <log_reboot_init_fcb+0x4e>
        flash_area_erase(ptr, 0, ptr->fa_size);
   19bfe:	9803      	ldr	r0, [sp, #12]
   19c00:	6882      	ldr	r2, [r0, #8]
   19c02:	2100      	movs	r1, #0
   19c04:	f7fe ffa4 	bl	18b50 <flash_area_erase>
        rc = fcb_init(fcbp);
   19c08:	480e      	ldr	r0, [pc, #56]	; (19c44 <log_reboot_init_fcb+0x80>)
   19c0a:	f015 ff31 	bl	2fa70 <fcb_init>
        if (rc) {
   19c0e:	4603      	mov	r3, r0
   19c10:	b948      	cbnz	r0, 19c26 <log_reboot_init_fcb+0x62>
    rc = log_register("reboot_log", &reboot_log, &log_fcb_handler,
   19c12:	2300      	movs	r3, #0
   19c14:	9300      	str	r3, [sp, #0]
   19c16:	4b0b      	ldr	r3, [pc, #44]	; (19c44 <log_reboot_init_fcb+0x80>)
   19c18:	4a0e      	ldr	r2, [pc, #56]	; (19c54 <log_reboot_init_fcb+0x90>)
   19c1a:	490f      	ldr	r1, [pc, #60]	; (19c58 <log_reboot_init_fcb+0x94>)
   19c1c:	480f      	ldr	r0, [pc, #60]	; (19c5c <log_reboot_init_fcb+0x98>)
   19c1e:	f7ff fa93 	bl	19148 <log_register>
    if (rc != 0) {
   19c22:	4603      	mov	r3, r0
   19c24:	b110      	cbz	r0, 19c2c <log_reboot_init_fcb+0x68>
}
   19c26:	4618      	mov	r0, r3
   19c28:	b004      	add	sp, #16
   19c2a:	bd10      	pop	{r4, pc}
    rc = modlog_register(LOG_MODULE_REBOOT, &reboot_log, LOG_SYSLEVEL,
   19c2c:	2300      	movs	r3, #0
   19c2e:	461a      	mov	r2, r3
   19c30:	4909      	ldr	r1, [pc, #36]	; (19c58 <log_reboot_init_fcb+0x94>)
   19c32:	2006      	movs	r0, #6
   19c34:	f7ff fd42 	bl	196bc <modlog_register>
   19c38:	4603      	mov	r3, r0
    if (rc != 0) {
   19c3a:	e7f4      	b.n	19c26 <log_reboot_init_fcb+0x62>
        return SYS_EUNKNOWN;
   19c3c:	f06f 030c 	mvn.w	r3, #12
   19c40:	e7f1      	b.n	19c26 <log_reboot_init_fcb+0x62>
   19c42:	bf00      	nop
   19c44:	10001dcc 	.word	0x10001dcc
   19c48:	10001e00 	.word	0x10001e00
   19c4c:	7eadbadf 	.word	0x7eadbadf
   19c50:	10001bd0 	.word	0x10001bd0
   19c54:	000356ac 	.word	0x000356ac
   19c58:	10001db0 	.word	0x10001db0
   19c5c:	0003448c 	.word	0x0003448c

00019c60 <log_reboot_init_console>:
{
   19c60:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   19c62:	f7ff fc03 	bl	1946c <log_console_get>
   19c66:	4601      	mov	r1, r0
   19c68:	2300      	movs	r3, #0
   19c6a:	461a      	mov	r2, r3
   19c6c:	2006      	movs	r0, #6
   19c6e:	f7ff fd25 	bl	196bc <modlog_register>
}
   19c72:	bd08      	pop	{r3, pc}

00019c74 <log_reboot_reason_str>:

const char *
log_reboot_reason_str(enum hal_reset_reason reason)
{
   19c74:	b510      	push	{r4, lr}
    static char str_reason[MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE)];

    if (reason >= HAL_RESET_OTHER) {
   19c76:	28ff      	cmp	r0, #255	; 0xff
   19c78:	d808      	bhi.n	19c8c <log_reboot_reason_str+0x18>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
        return str_reason;
    }

    switch (reason) {
   19c7a:	1e43      	subs	r3, r0, #1
   19c7c:	2b07      	cmp	r3, #7
   19c7e:	d81d      	bhi.n	19cbc <log_reboot_reason_str+0x48>
   19c80:	e8df f003 	tbb	[pc, r3]
   19c84:	1210250e 	.word	0x1210250e
   19c88:	1a181614 	.word	0x1a181614
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
   19c8c:	4c11      	ldr	r4, [pc, #68]	; (19cd4 <log_reboot_reason_str+0x60>)
   19c8e:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   19c92:	4a11      	ldr	r2, [pc, #68]	; (19cd8 <log_reboot_reason_str+0x64>)
   19c94:	2120      	movs	r1, #32
   19c96:	4620      	mov	r0, r4
   19c98:	f018 ff39 	bl	32b0e <snprintf>
        return str_reason;
   19c9c:	4620      	mov	r0, r4
    default:
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
        return str_reason;
        break;
    }
}
   19c9e:	bd10      	pop	{r4, pc}
    switch (reason) {
   19ca0:	480e      	ldr	r0, [pc, #56]	; (19cdc <log_reboot_reason_str+0x68>)
   19ca2:	e7fc      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "WDOG";
   19ca4:	480e      	ldr	r0, [pc, #56]	; (19ce0 <log_reboot_reason_str+0x6c>)
   19ca6:	e7fa      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "SOFT";
   19ca8:	480e      	ldr	r0, [pc, #56]	; (19ce4 <log_reboot_reason_str+0x70>)
   19caa:	e7f8      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "BROWNOUT";
   19cac:	480e      	ldr	r0, [pc, #56]	; (19ce8 <log_reboot_reason_str+0x74>)
   19cae:	e7f6      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "REQUESTED";
   19cb0:	480e      	ldr	r0, [pc, #56]	; (19cec <log_reboot_reason_str+0x78>)
   19cb2:	e7f4      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "SYSTEM_OFF_INT";
   19cb4:	480e      	ldr	r0, [pc, #56]	; (19cf0 <log_reboot_reason_str+0x7c>)
   19cb6:	e7f2      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "DFU";
   19cb8:	480e      	ldr	r0, [pc, #56]	; (19cf4 <log_reboot_reason_str+0x80>)
   19cba:	e7f0      	b.n	19c9e <log_reboot_reason_str+0x2a>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
   19cbc:	4c05      	ldr	r4, [pc, #20]	; (19cd4 <log_reboot_reason_str+0x60>)
   19cbe:	4603      	mov	r3, r0
   19cc0:	4a0d      	ldr	r2, [pc, #52]	; (19cf8 <log_reboot_reason_str+0x84>)
   19cc2:	2120      	movs	r1, #32
   19cc4:	4620      	mov	r0, r4
   19cc6:	f018 ff22 	bl	32b0e <snprintf>
        return str_reason;
   19cca:	4620      	mov	r0, r4
   19ccc:	e7e7      	b.n	19c9e <log_reboot_reason_str+0x2a>
        return "RESET_PIN";
   19cce:	480b      	ldr	r0, [pc, #44]	; (19cfc <log_reboot_reason_str+0x88>)
        break;
   19cd0:	e7e5      	b.n	19c9e <log_reboot_reason_str+0x2a>
   19cd2:	bf00      	nop
   19cd4:	10001e0c 	.word	0x10001e0c
   19cd8:	000344e8 	.word	0x000344e8
   19cdc:	000344e0 	.word	0x000344e0
   19ce0:	000344a4 	.word	0x000344a4
   19ce4:	000344ac 	.word	0x000344ac
   19ce8:	000344b4 	.word	0x000344b4
   19cec:	000344c0 	.word	0x000344c0
   19cf0:	000344cc 	.word	0x000344cc
   19cf4:	000344dc 	.word	0x000344dc
   19cf8:	000344f4 	.word	0x000344f4
   19cfc:	00034498 	.word	0x00034498

00019d00 <log_reboot_write>:
{
   19d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d02:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   19d06:	4607      	mov	r7, r0
        if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   19d08:	a904      	add	r1, sp, #16
   19d0a:	2010      	movs	r0, #16
   19d0c:	f7fe fea2 	bl	18a54 <flash_area_open>
   19d10:	b120      	cbz	r0, 19d1c <log_reboot_write+0x1c>
            return 0;
   19d12:	2600      	movs	r6, #0
}
   19d14:	4630      	mov	r0, r6
   19d16:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   19d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_read_info(boot_current_slot, &ver, hash, &flags);
   19d1c:	ab05      	add	r3, sp, #20
   19d1e:	aa92      	add	r2, sp, #584	; 0x248
   19d20:	a99a      	add	r1, sp, #616	; 0x268
   19d22:	4887      	ldr	r0, [pc, #540]	; (19f40 <log_reboot_write+0x240>)
   19d24:	6800      	ldr	r0, [r0, #0]
   19d26:	f000 ffb3 	bl	1ac90 <img_mgmt_read_info>
    if (rc != 0) {
   19d2a:	4606      	mov	r6, r0
   19d2c:	2800      	cmp	r0, #0
   19d2e:	d1f1      	bne.n	19d14 <log_reboot_write+0x14>
    memset(cbor_enc_buf, 0, sizeof cbor_enc_buf);
   19d30:	f44f 7480 	mov.w	r4, #256	; 0x100
   19d34:	4622      	mov	r2, r4
   19d36:	2100      	movs	r1, #0
   19d38:	a812      	add	r0, sp, #72	; 0x48
   19d3a:	f7fc fedc 	bl	16af6 <memset>
    cbor_buf_writer_init(&writer, cbor_enc_buf, sizeof cbor_enc_buf);
   19d3e:	4622      	mov	r2, r4
   19d40:	a912      	add	r1, sp, #72	; 0x48
   19d42:	a80e      	add	r0, sp, #56	; 0x38
   19d44:	f014 fc3e 	bl	2e5c4 <cbor_buf_writer_init>
    cbor_encoder_init(&enc, &writer.enc, 0);
   19d48:	2200      	movs	r2, #0
   19d4a:	a90e      	add	r1, sp, #56	; 0x38
   19d4c:	a80a      	add	r0, sp, #40	; 0x28
   19d4e:	f014 fd63 	bl	2e818 <cbor_encoder_init>
    rc = cbor_encoder_create_map(&enc, &map, CborIndefiniteLength);
   19d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19d56:	a906      	add	r1, sp, #24
   19d58:	a80a      	add	r0, sp, #40	; 0x28
   19d5a:	f014 fe1b 	bl	2e994 <cbor_encoder_create_map>
    if (rc != 0) {
   19d5e:	4606      	mov	r6, r0
   19d60:	2800      	cmp	r0, #0
   19d62:	d1d7      	bne.n	19d14 <log_reboot_write+0x14>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   19d64:	2203      	movs	r2, #3
   19d66:	4977      	ldr	r1, [pc, #476]	; (19f44 <log_reboot_write+0x244>)
   19d68:	a806      	add	r0, sp, #24
   19d6a:	f014 fe07 	bl	2e97c <cbor_encode_text_string>
    cbor_encode_text_stringz(&map,log_reboot_reason_str(info->reason));
   19d6e:	8838      	ldrh	r0, [r7, #0]
   19d70:	f7ff ff80 	bl	19c74 <log_reboot_reason_str>
   19d74:	4604      	mov	r4, r0
   19d76:	f7fc fee6 	bl	16b46 <strlen>
   19d7a:	4602      	mov	r2, r0
   19d7c:	4621      	mov	r1, r4
   19d7e:	a806      	add	r0, sp, #24
   19d80:	f014 fdfc 	bl	2e97c <cbor_encode_text_string>
   19d84:	2203      	movs	r2, #3
   19d86:	4970      	ldr	r1, [pc, #448]	; (19f48 <log_reboot_write+0x248>)
   19d88:	a806      	add	r0, sp, #24
   19d8a:	f014 fdf7 	bl	2e97c <cbor_encode_text_string>
    cbor_encode_int(&map, reboot_cnt);
   19d8e:	4b6f      	ldr	r3, [pc, #444]	; (19f4c <log_reboot_write+0x24c>)
   19d90:	881a      	ldrh	r2, [r3, #0]
   19d92:	2300      	movs	r3, #0
   19d94:	a806      	add	r0, sp, #24
   19d96:	f014 fd7c 	bl	2e892 <cbor_encode_int>
   19d9a:	2203      	movs	r2, #3
   19d9c:	496c      	ldr	r1, [pc, #432]	; (19f50 <log_reboot_write+0x250>)
   19d9e:	a806      	add	r0, sp, #24
   19da0:	f014 fdec 	bl	2e97c <cbor_encode_text_string>
                  ver.iv_major, ver.iv_minor, ver.iv_revision,
   19da4:	f89d 3269 	ldrb.w	r3, [sp, #617]	; 0x269
   19da8:	f8bd 226a 	ldrh.w	r2, [sp, #618]	; 0x26a
    snprintf(buf, sizeof buf, "%u.%u.%u.%u",
   19dac:	999b      	ldr	r1, [sp, #620]	; 0x26c
   19dae:	9102      	str	r1, [sp, #8]
   19db0:	9201      	str	r2, [sp, #4]
   19db2:	9300      	str	r3, [sp, #0]
   19db4:	f89d 3268 	ldrb.w	r3, [sp, #616]	; 0x268
   19db8:	4a66      	ldr	r2, [pc, #408]	; (19f54 <log_reboot_write+0x254>)
   19dba:	f44f 7180 	mov.w	r1, #256	; 0x100
   19dbe:	a852      	add	r0, sp, #328	; 0x148
   19dc0:	f018 fea5 	bl	32b0e <snprintf>
   19dc4:	a852      	add	r0, sp, #328	; 0x148
   19dc6:	f7fc febe 	bl	16b46 <strlen>
   19dca:	4602      	mov	r2, r0
   19dcc:	a952      	add	r1, sp, #328	; 0x148
   19dce:	a806      	add	r0, sp, #24
   19dd0:	f014 fdd4 	bl	2e97c <cbor_encode_text_string>
   19dd4:	2204      	movs	r2, #4
   19dd6:	4960      	ldr	r1, [pc, #384]	; (19f58 <log_reboot_write+0x258>)
   19dd8:	a806      	add	r0, sp, #24
   19dda:	f014 fdcf 	bl	2e97c <cbor_encode_text_string>
    for (i = 0; i < sizeof hash; i++) {
   19dde:	4634      	mov	r4, r6
    off = 0;
   19de0:	4635      	mov	r5, r6
    for (i = 0; i < sizeof hash; i++) {
   19de2:	2c1f      	cmp	r4, #31
   19de4:	d80d      	bhi.n	19e02 <log_reboot_write+0x102>
                        (unsigned int)hash[i]);
   19de6:	ab9c      	add	r3, sp, #624	; 0x270
   19de8:	4423      	add	r3, r4
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   19dea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   19dee:	4a5b      	ldr	r2, [pc, #364]	; (19f5c <log_reboot_write+0x25c>)
   19df0:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   19df4:	a852      	add	r0, sp, #328	; 0x148
   19df6:	4428      	add	r0, r5
   19df8:	f018 fe89 	bl	32b0e <snprintf>
   19dfc:	4405      	add	r5, r0
    for (i = 0; i < sizeof hash; i++) {
   19dfe:	3401      	adds	r4, #1
   19e00:	e7ef      	b.n	19de2 <log_reboot_write+0xe2>
   19e02:	a852      	add	r0, sp, #328	; 0x148
   19e04:	f7fc fe9f 	bl	16b46 <strlen>
   19e08:	4602      	mov	r2, r0
   19e0a:	a952      	add	r1, sp, #328	; 0x148
   19e0c:	a806      	add	r0, sp, #24
   19e0e:	f014 fdb5 	bl	2e97c <cbor_encode_text_string>
    if (info->file != NULL) {
   19e12:	687b      	ldr	r3, [r7, #4]
   19e14:	b1eb      	cbz	r3, 19e52 <log_reboot_write+0x152>
   19e16:	2203      	movs	r2, #3
   19e18:	4951      	ldr	r1, [pc, #324]	; (19f60 <log_reboot_write+0x260>)
   19e1a:	a806      	add	r0, sp, #24
   19e1c:	f014 fdae 	bl	2e97c <cbor_encode_text_string>
        if (strlen(info->file) > ((sizeof buf) / 3)) {
   19e20:	687c      	ldr	r4, [r7, #4]
   19e22:	4620      	mov	r0, r4
   19e24:	f7fc fe8f 	bl	16b46 <strlen>
   19e28:	2855      	cmp	r0, #85	; 0x55
   19e2a:	d952      	bls.n	19ed2 <log_reboot_write+0x1d2>
            off = strlen(info->file) - ((sizeof buf) / 3);
   19e2c:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
        snprintf(buf, sizeof buf, "%s:%d",
   19e30:	68ba      	ldr	r2, [r7, #8]
   19e32:	9200      	str	r2, [sp, #0]
   19e34:	4423      	add	r3, r4
   19e36:	4a4b      	ldr	r2, [pc, #300]	; (19f64 <log_reboot_write+0x264>)
   19e38:	f44f 7180 	mov.w	r1, #256	; 0x100
   19e3c:	a852      	add	r0, sp, #328	; 0x148
   19e3e:	f018 fe66 	bl	32b0e <snprintf>
   19e42:	a852      	add	r0, sp, #328	; 0x148
   19e44:	f7fc fe7f 	bl	16b46 <strlen>
   19e48:	4602      	mov	r2, r0
   19e4a:	a952      	add	r1, sp, #328	; 0x148
   19e4c:	a806      	add	r0, sp, #24
   19e4e:	f014 fd95 	bl	2e97c <cbor_encode_text_string>
    if (info->pc != 0) {
   19e52:	68fb      	ldr	r3, [r7, #12]
   19e54:	2b00      	cmp	r3, #0
   19e56:	d13e      	bne.n	19ed6 <log_reboot_write+0x1d6>
    state_flags = img_mgmt_state_flags(boot_current_slot);
   19e58:	4b39      	ldr	r3, [pc, #228]	; (19f40 <log_reboot_write+0x240>)
   19e5a:	6818      	ldr	r0, [r3, #0]
   19e5c:	f001 f968 	bl	1b130 <img_mgmt_state_flags>
   19e60:	4605      	mov	r5, r0
   19e62:	2205      	movs	r2, #5
   19e64:	4940      	ldr	r1, [pc, #256]	; (19f68 <log_reboot_write+0x268>)
   19e66:	a806      	add	r0, sp, #24
   19e68:	f014 fd88 	bl	2e97c <cbor_encode_text_string>
    buf[0] = '\0';
   19e6c:	2300      	movs	r3, #0
   19e6e:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
    if (state_flags & IMG_MGMT_STATE_F_ACTIVE) {
   19e72:	f015 0f04 	tst.w	r5, #4
   19e76:	d139      	bne.n	19eec <log_reboot_write+0x1ec>
    off = 0;
   19e78:	4634      	mov	r4, r6
    if (!(flags & IMAGE_F_NON_BOOTABLE)) {
   19e7a:	9b05      	ldr	r3, [sp, #20]
   19e7c:	f013 0f10 	tst.w	r3, #16
   19e80:	d03d      	beq.n	19efe <log_reboot_write+0x1fe>
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED) {
   19e82:	f015 0f02 	tst.w	r5, #2
   19e86:	d144      	bne.n	19f12 <log_reboot_write+0x212>
    if (state_flags & IMG_MGMT_STATE_F_PENDING) {
   19e88:	f015 0f01 	tst.w	r5, #1
   19e8c:	d14b      	bne.n	19f26 <log_reboot_write+0x226>
    if (off > 1) {
   19e8e:	2c01      	cmp	r4, #1
   19e90:	dd03      	ble.n	19e9a <log_reboot_write+0x19a>
        buf[off - 1] = '\0';
   19e92:	3c01      	subs	r4, #1
   19e94:	ab52      	add	r3, sp, #328	; 0x148
   19e96:	2200      	movs	r2, #0
   19e98:	551a      	strb	r2, [r3, r4]
   19e9a:	a852      	add	r0, sp, #328	; 0x148
   19e9c:	f7fc fe53 	bl	16b46 <strlen>
   19ea0:	4602      	mov	r2, r0
   19ea2:	a952      	add	r1, sp, #328	; 0x148
   19ea4:	a806      	add	r0, sp, #24
   19ea6:	f014 fd69 	bl	2e97c <cbor_encode_text_string>
    cbor_buf_len = cbor_buf_writer_buffer_size(&writer, cbor_enc_buf) + 1;
   19eaa:	a912      	add	r1, sp, #72	; 0x48
   19eac:	a80e      	add	r0, sp, #56	; 0x38
   19eae:	f014 fb93 	bl	2e5d8 <cbor_buf_writer_buffer_size>
   19eb2:	1c44      	adds	r4, r0, #1
    rc = cbor_encoder_close_container(&enc, &map);
   19eb4:	a906      	add	r1, sp, #24
   19eb6:	a80a      	add	r0, sp, #40	; 0x28
   19eb8:	f014 fd81 	bl	2e9be <cbor_encoder_close_container>
    if (rc != 0) {
   19ebc:	2800      	cmp	r0, #0
   19ebe:	d13c      	bne.n	19f3a <log_reboot_write+0x23a>
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_CBOR,
   19ec0:	b2a4      	uxth	r4, r4
   19ec2:	9400      	str	r4, [sp, #0]
   19ec4:	ab12      	add	r3, sp, #72	; 0x48
   19ec6:	2201      	movs	r2, #1
   19ec8:	2104      	movs	r1, #4
   19eca:	2006      	movs	r0, #6
   19ecc:	f7ff fc10 	bl	196f0 <modlog_append>
    return 0;
   19ed0:	e720      	b.n	19d14 <log_reboot_write+0x14>
        off  = 0;
   19ed2:	4633      	mov	r3, r6
   19ed4:	e7ac      	b.n	19e30 <log_reboot_write+0x130>
   19ed6:	2202      	movs	r2, #2
   19ed8:	4924      	ldr	r1, [pc, #144]	; (19f6c <log_reboot_write+0x26c>)
   19eda:	a806      	add	r0, sp, #24
   19edc:	f014 fd4e 	bl	2e97c <cbor_encode_text_string>
        cbor_encode_int(&map, info->pc);
   19ee0:	68fa      	ldr	r2, [r7, #12]
   19ee2:	2300      	movs	r3, #0
   19ee4:	a806      	add	r0, sp, #24
   19ee6:	f014 fcd4 	bl	2e892 <cbor_encode_int>
   19eea:	e7b5      	b.n	19e58 <log_reboot_write+0x158>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "active");
   19eec:	4b20      	ldr	r3, [pc, #128]	; (19f70 <log_reboot_write+0x270>)
   19eee:	4a21      	ldr	r2, [pc, #132]	; (19f74 <log_reboot_write+0x274>)
   19ef0:	f44f 7180 	mov.w	r1, #256	; 0x100
   19ef4:	a852      	add	r0, sp, #328	; 0x148
   19ef6:	f018 fe0a 	bl	32b0e <snprintf>
   19efa:	2407      	movs	r4, #7
   19efc:	e7bd      	b.n	19e7a <log_reboot_write+0x17a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "bootable");
   19efe:	4b1e      	ldr	r3, [pc, #120]	; (19f78 <log_reboot_write+0x278>)
   19f00:	4a1c      	ldr	r2, [pc, #112]	; (19f74 <log_reboot_write+0x274>)
   19f02:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   19f06:	a852      	add	r0, sp, #328	; 0x148
   19f08:	4420      	add	r0, r4
   19f0a:	f018 fe00 	bl	32b0e <snprintf>
   19f0e:	4404      	add	r4, r0
   19f10:	e7b7      	b.n	19e82 <log_reboot_write+0x182>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "confirmed");
   19f12:	4b1a      	ldr	r3, [pc, #104]	; (19f7c <log_reboot_write+0x27c>)
   19f14:	4a17      	ldr	r2, [pc, #92]	; (19f74 <log_reboot_write+0x274>)
   19f16:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   19f1a:	a852      	add	r0, sp, #328	; 0x148
   19f1c:	4420      	add	r0, r4
   19f1e:	f018 fdf6 	bl	32b0e <snprintf>
   19f22:	4404      	add	r4, r0
   19f24:	e7b0      	b.n	19e88 <log_reboot_write+0x188>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "pending");
   19f26:	4b16      	ldr	r3, [pc, #88]	; (19f80 <log_reboot_write+0x280>)
   19f28:	4a12      	ldr	r2, [pc, #72]	; (19f74 <log_reboot_write+0x274>)
   19f2a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   19f2e:	a852      	add	r0, sp, #328	; 0x148
   19f30:	4420      	add	r0, r4
   19f32:	f018 fdec 	bl	32b0e <snprintf>
   19f36:	4404      	add	r4, r0
   19f38:	e7a9      	b.n	19e8e <log_reboot_write+0x18e>
        return SYS_ENOMEM;
   19f3a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   19f3e:	e6e9      	b.n	19d14 <log_reboot_write+0x14>
   19f40:	10003c50 	.word	0x10003c50
   19f44:	00034500 	.word	0x00034500
   19f48:	00034504 	.word	0x00034504
   19f4c:	10001dae 	.word	0x10001dae
   19f50:	00034508 	.word	0x00034508
   19f54:	0003450c 	.word	0x0003450c
   19f58:	00034518 	.word	0x00034518
   19f5c:	00035004 	.word	0x00035004
   19f60:	00034520 	.word	0x00034520
   19f64:	00034524 	.word	0x00034524
   19f68:	00034530 	.word	0x00034530
   19f6c:	0003452c 	.word	0x0003452c
   19f70:	00034538 	.word	0x00034538
   19f74:	00034540 	.word	0x00034540
   19f78:	00034544 	.word	0x00034544
   19f7c:	00034550 	.word	0x00034550
   19f80:	0003455c 	.word	0x0003455c

00019f84 <log_reboot>:
{
   19f84:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   19f86:	4b0d      	ldr	r3, [pc, #52]	; (19fbc <log_reboot+0x38>)
   19f88:	f993 3000 	ldrsb.w	r3, [r3]
   19f8c:	b113      	cbz	r3, 19f94 <log_reboot+0x10>
        return 0;
   19f8e:	2500      	movs	r5, #0
}
   19f90:	4628      	mov	r0, r5
   19f92:	bd38      	pop	{r3, r4, r5, pc}
   19f94:	4604      	mov	r4, r0
    rc = log_reboot_write(info);
   19f96:	f7ff feb3 	bl	19d00 <log_reboot_write>
    if (rc != 0) {
   19f9a:	4605      	mov	r5, r0
   19f9c:	2800      	cmp	r0, #0
   19f9e:	d1f7      	bne.n	19f90 <log_reboot+0xc>
    if (info->reason != HAL_RESET_REQUESTED &&
   19fa0:	8823      	ldrh	r3, [r4, #0]
   19fa2:	2b06      	cmp	r3, #6
   19fa4:	d0f4      	beq.n	19f90 <log_reboot+0xc>
   19fa6:	2b08      	cmp	r3, #8
   19fa8:	d0f2      	beq.n	19f90 <log_reboot+0xc>
        log_reboot_written = 1;
   19faa:	4b04      	ldr	r3, [pc, #16]	; (19fbc <log_reboot+0x38>)
   19fac:	2201      	movs	r2, #1
   19fae:	701a      	strb	r2, [r3, #0]
        conf_save_one("reboot/written", "1");
   19fb0:	4903      	ldr	r1, [pc, #12]	; (19fc0 <log_reboot+0x3c>)
   19fb2:	4804      	ldr	r0, [pc, #16]	; (19fc4 <log_reboot+0x40>)
   19fb4:	f7fd f960 	bl	17278 <conf_save_one>
   19fb8:	e7ea      	b.n	19f90 <log_reboot+0xc>
   19fba:	bf00      	nop
   19fbc:	10001dac 	.word	0x10001dac
   19fc0:	00034564 	.word	0x00034564
   19fc4:	00034468 	.word	0x00034468

00019fc8 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   19fc8:	b510      	push	{r4, lr}
   19fca:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19fcc:	4b1f      	ldr	r3, [pc, #124]	; (1a04c <log_reboot_pkg_init+0x84>)
   19fce:	781b      	ldrb	r3, [r3, #0]
   19fd0:	b15b      	cbz	r3, 19fea <log_reboot_pkg_init+0x22>

    rc = conf_register(&reboot_conf_handler);
   19fd2:	481f      	ldr	r0, [pc, #124]	; (1a050 <log_reboot_pkg_init+0x88>)
   19fd4:	f7fd fa3c 	bl	17450 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fd8:	b988      	cbnz	r0, 19ffe <log_reboot_pkg_init+0x36>

#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
   19fda:	f7ff fdf3 	bl	19bc4 <log_reboot_init_fcb>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fde:	b9d8      	cbnz	r0, 1a018 <log_reboot_pkg_init+0x50>
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   19fe0:	f7ff fe3e 	bl	19c60 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19fe4:	bb28      	cbnz	r0, 1a032 <log_reboot_pkg_init+0x6a>
#endif
}
   19fe6:	b002      	add	sp, #8
   19fe8:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   19fea:	f7fa fb33 	bl	14654 <hal_debugger_connected>
   19fee:	b100      	cbz	r0, 19ff2 <log_reboot_pkg_init+0x2a>
   19ff0:	be01      	bkpt	0x0001
   19ff2:	2300      	movs	r3, #0
   19ff4:	461a      	mov	r2, r3
   19ff6:	4619      	mov	r1, r3
   19ff8:	4618      	mov	r0, r3
   19ffa:	f7fa fecd 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19ffe:	f7fa fb29 	bl	14654 <hal_debugger_connected>
   1a002:	b100      	cbz	r0, 1a006 <log_reboot_pkg_init+0x3e>
   1a004:	be01      	bkpt	0x0001
   1a006:	2000      	movs	r0, #0
   1a008:	9000      	str	r0, [sp, #0]
   1a00a:	4b12      	ldr	r3, [pc, #72]	; (1a054 <log_reboot_pkg_init+0x8c>)
   1a00c:	681c      	ldr	r4, [r3, #0]
   1a00e:	4603      	mov	r3, r0
   1a010:	4602      	mov	r2, r0
   1a012:	4601      	mov	r1, r0
   1a014:	47a0      	blx	r4
   1a016:	e7e0      	b.n	19fda <log_reboot_pkg_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a018:	f7fa fb1c 	bl	14654 <hal_debugger_connected>
   1a01c:	b100      	cbz	r0, 1a020 <log_reboot_pkg_init+0x58>
   1a01e:	be01      	bkpt	0x0001
   1a020:	2000      	movs	r0, #0
   1a022:	9000      	str	r0, [sp, #0]
   1a024:	4b0b      	ldr	r3, [pc, #44]	; (1a054 <log_reboot_pkg_init+0x8c>)
   1a026:	681c      	ldr	r4, [r3, #0]
   1a028:	4603      	mov	r3, r0
   1a02a:	4602      	mov	r2, r0
   1a02c:	4601      	mov	r1, r0
   1a02e:	47a0      	blx	r4
   1a030:	e7d6      	b.n	19fe0 <log_reboot_pkg_init+0x18>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a032:	f7fa fb0f 	bl	14654 <hal_debugger_connected>
   1a036:	b100      	cbz	r0, 1a03a <log_reboot_pkg_init+0x72>
   1a038:	be01      	bkpt	0x0001
   1a03a:	2000      	movs	r0, #0
   1a03c:	9000      	str	r0, [sp, #0]
   1a03e:	4b05      	ldr	r3, [pc, #20]	; (1a054 <log_reboot_pkg_init+0x8c>)
   1a040:	681c      	ldr	r4, [r3, #0]
   1a042:	4603      	mov	r3, r0
   1a044:	4602      	mov	r2, r0
   1a046:	4601      	mov	r1, r0
   1a048:	47a0      	blx	r4
}
   1a04a:	e7cc      	b.n	19fe6 <log_reboot_pkg_init+0x1e>
   1a04c:	10001e3c 	.word	0x10001e3c
   1a050:	10000264 	.word	0x10000264
   1a054:	1000028c 	.word	0x1000028c

0001a058 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   1a058:	88c3      	ldrh	r3, [r0, #6]
   1a05a:	f013 0f01 	tst.w	r3, #1
   1a05e:	d001      	beq.n	1a064 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   1a060:	2030      	movs	r0, #48	; 0x30
   1a062:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   1a064:	200c      	movs	r0, #12
    }
}
   1a066:	4770      	bx	lr

0001a068 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   1a068:	b570      	push	{r4, r5, r6, lr}
   1a06a:	4606      	mov	r6, r0
   1a06c:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1a06e:	4b0f      	ldr	r3, [pc, #60]	; (1a0ac <stats_register_internal+0x44>)
   1a070:	681c      	ldr	r4, [r3, #0]
   1a072:	e000      	b.n	1a076 <stats_register_internal+0xe>
   1a074:	68a4      	ldr	r4, [r4, #8]
   1a076:	b14c      	cbz	r4, 1a08c <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   1a078:	4631      	mov	r1, r6
   1a07a:	6820      	ldr	r0, [r4, #0]
   1a07c:	f7fc fd57 	bl	16b2e <strcmp>
   1a080:	b188      	cbz	r0, 1a0a6 <stats_register_internal+0x3e>
   1a082:	42ac      	cmp	r4, r5
   1a084:	d1f6      	bne.n	1a074 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   1a086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a08a:	e00b      	b.n	1a0a4 <stats_register_internal+0x3c>
    shdr->s_name = name;
   1a08c:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1a08e:	2000      	movs	r0, #0
   1a090:	60a8      	str	r0, [r5, #8]
   1a092:	4b06      	ldr	r3, [pc, #24]	; (1a0ac <stats_register_internal+0x44>)
   1a094:	685a      	ldr	r2, [r3, #4]
   1a096:	6015      	str	r5, [r2, #0]
   1a098:	3508      	adds	r5, #8
   1a09a:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   1a09c:	4a04      	ldr	r2, [pc, #16]	; (1a0b0 <stats_register_internal+0x48>)
   1a09e:	68d3      	ldr	r3, [r2, #12]
   1a0a0:	3301      	adds	r3, #1
   1a0a2:	60d3      	str	r3, [r2, #12]
}
   1a0a4:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   1a0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0aa:	e7fb      	b.n	1a0a4 <stats_register_internal+0x3c>
   1a0ac:	10000284 	.word	0x10000284
   1a0b0:	10001e2c 	.word	0x10001e2c

0001a0b4 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   1a0b4:	7943      	ldrb	r3, [r0, #5]
   1a0b6:	7900      	ldrb	r0, [r0, #4]
}
   1a0b8:	fb00 f003 	mul.w	r0, r0, r3
   1a0bc:	4770      	bx	lr
	...

0001a0c0 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   1a0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a0c4:	b085      	sub	sp, #20
   1a0c6:	4605      	mov	r5, r0
   1a0c8:	460f      	mov	r7, r1
   1a0ca:	4690      	mov	r8, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   1a0cc:	f7ff ffc4 	bl	1a058 <stats_offset>
   1a0d0:	4681      	mov	r9, r0
   1a0d2:	b284      	uxth	r4, r0
    cur = start;
    end = start + stats_size(hdr);
   1a0d4:	4628      	mov	r0, r5
   1a0d6:	f7ff ffed 	bl	1a0b4 <stats_size>
   1a0da:	fa14 f680 	uxtah	r6, r4, r0
   1a0de:	b2b6      	uxth	r6, r6

    while (cur < end) {
   1a0e0:	42b4      	cmp	r4, r6
   1a0e2:	d21a      	bcs.n	1a11a <stats_walk+0x5a>
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
            ent_n = (cur - start) / hdr->s_size;
   1a0e4:	fa1f f389 	uxth.w	r3, r9
   1a0e8:	1ae3      	subs	r3, r4, r3
   1a0ea:	792a      	ldrb	r2, [r5, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   1a0ec:	fb93 f3f2 	sdiv	r3, r3, r2
   1a0f0:	4a0c      	ldr	r2, [pc, #48]	; (1a124 <stats_walk+0x64>)
   1a0f2:	210c      	movs	r1, #12
   1a0f4:	a801      	add	r0, sp, #4
   1a0f6:	f018 fd0a 	bl	32b0e <snprintf>
            name_buf[len] = '\0';
   1a0fa:	ab04      	add	r3, sp, #16
   1a0fc:	4418      	add	r0, r3
   1a0fe:	2300      	movs	r3, #0
   1a100:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   1a104:	4623      	mov	r3, r4
   1a106:	aa01      	add	r2, sp, #4
   1a108:	4641      	mov	r1, r8
   1a10a:	4628      	mov	r0, r5
   1a10c:	47b8      	blx	r7
        if (rc != 0) {
   1a10e:	4603      	mov	r3, r0
   1a110:	b920      	cbnz	r0, 1a11c <stats_walk+0x5c>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   1a112:	792b      	ldrb	r3, [r5, #4]
   1a114:	441c      	add	r4, r3
   1a116:	b2a4      	uxth	r4, r4
   1a118:	e7e2      	b.n	1a0e0 <stats_walk+0x20>
    }

    return (0);
   1a11a:	2300      	movs	r3, #0
err:
    return (rc);
}
   1a11c:	4618      	mov	r0, r3
   1a11e:	b005      	add	sp, #20
   1a120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a124:	00034570 	.word	0x00034570

0001a128 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   1a128:	b570      	push	{r4, r5, r6, lr}
   1a12a:	4604      	mov	r4, r0
   1a12c:	460e      	mov	r6, r1
   1a12e:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   1a130:	f7ff ff92 	bl	1a058 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   1a134:	fb05 f206 	mul.w	r2, r5, r6
   1a138:	2100      	movs	r1, #0
   1a13a:	4420      	add	r0, r4
   1a13c:	f7fc fcdb 	bl	16af6 <memset>

    shdr->s_size = size;
   1a140:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   1a142:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1a144:	2000      	movs	r0, #0
   1a146:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   1a148:	bd70      	pop	{r4, r5, r6, pc}
	...

0001a14c <stats_module_init_internal>:
{
   1a14c:	b500      	push	{lr}
   1a14e:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   1a150:	4a09      	ldr	r2, [pc, #36]	; (1a178 <stats_module_init_internal+0x2c>)
   1a152:	2300      	movs	r3, #0
   1a154:	6013      	str	r3, [r2, #0]
   1a156:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1a158:	9300      	str	r3, [sp, #0]
   1a15a:	2201      	movs	r2, #1
   1a15c:	2104      	movs	r1, #4
   1a15e:	4807      	ldr	r0, [pc, #28]	; (1a17c <stats_module_init_internal+0x30>)
   1a160:	f7ff ffe2 	bl	1a128 <stats_init>
    if (rc) {
   1a164:	b110      	cbz	r0, 1a16c <stats_module_init_internal+0x20>
}
   1a166:	b003      	add	sp, #12
   1a168:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   1a16c:	4903      	ldr	r1, [pc, #12]	; (1a17c <stats_module_init_internal+0x30>)
   1a16e:	4804      	ldr	r0, [pc, #16]	; (1a180 <stats_module_init_internal+0x34>)
   1a170:	f7ff ff7a 	bl	1a068 <stats_register_internal>
    if (rc) {
   1a174:	e7f7      	b.n	1a166 <stats_module_init_internal+0x1a>
   1a176:	bf00      	nop
   1a178:	10000284 	.word	0x10000284
   1a17c:	10001e2c 	.word	0x10001e2c
   1a180:	00034574 	.word	0x00034574

0001a184 <stats_module_init>:
{
   1a184:	b510      	push	{r4, lr}
   1a186:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   1a188:	4b11      	ldr	r3, [pc, #68]	; (1a1d0 <stats_module_init+0x4c>)
   1a18a:	781b      	ldrb	r3, [r3, #0]
   1a18c:	b123      	cbz	r3, 1a198 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   1a18e:	4b11      	ldr	r3, [pc, #68]	; (1a1d4 <stats_module_init+0x50>)
   1a190:	68db      	ldr	r3, [r3, #12]
   1a192:	b15b      	cbz	r3, 1a1ac <stats_module_init+0x28>
}
   1a194:	b002      	add	sp, #8
   1a196:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a198:	f7fa fa5c 	bl	14654 <hal_debugger_connected>
   1a19c:	b100      	cbz	r0, 1a1a0 <stats_module_init+0x1c>
   1a19e:	be01      	bkpt	0x0001
   1a1a0:	2300      	movs	r3, #0
   1a1a2:	461a      	mov	r2, r3
   1a1a4:	4619      	mov	r1, r3
   1a1a6:	4618      	mov	r0, r3
   1a1a8:	f7fa fdf6 	bl	14d98 <__assert_func>
    rc = stats_module_init_internal();
   1a1ac:	f7ff ffce 	bl	1a14c <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a1b0:	2800      	cmp	r0, #0
   1a1b2:	d0ef      	beq.n	1a194 <stats_module_init+0x10>
   1a1b4:	f7fa fa4e 	bl	14654 <hal_debugger_connected>
   1a1b8:	b100      	cbz	r0, 1a1bc <stats_module_init+0x38>
   1a1ba:	be01      	bkpt	0x0001
   1a1bc:	2000      	movs	r0, #0
   1a1be:	9000      	str	r0, [sp, #0]
   1a1c0:	4b05      	ldr	r3, [pc, #20]	; (1a1d8 <stats_module_init+0x54>)
   1a1c2:	681c      	ldr	r4, [r3, #0]
   1a1c4:	4603      	mov	r3, r0
   1a1c6:	4602      	mov	r2, r0
   1a1c8:	4601      	mov	r1, r0
   1a1ca:	47a0      	blx	r4
   1a1cc:	e7e2      	b.n	1a194 <stats_module_init+0x10>
   1a1ce:	bf00      	nop
   1a1d0:	10001e3c 	.word	0x10001e3c
   1a1d4:	10001e2c 	.word	0x10001e2c
   1a1d8:	1000028c 	.word	0x1000028c

0001a1dc <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   1a1dc:	b538      	push	{r3, r4, r5, lr}
   1a1de:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1a1e0:	4b05      	ldr	r3, [pc, #20]	; (1a1f8 <stats_group_find+0x1c>)
   1a1e2:	681c      	ldr	r4, [r3, #0]
   1a1e4:	b134      	cbz	r4, 1a1f4 <stats_group_find+0x18>
        if (!strcmp(cur->s_name, name)) {
   1a1e6:	4629      	mov	r1, r5
   1a1e8:	6820      	ldr	r0, [r4, #0]
   1a1ea:	f7fc fca0 	bl	16b2e <strcmp>
   1a1ee:	b108      	cbz	r0, 1a1f4 <stats_group_find+0x18>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1a1f0:	68a4      	ldr	r4, [r4, #8]
   1a1f2:	e7f7      	b.n	1a1e4 <stats_group_find+0x8>
            break;
        }
    }

    return (cur);
}
   1a1f4:	4620      	mov	r0, r4
   1a1f6:	bd38      	pop	{r3, r4, r5, pc}
   1a1f8:	10000284 	.word	0x10000284

0001a1fc <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   1a1fc:	b538      	push	{r3, r4, r5, lr}
   1a1fe:	4604      	mov	r4, r0
   1a200:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1a202:	4b07      	ldr	r3, [pc, #28]	; (1a220 <stats_register+0x24>)
   1a204:	68db      	ldr	r3, [r3, #12]
   1a206:	b913      	cbnz	r3, 1a20e <stats_register+0x12>
        if (stats_module_init_internal()) {
   1a208:	f7ff ffa0 	bl	1a14c <stats_module_init_internal>
   1a20c:	b920      	cbnz	r0, 1a218 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1a20e:	4629      	mov	r1, r5
   1a210:	4620      	mov	r0, r4
   1a212:	f7ff ff29 	bl	1a068 <stats_register_internal>
}
   1a216:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   1a218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a21c:	e7fb      	b.n	1a216 <stats_register+0x1a>
   1a21e:	bf00      	nop
   1a220:	10001e2c 	.word	0x10001e2c

0001a224 <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   1a224:	b530      	push	{r4, r5, lr}
   1a226:	b083      	sub	sp, #12
   1a228:	4604      	mov	r4, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   1a22a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   1a22e:	9500      	str	r5, [sp, #0]
   1a230:	f7ff ff7a 	bl	1a128 <stats_init>
    if (rc != 0) {
   1a234:	b108      	cbz	r0, 1a23a <stats_init_and_reg+0x16>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   1a236:	b003      	add	sp, #12
   1a238:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   1a23a:	4621      	mov	r1, r4
   1a23c:	9807      	ldr	r0, [sp, #28]
   1a23e:	f7ff ffdd 	bl	1a1fc <stats_register>
    if (rc != 0) {
   1a242:	e7f8      	b.n	1a236 <stats_init_and_reg+0x12>

0001a244 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1a244:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1a246:	f7fa fda7 	bl	14d98 <__assert_func>
	...

0001a24c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1a24c:	4b01      	ldr	r3, [pc, #4]	; (1a254 <sysinit_start+0x8>)
   1a24e:	2201      	movs	r2, #1
   1a250:	701a      	strb	r2, [r3, #0]
}
   1a252:	4770      	bx	lr
   1a254:	10001e3c 	.word	0x10001e3c

0001a258 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1a258:	4b01      	ldr	r3, [pc, #4]	; (1a260 <sysinit_end+0x8>)
   1a25a:	2200      	movs	r2, #0
   1a25c:	701a      	strb	r2, [r3, #0]
}
   1a25e:	4770      	bx	lr
   1a260:	10001e3c 	.word	0x10001e3c

0001a264 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1a264:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a266:	b083      	sub	sp, #12
   1a268:	460d      	mov	r5, r1
   1a26a:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1a26c:	b29e      	uxth	r6, r3
   1a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a270:	9300      	str	r3, [sp, #0]
   1a272:	4603      	mov	r3, r0
   1a274:	9a08      	ldr	r2, [sp, #32]
   1a276:	4631      	mov	r1, r6
   1a278:	4628      	mov	r0, r5
   1a27a:	f7fb fd9b 	bl	15db4 <os_mempool_init>
    if (rc != 0) {
   1a27e:	b108      	cbz	r0, 1a284 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a280:	b003      	add	sp, #12
   1a282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1a284:	4633      	mov	r3, r6
   1a286:	9a08      	ldr	r2, [sp, #32]
   1a288:	b292      	uxth	r2, r2
   1a28a:	4629      	mov	r1, r5
   1a28c:	4638      	mov	r0, r7
   1a28e:	f7fb f9ac 	bl	155ea <os_mbuf_pool_init>
    if (rc != 0) {
   1a292:	e7f5      	b.n	1a280 <mem_init_mbuf_pool+0x1c>

0001a294 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1a294:	b570      	push	{r4, r5, r6, lr}
   1a296:	4604      	mov	r4, r0
   1a298:	460d      	mov	r5, r1
   1a29a:	4619      	mov	r1, r3
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1a29c:	6806      	ldr	r6, [r0, #0]
   1a29e:	8a33      	ldrh	r3, [r6, #16]
   1a2a0:	42ab      	cmp	r3, r5
   1a2a2:	d913      	bls.n	1a2cc <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   1a2a4:	4628      	mov	r0, r5
   1a2a6:	4790      	blx	r2
    if (frag == NULL) {
   1a2a8:	4606      	mov	r6, r0
   1a2aa:	b190      	cbz	r0, 1a2d2 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1a2ac:	462b      	mov	r3, r5
   1a2ae:	2200      	movs	r2, #0
   1a2b0:	6821      	ldr	r1, [r4, #0]
   1a2b2:	f7fb fa57 	bl	15764 <os_mbuf_appendfrom>
    if (rc != 0) {
   1a2b6:	b960      	cbnz	r0, 1a2d2 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   1a2b8:	4629      	mov	r1, r5
   1a2ba:	6820      	ldr	r0, [r4, #0]
   1a2bc:	f7fb faab 	bl	15816 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1a2c0:	6820      	ldr	r0, [r4, #0]
   1a2c2:	f7fb fcb9 	bl	15c38 <os_mbuf_trim_front>
   1a2c6:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   1a2c8:	4630      	mov	r0, r6
   1a2ca:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1a2cc:	2300      	movs	r3, #0
   1a2ce:	6003      	str	r3, [r0, #0]
        return frag;
   1a2d0:	e7fa      	b.n	1a2c8 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   1a2d2:	4630      	mov	r0, r6
   1a2d4:	f7fb f9c8 	bl	15668 <os_mbuf_free_chain>
    return NULL;
   1a2d8:	2600      	movs	r6, #0
   1a2da:	e7f5      	b.n	1a2c8 <mem_split_frag+0x34>

0001a2dc <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1a2dc:	f890 3020 	ldrb.w	r3, [r0, #32]
   1a2e0:	3b01      	subs	r3, #1
   1a2e2:	f880 3020 	strb.w	r3, [r0, #32]
}
   1a2e6:	4770      	bx	lr

0001a2e8 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1a2e8:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1a2ea:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1a2ee:	d104      	bne.n	1a2fa <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   1a2f0:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   1a2f4:	b11b      	cbz	r3, 1a2fe <rwlock_read_must_block+0x16>
   1a2f6:	2001      	movs	r0, #1
   1a2f8:	4770      	bx	lr
   1a2fa:	2001      	movs	r0, #1
   1a2fc:	4770      	bx	lr
   1a2fe:	2000      	movs	r0, #0
}
   1a300:	4770      	bx	lr

0001a302 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1a302:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1a304:	b923      	cbnz	r3, 1a310 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1a306:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1a30a:	b11b      	cbz	r3, 1a314 <rwlock_write_must_block+0x12>
   1a30c:	2001      	movs	r0, #1
   1a30e:	4770      	bx	lr
   1a310:	2001      	movs	r0, #1
   1a312:	4770      	bx	lr
   1a314:	2000      	movs	r0, #0
}
   1a316:	4770      	bx	lr

0001a318 <rwlock_unblock>:
{
   1a318:	b510      	push	{r4, lr}
   1a31a:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1a31c:	7fc3      	ldrb	r3, [r0, #31]
   1a31e:	b91b      	cbnz	r3, 1a328 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1a320:	7f83      	ldrb	r3, [r0, #30]
   1a322:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1a326:	e010      	b.n	1a34a <rwlock_unblock+0x32>
        lock->handoffs = 1;
   1a328:	2301      	movs	r3, #1
   1a32a:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1a32e:	3014      	adds	r0, #20
   1a330:	f017 fea8 	bl	32084 <os_sem_release>
        lock->pending_writers--;
   1a334:	7fe3      	ldrb	r3, [r4, #31]
   1a336:	3b01      	subs	r3, #1
   1a338:	77e3      	strb	r3, [r4, #31]
   1a33a:	e009      	b.n	1a350 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1a33c:	f104 000c 	add.w	r0, r4, #12
   1a340:	f017 fea0 	bl	32084 <os_sem_release>
            lock->pending_readers--;
   1a344:	7fa3      	ldrb	r3, [r4, #30]
   1a346:	3b01      	subs	r3, #1
   1a348:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1a34a:	7fa3      	ldrb	r3, [r4, #30]
   1a34c:	2b00      	cmp	r3, #0
   1a34e:	d1f5      	bne.n	1a33c <rwlock_unblock+0x24>
}
   1a350:	bd10      	pop	{r4, pc}

0001a352 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1a352:	b538      	push	{r3, r4, r5, lr}
   1a354:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a35a:	f7fc fb0b 	bl	16974 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1a35e:	4620      	mov	r0, r4
   1a360:	f7ff ffc2 	bl	1a2e8 <rwlock_read_must_block>
   1a364:	b140      	cbz	r0, 1a378 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1a366:	7fa3      	ldrb	r3, [r4, #30]
   1a368:	3301      	adds	r3, #1
   1a36a:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   1a36c:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1a36e:	4620      	mov	r0, r4
   1a370:	f7fc faa0 	bl	168b4 <os_mutex_release>

    if (acquired) {
   1a374:	b12d      	cbz	r5, 1a382 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1a376:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   1a378:	7f23      	ldrb	r3, [r4, #28]
   1a37a:	3301      	adds	r3, #1
   1a37c:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1a37e:	2501      	movs	r5, #1
   1a380:	e7f5      	b.n	1a36e <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1a382:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a386:	f104 000c 	add.w	r0, r4, #12
   1a38a:	f017 fead 	bl	320e8 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a38e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a392:	4620      	mov	r0, r4
   1a394:	f7fc faee 	bl	16974 <os_mutex_pend>
    lock->num_readers++;
   1a398:	7f23      	ldrb	r3, [r4, #28]
   1a39a:	3301      	adds	r3, #1
   1a39c:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1a39e:	4620      	mov	r0, r4
   1a3a0:	f7ff ff9c 	bl	1a2dc <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1a3a4:	4620      	mov	r0, r4
   1a3a6:	f7fc fa85 	bl	168b4 <os_mutex_release>
   1a3aa:	e7e4      	b.n	1a376 <rwlock_acquire_read+0x24>

0001a3ac <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   1a3ac:	b510      	push	{r4, lr}
   1a3ae:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a3b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3b4:	f7fc fade 	bl	16974 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   1a3b8:	7f23      	ldrb	r3, [r4, #28]
   1a3ba:	3b01      	subs	r3, #1
   1a3bc:	b2db      	uxtb	r3, r3
   1a3be:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1a3c0:	b11b      	cbz	r3, 1a3ca <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1a3c2:	4620      	mov	r0, r4
   1a3c4:	f7fc fa76 	bl	168b4 <os_mutex_release>
}
   1a3c8:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1a3ca:	4620      	mov	r0, r4
   1a3cc:	f7ff ffa4 	bl	1a318 <rwlock_unblock>
   1a3d0:	e7f7      	b.n	1a3c2 <rwlock_release_read+0x16>

0001a3d2 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1a3d2:	b538      	push	{r3, r4, r5, lr}
   1a3d4:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a3d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a3da:	f7fc facb 	bl	16974 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1a3de:	4620      	mov	r0, r4
   1a3e0:	f7ff ff8f 	bl	1a302 <rwlock_write_must_block>
   1a3e4:	b140      	cbz	r0, 1a3f8 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   1a3e6:	7fe3      	ldrb	r3, [r4, #31]
   1a3e8:	3301      	adds	r3, #1
   1a3ea:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1a3ec:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1a3ee:	4620      	mov	r0, r4
   1a3f0:	f7fc fa60 	bl	168b4 <os_mutex_release>

    if (acquired) {
   1a3f4:	b11d      	cbz	r5, 1a3fe <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1a3f6:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   1a3f8:	2501      	movs	r5, #1
   1a3fa:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1a3fc:	e7f7      	b.n	1a3ee <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1a3fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a402:	f104 0014 	add.w	r0, r4, #20
   1a406:	f017 fe6f 	bl	320e8 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a40a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a40e:	4620      	mov	r0, r4
   1a410:	f7fc fab0 	bl	16974 <os_mutex_pend>
    lock->active_writer = true;
   1a414:	2301      	movs	r3, #1
   1a416:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   1a418:	4620      	mov	r0, r4
   1a41a:	f7ff ff5f 	bl	1a2dc <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1a41e:	4620      	mov	r0, r4
   1a420:	f7fc fa48 	bl	168b4 <os_mutex_release>
   1a424:	e7e7      	b.n	1a3f6 <rwlock_acquire_write+0x24>

0001a426 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1a426:	b510      	push	{r4, lr}
   1a428:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1a42a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a42e:	f7fc faa1 	bl	16974 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1a432:	2300      	movs	r3, #0
   1a434:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1a436:	4620      	mov	r0, r4
   1a438:	f7ff ff6e 	bl	1a318 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1a43c:	4620      	mov	r0, r4
   1a43e:	f7fc fa39 	bl	168b4 <os_mutex_release>
}
   1a442:	bd10      	pop	{r4, pc}

0001a444 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1a444:	b510      	push	{r4, lr}
   1a446:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   1a448:	2224      	movs	r2, #36	; 0x24
   1a44a:	2100      	movs	r1, #0
   1a44c:	f7fc fb53 	bl	16af6 <memset>

    rc = os_mutex_init(&lock->mtx);
   1a450:	4620      	mov	r0, r4
   1a452:	f7fc fa25 	bl	168a0 <os_mutex_init>
    if (rc != 0) {
   1a456:	b100      	cbz	r0, 1a45a <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a458:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   1a45a:	2100      	movs	r1, #0
   1a45c:	f104 000c 	add.w	r0, r4, #12
   1a460:	f017 fe08 	bl	32074 <os_sem_init>
    if (rc != 0) {
   1a464:	2800      	cmp	r0, #0
   1a466:	d1f7      	bne.n	1a458 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   1a468:	2100      	movs	r1, #0
   1a46a:	f104 0014 	add.w	r0, r4, #20
   1a46e:	f017 fe01 	bl	32074 <os_sem_init>
    if (rc != 0) {
   1a472:	e7f1      	b.n	1a458 <rwlock_init+0x14>

0001a474 <scfg_find_setting_by_val>:
static struct scfg_setting *
scfg_find_setting_by_val(const struct scfg_group *group, const void *val)
{
    const struct scfg_setting *setting;

    SCFG_FOREACH_SETTING(group, setting) {
   1a474:	6803      	ldr	r3, [r0, #0]
   1a476:	6818      	ldr	r0, [r3, #0]
   1a478:	b120      	cbz	r0, 1a484 <scfg_find_setting_by_val+0x10>
        if (setting->val == val) {
   1a47a:	685a      	ldr	r2, [r3, #4]
   1a47c:	428a      	cmp	r2, r1
   1a47e:	d002      	beq.n	1a486 <scfg_find_setting_by_val+0x12>
    SCFG_FOREACH_SETTING(group, setting) {
   1a480:	3310      	adds	r3, #16
   1a482:	e7f8      	b.n	1a476 <scfg_find_setting_by_val+0x2>
   1a484:	4770      	bx	lr
            /* Cast away const. */
            return (struct scfg_setting *)setting;
   1a486:	4618      	mov	r0, r3
        }
    }

    return NULL;
}
   1a488:	4770      	bx	lr

0001a48a <scfg_setting_id>:
{
   1a48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a48e:	4680      	mov	r8, r0
   1a490:	460e      	mov	r6, r1
   1a492:	4614      	mov	r4, r2
    group_len = strlen(group_name);
   1a494:	f7fc fb57 	bl	16b46 <strlen>
   1a498:	4605      	mov	r5, r0
    setting_len = strlen(setting_name);
   1a49a:	4630      	mov	r0, r6
   1a49c:	f7fc fb53 	bl	16b46 <strlen>
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   1a4a0:	f105 0a01 	add.w	sl, r5, #1
   1a4a4:	eb0a 0900 	add.w	r9, sl, r0
   1a4a8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   1a4ac:	dc12      	bgt.n	1a4d4 <scfg_setting_id+0x4a>
   1a4ae:	4607      	mov	r7, r0
    memcpy(&buf[off], group_name, group_len);
   1a4b0:	462a      	mov	r2, r5
   1a4b2:	4641      	mov	r1, r8
   1a4b4:	4620      	mov	r0, r4
   1a4b6:	f7fc faf9 	bl	16aac <memcpy>
    buf[off] = '/';
   1a4ba:	232f      	movs	r3, #47	; 0x2f
   1a4bc:	5563      	strb	r3, [r4, r5]
    memcpy(&buf[off], setting_name, setting_len);
   1a4be:	463a      	mov	r2, r7
   1a4c0:	4631      	mov	r1, r6
   1a4c2:	eb04 000a 	add.w	r0, r4, sl
   1a4c6:	f7fc faf1 	bl	16aac <memcpy>
    buf[off] = '\0';
   1a4ca:	2300      	movs	r3, #0
   1a4cc:	f804 3009 	strb.w	r3, [r4, r9]
}
   1a4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   1a4d4:	f7fa f8be 	bl	14654 <hal_debugger_connected>
   1a4d8:	b100      	cbz	r0, 1a4dc <scfg_setting_id+0x52>
   1a4da:	be01      	bkpt	0x0001
   1a4dc:	2300      	movs	r3, #0
   1a4de:	461a      	mov	r2, r3
   1a4e0:	4619      	mov	r1, r3
   1a4e2:	4618      	mov	r0, r3
   1a4e4:	f7fa fc58 	bl	14d98 <__assert_func>

0001a4e8 <scfg_handler_export>:
}

static int
scfg_handler_export(void (*func)(char *name, char *val),
                    enum conf_export_tgt tgt, void *arg)
{
   1a4e8:	b570      	push	{r4, r5, r6, lr}
   1a4ea:	b098      	sub	sp, #96	; 0x60
   1a4ec:	4606      	mov	r6, r0
   1a4ee:	4615      	mov	r5, r2
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;

    group = arg;

    SCFG_FOREACH_SETTING(group, setting) {
   1a4f0:	6814      	ldr	r4, [r2, #0]
   1a4f2:	e009      	b.n	1a508 <scfg_handler_export+0x20>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
        if (setting->private) {
            val = "<set>";
        } else {
            val = conf_str_from_value(setting->type, setting->val,
   1a4f4:	2315      	movs	r3, #21
   1a4f6:	aa01      	add	r2, sp, #4
   1a4f8:	6861      	ldr	r1, [r4, #4]
   1a4fa:	7b20      	ldrb	r0, [r4, #12]
   1a4fc:	f7fd f8a6 	bl	1764c <conf_str_from_value>
   1a500:	4601      	mov	r1, r0
                                      val_buf, sizeof val_buf);
        }
        func(id_buf, val);
   1a502:	a807      	add	r0, sp, #28
   1a504:	47b0      	blx	r6
    SCFG_FOREACH_SETTING(group, setting) {
   1a506:	3410      	adds	r4, #16
   1a508:	6821      	ldr	r1, [r4, #0]
   1a50a:	b141      	cbz	r1, 1a51e <scfg_handler_export+0x36>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   1a50c:	aa07      	add	r2, sp, #28
   1a50e:	68a8      	ldr	r0, [r5, #8]
   1a510:	f7ff ffbb 	bl	1a48a <scfg_setting_id>
        if (setting->private) {
   1a514:	7b63      	ldrb	r3, [r4, #13]
   1a516:	2b00      	cmp	r3, #0
   1a518:	d0ec      	beq.n	1a4f4 <scfg_handler_export+0xc>
            val = "<set>";
   1a51a:	4902      	ldr	r1, [pc, #8]	; (1a524 <scfg_handler_export+0x3c>)
   1a51c:	e7f1      	b.n	1a502 <scfg_handler_export+0x1a>
    }

    return 0;
}
   1a51e:	2000      	movs	r0, #0
   1a520:	b018      	add	sp, #96	; 0x60
   1a522:	bd70      	pop	{r4, r5, r6, pc}
   1a524:	0003457c 	.word	0x0003457c

0001a528 <scfg_find_setting_by_name>:
{
   1a528:	b538      	push	{r3, r4, r5, lr}
   1a52a:	460d      	mov	r5, r1
    SCFG_FOREACH_SETTING(group, setting) {
   1a52c:	6804      	ldr	r4, [r0, #0]
   1a52e:	6820      	ldr	r0, [r4, #0]
   1a530:	b130      	cbz	r0, 1a540 <scfg_find_setting_by_name+0x18>
        if (strcmp(setting->name, setting_name) == 0) {
   1a532:	4629      	mov	r1, r5
   1a534:	f7fc fafb 	bl	16b2e <strcmp>
   1a538:	b108      	cbz	r0, 1a53e <scfg_find_setting_by_name+0x16>
    SCFG_FOREACH_SETTING(group, setting) {
   1a53a:	3410      	adds	r4, #16
   1a53c:	e7f7      	b.n	1a52e <scfg_find_setting_by_name+0x6>
            return (struct scfg_setting *)setting;
   1a53e:	4620      	mov	r0, r4
}
   1a540:	bd38      	pop	{r3, r4, r5, pc}

0001a542 <scfg_handler_get>:
    if (argc < 1) {
   1a542:	2800      	cmp	r0, #0
   1a544:	dd0e      	ble.n	1a564 <scfg_handler_get+0x22>
{
   1a546:	b538      	push	{r3, r4, r5, lr}
   1a548:	4614      	mov	r4, r2
   1a54a:	461d      	mov	r5, r3
    setting = scfg_find_setting_by_name(group, argv[0]);
   1a54c:	6809      	ldr	r1, [r1, #0]
   1a54e:	9804      	ldr	r0, [sp, #16]
   1a550:	f7ff ffea 	bl	1a528 <scfg_find_setting_by_name>
    if (setting == NULL) {
   1a554:	b128      	cbz	r0, 1a562 <scfg_handler_get+0x20>
    return conf_str_from_value(setting->type, setting->val, buf, max_len);
   1a556:	462b      	mov	r3, r5
   1a558:	4622      	mov	r2, r4
   1a55a:	6841      	ldr	r1, [r0, #4]
   1a55c:	7b00      	ldrb	r0, [r0, #12]
   1a55e:	f7fd f875 	bl	1764c <conf_str_from_value>
}
   1a562:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1a564:	2000      	movs	r0, #0
}
   1a566:	4770      	bx	lr

0001a568 <scfg_handler_set>:
    if (argc < 1) {
   1a568:	2800      	cmp	r0, #0
   1a56a:	dd12      	ble.n	1a592 <scfg_handler_set+0x2a>
{
   1a56c:	b510      	push	{r4, lr}
   1a56e:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   1a570:	6809      	ldr	r1, [r1, #0]
   1a572:	4618      	mov	r0, r3
   1a574:	f7ff ffd8 	bl	1a528 <scfg_find_setting_by_name>
    if (setting == NULL) {
   1a578:	b170      	cbz	r0, 1a598 <scfg_handler_set+0x30>
    rc = conf_value_from_str(val, setting->type, setting->val,
   1a57a:	6883      	ldr	r3, [r0, #8]
   1a57c:	6842      	ldr	r2, [r0, #4]
   1a57e:	7b01      	ldrb	r1, [r0, #12]
   1a580:	4620      	mov	r0, r4
   1a582:	f7fc ffa8 	bl	174d6 <conf_value_from_str>
    if (rc != 0) {
   1a586:	b900      	cbnz	r0, 1a58a <scfg_handler_set+0x22>
}
   1a588:	bd10      	pop	{r4, pc}
        return os_error_to_sys(rc);
   1a58a:	b2c0      	uxtb	r0, r0
   1a58c:	f017 fd51 	bl	32032 <os_error_to_sys>
   1a590:	e7fa      	b.n	1a588 <scfg_handler_set+0x20>
        return SYS_EINVAL;
   1a592:	f06f 0001 	mvn.w	r0, #1
}
   1a596:	4770      	bx	lr
        return SYS_ENOENT;
   1a598:	f06f 0003 	mvn.w	r0, #3
   1a59c:	e7f4      	b.n	1a588 <scfg_handler_set+0x20>

0001a59e <scfg_save_setting>:

int
scfg_save_setting(const struct scfg_group *group,
                  const struct scfg_setting *setting)
{
   1a59e:	b570      	push	{r4, r5, r6, lr}
   1a5a0:	b098      	sub	sp, #96	; 0x60
   1a5a2:	4605      	mov	r5, r0
   1a5a4:	460c      	mov	r4, r1
    char id_buf[SCFG_SETTING_ID_BUF_SIZE];
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;
    int rc;

    val = conf_str_from_value(setting->type, setting->val,
   1a5a6:	2315      	movs	r3, #21
   1a5a8:	aa01      	add	r2, sp, #4
   1a5aa:	6849      	ldr	r1, [r1, #4]
   1a5ac:	7b20      	ldrb	r0, [r4, #12]
   1a5ae:	f7fd f84d 	bl	1764c <conf_str_from_value>
                              val_buf, sizeof val_buf);
    if (val == NULL) {
   1a5b2:	b180      	cbz	r0, 1a5d6 <scfg_save_setting+0x38>
   1a5b4:	4606      	mov	r6, r0
        return SYS_EUNKNOWN;
    }

    scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   1a5b6:	aa07      	add	r2, sp, #28
   1a5b8:	6821      	ldr	r1, [r4, #0]
   1a5ba:	68a8      	ldr	r0, [r5, #8]
   1a5bc:	f7ff ff65 	bl	1a48a <scfg_setting_id>

    rc = conf_save_one(id_buf, val);
   1a5c0:	4631      	mov	r1, r6
   1a5c2:	a807      	add	r0, sp, #28
   1a5c4:	f7fc fe58 	bl	17278 <conf_save_one>
    if (rc != 0) {
   1a5c8:	b908      	cbnz	r0, 1a5ce <scfg_save_setting+0x30>
        return os_error_to_sys(rc);
    }

    return 0;
}
   1a5ca:	b018      	add	sp, #96	; 0x60
   1a5cc:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   1a5ce:	b2c0      	uxtb	r0, r0
   1a5d0:	f017 fd2f 	bl	32032 <os_error_to_sys>
   1a5d4:	e7f9      	b.n	1a5ca <scfg_save_setting+0x2c>
        return SYS_EUNKNOWN;
   1a5d6:	f06f 000c 	mvn.w	r0, #12
   1a5da:	e7f6      	b.n	1a5ca <scfg_save_setting+0x2c>

0001a5dc <scfg_save_val>:
    return scfg_save_setting(group, setting);
}

int
scfg_save_val(const struct scfg_group *group, const void *val)
{
   1a5dc:	b510      	push	{r4, lr}
   1a5de:	4604      	mov	r4, r0
    const struct scfg_setting *setting;

    setting = scfg_find_setting_by_val(group, val);
   1a5e0:	f7ff ff48 	bl	1a474 <scfg_find_setting_by_val>
    if (setting == NULL) {
   1a5e4:	b120      	cbz	r0, 1a5f0 <scfg_save_val+0x14>
   1a5e6:	4601      	mov	r1, r0
        return SYS_ENOENT;
    }

    return scfg_save_setting(group, setting);
   1a5e8:	4620      	mov	r0, r4
   1a5ea:	f7ff ffd8 	bl	1a59e <scfg_save_setting>
}
   1a5ee:	bd10      	pop	{r4, pc}
        return SYS_ENOENT;
   1a5f0:	f06f 0003 	mvn.w	r0, #3
   1a5f4:	e7fb      	b.n	1a5ee <scfg_save_val+0x12>
	...

0001a5f8 <scfg_register>:

int
scfg_register(struct scfg_group *group, char *name)
{
   1a5f8:	b570      	push	{r4, r5, r6, lr}
   1a5fa:	4604      	mov	r4, r0
   1a5fc:	460d      	mov	r5, r1
    const struct scfg_setting *setting;
    int rc;

    SCFG_FOREACH_SETTING(group, setting) {
   1a5fe:	6802      	ldr	r2, [r0, #0]
   1a600:	e004      	b.n	1a60c <scfg_register+0x14>
        switch (setting->type) {
   1a602:	3b0a      	subs	r3, #10
   1a604:	b2db      	uxtb	r3, r3
   1a606:	2b04      	cmp	r3, #4
   1a608:	d823      	bhi.n	1a652 <scfg_register+0x5a>
    SCFG_FOREACH_SETTING(group, setting) {
   1a60a:	3210      	adds	r2, #16
   1a60c:	6813      	ldr	r3, [r2, #0]
   1a60e:	b13b      	cbz	r3, 1a620 <scfg_register+0x28>
        switch (setting->type) {
   1a610:	7b13      	ldrb	r3, [r2, #12]
   1a612:	2b06      	cmp	r3, #6
   1a614:	d8f5      	bhi.n	1a602 <scfg_register+0xa>
   1a616:	2b02      	cmp	r3, #2
   1a618:	d2f7      	bcs.n	1a60a <scfg_register+0x12>
   1a61a:	f06f 0001 	mvn.w	r0, #1
    if (rc != 0) {
        return os_error_to_sys(rc);
    }

    return 0;
}
   1a61e:	bd70      	pop	{r4, r5, r6, pc}
    group->handler = (struct conf_handler) {
   1a620:	1d26      	adds	r6, r4, #4
   1a622:	2220      	movs	r2, #32
   1a624:	2100      	movs	r1, #0
   1a626:	4630      	mov	r0, r6
   1a628:	f7fc fa65 	bl	16af6 <memset>
   1a62c:	60a5      	str	r5, [r4, #8]
   1a62e:	2301      	movs	r3, #1
   1a630:	7323      	strb	r3, [r4, #12]
   1a632:	4b09      	ldr	r3, [pc, #36]	; (1a658 <scfg_register+0x60>)
   1a634:	6123      	str	r3, [r4, #16]
   1a636:	4b09      	ldr	r3, [pc, #36]	; (1a65c <scfg_register+0x64>)
   1a638:	6163      	str	r3, [r4, #20]
   1a63a:	4b09      	ldr	r3, [pc, #36]	; (1a660 <scfg_register+0x68>)
   1a63c:	61e3      	str	r3, [r4, #28]
   1a63e:	6224      	str	r4, [r4, #32]
    rc = conf_register(&group->handler);
   1a640:	4630      	mov	r0, r6
   1a642:	f7fc ff05 	bl	17450 <conf_register>
    if (rc != 0) {
   1a646:	2800      	cmp	r0, #0
   1a648:	d0e9      	beq.n	1a61e <scfg_register+0x26>
        return os_error_to_sys(rc);
   1a64a:	b2c0      	uxtb	r0, r0
   1a64c:	f017 fcf1 	bl	32032 <os_error_to_sys>
   1a650:	e7e5      	b.n	1a61e <scfg_register+0x26>
        switch (setting->type) {
   1a652:	f06f 0001 	mvn.w	r0, #1
   1a656:	e7e2      	b.n	1a61e <scfg_register+0x26>
   1a658:	0001a543 	.word	0x0001a543
   1a65c:	0001a569 	.word	0x0001a569
   1a660:	0001a4e9 	.word	0x0001a4e9

0001a664 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   1a664:	3901      	subs	r1, #1
   1a666:	290b      	cmp	r1, #11
   1a668:	d822      	bhi.n	1a6b0 <valid_attr_type+0x4c>
   1a66a:	e8df f001 	tbb	[pc, r1]
   1a66e:	0606      	.short	0x0606
   1a670:	21110d09 	.word	0x21110d09
   1a674:	19152121 	.word	0x19152121
   1a678:	1d21      	.short	0x1d21
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   1a67a:	b1d8      	cbz	r0, 1a6b4 <valid_attr_type+0x50>
        }
        break;
    default:
        break;
    }
    return 0;
   1a67c:	2000      	movs	r0, #0
   1a67e:	4770      	bx	lr
        if (ct == CborByteStringType) {
   1a680:	2840      	cmp	r0, #64	; 0x40
   1a682:	d019      	beq.n	1a6b8 <valid_attr_type+0x54>
    return 0;
   1a684:	2000      	movs	r0, #0
   1a686:	4770      	bx	lr
        if (ct == CborTextStringType) {
   1a688:	2860      	cmp	r0, #96	; 0x60
   1a68a:	d017      	beq.n	1a6bc <valid_attr_type+0x58>
    return 0;
   1a68c:	2000      	movs	r0, #0
   1a68e:	4770      	bx	lr
        if (ct == CborBooleanType) {
   1a690:	28f5      	cmp	r0, #245	; 0xf5
   1a692:	d015      	beq.n	1a6c0 <valid_attr_type+0x5c>
    return 0;
   1a694:	2000      	movs	r0, #0
   1a696:	4770      	bx	lr
        if (ct == CborArrayType) {
   1a698:	2880      	cmp	r0, #128	; 0x80
   1a69a:	d013      	beq.n	1a6c4 <valid_attr_type+0x60>
    return 0;
   1a69c:	2000      	movs	r0, #0
   1a69e:	4770      	bx	lr
        if (ct == CborMapType) {
   1a6a0:	28a0      	cmp	r0, #160	; 0xa0
   1a6a2:	d011      	beq.n	1a6c8 <valid_attr_type+0x64>
    return 0;
   1a6a4:	2000      	movs	r0, #0
   1a6a6:	4770      	bx	lr
        if (ct == CborNullType) {
   1a6a8:	28f6      	cmp	r0, #246	; 0xf6
   1a6aa:	d00f      	beq.n	1a6cc <valid_attr_type+0x68>
    return 0;
   1a6ac:	2000      	movs	r0, #0
   1a6ae:	4770      	bx	lr
   1a6b0:	2000      	movs	r0, #0
   1a6b2:	4770      	bx	lr
            return 1;
   1a6b4:	2001      	movs	r0, #1
   1a6b6:	4770      	bx	lr
            return 1;
   1a6b8:	2001      	movs	r0, #1
   1a6ba:	4770      	bx	lr
            return 1;
   1a6bc:	2001      	movs	r0, #1
   1a6be:	4770      	bx	lr
            return 1;
   1a6c0:	2001      	movs	r0, #1
   1a6c2:	4770      	bx	lr
            return 1;
   1a6c4:	2001      	movs	r0, #1
   1a6c6:	4770      	bx	lr
            return 1;
   1a6c8:	2001      	movs	r0, #1
   1a6ca:	4770      	bx	lr
            return 1;
   1a6cc:	2001      	movs	r0, #1
}
   1a6ce:	4770      	bx	lr

0001a6d0 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   1a6d0:	460b      	mov	r3, r1
   1a6d2:	b111      	cbz	r1, 1a6da <cbor_target_address+0xa>
   1a6d4:	7809      	ldrb	r1, [r1, #0]
   1a6d6:	290b      	cmp	r1, #11
   1a6d8:	d017      	beq.n	1a70a <cbor_target_address+0x3a>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   1a6da:	7903      	ldrb	r3, [r0, #4]
   1a6dc:	3b01      	subs	r3, #1
   1a6de:	2b04      	cmp	r3, #4
   1a6e0:	d81a      	bhi.n	1a718 <cbor_target_address+0x48>
   1a6e2:	e8df f003 	tbb	[pc, r3]
   1a6e6:	0703      	.short	0x0703
   1a6e8:	0d0b      	.short	0x0d0b
   1a6ea:	0f          	.byte	0x0f
   1a6eb:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   1a6ec:	6880      	ldr	r0, [r0, #8]
   1a6ee:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1a6f2:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   1a6f4:	6880      	ldr	r0, [r0, #8]
   1a6f6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   1a6fa:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
            break;
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   1a6fc:	6880      	ldr	r0, [r0, #8]
            break;
   1a6fe:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   1a700:	6880      	ldr	r0, [r0, #8]
            break;
   1a702:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   1a704:	6880      	ldr	r0, [r0, #8]
   1a706:	4410      	add	r0, r2
            break;
   1a708:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   1a70a:	6899      	ldr	r1, [r3, #8]
   1a70c:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   1a70e:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   1a710:	fb03 0202 	mla	r2, r3, r2, r0
        targetaddr =
   1a714:	1888      	adds	r0, r1, r2
   1a716:	4770      	bx	lr
        switch (cursor->type) {
   1a718:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   1a71a:	4770      	bx	lr

0001a71c <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   1a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a720:	b08b      	sub	sp, #44	; 0x2c
   1a722:	9003      	str	r0, [sp, #12]
   1a724:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   1a726:	a906      	add	r1, sp, #24
   1a728:	f014 fc44 	bl	2efb4 <cbor_value_enter_container>
    if (err) {
   1a72c:	4605      	mov	r5, r0
   1a72e:	2800      	cmp	r0, #0
   1a730:	f040 80ec 	bne.w	1a90c <cbor_read_array+0x1f0>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   1a734:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   1a738:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   1a73a:	463e      	mov	r6, r7
   1a73c:	e0ac      	b.n	1a898 <cbor_read_array+0x17c>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   1a73e:	6862      	ldr	r2, [r4, #4]
{ return value->type == CborBooleanType; }
   1a740:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_boolean(value));
   1a744:	2bf5      	cmp	r3, #245	; 0xf5
   1a746:	d106      	bne.n	1a756 <cbor_read_array+0x3a>
    *result = !!value->extra;
   1a748:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   1a74c:	3b00      	subs	r3, #0
   1a74e:	bf18      	it	ne
   1a750:	2301      	movne	r3, #1
   1a752:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   1a754:	e095      	b.n	1a882 <cbor_read_array+0x166>
    assert(cbor_value_is_boolean(value));
   1a756:	f7f9 ff7d 	bl	14654 <hal_debugger_connected>
   1a75a:	b100      	cbz	r0, 1a75e <cbor_read_array+0x42>
   1a75c:	be01      	bkpt	0x0001
   1a75e:	2300      	movs	r3, #0
   1a760:	461a      	mov	r2, r3
   1a762:	4619      	mov	r1, r3
   1a764:	4618      	mov	r0, r3
   1a766:	f7fa fb17 	bl	14d98 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   1a76a:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1a76e:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1a772:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   1a776:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_integer(value));
   1a77a:	b9eb      	cbnz	r3, 1a7b8 <cbor_read_array+0x9c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1a77c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a780:	f013 0f01 	tst.w	r3, #1
   1a784:	d122      	bne.n	1a7cc <cbor_read_array+0xb0>
   1a786:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1a78a:	2300      	movs	r3, #0
   1a78c:	e9cd 2300 	strd	r2, r3, [sp]
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   1a790:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a794:	f849 000b 	str.w	r0, [r9, fp]
   1a798:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   1a79c:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   1a7a0:	f011 0f02 	tst.w	r1, #2
   1a7a4:	d06d      	beq.n	1a882 <cbor_read_array+0x166>
        *result = -*result - 1;
   1a7a6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1a7aa:	43c2      	mvns	r2, r0
   1a7ac:	43cb      	mvns	r3, r1
   1a7ae:	f849 200b 	str.w	r2, [r9, fp]
   1a7b2:	f8ca 3004 	str.w	r3, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   1a7b6:	e064      	b.n	1a882 <cbor_read_array+0x166>
    assert(cbor_value_is_integer(value));
   1a7b8:	f7f9 ff4c 	bl	14654 <hal_debugger_connected>
   1a7bc:	b100      	cbz	r0, 1a7c0 <cbor_read_array+0xa4>
   1a7be:	be01      	bkpt	0x0001
   1a7c0:	2300      	movs	r3, #0
   1a7c2:	461a      	mov	r2, r3
   1a7c4:	4619      	mov	r1, r3
   1a7c6:	4618      	mov	r0, r3
   1a7c8:	f7fa fae6 	bl	14d98 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a7cc:	a806      	add	r0, sp, #24
   1a7ce:	f014 fb74 	bl	2eeba <_cbor_value_decode_int64_internal>
   1a7d2:	9000      	str	r0, [sp, #0]
   1a7d4:	9101      	str	r1, [sp, #4]
   1a7d6:	e7db      	b.n	1a790 <cbor_read_array+0x74>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   1a7d8:	6863      	ldr	r3, [r4, #4]
   1a7da:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   1a7de:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1a7e2:	b933      	cbnz	r3, 1a7f2 <cbor_read_array+0xd6>
   1a7e4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1a7e8:	f013 0f02 	tst.w	r3, #2
   1a7ec:	d00e      	beq.n	1a80c <cbor_read_array+0xf0>
   1a7ee:	2300      	movs	r3, #0
   1a7f0:	e000      	b.n	1a7f4 <cbor_read_array+0xd8>
   1a7f2:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   1a7f4:	b163      	cbz	r3, 1a810 <cbor_read_array+0xf4>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1a7f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a7fa:	f013 0f01 	tst.w	r3, #1
   1a7fe:	d111      	bne.n	1a824 <cbor_read_array+0x108>
   1a800:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1a804:	2300      	movs	r3, #0
    *result = _cbor_value_extract_int64_helper(value);
   1a806:	e9c9 2300 	strd	r2, r3, [r9]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   1a80a:	e03a      	b.n	1a882 <cbor_read_array+0x166>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1a80c:	2301      	movs	r3, #1
   1a80e:	e7f1      	b.n	1a7f4 <cbor_read_array+0xd8>
    assert(cbor_value_is_unsigned_integer(value));
   1a810:	f7f9 ff20 	bl	14654 <hal_debugger_connected>
   1a814:	b100      	cbz	r0, 1a818 <cbor_read_array+0xfc>
   1a816:	be01      	bkpt	0x0001
   1a818:	2300      	movs	r3, #0
   1a81a:	461a      	mov	r2, r3
   1a81c:	4619      	mov	r1, r3
   1a81e:	4618      	mov	r0, r3
   1a820:	f7fa faba 	bl	14d98 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1a824:	a806      	add	r0, sp, #24
   1a826:	f014 fb48 	bl	2eeba <_cbor_value_decode_int64_internal>
   1a82a:	4602      	mov	r2, r0
   1a82c:	460b      	mov	r3, r1
   1a82e:	e7ea      	b.n	1a806 <cbor_read_array+0xea>
            lptr = &arr->arr.reals.store[off];
            err |= cbor_value_get_double(&elem, lptr);
            break;
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   1a830:	68e3      	ldr	r3, [r4, #12]
   1a832:	68a2      	ldr	r2, [r4, #8]
   1a834:	eba8 0202 	sub.w	r2, r8, r2
   1a838:	1a9b      	subs	r3, r3, r2
   1a83a:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   1a83c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   1a840:	2b60      	cmp	r3, #96	; 0x60
   1a842:	d10d      	bne.n	1a860 <cbor_read_array+0x144>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1a844:	2300      	movs	r3, #0
   1a846:	aa05      	add	r2, sp, #20
   1a848:	4641      	mov	r1, r8
   1a84a:	a806      	add	r0, sp, #24
   1a84c:	f014 fc82 	bl	2f154 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   1a850:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   1a852:	6863      	ldr	r3, [r4, #4]
   1a854:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   1a858:	9b05      	ldr	r3, [sp, #20]
   1a85a:	3301      	adds	r3, #1
   1a85c:	4498      	add	r8, r3
            break;
   1a85e:	e010      	b.n	1a882 <cbor_read_array+0x166>
    assert(cbor_value_is_text_string(value));
   1a860:	f7f9 fef8 	bl	14654 <hal_debugger_connected>
   1a864:	b100      	cbz	r0, 1a868 <cbor_read_array+0x14c>
   1a866:	be01      	bkpt	0x0001
   1a868:	2300      	movs	r3, #0
   1a86a:	461a      	mov	r2, r3
   1a86c:	4619      	mov	r1, r3
   1a86e:	4618      	mov	r0, r3
   1a870:	f7fa fa92 	bl	14d98 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   1a874:	4633      	mov	r3, r6
   1a876:	4622      	mov	r2, r4
   1a878:	6861      	ldr	r1, [r4, #4]
   1a87a:	a806      	add	r0, sp, #24
   1a87c:	f000 f84a 	bl	1a914 <cbor_internal_read_object>
   1a880:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   1a882:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   1a884:	7823      	ldrb	r3, [r4, #0]
   1a886:	2b0b      	cmp	r3, #11
   1a888:	d129      	bne.n	1a8de <cbor_read_array+0x1c2>
{ return value && value->type != CborInvalidType; }
   1a88a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1a88e:	2bff      	cmp	r3, #255	; 0xff
   1a890:	d02a      	beq.n	1a8e8 <cbor_read_array+0x1cc>
   1a892:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   1a894:	b353      	cbz	r3, 1a8ec <cbor_read_array+0x1d0>
    for (off = 0; off < arr->maxlen; off++) {
   1a896:	3601      	adds	r6, #1
   1a898:	6963      	ldr	r3, [r4, #20]
   1a89a:	42b3      	cmp	r3, r6
   1a89c:	dd26      	ble.n	1a8ec <cbor_read_array+0x1d0>
        switch (arr->element_type) {
   1a89e:	7823      	ldrb	r3, [r4, #0]
   1a8a0:	3b01      	subs	r3, #1
   1a8a2:	2b0a      	cmp	r3, #10
   1a8a4:	d818      	bhi.n	1a8d8 <cbor_read_array+0x1bc>
   1a8a6:	a201      	add	r2, pc, #4	; (adr r2, 1a8ac <cbor_read_array+0x190>)
   1a8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a8ac:	0001a76b 	.word	0x0001a76b
   1a8b0:	0001a7d9 	.word	0x0001a7d9
   1a8b4:	0001a8d9 	.word	0x0001a8d9
   1a8b8:	0001a831 	.word	0x0001a831
   1a8bc:	0001a73f 	.word	0x0001a73f
   1a8c0:	0001a8d9 	.word	0x0001a8d9
   1a8c4:	0001a8d9 	.word	0x0001a8d9
   1a8c8:	0001a8d9 	.word	0x0001a8d9
   1a8cc:	0001a8d9 	.word	0x0001a8d9
   1a8d0:	0001a8d9 	.word	0x0001a8d9
   1a8d4:	0001a875 	.word	0x0001a875
            err |= CborErrorIllegalType;
   1a8d8:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   1a8dc:	e7d1      	b.n	1a882 <cbor_read_array+0x166>
            err |= cbor_value_advance(&elem);
   1a8de:	a806      	add	r0, sp, #24
   1a8e0:	f014 fc95 	bl	2f20e <cbor_value_advance>
   1a8e4:	4305      	orrs	r5, r0
   1a8e6:	e7d0      	b.n	1a88a <cbor_read_array+0x16e>
   1a8e8:	2300      	movs	r3, #0
   1a8ea:	e7d3      	b.n	1a894 <cbor_read_array+0x178>
            break;
        }
    }
    if (arr->count) {
   1a8ec:	6923      	ldr	r3, [r4, #16]
   1a8ee:	b103      	cbz	r3, 1a8f2 <cbor_read_array+0x1d6>
        *arr->count = arrcount;
   1a8f0:	601f      	str	r7, [r3, #0]
{ return it->remaining == 0; }
   1a8f2:	9b08      	ldr	r3, [sp, #32]
    }
    while (!cbor_value_at_end(&elem)) {
   1a8f4:	b12b      	cbz	r3, 1a902 <cbor_read_array+0x1e6>
        err |= CborErrorDataTooLarge;
   1a8f6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   1a8fa:	a806      	add	r0, sp, #24
   1a8fc:	f014 fc87 	bl	2f20e <cbor_value_advance>
   1a900:	e7f7      	b.n	1a8f2 <cbor_read_array+0x1d6>
    }
    err |= cbor_value_leave_container(value, &elem);
   1a902:	a906      	add	r1, sp, #24
   1a904:	9803      	ldr	r0, [sp, #12]
   1a906:	f014 fbfc 	bl	2f102 <cbor_value_leave_container>
   1a90a:	4328      	orrs	r0, r5
    return err;
}
   1a90c:	b00b      	add	sp, #44	; 0x2c
   1a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a912:	bf00      	nop

0001a914 <cbor_internal_read_object>:
{
   1a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a918:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   1a91c:	9001      	str	r0, [sp, #4]
   1a91e:	9100      	str	r1, [sp, #0]
   1a920:	4691      	mov	r9, r2
   1a922:	469a      	mov	sl, r3
    size_t len = 0;
   1a924:	2300      	movs	r3, #0
   1a926:	9304      	str	r3, [sp, #16]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1a928:	460c      	mov	r4, r1
   1a92a:	e006      	b.n	1a93a <cbor_internal_read_object+0x26>
                    memcpy(lptr, &cursor->dflt.integer,
   1a92c:	4623      	mov	r3, r4
   1a92e:	f853 1f20 	ldr.w	r1, [r3, #32]!
   1a932:	685b      	ldr	r3, [r3, #4]
   1a934:	6001      	str	r1, [r0, #0]
   1a936:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1a938:	3430      	adds	r4, #48	; 0x30
   1a93a:	6827      	ldr	r7, [r4, #0]
   1a93c:	b1e7      	cbz	r7, 1a978 <cbor_internal_read_object+0x64>
        if (!cursor->nodefault) {
   1a93e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1a942:	2b00      	cmp	r3, #0
   1a944:	d1f8      	bne.n	1a938 <cbor_internal_read_object+0x24>
            lptr = cbor_target_address(cursor, parent, offset);
   1a946:	4652      	mov	r2, sl
   1a948:	4649      	mov	r1, r9
   1a94a:	4620      	mov	r0, r4
   1a94c:	f7ff fec0 	bl	1a6d0 <cbor_target_address>
            if (lptr != NULL) {
   1a950:	2800      	cmp	r0, #0
   1a952:	d0f1      	beq.n	1a938 <cbor_internal_read_object+0x24>
                switch (cursor->type) {
   1a954:	7923      	ldrb	r3, [r4, #4]
   1a956:	2b02      	cmp	r3, #2
   1a958:	d0e8      	beq.n	1a92c <cbor_internal_read_object+0x18>
   1a95a:	2b05      	cmp	r3, #5
   1a95c:	d008      	beq.n	1a970 <cbor_internal_read_object+0x5c>
   1a95e:	2b01      	cmp	r3, #1
   1a960:	d1ea      	bne.n	1a938 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   1a962:	4623      	mov	r3, r4
   1a964:	f853 1f20 	ldr.w	r1, [r3, #32]!
   1a968:	685b      	ldr	r3, [r3, #4]
   1a96a:	6001      	str	r1, [r0, #0]
   1a96c:	6043      	str	r3, [r0, #4]
                    break;
   1a96e:	e7e3      	b.n	1a938 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   1a970:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a974:	7003      	strb	r3, [r0, #0]
                    break;
   1a976:	e7df      	b.n	1a938 <cbor_internal_read_object+0x24>
{ return value->type == CborMapType; }
   1a978:	9801      	ldr	r0, [sp, #4]
   1a97a:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   1a97c:	2ba0      	cmp	r3, #160	; 0xa0
   1a97e:	d005      	beq.n	1a98c <cbor_internal_read_object+0x78>
        return err;
   1a980:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1a984:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   1a988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   1a98c:	a905      	add	r1, sp, #20
   1a98e:	f014 fb11 	bl	2efb4 <cbor_value_enter_container>
   1a992:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   1a994:	e07a      	b.n	1aa8c <cbor_internal_read_object+0x178>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   1a996:	a904      	add	r1, sp, #16
   1a998:	a805      	add	r0, sp, #20
   1a99a:	f014 fc4e 	bl	2f23a <cbor_value_calculate_string_length>
   1a99e:	b978      	cbnz	r0, 1a9c0 <cbor_internal_read_object+0xac>
                if (len > CBORATTR_MAX_SIZE) {
   1a9a0:	9b04      	ldr	r3, [sp, #16]
   1a9a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a9a6:	d81f      	bhi.n	1a9e8 <cbor_internal_read_object+0xd4>
{ return value->type == CborTextStringType; }
   1a9a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   1a9ac:	2b60      	cmp	r3, #96	; 0x60
   1a9ae:	d11e      	bne.n	1a9ee <cbor_internal_read_object+0xda>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1a9b0:	2300      	movs	r3, #0
   1a9b2:	aa04      	add	r2, sp, #16
   1a9b4:	a909      	add	r1, sp, #36	; 0x24
   1a9b6:	a805      	add	r0, sp, #20
   1a9b8:	f014 fbcc 	bl	2f154 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   1a9bc:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   1a9c0:	a805      	add	r0, sp, #20
   1a9c2:	f014 fc24 	bl	2f20e <cbor_value_advance>
   1a9c6:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   1a9ca:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   1a9ce:	2eff      	cmp	r6, #255	; 0xff
   1a9d0:	d017      	beq.n	1aa02 <cbor_internal_read_object+0xee>
   1a9d2:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   1a9d4:	2b00      	cmp	r3, #0
   1a9d6:	d16a      	bne.n	1aaae <cbor_internal_read_object+0x19a>
                err |= CborErrorIllegalType;
   1a9d8:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   1a9dc:	f1b8 0f00 	cmp.w	r8, #0
   1a9e0:	f000 8106 	beq.w	1abf0 <cbor_internal_read_object+0x2dc>
    return err;
   1a9e4:	4640      	mov	r0, r8
   1a9e6:	e7cd      	b.n	1a984 <cbor_internal_read_object+0x70>
                    err |= CborErrorDataTooLarge;
   1a9e8:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   1a9ec:	e7f6      	b.n	1a9dc <cbor_internal_read_object+0xc8>
    assert(cbor_value_is_text_string(value));
   1a9ee:	f7f9 fe31 	bl	14654 <hal_debugger_connected>
   1a9f2:	b100      	cbz	r0, 1a9f6 <cbor_internal_read_object+0xe2>
   1a9f4:	be01      	bkpt	0x0001
   1a9f6:	2300      	movs	r3, #0
   1a9f8:	461a      	mov	r2, r3
   1a9fa:	4619      	mov	r1, r3
   1a9fc:	4618      	mov	r0, r3
   1a9fe:	f7fa f9cb 	bl	14d98 <__assert_func>
{ return value && value->type != CborInvalidType; }
   1aa02:	2300      	movs	r3, #0
   1aa04:	e7e6      	b.n	1a9d4 <cbor_internal_read_object+0xc0>
                    attrbuf[0] == '\0') {
   1aa06:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   1aa0a:	b963      	cbnz	r3, 1aa26 <cbor_internal_read_object+0x112>
                    best_match = cursor;
   1aa0c:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1aa0e:	3430      	adds	r4, #48	; 0x30
   1aa10:	6825      	ldr	r5, [r4, #0]
   1aa12:	b1a5      	cbz	r5, 1aa3e <cbor_internal_read_object+0x12a>
            if (valid_attr_type(type, cursor->type)) {
   1aa14:	7921      	ldrb	r1, [r4, #4]
   1aa16:	4630      	mov	r0, r6
   1aa18:	f7ff fe24 	bl	1a664 <valid_attr_type>
   1aa1c:	2800      	cmp	r0, #0
   1aa1e:	d0f6      	beq.n	1aa0e <cbor_internal_read_object+0xfa>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   1aa20:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1aa24:	d0ef      	beq.n	1aa06 <cbor_internal_read_object+0xf2>
                } else if (strlen(cursor->attribute) == len &&
   1aa26:	4628      	mov	r0, r5
   1aa28:	f7fc f88d 	bl	16b46 <strlen>
   1aa2c:	9a04      	ldr	r2, [sp, #16]
   1aa2e:	4290      	cmp	r0, r2
   1aa30:	d1ed      	bne.n	1aa0e <cbor_internal_read_object+0xfa>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   1aa32:	a909      	add	r1, sp, #36	; 0x24
   1aa34:	4628      	mov	r0, r5
   1aa36:	f7fc f815 	bl	16a64 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   1aa3a:	2800      	cmp	r0, #0
   1aa3c:	d1e7      	bne.n	1aa0e <cbor_internal_read_object+0xfa>
        if (!cursor->attribute && best_match) {
   1aa3e:	b195      	cbz	r5, 1aa66 <cbor_internal_read_object+0x152>
        if (cursor->attribute != NULL) {
   1aa40:	6823      	ldr	r3, [r4, #0]
   1aa42:	b1fb      	cbz	r3, 1aa84 <cbor_internal_read_object+0x170>
            lptr = cbor_target_address(cursor, parent, offset);
   1aa44:	4652      	mov	r2, sl
   1aa46:	4649      	mov	r1, r9
   1aa48:	4620      	mov	r0, r4
   1aa4a:	f7ff fe41 	bl	1a6d0 <cbor_target_address>
   1aa4e:	4605      	mov	r5, r0
            switch (cursor->type) {
   1aa50:	7923      	ldrb	r3, [r4, #4]
   1aa52:	3b01      	subs	r3, #1
   1aa54:	2b09      	cmp	r3, #9
   1aa56:	d815      	bhi.n	1aa84 <cbor_internal_read_object+0x170>
   1aa58:	e8df f003 	tbb	[pc, r3]
   1aa5c:	a0865d36 	.word	0xa0865d36
   1aa60:	1414140a 	.word	0x1414140a
   1aa64:	bfb7      	.short	0xbfb7
        if (!cursor->attribute && best_match) {
   1aa66:	f1bb 0f00 	cmp.w	fp, #0
   1aa6a:	d0e9      	beq.n	1aa40 <cbor_internal_read_object+0x12c>
            cursor = best_match;
   1aa6c:	465c      	mov	r4, fp
   1aa6e:	e7e7      	b.n	1aa40 <cbor_internal_read_object+0x12c>
{ return value->type == CborBooleanType; }
   1aa70:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   1aa74:	2bf5      	cmp	r3, #245	; 0xf5
   1aa76:	d11d      	bne.n	1aab4 <cbor_internal_read_object+0x1a0>
    *result = !!value->extra;
   1aa78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1aa7c:	3b00      	subs	r3, #0
   1aa7e:	bf18      	it	ne
   1aa80:	2301      	movne	r3, #1
   1aa82:	7003      	strb	r3, [r0, #0]
        err = cbor_value_advance(&cur_value);
   1aa84:	a805      	add	r0, sp, #20
   1aa86:	f014 fbc2 	bl	2f20e <cbor_value_advance>
   1aa8a:	4680      	mov	r8, r0
{ return value && value->type != CborInvalidType; }
   1aa8c:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   1aa90:	2eff      	cmp	r6, #255	; 0xff
   1aa92:	f000 80ab 	beq.w	1abec <cbor_internal_read_object+0x2d8>
   1aa96:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   1aa98:	2b00      	cmp	r3, #0
   1aa9a:	d09f      	beq.n	1a9dc <cbor_internal_read_object+0xc8>
   1aa9c:	f1b8 0f00 	cmp.w	r8, #0
   1aaa0:	d19c      	bne.n	1a9dc <cbor_internal_read_object+0xc8>
        if (cbor_value_is_text_string(&cur_value)) {
   1aaa2:	2e60      	cmp	r6, #96	; 0x60
   1aaa4:	f43f af77 	beq.w	1a996 <cbor_internal_read_object+0x82>
            attrbuf[0] = '\0';
   1aaa8:	2300      	movs	r3, #0
   1aaaa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   1aaae:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   1aab0:	9c00      	ldr	r4, [sp, #0]
   1aab2:	e7ad      	b.n	1aa10 <cbor_internal_read_object+0xfc>
    assert(cbor_value_is_boolean(value));
   1aab4:	f7f9 fdce 	bl	14654 <hal_debugger_connected>
   1aab8:	b100      	cbz	r0, 1aabc <cbor_internal_read_object+0x1a8>
   1aaba:	be01      	bkpt	0x0001
   1aabc:	2300      	movs	r3, #0
   1aabe:	461a      	mov	r2, r3
   1aac0:	4619      	mov	r1, r3
   1aac2:	4618      	mov	r0, r3
   1aac4:	f7fa f968 	bl	14d98 <__assert_func>
{ return value->type == CborIntegerType; }
   1aac8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   1aacc:	b99b      	cbnz	r3, 1aaf6 <cbor_internal_read_object+0x1e2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1aace:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   1aad2:	f013 0f01 	tst.w	r3, #1
   1aad6:	d118      	bne.n	1ab0a <cbor_internal_read_object+0x1f6>
   1aad8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1aadc:	2400      	movs	r4, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   1aade:	602b      	str	r3, [r5, #0]
   1aae0:	606c      	str	r4, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   1aae2:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1aae6:	f011 0f02 	tst.w	r1, #2
   1aaea:	d0cb      	beq.n	1aa84 <cbor_internal_read_object+0x170>
        *result = -*result - 1;
   1aaec:	43da      	mvns	r2, r3
   1aaee:	43e3      	mvns	r3, r4
   1aaf0:	602a      	str	r2, [r5, #0]
   1aaf2:	606b      	str	r3, [r5, #4]
    return CborNoError;
   1aaf4:	e7c6      	b.n	1aa84 <cbor_internal_read_object+0x170>
    assert(cbor_value_is_integer(value));
   1aaf6:	f7f9 fdad 	bl	14654 <hal_debugger_connected>
   1aafa:	b100      	cbz	r0, 1aafe <cbor_internal_read_object+0x1ea>
   1aafc:	be01      	bkpt	0x0001
   1aafe:	2300      	movs	r3, #0
   1ab00:	461a      	mov	r2, r3
   1ab02:	4619      	mov	r1, r3
   1ab04:	4618      	mov	r0, r3
   1ab06:	f7fa f947 	bl	14d98 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1ab0a:	a805      	add	r0, sp, #20
   1ab0c:	f014 f9d5 	bl	2eeba <_cbor_value_decode_int64_internal>
   1ab10:	4603      	mov	r3, r0
   1ab12:	460c      	mov	r4, r1
   1ab14:	e7e3      	b.n	1aade <cbor_internal_read_object+0x1ca>
{ return value->type == CborIntegerType; }
   1ab16:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1ab1a:	b933      	cbnz	r3, 1ab2a <cbor_internal_read_object+0x216>
   1ab1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1ab20:	f013 0f02 	tst.w	r3, #2
   1ab24:	d00e      	beq.n	1ab44 <cbor_internal_read_object+0x230>
   1ab26:	2300      	movs	r3, #0
   1ab28:	e000      	b.n	1ab2c <cbor_internal_read_object+0x218>
   1ab2a:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   1ab2c:	b163      	cbz	r3, 1ab48 <cbor_internal_read_object+0x234>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   1ab2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   1ab32:	f013 0f01 	tst.w	r3, #1
   1ab36:	d111      	bne.n	1ab5c <cbor_internal_read_object+0x248>
   1ab38:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   1ab3c:	2300      	movs	r3, #0
    *result = _cbor_value_extract_int64_helper(value);
   1ab3e:	e9c5 2300 	strd	r2, r3, [r5]
    return CborNoError;
   1ab42:	e79f      	b.n	1aa84 <cbor_internal_read_object+0x170>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1ab44:	2301      	movs	r3, #1
   1ab46:	e7f1      	b.n	1ab2c <cbor_internal_read_object+0x218>
    assert(cbor_value_is_unsigned_integer(value));
   1ab48:	f7f9 fd84 	bl	14654 <hal_debugger_connected>
   1ab4c:	b100      	cbz	r0, 1ab50 <cbor_internal_read_object+0x23c>
   1ab4e:	be01      	bkpt	0x0001
   1ab50:	2300      	movs	r3, #0
   1ab52:	461a      	mov	r2, r3
   1ab54:	4619      	mov	r1, r3
   1ab56:	4618      	mov	r0, r3
   1ab58:	f7fa f91e 	bl	14d98 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1ab5c:	a805      	add	r0, sp, #20
   1ab5e:	f014 f9ac 	bl	2eeba <_cbor_value_decode_int64_internal>
   1ab62:	4602      	mov	r2, r0
   1ab64:	460b      	mov	r3, r1
   1ab66:	e7ea      	b.n	1ab3e <cbor_internal_read_object+0x22a>
                size_t len = cursor->len;
   1ab68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ab6a:	9303      	str	r3, [sp, #12]
{ return value->type == CborByteStringType; }
   1ab6c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   1ab70:	2b40      	cmp	r3, #64	; 0x40
   1ab72:	d109      	bne.n	1ab88 <cbor_internal_read_object+0x274>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1ab74:	2300      	movs	r3, #0
   1ab76:	aa03      	add	r2, sp, #12
   1ab78:	4601      	mov	r1, r0
   1ab7a:	a805      	add	r0, sp, #20
   1ab7c:	f014 faea 	bl	2f154 <_cbor_value_copy_string>
                *cursor->addr.bytestring.len = len;
   1ab80:	68e3      	ldr	r3, [r4, #12]
   1ab82:	9a03      	ldr	r2, [sp, #12]
   1ab84:	601a      	str	r2, [r3, #0]
                break;
   1ab86:	e77d      	b.n	1aa84 <cbor_internal_read_object+0x170>
    assert(cbor_value_is_byte_string(value));
   1ab88:	f7f9 fd64 	bl	14654 <hal_debugger_connected>
   1ab8c:	b100      	cbz	r0, 1ab90 <cbor_internal_read_object+0x27c>
   1ab8e:	be01      	bkpt	0x0001
   1ab90:	2300      	movs	r3, #0
   1ab92:	461a      	mov	r2, r3
   1ab94:	4619      	mov	r1, r3
   1ab96:	4618      	mov	r0, r3
   1ab98:	f7fa f8fe 	bl	14d98 <__assert_func>
                size_t len = cursor->len;
   1ab9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ab9e:	9303      	str	r3, [sp, #12]
{ return value->type == CborTextStringType; }
   1aba0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   1aba4:	2b60      	cmp	r3, #96	; 0x60
   1aba6:	d106      	bne.n	1abb6 <cbor_internal_read_object+0x2a2>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1aba8:	2300      	movs	r3, #0
   1abaa:	aa03      	add	r2, sp, #12
   1abac:	4601      	mov	r1, r0
   1abae:	a805      	add	r0, sp, #20
   1abb0:	f014 fad0 	bl	2f154 <_cbor_value_copy_string>
                break;
   1abb4:	e766      	b.n	1aa84 <cbor_internal_read_object+0x170>
    assert(cbor_value_is_text_string(value));
   1abb6:	f7f9 fd4d 	bl	14654 <hal_debugger_connected>
   1abba:	b100      	cbz	r0, 1abbe <cbor_internal_read_object+0x2aa>
   1abbc:	be01      	bkpt	0x0001
   1abbe:	2300      	movs	r3, #0
   1abc0:	461a      	mov	r2, r3
   1abc2:	4619      	mov	r1, r3
   1abc4:	4618      	mov	r0, r3
   1abc6:	f7fa f8e7 	bl	14d98 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   1abca:	f104 0108 	add.w	r1, r4, #8
   1abce:	a805      	add	r0, sp, #20
   1abd0:	f7ff fda4 	bl	1a71c <cbor_read_array>
   1abd4:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   1abd8:	e758      	b.n	1aa8c <cbor_internal_read_object+0x178>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   1abda:	2300      	movs	r3, #0
   1abdc:	461a      	mov	r2, r3
   1abde:	68a1      	ldr	r1, [r4, #8]
   1abe0:	a805      	add	r0, sp, #20
   1abe2:	f7ff fe97 	bl	1a914 <cbor_internal_read_object>
   1abe6:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   1abea:	e74f      	b.n	1aa8c <cbor_internal_read_object+0x178>
{ return value && value->type != CborInvalidType; }
   1abec:	2300      	movs	r3, #0
   1abee:	e753      	b.n	1aa98 <cbor_internal_read_object+0x184>
        err |= cbor_value_leave_container(root_value, &cur_value);
   1abf0:	a905      	add	r1, sp, #20
   1abf2:	9801      	ldr	r0, [sp, #4]
   1abf4:	f014 fa85 	bl	2f102 <cbor_value_leave_container>
   1abf8:	ea48 0800 	orr.w	r8, r8, r0
   1abfc:	e6f2      	b.n	1a9e4 <cbor_internal_read_object+0xd0>

0001abfe <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   1abfe:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   1ac00:	2300      	movs	r3, #0
   1ac02:	461a      	mov	r2, r3
   1ac04:	f7ff fe86 	bl	1a914 <cbor_internal_read_object>
    return st;
}
   1ac08:	bd08      	pop	{r3, pc}

0001ac0a <img_mgmt_find_tlvs>:
 * Finds the TLVs in the specified image slot, if any.
 */
static int
img_mgmt_find_tlvs(int slot, size_t *start_off, size_t *end_off,
                   uint16_t magic)
{
   1ac0a:	b570      	push	{r4, r5, r6, lr}
   1ac0c:	b082      	sub	sp, #8
   1ac0e:	460c      	mov	r4, r1
   1ac10:	4616      	mov	r6, r2
   1ac12:	461d      	mov	r5, r3
    struct image_tlv_info tlv_info;
    int rc;

    rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof tlv_info);
   1ac14:	2304      	movs	r3, #4
   1ac16:	eb0d 0203 	add.w	r2, sp, r3
   1ac1a:	6809      	ldr	r1, [r1, #0]
   1ac1c:	f000 fdf5 	bl	1b80a <img_mgmt_impl_read>
    if (rc != 0) {
   1ac20:	b960      	cbnz	r0, 1ac3c <img_mgmt_find_tlvs+0x32>
        /* Read error. */
        return MGMT_ERR_EUNKNOWN;
    }

    if (tlv_info.it_magic != magic) {
   1ac22:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1ac26:	42ab      	cmp	r3, r5
   1ac28:	d10a      	bne.n	1ac40 <img_mgmt_find_tlvs+0x36>
        /* No TLVs. */
        return MGMT_ERR_ENOENT;
    }

    *start_off += sizeof tlv_info;
   1ac2a:	6823      	ldr	r3, [r4, #0]
   1ac2c:	3304      	adds	r3, #4
   1ac2e:	6023      	str	r3, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1ac30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1ac34:	4413      	add	r3, r2
   1ac36:	6033      	str	r3, [r6, #0]

    return 0;
}
   1ac38:	b002      	add	sp, #8
   1ac3a:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   1ac3c:	2001      	movs	r0, #1
   1ac3e:	e7fb      	b.n	1ac38 <img_mgmt_find_tlvs+0x2e>
        return MGMT_ERR_ENOENT;
   1ac40:	2005      	movs	r0, #5
   1ac42:	e7f9      	b.n	1ac38 <img_mgmt_find_tlvs+0x2e>

0001ac44 <img_mgmt_upload_good_rsp>:
    return 0;
}

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   1ac44:	b538      	push	{r3, r4, r5, lr}
   1ac46:	4605      	mov	r5, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1ac48:	2202      	movs	r2, #2
   1ac4a:	490e      	ldr	r1, [pc, #56]	; (1ac84 <img_mgmt_upload_good_rsp+0x40>)
   1ac4c:	f013 fe96 	bl	2e97c <cbor_encode_text_string>
   1ac50:	4604      	mov	r4, r0
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   1ac52:	2200      	movs	r2, #0
   1ac54:	2300      	movs	r3, #0
   1ac56:	4628      	mov	r0, r5
   1ac58:	f013 fe1b 	bl	2e892 <cbor_encode_int>
   1ac5c:	4304      	orrs	r4, r0
   1ac5e:	2203      	movs	r2, #3
   1ac60:	4909      	ldr	r1, [pc, #36]	; (1ac88 <img_mgmt_upload_good_rsp+0x44>)
   1ac62:	4628      	mov	r0, r5
   1ac64:	f013 fe8a 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   1ac68:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   1ac6a:	4b08      	ldr	r3, [pc, #32]	; (1ac8c <img_mgmt_upload_good_rsp+0x48>)
   1ac6c:	685a      	ldr	r2, [r3, #4]
   1ac6e:	2300      	movs	r3, #0
   1ac70:	4628      	mov	r0, r5
   1ac72:	f013 fe0e 	bl	2e892 <cbor_encode_int>

    if (err != 0) {
   1ac76:	ea54 0300 	orrs.w	r3, r4, r0
   1ac7a:	d101      	bne.n	1ac80 <img_mgmt_upload_good_rsp+0x3c>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1ac7c:	2000      	movs	r0, #0
}
   1ac7e:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1ac80:	2002      	movs	r0, #2
   1ac82:	e7fc      	b.n	1ac7e <img_mgmt_upload_good_rsp+0x3a>
   1ac84:	00034260 	.word	0x00034260
   1ac88:	00034584 	.word	0x00034584
   1ac8c:	10001e40 	.word	0x10001e40

0001ac90 <img_mgmt_read_info>:
{
   1ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac92:	b08d      	sub	sp, #52	; 0x34
   1ac94:	4604      	mov	r4, r0
   1ac96:	460d      	mov	r5, r1
   1ac98:	4616      	mov	r6, r2
   1ac9a:	461f      	mov	r7, r3
    rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   1ac9c:	f10d 0103 	add.w	r1, sp, #3
   1aca0:	f000 fe20 	bl	1b8e4 <img_mgmt_impl_erased_val>
    if (rc != 0) {
   1aca4:	b118      	cbz	r0, 1acae <img_mgmt_read_info+0x1e>
        return MGMT_ERR_EUNKNOWN;
   1aca6:	2501      	movs	r5, #1
}
   1aca8:	4628      	mov	r0, r5
   1acaa:	b00d      	add	sp, #52	; 0x34
   1acac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof hdr);
   1acae:	2320      	movs	r3, #32
   1acb0:	aa04      	add	r2, sp, #16
   1acb2:	2100      	movs	r1, #0
   1acb4:	4620      	mov	r0, r4
   1acb6:	f000 fda8 	bl	1b80a <img_mgmt_impl_read>
    if (rc != 0) {
   1acba:	2800      	cmp	r0, #0
   1acbc:	d178      	bne.n	1adb0 <img_mgmt_read_info+0x120>
    if (ver != NULL) {
   1acbe:	b12d      	cbz	r5, 1accc <img_mgmt_read_info+0x3c>
        memset(ver, erased_val, sizeof(*ver));
   1acc0:	2208      	movs	r2, #8
   1acc2:	f89d 1003 	ldrb.w	r1, [sp, #3]
   1acc6:	4628      	mov	r0, r5
   1acc8:	f7fb ff15 	bl	16af6 <memset>
    erased_val_32 = ERASED_VAL_32(erased_val);
   1accc:	f89d 2003 	ldrb.w	r2, [sp, #3]
   1acd0:	0413      	lsls	r3, r2, #16
   1acd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1acd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1acda:	431a      	orrs	r2, r3
    if (hdr.ih_magic == IMAGE_MAGIC) {
   1acdc:	9b04      	ldr	r3, [sp, #16]
   1acde:	493a      	ldr	r1, [pc, #232]	; (1adc8 <img_mgmt_read_info+0x138>)
   1ace0:	428b      	cmp	r3, r1
   1ace2:	d003      	beq.n	1acec <img_mgmt_read_info+0x5c>
    } else if (hdr.ih_magic == erased_val_32) {
   1ace4:	4293      	cmp	r3, r2
   1ace6:	d025      	beq.n	1ad34 <img_mgmt_read_info+0xa4>
        return MGMT_ERR_EUNKNOWN;
   1ace8:	2501      	movs	r5, #1
   1acea:	e7dd      	b.n	1aca8 <img_mgmt_read_info+0x18>
        if (ver != NULL) {
   1acec:	b11d      	cbz	r5, 1acf6 <img_mgmt_read_info+0x66>
            memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   1acee:	ab09      	add	r3, sp, #36	; 0x24
   1acf0:	cb03      	ldmia	r3!, {r0, r1}
   1acf2:	6028      	str	r0, [r5, #0]
   1acf4:	6069      	str	r1, [r5, #4]
    if (flags != NULL) {
   1acf6:	b10f      	cbz	r7, 1acfc <img_mgmt_read_info+0x6c>
        *flags = hdr.ih_flags;
   1acf8:	9b08      	ldr	r3, [sp, #32]
   1acfa:	603b      	str	r3, [r7, #0]
    data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   1acfc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1ad00:	9a07      	ldr	r2, [sp, #28]
   1ad02:	4413      	add	r3, r2
   1ad04:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_PROT_INFO_MAGIC);
   1ad06:	f646 1308 	movw	r3, #26888	; 0x6908
   1ad0a:	aa01      	add	r2, sp, #4
   1ad0c:	a902      	add	r1, sp, #8
   1ad0e:	4620      	mov	r0, r4
   1ad10:	f7ff ff7b 	bl	1ac0a <img_mgmt_find_tlvs>
    if (!rc) {
   1ad14:	b910      	cbnz	r0, 1ad1c <img_mgmt_read_info+0x8c>
        data_off = data_end - sizeof(struct image_tlv_info);
   1ad16:	9b01      	ldr	r3, [sp, #4]
   1ad18:	3b04      	subs	r3, #4
   1ad1a:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_INFO_MAGIC);
   1ad1c:	f646 1307 	movw	r3, #26887	; 0x6907
   1ad20:	aa01      	add	r2, sp, #4
   1ad22:	a902      	add	r1, sp, #8
   1ad24:	4620      	mov	r0, r4
   1ad26:	f7ff ff70 	bl	1ac0a <img_mgmt_find_tlvs>
    if (rc != 0) {
   1ad2a:	4605      	mov	r5, r0
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	d141      	bne.n	1adb4 <img_mgmt_read_info+0x124>
    hash_found = false;
   1ad30:	2700      	movs	r7, #0
   1ad32:	e00f      	b.n	1ad54 <img_mgmt_read_info+0xc4>
        return MGMT_ERR_ENOENT;
   1ad34:	2505      	movs	r5, #5
   1ad36:	e7b7      	b.n	1aca8 <img_mgmt_read_info+0x18>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   1ad38:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ad3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1ad40:	4291      	cmp	r1, r2
   1ad42:	d116      	bne.n	1ad72 <img_mgmt_read_info+0xe2>
            return MGMT_ERR_EUNKNOWN;
   1ad44:	2501      	movs	r5, #1
   1ad46:	e7af      	b.n	1aca8 <img_mgmt_read_info+0x18>
            data_off += sizeof tlv + tlv.it_len;
   1ad48:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ad4c:	9a02      	ldr	r2, [sp, #8]
   1ad4e:	4413      	add	r3, r2
   1ad50:	3304      	adds	r3, #4
   1ad52:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof tlv <= data_end) {
   1ad54:	9902      	ldr	r1, [sp, #8]
   1ad56:	1d0a      	adds	r2, r1, #4
   1ad58:	9b01      	ldr	r3, [sp, #4]
   1ad5a:	429a      	cmp	r2, r3
   1ad5c:	d823      	bhi.n	1ada6 <img_mgmt_read_info+0x116>
        rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof tlv);
   1ad5e:	2304      	movs	r3, #4
   1ad60:	aa03      	add	r2, sp, #12
   1ad62:	4620      	mov	r0, r4
   1ad64:	f000 fd51 	bl	1b80a <img_mgmt_impl_read>
        if (rc != 0) {
   1ad68:	bb30      	cbnz	r0, 1adb8 <img_mgmt_read_info+0x128>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   1ad6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ad6e:	2bff      	cmp	r3, #255	; 0xff
   1ad70:	d0e2      	beq.n	1ad38 <img_mgmt_read_info+0xa8>
        if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   1ad72:	2b10      	cmp	r3, #16
   1ad74:	d1e8      	bne.n	1ad48 <img_mgmt_read_info+0xb8>
   1ad76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1ad7a:	2b20      	cmp	r3, #32
   1ad7c:	d1e4      	bne.n	1ad48 <img_mgmt_read_info+0xb8>
        if (hash_found) {
   1ad7e:	b9ef      	cbnz	r7, 1adbc <img_mgmt_read_info+0x12c>
        data_off += sizeof tlv;
   1ad80:	9902      	ldr	r1, [sp, #8]
   1ad82:	3104      	adds	r1, #4
   1ad84:	9102      	str	r1, [sp, #8]
        if (hash != NULL) {
   1ad86:	b166      	cbz	r6, 1ada2 <img_mgmt_read_info+0x112>
            if (data_off + IMAGE_HASH_LEN > data_end) {
   1ad88:	f101 0320 	add.w	r3, r1, #32
   1ad8c:	9a01      	ldr	r2, [sp, #4]
   1ad8e:	4293      	cmp	r3, r2
   1ad90:	d816      	bhi.n	1adc0 <img_mgmt_read_info+0x130>
            rc = img_mgmt_impl_read(image_slot, data_off, hash,
   1ad92:	2320      	movs	r3, #32
   1ad94:	4632      	mov	r2, r6
   1ad96:	4620      	mov	r0, r4
   1ad98:	f000 fd37 	bl	1b80a <img_mgmt_impl_read>
            if (rc != 0) {
   1ad9c:	b990      	cbnz	r0, 1adc4 <img_mgmt_read_info+0x134>
        hash_found = true;
   1ad9e:	2701      	movs	r7, #1
   1ada0:	e7d8      	b.n	1ad54 <img_mgmt_read_info+0xc4>
   1ada2:	2701      	movs	r7, #1
   1ada4:	e7d6      	b.n	1ad54 <img_mgmt_read_info+0xc4>
    if (!hash_found) {
   1ada6:	2f00      	cmp	r7, #0
   1ada8:	f47f af7e 	bne.w	1aca8 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   1adac:	2501      	movs	r5, #1
   1adae:	e77b      	b.n	1aca8 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   1adb0:	2501      	movs	r5, #1
   1adb2:	e779      	b.n	1aca8 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   1adb4:	2501      	movs	r5, #1
   1adb6:	e777      	b.n	1aca8 <img_mgmt_read_info+0x18>
            return MGMT_ERR_EUNKNOWN;
   1adb8:	2501      	movs	r5, #1
   1adba:	e775      	b.n	1aca8 <img_mgmt_read_info+0x18>
            return MGMT_ERR_EUNKNOWN;
   1adbc:	2501      	movs	r5, #1
   1adbe:	e773      	b.n	1aca8 <img_mgmt_read_info+0x18>
                return MGMT_ERR_EUNKNOWN;
   1adc0:	2501      	movs	r5, #1
   1adc2:	e771      	b.n	1aca8 <img_mgmt_read_info+0x18>
                return MGMT_ERR_EUNKNOWN;
   1adc4:	2501      	movs	r5, #1
   1adc6:	e76f      	b.n	1aca8 <img_mgmt_read_info+0x18>
   1adc8:	96f3b83d 	.word	0x96f3b83d

0001adcc <img_mgmt_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
img_mgmt_upload_log(bool is_first, bool is_last, int status)
{
   1adcc:	b510      	push	{r4, lr}
   1adce:	b088      	sub	sp, #32
   1add0:	4614      	mov	r4, r2
    uint8_t hash[IMAGE_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   1add2:	b920      	cbnz	r0, 1adde <img_mgmt_upload_log+0x12>
        return img_mgmt_impl_log_upload_start(status);
    }

    if (is_last || status != 0) {
   1add4:	b939      	cbnz	r1, 1ade6 <img_mgmt_upload_log+0x1a>
   1add6:	b932      	cbnz	r2, 1ade6 <img_mgmt_upload_log+0x1a>

        return img_mgmt_impl_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   1add8:	4610      	mov	r0, r2
}
   1adda:	b008      	add	sp, #32
   1addc:	bd10      	pop	{r4, pc}
        return img_mgmt_impl_log_upload_start(status);
   1adde:	4610      	mov	r0, r2
   1ade0:	f000 fdaa 	bl	1b938 <img_mgmt_impl_log_upload_start>
   1ade4:	e7f9      	b.n	1adda <img_mgmt_upload_log+0xe>
        rc = img_mgmt_read_info(1, NULL, hash, NULL);
   1ade6:	2300      	movs	r3, #0
   1ade8:	466a      	mov	r2, sp
   1adea:	4619      	mov	r1, r3
   1adec:	2001      	movs	r0, #1
   1adee:	f7ff ff4f 	bl	1ac90 <img_mgmt_read_info>
        if (rc != 0) {
   1adf2:	b120      	cbz	r0, 1adfe <img_mgmt_upload_log+0x32>
            hashp = NULL;
   1adf4:	2100      	movs	r1, #0
        return img_mgmt_impl_log_upload_done(status, hashp);
   1adf6:	4620      	mov	r0, r4
   1adf8:	f000 fda8 	bl	1b94c <img_mgmt_impl_log_upload_done>
   1adfc:	e7ed      	b.n	1adda <img_mgmt_upload_log+0xe>
            hashp = hash;
   1adfe:	4669      	mov	r1, sp
   1ae00:	e7f9      	b.n	1adf6 <img_mgmt_upload_log+0x2a>

0001ae02 <img_mgmt_find_by_hash>:
{
   1ae02:	b570      	push	{r4, r5, r6, lr}
   1ae04:	b088      	sub	sp, #32
   1ae06:	4606      	mov	r6, r0
   1ae08:	460d      	mov	r5, r1
    for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   1ae0a:	2400      	movs	r4, #0
   1ae0c:	e000      	b.n	1ae10 <img_mgmt_find_by_hash+0xe>
   1ae0e:	3401      	adds	r4, #1
   1ae10:	2c01      	cmp	r4, #1
   1ae12:	dc0f      	bgt.n	1ae34 <img_mgmt_find_by_hash+0x32>
        if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   1ae14:	2300      	movs	r3, #0
   1ae16:	466a      	mov	r2, sp
   1ae18:	4629      	mov	r1, r5
   1ae1a:	4620      	mov	r0, r4
   1ae1c:	f7ff ff38 	bl	1ac90 <img_mgmt_read_info>
   1ae20:	2800      	cmp	r0, #0
   1ae22:	d1f4      	bne.n	1ae0e <img_mgmt_find_by_hash+0xc>
        if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   1ae24:	2220      	movs	r2, #32
   1ae26:	4631      	mov	r1, r6
   1ae28:	4668      	mov	r0, sp
   1ae2a:	f7fb fe1b 	bl	16a64 <memcmp>
   1ae2e:	2800      	cmp	r0, #0
   1ae30:	d1ed      	bne.n	1ae0e <img_mgmt_find_by_hash+0xc>
   1ae32:	e001      	b.n	1ae38 <img_mgmt_find_by_hash+0x36>
    return -1;
   1ae34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1ae38:	4620      	mov	r0, r4
   1ae3a:	b008      	add	sp, #32
   1ae3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0001ae40 <img_mgmt_dfu_stopped>:
    return img_mgmt_upload_good_rsp(ctxt);
}

void
img_mgmt_dfu_stopped(void)
{
   1ae40:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   1ae42:	4b03      	ldr	r3, [pc, #12]	; (1ae50 <img_mgmt_dfu_stopped+0x10>)
   1ae44:	681b      	ldr	r3, [r3, #0]
   1ae46:	b113      	cbz	r3, 1ae4e <img_mgmt_dfu_stopped+0xe>
   1ae48:	685b      	ldr	r3, [r3, #4]
   1ae4a:	b103      	cbz	r3, 1ae4e <img_mgmt_dfu_stopped+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   1ae4c:	4798      	blx	r3
    }
}
   1ae4e:	bd08      	pop	{r3, pc}
   1ae50:	10001e70 	.word	0x10001e70

0001ae54 <img_mgmt_erase>:
{
   1ae54:	b570      	push	{r4, r5, r6, lr}
   1ae56:	b082      	sub	sp, #8
   1ae58:	4604      	mov	r4, r0
    rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   1ae5a:	2300      	movs	r3, #0
   1ae5c:	461a      	mov	r2, r3
   1ae5e:	4669      	mov	r1, sp
   1ae60:	2001      	movs	r0, #1
   1ae62:	f7ff ff15 	bl	1ac90 <img_mgmt_read_info>
    if (rc == 0) {
   1ae66:	b918      	cbnz	r0, 1ae70 <img_mgmt_erase+0x1c>
        if (img_mgmt_slot_in_use(1)) {
   1ae68:	2001      	movs	r0, #1
   1ae6a:	f000 f9aa 	bl	1b1c2 <img_mgmt_slot_in_use>
   1ae6e:	b9b8      	cbnz	r0, 1aea0 <img_mgmt_erase+0x4c>
    rc = img_mgmt_impl_erase_slot();
   1ae70:	f000 fc56 	bl	1b720 <img_mgmt_impl_erase_slot>
    if (!rc) {
   1ae74:	4606      	mov	r6, r0
   1ae76:	b180      	cbz	r0, 1ae9a <img_mgmt_erase+0x46>
   1ae78:	2202      	movs	r2, #2
   1ae7a:	490b      	ldr	r1, [pc, #44]	; (1aea8 <img_mgmt_erase+0x54>)
   1ae7c:	4620      	mov	r0, r4
   1ae7e:	f013 fd7d 	bl	2e97c <cbor_encode_text_string>
   1ae82:	4605      	mov	r5, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   1ae84:	4632      	mov	r2, r6
   1ae86:	17f3      	asrs	r3, r6, #31
   1ae88:	4620      	mov	r0, r4
   1ae8a:	f013 fd02 	bl	2e892 <cbor_encode_int>
    if (err != 0) {
   1ae8e:	ea50 0305 	orrs.w	r3, r0, r5
   1ae92:	d107      	bne.n	1aea4 <img_mgmt_erase+0x50>
    return 0;
   1ae94:	2000      	movs	r0, #0
}
   1ae96:	b002      	add	sp, #8
   1ae98:	bd70      	pop	{r4, r5, r6, pc}
        img_mgmt_dfu_stopped();
   1ae9a:	f7ff ffd1 	bl	1ae40 <img_mgmt_dfu_stopped>
   1ae9e:	e7eb      	b.n	1ae78 <img_mgmt_erase+0x24>
            return MGMT_ERR_EBADSTATE;
   1aea0:	2006      	movs	r0, #6
   1aea2:	e7f8      	b.n	1ae96 <img_mgmt_erase+0x42>
        return MGMT_ERR_ENOMEM;
   1aea4:	2002      	movs	r0, #2
   1aea6:	e7f6      	b.n	1ae96 <img_mgmt_erase+0x42>
   1aea8:	00034260 	.word	0x00034260

0001aeac <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
   1aeac:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   1aeae:	4b03      	ldr	r3, [pc, #12]	; (1aebc <img_mgmt_dfu_started+0x10>)
   1aeb0:	681b      	ldr	r3, [r3, #0]
   1aeb2:	b113      	cbz	r3, 1aeba <img_mgmt_dfu_started+0xe>
   1aeb4:	681b      	ldr	r3, [r3, #0]
   1aeb6:	b103      	cbz	r3, 1aeba <img_mgmt_dfu_started+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   1aeb8:	4798      	blx	r3
    }
}
   1aeba:	bd08      	pop	{r3, pc}
   1aebc:	10001e70 	.word	0x10001e70

0001aec0 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
   1aec0:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   1aec2:	4b03      	ldr	r3, [pc, #12]	; (1aed0 <img_mgmt_dfu_pending+0x10>)
   1aec4:	681b      	ldr	r3, [r3, #0]
   1aec6:	b113      	cbz	r3, 1aece <img_mgmt_dfu_pending+0xe>
   1aec8:	689b      	ldr	r3, [r3, #8]
   1aeca:	b103      	cbz	r3, 1aece <img_mgmt_dfu_pending+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   1aecc:	4798      	blx	r3
    }
}
   1aece:	bd08      	pop	{r3, pc}
   1aed0:	10001e70 	.word	0x10001e70

0001aed4 <img_mgmt_upload>:
{
   1aed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aed8:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
   1aedc:	4605      	mov	r5, r0
    struct img_mgmt_upload_req req = {
   1aede:	ac5c      	add	r4, sp, #368	; 0x170
   1aee0:	f44f 7212 	mov.w	r2, #584	; 0x248
   1aee4:	2100      	movs	r1, #0
   1aee6:	4620      	mov	r0, r4
   1aee8:	f7fb fe05 	bl	16af6 <memset>
   1aeec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1aef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aef4:	e9c4 2302 	strd	r2, r3, [r4, #8]
   1aef8:	e9c4 2304 	strd	r2, r3, [r4, #16]
    const struct cbor_attr_t off_attr[] = {
   1aefc:	f44f 72a8 	mov.w	r2, #336	; 0x150
   1af00:	2100      	movs	r1, #0
   1af02:	a808      	add	r0, sp, #32
   1af04:	f7fb fdf7 	bl	16af6 <memset>
   1af08:	4b71      	ldr	r3, [pc, #452]	; (1b0d0 <img_mgmt_upload+0x1fc>)
   1af0a:	9308      	str	r3, [sp, #32]
   1af0c:	2202      	movs	r2, #2
   1af0e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   1af12:	940a      	str	r4, [sp, #40]	; 0x28
   1af14:	2301      	movs	r3, #1
   1af16:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   1af1a:	496e      	ldr	r1, [pc, #440]	; (1b0d4 <img_mgmt_upload+0x200>)
   1af1c:	9114      	str	r1, [sp, #80]	; 0x50
   1af1e:	2103      	movs	r1, #3
   1af20:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   1af24:	a864      	add	r0, sp, #400	; 0x190
   1af26:	9016      	str	r0, [sp, #88]	; 0x58
   1af28:	a862      	add	r0, sp, #392	; 0x188
   1af2a:	9017      	str	r0, [sp, #92]	; 0x5c
   1af2c:	f44f 7000 	mov.w	r0, #512	; 0x200
   1af30:	901e      	str	r0, [sp, #120]	; 0x78
   1af32:	4869      	ldr	r0, [pc, #420]	; (1b0d8 <img_mgmt_upload+0x204>)
   1af34:	9020      	str	r0, [sp, #128]	; 0x80
   1af36:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   1af3a:	a860      	add	r0, sp, #384	; 0x180
   1af3c:	9022      	str	r0, [sp, #136]	; 0x88
   1af3e:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   1af42:	4866      	ldr	r0, [pc, #408]	; (1b0dc <img_mgmt_upload+0x208>)
   1af44:	902c      	str	r0, [sp, #176]	; 0xb0
   1af46:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   1af4a:	aa5e      	add	r2, sp, #376	; 0x178
   1af4c:	922e      	str	r2, [sp, #184]	; 0xb8
   1af4e:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   1af52:	4b63      	ldr	r3, [pc, #396]	; (1b0e0 <img_mgmt_upload+0x20c>)
   1af54:	9338      	str	r3, [sp, #224]	; 0xe0
   1af56:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
   1af5a:	abe4      	add	r3, sp, #912	; 0x390
   1af5c:	933a      	str	r3, [sp, #232]	; 0xe8
   1af5e:	ab63      	add	r3, sp, #396	; 0x18c
   1af60:	933b      	str	r3, [sp, #236]	; 0xec
   1af62:	2320      	movs	r3, #32
   1af64:	9342      	str	r3, [sp, #264]	; 0x108
   1af66:	4b5f      	ldr	r3, [pc, #380]	; (1b0e4 <img_mgmt_upload+0x210>)
   1af68:	9344      	str	r3, [sp, #272]	; 0x110
   1af6a:	2305      	movs	r3, #5
   1af6c:	f88d 3114 	strb.w	r3, [sp, #276]	; 0x114
   1af70:	abec      	add	r3, sp, #944	; 0x3b0
   1af72:	9346      	str	r3, [sp, #280]	; 0x118
    const char *errstr = NULL;
   1af74:	2300      	movs	r3, #0
   1af76:	9307      	str	r3, [sp, #28]
    rc = cbor_read_object(&ctxt->it, off_attr);
   1af78:	a908      	add	r1, sp, #32
   1af7a:	f105 001c 	add.w	r0, r5, #28
   1af7e:	f7ff fe3e 	bl	1abfe <cbor_read_object>
    if (rc != 0) {
   1af82:	2800      	cmp	r0, #0
   1af84:	f040 809d 	bne.w	1b0c2 <img_mgmt_upload+0x1ee>
    rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   1af88:	aa07      	add	r2, sp, #28
   1af8a:	4669      	mov	r1, sp
   1af8c:	a85c      	add	r0, sp, #368	; 0x170
   1af8e:	f000 faff 	bl	1b590 <img_mgmt_impl_upload_inspect>
    if (rc != 0) {
   1af92:	4604      	mov	r4, r0
   1af94:	2800      	cmp	r0, #0
   1af96:	d13c      	bne.n	1b012 <img_mgmt_upload+0x13e>
    if (!action.proceed) {
   1af98:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1af9c:	2e00      	cmp	r6, #0
   1af9e:	d03b      	beq.n	1b018 <img_mgmt_upload+0x144>
    if (img_mgmt_upload_cb != NULL) {
   1afa0:	4b51      	ldr	r3, [pc, #324]	; (1b0e8 <img_mgmt_upload+0x214>)
   1afa2:	681b      	ldr	r3, [r3, #0]
   1afa4:	b13b      	cbz	r3, 1afb6 <img_mgmt_upload+0xe2>
        rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   1afa6:	4a51      	ldr	r2, [pc, #324]	; (1b0ec <img_mgmt_upload+0x218>)
   1afa8:	6812      	ldr	r2, [r2, #0]
   1afaa:	9900      	ldr	r1, [sp, #0]
   1afac:	985e      	ldr	r0, [sp, #376]	; 0x178
   1afae:	4798      	blx	r3
        if (rc != 0) {
   1afb0:	4604      	mov	r4, r0
   1afb2:	2800      	cmp	r0, #0
   1afb4:	d135      	bne.n	1b022 <img_mgmt_upload+0x14e>
    g_img_mgmt_state.area_id = action.area_id;
   1afb6:	9a03      	ldr	r2, [sp, #12]
   1afb8:	4b4d      	ldr	r3, [pc, #308]	; (1b0f0 <img_mgmt_upload+0x21c>)
   1afba:	601a      	str	r2, [r3, #0]
    g_img_mgmt_state.size = action.size;
   1afbc:	9a00      	ldr	r2, [sp, #0]
   1afbe:	609a      	str	r2, [r3, #8]
    if (req.off == 0) {
   1afc0:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
   1afc4:	4313      	orrs	r3, r2
   1afc6:	d04a      	beq.n	1b05e <img_mgmt_upload+0x18a>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   1afc8:	2301      	movs	r3, #1
   1afca:	93ef      	str	r3, [sp, #956]	; 0x3bc
    if (req.data_len != 0) {
   1afcc:	9b62      	ldr	r3, [sp, #392]	; 0x188
   1afce:	b353      	cbz	r3, 1b026 <img_mgmt_upload+0x152>
        if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   1afd0:	4a47      	ldr	r2, [pc, #284]	; (1b0f0 <img_mgmt_upload+0x21c>)
   1afd2:	6851      	ldr	r1, [r2, #4]
   1afd4:	440b      	add	r3, r1
   1afd6:	6892      	ldr	r2, [r2, #8]
   1afd8:	4293      	cmp	r3, r2
   1afda:	d000      	beq.n	1afde <img_mgmt_upload+0x10a>
    bool last = false;
   1afdc:	2600      	movs	r6, #0
        rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes, last);
   1afde:	4633      	mov	r3, r6
   1afe0:	9a02      	ldr	r2, [sp, #8]
   1afe2:	a964      	add	r1, sp, #400	; 0x190
   1afe4:	985e      	ldr	r0, [sp, #376]	; 0x178
   1afe6:	f000 fc29 	bl	1b83c <img_mgmt_impl_write_image_data>
        if (rc != 0) {
   1afea:	4604      	mov	r4, r0
   1afec:	2800      	cmp	r0, #0
   1afee:	d161      	bne.n	1b0b4 <img_mgmt_upload+0x1e0>
            g_img_mgmt_state.off += action.write_bytes;
   1aff0:	9b02      	ldr	r3, [sp, #8]
   1aff2:	4a3f      	ldr	r2, [pc, #252]	; (1b0f0 <img_mgmt_upload+0x21c>)
   1aff4:	6851      	ldr	r1, [r2, #4]
   1aff6:	440b      	add	r3, r1
   1aff8:	6053      	str	r3, [r2, #4]
            if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   1affa:	6892      	ldr	r2, [r2, #8]
   1affc:	4293      	cmp	r3, r2
   1affe:	d112      	bne.n	1b026 <img_mgmt_upload+0x152>
                img_mgmt_dfu_pending();
   1b000:	f7ff ff5e 	bl	1aec0 <img_mgmt_dfu_pending>
                cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_COMPLETE;
   1b004:	2302      	movs	r3, #2
   1b006:	93ef      	str	r3, [sp, #956]	; 0x3bc
                g_img_mgmt_state.area_id = -1;
   1b008:	4b39      	ldr	r3, [pc, #228]	; (1b0f0 <img_mgmt_upload+0x21c>)
   1b00a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b00e:	601a      	str	r2, [r3, #0]
   1b010:	e009      	b.n	1b026 <img_mgmt_upload+0x152>
        img_mgmt_dfu_stopped();
   1b012:	f7ff ff15 	bl	1ae40 <img_mgmt_dfu_stopped>
        return rc;
   1b016:	e055      	b.n	1b0c4 <img_mgmt_upload+0x1f0>
        return img_mgmt_upload_good_rsp(ctxt);
   1b018:	4628      	mov	r0, r5
   1b01a:	f7ff fe13 	bl	1ac44 <img_mgmt_upload_good_rsp>
   1b01e:	4604      	mov	r4, r0
   1b020:	e050      	b.n	1b0c4 <img_mgmt_upload+0x1f0>
            errstr = img_mgmt_err_str_app_reject;
   1b022:	2300      	movs	r3, #0
   1b024:	9307      	str	r3, [sp, #28]
    img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   1b026:	985e      	ldr	r0, [sp, #376]	; 0x178
   1b028:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
   1b02a:	4b31      	ldr	r3, [pc, #196]	; (1b0f0 <img_mgmt_upload+0x21c>)
   1b02c:	6859      	ldr	r1, [r3, #4]
   1b02e:	689b      	ldr	r3, [r3, #8]
   1b030:	4302      	orrs	r2, r0
   1b032:	bf0c      	ite	eq
   1b034:	2001      	moveq	r0, #1
   1b036:	2000      	movne	r0, #0
   1b038:	4622      	mov	r2, r4
   1b03a:	4299      	cmp	r1, r3
   1b03c:	bf14      	ite	ne
   1b03e:	2100      	movne	r1, #0
   1b040:	2101      	moveq	r1, #1
   1b042:	f7ff fec3 	bl	1adcc <img_mgmt_upload_log>
    mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   1b046:	abef      	add	r3, sp, #956	; 0x3bc
   1b048:	2201      	movs	r2, #1
   1b04a:	4611      	mov	r1, r2
   1b04c:	2002      	movs	r0, #2
   1b04e:	f001 f879 	bl	1c144 <mgmt_evt>
    if (rc != 0) {
   1b052:	bb9c      	cbnz	r4, 1b0bc <img_mgmt_upload+0x1e8>
    return img_mgmt_upload_good_rsp(ctxt);
   1b054:	4628      	mov	r0, r5
   1b056:	f7ff fdf5 	bl	1ac44 <img_mgmt_upload_good_rsp>
   1b05a:	4604      	mov	r4, r0
   1b05c:	e032      	b.n	1b0c4 <img_mgmt_upload+0x1f0>
        g_img_mgmt_state.off = 0;
   1b05e:	4f24      	ldr	r7, [pc, #144]	; (1b0f0 <img_mgmt_upload+0x21c>)
   1b060:	f04f 0900 	mov.w	r9, #0
   1b064:	f8c7 9004 	str.w	r9, [r7, #4]
        img_mgmt_dfu_started();
   1b068:	f7ff ff20 	bl	1aeac <img_mgmt_dfu_started>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   1b06c:	f8cd 93bc 	str.w	r9, [sp, #956]	; 0x3bc
        g_img_mgmt_state.data_sha_len = req.data_sha_len;
   1b070:	f8dd 818c 	ldr.w	r8, [sp, #396]	; 0x18c
   1b074:	f887 800c 	strb.w	r8, [r7, #12]
        memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   1b078:	4642      	mov	r2, r8
   1b07a:	a9e4      	add	r1, sp, #912	; 0x390
   1b07c:	f107 000d 	add.w	r0, r7, #13
   1b080:	f7fb fd14 	bl	16aac <memcpy>
        memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   1b084:	f108 0008 	add.w	r0, r8, #8
   1b088:	4438      	add	r0, r7
   1b08a:	f1c8 0220 	rsb	r2, r8, #32
   1b08e:	4649      	mov	r1, r9
   1b090:	3005      	adds	r0, #5
   1b092:	f7fb fd30 	bl	16af6 <memset>
        if (action.erase) {
   1b096:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1b09a:	2b00      	cmp	r3, #0
   1b09c:	d096      	beq.n	1afcc <img_mgmt_upload+0xf8>
            rc = img_mgmt_impl_erase_image_data(0, req.size);
   1b09e:	9960      	ldr	r1, [sp, #384]	; 0x180
   1b0a0:	4648      	mov	r0, r9
   1b0a2:	f000 fbe2 	bl	1b86a <img_mgmt_impl_erase_image_data>
            if (rc != 0) {
   1b0a6:	4604      	mov	r4, r0
   1b0a8:	2800      	cmp	r0, #0
   1b0aa:	d08f      	beq.n	1afcc <img_mgmt_upload+0xf8>
                errstr = img_mgmt_err_str_flash_erase_failed;
   1b0ac:	f8cd 901c 	str.w	r9, [sp, #28]
                rc = MGMT_ERR_EUNKNOWN;
   1b0b0:	2401      	movs	r4, #1
                goto end;
   1b0b2:	e7b8      	b.n	1b026 <img_mgmt_upload+0x152>
            errstr = img_mgmt_err_str_flash_write_failed;
   1b0b4:	2300      	movs	r3, #0
   1b0b6:	9307      	str	r3, [sp, #28]
            rc = MGMT_ERR_EUNKNOWN;
   1b0b8:	2401      	movs	r4, #1
            goto end;
   1b0ba:	e7b4      	b.n	1b026 <img_mgmt_upload+0x152>
        img_mgmt_dfu_stopped();
   1b0bc:	f7ff fec0 	bl	1ae40 <img_mgmt_dfu_stopped>
        return img_mgmt_error_rsp(ctxt, rc, errstr);
   1b0c0:	e000      	b.n	1b0c4 <img_mgmt_upload+0x1f0>
        return MGMT_ERR_EINVAL;
   1b0c2:	2403      	movs	r4, #3
}
   1b0c4:	4620      	mov	r0, r4
   1b0c6:	f50d 7d71 	add.w	sp, sp, #964	; 0x3c4
   1b0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b0ce:	bf00      	nop
   1b0d0:	00034588 	.word	0x00034588
   1b0d4:	00034590 	.word	0x00034590
   1b0d8:	00034598 	.word	0x00034598
   1b0dc:	00034584 	.word	0x00034584
   1b0e0:	0003459c 	.word	0x0003459c
   1b0e4:	000345a0 	.word	0x000345a0
   1b0e8:	10001e78 	.word	0x10001e78
   1b0ec:	10001e74 	.word	0x10001e74
   1b0f0:	10001e40 	.word	0x10001e40

0001b0f4 <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
   1b0f4:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   1b0f6:	4b03      	ldr	r3, [pc, #12]	; (1b104 <img_mgmt_dfu_confirmed+0x10>)
   1b0f8:	681b      	ldr	r3, [r3, #0]
   1b0fa:	b113      	cbz	r3, 1b102 <img_mgmt_dfu_confirmed+0xe>
   1b0fc:	68db      	ldr	r3, [r3, #12]
   1b0fe:	b103      	cbz	r3, 1b102 <img_mgmt_dfu_confirmed+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   1b100:	4798      	blx	r3
    }
}
   1b102:	bd08      	pop	{r3, pc}
   1b104:	10001e70 	.word	0x10001e70

0001b108 <img_mgmt_my_version>:
}


int
img_mgmt_my_version(struct image_version *ver)
{
   1b108:	b508      	push	{r3, lr}
   1b10a:	4601      	mov	r1, r0
    return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   1b10c:	2300      	movs	r3, #0
   1b10e:	461a      	mov	r2, r3
   1b110:	4802      	ldr	r0, [pc, #8]	; (1b11c <img_mgmt_my_version+0x14>)
   1b112:	6800      	ldr	r0, [r0, #0]
   1b114:	f7ff fdbc 	bl	1ac90 <img_mgmt_read_info>
}
   1b118:	bd08      	pop	{r3, pc}
   1b11a:	bf00      	nop
   1b11c:	10003c50 	.word	0x10003c50

0001b120 <img_mgmt_register_group>:

void
img_mgmt_register_group(void)
{
   1b120:	b508      	push	{r3, lr}
    mgmt_register_group(&img_mgmt_group);
   1b122:	4802      	ldr	r0, [pc, #8]	; (1b12c <img_mgmt_register_group+0xc>)
   1b124:	f000 ffaa 	bl	1c07c <mgmt_register_group>
}
   1b128:	bd08      	pop	{r3, pc}
   1b12a:	bf00      	nop
   1b12c:	10000290 	.word	0x10000290

0001b130 <img_mgmt_state_flags>:
/**
 * Collects information about the specified image slot.
 */
uint8_t
img_mgmt_state_flags(int query_slot)
{
   1b130:	b510      	push	{r4, lr}
   1b132:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = img_mgmt_impl_swap_type(query_slot);
   1b134:	f000 fbae 	bl	1b894 <img_mgmt_impl_swap_type>
    switch (swap_type) {
   1b138:	2803      	cmp	r0, #3
   1b13a:	d825      	bhi.n	1b188 <img_mgmt_state_flags+0x58>
   1b13c:	e8df f000 	tbb	[pc, r0]
   1b140:	1c140c02 	.word	0x1c140c02
    case IMG_MGMT_SWAP_TYPE_NONE:
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b144:	4b14      	ldr	r3, [pc, #80]	; (1b198 <img_mgmt_state_flags+0x68>)
   1b146:	681b      	ldr	r3, [r3, #0]
   1b148:	42a3      	cmp	r3, r4
   1b14a:	d01f      	beq.n	1b18c <img_mgmt_state_flags+0x5c>
    flags = 0;
   1b14c:	2000      	movs	r0, #0
        break;
    }

    /* Slot 0 is always active. */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b14e:	4b12      	ldr	r3, [pc, #72]	; (1b198 <img_mgmt_state_flags+0x68>)
   1b150:	681b      	ldr	r3, [r3, #0]
   1b152:	42a3      	cmp	r3, r4
   1b154:	d01c      	beq.n	1b190 <img_mgmt_state_flags+0x60>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
    }

    return flags;
}
   1b156:	bd10      	pop	{r4, pc}
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b158:	4b0f      	ldr	r3, [pc, #60]	; (1b198 <img_mgmt_state_flags+0x68>)
   1b15a:	681b      	ldr	r3, [r3, #0]
   1b15c:	42a3      	cmp	r3, r4
   1b15e:	d001      	beq.n	1b164 <img_mgmt_state_flags+0x34>
            flags |= IMG_MGMT_STATE_F_PENDING;
   1b160:	2001      	movs	r0, #1
   1b162:	e7f4      	b.n	1b14e <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1b164:	2002      	movs	r0, #2
   1b166:	e7f2      	b.n	1b14e <img_mgmt_state_flags+0x1e>
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b168:	4b0b      	ldr	r3, [pc, #44]	; (1b198 <img_mgmt_state_flags+0x68>)
   1b16a:	681b      	ldr	r3, [r3, #0]
   1b16c:	42a3      	cmp	r3, r4
   1b16e:	d001      	beq.n	1b174 <img_mgmt_state_flags+0x44>
            flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   1b170:	2009      	movs	r0, #9
   1b172:	e7ec      	b.n	1b14e <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1b174:	2002      	movs	r0, #2
   1b176:	e7ea      	b.n	1b14e <img_mgmt_state_flags+0x1e>
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1b178:	4b07      	ldr	r3, [pc, #28]	; (1b198 <img_mgmt_state_flags+0x68>)
   1b17a:	681b      	ldr	r3, [r3, #0]
   1b17c:	42a3      	cmp	r3, r4
   1b17e:	d001      	beq.n	1b184 <img_mgmt_state_flags+0x54>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1b180:	2002      	movs	r0, #2
   1b182:	e7e4      	b.n	1b14e <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   1b184:	2004      	movs	r0, #4
   1b186:	e7e2      	b.n	1b14e <img_mgmt_state_flags+0x1e>
    swap_type = img_mgmt_impl_swap_type(query_slot);
   1b188:	2000      	movs	r0, #0
   1b18a:	e7e0      	b.n	1b14e <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   1b18c:	2006      	movs	r0, #6
   1b18e:	e7de      	b.n	1b14e <img_mgmt_state_flags+0x1e>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
   1b190:	f040 0004 	orr.w	r0, r0, #4
   1b194:	e7df      	b.n	1b156 <img_mgmt_state_flags+0x26>
   1b196:	bf00      	nop
   1b198:	10003c50 	.word	0x10003c50

0001b19c <img_mgmt_state_any_pending>:
 * Indicates whether any image slot is pending (i.e., whether a test swap will
 * happen on the next reboot.
 */
int
img_mgmt_state_any_pending(void)
{
   1b19c:	b508      	push	{r3, lr}
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   1b19e:	2000      	movs	r0, #0
   1b1a0:	f7ff ffc6 	bl	1b130 <img_mgmt_state_flags>
   1b1a4:	f010 0f01 	tst.w	r0, #1
   1b1a8:	d001      	beq.n	1b1ae <img_mgmt_state_any_pending+0x12>
   1b1aa:	2001      	movs	r0, #1
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
}
   1b1ac:	bd08      	pop	{r3, pc}
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   1b1ae:	2001      	movs	r0, #1
   1b1b0:	f7ff ffbe 	bl	1b130 <img_mgmt_state_flags>
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   1b1b4:	f010 0f01 	tst.w	r0, #1
   1b1b8:	d101      	bne.n	1b1be <img_mgmt_state_any_pending+0x22>
   1b1ba:	2000      	movs	r0, #0
   1b1bc:	e7f6      	b.n	1b1ac <img_mgmt_state_any_pending+0x10>
   1b1be:	2001      	movs	r0, #1
   1b1c0:	e7f4      	b.n	1b1ac <img_mgmt_state_any_pending+0x10>

0001b1c2 <img_mgmt_slot_in_use>:
 * Indicates whether the specified slot has any flags.  If no flags are set,
 * the slot can be freely erased.
 */
int
img_mgmt_slot_in_use(int slot)
{
   1b1c2:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = img_mgmt_state_flags(slot);
   1b1c4:	f7ff ffb4 	bl	1b130 <img_mgmt_state_flags>
    return state_flags & IMG_MGMT_STATE_F_ACTIVE       ||
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   1b1c8:	f010 0f06 	tst.w	r0, #6
   1b1cc:	d104      	bne.n	1b1d8 <img_mgmt_slot_in_use+0x16>
   1b1ce:	f010 0f01 	tst.w	r0, #1
   1b1d2:	d003      	beq.n	1b1dc <img_mgmt_slot_in_use+0x1a>
   1b1d4:	2001      	movs	r0, #1
   1b1d6:	e000      	b.n	1b1da <img_mgmt_slot_in_use+0x18>
   1b1d8:	2001      	movs	r0, #1
           state_flags & IMG_MGMT_STATE_F_PENDING;
}
   1b1da:	bd08      	pop	{r3, pc}
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   1b1dc:	2000      	movs	r0, #0
   1b1de:	e7fc      	b.n	1b1da <img_mgmt_slot_in_use+0x18>

0001b1e0 <img_mgmt_state_set_pending>:
 * argument is specified, the system doesn't require a confirm after the swap
 * occurs.
 */
int
img_mgmt_state_set_pending(int slot, int permanent)
{
   1b1e0:	b570      	push	{r4, r5, r6, lr}
   1b1e2:	b088      	sub	sp, #32
   1b1e4:	4604      	mov	r4, r0
   1b1e6:	460d      	mov	r5, r1
    uint8_t hash[IMAGE_HASH_LEN];
    uint8_t state_flags;
    const uint8_t *hashp;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   1b1e8:	f7ff ffa2 	bl	1b130 <img_mgmt_state_flags>

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   1b1ec:	f010 0f02 	tst.w	r0, #2
   1b1f0:	d000      	beq.n	1b1f4 <img_mgmt_state_set_pending+0x14>
   1b1f2:	b9b4      	cbnz	r4, 1b222 <img_mgmt_state_set_pending+0x42>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = img_mgmt_impl_write_pending(slot, permanent);
   1b1f4:	1e29      	subs	r1, r5, #0
   1b1f6:	bf18      	it	ne
   1b1f8:	2101      	movne	r1, #1
   1b1fa:	4620      	mov	r0, r4
   1b1fc:	f000 fab0 	bl	1b760 <img_mgmt_impl_write_pending>
    if (rc != 0) {
   1b200:	4606      	mov	r6, r0
   1b202:	b980      	cbnz	r0, 1b226 <img_mgmt_state_set_pending+0x46>
        rc = MGMT_ERR_EUNKNOWN;
    }

done:
    /* Log the image hash if we know it. */
    if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   1b204:	2300      	movs	r3, #0
   1b206:	466a      	mov	r2, sp
   1b208:	4619      	mov	r1, r3
   1b20a:	4620      	mov	r0, r4
   1b20c:	f7ff fd40 	bl	1ac90 <img_mgmt_read_info>
   1b210:	b158      	cbz	r0, 1b22a <img_mgmt_state_set_pending+0x4a>
        hashp = NULL;
   1b212:	2100      	movs	r1, #0
    } else {
        hashp = hash;
    }

    if (permanent) {
   1b214:	b15d      	cbz	r5, 1b22e <img_mgmt_state_set_pending+0x4e>
        (void) img_mgmt_impl_log_confirm(rc, hashp);
   1b216:	4630      	mov	r0, r6
   1b218:	f000 fbac 	bl	1b974 <img_mgmt_impl_log_confirm>
    } else {
        (void) img_mgmt_impl_log_pending(rc, hashp);
    }

    return rc;
}
   1b21c:	4630      	mov	r0, r6
   1b21e:	b008      	add	sp, #32
   1b220:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EBADSTATE;
   1b222:	2606      	movs	r6, #6
   1b224:	e7ee      	b.n	1b204 <img_mgmt_state_set_pending+0x24>
        rc = MGMT_ERR_EUNKNOWN;
   1b226:	2601      	movs	r6, #1
   1b228:	e7ec      	b.n	1b204 <img_mgmt_state_set_pending+0x24>
        hashp = hash;
   1b22a:	4669      	mov	r1, sp
   1b22c:	e7f2      	b.n	1b214 <img_mgmt_state_set_pending+0x34>
        (void) img_mgmt_impl_log_pending(rc, hashp);
   1b22e:	4630      	mov	r0, r6
   1b230:	f000 fb96 	bl	1b960 <img_mgmt_impl_log_pending>
    return rc;
   1b234:	e7f2      	b.n	1b21c <img_mgmt_state_set_pending+0x3c>

0001b236 <img_mgmt_state_confirm>:
 * Confirms the current image state.  Prevents a fallback from occurring on the
 * next reboot if the active image is currently being tested.
 */
int
img_mgmt_state_confirm(void)
{
   1b236:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (img_mgmt_state_any_pending()) {
   1b238:	f7ff ffb0 	bl	1b19c <img_mgmt_state_any_pending>
   1b23c:	b128      	cbz	r0, 1b24a <img_mgmt_state_confirm+0x14>
        rc = MGMT_ERR_EBADSTATE;
   1b23e:	2406      	movs	r4, #6
        rc = MGMT_ERR_EUNKNOWN;
    }

     img_mgmt_dfu_confirmed();
err:
    return img_mgmt_impl_log_confirm(rc, NULL);
   1b240:	2100      	movs	r1, #0
   1b242:	4620      	mov	r0, r4
   1b244:	f000 fb96 	bl	1b974 <img_mgmt_impl_log_confirm>
}
   1b248:	bd10      	pop	{r4, pc}
    rc = img_mgmt_impl_write_confirmed();
   1b24a:	f000 fac7 	bl	1b7dc <img_mgmt_impl_write_confirmed>
    if (rc != 0) {
   1b24e:	4604      	mov	r4, r0
   1b250:	b100      	cbz	r0, 1b254 <img_mgmt_state_confirm+0x1e>
        rc = MGMT_ERR_EUNKNOWN;
   1b252:	2401      	movs	r4, #1
     img_mgmt_dfu_confirmed();
   1b254:	f7ff ff4e 	bl	1b0f4 <img_mgmt_dfu_confirmed>
   1b258:	e7f2      	b.n	1b240 <img_mgmt_state_confirm+0xa>
	...

0001b25c <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   1b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b25e:	b09b      	sub	sp, #108	; 0x6c
   1b260:	4607      	mov	r7, r0
   1b262:	2206      	movs	r2, #6
   1b264:	495b      	ldr	r1, [pc, #364]	; (1b3d4 <img_mgmt_state_read+0x178>)
   1b266:	f013 fb89 	bl	2e97c <cbor_encode_text_string>
   1b26a:	4604      	mov	r4, r0
    int i;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "images");

    err |= cbor_encoder_create_array(&ctxt->encoder, &images,
   1b26c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b270:	a905      	add	r1, sp, #20
   1b272:	4638      	mov	r0, r7
   1b274:	f013 fb89 	bl	2e98a <cbor_encoder_create_array>
   1b278:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);

    for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   1b27a:	2500      	movs	r5, #0
   1b27c:	e000      	b.n	1b280 <img_mgmt_state_read+0x24>
   1b27e:	3501      	adds	r5, #1
   1b280:	2d01      	cmp	r5, #1
   1b282:	f300 808e 	bgt.w	1b3a2 <img_mgmt_state_read+0x146>
        rc = img_mgmt_read_info(i, &ver, hash, &flags);
   1b286:	466b      	mov	r3, sp
   1b288:	aa0b      	add	r2, sp, #44	; 0x2c
   1b28a:	a909      	add	r1, sp, #36	; 0x24
   1b28c:	4628      	mov	r0, r5
   1b28e:	f7ff fcff 	bl	1ac90 <img_mgmt_read_info>
        if (rc != 0) {
   1b292:	2800      	cmp	r0, #0
   1b294:	d1f3      	bne.n	1b27e <img_mgmt_state_read+0x22>
            continue;
        }

        state_flags = img_mgmt_state_flags(i);
   1b296:	4628      	mov	r0, r5
   1b298:	f7ff ff4a 	bl	1b130 <img_mgmt_state_flags>
   1b29c:	4606      	mov	r6, r0

        err |= cbor_encoder_create_map(&images, &image,
   1b29e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b2a2:	a901      	add	r1, sp, #4
   1b2a4:	a805      	add	r0, sp, #20
   1b2a6:	f013 fb75 	bl	2e994 <cbor_encoder_create_map>
   1b2aa:	4304      	orrs	r4, r0
   1b2ac:	2204      	movs	r2, #4
   1b2ae:	494a      	ldr	r1, [pc, #296]	; (1b3d8 <img_mgmt_state_read+0x17c>)
   1b2b0:	eb0d 0002 	add.w	r0, sp, r2
   1b2b4:	f013 fb62 	bl	2e97c <cbor_encode_text_string>

#if IMG_MGMT_UPDATABLE_IMAGE_NUMBER > 1
        err |= cbor_encode_text_stringz(&image, "image");
        err |= cbor_encode_int(&image, i >> 1);
#endif
        err |= cbor_encode_text_stringz(&image, "slot");
   1b2b8:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&image, i % 2);
   1b2ba:	2d00      	cmp	r5, #0
   1b2bc:	f005 0201 	and.w	r2, r5, #1
   1b2c0:	bfb8      	it	lt
   1b2c2:	4252      	neglt	r2, r2
   1b2c4:	17d3      	asrs	r3, r2, #31
   1b2c6:	a801      	add	r0, sp, #4
   1b2c8:	f013 fae3 	bl	2e892 <cbor_encode_int>
   1b2cc:	4304      	orrs	r4, r0
   1b2ce:	2207      	movs	r2, #7
   1b2d0:	4942      	ldr	r1, [pc, #264]	; (1b3dc <img_mgmt_state_read+0x180>)
   1b2d2:	a801      	add	r0, sp, #4
   1b2d4:	f013 fb52 	bl	2e97c <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "version");
   1b2d8:	4304      	orrs	r4, r0
        img_mgmt_ver_str(&ver, vers_str);
   1b2da:	a913      	add	r1, sp, #76	; 0x4c
   1b2dc:	a809      	add	r0, sp, #36	; 0x24
   1b2de:	f000 f8df 	bl	1b4a0 <img_mgmt_ver_str>
   1b2e2:	a813      	add	r0, sp, #76	; 0x4c
   1b2e4:	f7fb fc2f 	bl	16b46 <strlen>
   1b2e8:	4602      	mov	r2, r0
   1b2ea:	a913      	add	r1, sp, #76	; 0x4c
   1b2ec:	a801      	add	r0, sp, #4
   1b2ee:	f013 fb45 	bl	2e97c <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&image, vers_str);
   1b2f2:	4304      	orrs	r4, r0
   1b2f4:	2204      	movs	r2, #4
   1b2f6:	493a      	ldr	r1, [pc, #232]	; (1b3e0 <img_mgmt_state_read+0x184>)
   1b2f8:	eb0d 0002 	add.w	r0, sp, r2
   1b2fc:	f013 fb3e 	bl	2e97c <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "hash");
   1b300:	4304      	orrs	r4, r0
        err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   1b302:	2220      	movs	r2, #32
   1b304:	a90b      	add	r1, sp, #44	; 0x2c
   1b306:	a801      	add	r0, sp, #4
   1b308:	f013 fb31 	bl	2e96e <cbor_encode_byte_string>
   1b30c:	4304      	orrs	r4, r0
   1b30e:	2208      	movs	r2, #8
   1b310:	4934      	ldr	r1, [pc, #208]	; (1b3e4 <img_mgmt_state_read+0x188>)
   1b312:	a801      	add	r0, sp, #4
   1b314:	f013 fb32 	bl	2e97c <cbor_encode_text_string>

        if (!IMG_MGMT_FRUGAL_LIST || !(flags & IMAGE_F_NON_BOOTABLE)) {
            err |= cbor_encode_text_stringz(&image, "bootable");
   1b318:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1b31a:	9b00      	ldr	r3, [sp, #0]
   1b31c:	f013 0f10 	tst.w	r3, #16
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b320:	bf14      	ite	ne
   1b322:	2114      	movne	r1, #20
   1b324:	2115      	moveq	r1, #21
   1b326:	a801      	add	r0, sp, #4
   1b328:	f013 faf2 	bl	2e910 <cbor_encode_simple_value>
   1b32c:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b32e:	2207      	movs	r2, #7
   1b330:	492d      	ldr	r1, [pc, #180]	; (1b3e8 <img_mgmt_state_read+0x18c>)
   1b332:	a801      	add	r0, sp, #4
   1b334:	f013 fb22 	bl	2e97c <cbor_encode_text_string>
        }

        if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_PENDING)) {
            err |= cbor_encode_text_stringz(&image, "pending");
   1b338:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b33a:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b33e:	3114      	adds	r1, #20
   1b340:	a801      	add	r0, sp, #4
   1b342:	f013 fae5 	bl	2e910 <cbor_encode_simple_value>
   1b346:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b348:	2209      	movs	r2, #9
   1b34a:	4928      	ldr	r1, [pc, #160]	; (1b3ec <img_mgmt_state_read+0x190>)
   1b34c:	a801      	add	r0, sp, #4
   1b34e:	f013 fb15 	bl	2e97c <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_PENDING);
        }

        if (!IMG_MGMT_FRUGAL_LIST ||
            (state_flags & IMG_MGMT_STATE_F_CONFIRMED)) {
            err |= cbor_encode_text_stringz(&image, "confirmed");
   1b352:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b354:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b358:	3114      	adds	r1, #20
   1b35a:	a801      	add	r0, sp, #4
   1b35c:	f013 fad8 	bl	2e910 <cbor_encode_simple_value>
   1b360:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b362:	2206      	movs	r2, #6
   1b364:	4922      	ldr	r1, [pc, #136]	; (1b3f0 <img_mgmt_state_read+0x194>)
   1b366:	a801      	add	r0, sp, #4
   1b368:	f013 fb08 	bl	2e97c <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_CONFIRMED);
        }

        if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_ACTIVE)) {
            err |= cbor_encode_text_stringz(&image, "active");
   1b36c:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b36e:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b372:	3114      	adds	r1, #20
   1b374:	a801      	add	r0, sp, #4
   1b376:	f013 facb 	bl	2e910 <cbor_encode_simple_value>
   1b37a:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b37c:	2209      	movs	r2, #9
   1b37e:	491d      	ldr	r1, [pc, #116]	; (1b3f4 <img_mgmt_state_read+0x198>)
   1b380:	a801      	add	r0, sp, #4
   1b382:	f013 fafb 	bl	2e97c <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_ACTIVE);
        }

        if (!IMG_MGMT_FRUGAL_LIST ||
            (state_flags & IMG_MGMT_STATE_F_PERMANENT)) {
            err |= cbor_encode_text_stringz(&image, "permanent");
   1b386:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1b388:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1b38c:	3114      	adds	r1, #20
   1b38e:	a801      	add	r0, sp, #4
   1b390:	f013 fabe 	bl	2e910 <cbor_encode_simple_value>
   1b394:	4304      	orrs	r4, r0
                                    state_flags & IMG_MGMT_STATE_F_PERMANENT);
        }

        err |= cbor_encoder_close_container(&images, &image);
   1b396:	a901      	add	r1, sp, #4
   1b398:	a805      	add	r0, sp, #20
   1b39a:	f013 fb10 	bl	2e9be <cbor_encoder_close_container>
   1b39e:	4304      	orrs	r4, r0
   1b3a0:	e76d      	b.n	1b27e <img_mgmt_state_read+0x22>
    }

    err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   1b3a2:	a905      	add	r1, sp, #20
   1b3a4:	4638      	mov	r0, r7
   1b3a6:	f013 fb0a 	bl	2e9be <cbor_encoder_close_container>
   1b3aa:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1b3ac:	220b      	movs	r2, #11
   1b3ae:	4912      	ldr	r1, [pc, #72]	; (1b3f8 <img_mgmt_state_read+0x19c>)
   1b3b0:	4638      	mov	r0, r7
   1b3b2:	f013 fae3 	bl	2e97c <cbor_encode_text_string>

    /* splitStatus is always 0 so in frugal list it is not present at all */
    if (!IMG_MGMT_FRUGAL_LIST) {
        err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   1b3b6:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&ctxt->encoder, 0);
   1b3b8:	2200      	movs	r2, #0
   1b3ba:	2300      	movs	r3, #0
   1b3bc:	4638      	mov	r0, r7
   1b3be:	f013 fa68 	bl	2e892 <cbor_encode_int>
    }

    if (err != 0) {
   1b3c2:	ea54 0300 	orrs.w	r3, r4, r0
   1b3c6:	d102      	bne.n	1b3ce <img_mgmt_state_read+0x172>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   1b3c8:	2000      	movs	r0, #0
}
   1b3ca:	b01b      	add	sp, #108	; 0x6c
   1b3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1b3ce:	2002      	movs	r0, #2
   1b3d0:	e7fb      	b.n	1b3ca <img_mgmt_state_read+0x16e>
   1b3d2:	bf00      	nop
   1b3d4:	000345d8 	.word	0x000345d8
   1b3d8:	000345e0 	.word	0x000345e0
   1b3dc:	000345e8 	.word	0x000345e8
   1b3e0:	00034518 	.word	0x00034518
   1b3e4:	00034544 	.word	0x00034544
   1b3e8:	0003455c 	.word	0x0003455c
   1b3ec:	00034550 	.word	0x00034550
   1b3f0:	00034538 	.word	0x00034538
   1b3f4:	000345f0 	.word	0x000345f0
   1b3f8:	000345fc 	.word	0x000345fc

0001b3fc <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   1b3fc:	b510      	push	{r4, lr}
   1b3fe:	b0b0      	sub	sp, #192	; 0xc0
   1b400:	4604      	mov	r4, r0
    size_t hash_len;
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1b402:	228c      	movs	r2, #140	; 0x8c
   1b404:	2100      	movs	r1, #0
   1b406:	a801      	add	r0, sp, #4
   1b408:	f7fb fb75 	bl	16af6 <memset>
   1b40c:	4b21      	ldr	r3, [pc, #132]	; (1b494 <img_mgmt_state_write+0x98>)
   1b40e:	9300      	str	r3, [sp, #0]
   1b410:	2303      	movs	r3, #3
   1b412:	f88d 3004 	strb.w	r3, [sp, #4]
   1b416:	ab27      	add	r3, sp, #156	; 0x9c
   1b418:	9302      	str	r3, [sp, #8]
   1b41a:	ab26      	add	r3, sp, #152	; 0x98
   1b41c:	9303      	str	r3, [sp, #12]
   1b41e:	2321      	movs	r3, #33	; 0x21
   1b420:	930a      	str	r3, [sp, #40]	; 0x28
   1b422:	4b1d      	ldr	r3, [pc, #116]	; (1b498 <img_mgmt_state_write+0x9c>)
   1b424:	930c      	str	r3, [sp, #48]	; 0x30
   1b426:	2305      	movs	r3, #5
   1b428:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1b42c:	f10d 0397 	add.w	r3, sp, #151	; 0x97
   1b430:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    hash_len = 0;
   1b432:	2300      	movs	r3, #0
   1b434:	9326      	str	r3, [sp, #152]	; 0x98
    rc = cbor_read_object(&ctxt->it, write_attr);
   1b436:	4669      	mov	r1, sp
   1b438:	f104 001c 	add.w	r0, r4, #28
   1b43c:	f7ff fbdf 	bl	1abfe <cbor_read_object>
    if (rc != 0) {
   1b440:	bb18      	cbnz	r0, 1b48a <img_mgmt_state_write+0x8e>
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1b442:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b444:	b993      	cbnz	r3, 1b46c <img_mgmt_state_write+0x70>
        if (confirm) {
   1b446:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   1b44a:	b303      	cbz	r3, 1b48e <img_mgmt_state_write+0x92>
            slot = IMG_MGMT_BOOT_CURR_SLOT;
   1b44c:	4b13      	ldr	r3, [pc, #76]	; (1b49c <img_mgmt_state_write+0xa0>)
   1b44e:	6818      	ldr	r0, [r3, #0]
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
   1b450:	4b12      	ldr	r3, [pc, #72]	; (1b49c <img_mgmt_state_write+0xa0>)
   1b452:	681b      	ldr	r3, [r3, #0]
   1b454:	4283      	cmp	r3, r0
   1b456:	d102      	bne.n	1b45e <img_mgmt_state_write+0x62>
   1b458:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   1b45c:	b973      	cbnz	r3, 1b47c <img_mgmt_state_write+0x80>
        /* Confirm current setup. */
        rc = img_mgmt_state_confirm();
    } else {
        rc = img_mgmt_state_set_pending(slot, confirm);
   1b45e:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   1b462:	f7ff febd 	bl	1b1e0 <img_mgmt_state_set_pending>
    }
    if (rc != 0) {
   1b466:	b160      	cbz	r0, 1b482 <img_mgmt_state_write+0x86>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b468:	b030      	add	sp, #192	; 0xc0
   1b46a:	bd10      	pop	{r4, pc}
        slot = img_mgmt_find_by_hash(hash, NULL);
   1b46c:	2100      	movs	r1, #0
   1b46e:	a827      	add	r0, sp, #156	; 0x9c
   1b470:	f7ff fcc7 	bl	1ae02 <img_mgmt_find_by_hash>
        if (slot < 0) {
   1b474:	2800      	cmp	r0, #0
   1b476:	daeb      	bge.n	1b450 <img_mgmt_state_write+0x54>
            return MGMT_ERR_EINVAL;
   1b478:	2003      	movs	r0, #3
   1b47a:	e7f5      	b.n	1b468 <img_mgmt_state_write+0x6c>
        rc = img_mgmt_state_confirm();
   1b47c:	f7ff fedb 	bl	1b236 <img_mgmt_state_confirm>
   1b480:	e7f1      	b.n	1b466 <img_mgmt_state_write+0x6a>
    rc = img_mgmt_state_read(ctxt);
   1b482:	4620      	mov	r0, r4
   1b484:	f7ff feea 	bl	1b25c <img_mgmt_state_read>
    if (rc != 0) {
   1b488:	e7ee      	b.n	1b468 <img_mgmt_state_write+0x6c>
        return MGMT_ERR_EINVAL;
   1b48a:	2003      	movs	r0, #3
   1b48c:	e7ec      	b.n	1b468 <img_mgmt_state_write+0x6c>
            return MGMT_ERR_EINVAL;
   1b48e:	2003      	movs	r0, #3
   1b490:	e7ea      	b.n	1b468 <img_mgmt_state_write+0x6c>
   1b492:	bf00      	nop
   1b494:	00034518 	.word	0x00034518
   1b498:	00034608 	.word	0x00034608
   1b49c:	10003c50 	.word	0x10003c50

0001b4a0 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   1b4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4a4:	4605      	mov	r5, r0
   1b4a6:	460c      	mov	r4, r1
    int off;

    off = 0;

    off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   1b4a8:	460b      	mov	r3, r1
   1b4aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b4ae:	7828      	ldrb	r0, [r5, #0]
   1b4b0:	2100      	movs	r1, #0
   1b4b2:	f000 ffd3 	bl	1c45c <ull_to_s>

    dst[off++] = '.';
   1b4b6:	1c46      	adds	r6, r0, #1
   1b4b8:	f04f 082e 	mov.w	r8, #46	; 0x2e
   1b4bc:	f804 8000 	strb.w	r8, [r4, r0]
    off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   1b4c0:	19a3      	adds	r3, r4, r6
   1b4c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b4c6:	7868      	ldrb	r0, [r5, #1]
   1b4c8:	2100      	movs	r1, #0
   1b4ca:	f000 ffc7 	bl	1c45c <ull_to_s>
   1b4ce:	4406      	add	r6, r0

    dst[off++] = '.';
   1b4d0:	1c77      	adds	r7, r6, #1
   1b4d2:	f804 8006 	strb.w	r8, [r4, r6]
    off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   1b4d6:	19e3      	adds	r3, r4, r7
   1b4d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b4dc:	8868      	ldrh	r0, [r5, #2]
   1b4de:	2100      	movs	r1, #0
   1b4e0:	f000 ffbc 	bl	1c45c <ull_to_s>
   1b4e4:	4407      	add	r7, r0

    if (ver->iv_build_num != 0) {
   1b4e6:	686b      	ldr	r3, [r5, #4]
   1b4e8:	b913      	cbnz	r3, 1b4f0 <img_mgmt_ver_str+0x50>
        dst[off++] = '.';
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
    }

    return 0;
}
   1b4ea:	2000      	movs	r0, #0
   1b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dst[off++] = '.';
   1b4f0:	1c7b      	adds	r3, r7, #1
   1b4f2:	f804 8007 	strb.w	r8, [r4, r7]
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   1b4f6:	4423      	add	r3, r4
   1b4f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b4fc:	6868      	ldr	r0, [r5, #4]
   1b4fe:	2100      	movs	r1, #0
   1b500:	f000 ffac 	bl	1c45c <ull_to_s>
   1b504:	e7f1      	b.n	1b4ea <img_mgmt_ver_str+0x4a>

0001b506 <img_mgmt_vercmp>:
 * @return                       1 if a > b
 */
static int
img_mgmt_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1b506:	7802      	ldrb	r2, [r0, #0]
   1b508:	780b      	ldrb	r3, [r1, #0]
   1b50a:	429a      	cmp	r2, r3
   1b50c:	d30c      	bcc.n	1b528 <img_mgmt_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1b50e:	d80e      	bhi.n	1b52e <img_mgmt_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1b510:	7842      	ldrb	r2, [r0, #1]
   1b512:	784b      	ldrb	r3, [r1, #1]
   1b514:	429a      	cmp	r2, r3
   1b516:	d30c      	bcc.n	1b532 <img_mgmt_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   1b518:	d80e      	bhi.n	1b538 <img_mgmt_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   1b51a:	8842      	ldrh	r2, [r0, #2]
   1b51c:	884b      	ldrh	r3, [r1, #2]
   1b51e:	429a      	cmp	r2, r3
   1b520:	d30c      	bcc.n	1b53c <img_mgmt_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1b522:	d80e      	bhi.n	1b542 <img_mgmt_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1b524:	2000      	movs	r0, #0
   1b526:	4770      	bx	lr
        return -1;
   1b528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b52c:	4770      	bx	lr
        return 1;
   1b52e:	2001      	movs	r0, #1
   1b530:	4770      	bx	lr
        return -1;
   1b532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b536:	4770      	bx	lr
        return 1;
   1b538:	2001      	movs	r0, #1
   1b53a:	4770      	bx	lr
        return -1;
   1b53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b540:	4770      	bx	lr
        return 1;
   1b542:	2001      	movs	r0, #1
}
   1b544:	4770      	bx	lr

0001b546 <img_mgmt_find_best_area_id>:
{
   1b546:	b530      	push	{r4, r5, lr}
   1b548:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   1b54a:	2400      	movs	r4, #0
    int best = -1;
   1b54c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1b550:	e000      	b.n	1b554 <img_mgmt_find_best_area_id+0xe>
   1b552:	3401      	adds	r4, #1
   1b554:	2c01      	cmp	r4, #1
   1b556:	dc10      	bgt.n	1b57a <img_mgmt_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   1b558:	2300      	movs	r3, #0
   1b55a:	461a      	mov	r2, r3
   1b55c:	4669      	mov	r1, sp
   1b55e:	4620      	mov	r0, r4
   1b560:	f7ff fb96 	bl	1ac90 <img_mgmt_read_info>
        if (rc < 0) {
   1b564:	2800      	cmp	r0, #0
   1b566:	dbf4      	blt.n	1b552 <img_mgmt_find_best_area_id+0xc>
        if (rc == 0) {
   1b568:	b930      	cbnz	r0, 1b578 <img_mgmt_find_best_area_id+0x32>
            if (img_mgmt_slot_in_use(i)) {
   1b56a:	4620      	mov	r0, r4
   1b56c:	f7ff fe29 	bl	1b1c2 <img_mgmt_slot_in_use>
   1b570:	2800      	cmp	r0, #0
   1b572:	d1ee      	bne.n	1b552 <img_mgmt_find_best_area_id+0xc>
                best = i;
   1b574:	4625      	mov	r5, r4
   1b576:	e7ec      	b.n	1b552 <img_mgmt_find_best_area_id+0xc>
        best = i;
   1b578:	4625      	mov	r5, r4
    if (best >= 0) {
   1b57a:	2d00      	cmp	r5, #0
   1b57c:	da02      	bge.n	1b584 <img_mgmt_find_best_area_id+0x3e>
}
   1b57e:	4628      	mov	r0, r5
   1b580:	b003      	add	sp, #12
   1b582:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1b584:	4628      	mov	r0, r5
   1b586:	f7fd fb1a 	bl	18bbe <flash_area_id_from_image_slot>
   1b58a:	4605      	mov	r5, r0
    return best;
   1b58c:	e7f7      	b.n	1b57e <img_mgmt_find_best_area_id+0x38>
	...

0001b590 <img_mgmt_impl_upload_inspect>:
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
                             struct img_mgmt_upload_action *action,
                             const char **errstr)
{
   1b590:	b570      	push	{r4, r5, r6, lr}
   1b592:	b084      	sub	sp, #16
   1b594:	4605      	mov	r5, r0
   1b596:	460c      	mov	r4, r1
   1b598:	4616      	mov	r6, r2
    struct image_version cur_ver;
    uint8_t rem_bytes;
    bool empty;
    int rc;

    memset(action, 0, sizeof *action);
   1b59a:	2300      	movs	r3, #0
   1b59c:	600b      	str	r3, [r1, #0]
   1b59e:	604b      	str	r3, [r1, #4]
   1b5a0:	608b      	str	r3, [r1, #8]
   1b5a2:	60cb      	str	r3, [r1, #12]
   1b5a4:	610b      	str	r3, [r1, #16]
   1b5a6:	614b      	str	r3, [r1, #20]

    if (req->off == -1) {
   1b5a8:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   1b5ac:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b5b0:	bf08      	it	eq
   1b5b2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1b5b6:	d03e      	beq.n	1b636 <img_mgmt_impl_upload_inspect+0xa6>
        /* Request did not include an `off` field. */
        *errstr = img_mgmt_err_str_hdr_malformed;
        return MGMT_ERR_EINVAL;
    }

    if (req->off == 0) {
   1b5b8:	ea50 0301 	orrs.w	r3, r0, r1
   1b5bc:	d167      	bne.n	1b68e <img_mgmt_impl_upload_inspect+0xfe>
        /* First upload chunk. */
        if (req->data_len < sizeof(struct image_header)) {
   1b5be:	69ab      	ldr	r3, [r5, #24]
   1b5c0:	2b1f      	cmp	r3, #31
   1b5c2:	d93b      	bls.n	1b63c <img_mgmt_impl_upload_inspect+0xac>
             */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }

        if (req->size == -1) {
   1b5c4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   1b5c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b5cc:	bf08      	it	eq
   1b5ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1b5d2:	d037      	beq.n	1b644 <img_mgmt_impl_upload_inspect+0xb4>
            /* Request did not include a `len` field. */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }
        action->size = req->size;
   1b5d4:	e9c4 2300 	strd	r2, r3, [r4]

        hdr = (struct image_header *)req->img_data;
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1b5d8:	6a2a      	ldr	r2, [r5, #32]
   1b5da:	4b4e      	ldr	r3, [pc, #312]	; (1b714 <img_mgmt_impl_upload_inspect+0x184>)
   1b5dc:	429a      	cmp	r2, r3
   1b5de:	d135      	bne.n	1b64c <img_mgmt_impl_upload_inspect+0xbc>
            *errstr = img_mgmt_err_str_magic_mismatch;
            return MGMT_ERR_EINVAL;
        }

        if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   1b5e0:	69ea      	ldr	r2, [r5, #28]
   1b5e2:	2a20      	cmp	r2, #32
   1b5e4:	f200 808d 	bhi.w	1b702 <img_mgmt_impl_upload_inspect+0x172>
         * If request includes proper data hash we can check whether there is
         * upload in progress (interrupted due to e.g. link disconnection) with
         * the same data hash so we can just resume it by simply including
         * current upload offset in response.
         */
        if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   1b5e8:	b142      	cbz	r2, 1b5fc <img_mgmt_impl_upload_inspect+0x6c>
   1b5ea:	4b4b      	ldr	r3, [pc, #300]	; (1b718 <img_mgmt_impl_upload_inspect+0x188>)
   1b5ec:	681b      	ldr	r3, [r3, #0]
   1b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b5f2:	d003      	beq.n	1b5fc <img_mgmt_impl_upload_inspect+0x6c>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   1b5f4:	4b48      	ldr	r3, [pc, #288]	; (1b718 <img_mgmt_impl_upload_inspect+0x188>)
   1b5f6:	7b1b      	ldrb	r3, [r3, #12]
   1b5f8:	429a      	cmp	r2, r3
   1b5fa:	d02b      	beq.n	1b654 <img_mgmt_impl_upload_inspect+0xc4>
                                                        req->data_sha_len)) {
                return 0;
            }
        }

        action->area_id = img_mgmt_find_best_area_id();
   1b5fc:	f7ff ffa3 	bl	1b546 <img_mgmt_find_best_area_id>
   1b600:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1b602:	2800      	cmp	r0, #0
   1b604:	db2e      	blt.n	1b664 <img_mgmt_impl_upload_inspect+0xd4>
            /* No slot where to upload! */
            *errstr = img_mgmt_err_str_no_slot;
            return MGMT_ERR_ENOMEM;
        }

        if (req->upgrade) {
   1b606:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
   1b60a:	b15b      	cbz	r3, 1b624 <img_mgmt_impl_upload_inspect+0x94>
            /* User specified upgrade-only.  Make sure new image version is
             * greater than that of the currently running image.
             */
            rc = img_mgmt_my_version(&cur_ver);
   1b60c:	a801      	add	r0, sp, #4
   1b60e:	f7ff fd7b 	bl	1b108 <img_mgmt_my_version>
            if (rc != 0) {
   1b612:	2800      	cmp	r0, #0
   1b614:	d177      	bne.n	1b706 <img_mgmt_impl_upload_inspect+0x176>
                return MGMT_ERR_EUNKNOWN;
            }

            if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1b616:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1b61a:	a801      	add	r0, sp, #4
   1b61c:	f7ff ff73 	bl	1b506 <img_mgmt_vercmp>
   1b620:	2800      	cmp	r0, #0
   1b622:	da23      	bge.n	1b66c <img_mgmt_impl_upload_inspect+0xdc>
        }

#if MYNEWT_VAL(IMG_MGMT_LAZY_ERASE)
        (void) empty;
#else
        rc = flash_area_open(action->area_id, &fa);
   1b624:	a903      	add	r1, sp, #12
   1b626:	7b20      	ldrb	r0, [r4, #12]
   1b628:	f7fd fa14 	bl	18a54 <flash_area_open>
        if (rc) {
   1b62c:	b310      	cbz	r0, 1b674 <img_mgmt_impl_upload_inspect+0xe4>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1b62e:	2300      	movs	r3, #0
   1b630:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1b632:	2001      	movs	r0, #1
   1b634:	e06c      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
        *errstr = img_mgmt_err_str_hdr_malformed;
   1b636:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   1b638:	2003      	movs	r0, #3
   1b63a:	e069      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_hdr_malformed;
   1b63c:	2300      	movs	r3, #0
   1b63e:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1b640:	2003      	movs	r0, #3
   1b642:	e065      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_hdr_malformed;
   1b644:	2300      	movs	r3, #0
   1b646:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1b648:	2003      	movs	r0, #3
   1b64a:	e061      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_magic_mismatch;
   1b64c:	2300      	movs	r3, #0
   1b64e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   1b650:	2003      	movs	r0, #3
   1b652:	e05d      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
                            !memcmp(g_img_mgmt_state.data_sha, req->data_sha,
   1b654:	f505 7108 	add.w	r1, r5, #544	; 0x220
   1b658:	4830      	ldr	r0, [pc, #192]	; (1b71c <img_mgmt_impl_upload_inspect+0x18c>)
   1b65a:	f7fb fa03 	bl	16a64 <memcmp>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   1b65e:	2800      	cmp	r0, #0
   1b660:	d1cc      	bne.n	1b5fc <img_mgmt_impl_upload_inspect+0x6c>
   1b662:	e055      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_no_slot;
   1b664:	2300      	movs	r3, #0
   1b666:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   1b668:	2002      	movs	r0, #2
   1b66a:	e051      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
                *errstr = img_mgmt_err_str_downgrade;
   1b66c:	2300      	movs	r3, #0
   1b66e:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   1b670:	2006      	movs	r0, #6
   1b672:	e04d      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
        }

        rc = flash_area_is_empty(fa, &empty);
   1b674:	f10d 0103 	add.w	r1, sp, #3
   1b678:	9803      	ldr	r0, [sp, #12]
   1b67a:	f7fd fa86 	bl	18b8a <flash_area_is_empty>
        flash_area_close(fa);
        if (rc) {
   1b67e:	2800      	cmp	r0, #0
   1b680:	d143      	bne.n	1b70a <img_mgmt_impl_upload_inspect+0x17a>
            return MGMT_ERR_EUNKNOWN;
        }

        action->erase = !empty;
   1b682:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b686:	f083 0301 	eor.w	r3, r3, #1
   1b68a:	7463      	strb	r3, [r4, #17]
   1b68c:	e00e      	b.n	1b6ac <img_mgmt_impl_upload_inspect+0x11c>
#endif
    } else {
        /* Continuation of upload. */
        action->area_id = g_img_mgmt_state.area_id;
   1b68e:	4922      	ldr	r1, [pc, #136]	; (1b718 <img_mgmt_impl_upload_inspect+0x188>)
   1b690:	680b      	ldr	r3, [r1, #0]
   1b692:	60e3      	str	r3, [r4, #12]
        action->size = g_img_mgmt_state.size;
   1b694:	688b      	ldr	r3, [r1, #8]
   1b696:	6023      	str	r3, [r4, #0]
   1b698:	2300      	movs	r3, #0
   1b69a:	6063      	str	r3, [r4, #4]

        if (req->off != g_img_mgmt_state.off) {
   1b69c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b6a0:	6848      	ldr	r0, [r1, #4]
   1b6a2:	2100      	movs	r1, #0
   1b6a4:	428b      	cmp	r3, r1
   1b6a6:	bf08      	it	eq
   1b6a8:	4282      	cmpeq	r2, r0
   1b6aa:	d130      	bne.n	1b70e <img_mgmt_impl_upload_inspect+0x17e>
            return 0;
        }
    }

    /* Calculate size of flash write. */
    action->write_bytes = req->data_len;
   1b6ac:	69ab      	ldr	r3, [r5, #24]
   1b6ae:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1b6b0:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1b6b4:	69a9      	ldr	r1, [r5, #24]
   1b6b6:	1852      	adds	r2, r2, r1
   1b6b8:	f143 0300 	adc.w	r3, r3, #0
   1b6bc:	e9d4 0100 	ldrd	r0, r1, [r4]
   1b6c0:	428b      	cmp	r3, r1
   1b6c2:	bf08      	it	eq
   1b6c4:	4282      	cmpeq	r2, r0
   1b6c6:	d303      	bcc.n	1b6d0 <img_mgmt_impl_upload_inspect+0x140>
        if (rem_bytes) {
            action->write_bytes -= rem_bytes;
        }
    }

    action->proceed = true;
   1b6c8:	2301      	movs	r3, #1
   1b6ca:	7423      	strb	r3, [r4, #16]
    return 0;
   1b6cc:	2000      	movs	r0, #0
   1b6ce:	e01f      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
        rc = flash_area_open(action->area_id, &fa);
   1b6d0:	a903      	add	r1, sp, #12
   1b6d2:	7b20      	ldrb	r0, [r4, #12]
   1b6d4:	f7fd f9be 	bl	18a54 <flash_area_open>
        if (rc) {
   1b6d8:	b118      	cbz	r0, 1b6e2 <img_mgmt_impl_upload_inspect+0x152>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1b6da:	2300      	movs	r3, #0
   1b6dc:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1b6de:	2001      	movs	r0, #1
   1b6e0:	e016      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
        rem_bytes = req->data_len % flash_area_align(fa);
   1b6e2:	69ad      	ldr	r5, [r5, #24]
   1b6e4:	9803      	ldr	r0, [sp, #12]
   1b6e6:	f7fd fa46 	bl	18b76 <flash_area_align>
   1b6ea:	fbb5 f3f0 	udiv	r3, r5, r0
   1b6ee:	fb00 5313 	mls	r3, r0, r3, r5
        if (rem_bytes) {
   1b6f2:	f013 0fff 	tst.w	r3, #255	; 0xff
   1b6f6:	d0e7      	beq.n	1b6c8 <img_mgmt_impl_upload_inspect+0x138>
            action->write_bytes -= rem_bytes;
   1b6f8:	b2db      	uxtb	r3, r3
   1b6fa:	68a2      	ldr	r2, [r4, #8]
   1b6fc:	1ad3      	subs	r3, r2, r3
   1b6fe:	60a3      	str	r3, [r4, #8]
   1b700:	e7e2      	b.n	1b6c8 <img_mgmt_impl_upload_inspect+0x138>
            return MGMT_ERR_EINVAL;
   1b702:	2003      	movs	r0, #3
   1b704:	e004      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
                return MGMT_ERR_EUNKNOWN;
   1b706:	2001      	movs	r0, #1
   1b708:	e002      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
            return MGMT_ERR_EUNKNOWN;
   1b70a:	2001      	movs	r0, #1
   1b70c:	e000      	b.n	1b710 <img_mgmt_impl_upload_inspect+0x180>
            return 0;
   1b70e:	2000      	movs	r0, #0
}
   1b710:	b004      	add	sp, #16
   1b712:	bd70      	pop	{r4, r5, r6, pc}
   1b714:	96f3b83d 	.word	0x96f3b83d
   1b718:	10001e40 	.word	0x10001e40
   1b71c:	10001e4d 	.word	0x10001e4d

0001b720 <img_mgmt_impl_erase_slot>:

int
img_mgmt_impl_erase_slot(void)
{
   1b720:	b500      	push	{lr}
   1b722:	b083      	sub	sp, #12
    const struct flash_area *fa;
    bool empty;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1b724:	a901      	add	r1, sp, #4
   1b726:	2002      	movs	r0, #2
   1b728:	f7fd f994 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   1b72c:	b118      	cbz	r0, 1b736 <img_mgmt_impl_erase_slot+0x16>
        return MGMT_ERR_EUNKNOWN;
   1b72e:	2001      	movs	r0, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   1b730:	b003      	add	sp, #12
   1b732:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = flash_area_is_empty(fa, &empty);
   1b736:	f10d 0103 	add.w	r1, sp, #3
   1b73a:	9801      	ldr	r0, [sp, #4]
   1b73c:	f7fd fa25 	bl	18b8a <flash_area_is_empty>
    if (rc != 0) {
   1b740:	b960      	cbnz	r0, 1b75c <img_mgmt_impl_erase_slot+0x3c>
    if (!empty) {
   1b742:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1b746:	2b00      	cmp	r3, #0
   1b748:	d1f2      	bne.n	1b730 <img_mgmt_impl_erase_slot+0x10>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1b74a:	9801      	ldr	r0, [sp, #4]
   1b74c:	6882      	ldr	r2, [r0, #8]
   1b74e:	2100      	movs	r1, #0
   1b750:	f7fd f9fe 	bl	18b50 <flash_area_erase>
        if (rc != 0) {
   1b754:	2800      	cmp	r0, #0
   1b756:	d0eb      	beq.n	1b730 <img_mgmt_impl_erase_slot+0x10>
            return MGMT_ERR_EUNKNOWN;
   1b758:	2001      	movs	r0, #1
   1b75a:	e7e9      	b.n	1b730 <img_mgmt_impl_erase_slot+0x10>
        return MGMT_ERR_EUNKNOWN;
   1b75c:	2001      	movs	r0, #1
   1b75e:	e7e7      	b.n	1b730 <img_mgmt_impl_erase_slot+0x10>

0001b760 <img_mgmt_impl_write_pending>:

int
img_mgmt_impl_write_pending(int slot, bool permanent)
{
   1b760:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b762:	b083      	sub	sp, #12
   1b764:	4604      	mov	r4, r0
   1b766:	460f      	mov	r7, r1
    uint32_t image_flags;
    uint8_t state_flags;
    int split_app_active;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   1b768:	f7ff fce2 	bl	1b130 <img_mgmt_state_flags>
   1b76c:	4605      	mov	r5, r0
    split_app_active = split_app_active_get();
   1b76e:	f7f9 faf3 	bl	14d58 <split_app_active_get>
   1b772:	4606      	mov	r6, r0

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED &&
   1b774:	f015 0f02 	tst.w	r5, #2
   1b778:	d001      	beq.n	1b77e <img_mgmt_impl_write_pending+0x1e>
   1b77a:	bb44      	cbnz	r4, 1b7ce <img_mgmt_impl_write_pending+0x6e>
        (slot != 0 || !split_app_active)) {
   1b77c:	b348      	cbz	r0, 1b7d2 <img_mgmt_impl_write_pending+0x72>

        return MGMT_ERR_EBADSTATE;
    }

    rc = img_mgmt_read_info(slot, NULL, NULL, &image_flags);
   1b77e:	ab01      	add	r3, sp, #4
   1b780:	2200      	movs	r2, #0
   1b782:	4611      	mov	r1, r2
   1b784:	4620      	mov	r0, r4
   1b786:	f7ff fa83 	bl	1ac90 <img_mgmt_read_info>
    if (rc != 0) {
   1b78a:	bb20      	cbnz	r0, 1b7d6 <img_mgmt_impl_write_pending+0x76>
        return MGMT_ERR_EUNKNOWN;
    }

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1b78c:	9b01      	ldr	r3, [sp, #4]
   1b78e:	f013 0f10 	tst.w	r3, #16
   1b792:	d111      	bne.n	1b7b8 <img_mgmt_impl_write_pending+0x58>
        /* Unified image or loader. */
        if (!split_app_active) {
   1b794:	b136      	cbz	r6, 1b7a4 <img_mgmt_impl_write_pending+0x44>
            if (rc != 0) {
                return MGMT_ERR_EUNKNOWN;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1b796:	b15f      	cbz	r7, 1b7b0 <img_mgmt_impl_write_pending+0x50>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1b798:	2000      	movs	r0, #0
   1b79a:	f7f9 faef 	bl	14d7c <split_write_split>
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1b79e:	b1d8      	cbz	r0, 1b7d8 <img_mgmt_impl_write_pending+0x78>
                return MGMT_ERR_EUNKNOWN;
   1b7a0:	2001      	movs	r0, #1
   1b7a2:	e019      	b.n	1b7d8 <img_mgmt_impl_write_pending+0x78>
            rc = boot_set_pending(permanent);
   1b7a4:	4638      	mov	r0, r7
   1b7a6:	f012 fa1a 	bl	2dbde <boot_set_pending>
            if (rc != 0) {
   1b7aa:	b1a8      	cbz	r0, 1b7d8 <img_mgmt_impl_write_pending+0x78>
                return MGMT_ERR_EUNKNOWN;
   1b7ac:	2001      	movs	r0, #1
   1b7ae:	e013      	b.n	1b7d8 <img_mgmt_impl_write_pending+0x78>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1b7b0:	2003      	movs	r0, #3
   1b7b2:	f7f9 fae3 	bl	14d7c <split_write_split>
   1b7b6:	e7f2      	b.n	1b79e <img_mgmt_impl_write_pending+0x3e>
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1b7b8:	b12f      	cbz	r7, 1b7c6 <img_mgmt_impl_write_pending+0x66>
            rc = split_write_split(SPLIT_MODE_APP);
   1b7ba:	2002      	movs	r0, #2
   1b7bc:	f7f9 fade 	bl	14d7c <split_write_split>
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1b7c0:	b150      	cbz	r0, 1b7d8 <img_mgmt_impl_write_pending+0x78>
            return MGMT_ERR_EUNKNOWN;
   1b7c2:	2001      	movs	r0, #1
   1b7c4:	e008      	b.n	1b7d8 <img_mgmt_impl_write_pending+0x78>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1b7c6:	2001      	movs	r0, #1
   1b7c8:	f7f9 fad8 	bl	14d7c <split_write_split>
   1b7cc:	e7f8      	b.n	1b7c0 <img_mgmt_impl_write_pending+0x60>
        return MGMT_ERR_EBADSTATE;
   1b7ce:	2006      	movs	r0, #6
   1b7d0:	e002      	b.n	1b7d8 <img_mgmt_impl_write_pending+0x78>
   1b7d2:	2006      	movs	r0, #6
   1b7d4:	e000      	b.n	1b7d8 <img_mgmt_impl_write_pending+0x78>
        return MGMT_ERR_EUNKNOWN;
   1b7d6:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1b7d8:	b003      	add	sp, #12
   1b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b7dc <img_mgmt_impl_write_confirmed>:

int
img_mgmt_impl_write_confirmed(void)
{
   1b7dc:	b508      	push	{r3, lr}
    int rc;

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1b7de:	f012 fa24 	bl	2dc2a <boot_set_confirmed>
    if (rc != 0) {
   1b7e2:	b108      	cbz	r0, 1b7e8 <img_mgmt_impl_write_confirmed+0xc>
        return MGMT_ERR_EUNKNOWN;
   1b7e4:	2001      	movs	r0, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   1b7e6:	bd08      	pop	{r3, pc}
    if (split_app_active_get()) {
   1b7e8:	f7f9 fab6 	bl	14d58 <split_app_active_get>
   1b7ec:	b130      	cbz	r0, 1b7fc <img_mgmt_impl_write_confirmed+0x20>
        rc = split_write_split(SPLIT_MODE_APP);
   1b7ee:	2002      	movs	r0, #2
   1b7f0:	f7f9 fac4 	bl	14d7c <split_write_split>
        if (rc != 0) {
   1b7f4:	2800      	cmp	r0, #0
   1b7f6:	d0f6      	beq.n	1b7e6 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1b7f8:	2001      	movs	r0, #1
   1b7fa:	e7f4      	b.n	1b7e6 <img_mgmt_impl_write_confirmed+0xa>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1b7fc:	2000      	movs	r0, #0
   1b7fe:	f7f9 fabd 	bl	14d7c <split_write_split>
        if (rc != 0) {
   1b802:	2800      	cmp	r0, #0
   1b804:	d0ef      	beq.n	1b7e6 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1b806:	2001      	movs	r0, #1
   1b808:	e7ed      	b.n	1b7e6 <img_mgmt_impl_write_confirmed+0xa>

0001b80a <img_mgmt_impl_read>:

int
img_mgmt_impl_read(int slot, unsigned int offset, void *dst,
                   unsigned int num_bytes)
{
   1b80a:	b570      	push	{r4, r5, r6, lr}
   1b80c:	b082      	sub	sp, #8
   1b80e:	460c      	mov	r4, r1
   1b810:	4615      	mov	r5, r2
   1b812:	461e      	mov	r6, r3
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
   1b814:	f7fd f9d3 	bl	18bbe <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fa);
   1b818:	a901      	add	r1, sp, #4
   1b81a:	b2c0      	uxtb	r0, r0
   1b81c:	f7fd f91a 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   1b820:	b110      	cbz	r0, 1b828 <img_mgmt_impl_read+0x1e>
        return MGMT_ERR_EUNKNOWN;
   1b822:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1b824:	b002      	add	sp, #8
   1b826:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fa, offset, dst, num_bytes);
   1b828:	4633      	mov	r3, r6
   1b82a:	462a      	mov	r2, r5
   1b82c:	4621      	mov	r1, r4
   1b82e:	9801      	ldr	r0, [sp, #4]
   1b830:	f7fd f968 	bl	18b04 <flash_area_read>
    if (rc != 0) {
   1b834:	2800      	cmp	r0, #0
   1b836:	d0f5      	beq.n	1b824 <img_mgmt_impl_read+0x1a>
        return MGMT_ERR_EUNKNOWN;
   1b838:	2001      	movs	r0, #1
   1b83a:	e7f3      	b.n	1b824 <img_mgmt_impl_read+0x1a>

0001b83c <img_mgmt_impl_write_image_data>:

#else
int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data,
                               unsigned int num_bytes, bool last)
{
   1b83c:	b570      	push	{r4, r5, r6, lr}
   1b83e:	b082      	sub	sp, #8
   1b840:	4604      	mov	r4, r0
   1b842:	460d      	mov	r5, r1
   1b844:	4616      	mov	r6, r2
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1b846:	a901      	add	r1, sp, #4
   1b848:	2002      	movs	r0, #2
   1b84a:	f7fd f903 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   1b84e:	b110      	cbz	r0, 1b856 <img_mgmt_impl_write_image_data+0x1a>
        return MGMT_ERR_EUNKNOWN;
   1b850:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1b852:	b002      	add	sp, #8
   1b854:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_write(fa, offset, data, num_bytes);
   1b856:	4633      	mov	r3, r6
   1b858:	462a      	mov	r2, r5
   1b85a:	4621      	mov	r1, r4
   1b85c:	9801      	ldr	r0, [sp, #4]
   1b85e:	f7fd f964 	bl	18b2a <flash_area_write>
    if (rc != 0) {
   1b862:	2800      	cmp	r0, #0
   1b864:	d0f5      	beq.n	1b852 <img_mgmt_impl_write_image_data+0x16>
        return MGMT_ERR_EUNKNOWN;
   1b866:	2001      	movs	r0, #1
   1b868:	e7f3      	b.n	1b852 <img_mgmt_impl_write_image_data+0x16>

0001b86a <img_mgmt_impl_erase_image_data>:
#endif

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   1b86a:	b530      	push	{r4, r5, lr}
   1b86c:	b083      	sub	sp, #12
   1b86e:	4604      	mov	r4, r0
   1b870:	460d      	mov	r5, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1b872:	a901      	add	r1, sp, #4
   1b874:	2002      	movs	r0, #2
   1b876:	f7fd f8ed 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   1b87a:	b110      	cbz	r0, 1b882 <img_mgmt_impl_erase_image_data+0x18>
        return MGMT_ERR_EUNKNOWN;
   1b87c:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1b87e:	b003      	add	sp, #12
   1b880:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_erase(fa, off, num_bytes);
   1b882:	462a      	mov	r2, r5
   1b884:	4621      	mov	r1, r4
   1b886:	9801      	ldr	r0, [sp, #4]
   1b888:	f7fd f962 	bl	18b50 <flash_area_erase>
    if (rc != 0) {
   1b88c:	2800      	cmp	r0, #0
   1b88e:	d0f6      	beq.n	1b87e <img_mgmt_impl_erase_image_data+0x14>
        return MGMT_ERR_EUNKNOWN;
   1b890:	2001      	movs	r0, #1
   1b892:	e7f4      	b.n	1b87e <img_mgmt_impl_erase_image_data+0x14>

0001b894 <img_mgmt_impl_swap_type>:
}
#endif

int
img_mgmt_impl_swap_type(int slot)
{
   1b894:	b508      	push	{r3, lr}
    assert(slot == 0 || slot == 1);
   1b896:	2801      	cmp	r0, #1
   1b898:	d808      	bhi.n	1b8ac <img_mgmt_impl_swap_type+0x18>

    switch (boot_swap_type()) {
   1b89a:	f012 f953 	bl	2db44 <boot_swap_type>
   1b89e:	3801      	subs	r0, #1
   1b8a0:	2803      	cmp	r0, #3
   1b8a2:	d811      	bhi.n	1b8c8 <img_mgmt_impl_swap_type+0x34>
   1b8a4:	e8df f000 	tbb	[pc, r0]
   1b8a8:	0e0c1c1a 	.word	0x0e0c1c1a
    assert(slot == 0 || slot == 1);
   1b8ac:	f7f8 fed2 	bl	14654 <hal_debugger_connected>
   1b8b0:	b100      	cbz	r0, 1b8b4 <img_mgmt_impl_swap_type+0x20>
   1b8b2:	be01      	bkpt	0x0001
   1b8b4:	2300      	movs	r3, #0
   1b8b6:	461a      	mov	r2, r3
   1b8b8:	4619      	mov	r1, r3
   1b8ba:	4618      	mov	r0, r3
   1b8bc:	f7f9 fa6c 	bl	14d98 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        return IMG_MGMT_SWAP_TYPE_NONE;
    case BOOT_SWAP_TYPE_TEST:
        return IMG_MGMT_SWAP_TYPE_TEST;
    case BOOT_SWAP_TYPE_PERM:
        return IMG_MGMT_SWAP_TYPE_PERM;
   1b8c0:	2002      	movs	r0, #2
   1b8c2:	e00c      	b.n	1b8de <img_mgmt_impl_swap_type+0x4a>
    case BOOT_SWAP_TYPE_REVERT:
        return IMG_MGMT_SWAP_TYPE_REVERT;
   1b8c4:	2003      	movs	r0, #3
   1b8c6:	e00a      	b.n	1b8de <img_mgmt_impl_swap_type+0x4a>
    default:
        assert(0);
   1b8c8:	f7f8 fec4 	bl	14654 <hal_debugger_connected>
   1b8cc:	b100      	cbz	r0, 1b8d0 <img_mgmt_impl_swap_type+0x3c>
   1b8ce:	be01      	bkpt	0x0001
   1b8d0:	2300      	movs	r3, #0
   1b8d2:	461a      	mov	r2, r3
   1b8d4:	4619      	mov	r1, r3
   1b8d6:	4618      	mov	r0, r3
   1b8d8:	f7f9 fa5e 	bl	14d98 <__assert_func>
    switch (boot_swap_type()) {
   1b8dc:	2000      	movs	r0, #0
        return IMG_MGMT_SWAP_TYPE_NONE;
    }
}
   1b8de:	bd08      	pop	{r3, pc}
        return IMG_MGMT_SWAP_TYPE_TEST;
   1b8e0:	2001      	movs	r0, #1
   1b8e2:	e7fc      	b.n	1b8de <img_mgmt_impl_swap_type+0x4a>

0001b8e4 <img_mgmt_impl_erased_val>:

int
img_mgmt_impl_erased_val(int slot, uint8_t *erased_val)
{
   1b8e4:	b530      	push	{r4, r5, lr}
   1b8e6:	b083      	sub	sp, #12
   1b8e8:	460c      	mov	r4, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(flash_area_id_from_image_slot(slot), &fa);
   1b8ea:	f7fd f968 	bl	18bbe <flash_area_id_from_image_slot>
   1b8ee:	a901      	add	r1, sp, #4
   1b8f0:	b2c0      	uxtb	r0, r0
   1b8f2:	f7fd f8af 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   1b8f6:	b118      	cbz	r0, 1b900 <img_mgmt_impl_erased_val+0x1c>
      return MGMT_ERR_EUNKNOWN;
   1b8f8:	2501      	movs	r5, #1

    *erased_val = flash_area_erased_val(fa);
    flash_area_close(fa);

    return 0;
}
   1b8fa:	4628      	mov	r0, r5
   1b8fc:	b003      	add	sp, #12
   1b8fe:	bd30      	pop	{r4, r5, pc}
   1b900:	4605      	mov	r5, r0
    *erased_val = flash_area_erased_val(fa);
   1b902:	9801      	ldr	r0, [sp, #4]
   1b904:	f7fd f93c 	bl	18b80 <flash_area_erased_val>
   1b908:	7020      	strb	r0, [r4, #0]
    return 0;
   1b90a:	e7f6      	b.n	1b8fa <img_mgmt_impl_erased_val+0x16>

0001b90c <img_mgmt_module_init>:

void
img_mgmt_module_init(void)
{
   1b90c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b90e:	4b08      	ldr	r3, [pc, #32]	; (1b930 <img_mgmt_module_init+0x24>)
   1b910:	781b      	ldrb	r3, [r3, #0]
   1b912:	b113      	cbz	r3, 1b91a <img_mgmt_module_init+0xe>

    img_mgmt_register_group();
   1b914:	f7ff fc04 	bl	1b120 <img_mgmt_register_group>
}
   1b918:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b91a:	f7f8 fe9b 	bl	14654 <hal_debugger_connected>
   1b91e:	b100      	cbz	r0, 1b922 <img_mgmt_module_init+0x16>
   1b920:	be01      	bkpt	0x0001
   1b922:	2300      	movs	r3, #0
   1b924:	461a      	mov	r2, r3
   1b926:	4619      	mov	r1, r3
   1b928:	4618      	mov	r0, r3
   1b92a:	f7f9 fa35 	bl	14d98 <__assert_func>
   1b92e:	bf00      	nop
   1b930:	10001e3c 	.word	0x10001e3c

0001b934 <img_mgmt_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMG_MGMT_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1b934:	2000      	movs	r0, #0
   1b936:	4770      	bx	lr

0001b938 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
   1b938:	b508      	push	{r3, lr}
   1b93a:	4601      	mov	r1, r0
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPSTART, status, NULL);
   1b93c:	2200      	movs	r2, #0
   1b93e:	4802      	ldr	r0, [pc, #8]	; (1b948 <img_mgmt_impl_log_upload_start+0x10>)
   1b940:	f7ff fff8 	bl	1b934 <img_mgmt_log_gen>
}
   1b944:	bd08      	pop	{r3, pc}
   1b946:	bf00      	nop
   1b948:	00034610 	.word	0x00034610

0001b94c <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
   1b94c:	b508      	push	{r3, lr}
   1b94e:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPDONE, 0, hash);
   1b950:	2100      	movs	r1, #0
   1b952:	4802      	ldr	r0, [pc, #8]	; (1b95c <img_mgmt_impl_log_upload_done+0x10>)
   1b954:	f7ff ffee 	bl	1b934 <img_mgmt_log_gen>
}
   1b958:	bd08      	pop	{r3, pc}
   1b95a:	bf00      	nop
   1b95c:	00034618 	.word	0x00034618

0001b960 <img_mgmt_impl_log_pending>:

int
img_mgmt_impl_log_pending(int status, const uint8_t *hash)
{
   1b960:	b508      	push	{r3, lr}
   1b962:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_PEND, status, hash);
   1b964:	4601      	mov	r1, r0
   1b966:	4802      	ldr	r0, [pc, #8]	; (1b970 <img_mgmt_impl_log_pending+0x10>)
   1b968:	f7ff ffe4 	bl	1b934 <img_mgmt_log_gen>
}
   1b96c:	bd08      	pop	{r3, pc}
   1b96e:	bf00      	nop
   1b970:	00034620 	.word	0x00034620

0001b974 <img_mgmt_impl_log_confirm>:

int
img_mgmt_impl_log_confirm(int status, const uint8_t *hash)
{
   1b974:	b508      	push	{r3, lr}
   1b976:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_CONF, status, hash);
   1b978:	4601      	mov	r1, r0
   1b97a:	4802      	ldr	r0, [pc, #8]	; (1b984 <img_mgmt_impl_log_confirm+0x10>)
   1b97c:	f7ff ffda 	bl	1b934 <img_mgmt_log_gen>
}
   1b980:	bd08      	pop	{r3, pc}
   1b982:	bf00      	nop
   1b984:	00034628 	.word	0x00034628

0001b988 <mynewt_log_mgmt_find_log>:
    void *arg;
};

static struct log *
mynewt_log_mgmt_find_log(const char *log_name)
{
   1b988:	b538      	push	{r3, r4, r5, lr}
   1b98a:	4605      	mov	r5, r0
    struct log *log;

    log = NULL;
   1b98c:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   1b98e:	4620      	mov	r0, r4
   1b990:	f7fd fb5a 	bl	19048 <log_list_get_next>
        if (log == NULL) {
   1b994:	4604      	mov	r4, r0
   1b996:	b128      	cbz	r0, 1b9a4 <mynewt_log_mgmt_find_log+0x1c>
            return NULL;
        }

        if (strcmp(log->l_name, log_name) == 0) {
   1b998:	4629      	mov	r1, r5
   1b99a:	6800      	ldr	r0, [r0, #0]
   1b99c:	f7fb f8c7 	bl	16b2e <strcmp>
   1b9a0:	2800      	cmp	r0, #0
   1b9a2:	d1f4      	bne.n	1b98e <mynewt_log_mgmt_find_log+0x6>
            return log;
        }
    }
}
   1b9a4:	4620      	mov	r0, r4
   1b9a6:	bd38      	pop	{r3, r4, r5, pc}

0001b9a8 <mynewt_log_mgmt_walk_cb>:

static int
mynewt_log_mgmt_walk_cb(struct log *log, struct log_offset *log_offset,
                        const struct log_entry_hdr *leh,
                        const void *dptr, uint16_t len)
{
   1b9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9ac:	b08d      	sub	sp, #52	; 0x34
   1b9ae:	4607      	mov	r7, r0
   1b9b0:	460c      	mov	r4, r1
   1b9b2:	4698      	mov	r8, r3
   1b9b4:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
    int read_len;
    int offset;
    int rc;

    rc = 0;
    mynewt_log_mgmt_walk_arg = log_offset->lo_arg;
   1b9b8:	690e      	ldr	r6, [r1, #16]
     * If specified timestamp == 0: encode entries whose index >=
     *     specified index.
     * Else: encode entries whose timestamp >= specified timestamp and whose
     *      index >= specified index
     */
    if (log_offset->lo_ts == 0) {
   1b9ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b9be:	ea50 0301 	orrs.w	r3, r0, r1
   1b9c2:	d126      	bne.n	1ba12 <mynewt_log_mgmt_walk_cb+0x6a>
        if (log_offset->lo_index > leh->ue_index) {
   1b9c4:	68a1      	ldr	r1, [r4, #8]
   1b9c6:	6893      	ldr	r3, [r2, #8]
   1b9c8:	4299      	cmp	r1, r3
   1b9ca:	d851      	bhi.n	1ba70 <mynewt_log_mgmt_walk_cb+0xc8>
               (leh->ue_ts == log_offset->lo_ts &&
                leh->ue_index < log_offset->lo_index)) {
        return 0;
    }

    entry.ts = leh->ue_ts;
   1b9cc:	6811      	ldr	r1, [r2, #0]
   1b9ce:	6853      	ldr	r3, [r2, #4]
   1b9d0:	9102      	str	r1, [sp, #8]
   1b9d2:	9303      	str	r3, [sp, #12]
    entry.index = leh->ue_index;
   1b9d4:	6893      	ldr	r3, [r2, #8]
   1b9d6:	9304      	str	r3, [sp, #16]
    entry.module = leh->ue_module;
   1b9d8:	7b13      	ldrb	r3, [r2, #12]
   1b9da:	f88d 301c 	strb.w	r3, [sp, #28]
    entry.level = leh->ue_level;
   1b9de:	7b53      	ldrb	r3, [r2, #13]
   1b9e0:	f88d 301d 	strb.w	r3, [sp, #29]

    entry.type = leh->ue_etype;
   1b9e4:	7b93      	ldrb	r3, [r2, #14]
   1b9e6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1b9ea:	f363 0103 	bfi	r1, r3, #0, #4
    entry.flags = leh->ue_flags;
   1b9ee:	091b      	lsrs	r3, r3, #4
   1b9f0:	f363 1107 	bfi	r1, r3, #4, #4
   1b9f4:	f88d 101e 	strb.w	r1, [sp, #30]
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
        leh->ue_imghash : NULL;
   1b9f8:	f013 0f01 	tst.w	r3, #1
   1b9fc:	d01b      	beq.n	1ba36 <mynewt_log_mgmt_walk_cb+0x8e>
   1b9fe:	320f      	adds	r2, #15
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
   1ba00:	9208      	str	r2, [sp, #32]
    entry.len = len;
   1ba02:	9506      	str	r5, [sp, #24]
    entry.data = mynewt_log_mgmt_walk_arg->chunk;
   1ba04:	f106 0904 	add.w	r9, r6, #4
   1ba08:	f8cd 9014 	str.w	r9, [sp, #20]
    rc = 0;
   1ba0c:	2300      	movs	r3, #0

    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   1ba0e:	461c      	mov	r4, r3
   1ba10:	e027      	b.n	1ba62 <mynewt_log_mgmt_walk_cb+0xba>
    } else if (leh->ue_ts < log_offset->lo_ts   ||
   1ba12:	f8d2 a000 	ldr.w	sl, [r2]
   1ba16:	f8d2 b004 	ldr.w	fp, [r2, #4]
   1ba1a:	4582      	cmp	sl, r0
   1ba1c:	eb7b 0301 	sbcs.w	r3, fp, r1
   1ba20:	db28      	blt.n	1ba74 <mynewt_log_mgmt_walk_cb+0xcc>
   1ba22:	4559      	cmp	r1, fp
   1ba24:	bf08      	it	eq
   1ba26:	4550      	cmpeq	r0, sl
   1ba28:	d1d0      	bne.n	1b9cc <mynewt_log_mgmt_walk_cb+0x24>
                leh->ue_index < log_offset->lo_index)) {
   1ba2a:	6891      	ldr	r1, [r2, #8]
   1ba2c:	68a3      	ldr	r3, [r4, #8]
               (leh->ue_ts == log_offset->lo_ts &&
   1ba2e:	4299      	cmp	r1, r3
   1ba30:	d2cc      	bcs.n	1b9cc <mynewt_log_mgmt_walk_cb+0x24>
        return 0;
   1ba32:	2300      	movs	r3, #0
   1ba34:	e021      	b.n	1ba7a <mynewt_log_mgmt_walk_cb+0xd2>
        leh->ue_imghash : NULL;
   1ba36:	2200      	movs	r2, #0
   1ba38:	e7e2      	b.n	1ba00 <mynewt_log_mgmt_walk_cb+0x58>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
            read_len = len - offset;
        } else {
            read_len = LOG_MGMT_CHUNK_LEN;
        }
        entry.offset = offset;
   1ba3a:	9409      	str	r4, [sp, #36]	; 0x24
        entry.chunklen = read_len;
   1ba3c:	920a      	str	r2, [sp, #40]	; 0x28

        rc = log_read_body(log, dptr, mynewt_log_mgmt_walk_arg->chunk, offset,
   1ba3e:	b292      	uxth	r2, r2
   1ba40:	9200      	str	r2, [sp, #0]
   1ba42:	b2a3      	uxth	r3, r4
   1ba44:	464a      	mov	r2, r9
   1ba46:	4641      	mov	r1, r8
   1ba48:	4638      	mov	r0, r7
   1ba4a:	f7fd fc4d 	bl	192e8 <log_read_body>
                           read_len);
        if (rc < 0) {
   1ba4e:	2800      	cmp	r0, #0
   1ba50:	db12      	blt.n	1ba78 <mynewt_log_mgmt_walk_cb+0xd0>
            return LOG_MGMT_ERR_EUNKNOWN;
        }
        rc = mynewt_log_mgmt_walk_arg->cb(&entry, mynewt_log_mgmt_walk_arg->arg);
   1ba52:	6833      	ldr	r3, [r6, #0]
   1ba54:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
   1ba58:	a802      	add	r0, sp, #8
   1ba5a:	4798      	blx	r3
        if (rc) {
   1ba5c:	4603      	mov	r3, r0
   1ba5e:	b960      	cbnz	r0, 1ba7a <mynewt_log_mgmt_walk_cb+0xd2>
    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   1ba60:	3480      	adds	r4, #128	; 0x80
   1ba62:	42a5      	cmp	r5, r4
   1ba64:	dd09      	ble.n	1ba7a <mynewt_log_mgmt_walk_cb+0xd2>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
   1ba66:	1b2a      	subs	r2, r5, r4
   1ba68:	2a7f      	cmp	r2, #127	; 0x7f
   1ba6a:	dde6      	ble.n	1ba3a <mynewt_log_mgmt_walk_cb+0x92>
            read_len = LOG_MGMT_CHUNK_LEN;
   1ba6c:	2280      	movs	r2, #128	; 0x80
   1ba6e:	e7e4      	b.n	1ba3a <mynewt_log_mgmt_walk_cb+0x92>
            return 0;
   1ba70:	2300      	movs	r3, #0
   1ba72:	e002      	b.n	1ba7a <mynewt_log_mgmt_walk_cb+0xd2>
        return 0;
   1ba74:	2300      	movs	r3, #0
   1ba76:	e000      	b.n	1ba7a <mynewt_log_mgmt_walk_cb+0xd2>
            return LOG_MGMT_ERR_EUNKNOWN;
   1ba78:	2301      	movs	r3, #1
            break;
        }
    }

    return rc;
}
   1ba7a:	4618      	mov	r0, r3
   1ba7c:	b00d      	add	sp, #52	; 0x34
   1ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ba82 <log_mgmt_impl_get_log>:
{
   1ba82:	b570      	push	{r4, r5, r6, lr}
   1ba84:	4605      	mov	r5, r0
   1ba86:	460e      	mov	r6, r1
    for (i = 0; i <= idx; i++) {
   1ba88:	2400      	movs	r4, #0
    log = NULL;
   1ba8a:	4620      	mov	r0, r4
    for (i = 0; i <= idx; i++) {
   1ba8c:	42ac      	cmp	r4, r5
   1ba8e:	dc04      	bgt.n	1ba9a <log_mgmt_impl_get_log+0x18>
        log = log_list_get_next(log);
   1ba90:	f7fd fada 	bl	19048 <log_list_get_next>
        if (log == NULL) {
   1ba94:	b140      	cbz	r0, 1baa8 <log_mgmt_impl_get_log+0x26>
    for (i = 0; i <= idx; i++) {
   1ba96:	3401      	adds	r4, #1
   1ba98:	e7f8      	b.n	1ba8c <log_mgmt_impl_get_log+0xa>
    out_log->name = log->l_name;
   1ba9a:	6803      	ldr	r3, [r0, #0]
   1ba9c:	6033      	str	r3, [r6, #0]
    out_log->type = log->l_log->log_type;
   1ba9e:	6843      	ldr	r3, [r0, #4]
   1baa0:	681b      	ldr	r3, [r3, #0]
   1baa2:	6073      	str	r3, [r6, #4]
    return 0;
   1baa4:	2000      	movs	r0, #0
}
   1baa6:	bd70      	pop	{r4, r5, r6, pc}
            return LOG_MGMT_ERR_ENOENT;
   1baa8:	2005      	movs	r0, #5
   1baaa:	e7fc      	b.n	1baa6 <log_mgmt_impl_get_log+0x24>

0001baac <log_mgmt_impl_get_module>:
{
   1baac:	b510      	push	{r4, lr}
   1baae:	460c      	mov	r4, r1
    name = LOG_MODULE_STR(idx);
   1bab0:	b2c0      	uxtb	r0, r0
   1bab2:	f7fd fad1 	bl	19058 <log_module_get_name>
    if (name == NULL) {
   1bab6:	b110      	cbz	r0, 1babe <log_mgmt_impl_get_module+0x12>
        *out_module_name = name;
   1bab8:	6020      	str	r0, [r4, #0]
        return 0;
   1baba:	2000      	movs	r0, #0
}
   1babc:	bd10      	pop	{r4, pc}
        return LOG_MGMT_ERR_ENOENT;
   1babe:	2005      	movs	r0, #5
   1bac0:	e7fc      	b.n	1babc <log_mgmt_impl_get_module+0x10>
	...

0001bac4 <log_mgmt_impl_get_level>:
    if (idx >= LOG_LEVEL_MAX) {
   1bac4:	280e      	cmp	r0, #14
   1bac6:	dc1d      	bgt.n	1bb04 <log_mgmt_impl_get_level+0x40>
{
   1bac8:	b538      	push	{r3, r4, r5, lr}
   1baca:	460c      	mov	r4, r1
    name = LOG_LEVEL_STR(idx);
   1bacc:	b158      	cbz	r0, 1bae6 <log_mgmt_impl_get_level+0x22>
   1bace:	2801      	cmp	r0, #1
   1bad0:	d012      	beq.n	1baf8 <log_mgmt_impl_get_level+0x34>
   1bad2:	2802      	cmp	r0, #2
   1bad4:	d012      	beq.n	1bafc <log_mgmt_impl_get_level+0x38>
   1bad6:	2803      	cmp	r0, #3
   1bad8:	d012      	beq.n	1bb00 <log_mgmt_impl_get_level+0x3c>
   1bada:	2804      	cmp	r0, #4
   1badc:	d001      	beq.n	1bae2 <log_mgmt_impl_get_level+0x1e>
   1bade:	4d0b      	ldr	r5, [pc, #44]	; (1bb0c <log_mgmt_impl_get_level+0x48>)
   1bae0:	e002      	b.n	1bae8 <log_mgmt_impl_get_level+0x24>
   1bae2:	4d0b      	ldr	r5, [pc, #44]	; (1bb10 <log_mgmt_impl_get_level+0x4c>)
   1bae4:	e000      	b.n	1bae8 <log_mgmt_impl_get_level+0x24>
   1bae6:	4d0b      	ldr	r5, [pc, #44]	; (1bb14 <log_mgmt_impl_get_level+0x50>)
    if (!strcmp(name, "UNKNOWN")) {
   1bae8:	4908      	ldr	r1, [pc, #32]	; (1bb0c <log_mgmt_impl_get_level+0x48>)
   1baea:	4628      	mov	r0, r5
   1baec:	f7fb f81f 	bl	16b2e <strcmp>
   1baf0:	b150      	cbz	r0, 1bb08 <log_mgmt_impl_get_level+0x44>
        *out_level_name = name;
   1baf2:	6025      	str	r5, [r4, #0]
        return 0;
   1baf4:	2000      	movs	r0, #0
}
   1baf6:	bd38      	pop	{r3, r4, r5, pc}
    name = LOG_LEVEL_STR(idx);
   1baf8:	4d07      	ldr	r5, [pc, #28]	; (1bb18 <log_mgmt_impl_get_level+0x54>)
   1bafa:	e7f5      	b.n	1bae8 <log_mgmt_impl_get_level+0x24>
   1bafc:	4d07      	ldr	r5, [pc, #28]	; (1bb1c <log_mgmt_impl_get_level+0x58>)
   1bafe:	e7f3      	b.n	1bae8 <log_mgmt_impl_get_level+0x24>
   1bb00:	4d07      	ldr	r5, [pc, #28]	; (1bb20 <log_mgmt_impl_get_level+0x5c>)
   1bb02:	e7f1      	b.n	1bae8 <log_mgmt_impl_get_level+0x24>
        return LOG_MGMT_ERR_ENOENT;
   1bb04:	2005      	movs	r0, #5
}
   1bb06:	4770      	bx	lr
        return LOG_MGMT_ERR_ENOENT;
   1bb08:	2005      	movs	r0, #5
   1bb0a:	e7f4      	b.n	1baf6 <log_mgmt_impl_get_level+0x32>
   1bb0c:	00034650 	.word	0x00034650
   1bb10:	00034658 	.word	0x00034658
   1bb14:	00034630 	.word	0x00034630
   1bb18:	00034640 	.word	0x00034640
   1bb1c:	00034648 	.word	0x00034648
   1bb20:	00034638 	.word	0x00034638

0001bb24 <log_mgmt_impl_get_next_idx>:
    *out_idx = g_log_info.li_next_index;
   1bb24:	4b02      	ldr	r3, [pc, #8]	; (1bb30 <log_mgmt_impl_get_next_idx+0xc>)
   1bb26:	681b      	ldr	r3, [r3, #0]
   1bb28:	6003      	str	r3, [r0, #0]
}
   1bb2a:	2000      	movs	r0, #0
   1bb2c:	4770      	bx	lr
   1bb2e:	bf00      	nop
   1bb30:	10001bd0 	.word	0x10001bd0

0001bb34 <log_mgmt_impl_foreach_entry>:

int
log_mgmt_impl_foreach_entry(const char *log_name,
                            const struct log_mgmt_filter *filter,
                            log_mgmt_foreach_entry_fn *cb, void *arg)
{
   1bb34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb36:	b0a9      	sub	sp, #164	; 0xa4
   1bb38:	4604      	mov	r4, r0
   1bb3a:	460f      	mov	r7, r1
   1bb3c:	4616      	mov	r6, r2
   1bb3e:	461d      	mov	r5, r3
    struct mynewt_log_mgmt_walk_arg walk_arg;
    struct log_offset offset;
    struct log *log;

    walk_arg = (struct mynewt_log_mgmt_walk_arg) {
   1bb40:	2280      	movs	r2, #128	; 0x80
   1bb42:	2100      	movs	r1, #0
   1bb44:	a807      	add	r0, sp, #28
   1bb46:	f7fa ffd6 	bl	16af6 <memset>
   1bb4a:	9606      	str	r6, [sp, #24]
   1bb4c:	9527      	str	r5, [sp, #156]	; 0x9c
        .cb = cb,
        .arg = arg,
    };

    log = mynewt_log_mgmt_find_log(log_name);
   1bb4e:	4620      	mov	r0, r4
   1bb50:	f7ff ff1a 	bl	1b988 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   1bb54:	b1c0      	cbz	r0, 1bb88 <log_mgmt_impl_foreach_entry+0x54>
   1bb56:	4605      	mov	r5, r0
        return LOG_MGMT_ERR_ENOENT;
    }

    if (strcmp(log->l_name, log_name) == 0) {
   1bb58:	4621      	mov	r1, r4
   1bb5a:	6800      	ldr	r0, [r0, #0]
   1bb5c:	f7fa ffe7 	bl	16b2e <strcmp>
   1bb60:	b110      	cbz	r0, 1bb68 <log_mgmt_impl_foreach_entry+0x34>
        offset.lo_data_len = 0;

        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
    }

    return LOG_MGMT_ERR_ENOENT;
   1bb62:	2005      	movs	r0, #5
}
   1bb64:	b029      	add	sp, #164	; 0xa4
   1bb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        offset.lo_arg = &walk_arg;
   1bb68:	ab06      	add	r3, sp, #24
   1bb6a:	9304      	str	r3, [sp, #16]
        offset.lo_ts = filter->min_timestamp;
   1bb6c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1bb70:	e9cd 2300 	strd	r2, r3, [sp]
        offset.lo_index = filter->min_index;
   1bb74:	68bb      	ldr	r3, [r7, #8]
   1bb76:	9302      	str	r3, [sp, #8]
        offset.lo_data_len = 0;
   1bb78:	2300      	movs	r3, #0
   1bb7a:	9303      	str	r3, [sp, #12]
        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
   1bb7c:	466a      	mov	r2, sp
   1bb7e:	4903      	ldr	r1, [pc, #12]	; (1bb8c <log_mgmt_impl_foreach_entry+0x58>)
   1bb80:	4628      	mov	r0, r5
   1bb82:	f7fd fb4b 	bl	1921c <log_walk_body>
   1bb86:	e7ed      	b.n	1bb64 <log_mgmt_impl_foreach_entry+0x30>
        return LOG_MGMT_ERR_ENOENT;
   1bb88:	2005      	movs	r0, #5
   1bb8a:	e7eb      	b.n	1bb64 <log_mgmt_impl_foreach_entry+0x30>
   1bb8c:	0001b9a9 	.word	0x0001b9a9

0001bb90 <log_mgmt_impl_clear>:

int
log_mgmt_impl_clear(const char *log_name)
{
   1bb90:	b508      	push	{r3, lr}
    struct log *log;
    int rc;

    log = mynewt_log_mgmt_find_log(log_name);
   1bb92:	f7ff fef9 	bl	1b988 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   1bb96:	b118      	cbz	r0, 1bba0 <log_mgmt_impl_clear+0x10>
        return LOG_MGMT_ERR_ENOENT;
    }

    rc = log_flush(log);
   1bb98:	f7fd fbc0 	bl	1931c <log_flush>
    if (rc != 0) {
   1bb9c:	b910      	cbnz	r0, 1bba4 <log_mgmt_impl_clear+0x14>
        return LOG_MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1bb9e:	bd08      	pop	{r3, pc}
        return LOG_MGMT_ERR_ENOENT;
   1bba0:	2005      	movs	r0, #5
   1bba2:	e7fc      	b.n	1bb9e <log_mgmt_impl_clear+0xe>
        return LOG_MGMT_ERR_EUNKNOWN;
   1bba4:	2001      	movs	r0, #1
   1bba6:	e7fa      	b.n	1bb9e <log_mgmt_impl_clear+0xe>

0001bba8 <log_mgmt_module_init>:

void
log_mgmt_module_init(void)
{
   1bba8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bbaa:	4b08      	ldr	r3, [pc, #32]	; (1bbcc <log_mgmt_module_init+0x24>)
   1bbac:	781b      	ldrb	r3, [r3, #0]
   1bbae:	b113      	cbz	r3, 1bbb6 <log_mgmt_module_init+0xe>

    log_mgmt_register_group();
   1bbb0:	f017 ff9c 	bl	33aec <log_mgmt_register_group>
}
   1bbb4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bbb6:	f7f8 fd4d 	bl	14654 <hal_debugger_connected>
   1bbba:	b100      	cbz	r0, 1bbbe <log_mgmt_module_init+0x16>
   1bbbc:	be01      	bkpt	0x0001
   1bbbe:	2300      	movs	r3, #0
   1bbc0:	461a      	mov	r2, r3
   1bbc2:	4619      	mov	r1, r3
   1bbc4:	4618      	mov	r0, r3
   1bbc6:	f7f9 f8e7 	bl	14d98 <__assert_func>
   1bbca:	bf00      	nop
   1bbcc:	10001e3c 	.word	0x10001e3c

0001bbd0 <os_mgmt_reset>:
/**
 * Command handler: os reset
 */
static int
os_mgmt_reset(struct mgmt_ctxt *ctxt)
{
   1bbd0:	b508      	push	{r3, lr}
    return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   1bbd2:	20fa      	movs	r0, #250	; 0xfa
   1bbd4:	f000 f966 	bl	1bea4 <os_mgmt_impl_reset>
}
   1bbd8:	bd08      	pop	{r3, pc}
	...

0001bbdc <os_mgmt_taskstat_encode_one>:
{
   1bbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbde:	b085      	sub	sp, #20
   1bbe0:	4606      	mov	r6, r0
   1bbe2:	460d      	mov	r5, r1
    err |= cbor_encode_text_stringz(encoder, task_info->oti_name);
   1bbe4:	f101 0418 	add.w	r4, r1, #24
   1bbe8:	4620      	mov	r0, r4
   1bbea:	f7fa ffac 	bl	16b46 <strlen>
   1bbee:	4602      	mov	r2, r0
   1bbf0:	4621      	mov	r1, r4
   1bbf2:	4630      	mov	r0, r6
   1bbf4:	f012 fec2 	bl	2e97c <cbor_encode_text_string>
   1bbf8:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(encoder, &task_map, CborIndefiniteLength);
   1bbfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bbfe:	4669      	mov	r1, sp
   1bc00:	4630      	mov	r0, r6
   1bc02:	f012 fec7 	bl	2e994 <cbor_encoder_create_map>
   1bc06:	4304      	orrs	r4, r0
   1bc08:	2204      	movs	r2, #4
   1bc0a:	493c      	ldr	r1, [pc, #240]	; (1bcfc <os_mgmt_taskstat_encode_one+0x120>)
   1bc0c:	4668      	mov	r0, sp
   1bc0e:	f012 feb5 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "prio");
   1bc12:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_prio);
   1bc14:	782a      	ldrb	r2, [r5, #0]
   1bc16:	2300      	movs	r3, #0
   1bc18:	4668      	mov	r0, sp
   1bc1a:	f012 fe02 	bl	2e822 <cbor_encode_uint>
   1bc1e:	4304      	orrs	r4, r0
   1bc20:	2203      	movs	r2, #3
   1bc22:	4937      	ldr	r1, [pc, #220]	; (1bd00 <os_mgmt_taskstat_encode_one+0x124>)
   1bc24:	4668      	mov	r0, sp
   1bc26:	f012 fea9 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "tid");
   1bc2a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_taskid);
   1bc2c:	786a      	ldrb	r2, [r5, #1]
   1bc2e:	2300      	movs	r3, #0
   1bc30:	4668      	mov	r0, sp
   1bc32:	f012 fdf6 	bl	2e822 <cbor_encode_uint>
   1bc36:	4304      	orrs	r4, r0
   1bc38:	2205      	movs	r2, #5
   1bc3a:	4932      	ldr	r1, [pc, #200]	; (1bd04 <os_mgmt_taskstat_encode_one+0x128>)
   1bc3c:	4668      	mov	r0, sp
   1bc3e:	f012 fe9d 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "state");
   1bc42:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_state);
   1bc44:	78aa      	ldrb	r2, [r5, #2]
   1bc46:	2300      	movs	r3, #0
   1bc48:	4668      	mov	r0, sp
   1bc4a:	f012 fdea 	bl	2e822 <cbor_encode_uint>
   1bc4e:	4304      	orrs	r4, r0
   1bc50:	2206      	movs	r2, #6
   1bc52:	492d      	ldr	r1, [pc, #180]	; (1bd08 <os_mgmt_taskstat_encode_one+0x12c>)
   1bc54:	4668      	mov	r0, sp
   1bc56:	f012 fe91 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stkuse");
   1bc5a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stkusage);
   1bc5c:	88aa      	ldrh	r2, [r5, #4]
   1bc5e:	2300      	movs	r3, #0
   1bc60:	4668      	mov	r0, sp
   1bc62:	f012 fdde 	bl	2e822 <cbor_encode_uint>
   1bc66:	4304      	orrs	r4, r0
   1bc68:	2206      	movs	r2, #6
   1bc6a:	4928      	ldr	r1, [pc, #160]	; (1bd0c <os_mgmt_taskstat_encode_one+0x130>)
   1bc6c:	4668      	mov	r0, sp
   1bc6e:	f012 fe85 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stksiz");
   1bc72:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stksize);
   1bc74:	88ea      	ldrh	r2, [r5, #6]
   1bc76:	2300      	movs	r3, #0
   1bc78:	4668      	mov	r0, sp
   1bc7a:	f012 fdd2 	bl	2e822 <cbor_encode_uint>
   1bc7e:	4304      	orrs	r4, r0
   1bc80:	2206      	movs	r2, #6
   1bc82:	4923      	ldr	r1, [pc, #140]	; (1bd10 <os_mgmt_taskstat_encode_one+0x134>)
   1bc84:	4668      	mov	r0, sp
   1bc86:	f012 fe79 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "cswcnt");
   1bc8a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_cswcnt);
   1bc8c:	2700      	movs	r7, #0
   1bc8e:	68aa      	ldr	r2, [r5, #8]
   1bc90:	463b      	mov	r3, r7
   1bc92:	4668      	mov	r0, sp
   1bc94:	f012 fdc5 	bl	2e822 <cbor_encode_uint>
   1bc98:	4304      	orrs	r4, r0
   1bc9a:	2207      	movs	r2, #7
   1bc9c:	491d      	ldr	r1, [pc, #116]	; (1bd14 <os_mgmt_taskstat_encode_one+0x138>)
   1bc9e:	4668      	mov	r0, sp
   1bca0:	f012 fe6c 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "runtime");
   1bca4:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_runtime);
   1bca6:	68ea      	ldr	r2, [r5, #12]
   1bca8:	463b      	mov	r3, r7
   1bcaa:	4668      	mov	r0, sp
   1bcac:	f012 fdb9 	bl	2e822 <cbor_encode_uint>
   1bcb0:	4304      	orrs	r4, r0
   1bcb2:	220c      	movs	r2, #12
   1bcb4:	4918      	ldr	r1, [pc, #96]	; (1bd18 <os_mgmt_taskstat_encode_one+0x13c>)
   1bcb6:	4668      	mov	r0, sp
   1bcb8:	f012 fe60 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "last_checkin");
   1bcbc:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_last_checkin);
   1bcbe:	692a      	ldr	r2, [r5, #16]
   1bcc0:	463b      	mov	r3, r7
   1bcc2:	4668      	mov	r0, sp
   1bcc4:	f012 fdad 	bl	2e822 <cbor_encode_uint>
   1bcc8:	4304      	orrs	r4, r0
   1bcca:	220c      	movs	r2, #12
   1bccc:	4913      	ldr	r1, [pc, #76]	; (1bd1c <os_mgmt_taskstat_encode_one+0x140>)
   1bcce:	4668      	mov	r0, sp
   1bcd0:	f012 fe54 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "next_checkin");
   1bcd4:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_next_checkin);
   1bcd6:	696a      	ldr	r2, [r5, #20]
   1bcd8:	463b      	mov	r3, r7
   1bcda:	4668      	mov	r0, sp
   1bcdc:	f012 fda1 	bl	2e822 <cbor_encode_uint>
   1bce0:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(encoder, &task_map);
   1bce2:	4669      	mov	r1, sp
   1bce4:	4630      	mov	r0, r6
   1bce6:	f012 fe6a 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   1bcea:	ea54 0300 	orrs.w	r3, r4, r0
   1bcee:	d102      	bne.n	1bcf6 <os_mgmt_taskstat_encode_one+0x11a>
    return 0;
   1bcf0:	4638      	mov	r0, r7
}
   1bcf2:	b005      	add	sp, #20
   1bcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1bcf6:	2002      	movs	r0, #2
   1bcf8:	e7fb      	b.n	1bcf2 <os_mgmt_taskstat_encode_one+0x116>
   1bcfa:	bf00      	nop
   1bcfc:	00034664 	.word	0x00034664
   1bd00:	0003466c 	.word	0x0003466c
   1bd04:	00034670 	.word	0x00034670
   1bd08:	00034678 	.word	0x00034678
   1bd0c:	00034680 	.word	0x00034680
   1bd10:	00034688 	.word	0x00034688
   1bd14:	00034690 	.word	0x00034690
   1bd18:	00034698 	.word	0x00034698
   1bd1c:	000346a8 	.word	0x000346a8

0001bd20 <os_mgmt_taskstat_read>:
{
   1bd20:	b570      	push	{r4, r5, r6, lr}
   1bd22:	b092      	sub	sp, #72	; 0x48
   1bd24:	4606      	mov	r6, r0
   1bd26:	2205      	movs	r2, #5
   1bd28:	4918      	ldr	r1, [pc, #96]	; (1bd8c <os_mgmt_taskstat_read+0x6c>)
   1bd2a:	f012 fe27 	bl	2e97c <cbor_encode_text_string>
   1bd2e:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &tasks_map,
   1bd30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bd34:	4669      	mov	r1, sp
   1bd36:	4630      	mov	r0, r6
   1bd38:	f012 fe2c 	bl	2e994 <cbor_encoder_create_map>
    if (err != 0) {
   1bd3c:	ea50 0304 	orrs.w	r3, r0, r4
   1bd40:	d11f      	bne.n	1bd82 <os_mgmt_taskstat_read+0x62>
    for (task_idx = 0; ; task_idx++) {
   1bd42:	2500      	movs	r5, #0
   1bd44:	e000      	b.n	1bd48 <os_mgmt_taskstat_read+0x28>
   1bd46:	3501      	adds	r5, #1
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   1bd48:	a904      	add	r1, sp, #16
   1bd4a:	4628      	mov	r0, r5
   1bd4c:	f000 f883 	bl	1be56 <os_mgmt_impl_task_info>
   1bd50:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   1bd52:	2805      	cmp	r0, #5
   1bd54:	d00e      	beq.n	1bd74 <os_mgmt_taskstat_read+0x54>
        } else if (rc != 0) {
   1bd56:	b950      	cbnz	r0, 1bd6e <os_mgmt_taskstat_read+0x4e>
        rc = os_mgmt_taskstat_encode_one(&tasks_map, &task_info);
   1bd58:	a904      	add	r1, sp, #16
   1bd5a:	4668      	mov	r0, sp
   1bd5c:	f7ff ff3e 	bl	1bbdc <os_mgmt_taskstat_encode_one>
        if (rc != 0) {
   1bd60:	4604      	mov	r4, r0
   1bd62:	2800      	cmp	r0, #0
   1bd64:	d0ef      	beq.n	1bd46 <os_mgmt_taskstat_read+0x26>
            cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   1bd66:	4669      	mov	r1, sp
   1bd68:	4630      	mov	r0, r6
   1bd6a:	f012 fe28 	bl	2e9be <cbor_encoder_close_container>
}
   1bd6e:	4620      	mov	r0, r4
   1bd70:	b012      	add	sp, #72	; 0x48
   1bd72:	bd70      	pop	{r4, r5, r6, pc}
    err = cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   1bd74:	4669      	mov	r1, sp
   1bd76:	4630      	mov	r0, r6
   1bd78:	f012 fe21 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   1bd7c:	b918      	cbnz	r0, 1bd86 <os_mgmt_taskstat_read+0x66>
    return 0;
   1bd7e:	2400      	movs	r4, #0
   1bd80:	e7f5      	b.n	1bd6e <os_mgmt_taskstat_read+0x4e>
        return MGMT_ERR_ENOMEM;
   1bd82:	2402      	movs	r4, #2
   1bd84:	e7f3      	b.n	1bd6e <os_mgmt_taskstat_read+0x4e>
        return MGMT_ERR_ENOMEM;
   1bd86:	2402      	movs	r4, #2
   1bd88:	e7f1      	b.n	1bd6e <os_mgmt_taskstat_read+0x4e>
   1bd8a:	bf00      	nop
   1bd8c:	000346b8 	.word	0x000346b8

0001bd90 <os_mgmt_echo>:
{
   1bd90:	b530      	push	{r4, r5, lr}
   1bd92:	b0b9      	sub	sp, #228	; 0xe4
   1bd94:	4604      	mov	r4, r0
    const struct cbor_attr_t attrs[2] = {
   1bd96:	225c      	movs	r2, #92	; 0x5c
   1bd98:	2100      	movs	r1, #0
   1bd9a:	a801      	add	r0, sp, #4
   1bd9c:	f7fa feab 	bl	16af6 <memset>
   1bda0:	4b16      	ldr	r3, [pc, #88]	; (1bdfc <os_mgmt_echo+0x6c>)
   1bda2:	9300      	str	r3, [sp, #0]
   1bda4:	2304      	movs	r3, #4
   1bda6:	f88d 3004 	strb.w	r3, [sp, #4]
   1bdaa:	ab18      	add	r3, sp, #96	; 0x60
   1bdac:	9302      	str	r3, [sp, #8]
   1bdae:	2380      	movs	r3, #128	; 0x80
   1bdb0:	930a      	str	r3, [sp, #40]	; 0x28
   1bdb2:	2301      	movs	r3, #1
   1bdb4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    echo_buf[0] = '\0';
   1bdb8:	2300      	movs	r3, #0
   1bdba:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    err = cbor_read_object(&ctxt->it, attrs);
   1bdbe:	4669      	mov	r1, sp
   1bdc0:	f104 001c 	add.w	r0, r4, #28
   1bdc4:	f7fe ff1b 	bl	1abfe <cbor_read_object>
    if (err != 0) {
   1bdc8:	b9a0      	cbnz	r0, 1bdf4 <os_mgmt_echo+0x64>
   1bdca:	4605      	mov	r5, r0
   1bdcc:	2201      	movs	r2, #1
   1bdce:	490c      	ldr	r1, [pc, #48]	; (1be00 <os_mgmt_echo+0x70>)
   1bdd0:	4620      	mov	r0, r4
   1bdd2:	f012 fdd3 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
   1bdd6:	4305      	orrs	r5, r0
    err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   1bdd8:	a818      	add	r0, sp, #96	; 0x60
   1bdda:	f7fa feb4 	bl	16b46 <strlen>
   1bdde:	4602      	mov	r2, r0
   1bde0:	a918      	add	r1, sp, #96	; 0x60
   1bde2:	4620      	mov	r0, r4
   1bde4:	f012 fdca 	bl	2e97c <cbor_encode_text_string>
    if (err != 0) {
   1bde8:	ea55 0300 	orrs.w	r3, r5, r0
   1bdec:	d104      	bne.n	1bdf8 <os_mgmt_echo+0x68>
    return 0;
   1bdee:	2000      	movs	r0, #0
}
   1bdf0:	b039      	add	sp, #228	; 0xe4
   1bdf2:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_EINVAL;
   1bdf4:	2003      	movs	r0, #3
   1bdf6:	e7fb      	b.n	1bdf0 <os_mgmt_echo+0x60>
        return MGMT_ERR_ENOMEM;
   1bdf8:	2002      	movs	r0, #2
   1bdfa:	e7f9      	b.n	1bdf0 <os_mgmt_echo+0x60>
   1bdfc:	00034528 	.word	0x00034528
   1be00:	000346c0 	.word	0x000346c0

0001be04 <os_mgmt_register_group>:

void
os_mgmt_register_group(void)
{
   1be04:	b508      	push	{r3, lr}
    mgmt_register_group(&os_mgmt_group);
   1be06:	4802      	ldr	r0, [pc, #8]	; (1be10 <os_mgmt_register_group+0xc>)
   1be08:	f000 f938 	bl	1c07c <mgmt_register_group>
}
   1be0c:	bd08      	pop	{r3, pc}
   1be0e:	bf00      	nop
   1be10:	1000029c 	.word	0x1000029c

0001be14 <os_mgmt_module_init>:

void
os_mgmt_module_init(void)
{
   1be14:	b508      	push	{r3, lr}
    os_mgmt_register_group();
   1be16:	f7ff fff5 	bl	1be04 <os_mgmt_register_group>
}
   1be1a:	bd08      	pop	{r3, pc}

0001be1c <mynewt_os_mgmt_task_at>:
    return oti.oti_stkusage;
}

static const struct os_task *
mynewt_os_mgmt_task_at(int idx)
{
   1be1c:	4602      	mov	r2, r0
    const struct os_task *task;
    int i;

    task = STAILQ_FIRST(&g_os_task_list);
   1be1e:	4b05      	ldr	r3, [pc, #20]	; (1be34 <mynewt_os_mgmt_task_at+0x18>)
   1be20:	6818      	ldr	r0, [r3, #0]
    for (i = 0; i < idx; i++) {
   1be22:	2300      	movs	r3, #0
   1be24:	4293      	cmp	r3, r2
   1be26:	da03      	bge.n	1be30 <mynewt_os_mgmt_task_at+0x14>
        if (task == NULL) {
   1be28:	b110      	cbz	r0, 1be30 <mynewt_os_mgmt_task_at+0x14>
            break;
        }

        task = STAILQ_NEXT(task, t_os_task_list);
   1be2a:	6c00      	ldr	r0, [r0, #64]	; 0x40
    for (i = 0; i < idx; i++) {
   1be2c:	3301      	adds	r3, #1
   1be2e:	e7f9      	b.n	1be24 <mynewt_os_mgmt_task_at+0x8>
    }

    return task;
}
   1be30:	4770      	bx	lr
   1be32:	bf00      	nop
   1be34:	1000194c 	.word	0x1000194c

0001be38 <mynewt_os_mgmt_stack_usage>:
{
   1be38:	b500      	push	{lr}
   1be3a:	b08f      	sub	sp, #60	; 0x3c
    os_task_info_get(task, &oti);
   1be3c:	4669      	mov	r1, sp
   1be3e:	f7fa fb19 	bl	16474 <os_task_info_get>
}
   1be42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1be46:	b00f      	add	sp, #60	; 0x3c
   1be48:	f85d fb04 	ldr.w	pc, [sp], #4

0001be4c <mynewt_os_mgmt_reset_tmo>:
{
   1be4c:	b508      	push	{r3, lr}
    hal_watchdog_tickle();
   1be4e:	f015 f9ba 	bl	311c6 <hal_watchdog_tickle>
    hal_system_reset();
   1be52:	f7f8 fc07 	bl	14664 <hal_system_reset>

0001be56 <os_mgmt_impl_task_info>:

int
os_mgmt_impl_task_info(int idx, struct os_mgmt_task_info *out_info)
{
   1be56:	b538      	push	{r3, r4, r5, lr}
   1be58:	460c      	mov	r4, r1
    const struct os_task *task;

    task = mynewt_os_mgmt_task_at(idx);
   1be5a:	f7ff ffdf 	bl	1be1c <mynewt_os_mgmt_task_at>
    if (task == NULL) {
   1be5e:	b1f0      	cbz	r0, 1be9e <os_mgmt_impl_task_info+0x48>
   1be60:	4605      	mov	r5, r0
        return MGMT_ERR_ENOENT;
    }

    out_info->oti_prio = task->t_prio;
   1be62:	7ac3      	ldrb	r3, [r0, #11]
   1be64:	7023      	strb	r3, [r4, #0]
    out_info->oti_taskid = task->t_taskid;
   1be66:	7a83      	ldrb	r3, [r0, #10]
   1be68:	7063      	strb	r3, [r4, #1]
    out_info->oti_state = task->t_state;
   1be6a:	7b03      	ldrb	r3, [r0, #12]
   1be6c:	70a3      	strb	r3, [r4, #2]
    out_info->oti_stkusage = mynewt_os_mgmt_stack_usage(task);
   1be6e:	f7ff ffe3 	bl	1be38 <mynewt_os_mgmt_stack_usage>
   1be72:	80a0      	strh	r0, [r4, #4]
    out_info->oti_stksize = task->t_stacksize;
   1be74:	892b      	ldrh	r3, [r5, #8]
   1be76:	80e3      	strh	r3, [r4, #6]
    out_info->oti_cswcnt = task->t_ctx_sw_cnt;
   1be78:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1be7a:	60a3      	str	r3, [r4, #8]
    out_info->oti_runtime = task->t_run_time;
   1be7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1be7e:	60e3      	str	r3, [r4, #12]
    out_info->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   1be80:	6a2b      	ldr	r3, [r5, #32]
   1be82:	6123      	str	r3, [r4, #16]
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                                 task->t_sanity_check.sc_checkin_itvl;
   1be84:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   1be86:	4413      	add	r3, r2
   1be88:	6163      	str	r3, [r4, #20]
    strncpy(out_info->oti_name, task->t_name, sizeof out_info->oti_name - 1);
   1be8a:	221f      	movs	r2, #31
   1be8c:	6929      	ldr	r1, [r5, #16]
   1be8e:	f104 0018 	add.w	r0, r4, #24
   1be92:	f016 faa5 	bl	323e0 <strncpy>
    out_info->oti_name[sizeof out_info->oti_name - 1] = '\0';
   1be96:	2000      	movs	r0, #0
   1be98:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

    return 0;
}
   1be9c:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOENT;
   1be9e:	2005      	movs	r0, #5
   1bea0:	e7fc      	b.n	1be9c <os_mgmt_impl_task_info+0x46>
	...

0001bea4 <os_mgmt_impl_reset>:

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   1bea4:	b530      	push	{r4, r5, lr}
   1bea6:	b085      	sub	sp, #20
   1bea8:	4604      	mov	r4, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info = {
   1beaa:	2306      	movs	r3, #6
   1beac:	f8ad 3000 	strh.w	r3, [sp]
   1beb0:	2300      	movs	r3, #0
   1beb2:	9301      	str	r3, [sp, #4]
   1beb4:	9302      	str	r3, [sp, #8]
   1beb6:	9303      	str	r3, [sp, #12]
        .file = NULL,
        .line = 0,
        .pc = 0,
    };

    if (img_mgmt_state_any_pending()) {
   1beb8:	f7ff f970 	bl	1b19c <img_mgmt_state_any_pending>
   1bebc:	b110      	cbz	r0, 1bec4 <os_mgmt_impl_reset+0x20>
        info.reason = HAL_RESET_DFU;
   1bebe:	2308      	movs	r3, #8
   1bec0:	f8ad 3000 	strh.w	r3, [sp]
    }
#endif
    os_callout_init(&mynewt_os_mgmt_reset_callout, os_eventq_dflt_get(),
   1bec4:	f7f9 fb54 	bl	15570 <os_eventq_dflt_get>
   1bec8:	4601      	mov	r1, r0
   1beca:	4d0a      	ldr	r5, [pc, #40]	; (1bef4 <os_mgmt_impl_reset+0x50>)
   1becc:	2300      	movs	r3, #0
   1bece:	4a0a      	ldr	r2, [pc, #40]	; (1bef8 <os_mgmt_impl_reset+0x54>)
   1bed0:	4628      	mov	r0, r5
   1bed2:	f7f9 f90f 	bl	150f4 <os_callout_init>
                    mynewt_os_mgmt_reset_tmo, NULL);

#if MYNEWT_VAL(LOG_SOFT_RESET)
    log_reboot(&info);
   1bed6:	4668      	mov	r0, sp
   1bed8:	f7fe f854 	bl	19f84 <log_reboot>
#endif
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
                     delay_ms * OS_TICKS_PER_SEC / 1000);
   1bedc:	01e4      	lsls	r4, r4, #7
   1bede:	4907      	ldr	r1, [pc, #28]	; (1befc <os_mgmt_impl_reset+0x58>)
   1bee0:	fba1 3104 	umull	r3, r1, r1, r4
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
   1bee4:	0989      	lsrs	r1, r1, #6
   1bee6:	4628      	mov	r0, r5
   1bee8:	f7f9 f930 	bl	1514c <os_callout_reset>

    return 0;
}
   1beec:	2000      	movs	r0, #0
   1beee:	b005      	add	sp, #20
   1bef0:	bd30      	pop	{r4, r5, pc}
   1bef2:	bf00      	nop
   1bef4:	10001e7c 	.word	0x10001e7c
   1bef8:	0001be4d 	.word	0x0001be4d
   1befc:	10624dd3 	.word	0x10624dd3

0001bf00 <mynewt_stat_mgmt_walk_cb>:
}

static int
mynewt_stat_mgmt_walk_cb(struct stats_hdr *hdr, void *arg,
                         char *name, uint16_t off)
{
   1bf00:	b530      	push	{r4, r5, lr}
   1bf02:	b085      	sub	sp, #20
    struct stat_mgmt_entry entry;
    void *stat_val;

    walk_arg = arg;

    stat_val = (uint8_t *)hdr + off;
   1bf04:	18c5      	adds	r5, r0, r3
    switch (hdr->s_size) {
   1bf06:	7904      	ldrb	r4, [r0, #4]
   1bf08:	2c04      	cmp	r4, #4
   1bf0a:	d010      	beq.n	1bf2e <mynewt_stat_mgmt_walk_cb+0x2e>
   1bf0c:	2c08      	cmp	r4, #8
   1bf0e:	d013      	beq.n	1bf38 <mynewt_stat_mgmt_walk_cb+0x38>
   1bf10:	2c02      	cmp	r4, #2
   1bf12:	d001      	beq.n	1bf18 <mynewt_stat_mgmt_walk_cb+0x18>
   1bf14:	2001      	movs	r0, #1
   1bf16:	e008      	b.n	1bf2a <mynewt_stat_mgmt_walk_cb+0x2a>
    case sizeof (uint16_t):
        entry.value = *(uint16_t *) stat_val;
   1bf18:	5ac4      	ldrh	r4, [r0, r3]
   1bf1a:	2500      	movs	r5, #0
   1bf1c:	e9cd 4502 	strd	r4, r5, [sp, #8]
        entry.value = *(uint64_t *) stat_val;
        break;
    default:
        return MGMT_ERR_EUNKNOWN;
    }
    entry.name = name;
   1bf20:	9200      	str	r2, [sp, #0]

    return walk_arg->cb(&entry, walk_arg->arg);
   1bf22:	680b      	ldr	r3, [r1, #0]
   1bf24:	6849      	ldr	r1, [r1, #4]
   1bf26:	4668      	mov	r0, sp
   1bf28:	4798      	blx	r3
}
   1bf2a:	b005      	add	sp, #20
   1bf2c:	bd30      	pop	{r4, r5, pc}
        entry.value = *(uint32_t *) stat_val;
   1bf2e:	58c3      	ldr	r3, [r0, r3]
   1bf30:	9302      	str	r3, [sp, #8]
   1bf32:	2300      	movs	r3, #0
   1bf34:	9303      	str	r3, [sp, #12]
        break;
   1bf36:	e7f3      	b.n	1bf20 <mynewt_stat_mgmt_walk_cb+0x20>
        entry.value = *(uint64_t *) stat_val;
   1bf38:	e9d5 4500 	ldrd	r4, r5, [r5]
   1bf3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
        break;
   1bf40:	e7ee      	b.n	1bf20 <mynewt_stat_mgmt_walk_cb+0x20>
	...

0001bf44 <stat_mgmt_impl_get_group>:
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1bf44:	4b07      	ldr	r3, [pc, #28]	; (1bf64 <stat_mgmt_impl_get_group+0x20>)
   1bf46:	681b      	ldr	r3, [r3, #0]
    i = 0;
   1bf48:	2200      	movs	r2, #0
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1bf4a:	b123      	cbz	r3, 1bf56 <stat_mgmt_impl_get_group+0x12>
        if (i == idx) {
   1bf4c:	4282      	cmp	r2, r0
   1bf4e:	d007      	beq.n	1bf60 <stat_mgmt_impl_get_group+0x1c>
        i++;
   1bf50:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   1bf52:	689b      	ldr	r3, [r3, #8]
   1bf54:	e7f9      	b.n	1bf4a <stat_mgmt_impl_get_group+0x6>
    rc = MGMT_ERR_ENOENT;
   1bf56:	2005      	movs	r0, #5
    if (!rc) {
   1bf58:	b908      	cbnz	r0, 1bf5e <stat_mgmt_impl_get_group+0x1a>
        *out_name = cur->s_name;
   1bf5a:	681b      	ldr	r3, [r3, #0]
   1bf5c:	600b      	str	r3, [r1, #0]
}
   1bf5e:	4770      	bx	lr
            rc = 0;
   1bf60:	2000      	movs	r0, #0
   1bf62:	e7f9      	b.n	1bf58 <stat_mgmt_impl_get_group+0x14>
   1bf64:	10000284 	.word	0x10000284

0001bf68 <stat_mgmt_impl_foreach_entry>:

int
stat_mgmt_impl_foreach_entry(const char *group_name,
                             stat_mgmt_foreach_entry_fn *cb,
                             void *arg)
{
   1bf68:	b530      	push	{r4, r5, lr}
   1bf6a:	b083      	sub	sp, #12
   1bf6c:	460d      	mov	r5, r1
   1bf6e:	4614      	mov	r4, r2
    struct mynewt_stat_mgmt_walk_arg walk_arg;
    struct stats_hdr *hdr;

    hdr = stats_group_find(group_name);
   1bf70:	f7fe f934 	bl	1a1dc <stats_group_find>
    if (hdr == NULL) {
   1bf74:	b138      	cbz	r0, 1bf86 <stat_mgmt_impl_foreach_entry+0x1e>
        return MGMT_ERR_ENOENT;
    }

    walk_arg = (struct mynewt_stat_mgmt_walk_arg) {
   1bf76:	9500      	str	r5, [sp, #0]
   1bf78:	9401      	str	r4, [sp, #4]
        .cb = cb,
        .arg = arg,
    };

    return stats_walk(hdr, mynewt_stat_mgmt_walk_cb, &walk_arg);
   1bf7a:	466a      	mov	r2, sp
   1bf7c:	4903      	ldr	r1, [pc, #12]	; (1bf8c <stat_mgmt_impl_foreach_entry+0x24>)
   1bf7e:	f7fe f89f 	bl	1a0c0 <stats_walk>
}
   1bf82:	b003      	add	sp, #12
   1bf84:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOENT;
   1bf86:	2005      	movs	r0, #5
   1bf88:	e7fb      	b.n	1bf82 <stat_mgmt_impl_foreach_entry+0x1a>
   1bf8a:	bf00      	nop
   1bf8c:	0001bf01 	.word	0x0001bf01

0001bf90 <stat_mgmt_module_init>:

void
stat_mgmt_module_init(void)
{
   1bf90:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1bf92:	4b08      	ldr	r3, [pc, #32]	; (1bfb4 <stat_mgmt_module_init+0x24>)
   1bf94:	781b      	ldrb	r3, [r3, #0]
   1bf96:	b113      	cbz	r3, 1bf9e <stat_mgmt_module_init+0xe>

    stat_mgmt_register_group();
   1bf98:	f017 fe6e 	bl	33c78 <stat_mgmt_register_group>
}
   1bf9c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1bf9e:	f7f8 fb59 	bl	14654 <hal_debugger_connected>
   1bfa2:	b100      	cbz	r0, 1bfa6 <stat_mgmt_module_init+0x16>
   1bfa4:	be01      	bkpt	0x0001
   1bfa6:	2300      	movs	r3, #0
   1bfa8:	461a      	mov	r2, r3
   1bfaa:	4619      	mov	r1, r3
   1bfac:	4618      	mov	r0, r3
   1bfae:	f7f8 fef3 	bl	14d98 <__assert_func>
   1bfb2:	bf00      	nop
   1bfb4:	10001e3c 	.word	0x10001e3c

0001bfb8 <mgmt_find_group>:
    }
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id, uint16_t command_id)
{
   1bfb8:	4602      	mov	r2, r0
     * Find the group with the specified group id, if one exists
     * check the handler for the command id and make sure
     * that is not NULL. If that is not set, look for the group
     * with a command id that is set
     */
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   1bfba:	4b12      	ldr	r3, [pc, #72]	; (1c004 <mgmt_find_group+0x4c>)
   1bfbc:	6818      	ldr	r0, [r3, #0]
   1bfbe:	b1f0      	cbz	r0, 1bffe <mgmt_find_group+0x46>
        if (group->mg_group_id == group_id) {
   1bfc0:	8943      	ldrh	r3, [r0, #10]
   1bfc2:	4293      	cmp	r3, r2
   1bfc4:	d016      	beq.n	1bff4 <mgmt_find_group+0x3c>
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   1bfc6:	6800      	ldr	r0, [r0, #0]
   1bfc8:	e7f9      	b.n	1bfbe <mgmt_find_group+0x6>
   1bfca:	6800      	ldr	r0, [r0, #0]
   1bfcc:	b170      	cbz	r0, 1bfec <mgmt_find_group+0x34>
        if (group->mg_group_id == group_id) {
   1bfce:	8943      	ldrh	r3, [r0, #10]
   1bfd0:	4293      	cmp	r3, r2
   1bfd2:	d1fa      	bne.n	1bfca <mgmt_find_group+0x12>
            if (command_id >= group->mg_handlers_count) {
   1bfd4:	8903      	ldrh	r3, [r0, #8]
   1bfd6:	428b      	cmp	r3, r1
   1bfd8:	d90a      	bls.n	1bff0 <mgmt_find_group+0x38>
                return NULL;
            }

            if (!group->mg_handlers[command_id].mh_read &&
   1bfda:	6843      	ldr	r3, [r0, #4]
   1bfdc:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
   1bfe0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   1bfe4:	b913      	cbnz	r3, 1bfec <mgmt_find_group+0x34>
                !group->mg_handlers[command_id].mh_write) {
   1bfe6:	6863      	ldr	r3, [r4, #4]
            if (!group->mg_handlers[command_id].mh_read &&
   1bfe8:	2b00      	cmp	r3, #0
   1bfea:	d0ee      	beq.n	1bfca <mgmt_find_group+0x12>
            break;
        }
    }

    return group;
}
   1bfec:	bc10      	pop	{r4}
   1bfee:	4770      	bx	lr
                return NULL;
   1bff0:	2000      	movs	r0, #0
   1bff2:	e7fb      	b.n	1bfec <mgmt_find_group+0x34>
            if (command_id >= group->mg_handlers_count) {
   1bff4:	8903      	ldrh	r3, [r0, #8]
   1bff6:	428b      	cmp	r3, r1
   1bff8:	d902      	bls.n	1c000 <mgmt_find_group+0x48>
{
   1bffa:	b410      	push	{r4}
   1bffc:	e7ed      	b.n	1bfda <mgmt_find_group+0x22>
   1bffe:	4770      	bx	lr
                return NULL;
   1c000:	2000      	movs	r0, #0
}
   1c002:	4770      	bx	lr
   1c004:	10001ea0 	.word	0x10001ea0

0001c008 <mgmt_streamer_alloc_rsp>:
{
   1c008:	b508      	push	{r3, lr}
   1c00a:	4603      	mov	r3, r0
   1c00c:	4608      	mov	r0, r1
    return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   1c00e:	681a      	ldr	r2, [r3, #0]
   1c010:	6812      	ldr	r2, [r2, #0]
   1c012:	6859      	ldr	r1, [r3, #4]
   1c014:	4790      	blx	r2
}
   1c016:	bd08      	pop	{r3, pc}

0001c018 <mgmt_streamer_trim_front>:
{
   1c018:	b510      	push	{r4, lr}
   1c01a:	4603      	mov	r3, r0
   1c01c:	4608      	mov	r0, r1
   1c01e:	4611      	mov	r1, r2
    streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   1c020:	681a      	ldr	r2, [r3, #0]
   1c022:	6854      	ldr	r4, [r2, #4]
   1c024:	685a      	ldr	r2, [r3, #4]
   1c026:	47a0      	blx	r4
}
   1c028:	bd10      	pop	{r4, pc}

0001c02a <mgmt_streamer_reset_buf>:
{
   1c02a:	b508      	push	{r3, lr}
   1c02c:	4603      	mov	r3, r0
   1c02e:	4608      	mov	r0, r1
    streamer->cfg->reset_buf(buf, streamer->cb_arg);
   1c030:	681a      	ldr	r2, [r3, #0]
   1c032:	6892      	ldr	r2, [r2, #8]
   1c034:	6859      	ldr	r1, [r3, #4]
   1c036:	4790      	blx	r2
}
   1c038:	bd08      	pop	{r3, pc}

0001c03a <mgmt_streamer_write_at>:
{
   1c03a:	b530      	push	{r4, r5, lr}
   1c03c:	b083      	sub	sp, #12
    return streamer->cfg->write_at(streamer->writer, offset, data, len,
   1c03e:	6804      	ldr	r4, [r0, #0]
   1c040:	68e4      	ldr	r4, [r4, #12]
   1c042:	6845      	ldr	r5, [r0, #4]
   1c044:	9500      	str	r5, [sp, #0]
   1c046:	68c0      	ldr	r0, [r0, #12]
   1c048:	47a0      	blx	r4
}
   1c04a:	b003      	add	sp, #12
   1c04c:	bd30      	pop	{r4, r5, pc}

0001c04e <mgmt_streamer_init_reader>:
{
   1c04e:	b508      	push	{r3, lr}
    return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
   1c050:	6803      	ldr	r3, [r0, #0]
   1c052:	691b      	ldr	r3, [r3, #16]
   1c054:	6842      	ldr	r2, [r0, #4]
   1c056:	6880      	ldr	r0, [r0, #8]
   1c058:	4798      	blx	r3
}
   1c05a:	bd08      	pop	{r3, pc}

0001c05c <mgmt_streamer_init_writer>:
{
   1c05c:	b508      	push	{r3, lr}
    return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
   1c05e:	6803      	ldr	r3, [r0, #0]
   1c060:	695b      	ldr	r3, [r3, #20]
   1c062:	6842      	ldr	r2, [r0, #4]
   1c064:	68c0      	ldr	r0, [r0, #12]
   1c066:	4798      	blx	r3
}
   1c068:	bd08      	pop	{r3, pc}

0001c06a <mgmt_streamer_free_buf>:
{
   1c06a:	b508      	push	{r3, lr}
   1c06c:	4603      	mov	r3, r0
   1c06e:	4608      	mov	r0, r1
    streamer->cfg->free_buf(buf, streamer->cb_arg);
   1c070:	681a      	ldr	r2, [r3, #0]
   1c072:	6992      	ldr	r2, [r2, #24]
   1c074:	6859      	ldr	r1, [r3, #4]
   1c076:	4790      	blx	r2
}
   1c078:	bd08      	pop	{r3, pc}
	...

0001c07c <mgmt_register_group>:

void
mgmt_register_group(struct mgmt_group *group)
{
    if (mgmt_group_list_end == NULL) {
   1c07c:	4b04      	ldr	r3, [pc, #16]	; (1c090 <mgmt_register_group+0x14>)
   1c07e:	681b      	ldr	r3, [r3, #0]
   1c080:	b11b      	cbz	r3, 1c08a <mgmt_register_group+0xe>
        mgmt_group_list = group;
    } else {
        mgmt_group_list_end->mg_next = group;
   1c082:	6018      	str	r0, [r3, #0]
    }
    mgmt_group_list_end = group;
   1c084:	4b02      	ldr	r3, [pc, #8]	; (1c090 <mgmt_register_group+0x14>)
   1c086:	6018      	str	r0, [r3, #0]
}
   1c088:	4770      	bx	lr
        mgmt_group_list = group;
   1c08a:	4b02      	ldr	r3, [pc, #8]	; (1c094 <mgmt_register_group+0x18>)
   1c08c:	6018      	str	r0, [r3, #0]
   1c08e:	e7f9      	b.n	1c084 <mgmt_register_group+0x8>
   1c090:	10001ea4 	.word	0x10001ea4
   1c094:	10001ea0 	.word	0x10001ea0

0001c098 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   1c098:	b510      	push	{r4, lr}
   1c09a:	460c      	mov	r4, r1
    const struct mgmt_group *group;

    group = mgmt_find_group(group_id, command_id);
   1c09c:	f7ff ff8c 	bl	1bfb8 <mgmt_find_group>
    if (!group) {
   1c0a0:	4603      	mov	r3, r0
   1c0a2:	b110      	cbz	r0, 1c0aa <mgmt_find_handler+0x12>
        return NULL;
    }

    return &group->mg_handlers[command_id];
   1c0a4:	6843      	ldr	r3, [r0, #4]
   1c0a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
}
   1c0aa:	4618      	mov	r0, r3
   1c0ac:	bd10      	pop	{r4, pc}
	...

0001c0b0 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   1c0b0:	b538      	push	{r3, r4, r5, lr}
   1c0b2:	4604      	mov	r4, r0
   1c0b4:	460d      	mov	r5, r1
   1c0b6:	2202      	movs	r2, #2
   1c0b8:	4905      	ldr	r1, [pc, #20]	; (1c0d0 <mgmt_write_rsp_status+0x20>)
   1c0ba:	f012 fc5f 	bl	2e97c <cbor_encode_text_string>
    int rc;

    rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
    if (rc != 0) {
   1c0be:	b100      	cbz	r0, 1c0c2 <mgmt_write_rsp_status+0x12>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c0c0:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&ctxt->encoder, errcode);
   1c0c2:	462a      	mov	r2, r5
   1c0c4:	17eb      	asrs	r3, r5, #31
   1c0c6:	4620      	mov	r0, r4
   1c0c8:	f012 fbe3 	bl	2e892 <cbor_encode_int>
    if (rc != 0) {
   1c0cc:	e7f8      	b.n	1c0c0 <mgmt_write_rsp_status+0x10>
   1c0ce:	bf00      	nop
   1c0d0:	00034260 	.word	0x00034260

0001c0d4 <mgmt_err_from_cbor>:

int
mgmt_err_from_cbor(int cbor_status)
{
    switch (cbor_status) {
   1c0d4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1c0d8:	d001      	beq.n	1c0de <mgmt_err_from_cbor+0xa>
   1c0da:	b910      	cbnz	r0, 1c0e2 <mgmt_err_from_cbor+0xe>
   1c0dc:	4770      	bx	lr
        case CborNoError:           return MGMT_ERR_EOK;
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
   1c0de:	2002      	movs	r0, #2
   1c0e0:	4770      	bx	lr
        default:                    return MGMT_ERR_EUNKNOWN;
   1c0e2:	2001      	movs	r0, #1
    }
}
   1c0e4:	4770      	bx	lr

0001c0e6 <mgmt_ctxt_init>:

int
mgmt_ctxt_init(struct mgmt_ctxt *ctxt, struct mgmt_streamer *streamer)
{
   1c0e6:	b570      	push	{r4, r5, r6, lr}
   1c0e8:	4604      	mov	r4, r0
   1c0ea:	460d      	mov	r5, r1
    int rc;

    rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   1c0ec:	f100 031c 	add.w	r3, r0, #28
   1c0f0:	f100 0210 	add.w	r2, r0, #16
   1c0f4:	2100      	movs	r1, #0
   1c0f6:	68a8      	ldr	r0, [r5, #8]
   1c0f8:	f012 ff27 	bl	2ef4a <cbor_parser_init>
    if (rc != CborNoError) {
   1c0fc:	4606      	mov	r6, r0
   1c0fe:	b120      	cbz	r0, 1c10a <mgmt_ctxt_init+0x24>
        return mgmt_err_from_cbor(rc);
   1c100:	f7ff ffe8 	bl	1c0d4 <mgmt_err_from_cbor>
   1c104:	4606      	mov	r6, r0
    }

    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);

    return 0;
}
   1c106:	4630      	mov	r0, r6
   1c108:	bd70      	pop	{r4, r5, r6, pc}
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   1c10a:	2200      	movs	r2, #0
   1c10c:	68e9      	ldr	r1, [r5, #12]
   1c10e:	4620      	mov	r0, r4
   1c110:	f012 fb82 	bl	2e818 <cbor_encoder_init>
    return 0;
   1c114:	e7f7      	b.n	1c106 <mgmt_ctxt_init+0x20>

0001c116 <mgmt_ntoh_hdr>:

void
mgmt_ntoh_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = ntohs(hdr->nh_len);
   1c116:	8842      	ldrh	r2, [r0, #2]
   1c118:	0213      	lsls	r3, r2, #8
   1c11a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c11e:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = ntohs(hdr->nh_group);
   1c120:	8882      	ldrh	r2, [r0, #4]
   1c122:	0213      	lsls	r3, r2, #8
   1c124:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c128:	8083      	strh	r3, [r0, #4]
}
   1c12a:	4770      	bx	lr

0001c12c <mgmt_hton_hdr>:

void
mgmt_hton_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = htons(hdr->nh_len);
   1c12c:	8842      	ldrh	r2, [r0, #2]
   1c12e:	0213      	lsls	r3, r2, #8
   1c130:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c134:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(hdr->nh_group);
   1c136:	8882      	ldrh	r2, [r0, #4]
   1c138:	0213      	lsls	r3, r2, #8
   1c13a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1c13e:	8083      	strh	r3, [r0, #4]
}
   1c140:	4770      	bx	lr
	...

0001c144 <mgmt_evt>:
    evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   1c144:	b510      	push	{r4, lr}
    if (evt_cb) {
   1c146:	4c02      	ldr	r4, [pc, #8]	; (1c150 <mgmt_evt+0xc>)
   1c148:	6824      	ldr	r4, [r4, #0]
   1c14a:	b104      	cbz	r4, 1c14e <mgmt_evt+0xa>
        evt_cb(opcode, group, id, arg);
   1c14c:	47a0      	blx	r4
    }
}
   1c14e:	bd10      	pop	{r4, pc}
   1c150:	10001e9c 	.word	0x10001e9c

0001c154 <smp_align4>:
static int
smp_align4(int x)
{
    int rem;

    rem = x % 4;
   1c154:	4243      	negs	r3, r0
   1c156:	f000 0203 	and.w	r2, r0, #3
   1c15a:	f003 0303 	and.w	r3, r3, #3
   1c15e:	bf58      	it	pl
   1c160:	425a      	negpl	r2, r3
    if (rem == 0) {
   1c162:	f010 0f03 	tst.w	r0, #3
   1c166:	d001      	beq.n	1c16c <smp_align4+0x18>
        return x;
    } else {
        return x - rem + 4;
   1c168:	1a80      	subs	r0, r0, r2
   1c16a:	3004      	adds	r0, #4
    }
}
   1c16c:	4770      	bx	lr

0001c16e <smp_rsp_op>:
 * Converts a request opcode to its corresponding response opcode.
 */
static uint8_t
smp_rsp_op(uint8_t req_op)
{
    if (req_op == MGMT_OP_READ) {
   1c16e:	b908      	cbnz	r0, 1c174 <smp_rsp_op+0x6>
        return MGMT_OP_READ_RSP;
   1c170:	2001      	movs	r0, #1
   1c172:	4770      	bx	lr
    } else {
        return MGMT_OP_WRITE_RSP;
   1c174:	2003      	movs	r0, #3
    }
}
   1c176:	4770      	bx	lr

0001c178 <smp_init_rsp_hdr>:

static void
smp_init_rsp_hdr(const struct mgmt_hdr *req_hdr, struct mgmt_hdr *rsp_hdr)
{
   1c178:	b570      	push	{r4, r5, r6, lr}
   1c17a:	4605      	mov	r5, r0
   1c17c:	460c      	mov	r4, r1
    *rsp_hdr = (struct mgmt_hdr) {
        .nh_len = 0,
        .nh_flags = 0,
        .nh_op = smp_rsp_op(req_hdr->nh_op),
   1c17e:	7800      	ldrb	r0, [r0, #0]
   1c180:	f000 0007 	and.w	r0, r0, #7
   1c184:	f7ff fff3 	bl	1c16e <smp_rsp_op>
        .nh_group = req_hdr->nh_group,
   1c188:	88ae      	ldrh	r6, [r5, #4]
        .nh_seq = req_hdr->nh_seq,
   1c18a:	79a9      	ldrb	r1, [r5, #6]
        .nh_id = req_hdr->nh_id,
   1c18c:	79ea      	ldrb	r2, [r5, #7]
    *rsp_hdr = (struct mgmt_hdr) {
   1c18e:	2300      	movs	r3, #0
   1c190:	6023      	str	r3, [r4, #0]
   1c192:	7823      	ldrb	r3, [r4, #0]
   1c194:	f360 0302 	bfi	r3, r0, #0, #3
   1c198:	7023      	strb	r3, [r4, #0]
   1c19a:	80a6      	strh	r6, [r4, #4]
   1c19c:	71a1      	strb	r1, [r4, #6]
   1c19e:	71e2      	strb	r2, [r4, #7]
    };
}
   1c1a0:	bd70      	pop	{r4, r5, r6, pc}

0001c1a2 <smp_read_hdr>:
static int
smp_read_hdr(struct smp_streamer *streamer, struct mgmt_hdr *dst_hdr)
{
    struct cbor_decoder_reader *reader;

    reader = streamer->mgmt_stmr.reader;
   1c1a2:	6880      	ldr	r0, [r0, #8]

    if (reader->message_size < sizeof *dst_hdr) {
   1c1a4:	6983      	ldr	r3, [r0, #24]
   1c1a6:	2b07      	cmp	r3, #7
   1c1a8:	d906      	bls.n	1c1b8 <smp_read_hdr+0x16>
{
   1c1aa:	b510      	push	{r4, lr}
        return MGMT_ERR_EINVAL;
    }

    reader->cpy(reader, (char *)dst_hdr, 0, sizeof *dst_hdr);
   1c1ac:	6944      	ldr	r4, [r0, #20]
   1c1ae:	2308      	movs	r3, #8
   1c1b0:	2200      	movs	r2, #0
   1c1b2:	47a0      	blx	r4
    return 0;
   1c1b4:	2000      	movs	r0, #0
}
   1c1b6:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   1c1b8:	2003      	movs	r0, #3
}
   1c1ba:	4770      	bx	lr

0001c1bc <smp_handle_single_payload>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_payload(struct mgmt_ctxt *cbuf,
                          const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   1c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1be:	b085      	sub	sp, #20
   1c1c0:	4605      	mov	r5, r0
   1c1c2:	460c      	mov	r4, r1
   1c1c4:	4616      	mov	r6, r2
    const struct mgmt_handler *handler;
    mgmt_handler_fn *handler_fn;
    struct CborEncoder payload_encoder;
    int rc;

    handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   1c1c6:	79c9      	ldrb	r1, [r1, #7]
   1c1c8:	88a0      	ldrh	r0, [r4, #4]
   1c1ca:	f7ff ff65 	bl	1c098 <mgmt_find_handler>
    if (handler == NULL) {
   1c1ce:	b370      	cbz	r0, 1c22e <smp_handle_single_payload+0x72>
   1c1d0:	4607      	mov	r7, r0
    }

    /* Begin response payload.  Response fields are inserted into the root
     * map as key value pairs.
     */
    rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   1c1d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c1d6:	4669      	mov	r1, sp
   1c1d8:	4628      	mov	r0, r5
   1c1da:	f012 fbdb 	bl	2e994 <cbor_encoder_create_map>
                                 CborIndefiniteLength);
    rc = mgmt_err_from_cbor(rc);
   1c1de:	f7ff ff79 	bl	1c0d4 <mgmt_err_from_cbor>
    if (rc != 0) {
   1c1e2:	4603      	mov	r3, r0
   1c1e4:	b930      	cbnz	r0, 1c1f4 <smp_handle_single_payload+0x38>
        return rc;
    }

    switch (req_hdr->nh_op) {
   1c1e6:	7823      	ldrb	r3, [r4, #0]
   1c1e8:	f013 0307 	ands.w	r3, r3, #7
   1c1ec:	d005      	beq.n	1c1fa <smp_handle_single_payload+0x3e>
   1c1ee:	2b02      	cmp	r3, #2
   1c1f0:	d019      	beq.n	1c226 <smp_handle_single_payload+0x6a>
   1c1f2:	2303      	movs	r3, #3
    }

    /* End response payload. */
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
    return mgmt_err_from_cbor(rc);
}
   1c1f4:	4618      	mov	r0, r3
   1c1f6:	b005      	add	sp, #20
   1c1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        handler_fn = handler->mh_read;
   1c1fa:	683f      	ldr	r7, [r7, #0]
    if (handler_fn) {
   1c1fc:	b1af      	cbz	r7, 1c22a <smp_handle_single_payload+0x6e>
        *handler_found = true;
   1c1fe:	2001      	movs	r0, #1
   1c200:	7030      	strb	r0, [r6, #0]
        mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   1c202:	2300      	movs	r3, #0
   1c204:	79e2      	ldrb	r2, [r4, #7]
   1c206:	88a1      	ldrh	r1, [r4, #4]
   1c208:	f7ff ff9c 	bl	1c144 <mgmt_evt>
        rc = handler_fn(cbuf);
   1c20c:	4628      	mov	r0, r5
   1c20e:	47b8      	blx	r7
    if (rc != 0) {
   1c210:	4603      	mov	r3, r0
   1c212:	2800      	cmp	r0, #0
   1c214:	d1ee      	bne.n	1c1f4 <smp_handle_single_payload+0x38>
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   1c216:	4669      	mov	r1, sp
   1c218:	4628      	mov	r0, r5
   1c21a:	f012 fbd0 	bl	2e9be <cbor_encoder_close_container>
    return mgmt_err_from_cbor(rc);
   1c21e:	f7ff ff59 	bl	1c0d4 <mgmt_err_from_cbor>
   1c222:	4603      	mov	r3, r0
   1c224:	e7e6      	b.n	1c1f4 <smp_handle_single_payload+0x38>
        handler_fn = handler->mh_write;
   1c226:	687f      	ldr	r7, [r7, #4]
        break;
   1c228:	e7e8      	b.n	1c1fc <smp_handle_single_payload+0x40>
        rc = MGMT_ERR_ENOTSUP;
   1c22a:	2308      	movs	r3, #8
        return rc;
   1c22c:	e7e2      	b.n	1c1f4 <smp_handle_single_payload+0x38>
        return MGMT_ERR_ENOTSUP;
   1c22e:	2308      	movs	r3, #8
   1c230:	e7e0      	b.n	1c1f4 <smp_handle_single_payload+0x38>

0001c232 <smp_write_hdr>:
{
   1c232:	b508      	push	{r3, lr}
   1c234:	460a      	mov	r2, r1
    rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr,
   1c236:	2308      	movs	r3, #8
   1c238:	2100      	movs	r1, #0
   1c23a:	f7ff fefe 	bl	1c03a <mgmt_streamer_write_at>
    return mgmt_err_from_cbor(rc);
   1c23e:	f7ff ff49 	bl	1c0d4 <mgmt_err_from_cbor>
}
   1c242:	bd08      	pop	{r3, pc}

0001c244 <smp_handle_single_req>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_req(struct smp_streamer *streamer,
                      const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   1c244:	b570      	push	{r4, r5, r6, lr}
   1c246:	b08e      	sub	sp, #56	; 0x38
   1c248:	4604      	mov	r4, r0
   1c24a:	460d      	mov	r5, r1
   1c24c:	4616      	mov	r6, r2
    struct mgmt_ctxt cbuf;
    struct mgmt_hdr rsp_hdr;
    int rc;

    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   1c24e:	4601      	mov	r1, r0
   1c250:	a803      	add	r0, sp, #12
   1c252:	f7ff ff48 	bl	1c0e6 <mgmt_ctxt_init>
    if (rc != 0) {
   1c256:	4603      	mov	r3, r0
   1c258:	b110      	cbz	r0, 1c260 <smp_handle_single_req+0x1c>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c25a:	4618      	mov	r0, r3
   1c25c:	b00e      	add	sp, #56	; 0x38
   1c25e:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   1c260:	a901      	add	r1, sp, #4
   1c262:	4628      	mov	r0, r5
   1c264:	f7ff ff88 	bl	1c178 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c268:	a901      	add	r1, sp, #4
   1c26a:	4620      	mov	r0, r4
   1c26c:	f7ff ffe1 	bl	1c232 <smp_write_hdr>
    if (rc != 0) {
   1c270:	4603      	mov	r3, r0
   1c272:	2800      	cmp	r0, #0
   1c274:	d1f1      	bne.n	1c25a <smp_handle_single_req+0x16>
    rc = smp_handle_single_payload(&cbuf, req_hdr, handler_found);
   1c276:	4632      	mov	r2, r6
   1c278:	4629      	mov	r1, r5
   1c27a:	a803      	add	r0, sp, #12
   1c27c:	f7ff ff9e 	bl	1c1bc <smp_handle_single_payload>
    if (rc != 0) {
   1c280:	4603      	mov	r3, r0
   1c282:	2800      	cmp	r0, #0
   1c284:	d1e9      	bne.n	1c25a <smp_handle_single_req+0x16>
{   return encoder->writer->bytes_written; }
   1c286:	9b03      	ldr	r3, [sp, #12]
   1c288:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   1c28a:	3b08      	subs	r3, #8
   1c28c:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   1c290:	a801      	add	r0, sp, #4
   1c292:	f7ff ff4b 	bl	1c12c <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c296:	a901      	add	r1, sp, #4
   1c298:	4620      	mov	r0, r4
   1c29a:	f7ff ffca 	bl	1c232 <smp_write_hdr>
   1c29e:	4603      	mov	r3, r0
    if (rc != 0) {
   1c2a0:	e7db      	b.n	1c25a <smp_handle_single_req+0x16>

0001c2a2 <smp_build_err_rsp>:
{
   1c2a2:	b570      	push	{r4, r5, r6, lr}
   1c2a4:	b092      	sub	sp, #72	; 0x48
   1c2a6:	4604      	mov	r4, r0
   1c2a8:	460d      	mov	r5, r1
   1c2aa:	4616      	mov	r6, r2
    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   1c2ac:	4601      	mov	r1, r0
   1c2ae:	a803      	add	r0, sp, #12
   1c2b0:	f7ff ff19 	bl	1c0e6 <mgmt_ctxt_init>
    if (rc != 0) {
   1c2b4:	b108      	cbz	r0, 1c2ba <smp_build_err_rsp+0x18>
}
   1c2b6:	b012      	add	sp, #72	; 0x48
   1c2b8:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   1c2ba:	a901      	add	r1, sp, #4
   1c2bc:	4628      	mov	r0, r5
   1c2be:	f7ff ff5b 	bl	1c178 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c2c2:	a901      	add	r1, sp, #4
   1c2c4:	4620      	mov	r0, r4
   1c2c6:	f7ff ffb4 	bl	1c232 <smp_write_hdr>
    if (rc != 0) {
   1c2ca:	2800      	cmp	r0, #0
   1c2cc:	d1f3      	bne.n	1c2b6 <smp_build_err_rsp+0x14>
    rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   1c2ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c2d2:	a90e      	add	r1, sp, #56	; 0x38
   1c2d4:	a803      	add	r0, sp, #12
   1c2d6:	f012 fb5d 	bl	2e994 <cbor_encoder_create_map>
    if (rc != 0) {
   1c2da:	2800      	cmp	r0, #0
   1c2dc:	d1eb      	bne.n	1c2b6 <smp_build_err_rsp+0x14>
    rc = mgmt_write_rsp_status(&cbuf, status);
   1c2de:	4631      	mov	r1, r6
   1c2e0:	a803      	add	r0, sp, #12
   1c2e2:	f7ff fee5 	bl	1c0b0 <mgmt_write_rsp_status>
    if (rc != 0) {
   1c2e6:	2800      	cmp	r0, #0
   1c2e8:	d1e5      	bne.n	1c2b6 <smp_build_err_rsp+0x14>
    rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   1c2ea:	a90e      	add	r1, sp, #56	; 0x38
   1c2ec:	a803      	add	r0, sp, #12
   1c2ee:	f012 fb66 	bl	2e9be <cbor_encoder_close_container>
    if (rc != 0) {
   1c2f2:	2800      	cmp	r0, #0
   1c2f4:	d1df      	bne.n	1c2b6 <smp_build_err_rsp+0x14>
   1c2f6:	9b03      	ldr	r3, [sp, #12]
   1c2f8:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   1c2fa:	3b08      	subs	r3, #8
   1c2fc:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   1c300:	a801      	add	r0, sp, #4
   1c302:	f7ff ff13 	bl	1c12c <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1c306:	a901      	add	r1, sp, #4
   1c308:	4620      	mov	r0, r4
   1c30a:	f7ff ff92 	bl	1c232 <smp_write_hdr>
    if (rc != 0) {
   1c30e:	e7d2      	b.n	1c2b6 <smp_build_err_rsp+0x14>

0001c310 <smp_on_err>:
 * @param status                The status to indicate in the error response.
 */
static void
smp_on_err(struct smp_streamer *streamer, const struct mgmt_hdr *req_hdr,
           void *req, void *rsp, int status)
{
   1c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c312:	4604      	mov	r4, r0
   1c314:	460f      	mov	r7, r1
   1c316:	4616      	mov	r6, r2
    int rc;

    /* Prefer the response buffer for holding the error response.  If no
     * response buffer was allocated, use the request buffer instead.
     */
    if (rsp == NULL) {
   1c318:	461d      	mov	r5, r3
   1c31a:	b1e3      	cbz	r3, 1c356 <smp_on_err+0x46>
        rsp = req;
        req = NULL;
    }

    /* Clear the partial response from the buffer, if any. */
    mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   1c31c:	4629      	mov	r1, r5
   1c31e:	4620      	mov	r0, r4
   1c320:	f7ff fe83 	bl	1c02a <mgmt_streamer_reset_buf>
    mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1c324:	4629      	mov	r1, r5
   1c326:	4620      	mov	r0, r4
   1c328:	f7ff fe98 	bl	1c05c <mgmt_streamer_init_writer>

    /* Build and transmit the error response. */
    rc = smp_build_err_rsp(streamer, req_hdr, status);
   1c32c:	9a06      	ldr	r2, [sp, #24]
   1c32e:	4639      	mov	r1, r7
   1c330:	4620      	mov	r0, r4
   1c332:	f7ff ffb6 	bl	1c2a2 <smp_build_err_rsp>
    if (rc == 0) {
   1c336:	b928      	cbnz	r0, 1c344 <smp_on_err+0x34>
        streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   1c338:	6923      	ldr	r3, [r4, #16]
   1c33a:	6862      	ldr	r2, [r4, #4]
   1c33c:	4629      	mov	r1, r5
   1c33e:	4620      	mov	r0, r4
   1c340:	4798      	blx	r3
        rsp = NULL;
   1c342:	2500      	movs	r5, #0
    }

    /* Free any extra buffers. */
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1c344:	4631      	mov	r1, r6
   1c346:	4620      	mov	r0, r4
   1c348:	f7ff fe8f 	bl	1c06a <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   1c34c:	4629      	mov	r1, r5
   1c34e:	4620      	mov	r0, r4
   1c350:	f7ff fe8b 	bl	1c06a <mgmt_streamer_free_buf>
}
   1c354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        req = NULL;
   1c356:	462e      	mov	r6, r5
        rsp = req;
   1c358:	4615      	mov	r5, r2
   1c35a:	e7df      	b.n	1c31c <smp_on_err+0xc>

0001c35c <smp_process_request_packet>:
 *
 * @return                      0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   1c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c360:	b086      	sub	sp, #24
   1c362:	4604      	mov	r4, r0
   1c364:	460e      	mov	r6, r1
    void *rsp;
    bool valid_hdr, handler_found;
    int rc;

    rsp = NULL;
    valid_hdr = true;
   1c366:	e012      	b.n	1c38e <smp_process_request_packet+0x32>
            break;
        }

        /* Trim processed request to free up space for subsequent responses. */
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
                                 smp_align4(req_hdr.nh_len));
   1c368:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1c36c:	f7ff fef2 	bl	1c154 <smp_align4>
   1c370:	4602      	mov	r2, r0
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
   1c372:	4631      	mov	r1, r6
   1c374:	4620      	mov	r0, r4
   1c376:	f7ff fe4f 	bl	1c018 <mgmt_streamer_trim_front>

        cmd_done_arg.err = MGMT_ERR_EOK;
   1c37a:	2300      	movs	r3, #0
   1c37c:	9303      	str	r3, [sp, #12]
        mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   1c37e:	ab03      	add	r3, sp, #12
   1c380:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1c384:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1c388:	2003      	movs	r0, #3
   1c38a:	f7ff fedb 	bl	1c144 <mgmt_evt>
        handler_found = false;
   1c38e:	2300      	movs	r3, #0
   1c390:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   1c394:	46a0      	mov	r8, r4
   1c396:	4631      	mov	r1, r6
   1c398:	4620      	mov	r0, r4
   1c39a:	f7ff fe58 	bl	1c04e <mgmt_streamer_init_reader>
        if (rc != 0) {
   1c39e:	4605      	mov	r5, r0
   1c3a0:	bb60      	cbnz	r0, 1c3fc <smp_process_request_packet+0xa0>
        rc = smp_read_hdr(streamer, &req_hdr);
   1c3a2:	a904      	add	r1, sp, #16
   1c3a4:	4620      	mov	r0, r4
   1c3a6:	f7ff fefc 	bl	1c1a2 <smp_read_hdr>
        if (rc != 0) {
   1c3aa:	4605      	mov	r5, r0
   1c3ac:	bbb8      	cbnz	r0, 1c41e <smp_process_request_packet+0xc2>
        mgmt_ntoh_hdr(&req_hdr);
   1c3ae:	a804      	add	r0, sp, #16
   1c3b0:	f7ff feb1 	bl	1c116 <mgmt_ntoh_hdr>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   1c3b4:	2208      	movs	r2, #8
   1c3b6:	4631      	mov	r1, r6
   1c3b8:	4620      	mov	r0, r4
   1c3ba:	f7ff fe2d 	bl	1c018 <mgmt_streamer_trim_front>
        rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   1c3be:	4631      	mov	r1, r6
   1c3c0:	4620      	mov	r0, r4
   1c3c2:	f7ff fe21 	bl	1c008 <mgmt_streamer_alloc_rsp>
        if (rsp == NULL) {
   1c3c6:	4607      	mov	r7, r0
   1c3c8:	b360      	cbz	r0, 1c424 <smp_process_request_packet+0xc8>
        rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1c3ca:	4601      	mov	r1, r0
   1c3cc:	4620      	mov	r0, r4
   1c3ce:	f7ff fe45 	bl	1c05c <mgmt_streamer_init_writer>
        if (rc != 0) {
   1c3d2:	4605      	mov	r5, r0
   1c3d4:	bb48      	cbnz	r0, 1c42a <smp_process_request_packet+0xce>
        rc = smp_handle_single_req(streamer, &req_hdr, &handler_found);
   1c3d6:	f10d 020b 	add.w	r2, sp, #11
   1c3da:	a904      	add	r1, sp, #16
   1c3dc:	4620      	mov	r0, r4
   1c3de:	f7ff ff31 	bl	1c244 <smp_handle_single_req>
        if (rc != 0) {
   1c3e2:	4605      	mov	r5, r0
   1c3e4:	bb18      	cbnz	r0, 1c42e <smp_process_request_packet+0xd2>
        rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   1c3e6:	6923      	ldr	r3, [r4, #16]
   1c3e8:	6862      	ldr	r2, [r4, #4]
   1c3ea:	4639      	mov	r1, r7
   1c3ec:	4620      	mov	r0, r4
   1c3ee:	4798      	blx	r3
        if (rc != 0) {
   1c3f0:	4605      	mov	r5, r0
   1c3f2:	2800      	cmp	r0, #0
   1c3f4:	d0b8      	beq.n	1c368 <smp_process_request_packet+0xc>
    valid_hdr = true;
   1c3f6:	2301      	movs	r3, #1
        rsp = NULL;
   1c3f8:	2700      	movs	r7, #0
   1c3fa:	e001      	b.n	1c400 <smp_process_request_packet+0xa4>
            valid_hdr = false;
   1c3fc:	2300      	movs	r3, #0
   1c3fe:	461f      	mov	r7, r3
                 &cmd_done_arg);
    }

    if (rc != 0 && valid_hdr) {
   1c400:	b105      	cbz	r5, 1c404 <smp_process_request_packet+0xa8>
   1c402:	b9b3      	cbnz	r3, 1c432 <smp_process_request_packet+0xd6>
        }

        return rc;
    }

    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1c404:	4631      	mov	r1, r6
   1c406:	4640      	mov	r0, r8
   1c408:	f7ff fe2f 	bl	1c06a <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   1c40c:	4639      	mov	r1, r7
   1c40e:	4640      	mov	r0, r8
   1c410:	f7ff fe2b 	bl	1c06a <mgmt_streamer_free_buf>
    return 0;
   1c414:	2500      	movs	r5, #0
}
   1c416:	4628      	mov	r0, r5
   1c418:	b006      	add	sp, #24
   1c41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            valid_hdr = false;
   1c41e:	2300      	movs	r3, #0
   1c420:	461f      	mov	r7, r3
   1c422:	e7ed      	b.n	1c400 <smp_process_request_packet+0xa4>
            rc = MGMT_ERR_ENOMEM;
   1c424:	2502      	movs	r5, #2
    valid_hdr = true;
   1c426:	2301      	movs	r3, #1
   1c428:	e7ea      	b.n	1c400 <smp_process_request_packet+0xa4>
   1c42a:	2301      	movs	r3, #1
   1c42c:	e7e8      	b.n	1c400 <smp_process_request_packet+0xa4>
   1c42e:	2301      	movs	r3, #1
   1c430:	e7e6      	b.n	1c400 <smp_process_request_packet+0xa4>
        smp_on_err(streamer, &req_hdr, req, rsp, rc);
   1c432:	9500      	str	r5, [sp, #0]
   1c434:	463b      	mov	r3, r7
   1c436:	4632      	mov	r2, r6
   1c438:	a904      	add	r1, sp, #16
   1c43a:	4620      	mov	r0, r4
   1c43c:	f7ff ff68 	bl	1c310 <smp_on_err>
        if (handler_found) {
   1c440:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c444:	2b00      	cmp	r3, #0
   1c446:	d0e6      	beq.n	1c416 <smp_process_request_packet+0xba>
            cmd_done_arg.err = rc;
   1c448:	9503      	str	r5, [sp, #12]
            mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   1c44a:	ab03      	add	r3, sp, #12
   1c44c:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1c450:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1c454:	2003      	movs	r0, #3
   1c456:	f7ff fe75 	bl	1c144 <mgmt_evt>
        return rc;
   1c45a:	e7dc      	b.n	1c416 <smp_process_request_packet+0xba>

0001c45c <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   1c45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c460:	4604      	mov	r4, r0
   1c462:	460d      	mov	r5, r1
   1c464:	4699      	mov	r9, r3
    int digit;
    int off;
    int len;

    /* First, calculate the length of the resulting string. */
    copy = val;
   1c466:	4601      	mov	r1, r0
    for (len = 0; copy != 0; len++) {
   1c468:	f04f 0800 	mov.w	r8, #0
   1c46c:	b131      	cbz	r1, 1c47c <ull_to_s+0x20>
        copy /= 10;
   1c46e:	4b19      	ldr	r3, [pc, #100]	; (1c4d4 <ull_to_s+0x78>)
   1c470:	fba3 3101 	umull	r3, r1, r3, r1
   1c474:	08c9      	lsrs	r1, r1, #3
    for (len = 0; copy != 0; len++) {
   1c476:	f108 0801 	add.w	r8, r8, #1
   1c47a:	e7f7      	b.n	1c46c <ull_to_s+0x10>
    }

    /* A value of 0 still requires one character ("0"). */
    if (len == 0) {
   1c47c:	f1b8 0f00 	cmp.w	r8, #0
   1c480:	d101      	bne.n	1c486 <ull_to_s+0x2a>
        len = 1;
   1c482:	f04f 0801 	mov.w	r8, #1
    }

    /* Ensure the buffer can accommodate the string and terminator. */
    if (len >= dst_max_len - 1) {
   1c486:	3a01      	subs	r2, #1
   1c488:	4542      	cmp	r2, r8
   1c48a:	dd20      	ble.n	1c4ce <ull_to_s+0x72>
        return -1;
    }

    /* Encode the string from right to left. */
    off = len;
    dst[off--] = '\0';
   1c48c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   1c490:	2300      	movs	r3, #0
   1c492:	f809 3008 	strb.w	r3, [r9, r8]
    do {
        digit = val % 10;
   1c496:	220a      	movs	r2, #10
   1c498:	2300      	movs	r3, #0
   1c49a:	4620      	mov	r0, r4
   1c49c:	4629      	mov	r1, r5
   1c49e:	f7f7 fedd 	bl	1425c <__aeabi_uldivmod>
        dst[off--] = '0' + digit;
   1c4a2:	3230      	adds	r2, #48	; 0x30
   1c4a4:	f809 200a 	strb.w	r2, [r9, sl]
   1c4a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff

        val /= 10;
   1c4ac:	4626      	mov	r6, r4
   1c4ae:	462f      	mov	r7, r5
   1c4b0:	220a      	movs	r2, #10
   1c4b2:	2300      	movs	r3, #0
   1c4b4:	4620      	mov	r0, r4
   1c4b6:	4629      	mov	r1, r5
   1c4b8:	f7f7 fed0 	bl	1425c <__aeabi_uldivmod>
   1c4bc:	4604      	mov	r4, r0
   1c4be:	460d      	mov	r5, r1
    } while (val > 0);
   1c4c0:	2f00      	cmp	r7, #0
   1c4c2:	bf08      	it	eq
   1c4c4:	2e0a      	cmpeq	r6, #10
   1c4c6:	d2e6      	bcs.n	1c496 <ull_to_s+0x3a>

    return len;
}
   1c4c8:	4640      	mov	r0, r8
   1c4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -1;
   1c4ce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1c4d2:	e7f9      	b.n	1c4c8 <ull_to_s+0x6c>
   1c4d4:	cccccccd 	.word	0xcccccccd

0001c4d8 <ble_ll_count_rx_adv_pdus>:
 */
static void
ble_ll_count_rx_adv_pdus(uint8_t pdu_type)
{
    /* Count received packet types  */
    switch (pdu_type) {
   1c4d8:	2808      	cmp	r0, #8
   1c4da:	d832      	bhi.n	1c542 <ble_ll_count_rx_adv_pdus+0x6a>
   1c4dc:	e8df f000 	tbb	[pc, r0]
   1c4e0:	19140f0a 	.word	0x19140f0a
   1c4e4:	052d231e 	.word	0x052d231e
   1c4e8:	28          	.byte	0x28
   1c4e9:	00          	.byte	0x00
    case BLE_ADV_PDU_TYPE_ADV_EXT_IND:
        STATS_INC(ble_ll_stats, rx_adv_ext_ind);
   1c4ea:	4a16      	ldr	r2, [pc, #88]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c4ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1c4ee:	3301      	adds	r3, #1
   1c4f0:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   1c4f2:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_IND:
        STATS_INC(ble_ll_stats, rx_adv_ind);
   1c4f4:	4a13      	ldr	r2, [pc, #76]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c4f6:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1c4f8:	3301      	adds	r3, #1
   1c4fa:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1c4fc:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_DIRECT_IND:
        STATS_INC(ble_ll_stats, rx_adv_direct_ind);
   1c4fe:	4a11      	ldr	r2, [pc, #68]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c500:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c502:	3301      	adds	r3, #1
   1c504:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1c506:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_NONCONN_IND:
        STATS_INC(ble_ll_stats, rx_adv_nonconn_ind);
   1c508:	4a0e      	ldr	r2, [pc, #56]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c50a:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1c50c:	3301      	adds	r3, #1
   1c50e:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   1c510:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_REQ:
        STATS_INC(ble_ll_stats, rx_scan_reqs);
   1c512:	4a0c      	ldr	r2, [pc, #48]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c514:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c516:	3301      	adds	r3, #1
   1c518:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1c51a:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_RSP:
        STATS_INC(ble_ll_stats, rx_scan_rsps);
   1c51c:	4a09      	ldr	r2, [pc, #36]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c51e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1c520:	3301      	adds	r3, #1
   1c522:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1c524:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_CONNECT_IND:
        STATS_INC(ble_ll_stats, rx_connect_reqs);
   1c526:	4a07      	ldr	r2, [pc, #28]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c528:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1c52a:	3301      	adds	r3, #1
   1c52c:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1c52e:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_AUX_CONNECT_RSP:
        STATS_INC(ble_ll_stats, rx_aux_connect_rsp);
   1c530:	4a04      	ldr	r2, [pc, #16]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c532:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c534:	3301      	adds	r3, #1
   1c536:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1c538:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_SCAN_IND:
        STATS_INC(ble_ll_stats, rx_scan_ind);
   1c53a:	4a02      	ldr	r2, [pc, #8]	; (1c544 <ble_ll_count_rx_adv_pdus+0x6c>)
   1c53c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1c53e:	3301      	adds	r3, #1
   1c540:	6653      	str	r3, [r2, #100]	; 0x64
        break;
    default:
        break;
    }
}
   1c542:	4770      	bx	lr
   1c544:	10001ea8 	.word	0x10001ea8

0001c548 <ble_ll_count_rx_stats>:
 * @param hdr
 * @param len
 */
static void
ble_ll_count_rx_stats(struct ble_mbuf_hdr *hdr, uint16_t len, uint8_t pdu_type)
{
   1c548:	b508      	push	{r3, lr}
    uint8_t crcok;
    bool connection_data;

    crcok = BLE_MBUF_HDR_CRC_OK(hdr);
   1c54a:	8803      	ldrh	r3, [r0, #0]

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_CONNECTION);
   1c54c:	f003 0007 	and.w	r0, r3, #7
    if (!connection_data) {
        connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_DTM);
    }
#endif

    if (crcok) {
   1c550:	f013 0f80 	tst.w	r3, #128	; 0x80
   1c554:	d014      	beq.n	1c580 <ble_ll_count_rx_stats+0x38>
        if (connection_data) {
   1c556:	2804      	cmp	r0, #4
   1c558:	d107      	bne.n	1c56a <ble_ll_count_rx_stats+0x22>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_ok);
   1c55a:	4b12      	ldr	r3, [pc, #72]	; (1c5a4 <ble_ll_count_rx_stats+0x5c>)
   1c55c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c55e:	3201      	adds	r2, #1
   1c560:	635a      	str	r2, [r3, #52]	; 0x34
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_ok, len);
   1c562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1c564:	4411      	add	r1, r2
   1c566:	63d9      	str	r1, [r3, #60]	; 0x3c
   1c568:	e013      	b.n	1c592 <ble_ll_count_rx_stats+0x4a>
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_ok);
   1c56a:	4b0e      	ldr	r3, [pc, #56]	; (1c5a4 <ble_ll_count_rx_stats+0x5c>)
   1c56c:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1c56e:	3001      	adds	r0, #1
   1c570:	6258      	str	r0, [r3, #36]	; 0x24
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_ok, len);
   1c572:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c574:	4401      	add	r1, r0
   1c576:	62d9      	str	r1, [r3, #44]	; 0x2c
            ble_ll_count_rx_adv_pdus(pdu_type);
   1c578:	4610      	mov	r0, r2
   1c57a:	f7ff ffad 	bl	1c4d8 <ble_ll_count_rx_adv_pdus>
   1c57e:	e008      	b.n	1c592 <ble_ll_count_rx_stats+0x4a>
        }
    } else {
        if (connection_data) {
   1c580:	2804      	cmp	r0, #4
   1c582:	d007      	beq.n	1c594 <ble_ll_count_rx_stats+0x4c>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_err);
   1c584:	4b07      	ldr	r3, [pc, #28]	; (1c5a4 <ble_ll_count_rx_stats+0x5c>)
   1c586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1c588:	3201      	adds	r2, #1
   1c58a:	629a      	str	r2, [r3, #40]	; 0x28
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_err, len);
   1c58c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c58e:	4411      	add	r1, r2
   1c590:	6319      	str	r1, [r3, #48]	; 0x30
        }
    }
}
   1c592:	bd08      	pop	{r3, pc}
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
   1c594:	4b03      	ldr	r3, [pc, #12]	; (1c5a4 <ble_ll_count_rx_stats+0x5c>)
   1c596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c598:	3201      	adds	r2, #1
   1c59a:	639a      	str	r2, [r3, #56]	; 0x38
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
   1c59c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c59e:	4411      	add	r1, r2
   1c5a0:	6419      	str	r1, [r3, #64]	; 0x40
   1c5a2:	e7f6      	b.n	1c592 <ble_ll_count_rx_stats+0x4a>
   1c5a4:	10001ea8 	.word	0x10001ea8

0001c5a8 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   1c5a8:	b510      	push	{r4, lr}
   1c5aa:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   1c5ac:	e002      	b.n	1c5b4 <ble_ll_flush_pkt_queue+0xc>
        /* Get mbuf pointer from packet header pointer */
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1c5ae:	6064      	str	r4, [r4, #4]
        os_mbuf_free_chain(om);
   1c5b0:	f7f9 f85a 	bl	15668 <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   1c5b4:	6823      	ldr	r3, [r4, #0]
   1c5b6:	b133      	cbz	r3, 1c5c6 <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1c5b8:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1c5bc:	685b      	ldr	r3, [r3, #4]
   1c5be:	6023      	str	r3, [r4, #0]
   1c5c0:	2b00      	cmp	r3, #0
   1c5c2:	d1f5      	bne.n	1c5b0 <ble_ll_flush_pkt_queue+0x8>
   1c5c4:	e7f3      	b.n	1c5ae <ble_ll_flush_pkt_queue+0x6>
    }
}
   1c5c6:	bd10      	pop	{r4, pc}

0001c5c8 <ble_ll_task>:
{
   1c5c8:	b508      	push	{r3, lr}
    ble_phy_init();
   1c5ca:	f005 fdf9 	bl	221c0 <ble_phy_init>
    ble_phy_txpwr_set(g_ble_ll_tx_power);
   1c5ce:	4b0f      	ldr	r3, [pc, #60]	; (1c60c <ble_ll_task+0x44>)
   1c5d0:	f993 0000 	ldrsb.w	r0, [r3]
   1c5d4:	f005 fe0a 	bl	221ec <ble_phy_txpwr_set>
    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   1c5d8:	2300      	movs	r3, #0
   1c5da:	4a0d      	ldr	r2, [pc, #52]	; (1c610 <ble_ll_task+0x48>)
   1c5dc:	4619      	mov	r1, r3
   1c5de:	480d      	ldr	r0, [pc, #52]	; (1c614 <ble_ll_task+0x4c>)
   1c5e0:	f010 ffd8 	bl	2d594 <ble_hci_trans_cfg_ll>
    ble_ll_hci_send_noop();
   1c5e4:	f004 fb54 	bl	20c90 <ble_ll_hci_send_noop>
ble_npl_eventq_get(struct ble_npl_eventq *evq, ble_npl_time_t tmo)
{
    struct os_event *ev;

    if (tmo == BLE_NPL_TIME_FOREVER) {
        ev = os_eventq_get(&evq->evq);
   1c5e8:	480b      	ldr	r0, [pc, #44]	; (1c618 <ble_ll_task+0x50>)
   1c5ea:	f7f8 ff4d 	bl	15488 <os_eventq_get>
        BLE_LL_ASSERT(ev);
   1c5ee:	b110      	cbz	r0, 1c5f6 <ble_ll_task+0x2e>
}

static inline void
ble_npl_event_run(struct ble_npl_event *ev)
{
    ev->ev.ev_cb(&ev->ev);
   1c5f0:	6842      	ldr	r2, [r0, #4]
   1c5f2:	4790      	blx	r2
}
   1c5f4:	e7f8      	b.n	1c5e8 <ble_ll_task+0x20>
   1c5f6:	f7f8 f82d 	bl	14654 <hal_debugger_connected>
   1c5fa:	b100      	cbz	r0, 1c5fe <ble_ll_task+0x36>
   1c5fc:	be01      	bkpt	0x0001
   1c5fe:	2300      	movs	r3, #0
   1c600:	461a      	mov	r2, r3
   1c602:	4619      	mov	r1, r3
   1c604:	4618      	mov	r0, r3
   1c606:	f7f8 fbc7 	bl	14d98 <__assert_func>
   1c60a:	bf00      	nop
   1c60c:	10002218 	.word	0x10002218
   1c610:	00020da9 	.word	0x00020da9
   1c614:	00020d6d 	.word	0x00020d6d
   1c618:	10001fc8 	.word	0x10001fc8

0001c61c <ble_ll_validate_task>:
    ble_hdr->txinfo.hdr_byte = hdr;
}

static void
ble_ll_validate_task(void)
{
   1c61c:	b500      	push	{lr}
   1c61e:	b08f      	sub	sp, #60	; 0x3c
#ifdef MYNEWT
#ifndef NDEBUG
    struct os_task_info oti;

    os_task_info_get(&g_ble_ll_task, &oti);
   1c620:	4669      	mov	r1, sp
   1c622:	480b      	ldr	r0, [pc, #44]	; (1c650 <ble_ll_validate_task+0x34>)
   1c624:	f7f9 ff26 	bl	16474 <os_task_info_get>

    BLE_LL_ASSERT(oti.oti_stkusage < oti.oti_stksize);
   1c628:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1c62c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1c630:	429a      	cmp	r2, r3
   1c632:	d202      	bcs.n	1c63a <ble_ll_validate_task+0x1e>
#endif
#endif
}
   1c634:	b00f      	add	sp, #60	; 0x3c
   1c636:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(oti.oti_stkusage < oti.oti_stksize);
   1c63a:	f7f8 f80b 	bl	14654 <hal_debugger_connected>
   1c63e:	b100      	cbz	r0, 1c642 <ble_ll_validate_task+0x26>
   1c640:	be01      	bkpt	0x0001
   1c642:	2300      	movs	r3, #0
   1c644:	461a      	mov	r2, r3
   1c646:	4619      	mov	r1, r3
   1c648:	4618      	mov	r0, r3
   1c64a:	f7f8 fba5 	bl	14d98 <__assert_func>
   1c64e:	bf00      	nop
   1c650:	100021c8 	.word	0x100021c8

0001c654 <ble_ll_hw_err_timer_cb>:
{
   1c654:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   1c656:	2001      	movs	r0, #1
   1c658:	f004 fceb 	bl	21032 <ble_ll_hci_ev_hw_err>
   1c65c:	b900      	cbnz	r0, 1c660 <ble_ll_hw_err_timer_cb+0xc>
}
   1c65e:	bd08      	pop	{r3, pc}
}

static inline ble_npl_error_t
ble_npl_callout_reset(struct ble_npl_callout *co, ble_npl_time_t ticks)
{
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1c660:	2106      	movs	r1, #6
   1c662:	4802      	ldr	r0, [pc, #8]	; (1c66c <ble_ll_hw_err_timer_cb+0x18>)
   1c664:	f7f8 fd72 	bl	1514c <os_callout_reset>
   1c668:	e7f9      	b.n	1c65e <ble_ll_hw_err_timer_cb+0xa>
   1c66a:	bf00      	nop
   1c66c:	10002028 	.word	0x10002028

0001c670 <ble_ll_event_comp_pkts>:
{
   1c670:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1c672:	2000      	movs	r0, #0
   1c674:	f002 fb40 	bl	1ecf8 <ble_ll_conn_num_comp_pkts_event_send>
}
   1c678:	bd08      	pop	{r3, pc}

0001c67a <ble_ll_event_dbuf_overflow>:
{
   1c67a:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   1c67c:	f004 fcf1 	bl	21062 <ble_ll_hci_ev_databuf_overflow>
}
   1c680:	bd08      	pop	{r3, pc}
	...

0001c684 <ble_ll_tx_pkt_in>:
{
   1c684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1c686:	e00a      	b.n	1c69e <ble_ll_tx_pkt_in+0x1a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1c688:	4613      	mov	r3, r2
   1c68a:	3248      	adds	r2, #72	; 0x48
   1c68c:	64da      	str	r2, [r3, #76]	; 0x4c
   1c68e:	e013      	b.n	1c6b8 <ble_ll_tx_pkt_in+0x34>
            STATS_INC(ble_ll_stats, bad_acl_hdr);
   1c690:	4a1a      	ldr	r2, [pc, #104]	; (1c6fc <ble_ll_tx_pkt_in+0x78>)
   1c692:	69d3      	ldr	r3, [r2, #28]
   1c694:	3301      	adds	r3, #1
   1c696:	61d3      	str	r3, [r2, #28]
            os_mbuf_free_chain(om);
   1c698:	4638      	mov	r0, r7
   1c69a:	f7f8 ffe5 	bl	15668 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1c69e:	4b18      	ldr	r3, [pc, #96]	; (1c700 <ble_ll_tx_pkt_in+0x7c>)
   1c6a0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   1c6a2:	b354      	cbz	r4, 1c6fa <ble_ll_tx_pkt_in+0x76>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1c6a4:	f1a4 0710 	sub.w	r7, r4, #16
        OS_ENTER_CRITICAL(sr);
   1c6a8:	f7fa f82c 	bl	16704 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1c6ac:	4a14      	ldr	r2, [pc, #80]	; (1c700 <ble_ll_tx_pkt_in+0x7c>)
   1c6ae:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1c6b0:	685b      	ldr	r3, [r3, #4]
   1c6b2:	6493      	str	r3, [r2, #72]	; 0x48
   1c6b4:	2b00      	cmp	r3, #0
   1c6b6:	d0e7      	beq.n	1c688 <ble_ll_tx_pkt_in+0x4>
        OS_EXIT_CRITICAL(sr);
   1c6b8:	f7fa f82a 	bl	16710 <os_arch_restore_sr>
        handle = get_le16(om->om_data);
   1c6bc:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1c6c0:	f015 fc2d 	bl	31f1e <get_le16>
   1c6c4:	4606      	mov	r6, r0
        length = get_le16(om->om_data + 2);
   1c6c6:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1c6ca:	3002      	adds	r0, #2
   1c6cc:	f015 fc27 	bl	31f1e <get_le16>
   1c6d0:	4605      	mov	r5, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   1c6d2:	2104      	movs	r1, #4
   1c6d4:	4638      	mov	r0, r7
   1c6d6:	f7f9 f89e 	bl	15816 <os_mbuf_adj>
        pb = handle & 0x3000;
   1c6da:	f406 5240 	and.w	r2, r6, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   1c6de:	8823      	ldrh	r3, [r4, #0]
   1c6e0:	42ab      	cmp	r3, r5
   1c6e2:	d1d5      	bne.n	1c690 <ble_ll_tx_pkt_in+0xc>
   1c6e4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1c6e8:	d8d2      	bhi.n	1c690 <ble_ll_tx_pkt_in+0xc>
   1c6ea:	2d00      	cmp	r5, #0
   1c6ec:	d0d0      	beq.n	1c690 <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   1c6ee:	462a      	mov	r2, r5
   1c6f0:	4631      	mov	r1, r6
   1c6f2:	4638      	mov	r0, r7
   1c6f4:	f002 f824 	bl	1e740 <ble_ll_conn_tx_pkt_in>
   1c6f8:	e7d1      	b.n	1c69e <ble_ll_tx_pkt_in+0x1a>
}
   1c6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6fc:	10001ea8 	.word	0x10001ea8
   1c700:	10001fb8 	.word	0x10001fb8

0001c704 <ble_ll_event_tx_pkt>:
{
   1c704:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   1c706:	f7ff ffbd 	bl	1c684 <ble_ll_tx_pkt_in>
}
   1c70a:	bd08      	pop	{r3, pc}

0001c70c <ble_ll_rx_pkt_in>:
{
   1c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1c710:	e00c      	b.n	1c72c <ble_ll_rx_pkt_in+0x20>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1c712:	4613      	mov	r3, r2
   1c714:	3230      	adds	r2, #48	; 0x30
   1c716:	635a      	str	r2, [r3, #52]	; 0x34
   1c718:	e015      	b.n	1c746 <ble_ll_rx_pkt_in+0x3a>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1c71a:	463a      	mov	r2, r7
   1c71c:	4641      	mov	r1, r8
   1c71e:	4628      	mov	r0, r5
   1c720:	f001 f896 	bl	1d850 <ble_ll_adv_rx_pkt_in>
        if (m) {
   1c724:	b116      	cbz	r6, 1c72c <ble_ll_rx_pkt_in+0x20>
            os_mbuf_free_chain(m);
   1c726:	4630      	mov	r0, r6
   1c728:	f7f8 ff9e 	bl	15668 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1c72c:	4b17      	ldr	r3, [pc, #92]	; (1c78c <ble_ll_rx_pkt_in+0x80>)
   1c72e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1c730:	b34c      	cbz	r4, 1c786 <ble_ll_rx_pkt_in+0x7a>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1c732:	f1a4 0610 	sub.w	r6, r4, #16
        OS_ENTER_CRITICAL(sr);
   1c736:	f7f9 ffe5 	bl	16704 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1c73a:	4a14      	ldr	r2, [pc, #80]	; (1c78c <ble_ll_rx_pkt_in+0x80>)
   1c73c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1c73e:	685b      	ldr	r3, [r3, #4]
   1c740:	6313      	str	r3, [r2, #48]	; 0x30
   1c742:	2b00      	cmp	r3, #0
   1c744:	d0e5      	beq.n	1c712 <ble_ll_rx_pkt_in+0x6>
        OS_EXIT_CRITICAL(sr);
   1c746:	f7f9 ffe3 	bl	16710 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1c74a:	f104 0708 	add.w	r7, r4, #8
        rxbuf = m->om_data;
   1c74e:	f854 8c10 	ldr.w	r8, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1c752:	f898 5000 	ldrb.w	r5, [r8]
   1c756:	f005 050f 	and.w	r5, r5, #15
        ble_ll_count_rx_stats(ble_hdr, pkthdr->omp_len, pdu_type);
   1c75a:	462a      	mov	r2, r5
   1c75c:	8821      	ldrh	r1, [r4, #0]
   1c75e:	4638      	mov	r0, r7
   1c760:	f7ff fef2 	bl	1c548 <ble_ll_count_rx_stats>
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   1c764:	7a23      	ldrb	r3, [r4, #8]
   1c766:	f003 0307 	and.w	r3, r3, #7
   1c76a:	2b01      	cmp	r3, #1
   1c76c:	d0d5      	beq.n	1c71a <ble_ll_rx_pkt_in+0xe>
   1c76e:	2b04      	cmp	r3, #4
   1c770:	d104      	bne.n	1c77c <ble_ll_rx_pkt_in+0x70>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1c772:	4639      	mov	r1, r7
   1c774:	4630      	mov	r0, r6
   1c776:	f001 fecb 	bl	1e510 <ble_ll_conn_rx_data_pdu>
        if (m) {
   1c77a:	e7d7      	b.n	1c72c <ble_ll_rx_pkt_in+0x20>
            STATS_INC(ble_ll_stats, bad_ll_state);
   1c77c:	4a04      	ldr	r2, [pc, #16]	; (1c790 <ble_ll_rx_pkt_in+0x84>)
   1c77e:	6993      	ldr	r3, [r2, #24]
   1c780:	3301      	adds	r3, #1
   1c782:	6193      	str	r3, [r2, #24]
            break;
   1c784:	e7ce      	b.n	1c724 <ble_ll_rx_pkt_in+0x18>
}
   1c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c78a:	bf00      	nop
   1c78c:	10001fb8 	.word	0x10001fb8
   1c790:	10001ea8 	.word	0x10001ea8

0001c794 <ble_ll_event_rx_pkt>:
{
   1c794:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   1c796:	f7ff ffb9 	bl	1c70c <ble_ll_rx_pkt_in>
}
   1c79a:	bd08      	pop	{r3, pc}

0001c79c <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1c79c:	381b      	subs	r0, #27
   1c79e:	b280      	uxth	r0, r0
   1c7a0:	28e0      	cmp	r0, #224	; 0xe0
   1c7a2:	d901      	bls.n	1c7a8 <ble_ll_chk_txrx_octets+0xc>
        rc = 0;
   1c7a4:	2000      	movs	r0, #0
   1c7a6:	4770      	bx	lr
        rc = 1;
   1c7a8:	2001      	movs	r0, #1
}
   1c7aa:	4770      	bx	lr

0001c7ac <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   1c7ac:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1c7b0:	b280      	uxth	r0, r0
   1c7b2:	f244 1348 	movw	r3, #16712	; 0x4148
   1c7b6:	4298      	cmp	r0, r3
   1c7b8:	d901      	bls.n	1c7be <ble_ll_chk_txrx_time+0x12>
        rc = 0;
   1c7ba:	2000      	movs	r0, #0
   1c7bc:	4770      	bx	lr
        rc = 1;
   1c7be:	2001      	movs	r0, #1
}
   1c7c0:	4770      	bx	lr

0001c7c2 <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1c7c2:	b131      	cbz	r1, 1c7d2 <ble_ll_is_rpa+0x10>
   1c7c4:	7943      	ldrb	r3, [r0, #5]
   1c7c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c7ca:	2b40      	cmp	r3, #64	; 0x40
   1c7cc:	d003      	beq.n	1c7d6 <ble_ll_is_rpa+0x14>
        rc = 0;
   1c7ce:	2000      	movs	r0, #0
   1c7d0:	4770      	bx	lr
   1c7d2:	2000      	movs	r0, #0
   1c7d4:	4770      	bx	lr
        rc = 1;
   1c7d6:	2001      	movs	r0, #1
}
   1c7d8:	4770      	bx	lr

0001c7da <ble_ll_is_valid_public_addr>:
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1c7da:	2300      	movs	r3, #0
   1c7dc:	2b05      	cmp	r3, #5
   1c7de:	dc03      	bgt.n	1c7e8 <ble_ll_is_valid_public_addr+0xe>
        if (addr[i]) {
   1c7e0:	5cc2      	ldrb	r2, [r0, r3]
   1c7e2:	b91a      	cbnz	r2, 1c7ec <ble_ll_is_valid_public_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1c7e4:	3301      	adds	r3, #1
   1c7e6:	e7f9      	b.n	1c7dc <ble_ll_is_valid_public_addr+0x2>
    return 0;
   1c7e8:	2000      	movs	r0, #0
   1c7ea:	4770      	bx	lr
            return 1;
   1c7ec:	2001      	movs	r0, #1
}
   1c7ee:	4770      	bx	lr

0001c7f0 <ble_ll_is_valid_random_addr>:
{
   1c7f0:	b510      	push	{r4, lr}
    sum = 0;
   1c7f2:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1c7f4:	461a      	mov	r2, r3
   1c7f6:	2a04      	cmp	r2, #4
   1c7f8:	dc04      	bgt.n	1c804 <ble_ll_is_valid_random_addr+0x14>
        sum += addr[i];
   1c7fa:	5c84      	ldrb	r4, [r0, r2]
   1c7fc:	4423      	add	r3, r4
   1c7fe:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1c800:	3201      	adds	r2, #1
   1c802:	e7f8      	b.n	1c7f6 <ble_ll_is_valid_random_addr+0x6>
    sum += addr[5] & 0x3f;
   1c804:	7942      	ldrb	r2, [r0, #5]
   1c806:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   1c80a:	440b      	add	r3, r1
   1c80c:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   1c80e:	b1eb      	cbz	r3, 1c84c <ble_ll_is_valid_random_addr+0x5c>
   1c810:	f240 543a 	movw	r4, #1338	; 0x53a
   1c814:	42a3      	cmp	r3, r4
   1c816:	d01b      	beq.n	1c850 <ble_ll_is_valid_random_addr+0x60>
    addr_type = addr[5] & 0xc0;
   1c818:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   1c81c:	2ac0      	cmp	r2, #192	; 0xc0
   1c81e:	d019      	beq.n	1c854 <ble_ll_is_valid_random_addr+0x64>
    } else if (addr_type == 0x40) {
   1c820:	2a40      	cmp	r2, #64	; 0x40
   1c822:	d008      	beq.n	1c836 <ble_ll_is_valid_random_addr+0x46>
    } else if (addr_type == 0) {
   1c824:	b9e2      	cbnz	r2, 1c860 <ble_ll_is_valid_random_addr+0x70>
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   1c826:	2206      	movs	r2, #6
   1c828:	4601      	mov	r1, r0
   1c82a:	480e      	ldr	r0, [pc, #56]	; (1c864 <ble_ll_is_valid_random_addr+0x74>)
   1c82c:	f7fa f91a 	bl	16a64 <memcmp>
   1c830:	b168      	cbz	r0, 1c84e <ble_ll_is_valid_random_addr+0x5e>
    rc = 1;
   1c832:	2001      	movs	r0, #1
   1c834:	e00b      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   1c836:	78c3      	ldrb	r3, [r0, #3]
   1c838:	7902      	ldrb	r2, [r0, #4]
   1c83a:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   1c83c:	18c9      	adds	r1, r1, r3
   1c83e:	d00b      	beq.n	1c858 <ble_ll_is_valid_random_addr+0x68>
   1c840:	f240 233d 	movw	r3, #573	; 0x23d
   1c844:	4299      	cmp	r1, r3
   1c846:	d009      	beq.n	1c85c <ble_ll_is_valid_random_addr+0x6c>
    rc = 1;
   1c848:	2001      	movs	r0, #1
   1c84a:	e000      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
        return 0;
   1c84c:	2000      	movs	r0, #0
}
   1c84e:	bd10      	pop	{r4, pc}
        return 0;
   1c850:	2000      	movs	r0, #0
   1c852:	e7fc      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
    rc = 1;
   1c854:	2001      	movs	r0, #1
   1c856:	e7fa      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
            rc = 0;
   1c858:	2000      	movs	r0, #0
   1c85a:	e7f8      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
   1c85c:	2000      	movs	r0, #0
   1c85e:	e7f6      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
        rc = 0;
   1c860:	2000      	movs	r0, #0
   1c862:	e7f4      	b.n	1c84e <ble_ll_is_valid_random_addr+0x5e>
   1c864:	1000221c 	.word	0x1000221c

0001c868 <ble_ll_is_valid_own_addr_type>:
{
   1c868:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   1c86a:	2803      	cmp	r0, #3
   1c86c:	d80b      	bhi.n	1c886 <ble_ll_is_valid_own_addr_type+0x1e>
   1c86e:	e8df f000 	tbb	[pc, r0]
   1c872:	0602      	.short	0x0602
   1c874:	0602      	.short	0x0602
        rc = ble_ll_is_valid_public_addr(g_dev_addr);
   1c876:	4805      	ldr	r0, [pc, #20]	; (1c88c <ble_ll_is_valid_own_addr_type+0x24>)
   1c878:	f7ff ffaf 	bl	1c7da <ble_ll_is_valid_public_addr>
}
   1c87c:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_random_addr(random_addr);
   1c87e:	4608      	mov	r0, r1
   1c880:	f7ff ffb6 	bl	1c7f0 <ble_ll_is_valid_random_addr>
        break;
   1c884:	e7fa      	b.n	1c87c <ble_ll_is_valid_own_addr_type+0x14>
{
   1c886:	2000      	movs	r0, #0
    return rc;
   1c888:	e7f8      	b.n	1c87c <ble_ll_is_valid_own_addr_type+0x14>
   1c88a:	bf00      	nop
   1c88c:	1000221c 	.word	0x1000221c

0001c890 <ble_ll_set_random_addr>:
    if (len < sizeof(*cmd)) {
   1c890:	2905      	cmp	r1, #5
   1c892:	d913      	bls.n	1c8bc <ble_ll_set_random_addr+0x2c>
{
   1c894:	b510      	push	{r4, lr}
   1c896:	4604      	mov	r4, r0
    if (!hci_adv_ext && ble_ll_adv_enabled()) {
   1c898:	b152      	cbz	r2, 1c8b0 <ble_ll_set_random_addr+0x20>
    if (!ble_ll_is_valid_random_addr(cmd->addr)) {
   1c89a:	4620      	mov	r0, r4
   1c89c:	f7ff ffa8 	bl	1c7f0 <ble_ll_is_valid_random_addr>
   1c8a0:	b170      	cbz	r0, 1c8c0 <ble_ll_set_random_addr+0x30>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   1c8a2:	4b08      	ldr	r3, [pc, #32]	; (1c8c4 <ble_ll_set_random_addr+0x34>)
   1c8a4:	6820      	ldr	r0, [r4, #0]
   1c8a6:	6018      	str	r0, [r3, #0]
   1c8a8:	88a2      	ldrh	r2, [r4, #4]
   1c8aa:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   1c8ac:	2000      	movs	r0, #0
}
   1c8ae:	bd10      	pop	{r4, pc}
    if (!hci_adv_ext && ble_ll_adv_enabled()) {
   1c8b0:	f001 f852 	bl	1d958 <ble_ll_adv_enabled>
   1c8b4:	2800      	cmp	r0, #0
   1c8b6:	d0f0      	beq.n	1c89a <ble_ll_set_random_addr+0xa>
        return BLE_ERR_CMD_DISALLOWED;
   1c8b8:	200c      	movs	r0, #12
   1c8ba:	e7f8      	b.n	1c8ae <ble_ll_set_random_addr+0x1e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c8bc:	2012      	movs	r0, #18
}
   1c8be:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c8c0:	2012      	movs	r0, #18
   1c8c2:	e7f4      	b.n	1c8ae <ble_ll_set_random_addr+0x1e>
   1c8c4:	10002224 	.word	0x10002224

0001c8c8 <ble_ll_acl_data_in>:
{
   1c8c8:	b538      	push	{r3, r4, r5, lr}
   1c8ca:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   1c8cc:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   1c8d0:	f7f9 ff18 	bl	16704 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   1c8d4:	4623      	mov	r3, r4
   1c8d6:	2200      	movs	r2, #0
   1c8d8:	f843 2f14 	str.w	r2, [r3, #20]!
   1c8dc:	4c06      	ldr	r4, [pc, #24]	; (1c8f8 <ble_ll_acl_data_in+0x30>)
   1c8de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   1c8e0:	6015      	str	r5, [r2, #0]
   1c8e2:	64e3      	str	r3, [r4, #76]	; 0x4c
    OS_EXIT_CRITICAL(sr);
   1c8e4:	f7f9 ff14 	bl	16710 <os_arch_restore_sr>
    os_eventq_put(&evq->evq, &ev->ev);
   1c8e8:	f104 0138 	add.w	r1, r4, #56	; 0x38
   1c8ec:	f104 0010 	add.w	r0, r4, #16
   1c8f0:	f7f8 fd85 	bl	153fe <os_eventq_put>
}
   1c8f4:	bd38      	pop	{r3, r4, r5, pc}
   1c8f6:	bf00      	nop
   1c8f8:	10001fb8 	.word	0x10001fb8

0001c8fc <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   1c8fc:	4b01      	ldr	r3, [pc, #4]	; (1c904 <ble_ll_state_set+0x8>)
   1c8fe:	7218      	strb	r0, [r3, #8]
}
   1c900:	4770      	bx	lr
   1c902:	bf00      	nop
   1c904:	10001fb8 	.word	0x10001fb8

0001c908 <ble_ll_state_get>:
}
   1c908:	4b01      	ldr	r3, [pc, #4]	; (1c910 <ble_ll_state_get+0x8>)
   1c90a:	7a18      	ldrb	r0, [r3, #8]
   1c90c:	4770      	bx	lr
   1c90e:	bf00      	nop
   1c910:	10001fb8 	.word	0x10001fb8

0001c914 <ble_ll_event_send>:
{
   1c914:	b508      	push	{r3, lr}
   1c916:	4601      	mov	r1, r0
   1c918:	4801      	ldr	r0, [pc, #4]	; (1c920 <ble_ll_event_send+0xc>)
   1c91a:	f7f8 fd70 	bl	153fe <os_eventq_put>
}
   1c91e:	bd08      	pop	{r3, pc}
   1c920:	10001fc8 	.word	0x10001fc8
   1c924:	00000000 	.word	0x00000000

0001c928 <ble_ll_read_supp_states>:
}
   1c928:	a101      	add	r1, pc, #4	; (adr r1, 1c930 <ble_ll_read_supp_states+0x8>)
   1c92a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1c92e:	4770      	bx	lr
   1c930:	2030008f 	.word	0x2030008f
   1c934:	000001c0 	.word	0x000001c0

0001c938 <ble_ll_read_supp_features>:
}
   1c938:	4b01      	ldr	r3, [pc, #4]	; (1c940 <ble_ll_read_supp_features+0x8>)
   1c93a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c93e:	4770      	bx	lr
   1c940:	10001fb8 	.word	0x10001fb8

0001c944 <ble_ll_reset>:
 * @return int The ble error code to place in the command complete event that
 * is returned when this command is issued.
 */
int
ble_ll_reset(void)
{
   1c944:	b538      	push	{r3, r4, r5, lr}
    int rc;
    os_sr_t sr;

    /* do sanity check on LL task stack */
    ble_ll_validate_task();
   1c946:	f7ff fe69 	bl	1c61c <ble_ll_validate_task>

    OS_ENTER_CRITICAL(sr);
   1c94a:	f7f9 fedb 	bl	16704 <os_arch_save_sr>
   1c94e:	4604      	mov	r4, r0
    ble_phy_disable();
   1c950:	f005 fc8e 	bl	22270 <ble_phy_disable>
    ble_ll_sched_stop();
   1c954:	f005 fb20 	bl	21f98 <ble_ll_sched_stop>
#if MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    ble_ll_scan_reset();
#endif
    ble_ll_rfmgmt_reset();
    OS_EXIT_CRITICAL(sr);
   1c958:	4620      	mov	r0, r4
   1c95a:	f7f9 fed9 	bl	16710 <os_arch_restore_sr>

#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    /* Stop any advertising */
    ble_ll_adv_reset();
   1c95e:	f000 ffe1 	bl	1d924 <ble_ll_adv_reset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PERIODIC_ADV) && MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    ble_ll_sync_reset();
#endif

    /* FLush all packets from Link layer queues */
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   1c962:	4d12      	ldr	r5, [pc, #72]	; (1c9ac <ble_ll_reset+0x68>)
   1c964:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c968:	f7ff fe1e 	bl	1c5a8 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   1c96c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1c970:	f7ff fe1a 	bl	1c5a8 <ble_ll_flush_pkt_queue>

    /* Reset LL stats */
    STATS_RESET(ble_ll_stats);
   1c974:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c978:	2100      	movs	r1, #0
   1c97a:	480d      	ldr	r0, [pc, #52]	; (1c9b0 <ble_ll_reset+0x6c>)
   1c97c:	f7fa f8bb 	bl	16af6 <memset>

    /* Reset any preferred PHYs */
    g_ble_ll_data.ll_pref_tx_phys = 0;
   1c980:	2400      	movs	r4, #0
   1c982:	732c      	strb	r4, [r5, #12]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   1c984:	736c      	strb	r4, [r5, #13]

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    /* Reset connection module */
    ble_ll_conn_module_reset();
   1c986:	f002 f807 	bl	1e998 <ble_ll_conn_module_reset>
#endif

    /* All this does is re-initialize the event masks so call the hci init */
    ble_ll_hci_init();
   1c98a:	f004 fa13 	bl	20db4 <ble_ll_hci_init>

    /* Reset scheduler */
    ble_ll_sched_init();
   1c98e:	f005 fb0b 	bl	21fa8 <ble_ll_sched_init>

    /* Set state to standby */
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c992:	4620      	mov	r0, r4
   1c994:	f7ff ffb2 	bl	1c8fc <ble_ll_state_set>

    /* Reset our random address */
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   1c998:	4b06      	ldr	r3, [pc, #24]	; (1c9b4 <ble_ll_reset+0x70>)
   1c99a:	601c      	str	r4, [r3, #0]
   1c99c:	809c      	strh	r4, [r3, #4]

    /* Clear the whitelist */
    ble_ll_whitelist_clear();
   1c99e:	f005 fb86 	bl	220ae <ble_ll_whitelist_clear>

    /* Reset resolving list */
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    ble_ll_resolv_list_reset();
   1c9a2:	f004 ffc9 	bl	21938 <ble_ll_resolv_list_reset>
#if MYNEWT_VAL(BLE_LL_LNA)
    ble_ll_plna_lna_init();
#endif

    /* Re-initialize the PHY */
    rc = ble_phy_init();
   1c9a6:	f005 fc0b 	bl	221c0 <ble_phy_init>

    return rc;
}
   1c9aa:	bd38      	pop	{r3, r4, r5, pc}
   1c9ac:	10001fb8 	.word	0x10001fb8
   1c9b0:	10001eb4 	.word	0x10001eb4
   1c9b4:	10002224 	.word	0x10002224

0001c9b8 <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   1c9b8:	300a      	adds	r0, #10
#endif

    return usecs;
}
   1c9ba:	00c0      	lsls	r0, r0, #3
   1c9bc:	4770      	bx	lr
	...

0001c9c0 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   1c9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9c2:	b08b      	sub	sp, #44	; 0x2c
#endif
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c9c4:	4b5a      	ldr	r3, [pc, #360]	; (1cb30 <ble_ll_init+0x170>)
   1c9c6:	781b      	ldrb	r3, [r3, #0]
   1c9c8:	2b00      	cmp	r3, #0
   1c9ca:	d073      	beq.n	1cab4 <ble_ll_init+0xf4>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1c9cc:	2300      	movs	r3, #0
   1c9ce:	9306      	str	r3, [sp, #24]
   1c9d0:	f8cd 301b 	str.w	r3, [sp, #27]
   1c9d4:	2206      	movs	r2, #6
   1c9d6:	a906      	add	r1, sp, #24
   1c9d8:	4856      	ldr	r0, [pc, #344]	; (1cb34 <ble_ll_init+0x174>)
   1c9da:	f7fa f843 	bl	16a64 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   1c9de:	4602      	mov	r2, r0
   1c9e0:	2800      	cmp	r0, #0
   1c9e2:	d071      	beq.n	1cac8 <ble_ll_init+0x108>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   1c9e4:	f004 ffb6 	bl	21954 <ble_ll_rfmgmt_init>
    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   1c9e8:	4c53      	ldr	r4, [pc, #332]	; (1cb38 <ble_ll_init+0x178>)
   1c9ea:	2604      	movs	r6, #4
   1c9ec:	7266      	strb	r6, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   1c9ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c9f2:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   1c9f4:	f104 0710 	add.w	r7, r4, #16
   1c9f8:	4638      	mov	r0, r7
   1c9fa:	f7f8 fcf3 	bl	153e4 <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   1c9fe:	2500      	movs	r5, #0
   1ca00:	4623      	mov	r3, r4
   1ca02:	f843 5f48 	str.w	r5, [r3, #72]!
   1ca06:	64e3      	str	r3, [r4, #76]	; 0x4c
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   1ca08:	4623      	mov	r3, r4
   1ca0a:	f843 5f30 	str.w	r5, [r3, #48]!
   1ca0e:	6363      	str	r3, [r4, #52]	; 0x34
    memset(ev, 0, sizeof(*ev));
   1ca10:	6225      	str	r5, [r4, #32]
   1ca12:	62e5      	str	r5, [r4, #44]	; 0x2c
    ev->ev.ev_queued = 0;
   1ca14:	f884 5020 	strb.w	r5, [r4, #32]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ca18:	4b48      	ldr	r3, [pc, #288]	; (1cb3c <ble_ll_init+0x17c>)
   1ca1a:	6263      	str	r3, [r4, #36]	; 0x24
    ev->ev.ev_arg = arg;
   1ca1c:	62a5      	str	r5, [r4, #40]	; 0x28
    memset(ev, 0, sizeof(*ev));
   1ca1e:	63a5      	str	r5, [r4, #56]	; 0x38
   1ca20:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_queued = 0;
   1ca22:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ca26:	4b46      	ldr	r3, [pc, #280]	; (1cb40 <ble_ll_init+0x180>)
   1ca28:	63e3      	str	r3, [r4, #60]	; 0x3c
    ev->ev.ev_arg = arg;
   1ca2a:	6425      	str	r5, [r4, #64]	; 0x40
    memset(ev, 0, sizeof(*ev));
   1ca2c:	6525      	str	r5, [r4, #80]	; 0x50
   1ca2e:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_queued = 0;
   1ca30:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ca34:	4b43      	ldr	r3, [pc, #268]	; (1cb44 <ble_ll_init+0x184>)
   1ca36:	6563      	str	r3, [r4, #84]	; 0x54
    ev->ev.ev_arg = arg;
   1ca38:	65a5      	str	r5, [r4, #88]	; 0x58
    memset(ev, 0, sizeof(*ev));
   1ca3a:	6625      	str	r5, [r4, #96]	; 0x60
   1ca3c:	66e5      	str	r5, [r4, #108]	; 0x6c
    ev->ev.ev_queued = 0;
   1ca3e:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ca42:	4b41      	ldr	r3, [pc, #260]	; (1cb48 <ble_ll_init+0x188>)
   1ca44:	6663      	str	r3, [r4, #100]	; 0x64
    ev->ev.ev_arg = arg;
   1ca46:	66a5      	str	r5, [r4, #104]	; 0x68
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1ca48:	462b      	mov	r3, r5
   1ca4a:	4a40      	ldr	r2, [pc, #256]	; (1cb4c <ble_ll_init+0x18c>)
   1ca4c:	4639      	mov	r1, r7
   1ca4e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   1ca52:	f7f8 fb4f 	bl	150f4 <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   1ca56:	f004 f9ad 	bl	20db4 <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   1ca5a:	f005 faa5 	bl	21fa8 <ble_ll_sched_init>

#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    /* Initialize advertiser */
    ble_ll_adv_init();
   1ca5e:	f000 ff8d 	bl	1d97c <ble_ll_adv_init>
    ble_ll_scan_init();
#endif

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    /* Initialize the connection module */
    ble_ll_conn_module_init();
   1ca62:	f001 ffef 	bl	1ea44 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   1ca66:	f004 ff4d 	bl	21904 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_CIS_PERIPH;
    features |= BLE_LL_FEAT_ISO_BROADCASTER;
    features |= BLE_LL_FEAT_ISO_HOST_SUPPORT;
#endif

    lldata->ll_supp_features = features;
   1ca6a:	22ff      	movs	r2, #255	; 0xff
   1ca6c:	2300      	movs	r3, #0
   1ca6e:	e9c4 2300 	strd	r2, r3, [r4]

    /* Initialize random number generation */
    ble_ll_rand_init();
   1ca72:	f004 fc59 	bl	21328 <ble_ll_rand_init>
    /* Start the random number generator */
    ble_ll_rand_start();
   1ca76:	f004 fc49 	bl	2130c <ble_ll_rand_start>

    rc = stats_init_and_reg(STATS_HDR(ble_ll_stats),
   1ca7a:	4b35      	ldr	r3, [pc, #212]	; (1cb50 <ble_ll_init+0x190>)
   1ca7c:	9301      	str	r3, [sp, #4]
   1ca7e:	9500      	str	r5, [sp, #0]
   1ca80:	462b      	mov	r3, r5
   1ca82:	2240      	movs	r2, #64	; 0x40
   1ca84:	4631      	mov	r1, r6
   1ca86:	4833      	ldr	r0, [pc, #204]	; (1cb54 <ble_ll_init+0x194>)
   1ca88:	f7fd fbcc 	bl	1a224 <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_stats),
                            "ble_ll");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ca8c:	2800      	cmp	r0, #0
   1ca8e:	d142      	bne.n	1cb16 <ble_ll_init+0x156>
#if MYNEWT_VAL(BLE_LL_DTM)
    ble_ll_dtm_init();
#endif

#if MYNEWT_VAL(BLE_LL_HCI_VS)
    ble_ll_hci_vs_init();
   1ca90:	f004 fb9c 	bl	211cc <ble_ll_hci_vs_init>
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   1ca94:	235a      	movs	r3, #90	; 0x5a
   1ca96:	9303      	str	r3, [sp, #12]
   1ca98:	4b2f      	ldr	r3, [pc, #188]	; (1cb58 <ble_ll_init+0x198>)
   1ca9a:	9302      	str	r3, [sp, #8]
   1ca9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1caa0:	9301      	str	r3, [sp, #4]
   1caa2:	2300      	movs	r3, #0
   1caa4:	9300      	str	r3, [sp, #0]
   1caa6:	4a2d      	ldr	r2, [pc, #180]	; (1cb5c <ble_ll_init+0x19c>)
   1caa8:	4929      	ldr	r1, [pc, #164]	; (1cb50 <ble_ll_init+0x190>)
   1caaa:	482d      	ldr	r0, [pc, #180]	; (1cb60 <ble_ll_init+0x1a0>)
   1caac:	f7f9 fc70 	bl	16390 <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   1cab0:	b00b      	add	sp, #44	; 0x2c
   1cab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cab4:	f7f7 fdce 	bl	14654 <hal_debugger_connected>
   1cab8:	b100      	cbz	r0, 1cabc <ble_ll_init+0xfc>
   1caba:	be01      	bkpt	0x0001
   1cabc:	2300      	movs	r3, #0
   1cabe:	461a      	mov	r2, r3
   1cac0:	4619      	mov	r1, r3
   1cac2:	4618      	mov	r0, r3
   1cac4:	f7f8 f968 	bl	14d98 <__assert_func>
        pub_dev_addr = MYNEWT_VAL(BLE_LL_PUBLIC_DEV_ADDR);
   1cac8:	4b26      	ldr	r3, [pc, #152]	; (1cb64 <ble_ll_init+0x1a4>)
   1caca:	f241 1122 	movw	r1, #4386	; 0x1122
        for (i = 0; i < BLE_DEV_ADDR_LEN; i++) {
   1cace:	2a05      	cmp	r2, #5
   1cad0:	dc07      	bgt.n	1cae2 <ble_ll_init+0x122>
            g_dev_addr[i] = pub_dev_addr & 0xff;
   1cad2:	4818      	ldr	r0, [pc, #96]	; (1cb34 <ble_ll_init+0x174>)
   1cad4:	5483      	strb	r3, [r0, r2]
            pub_dev_addr >>= 8;
   1cad6:	0a1b      	lsrs	r3, r3, #8
   1cad8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1cadc:	0a09      	lsrs	r1, r1, #8
        for (i = 0; i < BLE_DEV_ADDR_LEN; i++) {
   1cade:	3201      	adds	r2, #1
   1cae0:	e7f5      	b.n	1cace <ble_ll_init+0x10e>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1cae2:	2300      	movs	r3, #0
   1cae4:	9308      	str	r3, [sp, #32]
   1cae6:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   1caea:	2206      	movs	r2, #6
   1caec:	a908      	add	r1, sp, #32
   1caee:	4811      	ldr	r0, [pc, #68]	; (1cb34 <ble_ll_init+0x174>)
   1caf0:	f7f9 ffb8 	bl	16a64 <memcmp>
        if (ble_ll_is_addr_empty(g_dev_addr)) {
   1caf4:	2800      	cmp	r0, #0
   1caf6:	f47f af75 	bne.w	1c9e4 <ble_ll_init+0x24>
            rc = ble_hw_get_public_addr(&addr);
   1cafa:	a804      	add	r0, sp, #16
   1cafc:	f005 fb24 	bl	22148 <ble_hw_get_public_addr>
            if (!rc) {
   1cb00:	2800      	cmp	r0, #0
   1cb02:	f47f af6f 	bne.w	1c9e4 <ble_ll_init+0x24>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   1cb06:	4b0b      	ldr	r3, [pc, #44]	; (1cb34 <ble_ll_init+0x174>)
   1cb08:	f8dd 0011 	ldr.w	r0, [sp, #17]
   1cb0c:	6018      	str	r0, [r3, #0]
   1cb0e:	f8bd 2015 	ldrh.w	r2, [sp, #21]
   1cb12:	809a      	strh	r2, [r3, #4]
   1cb14:	e766      	b.n	1c9e4 <ble_ll_init+0x24>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cb16:	f7f7 fd9d 	bl	14654 <hal_debugger_connected>
   1cb1a:	b100      	cbz	r0, 1cb1e <ble_ll_init+0x15e>
   1cb1c:	be01      	bkpt	0x0001
   1cb1e:	2000      	movs	r0, #0
   1cb20:	9000      	str	r0, [sp, #0]
   1cb22:	4b11      	ldr	r3, [pc, #68]	; (1cb68 <ble_ll_init+0x1a8>)
   1cb24:	681c      	ldr	r4, [r3, #0]
   1cb26:	4603      	mov	r3, r0
   1cb28:	4602      	mov	r2, r0
   1cb2a:	4601      	mov	r1, r0
   1cb2c:	47a0      	blx	r4
   1cb2e:	e7af      	b.n	1ca90 <ble_ll_init+0xd0>
   1cb30:	10001e3c 	.word	0x10001e3c
   1cb34:	1000221c 	.word	0x1000221c
   1cb38:	10001fb8 	.word	0x10001fb8
   1cb3c:	0001c795 	.word	0x0001c795
   1cb40:	0001c705 	.word	0x0001c705
   1cb44:	0001c67b 	.word	0x0001c67b
   1cb48:	0001c671 	.word	0x0001c671
   1cb4c:	0001c655 	.word	0x0001c655
   1cb50:	000346f4 	.word	0x000346f4
   1cb54:	10001ea8 	.word	0x10001ea8
   1cb58:	10002048 	.word	0x10002048
   1cb5c:	0001c5c9 	.word	0x0001c5c9
   1cb60:	100021c8 	.word	0x100021c8
   1cb64:	33445566 	.word	0x33445566
   1cb68:	1000028c 	.word	0x1000028c

0001cb6c <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   1cb6c:	7883      	ldrb	r3, [r0, #2]
   1cb6e:	f013 0f01 	tst.w	r3, #1
   1cb72:	d104      	bne.n	1cb7e <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   1cb74:	f013 0f02 	tst.w	r3, #2
   1cb78:	d003      	beq.n	1cb82 <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1cb7a:	2026      	movs	r0, #38	; 0x26
   1cb7c:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1cb7e:	2025      	movs	r0, #37	; 0x25
   1cb80:	4770      	bx	lr
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1cb82:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   1cb84:	4770      	bx	lr

0001cb86 <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   1cb86:	7883      	ldrb	r3, [r0, #2]
   1cb88:	f013 0f04 	tst.w	r3, #4
   1cb8c:	d104      	bne.n	1cb98 <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   1cb8e:	f013 0f02 	tst.w	r3, #2
   1cb92:	d003      	beq.n	1cb9c <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1cb94:	2026      	movs	r0, #38	; 0x26
   1cb96:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1cb98:	2027      	movs	r0, #39	; 0x27
   1cb9a:	4770      	bx	lr
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1cb9c:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   1cb9e:	4770      	bx	lr

0001cba0 <ble_ll_adv_flags_set>:
{
   1cba0:	b538      	push	{r3, r4, r5, lr}
   1cba2:	4605      	mov	r5, r0
   1cba4:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   1cba6:	f7f9 fdad 	bl	16704 <os_arch_save_sr>
    advsm->flags |= flags;
   1cbaa:	8969      	ldrh	r1, [r5, #10]
   1cbac:	430c      	orrs	r4, r1
   1cbae:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   1cbb0:	f7f9 fdae 	bl	16710 <os_arch_restore_sr>
}
   1cbb4:	bd38      	pop	{r3, r4, r5, pc}

0001cbb6 <ble_ll_adv_flags_clear>:
{
   1cbb6:	b538      	push	{r3, r4, r5, lr}
   1cbb8:	4604      	mov	r4, r0
   1cbba:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   1cbbc:	f7f9 fda2 	bl	16704 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1cbc0:	8963      	ldrh	r3, [r4, #10]
   1cbc2:	ea23 0105 	bic.w	r1, r3, r5
   1cbc6:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1cbc8:	f7f9 fda2 	bl	16710 <os_arch_restore_sr>
}
   1cbcc:	bd38      	pop	{r3, r4, r5, pc}

0001cbce <ble_ll_adv_rpa_update>:
{
   1cbce:	b538      	push	{r3, r4, r5, lr}
   1cbd0:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1cbd2:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1cbd6:	2301      	movs	r3, #1
   1cbd8:	f100 0224 	add.w	r2, r0, #36	; 0x24
   1cbdc:	7941      	ldrb	r1, [r0, #5]
   1cbde:	4628      	mov	r0, r5
   1cbe0:	f004 fe70 	bl	218c4 <ble_ll_resolv_gen_rpa>
   1cbe4:	b960      	cbnz	r0, 1cc00 <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   1cbe6:	7923      	ldrb	r3, [r4, #4]
   1cbe8:	f013 0f01 	tst.w	r3, #1
   1cbec:	d00d      	beq.n	1cc0a <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1cbee:	2101      	movs	r1, #1
   1cbf0:	4620      	mov	r0, r4
   1cbf2:	f7ff ffd5 	bl	1cba0 <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1cbf6:	89a3      	ldrh	r3, [r4, #12]
   1cbf8:	f013 0f04 	tst.w	r3, #4
   1cbfc:	d10a      	bne.n	1cc14 <ble_ll_adv_rpa_update+0x46>
}
   1cbfe:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1cc00:	2101      	movs	r1, #1
   1cc02:	4620      	mov	r0, r4
   1cc04:	f7ff ffcc 	bl	1cba0 <ble_ll_adv_flags_set>
   1cc08:	e7f5      	b.n	1cbf6 <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1cc0a:	2101      	movs	r1, #1
   1cc0c:	4620      	mov	r0, r4
   1cc0e:	f7ff ffd2 	bl	1cbb6 <ble_ll_adv_flags_clear>
   1cc12:	e7f0      	b.n	1cbf6 <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1cc14:	2300      	movs	r3, #0
   1cc16:	f104 0236 	add.w	r2, r4, #54	; 0x36
   1cc1a:	7961      	ldrb	r1, [r4, #5]
   1cc1c:	4628      	mov	r0, r5
   1cc1e:	f004 fe51 	bl	218c4 <ble_ll_resolv_gen_rpa>
   1cc22:	b940      	cbnz	r0, 1cc36 <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   1cc24:	7963      	ldrb	r3, [r4, #5]
   1cc26:	f013 0f01 	tst.w	r3, #1
   1cc2a:	d009      	beq.n	1cc40 <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1cc2c:	2102      	movs	r1, #2
   1cc2e:	4620      	mov	r0, r4
   1cc30:	f7ff ffb6 	bl	1cba0 <ble_ll_adv_flags_set>
   1cc34:	e7e3      	b.n	1cbfe <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1cc36:	2102      	movs	r1, #2
   1cc38:	4620      	mov	r0, r4
   1cc3a:	f7ff ffb1 	bl	1cba0 <ble_ll_adv_flags_set>
   1cc3e:	e7de      	b.n	1cbfe <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1cc40:	2102      	movs	r1, #2
   1cc42:	4620      	mov	r0, r4
   1cc44:	f7ff ffb7 	bl	1cbb6 <ble_ll_adv_flags_clear>
}
   1cc48:	e7d9      	b.n	1cbfe <ble_ll_adv_rpa_update+0x30>

0001cc4a <ble_ll_adv_active_chanset_clear>:
{
   1cc4a:	b510      	push	{r4, lr}
   1cc4c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1cc4e:	f7f9 fd59 	bl	16704 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1cc52:	8963      	ldrh	r3, [r4, #10]
   1cc54:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1cc58:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1cc5a:	f7f9 fd59 	bl	16710 <os_arch_restore_sr>
}
   1cc5e:	bd10      	pop	{r4, pc}

0001cc60 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   1cc60:	b510      	push	{r4, lr}
   1cc62:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);
   1cc64:	4a08      	ldr	r2, [pc, #32]	; (1cc88 <ble_ll_adv_drop_event+0x28>)
   1cc66:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1cc68:	3301      	adds	r3, #1
   1cc6a:	6793      	str	r3, [r2, #120]	; 0x78

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1cc6c:	3060      	adds	r0, #96	; 0x60
   1cc6e:	f005 f943 	bl	21ef8 <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1cc72:	4620      	mov	r0, r4
   1cc74:	f7ff ff87 	bl	1cb86 <ble_ll_adv_final_chan>
   1cc78:	71a0      	strb	r0, [r4, #6]
    os_eventq_put(&evq->evq, &ev->ev);
   1cc7a:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1cc7e:	4803      	ldr	r0, [pc, #12]	; (1cc8c <ble_ll_adv_drop_event+0x2c>)
   1cc80:	f7f8 fbbd 	bl	153fe <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   1cc84:	bd10      	pop	{r4, pc}
   1cc86:	bf00      	nop
   1cc88:	10001ea8 	.word	0x10001ea8
   1cc8c:	10001fc8 	.word	0x10001fc8

0001cc90 <ble_ll_adv_tx_done>:
{
   1cc90:	b510      	push	{r4, lr}
   1cc92:	4604      	mov	r4, r0
    ble_phy_txpwr_set(g_ble_ll_tx_power);
   1cc94:	4b09      	ldr	r3, [pc, #36]	; (1ccbc <ble_ll_adv_tx_done+0x2c>)
   1cc96:	f993 0000 	ldrsb.w	r0, [r3]
   1cc9a:	f005 faa7 	bl	221ec <ble_phy_txpwr_set>
   1cc9e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1cca2:	4807      	ldr	r0, [pc, #28]	; (1ccc0 <ble_ll_adv_tx_done+0x30>)
   1cca4:	f7f8 fbab 	bl	153fe <os_eventq_put>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1cca8:	2000      	movs	r0, #0
   1ccaa:	f7ff fe27 	bl	1c8fc <ble_ll_state_set>
    ble_ll_adv_active_chanset_clear(advsm);
   1ccae:	4620      	mov	r0, r4
   1ccb0:	f7ff ffcb 	bl	1cc4a <ble_ll_adv_active_chanset_clear>
    g_ble_ll_cur_adv_sm = NULL;
   1ccb4:	4b03      	ldr	r3, [pc, #12]	; (1ccc4 <ble_ll_adv_tx_done+0x34>)
   1ccb6:	2200      	movs	r2, #0
   1ccb8:	601a      	str	r2, [r3, #0]
}
   1ccba:	bd10      	pop	{r4, pc}
   1ccbc:	10002218 	.word	0x10002218
   1ccc0:	10001fc8 	.word	0x10001fc8
   1ccc4:	100022a8 	.word	0x100022a8

0001ccc8 <ble_ll_adv_sm_find_configured>:
{
   1ccc8:	b510      	push	{r4, lr}
   1ccca:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   1cccc:	f003 ff21 	bl	20b12 <ble_ll_hci_adv_mode_ext>
   1ccd0:	b9d0      	cbnz	r0, 1cd08 <ble_ll_adv_sm_find_configured+0x40>
        BLE_LL_ASSERT(instance == 0);
   1ccd2:	b90c      	cbnz	r4, 1ccd8 <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   1ccd4:	480f      	ldr	r0, [pc, #60]	; (1cd14 <ble_ll_adv_sm_find_configured+0x4c>)
}
   1ccd6:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   1ccd8:	f7f7 fcbc 	bl	14654 <hal_debugger_connected>
   1ccdc:	b100      	cbz	r0, 1cce0 <ble_ll_adv_sm_find_configured+0x18>
   1ccde:	be01      	bkpt	0x0001
   1cce0:	2300      	movs	r3, #0
   1cce2:	461a      	mov	r2, r3
   1cce4:	4619      	mov	r1, r3
   1cce6:	4618      	mov	r0, r3
   1cce8:	f7f8 f856 	bl	14d98 <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   1ccec:	ebc2 1042 	rsb	r0, r2, r2, lsl #5
   1ccf0:	4b08      	ldr	r3, [pc, #32]	; (1cd14 <ble_ll_adv_sm_find_configured+0x4c>)
   1ccf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1ccf6:	8943      	ldrh	r3, [r0, #10]
   1ccf8:	f013 0f80 	tst.w	r3, #128	; 0x80
   1ccfc:	d002      	beq.n	1cd04 <ble_ll_adv_sm_find_configured+0x3c>
                (advsm->adv_instance == instance)) {
   1ccfe:	7843      	ldrb	r3, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1cd00:	42a3      	cmp	r3, r4
   1cd02:	d0e8      	beq.n	1ccd6 <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   1cd04:	3201      	adds	r2, #1
   1cd06:	e000      	b.n	1cd0a <ble_ll_adv_sm_find_configured+0x42>
   1cd08:	2200      	movs	r2, #0
   1cd0a:	2a00      	cmp	r2, #0
   1cd0c:	d0ee      	beq.n	1ccec <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   1cd0e:	2000      	movs	r0, #0
   1cd10:	e7e1      	b.n	1ccd6 <ble_ll_adv_sm_find_configured+0xe>
   1cd12:	bf00      	nop
   1cd14:	1000222c 	.word	0x1000222c

0001cd18 <ble_ll_adv_active_chanset_set_pri>:
{
   1cd18:	b510      	push	{r4, lr}
   1cd1a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1cd1c:	f7f9 fcf2 	bl	16704 <os_arch_save_sr>
    BLE_LL_ASSERT((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1cd20:	8963      	ldrh	r3, [r4, #10]
   1cd22:	f013 0f30 	tst.w	r3, #48	; 0x30
   1cd26:	d107      	bne.n	1cd38 <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1cd28:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   1cd2c:	f043 0310 	orr.w	r3, r3, #16
   1cd30:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1cd32:	f7f9 fced 	bl	16710 <os_arch_restore_sr>
}
   1cd36:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1cd38:	f7f7 fc8c 	bl	14654 <hal_debugger_connected>
   1cd3c:	b100      	cbz	r0, 1cd40 <ble_ll_adv_active_chanset_set_pri+0x28>
   1cd3e:	be01      	bkpt	0x0001
   1cd40:	2300      	movs	r3, #0
   1cd42:	461a      	mov	r2, r3
   1cd44:	4619      	mov	r1, r3
   1cd46:	4618      	mov	r0, r3
   1cd48:	f7f8 f826 	bl	14d98 <__assert_func>

0001cd4c <ble_ll_adv_scheduled>:
{
   1cd4c:	b538      	push	{r3, r4, r5, lr}
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   1cd4e:	4b08      	ldr	r3, [pc, #32]	; (1cd70 <ble_ll_adv_scheduled+0x24>)
   1cd50:	781d      	ldrb	r5, [r3, #0]
   1cd52:	440d      	add	r5, r1
   1cd54:	6185      	str	r5, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1cd56:	61c5      	str	r5, [r0, #28]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1cd58:	8983      	ldrh	r3, [r0, #12]
   1cd5a:	f013 0f08 	tst.w	r3, #8
   1cd5e:	d100      	bne.n	1cd62 <ble_ll_adv_scheduled+0x16>
}
   1cd60:	bd38      	pop	{r3, r4, r5, pc}
   1cd62:	4604      	mov	r4, r0
    if (usecs <= 31249) {
        return (usecs * 137439) / 4194304;
    }
#endif

    return os_cputime_usecs_to_ticks(usecs);
   1cd64:	4803      	ldr	r0, [pc, #12]	; (1cd74 <ble_ll_adv_scheduled+0x28>)
   1cd66:	f015 f951 	bl	3200c <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   1cd6a:	4405      	add	r5, r0
   1cd6c:	6225      	str	r5, [r4, #32]
}
   1cd6e:	e7f7      	b.n	1cd60 <ble_ll_adv_scheduled+0x14>
   1cd70:	10002665 	.word	0x10002665
   1cd74:	00138800 	.word	0x00138800

0001cd78 <ble_ll_adv_set_sched>:
{
   1cd78:	b538      	push	{r3, r4, r5, lr}
   1cd7a:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   1cd7c:	66c0      	str	r0, [r0, #108]	; 0x6c
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   1cd7e:	4b15      	ldr	r3, [pc, #84]	; (1cdd4 <ble_ll_adv_set_sched+0x5c>)
   1cd80:	6703      	str	r3, [r0, #112]	; 0x70
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   1cd82:	2101      	movs	r1, #1
   1cd84:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   1cd88:	79c0      	ldrb	r0, [r0, #7]
   1cd8a:	f7ff fe15 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1cd8e:	89a3      	ldrh	r3, [r4, #12]
   1cd90:	f013 0f04 	tst.w	r3, #4
   1cd94:	d015      	beq.n	1cdc2 <ble_ll_adv_set_sched+0x4a>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   1cd96:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1cd9a:	69e5      	ldr	r5, [r4, #28]
   1cd9c:	4b0e      	ldr	r3, [pc, #56]	; (1cdd8 <ble_ll_adv_set_sched+0x60>)
   1cd9e:	781b      	ldrb	r3, [r3, #0]
   1cda0:	1aeb      	subs	r3, r5, r3
   1cda2:	6663      	str	r3, [r4, #100]	; 0x64
    sch->remainder = 0;
   1cda4:	2300      	movs	r3, #0
   1cda6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}

static inline uint32_t
ble_ll_tmr_u2t_up(uint32_t usecs)
{
    return ble_ll_tmr_u2t(usecs + (USECS_PER_TICK - 1));
   1cdaa:	301e      	adds	r0, #30
    if (usecs <= 31249) {
   1cdac:	f647 2311 	movw	r3, #31249	; 0x7a11
   1cdb0:	4298      	cmp	r0, r3
   1cdb2:	d80c      	bhi.n	1cdce <ble_ll_adv_set_sched+0x56>
        return (usecs * 137439) / 4194304;
   1cdb4:	4b09      	ldr	r3, [pc, #36]	; (1cddc <ble_ll_adv_set_sched+0x64>)
   1cdb6:	fb03 f000 	mul.w	r0, r3, r0
   1cdba:	0d80      	lsrs	r0, r0, #22
    sch->end_time = advsm->adv_pdu_start_time + ble_ll_tmr_u2t_up(max_usecs);
   1cdbc:	4428      	add	r0, r5
   1cdbe:	66a0      	str	r0, [r4, #104]	; 0x68
}
   1cdc0:	bd38      	pop	{r3, r4, r5, pc}
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1cdc2:	f013 0f01 	tst.w	r3, #1
   1cdc6:	d0e8      	beq.n	1cd9a <ble_ll_adv_set_sched+0x22>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   1cdc8:	f500 7055 	add.w	r0, r0, #852	; 0x354
   1cdcc:	e7e5      	b.n	1cd9a <ble_ll_adv_set_sched+0x22>
    return os_cputime_usecs_to_ticks(usecs);
   1cdce:	f015 f91d 	bl	3200c <os_cputime_usecs_to_ticks>
   1cdd2:	e7f3      	b.n	1cdbc <ble_ll_adv_set_sched+0x44>
   1cdd4:	0001cf0d 	.word	0x0001cf0d
   1cdd8:	10002665 	.word	0x10002665
   1cddc:	000218df 	.word	0x000218df

0001cde0 <ble_ll_adv_sm_start>:
{
   1cde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cde2:	4604      	mov	r4, r0
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   1cde4:	210b      	movs	r1, #11
   1cde6:	f7ff fee6 	bl	1cbb6 <ble_ll_adv_flags_clear>
    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   1cdea:	4943      	ldr	r1, [pc, #268]	; (1cef8 <ble_ll_adv_sm_start+0x118>)
   1cdec:	7920      	ldrb	r0, [r4, #4]
   1cdee:	f7ff fd3b 	bl	1c868 <ble_ll_is_valid_own_addr_type>
   1cdf2:	2800      	cmp	r0, #0
   1cdf4:	d07e      	beq.n	1cef4 <ble_ll_adv_sm_start+0x114>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1cdf6:	89a3      	ldrh	r3, [r4, #12]
   1cdf8:	f013 0f01 	tst.w	r3, #1
   1cdfc:	d001      	beq.n	1ce02 <ble_ll_adv_sm_start+0x22>
        if (advsm->conn_comp_ev == NULL) {
   1cdfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1ce00:	b14b      	cbz	r3, 1ce16 <ble_ll_adv_sm_start+0x36>
    if ((advsm->own_addr_type & 1) == 0) {
   1ce02:	7923      	ldrb	r3, [r4, #4]
   1ce04:	f013 0f01 	tst.w	r3, #1
   1ce08:	d00d      	beq.n	1ce26 <ble_ll_adv_sm_start+0x46>
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   1ce0a:	8962      	ldrh	r2, [r4, #10]
   1ce0c:	f042 0201 	orr.w	r2, r2, #1
   1ce10:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   1ce12:	4a39      	ldr	r2, [pc, #228]	; (1cef8 <ble_ll_adv_sm_start+0x118>)
   1ce14:	e008      	b.n	1ce28 <ble_ll_adv_sm_start+0x48>
            advsm->conn_comp_ev = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1ce16:	2002      	movs	r0, #2
   1ce18:	f010 fc28 	bl	2d66c <ble_hci_trans_buf_alloc>
   1ce1c:	64e0      	str	r0, [r4, #76]	; 0x4c
            if (!advsm->conn_comp_ev) {
   1ce1e:	2800      	cmp	r0, #0
   1ce20:	d1ef      	bne.n	1ce02 <ble_ll_adv_sm_start+0x22>
                return BLE_ERR_MEM_CAPACITY;
   1ce22:	2007      	movs	r0, #7
   1ce24:	e03f      	b.n	1cea6 <ble_ll_adv_sm_start+0xc6>
        addr = g_dev_addr;
   1ce26:	4a35      	ldr	r2, [pc, #212]	; (1cefc <ble_ll_adv_sm_start+0x11c>)
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   1ce28:	6811      	ldr	r1, [r2, #0]
   1ce2a:	6261      	str	r1, [r4, #36]	; 0x24
   1ce2c:	8892      	ldrh	r2, [r2, #4]
   1ce2e:	8522      	strh	r2, [r4, #40]	; 0x28
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1ce30:	89a2      	ldrh	r2, [r4, #12]
   1ce32:	f012 0f04 	tst.w	r2, #4
   1ce36:	d137      	bne.n	1cea8 <ble_ll_adv_sm_start+0xc8>
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1ce38:	2b01      	cmp	r3, #1
   1ce3a:	d845      	bhi.n	1cec8 <ble_ll_adv_sm_start+0xe8>
    advsm->adv_enabled = 1;
   1ce3c:	2301      	movs	r3, #1
   1ce3e:	7023      	strb	r3, [r4, #0]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1ce40:	89a3      	ldrh	r3, [r4, #12]
   1ce42:	f013 0f08 	tst.w	r3, #8
   1ce46:	d043      	beq.n	1ced0 <ble_ll_adv_sm_start+0xf0>
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   1ce48:	f640 63a6 	movw	r3, #3750	; 0xea6
   1ce4c:	6163      	str	r3, [r4, #20]
    adv_chan = ble_ll_adv_first_chan(advsm);
   1ce4e:	4620      	mov	r0, r4
   1ce50:	f7ff fe8c 	bl	1cb6c <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   1ce54:	71a0      	strb	r0, [r4, #6]
    return os_cputime_get32();
   1ce56:	f015 f8d4 	bl	32002 <os_cputime_get32>
   1ce5a:	4606      	mov	r6, r0
    start_delay_us = ble_ll_rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   1ce5c:	f004 fa2c 	bl	212b8 <ble_ll_rand>
   1ce60:	4d27      	ldr	r5, [pc, #156]	; (1cf00 <ble_ll_adv_sm_start+0x120>)
   1ce62:	fba5 3500 	umull	r3, r5, r5, r0
   1ce66:	0b6d      	lsrs	r5, r5, #13
   1ce68:	f242 7310 	movw	r3, #10000	; 0x2710
   1ce6c:	fb03 0515 	mls	r5, r3, r5, r0
   1ce70:	f015 f8c7 	bl	32002 <os_cputime_get32>
   1ce74:	4607      	mov	r7, r0
    if (usecs <= 31249) {
   1ce76:	f647 2311 	movw	r3, #31249	; 0x7a11
   1ce7a:	429d      	cmp	r5, r3
   1ce7c:	d82f      	bhi.n	1cede <ble_ll_adv_sm_start+0xfe>
        return (usecs * 137439) / 4194304;
   1ce7e:	4b21      	ldr	r3, [pc, #132]	; (1cf04 <ble_ll_adv_sm_start+0x124>)
   1ce80:	fb03 f505 	mul.w	r5, r3, r5
   1ce84:	0dad      	lsrs	r5, r5, #22
    advsm->adv_pdu_start_time = ble_ll_tmr_get() +
   1ce86:	443d      	add	r5, r7
   1ce88:	61e5      	str	r5, [r4, #28]
    ble_ll_adv_set_sched(advsm);
   1ce8a:	4620      	mov	r0, r4
   1ce8c:	f7ff ff74 	bl	1cd78 <ble_ll_adv_set_sched>
    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   1ce90:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1ce92:	1b83      	subs	r3, r0, r6
    if (delta < 0) {
   1ce94:	2b00      	cmp	r3, #0
   1ce96:	db27      	blt.n	1cee8 <ble_ll_adv_sm_start+0x108>
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   1ce98:	2200      	movs	r2, #0
   1ce9a:	491b      	ldr	r1, [pc, #108]	; (1cf08 <ble_ll_adv_sm_start+0x128>)
   1ce9c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1cea0:	f004 ff74 	bl	21d8c <ble_ll_sched_adv_new>
    return BLE_ERR_SUCCESS;
   1cea4:	2000      	movs	r0, #0
}
   1cea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   1cea8:	4622      	mov	r2, r4
   1ceaa:	f852 1f30 	ldr.w	r1, [r2, #48]!
   1ceae:	f8c4 1036 	str.w	r1, [r4, #54]	; 0x36
   1ceb2:	8892      	ldrh	r2, [r2, #4]
   1ceb4:	8762      	strh	r2, [r4, #58]	; 0x3a
        if (advsm->peer_addr_type & 1) {
   1ceb6:	7962      	ldrb	r2, [r4, #5]
   1ceb8:	f012 0f01 	tst.w	r2, #1
   1cebc:	d0bc      	beq.n	1ce38 <ble_ll_adv_sm_start+0x58>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   1cebe:	8962      	ldrh	r2, [r4, #10]
   1cec0:	f042 0202 	orr.w	r2, r2, #2
   1cec4:	8162      	strh	r2, [r4, #10]
   1cec6:	e7b7      	b.n	1ce38 <ble_ll_adv_sm_start+0x58>
        ble_ll_adv_rpa_update(advsm);
   1cec8:	4620      	mov	r0, r4
   1ceca:	f7ff fe80 	bl	1cbce <ble_ll_adv_rpa_update>
   1cece:	e7b5      	b.n	1ce3c <ble_ll_adv_sm_start+0x5c>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   1ced0:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   1ced2:	f240 2371 	movw	r3, #625	; 0x271
   1ced6:	fb03 f302 	mul.w	r3, r3, r2
   1ceda:	6163      	str	r3, [r4, #20]
   1cedc:	e7b7      	b.n	1ce4e <ble_ll_adv_sm_start+0x6e>
    return os_cputime_usecs_to_ticks(usecs);
   1cede:	4628      	mov	r0, r5
   1cee0:	f015 f894 	bl	3200c <os_cputime_usecs_to_ticks>
   1cee4:	4605      	mov	r5, r0
   1cee6:	e7ce      	b.n	1ce86 <ble_ll_adv_sm_start+0xa6>
        advsm->adv_sch.start_time -= delta;
   1cee8:	6666      	str	r6, [r4, #100]	; 0x64
        advsm->adv_sch.end_time -= delta;
   1ceea:	1a36      	subs	r6, r6, r0
   1ceec:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1ceee:	4406      	add	r6, r0
   1cef0:	66a6      	str	r6, [r4, #104]	; 0x68
   1cef2:	e7d1      	b.n	1ce98 <ble_ll_adv_sm_start+0xb8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1cef4:	2012      	movs	r0, #18
   1cef6:	e7d6      	b.n	1cea6 <ble_ll_adv_sm_start+0xc6>
   1cef8:	10002224 	.word	0x10002224
   1cefc:	1000221c 	.word	0x1000221c
   1cf00:	d1b71759 	.word	0xd1b71759
   1cf04:	000218df 	.word	0x000218df
   1cf08:	0001cd4d 	.word	0x0001cd4d

0001cf0c <ble_ll_adv_tx_start_cb>:
{
   1cf0c:	b538      	push	{r3, r4, r5, lr}
   1cf0e:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   1cf10:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   1cf12:	4b32      	ldr	r3, [pc, #200]	; (1cfdc <ble_ll_adv_tx_start_cb+0xd0>)
   1cf14:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   1cf16:	4620      	mov	r0, r4
   1cf18:	f7ff fefe 	bl	1cd18 <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   1cf1c:	8963      	ldrh	r3, [r4, #10]
   1cf1e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1cf22:	d005      	beq.n	1cf30 <ble_ll_adv_tx_start_cb+0x24>
    ble_ll_adv_tx_done(advsm);
   1cf24:	4620      	mov	r0, r4
   1cf26:	f7ff feb3 	bl	1cc90 <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   1cf2a:	2501      	movs	r5, #1
}
   1cf2c:	4628      	mov	r0, r5
   1cf2e:	bd38      	pop	{r3, r4, r5, pc}
    ble_phy_txpwr_set(advsm->adv_txpwr);
   1cf30:	f994 0009 	ldrsb.w	r0, [r4, #9]
   1cf34:	f005 f95a 	bl	221ec <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1cf38:	4a29      	ldr	r2, [pc, #164]	; (1cfe0 <ble_ll_adv_tx_start_cb+0xd4>)
   1cf3a:	492a      	ldr	r1, [pc, #168]	; (1cfe4 <ble_ll_adv_tx_start_cb+0xd8>)
   1cf3c:	79a0      	ldrb	r0, [r4, #6]
   1cf3e:	f005 f983 	bl	22248 <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   1cf42:	b960      	cbnz	r0, 1cf5e <ble_ll_adv_tx_start_cb+0x52>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   1cf44:	6868      	ldr	r0, [r5, #4]
   1cf46:	4b28      	ldr	r3, [pc, #160]	; (1cfe8 <ble_ll_adv_tx_start_cb+0xdc>)
   1cf48:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   1cf4a:	78a9      	ldrb	r1, [r5, #2]
   1cf4c:	4418      	add	r0, r3
   1cf4e:	f005 f949 	bl	221e4 <ble_phy_tx_set_start_time>
    if (rc) {
   1cf52:	b170      	cbz	r0, 1cf72 <ble_ll_adv_tx_start_cb+0x66>
        STATS_INC(ble_ll_stats, adv_late_starts);
   1cf54:	4a25      	ldr	r2, [pc, #148]	; (1cfec <ble_ll_adv_tx_start_cb+0xe0>)
   1cf56:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1cf58:	3301      	adds	r3, #1
   1cf5a:	6713      	str	r3, [r2, #112]	; 0x70
        goto adv_tx_done;
   1cf5c:	e7e2      	b.n	1cf24 <ble_ll_adv_tx_start_cb+0x18>
    BLE_LL_ASSERT(rc == 0);
   1cf5e:	f7f7 fb79 	bl	14654 <hal_debugger_connected>
   1cf62:	b100      	cbz	r0, 1cf66 <ble_ll_adv_tx_start_cb+0x5a>
   1cf64:	be01      	bkpt	0x0001
   1cf66:	2300      	movs	r3, #0
   1cf68:	461a      	mov	r2, r3
   1cf6a:	4619      	mov	r1, r3
   1cf6c:	4618      	mov	r0, r3
   1cf6e:	f7f7 ff13 	bl	14d98 <__assert_func>
    ble_phy_encrypt_disable();
   1cf72:	f005 f930 	bl	221d6 <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1cf76:	23ff      	movs	r3, #255	; 0xff
   1cf78:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   1cf7a:	f004 fcbd 	bl	218f8 <ble_ll_resolv_enabled>
   1cf7e:	b300      	cbz	r0, 1cfc2 <ble_ll_adv_tx_start_cb+0xb6>
        ble_phy_resolv_list_enable();
   1cf80:	f005 f9be 	bl	22300 <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1cf84:	89a3      	ldrh	r3, [r4, #12]
   1cf86:	f013 0f10 	tst.w	r3, #16
   1cf8a:	d002      	beq.n	1cf92 <ble_ll_adv_tx_start_cb+0x86>
   1cf8c:	f013 0f03 	tst.w	r3, #3
   1cf90:	d11a      	bne.n	1cfc8 <ble_ll_adv_tx_start_cb+0xbc>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1cf92:	4621      	mov	r1, r4
   1cf94:	4816      	ldr	r0, [pc, #88]	; (1cff0 <ble_ll_adv_tx_start_cb+0xe4>)
   1cf96:	f005 f91f 	bl	221d8 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   1cf9a:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   1cf9c:	4621      	mov	r1, r4
   1cf9e:	4815      	ldr	r0, [pc, #84]	; (1cff4 <ble_ll_adv_tx_start_cb+0xe8>)
   1cfa0:	f005 f972 	bl	22288 <ble_phy_tx>
    if (rc) {
   1cfa4:	4605      	mov	r5, r0
   1cfa6:	2800      	cmp	r0, #0
   1cfa8:	d1bc      	bne.n	1cf24 <ble_ll_adv_tx_start_cb+0x18>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   1cfaa:	78e3      	ldrb	r3, [r4, #3]
   1cfac:	b193      	cbz	r3, 1cfd4 <ble_ll_adv_tx_start_cb+0xc8>
        ble_ll_whitelist_enable();
   1cfae:	f005 f8c3 	bl	22138 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   1cfb2:	2001      	movs	r0, #1
   1cfb4:	f7ff fca2 	bl	1c8fc <ble_ll_state_set>
    STATS_INC(ble_ll_stats, adv_txg);
   1cfb8:	4a0c      	ldr	r2, [pc, #48]	; (1cfec <ble_ll_adv_tx_start_cb+0xe0>)
   1cfba:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cfbc:	3301      	adds	r3, #1
   1cfbe:	66d3      	str	r3, [r2, #108]	; 0x6c
    return BLE_LL_SCHED_STATE_RUNNING;
   1cfc0:	e7b4      	b.n	1cf2c <ble_ll_adv_tx_start_cb+0x20>
        ble_phy_resolv_list_disable();
   1cfc2:	f005 f9a3 	bl	2230c <ble_phy_resolv_list_disable>
   1cfc6:	e7dd      	b.n	1cf84 <ble_ll_adv_tx_start_cb+0x78>
        ble_phy_set_txend_cb(NULL, NULL);
   1cfc8:	2100      	movs	r1, #0
   1cfca:	4608      	mov	r0, r1
   1cfcc:	f005 f904 	bl	221d8 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   1cfd0:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   1cfd2:	e7e3      	b.n	1cf9c <ble_ll_adv_tx_start_cb+0x90>
        ble_ll_whitelist_disable();
   1cfd4:	f005 f8b4 	bl	22140 <ble_ll_whitelist_disable>
   1cfd8:	e7eb      	b.n	1cfb2 <ble_ll_adv_tx_start_cb+0xa6>
   1cfda:	bf00      	nop
   1cfdc:	100022a8 	.word	0x100022a8
   1cfe0:	00555555 	.word	0x00555555
   1cfe4:	8e89bed6 	.word	0x8e89bed6
   1cfe8:	10002665 	.word	0x10002665
   1cfec:	10001ea8 	.word	0x10001ea8
   1cff0:	0001cc91 	.word	0x0001cc91
   1cff4:	0001cff9 	.word	0x0001cff9

0001cff8 <ble_ll_adv_legacy_pdu_make>:
{
   1cff8:	b570      	push	{r4, r5, r6, lr}
   1cffa:	460c      	mov	r4, r1
   1cffc:	4613      	mov	r3, r2
    adv_data_len = ADV_DATA_LEN(advsm);
   1cffe:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   1d000:	b332      	cbz	r2, 1d050 <ble_ll_adv_legacy_pdu_make+0x58>
   1d002:	7c12      	ldrb	r2, [r2, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   1d004:	1d95      	adds	r5, r2, #6
   1d006:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d008:	89a1      	ldrh	r1, [r4, #12]
   1d00a:	f011 0f04 	tst.w	r1, #4
   1d00e:	d021      	beq.n	1d054 <ble_ll_adv_legacy_pdu_make+0x5c>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   1d010:	8962      	ldrh	r2, [r4, #10]
   1d012:	f012 0f02 	tst.w	r2, #2
   1d016:	d125      	bne.n	1d064 <ble_ll_adv_legacy_pdu_make+0x6c>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   1d018:	2101      	movs	r1, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1d01a:	250c      	movs	r5, #12
        adv_data_len = 0;
   1d01c:	2200      	movs	r2, #0
    BLE_LL_ASSERT(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1d01e:	2a1f      	cmp	r2, #31
   1d020:	d828      	bhi.n	1d074 <ble_ll_adv_legacy_pdu_make+0x7c>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   1d022:	1cae      	adds	r6, r5, #2
   1d024:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1d026:	8966      	ldrh	r6, [r4, #10]
   1d028:	f016 0f01 	tst.w	r6, #1
   1d02c:	d001      	beq.n	1d032 <ble_ll_adv_legacy_pdu_make+0x3a>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1d02e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    *hdr_byte = pdu_type;
   1d032:	7019      	strb	r1, [r3, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1d034:	4623      	mov	r3, r4
   1d036:	f853 1f24 	ldr.w	r1, [r3, #36]!
   1d03a:	6001      	str	r1, [r0, #0]
   1d03c:	889b      	ldrh	r3, [r3, #4]
   1d03e:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   1d040:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d042:	89a1      	ldrh	r1, [r4, #12]
   1d044:	f011 0f04 	tst.w	r1, #4
   1d048:	d11e      	bne.n	1d088 <ble_ll_adv_legacy_pdu_make+0x90>
    if (adv_data_len != 0) {
   1d04a:	bb2a      	cbnz	r2, 1d098 <ble_ll_adv_legacy_pdu_make+0xa0>
}
   1d04c:	4628      	mov	r0, r5
   1d04e:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   1d050:	2200      	movs	r2, #0
   1d052:	e7d7      	b.n	1d004 <ble_ll_adv_legacy_pdu_make+0xc>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d054:	f011 0f01 	tst.w	r1, #1
   1d058:	d108      	bne.n	1d06c <ble_ll_adv_legacy_pdu_make+0x74>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1d05a:	f011 0f02 	tst.w	r1, #2
   1d05e:	d007      	beq.n	1d070 <ble_ll_adv_legacy_pdu_make+0x78>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   1d060:	2106      	movs	r1, #6
   1d062:	e7dc      	b.n	1d01e <ble_ll_adv_legacy_pdu_make+0x26>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1d064:	2181      	movs	r1, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1d066:	250c      	movs	r5, #12
        adv_data_len = 0;
   1d068:	2200      	movs	r2, #0
   1d06a:	e7d8      	b.n	1d01e <ble_ll_adv_legacy_pdu_make+0x26>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   1d06c:	2100      	movs	r1, #0
   1d06e:	e7d6      	b.n	1d01e <ble_ll_adv_legacy_pdu_make+0x26>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   1d070:	2102      	movs	r1, #2
   1d072:	e7d4      	b.n	1d01e <ble_ll_adv_legacy_pdu_make+0x26>
    BLE_LL_ASSERT(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1d074:	f7f7 faee 	bl	14654 <hal_debugger_connected>
   1d078:	b100      	cbz	r0, 1d07c <ble_ll_adv_legacy_pdu_make+0x84>
   1d07a:	be01      	bkpt	0x0001
   1d07c:	2300      	movs	r3, #0
   1d07e:	461a      	mov	r2, r3
   1d080:	4619      	mov	r1, r3
   1d082:	4618      	mov	r0, r3
   1d084:	f7f7 fe88 	bl	14d98 <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   1d088:	4621      	mov	r1, r4
   1d08a:	f851 6f36 	ldr.w	r6, [r1, #54]!
   1d08e:	f8c0 6006 	str.w	r6, [r0, #6]
   1d092:	8889      	ldrh	r1, [r1, #4]
   1d094:	8099      	strh	r1, [r3, #4]
   1d096:	e7d8      	b.n	1d04a <ble_ll_adv_legacy_pdu_make+0x52>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   1d098:	2100      	movs	r1, #0
   1d09a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1d09c:	f7f8 fb8e 	bl	157bc <os_mbuf_copydata>
   1d0a0:	e7d4      	b.n	1d04c <ble_ll_adv_legacy_pdu_make+0x54>

0001d0a2 <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   1d0a2:	8943      	ldrh	r3, [r0, #10]
   1d0a4:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1d0a8:	d023      	beq.n	1d0f2 <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   1d0aa:	b510      	push	{r4, lr}
   1d0ac:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   1d0ae:	f413 7f00 	tst.w	r3, #512	; 0x200
   1d0b2:	d00e      	beq.n	1d0d2 <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   1d0b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d0b6:	b133      	cbz	r3, 1d0c6 <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   1d0b8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   1d0ba:	f7f8 fad5 	bl	15668 <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   1d0be:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d0c0:	63e3      	str	r3, [r4, #60]	; 0x3c
            advsm->new_adv_data = NULL;
   1d0c2:	2300      	movs	r3, #0
   1d0c4:	6423      	str	r3, [r4, #64]	; 0x40
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1d0c6:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d0ca:	4620      	mov	r0, r4
   1d0cc:	f7ff fd73 	bl	1cbb6 <ble_ll_adv_flags_clear>
}
   1d0d0:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   1d0d2:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1d0d6:	d0fb      	beq.n	1d0d0 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1d0d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   1d0da:	f7f8 fac5 	bl	15668 <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   1d0de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1d0e0:	6463      	str	r3, [r4, #68]	; 0x44
        advsm->new_scan_rsp_data = NULL;
   1d0e2:	2300      	movs	r3, #0
   1d0e4:	64a3      	str	r3, [r4, #72]	; 0x48
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1d0e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d0ea:	4620      	mov	r0, r4
   1d0ec:	f7ff fd63 	bl	1cbb6 <ble_ll_adv_flags_clear>
   1d0f0:	e7ee      	b.n	1d0d0 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   1d0f2:	4770      	bx	lr

0001d0f4 <ble_ll_adv_sm_stop>:
{
   1d0f4:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1d0f6:	7803      	ldrb	r3, [r0, #0]
   1d0f8:	b903      	cbnz	r3, 1d0fc <ble_ll_adv_sm_stop+0x8>
}
   1d0fa:	bd38      	pop	{r3, r4, r5, pc}
   1d0fc:	4604      	mov	r4, r0
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1d0fe:	3060      	adds	r0, #96	; 0x60
   1d100:	f004 fefa 	bl	21ef8 <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1d104:	f7f9 fafe 	bl	16704 <os_arch_save_sr>
   1d108:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   1d10a:	f7ff fbfd 	bl	1c908 <ble_ll_state_get>
   1d10e:	2801      	cmp	r0, #1
   1d110:	d016      	beq.n	1d140 <ble_ll_adv_sm_stop+0x4c>
        OS_EXIT_CRITICAL(sr);
   1d112:	4628      	mov	r0, r5
   1d114:	f7f9 fafc 	bl	16710 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   1d118:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d11c:	480d      	ldr	r0, [pc, #52]	; (1d154 <ble_ll_adv_sm_stop+0x60>)
   1d11e:	f7f8 fa05 	bl	1552c <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   1d122:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1d124:	b118      	cbz	r0, 1d12e <ble_ll_adv_sm_stop+0x3a>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   1d126:	f010 fac9 	bl	2d6bc <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   1d12a:	2300      	movs	r3, #0
   1d12c:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_active_chanset_clear(advsm);
   1d12e:	4620      	mov	r0, r4
   1d130:	f7ff fd8b 	bl	1cc4a <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   1d134:	2300      	movs	r3, #0
   1d136:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1d138:	4620      	mov	r0, r4
   1d13a:	f7ff ffb2 	bl	1d0a2 <ble_ll_adv_update_adv_scan_rsp_data>
}
   1d13e:	e7dc      	b.n	1d0fa <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   1d140:	f005 f896 	bl	22270 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d144:	2000      	movs	r0, #0
   1d146:	f7ff fbd9 	bl	1c8fc <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   1d14a:	4b03      	ldr	r3, [pc, #12]	; (1d158 <ble_ll_adv_sm_stop+0x64>)
   1d14c:	2200      	movs	r2, #0
   1d14e:	601a      	str	r2, [r3, #0]

/* Resume scanning */
#if MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
void ble_ll_scan_chk_resume(void);
#else
static inline void ble_ll_scan_chk_resume(void) { };
   1d150:	e7df      	b.n	1d112 <ble_ll_adv_sm_stop+0x1e>
   1d152:	bf00      	nop
   1d154:	10001fc8 	.word	0x10001fc8
   1d158:	100022a8 	.word	0x100022a8

0001d15c <ble_ll_adv_set_enable>:
{
   1d15c:	b510      	push	{r4, lr}
   1d15e:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   1d160:	f7ff fdb2 	bl	1ccc8 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1d164:	b178      	cbz	r0, 1d186 <ble_ll_adv_set_enable+0x2a>
    if (enable == 1) {
   1d166:	2c01      	cmp	r4, #1
   1d168:	d002      	beq.n	1d170 <ble_ll_adv_set_enable+0x14>
    } else if (enable == 0) {
   1d16a:	b144      	cbz	r4, 1d17e <ble_ll_adv_set_enable+0x22>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1d16c:	2012      	movs	r0, #18
}
   1d16e:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   1d170:	7802      	ldrb	r2, [r0, #0]
   1d172:	b10a      	cbz	r2, 1d178 <ble_ll_adv_set_enable+0x1c>
    rc = BLE_ERR_SUCCESS;
   1d174:	2000      	movs	r0, #0
   1d176:	e7fa      	b.n	1d16e <ble_ll_adv_set_enable+0x12>
            rc = ble_ll_adv_sm_start(advsm);
   1d178:	f7ff fe32 	bl	1cde0 <ble_ll_adv_sm_start>
   1d17c:	e7f7      	b.n	1d16e <ble_ll_adv_set_enable+0x12>
        ble_ll_adv_sm_stop(advsm);
   1d17e:	f7ff ffb9 	bl	1d0f4 <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   1d182:	2000      	movs	r0, #0
   1d184:	e7f3      	b.n	1d16e <ble_ll_adv_set_enable+0x12>
        return BLE_ERR_UNK_ADV_INDENT;
   1d186:	2042      	movs	r0, #66	; 0x42
   1d188:	e7f1      	b.n	1d16e <ble_ll_adv_set_enable+0x12>

0001d18a <ble_ll_adv_update_data_mbuf>:
{
   1d18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d18e:	4605      	mov	r5, r0
   1d190:	4616      	mov	r6, r2
   1d192:	461f      	mov	r7, r3
   1d194:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    om = *omp;
   1d198:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   1d19a:	b149      	cbz	r1, 1d1b0 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   1d19c:	b114      	cbz	r4, 1d1a4 <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   1d19e:	4620      	mov	r0, r4
   1d1a0:	f7f8 fa62 	bl	15668 <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   1d1a4:	2100      	movs	r1, #0
   1d1a6:	4640      	mov	r0, r8
   1d1a8:	f7f8 feea 	bl	15f80 <os_msys_get_pkthdr>
        if (!om) {
   1d1ac:	4604      	mov	r4, r0
   1d1ae:	b150      	cbz	r0, 1d1c6 <ble_ll_adv_update_data_mbuf+0x3c>
    BLE_LL_ASSERT(om);
   1d1b0:	b164      	cbz	r4, 1d1cc <ble_ll_adv_update_data_mbuf+0x42>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   1d1b2:	8a22      	ldrh	r2, [r4, #16]
   1d1b4:	4442      	add	r2, r8
   1d1b6:	42b2      	cmp	r2, r6
   1d1b8:	dc12      	bgt.n	1d1e0 <ble_ll_adv_update_data_mbuf+0x56>
    ret = os_mbuf_append(om, data, datalen);
   1d1ba:	4642      	mov	r2, r8
   1d1bc:	4639      	mov	r1, r7
   1d1be:	4620      	mov	r0, r4
   1d1c0:	f7f8 fa6b 	bl	1569a <os_mbuf_append>
    if (ret) {
   1d1c4:	b988      	cbnz	r0, 1d1ea <ble_ll_adv_update_data_mbuf+0x60>
    *omp = om;
   1d1c6:	602c      	str	r4, [r5, #0]
}
   1d1c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(om);
   1d1cc:	f7f7 fa42 	bl	14654 <hal_debugger_connected>
   1d1d0:	b100      	cbz	r0, 1d1d4 <ble_ll_adv_update_data_mbuf+0x4a>
   1d1d2:	be01      	bkpt	0x0001
   1d1d4:	2300      	movs	r3, #0
   1d1d6:	461a      	mov	r2, r3
   1d1d8:	4619      	mov	r1, r3
   1d1da:	4618      	mov	r0, r3
   1d1dc:	f7f7 fddc 	bl	14d98 <__assert_func>
        os_mbuf_free_chain(om);
   1d1e0:	4620      	mov	r0, r4
   1d1e2:	f7f8 fa41 	bl	15668 <os_mbuf_free_chain>
        om = NULL;
   1d1e6:	2400      	movs	r4, #0
        goto done;
   1d1e8:	e7ed      	b.n	1d1c6 <ble_ll_adv_update_data_mbuf+0x3c>
        os_mbuf_free_chain(om);
   1d1ea:	4620      	mov	r0, r4
   1d1ec:	f7f8 fa3c 	bl	15668 <os_mbuf_free_chain>
        om = NULL;
   1d1f0:	2400      	movs	r4, #0
   1d1f2:	e7e8      	b.n	1d1c6 <ble_ll_adv_update_data_mbuf+0x3c>

0001d1f4 <ble_ll_adv_set_scan_rsp_data>:
{
   1d1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1f6:	b083      	sub	sp, #12
   1d1f8:	4606      	mov	r6, r0
   1d1fa:	460f      	mov	r7, r1
   1d1fc:	461c      	mov	r4, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1d1fe:	4610      	mov	r0, r2
   1d200:	f7ff fd62 	bl	1ccc8 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1d204:	2800      	cmp	r0, #0
   1d206:	d03c      	beq.n	1d282 <ble_ll_adv_set_scan_rsp_data+0x8e>
   1d208:	4605      	mov	r5, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   1d20a:	8983      	ldrh	r3, [r0, #12]
   1d20c:	f013 0f02 	tst.w	r3, #2
   1d210:	d102      	bne.n	1d218 <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1d212:	f013 0f10 	tst.w	r3, #16
   1d216:	d036      	beq.n	1d286 <ble_ll_adv_set_scan_rsp_data+0x92>
    switch (operation) {
   1d218:	2c03      	cmp	r4, #3
   1d21a:	d002      	beq.n	1d222 <ble_ll_adv_set_scan_rsp_data+0x2e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d21c:	2012      	movs	r0, #18
}
   1d21e:	b003      	add	sp, #12
   1d220:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1d222:	f013 0f10 	tst.w	r3, #16
   1d226:	d001      	beq.n	1d22c <ble_ll_adv_set_scan_rsp_data+0x38>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   1d228:	2f1f      	cmp	r7, #31
   1d22a:	d82e      	bhi.n	1d28a <ble_ll_adv_set_scan_rsp_data+0x96>
    if (advsm->adv_enabled) {
   1d22c:	782b      	ldrb	r3, [r5, #0]
   1d22e:	b1e3      	cbz	r3, 1d26a <ble_ll_adv_set_scan_rsp_data+0x76>
        if (advsm->new_scan_rsp_data) {
   1d230:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1d232:	b14b      	cbz	r3, 1d248 <ble_ll_adv_set_scan_rsp_data+0x54>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1d234:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d238:	4628      	mov	r0, r5
   1d23a:	f7ff fcbc 	bl	1cbb6 <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   1d23e:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   1d240:	f7f8 fa12 	bl	15668 <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   1d244:	2300      	movs	r3, #0
   1d246:	64ab      	str	r3, [r5, #72]	; 0x48
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   1d248:	9700      	str	r7, [sp, #0]
   1d24a:	4633      	mov	r3, r6
   1d24c:	221f      	movs	r2, #31
   1d24e:	2101      	movs	r1, #1
   1d250:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1d254:	f7ff ff99 	bl	1d18a <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   1d258:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1d25a:	b1c3      	cbz	r3, 1d28e <ble_ll_adv_set_scan_rsp_data+0x9a>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1d25c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1d260:	4628      	mov	r0, r5
   1d262:	f7ff fc9d 	bl	1cba0 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1d266:	2000      	movs	r0, #0
   1d268:	e7d9      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   1d26a:	9700      	str	r7, [sp, #0]
   1d26c:	4633      	mov	r3, r6
   1d26e:	221f      	movs	r2, #31
   1d270:	2101      	movs	r1, #1
   1d272:	f105 0044 	add.w	r0, r5, #68	; 0x44
   1d276:	f7ff ff88 	bl	1d18a <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   1d27a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   1d27c:	b14b      	cbz	r3, 1d292 <ble_ll_adv_set_scan_rsp_data+0x9e>
    return BLE_ERR_SUCCESS;
   1d27e:	2000      	movs	r0, #0
   1d280:	e7cd      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>
        return BLE_ERR_UNK_ADV_INDENT;
   1d282:	2042      	movs	r0, #66	; 0x42
   1d284:	e7cb      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1d286:	2012      	movs	r0, #18
   1d288:	e7c9      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1d28a:	2012      	movs	r0, #18
   1d28c:	e7c7      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_MEM_CAPACITY;
   1d28e:	2007      	movs	r0, #7
   1d290:	e7c5      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_MEM_CAPACITY;
   1d292:	2007      	movs	r0, #7
   1d294:	e7c3      	b.n	1d21e <ble_ll_adv_set_scan_rsp_data+0x2a>

0001d296 <ble_ll_adv_set_adv_data>:
{
   1d296:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d298:	b083      	sub	sp, #12
   1d29a:	4606      	mov	r6, r0
   1d29c:	460f      	mov	r7, r1
   1d29e:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1d2a0:	4610      	mov	r0, r2
   1d2a2:	f7ff fd11 	bl	1ccc8 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1d2a6:	2800      	cmp	r0, #0
   1d2a8:	d049      	beq.n	1d33e <ble_ll_adv_set_adv_data+0xa8>
   1d2aa:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1d2ac:	8983      	ldrh	r3, [r0, #12]
   1d2ae:	f013 0f10 	tst.w	r3, #16
   1d2b2:	d007      	beq.n	1d2c4 <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d2b4:	f013 0f04 	tst.w	r3, #4
   1d2b8:	d007      	beq.n	1d2ca <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   1d2ba:	f003 fc2a 	bl	20b12 <ble_ll_hci_adv_mode_ext>
   1d2be:	b120      	cbz	r0, 1d2ca <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1d2c0:	2012      	movs	r0, #18
   1d2c2:	e005      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1d2c4:	f013 0f02 	tst.w	r3, #2
   1d2c8:	d13b      	bne.n	1d342 <ble_ll_adv_set_adv_data+0xac>
    switch (operation) {
   1d2ca:	2d03      	cmp	r5, #3
   1d2cc:	d002      	beq.n	1d2d4 <ble_ll_adv_set_adv_data+0x3e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d2ce:	2012      	movs	r0, #18
}
   1d2d0:	b003      	add	sp, #12
   1d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1d2d4:	89a3      	ldrh	r3, [r4, #12]
   1d2d6:	f013 0f10 	tst.w	r3, #16
   1d2da:	d001      	beq.n	1d2e0 <ble_ll_adv_set_adv_data+0x4a>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   1d2dc:	2f1f      	cmp	r7, #31
   1d2de:	d832      	bhi.n	1d346 <ble_ll_adv_set_adv_data+0xb0>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   1d2e0:	2140      	movs	r1, #64	; 0x40
   1d2e2:	4620      	mov	r0, r4
   1d2e4:	f7ff fc67 	bl	1cbb6 <ble_ll_adv_flags_clear>
    if (advsm->adv_enabled) {
   1d2e8:	7823      	ldrb	r3, [r4, #0]
   1d2ea:	b1e3      	cbz	r3, 1d326 <ble_ll_adv_set_adv_data+0x90>
        if (advsm->new_adv_data) {
   1d2ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d2ee:	b14b      	cbz	r3, 1d304 <ble_ll_adv_set_adv_data+0x6e>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1d2f0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d2f4:	4620      	mov	r0, r4
   1d2f6:	f7ff fc5e 	bl	1cbb6 <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   1d2fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1d2fc:	f7f8 f9b4 	bl	15668 <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   1d300:	2300      	movs	r3, #0
   1d302:	6423      	str	r3, [r4, #64]	; 0x40
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   1d304:	9700      	str	r7, [sp, #0]
   1d306:	4633      	mov	r3, r6
   1d308:	221f      	movs	r2, #31
   1d30a:	2101      	movs	r1, #1
   1d30c:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1d310:	f7ff ff3b 	bl	1d18a <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   1d314:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1d316:	b1c3      	cbz	r3, 1d34a <ble_ll_adv_set_adv_data+0xb4>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1d318:	f44f 7100 	mov.w	r1, #512	; 0x200
   1d31c:	4620      	mov	r0, r4
   1d31e:	f7ff fc3f 	bl	1cba0 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1d322:	2000      	movs	r0, #0
   1d324:	e7d4      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   1d326:	9700      	str	r7, [sp, #0]
   1d328:	4633      	mov	r3, r6
   1d32a:	221f      	movs	r2, #31
   1d32c:	2101      	movs	r1, #1
   1d32e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1d332:	f7ff ff2a 	bl	1d18a <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   1d336:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1d338:	b14b      	cbz	r3, 1d34e <ble_ll_adv_set_adv_data+0xb8>
    return BLE_ERR_SUCCESS;
   1d33a:	2000      	movs	r0, #0
   1d33c:	e7c8      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
        return BLE_ERR_UNK_ADV_INDENT;
   1d33e:	2042      	movs	r0, #66	; 0x42
   1d340:	e7c6      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1d342:	2012      	movs	r0, #18
   1d344:	e7c4      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1d346:	2012      	movs	r0, #18
   1d348:	e7c2      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_MEM_CAPACITY;
   1d34a:	2007      	movs	r0, #7
   1d34c:	e7c0      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_MEM_CAPACITY;
   1d34e:	2007      	movs	r0, #7
   1d350:	e7be      	b.n	1d2d0 <ble_ll_adv_set_adv_data+0x3a>
	...

0001d354 <ble_ll_adv_conn_req_rxd>:
{
   1d354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d358:	4606      	mov	r6, r0
   1d35a:	460f      	mov	r7, r1
   1d35c:	4614      	mov	r4, r2
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1d35e:	8992      	ldrh	r2, [r2, #12]
   1d360:	f012 0f10 	tst.w	r2, #16
   1d364:	d103      	bne.n	1d36e <ble_ll_adv_conn_req_rxd+0x1a>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1d366:	8963      	ldrh	r3, [r4, #10]
   1d368:	f013 0f08 	tst.w	r3, #8
   1d36c:	d066      	beq.n	1d43c <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   1d36e:	883b      	ldrh	r3, [r7, #0]
   1d370:	f403 6880 	and.w	r8, r3, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   1d374:	f106 0902 	add.w	r9, r6, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   1d378:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d37c:	d060      	beq.n	1d440 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1d37e:	7835      	ldrb	r5, [r6, #0]
   1d380:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   1d384:	d000      	beq.n	1d388 <ble_ll_adv_conn_req_rxd+0x34>
            addr_type = BLE_ADDR_RANDOM;
   1d386:	2501      	movs	r5, #1
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d388:	f012 0f04 	tst.w	r2, #4
   1d38c:	d01b      	beq.n	1d3c6 <ble_ll_adv_conn_req_rxd+0x72>
            if (resolved) {
   1d38e:	f1b8 0f00 	cmp.w	r8, #0
   1d392:	d00f      	beq.n	1d3b4 <ble_ll_adv_conn_req_rxd+0x60>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   1d394:	f994 2008 	ldrsb.w	r2, [r4, #8]
   1d398:	2336      	movs	r3, #54	; 0x36
   1d39a:	fb03 f302 	mul.w	r3, r3, r2
   1d39e:	f103 0120 	add.w	r1, r3, #32
   1d3a2:	4a2a      	ldr	r2, [pc, #168]	; (1d44c <ble_ll_adv_conn_req_rxd+0xf8>)
   1d3a4:	4411      	add	r1, r2
   1d3a6:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1d3a8:	5cd5      	ldrb	r5, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   1d3aa:	7963      	ldrb	r3, [r4, #5]
   1d3ac:	42ab      	cmp	r3, r5
   1d3ae:	d003      	beq.n	1d3b8 <ble_ll_adv_conn_req_rxd+0x64>
                valid = 0;
   1d3b0:	2500      	movs	r5, #0
   1d3b2:	e046      	b.n	1d442 <ble_ll_adv_conn_req_rxd+0xee>
            ident_addr = inita;
   1d3b4:	4649      	mov	r1, r9
   1d3b6:	e7f8      	b.n	1d3aa <ble_ll_adv_conn_req_rxd+0x56>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   1d3b8:	2206      	movs	r2, #6
   1d3ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d3be:	f7f9 fb51 	bl	16a64 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   1d3c2:	2800      	cmp	r0, #0
   1d3c4:	d140      	bne.n	1d448 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   1d3c6:	f1b8 0f00 	cmp.w	r8, #0
   1d3ca:	d114      	bne.n	1d3f6 <ble_ll_adv_conn_req_rxd+0xa2>
                                         !(advsm->props &
   1d3cc:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_periph_start(rxbuf, addr_type, hdr,
   1d3ce:	091b      	lsrs	r3, r3, #4
   1d3d0:	f083 0301 	eor.w	r3, r3, #1
   1d3d4:	f003 0301 	and.w	r3, r3, #1
   1d3d8:	463a      	mov	r2, r7
   1d3da:	4629      	mov	r1, r5
   1d3dc:	4630      	mov	r0, r6
   1d3de:	f001 f9e5 	bl	1e7ac <ble_ll_conn_periph_start>
        if (valid) {
   1d3e2:	4605      	mov	r5, r0
   1d3e4:	b368      	cbz	r0, 1d442 <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1d3e6:	8963      	ldrh	r3, [r4, #10]
   1d3e8:	f013 0f08 	tst.w	r3, #8
   1d3ec:	d129      	bne.n	1d442 <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1d3ee:	4620      	mov	r0, r4
   1d3f0:	f7ff fe80 	bl	1d0f4 <ble_ll_adv_sm_stop>
   1d3f4:	e025      	b.n	1d442 <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   1d3f6:	f8d9 3000 	ldr.w	r3, [r9]
   1d3fa:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
   1d3fe:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1d402:	85e3      	strh	r3, [r4, #46]	; 0x2e
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   1d404:	4649      	mov	r1, r9
   1d406:	f994 0008 	ldrsb.w	r0, [r4, #8]
   1d40a:	f004 fa47 	bl	2189c <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1d40e:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1d412:	2236      	movs	r2, #54	; 0x36
   1d414:	fb02 f303 	mul.w	r3, r2, r3
   1d418:	3320      	adds	r3, #32
   1d41a:	490c      	ldr	r1, [pc, #48]	; (1d44c <ble_ll_adv_conn_req_rxd+0xf8>)
   1d41c:	440b      	add	r3, r1
            memcpy(inita,
   1d41e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1d422:	f8c6 0002 	str.w	r0, [r6, #2]
   1d426:	889b      	ldrh	r3, [r3, #4]
   1d428:	f8a9 3004 	strh.w	r3, [r9, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1d42c:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1d430:	fb02 f203 	mul.w	r2, r2, r3
   1d434:	5c8d      	ldrb	r5, [r1, r2]
            addr_type += 2;
   1d436:	3502      	adds	r5, #2
   1d438:	b2ed      	uxtb	r5, r5
   1d43a:	e7c7      	b.n	1d3cc <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   1d43c:	2500      	movs	r5, #0
   1d43e:	e000      	b.n	1d442 <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   1d440:	2500      	movs	r5, #0
}
   1d442:	4628      	mov	r0, r5
   1d444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                valid = 0;
   1d448:	2500      	movs	r5, #0
   1d44a:	e7fa      	b.n	1d442 <ble_ll_adv_conn_req_rxd+0xee>
   1d44c:	1000258c 	.word	0x1000258c

0001d450 <ble_ll_adv_sm_stop_timeout>:
{
   1d450:	b510      	push	{r4, lr}
   1d452:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1d454:	8983      	ldrh	r3, [r0, #12]
   1d456:	f013 0f08 	tst.w	r3, #8
   1d45a:	d103      	bne.n	1d464 <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   1d45c:	4620      	mov	r0, r4
   1d45e:	f7ff fe49 	bl	1d0f4 <ble_ll_adv_sm_stop>
}
   1d462:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   1d464:	4603      	mov	r3, r0
   1d466:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1d468:	213c      	movs	r1, #60	; 0x3c
   1d46a:	2000      	movs	r0, #0
   1d46c:	f001 fb8e 	bl	1eb8c <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   1d470:	2300      	movs	r3, #0
   1d472:	64e3      	str	r3, [r4, #76]	; 0x4c
   1d474:	e7f2      	b.n	1d45c <ble_ll_adv_sm_stop_timeout+0xc>
	...

0001d478 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   1d478:	b510      	push	{r4, lr}
    struct ble_ll_sched_item *sch;
    uint32_t max_delay_ticks;
    int rc;

    BLE_LL_ASSERT(advsm->adv_enabled);
   1d47a:	7803      	ldrb	r3, [r0, #0]
   1d47c:	b19b      	cbz	r3, 1d4a6 <ble_ll_adv_reschedule_event+0x2e>
   1d47e:	4604      	mov	r4, r0

    sch = &advsm->adv_sch;
   1d480:	3060      	adds	r0, #96	; 0x60

    if (!sch->enqueued) {
   1d482:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1d486:	b96b      	cbnz	r3, 1d4a4 <ble_ll_adv_reschedule_event+0x2c>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1d488:	89a3      	ldrh	r3, [r4, #12]
   1d48a:	f013 0f08 	tst.w	r3, #8
   1d48e:	d014      	beq.n	1d4ba <ble_ll_adv_reschedule_event+0x42>
            max_delay_ticks = 0;
   1d490:	2100      	movs	r1, #0
        } else {
            max_delay_ticks = ble_ll_tmr_u2t(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(sch, max_delay_ticks);
   1d492:	f004 fcb5 	bl	21e00 <ble_ll_sched_adv_reschedule>
        if (rc) {
   1d496:	b998      	cbnz	r0, 1d4c0 <ble_ll_adv_reschedule_event+0x48>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        advsm->adv_event_start_time = sch->start_time +
   1d498:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d49a:	4b0b      	ldr	r3, [pc, #44]	; (1d4c8 <ble_ll_adv_reschedule_event+0x50>)
   1d49c:	781b      	ldrb	r3, [r3, #0]
   1d49e:	4413      	add	r3, r2
   1d4a0:	61a3      	str	r3, [r4, #24]
                                      g_ble_ll_sched_offset_ticks;
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1d4a2:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   1d4a4:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(advsm->adv_enabled);
   1d4a6:	f7f7 f8d5 	bl	14654 <hal_debugger_connected>
   1d4aa:	b100      	cbz	r0, 1d4ae <ble_ll_adv_reschedule_event+0x36>
   1d4ac:	be01      	bkpt	0x0001
   1d4ae:	2300      	movs	r3, #0
   1d4b0:	461a      	mov	r2, r3
   1d4b2:	4619      	mov	r1, r3
   1d4b4:	4618      	mov	r0, r3
   1d4b6:	f7f7 fc6f 	bl	14d98 <__assert_func>
            max_delay_ticks = ble_ll_tmr_u2t(BLE_LL_ADV_DELAY_MS_MAX * 1000);
   1d4ba:	f240 1147 	movw	r1, #327	; 0x147
   1d4be:	e7e8      	b.n	1d492 <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1d4c0:	4620      	mov	r0, r4
   1d4c2:	f7ff fbcd 	bl	1cc60 <ble_ll_adv_drop_event>
            return;
   1d4c6:	e7ed      	b.n	1d4a4 <ble_ll_adv_reschedule_event+0x2c>
   1d4c8:	10002665 	.word	0x10002665

0001d4cc <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   1d4cc:	b510      	push	{r4, lr}
   1d4ce:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   1d4d0:	227c      	movs	r2, #124	; 0x7c
   1d4d2:	2100      	movs	r1, #0
   1d4d4:	f7f9 fb0f 	bl	16af6 <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   1d4d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1d4dc:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1d4de:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   1d4e0:	2307      	movs	r3, #7
   1d4e2:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   1d4e4:	2300      	movs	r3, #0
   1d4e6:	6523      	str	r3, [r4, #80]	; 0x50
   1d4e8:	65e3      	str	r3, [r4, #92]	; 0x5c
    ev->ev.ev_queued = 0;
   1d4ea:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d4ee:	4b03      	ldr	r3, [pc, #12]	; (1d4fc <ble_ll_adv_sm_init+0x30>)
   1d4f0:	6563      	str	r3, [r4, #84]	; 0x54
    ev->ev.ev_arg = arg;
   1d4f2:	65a4      	str	r4, [r4, #88]	; 0x58
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   1d4f4:	2312      	movs	r3, #18
   1d4f6:	81a3      	strh	r3, [r4, #12]
}
   1d4f8:	bd10      	pop	{r4, pc}
   1d4fa:	bf00      	nop
   1d4fc:	0001d659 	.word	0x0001d659

0001d500 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   1d500:	7903      	ldrb	r3, [r0, #4]
   1d502:	2b01      	cmp	r3, #1
   1d504:	d90e      	bls.n	1d524 <ble_ll_adv_chk_rpa_timeout+0x24>
{
   1d506:	b510      	push	{r4, lr}
   1d508:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   1d50a:	8943      	ldrh	r3, [r0, #10]
   1d50c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1d510:	d100      	bne.n	1d514 <ble_ll_adv_chk_rpa_timeout+0x14>
}
   1d512:	bd10      	pop	{r4, pc}
        ble_ll_adv_rpa_update(advsm);
   1d514:	f7ff fb5b 	bl	1cbce <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1d518:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d51c:	4620      	mov	r0, r4
   1d51e:	f7ff fb4a 	bl	1cbb6 <ble_ll_adv_flags_clear>
   1d522:	e7f6      	b.n	1d512 <ble_ll_adv_chk_rpa_timeout+0x12>
   1d524:	4770      	bx	lr
	...

0001d528 <ble_ll_adv_done>:
{
   1d528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BLE_LL_ASSERT(advsm->adv_enabled);
   1d52c:	7803      	ldrb	r3, [r0, #0]
   1d52e:	2b00      	cmp	r3, #0
   1d530:	d03e      	beq.n	1d5b0 <ble_ll_adv_done+0x88>
   1d532:	4604      	mov	r4, r0
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1d534:	f7ff fdb5 	bl	1d0a2 <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1d538:	f104 0560 	add.w	r5, r4, #96	; 0x60
   1d53c:	4628      	mov	r0, r5
   1d53e:	f004 fcdb 	bl	21ef8 <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   1d542:	f104 0650 	add.w	r6, r4, #80	; 0x50
   1d546:	4631      	mov	r1, r6
   1d548:	483b      	ldr	r0, [pc, #236]	; (1d638 <ble_ll_adv_done+0x110>)
   1d54a:	f7f7 ffef 	bl	1552c <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   1d54e:	4620      	mov	r0, r4
   1d550:	f7ff fb19 	bl	1cb86 <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   1d554:	79a3      	ldrb	r3, [r4, #6]
   1d556:	4283      	cmp	r3, r0
   1d558:	d034      	beq.n	1d5c4 <ble_ll_adv_done+0x9c>
        ++advsm->adv_chan;
   1d55a:	3301      	adds	r3, #1
   1d55c:	b2db      	uxtb	r3, r3
   1d55e:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   1d560:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   1d564:	2201      	movs	r2, #1
   1d566:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   1d568:	78a1      	ldrb	r1, [r4, #2]
   1d56a:	420a      	tst	r2, r1
   1d56c:	d101      	bne.n	1d572 <ble_ll_adv_done+0x4a>
            ++advsm->adv_chan;
   1d56e:	3301      	adds	r3, #1
   1d570:	71a3      	strb	r3, [r4, #6]
    return os_cputime_get32();
   1d572:	f014 fd46 	bl	32002 <os_cputime_get32>
        advsm->adv_pdu_start_time = ble_ll_tmr_get() +
   1d576:	4b31      	ldr	r3, [pc, #196]	; (1d63c <ble_ll_adv_done+0x114>)
   1d578:	781b      	ldrb	r3, [r3, #0]
   1d57a:	4403      	add	r3, r0
   1d57c:	61e3      	str	r3, [r4, #28]
        resched_pdu = 1;
   1d57e:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1d580:	89a3      	ldrh	r3, [r4, #12]
   1d582:	f013 0f08 	tst.w	r3, #8
   1d586:	d004      	beq.n	1d592 <ble_ll_adv_done+0x6a>
        LL_TMR_GEQ(advsm->adv_pdu_start_time, advsm->adv_end_time)) {
   1d588:	69e3      	ldr	r3, [r4, #28]
   1d58a:	6a22      	ldr	r2, [r4, #32]
   1d58c:	1a9b      	subs	r3, r3, r2
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1d58e:	2b00      	cmp	r3, #0
   1d590:	da40      	bge.n	1d614 <ble_ll_adv_done+0xec>
    ble_ll_adv_chk_rpa_timeout(advsm);
   1d592:	4620      	mov	r0, r4
   1d594:	f7ff ffb4 	bl	1d500 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   1d598:	4620      	mov	r0, r4
   1d59a:	f7ff fbed 	bl	1cd78 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   1d59e:	2f00      	cmp	r7, #0
   1d5a0:	d03c      	beq.n	1d61c <ble_ll_adv_done+0xf4>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   1d5a2:	4628      	mov	r0, r5
   1d5a4:	f004 fc70 	bl	21e88 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   1d5a8:	2800      	cmp	r0, #0
   1d5aa:	d13b      	bne.n	1d624 <ble_ll_adv_done+0xfc>
}
   1d5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(advsm->adv_enabled);
   1d5b0:	f7f7 f850 	bl	14654 <hal_debugger_connected>
   1d5b4:	b100      	cbz	r0, 1d5b8 <ble_ll_adv_done+0x90>
   1d5b6:	be01      	bkpt	0x0001
   1d5b8:	2300      	movs	r3, #0
   1d5ba:	461a      	mov	r2, r3
   1d5bc:	4619      	mov	r1, r3
   1d5be:	4618      	mov	r0, r3
   1d5c0:	f7f7 fbea 	bl	14d98 <__assert_func>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   1d5c4:	4620      	mov	r0, r4
   1d5c6:	f7ff fad1 	bl	1cb6c <ble_ll_adv_first_chan>
   1d5ca:	71a0      	strb	r0, [r4, #6]
        itvl = advsm->adv_itvl_usecs;
   1d5cc:	6960      	ldr	r0, [r4, #20]
    if (usecs <= 31249) {
   1d5ce:	f647 2311 	movw	r3, #31249	; 0x7a11
   1d5d2:	4298      	cmp	r0, r3
   1d5d4:	d811      	bhi.n	1d5fa <ble_ll_adv_done+0xd2>
        return (usecs * 137439) / 4194304;
   1d5d6:	4b1a      	ldr	r3, [pc, #104]	; (1d640 <ble_ll_adv_done+0x118>)
   1d5d8:	fb03 f000 	mul.w	r0, r3, r0
   1d5dc:	ea4f 5890 	mov.w	r8, r0, lsr #22
        advsm->adv_event_start_time += tick_itvl;
   1d5e0:	69a3      	ldr	r3, [r4, #24]
   1d5e2:	4443      	add	r3, r8
   1d5e4:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1d5e6:	61e3      	str	r3, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1d5e8:	4a14      	ldr	r2, [pc, #80]	; (1d63c <ble_ll_adv_done+0x114>)
   1d5ea:	7817      	ldrb	r7, [r2, #0]
   1d5ec:	1bdf      	subs	r7, r3, r7
    return os_cputime_get32();
   1d5ee:	f014 fd08 	bl	32002 <os_cputime_get32>
        if (delta_t < 0) {
   1d5f2:	1a3b      	subs	r3, r7, r0
   1d5f4:	d40a      	bmi.n	1d60c <ble_ll_adv_done+0xe4>
        resched_pdu = 0;
   1d5f6:	2700      	movs	r7, #0
   1d5f8:	e7c2      	b.n	1d580 <ble_ll_adv_done+0x58>
    return os_cputime_usecs_to_ticks(usecs);
   1d5fa:	f014 fd07 	bl	3200c <os_cputime_usecs_to_ticks>
   1d5fe:	4680      	mov	r8, r0
   1d600:	e7ee      	b.n	1d5e0 <ble_ll_adv_done+0xb8>
                advsm->adv_event_start_time += tick_itvl;
   1d602:	69a2      	ldr	r2, [r4, #24]
   1d604:	4442      	add	r2, r8
   1d606:	61a2      	str	r2, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1d608:	61e2      	str	r2, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   1d60a:	4443      	add	r3, r8
            while (delta_t < 0) {
   1d60c:	2b00      	cmp	r3, #0
   1d60e:	dbf8      	blt.n	1d602 <ble_ll_adv_done+0xda>
        resched_pdu = 0;
   1d610:	2700      	movs	r7, #0
   1d612:	e7b5      	b.n	1d580 <ble_ll_adv_done+0x58>
        ble_ll_adv_sm_stop_timeout(advsm);
   1d614:	4620      	mov	r0, r4
   1d616:	f7ff ff1b 	bl	1d450 <ble_ll_adv_sm_stop_timeout>
        return;
   1d61a:	e7c7      	b.n	1d5ac <ble_ll_adv_done+0x84>
        ble_ll_adv_reschedule_event(advsm);
   1d61c:	4620      	mov	r0, r4
   1d61e:	f7ff ff2b 	bl	1d478 <ble_ll_adv_reschedule_event>
        return;
   1d622:	e7c3      	b.n	1d5ac <ble_ll_adv_done+0x84>
        STATS_INC(ble_ll_stats, adv_resched_pdu_fail);
   1d624:	4a07      	ldr	r2, [pc, #28]	; (1d644 <ble_ll_adv_done+0x11c>)
   1d626:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1d628:	3301      	adds	r3, #1
   1d62a:	6753      	str	r3, [r2, #116]	; 0x74
    os_eventq_put(&evq->evq, &ev->ev);
   1d62c:	4631      	mov	r1, r6
   1d62e:	4802      	ldr	r0, [pc, #8]	; (1d638 <ble_ll_adv_done+0x110>)
   1d630:	f7f7 fee5 	bl	153fe <os_eventq_put>
}
   1d634:	e7ba      	b.n	1d5ac <ble_ll_adv_done+0x84>
   1d636:	bf00      	nop
   1d638:	10001fc8 	.word	0x10001fc8
   1d63c:	10002665 	.word	0x10002665
   1d640:	000218df 	.word	0x000218df
   1d644:	10001ea8 	.word	0x10001ea8

0001d648 <ble_ll_adv_make_done>:
{
   1d648:	b510      	push	{r4, lr}
   1d64a:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   1d64c:	f7ff fafd 	bl	1cc4a <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   1d650:	4620      	mov	r0, r4
   1d652:	f7ff ff69 	bl	1d528 <ble_ll_adv_done>
}
   1d656:	bd10      	pop	{r4, pc}

0001d658 <ble_ll_adv_event_done>:
{
   1d658:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   1d65a:	6880      	ldr	r0, [r0, #8]
   1d65c:	f7ff ff64 	bl	1d528 <ble_ll_adv_done>
}
   1d660:	bd08      	pop	{r3, pc}
	...

0001d664 <ble_ll_adv_rpa_timeout>:
{
   1d664:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d666:	2400      	movs	r4, #0
   1d668:	2c00      	cmp	r4, #0
   1d66a:	dd00      	ble.n	1d66e <ble_ll_adv_rpa_timeout+0xa>
}
   1d66c:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1d66e:	4a08      	ldr	r2, [pc, #32]	; (1d690 <ble_ll_adv_rpa_timeout+0x2c>)
   1d670:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
   1d674:	008b      	lsls	r3, r1, #2
   1d676:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   1d678:	5cd3      	ldrb	r3, [r2, r3]
   1d67a:	b113      	cbz	r3, 1d682 <ble_ll_adv_rpa_timeout+0x1e>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1d67c:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   1d67e:	2b01      	cmp	r3, #1
   1d680:	d801      	bhi.n	1d686 <ble_ll_adv_rpa_timeout+0x22>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d682:	3401      	adds	r4, #1
   1d684:	e7f0      	b.n	1d668 <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1d686:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d68a:	f7ff fa89 	bl	1cba0 <ble_ll_adv_flags_set>
   1d68e:	e7f8      	b.n	1d682 <ble_ll_adv_rpa_timeout+0x1e>
   1d690:	1000222c 	.word	0x1000222c

0001d694 <ble_ll_adv_event_rmvd_from_sched>:
{
   1d694:	b508      	push	{r3, lr}
    ble_ll_adv_drop_event(advsm);
   1d696:	f7ff fae3 	bl	1cc60 <ble_ll_adv_drop_event>
}
   1d69a:	bd08      	pop	{r3, pc}

0001d69c <ble_ll_adv_halt>:
{
   1d69c:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   1d69e:	4b0b      	ldr	r3, [pc, #44]	; (1d6cc <ble_ll_adv_halt+0x30>)
   1d6a0:	681c      	ldr	r4, [r3, #0]
   1d6a2:	b194      	cbz	r4, 1d6ca <ble_ll_adv_halt+0x2e>
        ble_phy_txpwr_set(g_ble_ll_tx_power);
   1d6a4:	4b0a      	ldr	r3, [pc, #40]	; (1d6d0 <ble_ll_adv_halt+0x34>)
   1d6a6:	f993 0000 	ldrsb.w	r0, [r3]
   1d6aa:	f004 fd9f 	bl	221ec <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   1d6ae:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d6b2:	4808      	ldr	r0, [pc, #32]	; (1d6d4 <ble_ll_adv_halt+0x38>)
   1d6b4:	f7f7 fea3 	bl	153fe <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d6b8:	2000      	movs	r0, #0
   1d6ba:	f7ff f91f 	bl	1c8fc <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   1d6be:	4c03      	ldr	r4, [pc, #12]	; (1d6cc <ble_ll_adv_halt+0x30>)
   1d6c0:	6820      	ldr	r0, [r4, #0]
   1d6c2:	f7ff fac2 	bl	1cc4a <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   1d6c6:	2300      	movs	r3, #0
   1d6c8:	6023      	str	r3, [r4, #0]
}
   1d6ca:	bd10      	pop	{r4, pc}
   1d6cc:	100022a8 	.word	0x100022a8
   1d6d0:	10002218 	.word	0x10002218
   1d6d4:	10001fc8 	.word	0x10001fc8

0001d6d8 <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   1d6d8:	290f      	cmp	r1, #15
   1d6da:	d163      	bne.n	1d7a4 <ble_ll_adv_set_adv_params+0xcc>
   1d6dc:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   1d6de:	4a3e      	ldr	r2, [pc, #248]	; (1d7d8 <ble_ll_adv_set_adv_params+0x100>)
   1d6e0:	7811      	ldrb	r1, [r2, #0]
   1d6e2:	2900      	cmp	r1, #0
   1d6e4:	d160      	bne.n	1d7a8 <ble_ll_adv_set_adv_params+0xd0>
{
   1d6e6:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   1d6e8:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   1d6ea:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   1d6ec:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   1d6ee:	7902      	ldrb	r2, [r0, #4]
   1d6f0:	2a04      	cmp	r2, #4
   1d6f2:	d85b      	bhi.n	1d7ac <ble_ll_adv_set_adv_params+0xd4>
   1d6f4:	e8df f002 	tbb	[pc, r2]
   1d6f8:	54523c03 	.word	0x54523c03
   1d6fc:	48          	.byte	0x48
   1d6fd:	00          	.byte	0x00
   1d6fe:	2213      	movs	r2, #19
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   1d700:	f012 0f08 	tst.w	r2, #8
   1d704:	d10b      	bne.n	1d71e <ble_ll_adv_set_adv_params+0x46>
        if ((adv_itvl_min > adv_itvl_max) ||
   1d706:	42ac      	cmp	r4, r5
   1d708:	d852      	bhi.n	1d7b0 <ble_ll_adv_set_adv_params+0xd8>
   1d70a:	2c1f      	cmp	r4, #31
   1d70c:	d952      	bls.n	1d7b4 <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   1d70e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   1d712:	d851      	bhi.n	1d7b8 <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   1d714:	2d1f      	cmp	r5, #31
   1d716:	d951      	bls.n	1d7bc <ble_ll_adv_set_adv_params+0xe4>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   1d718:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1d71c:	d850      	bhi.n	1d7c0 <ble_ll_adv_set_adv_params+0xe8>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1d71e:	7959      	ldrb	r1, [r3, #5]
   1d720:	2903      	cmp	r1, #3
   1d722:	d84f      	bhi.n	1d7c4 <ble_ll_adv_set_adv_params+0xec>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   1d724:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1d726:	2901      	cmp	r1, #1
   1d728:	d84e      	bhi.n	1d7c8 <ble_ll_adv_set_adv_params+0xf0>
    advsm->adv_txpwr = g_ble_ll_tx_power;
   1d72a:	492c      	ldr	r1, [pc, #176]	; (1d7dc <ble_ll_adv_set_adv_params+0x104>)
   1d72c:	7808      	ldrb	r0, [r1, #0]
   1d72e:	492a      	ldr	r1, [pc, #168]	; (1d7d8 <ble_ll_adv_set_adv_params+0x100>)
   1d730:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1d732:	7959      	ldrb	r1, [r3, #5]
   1d734:	2901      	cmp	r1, #1
   1d736:	d906      	bls.n	1d746 <ble_ll_adv_set_adv_params+0x6e>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1d738:	4619      	mov	r1, r3
   1d73a:	4f27      	ldr	r7, [pc, #156]	; (1d7d8 <ble_ll_adv_set_adv_params+0x100>)
   1d73c:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1d740:	6338      	str	r0, [r7, #48]	; 0x30
   1d742:	8889      	ldrh	r1, [r1, #4]
   1d744:	86b9      	strh	r1, [r7, #52]	; 0x34
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   1d746:	7b58      	ldrb	r0, [r3, #13]
   1d748:	f010 0ff8 	tst.w	r0, #248	; 0xf8
   1d74c:	d13e      	bne.n	1d7cc <ble_ll_adv_set_adv_params+0xf4>
   1d74e:	2800      	cmp	r0, #0
   1d750:	d03e      	beq.n	1d7d0 <ble_ll_adv_set_adv_params+0xf8>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   1d752:	2e03      	cmp	r6, #3
   1d754:	d83e      	bhi.n	1d7d4 <ble_ll_adv_set_adv_params+0xfc>
    advsm->own_addr_type = cmd->own_addr_type;
   1d756:	795f      	ldrb	r7, [r3, #5]
   1d758:	491f      	ldr	r1, [pc, #124]	; (1d7d8 <ble_ll_adv_set_adv_params+0x100>)
   1d75a:	710f      	strb	r7, [r1, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   1d75c:	799b      	ldrb	r3, [r3, #6]
   1d75e:	714b      	strb	r3, [r1, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   1d760:	70ce      	strb	r6, [r1, #3]
    advsm->adv_chanmask = cmd->chan_map;
   1d762:	7088      	strb	r0, [r1, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   1d764:	81cc      	strh	r4, [r1, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   1d766:	820d      	strh	r5, [r1, #16]
    advsm->props = props;
   1d768:	818a      	strh	r2, [r1, #12]
    return 0;
   1d76a:	2000      	movs	r0, #0
}
   1d76c:	bcf0      	pop	{r4, r5, r6, r7}
   1d76e:	4770      	bx	lr
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1d770:	461a      	mov	r2, r3
   1d772:	4c19      	ldr	r4, [pc, #100]	; (1d7d8 <ble_ll_adv_set_adv_params+0x100>)
   1d774:	f852 0f07 	ldr.w	r0, [r2, #7]!
   1d778:	6320      	str	r0, [r4, #48]	; 0x30
   1d77a:	8892      	ldrh	r2, [r2, #4]
   1d77c:	86a2      	strh	r2, [r4, #52]	; 0x34
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1d77e:	460e      	mov	r6, r1
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   1d780:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   1d782:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   1d784:	462c      	mov	r4, r5
        break;
   1d786:	e7bb      	b.n	1d700 <ble_ll_adv_set_adv_params+0x28>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1d788:	461a      	mov	r2, r3
   1d78a:	4e13      	ldr	r6, [pc, #76]	; (1d7d8 <ble_ll_adv_set_adv_params+0x100>)
   1d78c:	f852 0f07 	ldr.w	r0, [r2, #7]!
   1d790:	6330      	str	r0, [r6, #48]	; 0x30
   1d792:	8892      	ldrh	r2, [r2, #4]
   1d794:	86b2      	strh	r2, [r6, #52]	; 0x34
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1d796:	460e      	mov	r6, r1
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   1d798:	2215      	movs	r2, #21
        break;
   1d79a:	e7b1      	b.n	1d700 <ble_ll_adv_set_adv_params+0x28>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   1d79c:	2212      	movs	r2, #18
        break;
   1d79e:	e7af      	b.n	1d700 <ble_ll_adv_set_adv_params+0x28>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   1d7a0:	2210      	movs	r2, #16
   1d7a2:	e7ad      	b.n	1d700 <ble_ll_adv_set_adv_params+0x28>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7a4:	2012      	movs	r0, #18
   1d7a6:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   1d7a8:	200c      	movs	r0, #12
}
   1d7aa:	4770      	bx	lr
    switch (cmd->type) {
   1d7ac:	2012      	movs	r0, #18
   1d7ae:	e7dd      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7b0:	2012      	movs	r0, #18
   1d7b2:	e7db      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7b4:	2012      	movs	r0, #18
   1d7b6:	e7d9      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7b8:	2012      	movs	r0, #18
   1d7ba:	e7d7      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7bc:	2012      	movs	r0, #18
   1d7be:	e7d5      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7c0:	2012      	movs	r0, #18
   1d7c2:	e7d3      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7c4:	2012      	movs	r0, #18
   1d7c6:	e7d1      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7c8:	2012      	movs	r0, #18
   1d7ca:	e7cf      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7cc:	2012      	movs	r0, #18
   1d7ce:	e7cd      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7d0:	2012      	movs	r0, #18
   1d7d2:	e7cb      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7d4:	2012      	movs	r0, #18
   1d7d6:	e7c9      	b.n	1d76c <ble_ll_adv_set_adv_params+0x94>
   1d7d8:	1000222c 	.word	0x1000222c
   1d7dc:	10002218 	.word	0x10002218

0001d7e0 <ble_ll_adv_read_txpwr>:
    rsp->power_level = g_ble_ll_tx_power;
   1d7e0:	4b03      	ldr	r3, [pc, #12]	; (1d7f0 <ble_ll_adv_read_txpwr+0x10>)
   1d7e2:	f993 3000 	ldrsb.w	r3, [r3]
   1d7e6:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1d7e8:	2301      	movs	r3, #1
   1d7ea:	700b      	strb	r3, [r1, #0]
}
   1d7ec:	2000      	movs	r0, #0
   1d7ee:	4770      	bx	lr
   1d7f0:	10002218 	.word	0x10002218

0001d7f4 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   1d7f4:	2901      	cmp	r1, #1
   1d7f6:	d001      	beq.n	1d7fc <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7f8:	2012      	movs	r0, #18
}
   1d7fa:	4770      	bx	lr
{
   1d7fc:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   1d7fe:	2300      	movs	r3, #0
   1d800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d804:	7801      	ldrb	r1, [r0, #0]
   1d806:	4618      	mov	r0, r3
   1d808:	f7ff fca8 	bl	1d15c <ble_ll_adv_set_enable>
}
   1d80c:	bd08      	pop	{r3, pc}

0001d80e <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   1d80e:	2920      	cmp	r1, #32
   1d810:	d109      	bne.n	1d826 <ble_ll_hci_set_scan_rsp_data+0x18>
   1d812:	7801      	ldrb	r1, [r0, #0]
   1d814:	291f      	cmp	r1, #31
   1d816:	d808      	bhi.n	1d82a <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   1d818:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   1d81a:	2303      	movs	r3, #3
   1d81c:	2200      	movs	r2, #0
   1d81e:	3001      	adds	r0, #1
   1d820:	f7ff fce8 	bl	1d1f4 <ble_ll_adv_set_scan_rsp_data>
}
   1d824:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d826:	2012      	movs	r0, #18
   1d828:	4770      	bx	lr
   1d82a:	2012      	movs	r0, #18
}
   1d82c:	4770      	bx	lr

0001d82e <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   1d82e:	2920      	cmp	r1, #32
   1d830:	d109      	bne.n	1d846 <ble_ll_hci_set_adv_data+0x18>
   1d832:	7801      	ldrb	r1, [r0, #0]
   1d834:	291f      	cmp	r1, #31
   1d836:	d808      	bhi.n	1d84a <ble_ll_hci_set_adv_data+0x1c>
{
   1d838:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   1d83a:	2303      	movs	r3, #3
   1d83c:	2200      	movs	r2, #0
   1d83e:	3001      	adds	r0, #1
   1d840:	f7ff fd29 	bl	1d296 <ble_ll_adv_set_adv_data>
}
   1d844:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d846:	2012      	movs	r0, #18
   1d848:	4770      	bx	lr
   1d84a:	2012      	movs	r0, #18
}
   1d84c:	4770      	bx	lr
	...

0001d850 <ble_ll_adv_rx_pkt_in>:
{
   1d850:	b510      	push	{r4, lr}
   1d852:	4614      	mov	r4, r2
    if (!advsm->adv_enabled) {
   1d854:	4a0e      	ldr	r2, [pc, #56]	; (1d890 <ble_ll_adv_rx_pkt_in+0x40>)
   1d856:	7812      	ldrb	r2, [r2, #0]
   1d858:	b162      	cbz	r2, 1d874 <ble_ll_adv_rx_pkt_in+0x24>
   1d85a:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   1d85c:	8822      	ldrh	r2, [r4, #0]
   1d85e:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d862:	d003      	beq.n	1d86c <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   1d864:	2805      	cmp	r0, #5
   1d866:	d006      	beq.n	1d876 <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1d868:	2803      	cmp	r0, #3
   1d86a:	d00c      	beq.n	1d886 <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   1d86c:	4621      	mov	r1, r4
   1d86e:	4808      	ldr	r0, [pc, #32]	; (1d890 <ble_ll_adv_rx_pkt_in+0x40>)
   1d870:	f7ff feea 	bl	1d648 <ble_ll_adv_make_done>
}
   1d874:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   1d876:	4a06      	ldr	r2, [pc, #24]	; (1d890 <ble_ll_adv_rx_pkt_in+0x40>)
   1d878:	4621      	mov	r1, r4
   1d87a:	4618      	mov	r0, r3
   1d87c:	f7ff fd6a 	bl	1d354 <ble_ll_adv_conn_req_rxd>
   1d880:	2800      	cmp	r0, #0
   1d882:	d1f7      	bne.n	1d874 <ble_ll_adv_rx_pkt_in+0x24>
   1d884:	e7f2      	b.n	1d86c <ble_ll_adv_rx_pkt_in+0x1c>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1d886:	f012 0f10 	tst.w	r2, #16
   1d88a:	d1f3      	bne.n	1d874 <ble_ll_adv_rx_pkt_in+0x24>
   1d88c:	e7ee      	b.n	1d86c <ble_ll_adv_rx_pkt_in+0x1c>
   1d88e:	bf00      	nop
   1d890:	1000222c 	.word	0x1000222c

0001d894 <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1d894:	2300      	movs	r3, #0
   1d896:	2b00      	cmp	r3, #0
   1d898:	dd01      	ble.n	1d89e <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   1d89a:	2001      	movs	r0, #1
   1d89c:	4770      	bx	lr
        if (advsm->adv_enabled &&
   1d89e:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1d8a2:	008a      	lsls	r2, r1, #2
   1d8a4:	4906      	ldr	r1, [pc, #24]	; (1d8c0 <ble_ll_adv_can_chg_whitelist+0x2c>)
   1d8a6:	5c8a      	ldrb	r2, [r1, r2]
   1d8a8:	b132      	cbz	r2, 1d8b8 <ble_ll_adv_can_chg_whitelist+0x24>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   1d8aa:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   1d8ae:	0091      	lsls	r1, r2, #2
   1d8b0:	4a03      	ldr	r2, [pc, #12]	; (1d8c0 <ble_ll_adv_can_chg_whitelist+0x2c>)
   1d8b2:	440a      	add	r2, r1
   1d8b4:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   1d8b6:	b90a      	cbnz	r2, 1d8bc <ble_ll_adv_can_chg_whitelist+0x28>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1d8b8:	3301      	adds	r3, #1
   1d8ba:	e7ec      	b.n	1d896 <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   1d8bc:	2000      	movs	r0, #0
}
   1d8be:	4770      	bx	lr
   1d8c0:	1000222c 	.word	0x1000222c

0001d8c4 <ble_ll_adv_send_conn_comp_ev>:
{
   1d8c4:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(advsm->conn_comp_ev != NULL);
   1d8c6:	4b0a      	ldr	r3, [pc, #40]	; (1d8f0 <ble_ll_adv_send_conn_comp_ev+0x2c>)
   1d8c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1d8ca:	b13a      	cbz	r2, 1d8dc <ble_ll_adv_send_conn_comp_ev+0x18>
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, advsm->conn_comp_ev,
   1d8cc:	4c08      	ldr	r4, [pc, #32]	; (1d8f0 <ble_ll_adv_send_conn_comp_ev+0x2c>)
   1d8ce:	4623      	mov	r3, r4
   1d8d0:	2100      	movs	r1, #0
   1d8d2:	f001 f95b 	bl	1eb8c <ble_ll_conn_comp_event_send>
    advsm->conn_comp_ev = NULL;
   1d8d6:	2300      	movs	r3, #0
   1d8d8:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   1d8da:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(advsm->conn_comp_ev != NULL);
   1d8dc:	f7f6 feba 	bl	14654 <hal_debugger_connected>
   1d8e0:	b100      	cbz	r0, 1d8e4 <ble_ll_adv_send_conn_comp_ev+0x20>
   1d8e2:	be01      	bkpt	0x0001
   1d8e4:	2300      	movs	r3, #0
   1d8e6:	461a      	mov	r2, r3
   1d8e8:	4619      	mov	r1, r3
   1d8ea:	4618      	mov	r0, r3
   1d8ec:	f7f7 fa54 	bl	14d98 <__assert_func>
   1d8f0:	1000222c 	.word	0x1000222c

0001d8f4 <ble_ll_adv_get_local_rpa>:
{
   1d8f4:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1d8f6:	7903      	ldrb	r3, [r0, #4]
   1d8f8:	2b01      	cmp	r3, #1
   1d8fa:	d90c      	bls.n	1d916 <ble_ll_adv_get_local_rpa+0x22>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1d8fc:	8943      	ldrh	r3, [r0, #10]
   1d8fe:	f013 0f01 	tst.w	r3, #1
   1d902:	d00a      	beq.n	1d91a <ble_ll_adv_get_local_rpa+0x26>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   1d904:	f100 0424 	add.w	r4, r0, #36	; 0x24
   1d908:	2101      	movs	r1, #1
   1d90a:	4620      	mov	r0, r4
   1d90c:	f7fe ff59 	bl	1c7c2 <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1d910:	b920      	cbnz	r0, 1d91c <ble_ll_adv_get_local_rpa+0x28>
    uint8_t *rpa = NULL;
   1d912:	2400      	movs	r4, #0
   1d914:	e002      	b.n	1d91c <ble_ll_adv_get_local_rpa+0x28>
   1d916:	2400      	movs	r4, #0
   1d918:	e000      	b.n	1d91c <ble_ll_adv_get_local_rpa+0x28>
   1d91a:	2400      	movs	r4, #0
}
   1d91c:	4620      	mov	r0, r4
   1d91e:	bd10      	pop	{r4, pc}

0001d920 <ble_ll_adv_get_peer_rpa>:
}
   1d920:	302a      	adds	r0, #42	; 0x2a
   1d922:	4770      	bx	lr

0001d924 <ble_ll_adv_reset>:
{
   1d924:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1d926:	2400      	movs	r4, #0
   1d928:	2c00      	cmp	r4, #0
   1d92a:	dd00      	ble.n	1d92e <ble_ll_adv_reset+0xa>
}
   1d92c:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1d92e:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
   1d932:	0093      	lsls	r3, r2, #2
   1d934:	4d07      	ldr	r5, [pc, #28]	; (1d954 <ble_ll_adv_reset+0x30>)
   1d936:	441d      	add	r5, r3
        ble_ll_adv_sm_stop(advsm);
   1d938:	4628      	mov	r0, r5
   1d93a:	f7ff fbdb 	bl	1d0f4 <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   1d93e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   1d940:	f7f7 fe92 	bl	15668 <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1d944:	6c68      	ldr	r0, [r5, #68]	; 0x44
   1d946:	f7f7 fe8f 	bl	15668 <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   1d94a:	4628      	mov	r0, r5
   1d94c:	f7ff fdbe 	bl	1d4cc <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1d950:	3401      	adds	r4, #1
   1d952:	e7e9      	b.n	1d928 <ble_ll_adv_reset+0x4>
   1d954:	1000222c 	.word	0x1000222c

0001d958 <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d958:	2300      	movs	r3, #0
   1d95a:	2b00      	cmp	r3, #0
   1d95c:	dd01      	ble.n	1d962 <ble_ll_adv_enabled+0xa>
    return 0;
   1d95e:	2000      	movs	r0, #0
   1d960:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   1d962:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1d966:	008a      	lsls	r2, r1, #2
   1d968:	4903      	ldr	r1, [pc, #12]	; (1d978 <ble_ll_adv_enabled+0x20>)
   1d96a:	5c8a      	ldrb	r2, [r1, r2]
   1d96c:	b90a      	cbnz	r2, 1d972 <ble_ll_adv_enabled+0x1a>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d96e:	3301      	adds	r3, #1
   1d970:	e7f3      	b.n	1d95a <ble_ll_adv_enabled+0x2>
            return 1;
   1d972:	2001      	movs	r0, #1
}
   1d974:	4770      	bx	lr
   1d976:	bf00      	nop
   1d978:	1000222c 	.word	0x1000222c

0001d97c <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   1d97c:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1d97e:	2400      	movs	r4, #0
   1d980:	2c00      	cmp	r4, #0
   1d982:	dd00      	ble.n	1d986 <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   1d984:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   1d986:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
   1d98a:	0093      	lsls	r3, r2, #2
   1d98c:	4802      	ldr	r0, [pc, #8]	; (1d998 <ble_ll_adv_init+0x1c>)
   1d98e:	4418      	add	r0, r3
   1d990:	f7ff fd9c 	bl	1d4cc <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1d994:	3401      	adds	r4, #1
   1d996:	e7f3      	b.n	1d980 <ble_ll_adv_init+0x4>
   1d998:	1000222c 	.word	0x1000222c

0001d99c <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   1d99c:	b508      	push	{r3, lr}
   1d99e:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   1d9a0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1d9a4:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
   1d9a8:	4403      	add	r3, r0
   1d9aa:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   1d9ac:	2825      	cmp	r0, #37	; 0x25
   1d9ae:	d902      	bls.n	1d9b6 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   1d9b0:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   1d9b4:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   1d9b6:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   1d9ba:	f000 0207 	and.w	r2, r0, #7
   1d9be:	2301      	movs	r3, #1
   1d9c0:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   1d9c2:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   1d9c6:	440a      	add	r2, r1
   1d9c8:	7f12      	ldrb	r2, [r2, #28]
   1d9ca:	4213      	tst	r3, r2
   1d9cc:	d000      	beq.n	1d9d0 <ble_ll_conn_calc_dci_csa1+0x34>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   1d9ce:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   1d9d0:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   1d9d4:	fbb0 f3f2 	udiv	r3, r0, r2
   1d9d8:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   1d9dc:	311c      	adds	r1, #28
   1d9de:	b2c0      	uxtb	r0, r0
   1d9e0:	f004 faf8 	bl	21fd4 <ble_ll_utils_remapped_channel>
   1d9e4:	e7f3      	b.n	1d9ce <ble_ll_conn_calc_dci_csa1+0x32>
	...

0001d9e8 <ble_ll_conn_halt>:
{
   1d9e8:	b508      	push	{r3, lr}
    ble_phy_disable();
   1d9ea:	f004 fc41 	bl	22270 <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d9ee:	2000      	movs	r0, #0
   1d9f0:	f7fe ff84 	bl	1c8fc <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   1d9f4:	4b01      	ldr	r3, [pc, #4]	; (1d9fc <ble_ll_conn_halt+0x14>)
   1d9f6:	2200      	movs	r2, #0
   1d9f8:	601a      	str	r2, [r3, #0]
}
   1d9fa:	bd08      	pop	{r3, pc}
   1d9fc:	10002330 	.word	0x10002330

0001da00 <ble_ll_conn_current_sm_over>:
{
   1da00:	b510      	push	{r4, lr}
   1da02:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   1da04:	f7ff fff0 	bl	1d9e8 <ble_ll_conn_halt>
    if (connsm) {
   1da08:	b11c      	cbz	r4, 1da12 <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   1da0a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1da0e:	f7fe ff81 	bl	1c914 <ble_ll_event_send>
}
   1da12:	bd10      	pop	{r4, pc}

0001da14 <ble_ll_conn_event_start_cb>:
 *
 * @return int 0: scheduled item is still running. 1: schedule item is done.
 */
static int
ble_ll_conn_event_start_cb(struct ble_ll_sched_item *sch)
{
   1da14:	b530      	push	{r4, r5, lr}
   1da16:	b083      	sub	sp, #12
    struct ble_ll_conn_sm *connsm;

    /* XXX: note that we can extend end time here if we want. Look at this */

    /* Set current connection state machine */
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   1da18:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   1da1a:	4b3e      	ldr	r3, [pc, #248]	; (1db14 <ble_ll_conn_event_start_cb+0x100>)
   1da1c:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   1da1e:	2c00      	cmp	r4, #0
   1da20:	d042      	beq.n	1daa8 <ble_ll_conn_event_start_cb+0x94>
   1da22:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1da24:	79a3      	ldrb	r3, [r4, #6]
   1da26:	2b00      	cmp	r3, #0
   1da28:	d048      	beq.n	1dabc <ble_ll_conn_event_start_cb+0xa8>

    /* Log connection event start */
    ble_ll_trace_u32(BLE_LL_TRACE_ID_CONN_EV_START, connsm->conn_handle);

    /* Disable whitelisting as connections do not use it */
    ble_ll_whitelist_disable();
   1da2a:	f004 fb89 	bl	22140 <ble_ll_whitelist_disable>

    /* Set LL state */
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   1da2e:	2004      	movs	r0, #4
   1da30:	f7fe ff64 	bl	1c8fc <ble_ll_state_set>

    /* Set channel */
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   1da34:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1da36:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1da38:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   1da3c:	f004 fc04 	bl	22248 <ble_phy_setchan>
                    connsm->crcinit);

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    ble_phy_resolv_list_disable();
   1da40:	f004 fc64 	bl	2230c <ble_phy_resolv_list_disable>

#if (BLE_LL_BT5_PHY_SUPPORTED == 1)
    ble_phy_mode_set(connsm->phy_data.tx_phy_mode, connsm->phy_data.rx_phy_mode);
#endif

    switch (connsm->conn_role) {
   1da44:	79e3      	ldrb	r3, [r4, #7]
   1da46:	2b02      	cmp	r3, #2
   1da48:	d159      	bne.n	1dafe <ble_ll_conn_event_start_cb+0xea>
        break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    case BLE_LL_CONN_ROLE_PERIPHERAL:
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (CONN_F_ENCRYPTED(connsm)) {
   1da4a:	78a3      	ldrb	r3, [r4, #2]
   1da4c:	f013 0f02 	tst.w	r3, #2
   1da50:	d042      	beq.n	1dad8 <ble_ll_conn_event_start_cb+0xc4>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1da52:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   1da56:	2301      	movs	r3, #1
   1da58:	9300      	str	r3, [sp, #0]
   1da5a:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1da5e:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1da62:	2100      	movs	r1, #0
   1da64:	f004 fbb6 	bl	221d4 <ble_phy_encrypt_enable>
            ble_phy_encrypt_disable();
        }
#endif

        /* XXX: what is this really for the peripheral? */
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   1da68:	6868      	ldr	r0, [r5, #4]
   1da6a:	4b2b      	ldr	r3, [pc, #172]	; (1db18 <ble_ll_conn_event_start_cb+0x104>)
   1da6c:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   1da6e:	78a9      	ldrb	r1, [r5, #2]
   1da70:	4418      	add	r0, r3
   1da72:	f004 fbb9 	bl	221e8 <ble_phy_rx_set_start_time>
        if (rc) {
   1da76:	4605      	mov	r5, r0
   1da78:	b388      	cbz	r0, 1dade <ble_ll_conn_event_start_cb+0xca>
            /* End the connection event as we have no more buffers */
            STATS_INC(ble_ll_conn_stats, periph_ce_failures);
   1da7a:	4a28      	ldr	r2, [pc, #160]	; (1db1c <ble_ll_conn_event_start_cb+0x108>)
   1da7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1da7e:	3301      	adds	r3, #1
   1da80:	6313      	str	r3, [r2, #48]	; 0x30
        BLE_LL_ASSERT(0);
        break;
    }

    if (rc == BLE_LL_SCHED_STATE_DONE) {
        ble_ll_event_send(&connsm->conn_ev_end);
   1da82:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1da86:	f7fe ff45 	bl	1c914 <ble_ll_event_send>
        ble_phy_disable();
   1da8a:	f004 fbf1 	bl	22270 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1da8e:	2000      	movs	r0, #0
   1da90:	f7fe ff34 	bl	1c8fc <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   1da94:	4b1f      	ldr	r3, [pc, #124]	; (1db14 <ble_ll_conn_event_start_cb+0x100>)
   1da96:	2200      	movs	r2, #0
   1da98:	601a      	str	r2, [r3, #0]
            rc = BLE_LL_SCHED_STATE_DONE;
   1da9a:	2501      	movs	r5, #1
    return os_cputime_get32();
   1da9c:	f014 fab1 	bl	32002 <os_cputime_get32>
    }

    /* Set time that we last serviced the schedule */
    connsm->last_scheduled = ble_ll_tmr_get();
   1daa0:	6620      	str	r0, [r4, #96]	; 0x60
    return rc;
}
   1daa2:	4628      	mov	r0, r5
   1daa4:	b003      	add	sp, #12
   1daa6:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   1daa8:	f7f6 fdd4 	bl	14654 <hal_debugger_connected>
   1daac:	b100      	cbz	r0, 1dab0 <ble_ll_conn_event_start_cb+0x9c>
   1daae:	be01      	bkpt	0x0001
   1dab0:	2300      	movs	r3, #0
   1dab2:	461a      	mov	r2, r3
   1dab4:	4619      	mov	r1, r3
   1dab6:	4618      	mov	r0, r3
   1dab8:	f7f7 f96e 	bl	14d98 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_start_in_idle);
   1dabc:	4a17      	ldr	r2, [pc, #92]	; (1db1c <ble_ll_conn_event_start_cb+0x108>)
   1dabe:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1dac0:	3301      	adds	r3, #1
   1dac2:	6753      	str	r3, [r2, #116]	; 0x74
        BLE_LL_ASSERT(0);
   1dac4:	f7f6 fdc6 	bl	14654 <hal_debugger_connected>
   1dac8:	b100      	cbz	r0, 1dacc <ble_ll_conn_event_start_cb+0xb8>
   1daca:	be01      	bkpt	0x0001
   1dacc:	2300      	movs	r3, #0
   1dace:	461a      	mov	r2, r3
   1dad0:	4619      	mov	r1, r3
   1dad2:	4618      	mov	r0, r3
   1dad4:	f7f7 f960 	bl	14d98 <__assert_func>
            ble_phy_encrypt_disable();
   1dad8:	f004 fb7d 	bl	221d6 <ble_phy_encrypt_disable>
   1dadc:	e7c4      	b.n	1da68 <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.periph_set_last_anchor = 1;
   1dade:	7823      	ldrb	r3, [r4, #0]
   1dae0:	f043 0320 	orr.w	r3, r3, #32
   1dae4:	7023      	strb	r3, [r4, #0]
            usecs = connsm->periph_cur_tx_win_usecs + 61 +
   1dae6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    (2 * connsm->periph_cur_window_widening);
   1daea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
            usecs = connsm->periph_cur_tx_win_usecs + 61 +
   1daee:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   1daf2:	323d      	adds	r2, #61	; 0x3d
   1daf4:	2100      	movs	r1, #0
   1daf6:	4608      	mov	r0, r1
   1daf8:	f004 fc0e 	bl	22318 <ble_phy_wfr_enable>
    if (rc == BLE_LL_SCHED_STATE_DONE) {
   1dafc:	e7ce      	b.n	1da9c <ble_ll_conn_event_start_cb+0x88>
        BLE_LL_ASSERT(0);
   1dafe:	f7f6 fda9 	bl	14654 <hal_debugger_connected>
   1db02:	b100      	cbz	r0, 1db06 <ble_ll_conn_event_start_cb+0xf2>
   1db04:	be01      	bkpt	0x0001
   1db06:	2300      	movs	r3, #0
   1db08:	461a      	mov	r2, r3
   1db0a:	4619      	mov	r1, r3
   1db0c:	4618      	mov	r0, r3
   1db0e:	f7f7 f943 	bl	14d98 <__assert_func>
   1db12:	bf00      	nop
   1db14:	10002330 	.word	0x10002330
   1db18:	10002665 	.word	0x10002665
   1db1c:	100022ac 	.word	0x100022ac

0001db20 <ble_ll_conn_chk_csm_flags>:
{
   1db20:	b510      	push	{r4, lr}
   1db22:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   1db24:	7883      	ldrb	r3, [r0, #2]
   1db26:	f013 0f01 	tst.w	r3, #1
   1db2a:	d114      	bne.n	1db56 <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   1db2c:	7863      	ldrb	r3, [r4, #1]
   1db2e:	f013 0f02 	tst.w	r3, #2
   1db32:	d00f      	beq.n	1db54 <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   1db34:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1db38:	f013 0f01 	tst.w	r3, #1
   1db3c:	d119      	bne.n	1db72 <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   1db3e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1db42:	d11c      	bne.n	1db7e <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   1db44:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   1db46:	4620      	mov	r0, r4
   1db48:	f003 f9a9 	bl	20e9e <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   1db4c:	7863      	ldrb	r3, [r4, #1]
   1db4e:	f36f 0341 	bfc	r3, #1, #1
   1db52:	7063      	strb	r3, [r4, #1]
}
   1db54:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   1db56:	f003 f9fd 	bl	20f54 <ble_ll_hci_ev_ltk_req>
   1db5a:	b920      	cbnz	r0, 1db66 <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   1db5c:	78a3      	ldrb	r3, [r4, #2]
   1db5e:	f36f 0300 	bfc	r3, #0, #1
   1db62:	70a3      	strb	r3, [r4, #2]
   1db64:	e7e2      	b.n	1db2c <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   1db66:	2206      	movs	r2, #6
   1db68:	2103      	movs	r1, #3
   1db6a:	4620      	mov	r0, r4
   1db6c:	f002 fc54 	bl	20418 <ble_ll_ctrl_reject_ind_send>
   1db70:	e7f4      	b.n	1db5c <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   1db72:	2100      	movs	r1, #0
   1db74:	4620      	mov	r0, r4
   1db76:	f002 f92f 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   1db7a:	2100      	movs	r1, #0
   1db7c:	e7e3      	b.n	1db46 <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1db7e:	2106      	movs	r1, #6
   1db80:	4620      	mov	r0, r4
   1db82:	f002 f929 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   1db86:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
   1db8a:	e7dc      	b.n	1db46 <ble_ll_conn_chk_csm_flags+0x26>

0001db8c <ble_ll_conn_itvl_to_ticks>:
{
   1db8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db8e:	460f      	mov	r7, r1
   1db90:	4616      	mov	r6, r2
    *itvl_ticks = ble_ll_tmr_u2t_r(itvl * BLE_LL_CONN_ITVL_USECS, itvl_usecs);
   1db92:	f240 44e2 	movw	r4, #1250	; 0x4e2
   1db96:	fb04 f400 	mul.w	r4, r4, r0
    if (usecs <= 31249) {
   1db9a:	f647 2311 	movw	r3, #31249	; 0x7a11
   1db9e:	429c      	cmp	r4, r3
   1dba0:	d80d      	bhi.n	1dbbe <ble_ll_conn_itvl_to_ticks+0x32>
        return (usecs * 137439) / 4194304;
   1dba2:	4d0b      	ldr	r5, [pc, #44]	; (1dbd0 <ble_ll_conn_itvl_to_ticks+0x44>)
   1dba4:	fb05 f504 	mul.w	r5, r5, r4
   1dba8:	0dad      	lsrs	r5, r5, #22
    return os_cputime_ticks_to_usecs(ticks);
   1dbaa:	4628      	mov	r0, r5
   1dbac:	f014 fa36 	bl	3201c <os_cputime_ticks_to_usecs>
ble_ll_tmr_u2t_r(uint32_t usecs, uint8_t *rem_us)
{
    uint32_t ticks;

    ticks = ble_ll_tmr_u2t(usecs);
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   1dbb0:	1a24      	subs	r4, r4, r0
   1dbb2:	b2e4      	uxtb	r4, r4
   1dbb4:	7034      	strb	r4, [r6, #0]
    if (*rem_us == USECS_PER_TICK) {
   1dbb6:	2c1f      	cmp	r4, #31
   1dbb8:	d006      	beq.n	1dbc8 <ble_ll_conn_itvl_to_ticks+0x3c>
   1dbba:	603d      	str	r5, [r7, #0]
}
   1dbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return os_cputime_usecs_to_ticks(usecs);
   1dbbe:	4620      	mov	r0, r4
   1dbc0:	f014 fa24 	bl	3200c <os_cputime_usecs_to_ticks>
   1dbc4:	4605      	mov	r5, r0
   1dbc6:	e7f0      	b.n	1dbaa <ble_ll_conn_itvl_to_ticks+0x1e>
        *rem_us = 0;
   1dbc8:	2300      	movs	r3, #0
   1dbca:	7033      	strb	r3, [r6, #0]
        ticks++;
   1dbcc:	3501      	adds	r5, #1
   1dbce:	e7f4      	b.n	1dbba <ble_ll_conn_itvl_to_ticks+0x2e>
   1dbd0:	000218df 	.word	0x000218df

0001dbd4 <ble_ll_conn_is_lru>:
    if (LL_TMR_LT(s1->last_scheduled, s2->last_scheduled)) {
   1dbd4:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1dbd6:	6e0a      	ldr	r2, [r1, #96]	; 0x60
   1dbd8:	1a9b      	subs	r3, r3, r2
   1dbda:	2b00      	cmp	r3, #0
   1dbdc:	db01      	blt.n	1dbe2 <ble_ll_conn_is_lru+0xe>
        rc = 0;
   1dbde:	2000      	movs	r0, #0
}
   1dbe0:	4770      	bx	lr
        rc = 1;
   1dbe2:	2001      	movs	r0, #1
   1dbe4:	4770      	bx	lr
	...

0001dbe8 <ble_ll_conn_get_ce_end_time>:
{
   1dbe8:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   1dbea:	4b04      	ldr	r3, [pc, #16]	; (1dbfc <ble_ll_conn_get_ce_end_time+0x14>)
   1dbec:	681b      	ldr	r3, [r3, #0]
   1dbee:	b10b      	cbz	r3, 1dbf4 <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   1dbf0:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
   1dbf2:	bd08      	pop	{r3, pc}
    return os_cputime_get32();
   1dbf4:	f014 fa05 	bl	32002 <os_cputime_get32>
    return ce_end_time;
   1dbf8:	e7fb      	b.n	1dbf2 <ble_ll_conn_get_ce_end_time+0xa>
   1dbfa:	bf00      	nop
   1dbfc:	10002330 	.word	0x10002330

0001dc00 <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   1dc00:	2801      	cmp	r0, #1
   1dc02:	d108      	bne.n	1dc16 <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   1dc04:	3801      	subs	r0, #1
   1dc06:	4b06      	ldr	r3, [pc, #24]	; (1dc20 <ble_ll_conn_find_active_conn+0x20>)
   1dc08:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1dc0c:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1dc10:	7983      	ldrb	r3, [r0, #6]
   1dc12:	b113      	cbz	r3, 1dc1a <ble_ll_conn_find_active_conn+0x1a>
}
   1dc14:	4770      	bx	lr
    connsm = NULL;
   1dc16:	2000      	movs	r0, #0
   1dc18:	4770      	bx	lr
            connsm = NULL;
   1dc1a:	2000      	movs	r0, #0
    return connsm;
   1dc1c:	e7fa      	b.n	1dc14 <ble_ll_conn_find_active_conn+0x14>
   1dc1e:	bf00      	nop
   1dc20:	10002358 	.word	0x10002358

0001dc24 <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   1dc24:	4b07      	ldr	r3, [pc, #28]	; (1dc44 <ble_ll_conn_sm_get+0x20>)
   1dc26:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   1dc28:	b138      	cbz	r0, 1dc3a <ble_ll_conn_sm_get+0x16>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   1dc2a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1dc2e:	4a05      	ldr	r2, [pc, #20]	; (1dc44 <ble_ll_conn_sm_get+0x20>)
   1dc30:	6013      	str	r3, [r2, #0]
   1dc32:	b103      	cbz	r3, 1dc36 <ble_ll_conn_sm_get+0x12>
}
   1dc34:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   1dc36:	6052      	str	r2, [r2, #4]
   1dc38:	4770      	bx	lr
        STATS_INC(ble_ll_conn_stats, no_free_conn_sm);
   1dc3a:	4a03      	ldr	r2, [pc, #12]	; (1dc48 <ble_ll_conn_sm_get+0x24>)
   1dc3c:	6a13      	ldr	r3, [r2, #32]
   1dc3e:	3301      	adds	r3, #1
   1dc40:	6213      	str	r3, [r2, #32]
    return connsm;
   1dc42:	e7f7      	b.n	1dc34 <ble_ll_conn_sm_get+0x10>
   1dc44:	10002334 	.word	0x10002334
   1dc48:	100022ac 	.word	0x100022ac

0001dc4c <ble_ll_conn_calc_dci>:
{
   1dc4c:	b538      	push	{r3, r4, r5, lr}
   1dc4e:	4605      	mov	r5, r0
   1dc50:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   1dc52:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    while (latency > 0) {
   1dc56:	b12c      	cbz	r4, 1dc64 <ble_ll_conn_calc_dci+0x18>
        index = ble_ll_conn_calc_dci_csa1(conn);
   1dc58:	4628      	mov	r0, r5
   1dc5a:	f7ff fe9f 	bl	1d99c <ble_ll_conn_calc_dci_csa1>
        latency--;
   1dc5e:	3c01      	subs	r4, #1
   1dc60:	b2a4      	uxth	r4, r4
   1dc62:	e7f8      	b.n	1dc56 <ble_ll_conn_calc_dci+0xa>
}
   1dc64:	bd38      	pop	{r3, r4, r5, pc}
	...

0001dc68 <ble_ll_conn_next_event>:
 *
 * @return int
 */
static int
ble_ll_conn_next_event(struct ble_ll_conn_sm *connsm)
{
   1dc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc6a:	4604      	mov	r4, r0
#endif
    struct ble_ll_conn_upd_req *upd;
    uint32_t usecs;

    /* XXX: deal with connection request procedure here as well */
    ble_ll_conn_chk_csm_flags(connsm);
   1dc6c:	f7ff ff58 	bl	1db20 <ble_ll_conn_chk_csm_flags>

    /* If unable to start terminate procedure, start it now */
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   1dc70:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1dc74:	b11b      	cbz	r3, 1dc7e <ble_ll_conn_next_event+0x16>
   1dc76:	f994 3000 	ldrsb.w	r3, [r4]
   1dc7a:	2b00      	cmp	r3, #0
   1dc7c:	da66      	bge.n	1dd4c <ble_ll_conn_next_event+0xe4>
        ble_ll_ctrl_terminate_start(connsm);
    }

    if (CONN_F_TERMINATE_STARTED(connsm) && CONN_IS_PERIPHERAL(connsm)) {
   1dc7e:	7821      	ldrb	r1, [r4, #0]
   1dc80:	f994 3000 	ldrsb.w	r3, [r4]
   1dc84:	2b00      	cmp	r3, #0
   1dc86:	db65      	blt.n	1dd54 <ble_ll_conn_next_event+0xec>
     * latency if we are doing one of these updates as long as we
     * know that the central has received the ACK to the PDU that set
     * the instant
     */
    /* Set event counter to the next connection event that we will tx/rx in */
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1dc88:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   1dc8c:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1dc90:	fb05 f500 	mul.w	r5, r5, r0
    latency = 1;
    if (connsm->csmflags.cfbit.allow_periph_latency     &&
        !connsm->csmflags.cfbit.conn_update_sched       &&
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   1dc94:	6822      	ldr	r2, [r4, #0]
   1dc96:	4bac      	ldr	r3, [pc, #688]	; (1df48 <ble_ll_conn_next_event+0x2e0>)
   1dc98:	4013      	ands	r3, r2
    if (connsm->csmflags.cfbit.allow_periph_latency     &&
   1dc9a:	2b10      	cmp	r3, #16
   1dc9c:	d061      	beq.n	1dd62 <ble_ll_conn_next_event+0xfa>
    latency = 1;
   1dc9e:	2601      	movs	r6, #1
        if (connsm->csmflags.cfbit.pkt_rxd) {
            latency += connsm->periph_latency;
            itvl = itvl * latency;
        }
    }
    connsm->event_cntr += latency;
   1dca0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   1dca4:	4433      	add	r3, r6
   1dca6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46

    /* Set next connection event start time */
    /* We can use pre-calculated values for one interval if latency is 1. */
    if (latency == 1) {
   1dcaa:	2e01      	cmp	r6, #1
   1dcac:	d065      	beq.n	1dd7a <ble_ll_conn_next_event+0x112>
    if (usecs <= 31249) {
   1dcae:	f647 2311 	movw	r3, #31249	; 0x7a11
   1dcb2:	429d      	cmp	r5, r3
   1dcb4:	f200 8082 	bhi.w	1ddbc <ble_ll_conn_next_event+0x154>
        return (usecs * 137439) / 4194304;
   1dcb8:	4fa4      	ldr	r7, [pc, #656]	; (1df4c <ble_ll_conn_next_event+0x2e4>)
   1dcba:	fb07 f705 	mul.w	r7, r7, r5
   1dcbe:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   1dcc0:	4638      	mov	r0, r7
   1dcc2:	f014 f9ab 	bl	3201c <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   1dcc6:	1a2d      	subs	r5, r5, r0
   1dcc8:	b2ed      	uxtb	r5, r5
    if (*rem_us == USECS_PER_TICK) {
   1dcca:	2d1f      	cmp	r5, #31
   1dccc:	d07b      	beq.n	1ddc6 <ble_ll_conn_next_event+0x15e>
    uint32_t t_ticks;
    uint8_t t_rem_us;

    t_ticks = ble_ll_tmr_u2t_r(usecs, &t_rem_us);

    *ticks += t_ticks;
   1dcce:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1dcd0:	4438      	add	r0, r7
   1dcd2:	6720      	str	r0, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   1dcd4:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
   1dcd8:	4405      	add	r5, r0
   1dcda:	b2ed      	uxtb	r5, r5
   1dcdc:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   1dce0:	2d1e      	cmp	r5, #30
   1dce2:	d905      	bls.n	1dcf0 <ble_ll_conn_next_event+0x88>
        *rem_us -= USECS_PER_TICK;
   1dce4:	3d1f      	subs	r5, #31
   1dce6:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        *ticks += 1;
   1dcea:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1dcec:	3301      	adds	r3, #1
   1dcee:	6723      	str	r3, [r4, #112]	; 0x70
     * If a connection update has been scheduled and the event counter
     * is now equal to the instant, we need to adjust the start of the
     * connection by the the transmit window offset. We also copy in the
     * update parameters as they now should take effect.
     */
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1dcf0:	7863      	ldrb	r3, [r4, #1]
   1dcf2:	f013 0f01 	tst.w	r3, #1
   1dcf6:	d005      	beq.n	1dd04 <ble_ll_conn_next_event+0x9c>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   1dcf8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   1dcfc:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1dd00:	429a      	cmp	r2, r3
   1dd02:	d063      	beq.n	1ddcc <ble_ll_conn_next_event+0x164>
     * counter, when we get here the event counter has already been
     * incremented by 1. That is why we do a signed comparison and change to
     * new channel map once the event counter equals or has passed channel
     * map update instant.
     */
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   1dd04:	7863      	ldrb	r3, [r4, #1]
   1dd06:	f013 0f10 	tst.w	r3, #16
   1dd0a:	d007      	beq.n	1dd1c <ble_ll_conn_next_event+0xb4>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   1dd0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1dd0e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   1dd12:	1a9b      	subs	r3, r3, r2
   1dd14:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   1dd16:	2b00      	cmp	r3, #0
   1dd18:	f340 80d0 	ble.w	1debc <ble_ll_conn_next_event+0x254>
#endif
    }
#endif

    /* Calculate data channel index of next connection event */
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   1dd1c:	4631      	mov	r1, r6
   1dd1e:	4620      	mov	r0, r4
   1dd20:	f7ff ff94 	bl	1dc4c <ble_ll_conn_calc_dci>
   1dd24:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    /*
     * If we are trying to terminate connection, check if next wake time is
     * passed the termination timeout. If so, no need to continue with
     * connection as we will time out anyway.
     */
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   1dd28:	f994 3000 	ldrsb.w	r3, [r4]
   1dd2c:	2b00      	cmp	r3, #0
   1dd2e:	f2c0 80dc 	blt.w	1deea <ble_ll_conn_next_event+0x282>
#else
    itvl = ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
                          BLE_LL_SCHED_USECS_PER_SLOT);
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1dd32:	79e3      	ldrb	r3, [r4, #7]
   1dd34:	2b02      	cmp	r3, #2
   1dd36:	f000 80e1 	beq.w	1defc <ble_ll_conn_next_event+0x294>
    itvl = ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
   1dd3a:	20a3      	movs	r0, #163	; 0xa3
        cur_ww += BLE_LL_JITTER_USECS;
        connsm->periph_cur_window_widening = cur_ww;
        itvl += ble_ll_tmr_u2t(cur_ww + connsm->periph_cur_tx_win_usecs);
    }
#endif
    itvl -= g_ble_ll_sched_offset_ticks;
   1dd3c:	4b84      	ldr	r3, [pc, #528]	; (1df50 <ble_ll_conn_next_event+0x2e8>)
   1dd3e:	781b      	ldrb	r3, [r3, #0]
   1dd40:	1ac0      	subs	r0, r0, r3
    connsm->ce_end_time = connsm->anchor_point + itvl;
   1dd42:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1dd44:	4418      	add	r0, r3
   1dd46:	65a0      	str	r0, [r4, #88]	; 0x58

    return 0;
   1dd48:	2000      	movs	r0, #0
}
   1dd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_ctrl_terminate_start(connsm);
   1dd4c:	4620      	mov	r0, r4
   1dd4e:	f001 ff99 	bl	1fc84 <ble_ll_ctrl_terminate_start>
   1dd52:	e794      	b.n	1dc7e <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && CONN_IS_PERIPHERAL(connsm)) {
   1dd54:	79e3      	ldrb	r3, [r4, #7]
   1dd56:	2b02      	cmp	r3, #2
   1dd58:	d196      	bne.n	1dc88 <ble_ll_conn_next_event+0x20>
        connsm->periph_latency = 0;
   1dd5a:	2300      	movs	r3, #0
   1dd5c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   1dd60:	e792      	b.n	1dc88 <ble_ll_conn_next_event+0x20>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   1dd62:	f011 0f01 	tst.w	r1, #1
   1dd66:	d006      	beq.n	1dd76 <ble_ll_conn_next_event+0x10e>
            latency += connsm->periph_latency;
   1dd68:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
   1dd6c:	3601      	adds	r6, #1
   1dd6e:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   1dd70:	fb06 f505 	mul.w	r5, r6, r5
   1dd74:	e794      	b.n	1dca0 <ble_ll_conn_next_event+0x38>
    latency = 1;
   1dd76:	2601      	movs	r6, #1
   1dd78:	e792      	b.n	1dca0 <ble_ll_conn_next_event+0x38>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   1dd7a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   1dd7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1dd7e:	4413      	add	r3, r2
   1dd80:	6723      	str	r3, [r4, #112]	; 0x70
        ble_ll_tmr_add_u(&connsm->anchor_point, &connsm->anchor_point_usecs,
   1dd82:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
}

static inline void
ble_ll_tmr_add_u(uint32_t *ticks, uint8_t *rem_us, uint8_t usecs)
{
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   1dd86:	2b1e      	cmp	r3, #30
   1dd88:	d80e      	bhi.n	1dda8 <ble_ll_conn_next_event+0x140>

    *rem_us += usecs;
   1dd8a:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1dd8e:	4413      	add	r3, r2
   1dd90:	b2db      	uxtb	r3, r3
   1dd92:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   1dd96:	2b1e      	cmp	r3, #30
   1dd98:	d9aa      	bls.n	1dcf0 <ble_ll_conn_next_event+0x88>
        *rem_us -= USECS_PER_TICK;
   1dd9a:	3b1f      	subs	r3, #31
   1dd9c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   1dda0:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1dda2:	3301      	adds	r3, #1
   1dda4:	6723      	str	r3, [r4, #112]	; 0x70
    }
}
   1dda6:	e7a3      	b.n	1dcf0 <ble_ll_conn_next_event+0x88>
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   1dda8:	f7f6 fc54 	bl	14654 <hal_debugger_connected>
   1ddac:	b100      	cbz	r0, 1ddb0 <ble_ll_conn_next_event+0x148>
   1ddae:	be01      	bkpt	0x0001
   1ddb0:	2300      	movs	r3, #0
   1ddb2:	461a      	mov	r2, r3
   1ddb4:	4619      	mov	r1, r3
   1ddb6:	4618      	mov	r0, r3
   1ddb8:	f7f6 ffee 	bl	14d98 <__assert_func>
    return os_cputime_usecs_to_ticks(usecs);
   1ddbc:	4628      	mov	r0, r5
   1ddbe:	f014 f925 	bl	3200c <os_cputime_usecs_to_ticks>
   1ddc2:	4607      	mov	r7, r0
   1ddc4:	e77c      	b.n	1dcc0 <ble_ll_conn_next_event+0x58>
        ticks++;
   1ddc6:	3701      	adds	r7, #1
        *rem_us = 0;
   1ddc8:	2500      	movs	r5, #0
   1ddca:	e780      	b.n	1dcce <ble_ll_conn_next_event+0x66>
            (CONN_IS_PERIPHERAL(connsm) &&
   1ddcc:	79e3      	ldrb	r3, [r4, #7]
        if (CONN_IS_CENTRAL(connsm) ||
   1ddce:	2b02      	cmp	r3, #2
   1ddd0:	d034      	beq.n	1de3c <ble_ll_conn_next_event+0x1d4>
            (connsm->conn_itvl != upd->interval) ||
   1ddd2:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   1ddd6:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   1ddda:	429a      	cmp	r2, r3
   1dddc:	d034      	beq.n	1de48 <ble_ll_conn_next_event+0x1e0>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   1ddde:	7863      	ldrb	r3, [r4, #1]
   1dde0:	f043 0302 	orr.w	r3, r3, #2
   1dde4:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   1dde6:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   1ddea:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        connsm->periph_latency = upd->latency;
   1ddee:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   1ddf2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        connsm->tx_win_size = upd->winsize;
   1ddf6:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   1ddfa:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   1ddfe:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1de02:	fb03 f302 	mul.w	r3, r3, r2
        connsm->periph_cur_tx_win_usecs =
   1de06:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        connsm->tx_win_off = upd->winoffset;
   1de0a:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   1de0e:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
        connsm->conn_itvl = upd->interval;
   1de12:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
   1de16:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
        ble_ll_conn_itvl_to_ticks(connsm->conn_itvl, &connsm->conn_itvl_ticks,
   1de1a:	f104 0275 	add.w	r2, r4, #117	; 0x75
   1de1e:	f104 0178 	add.w	r1, r4, #120	; 0x78
   1de22:	f7ff feb3 	bl	1db8c <ble_ll_conn_itvl_to_ticks>
        if (upd->winoffset != 0) {
   1de26:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   1de2a:	b9d3      	cbnz	r3, 1de62 <ble_ll_conn_next_event+0x1fa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   1de2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1de2e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        connsm->csmflags.cfbit.conn_update_sched = 0;
   1de32:	7863      	ldrb	r3, [r4, #1]
   1de34:	f36f 0300 	bfc	r3, #0, #1
   1de38:	7063      	strb	r3, [r4, #1]
   1de3a:	e763      	b.n	1dd04 <ble_ll_conn_next_event+0x9c>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   1de3c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
        if (CONN_IS_CENTRAL(connsm) ||
   1de40:	f013 0f40 	tst.w	r3, #64	; 0x40
   1de44:	d1cb      	bne.n	1ddde <ble_ll_conn_next_event+0x176>
   1de46:	e7c4      	b.n	1ddd2 <ble_ll_conn_next_event+0x16a>
            (connsm->periph_latency != upd->latency) ||
   1de48:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   1de4c:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval) ||
   1de50:	429a      	cmp	r2, r3
   1de52:	d1c4      	bne.n	1ddde <ble_ll_conn_next_event+0x176>
            (connsm->supervision_tmo != upd->timeout)) {
   1de54:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1de58:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->periph_latency != upd->latency) ||
   1de5c:	429a      	cmp	r2, r3
   1de5e:	d1be      	bne.n	1ddde <ble_ll_conn_next_event+0x176>
   1de60:	e7c1      	b.n	1dde6 <ble_ll_conn_next_event+0x17e>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   1de62:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1de66:	fb05 f503 	mul.w	r5, r5, r3
    if (usecs <= 31249) {
   1de6a:	f647 2311 	movw	r3, #31249	; 0x7a11
   1de6e:	429d      	cmp	r5, r3
   1de70:	d81c      	bhi.n	1deac <ble_ll_conn_next_event+0x244>
        return (usecs * 137439) / 4194304;
   1de72:	4f36      	ldr	r7, [pc, #216]	; (1df4c <ble_ll_conn_next_event+0x2e4>)
   1de74:	fb07 f705 	mul.w	r7, r7, r5
   1de78:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   1de7a:	4638      	mov	r0, r7
   1de7c:	f014 f8ce 	bl	3201c <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   1de80:	1a2b      	subs	r3, r5, r0
   1de82:	b2db      	uxtb	r3, r3
    if (*rem_us == USECS_PER_TICK) {
   1de84:	2b1f      	cmp	r3, #31
   1de86:	d016      	beq.n	1deb6 <ble_ll_conn_next_event+0x24e>
    *ticks += t_ticks;
   1de88:	6f22      	ldr	r2, [r4, #112]	; 0x70
   1de8a:	4417      	add	r7, r2
   1de8c:	6727      	str	r7, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   1de8e:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1de92:	4413      	add	r3, r2
   1de94:	b2db      	uxtb	r3, r3
   1de96:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   1de9a:	2b1e      	cmp	r3, #30
   1de9c:	d9c6      	bls.n	1de2c <ble_ll_conn_next_event+0x1c4>
        *rem_us -= USECS_PER_TICK;
   1de9e:	3b1f      	subs	r3, #31
   1dea0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   1dea4:	463b      	mov	r3, r7
   1dea6:	3301      	adds	r3, #1
   1dea8:	6723      	str	r3, [r4, #112]	; 0x70
}
   1deaa:	e7bf      	b.n	1de2c <ble_ll_conn_next_event+0x1c4>
    return os_cputime_usecs_to_ticks(usecs);
   1deac:	4628      	mov	r0, r5
   1deae:	f014 f8ad 	bl	3200c <os_cputime_usecs_to_ticks>
   1deb2:	4607      	mov	r7, r0
   1deb4:	e7e1      	b.n	1de7a <ble_ll_conn_next_event+0x212>
        ticks++;
   1deb6:	3701      	adds	r7, #1
        *rem_us = 0;
   1deb8:	2300      	movs	r3, #0
   1deba:	e7e5      	b.n	1de88 <ble_ll_conn_next_event+0x220>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   1debc:	f104 0521 	add.w	r5, r4, #33	; 0x21
   1dec0:	4628      	mov	r0, r5
   1dec2:	f004 f8b0 	bl	22026 <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   1dec6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   1deca:	f8d4 3021 	ldr.w	r3, [r4, #33]	; 0x21
   1dece:	61e3      	str	r3, [r4, #28]
   1ded0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1ded4:	f884 3020 	strb.w	r3, [r4, #32]
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   1ded8:	7863      	ldrb	r3, [r4, #1]
   1deda:	f36f 1304 	bfc	r3, #4, #1
   1dede:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   1dee0:	2101      	movs	r1, #1
   1dee2:	4620      	mov	r0, r4
   1dee4:	f001 ff78 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
   1dee8:	e718      	b.n	1dd1c <ble_ll_conn_next_event+0xb4>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   1deea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1deec:	6f22      	ldr	r2, [r4, #112]	; 0x70
   1deee:	1a9b      	subs	r3, r3, r2
   1def0:	2b00      	cmp	r3, #0
   1def2:	f73f af1e 	bgt.w	1dd32 <ble_ll_conn_next_event+0xca>
            return -1;
   1def6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1defa:	e726      	b.n	1dd4a <ble_ll_conn_next_event+0xe2>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   1defc:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   1df00:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   1df02:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1df04:	f004 f8ae 	bl	22064 <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   1df08:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   1df0c:	f240 2371 	movw	r3, #625	; 0x271
   1df10:	fb03 f302 	mul.w	r3, r3, r2
   1df14:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   1df16:	4298      	cmp	r0, r3
   1df18:	d212      	bcs.n	1df40 <ble_ll_conn_next_event+0x2d8>
        cur_ww += BLE_LL_JITTER_USECS;
   1df1a:	3010      	adds	r0, #16
        connsm->periph_cur_window_widening = cur_ww;
   1df1c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        itvl += ble_ll_tmr_u2t(cur_ww + connsm->periph_cur_tx_win_usecs);
   1df20:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   1df24:	4418      	add	r0, r3
    if (usecs <= 31249) {
   1df26:	f647 2311 	movw	r3, #31249	; 0x7a11
   1df2a:	4298      	cmp	r0, r3
   1df2c:	d805      	bhi.n	1df3a <ble_ll_conn_next_event+0x2d2>
        return (usecs * 137439) / 4194304;
   1df2e:	4b07      	ldr	r3, [pc, #28]	; (1df4c <ble_ll_conn_next_event+0x2e4>)
   1df30:	fb03 f000 	mul.w	r0, r3, r0
   1df34:	0d80      	lsrs	r0, r0, #22
   1df36:	30a3      	adds	r0, #163	; 0xa3
   1df38:	e700      	b.n	1dd3c <ble_ll_conn_next_event+0xd4>
    return os_cputime_usecs_to_ticks(usecs);
   1df3a:	f014 f867 	bl	3200c <os_cputime_usecs_to_ticks>
   1df3e:	e7fa      	b.n	1df36 <ble_ll_conn_next_event+0x2ce>
            return -1;
   1df40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1df44:	e701      	b.n	1dd4a <ble_ll_conn_next_event+0xe2>
   1df46:	bf00      	nop
   1df48:	00401110 	.word	0x00401110
   1df4c:	000218df 	.word	0x000218df
   1df50:	10002665 	.word	0x10002665

0001df54 <ble_ll_conn_created>:
 *
 * @ return 0: connection NOT created. 1: connection created
 */
static int
ble_ll_conn_created(struct ble_ll_conn_sm *connsm, struct ble_mbuf_hdr *rxhdr)
{
   1df54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df56:	4604      	mov	r4, r0
   1df58:	460d      	mov	r5, r1
#endif

    /* XXX: TODO this assumes we received in 1M phy */

    /* Set state to created */
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   1df5a:	2301      	movs	r3, #1
   1df5c:	7183      	strb	r3, [r0, #6]

    /* Clear packet received flag */
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1df5e:	7803      	ldrb	r3, [r0, #0]
   1df60:	f36f 0300 	bfc	r3, #0, #1
   1df64:	7003      	strb	r3, [r0, #0]
    return os_cputime_get32();
   1df66:	f014 f84c 	bl	32002 <os_cputime_get32>

    /* Consider time created the last scheduled time */
    connsm->last_scheduled = ble_ll_tmr_get();
   1df6a:	6620      	str	r0, [r4, #96]	; 0x60

    /*
     * Set the last rxd pdu time since this is where we want to start the
     * supervision timer from.
     */
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   1df6c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
     * time of the connect request. The actual connection starts 1.25 msecs plus
     * the transmit window offset from the end of the connection request.
     */
    rc = 1;
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1df70:	79e3      	ldrb	r3, [r4, #7]
   1df72:	2b02      	cmp	r3, #2
   1df74:	d009      	beq.n	1df8a <ble_ll_conn_created+0x36>
         */
        if (!ble_ll_conn_chk_phy_upd_start(connsm)) {
            CONN_F_CTRLR_PHY_UPDATE(connsm) = 1;
        }
#endif
        switch (connsm->conn_role) {
   1df76:	79e3      	ldrb	r3, [r4, #7]
   1df78:	2b02      	cmp	r3, #2
   1df7a:	f040 8087 	bne.w	1e08c <ble_ll_conn_created+0x138>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
            break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        case BLE_LL_CONN_ROLE_PERIPHERAL:
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   1df7e:	4629      	mov	r1, r5
   1df80:	4620      	mov	r0, r4
   1df82:	f7ff fc9f 	bl	1d8c4 <ble_ll_adv_send_conn_comp_ev>
            break;
   1df86:	2001      	movs	r0, #1
            break;
        }
    }

    return rc;
}
   1df88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   1df8a:	68ab      	ldr	r3, [r5, #8]
   1df8c:	67e3      	str	r3, [r4, #124]	; 0x7c
        usecs = rxhdr->rem_usecs + 1250 +
   1df8e:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1df90:	f8b4 006e 	ldrh.w	r0, [r4, #110]	; 0x6e
        usecs = rxhdr->rem_usecs + 1250 +
   1df94:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1df98:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   1df9c:	79a9      	ldrb	r1, [r5, #6]
   1df9e:	2022      	movs	r0, #34	; 0x22
   1dfa0:	f7fe fd0a 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1dfa4:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   1dfa6:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   1dfaa:	78ab      	ldrb	r3, [r5, #2]
   1dfac:	2b24      	cmp	r3, #36	; 0x24
   1dfae:	d816      	bhi.n	1dfde <ble_ll_conn_created+0x8a>
            switch (rxhdr->rxinfo.phy) {
   1dfb0:	f995 3005 	ldrsb.w	r3, [r5, #5]
   1dfb4:	2b02      	cmp	r3, #2
   1dfb6:	dc0b      	bgt.n	1dfd0 <ble_ll_conn_created+0x7c>
   1dfb8:	2b00      	cmp	r3, #0
   1dfba:	dc0e      	bgt.n	1dfda <ble_ll_conn_created+0x86>
                BLE_LL_ASSERT(0);
   1dfbc:	f7f6 fb4a 	bl	14654 <hal_debugger_connected>
   1dfc0:	b100      	cbz	r0, 1dfc4 <ble_ll_conn_created+0x70>
   1dfc2:	be01      	bkpt	0x0001
   1dfc4:	2300      	movs	r3, #0
   1dfc6:	461a      	mov	r2, r3
   1dfc8:	4619      	mov	r1, r3
   1dfca:	4618      	mov	r0, r3
   1dfcc:	f7f6 fee4 	bl	14d98 <__assert_func>
            switch (rxhdr->rxinfo.phy) {
   1dfd0:	2b03      	cmp	r3, #3
   1dfd2:	d1f3      	bne.n	1dfbc <ble_ll_conn_created+0x68>
                usecs += 2500;
   1dfd4:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   1dfd8:	e001      	b.n	1dfde <ble_ll_conn_created+0x8a>
                usecs += 1250;
   1dfda:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        connsm->anchor_point = rxhdr->beg_cputime;
   1dfde:	68ab      	ldr	r3, [r5, #8]
   1dfe0:	6723      	str	r3, [r4, #112]	; 0x70
        connsm->anchor_point_usecs = 0;
   1dfe2:	2300      	movs	r3, #0
   1dfe4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (usecs <= 31249) {
   1dfe8:	f647 2311 	movw	r3, #31249	; 0x7a11
   1dfec:	429e      	cmp	r6, r3
   1dfee:	d842      	bhi.n	1e076 <ble_ll_conn_created+0x122>
        return (usecs * 137439) / 4194304;
   1dff0:	4f2b      	ldr	r7, [pc, #172]	; (1e0a0 <ble_ll_conn_created+0x14c>)
   1dff2:	fb07 f706 	mul.w	r7, r7, r6
   1dff6:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   1dff8:	4638      	mov	r0, r7
   1dffa:	f014 f80f 	bl	3201c <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   1dffe:	1a36      	subs	r6, r6, r0
   1e000:	b2f6      	uxtb	r6, r6
    if (*rem_us == USECS_PER_TICK) {
   1e002:	2e1f      	cmp	r6, #31
   1e004:	d03c      	beq.n	1e080 <ble_ll_conn_created+0x12c>
    *ticks += t_ticks;
   1e006:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1e008:	4438      	add	r0, r7
   1e00a:	6720      	str	r0, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   1e00c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1e010:	441e      	add	r6, r3
   1e012:	b2f3      	uxtb	r3, r6
   1e014:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   1e018:	2b1e      	cmp	r3, #30
   1e01a:	d905      	bls.n	1e028 <ble_ll_conn_created+0xd4>
        *rem_us -= USECS_PER_TICK;
   1e01c:	3b1f      	subs	r3, #31
   1e01e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   1e022:	4603      	mov	r3, r0
   1e024:	3301      	adds	r3, #1
   1e026:	6723      	str	r3, [r4, #112]	; 0x70
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   1e028:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   1e02c:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1e030:	fb00 f003 	mul.w	r0, r0, r3
        connsm->periph_cur_tx_win_usecs =
   1e034:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        connsm->ce_end_time = connsm->anchor_point +
   1e038:	6f26      	ldr	r6, [r4, #112]	; 0x70
                              ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
   1e03a:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
   1e03e:	3008      	adds	r0, #8
    if (usecs <= 31249) {
   1e040:	f647 2311 	movw	r3, #31249	; 0x7a11
   1e044:	4298      	cmp	r0, r3
   1e046:	d81e      	bhi.n	1e086 <ble_ll_conn_created+0x132>
        return (usecs * 137439) / 4194304;
   1e048:	4b15      	ldr	r3, [pc, #84]	; (1e0a0 <ble_ll_conn_created+0x14c>)
   1e04a:	fb03 f000 	mul.w	r0, r3, r0
   1e04e:	0d80      	lsrs	r0, r0, #22
        connsm->ce_end_time = connsm->anchor_point +
   1e050:	4406      	add	r6, r0
                                             connsm->periph_cur_tx_win_usecs) + 1;
   1e052:	3601      	adds	r6, #1
        connsm->ce_end_time = connsm->anchor_point +
   1e054:	65a6      	str	r6, [r4, #88]	; 0x58
        while (ble_ll_sched_conn_periph_new(connsm)) {
   1e056:	4620      	mov	r0, r4
   1e058:	f003 fe52 	bl	21d00 <ble_ll_sched_conn_periph_new>
   1e05c:	2800      	cmp	r0, #0
   1e05e:	d08a      	beq.n	1df76 <ble_ll_conn_created+0x22>
            if (ble_ll_conn_next_event(connsm)) {
   1e060:	4620      	mov	r0, r4
   1e062:	f7ff fe01 	bl	1dc68 <ble_ll_conn_next_event>
   1e066:	2800      	cmp	r0, #0
   1e068:	d0f5      	beq.n	1e056 <ble_ll_conn_created+0x102>
                STATS_INC(ble_ll_conn_stats, cant_set_sched);
   1e06a:	4a0e      	ldr	r2, [pc, #56]	; (1e0a4 <ble_ll_conn_created+0x150>)
   1e06c:	68d3      	ldr	r3, [r2, #12]
   1e06e:	3301      	adds	r3, #1
   1e070:	60d3      	str	r3, [r2, #12]
                rc = 0;
   1e072:	2000      	movs	r0, #0
   1e074:	e788      	b.n	1df88 <ble_ll_conn_created+0x34>
    return os_cputime_usecs_to_ticks(usecs);
   1e076:	4630      	mov	r0, r6
   1e078:	f013 ffc8 	bl	3200c <os_cputime_usecs_to_ticks>
   1e07c:	4607      	mov	r7, r0
   1e07e:	e7bb      	b.n	1dff8 <ble_ll_conn_created+0xa4>
        ticks++;
   1e080:	3701      	adds	r7, #1
        *rem_us = 0;
   1e082:	2600      	movs	r6, #0
   1e084:	e7bf      	b.n	1e006 <ble_ll_conn_created+0xb2>
    return os_cputime_usecs_to_ticks(usecs);
   1e086:	f013 ffc1 	bl	3200c <os_cputime_usecs_to_ticks>
   1e08a:	e7e1      	b.n	1e050 <ble_ll_conn_created+0xfc>
            BLE_LL_ASSERT(0);
   1e08c:	f7f6 fae2 	bl	14654 <hal_debugger_connected>
   1e090:	b100      	cbz	r0, 1e094 <ble_ll_conn_created+0x140>
   1e092:	be01      	bkpt	0x0001
   1e094:	2300      	movs	r3, #0
   1e096:	461a      	mov	r2, r3
   1e098:	4619      	mov	r1, r3
   1e09a:	4618      	mov	r0, r3
   1e09c:	f7f6 fe7c 	bl	14d98 <__assert_func>
   1e0a0:	000218df 	.word	0x000218df
   1e0a4:	100022ac 	.word	0x100022ac

0001e0a8 <ble_ll_conn_set_csa>:
{
   1e0a8:	b510      	push	{r4, lr}
   1e0aa:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   1e0ac:	2300      	movs	r3, #0
   1e0ae:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   1e0b2:	2101      	movs	r1, #1
   1e0b4:	f7ff fdca 	bl	1dc4c <ble_ll_conn_calc_dci>
   1e0b8:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
   1e0bc:	bd10      	pop	{r4, pc}

0001e0be <ble_ll_conn_auth_pyld_timer_start>:
{
   1e0be:	b510      	push	{r4, lr}
   1e0c0:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   1e0c2:	f8b0 004e 	ldrh.w	r0, [r0, #78]	; 0x4e
   1e0c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1e0ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e0ce:	2300      	movs	r3, #0
   1e0d0:	0200      	lsls	r0, r0, #8
   1e0d2:	2100      	movs	r1, #0
   1e0d4:	f7f6 f8c2 	bl	1425c <__aeabi_uldivmod>
   1e0d8:	4601      	mov	r1, r0
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1e0da:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   1e0de:	f7f7 f835 	bl	1514c <os_callout_reset>
}
   1e0e2:	bd10      	pop	{r4, pc}

0001e0e4 <ble_ll_conn_auth_pyld_timer_cb>:
{
   1e0e4:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   1e0e6:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   1e0e8:	4620      	mov	r0, r4
   1e0ea:	f000 fe79 	bl	1ede0 <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   1e0ee:	2107      	movs	r1, #7
   1e0f0:	4620      	mov	r0, r4
   1e0f2:	f001 fdf9 	bl	1fce8 <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   1e0f6:	4620      	mov	r0, r4
   1e0f8:	f7ff ffe1 	bl	1e0be <ble_ll_conn_auth_pyld_timer_start>
}
   1e0fc:	bd10      	pop	{r4, pc}
	...

0001e100 <ble_ll_conn_sm_new>:
{
   1e100:	b538      	push	{r3, r4, r5, lr}
   1e102:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   1e104:	2100      	movs	r1, #0
   1e106:	6001      	str	r1, [r0, #0]
    connsm->event_cntr = 0;
   1e108:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   1e10c:	7181      	strb	r1, [r0, #6]
    connsm->disconnect_reason = 0;
   1e10e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    connsm->rxd_disconnect_reason = 0;
   1e112:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   1e116:	2322      	movs	r3, #34	; 0x22
   1e118:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   1e11c:	63c1      	str	r1, [r0, #60]	; 0x3c
   1e11e:	f8c0 103f 	str.w	r1, [r0, #63]	; 0x3f
    connsm->vers_nr = 0;
   1e122:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    connsm->comp_id = 0;
   1e126:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
    connsm->sub_vers_nr = 0;
   1e12a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    connsm->reject_reason = BLE_ERR_SUCCESS;
   1e12e:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   1e132:	237f      	movs	r3, #127	; 0x7f
   1e134:	7203      	strb	r3, [r0, #8]
    connsm->inita_identity_used = 0;
   1e136:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   1e13a:	23ff      	movs	r3, #255	; 0xff
   1e13c:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    connsm->pending_ctrl_procs = 0;
   1e140:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    connsm->conn_param_req.handle = 0;
   1e144:	f8a0 1168 	strh.w	r1, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   1e148:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
   1e14c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ev->ev.ev_queued = 0;
   1e150:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e154:	4b23      	ldr	r3, [pc, #140]	; (1e1e4 <ble_ll_conn_sm_new+0xe4>)
   1e156:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    ev->ev.ev_arg = arg;
   1e15a:	f8c0 00a0 	str.w	r0, [r0, #160]	; 0xa0
    STAILQ_INIT(&connsm->conn_txq);
   1e15e:	4603      	mov	r3, r0
   1e160:	f843 1fac 	str.w	r1, [r3, #172]!
   1e164:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    connsm->cur_tx_pdu = NULL;
   1e168:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
    connsm->tx_seqnum = 0;
   1e16c:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
    connsm->next_exp_seqnum = 0;
   1e170:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    connsm->cons_rxd_bad_crc = 0;
   1e174:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    connsm->last_rxd_sn = 1;
   1e178:	2501      	movs	r5, #1
   1e17a:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
    connsm->completed_pkts = 0;
   1e17e:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   1e182:	4b19      	ldr	r3, [pc, #100]	; (1e1e8 <ble_ll_conn_sm_new+0xe8>)
   1e184:	7a1a      	ldrb	r2, [r3, #8]
   1e186:	7242      	strb	r2, [r0, #9]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   1e188:	79da      	ldrb	r2, [r3, #7]
   1e18a:	7282      	strb	r2, [r0, #10]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   1e18c:	899a      	ldrh	r2, [r3, #12]
   1e18e:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   1e190:	8a9b      	ldrh	r3, [r3, #20]
   1e192:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1e194:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1e198:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1e19a:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1e19c:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1e19e:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1e1a0:	231b      	movs	r3, #27
   1e1a2:	72c3      	strb	r3, [r0, #11]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1e1a4:	7303      	strb	r3, [r0, #12]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1e1a6:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1e1a8:	7383      	strb	r3, [r0, #14]
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   1e1aa:	2250      	movs	r2, #80	; 0x50
   1e1ac:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1e1b0:	f7f8 fca1 	bl	16af6 <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   1e1b4:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   1e1b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1e1bc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    CONN_F_LE_PING_SUPP(connsm) = 1;
   1e1c0:	78a3      	ldrb	r3, [r4, #2]
   1e1c2:	f043 0308 	orr.w	r3, r3, #8
   1e1c6:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1e1c8:	4623      	mov	r3, r4
   1e1ca:	4a08      	ldr	r2, [pc, #32]	; (1e1ec <ble_ll_conn_sm_new+0xec>)
   1e1cc:	4908      	ldr	r1, [pc, #32]	; (1e1f0 <ble_ll_conn_sm_new+0xf0>)
   1e1ce:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   1e1d2:	f7f6 ff8f 	bl	150f4 <os_callout_init>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   1e1d6:	4b07      	ldr	r3, [pc, #28]	; (1e1f4 <ble_ll_conn_sm_new+0xf4>)
   1e1d8:	681a      	ldr	r2, [r3, #0]
   1e1da:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
   1e1de:	601c      	str	r4, [r3, #0]
}
   1e1e0:	bd38      	pop	{r3, r4, r5, pc}
   1e1e2:	bf00      	nop
   1e1e4:	0001e36d 	.word	0x0001e36d
   1e1e8:	1000233c 	.word	0x1000233c
   1e1ec:	0001e0e5 	.word	0x0001e0e5
   1e1f0:	10001fc8 	.word	0x10001fc8
   1e1f4:	1000232c 	.word	0x1000232c

0001e1f8 <ble_ll_conn_update_eff_data_len>:
{
   1e1f8:	b508      	push	{r3, lr}
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   1e1fa:	8a43      	ldrh	r3, [r0, #18]
   1e1fc:	8a82      	ldrh	r2, [r0, #20]
   1e1fe:	4293      	cmp	r3, r2
   1e200:	bf28      	it	cs
   1e202:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   1e204:	8b42      	ldrh	r2, [r0, #26]
   1e206:	429a      	cmp	r2, r3
   1e208:	d021      	beq.n	1e24e <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   1e20a:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   1e20c:	2201      	movs	r2, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   1e20e:	8a03      	ldrh	r3, [r0, #16]
   1e210:	8ac1      	ldrh	r1, [r0, #22]
   1e212:	428b      	cmp	r3, r1
   1e214:	bf28      	it	cs
   1e216:	460b      	movcs	r3, r1
    if (eff_time != connsm->eff_max_tx_time) {
   1e218:	8b01      	ldrh	r1, [r0, #24]
   1e21a:	4299      	cmp	r1, r3
   1e21c:	d001      	beq.n	1e222 <ble_ll_conn_update_eff_data_len+0x2a>
        connsm->eff_max_tx_time = eff_time;
   1e21e:	8303      	strh	r3, [r0, #24]
        send_event = 1;
   1e220:	2201      	movs	r2, #1
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   1e222:	7a83      	ldrb	r3, [r0, #10]
   1e224:	7ac1      	ldrb	r1, [r0, #11]
   1e226:	428b      	cmp	r3, r1
   1e228:	bf28      	it	cs
   1e22a:	460b      	movcs	r3, r1
    if (eff_bytes != connsm->eff_max_rx_octets) {
   1e22c:	7b81      	ldrb	r1, [r0, #14]
   1e22e:	428b      	cmp	r3, r1
   1e230:	d001      	beq.n	1e236 <ble_ll_conn_update_eff_data_len+0x3e>
        connsm->eff_max_rx_octets = eff_bytes;
   1e232:	7383      	strb	r3, [r0, #14]
        send_event = 1;
   1e234:	2201      	movs	r2, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   1e236:	7a43      	ldrb	r3, [r0, #9]
   1e238:	7b01      	ldrb	r1, [r0, #12]
   1e23a:	428b      	cmp	r3, r1
   1e23c:	bf28      	it	cs
   1e23e:	460b      	movcs	r3, r1
    if (eff_bytes != connsm->eff_max_tx_octets) {
   1e240:	7b41      	ldrb	r1, [r0, #13]
   1e242:	428b      	cmp	r3, r1
   1e244:	d005      	beq.n	1e252 <ble_ll_conn_update_eff_data_len+0x5a>
        connsm->eff_max_tx_octets = eff_bytes;
   1e246:	7343      	strb	r3, [r0, #13]
        ble_ll_hci_ev_datalen_chg(connsm);
   1e248:	f002 fde0 	bl	20e0c <ble_ll_hci_ev_datalen_chg>
}
   1e24c:	bd08      	pop	{r3, pc}
    send_event = 0;
   1e24e:	2200      	movs	r2, #0
   1e250:	e7dd      	b.n	1e20e <ble_ll_conn_update_eff_data_len+0x16>
    if (send_event) {
   1e252:	2a00      	cmp	r2, #0
   1e254:	d0fa      	beq.n	1e24c <ble_ll_conn_update_eff_data_len+0x54>
   1e256:	e7f7      	b.n	1e248 <ble_ll_conn_update_eff_data_len+0x50>

0001e258 <ble_ll_conn_end>:
{
   1e258:	b570      	push	{r4, r5, r6, lr}
   1e25a:	4604      	mov	r4, r0
   1e25c:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1e25e:	30d8      	adds	r0, #216	; 0xd8
   1e260:	f003 fe4a 	bl	21ef8 <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   1e264:	f7f8 fa4e 	bl	16704 <os_arch_save_sr>
   1e268:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1e26a:	4b3b      	ldr	r3, [pc, #236]	; (1e358 <ble_ll_conn_end+0x100>)
   1e26c:	681b      	ldr	r3, [r3, #0]
   1e26e:	42a3      	cmp	r3, r4
   1e270:	d020      	beq.n	1e2b4 <ble_ll_conn_end+0x5c>
    OS_EXIT_CRITICAL(sr);
   1e272:	4630      	mov	r0, r6
   1e274:	f7f8 fa4c 	bl	16710 <os_arch_restore_sr>
}

static inline void
ble_npl_callout_stop(struct ble_npl_callout *co)
{
    os_callout_stop(&co->co);
   1e278:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1e27c:	f7f6 ff48 	bl	15110 <os_callout_stop>
   1e280:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   1e284:	f7f6 ff44 	bl	15110 <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1e288:	4b34      	ldr	r3, [pc, #208]	; (1e35c <ble_ll_conn_end+0x104>)
   1e28a:	681b      	ldr	r3, [r3, #0]
   1e28c:	42a3      	cmp	r3, r4
   1e28e:	d018      	beq.n	1e2c2 <ble_ll_conn_end+0x6a>
   1e290:	461a      	mov	r2, r3
   1e292:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1e296:	42a3      	cmp	r3, r4
   1e298:	d1fa      	bne.n	1e290 <ble_ll_conn_end+0x38>
   1e29a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1e29e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    if (connsm->cur_tx_pdu) {
   1e2a2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   1e2a6:	b1c0      	cbz	r0, 1e2da <ble_ll_conn_end+0x82>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   1e2a8:	f7f7 f9de 	bl	15668 <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   1e2ac:	2300      	movs	r3, #0
   1e2ae:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   1e2b2:	e012      	b.n	1e2da <ble_ll_conn_end+0x82>
        ble_ll_conn_halt();
   1e2b4:	f7ff fb98 	bl	1d9e8 <ble_ll_conn_halt>
        STATS_INC(ble_ll_conn_stats, conn_event_while_tmo);
   1e2b8:	4a29      	ldr	r2, [pc, #164]	; (1e360 <ble_ll_conn_end+0x108>)
   1e2ba:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1e2bc:	3301      	adds	r3, #1
   1e2be:	67d3      	str	r3, [r2, #124]	; 0x7c
   1e2c0:	e7d7      	b.n	1e272 <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1e2c2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   1e2c6:	4b25      	ldr	r3, [pc, #148]	; (1e35c <ble_ll_conn_end+0x104>)
   1e2c8:	601a      	str	r2, [r3, #0]
   1e2ca:	e7ea      	b.n	1e2a2 <ble_ll_conn_end+0x4a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1e2cc:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   1e2d0:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
        os_mbuf_free_chain(m);
   1e2d4:	3810      	subs	r0, #16
   1e2d6:	f7f7 f9c7 	bl	15668 <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1e2da:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        if (!pkthdr) {
   1e2de:	b128      	cbz	r0, 1e2ec <ble_ll_conn_end+0x94>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1e2e0:	6843      	ldr	r3, [r0, #4]
   1e2e2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   1e2e6:	2b00      	cmp	r3, #0
   1e2e8:	d1f4      	bne.n	1e2d4 <ble_ll_conn_end+0x7c>
   1e2ea:	e7ef      	b.n	1e2cc <ble_ll_conn_end+0x74>
    os_eventq_remove(&evq->evq, &ev->ev);
   1e2ec:	f104 0198 	add.w	r1, r4, #152	; 0x98
   1e2f0:	481c      	ldr	r0, [pc, #112]	; (1e364 <ble_ll_conn_end+0x10c>)
   1e2f2:	f7f7 f91b 	bl	1552c <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   1e2f6:	2300      	movs	r3, #0
   1e2f8:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1e2fa:	78e3      	ldrb	r3, [r4, #3]
   1e2fc:	f003 0318 	and.w	r3, r3, #24
   1e300:	2b18      	cmp	r3, #24
   1e302:	d017      	beq.n	1e334 <ble_ll_conn_end+0xdc>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1e304:	78e3      	ldrb	r3, [r4, #3]
   1e306:	f013 0f10 	tst.w	r3, #16
   1e30a:	d11c      	bne.n	1e346 <ble_ll_conn_end+0xee>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   1e30c:	b14d      	cbz	r5, 1e322 <ble_ll_conn_end+0xca>
   1e30e:	2d02      	cmp	r5, #2
   1e310:	d103      	bne.n	1e31a <ble_ll_conn_end+0xc2>
   1e312:	7823      	ldrb	r3, [r4, #0]
   1e314:	f013 0f04 	tst.w	r3, #4
   1e318:	d003      	beq.n	1e322 <ble_ll_conn_end+0xca>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   1e31a:	4629      	mov	r1, r5
   1e31c:	4620      	mov	r0, r4
   1e31e:	f000 fd74 	bl	1ee0a <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1e322:	2300      	movs	r3, #0
   1e324:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1e328:	4b0f      	ldr	r3, [pc, #60]	; (1e368 <ble_ll_conn_end+0x110>)
   1e32a:	685a      	ldr	r2, [r3, #4]
   1e32c:	6014      	str	r4, [r2, #0]
   1e32e:	34b4      	adds	r4, #180	; 0xb4
   1e330:	605c      	str	r4, [r3, #4]
}
   1e332:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1e334:	2100      	movs	r1, #0
   1e336:	4620      	mov	r0, r4
   1e338:	f002 fe34 	bl	20fa4 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1e33c:	78e3      	ldrb	r3, [r4, #3]
   1e33e:	f36f 1304 	bfc	r3, #4, #1
   1e342:	70e3      	strb	r3, [r4, #3]
   1e344:	e7de      	b.n	1e304 <ble_ll_conn_end+0xac>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   1e346:	4629      	mov	r1, r5
   1e348:	4620      	mov	r0, r4
   1e34a:	f002 fe2b 	bl	20fa4 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1e34e:	78e3      	ldrb	r3, [r4, #3]
   1e350:	f36f 1304 	bfc	r3, #4, #1
   1e354:	70e3      	strb	r3, [r4, #3]
   1e356:	e7d9      	b.n	1e30c <ble_ll_conn_end+0xb4>
   1e358:	10002330 	.word	0x10002330
   1e35c:	1000232c 	.word	0x1000232c
   1e360:	100022ac 	.word	0x100022ac
   1e364:	10001fc8 	.word	0x10001fc8
   1e368:	10002334 	.word	0x10002334

0001e36c <ble_ll_conn_event_end>:
 * @param void *arg Pointer to connection state machine
 *
 */
static void
ble_ll_conn_event_end(struct ble_npl_event *ev)
{
   1e36c:	b538      	push	{r3, r4, r5, lr}
    return ev->ev.ev_arg;
   1e36e:	6884      	ldr	r4, [r0, #8]

    ble_ll_rfmgmt_release();

    /* Better be a connection state machine! */
    connsm = (struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(connsm);
   1e370:	2c00      	cmp	r4, #0
   1e372:	d036      	beq.n	1e3e2 <ble_ll_conn_event_end+0x76>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1e374:	79a3      	ldrb	r3, [r4, #6]
   1e376:	2b00      	cmp	r3, #0
   1e378:	d03d      	beq.n	1e3f6 <ble_ll_conn_event_end+0x8a>
                       connsm->event_cntr);

    ble_ll_scan_chk_resume();

    /* If we have transmitted the terminate IND successfully, we are done */
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1e37a:	7823      	ldrb	r3, [r4, #0]
   1e37c:	f013 0202 	ands.w	r2, r3, #2
   1e380:	d147      	bne.n	1e412 <ble_ll_conn_event_end+0xa6>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   1e382:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1e386:	2b0c      	cmp	r3, #12
   1e388:	d043      	beq.n	1e412 <ble_ll_conn_event_end+0xa6>
    os_eventq_remove(&evq->evq, &ev->ev);
   1e38a:	f104 0198 	add.w	r1, r4, #152	; 0x98
   1e38e:	4845      	ldr	r0, [pc, #276]	; (1e4a4 <ble_ll_conn_event_end+0x138>)
   1e390:	f7f7 f8cc 	bl	1552c <os_eventq_remove>

    /*
     * If we have received a packet, we can set the current transmit window
     * usecs to 0 since we dont need to listen in the transmit window.
     */
    if (connsm->csmflags.cfbit.pkt_rxd) {
   1e394:	7823      	ldrb	r3, [r4, #0]
   1e396:	f013 0f01 	tst.w	r3, #1
   1e39a:	d002      	beq.n	1e3a2 <ble_ll_conn_event_end+0x36>
        connsm->periph_cur_tx_win_usecs = 0;
   1e39c:	2300      	movs	r3, #0
   1e39e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
     * XXX: what should be here? Was there code here that got deleted?
     */
#endif

    /* Move to next connection event */
    if (ble_ll_conn_next_event(connsm)) {
   1e3a2:	4620      	mov	r0, r4
   1e3a4:	f7ff fc60 	bl	1dc68 <ble_ll_conn_next_event>
   1e3a8:	2800      	cmp	r0, #0
   1e3aa:	d13d      	bne.n	1e428 <ble_ll_conn_event_end+0xbc>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
        return;
    }

    /* Reset "per connection event" variables */
    connsm->cons_rxd_bad_crc = 0;
   1e3ac:	2200      	movs	r2, #0
   1e3ae:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1e3b2:	7823      	ldrb	r3, [r4, #0]
   1e3b4:	f362 0300 	bfi	r3, r2, #0, #1
   1e3b8:	7023      	strb	r3, [r4, #0]

    /* See if we need to start any control procedures */
    ble_ll_ctrl_chk_proc_start(connsm);
   1e3ba:	4620      	mov	r0, r4
   1e3bc:	f001 fcd4 	bl	1fd68 <ble_ll_ctrl_chk_proc_start>

    /* Set initial schedule callback */
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1e3c0:	4b39      	ldr	r3, [pc, #228]	; (1e4a8 <ble_ll_conn_event_end+0x13c>)
   1e3c2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

    /* XXX: I think all this fine for when we do connection updates, but
       we may want to force the first event to be scheduled. Not sure */
    /* Schedule the next connection event */
    while (ble_ll_sched_conn_reschedule(connsm)) {
   1e3c6:	4620      	mov	r0, r4
   1e3c8:	f003 fc30 	bl	21c2c <ble_ll_sched_conn_reschedule>
   1e3cc:	b388      	cbz	r0, 1e432 <ble_ll_conn_event_end+0xc6>
        if (ble_ll_conn_next_event(connsm)) {
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	f7ff fc4a 	bl	1dc68 <ble_ll_conn_next_event>
   1e3d4:	2800      	cmp	r0, #0
   1e3d6:	d0f6      	beq.n	1e3c6 <ble_ll_conn_event_end+0x5a>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   1e3d8:	2116      	movs	r1, #22
   1e3da:	4620      	mov	r0, r4
   1e3dc:	f7ff ff3c 	bl	1e258 <ble_ll_conn_end>
            return;
   1e3e0:	e021      	b.n	1e426 <ble_ll_conn_event_end+0xba>
    BLE_LL_ASSERT(connsm);
   1e3e2:	f7f6 f937 	bl	14654 <hal_debugger_connected>
   1e3e6:	b100      	cbz	r0, 1e3ea <ble_ll_conn_event_end+0x7e>
   1e3e8:	be01      	bkpt	0x0001
   1e3ea:	2300      	movs	r3, #0
   1e3ec:	461a      	mov	r2, r3
   1e3ee:	4619      	mov	r1, r3
   1e3f0:	4618      	mov	r0, r3
   1e3f2:	f7f6 fcd1 	bl	14d98 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_end_in_idle);
   1e3f6:	4a2d      	ldr	r2, [pc, #180]	; (1e4ac <ble_ll_conn_event_end+0x140>)
   1e3f8:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1e3fa:	3301      	adds	r3, #1
   1e3fc:	6793      	str	r3, [r2, #120]	; 0x78
        BLE_LL_ASSERT(0);
   1e3fe:	f7f6 f929 	bl	14654 <hal_debugger_connected>
   1e402:	b100      	cbz	r0, 1e406 <ble_ll_conn_event_end+0x9a>
   1e404:	be01      	bkpt	0x0001
   1e406:	2300      	movs	r3, #0
   1e408:	461a      	mov	r2, r3
   1e40a:	4619      	mov	r1, r3
   1e40c:	4618      	mov	r0, r3
   1e40e:	f7f6 fcc3 	bl	14d98 <__assert_func>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   1e412:	b922      	cbnz	r2, 1e41e <ble_ll_conn_event_end+0xb2>
            ble_err = connsm->rxd_disconnect_reason;
   1e414:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
            if (ble_err == 0) {
   1e418:	b911      	cbnz	r1, 1e420 <ble_ll_conn_event_end+0xb4>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   1e41a:	2113      	movs	r1, #19
   1e41c:	e000      	b.n	1e420 <ble_ll_conn_event_end+0xb4>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   1e41e:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   1e420:	4620      	mov	r0, r4
   1e422:	f7ff ff19 	bl	1e258 <ble_ll_conn_end>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
                                        connsm->csmflags.cfbit.rxd_features) {
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
    }
}
   1e426:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   1e428:	2116      	movs	r1, #22
   1e42a:	4620      	mov	r0, r4
   1e42c:	f7ff ff14 	bl	1e258 <ble_ll_conn_end>
        return;
   1e430:	e7f9      	b.n	1e426 <ble_ll_conn_event_end+0xba>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   1e432:	79a3      	ldrb	r3, [r4, #6]
   1e434:	2b01      	cmp	r3, #1
   1e436:	d025      	beq.n	1e484 <ble_ll_conn_event_end+0x118>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   1e438:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   1e43c:	f242 7010 	movw	r0, #10000	; 0x2710
   1e440:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   1e444:	2508      	movs	r5, #8
    if (usecs <= 31249) {
   1e446:	f647 2311 	movw	r3, #31249	; 0x7a11
   1e44a:	4298      	cmp	r0, r3
   1e44c:	d822      	bhi.n	1e494 <ble_ll_conn_event_end+0x128>
        return (usecs * 137439) / 4194304;
   1e44e:	4b18      	ldr	r3, [pc, #96]	; (1e4b0 <ble_ll_conn_event_end+0x144>)
   1e450:	fb03 f000 	mul.w	r0, r3, r0
   1e454:	0d80      	lsrs	r0, r0, #22
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   1e456:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1e458:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1e45c:	1a9b      	subs	r3, r3, r2
   1e45e:	4283      	cmp	r3, r0
   1e460:	d21b      	bcs.n	1e49a <ble_ll_conn_event_end+0x12e>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   1e462:	4620      	mov	r0, r4
   1e464:	f000 fc48 	bl	1ecf8 <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1e468:	78e3      	ldrb	r3, [r4, #3]
   1e46a:	f003 0318 	and.w	r3, r3, #24
   1e46e:	2b18      	cmp	r3, #24
   1e470:	d1d9      	bne.n	1e426 <ble_ll_conn_event_end+0xba>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1e472:	2100      	movs	r1, #0
   1e474:	4620      	mov	r0, r4
   1e476:	f002 fd95 	bl	20fa4 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1e47a:	78e3      	ldrb	r3, [r4, #3]
   1e47c:	f36f 1304 	bfc	r3, #4, #1
   1e480:	70e3      	strb	r3, [r4, #3]
   1e482:	e7d0      	b.n	1e426 <ble_ll_conn_event_end+0xba>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   1e484:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   1e488:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e48c:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   1e490:	253e      	movs	r5, #62	; 0x3e
   1e492:	e7d8      	b.n	1e446 <ble_ll_conn_event_end+0xda>
    return os_cputime_usecs_to_ticks(usecs);
   1e494:	f013 fdba 	bl	3200c <os_cputime_usecs_to_ticks>
   1e498:	e7dd      	b.n	1e456 <ble_ll_conn_event_end+0xea>
        ble_ll_conn_end(connsm, ble_err);
   1e49a:	4629      	mov	r1, r5
   1e49c:	4620      	mov	r0, r4
   1e49e:	f7ff fedb 	bl	1e258 <ble_ll_conn_end>
        return;
   1e4a2:	e7c0      	b.n	1e426 <ble_ll_conn_event_end+0xba>
   1e4a4:	10001fc8 	.word	0x10001fc8
   1e4a8:	0001da15 	.word	0x0001da15
   1e4ac:	100022ac 	.word	0x100022ac
   1e4b0:	000218df 	.word	0x000218df

0001e4b4 <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   1e4b4:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e4b6:	2000      	movs	r0, #0
   1e4b8:	f7fe fa20 	bl	1c8fc <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   1e4bc:	4b07      	ldr	r3, [pc, #28]	; (1e4dc <ble_ll_conn_event_halt+0x28>)
   1e4be:	681b      	ldr	r3, [r3, #0]
   1e4c0:	b153      	cbz	r3, 1e4d8 <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   1e4c2:	781a      	ldrb	r2, [r3, #0]
   1e4c4:	f36f 0200 	bfc	r2, #0, #1
   1e4c8:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   1e4ca:	4c04      	ldr	r4, [pc, #16]	; (1e4dc <ble_ll_conn_event_halt+0x28>)
   1e4cc:	6820      	ldr	r0, [r4, #0]
   1e4ce:	3098      	adds	r0, #152	; 0x98
   1e4d0:	f7fe fa20 	bl	1c914 <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   1e4d4:	2300      	movs	r3, #0
   1e4d6:	6023      	str	r3, [r4, #0]
    }
}
   1e4d8:	bd10      	pop	{r4, pc}
   1e4da:	bf00      	nop
   1e4dc:	10002330 	.word	0x10002330

0001e4e0 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   1e4e0:	b570      	push	{r4, r5, r6, lr}
   1e4e2:	4604      	mov	r4, r0
   1e4e4:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   1e4e6:	f7f8 f90d 	bl	16704 <os_arch_save_sr>
   1e4ea:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1e4ec:	4b07      	ldr	r3, [pc, #28]	; (1e50c <ble_ll_conn_timeout+0x2c>)
   1e4ee:	681b      	ldr	r3, [r3, #0]
   1e4f0:	42a3      	cmp	r3, r4
   1e4f2:	d007      	beq.n	1e504 <ble_ll_conn_timeout+0x24>
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   1e4f4:	4630      	mov	r0, r6
   1e4f6:	f7f8 f90b 	bl	16710 <os_arch_restore_sr>
    /* Check if we need to resume scanning */
    if (was_current) {
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   1e4fa:	4629      	mov	r1, r5
   1e4fc:	4620      	mov	r0, r4
   1e4fe:	f7ff feab 	bl	1e258 <ble_ll_conn_end>
}
   1e502:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_conn_current_sm_over(NULL);
   1e504:	2000      	movs	r0, #0
   1e506:	f7ff fa7b 	bl	1da00 <ble_ll_conn_current_sm_over>
        was_current = 1;
   1e50a:	e7f3      	b.n	1e4f4 <ble_ll_conn_timeout+0x14>
   1e50c:	10002330 	.word	0x10002330

0001e510 <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   1e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    /* Packets with invalid CRC are not sent to LL */
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   1e514:	880b      	ldrh	r3, [r1, #0]
   1e516:	f013 0f80 	tst.w	r3, #128	; 0x80
   1e51a:	d020      	beq.n	1e55e <ble_ll_conn_rx_data_pdu+0x4e>
   1e51c:	4605      	mov	r5, r0
   1e51e:	460c      	mov	r4, r1

    /* XXX: there is a chance that the connection was thrown away and
       re-used before processing packets here. Fix this. */
    /* We better have a connection state machine */
    connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   1e520:	78c8      	ldrb	r0, [r1, #3]
   1e522:	f7ff fb6d 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1e526:	4606      	mov	r6, r0
   1e528:	b318      	cbz	r0, 1e572 <ble_ll_conn_rx_data_pdu+0x62>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
       goto conn_rx_data_pdu_end;
    }

    /* Check state machine */
    ble_ll_conn_chk_csm_flags(connsm);
   1e52a:	f7ff faf9 	bl	1db20 <ble_ll_conn_chk_csm_flags>

    /* Validate rx data pdu */
    rxbuf = rxpdu->om_data;
   1e52e:	682b      	ldr	r3, [r5, #0]
    hdr_byte = rxbuf[0];
   1e530:	781f      	ldrb	r7, [r3, #0]
    acl_len = rxbuf[1];
   1e532:	f893 8001 	ldrb.w	r8, [r3, #1]
   1e536:	fa1f fa88 	uxth.w	sl, r8

    /*
     * Check that the LLID and payload length are reasonable.
     * Empty payload is only allowed for LLID == 01b.
     *  */
    if ((llid == 0) || ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   1e53a:	f017 0903 	ands.w	r9, r7, #3
   1e53e:	d005      	beq.n	1e54c <ble_ll_conn_rx_data_pdu+0x3c>
   1e540:	f1ba 0f00 	cmp.w	sl, #0
   1e544:	d11a      	bne.n	1e57c <ble_ll_conn_rx_data_pdu+0x6c>
   1e546:	f1b9 0f01 	cmp.w	r9, #1
   1e54a:	d017      	beq.n	1e57c <ble_ll_conn_rx_data_pdu+0x6c>
        STATS_INC(ble_ll_conn_stats, rx_bad_llid);
   1e54c:	4a55      	ldr	r2, [pc, #340]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e54e:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1e550:	3301      	adds	r3, #1
   1e552:	6593      	str	r3, [r2, #88]	; 0x58
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_CONN_CREDIT) {
        ble_ll_conn_cth_flow_free_credit(connsm, 1);
    }
#endif

    os_mbuf_free_chain(rxpdu);
   1e554:	4628      	mov	r0, r5
   1e556:	f7f7 f887 	bl	15668 <os_mbuf_free_chain>
}
   1e55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   1e55e:	f7f6 f879 	bl	14654 <hal_debugger_connected>
   1e562:	b100      	cbz	r0, 1e566 <ble_ll_conn_rx_data_pdu+0x56>
   1e564:	be01      	bkpt	0x0001
   1e566:	2300      	movs	r3, #0
   1e568:	461a      	mov	r2, r3
   1e56a:	4619      	mov	r1, r3
   1e56c:	4618      	mov	r0, r3
   1e56e:	f7f6 fc13 	bl	14d98 <__assert_func>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
   1e572:	4a4c      	ldr	r2, [pc, #304]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e574:	69d3      	ldr	r3, [r2, #28]
   1e576:	3301      	adds	r3, #1
   1e578:	61d3      	str	r3, [r2, #28]
       goto conn_rx_data_pdu_end;
   1e57a:	e7eb      	b.n	1e554 <ble_ll_conn_rx_data_pdu+0x44>
        (connsm->enc_data.enc_state >= CONN_ENC_S_ENC_RSP_TO_BE_SENT &&
   1e57c:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT &&
   1e580:	2b02      	cmp	r3, #2
   1e582:	d902      	bls.n	1e58a <ble_ll_conn_rx_data_pdu+0x7a>
         CONN_IS_PERIPHERAL(connsm))) {
   1e584:	79f3      	ldrb	r3, [r6, #7]
         CONN_IS_CENTRAL(connsm)) ||
   1e586:	2b02      	cmp	r3, #2
   1e588:	d043      	beq.n	1e612 <ble_ll_conn_rx_data_pdu+0x102>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1e58a:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   1e58e:	2b02      	cmp	r3, #2
   1e590:	d049      	beq.n	1e626 <ble_ll_conn_rx_data_pdu+0x116>
    connsm->conn_rssi = hdr->rxinfo.rssi;
   1e592:	f994 3004 	ldrsb.w	r3, [r4, #4]
   1e596:	7233      	strb	r3, [r6, #8]
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1e598:	79f3      	ldrb	r3, [r6, #7]
   1e59a:	2b02      	cmp	r3, #2
   1e59c:	d04e      	beq.n	1e63c <ble_ll_conn_rx_data_pdu+0x12c>
    rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   1e59e:	f007 0708 	and.w	r7, r7, #8
    if (rxd_sn == connsm->last_rxd_sn) {
   1e5a2:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   1e5a6:	42bb      	cmp	r3, r7
   1e5a8:	d050      	beq.n	1e64c <ble_ll_conn_rx_data_pdu+0x13c>
    connsm->last_rxd_sn = rxd_sn;
   1e5aa:	f886 7031 	strb.w	r7, [r6, #49]	; 0x31
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1e5ae:	f1b9 0f01 	cmp.w	r9, #1
   1e5b2:	d050      	beq.n	1e656 <ble_ll_conn_rx_data_pdu+0x146>
    if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   1e5b4:	8823      	ldrh	r3, [r4, #0]
   1e5b6:	f013 0220 	ands.w	r2, r3, #32
   1e5ba:	d150      	bne.n	1e65e <ble_ll_conn_rx_data_pdu+0x14e>
    if (llid == BLE_LL_LLID_CTRL) {
   1e5bc:	f1b9 0f03 	cmp.w	r9, #3
   1e5c0:	d056      	beq.n	1e670 <ble_ll_conn_rx_data_pdu+0x160>
        STATS_INC(ble_ll_conn_stats, rx_l2cap_pdus);
   1e5c2:	4938      	ldr	r1, [pc, #224]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e5c4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1e5c6:	3301      	adds	r3, #1
   1e5c8:	64cb      	str	r3, [r1, #76]	; 0x4c
        STATS_INCN(ble_ll_conn_stats, rx_l2cap_bytes, acl_len);
   1e5ca:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1e5cc:	4443      	add	r3, r8
   1e5ce:	650b      	str	r3, [r1, #80]	; 0x50
    if (OS_MBUF_IS_PKTHDR(om)) {
   1e5d0:	796b      	ldrb	r3, [r5, #5]
   1e5d2:	2b07      	cmp	r3, #7
   1e5d4:	d900      	bls.n	1e5d8 <ble_ll_conn_rx_data_pdu+0xc8>
        startoff = om->om_pkthdr_len;
   1e5d6:	b29a      	uxth	r2, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1e5d8:	4629      	mov	r1, r5
   1e5da:	f851 3b10 	ldr.w	r3, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1e5de:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1e5e0:	1a9b      	subs	r3, r3, r2
   1e5e2:	b29b      	uxth	r3, r3
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1e5e4:	2b01      	cmp	r3, #1
   1e5e6:	d953      	bls.n	1e690 <ble_ll_conn_rx_data_pdu+0x180>
        os_mbuf_prepend(rxpdu, 2);
   1e5e8:	2102      	movs	r1, #2
   1e5ea:	4628      	mov	r0, r5
   1e5ec:	f7f7 f9a1 	bl	15932 <os_mbuf_prepend>
        rxbuf = rxpdu->om_data;
   1e5f0:	682c      	ldr	r4, [r5, #0]
        acl_hdr = (llid << 12) | connsm->conn_handle;
   1e5f2:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   1e5f6:	ea41 3109 	orr.w	r1, r1, r9, lsl #12
        put_le16(rxbuf, acl_hdr);
   1e5fa:	b289      	uxth	r1, r1
   1e5fc:	4620      	mov	r0, r4
   1e5fe:	f013 fc6d 	bl	31edc <put_le16>
        put_le16(rxbuf + 2, acl_len);
   1e602:	4651      	mov	r1, sl
   1e604:	1ca0      	adds	r0, r4, #2
   1e606:	f013 fc69 	bl	31edc <put_le16>
        ble_hci_trans_ll_acl_tx(rxpdu);
   1e60a:	4628      	mov	r0, r5
   1e60c:	f00f f818 	bl	2d640 <ble_hci_trans_ll_acl_tx>
   1e610:	e7a3      	b.n	1e55a <ble_ll_conn_rx_data_pdu+0x4a>
        if (!ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   1e612:	4628      	mov	r0, r5
   1e614:	f001 fa27 	bl	1fa66 <ble_ll_ctrl_enc_allowed_pdu_rx>
   1e618:	2800      	cmp	r0, #0
   1e61a:	d1b6      	bne.n	1e58a <ble_ll_conn_rx_data_pdu+0x7a>
            ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   1e61c:	213d      	movs	r1, #61	; 0x3d
   1e61e:	4630      	mov	r0, r6
   1e620:	f7ff ff5e 	bl	1e4e0 <ble_ll_conn_timeout>
            goto conn_rx_data_pdu_end;
   1e624:	e796      	b.n	1e554 <ble_ll_conn_rx_data_pdu+0x44>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1e626:	78b3      	ldrb	r3, [r6, #2]
   1e628:	f013 0f08 	tst.w	r3, #8
   1e62c:	d0b1      	beq.n	1e592 <ble_ll_conn_rx_data_pdu+0x82>
        CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   1e62e:	f1ba 0f00 	cmp.w	sl, #0
   1e632:	d0ae      	beq.n	1e592 <ble_ll_conn_rx_data_pdu+0x82>
        ble_ll_conn_auth_pyld_timer_start(connsm);
   1e634:	4630      	mov	r0, r6
   1e636:	f7ff fd42 	bl	1e0be <ble_ll_conn_auth_pyld_timer_start>
   1e63a:	e7aa      	b.n	1e592 <ble_ll_conn_rx_data_pdu+0x82>
        if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   1e63c:	f017 0f04 	tst.w	r7, #4
   1e640:	d0ad      	beq.n	1e59e <ble_ll_conn_rx_data_pdu+0x8e>
            connsm->csmflags.cfbit.allow_periph_latency = 1;
   1e642:	7833      	ldrb	r3, [r6, #0]
   1e644:	f043 0310 	orr.w	r3, r3, #16
   1e648:	7033      	strb	r3, [r6, #0]
   1e64a:	e7a8      	b.n	1e59e <ble_ll_conn_rx_data_pdu+0x8e>
       STATS_INC(ble_ll_conn_stats, data_pdu_rx_dup);
   1e64c:	4a15      	ldr	r2, [pc, #84]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e64e:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1e650:	3301      	adds	r3, #1
   1e652:	6353      	str	r3, [r2, #52]	; 0x34
       goto conn_rx_data_pdu_end;
   1e654:	e77e      	b.n	1e554 <ble_ll_conn_rx_data_pdu+0x44>
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1e656:	f1ba 0f00 	cmp.w	sl, #0
   1e65a:	d1ab      	bne.n	1e5b4 <ble_ll_conn_rx_data_pdu+0xa4>
   1e65c:	e77a      	b.n	1e554 <ble_ll_conn_rx_data_pdu+0x44>
        STATS_INC(ble_ll_conn_stats, mic_failures);
   1e65e:	4a11      	ldr	r2, [pc, #68]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e660:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1e662:	3301      	adds	r3, #1
   1e664:	6713      	str	r3, [r2, #112]	; 0x70
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   1e666:	213d      	movs	r1, #61	; 0x3d
   1e668:	4630      	mov	r0, r6
   1e66a:	f7ff ff39 	bl	1e4e0 <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   1e66e:	e771      	b.n	1e554 <ble_ll_conn_rx_data_pdu+0x44>
        STATS_INC(ble_ll_conn_stats, rx_ctrl_pdus);
   1e670:	4a0c      	ldr	r2, [pc, #48]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e672:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1e674:	3301      	adds	r3, #1
   1e676:	6493      	str	r3, [r2, #72]	; 0x48
        if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   1e678:	4629      	mov	r1, r5
   1e67a:	4630      	mov	r0, r6
   1e67c:	f001 fcf6 	bl	2006c <ble_ll_ctrl_rx_pdu>
   1e680:	2800      	cmp	r0, #0
   1e682:	f43f af6a 	beq.w	1e55a <ble_ll_conn_rx_data_pdu+0x4a>
            STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
   1e686:	4a07      	ldr	r2, [pc, #28]	; (1e6a4 <ble_ll_conn_rx_data_pdu+0x194>)
   1e688:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1e68a:	3301      	adds	r3, #1
   1e68c:	6553      	str	r3, [r2, #84]	; 0x54
   1e68e:	e764      	b.n	1e55a <ble_ll_conn_rx_data_pdu+0x4a>
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1e690:	f7f5 ffe0 	bl	14654 <hal_debugger_connected>
   1e694:	b100      	cbz	r0, 1e698 <ble_ll_conn_rx_data_pdu+0x188>
   1e696:	be01      	bkpt	0x0001
   1e698:	2300      	movs	r3, #0
   1e69a:	461a      	mov	r2, r3
   1e69c:	4619      	mov	r1, r3
   1e69e:	4618      	mov	r0, r3
   1e6a0:	f7f6 fb7a 	bl	14d98 <__assert_func>
   1e6a4:	100022ac 	.word	0x100022ac

0001e6a8 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint16_t length)
{
   1e6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e6aa:	4605      	mov	r5, r0
   1e6ac:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   1e6ae:	2a03      	cmp	r2, #3
   1e6b0:	d00d      	beq.n	1e6ce <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   1e6b2:	2300      	movs	r3, #0
   1e6b4:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   1e6b6:	8363      	strh	r3, [r4, #26]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   1e6b8:	7662      	strb	r2, [r4, #25]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e6ba:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1e6be:	2b02      	cmp	r3, #2
   1e6c0:	d91d      	bls.n	1e6fe <ble_ll_conn_enqueue_pkt+0x56>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e6c2:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   1e6c6:	2a03      	cmp	r2, #3
   1e6c8:	d004      	beq.n	1e6d4 <ble_ll_conn_enqueue_pkt+0x2c>
    lifo = 0;
   1e6ca:	2600      	movs	r6, #0
   1e6cc:	e018      	b.n	1e700 <ble_ll_conn_enqueue_pkt+0x58>
        om->om_len = length;
   1e6ce:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   1e6d0:	820b      	strh	r3, [r1, #16]
   1e6d2:	e7ee      	b.n	1e6b2 <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   1e6d4:	6822      	ldr	r2, [r4, #0]
   1e6d6:	7812      	ldrb	r2, [r2, #0]
   1e6d8:	3a02      	subs	r2, #2
   1e6da:	2a0f      	cmp	r2, #15
   1e6dc:	d809      	bhi.n	1e6f2 <ble_ll_conn_enqueue_pkt+0x4a>
   1e6de:	e8df f002 	tbb	[pc, r2]
   1e6e2:	0a1d      	.short	0x0a1d
   1e6e4:	081d1d0a 	.word	0x081d1d0a
   1e6e8:	08080808 	.word	0x08080808
   1e6ec:	08081d08 	.word	0x08081d08
   1e6f0:	1d08      	.short	0x1d08
   1e6f2:	2600      	movs	r6, #0
   1e6f4:	e004      	b.n	1e700 <ble_ll_conn_enqueue_pkt+0x58>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   1e6f6:	2b06      	cmp	r3, #6
   1e6f8:	d012      	beq.n	1e720 <ble_ll_conn_enqueue_pkt+0x78>
    lifo = 0;
   1e6fa:	2600      	movs	r6, #0
   1e6fc:	e000      	b.n	1e700 <ble_ll_conn_enqueue_pkt+0x58>
   1e6fe:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   1e700:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   1e704:	f7f7 fffe 	bl	16704 <os_arch_save_sr>
    if (lifo) {
   1e708:	b186      	cbz	r6, 1e72c <ble_ll_conn_enqueue_pkt+0x84>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   1e70a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
   1e70e:	6163      	str	r3, [r4, #20]
   1e710:	b143      	cbz	r3, 1e724 <ble_ll_conn_enqueue_pkt+0x7c>
   1e712:	f8c5 70ac 	str.w	r7, [r5, #172]	; 0xac
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   1e716:	f7f7 fffb 	bl	16710 <os_arch_restore_sr>
}
   1e71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   1e71c:	2601      	movs	r6, #1
   1e71e:	e7ef      	b.n	1e700 <ble_ll_conn_enqueue_pkt+0x58>
                    lifo = 1;
   1e720:	2601      	movs	r6, #1
   1e722:	e7ed      	b.n	1e700 <ble_ll_conn_enqueue_pkt+0x58>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   1e724:	3414      	adds	r4, #20
   1e726:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   1e72a:	e7f2      	b.n	1e712 <ble_ll_conn_enqueue_pkt+0x6a>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   1e72c:	2300      	movs	r3, #0
   1e72e:	f844 3f14 	str.w	r3, [r4, #20]!
   1e732:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   1e736:	601f      	str	r7, [r3, #0]
   1e738:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   1e73c:	e7eb      	b.n	1e716 <ble_ll_conn_enqueue_pkt+0x6e>
	...

0001e740 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   1e740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e742:	4605      	mov	r5, r0
   1e744:	460c      	mov	r4, r1
   1e746:	4616      	mov	r6, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   1e748:	f3c1 000b 	ubfx	r0, r1, #0, #12
   1e74c:	f7ff fa58 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (connsm) {
   1e750:	b180      	cbz	r0, 1e774 <ble_ll_conn_tx_pkt_in+0x34>
   1e752:	4607      	mov	r7, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   1e754:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   1e758:	d10a      	bne.n	1e770 <ble_ll_conn_tx_pkt_in+0x30>
            hdr_byte = BLE_LL_LLID_DATA_START;
   1e75a:	2202      	movs	r2, #2
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
        }

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);
   1e75c:	4909      	ldr	r1, [pc, #36]	; (1e784 <ble_ll_conn_tx_pkt_in+0x44>)
   1e75e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1e760:	3301      	adds	r3, #1
   1e762:	644b      	str	r3, [r1, #68]	; 0x44

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   1e764:	4633      	mov	r3, r6
   1e766:	4629      	mov	r1, r5
   1e768:	4638      	mov	r0, r7
   1e76a:	f7ff ff9d 	bl	1e6a8 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   1e76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e770:	2201      	movs	r2, #1
   1e772:	e7f3      	b.n	1e75c <ble_ll_conn_tx_pkt_in+0x1c>
        STATS_INC(ble_ll_conn_stats, handle_not_found);
   1e774:	4a03      	ldr	r2, [pc, #12]	; (1e784 <ble_ll_conn_tx_pkt_in+0x44>)
   1e776:	6993      	ldr	r3, [r2, #24]
   1e778:	3301      	adds	r3, #1
   1e77a:	6193      	str	r3, [r2, #24]
        os_mbuf_free_chain(om);
   1e77c:	4628      	mov	r0, r5
   1e77e:	f7f6 ff73 	bl	15668 <os_mbuf_free_chain>
}
   1e782:	e7f4      	b.n	1e76e <ble_ll_conn_tx_pkt_in+0x2e>
   1e784:	100022ac 	.word	0x100022ac

0001e788 <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   1e788:	b538      	push	{r3, r4, r5, lr}
   1e78a:	4605      	mov	r5, r0
   1e78c:	460c      	mov	r4, r1
#endif
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->central_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   1e78e:	2205      	movs	r2, #5
   1e790:	4805      	ldr	r0, [pc, #20]	; (1e7a8 <ble_ll_conn_set_global_chanmap+0x20>)
   1e792:	f7f8 f967 	bl	16a64 <memcmp>
   1e796:	b128      	cbz	r0, 1e7a4 <ble_ll_conn_set_global_chanmap+0x1c>
        return;
    }

    /* Change channel map and cause channel map update procedure to start */
    conn_params->num_used_chans = num_used_chans;
   1e798:	4b03      	ldr	r3, [pc, #12]	; (1e7a8 <ble_ll_conn_set_global_chanmap+0x20>)
   1e79a:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->central_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   1e79c:	6820      	ldr	r0, [r4, #0]
   1e79e:	6018      	str	r0, [r3, #0]
   1e7a0:	7922      	ldrb	r2, [r4, #4]
   1e7a2:	711a      	strb	r2, [r3, #4]
        if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
        }
    }
#endif
}
   1e7a4:	bd38      	pop	{r3, r4, r5, pc}
   1e7a6:	bf00      	nop
   1e7a8:	1000233c 	.word	0x1000233c

0001e7ac <ble_ll_conn_periph_start>:
 */
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
int
ble_ll_conn_periph_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                         bool force_csa2)
{
   1e7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e7b0:	4607      	mov	r7, r0
   1e7b2:	468a      	mov	sl, r1
   1e7b4:	4690      	mov	r8, r2
   1e7b6:	4699      	mov	r9, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   1e7b8:	1c86      	adds	r6, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1e7ba:	4b73      	ldr	r3, [pc, #460]	; (1e988 <ble_ll_conn_periph_start+0x1dc>)
   1e7bc:	681c      	ldr	r4, [r3, #0]
   1e7be:	e007      	b.n	1e7d0 <ble_ll_conn_periph_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   1e7c0:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1e7c4:	f013 0f01 	tst.w	r3, #1
   1e7c8:	f000 8088 	beq.w	1e8dc <ble_ll_conn_periph_start+0x130>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1e7cc:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   1e7d0:	b194      	cbz	r4, 1e7f8 <ble_ll_conn_periph_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   1e7d2:	2206      	movs	r2, #6
   1e7d4:	4631      	mov	r1, r6
   1e7d6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1e7da:	f7f8 f943 	bl	16a64 <memcmp>
   1e7de:	4605      	mov	r5, r0
   1e7e0:	2800      	cmp	r0, #0
   1e7e2:	d1f3      	bne.n	1e7cc <ble_ll_conn_periph_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1e7e4:	783b      	ldrb	r3, [r7, #0]
   1e7e6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e7ea:	d0e9      	beq.n	1e7c0 <ble_ll_conn_periph_start+0x14>
                if (connsm->peer_addr_type & 1) {
   1e7ec:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1e7f0:	f013 0f01 	tst.w	r3, #1
   1e7f4:	d0ea      	beq.n	1e7cc <ble_ll_conn_periph_start+0x20>
   1e7f6:	e071      	b.n	1e8dc <ble_ll_conn_periph_start+0x130>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   1e7f8:	f7ff fa14 	bl	1dc24 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   1e7fc:	4604      	mov	r4, r0
   1e7fe:	2800      	cmp	r0, #0
   1e800:	f000 80bf 	beq.w	1e982 <ble_ll_conn_periph_start+0x1d6>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   1e804:	f107 000e 	add.w	r0, r7, #14
   1e808:	f013 fb8e 	bl	31f28 <get_le32>
   1e80c:	6520      	str	r0, [r4, #80]	; 0x50
    crcinit = dptr[6];
   1e80e:	7d3a      	ldrb	r2, [r7, #20]
    crcinit = (crcinit << 8) | dptr[5];
   1e810:	7cfb      	ldrb	r3, [r7, #19]
   1e812:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   1e816:	7cbb      	ldrb	r3, [r7, #18]
   1e818:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   1e81c:	6563      	str	r3, [r4, #84]	; 0x54
    connsm->tx_win_size = dptr[7];
   1e81e:	7d7b      	ldrb	r3, [r7, #21]
   1e820:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    connsm->tx_win_off = get_le16(dptr + 8);
   1e824:	f107 0016 	add.w	r0, r7, #22
   1e828:	f013 fb79 	bl	31f1e <get_le16>
   1e82c:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
    connsm->conn_itvl = get_le16(dptr + 10);
   1e830:	f107 0018 	add.w	r0, r7, #24
   1e834:	f013 fb73 	bl	31f1e <get_le16>
   1e838:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    connsm->periph_latency = get_le16(dptr + 12);
   1e83c:	f107 001a 	add.w	r0, r7, #26
   1e840:	f013 fb6d 	bl	31f1e <get_le16>
   1e844:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    connsm->supervision_tmo = get_le16(dptr + 14);
   1e848:	f107 001c 	add.w	r0, r7, #28
   1e84c:	f013 fb67 	bl	31f1e <get_le16>
   1e850:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   1e854:	f104 021c 	add.w	r2, r4, #28
   1e858:	463b      	mov	r3, r7
   1e85a:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   1e85e:	61e1      	str	r1, [r4, #28]
   1e860:	791b      	ldrb	r3, [r3, #4]
   1e862:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   1e864:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1e868:	f003 031f 	and.w	r3, r3, #31
   1e86c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    connsm->central_sca = dptr[21] >> 5;
   1e870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1e874:	095b      	lsrs	r3, r3, #5
   1e876:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   1e87a:	f8b4 106e 	ldrh.w	r1, [r4, #110]	; 0x6e
   1e87e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   1e882:	4299      	cmp	r1, r3
   1e884:	d81e      	bhi.n	1e8c4 <ble_ll_conn_periph_start+0x118>
   1e886:	2b05      	cmp	r3, #5
   1e888:	d91c      	bls.n	1e8c4 <ble_ll_conn_periph_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   1e88a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e88e:	d819      	bhi.n	1e8c4 <ble_ll_conn_periph_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   1e890:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   1e894:	b1b5      	cbz	r5, 1e8c4 <ble_ll_conn_periph_start+0x118>
        (connsm->periph_latency > BLE_LL_CONN_PERIPH_LATENCY_MAX)) {
   1e896:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   1e89a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   1e89e:	d211      	bcs.n	1e8c4 <ble_ll_conn_periph_start+0x118>
        goto err_periph_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->periph_latency + 1) * (connsm->conn_itvl * 2) *
   1e8a0:	fb01 3103 	mla	r1, r1, r3, r3
   1e8a4:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   1e8a8:	fb0c f101 	mul.w	r1, ip, r1
           BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   1e8ac:	f242 7c10 	movw	ip, #10000	; 0x2710
   1e8b0:	fb0c f000 	mul.w	r0, ip, r0
   1e8b4:	4288      	cmp	r0, r1
   1e8b6:	d905      	bls.n	1e8c4 <ble_ll_conn_periph_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   1e8b8:	3b01      	subs	r3, #1
    if (temp > 8) {
   1e8ba:	2b08      	cmp	r3, #8
   1e8bc:	d900      	bls.n	1e8c0 <ble_ll_conn_periph_start+0x114>
        temp = 8;
   1e8be:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   1e8c0:	429d      	cmp	r5, r3
   1e8c2:	d90e      	bls.n	1e8e2 <ble_ll_conn_periph_start+0x136>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_periph_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1e8c4:	2500      	movs	r5, #0
   1e8c6:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
   1e8ca:	4b30      	ldr	r3, [pc, #192]	; (1e98c <ble_ll_conn_periph_start+0x1e0>)
   1e8cc:	685a      	ldr	r2, [r3, #4]
   1e8ce:	6014      	str	r4, [r2, #0]
   1e8d0:	34b4      	adds	r4, #180	; 0xb4
   1e8d2:	605c      	str	r4, [r3, #4]
    STATS_INC(ble_ll_conn_stats, periph_rxd_bad_conn_req_params);
   1e8d4:	4a2e      	ldr	r2, [pc, #184]	; (1e990 <ble_ll_conn_periph_start+0x1e4>)
   1e8d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e8d8:	3301      	adds	r3, #1
   1e8da:	62d3      	str	r3, [r2, #44]	; 0x2c
    return 0;
}
   1e8dc:	4628      	mov	r0, r5
   1e8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   1e8e2:	6833      	ldr	r3, [r6, #0]
   1e8e4:	f8c4 308f 	str.w	r3, [r4, #143]	; 0x8f
   1e8e8:	88b3      	ldrh	r3, [r6, #4]
   1e8ea:	f8a4 3093 	strh.w	r3, [r4, #147]	; 0x93
    connsm->peer_addr_type = pat;
   1e8ee:	f884 a08e 	strb.w	sl, [r4, #142]	; 0x8e
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   1e8f2:	4610      	mov	r0, r2
   1e8f4:	f003 fb97 	bl	22026 <ble_ll_utils_calc_num_used_chans>
   1e8f8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    if (connsm->num_used_chans < 2) {
   1e8fc:	2801      	cmp	r0, #1
   1e8fe:	d9e1      	bls.n	1e8c4 <ble_ll_conn_periph_start+0x118>
    ble_ll_conn_itvl_to_ticks(connsm->conn_itvl, &connsm->conn_itvl_ticks,
   1e900:	f104 0275 	add.w	r2, r4, #117	; 0x75
   1e904:	f104 0178 	add.w	r1, r4, #120	; 0x78
   1e908:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   1e90c:	f7ff f93e 	bl	1db8c <ble_ll_conn_itvl_to_ticks>
    connsm->conn_role = BLE_LL_CONN_ROLE_PERIPHERAL;
   1e910:	2302      	movs	r3, #2
   1e912:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   1e914:	4620      	mov	r0, r4
   1e916:	f7ff fbf3 	bl	1e100 <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   1e91a:	f1b9 0f00 	cmp.w	r9, #0
   1e91e:	d105      	bne.n	1e92c <ble_ll_conn_periph_start+0x180>
   1e920:	783b      	ldrb	r3, [r7, #0]
   1e922:	f013 0f20 	tst.w	r3, #32
   1e926:	d025      	beq.n	1e974 <ble_ll_conn_periph_start+0x1c8>
   1e928:	2101      	movs	r1, #1
   1e92a:	e000      	b.n	1e92e <ble_ll_conn_periph_start+0x182>
   1e92c:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   1e92e:	4620      	mov	r0, r4
   1e930:	f7ff fbba 	bl	1e0a8 <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1e934:	4b17      	ldr	r3, [pc, #92]	; (1e994 <ble_ll_conn_periph_start+0x1e8>)
   1e936:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    rc = ble_ll_conn_created(connsm, rxhdr);
   1e93a:	4641      	mov	r1, r8
   1e93c:	4620      	mov	r0, r4
   1e93e:	f7ff fb09 	bl	1df54 <ble_ll_conn_created>
    if (!rc) {
   1e942:	4605      	mov	r5, r0
   1e944:	2800      	cmp	r0, #0
   1e946:	d1c9      	bne.n	1e8dc <ble_ll_conn_periph_start+0x130>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1e948:	4b0f      	ldr	r3, [pc, #60]	; (1e988 <ble_ll_conn_periph_start+0x1dc>)
   1e94a:	681b      	ldr	r3, [r3, #0]
   1e94c:	42a3      	cmp	r3, r4
   1e94e:	d013      	beq.n	1e978 <ble_ll_conn_periph_start+0x1cc>
   1e950:	461a      	mov	r2, r3
   1e952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1e956:	42a3      	cmp	r3, r4
   1e958:	d1fa      	bne.n	1e950 <ble_ll_conn_periph_start+0x1a4>
   1e95a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1e95e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1e962:	2300      	movs	r3, #0
   1e964:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1e968:	4b08      	ldr	r3, [pc, #32]	; (1e98c <ble_ll_conn_periph_start+0x1e0>)
   1e96a:	685a      	ldr	r2, [r3, #4]
   1e96c:	6014      	str	r4, [r2, #0]
   1e96e:	34b4      	adds	r4, #180	; 0xb4
   1e970:	605c      	str	r4, [r3, #4]
   1e972:	e7b3      	b.n	1e8dc <ble_ll_conn_periph_start+0x130>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   1e974:	2100      	movs	r1, #0
   1e976:	e7da      	b.n	1e92e <ble_ll_conn_periph_start+0x182>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1e978:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   1e97c:	4b02      	ldr	r3, [pc, #8]	; (1e988 <ble_ll_conn_periph_start+0x1dc>)
   1e97e:	601a      	str	r2, [r3, #0]
   1e980:	e7ef      	b.n	1e962 <ble_ll_conn_periph_start+0x1b6>
        return 0;
   1e982:	2500      	movs	r5, #0
   1e984:	e7aa      	b.n	1e8dc <ble_ll_conn_periph_start+0x130>
   1e986:	bf00      	nop
   1e988:	1000232c 	.word	0x1000232c
   1e98c:	10002334 	.word	0x10002334
   1e990:	100022ac 	.word	0x100022ac
   1e994:	0001da15 	.word	0x0001da15

0001e998 <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   1e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   1e99a:	4b26      	ldr	r3, [pc, #152]	; (1ea34 <ble_ll_conn_module_reset+0x9c>)
   1e99c:	6818      	ldr	r0, [r3, #0]
   1e99e:	b118      	cbz	r0, 1e9a8 <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   1e9a0:	2100      	movs	r1, #0
   1e9a2:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   1e9a4:	f7ff fc58 	bl	1e258 <ble_ll_conn_end>
    g_ble_ll_conn_create_sm.connsm = NULL;
#endif

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   1e9a8:	4b23      	ldr	r3, [pc, #140]	; (1ea38 <ble_ll_conn_module_reset+0xa0>)
   1e9aa:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   1e9ac:	b118      	cbz	r0, 1e9b6 <ble_ll_conn_module_reset+0x1e>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   1e9ae:	2100      	movs	r1, #0
   1e9b0:	f7ff fc52 	bl	1e258 <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   1e9b4:	e7f8      	b.n	1e9a8 <ble_ll_conn_module_reset+0x10>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   1e9b6:	f003 fca1 	bl	222fc <ble_phy_max_data_pdu_pyld>
   1e9ba:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   1e9bc:	4606      	mov	r6, r0
   1e9be:	28fb      	cmp	r0, #251	; 0xfb
   1e9c0:	bf28      	it	cs
   1e9c2:	26fb      	movcs	r6, #251	; 0xfb
   1e9c4:	b2f7      	uxtb	r7, r6
   1e9c6:	463e      	mov	r6, r7
    conn_params->supp_max_rx_octets = maxbytes;
   1e9c8:	4c1c      	ldr	r4, [pc, #112]	; (1ea3c <ble_ll_conn_module_reset+0xa4>)
   1e9ca:	71e7      	strb	r7, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   1e9cc:	3604      	adds	r6, #4
   1e9ce:	2101      	movs	r1, #1
   1e9d0:	4630      	mov	r0, r6
   1e9d2:	f7fd fff1 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
   1e9d6:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   1e9d8:	71a7      	strb	r7, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   1e9da:	2101      	movs	r1, #1
   1e9dc:	4630      	mov	r0, r6
   1e9de:	f7fd ffeb 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
   1e9e2:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   1e9e4:	2d1b      	cmp	r5, #27
   1e9e6:	bf28      	it	cs
   1e9e8:	251b      	movcs	r5, #27
   1e9ea:	b2eb      	uxtb	r3, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   1e9ec:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   1e9ee:	1d1d      	adds	r5, r3, #4
   1e9f0:	2101      	movs	r1, #1
   1e9f2:	4628      	mov	r0, r5
   1e9f4:	f7fd ffe0 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
   1e9f8:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   1e9fa:	2101      	movs	r1, #1
   1e9fc:	4628      	mov	r0, r5
   1e9fe:	f7fd ffdb 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
   1ea02:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   1ea04:	2103      	movs	r1, #3
   1ea06:	4628      	mov	r0, r5
   1ea08:	f7fd ffd6 	bl	1c9b8 <ble_ll_pdu_tx_time_get>
   1ea0c:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1ea0e:	231b      	movs	r3, #27
   1ea10:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1ea12:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1ea16:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   1ea18:	2325      	movs	r3, #37	; 0x25
   1ea1a:	7163      	strb	r3, [r4, #5]
    memset(conn_params->central_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   1ea1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ea20:	6023      	str	r3, [r4, #0]
    conn_params->central_chan_map[4] = 0x1f;
   1ea22:	231f      	movs	r3, #31
   1ea24:	7123      	strb	r3, [r4, #4]

    /* Reset statistics */
    STATS_RESET(ble_ll_conn_stats);
   1ea26:	2274      	movs	r2, #116	; 0x74
   1ea28:	2100      	movs	r1, #0
   1ea2a:	4805      	ldr	r0, [pc, #20]	; (1ea40 <ble_ll_conn_module_reset+0xa8>)
   1ea2c:	f7f8 f863 	bl	16af6 <memset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_CTRL_TO_HOST_FLOW_CONTROL)
    g_ble_ll_conn_cth_flow.enabled = false;
    g_ble_ll_conn_cth_flow.max_buffers = 1;
    g_ble_ll_conn_cth_flow.num_buffers = 1;
#endif
}
   1ea30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ea32:	bf00      	nop
   1ea34:	10002330 	.word	0x10002330
   1ea38:	1000232c 	.word	0x1000232c
   1ea3c:	1000233c 	.word	0x1000233c
   1ea40:	100022b8 	.word	0x100022b8

0001ea44 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   1ea44:	b530      	push	{r4, r5, lr}
   1ea46:	b083      	sub	sp, #12
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active connections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   1ea48:	2400      	movs	r4, #0
   1ea4a:	4b1c      	ldr	r3, [pc, #112]	; (1eabc <ble_ll_conn_module_init+0x78>)
   1ea4c:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   1ea4e:	4b1c      	ldr	r3, [pc, #112]	; (1eac0 <ble_ll_conn_module_init+0x7c>)
   1ea50:	601c      	str	r4, [r3, #0]
   1ea52:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   1ea54:	4d1b      	ldr	r5, [pc, #108]	; (1eac4 <ble_ll_conn_module_init+0x80>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   1ea56:	b16c      	cbz	r4, 1ea74 <ble_ll_conn_module_init+0x30>

        ++connsm;
    }

    /* Register connection statistics */
    rc = stats_init_and_reg(STATS_HDR(ble_ll_conn_stats),
   1ea58:	4b1b      	ldr	r3, [pc, #108]	; (1eac8 <ble_ll_conn_module_init+0x84>)
   1ea5a:	9301      	str	r3, [sp, #4]
   1ea5c:	2300      	movs	r3, #0
   1ea5e:	9300      	str	r3, [sp, #0]
   1ea60:	221d      	movs	r2, #29
   1ea62:	2104      	movs	r1, #4
   1ea64:	4819      	ldr	r0, [pc, #100]	; (1eacc <ble_ll_conn_module_init+0x88>)
   1ea66:	f7fb fbdd 	bl	1a224 <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_conn_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_conn_stats),
                            "ble_ll_conn");
    BLE_LL_ASSERT(rc == 0);
   1ea6a:	b9e8      	cbnz	r0, 1eaa8 <ble_ll_conn_module_init+0x64>
    ble_npl_event_init(&g_ble_ll_conn_cth_flow_error_ev,
                       ble_ll_conn_cth_flow_error_fn, NULL);
#endif

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   1ea6c:	f7ff ff94 	bl	1e998 <ble_ll_conn_module_reset>
}
   1ea70:	b003      	add	sp, #12
   1ea72:	bd30      	pop	{r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   1ea74:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1ea78:	2100      	movs	r1, #0
   1ea7a:	4628      	mov	r0, r5
   1ea7c:	f7f8 f83b 	bl	16af6 <memset>
        connsm->conn_handle = i + 1;
   1ea80:	3401      	adds	r4, #1
   1ea82:	b2a4      	uxth	r4, r4
   1ea84:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1ea86:	4b0e      	ldr	r3, [pc, #56]	; (1eac0 <ble_ll_conn_module_init+0x7c>)
   1ea88:	685a      	ldr	r2, [r3, #4]
   1ea8a:	6015      	str	r5, [r2, #0]
   1ea8c:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
   1ea90:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   1ea92:	2303      	movs	r3, #3
   1ea94:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
        connsm->conn_sch.cb_arg = connsm;
   1ea98:	f8c5 50e4 	str.w	r5, [r5, #228]	; 0xe4
        ble_ll_ctrl_init_conn_sm(connsm);
   1ea9c:	4628      	mov	r0, r5
   1ea9e:	f001 fce3 	bl	20468 <ble_ll_ctrl_init_conn_sm>
        ++connsm;
   1eaa2:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   1eaa6:	e7d6      	b.n	1ea56 <ble_ll_conn_module_init+0x12>
    BLE_LL_ASSERT(rc == 0);
   1eaa8:	f7f5 fdd4 	bl	14654 <hal_debugger_connected>
   1eaac:	b100      	cbz	r0, 1eab0 <ble_ll_conn_module_init+0x6c>
   1eaae:	be01      	bkpt	0x0001
   1eab0:	2300      	movs	r3, #0
   1eab2:	461a      	mov	r2, r3
   1eab4:	4619      	mov	r1, r3
   1eab6:	4618      	mov	r0, r3
   1eab8:	f7f6 f96e 	bl	14d98 <__assert_func>
   1eabc:	1000232c 	.word	0x1000232c
   1eac0:	10002334 	.word	0x10002334
   1eac4:	10002358 	.word	0x10002358
   1eac8:	000346fc 	.word	0x000346fc
   1eacc:	100022ac 	.word	0x100022ac

0001ead0 <ble_ll_conn_hci_chk_conn_params>:
                                uint16_t latency, uint16_t spvn_tmo)
{
    uint32_t spvn_tmo_usecs;
    uint32_t min_spvn_tmo_usecs;

    if ((itvl_min > itvl_max) ||
   1ead0:	4288      	cmp	r0, r1
   1ead2:	d81a      	bhi.n	1eb0a <ble_ll_conn_hci_chk_conn_params+0x3a>
   1ead4:	2805      	cmp	r0, #5
   1ead6:	d91a      	bls.n	1eb0e <ble_ll_conn_hci_chk_conn_params+0x3e>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   1ead8:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1eadc:	d819      	bhi.n	1eb12 <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   1eade:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1eae2:	d218      	bcs.n	1eb16 <ble_ll_conn_hci_chk_conn_params+0x46>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   1eae4:	2b09      	cmp	r3, #9
   1eae6:	d918      	bls.n	1eb1a <ble_ll_conn_hci_chk_conn_params+0x4a>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   1eae8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1eaec:	d817      	bhi.n	1eb1e <ble_ll_conn_hci_chk_conn_params+0x4e>
    /*
    * Supervision timeout (in msecs) must be more than:
    *  (1 + connLatency) * connIntervalMax * 1.25 msecs * 2.
    */
    spvn_tmo_usecs = spvn_tmo;
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   1eaee:	f242 7010 	movw	r0, #10000	; 0x2710
   1eaf2:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
    min_spvn_tmo_usecs *= (1 + latency);
   1eaf6:	fb02 1101 	mla	r1, r2, r1, r1
   1eafa:	f640 12c4 	movw	r2, #2500	; 0x9c4
   1eafe:	fb02 f101 	mul.w	r1, r2, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   1eb02:	428b      	cmp	r3, r1
   1eb04:	d90d      	bls.n	1eb22 <ble_ll_conn_hci_chk_conn_params+0x52>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return BLE_ERR_SUCCESS;
   1eb06:	2000      	movs	r0, #0
   1eb08:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1eb0a:	2012      	movs	r0, #18
   1eb0c:	4770      	bx	lr
   1eb0e:	2012      	movs	r0, #18
   1eb10:	4770      	bx	lr
   1eb12:	2012      	movs	r0, #18
   1eb14:	4770      	bx	lr
   1eb16:	2012      	movs	r0, #18
   1eb18:	4770      	bx	lr
   1eb1a:	2012      	movs	r0, #18
   1eb1c:	4770      	bx	lr
   1eb1e:	2012      	movs	r0, #18
   1eb20:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1eb22:	2012      	movs	r0, #18
}
   1eb24:	4770      	bx	lr

0001eb26 <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   1eb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   1eb28:	888b      	ldrh	r3, [r1, #4]
   1eb2a:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   1eb2e:	8802      	ldrh	r2, [r0, #0]
   1eb30:	4293      	cmp	r3, r2
   1eb32:	d11d      	bne.n	1eb70 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   1eb34:	8844      	ldrh	r4, [r0, #2]
   1eb36:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   1eb3a:	8885      	ldrh	r5, [r0, #4]
   1eb3c:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   1eb40:	88c2      	ldrh	r2, [r0, #6]
   1eb42:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   1eb46:	8903      	ldrh	r3, [r0, #8]
   1eb48:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   1eb4c:	8947      	ldrh	r7, [r0, #10]
   1eb4e:	b2be      	uxth	r6, r7
   1eb50:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   1eb54:	8980      	ldrh	r0, [r0, #12]
   1eb56:	b287      	uxth	r7, r0
   1eb58:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   1eb5c:	b29b      	uxth	r3, r3
   1eb5e:	b292      	uxth	r2, r2
   1eb60:	b2a9      	uxth	r1, r5
   1eb62:	b2a0      	uxth	r0, r4
   1eb64:	f7ff ffb4 	bl	1ead0 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   1eb68:	b960      	cbnz	r0, 1eb84 <ble_ll_conn_process_conn_params+0x5e>
   1eb6a:	42be      	cmp	r6, r7
   1eb6c:	d80c      	bhi.n	1eb88 <ble_ll_conn_process_conn_params+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   1eb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   1eb70:	f7f5 fd70 	bl	14654 <hal_debugger_connected>
   1eb74:	b100      	cbz	r0, 1eb78 <ble_ll_conn_process_conn_params+0x52>
   1eb76:	be01      	bkpt	0x0001
   1eb78:	2300      	movs	r3, #0
   1eb7a:	461a      	mov	r2, r3
   1eb7c:	4619      	mov	r1, r3
   1eb7e:	4618      	mov	r0, r3
   1eb80:	f7f6 f90a 	bl	14d98 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1eb84:	2012      	movs	r0, #18
   1eb86:	e7f2      	b.n	1eb6e <ble_ll_conn_process_conn_params+0x48>
   1eb88:	2012      	movs	r0, #18
   1eb8a:	e7f0      	b.n	1eb6e <ble_ll_conn_process_conn_params+0x48>

0001eb8c <ble_ll_conn_comp_event_send>:
{
   1eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   1eb8e:	2a00      	cmp	r2, #0
   1eb90:	d051      	beq.n	1ec36 <ble_ll_conn_comp_event_send+0xaa>
   1eb92:	4605      	mov	r5, r0
   1eb94:	460f      	mov	r7, r1
   1eb96:	461e      	mov	r6, r3
   1eb98:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   1eb9a:	200a      	movs	r0, #10
   1eb9c:	f002 f88c 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   1eba0:	2800      	cmp	r0, #0
   1eba2:	d06b      	beq.n	1ec7c <ble_ll_conn_comp_event_send+0xf0>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1eba4:	233e      	movs	r3, #62	; 0x3e
   1eba6:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   1eba8:	221f      	movs	r2, #31
   1ebaa:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   1ebac:	2100      	movs	r1, #0
   1ebae:	1ca0      	adds	r0, r4, #2
   1ebb0:	f7f7 ffa1 	bl	16af6 <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   1ebb4:	230a      	movs	r3, #10
   1ebb6:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   1ebb8:	70e7      	strb	r7, [r4, #3]
        if (connsm) {
   1ebba:	b3c5      	cbz	r5, 1ec2e <ble_ll_conn_comp_event_send+0xa2>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   1ebbc:	88ab      	ldrh	r3, [r5, #4]
   1ebbe:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   1ebc0:	79eb      	ldrb	r3, [r5, #7]
   1ebc2:	3b01      	subs	r3, #1
   1ebc4:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   1ebc6:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1ebca:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   1ebcc:	462b      	mov	r3, r5
   1ebce:	f853 2f8f 	ldr.w	r2, [r3, #143]!
   1ebd2:	60a2      	str	r2, [r4, #8]
   1ebd4:	889b      	ldrh	r3, [r3, #4]
   1ebd6:	81a3      	strh	r3, [r4, #12]
            switch (connsm->conn_role) {
   1ebd8:	79eb      	ldrb	r3, [r5, #7]
   1ebda:	2b02      	cmp	r3, #2
   1ebdc:	d135      	bne.n	1ec4a <ble_ll_conn_comp_event_send+0xbe>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   1ebde:	4630      	mov	r0, r6
   1ebe0:	f7fe fe88 	bl	1d8f4 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   1ebe4:	b120      	cbz	r0, 1ebf0 <ble_ll_conn_comp_event_send+0x64>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   1ebe6:	6802      	ldr	r2, [r0, #0]
   1ebe8:	f8c4 200e 	str.w	r2, [r4, #14]
   1ebec:	8883      	ldrh	r3, [r0, #4]
   1ebee:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_resolved) {
   1ebf0:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
   1ebf4:	b113      	cbz	r3, 1ebfc <ble_ll_conn_comp_event_send+0x70>
                 enh_ev->peer_addr_type += 2;
   1ebf6:	79e3      	ldrb	r3, [r4, #7]
   1ebf8:	3302      	adds	r3, #2
   1ebfa:	71e3      	strb	r3, [r4, #7]
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   1ebfc:	79e3      	ldrb	r3, [r4, #7]
   1ebfe:	2b01      	cmp	r3, #1
   1ec00:	d909      	bls.n	1ec16 <ble_ll_conn_comp_event_send+0x8a>
                 switch (connsm->conn_role) {
   1ec02:	79eb      	ldrb	r3, [r5, #7]
   1ec04:	2b02      	cmp	r3, #2
   1ec06:	d12a      	bne.n	1ec5e <ble_ll_conn_comp_event_send+0xd2>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   1ec08:	4630      	mov	r0, r6
   1ec0a:	f7fe fe89 	bl	1d920 <ble_ll_adv_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   1ec0e:	6803      	ldr	r3, [r0, #0]
   1ec10:	6163      	str	r3, [r4, #20]
   1ec12:	8883      	ldrh	r3, [r0, #4]
   1ec14:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   1ec16:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   1ec1a:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->periph_latency);
   1ec1c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   1ec20:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   1ec22:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   1ec26:	83e3      	strh	r3, [r4, #30]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1ec28:	79eb      	ldrb	r3, [r5, #7]
   1ec2a:	2b02      	cmp	r3, #2
   1ec2c:	d021      	beq.n	1ec72 <ble_ll_conn_comp_event_send+0xe6>
        ble_ll_hci_event_send(hci_ev);
   1ec2e:	4620      	mov	r0, r4
   1ec30:	f001 ff72 	bl	20b18 <ble_ll_hci_event_send>
}
   1ec34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(evbuf);
   1ec36:	f7f5 fd0d 	bl	14654 <hal_debugger_connected>
   1ec3a:	b100      	cbz	r0, 1ec3e <ble_ll_conn_comp_event_send+0xb2>
   1ec3c:	be01      	bkpt	0x0001
   1ec3e:	2300      	movs	r3, #0
   1ec40:	461a      	mov	r2, r3
   1ec42:	4619      	mov	r1, r3
   1ec44:	4618      	mov	r0, r3
   1ec46:	f7f6 f8a7 	bl	14d98 <__assert_func>
                BLE_LL_ASSERT(0);
   1ec4a:	f7f5 fd03 	bl	14654 <hal_debugger_connected>
   1ec4e:	b100      	cbz	r0, 1ec52 <ble_ll_conn_comp_event_send+0xc6>
   1ec50:	be01      	bkpt	0x0001
   1ec52:	2300      	movs	r3, #0
   1ec54:	461a      	mov	r2, r3
   1ec56:	4619      	mov	r1, r3
   1ec58:	4618      	mov	r0, r3
   1ec5a:	f7f6 f89d 	bl	14d98 <__assert_func>
                     BLE_LL_ASSERT(0);
   1ec5e:	f7f5 fcf9 	bl	14654 <hal_debugger_connected>
   1ec62:	b100      	cbz	r0, 1ec66 <ble_ll_conn_comp_event_send+0xda>
   1ec64:	be01      	bkpt	0x0001
   1ec66:	2300      	movs	r3, #0
   1ec68:	461a      	mov	r2, r3
   1ec6a:	4619      	mov	r1, r3
   1ec6c:	4618      	mov	r0, r3
   1ec6e:	f7f6 f893 	bl	14d98 <__assert_func>
                enh_ev->mca = connsm->central_sca;
   1ec72:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1ec76:	f884 3020 	strb.w	r3, [r4, #32]
   1ec7a:	e7d8      	b.n	1ec2e <ble_ll_conn_comp_event_send+0xa2>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   1ec7c:	2001      	movs	r0, #1
   1ec7e:	f002 f81b 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   1ec82:	b918      	cbnz	r0, 1ec8c <ble_ll_conn_comp_event_send+0x100>
    ble_hci_trans_buf_free(evbuf);
   1ec84:	4620      	mov	r0, r4
   1ec86:	f00e fd19 	bl	2d6bc <ble_hci_trans_buf_free>
   1ec8a:	e7d3      	b.n	1ec34 <ble_ll_conn_comp_event_send+0xa8>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1ec8c:	233e      	movs	r3, #62	; 0x3e
   1ec8e:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   1ec90:	2313      	movs	r3, #19
   1ec92:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   1ec94:	2300      	movs	r3, #0
   1ec96:	f8c4 3002 	str.w	r3, [r4, #2]
   1ec9a:	f8c4 3006 	str.w	r3, [r4, #6]
   1ec9e:	f8c4 300a 	str.w	r3, [r4, #10]
   1eca2:	f8c4 300e 	str.w	r3, [r4, #14]
   1eca6:	f8c4 3011 	str.w	r3, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   1ecaa:	2301      	movs	r3, #1
   1ecac:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   1ecae:	70e7      	strb	r7, [r4, #3]
        if (connsm) {
   1ecb0:	b1cd      	cbz	r5, 1ece6 <ble_ll_conn_comp_event_send+0x15a>
            ev->conn_handle = htole16(connsm->conn_handle);
   1ecb2:	88ab      	ldrh	r3, [r5, #4]
   1ecb4:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   1ecb6:	79eb      	ldrb	r3, [r5, #7]
   1ecb8:	3b01      	subs	r3, #1
   1ecba:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   1ecbc:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1ecc0:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   1ecc2:	462b      	mov	r3, r5
   1ecc4:	f853 2f8f 	ldr.w	r2, [r3, #143]!
   1ecc8:	60a2      	str	r2, [r4, #8]
   1ecca:	889b      	ldrh	r3, [r3, #4]
   1eccc:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   1ecce:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   1ecd2:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->periph_latency);
   1ecd4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   1ecd8:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   1ecda:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   1ecde:	8263      	strh	r3, [r4, #18]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1ece0:	79eb      	ldrb	r3, [r5, #7]
   1ece2:	2b02      	cmp	r3, #2
   1ece4:	d003      	beq.n	1ecee <ble_ll_conn_comp_event_send+0x162>
        ble_ll_hci_event_send(hci_ev);
   1ece6:	4620      	mov	r0, r4
   1ece8:	f001 ff16 	bl	20b18 <ble_ll_hci_event_send>
        return;
   1ecec:	e7a2      	b.n	1ec34 <ble_ll_conn_comp_event_send+0xa8>
                ev->mca = connsm->central_sca;
   1ecee:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1ecf2:	7523      	strb	r3, [r4, #20]
   1ecf4:	e7f7      	b.n	1ece6 <ble_ll_conn_comp_event_send+0x15a>
	...

0001ecf8 <ble_ll_conn_num_comp_pkts_event_send>:
{
   1ecf8:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   1ecfa:	b138      	cbz	r0, 1ed0c <ble_ll_conn_num_comp_pkts_event_send+0x14>
   1ecfc:	4604      	mov	r4, r0
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   1ecfe:	f7f7 fc3b 	bl	16578 <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   1ed02:	4b35      	ldr	r3, [pc, #212]	; (1edd8 <ble_ll_conn_num_comp_pkts_event_send+0xe0>)
   1ed04:	681b      	ldr	r3, [r3, #0]
   1ed06:	1ac0      	subs	r0, r0, r3
   1ed08:	28ff      	cmp	r0, #255	; 0xff
   1ed0a:	d905      	bls.n	1ed18 <ble_ll_conn_num_comp_pkts_event_send+0x20>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1ed0c:	4b33      	ldr	r3, [pc, #204]	; (1eddc <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   1ed0e:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   1ed10:	2600      	movs	r6, #0
    hci_ev = NULL;
   1ed12:	4630      	mov	r0, r6
    ev = NULL;
   1ed14:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1ed16:	e035      	b.n	1ed84 <ble_ll_conn_num_comp_pkts_event_send+0x8c>
        if (connsm->completed_pkts) {
   1ed18:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1ed1c:	2b00      	cmp	r3, #0
   1ed1e:	d056      	beq.n	1edce <ble_ll_conn_num_comp_pkts_event_send+0xd6>
            hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1ed20:	2002      	movs	r0, #2
   1ed22:	f00e fca3 	bl	2d66c <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   1ed26:	2800      	cmp	r0, #0
   1ed28:	d051      	beq.n	1edce <ble_ll_conn_num_comp_pkts_event_send+0xd6>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   1ed2a:	2213      	movs	r2, #19
   1ed2c:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   1ed2e:	2201      	movs	r2, #1
   1ed30:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   1ed32:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   1ed34:	88a2      	ldrh	r2, [r4, #4]
   1ed36:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   1ed3a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   1ed3e:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   1ed42:	2205      	movs	r2, #5
   1ed44:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   1ed46:	2200      	movs	r2, #0
   1ed48:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
                ble_ll_hci_event_send(hci_ev);
   1ed4c:	f001 fee4 	bl	20b18 <ble_ll_hci_event_send>
        return;
   1ed50:	e03d      	b.n	1edce <ble_ll_conn_num_comp_pkts_event_send+0xd6>
            if (!hci_ev) {
   1ed52:	b320      	cbz	r0, 1ed9e <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   1ed54:	782b      	ldrb	r3, [r5, #0]
   1ed56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1ed5a:	88a2      	ldrh	r2, [r4, #4]
   1ed5c:	f8a3 2001 	strh.w	r2, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   1ed60:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   1ed64:	f8a3 2003 	strh.w	r2, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   1ed68:	7843      	ldrb	r3, [r0, #1]
   1ed6a:	3304      	adds	r3, #4
   1ed6c:	7043      	strb	r3, [r0, #1]
            ev->count++;
   1ed6e:	782b      	ldrb	r3, [r5, #0]
   1ed70:	3301      	adds	r3, #1
   1ed72:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   1ed74:	2300      	movs	r3, #0
   1ed76:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (ev->count == max_handles) {
   1ed7a:	782b      	ldrb	r3, [r5, #0]
   1ed7c:	2b11      	cmp	r3, #17
   1ed7e:	d01a      	beq.n	1edb6 <ble_ll_conn_num_comp_pkts_event_send+0xbe>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1ed80:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   1ed84:	b1e4      	cbz	r4, 1edc0 <ble_ll_conn_num_comp_pkts_event_send+0xc8>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   1ed86:	79a3      	ldrb	r3, [r4, #6]
   1ed88:	2b00      	cmp	r3, #0
   1ed8a:	d0f9      	beq.n	1ed80 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   1ed8c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   1ed90:	2b00      	cmp	r3, #0
   1ed92:	d1de      	bne.n	1ed52 <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   1ed94:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1ed98:	2b00      	cmp	r3, #0
   1ed9a:	d1da      	bne.n	1ed52 <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   1ed9c:	e7f0      	b.n	1ed80 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1ed9e:	2002      	movs	r0, #2
   1eda0:	f00e fc64 	bl	2d66c <ble_hci_trans_buf_alloc>
                if (!hci_ev) {
   1eda4:	b160      	cbz	r0, 1edc0 <ble_ll_conn_num_comp_pkts_event_send+0xc8>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   1eda6:	2313      	movs	r3, #19
   1eda8:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   1edaa:	2301      	movs	r3, #1
   1edac:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   1edae:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   1edb0:	2300      	movs	r3, #0
   1edb2:	7083      	strb	r3, [r0, #2]
   1edb4:	e7ce      	b.n	1ed54 <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   1edb6:	f001 feaf 	bl	20b18 <ble_ll_hci_event_send>
                event_sent = 1;
   1edba:	2601      	movs	r6, #1
                hci_ev = NULL;
   1edbc:	2000      	movs	r0, #0
   1edbe:	e7df      	b.n	1ed80 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   1edc0:	b130      	cbz	r0, 1edd0 <ble_ll_conn_num_comp_pkts_event_send+0xd8>
        ble_ll_hci_event_send(hci_ev);
   1edc2:	f001 fea9 	bl	20b18 <ble_ll_hci_event_send>
   1edc6:	f7f7 fbd7 	bl	16578 <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   1edca:	4b03      	ldr	r3, [pc, #12]	; (1edd8 <ble_ll_conn_num_comp_pkts_event_send+0xe0>)
   1edcc:	6018      	str	r0, [r3, #0]
}
   1edce:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   1edd0:	2e00      	cmp	r6, #0
   1edd2:	d0fc      	beq.n	1edce <ble_ll_conn_num_comp_pkts_event_send+0xd6>
   1edd4:	e7f7      	b.n	1edc6 <ble_ll_conn_num_comp_pkts_event_send+0xce>
   1edd6:	bf00      	nop
   1edd8:	100024f8 	.word	0x100024f8
   1eddc:	1000232c 	.word	0x1000232c

0001ede0 <ble_ll_auth_pyld_tmo_event_send>:
{
   1ede0:	b510      	push	{r4, lr}
   1ede2:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   1ede4:	2057      	movs	r0, #87	; 0x57
   1ede6:	f001 ff8b 	bl	20d00 <ble_ll_hci_is_event_enabled>
   1edea:	b900      	cbnz	r0, 1edee <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   1edec:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1edee:	2002      	movs	r0, #2
   1edf0:	f00e fc3c 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1edf4:	2800      	cmp	r0, #0
   1edf6:	d0f9      	beq.n	1edec <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   1edf8:	2257      	movs	r2, #87	; 0x57
   1edfa:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1edfc:	2202      	movs	r2, #2
   1edfe:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   1ee00:	88a2      	ldrh	r2, [r4, #4]
   1ee02:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   1ee04:	f001 fe88 	bl	20b18 <ble_ll_hci_event_send>
}
   1ee08:	e7f0      	b.n	1edec <ble_ll_auth_pyld_tmo_event_send+0xc>

0001ee0a <ble_ll_disconn_comp_event_send>:
{
   1ee0a:	b538      	push	{r3, r4, r5, lr}
   1ee0c:	4605      	mov	r5, r0
   1ee0e:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   1ee10:	2005      	movs	r0, #5
   1ee12:	f001 ff75 	bl	20d00 <ble_ll_hci_is_event_enabled>
   1ee16:	b900      	cbnz	r0, 1ee1a <ble_ll_disconn_comp_event_send+0x10>
}
   1ee18:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1ee1a:	2002      	movs	r0, #2
   1ee1c:	f00e fc26 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1ee20:	2800      	cmp	r0, #0
   1ee22:	d0f9      	beq.n	1ee18 <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   1ee24:	2205      	movs	r2, #5
   1ee26:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1ee28:	2204      	movs	r2, #4
   1ee2a:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   1ee2c:	2200      	movs	r2, #0
   1ee2e:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   1ee30:	88aa      	ldrh	r2, [r5, #4]
   1ee32:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   1ee36:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   1ee38:	f001 fe6e 	bl	20b18 <ble_ll_hci_event_send>
}
   1ee3c:	e7ec      	b.n	1ee18 <ble_ll_disconn_comp_event_send+0xe>

0001ee3e <ble_ll_conn_hci_read_rem_features>:
ble_ll_conn_hci_read_rem_features(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rd_rem_feat_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   1ee3e:	2902      	cmp	r1, #2
   1ee40:	d001      	beq.n	1ee46 <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ee42:	2012      	movs	r0, #18
    }

    connsm->csmflags.cfbit.pending_hci_rd_features = 1;

    return BLE_ERR_SUCCESS;
}
   1ee44:	4770      	bx	lr
{
   1ee46:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   1ee48:	8800      	ldrh	r0, [r0, #0]
   1ee4a:	f7fe fed9 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1ee4e:	4604      	mov	r4, r0
   1ee50:	b308      	cbz	r0, 1ee96 <ble_ll_conn_hci_read_rem_features+0x58>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1ee52:	78c3      	ldrb	r3, [r0, #3]
   1ee54:	f013 0f10 	tst.w	r3, #16
   1ee58:	d11f      	bne.n	1ee9a <ble_ll_conn_hci_read_rem_features+0x5c>
    if (!connsm->csmflags.cfbit.rxd_features &&
   1ee5a:	f013 0f08 	tst.w	r3, #8
   1ee5e:	d10b      	bne.n	1ee78 <ble_ll_conn_hci_read_rem_features+0x3a>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   1ee60:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    if (!connsm->csmflags.cfbit.rxd_features &&
   1ee64:	f013 0f08 	tst.w	r3, #8
   1ee68:	d106      	bne.n	1ee78 <ble_ll_conn_hci_read_rem_features+0x3a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) &&
   1ee6a:	79c3      	ldrb	r3, [r0, #7]
   1ee6c:	2b02      	cmp	r3, #2
   1ee6e:	d009      	beq.n	1ee84 <ble_ll_conn_hci_read_rem_features+0x46>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   1ee70:	2103      	movs	r1, #3
   1ee72:	4620      	mov	r0, r4
   1ee74:	f000 ff38 	bl	1fce8 <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   1ee78:	78e3      	ldrb	r3, [r4, #3]
   1ee7a:	f043 0310 	orr.w	r3, r3, #16
   1ee7e:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   1ee80:	2000      	movs	r0, #0
}
   1ee82:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_PERIPH_INIT)) {
   1ee84:	f7fd fd58 	bl	1c938 <ble_ll_read_supp_features>
   1ee88:	f000 0208 	and.w	r2, r0, #8
   1ee8c:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) &&
   1ee8e:	4313      	orrs	r3, r2
   1ee90:	d1ee      	bne.n	1ee70 <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   1ee92:	200c      	movs	r0, #12
   1ee94:	e7f5      	b.n	1ee82 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_UNK_CONN_ID;
   1ee96:	2002      	movs	r0, #2
   1ee98:	e7f3      	b.n	1ee82 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_CMD_DISALLOWED;
   1ee9a:	200c      	movs	r0, #12
   1ee9c:	e7f1      	b.n	1ee82 <ble_ll_conn_hci_read_rem_features+0x44>

0001ee9e <ble_ll_conn_hci_update>:
 *
 * @return int
 */
int
ble_ll_conn_hci_update(const uint8_t *cmdbuf, uint8_t len)
{
   1ee9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eea0:	4605      	mov	r5, r0
     * getting an UNKOWN_RSP ctrl pdu and resorting to use normal
     * connection update procedure.
     */

    /* If no connection handle exit with error */
    handle = le16toh(cmd->conn_handle);
   1eea2:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1eea4:	b2b8      	uxth	r0, r7
   1eea6:	f7fe feab 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1eeaa:	2800      	cmp	r0, #0
   1eeac:	d056      	beq.n	1ef5c <ble_ll_conn_hci_update+0xbe>
   1eeae:	4604      	mov	r4, r0
        return BLE_ERR_UNK_CONN_ID;
    }

    /* Better not have this procedure ongoing! */
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   1eeb0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1eeb4:	f013 0f41 	tst.w	r3, #65	; 0x41
   1eeb8:	d152      	bne.n	1ef60 <ble_ll_conn_hci_update+0xc2>
        IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
        return BLE_ERR_CMD_DISALLOWED;
    }

    /* See if this feature is supported on both sides */
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   1eeba:	f890 103b 	ldrb.w	r1, [r0, #59]	; 0x3b
   1eebe:	f011 0602 	ands.w	r6, r1, #2
   1eec2:	d104      	bne.n	1eece <ble_ll_conn_hci_update+0x30>
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1eec4:	79c3      	ldrb	r3, [r0, #7]
   1eec6:	2b02      	cmp	r3, #2
   1eec8:	d102      	bne.n	1eed0 <ble_ll_conn_hci_update+0x32>
            return BLE_ERR_UNSUPP_REM_FEATURE;
   1eeca:	251a      	movs	r5, #26
   1eecc:	e008      	b.n	1eee0 <ble_ll_conn_hci_update+0x42>
        }
#endif
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
    } else {
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   1eece:	2606      	movs	r6, #6
     * If we are a peripheral and the central has initiated the procedure already
     * we should deny the peripheral request for now. If we are a central and the
     * peripheral has initiated the procedure, we need to send a reject to the
     * peripheral.
     */
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1eed0:	7823      	ldrb	r3, [r4, #0]
   1eed2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1eed6:	d00f      	beq.n	1eef8 <ble_ll_conn_hci_update+0x5a>
        switch (connsm->conn_role) {
   1eed8:	79e3      	ldrb	r3, [r4, #7]
   1eeda:	2b02      	cmp	r3, #2
   1eedc:	d102      	bne.n	1eee4 <ble_ll_conn_hci_update+0x46>
                                        BLE_ERR_LMP_COLLISION);
            break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        case BLE_LL_CONN_ROLE_PERIPHERAL:
            return BLE_ERR_LMP_COLLISION;
   1eede:	2523      	movs	r5, #35	; 0x23
        /* Start the control procedure */
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
    }

    return rc;
}
   1eee0:	4628      	mov	r0, r5
   1eee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            BLE_LL_ASSERT(0);
   1eee4:	f7f5 fbb6 	bl	14654 <hal_debugger_connected>
   1eee8:	b100      	cbz	r0, 1eeec <ble_ll_conn_hci_update+0x4e>
   1eeea:	be01      	bkpt	0x0001
   1eeec:	2300      	movs	r3, #0
   1eeee:	461a      	mov	r2, r3
   1eef0:	4619      	mov	r1, r3
   1eef2:	4618      	mov	r0, r3
   1eef4:	f7f5 ff50 	bl	14d98 <__assert_func>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   1eef8:	7863      	ldrb	r3, [r4, #1]
   1eefa:	f013 0f10 	tst.w	r3, #16
   1eefe:	d002      	beq.n	1ef06 <ble_ll_conn_hci_update+0x68>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1ef00:	79e3      	ldrb	r3, [r4, #7]
   1ef02:	2b02      	cmp	r3, #2
   1ef04:	d02e      	beq.n	1ef64 <ble_ll_conn_hci_update+0xc6>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   1ef06:	886b      	ldrh	r3, [r5, #2]
   1ef08:	b298      	uxth	r0, r3
   1ef0a:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   1ef0e:	88ab      	ldrh	r3, [r5, #4]
   1ef10:	b299      	uxth	r1, r3
   1ef12:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   1ef16:	88eb      	ldrh	r3, [r5, #6]
   1ef18:	b29a      	uxth	r2, r3
   1ef1a:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   1ef1e:	f8b5 c008 	ldrh.w	ip, [r5, #8]
   1ef22:	fa1f f38c 	uxth.w	r3, ip
   1ef26:	f8a4 c170 	strh.w	ip, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   1ef2a:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
   1ef2e:	fa1f fe8c 	uxth.w	lr, ip
   1ef32:	f8a4 c172 	strh.w	ip, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   1ef36:	89ad      	ldrh	r5, [r5, #12]
   1ef38:	fa1f fc85 	uxth.w	ip, r5
   1ef3c:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   1ef40:	45e6      	cmp	lr, ip
   1ef42:	d811      	bhi.n	1ef68 <ble_ll_conn_hci_update+0xca>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   1ef44:	f7ff fdc4 	bl	1ead0 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   1ef48:	4605      	mov	r5, r0
   1ef4a:	2800      	cmp	r0, #0
   1ef4c:	d1c8      	bne.n	1eee0 <ble_ll_conn_hci_update+0x42>
        hcu->handle = handle;
   1ef4e:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   1ef52:	4631      	mov	r1, r6
   1ef54:	4620      	mov	r0, r4
   1ef56:	f000 fec7 	bl	1fce8 <ble_ll_ctrl_proc_start>
   1ef5a:	e7c1      	b.n	1eee0 <ble_ll_conn_hci_update+0x42>
        return BLE_ERR_UNK_CONN_ID;
   1ef5c:	2502      	movs	r5, #2
   1ef5e:	e7bf      	b.n	1eee0 <ble_ll_conn_hci_update+0x42>
        return BLE_ERR_CMD_DISALLOWED;
   1ef60:	250c      	movs	r5, #12
   1ef62:	e7bd      	b.n	1eee0 <ble_ll_conn_hci_update+0x42>
            return BLE_ERR_DIFF_TRANS_COLL;
   1ef64:	252a      	movs	r5, #42	; 0x2a
   1ef66:	e7bb      	b.n	1eee0 <ble_ll_conn_hci_update+0x42>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ef68:	2512      	movs	r5, #18
   1ef6a:	e7b9      	b.n	1eee0 <ble_ll_conn_hci_update+0x42>

0001ef6c <ble_ll_conn_hci_param_rr>:

int
ble_ll_conn_hci_param_rr(const uint8_t *cmdbuf, uint8_t len,
                         uint8_t *rspbuf, uint8_t *rsplen)
{
   1ef6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t rsp_opcode;
    uint16_t handle;
    struct os_mbuf *om;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   1ef70:	290e      	cmp	r1, #14
   1ef72:	d003      	beq.n	1ef7c <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ef74:	2412      	movs	r4, #18
done:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   1ef76:	4620      	mov	r0, r4
   1ef78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ef7c:	4604      	mov	r4, r0
   1ef7e:	4616      	mov	r6, r2
   1ef80:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   1ef82:	8807      	ldrh	r7, [r0, #0]
   1ef84:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   1ef88:	f7fd fcd6 	bl	1c938 <ble_ll_read_supp_features>
   1ef8c:	f000 0202 	and.w	r2, r0, #2
   1ef90:	2300      	movs	r3, #0
   1ef92:	4313      	orrs	r3, r2
   1ef94:	d104      	bne.n	1efa0 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1ef96:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   1ef98:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   1ef9a:	2302      	movs	r3, #2
   1ef9c:	702b      	strb	r3, [r5, #0]
    return rc;
   1ef9e:	e7ea      	b.n	1ef76 <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_active_conn(handle);
   1efa0:	4640      	mov	r0, r8
   1efa2:	f7fe fe2d 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1efa6:	4680      	mov	r8, r0
   1efa8:	b388      	cbz	r0, 1f00e <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   1efaa:	4601      	mov	r1, r0
   1efac:	4620      	mov	r0, r4
   1efae:	f7ff fdba 	bl	1eb26 <ble_ll_conn_process_conn_params>
   1efb2:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1efb4:	f898 3000 	ldrb.w	r3, [r8]
   1efb8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1efbc:	d0ec      	beq.n	1ef98 <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   1efbe:	b9c8      	cbnz	r0, 1eff4 <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   1efc0:	2110      	movs	r1, #16
   1efc2:	201b      	movs	r0, #27
   1efc4:	f7f6 ffdc 	bl	15f80 <os_msys_get_pkthdr>
            if (om) {
   1efc8:	4681      	mov	r9, r0
   1efca:	b1c8      	cbz	r0, 1f000 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   1efcc:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   1efd0:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   1efd4:	4651      	mov	r1, sl
   1efd6:	4640      	mov	r0, r8
   1efd8:	f000 fd74 	bl	1fac4 <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   1efdc:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   1efe0:	4b0c      	ldr	r3, [pc, #48]	; (1f014 <ble_ll_conn_hci_param_rr+0xa8>)
   1efe2:	5c1b      	ldrb	r3, [r3, r0]
   1efe4:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   1efe6:	b2db      	uxtb	r3, r3
   1efe8:	2203      	movs	r2, #3
   1efea:	4649      	mov	r1, r9
   1efec:	4640      	mov	r0, r8
   1efee:	f7ff fb5b 	bl	1e6a8 <ble_ll_conn_enqueue_pkt>
   1eff2:	e005      	b.n	1f000 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   1eff4:	223b      	movs	r2, #59	; 0x3b
   1eff6:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
   1effa:	4640      	mov	r0, r8
   1effc:	f001 fa0c 	bl	20418 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   1f000:	f898 3000 	ldrb.w	r3, [r8]
   1f004:	f36f 1386 	bfc	r3, #6, #1
   1f008:	f888 3000 	strb.w	r3, [r8]
   1f00c:	e7c4      	b.n	1ef98 <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   1f00e:	2402      	movs	r4, #2
   1f010:	e7c2      	b.n	1ef98 <ble_ll_conn_hci_param_rr+0x2c>
   1f012:	bf00      	nop
   1f014:	00034708 	.word	0x00034708

0001f018 <ble_ll_conn_hci_param_nrr>:
    struct ble_hci_le_rem_conn_params_nrr_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   1f018:	2903      	cmp	r1, #3
   1f01a:	d001      	beq.n	1f020 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f01c:	2012      	movs	r0, #18
done:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   1f01e:	4770      	bx	lr
{
   1f020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f024:	4606      	mov	r6, r0
   1f026:	4615      	mov	r5, r2
   1f028:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   1f02a:	8807      	ldrh	r7, [r0, #0]
   1f02c:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   1f030:	f7fd fc82 	bl	1c938 <ble_ll_read_supp_features>
   1f034:	f000 0202 	and.w	r2, r0, #2
   1f038:	2300      	movs	r3, #0
   1f03a:	4313      	orrs	r3, r2
   1f03c:	d105      	bne.n	1f04a <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1f03e:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   1f040:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   1f042:	2302      	movs	r3, #2
   1f044:	7023      	strb	r3, [r4, #0]
}
   1f046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   1f04a:	4640      	mov	r0, r8
   1f04c:	f7fe fdd8 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f050:	4680      	mov	r8, r0
   1f052:	b190      	cbz	r0, 1f07a <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1f054:	7803      	ldrb	r3, [r0, #0]
   1f056:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f05a:	d101      	bne.n	1f060 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   1f05c:	2000      	movs	r0, #0
   1f05e:	e7ef      	b.n	1f040 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   1f060:	78b2      	ldrb	r2, [r6, #2]
   1f062:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   1f066:	f001 f9d7 	bl	20418 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   1f06a:	f898 3000 	ldrb.w	r3, [r8]
   1f06e:	f36f 1386 	bfc	r3, #6, #1
   1f072:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   1f076:	2000      	movs	r0, #0
   1f078:	e7e2      	b.n	1f040 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   1f07a:	2002      	movs	r0, #2
   1f07c:	e7e0      	b.n	1f040 <ble_ll_conn_hci_param_nrr+0x28>

0001f07e <ble_ll_conn_hci_disconnect_cmd>:
 *
 * @return int
 */
int
ble_ll_conn_hci_disconnect_cmd(const struct ble_hci_lc_disconnect_cp *cmd)
{
   1f07e:	b510      	push	{r4, lr}
   1f080:	4604      	mov	r4, r0
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   1f082:	8800      	ldrh	r0, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   1f084:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   1f088:	d23b      	bcs.n	1f102 <ble_ll_conn_hci_disconnect_cmd+0x84>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   1f08a:	78a3      	ldrb	r3, [r4, #2]
   1f08c:	2b29      	cmp	r3, #41	; 0x29
   1f08e:	d819      	bhi.n	1f0c4 <ble_ll_conn_hci_disconnect_cmd+0x46>
   1f090:	2b05      	cmp	r3, #5
   1f092:	d338      	bcc.n	1f106 <ble_ll_conn_hci_disconnect_cmd+0x88>
   1f094:	3b05      	subs	r3, #5
   1f096:	2b24      	cmp	r3, #36	; 0x24
   1f098:	d837      	bhi.n	1f10a <ble_ll_conn_hci_disconnect_cmd+0x8c>
   1f09a:	e8df f003 	tbb	[pc, r3]
   1f09e:	3617      	.short	0x3617
   1f0a0:	36363636 	.word	0x36363636
   1f0a4:	36363636 	.word	0x36363636
   1f0a8:	36363636 	.word	0x36363636
   1f0ac:	36171717 	.word	0x36171717
   1f0b0:	17363636 	.word	0x17363636
   1f0b4:	36363636 	.word	0x36363636
   1f0b8:	36363636 	.word	0x36363636
   1f0bc:	36363636 	.word	0x36363636
   1f0c0:	3636      	.short	0x3636
   1f0c2:	17          	.byte	0x17
   1f0c3:	00          	.byte	0x00
   1f0c4:	2b3b      	cmp	r3, #59	; 0x3b
   1f0c6:	d001      	beq.n	1f0cc <ble_ll_conn_hci_disconnect_cmd+0x4e>
   1f0c8:	2012      	movs	r0, #18
            break;
        }
    }

    return rc;
}
   1f0ca:	bd10      	pop	{r4, pc}
            connsm = ble_ll_conn_find_active_conn(handle);
   1f0cc:	f7fe fd98 	bl	1dc00 <ble_ll_conn_find_active_conn>
            if (connsm) {
   1f0d0:	b1e8      	cbz	r0, 1f10e <ble_ll_conn_hci_disconnect_cmd+0x90>
                if (connsm->disconnect_reason) {
   1f0d2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   1f0d6:	b9e2      	cbnz	r2, 1f112 <ble_ll_conn_hci_disconnect_cmd+0x94>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   1f0d8:	f990 2000 	ldrsb.w	r2, [r0]
   1f0dc:	2a00      	cmp	r2, #0
   1f0de:	db06      	blt.n	1f0ee <ble_ll_conn_hci_disconnect_cmd+0x70>
                    connsm->disconnect_reason = cmd->reason;
   1f0e0:	78a2      	ldrb	r2, [r4, #2]
   1f0e2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
                    ble_ll_ctrl_terminate_start(connsm);
   1f0e6:	f000 fdcd 	bl	1fc84 <ble_ll_ctrl_terminate_start>
                    rc = BLE_ERR_SUCCESS;
   1f0ea:	2000      	movs	r0, #0
   1f0ec:	e7ed      	b.n	1f0ca <ble_ll_conn_hci_disconnect_cmd+0x4c>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   1f0ee:	f7f5 fab1 	bl	14654 <hal_debugger_connected>
   1f0f2:	b100      	cbz	r0, 1f0f6 <ble_ll_conn_hci_disconnect_cmd+0x78>
   1f0f4:	be01      	bkpt	0x0001
   1f0f6:	2300      	movs	r3, #0
   1f0f8:	461a      	mov	r2, r3
   1f0fa:	4619      	mov	r1, r3
   1f0fc:	4618      	mov	r0, r3
   1f0fe:	f7f5 fe4b 	bl	14d98 <__assert_func>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1f102:	2012      	movs	r0, #18
   1f104:	e7e1      	b.n	1f0ca <ble_ll_conn_hci_disconnect_cmd+0x4c>
        switch (cmd->reason) {
   1f106:	2012      	movs	r0, #18
   1f108:	e7df      	b.n	1f0ca <ble_ll_conn_hci_disconnect_cmd+0x4c>
   1f10a:	2012      	movs	r0, #18
   1f10c:	e7dd      	b.n	1f0ca <ble_ll_conn_hci_disconnect_cmd+0x4c>
                rc = BLE_ERR_UNK_CONN_ID;
   1f10e:	2002      	movs	r0, #2
   1f110:	e7db      	b.n	1f0ca <ble_ll_conn_hci_disconnect_cmd+0x4c>
                    rc = BLE_ERR_CMD_DISALLOWED;
   1f112:	200c      	movs	r0, #12
    return rc;
   1f114:	e7d9      	b.n	1f0ca <ble_ll_conn_hci_disconnect_cmd+0x4c>

0001f116 <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   1f116:	2902      	cmp	r1, #2
   1f118:	d001      	beq.n	1f11e <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f11a:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   1f11c:	4770      	bx	lr
{
   1f11e:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   1f120:	8800      	ldrh	r0, [r0, #0]
   1f122:	f7fe fd6d 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f126:	b198      	cbz	r0, 1f150 <ble_ll_conn_hci_rd_rem_ver_cmd+0x3a>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   1f128:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   1f12c:	f012 0f10 	tst.w	r2, #16
   1f130:	d110      	bne.n	1f154 <ble_ll_conn_hci_rd_rem_ver_cmd+0x3e>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   1f132:	7841      	ldrb	r1, [r0, #1]
   1f134:	f011 0f04 	tst.w	r1, #4
   1f138:	d005      	beq.n	1f146 <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   1f13a:	f042 0210 	orr.w	r2, r2, #16
   1f13e:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
    return BLE_ERR_SUCCESS;
   1f142:	2000      	movs	r0, #0
}
   1f144:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   1f146:	2104      	movs	r1, #4
   1f148:	f000 fdce 	bl	1fce8 <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   1f14c:	2000      	movs	r0, #0
   1f14e:	e7f9      	b.n	1f144 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   1f150:	2002      	movs	r0, #2
   1f152:	e7f7      	b.n	1f144 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   1f154:	200c      	movs	r0, #12
   1f156:	e7f5      	b.n	1f144 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

0001f158 <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   1f158:	2902      	cmp	r1, #2
   1f15a:	d001      	beq.n	1f160 <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f15c:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   1f15e:	4770      	bx	lr
{
   1f160:	b538      	push	{r3, r4, r5, lr}
   1f162:	4614      	mov	r4, r2
   1f164:	461d      	mov	r5, r3
    rsp->handle = cmd->handle;
   1f166:	8803      	ldrh	r3, [r0, #0]
   1f168:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->handle));
   1f16a:	8800      	ldrh	r0, [r0, #0]
   1f16c:	f7fe fd48 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f170:	b130      	cbz	r0, 1f180 <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   1f172:	f990 3008 	ldrsb.w	r3, [r0, #8]
   1f176:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   1f178:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   1f17a:	2303      	movs	r3, #3
   1f17c:	702b      	strb	r3, [r5, #0]
}
   1f17e:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   1f180:	237f      	movs	r3, #127	; 0x7f
   1f182:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   1f184:	2002      	movs	r0, #2
   1f186:	e7f8      	b.n	1f17a <ble_ll_conn_hci_rd_rssi+0x22>

0001f188 <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   1f188:	2902      	cmp	r1, #2
   1f18a:	d001      	beq.n	1f190 <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f18c:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   1f18e:	4770      	bx	lr
{
   1f190:	b570      	push	{r4, r5, r6, lr}
   1f192:	4614      	mov	r4, r2
   1f194:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   1f196:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1f198:	b2b0      	uxth	r0, r6
   1f19a:	f7fe fd31 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f19e:	4602      	mov	r2, r0
   1f1a0:	b170      	cbz	r0, 1f1c0 <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   1f1a2:	7843      	ldrb	r3, [r0, #1]
   1f1a4:	f013 0f10 	tst.w	r3, #16
   1f1a8:	d010      	beq.n	1f1cc <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   1f1aa:	f852 3f21 	ldr.w	r3, [r2, #33]!
   1f1ae:	f8c4 3002 	str.w	r3, [r4, #2]
   1f1b2:	7913      	ldrb	r3, [r2, #4]
   1f1b4:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   1f1b6:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   1f1b8:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   1f1ba:	2307      	movs	r3, #7
   1f1bc:	702b      	strb	r3, [r5, #0]
}
   1f1be:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   1f1c0:	2200      	movs	r2, #0
   1f1c2:	f8c4 2002 	str.w	r2, [r4, #2]
   1f1c6:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   1f1c8:	2002      	movs	r0, #2
   1f1ca:	e7f5      	b.n	1f1b8 <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   1f1cc:	f852 3f1c 	ldr.w	r3, [r2, #28]!
   1f1d0:	f8c4 3002 	str.w	r3, [r4, #2]
   1f1d4:	7913      	ldrb	r3, [r2, #4]
   1f1d6:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   1f1d8:	2000      	movs	r0, #0
   1f1da:	e7ed      	b.n	1f1b8 <ble_ll_conn_hci_rd_chan_map+0x30>

0001f1dc <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   1f1dc:	2905      	cmp	r1, #5
   1f1de:	d001      	beq.n	1f1e4 <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f1e0:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   1f1e2:	4770      	bx	lr
{
   1f1e4:	b510      	push	{r4, lr}
   1f1e6:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   1f1e8:	f002 ff1d 	bl	22026 <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   1f1ec:	2801      	cmp	r0, #1
   1f1ee:	d908      	bls.n	1f202 <ble_ll_conn_hci_set_chan_class+0x26>
   1f1f0:	7923      	ldrb	r3, [r4, #4]
   1f1f2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1f1f6:	d106      	bne.n	1f206 <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   1f1f8:	4621      	mov	r1, r4
   1f1fa:	f7ff fac5 	bl	1e788 <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   1f1fe:	2000      	movs	r0, #0
}
   1f200:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f202:	2012      	movs	r0, #18
   1f204:	e7fc      	b.n	1f200 <ble_ll_conn_hci_set_chan_class+0x24>
   1f206:	2012      	movs	r0, #18
   1f208:	e7fa      	b.n	1f200 <ble_ll_conn_hci_set_chan_class+0x24>

0001f20a <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   1f20a:	2906      	cmp	r1, #6
   1f20c:	d001      	beq.n	1f212 <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f20e:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   1f210:	4770      	bx	lr
{
   1f212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f216:	4604      	mov	r4, r0
   1f218:	4616      	mov	r6, r2
   1f21a:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   1f21c:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1f21e:	b2b8      	uxth	r0, r7
   1f220:	f7fe fcee 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f224:	4680      	mov	r8, r0
   1f226:	b320      	cbz	r0, 1f272 <ble_ll_conn_hci_set_data_len+0x68>
    txoctets = le16toh(cmd->tx_octets);
   1f228:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   1f22c:	88a4      	ldrh	r4, [r4, #4]
   1f22e:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   1f232:	4648      	mov	r0, r9
   1f234:	f7fd fab2 	bl	1c79c <ble_ll_chk_txrx_octets>
   1f238:	b928      	cbnz	r0, 1f246 <ble_ll_conn_hci_set_data_len+0x3c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1f23a:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   1f23c:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   1f23e:	2302      	movs	r3, #2
   1f240:	702b      	strb	r3, [r5, #0]
}
   1f242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        !ble_ll_chk_txrx_time(txtime)) {
   1f246:	4650      	mov	r0, sl
   1f248:	f7fd fab0 	bl	1c7ac <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   1f24c:	2800      	cmp	r0, #0
   1f24e:	d0f4      	beq.n	1f23a <ble_ll_conn_hci_set_data_len+0x30>
    if (connsm->max_tx_time != txtime ||
   1f250:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1f254:	4553      	cmp	r3, sl
   1f256:	d103      	bne.n	1f260 <ble_ll_conn_hci_set_data_len+0x56>
        connsm->max_tx_octets != txoctets) {
   1f258:	f898 3009 	ldrb.w	r3, [r8, #9]
    if (connsm->max_tx_time != txtime ||
   1f25c:	454b      	cmp	r3, r9
   1f25e:	d00a      	beq.n	1f276 <ble_ll_conn_hci_set_data_len+0x6c>
        connsm->max_tx_time = txtime;
   1f260:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   1f264:	f888 9009 	strb.w	r9, [r8, #9]
        ble_ll_ctrl_initiate_dle(connsm);
   1f268:	4640      	mov	r0, r8
   1f26a:	f000 fd65 	bl	1fd38 <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   1f26e:	2000      	movs	r0, #0
   1f270:	e7e4      	b.n	1f23c <ble_ll_conn_hci_set_data_len+0x32>
        rc = BLE_ERR_UNK_CONN_ID;
   1f272:	2002      	movs	r0, #2
   1f274:	e7e2      	b.n	1f23c <ble_ll_conn_hci_set_data_len+0x32>
    rc = BLE_ERR_SUCCESS;
   1f276:	2000      	movs	r0, #0
   1f278:	e7e0      	b.n	1f23c <ble_ll_conn_hci_set_data_len+0x32>

0001f27a <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   1f27a:	2912      	cmp	r1, #18
   1f27c:	d001      	beq.n	1f282 <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f27e:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   1f280:	4770      	bx	lr
{
   1f282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f286:	4606      	mov	r6, r0
   1f288:	4615      	mov	r5, r2
   1f28a:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   1f28c:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1f28e:	b2b8      	uxth	r0, r7
   1f290:	f7fe fcb6 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f294:	4680      	mov	r8, r0
   1f296:	b1b8      	cbz	r0, 1f2c8 <ble_ll_conn_hci_le_ltk_reply+0x4e>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   1f298:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1f29c:	2b09      	cmp	r3, #9
   1f29e:	d005      	beq.n	1f2ac <ble_ll_conn_hci_le_ltk_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   1f2a0:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   1f2a2:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   1f2a4:	2302      	movs	r3, #2
   1f2a6:	7023      	strb	r3, [r4, #0]
}
   1f2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   1f2ac:	2210      	movs	r2, #16
   1f2ae:	1cb1      	adds	r1, r6, #2
   1f2b0:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1f2b4:	f012 fe6a 	bl	31f8c <swap_buf>
    ble_ll_calc_session_key(connsm);
   1f2b8:	4640      	mov	r0, r8
   1f2ba:	f000 fbad 	bl	1fa18 <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   1f2be:	4640      	mov	r0, r8
   1f2c0:	f000 fbdf 	bl	1fa82 <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   1f2c4:	2000      	movs	r0, #0
   1f2c6:	e7ec      	b.n	1f2a2 <ble_ll_conn_hci_le_ltk_reply+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   1f2c8:	2002      	movs	r0, #2
   1f2ca:	e7ea      	b.n	1f2a2 <ble_ll_conn_hci_le_ltk_reply+0x28>

0001f2cc <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   1f2cc:	2902      	cmp	r1, #2
   1f2ce:	d001      	beq.n	1f2d4 <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f2d0:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   1f2d2:	4770      	bx	lr
{
   1f2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2d6:	4615      	mov	r5, r2
   1f2d8:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   1f2da:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1f2dc:	b2b0      	uxth	r0, r6
   1f2de:	f7fe fc8f 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f2e2:	4607      	mov	r7, r0
   1f2e4:	b188      	cbz	r0, 1f30a <ble_ll_conn_hci_le_ltk_neg_reply+0x3e>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   1f2e6:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1f2ea:	2b09      	cmp	r3, #9
   1f2ec:	d004      	beq.n	1f2f8 <ble_ll_conn_hci_le_ltk_neg_reply+0x2c>
        rc = BLE_ERR_CMD_DISALLOWED;
   1f2ee:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   1f2f0:	802e      	strh	r6, [r5, #0]
    *rsplen = sizeof(*rsp);
   1f2f2:	2302      	movs	r3, #2
   1f2f4:	7023      	strb	r3, [r4, #0]
}
   1f2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   1f2f8:	2206      	movs	r2, #6
   1f2fa:	2103      	movs	r1, #3
   1f2fc:	f001 f88c 	bl	20418 <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   1f300:	230a      	movs	r3, #10
   1f302:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   1f306:	2000      	movs	r0, #0
   1f308:	e7f2      	b.n	1f2f0 <ble_ll_conn_hci_le_ltk_neg_reply+0x24>
        rc = BLE_ERR_UNK_CONN_ID;
   1f30a:	2002      	movs	r0, #2
   1f30c:	e7f0      	b.n	1f2f0 <ble_ll_conn_hci_le_ltk_neg_reply+0x24>

0001f30e <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   1f30e:	2902      	cmp	r1, #2
   1f310:	d001      	beq.n	1f316 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f312:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   1f314:	4770      	bx	lr
{
   1f316:	b570      	push	{r4, r5, r6, lr}
   1f318:	4614      	mov	r4, r2
   1f31a:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   1f31c:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1f31e:	b2b0      	uxth	r0, r6
   1f320:	f7fe fc6e 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f324:	b138      	cbz	r0, 1f336 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   1f326:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
   1f32a:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   1f32c:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   1f32e:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   1f330:	2304      	movs	r3, #4
   1f332:	702b      	strb	r3, [r5, #0]
}
   1f334:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   1f336:	2300      	movs	r3, #0
   1f338:	70a3      	strb	r3, [r4, #2]
   1f33a:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   1f33c:	2002      	movs	r0, #2
   1f33e:	e7f6      	b.n	1f32e <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>

0001f340 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   1f340:	2904      	cmp	r1, #4
   1f342:	d001      	beq.n	1f348 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f344:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   1f346:	4770      	bx	lr
{
   1f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f34a:	4604      	mov	r4, r0
   1f34c:	4616      	mov	r6, r2
   1f34e:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   1f350:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1f352:	b2b8      	uxth	r0, r7
   1f354:	f7fe fc54 	bl	1dc00 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1f358:	4602      	mov	r2, r0
   1f35a:	b1d8      	cbz	r0, 1f394 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   1f35c:	8860      	ldrh	r0, [r4, #2]
   1f35e:	b284      	uxth	r4, r0
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1f360:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
        min_tmo *= (connsm->periph_latency + 1);
   1f364:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
   1f368:	fb03 1301 	mla	r3, r3, r1, r1
   1f36c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1f370:	fb01 f103 	mul.w	r1, r1, r3
        min_tmo /= 10000;
   1f374:	4b0c      	ldr	r3, [pc, #48]	; (1f3a8 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   1f376:	fba3 3101 	umull	r3, r1, r3, r1
        if (tmo < min_tmo) {
   1f37a:	ebb4 3f51 	cmp.w	r4, r1, lsr #13
   1f37e:	d30b      	bcc.n	1f398 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   1f380:	f8a2 004e 	strh.w	r0, [r2, #78]	; 0x4e
   1f384:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   1f388:	b15b      	cbz	r3, 1f3a2 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   1f38a:	4610      	mov	r0, r2
   1f38c:	f7fe fe97 	bl	1e0be <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   1f390:	2000      	movs	r0, #0
   1f392:	e002      	b.n	1f39a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   1f394:	2002      	movs	r0, #2
   1f396:	e000      	b.n	1f39a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1f398:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   1f39a:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   1f39c:	2302      	movs	r3, #2
   1f39e:	702b      	strb	r3, [r5, #0]
}
   1f3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   1f3a2:	2000      	movs	r0, #0
   1f3a4:	e7f9      	b.n	1f39a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   1f3a6:	bf00      	nop
   1f3a8:	d1b71759 	.word	0xd1b71759

0001f3ac <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   1f3ac:	2801      	cmp	r0, #1
   1f3ae:	d010      	beq.n	1f3d2 <ble_ll_ctrl_enc_allowed_pdu+0x26>
   1f3b0:	2803      	cmp	r0, #3
   1f3b2:	d111      	bne.n	1f3d8 <ble_ll_ctrl_enc_allowed_pdu+0x2c>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   1f3b4:	3a02      	subs	r2, #2
   1f3b6:	2a0f      	cmp	r2, #15
   1f3b8:	d809      	bhi.n	1f3ce <ble_ll_ctrl_enc_allowed_pdu+0x22>
   1f3ba:	e8df f002 	tbb	[pc, r2]
   1f3be:	0f0f      	.short	0x0f0f
   1f3c0:	080f0f0f 	.word	0x080f0f0f
   1f3c4:	0f0f0808 	.word	0x0f0f0808
   1f3c8:	08080f08 	.word	0x08080f08
   1f3cc:	0f08      	.short	0x0f08
    switch (llid) {
   1f3ce:	2000      	movs	r0, #0
   1f3d0:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   1f3d2:	b129      	cbz	r1, 1f3e0 <ble_ll_ctrl_enc_allowed_pdu+0x34>
    allowed = 0;
   1f3d4:	2000      	movs	r0, #0
   1f3d6:	4770      	bx	lr
    switch (llid) {
   1f3d8:	2000      	movs	r0, #0
   1f3da:	4770      	bx	lr
            allowed = 1;
   1f3dc:	2001      	movs	r0, #1
   1f3de:	4770      	bx	lr
            /* Empty PDUs are allowed */
            allowed = 1;
   1f3e0:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   1f3e2:	4770      	bx	lr

0001f3e4 <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if (CONN_IS_PERIPHERAL(connsm) &&
   1f3e4:	79c3      	ldrb	r3, [r0, #7]
   1f3e6:	2b02      	cmp	r3, #2
   1f3e8:	d001      	beq.n	1f3ee <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   1f3ea:	2007      	movs	r0, #7
   1f3ec:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   1f3ee:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if (CONN_IS_PERIPHERAL(connsm) &&
   1f3f2:	2b02      	cmp	r3, #2
   1f3f4:	d001      	beq.n	1f3fa <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   1f3f6:	2007      	movs	r0, #7
   1f3f8:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   1f3fa:	200b      	movs	r0, #11
    }

    return rc;
}
   1f3fc:	4770      	bx	lr

0001f3fe <ble_ll_ctrl_start_rsp_timer>:
{
   1f3fe:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1f400:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   1f404:	30b8      	adds	r0, #184	; 0xb8
   1f406:	f7f5 fea1 	bl	1514c <os_callout_reset>
}
   1f40a:	bd08      	pop	{r3, pc}

0001f40c <ble_ll_ctrl_rx_start_enc_req>:
{
   1f40c:	b508      	push	{r3, lr}
    switch (connsm->conn_role) {
   1f40e:	79c3      	ldrb	r3, [r0, #7]
   1f410:	2b02      	cmp	r3, #2
   1f412:	d101      	bne.n	1f418 <ble_ll_ctrl_rx_start_enc_req+0xc>
}
   1f414:	2007      	movs	r0, #7
   1f416:	bd08      	pop	{r3, pc}
        BLE_LL_ASSERT(0);
   1f418:	f7f5 f91c 	bl	14654 <hal_debugger_connected>
   1f41c:	b100      	cbz	r0, 1f420 <ble_ll_ctrl_rx_start_enc_req+0x14>
   1f41e:	be01      	bkpt	0x0001
   1f420:	2300      	movs	r3, #0
   1f422:	461a      	mov	r2, r3
   1f424:	4619      	mov	r1, r3
   1f426:	4618      	mov	r0, r3
   1f428:	f7f5 fcb6 	bl	14d98 <__assert_func>

0001f42c <ble_ll_ctrl_rx_pause_enc_rsp>:
 *
 * @return uint8_t
 */
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
   1f42c:	b508      	push	{r3, lr}
    int rc;

    switch (connsm->conn_role) {
   1f42e:	79c3      	ldrb	r3, [r0, #7]
   1f430:	2b02      	cmp	r3, #2
   1f432:	d10a      	bne.n	1f44a <ble_ll_ctrl_rx_pause_enc_rsp+0x1e>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
        break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    case BLE_LL_CONN_ROLE_PERIPHERAL:
        if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   1f434:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1f438:	2b05      	cmp	r3, #5
   1f43a:	d001      	beq.n	1f440 <ble_ll_ctrl_rx_pause_enc_rsp+0x14>
                 * From this moment encryption is paused.
                 */
                rc = BLE_ERR_MAX;
                connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
            } else {
                rc = BLE_LL_CTRL_UNKNOWN_RSP;
   1f43c:	2007      	movs	r0, #7
        BLE_LL_ASSERT(0);
        break;
    }

    return rc;
}
   1f43e:	bd08      	pop	{r3, pc}
                connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   1f440:	2306      	movs	r3, #6
   1f442:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
                rc = BLE_ERR_MAX;
   1f446:	20ff      	movs	r0, #255	; 0xff
   1f448:	e7f9      	b.n	1f43e <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
        BLE_LL_ASSERT(0);
   1f44a:	f7f5 f903 	bl	14654 <hal_debugger_connected>
   1f44e:	b100      	cbz	r0, 1f452 <ble_ll_ctrl_rx_pause_enc_rsp+0x26>
   1f450:	be01      	bkpt	0x0001
   1f452:	2300      	movs	r3, #0
   1f454:	461a      	mov	r2, r3
   1f456:	4619      	mov	r1, r3
   1f458:	4618      	mov	r0, r3
   1f45a:	f7f5 fc9d 	bl	14d98 <__assert_func>

0001f45e <ble_ll_ctrl_conn_param_pdu_make>:
 *             of the data.
 */
static void
ble_ll_ctrl_conn_param_pdu_make(struct ble_ll_conn_sm *connsm, uint8_t *dptr,
                                struct ble_ll_conn_params *req)
{
   1f45e:	b570      	push	{r4, r5, r6, lr}
   1f460:	4605      	mov	r5, r0
   1f462:	460c      	mov	r4, r1
    uint16_t offset;
    struct hci_conn_update *hcu;

    /* If we were passed in a request, we use the parameters from the request */
    if (req) {
   1f464:	2a00      	cmp	r2, #0
   1f466:	d03d      	beq.n	1f4e4 <ble_ll_ctrl_conn_param_pdu_make+0x86>
   1f468:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   1f46a:	8811      	ldrh	r1, [r2, #0]
   1f46c:	4620      	mov	r0, r4
   1f46e:	f012 fd35 	bl	31edc <put_le16>
        put_le16(dptr + 2, req->interval_max);
   1f472:	8871      	ldrh	r1, [r6, #2]
   1f474:	1ca0      	adds	r0, r4, #2
   1f476:	f012 fd31 	bl	31edc <put_le16>
        put_le16(dptr + 4, req->latency);
   1f47a:	88b1      	ldrh	r1, [r6, #4]
   1f47c:	1d20      	adds	r0, r4, #4
   1f47e:	f012 fd2d 	bl	31edc <put_le16>
        put_le16(dptr + 6, req->timeout);
   1f482:	88f1      	ldrh	r1, [r6, #6]
   1f484:	1da0      	adds	r0, r4, #6
   1f486:	f012 fd29 	bl	31edc <put_le16>
     * other this value should be set to non-zero. I think this
     * applies only when an offset field is set. See section 5.1.7.1 pg 103
     * Vol 6 Part B.
     */
    /* XXX: for now, set periodicity to 0 */
    dptr[8] = 0;
   1f48a:	2300      	movs	r3, #0
   1f48c:	7223      	strb	r3, [r4, #8]

    /* XXX: deal with reference event count. what to put here? */
    put_le16(dptr + 9, connsm->event_cntr);
   1f48e:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
   1f492:	f104 0009 	add.w	r0, r4, #9
   1f496:	f012 fd21 	bl	31edc <put_le16>

    /* XXX: For now, dont use offsets */
    offset = 0xFFFF;
    put_le16(dptr + 11, offset);
   1f49a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f49e:	f104 000b 	add.w	r0, r4, #11
   1f4a2:	f012 fd1b 	bl	31edc <put_le16>
    put_le16(dptr + 13, offset);
   1f4a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f4aa:	f104 000d 	add.w	r0, r4, #13
   1f4ae:	f012 fd15 	bl	31edc <put_le16>
    put_le16(dptr + 15, offset);
   1f4b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f4b6:	f104 000f 	add.w	r0, r4, #15
   1f4ba:	f012 fd0f 	bl	31edc <put_le16>
    put_le16(dptr + 17, offset);
   1f4be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f4c2:	f104 0011 	add.w	r0, r4, #17
   1f4c6:	f012 fd09 	bl	31edc <put_le16>
    put_le16(dptr + 19, offset);
   1f4ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f4ce:	f104 0013 	add.w	r0, r4, #19
   1f4d2:	f012 fd03 	bl	31edc <put_le16>
    put_le16(dptr + 21, offset);
   1f4d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f4da:	f104 0015 	add.w	r0, r4, #21
   1f4de:	f012 fcfd 	bl	31edc <put_le16>
}
   1f4e2:	bd70      	pop	{r4, r5, r6, pc}
        BLE_LL_ASSERT(hcu->handle != 0);
   1f4e4:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   1f4e8:	b1a3      	cbz	r3, 1f514 <ble_ll_ctrl_conn_param_pdu_make+0xb6>
        put_le16(dptr, hcu->conn_itvl_min);
   1f4ea:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   1f4ee:	4620      	mov	r0, r4
   1f4f0:	f012 fcf4 	bl	31edc <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   1f4f4:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   1f4f8:	1ca0      	adds	r0, r4, #2
   1f4fa:	f012 fcef 	bl	31edc <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   1f4fe:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   1f502:	1d20      	adds	r0, r4, #4
   1f504:	f012 fcea 	bl	31edc <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   1f508:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   1f50c:	1da0      	adds	r0, r4, #6
   1f50e:	f012 fce5 	bl	31edc <put_le16>
   1f512:	e7ba      	b.n	1f48a <ble_ll_ctrl_conn_param_pdu_make+0x2c>
        BLE_LL_ASSERT(hcu->handle != 0);
   1f514:	f7f5 f89e 	bl	14654 <hal_debugger_connected>
   1f518:	b100      	cbz	r0, 1f51c <ble_ll_ctrl_conn_param_pdu_make+0xbe>
   1f51a:	be01      	bkpt	0x0001
   1f51c:	2300      	movs	r3, #0
   1f51e:	461a      	mov	r2, r3
   1f520:	4619      	mov	r1, r3
   1f522:	4618      	mov	r0, r3
   1f524:	f7f5 fc38 	bl	14d98 <__assert_func>

0001f528 <ble_ll_ctrl_conn_upd_make>:
{
   1f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f52a:	4604      	mov	r4, r0
   1f52c:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->periph_latency + 6 + 1;
   1f52e:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   1f532:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
   1f536:	441d      	add	r5, r3
   1f538:	b2ad      	uxth	r5, r5
   1f53a:	3507      	adds	r5, #7
   1f53c:	b2ad      	uxth	r5, r5
    if (cp) {
   1f53e:	2a00      	cmp	r2, #0
   1f540:	d066      	beq.n	1f610 <ble_ll_ctrl_conn_upd_make+0xe8>
   1f542:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   1f544:	8997      	ldrh	r7, [r2, #12]
   1f546:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f54a:	429f      	cmp	r7, r3
   1f54c:	d05c      	beq.n	1f608 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   1f54e:	8853      	ldrh	r3, [r2, #2]
   1f550:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1f554:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1f558:	f8b0 0064 	ldrh.w	r0, [r0, #100]	; 0x64
   1f55c:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   1f560:	8948      	ldrh	r0, [r1, #10]
   1f562:	eba0 0c05 	sub.w	ip, r0, r5
   1f566:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   1f56a:	d140      	bne.n	1f5ee <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   1f56c:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   1f56e:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   1f572:	fb0c f707 	mul.w	r7, ip, r7
   1f576:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   1f57a:	fbb2 f0f3 	udiv	r0, r2, r3
   1f57e:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   1f582:	4a2d      	ldr	r2, [pc, #180]	; (1f638 <ble_ll_ctrl_conn_upd_make+0x110>)
   1f584:	fba2 2303 	umull	r2, r3, r2, r3
   1f588:	0a9b      	lsrs	r3, r3, #10
   1f58a:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   1f58e:	884b      	ldrh	r3, [r1, #2]
   1f590:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   1f594:	88cb      	ldrh	r3, [r1, #6]
   1f596:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   1f59a:	888b      	ldrh	r3, [r1, #4]
   1f59c:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   1f5a0:	2301      	movs	r3, #1
   1f5a2:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   1f5a6:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   1f5aa:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   1f5ae:	4630      	mov	r0, r6
   1f5b0:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   1f5b4:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   1f5b8:	f012 fc90 	bl	31edc <put_le16>
    put_le16(pyld + 3, req->interval);
   1f5bc:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   1f5c0:	1cf0      	adds	r0, r6, #3
   1f5c2:	f012 fc8b 	bl	31edc <put_le16>
    put_le16(pyld + 5, req->latency);
   1f5c6:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   1f5ca:	1d70      	adds	r0, r6, #5
   1f5cc:	f012 fc86 	bl	31edc <put_le16>
    put_le16(pyld + 7, req->timeout);
   1f5d0:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   1f5d4:	1df0      	adds	r0, r6, #7
   1f5d6:	f012 fc81 	bl	31edc <put_le16>
    put_le16(pyld + 9, instant);
   1f5da:	4629      	mov	r1, r5
   1f5dc:	f106 0009 	add.w	r0, r6, #9
   1f5e0:	f012 fc7c 	bl	31edc <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   1f5e4:	7863      	ldrb	r3, [r4, #1]
   1f5e6:	f043 0301 	orr.w	r3, r3, #1
   1f5ea:	7063      	strb	r3, [r4, #1]
}
   1f5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   1f5ee:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   1f5f0:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   1f5f4:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1f5f8:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   1f5fc:	fbb2 f7f3 	udiv	r7, r2, r3
   1f600:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   1f604:	1a9b      	subs	r3, r3, r2
   1f606:	e7bc      	b.n	1f582 <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   1f608:	2300      	movs	r3, #0
   1f60a:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   1f60e:	e7be      	b.n	1f58e <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   1f610:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   1f614:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   1f618:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   1f61c:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   1f620:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   1f624:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   1f628:	2300      	movs	r3, #0
   1f62a:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   1f62e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   1f632:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   1f636:	e7b6      	b.n	1f5a6 <ble_ll_ctrl_conn_upd_make+0x7e>
   1f638:	d1b71759 	.word	0xd1b71759

0001f63c <ble_ll_ctrl_version_ind_make>:

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   1f63c:	b510      	push	{r4, lr}
   1f63e:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   1f640:	7843      	ldrb	r3, [r0, #1]
   1f642:	f043 0304 	orr.w	r3, r3, #4
   1f646:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   1f648:	4608      	mov	r0, r1
   1f64a:	2309      	movs	r3, #9
   1f64c:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   1f650:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f654:	f012 fc42 	bl	31edc <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   1f658:	2100      	movs	r1, #0
   1f65a:	1ce0      	adds	r0, r4, #3
   1f65c:	f012 fc3e 	bl	31edc <put_le16>
}
   1f660:	bd10      	pop	{r4, pc}

0001f662 <ble_ll_ctrl_datalen_upd_make>:
{
   1f662:	b538      	push	{r3, r4, r5, lr}
   1f664:	4605      	mov	r5, r0
   1f666:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   1f668:	7a81      	ldrb	r1, [r0, #10]
   1f66a:	1c60      	adds	r0, r4, #1
   1f66c:	f012 fc36 	bl	31edc <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   1f670:	8a69      	ldrh	r1, [r5, #18]
   1f672:	1ce0      	adds	r0, r4, #3
   1f674:	f012 fc32 	bl	31edc <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   1f678:	7a69      	ldrb	r1, [r5, #9]
   1f67a:	1d60      	adds	r0, r4, #5
   1f67c:	f012 fc2e 	bl	31edc <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   1f680:	8a29      	ldrh	r1, [r5, #16]
   1f682:	1de0      	adds	r0, r4, #7
   1f684:	f012 fc2a 	bl	31edc <put_le16>
}
   1f688:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f68c <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   1f68c:	b510      	push	{r4, lr}
   1f68e:	4604      	mov	r4, r0
   1f690:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.central_chan_map, BLE_LL_CONN_CHMAP_LEN);
   1f692:	4b0e      	ldr	r3, [pc, #56]	; (1f6cc <ble_ll_ctrl_chanmap_req_make+0x40>)
   1f694:	681a      	ldr	r2, [r3, #0]
   1f696:	600a      	str	r2, [r1, #0]
   1f698:	791b      	ldrb	r3, [r3, #4]
   1f69a:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   1f69c:	680b      	ldr	r3, [r1, #0]
   1f69e:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   1f6a2:	790b      	ldrb	r3, [r1, #4]
   1f6a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->periph_latency + 6 + 1;
   1f6a8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   1f6ac:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
   1f6b0:	440b      	add	r3, r1
   1f6b2:	b29b      	uxth	r3, r3
   1f6b4:	3307      	adds	r3, #7
   1f6b6:	b299      	uxth	r1, r3
   1f6b8:	84e1      	strh	r1, [r4, #38]	; 0x26
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   1f6ba:	3005      	adds	r0, #5
   1f6bc:	f012 fc0e 	bl	31edc <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   1f6c0:	7863      	ldrb	r3, [r4, #1]
   1f6c2:	f043 0310 	orr.w	r3, r3, #16
   1f6c6:	7063      	strb	r3, [r4, #1]
}
   1f6c8:	bd10      	pop	{r4, pc}
   1f6ca:	bf00      	nop
   1f6cc:	1000233c 	.word	0x1000233c

0001f6d0 <ble_ll_ctrl_update_features>:
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
    connsm->conn_features = feat[0];
   1f6d0:	780b      	ldrb	r3, [r1, #0]
   1f6d2:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    memcpy(connsm->remote_features, feat + 1, 7);
   1f6d6:	f851 3f01 	ldr.w	r3, [r1, #1]!
   1f6da:	63c3      	str	r3, [r0, #60]	; 0x3c
   1f6dc:	888a      	ldrh	r2, [r1, #4]
   1f6de:	798b      	ldrb	r3, [r1, #6]
   1f6e0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
   1f6e4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   1f6e8:	78c3      	ldrb	r3, [r0, #3]
   1f6ea:	f013 0f08 	tst.w	r3, #8
   1f6ee:	d102      	bne.n	1f6f6 <ble_ll_ctrl_update_features+0x26>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   1f6f0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1f6f4:	70c3      	strb	r3, [r0, #3]
    }
}
   1f6f6:	4770      	bx	lr

0001f6f8 <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept peripheral feature requests if we are a central and feature
     * requests if we are a peripheral.
     */
    if (opcode == BLE_LL_CTRL_PERIPH_FEATURE_REQ) {
   1f6f8:	2b0e      	cmp	r3, #14
   1f6fa:	d021      	beq.n	1f740 <ble_ll_ctrl_rx_feature_req+0x48>
{
   1f6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f700:	4604      	mov	r4, r0
   1f702:	460e      	mov	r6, r1
   1f704:	4615      	mov	r5, r2
        if (!CONN_IS_CENTRAL(connsm)) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (!CONN_IS_PERIPHERAL(connsm)) {
   1f706:	79c3      	ldrb	r3, [r0, #7]
   1f708:	2b02      	cmp	r3, #2
   1f70a:	d002      	beq.n	1f712 <ble_ll_ctrl_rx_feature_req+0x1a>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   1f70c:	2007      	movs	r0, #7

    put_le64(rspbuf + 1, our_feat);
    rspbuf[1] = connsm->conn_features;

    return rsp_opcode;
}
   1f70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    our_feat = ble_ll_read_supp_features();
   1f712:	f7fd f911 	bl	1c938 <ble_ll_read_supp_features>
   1f716:	4607      	mov	r7, r0
   1f718:	4688      	mov	r8, r1
    ble_ll_ctrl_update_features(connsm, dptr);
   1f71a:	4631      	mov	r1, r6
   1f71c:	4620      	mov	r0, r4
   1f71e:	f7ff ffd7 	bl	1f6d0 <ble_ll_ctrl_update_features>
    connsm->conn_features &= our_feat;
   1f722:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   1f726:	403b      	ands	r3, r7
   1f728:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    put_le64(rspbuf + 1, our_feat);
   1f72c:	463a      	mov	r2, r7
   1f72e:	4643      	mov	r3, r8
   1f730:	1c68      	adds	r0, r5, #1
   1f732:	f012 fbe1 	bl	31ef8 <put_le64>
    rspbuf[1] = connsm->conn_features;
   1f736:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   1f73a:	706b      	strb	r3, [r5, #1]
    return rsp_opcode;
   1f73c:	2009      	movs	r0, #9
   1f73e:	e7e6      	b.n	1f70e <ble_ll_ctrl_rx_feature_req+0x16>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   1f740:	2007      	movs	r0, #7
}
   1f742:	4770      	bx	lr

0001f744 <ble_ll_ctrl_enc_req_make>:
{
   1f744:	b570      	push	{r4, r5, r6, lr}
   1f746:	4604      	mov	r4, r0
   1f748:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   1f74a:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
   1f74e:	4608      	mov	r0, r1
   1f750:	f012 fbd2 	bl	31ef8 <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   1f754:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   1f758:	f105 0008 	add.w	r0, r5, #8
   1f75c:	f012 fbbe 	bl	31edc <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   1f760:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   1f764:	2108      	movs	r1, #8
   1f766:	4630      	mov	r0, r6
   1f768:	f001 fd66 	bl	21238 <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   1f76c:	2208      	movs	r2, #8
   1f76e:	4631      	mov	r1, r6
   1f770:	f105 000a 	add.w	r0, r5, #10
   1f774:	f012 fc0a 	bl	31f8c <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   1f778:	2104      	movs	r1, #4
   1f77a:	f504 7098 	add.w	r0, r4, #304	; 0x130
   1f77e:	f001 fd5b 	bl	21238 <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   1f782:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   1f786:	f8c5 3012 	str.w	r3, [r5, #18]
}
   1f78a:	bd70      	pop	{r4, r5, r6, pc}

0001f78c <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   1f78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f790:	4605      	mov	r5, r0
   1f792:	460c      	mov	r4, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   1f794:	2110      	movs	r1, #16
   1f796:	201b      	movs	r0, #27
   1f798:	f7f6 fbf2 	bl	15f80 <os_msys_get_pkthdr>

    if (om) {
   1f79c:	4606      	mov	r6, r0
   1f79e:	2800      	cmp	r0, #0
   1f7a0:	d067      	beq.n	1f872 <ble_ll_ctrl_proc_init+0xe6>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   1f7a2:	6807      	ldr	r7, [r0, #0]
        ctrdata = dptr + 1;
   1f7a4:	f107 0801 	add.w	r8, r7, #1

        switch (ctrl_proc) {
   1f7a8:	2c08      	cmp	r4, #8
   1f7aa:	d84d      	bhi.n	1f848 <ble_ll_ctrl_proc_init+0xbc>
   1f7ac:	e8df f004 	tbb	[pc, r4]
   1f7b0:	12400c05 	.word	0x12400c05
   1f7b4:	56332e28 	.word	0x56332e28
   1f7b8:	3a          	.byte	0x3a
   1f7b9:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   1f7ba:	2200      	movs	r2, #0
   1f7bc:	4641      	mov	r1, r8
   1f7be:	4628      	mov	r0, r5
   1f7c0:	f7ff feb2 	bl	1f528 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   1f7c4:	2300      	movs	r3, #0
            break;
   1f7c6:	e04a      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
        case BLE_LL_CTRL_PROC_CHAN_MAP_UPD:
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   1f7c8:	4641      	mov	r1, r8
   1f7ca:	4628      	mov	r0, r5
   1f7cc:	f7ff ff5e 	bl	1f68c <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   1f7d0:	2301      	movs	r3, #1
            break;
   1f7d2:	e044      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
        case BLE_LL_CTRL_PROC_FEATURE_XCHG:
            switch (connsm->conn_role) {
   1f7d4:	79eb      	ldrb	r3, [r5, #7]
   1f7d6:	2b02      	cmp	r3, #2
   1f7d8:	d108      	bne.n	1f7ec <ble_ll_ctrl_proc_init+0x60>
#endif
            default:
                BLE_LL_ASSERT(0);
                break;
            }
            put_le64(ctrdata, ble_ll_read_supp_features());
   1f7da:	f7fd f8ad 	bl	1c938 <ble_ll_read_supp_features>
   1f7de:	4602      	mov	r2, r0
   1f7e0:	460b      	mov	r3, r1
   1f7e2:	4640      	mov	r0, r8
   1f7e4:	f012 fb88 	bl	31ef8 <put_le64>
                opcode = BLE_LL_CTRL_PERIPH_FEATURE_REQ;
   1f7e8:	230e      	movs	r3, #14
            break;
   1f7ea:	e038      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
                BLE_LL_ASSERT(0);
   1f7ec:	f7f4 ff32 	bl	14654 <hal_debugger_connected>
   1f7f0:	b100      	cbz	r0, 1f7f4 <ble_ll_ctrl_proc_init+0x68>
   1f7f2:	be01      	bkpt	0x0001
   1f7f4:	2300      	movs	r3, #0
   1f7f6:	461a      	mov	r2, r3
   1f7f8:	4619      	mov	r1, r3
   1f7fa:	4618      	mov	r0, r3
   1f7fc:	f7f5 facc 	bl	14d98 <__assert_func>
        case BLE_LL_CTRL_PROC_VERSION_XCHG:
            opcode = BLE_LL_CTRL_VERSION_IND;
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   1f800:	4641      	mov	r1, r8
   1f802:	4628      	mov	r0, r5
   1f804:	f7ff ff1a 	bl	1f63c <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   1f808:	230c      	movs	r3, #12
            break;
   1f80a:	e028      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
        case BLE_LL_CTRL_PROC_TERMINATE:
            opcode = BLE_LL_CTRL_TERMINATE_IND;
            ctrdata[0] = connsm->disconnect_reason;
   1f80c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1f810:	707b      	strb	r3, [r7, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   1f812:	2302      	movs	r3, #2
            break;
   1f814:	e023      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
        case BLE_LL_CTRL_PROC_CONN_PARAM_REQ:
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   1f816:	2200      	movs	r2, #0
   1f818:	4641      	mov	r1, r8
   1f81a:	4628      	mov	r0, r5
   1f81c:	f7ff fe1f 	bl	1f45e <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   1f820:	230f      	movs	r3, #15
            break;
   1f822:	e01c      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
        case BLE_LL_CTRL_PROC_LE_PING:
            opcode = BLE_LL_CTRL_PING_REQ;
            break;
        case BLE_LL_CTRL_PROC_DATA_LEN_UPD:
            opcode = BLE_LL_CTRL_LENGTH_REQ;
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   1f824:	4639      	mov	r1, r7
   1f826:	4628      	mov	r0, r5
   1f828:	f7ff ff1b 	bl	1f662 <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   1f82c:	2314      	movs	r3, #20
            break;
   1f82e:	e016      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        /* XXX: deal with already encrypted connection.*/
        case BLE_LL_CTRL_PROC_ENCRYPT:
            /* If we are already encrypted we do pause procedure */
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   1f830:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1f834:	2b02      	cmp	r3, #2
   1f836:	d101      	bne.n	1f83c <ble_ll_ctrl_proc_init+0xb0>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   1f838:	230a      	movs	r3, #10
   1f83a:	e010      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
            } else {
                opcode = BLE_LL_CTRL_ENC_REQ;
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   1f83c:	4641      	mov	r1, r8
   1f83e:	4628      	mov	r0, r5
   1f840:	f7ff ff80 	bl	1f744 <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   1f844:	2303      	movs	r3, #3
   1f846:	e00a      	b.n	1f85e <ble_ll_ctrl_proc_init+0xd2>
            opcode = BLE_LL_CTRL_CIS_REQ;
            ble_ll_ctrl_cis_create(connsm, ctrdata);
            break;
#endif
        default:
            BLE_LL_ASSERT(0);
   1f848:	f7f4 ff04 	bl	14654 <hal_debugger_connected>
   1f84c:	b100      	cbz	r0, 1f850 <ble_ll_ctrl_proc_init+0xc4>
   1f84e:	be01      	bkpt	0x0001
   1f850:	2300      	movs	r3, #0
   1f852:	461a      	mov	r2, r3
   1f854:	4619      	mov	r1, r3
   1f856:	4618      	mov	r0, r3
   1f858:	f7f5 fa9e 	bl	14d98 <__assert_func>
        ctrdata = dptr + 1;
   1f85c:	2312      	movs	r3, #18
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   1f85e:	703b      	strb	r3, [r7, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   1f860:	4a05      	ldr	r2, [pc, #20]	; (1f878 <ble_ll_ctrl_proc_init+0xec>)
   1f862:	5cd3      	ldrb	r3, [r2, r3]
   1f864:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   1f866:	b2db      	uxtb	r3, r3
   1f868:	2203      	movs	r2, #3
   1f86a:	4631      	mov	r1, r6
   1f86c:	4628      	mov	r0, r5
   1f86e:	f7fe ff1b 	bl	1e6a8 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   1f872:	4630      	mov	r0, r6
   1f874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f878:	00034708 	.word	0x00034708

0001f87c <ble_ll_ctrl_rx_conn_update>:
{
   1f87c:	b538      	push	{r3, r4, r5, lr}
   1f87e:	4604      	mov	r4, r0
   1f880:	460d      	mov	r5, r1
    reqdata->winsize = dptr[0];
   1f882:	4608      	mov	r0, r1
   1f884:	f810 3b01 	ldrb.w	r3, [r0], #1
   1f888:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   1f88c:	f012 fb47 	bl	31f1e <get_le16>
   1f890:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   1f894:	1ce8      	adds	r0, r5, #3
   1f896:	f012 fb42 	bl	31f1e <get_le16>
   1f89a:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   1f89e:	1d68      	adds	r0, r5, #5
   1f8a0:	f012 fb3d 	bl	31f1e <get_le16>
   1f8a4:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   1f8a8:	1de8      	adds	r0, r5, #7
   1f8aa:	f012 fb38 	bl	31f1e <get_le16>
   1f8ae:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   1f8b2:	f105 0009 	add.w	r0, r5, #9
   1f8b6:	f012 fb32 	bl	31f1e <get_le16>
   1f8ba:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   1f8be:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   1f8c2:	1ac3      	subs	r3, r0, r3
   1f8c4:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   1f8c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1f8ca:	4293      	cmp	r3, r2
   1f8cc:	d80d      	bhi.n	1f8ea <ble_ll_ctrl_rx_conn_update+0x6e>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   1f8ce:	7862      	ldrb	r2, [r4, #1]
   1f8d0:	f042 0201 	orr.w	r2, r2, #1
   1f8d4:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   1f8d6:	b933      	cbnz	r3, 1f8e6 <ble_ll_ctrl_rx_conn_update+0x6a>
            reqdata->winoffset = 0;
   1f8d8:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   1f8dc:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   1f8e0:	3001      	adds	r0, #1
   1f8e2:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
}
   1f8e6:	20ff      	movs	r0, #255	; 0xff
   1f8e8:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   1f8ea:	2128      	movs	r1, #40	; 0x28
   1f8ec:	4620      	mov	r0, r4
   1f8ee:	f7fe fdf7 	bl	1e4e0 <ble_ll_conn_timeout>
   1f8f2:	e7f8      	b.n	1f8e6 <ble_ll_ctrl_rx_conn_update+0x6a>

0001f8f4 <ble_ll_ctrl_rx_chanmap_req>:
{
   1f8f4:	b538      	push	{r3, r4, r5, lr}
   1f8f6:	4604      	mov	r4, r0
   1f8f8:	460d      	mov	r5, r1
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   1f8fa:	1d48      	adds	r0, r1, #5
   1f8fc:	f012 fb0f 	bl	31f1e <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   1f900:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   1f904:	1ac3      	subs	r3, r0, r3
   1f906:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   1f908:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1f90c:	4293      	cmp	r3, r2
   1f90e:	d905      	bls.n	1f91c <ble_ll_ctrl_rx_chanmap_req+0x28>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   1f910:	2128      	movs	r1, #40	; 0x28
   1f912:	4620      	mov	r0, r4
   1f914:	f7fe fde4 	bl	1e4e0 <ble_ll_conn_timeout>
}
   1f918:	20ff      	movs	r0, #255	; 0xff
   1f91a:	bd38      	pop	{r3, r4, r5, pc}
        connsm->chanmap_instant = instant;
   1f91c:	84e0      	strh	r0, [r4, #38]	; 0x26
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   1f91e:	682b      	ldr	r3, [r5, #0]
   1f920:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   1f924:	792b      	ldrb	r3, [r5, #4]
   1f926:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   1f92a:	7863      	ldrb	r3, [r4, #1]
   1f92c:	f043 0310 	orr.w	r3, r3, #16
   1f930:	7063      	strb	r3, [r4, #1]
   1f932:	e7f1      	b.n	1f918 <ble_ll_ctrl_rx_chanmap_req+0x24>

0001f934 <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   1f934:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   1f936:	2122      	movs	r1, #34	; 0x22
   1f938:	6880      	ldr	r0, [r0, #8]
   1f93a:	f7fe fdd1 	bl	1e4e0 <ble_ll_conn_timeout>
}
   1f93e:	bd08      	pop	{r3, pc}

0001f940 <ble_ll_ctrl_len_proc>:
{
   1f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f944:	4680      	mov	r8, r0
   1f946:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   1f948:	4608      	mov	r0, r1
   1f94a:	f012 fae8 	bl	31f1e <get_le16>
   1f94e:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   1f950:	1ca0      	adds	r0, r4, #2
   1f952:	f012 fae4 	bl	31f1e <get_le16>
   1f956:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   1f958:	1d20      	adds	r0, r4, #4
   1f95a:	f012 fae0 	bl	31f1e <get_le16>
   1f95e:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   1f960:	1da0      	adds	r0, r4, #6
   1f962:	f012 fadc 	bl	31f1e <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1f966:	2d1a      	cmp	r5, #26
   1f968:	d916      	bls.n	1f998 <ble_ll_ctrl_len_proc+0x58>
   1f96a:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   1f96e:	d316      	bcc.n	1f99e <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   1f970:	2f1a      	cmp	r7, #26
   1f972:	d916      	bls.n	1f9a2 <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1f974:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1f978:	d201      	bcs.n	1f97e <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   1f97a:	2001      	movs	r0, #1
    return rc;
   1f97c:	e00d      	b.n	1f99a <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   1f97e:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   1f982:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   1f986:	f888 500c 	strb.w	r5, [r8, #12]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   1f98a:	f888 700b 	strb.w	r7, [r8, #11]
        ble_ll_conn_update_eff_data_len(connsm);
   1f98e:	4640      	mov	r0, r8
   1f990:	f7fe fc32 	bl	1e1f8 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   1f994:	2000      	movs	r0, #0
   1f996:	e000      	b.n	1f99a <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   1f998:	2001      	movs	r0, #1
}
   1f99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   1f99e:	2001      	movs	r0, #1
   1f9a0:	e7fb      	b.n	1f99a <ble_ll_ctrl_len_proc+0x5a>
   1f9a2:	2001      	movs	r0, #1
   1f9a4:	e7f9      	b.n	1f99a <ble_ll_ctrl_len_proc+0x5a>

0001f9a6 <ble_ll_ctrl_rx_enc_req>:
{
   1f9a6:	b570      	push	{r4, r5, r6, lr}
   1f9a8:	4604      	mov	r4, r0
   1f9aa:	460d      	mov	r5, r1
   1f9ac:	4616      	mov	r6, r2
    connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_TO_BE_SENT;
   1f9ae:	2303      	movs	r3, #3
   1f9b0:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   1f9b4:	2300      	movs	r3, #0
   1f9b6:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   1f9ba:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   1f9be:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   1f9c2:	4608      	mov	r0, r1
   1f9c4:	f012 fabb 	bl	31f3e <get_le64>
   1f9c8:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   1f9cc:	f105 0008 	add.w	r0, r5, #8
   1f9d0:	f012 faa5 	bl	31f1e <get_le16>
   1f9d4:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   1f9d8:	2208      	movs	r2, #8
   1f9da:	f105 010a 	add.w	r1, r5, #10
   1f9de:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   1f9e2:	f012 fad3 	bl	31f8c <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   1f9e6:	f8d5 3012 	ldr.w	r3, [r5, #18]
   1f9ea:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   1f9ee:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   1f9f2:	2108      	movs	r1, #8
   1f9f4:	4628      	mov	r0, r5
   1f9f6:	f001 fc1f 	bl	21238 <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   1f9fa:	2208      	movs	r2, #8
   1f9fc:	4629      	mov	r1, r5
   1f9fe:	4630      	mov	r0, r6
   1fa00:	f012 fac4 	bl	31f8c <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   1fa04:	2104      	movs	r1, #4
   1fa06:	f504 709a 	add.w	r0, r4, #308	; 0x134
   1fa0a:	f001 fc15 	bl	21238 <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   1fa0e:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   1fa12:	60b3      	str	r3, [r6, #8]
}
   1fa14:	2004      	movs	r0, #4
   1fa16:	bd70      	pop	{r4, r5, r6, pc}

0001fa18 <ble_ll_calc_session_key>:
{
   1fa18:	b510      	push	{r4, lr}
   1fa1a:	4604      	mov	r4, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   1fa1c:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1fa20:	f002 fb9c 	bl	2215c <ble_hw_encrypt_block>
   1fa24:	2800      	cmp	r0, #0
   1fa26:	d1f9      	bne.n	1fa1c <ble_ll_calc_session_key+0x4>
}
   1fa28:	bd10      	pop	{r4, pc}

0001fa2a <ble_ll_ctrl_rx_enc_rsp>:
{
   1fa2a:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   1fa2c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1fa30:	2b02      	cmp	r3, #2
   1fa32:	d000      	beq.n	1fa36 <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   1fa34:	bd38      	pop	{r3, r4, r5, pc}
   1fa36:	4604      	mov	r4, r0
   1fa38:	460d      	mov	r5, r1
        connsm->enc_data.rx_pkt_cntr = 0;
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   1fa40:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   1fa44:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   1fa48:	2208      	movs	r2, #8
   1fa4a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   1fa4e:	f012 fa9d 	bl	31f8c <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   1fa52:	68ab      	ldr	r3, [r5, #8]
   1fa54:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   1fa58:	4620      	mov	r0, r4
   1fa5a:	f7ff ffdd 	bl	1fa18 <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   1fa5e:	2307      	movs	r3, #7
   1fa60:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   1fa64:	e7e6      	b.n	1fa34 <ble_ll_ctrl_rx_enc_rsp+0xa>

0001fa66 <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   1fa66:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   1fa68:	6803      	ldr	r3, [r0, #0]
   1fa6a:	7818      	ldrb	r0, [r3, #0]
   1fa6c:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   1fa70:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   1fa72:	2803      	cmp	r0, #3
   1fa74:	d003      	beq.n	1fa7e <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   1fa76:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   1fa78:	f7ff fc98 	bl	1f3ac <ble_ll_ctrl_enc_allowed_pdu>
}
   1fa7c:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   1fa7e:	789a      	ldrb	r2, [r3, #2]
   1fa80:	e7fa      	b.n	1fa78 <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

0001fa82 <ble_ll_ctrl_start_enc_send>:
{
   1fa82:	b510      	push	{r4, lr}
   1fa84:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   1fa86:	2110      	movs	r1, #16
   1fa88:	201b      	movs	r0, #27
   1fa8a:	f7f6 fa79 	bl	15f80 <os_msys_get_pkthdr>
    if (om) {
   1fa8e:	b1b0      	cbz	r0, 1fabe <ble_ll_ctrl_start_enc_send+0x3c>
   1fa90:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   1fa92:	6803      	ldr	r3, [r0, #0]
   1fa94:	2205      	movs	r2, #5
   1fa96:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   1fa98:	2301      	movs	r3, #1
   1fa9a:	2203      	movs	r2, #3
   1fa9c:	4620      	mov	r0, r4
   1fa9e:	f7fe fe03 	bl	1e6a8 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   1faa2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1faa6:	2bff      	cmp	r3, #255	; 0xff
   1faa8:	d001      	beq.n	1faae <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   1faaa:	2000      	movs	r0, #0
}
   1faac:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   1faae:	2302      	movs	r3, #2
   1fab0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
            ble_ll_ctrl_start_rsp_timer(connsm);
   1fab4:	4620      	mov	r0, r4
   1fab6:	f7ff fca2 	bl	1f3fe <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   1faba:	2000      	movs	r0, #0
   1fabc:	e7f6      	b.n	1faac <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   1fabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fac2:	e7f3      	b.n	1faac <ble_ll_ctrl_start_enc_send+0x2a>

0001fac4 <ble_ll_ctrl_conn_param_reply>:
{
   1fac4:	b508      	push	{r3, lr}
    switch (connsm->conn_role) {
   1fac6:	79c3      	ldrb	r3, [r0, #7]
   1fac8:	2b02      	cmp	r3, #2
   1faca:	d104      	bne.n	1fad6 <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   1facc:	3101      	adds	r1, #1
   1face:	f7ff fcc6 	bl	1f45e <ble_ll_ctrl_conn_param_pdu_make>
}
   1fad2:	2010      	movs	r0, #16
   1fad4:	bd08      	pop	{r3, pc}
        BLE_LL_ASSERT(0);
   1fad6:	f7f4 fdbd 	bl	14654 <hal_debugger_connected>
   1fada:	b100      	cbz	r0, 1fade <ble_ll_ctrl_conn_param_reply+0x1a>
   1fadc:	be01      	bkpt	0x0001
   1fade:	2300      	movs	r3, #0
   1fae0:	461a      	mov	r2, r3
   1fae2:	4619      	mov	r1, r3
   1fae4:	4618      	mov	r0, r3
   1fae6:	f7f5 f957 	bl	14d98 <__assert_func>

0001faea <ble_ll_ctrl_conn_param_pdu_proc>:
{
   1faea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faee:	4604      	mov	r4, r0
   1faf0:	460d      	mov	r5, r1
   1faf2:	4617      	mov	r7, r2
   1faf4:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   1faf6:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   1fafa:	4608      	mov	r0, r1
   1fafc:	f012 fa0f 	bl	31f1e <get_le16>
   1fb00:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   1fb04:	1ca8      	adds	r0, r5, #2
   1fb06:	f012 fa0a 	bl	31f1e <get_le16>
   1fb0a:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   1fb0e:	1d28      	adds	r0, r5, #4
   1fb10:	f012 fa05 	bl	31f1e <get_le16>
   1fb14:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   1fb18:	1da8      	adds	r0, r5, #6
   1fb1a:	f012 fa00 	bl	31f1e <get_le16>
   1fb1e:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   1fb22:	7a2b      	ldrb	r3, [r5, #8]
   1fb24:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   1fb28:	f105 0009 	add.w	r0, r5, #9
   1fb2c:	f012 f9f7 	bl	31f1e <get_le16>
   1fb30:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   1fb34:	f105 000b 	add.w	r0, r5, #11
   1fb38:	f012 f9f1 	bl	31f1e <get_le16>
   1fb3c:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   1fb40:	f105 000d 	add.w	r0, r5, #13
   1fb44:	f012 f9eb 	bl	31f1e <get_le16>
   1fb48:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   1fb4c:	f105 000f 	add.w	r0, r5, #15
   1fb50:	f012 f9e5 	bl	31f1e <get_le16>
   1fb54:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   1fb58:	f105 0011 	add.w	r0, r5, #17
   1fb5c:	f012 f9df 	bl	31f1e <get_le16>
   1fb60:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   1fb64:	f105 0013 	add.w	r0, r5, #19
   1fb68:	f012 f9d9 	bl	31f1e <get_le16>
   1fb6c:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   1fb70:	f105 0015 	add.w	r0, r5, #21
   1fb74:	f012 f9d3 	bl	31f1e <get_le16>
   1fb78:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   1fb7c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   1fb80:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1fb84:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   1fb88:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   1fb8c:	f7fe ffa0 	bl	1ead0 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   1fb90:	2800      	cmp	r0, #0
   1fb92:	d156      	bne.n	1fc42 <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   1fb94:	2e0f      	cmp	r6, #15
   1fb96:	d00b      	beq.n	1fbb0 <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if (CONN_IS_PERIPHERAL(connsm) || (opcode == BLE_LL_CTRL_CONN_PARM_RSP)) {
   1fb98:	79e3      	ldrb	r3, [r4, #7]
   1fb9a:	2b02      	cmp	r3, #2
   1fb9c:	d024      	beq.n	1fbe8 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   1fb9e:	2e10      	cmp	r6, #16
   1fba0:	d022      	beq.n	1fbe8 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   1fba2:	2006      	movs	r0, #6
   1fba4:	f001 f888 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   1fba8:	2800      	cmp	r0, #0
   1fbaa:	d13e      	bne.n	1fc2a <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   1fbac:	231a      	movs	r3, #26
   1fbae:	e049      	b.n	1fc44 <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   1fbb0:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   1fbb4:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   1fbb8:	4293      	cmp	r3, r2
   1fbba:	d3ed      	bcc.n	1fb98 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   1fbbc:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   1fbc0:	4293      	cmp	r3, r2
   1fbc2:	d8e9      	bhi.n	1fb98 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   1fbc4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1fbc8:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   1fbcc:	429a      	cmp	r2, r3
   1fbce:	d1e3      	bne.n	1fb98 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->periph_latency == req->latency)) {
   1fbd0:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   1fbd4:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   1fbd8:	429a      	cmp	r2, r3
   1fbda:	d1dd      	bne.n	1fb98 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   1fbdc:	4642      	mov	r2, r8
   1fbde:	4639      	mov	r1, r7
   1fbe0:	4620      	mov	r0, r4
   1fbe2:	f7ff ff6f 	bl	1fac4 <ble_ll_ctrl_conn_param_reply>
    if (ble_err) {
   1fbe6:	e030      	b.n	1fc4a <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   1fbe8:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   1fbec:	2b00      	cmp	r3, #0
   1fbee:	d0d8      	beq.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   1fbf0:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   1fbf4:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   1fbf8:	4293      	cmp	r3, r2
   1fbfa:	d3d2      	bcc.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   1fbfc:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   1fc00:	428b      	cmp	r3, r1
   1fc02:	d8ce      	bhi.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   1fc04:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   1fc08:	429a      	cmp	r2, r3
   1fc0a:	d8ca      	bhi.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   1fc0c:	4299      	cmp	r1, r3
   1fc0e:	d3c8      	bcc.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   1fc10:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1fc14:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   1fc18:	429a      	cmp	r2, r3
   1fc1a:	d1c2      	bne.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   1fc1c:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   1fc20:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   1fc24:	429a      	cmp	r2, r3
   1fc26:	d1bc      	bne.n	1fba2 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   1fc28:	e7d8      	b.n	1fbdc <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   1fc2a:	4641      	mov	r1, r8
   1fc2c:	4620      	mov	r0, r4
   1fc2e:	f001 f911 	bl	20e54 <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   1fc32:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   1fc36:	7823      	ldrb	r3, [r4, #0]
   1fc38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fc3c:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   1fc3e:	20ff      	movs	r0, #255	; 0xff
   1fc40:	e003      	b.n	1fc4a <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   1fc42:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   1fc44:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   1fc46:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   1fc48:	2011      	movs	r0, #17
}
   1fc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fc4e <ble_ll_ctrl_rx_conn_param_rsp>:
{
   1fc4e:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1fc50:	79c3      	ldrb	r3, [r0, #7]
   1fc52:	2b02      	cmp	r3, #2
   1fc54:	d011      	beq.n	1fc7a <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1fc56:	7803      	ldrb	r3, [r0, #0]
   1fc58:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fc5c:	d003      	beq.n	1fc66 <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   1fc5e:	7803      	ldrb	r3, [r0, #0]
   1fc60:	f36f 1386 	bfc	r3, #6, #1
   1fc64:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   1fc66:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1fc6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fc6e:	d006      	beq.n	1fc7e <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   1fc70:	2310      	movs	r3, #16
   1fc72:	f7ff ff3a 	bl	1faea <ble_ll_ctrl_conn_param_pdu_proc>
    return rsp_opcode;
   1fc76:	b2c0      	uxtb	r0, r0
}
   1fc78:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   1fc7a:	2007      	movs	r0, #7
   1fc7c:	e7fc      	b.n	1fc78 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   1fc7e:	20ff      	movs	r0, #255	; 0xff
   1fc80:	e7fa      	b.n	1fc78 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
	...

0001fc84 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   1fc84:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   1fc86:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1fc8a:	b1e3      	cbz	r3, 1fcc6 <ble_ll_ctrl_terminate_start+0x42>
   1fc8c:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   1fc8e:	2105      	movs	r1, #5
   1fc90:	f7ff fd7c 	bl	1f78c <ble_ll_ctrl_proc_init>
    if (om) {
   1fc94:	b1b0      	cbz	r0, 1fcc4 <ble_ll_ctrl_terminate_start+0x40>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   1fc96:	7823      	ldrb	r3, [r4, #0]
   1fc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1fc9c:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   1fc9e:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
   1fca2:	f242 7310 	movw	r3, #10000	; 0x2710
   1fca6:	fb03 f505 	mul.w	r5, r3, r5
    return os_cputime_get32();
   1fcaa:	f012 f9aa 	bl	32002 <os_cputime_get32>
   1fcae:	4606      	mov	r6, r0
    if (usecs <= 31249) {
   1fcb0:	f647 2311 	movw	r3, #31249	; 0x7a11
   1fcb4:	429d      	cmp	r5, r3
   1fcb6:	d810      	bhi.n	1fcda <ble_ll_ctrl_terminate_start+0x56>
        return (usecs * 137439) / 4194304;
   1fcb8:	4b0a      	ldr	r3, [pc, #40]	; (1fce4 <ble_ll_ctrl_terminate_start+0x60>)
   1fcba:	fb03 f305 	mul.w	r3, r3, r5
   1fcbe:	0d98      	lsrs	r0, r3, #22
        connsm->terminate_timeout = ble_ll_tmr_get() + ble_ll_tmr_u2t(usecs);
   1fcc0:	4430      	add	r0, r6
   1fcc2:	65e0      	str	r0, [r4, #92]	; 0x5c
    }
}
   1fcc4:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   1fcc6:	f7f4 fcc5 	bl	14654 <hal_debugger_connected>
   1fcca:	b100      	cbz	r0, 1fcce <ble_ll_ctrl_terminate_start+0x4a>
   1fccc:	be01      	bkpt	0x0001
   1fcce:	2300      	movs	r3, #0
   1fcd0:	461a      	mov	r2, r3
   1fcd2:	4619      	mov	r1, r3
   1fcd4:	4618      	mov	r0, r3
   1fcd6:	f7f5 f85f 	bl	14d98 <__assert_func>
    return os_cputime_usecs_to_ticks(usecs);
   1fcda:	4628      	mov	r0, r5
   1fcdc:	f012 f996 	bl	3200c <os_cputime_usecs_to_ticks>
   1fce0:	e7ee      	b.n	1fcc0 <ble_ll_ctrl_terminate_start+0x3c>
   1fce2:	bf00      	nop
   1fce4:	000218df 	.word	0x000218df

0001fce8 <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   1fce8:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   1fcea:	2905      	cmp	r1, #5
   1fcec:	d00e      	beq.n	1fd0c <ble_ll_ctrl_proc_start+0x24>
   1fcee:	4604      	mov	r4, r0
   1fcf0:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   1fcf2:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1fcf6:	2bff      	cmp	r3, #255	; 0xff
   1fcf8:	d012      	beq.n	1fd20 <ble_ll_ctrl_proc_start+0x38>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   1fcfa:	2301      	movs	r3, #1
   1fcfc:	fa03 f105 	lsl.w	r1, r3, r5
   1fd00:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1fd04:	4319      	orrs	r1, r3
   1fd06:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
}
   1fd0a:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   1fd0c:	f7f4 fca2 	bl	14654 <hal_debugger_connected>
   1fd10:	b100      	cbz	r0, 1fd14 <ble_ll_ctrl_proc_start+0x2c>
   1fd12:	be01      	bkpt	0x0001
   1fd14:	2300      	movs	r3, #0
   1fd16:	461a      	mov	r2, r3
   1fd18:	4619      	mov	r1, r3
   1fd1a:	4618      	mov	r0, r3
   1fd1c:	f7f5 f83c 	bl	14d98 <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   1fd20:	f7ff fd34 	bl	1f78c <ble_ll_ctrl_proc_init>
        if (om) {
   1fd24:	2800      	cmp	r0, #0
   1fd26:	d0e8      	beq.n	1fcfa <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   1fd28:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   1fd2c:	2d01      	cmp	r5, #1
   1fd2e:	d0e4      	beq.n	1fcfa <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   1fd30:	4620      	mov	r0, r4
   1fd32:	f7ff fb64 	bl	1f3fe <ble_ll_ctrl_start_rsp_timer>
   1fd36:	e7e0      	b.n	1fcfa <ble_ll_ctrl_proc_start+0x12>

0001fd38 <ble_ll_ctrl_initiate_dle>:
{
   1fd38:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   1fd3a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1fd3e:	f013 0f20 	tst.w	r3, #32
   1fd42:	d010      	beq.n	1fd66 <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   1fd44:	7a43      	ldrb	r3, [r0, #9]
   1fd46:	2b1b      	cmp	r3, #27
   1fd48:	d80a      	bhi.n	1fd60 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   1fd4a:	7a83      	ldrb	r3, [r0, #10]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   1fd4c:	2b1b      	cmp	r3, #27
   1fd4e:	d807      	bhi.n	1fd60 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   1fd50:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   1fd52:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1fd56:	d803      	bhi.n	1fd60 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   1fd58:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   1fd5a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1fd5e:	d902      	bls.n	1fd66 <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   1fd60:	2108      	movs	r1, #8
   1fd62:	f7ff ffc1 	bl	1fce8 <ble_ll_ctrl_proc_start>
}
   1fd66:	bd08      	pop	{r3, pc}

0001fd68 <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   1fd68:	b538      	push	{r3, r4, r5, lr}
   1fd6a:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   1fd6c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1fd70:	b923      	cbnz	r3, 1fd7c <ble_ll_ctrl_chk_proc_start+0x14>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   1fd72:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1fd76:	2bff      	cmp	r3, #255	; 0xff
   1fd78:	d007      	beq.n	1fd8a <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   1fd7a:	bd38      	pop	{r3, r4, r5, pc}
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   1fd7c:	f990 3000 	ldrsb.w	r3, [r0]
   1fd80:	2b00      	cmp	r3, #0
   1fd82:	dbfa      	blt.n	1fd7a <ble_ll_ctrl_chk_proc_start+0x12>
            ble_ll_ctrl_terminate_start(connsm);
   1fd84:	f7ff ff7e 	bl	1fc84 <ble_ll_ctrl_terminate_start>
        return;
   1fd88:	e7f7      	b.n	1fd7a <ble_ll_ctrl_chk_proc_start+0x12>
        (connsm->pending_ctrl_procs != 0)) {
   1fd8a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   1fd8e:	2b00      	cmp	r3, #0
   1fd90:	d0f3      	beq.n	1fd7a <ble_ll_ctrl_chk_proc_start+0x12>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   1fd92:	2500      	movs	r5, #0
   1fd94:	2d0b      	cmp	r5, #11
   1fd96:	dcf0      	bgt.n	1fd7a <ble_ll_ctrl_chk_proc_start+0x12>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   1fd98:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1fd9c:	412b      	asrs	r3, r5
   1fd9e:	f013 0f01 	tst.w	r3, #1
   1fda2:	d017      	beq.n	1fdd4 <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   1fda4:	2d04      	cmp	r5, #4
   1fda6:	d004      	beq.n	1fdb2 <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   1fda8:	4629      	mov	r1, r5
   1fdaa:	4620      	mov	r0, r4
   1fdac:	f7ff ff9c 	bl	1fce8 <ble_ll_ctrl_proc_start>
                    break;
   1fdb0:	e7e3      	b.n	1fd7a <ble_ll_ctrl_chk_proc_start+0x12>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   1fdb2:	7863      	ldrb	r3, [r4, #1]
   1fdb4:	f013 0f08 	tst.w	r3, #8
   1fdb8:	d0f6      	beq.n	1fda8 <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   1fdba:	2100      	movs	r1, #0
   1fdbc:	4620      	mov	r0, r4
   1fdbe:	f001 f917 	bl	20ff0 <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   1fdc2:	2301      	movs	r3, #1
   1fdc4:	fa03 f205 	lsl.w	r2, r3, r5
   1fdc8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1fdcc:	ea23 0302 	bic.w	r3, r3, r2
   1fdd0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   1fdd4:	3501      	adds	r5, #1
   1fdd6:	e7dd      	b.n	1fd94 <ble_ll_ctrl_chk_proc_start+0x2c>

0001fdd8 <ble_ll_ctrl_proc_stop>:
{
   1fdd8:	b538      	push	{r3, r4, r5, lr}
   1fdda:	4604      	mov	r4, r0
   1fddc:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   1fdde:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1fde2:	428b      	cmp	r3, r1
   1fde4:	d00b      	beq.n	1fdfe <ble_ll_ctrl_proc_stop+0x26>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   1fde6:	2101      	movs	r1, #1
   1fde8:	40a9      	lsls	r1, r5
   1fdea:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
   1fdee:	ea25 0501 	bic.w	r5, r5, r1
   1fdf2:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    ble_ll_ctrl_chk_proc_start(connsm);
   1fdf6:	4620      	mov	r0, r4
   1fdf8:	f7ff ffb6 	bl	1fd68 <ble_ll_ctrl_chk_proc_start>
}
   1fdfc:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   1fdfe:	30b8      	adds	r0, #184	; 0xb8
   1fe00:	f7f5 f986 	bl	15110 <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   1fe04:	23ff      	movs	r3, #255	; 0xff
   1fe06:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   1fe0a:	e7ec      	b.n	1fde6 <ble_ll_ctrl_proc_stop+0xe>

0001fe0c <ble_ll_ctrl_proc_unk_rsp>:
{
   1fe0c:	b538      	push	{r3, r4, r5, lr}
   1fe0e:	4604      	mov	r4, r0
    opcode = dptr[0];
   1fe10:	780d      	ldrb	r5, [r1, #0]
    switch (opcode) {
   1fe12:	2d14      	cmp	r5, #20
   1fe14:	d831      	bhi.n	1fe7a <ble_ll_ctrl_proc_unk_rsp+0x6e>
   1fe16:	e8df f005 	tbb	[pc, r5]
   1fe1a:	3012      	.short	0x3012
   1fe1c:	30303030 	.word	0x30303030
   1fe20:	30303030 	.word	0x30303030
   1fe24:	30303030 	.word	0x30303030
   1fe28:	30322018 	.word	0x30322018
   1fe2c:	3028      	.short	0x3028
   1fe2e:	0b          	.byte	0x0b
   1fe2f:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   1fe30:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1fe34:	f023 0320 	bic.w	r3, r3, #32
   1fe38:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   1fe3c:	2508      	movs	r5, #8
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   1fe3e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   1fe42:	42ab      	cmp	r3, r5
   1fe44:	d01d      	beq.n	1fe82 <ble_ll_ctrl_proc_unk_rsp+0x76>
}
   1fe46:	20ff      	movs	r0, #255	; 0xff
   1fe48:	bd38      	pop	{r3, r4, r5, pc}
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_PERIPH_INIT);
   1fe4a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1fe4e:	f023 0308 	bic.w	r3, r3, #8
   1fe52:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   1fe56:	2503      	movs	r5, #3
        break;
   1fe58:	e7f1      	b.n	1fe3e <ble_ll_ctrl_proc_unk_rsp+0x32>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   1fe5a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1fe5e:	f023 0302 	bic.w	r3, r3, #2
   1fe62:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   1fe66:	2506      	movs	r5, #6
   1fe68:	e7e9      	b.n	1fe3e <ble_ll_ctrl_proc_unk_rsp+0x32>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   1fe6a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1fe6e:	f023 0310 	bic.w	r3, r3, #16
   1fe72:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   1fe76:	2507      	movs	r5, #7
        break;
   1fe78:	e7e1      	b.n	1fe3e <ble_ll_ctrl_proc_unk_rsp+0x32>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   1fe7a:	250c      	movs	r5, #12
        break;
   1fe7c:	e7df      	b.n	1fe3e <ble_ll_ctrl_proc_unk_rsp+0x32>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   1fe7e:	2506      	movs	r5, #6
   1fe80:	e7dd      	b.n	1fe3e <ble_ll_ctrl_proc_unk_rsp+0x32>
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   1fe82:	4629      	mov	r1, r5
   1fe84:	4620      	mov	r0, r4
   1fe86:	f7ff ffa7 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   1fe8a:	2d06      	cmp	r5, #6
   1fe8c:	d00a      	beq.n	1fea4 <ble_ll_ctrl_proc_unk_rsp+0x98>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   1fe8e:	2d03      	cmp	r5, #3
   1fe90:	d1d9      	bne.n	1fe46 <ble_ll_ctrl_proc_unk_rsp+0x3a>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1fe92:	78e3      	ldrb	r3, [r4, #3]
   1fe94:	f013 0f10 	tst.w	r3, #16
   1fe98:	d109      	bne.n	1feae <ble_ll_ctrl_proc_unk_rsp+0xa2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1fe9a:	78e3      	ldrb	r3, [r4, #3]
   1fe9c:	f36f 1304 	bfc	r3, #4, #1
   1fea0:	70e3      	strb	r3, [r4, #3]
   1fea2:	e7d0      	b.n	1fe46 <ble_ll_ctrl_proc_unk_rsp+0x3a>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   1fea4:	211a      	movs	r1, #26
   1fea6:	4620      	mov	r0, r4
   1fea8:	f000 fff9 	bl	20e9e <ble_ll_hci_ev_conn_update>
   1feac:	e7cb      	b.n	1fe46 <ble_ll_ctrl_proc_unk_rsp+0x3a>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   1feae:	211a      	movs	r1, #26
   1feb0:	4620      	mov	r0, r4
   1feb2:	f001 f877 	bl	20fa4 <ble_ll_hci_ev_rd_rem_used_feat>
   1feb6:	e7f0      	b.n	1fe9a <ble_ll_ctrl_proc_unk_rsp+0x8e>

0001feb8 <ble_ll_ctrl_rx_feature_rsp>:
{
   1feb8:	b510      	push	{r4, lr}
   1feba:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   1febc:	f7ff fc08 	bl	1f6d0 <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   1fec0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1fec4:	f013 0f08 	tst.w	r3, #8
   1fec8:	d104      	bne.n	1fed4 <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1feca:	78e3      	ldrb	r3, [r4, #3]
   1fecc:	f013 0f10 	tst.w	r3, #16
   1fed0:	d105      	bne.n	1fede <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   1fed2:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   1fed4:	2103      	movs	r1, #3
   1fed6:	4620      	mov	r0, r4
   1fed8:	f7ff ff7e 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
   1fedc:	e7f5      	b.n	1feca <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1fede:	2100      	movs	r1, #0
   1fee0:	4620      	mov	r0, r4
   1fee2:	f001 f85f 	bl	20fa4 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1fee6:	78e3      	ldrb	r3, [r4, #3]
   1fee8:	f36f 1304 	bfc	r3, #4, #1
   1feec:	70e3      	strb	r3, [r4, #3]
}
   1feee:	e7f0      	b.n	1fed2 <ble_ll_ctrl_rx_feature_rsp+0x1a>

0001fef0 <ble_ll_ctrl_rx_version_ind>:
{
   1fef0:	b570      	push	{r4, r5, r6, lr}
   1fef2:	4604      	mov	r4, r0
   1fef4:	460d      	mov	r5, r1
   1fef6:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   1fef8:	4608      	mov	r0, r1
   1fefa:	f810 3b01 	ldrb.w	r3, [r0], #1
   1fefe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->comp_id = get_le16(dptr + 1);
   1ff02:	f012 f80c 	bl	31f1e <get_le16>
   1ff06:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
    connsm->sub_vers_nr = get_le16(dptr + 3);
   1ff0a:	1ce8      	adds	r0, r5, #3
   1ff0c:	f012 f807 	bl	31f1e <get_le16>
   1ff10:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   1ff14:	7863      	ldrb	r3, [r4, #1]
   1ff16:	f043 0308 	orr.w	r3, r3, #8
   1ff1a:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   1ff1c:	f013 0f04 	tst.w	r3, #4
   1ff20:	d007      	beq.n	1ff32 <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   1ff22:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   1ff24:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   1ff28:	f013 0f10 	tst.w	r3, #16
   1ff2c:	d107      	bne.n	1ff3e <ble_ll_ctrl_rx_version_ind+0x4e>
}
   1ff2e:	4628      	mov	r0, r5
   1ff30:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   1ff32:	4631      	mov	r1, r6
   1ff34:	4620      	mov	r0, r4
   1ff36:	f7ff fb81 	bl	1f63c <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   1ff3a:	250c      	movs	r5, #12
   1ff3c:	e7f2      	b.n	1ff24 <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   1ff3e:	2100      	movs	r1, #0
   1ff40:	4620      	mov	r0, r4
   1ff42:	f001 f855 	bl	20ff0 <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   1ff46:	2104      	movs	r1, #4
   1ff48:	4620      	mov	r0, r4
   1ff4a:	f7ff ff45 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
   1ff4e:	e7ee      	b.n	1ff2e <ble_ll_ctrl_rx_version_ind+0x3e>

0001ff50 <ble_ll_ctrl_rx_start_enc_rsp>:
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   1ff50:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1ff54:	2b08      	cmp	r3, #8
   1ff56:	d11c      	bne.n	1ff92 <ble_ll_ctrl_rx_start_enc_rsp+0x42>
{
   1ff58:	b510      	push	{r4, lr}
   1ff5a:	4604      	mov	r4, r0
    switch (connsm->conn_role) {
   1ff5c:	79c3      	ldrb	r3, [r0, #7]
   1ff5e:	2b02      	cmp	r3, #2
   1ff60:	d10d      	bne.n	1ff7e <ble_ll_ctrl_rx_start_enc_rsp+0x2e>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   1ff62:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1ff66:	2b02      	cmp	r3, #2
   1ff68:	d005      	beq.n	1ff76 <ble_ll_ctrl_rx_start_enc_rsp+0x26>
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   1ff6a:	2100      	movs	r1, #0
   1ff6c:	4620      	mov	r0, r4
   1ff6e:	f000 ffb8 	bl	20ee2 <ble_ll_hci_ev_encrypt_chg>
    return rc;
   1ff72:	2006      	movs	r0, #6
}
   1ff74:	bd10      	pop	{r4, pc}
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   1ff76:	2102      	movs	r1, #2
   1ff78:	f7ff ff2e 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
   1ff7c:	e7f5      	b.n	1ff6a <ble_ll_ctrl_rx_start_enc_rsp+0x1a>
        BLE_LL_ASSERT(0);
   1ff7e:	f7f4 fb69 	bl	14654 <hal_debugger_connected>
   1ff82:	b100      	cbz	r0, 1ff86 <ble_ll_ctrl_rx_start_enc_rsp+0x36>
   1ff84:	be01      	bkpt	0x0001
   1ff86:	2300      	movs	r3, #0
   1ff88:	461a      	mov	r2, r3
   1ff8a:	4619      	mov	r1, r3
   1ff8c:	4618      	mov	r0, r3
   1ff8e:	f7f4 ff03 	bl	14d98 <__assert_func>
        return BLE_ERR_MAX;
   1ff92:	20ff      	movs	r0, #255	; 0xff
}
   1ff94:	4770      	bx	lr

0001ff96 <ble_ll_ctrl_rx_ping_rsp>:
{
   1ff96:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   1ff98:	2107      	movs	r1, #7
   1ff9a:	f7ff ff1d 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
}
   1ff9e:	bd08      	pop	{r3, pc}

0001ffa0 <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1ffa0:	7803      	ldrb	r3, [r0, #0]
   1ffa2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ffa6:	d124      	bne.n	1fff2 <ble_ll_ctrl_rx_conn_param_req+0x52>
{
   1ffa8:	b570      	push	{r4, r5, r6, lr}
   1ffaa:	4604      	mov	r4, r0
   1ffac:	460d      	mov	r5, r1
   1ffae:	4616      	mov	r6, r2
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   1ffb0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1ffb4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ffb8:	d009      	beq.n	1ffce <ble_ll_ctrl_rx_conn_param_req+0x2e>
        switch (connsm->conn_role) {
   1ffba:	79c3      	ldrb	r3, [r0, #7]
   1ffbc:	2b02      	cmp	r3, #2
   1ffbe:	d10e      	bne.n	1ffde <ble_ll_ctrl_rx_conn_param_req+0x3e>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1ffc0:	2106      	movs	r1, #6
   1ffc2:	f7ff ff09 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   1ffc6:	2123      	movs	r1, #35	; 0x23
   1ffc8:	4620      	mov	r0, r4
   1ffca:	f000 ff68 	bl	20e9e <ble_ll_hci_ev_conn_update>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   1ffce:	230f      	movs	r3, #15
   1ffd0:	4632      	mov	r2, r6
   1ffd2:	4629      	mov	r1, r5
   1ffd4:	4620      	mov	r0, r4
   1ffd6:	f7ff fd88 	bl	1faea <ble_ll_ctrl_conn_param_pdu_proc>
    return rsp_opcode;
   1ffda:	b2c0      	uxtb	r0, r0
}
   1ffdc:	bd70      	pop	{r4, r5, r6, pc}
            BLE_LL_ASSERT(0);
   1ffde:	f7f4 fb39 	bl	14654 <hal_debugger_connected>
   1ffe2:	b100      	cbz	r0, 1ffe6 <ble_ll_ctrl_rx_conn_param_req+0x46>
   1ffe4:	be01      	bkpt	0x0001
   1ffe6:	2300      	movs	r3, #0
   1ffe8:	461a      	mov	r2, r3
   1ffea:	4619      	mov	r1, r3
   1ffec:	4618      	mov	r0, r3
   1ffee:	f7f4 fed3 	bl	14d98 <__assert_func>
        return BLE_ERR_MAX;
   1fff2:	20ff      	movs	r0, #255	; 0xff
}
   1fff4:	4770      	bx	lr

0001fff6 <ble_ll_ctrl_rx_reject_ind>:
{
   1fff6:	b538      	push	{r3, r4, r5, lr}
   1fff8:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   1fffa:	2a0d      	cmp	r2, #13
   1fffc:	d00a      	beq.n	20014 <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   1fffe:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   20000:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   20004:	2b06      	cmp	r3, #6
   20006:	d007      	beq.n	20018 <ble_ll_ctrl_rx_reject_ind+0x22>
   20008:	2b08      	cmp	r3, #8
   2000a:	d029      	beq.n	20060 <ble_ll_ctrl_rx_reject_ind+0x6a>
   2000c:	2b02      	cmp	r3, #2
   2000e:	d01b      	beq.n	20048 <ble_ll_ctrl_rx_reject_ind+0x52>
}
   20010:	20ff      	movs	r0, #255	; 0xff
   20012:	bd38      	pop	{r3, r4, r5, pc}
        ble_error = dptr[0];
   20014:	780d      	ldrb	r5, [r1, #0]
   20016:	e7f3      	b.n	20000 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   20018:	2a11      	cmp	r2, #17
   2001a:	d1f9      	bne.n	20010 <ble_ll_ctrl_rx_reject_ind+0x1a>
            switch (connsm->conn_role) {
   2001c:	79e3      	ldrb	r3, [r4, #7]
   2001e:	2b02      	cmp	r3, #2
   20020:	d108      	bne.n	20034 <ble_ll_ctrl_rx_reject_ind+0x3e>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   20022:	2106      	movs	r1, #6
   20024:	4620      	mov	r0, r4
   20026:	f7ff fed7 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   2002a:	4629      	mov	r1, r5
   2002c:	4620      	mov	r0, r4
   2002e:	f000 ff36 	bl	20e9e <ble_ll_hci_ev_conn_update>
                break;
   20032:	e7ed      	b.n	20010 <ble_ll_ctrl_rx_reject_ind+0x1a>
                BLE_LL_ASSERT(0);
   20034:	f7f4 fb0e 	bl	14654 <hal_debugger_connected>
   20038:	b100      	cbz	r0, 2003c <ble_ll_ctrl_rx_reject_ind+0x46>
   2003a:	be01      	bkpt	0x0001
   2003c:	2300      	movs	r3, #0
   2003e:	461a      	mov	r2, r3
   20040:	4619      	mov	r1, r3
   20042:	4618      	mov	r0, r3
   20044:	f7f4 fea8 	bl	14d98 <__assert_func>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   20048:	2102      	movs	r1, #2
   2004a:	4620      	mov	r0, r4
   2004c:	f7ff fec4 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   20050:	4629      	mov	r1, r5
   20052:	4620      	mov	r0, r4
   20054:	f000 ff45 	bl	20ee2 <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   20058:	2301      	movs	r3, #1
   2005a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        break;
   2005e:	e7d7      	b.n	20010 <ble_ll_ctrl_rx_reject_ind+0x1a>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   20060:	2108      	movs	r1, #8
   20062:	4620      	mov	r0, r4
   20064:	f7ff feb8 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
        break;
   20068:	e7d2      	b.n	20010 <ble_ll_ctrl_rx_reject_ind+0x1a>
	...

0002006c <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   2006c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20070:	4604      	mov	r4, r0
   20072:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   20074:	680d      	ldr	r5, [r1, #0]
    len = dptr[1];
   20076:	786b      	ldrb	r3, [r5, #1]
    opcode = dptr[2];
   20078:	78ae      	ldrb	r6, [r5, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   2007a:	2e29      	cmp	r6, #41	; 0x29
   2007c:	f200 8198 	bhi.w	203b0 <ble_ll_ctrl_rx_pdu+0x344>
   20080:	f105 0901 	add.w	r9, r5, #1
   20084:	f105 0803 	add.w	r8, r5, #3
   20088:	3b01      	subs	r3, #1
   2008a:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   2008c:	4ab6      	ldr	r2, [pc, #728]	; (20368 <ble_ll_ctrl_rx_pdu+0x2fc>)
   2008e:	5d92      	ldrb	r2, [r2, r6]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   20090:	429a      	cmp	r2, r3
   20092:	f040 8194 	bne.w	203be <ble_ll_ctrl_rx_pdu+0x352>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   20096:	1ef3      	subs	r3, r6, #3
   20098:	2b24      	cmp	r3, #36	; 0x24
   2009a:	d825      	bhi.n	200e8 <ble_ll_ctrl_rx_pdu+0x7c>
   2009c:	e8df f003 	tbb	[pc, r3]
   200a0:	244d244d 	.word	0x244d244d
   200a4:	4d242424 	.word	0x4d242424
   200a8:	57242424 	.word	0x57242424
   200ac:	48245252 	.word	0x48245252
   200b0:	43241324 	.word	0x43241324
   200b4:	243e2424 	.word	0x243e2424
   200b8:	24241824 	.word	0x24241824
   200bc:	24242424 	.word	0x24242424
   200c0:	5c242424 	.word	0x5c242424
   200c4:	5c          	.byte	0x5c
   200c5:	00          	.byte	0x00
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   200c6:	f04f 0b20 	mov.w	fp, #32
   200ca:	f04f 0a00 	mov.w	sl, #0
   200ce:	e003      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   200d0:	f04f 7b00 	mov.w	fp, #33554432	; 0x2000000
   200d4:	f04f 0a00 	mov.w	sl, #0
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   200d8:	f7fc fc2e 	bl	1c938 <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   200dc:	ea0b 0200 	and.w	r2, fp, r0
   200e0:	ea0a 0301 	and.w	r3, sl, r1
   200e4:	4313      	orrs	r3, r2
   200e6:	d03c      	beq.n	20162 <ble_ll_ctrl_rx_pdu+0xf6>
        }
    }

    /* Process opcode */
    rsp_opcode = BLE_ERR_MAX;
    switch (opcode) {
   200e8:	2e15      	cmp	r6, #21
   200ea:	d871      	bhi.n	201d0 <ble_ll_ctrl_rx_pdu+0x164>
   200ec:	e8df f016 	tbh	[pc, r6, lsl #1]
   200f0:	00800076 	.word	0x00800076
   200f4:	00fd0070 	.word	0x00fd0070
   200f8:	01110107 	.word	0x01110107
   200fc:	00c50119 	.word	0x00c50119
   20100:	00dc00d0 	.word	0x00dc00d0
   20104:	01290121 	.word	0x01290121
   20108:	015400e6 	.word	0x015400e6
   2010c:	013e00f1 	.word	0x013e00f1
   20110:	01540149 	.word	0x01540149
   20114:	0133016e 	.word	0x0133016e
   20118:	00a7008a 	.word	0x00a7008a
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   2011c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   20120:	f04f 0a00 	mov.w	sl, #0
   20124:	e7d8      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   20126:	f44f 6b10 	mov.w	fp, #2304	; 0x900
   2012a:	f04f 0a00 	mov.w	sl, #0
   2012e:	e7d3      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_PING;
   20130:	f04f 0b10 	mov.w	fp, #16
   20134:	f04f 0a00 	mov.w	sl, #0
   20138:	e7ce      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   2013a:	f04f 0b01 	mov.w	fp, #1
   2013e:	f04f 0a00 	mov.w	sl, #0
   20142:	e7c9      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   20144:	f04f 0b02 	mov.w	fp, #2
   20148:	f04f 0a00 	mov.w	sl, #0
   2014c:	e7c4      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_PERIPH_INIT;
   2014e:	f04f 0b08 	mov.w	fp, #8
   20152:	f04f 0a00 	mov.w	sl, #0
   20156:	e7bf      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_CONN_SUBRATING;
   20158:	f04f 0b00 	mov.w	fp, #0
   2015c:	f04f 0a20 	mov.w	sl, #32
   20160:	e7ba      	b.n	200d8 <ble_ll_ctrl_rx_pdu+0x6c>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   20162:	2e03      	cmp	r6, #3
   20164:	d024      	beq.n	201b0 <ble_ll_ctrl_rx_pdu+0x144>
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   20166:	f04f 0807 	mov.w	r8, #7
    int rc = 0;
   2016a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2016e:	46ca      	mov	sl, r9
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   20170:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   20174:	f000 813c 	beq.w	203f0 <ble_ll_ctrl_rx_pdu+0x384>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   20178:	f885 8000 	strb.w	r8, [r5]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   2017c:	f1b8 0f07 	cmp.w	r8, #7
   20180:	f000 813a 	beq.w	203f8 <ble_ll_ctrl_rx_pdu+0x38c>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   20184:	4b78      	ldr	r3, [pc, #480]	; (20368 <ble_ll_ctrl_rx_pdu+0x2fc>)
   20186:	f813 3008 	ldrb.w	r3, [r3, r8]
   2018a:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   2018c:	b2db      	uxtb	r3, r3
   2018e:	2203      	movs	r2, #3
   20190:	4639      	mov	r1, r7
   20192:	4620      	mov	r0, r4
   20194:	f7fe fa88 	bl	1e6a8 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   20198:	f1ba 0f00 	cmp.w	sl, #0
   2019c:	f040 812e 	bne.w	203fc <ble_ll_ctrl_rx_pdu+0x390>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   201a0:	78e3      	ldrb	r3, [r4, #3]
   201a2:	f013 0f20 	tst.w	r3, #32
   201a6:	f040 812e 	bne.w	20406 <ble_ll_ctrl_rx_pdu+0x39a>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   201aa:	4648      	mov	r0, r9
   201ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   201b0:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   201b4:	f013 0f04 	tst.w	r3, #4
   201b8:	d005      	beq.n	201c6 <ble_ll_ctrl_rx_pdu+0x15a>
                    rspbuf[1] = opcode;
   201ba:	706e      	strb	r6, [r5, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   201bc:	231a      	movs	r3, #26
   201be:	70ab      	strb	r3, [r5, #2]
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   201c0:	f04f 0811 	mov.w	r8, #17
   201c4:	e7d1      	b.n	2016a <ble_ll_ctrl_rx_pdu+0xfe>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   201c6:	231a      	movs	r3, #26
   201c8:	706b      	strb	r3, [r5, #1]
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   201ca:	f04f 080d 	mov.w	r8, #13
   201ce:	e7cc      	b.n	2016a <ble_ll_ctrl_rx_pdu+0xfe>
    restart_encryption = 0;
   201d0:	f04f 0900 	mov.w	r9, #0
   201d4:	46ca      	mov	sl, r9
   201d6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   201da:	e7c9      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   201dc:	4641      	mov	r1, r8
   201de:	4620      	mov	r0, r4
   201e0:	f7ff fb4c 	bl	1f87c <ble_ll_ctrl_rx_conn_update>
   201e4:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   201e8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   201ec:	46ca      	mov	sl, r9
        break;
   201ee:	e7bf      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   201f0:	4641      	mov	r1, r8
   201f2:	4620      	mov	r0, r4
   201f4:	f7ff fb7e 	bl	1f8f4 <ble_ll_ctrl_rx_chanmap_req>
   201f8:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   201fc:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   20200:	46ca      	mov	sl, r9
        break;
   20202:	e7b5      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   20204:	4641      	mov	r1, r8
   20206:	4620      	mov	r0, r4
   20208:	f7ff fb9a 	bl	1f940 <ble_ll_ctrl_len_proc>
   2020c:	4682      	mov	sl, r0
   2020e:	2800      	cmp	r0, #0
   20210:	f040 80e2 	bne.w	203d8 <ble_ll_ctrl_rx_pdu+0x36c>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   20214:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   20218:	2b08      	cmp	r3, #8
   2021a:	d008      	beq.n	2022e <ble_ll_ctrl_rx_pdu+0x1c2>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   2021c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   20220:	f413 7f80 	tst.w	r3, #256	; 0x100
   20224:	d003      	beq.n	2022e <ble_ll_ctrl_rx_pdu+0x1c2>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   20226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   2022a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   2022e:	4629      	mov	r1, r5
   20230:	4620      	mov	r0, r4
   20232:	f7ff fa16 	bl	1f662 <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   20236:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   20238:	f04f 0815 	mov.w	r8, #21
        break;
   2023c:	e798      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   2023e:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   20242:	2b08      	cmp	r3, #8
   20244:	d005      	beq.n	20252 <ble_ll_ctrl_rx_pdu+0x1e6>
    int rc = 0;
   20246:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2024a:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2024c:	f04f 08ff 	mov.w	r8, #255	; 0xff
   20250:	e78e      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   20252:	4641      	mov	r1, r8
   20254:	4620      	mov	r0, r4
   20256:	f7ff fb73 	bl	1f940 <ble_ll_ctrl_len_proc>
   2025a:	4681      	mov	r9, r0
   2025c:	b940      	cbnz	r0, 20270 <ble_ll_ctrl_rx_pdu+0x204>
    rsp_opcode = BLE_ERR_MAX;
   2025e:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   20262:	2108      	movs	r1, #8
   20264:	4620      	mov	r0, r4
   20266:	f7ff fdb7 	bl	1fdd8 <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   2026a:	f04f 0a00 	mov.w	sl, #0
   2026e:	e77f      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
                rc = -1;
   20270:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   20274:	f04f 0807 	mov.w	r8, #7
   20278:	e7f3      	b.n	20262 <ble_ll_ctrl_rx_pdu+0x1f6>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   2027a:	464a      	mov	r2, r9
   2027c:	4641      	mov	r1, r8
   2027e:	4620      	mov	r0, r4
   20280:	f7ff fdc4 	bl	1fe0c <ble_ll_ctrl_proc_unk_rsp>
   20284:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   20288:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2028c:	46ca      	mov	sl, r9
        break;
   2028e:	e76f      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   20290:	4633      	mov	r3, r6
   20292:	462a      	mov	r2, r5
   20294:	4641      	mov	r1, r8
   20296:	4620      	mov	r0, r4
   20298:	f7ff fa2e 	bl	1f6f8 <ble_ll_ctrl_rx_feature_req>
   2029c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   202a0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   202a4:	46ca      	mov	sl, r9
        break;
   202a6:	e763      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   202a8:	4641      	mov	r1, r8
   202aa:	4620      	mov	r0, r4
   202ac:	f7ff fe04 	bl	1feb8 <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   202b0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   202b4:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   202b6:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   202ba:	e759      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   202bc:	464a      	mov	r2, r9
   202be:	4641      	mov	r1, r8
   202c0:	4620      	mov	r0, r4
   202c2:	f7ff fe15 	bl	1fef0 <ble_ll_ctrl_rx_version_ind>
   202c6:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   202ca:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   202ce:	46ca      	mov	sl, r9
        break;
   202d0:	e74e      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   202d2:	4633      	mov	r3, r6
   202d4:	462a      	mov	r2, r5
   202d6:	4641      	mov	r1, r8
   202d8:	4620      	mov	r0, r4
   202da:	f7ff fa0d 	bl	1f6f8 <ble_ll_ctrl_rx_feature_req>
   202de:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   202e2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   202e6:	46ca      	mov	sl, r9
        break;
   202e8:	e742      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   202ea:	464a      	mov	r2, r9
   202ec:	4641      	mov	r1, r8
   202ee:	4620      	mov	r0, r4
   202f0:	f7ff fb59 	bl	1f9a6 <ble_ll_ctrl_rx_enc_req>
   202f4:	4680      	mov	r8, r0
    int rc = 0;
   202f6:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   202fa:	46ca      	mov	sl, r9
        break;
   202fc:	e738      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   202fe:	4641      	mov	r1, r8
   20300:	4620      	mov	r0, r4
   20302:	f7ff fb92 	bl	1fa2a <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   20306:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2030a:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2030c:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   20310:	e72e      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   20312:	4620      	mov	r0, r4
   20314:	f7ff f87a 	bl	1f40c <ble_ll_ctrl_rx_start_enc_req>
   20318:	4680      	mov	r8, r0
    int rc = 0;
   2031a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2031e:	46ca      	mov	sl, r9
        break;
   20320:	e726      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   20322:	4620      	mov	r0, r4
   20324:	f7ff fe14 	bl	1ff50 <ble_ll_ctrl_rx_start_enc_rsp>
   20328:	4680      	mov	r8, r0
    int rc = 0;
   2032a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2032e:	46ca      	mov	sl, r9
        break;
   20330:	e71e      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   20332:	4620      	mov	r0, r4
   20334:	f7ff f856 	bl	1f3e4 <ble_ll_ctrl_rx_pause_enc_req>
   20338:	4680      	mov	r8, r0
    int rc = 0;
   2033a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2033e:	46ca      	mov	sl, r9
        break;
   20340:	e716      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   20342:	4620      	mov	r0, r4
   20344:	f7ff f872 	bl	1f42c <ble_ll_ctrl_rx_pause_enc_rsp>
   20348:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   2034a:	280b      	cmp	r0, #11
   2034c:	d04b      	beq.n	203e6 <ble_ll_ctrl_rx_pdu+0x37a>
    int rc = 0;
   2034e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   20352:	46ca      	mov	sl, r9
   20354:	e70c      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   20356:	4620      	mov	r0, r4
   20358:	f7ff fe1d 	bl	1ff96 <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   2035c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   20360:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   20362:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   20366:	e703      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
   20368:	00034708 	.word	0x00034708
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   2036c:	462a      	mov	r2, r5
   2036e:	4641      	mov	r1, r8
   20370:	4620      	mov	r0, r4
   20372:	f7ff fe15 	bl	1ffa0 <ble_ll_ctrl_rx_conn_param_req>
   20376:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2037a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2037e:	46ca      	mov	sl, r9
        break;
   20380:	e6f6      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   20382:	462a      	mov	r2, r5
   20384:	4641      	mov	r1, r8
   20386:	4620      	mov	r0, r4
   20388:	f7ff fc61 	bl	1fc4e <ble_ll_ctrl_rx_conn_param_rsp>
   2038c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   20390:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   20394:	46ca      	mov	sl, r9
        break;
   20396:	e6eb      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   20398:	464b      	mov	r3, r9
   2039a:	4632      	mov	r2, r6
   2039c:	4641      	mov	r1, r8
   2039e:	4620      	mov	r0, r4
   203a0:	f7ff fe29 	bl	1fff6 <ble_ll_ctrl_rx_reject_ind>
   203a4:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   203a8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   203ac:	46ca      	mov	sl, r9
        break;
   203ae:	e6df      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rc = -1;
   203b0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   203b4:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   203b8:	f04f 0807 	mov.w	r8, #7
   203bc:	e6d8      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        rc = -1;
   203be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   203c2:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   203c6:	f04f 0807 	mov.w	r8, #7
   203ca:	e6d1      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
    int rc = 0;
   203cc:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   203d0:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   203d2:	f04f 0813 	mov.w	r8, #19
   203d6:	e6cb      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
            rc  = -1;
   203d8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   203dc:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   203e0:	f04f 0807 	mov.w	r8, #7
   203e4:	e6c4      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
    int rc = 0;
   203e6:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   203ea:	f04f 0a01 	mov.w	sl, #1
   203ee:	e6bf      	b.n	20170 <ble_ll_ctrl_rx_pdu+0x104>
        os_mbuf_free_chain(om);
   203f0:	4638      	mov	r0, r7
   203f2:	f7f5 f939 	bl	15668 <os_mbuf_free_chain>
   203f6:	e6d3      	b.n	201a0 <ble_ll_ctrl_rx_pdu+0x134>
            rspbuf[1] = opcode;
   203f8:	706e      	strb	r6, [r5, #1]
   203fa:	e6c3      	b.n	20184 <ble_ll_ctrl_rx_pdu+0x118>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   203fc:	2102      	movs	r1, #2
   203fe:	4620      	mov	r0, r4
   20400:	f7ff f9c4 	bl	1f78c <ble_ll_ctrl_proc_init>
   20404:	e6cc      	b.n	201a0 <ble_ll_ctrl_rx_pdu+0x134>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   20406:	78e3      	ldrb	r3, [r4, #3]
   20408:	f36f 1345 	bfc	r3, #5, #1
   2040c:	70e3      	strb	r3, [r4, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   2040e:	4620      	mov	r0, r4
   20410:	f7ff fc92 	bl	1fd38 <ble_ll_ctrl_initiate_dle>
    return rc;
   20414:	e6c9      	b.n	201aa <ble_ll_ctrl_rx_pdu+0x13e>
   20416:	bf00      	nop

00020418 <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   20418:	b570      	push	{r4, r5, r6, lr}
   2041a:	4606      	mov	r6, r0
   2041c:	460c      	mov	r4, r1
   2041e:	4615      	mov	r5, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   20420:	2110      	movs	r1, #16
   20422:	201b      	movs	r0, #27
   20424:	f7f5 fdac 	bl	15f80 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   20428:	b1d8      	cbz	r0, 20462 <ble_ll_ctrl_reject_ind_send+0x4a>
   2042a:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   2042c:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   2042e:	2c03      	cmp	r4, #3
   20430:	d00a      	beq.n	20448 <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   20432:	2211      	movs	r2, #17
   20434:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   20436:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   20438:	709d      	strb	r5, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   2043a:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   2043c:	2203      	movs	r2, #3
   2043e:	4630      	mov	r0, r6
   20440:	f7fe f932 	bl	1e6a8 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   20444:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   20446:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   20448:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
   2044c:	f012 0f04 	tst.w	r2, #4
   20450:	d104      	bne.n	2045c <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   20452:	220d      	movs	r2, #13
   20454:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   20456:	705d      	strb	r5, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   20458:	2302      	movs	r3, #2
   2045a:	e7ef      	b.n	2043c <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   2045c:	2211      	movs	r2, #17
   2045e:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
   20460:	e7e9      	b.n	20436 <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   20462:	2001      	movs	r0, #1
    return rc;
   20464:	e7ef      	b.n	20446 <ble_ll_ctrl_reject_ind_send+0x2e>
	...

00020468 <ble_ll_ctrl_init_conn_sm>:
    return rc;
}

void
ble_ll_ctrl_init_conn_sm(struct ble_ll_conn_sm *connsm)
{
   20468:	b508      	push	{r3, lr}
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   2046a:	4603      	mov	r3, r0
   2046c:	4a02      	ldr	r2, [pc, #8]	; (20478 <ble_ll_ctrl_init_conn_sm+0x10>)
   2046e:	4903      	ldr	r1, [pc, #12]	; (2047c <ble_ll_ctrl_init_conn_sm+0x14>)
   20470:	30b8      	adds	r0, #184	; 0xb8
   20472:	f7f4 fe3f 	bl	150f4 <os_callout_init>
    ble_npl_callout_init(&connsm->ctrl_proc_rsp_timer, &g_ble_ll_data.ll_evq,
                         ble_ll_ctrl_proc_rsp_timer_cb, connsm);
}
   20476:	bd08      	pop	{r3, pc}
   20478:	0001f935 	.word	0x0001f935
   2047c:	10001fc8 	.word	0x10001fc8

00020480 <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   20480:	2001      	movs	r0, #1
   20482:	4770      	bx	lr

00020484 <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   20484:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   20486:	2209      	movs	r2, #9
   20488:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   2048a:	2000      	movs	r0, #0
   2048c:	7058      	strb	r0, [r3, #1]
   2048e:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   20490:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   20492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20496:	711a      	strb	r2, [r3, #4]
   20498:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   2049a:	7198      	strb	r0, [r3, #6]
   2049c:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   2049e:	2308      	movs	r3, #8
   204a0:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   204a2:	4770      	bx	lr

000204a4 <ble_ll_hci_rd_local_supp_feat>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_supp_feat(uint8_t *rspbuf, uint8_t *rsplen)
{
   204a4:	4603      	mov	r3, r0
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   204a6:	2000      	movs	r0, #0
   204a8:	7018      	strb	r0, [r3, #0]
   204aa:	7058      	strb	r0, [r3, #1]
   204ac:	7098      	strb	r0, [r3, #2]
   204ae:	70d8      	strb	r0, [r3, #3]
   204b0:	2260      	movs	r2, #96	; 0x60
   204b2:	711a      	strb	r2, [r3, #4]
   204b4:	7158      	strb	r0, [r3, #5]
   204b6:	7198      	strb	r0, [r3, #6]
   204b8:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   204ba:	2308      	movs	r3, #8
   204bc:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   204be:	4770      	bx	lr

000204c0 <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   204c0:	4b04      	ldr	r3, [pc, #16]	; (204d4 <ble_ll_hci_rd_bd_addr+0x14>)
   204c2:	681a      	ldr	r2, [r3, #0]
   204c4:	6002      	str	r2, [r0, #0]
   204c6:	889b      	ldrh	r3, [r3, #4]
   204c8:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   204ca:	2306      	movs	r3, #6
   204cc:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   204ce:	2000      	movs	r0, #0
   204d0:	4770      	bx	lr
   204d2:	bf00      	nop
   204d4:	1000221c 	.word	0x1000221c

000204d8 <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   204d8:	2908      	cmp	r1, #8
   204da:	d106      	bne.n	204ea <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   204dc:	6801      	ldr	r1, [r0, #0]
   204de:	6842      	ldr	r2, [r0, #4]
   204e0:	4b03      	ldr	r3, [pc, #12]	; (204f0 <ble_ll_hci_set_le_event_mask+0x18>)
   204e2:	6019      	str	r1, [r3, #0]
   204e4:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   204e6:	2000      	movs	r0, #0
   204e8:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   204ea:	2012      	movs	r0, #18
}
   204ec:	4770      	bx	lr
   204ee:	bf00      	nop
   204f0:	10002520 	.word	0x10002520

000204f4 <ble_ll_hci_le_read_bufsize>:
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   204f4:	4b04      	ldr	r3, [pc, #16]	; (20508 <ble_ll_hci_le_read_bufsize+0x14>)
   204f6:	895a      	ldrh	r2, [r3, #10]
   204f8:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   204fa:	7a5b      	ldrb	r3, [r3, #9]
   204fc:	7083      	strb	r3, [r0, #2]
    /* TODO check if can just not support this command */
    rp->data_len = 0;
    rp->data_packets = 0;
#endif

    *rsplen = sizeof(*rp);
   204fe:	2303      	movs	r3, #3
   20500:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   20502:	2000      	movs	r0, #0
   20504:	4770      	bx	lr
   20506:	bf00      	nop
   20508:	10001fb8 	.word	0x10001fb8

0002050c <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   2050c:	4b04      	ldr	r3, [pc, #16]	; (20520 <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   2050e:	7a5a      	ldrb	r2, [r3, #9]
   20510:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   20512:	895b      	ldrh	r3, [r3, #10]
   20514:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   20516:	2304      	movs	r3, #4
   20518:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   2051a:	2000      	movs	r0, #0
   2051c:	4770      	bx	lr
   2051e:	bf00      	nop
   20520:	1000233c 	.word	0x1000233c

00020524 <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   20524:	4b06      	ldr	r3, [pc, #24]	; (20540 <ble_ll_hci_le_rd_max_data_len+0x1c>)
   20526:	799a      	ldrb	r2, [r3, #6]
   20528:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   2052a:	8a5a      	ldrh	r2, [r3, #18]
   2052c:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   2052e:	79da      	ldrb	r2, [r3, #7]
   20530:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   20532:	8a9b      	ldrh	r3, [r3, #20]
   20534:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   20536:	2308      	movs	r3, #8
   20538:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   2053a:	2000      	movs	r0, #0
   2053c:	4770      	bx	lr
   2053e:	bf00      	nop
   20540:	1000233c 	.word	0x1000233c

00020544 <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   20544:	380d      	subs	r0, #13
   20546:	2837      	cmp	r0, #55	; 0x37
   20548:	d81f      	bhi.n	2058a <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   2054a:	e8df f000 	tbb	[pc, r0]
   2054e:	1e1c      	.short	0x1e1c
   20550:	1e1e1e1e 	.word	0x1e1e1e1e
   20554:	1c1e1e1c 	.word	0x1c1e1e1c
   20558:	1e1c1e1e 	.word	0x1e1c1e1e
   2055c:	1e1e1e1e 	.word	0x1e1e1e1e
   20560:	1e1e1e1e 	.word	0x1e1e1e1e
   20564:	1c1c1e1e 	.word	0x1c1c1e1e
   20568:	1e1e1e1e 	.word	0x1e1e1e1e
   2056c:	1e1e1e1e 	.word	0x1e1e1e1e
   20570:	1c1e1e1e 	.word	0x1c1e1e1e
   20574:	1e1e1e1e 	.word	0x1e1e1e1e
   20578:	1e1e1e1e 	.word	0x1e1e1e1e
   2057c:	1e1e1e1e 	.word	0x1e1e1e1e
   20580:	1e1e1e1e 	.word	0x1e1e1e1e
   20584:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_REQ_PEER_SCA:
#endif
        rc = 1;
        break;
    default:
        rc = 0;
   20586:	2001      	movs	r0, #1
   20588:	4770      	bx	lr
   2058a:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   2058c:	4770      	bx	lr
	...

00020590 <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   20590:	4b04      	ldr	r3, [pc, #16]	; (205a4 <ble_ll_read_rf_path_compensation+0x14>)
   20592:	881b      	ldrh	r3, [r3, #0]
   20594:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   20596:	4b04      	ldr	r3, [pc, #16]	; (205a8 <ble_ll_read_rf_path_compensation+0x18>)
   20598:	881b      	ldrh	r3, [r3, #0]
   2059a:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);
   2059c:	2304      	movs	r3, #4
   2059e:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   205a0:	2000      	movs	r0, #0
   205a2:	4770      	bx	lr
   205a4:	10002528 	.word	0x10002528
   205a8:	1000252a 	.word	0x1000252a

000205ac <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   205ac:	2908      	cmp	r1, #8
   205ae:	d106      	bne.n	205be <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   205b0:	6801      	ldr	r1, [r0, #0]
   205b2:	6842      	ldr	r2, [r0, #4]
   205b4:	4b03      	ldr	r3, [pc, #12]	; (205c4 <ble_ll_hci_cb_set_event_mask+0x18>)
   205b6:	6019      	str	r1, [r3, #0]
   205b8:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   205ba:	2000      	movs	r0, #0
   205bc:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   205be:	2012      	movs	r0, #18
}
   205c0:	4770      	bx	lr
   205c2:	bf00      	nop
   205c4:	10002510 	.word	0x10002510

000205c8 <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   205c8:	2908      	cmp	r1, #8
   205ca:	d106      	bne.n	205da <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   205cc:	6801      	ldr	r1, [r0, #0]
   205ce:	6842      	ldr	r2, [r0, #4]
   205d0:	4b03      	ldr	r3, [pc, #12]	; (205e0 <ble_ll_hci_cb_set_event_mask2+0x18>)
   205d2:	6019      	str	r1, [r3, #0]
   205d4:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   205d6:	2000      	movs	r0, #0
   205d8:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   205da:	2012      	movs	r0, #18
}
   205dc:	4770      	bx	lr
   205de:	bf00      	nop
   205e0:	10002518 	.word	0x10002518

000205e4 <ble_ll_hci_disconnect>:
    if (len != sizeof (*cmd)) {
   205e4:	2903      	cmp	r1, #3
   205e6:	d001      	beq.n	205ec <ble_ll_hci_disconnect+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   205e8:	2012      	movs	r0, #18
}
   205ea:	4770      	bx	lr
{
   205ec:	b508      	push	{r3, lr}
    return ble_ll_conn_hci_disconnect_cmd(cmd);
   205ee:	f7fe fd46 	bl	1f07e <ble_ll_conn_hci_disconnect_cmd>
}
   205f2:	bd08      	pop	{r3, pc}

000205f4 <ble_ll_hci_link_ctrl_cmd_proc>:
{
   205f4:	b508      	push	{r3, lr}
    switch (ocf) {
   205f6:	2a06      	cmp	r2, #6
   205f8:	d003      	beq.n	20602 <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   205fa:	2a1d      	cmp	r2, #29
   205fc:	d006      	beq.n	2060c <ble_ll_hci_link_ctrl_cmd_proc+0x18>
   205fe:	2001      	movs	r0, #1
}
   20600:	bd08      	pop	{r3, pc}
        rc = ble_ll_hci_disconnect(cmdbuf, len);
   20602:	f7ff ffef 	bl	205e4 <ble_ll_hci_disconnect>
        rc += (BLE_ERR_MAX + 1);
   20606:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   2060a:	e7f9      	b.n	20600 <ble_ll_hci_link_ctrl_cmd_proc+0xc>
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   2060c:	f7fe fd83 	bl	1f116 <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   20610:	f500 7080 	add.w	r0, r0, #256	; 0x100
    return rc;
   20614:	e7f4      	b.n	20600 <ble_ll_hci_link_ctrl_cmd_proc+0xc>

00020616 <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   20616:	b510      	push	{r4, lr}
   20618:	4614      	mov	r4, r2
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   2061a:	2a63      	cmp	r2, #99	; 0x63
   2061c:	d01a      	beq.n	20654 <ble_ll_hci_ctlr_bb_cmd_proc+0x3e>
   2061e:	461a      	mov	r2, r3
   20620:	d907      	bls.n	20632 <ble_ll_hci_ctlr_bb_cmd_proc+0x1c>
   20622:	2c7b      	cmp	r4, #123	; 0x7b
   20624:	d019      	beq.n	2065a <ble_ll_hci_ctlr_bb_cmd_proc+0x44>
   20626:	2c7c      	cmp	r4, #124	; 0x7c
   20628:	d10c      	bne.n	20644 <ble_ll_hci_ctlr_bb_cmd_proc+0x2e>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   2062a:	9b02      	ldr	r3, [sp, #8]
   2062c:	f7fe fe88 	bl	1f340 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   20630:	e00c      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
    switch (ocf) {
   20632:	2c01      	cmp	r4, #1
   20634:	d008      	beq.n	20648 <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   20636:	2c03      	cmp	r4, #3
   20638:	d102      	bne.n	20640 <ble_ll_hci_ctlr_bb_cmd_proc+0x2a>
        if (len == 0) {
   2063a:	b141      	cbz	r1, 2064e <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2063c:	2012      	movs	r0, #18
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
   2063e:	e005      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
    switch (ocf) {
   20640:	2001      	movs	r0, #1
   20642:	e003      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
   20644:	2001      	movs	r0, #1
   20646:	e001      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   20648:	f7ff ffb0 	bl	205ac <ble_ll_hci_cb_set_event_mask>
}
   2064c:	bd10      	pop	{r4, pc}
            rc = ble_ll_reset();
   2064e:	f7fc f979 	bl	1c944 <ble_ll_reset>
   20652:	e7fb      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   20654:	f7ff ffb8 	bl	205c8 <ble_ll_hci_cb_set_event_mask2>
        break;
   20658:	e7f8      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   2065a:	9b02      	ldr	r3, [sp, #8]
   2065c:	f7fe fe57 	bl	1f30e <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   20660:	e7f4      	b.n	2064c <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
	...

00020664 <ble_ll_hci_rd_local_supp_cmd>:
{
   20664:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   20666:	2300      	movs	r3, #0
   20668:	62c3      	str	r3, [r0, #44]	; 0x2c
   2066a:	6303      	str	r3, [r0, #48]	; 0x30
   2066c:	6343      	str	r3, [r0, #52]	; 0x34
   2066e:	6383      	str	r3, [r0, #56]	; 0x38
   20670:	63c3      	str	r3, [r0, #60]	; 0x3c
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   20672:	4b0e      	ldr	r3, [pc, #56]	; (206ac <ble_ll_hci_rd_local_supp_cmd+0x48>)
   20674:	f103 0220 	add.w	r2, r3, #32
   20678:	681f      	ldr	r7, [r3, #0]
   2067a:	685e      	ldr	r6, [r3, #4]
   2067c:	689d      	ldr	r5, [r3, #8]
   2067e:	68dc      	ldr	r4, [r3, #12]
   20680:	6007      	str	r7, [r0, #0]
   20682:	6046      	str	r6, [r0, #4]
   20684:	6085      	str	r5, [r0, #8]
   20686:	60c4      	str	r4, [r0, #12]
   20688:	3310      	adds	r3, #16
   2068a:	3010      	adds	r0, #16
   2068c:	4293      	cmp	r3, r2
   2068e:	d1f3      	bne.n	20678 <ble_ll_hci_rd_local_supp_cmd+0x14>
   20690:	681d      	ldr	r5, [r3, #0]
   20692:	685c      	ldr	r4, [r3, #4]
   20694:	689a      	ldr	r2, [r3, #8]
   20696:	6005      	str	r5, [r0, #0]
   20698:	6044      	str	r4, [r0, #4]
   2069a:	6082      	str	r2, [r0, #8]
   2069c:	7b1b      	ldrb	r3, [r3, #12]
   2069e:	7303      	strb	r3, [r0, #12]
    *rsplen = sizeof(*rsp);
   206a0:	2340      	movs	r3, #64	; 0x40
   206a2:	700b      	strb	r3, [r1, #0]
}
   206a4:	2000      	movs	r0, #0
   206a6:	bcf0      	pop	{r4, r5, r6, r7}
   206a8:	4770      	bx	lr
   206aa:	bf00      	nop
   206ac:	00034734 	.word	0x00034734

000206b0 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   206b0:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   206b2:	3a01      	subs	r2, #1
   206b4:	2a08      	cmp	r2, #8
   206b6:	d826      	bhi.n	20706 <ble_ll_hci_info_params_cmd_proc+0x56>
   206b8:	e8df f002 	tbb	[pc, r2]
   206bc:	25150d05 	.word	0x25150d05
   206c0:	25252525 	.word	0x25252525
   206c4:	1d          	.byte	0x1d
   206c5:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   206c6:	b109      	cbz	r1, 206cc <ble_ll_hci_info_params_cmd_proc+0x1c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   206c8:	2012      	movs	r0, #18
   206ca:	e01d      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   206cc:	9902      	ldr	r1, [sp, #8]
   206ce:	4618      	mov	r0, r3
   206d0:	f7ff fed8 	bl	20484 <ble_ll_hci_rd_local_version>
   206d4:	e018      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   206d6:	b109      	cbz	r1, 206dc <ble_ll_hci_info_params_cmd_proc+0x2c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   206d8:	2012      	movs	r0, #18
   206da:	e015      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   206dc:	9902      	ldr	r1, [sp, #8]
   206de:	4618      	mov	r0, r3
   206e0:	f7ff ffc0 	bl	20664 <ble_ll_hci_rd_local_supp_cmd>
   206e4:	e010      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   206e6:	b109      	cbz	r1, 206ec <ble_ll_hci_info_params_cmd_proc+0x3c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   206e8:	2012      	movs	r0, #18
   206ea:	e00d      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   206ec:	9902      	ldr	r1, [sp, #8]
   206ee:	4618      	mov	r0, r3
   206f0:	f7ff fed8 	bl	204a4 <ble_ll_hci_rd_local_supp_feat>
   206f4:	e008      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   206f6:	b109      	cbz	r1, 206fc <ble_ll_hci_info_params_cmd_proc+0x4c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   206f8:	2012      	movs	r0, #18
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
   206fa:	e005      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   206fc:	9902      	ldr	r1, [sp, #8]
   206fe:	4618      	mov	r0, r3
   20700:	f7ff fede 	bl	204c0 <ble_ll_hci_rd_bd_addr>
   20704:	e000      	b.n	20708 <ble_ll_hci_info_params_cmd_proc+0x58>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20706:	2001      	movs	r0, #1
}
   20708:	bd08      	pop	{r3, pc}

0002070a <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   2070a:	2a05      	cmp	r2, #5
   2070c:	d001      	beq.n	20712 <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
#endif
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   2070e:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   20710:	4770      	bx	lr
{
   20712:	b510      	push	{r4, lr}
   20714:	461c      	mov	r4, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   20716:	9b02      	ldr	r3, [sp, #8]
   20718:	4622      	mov	r2, r4
   2071a:	f7fe fd1d 	bl	1f158 <ble_ll_conn_hci_rd_rssi>
}
   2071e:	bd10      	pop	{r4, pc}

00020720 <ble_ll_hci_le_read_local_features>:
{
   20720:	b538      	push	{r3, r4, r5, lr}
   20722:	4604      	mov	r4, r0
   20724:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   20726:	f7fc f907 	bl	1c938 <ble_ll_read_supp_features>
   2072a:	6020      	str	r0, [r4, #0]
   2072c:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   2072e:	2308      	movs	r3, #8
   20730:	702b      	strb	r3, [r5, #0]
}
   20732:	2000      	movs	r0, #0
   20734:	bd38      	pop	{r3, r4, r5, pc}

00020736 <ble_ll_hci_le_encrypt>:
{
   20736:	b570      	push	{r4, r5, r6, lr}
   20738:	b08c      	sub	sp, #48	; 0x30
   2073a:	4604      	mov	r4, r0
   2073c:	4616      	mov	r6, r2
   2073e:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   20740:	2210      	movs	r2, #16
   20742:	4601      	mov	r1, r0
   20744:	4668      	mov	r0, sp
   20746:	f011 fc21 	bl	31f8c <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   2074a:	2210      	movs	r2, #16
   2074c:	18a1      	adds	r1, r4, r2
   2074e:	eb0d 0002 	add.w	r0, sp, r2
   20752:	f011 fc1b 	bl	31f8c <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   20756:	4668      	mov	r0, sp
   20758:	f001 fd00 	bl	2215c <ble_hw_encrypt_block>
    if (!rc) {
   2075c:	b118      	cbz	r0, 20766 <ble_ll_hci_le_encrypt+0x30>
        rc = BLE_ERR_CTLR_BUSY;
   2075e:	243a      	movs	r4, #58	; 0x3a
}
   20760:	4620      	mov	r0, r4
   20762:	b00c      	add	sp, #48	; 0x30
   20764:	bd70      	pop	{r4, r5, r6, pc}
   20766:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   20768:	2210      	movs	r2, #16
   2076a:	a908      	add	r1, sp, #32
   2076c:	4630      	mov	r0, r6
   2076e:	f011 fc0d 	bl	31f8c <swap_buf>
        *rsplen = sizeof(*rsp);
   20772:	2310      	movs	r3, #16
   20774:	702b      	strb	r3, [r5, #0]
        rc = BLE_ERR_SUCCESS;
   20776:	e7f3      	b.n	20760 <ble_ll_hci_le_encrypt+0x2a>

00020778 <ble_ll_hci_le_rand>:
{
   20778:	b510      	push	{r4, lr}
   2077a:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   2077c:	2108      	movs	r1, #8
   2077e:	f000 fd5b 	bl	21238 <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   20782:	2308      	movs	r3, #8
   20784:	7023      	strb	r3, [r4, #0]
}
   20786:	2000      	movs	r0, #0
   20788:	bd10      	pop	{r4, pc}

0002078a <ble_ll_hci_le_read_supp_states>:
{
   2078a:	b538      	push	{r3, r4, r5, lr}
   2078c:	4604      	mov	r4, r0
   2078e:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   20790:	f7fc f8ca 	bl	1c928 <ble_ll_read_supp_states>
   20794:	6020      	str	r0, [r4, #0]
   20796:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   20798:	2308      	movs	r3, #8
   2079a:	702b      	strb	r3, [r5, #0]
}
   2079c:	2000      	movs	r0, #0
   2079e:	bd38      	pop	{r3, r4, r5, pc}

000207a0 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   207a0:	2904      	cmp	r1, #4
   207a2:	d001      	beq.n	207a8 <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   207a4:	2012      	movs	r0, #18
}
   207a6:	4770      	bx	lr
{
   207a8:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   207aa:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   207ac:	8845      	ldrh	r5, [r0, #2]
   207ae:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   207b0:	4620      	mov	r0, r4
   207b2:	f7fb fff3 	bl	1c79c <ble_ll_chk_txrx_octets>
   207b6:	b908      	cbnz	r0, 207bc <ble_ll_hci_le_wr_sugg_data_len+0x1c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   207b8:	2012      	movs	r0, #18
}
   207ba:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   207bc:	4630      	mov	r0, r6
   207be:	f7fb fff5 	bl	1c7ac <ble_ll_chk_txrx_time>
   207c2:	b1c0      	cbz	r0, 207f6 <ble_ll_hci_le_wr_sugg_data_len+0x56>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   207c4:	b2e1      	uxtb	r1, r4
   207c6:	4b0d      	ldr	r3, [pc, #52]	; (207fc <ble_ll_hci_le_wr_sugg_data_len+0x5c>)
   207c8:	7259      	strb	r1, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   207ca:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   207cc:	799a      	ldrb	r2, [r3, #6]
   207ce:	b293      	uxth	r3, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   207d0:	42a3      	cmp	r3, r4
   207d2:	d900      	bls.n	207d6 <ble_ll_hci_le_wr_sugg_data_len+0x36>
   207d4:	460a      	mov	r2, r1
   207d6:	4b09      	ldr	r3, [pc, #36]	; (207fc <ble_ll_hci_le_wr_sugg_data_len+0x5c>)
   207d8:	721a      	strb	r2, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   207da:	8a58      	ldrh	r0, [r3, #18]
   207dc:	42b0      	cmp	r0, r6
   207de:	bf28      	it	cs
   207e0:	4630      	movcs	r0, r6
        g_ble_ll_conn_params.conn_init_max_tx_time =
   207e2:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   207e4:	f640 0248 	movw	r2, #2120	; 0x848
   207e8:	4282      	cmp	r2, r0
   207ea:	bf28      	it	cs
   207ec:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   207ee:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   207f0:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   207f2:	2000      	movs	r0, #0
   207f4:	e7e1      	b.n	207ba <ble_ll_hci_le_wr_sugg_data_len+0x1a>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   207f6:	2012      	movs	r0, #18
   207f8:	e7df      	b.n	207ba <ble_ll_hci_le_wr_sugg_data_len+0x1a>
   207fa:	bf00      	nop
   207fc:	1000233c 	.word	0x1000233c

00020800 <ble_ll_read_tx_power>:
{
   20800:	b538      	push	{r3, r4, r5, lr}
   20802:	4604      	mov	r4, r0
   20804:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   20806:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   2080a:	f001 fd0b 	bl	22224 <ble_phy_txpower_round>
   2080e:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   20810:	207e      	movs	r0, #126	; 0x7e
   20812:	f001 fd07 	bl	22224 <ble_phy_txpower_round>
   20816:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   20818:	2302      	movs	r3, #2
   2081a:	702b      	strb	r3, [r5, #0]
}
   2081c:	2000      	movs	r0, #0
   2081e:	bd38      	pop	{r3, r4, r5, pc}

00020820 <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   20820:	2904      	cmp	r1, #4
   20822:	d121      	bne.n	20868 <ble_ll_write_rf_path_compensation+0x48>
{
   20824:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   20826:	f9b0 3000 	ldrsh.w	r3, [r0]
   2082a:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   2082c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   20830:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   20832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   20836:	b29b      	uxth	r3, r3
   20838:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   2083c:	d816      	bhi.n	2086c <ble_ll_write_rf_path_compensation+0x4c>
   2083e:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   20842:	db15      	blt.n	20870 <ble_ll_write_rf_path_compensation+0x50>
   20844:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   20848:	dc14      	bgt.n	20874 <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   2084a:	4b0b      	ldr	r3, [pc, #44]	; (20878 <ble_ll_write_rf_path_compensation+0x58>)
   2084c:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   2084e:	4b0b      	ldr	r3, [pc, #44]	; (2087c <ble_ll_write_rf_path_compensation+0x5c>)
   20850:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   20852:	480b      	ldr	r0, [pc, #44]	; (20880 <ble_ll_write_rf_path_compensation+0x60>)
   20854:	fb80 3002 	smull	r3, r0, r0, r2
   20858:	17d2      	asrs	r2, r2, #31
   2085a:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   2085e:	b240      	sxtb	r0, r0
   20860:	f001 fcec 	bl	2223c <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   20864:	2000      	movs	r0, #0
}
   20866:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20868:	2012      	movs	r0, #18
}
   2086a:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2086c:	2012      	movs	r0, #18
   2086e:	e7fa      	b.n	20866 <ble_ll_write_rf_path_compensation+0x46>
   20870:	2012      	movs	r0, #18
   20872:	e7f8      	b.n	20866 <ble_ll_write_rf_path_compensation+0x46>
   20874:	2012      	movs	r0, #18
   20876:	e7f6      	b.n	20866 <ble_ll_write_rf_path_compensation+0x46>
   20878:	1000252a 	.word	0x1000252a
   2087c:	10002528 	.word	0x10002528
   20880:	66666667 	.word	0x66666667

00020884 <ble_ll_hci_le_cmd_proc>:
{
   20884:	b538      	push	{r3, r4, r5, lr}
   20886:	4614      	mov	r4, r2
   20888:	461a      	mov	r2, r3
    switch (ocf) {
   2088a:	1e63      	subs	r3, r4, #1
   2088c:	2b4d      	cmp	r3, #77	; 0x4d
   2088e:	f200 8137 	bhi.w	20b00 <ble_ll_hci_le_cmd_proc+0x27c>
   20892:	e8df f013 	tbh	[pc, r3, lsl #1]
   20896:	004e      	.short	0x004e
   20898:	005b0052 	.word	0x005b0052
   2089c:	00640135 	.word	0x00640135
   208a0:	006d0069 	.word	0x006d0069
   208a4:	007a0076 	.word	0x007a0076
   208a8:	0135007e 	.word	0x0135007e
   208ac:	01350135 	.word	0x01350135
   208b0:	00820135 	.word	0x00820135
   208b4:	0092008b 	.word	0x0092008b
   208b8:	009a0096 	.word	0x009a0096
   208bc:	00a2009e 	.word	0x00a2009e
   208c0:	00ab00a7 	.word	0x00ab00a7
   208c4:	013500b0 	.word	0x013500b0
   208c8:	00be00b9 	.word	0x00be00b9
   208cc:	013500c3 	.word	0x013500c3
   208d0:	01350135 	.word	0x01350135
   208d4:	00d100cc 	.word	0x00d100cc
   208d8:	00db00d6 	.word	0x00db00d6
   208dc:	013500e4 	.word	0x013500e4
   208e0:	00e80135 	.word	0x00e80135
   208e4:	00f000ec 	.word	0x00f000ec
   208e8:	010000f7 	.word	0x010000f7
   208ec:	010a0105 	.word	0x010a0105
   208f0:	0112010e 	.word	0x0112010e
   208f4:	01350135 	.word	0x01350135
   208f8:	01350135 	.word	0x01350135
   208fc:	01350135 	.word	0x01350135
   20900:	01350135 	.word	0x01350135
   20904:	01350135 	.word	0x01350135
   20908:	01350135 	.word	0x01350135
   2090c:	01350135 	.word	0x01350135
   20910:	01350135 	.word	0x01350135
   20914:	01350135 	.word	0x01350135
   20918:	01350135 	.word	0x01350135
   2091c:	01350135 	.word	0x01350135
   20920:	01350135 	.word	0x01350135
   20924:	01350135 	.word	0x01350135
   20928:	011b0135 	.word	0x011b0135
   2092c:	012d0124 	.word	0x012d0124
   20930:	0131      	.short	0x0131
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   20932:	f7ff fdd1 	bl	204d8 <ble_ll_hci_set_le_event_mask>
   20936:	4605      	mov	r5, r0
        break;
   20938:	e0e3      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   2093a:	b109      	cbz	r1, 20940 <ble_ll_hci_le_cmd_proc+0xbc>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2093c:	2512      	movs	r5, #18
   2093e:	e0e0      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   20940:	9904      	ldr	r1, [sp, #16]
   20942:	4610      	mov	r0, r2
   20944:	f7ff fdd6 	bl	204f4 <ble_ll_hci_le_read_bufsize>
   20948:	4605      	mov	r5, r0
   2094a:	e0da      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   2094c:	b109      	cbz	r1, 20952 <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2094e:	2512      	movs	r5, #18
   20950:	e0d7      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   20952:	9904      	ldr	r1, [sp, #16]
   20954:	4610      	mov	r0, r2
   20956:	f7ff fee3 	bl	20720 <ble_ll_hci_le_read_local_features>
   2095a:	4605      	mov	r5, r0
   2095c:	e0d1      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   2095e:	2200      	movs	r2, #0
   20960:	f7fb ff96 	bl	1c890 <ble_ll_set_random_addr>
   20964:	4605      	mov	r5, r0
        break;
   20966:	e0cc      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   20968:	f7fc feb6 	bl	1d6d8 <ble_ll_adv_set_adv_params>
   2096c:	4605      	mov	r5, r0
        break;
   2096e:	e0c8      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20970:	b109      	cbz	r1, 20976 <ble_ll_hci_le_cmd_proc+0xf2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20972:	2512      	movs	r5, #18
   20974:	e0c5      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   20976:	9904      	ldr	r1, [sp, #16]
   20978:	4610      	mov	r0, r2
   2097a:	f7fc ff31 	bl	1d7e0 <ble_ll_adv_read_txpwr>
   2097e:	4605      	mov	r5, r0
   20980:	e0bf      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   20982:	f7fc ff54 	bl	1d82e <ble_ll_hci_set_adv_data>
   20986:	4605      	mov	r5, r0
        break;
   20988:	e0bb      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   2098a:	f7fc ff40 	bl	1d80e <ble_ll_hci_set_scan_rsp_data>
   2098e:	4605      	mov	r5, r0
        break;
   20990:	e0b7      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   20992:	f7fc ff2f 	bl	1d7f4 <ble_ll_hci_adv_set_enable>
   20996:	4605      	mov	r5, r0
        break;
   20998:	e0b3      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   2099a:	b109      	cbz	r1, 209a0 <ble_ll_hci_le_cmd_proc+0x11c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2099c:	2512      	movs	r5, #18
   2099e:	e0b0      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   209a0:	9904      	ldr	r1, [sp, #16]
   209a2:	4610      	mov	r0, r2
   209a4:	f001 fb8d 	bl	220c2 <ble_ll_whitelist_read_size>
   209a8:	4605      	mov	r5, r0
   209aa:	e0aa      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   209ac:	b109      	cbz	r1, 209b2 <ble_ll_hci_le_cmd_proc+0x12e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   209ae:	2512      	movs	r5, #18
   209b0:	e0a7      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_whitelist_clear();
   209b2:	f001 fb7c 	bl	220ae <ble_ll_whitelist_clear>
   209b6:	4605      	mov	r5, r0
   209b8:	e0a3      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   209ba:	f001 fb88 	bl	220ce <ble_ll_whitelist_add>
   209be:	4605      	mov	r5, r0
        break;
   209c0:	e09f      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   209c2:	f001 fb99 	bl	220f8 <ble_ll_whitelist_rmv>
   209c6:	4605      	mov	r5, r0
        break;
   209c8:	e09b      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   209ca:	f7fe fa68 	bl	1ee9e <ble_ll_conn_hci_update>
   209ce:	4605      	mov	r5, r0
        break;
   209d0:	e097      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   209d2:	f7fe fc03 	bl	1f1dc <ble_ll_conn_hci_set_chan_class>
   209d6:	4605      	mov	r5, r0
        break;
   209d8:	e093      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   209da:	9b04      	ldr	r3, [sp, #16]
   209dc:	f7fe fbd4 	bl	1f188 <ble_ll_conn_hci_rd_chan_map>
   209e0:	4605      	mov	r5, r0
        break;
   209e2:	e08e      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   209e4:	f7fe fa2b 	bl	1ee3e <ble_ll_conn_hci_read_rem_features>
   209e8:	4605      	mov	r5, r0
        break;
   209ea:	e08a      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   209ec:	9b04      	ldr	r3, [sp, #16]
   209ee:	f7ff fea2 	bl	20736 <ble_ll_hci_le_encrypt>
   209f2:	4605      	mov	r5, r0
        break;
   209f4:	e085      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   209f6:	b109      	cbz	r1, 209fc <ble_ll_hci_le_cmd_proc+0x178>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   209f8:	2512      	movs	r5, #18
   209fa:	e082      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   209fc:	9904      	ldr	r1, [sp, #16]
   209fe:	4610      	mov	r0, r2
   20a00:	f7ff feba 	bl	20778 <ble_ll_hci_le_rand>
   20a04:	4605      	mov	r5, r0
   20a06:	e07c      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   20a08:	9b04      	ldr	r3, [sp, #16]
   20a0a:	f7fe fc36 	bl	1f27a <ble_ll_conn_hci_le_ltk_reply>
   20a0e:	4605      	mov	r5, r0
        break;
   20a10:	e077      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   20a12:	9b04      	ldr	r3, [sp, #16]
   20a14:	f7fe fc5a 	bl	1f2cc <ble_ll_conn_hci_le_ltk_neg_reply>
   20a18:	4605      	mov	r5, r0
        break;
   20a1a:	e072      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20a1c:	b109      	cbz	r1, 20a22 <ble_ll_hci_le_cmd_proc+0x19e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20a1e:	2512      	movs	r5, #18
   20a20:	e06f      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   20a22:	9904      	ldr	r1, [sp, #16]
   20a24:	4610      	mov	r0, r2
   20a26:	f7ff feb0 	bl	2078a <ble_ll_hci_le_read_supp_states>
   20a2a:	4605      	mov	r5, r0
   20a2c:	e069      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   20a2e:	9b04      	ldr	r3, [sp, #16]
   20a30:	f7fe fa9c 	bl	1ef6c <ble_ll_conn_hci_param_rr>
   20a34:	4605      	mov	r5, r0
        break;
   20a36:	e064      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   20a38:	9b04      	ldr	r3, [sp, #16]
   20a3a:	f7fe faed 	bl	1f018 <ble_ll_conn_hci_param_nrr>
   20a3e:	4605      	mov	r5, r0
        break;
   20a40:	e05f      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   20a42:	9b04      	ldr	r3, [sp, #16]
   20a44:	f7fe fbe1 	bl	1f20a <ble_ll_conn_hci_set_data_len>
   20a48:	4605      	mov	r5, r0
        break;
   20a4a:	e05a      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20a4c:	b109      	cbz	r1, 20a52 <ble_ll_hci_le_cmd_proc+0x1ce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20a4e:	2512      	movs	r5, #18
   20a50:	e057      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   20a52:	9904      	ldr	r1, [sp, #16]
   20a54:	4610      	mov	r0, r2
   20a56:	f7ff fd59 	bl	2050c <ble_ll_hci_le_rd_sugg_data_len>
   20a5a:	4605      	mov	r5, r0
   20a5c:	e051      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   20a5e:	f7ff fe9f 	bl	207a0 <ble_ll_hci_le_wr_sugg_data_len>
   20a62:	4605      	mov	r5, r0
        break;
   20a64:	e04d      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   20a66:	f000 fd61 	bl	2152c <ble_ll_resolv_list_add>
   20a6a:	4605      	mov	r5, r0
        break;
   20a6c:	e049      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   20a6e:	f000 fdf3 	bl	21658 <ble_ll_resolv_list_rmv>
   20a72:	4605      	mov	r5, r0
        break;
   20a74:	e045      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20a76:	b109      	cbz	r1, 20a7c <ble_ll_hci_le_cmd_proc+0x1f8>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20a78:	2512      	movs	r5, #18
   20a7a:	e042      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_resolv_list_clr();
   20a7c:	f000 fd18 	bl	214b0 <ble_ll_resolv_list_clr>
   20a80:	4605      	mov	r5, r0
   20a82:	e03e      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20a84:	b109      	cbz	r1, 20a8a <ble_ll_hci_le_cmd_proc+0x206>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20a86:	2512      	movs	r5, #18
   20a88:	e03b      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   20a8a:	9904      	ldr	r1, [sp, #16]
   20a8c:	4610      	mov	r0, r2
   20a8e:	f000 fd23 	bl	214d8 <ble_ll_resolv_list_read_size>
   20a92:	4605      	mov	r5, r0
   20a94:	e035      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   20a96:	9b04      	ldr	r3, [sp, #16]
   20a98:	f000 fe40 	bl	2171c <ble_ll_resolv_peer_addr_rd>
   20a9c:	4605      	mov	r5, r0
        break;
   20a9e:	e030      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   20aa0:	9b04      	ldr	r3, [sp, #16]
   20aa2:	f000 fe56 	bl	21752 <ble_ll_resolv_local_addr_rd>
   20aa6:	4605      	mov	r5, r0
        break;
   20aa8:	e02b      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   20aaa:	f000 fe21 	bl	216f0 <ble_ll_resolv_enable_cmd>
   20aae:	4605      	mov	r5, r0
        break;
   20ab0:	e027      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   20ab2:	f000 fe69 	bl	21788 <ble_ll_resolv_set_rpa_tmo>
   20ab6:	4605      	mov	r5, r0
        break;
   20ab8:	e023      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20aba:	b109      	cbz	r1, 20ac0 <ble_ll_hci_le_cmd_proc+0x23c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20abc:	2512      	movs	r5, #18
   20abe:	e020      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   20ac0:	9904      	ldr	r1, [sp, #16]
   20ac2:	4610      	mov	r0, r2
   20ac4:	f7ff fd2e 	bl	20524 <ble_ll_hci_le_rd_max_data_len>
   20ac8:	4605      	mov	r5, r0
   20aca:	e01a      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20acc:	b109      	cbz	r1, 20ad2 <ble_ll_hci_le_cmd_proc+0x24e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20ace:	2512      	movs	r5, #18
   20ad0:	e017      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_read_tx_power(rspbuf, rsplen);
   20ad2:	9904      	ldr	r1, [sp, #16]
   20ad4:	4610      	mov	r0, r2
   20ad6:	f7ff fe93 	bl	20800 <ble_ll_read_tx_power>
   20ada:	4605      	mov	r5, r0
   20adc:	e011      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   20ade:	b109      	cbz	r1, 20ae4 <ble_ll_hci_le_cmd_proc+0x260>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20ae0:	2512      	movs	r5, #18
   20ae2:	e00e      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   20ae4:	9904      	ldr	r1, [sp, #16]
   20ae6:	4610      	mov	r0, r2
   20ae8:	f7ff fd52 	bl	20590 <ble_ll_read_rf_path_compensation>
   20aec:	4605      	mov	r5, r0
   20aee:	e008      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   20af0:	f7ff fe96 	bl	20820 <ble_ll_write_rf_path_compensation>
   20af4:	4605      	mov	r5, r0
        break;
   20af6:	e004      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   20af8:	f000 fe70 	bl	217dc <ble_ll_resolve_set_priv_mode>
   20afc:	4605      	mov	r5, r0
        break;
   20afe:	e000      	b.n	20b02 <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20b00:	2501      	movs	r5, #1
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf)) {
   20b02:	4620      	mov	r0, r4
   20b04:	f7ff fd1e 	bl	20544 <ble_ll_hci_le_cmd_send_cmd_status>
   20b08:	b108      	cbz	r0, 20b0e <ble_ll_hci_le_cmd_proc+0x28a>
        rc += (BLE_ERR_MAX + 1);
   20b0a:	f505 7580 	add.w	r5, r5, #256	; 0x100
}
   20b0e:	4628      	mov	r0, r5
   20b10:	bd38      	pop	{r3, r4, r5, pc}

00020b12 <ble_ll_hci_adv_mode_ext>:
}
   20b12:	2000      	movs	r0, #0
   20b14:	4770      	bx	lr
	...

00020b18 <ble_ll_hci_event_send>:
{
   20b18:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   20b1a:	7843      	ldrb	r3, [r0, #1]
   20b1c:	3302      	adds	r3, #2
   20b1e:	2b46      	cmp	r3, #70	; 0x46
   20b20:	d806      	bhi.n	20b30 <ble_ll_hci_event_send+0x18>
    STATS_INC(ble_ll_stats, hci_events_sent);
   20b22:	4a08      	ldr	r2, [pc, #32]	; (20b44 <ble_ll_hci_event_send+0x2c>)
   20b24:	6953      	ldr	r3, [r2, #20]
   20b26:	3301      	adds	r3, #1
   20b28:	6153      	str	r3, [r2, #20]
    rc = ble_hci_trans_ll_evt_tx((uint8_t *)hci_ev);
   20b2a:	f00c fd5d 	bl	2d5e8 <ble_hci_trans_ll_evt_tx>
}
   20b2e:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   20b30:	f7f3 fd90 	bl	14654 <hal_debugger_connected>
   20b34:	b100      	cbz	r0, 20b38 <ble_ll_hci_event_send+0x20>
   20b36:	be01      	bkpt	0x0001
   20b38:	2300      	movs	r3, #0
   20b3a:	461a      	mov	r2, r3
   20b3c:	4619      	mov	r1, r3
   20b3e:	4618      	mov	r0, r3
   20b40:	f7f4 f92a 	bl	14d98 <__assert_func>
   20b44:	10001ea8 	.word	0x10001ea8

00020b48 <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   20b48:	b570      	push	{r4, r5, r6, lr}
   20b4a:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   20b4c:	2300      	movs	r3, #0
   20b4e:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   20b50:	6885      	ldr	r5, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   20b52:	b1bd      	cbz	r5, 20b84 <ble_ll_hci_cmd_proc+0x3c>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   20b54:	462b      	mov	r3, r5
   20b56:	f833 6b06 	ldrh.w	r6, [r3], #6
    ocf = BLE_HCI_OCF(opcode);
   20b5a:	f3c6 0209 	ubfx	r2, r6, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   20b5e:	f3c6 2185 	ubfx	r1, r6, #10, #6
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   20b62:	2000      	movs	r0, #0
   20b64:	f88d 000f 	strb.w	r0, [sp, #15]

    switch (ogf) {
   20b68:	2908      	cmp	r1, #8
   20b6a:	d815      	bhi.n	20b98 <ble_ll_hci_cmd_proc+0x50>
   20b6c:	b248      	sxtb	r0, r1
   20b6e:	2800      	cmp	r0, #0
   20b70:	d06c      	beq.n	20c4c <ble_ll_hci_cmd_proc+0x104>
   20b72:	3901      	subs	r1, #1
   20b74:	2907      	cmp	r1, #7
   20b76:	d86b      	bhi.n	20c50 <ble_ll_hci_cmd_proc+0x108>
   20b78:	e8df f001 	tbb	[pc, r1]
   20b7c:	4b426a1d 	.word	0x4b426a1d
   20b80:	5d6a6a54 	.word	0x5d6a6a54
    BLE_LL_ASSERT(cmd != NULL);
   20b84:	f7f3 fd66 	bl	14654 <hal_debugger_connected>
   20b88:	b100      	cbz	r0, 20b8c <ble_ll_hci_cmd_proc+0x44>
   20b8a:	be01      	bkpt	0x0001
   20b8c:	2300      	movs	r3, #0
   20b8e:	461a      	mov	r2, r3
   20b90:	4619      	mov	r1, r3
   20b92:	4618      	mov	r0, r3
   20b94:	f7f4 f900 	bl	14d98 <__assert_func>
    switch (ogf) {
   20b98:	293f      	cmp	r1, #63	; 0x3f
   20b9a:	d108      	bne.n	20bae <ble_ll_hci_cmd_proc+0x66>
    case BLE_HCI_OGF_LE:
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
        break;
#if MYNEWT_VAL(BLE_LL_HCI_VS)
    case BLE_HCI_OGF_VENDOR:
        rc = ble_ll_hci_vs_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   20b9c:	78a9      	ldrb	r1, [r5, #2]
   20b9e:	f10d 000f 	add.w	r0, sp, #15
   20ba2:	9000      	str	r0, [sp, #0]
   20ba4:	1ce8      	adds	r0, r5, #3
   20ba6:	f000 face 	bl	21146 <ble_ll_hci_vs_cmd_proc>
   20baa:	4604      	mov	r4, r0
        break;
   20bac:	e008      	b.n	20bc0 <ble_ll_hci_cmd_proc+0x78>
    switch (ogf) {
   20bae:	2401      	movs	r4, #1

    /* We always send command status for unknown command
     * ref: Core 5.3, Vol 4, Part E, 4.5
     */
    if (rc == BLE_ERR_UNKNOWN_HCI_CMD) {
        rc += (BLE_ERR_MAX + 1);
   20bb0:	f504 7480 	add.w	r4, r4, #256	; 0x100
   20bb4:	e006      	b.n	20bc4 <ble_ll_hci_cmd_proc+0x7c>
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   20bb6:	78a9      	ldrb	r1, [r5, #2]
   20bb8:	1ce8      	adds	r0, r5, #3
   20bba:	f7ff fd1b 	bl	205f4 <ble_ll_hci_link_ctrl_cmd_proc>
   20bbe:	4604      	mov	r4, r0
    if (rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   20bc0:	2c01      	cmp	r4, #1
   20bc2:	d0f5      	beq.n	20bb0 <ble_ll_hci_cmd_proc+0x68>
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   20bc4:	2c00      	cmp	r4, #0
   20bc6:	db45      	blt.n	20c54 <ble_ll_hci_cmd_proc+0x10c>
    if (rc <= BLE_ERR_MAX) {
   20bc8:	2cff      	cmp	r4, #255	; 0xff
   20bca:	dc4d      	bgt.n	20c68 <ble_ll_hci_cmd_proc+0x120>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   20bcc:	230e      	movs	r3, #14
   20bce:	702b      	strb	r3, [r5, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   20bd0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   20bd4:	3304      	adds	r3, #4
   20bd6:	706b      	strb	r3, [r5, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   20bd8:	f7ff fc52 	bl	20480 <ble_ll_hci_get_num_cmd_pkts>
   20bdc:	70a8      	strb	r0, [r5, #2]
        cmd_complete->opcode = htole16(opcode);
   20bde:	f8a5 6003 	strh.w	r6, [r5, #3]
        cmd_complete->status = (uint8_t) rc;
   20be2:	716c      	strb	r4, [r5, #5]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
        cmd_status->opcode = htole16(opcode);
    }

    /* Count commands and those in error */
    if (rc) {
   20be4:	2c00      	cmp	r4, #0
   20be6:	d04b      	beq.n	20c80 <ble_ll_hci_cmd_proc+0x138>
        STATS_INC(ble_ll_stats, hci_cmd_errs);
   20be8:	4a28      	ldr	r2, [pc, #160]	; (20c8c <ble_ll_hci_cmd_proc+0x144>)
   20bea:	6913      	ldr	r3, [r2, #16]
   20bec:	3301      	adds	r3, #1
   20bee:	6113      	str	r3, [r2, #16]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   20bf0:	4628      	mov	r0, r5
   20bf2:	f7ff ff91 	bl	20b18 <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   20bf6:	9b02      	ldr	r3, [sp, #8]
   20bf8:	b103      	cbz	r3, 20bfc <ble_ll_hci_cmd_proc+0xb4>
        post_cb();
   20bfa:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   20bfc:	b004      	add	sp, #16
   20bfe:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   20c00:	78a9      	ldrb	r1, [r5, #2]
   20c02:	f10d 000f 	add.w	r0, sp, #15
   20c06:	9000      	str	r0, [sp, #0]
   20c08:	1ce8      	adds	r0, r5, #3
   20c0a:	f7ff fd04 	bl	20616 <ble_ll_hci_ctlr_bb_cmd_proc>
   20c0e:	4604      	mov	r4, r0
        break;
   20c10:	e7d6      	b.n	20bc0 <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   20c12:	78a9      	ldrb	r1, [r5, #2]
   20c14:	f10d 000f 	add.w	r0, sp, #15
   20c18:	9000      	str	r0, [sp, #0]
   20c1a:	1ce8      	adds	r0, r5, #3
   20c1c:	f7ff fd48 	bl	206b0 <ble_ll_hci_info_params_cmd_proc>
   20c20:	4604      	mov	r4, r0
        break;
   20c22:	e7cd      	b.n	20bc0 <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   20c24:	78a9      	ldrb	r1, [r5, #2]
   20c26:	f10d 000f 	add.w	r0, sp, #15
   20c2a:	9000      	str	r0, [sp, #0]
   20c2c:	1ce8      	adds	r0, r5, #3
   20c2e:	f7ff fd6c 	bl	2070a <ble_ll_hci_status_params_cmd_proc>
   20c32:	4604      	mov	r4, r0
        break;
   20c34:	e7c4      	b.n	20bc0 <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   20c36:	78a9      	ldrb	r1, [r5, #2]
   20c38:	a802      	add	r0, sp, #8
   20c3a:	9001      	str	r0, [sp, #4]
   20c3c:	f10d 000f 	add.w	r0, sp, #15
   20c40:	9000      	str	r0, [sp, #0]
   20c42:	1ce8      	adds	r0, r5, #3
   20c44:	f7ff fe1e 	bl	20884 <ble_ll_hci_le_cmd_proc>
   20c48:	4604      	mov	r4, r0
        break;
   20c4a:	e7b9      	b.n	20bc0 <ble_ll_hci_cmd_proc+0x78>
    switch (ogf) {
   20c4c:	2401      	movs	r4, #1
   20c4e:	e7af      	b.n	20bb0 <ble_ll_hci_cmd_proc+0x68>
   20c50:	2401      	movs	r4, #1
   20c52:	e7ad      	b.n	20bb0 <ble_ll_hci_cmd_proc+0x68>
    BLE_LL_ASSERT(rc >= 0);
   20c54:	f7f3 fcfe 	bl	14654 <hal_debugger_connected>
   20c58:	b100      	cbz	r0, 20c5c <ble_ll_hci_cmd_proc+0x114>
   20c5a:	be01      	bkpt	0x0001
   20c5c:	2300      	movs	r3, #0
   20c5e:	461a      	mov	r2, r3
   20c60:	4619      	mov	r1, r3
   20c62:	4618      	mov	r0, r3
   20c64:	f7f4 f898 	bl	14d98 <__assert_func>
        rc -= (BLE_ERR_MAX + 1);
   20c68:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   20c6c:	230f      	movs	r3, #15
   20c6e:	702b      	strb	r3, [r5, #0]
        hci_ev->length = sizeof(*cmd_status);
   20c70:	2304      	movs	r3, #4
   20c72:	706b      	strb	r3, [r5, #1]
        cmd_status->status = (uint8_t)rc;
   20c74:	70ac      	strb	r4, [r5, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   20c76:	f7ff fc03 	bl	20480 <ble_ll_hci_get_num_cmd_pkts>
   20c7a:	70e8      	strb	r0, [r5, #3]
        cmd_status->opcode = htole16(opcode);
   20c7c:	80ae      	strh	r6, [r5, #4]
   20c7e:	e7b1      	b.n	20be4 <ble_ll_hci_cmd_proc+0x9c>
        STATS_INC(ble_ll_stats, hci_cmds);
   20c80:	4a02      	ldr	r2, [pc, #8]	; (20c8c <ble_ll_hci_cmd_proc+0x144>)
   20c82:	68d3      	ldr	r3, [r2, #12]
   20c84:	3301      	adds	r3, #1
   20c86:	60d3      	str	r3, [r2, #12]
   20c88:	e7b2      	b.n	20bf0 <ble_ll_hci_cmd_proc+0xa8>
   20c8a:	bf00      	nop
   20c8c:	10001ea8 	.word	0x10001ea8

00020c90 <ble_ll_hci_send_noop>:
{
   20c90:	b510      	push	{r4, lr}
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20c92:	2002      	movs	r0, #2
   20c94:	f00c fcea 	bl	2d66c <ble_hci_trans_buf_alloc>
    if (hci_ev) {
   20c98:	b168      	cbz	r0, 20cb6 <ble_ll_hci_send_noop+0x26>
   20c9a:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   20c9c:	230e      	movs	r3, #14
   20c9e:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   20ca0:	2303      	movs	r3, #3
   20ca2:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   20ca4:	f7ff fbec 	bl	20480 <ble_ll_hci_get_num_cmd_pkts>
   20ca8:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   20caa:	2300      	movs	r3, #0
   20cac:	70e3      	strb	r3, [r4, #3]
   20cae:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   20cb0:	4620      	mov	r0, r4
   20cb2:	f7ff ff31 	bl	20b18 <ble_ll_hci_event_send>
}
   20cb6:	bd10      	pop	{r4, pc}

00020cb8 <ble_ll_hci_is_le_event_enabled>:
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   20cb8:	4b0f      	ldr	r3, [pc, #60]	; (20cf8 <ble_ll_hci_is_le_event_enabled+0x40>)
   20cba:	6859      	ldr	r1, [r3, #4]
   20cbc:	2200      	movs	r2, #0
   20cbe:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   20cc2:	4313      	orrs	r3, r2
   20cc4:	d101      	bne.n	20cca <ble_ll_hci_is_le_event_enabled+0x12>
    return false;
   20cc6:	2000      	movs	r0, #0
}
   20cc8:	4770      	bx	lr
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   20cca:	1e41      	subs	r1, r0, #1
   20ccc:	2201      	movs	r2, #1
   20cce:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   20cd2:	f1c0 0021 	rsb	r0, r0, #33	; 0x21
   20cd6:	fa02 f303 	lsl.w	r3, r2, r3
   20cda:	fa22 f000 	lsr.w	r0, r2, r0
   20cde:	4318      	orrs	r0, r3
   20ce0:	408a      	lsls	r2, r1
   20ce2:	4b06      	ldr	r3, [pc, #24]	; (20cfc <ble_ll_hci_is_le_event_enabled+0x44>)
   20ce4:	6819      	ldr	r1, [r3, #0]
   20ce6:	685b      	ldr	r3, [r3, #4]
   20ce8:	400a      	ands	r2, r1
   20cea:	4018      	ands	r0, r3
   20cec:	ea52 0300 	orrs.w	r3, r2, r0
   20cf0:	bf14      	ite	ne
   20cf2:	2001      	movne	r0, #1
   20cf4:	2000      	moveq	r0, #0
   20cf6:	4770      	bx	lr
   20cf8:	10002510 	.word	0x10002510
   20cfc:	10002520 	.word	0x10002520

00020d00 <ble_ll_hci_is_event_enabled>:
    if (evcode >= 64) {
   20d00:	283f      	cmp	r0, #63	; 0x3f
   20d02:	d816      	bhi.n	20d32 <ble_ll_hci_is_event_enabled+0x32>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   20d04:	1e41      	subs	r1, r0, #1
   20d06:	2201      	movs	r2, #1
   20d08:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   20d0c:	f1c0 0021 	rsb	r0, r0, #33	; 0x21
   20d10:	fa02 f303 	lsl.w	r3, r2, r3
   20d14:	fa22 f000 	lsr.w	r0, r2, r0
   20d18:	4318      	orrs	r0, r3
   20d1a:	408a      	lsls	r2, r1
   20d1c:	4b11      	ldr	r3, [pc, #68]	; (20d64 <ble_ll_hci_is_event_enabled+0x64>)
   20d1e:	6819      	ldr	r1, [r3, #0]
   20d20:	685b      	ldr	r3, [r3, #4]
   20d22:	400a      	ands	r2, r1
   20d24:	4018      	ands	r0, r3
   20d26:	ea52 0300 	orrs.w	r3, r2, r0
   20d2a:	bf14      	ite	ne
   20d2c:	2001      	movne	r0, #1
   20d2e:	2000      	moveq	r0, #0
}
   20d30:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   20d32:	f1a0 0140 	sub.w	r1, r0, #64	; 0x40
   20d36:	2201      	movs	r2, #1
   20d38:	f1a0 0360 	sub.w	r3, r0, #96	; 0x60
   20d3c:	f1c0 0060 	rsb	r0, r0, #96	; 0x60
   20d40:	fa02 f303 	lsl.w	r3, r2, r3
   20d44:	fa22 f000 	lsr.w	r0, r2, r0
   20d48:	4318      	orrs	r0, r3
   20d4a:	408a      	lsls	r2, r1
   20d4c:	4b06      	ldr	r3, [pc, #24]	; (20d68 <ble_ll_hci_is_event_enabled+0x68>)
   20d4e:	6819      	ldr	r1, [r3, #0]
   20d50:	685b      	ldr	r3, [r3, #4]
   20d52:	400a      	ands	r2, r1
   20d54:	4018      	ands	r0, r3
   20d56:	ea52 0300 	orrs.w	r3, r2, r0
   20d5a:	bf14      	ite	ne
   20d5c:	2001      	movne	r0, #1
   20d5e:	2000      	moveq	r0, #0
   20d60:	4770      	bx	lr
   20d62:	bf00      	nop
   20d64:	10002510 	.word	0x10002510
   20d68:	10002518 	.word	0x10002518

00020d6c <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmdbuf, void *arg)
{
   20d6c:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   20d6e:	4b0c      	ldr	r3, [pc, #48]	; (20da0 <ble_ll_hci_cmd_rx+0x34>)
   20d70:	781b      	ldrb	r3, [r3, #0]
    }
#endif

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   20d72:	b99b      	cbnz	r3, 20d9c <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   20d74:	4b0a      	ldr	r3, [pc, #40]	; (20da0 <ble_ll_hci_cmd_rx+0x34>)
   20d76:	781b      	ldrb	r3, [r3, #0]
   20d78:	b933      	cbnz	r3, 20d88 <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   20d7a:	4909      	ldr	r1, [pc, #36]	; (20da0 <ble_ll_hci_cmd_rx+0x34>)
   20d7c:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   20d7e:	4809      	ldr	r0, [pc, #36]	; (20da4 <ble_ll_hci_cmd_rx+0x38>)
   20d80:	f7f4 fb3d 	bl	153fe <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmdbuf);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   20d84:	2000      	movs	r0, #0
}
   20d86:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   20d88:	f7f3 fc64 	bl	14654 <hal_debugger_connected>
   20d8c:	b100      	cbz	r0, 20d90 <ble_ll_hci_cmd_rx+0x24>
   20d8e:	be01      	bkpt	0x0001
   20d90:	2300      	movs	r3, #0
   20d92:	461a      	mov	r2, r3
   20d94:	4619      	mov	r1, r3
   20d96:	4618      	mov	r0, r3
   20d98:	f7f3 fffe 	bl	14d98 <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   20d9c:	2007      	movs	r0, #7
   20d9e:	e7f2      	b.n	20d86 <ble_ll_hci_cmd_rx+0x1a>
   20da0:	100024fc 	.word	0x100024fc
   20da4:	10001fc8 	.word	0x10001fc8

00020da8 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   20da8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    ble_ll_acl_data_in(om);
   20daa:	f7fb fd8d 	bl	1c8c8 <ble_ll_acl_data_in>
#else
    /* host should never send ACL in that case but if it does just ignore it */
    os_mbuf_free_chain(om);
#endif
    return 0;
}
   20dae:	2000      	movs	r0, #0
   20db0:	bd08      	pop	{r3, pc}
	...

00020db4 <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   20db4:	4a0e      	ldr	r2, [pc, #56]	; (20df0 <ble_ll_hci_init+0x3c>)
   20db6:	2300      	movs	r3, #0
   20db8:	6013      	str	r3, [r2, #0]
   20dba:	6093      	str	r3, [r2, #8]
   20dbc:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   20dbe:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   20dc0:	490c      	ldr	r1, [pc, #48]	; (20df4 <ble_ll_hci_init+0x40>)
   20dc2:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   20dc4:	4a0c      	ldr	r2, [pc, #48]	; (20df8 <ble_ll_hci_init+0x44>)
   20dc6:	201f      	movs	r0, #31
   20dc8:	2100      	movs	r1, #0
   20dca:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   20dce:	4a0b      	ldr	r2, [pc, #44]	; (20dfc <ble_ll_hci_init+0x48>)
   20dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20dd4:	f641 71ff 	movw	r1, #8191	; 0x1fff
   20dd8:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   20ddc:	4a08      	ldr	r2, [pc, #32]	; (20e00 <ble_ll_hci_init+0x4c>)
   20dde:	2000      	movs	r0, #0
   20de0:	2100      	movs	r1, #0
   20de2:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   20de6:	4a07      	ldr	r2, [pc, #28]	; (20e04 <ble_ll_hci_init+0x50>)
   20de8:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   20dea:	4a07      	ldr	r2, [pc, #28]	; (20e08 <ble_ll_hci_init+0x54>)
   20dec:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   20dee:	4770      	bx	lr
   20df0:	100024fc 	.word	0x100024fc
   20df4:	00020b49 	.word	0x00020b49
   20df8:	10002520 	.word	0x10002520
   20dfc:	10002510 	.word	0x10002510
   20e00:	10002518 	.word	0x10002518
   20e04:	10002528 	.word	0x10002528
   20e08:	1000252a 	.word	0x1000252a

00020e0c <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   20e0c:	b510      	push	{r4, lr}
   20e0e:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   20e10:	2007      	movs	r0, #7
   20e12:	f7ff ff51 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   20e16:	b900      	cbnz	r0, 20e1a <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   20e18:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20e1a:	2002      	movs	r0, #2
   20e1c:	f00c fc26 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20e20:	2800      	cmp	r0, #0
   20e22:	d0f9      	beq.n	20e18 <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   20e24:	223e      	movs	r2, #62	; 0x3e
   20e26:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20e28:	220b      	movs	r2, #11
   20e2a:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   20e2c:	2207      	movs	r2, #7
   20e2e:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   20e30:	88a2      	ldrh	r2, [r4, #4]
   20e32:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   20e36:	7b62      	ldrb	r2, [r4, #13]
   20e38:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   20e3c:	8b22      	ldrh	r2, [r4, #24]
   20e3e:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   20e42:	7ba2      	ldrb	r2, [r4, #14]
   20e44:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   20e48:	8b62      	ldrh	r2, [r4, #26]
   20e4a:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   20e4e:	f7ff fe63 	bl	20b18 <ble_ll_hci_event_send>
}
   20e52:	e7e1      	b.n	20e18 <ble_ll_hci_ev_datalen_chg+0xc>

00020e54 <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   20e54:	b538      	push	{r3, r4, r5, lr}
   20e56:	4605      	mov	r5, r0
   20e58:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   20e5a:	2006      	movs	r0, #6
   20e5c:	f7ff ff2c 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   20e60:	b900      	cbnz	r0, 20e64 <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   20e62:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20e64:	2002      	movs	r0, #2
   20e66:	f00c fc01 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20e6a:	2800      	cmp	r0, #0
   20e6c:	d0f9      	beq.n	20e62 <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   20e6e:	223e      	movs	r2, #62	; 0x3e
   20e70:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20e72:	220b      	movs	r2, #11
   20e74:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   20e76:	2206      	movs	r2, #6
   20e78:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   20e7a:	88aa      	ldrh	r2, [r5, #4]
   20e7c:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   20e80:	8822      	ldrh	r2, [r4, #0]
   20e82:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   20e86:	8862      	ldrh	r2, [r4, #2]
   20e88:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   20e8c:	88a2      	ldrh	r2, [r4, #4]
   20e8e:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   20e92:	88e2      	ldrh	r2, [r4, #6]
   20e94:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   20e98:	f7ff fe3e 	bl	20b18 <ble_ll_hci_event_send>
}
   20e9c:	e7e1      	b.n	20e62 <ble_ll_hci_ev_rem_conn_parm_req+0xe>

00020e9e <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   20e9e:	b538      	push	{r3, r4, r5, lr}
   20ea0:	4605      	mov	r5, r0
   20ea2:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   20ea4:	2003      	movs	r0, #3
   20ea6:	f7ff ff07 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   20eaa:	b900      	cbnz	r0, 20eae <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   20eac:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20eae:	2002      	movs	r0, #2
   20eb0:	f00c fbdc 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20eb4:	2800      	cmp	r0, #0
   20eb6:	d0f9      	beq.n	20eac <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   20eb8:	223e      	movs	r2, #62	; 0x3e
   20eba:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20ebc:	220a      	movs	r2, #10
   20ebe:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   20ec0:	2203      	movs	r2, #3
   20ec2:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   20ec4:	70c4      	strb	r4, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   20ec6:	88aa      	ldrh	r2, [r5, #4]
   20ec8:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   20eca:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
   20ece:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->periph_latency);
   20ed0:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
   20ed4:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   20ed6:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
   20eda:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   20edc:	f7ff fe1c 	bl	20b18 <ble_ll_hci_event_send>
}
   20ee0:	e7e4      	b.n	20eac <ble_ll_hci_ev_conn_update+0xe>

00020ee2 <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   20ee2:	b538      	push	{r3, r4, r5, lr}
   20ee4:	4604      	mov	r4, r0
   20ee6:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   20ee8:	7883      	ldrb	r3, [r0, #2]
   20eea:	f013 0f04 	tst.w	r3, #4
   20eee:	d004      	beq.n	20efa <ble_ll_hci_ev_encrypt_chg+0x18>

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
        return;
    }

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   20ef0:	2030      	movs	r0, #48	; 0x30
   20ef2:	f7ff ff05 	bl	20d00 <ble_ll_hci_is_event_enabled>
   20ef6:	b9e8      	cbnz	r0, 20f34 <ble_ll_hci_ev_encrypt_chg+0x52>
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   20ef8:	bd38      	pop	{r3, r4, r5, pc}
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   20efa:	2008      	movs	r0, #8
   20efc:	f7ff ff00 	bl	20d00 <ble_ll_hci_is_event_enabled>
   20f00:	b920      	cbnz	r0, 20f0c <ble_ll_hci_ev_encrypt_chg+0x2a>
        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   20f02:	78a3      	ldrb	r3, [r4, #2]
   20f04:	f043 0304 	orr.w	r3, r3, #4
   20f08:	70a3      	strb	r3, [r4, #2]
        return;
   20f0a:	e7f5      	b.n	20ef8 <ble_ll_hci_ev_encrypt_chg+0x16>
            hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20f0c:	2002      	movs	r0, #2
   20f0e:	f00c fbad 	bl	2d66c <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   20f12:	2800      	cmp	r0, #0
   20f14:	d0f5      	beq.n	20f02 <ble_ll_hci_ev_encrypt_chg+0x20>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   20f16:	2208      	movs	r2, #8
   20f18:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   20f1a:	2204      	movs	r2, #4
   20f1c:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   20f1e:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   20f20:	88a2      	ldrh	r2, [r4, #4]
   20f22:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   20f26:	fab5 f185 	clz	r1, r5
   20f2a:	0949      	lsrs	r1, r1, #5
   20f2c:	7141      	strb	r1, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   20f2e:	f7ff fdf3 	bl	20b18 <ble_ll_hci_event_send>
   20f32:	e7e6      	b.n	20f02 <ble_ll_hci_ev_encrypt_chg+0x20>
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20f34:	2002      	movs	r0, #2
   20f36:	f00c fb99 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20f3a:	2800      	cmp	r0, #0
   20f3c:	d0dc      	beq.n	20ef8 <ble_ll_hci_ev_encrypt_chg+0x16>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   20f3e:	2230      	movs	r2, #48	; 0x30
   20f40:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   20f42:	2203      	movs	r2, #3
   20f44:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   20f46:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   20f48:	88a2      	ldrh	r2, [r4, #4]
   20f4a:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   20f4e:	f7ff fde3 	bl	20b18 <ble_ll_hci_event_send>
   20f52:	e7d1      	b.n	20ef8 <ble_ll_hci_ev_encrypt_chg+0x16>

00020f54 <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   20f54:	b510      	push	{r4, lr}
   20f56:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   20f58:	2005      	movs	r0, #5
   20f5a:	f7ff fead 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   20f5e:	b1e0      	cbz	r0, 20f9a <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20f60:	2002      	movs	r0, #2
   20f62:	f00c fb83 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20f66:	b1d8      	cbz	r0, 20fa0 <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   20f68:	223e      	movs	r2, #62	; 0x3e
   20f6a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20f6c:	220d      	movs	r2, #13
   20f6e:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   20f70:	2205      	movs	r2, #5
   20f72:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   20f74:	88a2      	ldrh	r2, [r4, #4]
   20f76:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   20f7a:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   20f7e:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   20f82:	f8c0 1005 	str.w	r1, [r0, #5]
   20f86:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   20f8a:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   20f8e:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   20f92:	f7ff fdc1 	bl	20b18 <ble_ll_hci_event_send>
        }
        rc = 0;
   20f96:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   20f98:	bd10      	pop	{r4, pc}
        rc = -1;
   20f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20f9e:	e7fb      	b.n	20f98 <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   20fa0:	2000      	movs	r0, #0
    return rc;
   20fa2:	e7f9      	b.n	20f98 <ble_ll_hci_ev_ltk_req+0x44>

00020fa4 <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   20fa4:	b538      	push	{r3, r4, r5, lr}
   20fa6:	4605      	mov	r5, r0
   20fa8:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   20faa:	2004      	movs	r0, #4
   20fac:	f7ff fe84 	bl	20cb8 <ble_ll_hci_is_le_event_enabled>
   20fb0:	b900      	cbnz	r0, 20fb4 <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   20fb2:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20fb4:	2002      	movs	r0, #2
   20fb6:	f00c fb59 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20fba:	2800      	cmp	r0, #0
   20fbc:	d0f9      	beq.n	20fb2 <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   20fbe:	233e      	movs	r3, #62	; 0x3e
   20fc0:	7003      	strb	r3, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20fc2:	230c      	movs	r3, #12
   20fc4:	7043      	strb	r3, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   20fc6:	2304      	movs	r3, #4
   20fc8:	7083      	strb	r3, [r0, #2]
            ev->status = status;
   20fca:	70c4      	strb	r4, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   20fcc:	88ab      	ldrh	r3, [r5, #4]
   20fce:	8083      	strh	r3, [r0, #4]
            ev->features[0] = connsm->conn_features;
   20fd0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   20fd4:	7183      	strb	r3, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   20fd6:	462b      	mov	r3, r5
   20fd8:	f853 1f3c 	ldr.w	r1, [r3, #60]!
   20fdc:	f8c0 1007 	str.w	r1, [r0, #7]
   20fe0:	8899      	ldrh	r1, [r3, #4]
   20fe2:	799b      	ldrb	r3, [r3, #6]
   20fe4:	f8a0 100b 	strh.w	r1, [r0, #11]
   20fe8:	7343      	strb	r3, [r0, #13]
            ble_ll_hci_event_send(hci_ev);
   20fea:	f7ff fd95 	bl	20b18 <ble_ll_hci_event_send>
}
   20fee:	e7e0      	b.n	20fb2 <ble_ll_hci_ev_rd_rem_used_feat+0xe>

00020ff0 <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   20ff0:	b538      	push	{r3, r4, r5, lr}
   20ff2:	4605      	mov	r5, r0
   20ff4:	460c      	mov	r4, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   20ff6:	200c      	movs	r0, #12
   20ff8:	f7ff fe82 	bl	20d00 <ble_ll_hci_is_event_enabled>
   20ffc:	b900      	cbnz	r0, 21000 <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   20ffe:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21000:	2002      	movs	r0, #2
   21002:	f00c fb33 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   21006:	2800      	cmp	r0, #0
   21008:	d0f9      	beq.n	20ffe <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   2100a:	220c      	movs	r2, #12
   2100c:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   2100e:	2208      	movs	r2, #8
   21010:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   21012:	7084      	strb	r4, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   21014:	88aa      	ldrh	r2, [r5, #4]
   21016:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   2101a:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   2101e:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   21020:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
   21024:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   21026:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
   2102a:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   2102c:	f7ff fd74 	bl	20b18 <ble_ll_hci_event_send>
}
   21030:	e7e5      	b.n	20ffe <ble_ll_hci_ev_rd_rem_ver+0xe>

00021032 <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   21032:	b510      	push	{r4, lr}
   21034:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   21036:	2010      	movs	r0, #16
   21038:	f7ff fe62 	bl	20d00 <ble_ll_hci_is_event_enabled>
   2103c:	b908      	cbnz	r0, 21042 <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   2103e:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   21040:	bd10      	pop	{r4, pc}
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   21042:	2002      	movs	r0, #2
   21044:	f00c fb12 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   21048:	b140      	cbz	r0, 2105c <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   2104a:	2210      	movs	r2, #16
   2104c:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   2104e:	2201      	movs	r2, #1
   21050:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   21052:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   21054:	f7ff fd60 	bl	20b18 <ble_ll_hci_event_send>
    rc = 0;
   21058:	2000      	movs	r0, #0
   2105a:	e7f1      	b.n	21040 <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   2105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   21060:	e7ee      	b.n	21040 <ble_ll_hci_ev_hw_err+0xe>

00021062 <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   21062:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   21064:	201a      	movs	r0, #26
   21066:	f7ff fe4b 	bl	20d00 <ble_ll_hci_is_event_enabled>
   2106a:	b900      	cbnz	r0, 2106e <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   2106c:	bd08      	pop	{r3, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2106e:	2002      	movs	r0, #2
   21070:	f00c fafc 	bl	2d66c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   21074:	2800      	cmp	r0, #0
   21076:	d0f9      	beq.n	2106c <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   21078:	221a      	movs	r2, #26
   2107a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   2107c:	2201      	movs	r2, #1
   2107e:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   21080:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   21082:	f7ff fd49 	bl	20b18 <ble_ll_hci_event_send>
}
   21086:	e7f1      	b.n	2106c <ble_ll_hci_ev_databuf_overflow+0xa>

00021088 <ble_ll_hci_vs_find_by_ocf>:
            ble_ll_hci_vs_set_tx_power),
};

static struct ble_ll_hci_vs_cmd *
ble_ll_hci_vs_find_by_ocf(uint16_t ocf)
{
   21088:	4602      	mov	r2, r0
    struct ble_ll_hci_vs_cmd *entry;

    entry = SLIST_FIRST(&g_ble_ll_hci_vs_list);
   2108a:	4b04      	ldr	r3, [pc, #16]	; (2109c <ble_ll_hci_vs_find_by_ocf+0x14>)
   2108c:	6818      	ldr	r0, [r3, #0]
    while (entry) {
   2108e:	b120      	cbz	r0, 2109a <ble_ll_hci_vs_find_by_ocf+0x12>
        if (entry->ocf == ocf) {
   21090:	8803      	ldrh	r3, [r0, #0]
   21092:	4293      	cmp	r3, r2
   21094:	d001      	beq.n	2109a <ble_ll_hci_vs_find_by_ocf+0x12>
            return entry;
        }

        entry = SLIST_NEXT(entry, link);
   21096:	6880      	ldr	r0, [r0, #8]
   21098:	e7f9      	b.n	2108e <ble_ll_hci_vs_find_by_ocf+0x6>
    }

    return NULL;
}
   2109a:	4770      	bx	lr
   2109c:	1000252c 	.word	0x1000252c

000210a0 <ble_ll_hci_vs_is_controller_busy>:
{
   210a0:	b508      	push	{r3, lr}
    if (ble_ll_adv_enabled()) {
   210a2:	f7fc fc59 	bl	1d958 <ble_ll_adv_enabled>
   210a6:	b958      	cbnz	r0, 210c0 <ble_ll_hci_vs_is_controller_busy+0x20>
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   210a8:	4b07      	ldr	r3, [pc, #28]	; (210c8 <ble_ll_hci_vs_is_controller_busy+0x28>)
   210aa:	681b      	ldr	r3, [r3, #0]
    int i = 0;
   210ac:	2200      	movs	r2, #0
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   210ae:	b11b      	cbz	r3, 210b8 <ble_ll_hci_vs_is_controller_busy+0x18>
        i++;
   210b0:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   210b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   210b6:	e7fa      	b.n	210ae <ble_ll_hci_vs_is_controller_busy+0xe>
    if (i < MYNEWT_VAL(BLE_MAX_CONNECTIONS)) {
   210b8:	2a00      	cmp	r2, #0
   210ba:	dd03      	ble.n	210c4 <ble_ll_hci_vs_is_controller_busy+0x24>
    return 0;
   210bc:	2000      	movs	r0, #0
}
   210be:	bd08      	pop	{r3, pc}
        return 1;
   210c0:	2001      	movs	r0, #1
   210c2:	e7fc      	b.n	210be <ble_ll_hci_vs_is_controller_busy+0x1e>
        return 1;
   210c4:	2001      	movs	r0, #1
   210c6:	e7fa      	b.n	210be <ble_ll_hci_vs_is_controller_busy+0x1e>
   210c8:	10002334 	.word	0x10002334

000210cc <ble_ll_hci_vs_set_tx_power>:
{
   210cc:	b570      	push	{r4, r5, r6, lr}
    if (cmdlen != sizeof(*cmd)) {
   210ce:	2a01      	cmp	r2, #1
   210d0:	d002      	beq.n	210d8 <ble_ll_hci_vs_set_tx_power+0xc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   210d2:	2612      	movs	r6, #18
}
   210d4:	4630      	mov	r0, r6
   210d6:	bd70      	pop	{r4, r5, r6, pc}
   210d8:	460c      	mov	r4, r1
   210da:	461d      	mov	r5, r3
    if (ble_ll_hci_vs_is_controller_busy()) {
   210dc:	f7ff ffe0 	bl	210a0 <ble_ll_hci_vs_is_controller_busy>
   210e0:	4606      	mov	r6, r0
   210e2:	b998      	cbnz	r0, 2110c <ble_ll_hci_vs_set_tx_power+0x40>
    if (cmd->tx_power == 127) {
   210e4:	f994 0000 	ldrsb.w	r0, [r4]
   210e8:	287f      	cmp	r0, #127	; 0x7f
   210ea:	d10a      	bne.n	21102 <ble_ll_hci_vs_set_tx_power+0x36>
        g_ble_ll_tx_power = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   210ec:	4b08      	ldr	r3, [pc, #32]	; (21110 <ble_ll_hci_vs_set_tx_power+0x44>)
   210ee:	2200      	movs	r2, #0
   210f0:	701a      	strb	r2, [r3, #0]
    rsp->tx_power = g_ble_ll_tx_power;
   210f2:	4b07      	ldr	r3, [pc, #28]	; (21110 <ble_ll_hci_vs_set_tx_power+0x44>)
   210f4:	f993 3000 	ldrsb.w	r3, [r3]
   210f8:	702b      	strb	r3, [r5, #0]
    *rsplen = sizeof(*rsp);
   210fa:	9b04      	ldr	r3, [sp, #16]
   210fc:	2201      	movs	r2, #1
   210fe:	701a      	strb	r2, [r3, #0]
    return BLE_ERR_SUCCESS;
   21100:	e7e8      	b.n	210d4 <ble_ll_hci_vs_set_tx_power+0x8>
        g_ble_ll_tx_power = ble_phy_txpower_round(cmd->tx_power);
   21102:	f001 f88f 	bl	22224 <ble_phy_txpower_round>
   21106:	4b02      	ldr	r3, [pc, #8]	; (21110 <ble_ll_hci_vs_set_tx_power+0x44>)
   21108:	7018      	strb	r0, [r3, #0]
   2110a:	e7f2      	b.n	210f2 <ble_ll_hci_vs_set_tx_power+0x26>
        return BLE_ERR_CMD_DISALLOWED;
   2110c:	260c      	movs	r6, #12
   2110e:	e7e1      	b.n	210d4 <ble_ll_hci_vs_set_tx_power+0x8>
   21110:	10002218 	.word	0x10002218

00021114 <ble_ll_hci_vs_rd_static_addr>:
    if (cmdlen != 0) {
   21114:	b99a      	cbnz	r2, 2113e <ble_ll_hci_vs_rd_static_addr+0x2a>
{
   21116:	b510      	push	{r4, lr}
   21118:	b082      	sub	sp, #8
   2111a:	461c      	mov	r4, r3
    if (ble_hw_get_static_addr(&addr) < 0) {
   2111c:	4668      	mov	r0, sp
   2111e:	f001 f816 	bl	2214e <ble_hw_get_static_addr>
   21122:	2800      	cmp	r0, #0
   21124:	db0d      	blt.n	21142 <ble_ll_hci_vs_rd_static_addr+0x2e>
    memcpy(rsp->addr, addr.val, sizeof(rsp->addr));
   21126:	f8dd 3001 	ldr.w	r3, [sp, #1]
   2112a:	6023      	str	r3, [r4, #0]
   2112c:	f8bd 3005 	ldrh.w	r3, [sp, #5]
   21130:	80a3      	strh	r3, [r4, #4]
    *rsplen = sizeof(*rsp);
   21132:	9b04      	ldr	r3, [sp, #16]
   21134:	2206      	movs	r2, #6
   21136:	701a      	strb	r2, [r3, #0]
    return BLE_ERR_SUCCESS;
   21138:	2000      	movs	r0, #0
}
   2113a:	b002      	add	sp, #8
   2113c:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2113e:	2012      	movs	r0, #18
}
   21140:	4770      	bx	lr
        return BLE_ERR_UNSPECIFIED;
   21142:	201f      	movs	r0, #31
   21144:	e7f9      	b.n	2113a <ble_ll_hci_vs_rd_static_addr+0x26>

00021146 <ble_ll_hci_vs_cmd_proc>:

int
ble_ll_hci_vs_cmd_proc(const uint8_t *cmdbuf, uint8_t cmdlen, uint16_t ocf,
                       uint8_t *rspbuf, uint8_t *rsplen)
{
   21146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2114a:	b082      	sub	sp, #8
   2114c:	4607      	mov	r7, r0
   2114e:	460e      	mov	r6, r1
   21150:	4614      	mov	r4, r2
   21152:	461d      	mov	r5, r3
    struct ble_ll_hci_vs_cmd *cmd;
    int rc;

    cmd = ble_ll_hci_vs_find_by_ocf(ocf);
   21154:	4610      	mov	r0, r2
   21156:	f7ff ff97 	bl	21088 <ble_ll_hci_vs_find_by_ocf>
    if (!cmd) {
   2115a:	b158      	cbz	r0, 21174 <ble_ll_hci_vs_cmd_proc+0x2e>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
    } else {
        rc = cmd->cb(ocf, cmdbuf, cmdlen, rspbuf, rsplen);
   2115c:	f8d0 8004 	ldr.w	r8, [r0, #4]
   21160:	9b08      	ldr	r3, [sp, #32]
   21162:	9300      	str	r3, [sp, #0]
   21164:	462b      	mov	r3, r5
   21166:	4632      	mov	r2, r6
   21168:	4639      	mov	r1, r7
   2116a:	4620      	mov	r0, r4
   2116c:	47c0      	blx	r8
    }

    return rc;
}
   2116e:	b002      	add	sp, #8
   21170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   21174:	2001      	movs	r0, #1
    return rc;
   21176:	e7fa      	b.n	2116e <ble_ll_hci_vs_cmd_proc+0x28>

00021178 <ble_ll_hci_vs_register>:

void
ble_ll_hci_vs_register(struct ble_ll_hci_vs_cmd *cmds, uint32_t num_cmds)
{
   21178:	b570      	push	{r4, r5, r6, lr}
   2117a:	4604      	mov	r4, r0
   2117c:	460e      	mov	r6, r1

    /* Assume all cmds are registered early on init, so just assert in case of
     * invalid request since it means something is wrong with the code itself.
     */

    for (i = 0; i < num_cmds; i++, cmds++) {
   2117e:	2500      	movs	r5, #0
   21180:	42b5      	cmp	r5, r6
   21182:	d220      	bcs.n	211c6 <ble_ll_hci_vs_register+0x4e>
        BLE_LL_ASSERT(cmds->cb != NULL);
   21184:	6863      	ldr	r3, [r4, #4]
   21186:	b153      	cbz	r3, 2119e <ble_ll_hci_vs_register+0x26>
        BLE_LL_ASSERT(ble_ll_hci_vs_find_by_ocf(cmds->ocf) == NULL);
   21188:	8820      	ldrh	r0, [r4, #0]
   2118a:	f7ff ff7d 	bl	21088 <ble_ll_hci_vs_find_by_ocf>
   2118e:	b980      	cbnz	r0, 211b2 <ble_ll_hci_vs_register+0x3a>

        SLIST_INSERT_HEAD(&g_ble_ll_hci_vs_list, cmds, link);
   21190:	4b0d      	ldr	r3, [pc, #52]	; (211c8 <ble_ll_hci_vs_register+0x50>)
   21192:	681a      	ldr	r2, [r3, #0]
   21194:	60a2      	str	r2, [r4, #8]
   21196:	601c      	str	r4, [r3, #0]
    for (i = 0; i < num_cmds; i++, cmds++) {
   21198:	3501      	adds	r5, #1
   2119a:	340c      	adds	r4, #12
   2119c:	e7f0      	b.n	21180 <ble_ll_hci_vs_register+0x8>
        BLE_LL_ASSERT(cmds->cb != NULL);
   2119e:	f7f3 fa59 	bl	14654 <hal_debugger_connected>
   211a2:	b100      	cbz	r0, 211a6 <ble_ll_hci_vs_register+0x2e>
   211a4:	be01      	bkpt	0x0001
   211a6:	2300      	movs	r3, #0
   211a8:	461a      	mov	r2, r3
   211aa:	4619      	mov	r1, r3
   211ac:	4618      	mov	r0, r3
   211ae:	f7f3 fdf3 	bl	14d98 <__assert_func>
        BLE_LL_ASSERT(ble_ll_hci_vs_find_by_ocf(cmds->ocf) == NULL);
   211b2:	f7f3 fa4f 	bl	14654 <hal_debugger_connected>
   211b6:	b100      	cbz	r0, 211ba <ble_ll_hci_vs_register+0x42>
   211b8:	be01      	bkpt	0x0001
   211ba:	2300      	movs	r3, #0
   211bc:	461a      	mov	r2, r3
   211be:	4619      	mov	r1, r3
   211c0:	4618      	mov	r0, r3
   211c2:	f7f3 fde9 	bl	14d98 <__assert_func>
    }
}
   211c6:	bd70      	pop	{r4, r5, r6, pc}
   211c8:	1000252c 	.word	0x1000252c

000211cc <ble_ll_hci_vs_init>:

void
ble_ll_hci_vs_init(void)
{
   211cc:	b508      	push	{r3, lr}
    SLIST_INIT(&g_ble_ll_hci_vs_list);
   211ce:	4b04      	ldr	r3, [pc, #16]	; (211e0 <ble_ll_hci_vs_init+0x14>)
   211d0:	2200      	movs	r2, #0
   211d2:	601a      	str	r2, [r3, #0]

    ble_ll_hci_vs_register(g_ble_ll_hci_vs_cmds,
   211d4:	2102      	movs	r1, #2
   211d6:	4803      	ldr	r0, [pc, #12]	; (211e4 <ble_ll_hci_vs_init+0x18>)
   211d8:	f7ff ffce 	bl	21178 <ble_ll_hci_vs_register>
                           ARRAY_SIZE(g_ble_ll_hci_vs_cmds));
}
   211dc:	bd08      	pop	{r3, pc}
   211de:	bf00      	nop
   211e0:	1000252c 	.word	0x1000252c
   211e4:	100002a8 	.word	0x100002a8

000211e8 <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   211e8:	b538      	push	{r3, r4, r5, lr}
   211ea:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   211ec:	f7f5 fa8a 	bl	16704 <os_arch_save_sr>
   211f0:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   211f2:	4b0f      	ldr	r3, [pc, #60]	; (21230 <ble_ll_rand_sample+0x48>)
   211f4:	7a1b      	ldrb	r3, [r3, #8]
   211f6:	b2db      	uxtb	r3, r3
   211f8:	2b1f      	cmp	r3, #31
   211fa:	d815      	bhi.n	21228 <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   211fc:	4a0c      	ldr	r2, [pc, #48]	; (21230 <ble_ll_rand_sample+0x48>)
   211fe:	7a13      	ldrb	r3, [r2, #8]
   21200:	3301      	adds	r3, #1
   21202:	b2db      	uxtb	r3, r3
   21204:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   21206:	6813      	ldr	r3, [r2, #0]
   21208:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   2120a:	6813      	ldr	r3, [r2, #0]
   2120c:	4a09      	ldr	r2, [pc, #36]	; (21234 <ble_ll_rand_sample+0x4c>)
   2120e:	4293      	cmp	r3, r2
   21210:	d006      	beq.n	21220 <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   21212:	3301      	adds	r3, #1
   21214:	4a06      	ldr	r2, [pc, #24]	; (21230 <ble_ll_rand_sample+0x48>)
   21216:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   21218:	4620      	mov	r0, r4
   2121a:	f7f5 fa79 	bl	16710 <os_arch_restore_sr>
}
   2121e:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   21220:	4b03      	ldr	r3, [pc, #12]	; (21230 <ble_ll_rand_sample+0x48>)
   21222:	3a1f      	subs	r2, #31
   21224:	601a      	str	r2, [r3, #0]
   21226:	e7f7      	b.n	21218 <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   21228:	f000 ffbe 	bl	221a8 <ble_hw_rng_stop>
   2122c:	e7f4      	b.n	21218 <ble_ll_rand_sample+0x30>
   2122e:	bf00      	nop
   21230:	10002550 	.word	0x10002550
   21234:	1000254f 	.word	0x1000254f

00021238 <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   21238:	b570      	push	{r4, r5, r6, lr}
   2123a:	4604      	mov	r4, r0
   2123c:	460e      	mov	r6, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   2123e:	e018      	b.n	21272 <ble_ll_rand_data_get+0x3a>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   21240:	4a1b      	ldr	r2, [pc, #108]	; (212b0 <ble_ll_rand_data_get+0x78>)
   21242:	f1a5 011f 	sub.w	r1, r5, #31
   21246:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   21248:	3401      	adds	r4, #1
            --rnums;
   2124a:	3b01      	subs	r3, #1
   2124c:	b2db      	uxtb	r3, r3
        while (rnums) {
   2124e:	b15b      	cbz	r3, 21268 <ble_ll_rand_data_get+0x30>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   21250:	4a17      	ldr	r2, [pc, #92]	; (212b0 <ble_ll_rand_data_get+0x78>)
   21252:	6851      	ldr	r1, [r2, #4]
   21254:	7809      	ldrb	r1, [r1, #0]
   21256:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   21258:	6852      	ldr	r2, [r2, #4]
   2125a:	4d16      	ldr	r5, [pc, #88]	; (212b4 <ble_ll_rand_data_get+0x7c>)
   2125c:	42aa      	cmp	r2, r5
   2125e:	d0ef      	beq.n	21240 <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   21260:	3201      	adds	r2, #1
   21262:	4913      	ldr	r1, [pc, #76]	; (212b0 <ble_ll_rand_data_get+0x78>)
   21264:	604a      	str	r2, [r1, #4]
   21266:	e7ef      	b.n	21248 <ble_ll_rand_data_get+0x10>
        }
        OS_EXIT_CRITICAL(sr);
   21268:	f7f5 fa52 	bl	16710 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   2126c:	f000 ff80 	bl	22170 <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   21270:	b986      	cbnz	r6, 21294 <ble_ll_rand_data_get+0x5c>
    while (len != 0) {
   21272:	b1d6      	cbz	r6, 212aa <ble_ll_rand_data_get+0x72>
        OS_ENTER_CRITICAL(sr);
   21274:	f7f5 fa46 	bl	16704 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   21278:	4b0d      	ldr	r3, [pc, #52]	; (212b0 <ble_ll_rand_data_get+0x78>)
   2127a:	7a1b      	ldrb	r3, [r3, #8]
   2127c:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   2127e:	429e      	cmp	r6, r3
   21280:	d200      	bcs.n	21284 <ble_ll_rand_data_get+0x4c>
            rnums = len;
   21282:	4633      	mov	r3, r6
        len -= rnums;
   21284:	1af6      	subs	r6, r6, r3
   21286:	b2f6      	uxtb	r6, r6
        g_ble_ll_rnum_data.rnd_size -= rnums;
   21288:	4909      	ldr	r1, [pc, #36]	; (212b0 <ble_ll_rand_data_get+0x78>)
   2128a:	7a0a      	ldrb	r2, [r1, #8]
   2128c:	1ad2      	subs	r2, r2, r3
   2128e:	b2d2      	uxtb	r2, r2
   21290:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   21292:	e7dc      	b.n	2124e <ble_ll_rand_data_get+0x16>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   21294:	4b06      	ldr	r3, [pc, #24]	; (212b0 <ble_ll_rand_data_get+0x78>)
   21296:	7a1b      	ldrb	r3, [r3, #8]
   21298:	b2db      	uxtb	r3, r3
   2129a:	42b3      	cmp	r3, r6
   2129c:	d2e9      	bcs.n	21272 <ble_ll_rand_data_get+0x3a>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   2129e:	4b04      	ldr	r3, [pc, #16]	; (212b0 <ble_ll_rand_data_get+0x78>)
   212a0:	7a1b      	ldrb	r3, [r3, #8]
   212a2:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   212a4:	2b1f      	cmp	r3, #31
   212a6:	d9f5      	bls.n	21294 <ble_ll_rand_data_get+0x5c>
   212a8:	e7e3      	b.n	21272 <ble_ll_rand_data_get+0x3a>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   212aa:	2000      	movs	r0, #0
   212ac:	bd70      	pop	{r4, r5, r6, pc}
   212ae:	bf00      	nop
   212b0:	10002550 	.word	0x10002550
   212b4:	1000254f 	.word	0x1000254f

000212b8 <ble_ll_rand>:

/* Simple wrapper to allow easy replacement of rand() */
uint32_t
ble_ll_rand(void)
{
   212b8:	b508      	push	{r3, lr}
    static unsigned short xsubi[3];
    static bool init = true;

    if (init) {
   212ba:	4b07      	ldr	r3, [pc, #28]	; (212d8 <ble_ll_rand+0x20>)
   212bc:	781b      	ldrb	r3, [r3, #0]
   212be:	b91b      	cbnz	r3, 212c8 <ble_ll_rand+0x10>
        init = false;
        ble_ll_rand_data_get((uint8_t *)xsubi, sizeof(xsubi));
    }

    return (uint32_t) jrand48(xsubi);
   212c0:	4806      	ldr	r0, [pc, #24]	; (212dc <ble_ll_rand+0x24>)
   212c2:	f7f5 fc5d 	bl	16b80 <jrand48>
}
   212c6:	bd08      	pop	{r3, pc}
        init = false;
   212c8:	4b03      	ldr	r3, [pc, #12]	; (212d8 <ble_ll_rand+0x20>)
   212ca:	2200      	movs	r2, #0
   212cc:	701a      	strb	r2, [r3, #0]
        ble_ll_rand_data_get((uint8_t *)xsubi, sizeof(xsubi));
   212ce:	2106      	movs	r1, #6
   212d0:	4802      	ldr	r0, [pc, #8]	; (212dc <ble_ll_rand+0x24>)
   212d2:	f7ff ffb1 	bl	21238 <ble_ll_rand_data_get>
   212d6:	e7f3      	b.n	212c0 <ble_ll_rand+0x8>
   212d8:	100002c0 	.word	0x100002c0
   212dc:	1000255c 	.word	0x1000255c

000212e0 <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   212e0:	b510      	push	{r4, lr}
   212e2:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   212e4:	2103      	movs	r1, #3
   212e6:	4620      	mov	r0, r4
   212e8:	f7ff ffa6 	bl	21238 <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   212ec:	7823      	ldrb	r3, [r4, #0]
   212ee:	7862      	ldrb	r2, [r4, #1]
   212f0:	4413      	add	r3, r2
   212f2:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   212f4:	18d3      	adds	r3, r2, r3
   212f6:	d0f5      	beq.n	212e4 <ble_ll_rand_prand_get+0x4>
   212f8:	f240 21fd 	movw	r1, #765	; 0x2fd
   212fc:	428b      	cmp	r3, r1
   212fe:	d0f1      	beq.n	212e4 <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   21300:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   21304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   21308:	70a2      	strb	r2, [r4, #2]
}
   2130a:	bd10      	pop	{r4, pc}

0002130c <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   2130c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   2130e:	4b05      	ldr	r3, [pc, #20]	; (21324 <ble_ll_rand_start+0x18>)
   21310:	7a1b      	ldrb	r3, [r3, #8]
   21312:	b2db      	uxtb	r3, r3
   21314:	2b1f      	cmp	r3, #31
   21316:	d901      	bls.n	2131c <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   21318:	2000      	movs	r0, #0
   2131a:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   2131c:	f000 ff28 	bl	22170 <ble_hw_rng_start>
   21320:	e7fa      	b.n	21318 <ble_ll_rand_start+0xc>
   21322:	bf00      	nop
   21324:	10002550 	.word	0x10002550

00021328 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   21328:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   2132a:	4b05      	ldr	r3, [pc, #20]	; (21340 <ble_ll_rand_init+0x18>)
   2132c:	4a05      	ldr	r2, [pc, #20]	; (21344 <ble_ll_rand_init+0x1c>)
   2132e:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   21330:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   21332:	2101      	movs	r1, #1
   21334:	4804      	ldr	r0, [pc, #16]	; (21348 <ble_ll_rand_init+0x20>)
   21336:	f000 ff15 	bl	22164 <ble_hw_rng_init>
#endif
    return 0;
}
   2133a:	2000      	movs	r0, #0
   2133c:	bd08      	pop	{r3, pc}
   2133e:	bf00      	nop
   21340:	10002550 	.word	0x10002550
   21344:	10002530 	.word	0x10002530
   21348:	000211e9 	.word	0x000211e9

0002134c <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   2134c:	2300      	movs	r3, #0
   2134e:	2b0f      	cmp	r3, #15
   21350:	dc04      	bgt.n	2135c <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   21352:	7802      	ldrb	r2, [r0, #0]
   21354:	b922      	cbnz	r2, 21360 <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   21356:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   21358:	3301      	adds	r3, #1
   2135a:	e7f8      	b.n	2134e <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   2135c:	2000      	movs	r0, #0
   2135e:	4770      	bx	lr
            rc = 1;
   21360:	2001      	movs	r0, #1
    }

    return rc;
}
   21362:	4770      	bx	lr

00021364 <ble_ll_is_controller_busy>:
{
   21364:	b508      	push	{r3, lr}
    if (ble_ll_adv_enabled()) {
   21366:	f7fc faf7 	bl	1d958 <ble_ll_adv_enabled>
   2136a:	b900      	cbnz	r0, 2136e <ble_ll_is_controller_busy+0xa>
}
   2136c:	bd08      	pop	{r3, pc}
        return 1;
   2136e:	2001      	movs	r0, #1
   21370:	e7fc      	b.n	2136c <ble_ll_is_controller_busy+0x8>
	...

00021374 <ble_ll_resolv_list_chg_allowed>:
{
   21374:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   21376:	4b06      	ldr	r3, [pc, #24]	; (21390 <ble_ll_resolv_list_chg_allowed+0x1c>)
   21378:	781b      	ldrb	r3, [r3, #0]
   2137a:	b90b      	cbnz	r3, 21380 <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   2137c:	2001      	movs	r0, #1
}
   2137e:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   21380:	f7ff fff0 	bl	21364 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   21384:	b108      	cbz	r0, 2138a <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 0;
   21386:	2000      	movs	r0, #0
   21388:	e7f9      	b.n	2137e <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 1;
   2138a:	2001      	movs	r0, #1
    return rc;
   2138c:	e7f7      	b.n	2137e <ble_ll_resolv_list_chg_allowed+0xa>
   2138e:	bf00      	nop
   21390:	10002564 	.word	0x10002564

00021394 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   21394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21396:	4607      	mov	r7, r0
   21398:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   2139a:	4c0c      	ldr	r4, [pc, #48]	; (213cc <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2139c:	2500      	movs	r5, #0
   2139e:	e001      	b.n	213a4 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   213a0:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   213a2:	3501      	adds	r5, #1
   213a4:	4b0a      	ldr	r3, [pc, #40]	; (213d0 <ble_ll_is_on_resolv_list+0x3c>)
   213a6:	78db      	ldrb	r3, [r3, #3]
   213a8:	42ab      	cmp	r3, r5
   213aa:	dd0c      	ble.n	213c6 <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   213ac:	7823      	ldrb	r3, [r4, #0]
   213ae:	42b3      	cmp	r3, r6
   213b0:	d1f6      	bne.n	213a0 <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   213b2:	2206      	movs	r2, #6
   213b4:	4639      	mov	r1, r7
   213b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   213ba:	f7f5 fb53 	bl	16a64 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   213be:	2800      	cmp	r0, #0
   213c0:	d1ee      	bne.n	213a0 <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   213c2:	1c68      	adds	r0, r5, #1
   213c4:	e000      	b.n	213c8 <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   213c6:	2000      	movs	r0, #0
}
   213c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   213ca:	bf00      	nop
   213cc:	1000258c 	.word	0x1000258c
   213d0:	10002564 	.word	0x10002564

000213d4 <ble_ll_resolv_gen_priv_addr>:
{
   213d4:	b570      	push	{r4, r5, r6, lr}
   213d6:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   213d8:	b350      	cbz	r0, 21430 <ble_ll_resolv_gen_priv_addr+0x5c>
   213da:	4605      	mov	r5, r0
    if (local) {
   213dc:	b391      	cbz	r1, 21444 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_local_rpa;
   213de:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   213e2:	3504      	adds	r5, #4
    ble_ll_rand_prand_get(prand);
   213e4:	1ce0      	adds	r0, r4, #3
   213e6:	f7ff ff7b 	bl	212e0 <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   213ea:	466e      	mov	r6, sp
   213ec:	6828      	ldr	r0, [r5, #0]
   213ee:	6869      	ldr	r1, [r5, #4]
   213f0:	68aa      	ldr	r2, [r5, #8]
   213f2:	68eb      	ldr	r3, [r5, #12]
   213f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   213f6:	2300      	movs	r3, #0
   213f8:	9304      	str	r3, [sp, #16]
   213fa:	9305      	str	r3, [sp, #20]
   213fc:	9306      	str	r3, [sp, #24]
   213fe:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   21402:	7963      	ldrb	r3, [r4, #5]
   21404:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   21408:	7923      	ldrb	r3, [r4, #4]
   2140a:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   2140e:	78e3      	ldrb	r3, [r4, #3]
   21410:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   21414:	4668      	mov	r0, sp
   21416:	f000 fea1 	bl	2215c <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   2141a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   2141e:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   21420:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   21424:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   21426:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   2142a:	70a3      	strb	r3, [r4, #2]
}
   2142c:	b00c      	add	sp, #48	; 0x30
   2142e:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   21430:	f7f3 f910 	bl	14654 <hal_debugger_connected>
   21434:	b100      	cbz	r0, 21438 <ble_ll_resolv_gen_priv_addr+0x64>
   21436:	be01      	bkpt	0x0001
   21438:	2300      	movs	r3, #0
   2143a:	461a      	mov	r2, r3
   2143c:	4619      	mov	r1, r3
   2143e:	4618      	mov	r0, r3
   21440:	f7f3 fcaa 	bl	14d98 <__assert_func>
        addr = rl->rl_peer_rpa;
   21444:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   21448:	3514      	adds	r5, #20
   2144a:	e7cb      	b.n	213e4 <ble_ll_resolv_gen_priv_addr+0x10>

0002144c <ble_ll_resolv_rpa_timer_cb>:
{
   2144c:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   2144e:	4c16      	ldr	r4, [pc, #88]	; (214a8 <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   21450:	2500      	movs	r5, #0
   21452:	e016      	b.n	21482 <ble_ll_resolv_rpa_timer_cb+0x36>
            OS_ENTER_CRITICAL(sr);
   21454:	f7f5 f956 	bl	16704 <os_arch_save_sr>
   21458:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   2145a:	2101      	movs	r1, #1
   2145c:	4620      	mov	r0, r4
   2145e:	f7ff ffb9 	bl	213d4 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   21462:	4630      	mov	r0, r6
   21464:	f7f5 f954 	bl	16710 <os_arch_restore_sr>
   21468:	e012      	b.n	21490 <ble_ll_resolv_rpa_timer_cb+0x44>
            OS_ENTER_CRITICAL(sr);
   2146a:	f7f5 f94b 	bl	16704 <os_arch_save_sr>
   2146e:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   21470:	2100      	movs	r1, #0
   21472:	4620      	mov	r0, r4
   21474:	f7ff ffae 	bl	213d4 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   21478:	4630      	mov	r0, r6
   2147a:	f7f5 f949 	bl	16710 <os_arch_restore_sr>
        ++rl;
   2147e:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   21480:	3501      	adds	r5, #1
   21482:	4b0a      	ldr	r3, [pc, #40]	; (214ac <ble_ll_resolv_rpa_timer_cb+0x60>)
   21484:	78db      	ldrb	r3, [r3, #3]
   21486:	42ab      	cmp	r3, r5
   21488:	dd06      	ble.n	21498 <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   2148a:	78a3      	ldrb	r3, [r4, #2]
   2148c:	2b00      	cmp	r3, #0
   2148e:	d1e1      	bne.n	21454 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   21490:	78e3      	ldrb	r3, [r4, #3]
   21492:	2b00      	cmp	r3, #0
   21494:	d0f3      	beq.n	2147e <ble_ll_resolv_rpa_timer_cb+0x32>
   21496:	e7e8      	b.n	2146a <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   21498:	4804      	ldr	r0, [pc, #16]	; (214ac <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2149a:	6841      	ldr	r1, [r0, #4]
   2149c:	3008      	adds	r0, #8
   2149e:	f7f3 fe55 	bl	1514c <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   214a2:	f7fc f8df 	bl	1d664 <ble_ll_adv_rpa_timeout>
}
   214a6:	bd70      	pop	{r4, r5, r6, pc}
   214a8:	1000258c 	.word	0x1000258c
   214ac:	10002564 	.word	0x10002564

000214b0 <ble_ll_resolv_list_clr>:
{
   214b0:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   214b2:	f7ff ff5f 	bl	21374 <ble_ll_resolv_list_chg_allowed>
   214b6:	b158      	cbz	r0, 214d0 <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   214b8:	4d06      	ldr	r5, [pc, #24]	; (214d4 <ble_ll_resolv_list_clr+0x24>)
   214ba:	2400      	movs	r4, #0
   214bc:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   214be:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   214c0:	f000 fe78 	bl	221b4 <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   214c4:	f105 0008 	add.w	r0, r5, #8
   214c8:	f7f3 fe22 	bl	15110 <os_callout_stop>
    return BLE_ERR_SUCCESS;
   214cc:	4620      	mov	r0, r4
}
   214ce:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   214d0:	200c      	movs	r0, #12
   214d2:	e7fc      	b.n	214ce <ble_ll_resolv_list_clr+0x1e>
   214d4:	10002564 	.word	0x10002564

000214d8 <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   214d8:	4b03      	ldr	r3, [pc, #12]	; (214e8 <ble_ll_resolv_list_read_size+0x10>)
   214da:	785b      	ldrb	r3, [r3, #1]
   214dc:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   214de:	2301      	movs	r3, #1
   214e0:	700b      	strb	r3, [r1, #0]
}
   214e2:	2000      	movs	r0, #0
   214e4:	4770      	bx	lr
   214e6:	bf00      	nop
   214e8:	10002564 	.word	0x10002564

000214ec <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   214ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   214ee:	4607      	mov	r7, r0
   214f0:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   214f2:	4c0c      	ldr	r4, [pc, #48]	; (21524 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   214f4:	2500      	movs	r5, #0
   214f6:	e001      	b.n	214fc <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   214f8:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   214fa:	3501      	adds	r5, #1
   214fc:	4b0a      	ldr	r3, [pc, #40]	; (21528 <ble_ll_resolv_list_find+0x3c>)
   214fe:	78db      	ldrb	r3, [r3, #3]
   21500:	42ab      	cmp	r3, r5
   21502:	dd0b      	ble.n	2151c <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   21504:	7823      	ldrb	r3, [r4, #0]
   21506:	42b3      	cmp	r3, r6
   21508:	d1f6      	bne.n	214f8 <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   2150a:	2206      	movs	r2, #6
   2150c:	4639      	mov	r1, r7
   2150e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   21512:	f7f5 faa7 	bl	16a64 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   21516:	2800      	cmp	r0, #0
   21518:	d1ee      	bne.n	214f8 <ble_ll_resolv_list_find+0xc>
   2151a:	e000      	b.n	2151e <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   2151c:	2400      	movs	r4, #0
}
   2151e:	4620      	mov	r0, r4
   21520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21522:	bf00      	nop
   21524:	1000258c 	.word	0x1000258c
   21528:	10002564 	.word	0x10002564

0002152c <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   2152c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   21530:	2927      	cmp	r1, #39	; 0x27
   21532:	d003      	beq.n	2153c <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21534:	2612      	movs	r6, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   21536:	4630      	mov	r0, r6
   21538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2153c:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   2153e:	f7ff ff19 	bl	21374 <ble_ll_resolv_list_chg_allowed>
   21542:	2800      	cmp	r0, #0
   21544:	d07d      	beq.n	21642 <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   21546:	4b42      	ldr	r3, [pc, #264]	; (21650 <ble_ll_resolv_list_add+0x124>)
   21548:	f893 8003 	ldrb.w	r8, [r3, #3]
   2154c:	785b      	ldrb	r3, [r3, #1]
   2154e:	4598      	cmp	r8, r3
   21550:	d279      	bcs.n	21646 <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   21552:	4627      	mov	r7, r4
   21554:	f817 1b01 	ldrb.w	r1, [r7], #1
   21558:	4638      	mov	r0, r7
   2155a:	f7ff ff1b 	bl	21394 <ble_ll_is_on_resolv_list>
   2155e:	4606      	mov	r6, r0
   21560:	2800      	cmp	r0, #0
   21562:	d172      	bne.n	2164a <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   21564:	f104 0907 	add.w	r9, r4, #7
   21568:	4648      	mov	r0, r9
   2156a:	f7ff feef 	bl	2134c <ble_ll_resolv_irk_nonzero>
   2156e:	bb50      	cbnz	r0, 215c6 <ble_ll_resolv_list_add+0x9a>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   21570:	4b38      	ldr	r3, [pc, #224]	; (21654 <ble_ll_resolv_list_add+0x128>)
   21572:	2536      	movs	r5, #54	; 0x36
   21574:	fb05 3508 	mla	r5, r5, r8, r3
    memset (rl, 0, sizeof(*rl));
   21578:	2236      	movs	r2, #54	; 0x36
   2157a:	2100      	movs	r1, #0
   2157c:	4628      	mov	r0, r5
   2157e:	f7f5 faba 	bl	16af6 <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   21582:	7822      	ldrb	r2, [r4, #0]
   21584:	462b      	mov	r3, r5
   21586:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   2158a:	683a      	ldr	r2, [r7, #0]
   2158c:	626a      	str	r2, [r5, #36]	; 0x24
   2158e:	88ba      	ldrh	r2, [r7, #4]
   21590:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   21592:	4648      	mov	r0, r9
   21594:	f7ff feda 	bl	2134c <ble_ll_resolv_irk_nonzero>
   21598:	bb30      	cbnz	r0, 215e8 <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   2159a:	3417      	adds	r4, #23
   2159c:	4620      	mov	r0, r4
   2159e:	f7ff fed5 	bl	2134c <ble_ll_resolv_irk_nonzero>
   215a2:	bb70      	cbnz	r0, 21602 <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   215a4:	2300      	movs	r3, #0
   215a6:	706b      	strb	r3, [r5, #1]
    if (rl->rl_has_peer) {
   215a8:	78eb      	ldrb	r3, [r5, #3]
   215aa:	bbab      	cbnz	r3, 21618 <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   215ac:	4a28      	ldr	r2, [pc, #160]	; (21650 <ble_ll_resolv_list_add+0x124>)
   215ae:	78d3      	ldrb	r3, [r2, #3]
   215b0:	3301      	adds	r3, #1
   215b2:	b2db      	uxtb	r3, r3
   215b4:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   215b6:	2b01      	cmp	r3, #1
   215b8:	d1bd      	bne.n	21536 <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   215ba:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   215bc:	6851      	ldr	r1, [r2, #4]
   215be:	3008      	adds	r0, #8
   215c0:	f7f3 fdc4 	bl	1514c <os_callout_reset>
   215c4:	e7b7      	b.n	21536 <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   215c6:	4b22      	ldr	r3, [pc, #136]	; (21650 <ble_ll_resolv_list_add+0x124>)
   215c8:	789b      	ldrb	r3, [r3, #2]
   215ca:	4822      	ldr	r0, [pc, #136]	; (21654 <ble_ll_resolv_list_add+0x128>)
   215cc:	2236      	movs	r2, #54	; 0x36
   215ce:	fb03 2c02 	mla	ip, r3, r2, r2
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   215d2:	fb02 0503 	mla	r5, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   215d6:	eba8 0803 	sub.w	r8, r8, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   215da:	fb02 f208 	mul.w	r2, r2, r8
   215de:	4629      	mov	r1, r5
   215e0:	4460      	add	r0, ip
   215e2:	f7f5 fa70 	bl	16ac6 <memmove>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw];
   215e6:	e7c7      	b.n	21578 <ble_ll_resolv_list_add+0x4c>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   215e8:	2210      	movs	r2, #16
   215ea:	4649      	mov	r1, r9
   215ec:	f105 0014 	add.w	r0, r5, #20
   215f0:	f010 fccc 	bl	31f8c <swap_buf>
        rl->rl_has_peer = 1;
   215f4:	2301      	movs	r3, #1
   215f6:	70eb      	strb	r3, [r5, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   215f8:	2100      	movs	r1, #0
   215fa:	4628      	mov	r0, r5
   215fc:	f7ff feea 	bl	213d4 <ble_ll_resolv_gen_priv_addr>
   21600:	e7cb      	b.n	2159a <ble_ll_resolv_list_add+0x6e>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   21602:	2210      	movs	r2, #16
   21604:	4621      	mov	r1, r4
   21606:	1d28      	adds	r0, r5, #4
   21608:	f010 fcc0 	bl	31f8c <swap_buf>
        rl->rl_has_local = 1;
   2160c:	2101      	movs	r1, #1
   2160e:	70a9      	strb	r1, [r5, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   21610:	4628      	mov	r0, r5
   21612:	f7ff fedf 	bl	213d4 <ble_ll_resolv_gen_priv_addr>
   21616:	e7c5      	b.n	215a4 <ble_ll_resolv_list_add+0x78>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   21618:	f105 0014 	add.w	r0, r5, #20
   2161c:	f000 fdcb 	bl	221b6 <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   21620:	4606      	mov	r6, r0
   21622:	b920      	cbnz	r0, 2162e <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   21624:	4a0a      	ldr	r2, [pc, #40]	; (21650 <ble_ll_resolv_list_add+0x124>)
   21626:	7893      	ldrb	r3, [r2, #2]
   21628:	3301      	adds	r3, #1
   2162a:	7093      	strb	r3, [r2, #2]
   2162c:	e7be      	b.n	215ac <ble_ll_resolv_list_add+0x80>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   2162e:	f7f3 f811 	bl	14654 <hal_debugger_connected>
   21632:	b100      	cbz	r0, 21636 <ble_ll_resolv_list_add+0x10a>
   21634:	be01      	bkpt	0x0001
   21636:	2300      	movs	r3, #0
   21638:	461a      	mov	r2, r3
   2163a:	4619      	mov	r1, r3
   2163c:	4618      	mov	r0, r3
   2163e:	f7f3 fbab 	bl	14d98 <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   21642:	260c      	movs	r6, #12
   21644:	e777      	b.n	21536 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   21646:	2607      	movs	r6, #7
   21648:	e775      	b.n	21536 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2164a:	2612      	movs	r6, #18
   2164c:	e773      	b.n	21536 <ble_ll_resolv_list_add+0xa>
   2164e:	bf00      	nop
   21650:	10002564 	.word	0x10002564
   21654:	1000258c 	.word	0x1000258c

00021658 <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   21658:	2907      	cmp	r1, #7
   2165a:	d001      	beq.n	21660 <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2165c:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   2165e:	4770      	bx	lr
{
   21660:	b570      	push	{r4, r5, r6, lr}
   21662:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   21664:	f7ff fe86 	bl	21374 <ble_ll_resolv_list_chg_allowed>
   21668:	2800      	cmp	r0, #0
   2166a:	d037      	beq.n	216dc <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   2166c:	4620      	mov	r0, r4
   2166e:	f810 1b01 	ldrb.w	r1, [r0], #1
   21672:	f7ff fe8f 	bl	21394 <ble_ll_is_on_resolv_list>
    if (position) {
   21676:	4604      	mov	r4, r0
   21678:	b390      	cbz	r0, 216e0 <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   2167a:	4b1a      	ldr	r3, [pc, #104]	; (216e4 <ble_ll_resolv_list_rmv+0x8c>)
   2167c:	78dd      	ldrb	r5, [r3, #3]
   2167e:	4285      	cmp	r5, r0
   21680:	db16      	blt.n	216b0 <ble_ll_resolv_list_rmv+0x58>
        memmove(&g_ble_ll_resolv_list[position - 1],
   21682:	1e46      	subs	r6, r0, #1
   21684:	4818      	ldr	r0, [pc, #96]	; (216e8 <ble_ll_resolv_list_rmv+0x90>)
   21686:	2336      	movs	r3, #54	; 0x36
                (g_ble_ll_resolv_data.rl_cnt - position) *
   21688:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   2168a:	fb03 f202 	mul.w	r2, r3, r2
   2168e:	fb03 0104 	mla	r1, r3, r4, r0
   21692:	fb03 0006 	mla	r0, r3, r6, r0
   21696:	f7f5 fa16 	bl	16ac6 <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   2169a:	4b12      	ldr	r3, [pc, #72]	; (216e4 <ble_ll_resolv_list_rmv+0x8c>)
   2169c:	3d01      	subs	r5, #1
   2169e:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   216a0:	789b      	ldrb	r3, [r3, #2]
   216a2:	42a3      	cmp	r3, r4
   216a4:	da0e      	bge.n	216c4 <ble_ll_resolv_list_rmv+0x6c>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   216a6:	4b0f      	ldr	r3, [pc, #60]	; (216e4 <ble_ll_resolv_list_rmv+0x8c>)
   216a8:	78db      	ldrb	r3, [r3, #3]
   216aa:	b19b      	cbz	r3, 216d4 <ble_ll_resolv_list_rmv+0x7c>
        return BLE_ERR_SUCCESS;
   216ac:	2000      	movs	r0, #0
}
   216ae:	bd70      	pop	{r4, r5, r6, pc}
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   216b0:	f7f2 ffd0 	bl	14654 <hal_debugger_connected>
   216b4:	b100      	cbz	r0, 216b8 <ble_ll_resolv_list_rmv+0x60>
   216b6:	be01      	bkpt	0x0001
   216b8:	2300      	movs	r3, #0
   216ba:	461a      	mov	r2, r3
   216bc:	4619      	mov	r1, r3
   216be:	4618      	mov	r0, r3
   216c0:	f7f3 fb6a 	bl	14d98 <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   216c4:	4630      	mov	r0, r6
   216c6:	f000 fd78 	bl	221ba <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   216ca:	4a06      	ldr	r2, [pc, #24]	; (216e4 <ble_ll_resolv_list_rmv+0x8c>)
   216cc:	7893      	ldrb	r3, [r2, #2]
   216ce:	3b01      	subs	r3, #1
   216d0:	7093      	strb	r3, [r2, #2]
   216d2:	e7e8      	b.n	216a6 <ble_ll_resolv_list_rmv+0x4e>
    os_callout_stop(&co->co);
   216d4:	4805      	ldr	r0, [pc, #20]	; (216ec <ble_ll_resolv_list_rmv+0x94>)
   216d6:	f7f3 fd1b 	bl	15110 <os_callout_stop>
}
   216da:	e7e7      	b.n	216ac <ble_ll_resolv_list_rmv+0x54>
        return BLE_ERR_CMD_DISALLOWED;
   216dc:	200c      	movs	r0, #12
   216de:	e7e6      	b.n	216ae <ble_ll_resolv_list_rmv+0x56>
    return BLE_ERR_UNK_CONN_ID;
   216e0:	2002      	movs	r0, #2
   216e2:	e7e4      	b.n	216ae <ble_ll_resolv_list_rmv+0x56>
   216e4:	10002564 	.word	0x10002564
   216e8:	1000258c 	.word	0x1000258c
   216ec:	1000256c 	.word	0x1000256c

000216f0 <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   216f0:	2901      	cmp	r1, #1
   216f2:	d001      	beq.n	216f8 <ble_ll_resolv_enable_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   216f4:	2012      	movs	r0, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   216f6:	4770      	bx	lr
{
   216f8:	b510      	push	{r4, lr}
   216fa:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   216fc:	f7ff fe32 	bl	21364 <ble_ll_is_controller_busy>
   21700:	b928      	cbnz	r0, 2170e <ble_ll_resolv_enable_cmd+0x1e>
    if (cmd->enable > 1) {
   21702:	7823      	ldrb	r3, [r4, #0]
   21704:	2b01      	cmp	r3, #1
   21706:	d804      	bhi.n	21712 <ble_ll_resolv_enable_cmd+0x22>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   21708:	4a03      	ldr	r2, [pc, #12]	; (21718 <ble_ll_resolv_enable_cmd+0x28>)
   2170a:	7013      	strb	r3, [r2, #0]
}
   2170c:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   2170e:	200c      	movs	r0, #12
   21710:	e7fc      	b.n	2170c <ble_ll_resolv_enable_cmd+0x1c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21712:	2012      	movs	r0, #18
   21714:	e7fa      	b.n	2170c <ble_ll_resolv_enable_cmd+0x1c>
   21716:	bf00      	nop
   21718:	10002564 	.word	0x10002564

0002171c <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   2171c:	2907      	cmp	r1, #7
   2171e:	d116      	bne.n	2174e <ble_ll_resolv_peer_addr_rd+0x32>
{
   21720:	b538      	push	{r3, r4, r5, lr}
   21722:	4614      	mov	r4, r2
   21724:	461d      	mov	r5, r3
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   21726:	f810 1b01 	ldrb.w	r1, [r0], #1
   2172a:	f7ff fedf 	bl	214ec <ble_ll_resolv_list_find>
    if (rl) {
   2172e:	4602      	mov	r2, r0
   21730:	b140      	cbz	r0, 21744 <ble_ll_resolv_peer_addr_rd+0x28>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   21732:	f852 3f30 	ldr.w	r3, [r2, #48]!
   21736:	6023      	str	r3, [r4, #0]
   21738:	8893      	ldrh	r3, [r2, #4]
   2173a:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   2173c:	2000      	movs	r0, #0
    } else {
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
   2173e:	2306      	movs	r3, #6
   21740:	702b      	strb	r3, [r5, #0]
    return rc;
}
   21742:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   21744:	2300      	movs	r3, #0
   21746:	6023      	str	r3, [r4, #0]
   21748:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   2174a:	2002      	movs	r0, #2
   2174c:	e7f7      	b.n	2173e <ble_ll_resolv_peer_addr_rd+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2174e:	2012      	movs	r0, #18
}
   21750:	4770      	bx	lr

00021752 <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   21752:	2907      	cmp	r1, #7
   21754:	d116      	bne.n	21784 <ble_ll_resolv_local_addr_rd+0x32>
{
   21756:	b538      	push	{r3, r4, r5, lr}
   21758:	4614      	mov	r4, r2
   2175a:	461d      	mov	r5, r3
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   2175c:	f810 1b01 	ldrb.w	r1, [r0], #1
   21760:	f7ff fec4 	bl	214ec <ble_ll_resolv_list_find>
    if (rl) {
   21764:	4602      	mov	r2, r0
   21766:	b140      	cbz	r0, 2177a <ble_ll_resolv_local_addr_rd+0x28>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   21768:	f852 3f2a 	ldr.w	r3, [r2, #42]!
   2176c:	6023      	str	r3, [r4, #0]
   2176e:	8893      	ldrh	r3, [r2, #4]
   21770:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   21772:	2000      	movs	r0, #0
    } else {
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
   21774:	2306      	movs	r3, #6
   21776:	702b      	strb	r3, [r5, #0]
    return rc;
}
   21778:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   2177a:	2300      	movs	r3, #0
   2177c:	6023      	str	r3, [r4, #0]
   2177e:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   21780:	2002      	movs	r0, #2
   21782:	e7f7      	b.n	21774 <ble_ll_resolv_local_addr_rd+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21784:	2012      	movs	r0, #18
}
   21786:	4770      	bx	lr

00021788 <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   21788:	2902      	cmp	r1, #2
   2178a:	d11e      	bne.n	217ca <ble_ll_resolv_set_rpa_tmo+0x42>
{
   2178c:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   2178e:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   21790:	1e53      	subs	r3, r2, #1
   21792:	b29b      	uxth	r3, r3
   21794:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   21798:	428b      	cmp	r3, r1
   2179a:	d818      	bhi.n	217ce <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   2179c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   217a0:	fb01 f102 	mul.w	r1, r1, r2
   217a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   217a8:	2300      	movs	r3, #0
   217aa:	01c8      	lsls	r0, r1, #7
   217ac:	0e49      	lsrs	r1, r1, #25
   217ae:	f7f2 fd55 	bl	1425c <__aeabi_uldivmod>
   217b2:	4b08      	ldr	r3, [pc, #32]	; (217d4 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   217b4:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   217b6:	78db      	ldrb	r3, [r3, #3]
   217b8:	b90b      	cbnz	r3, 217be <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   217ba:	2000      	movs	r0, #0
}
   217bc:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   217be:	4601      	mov	r1, r0
   217c0:	4805      	ldr	r0, [pc, #20]	; (217d8 <ble_ll_resolv_set_rpa_tmo+0x50>)
   217c2:	f7f3 fcc3 	bl	1514c <os_callout_reset>
    return BLE_ERR_SUCCESS;
   217c6:	2000      	movs	r0, #0
   217c8:	e7f8      	b.n	217bc <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   217ca:	2012      	movs	r0, #18
}
   217cc:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   217ce:	2012      	movs	r0, #18
   217d0:	e7f4      	b.n	217bc <ble_ll_resolv_set_rpa_tmo+0x34>
   217d2:	bf00      	nop
   217d4:	10002564 	.word	0x10002564
   217d8:	1000256c 	.word	0x1000256c

000217dc <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   217dc:	b570      	push	{r4, r5, r6, lr}
   217de:	4604      	mov	r4, r0
   217e0:	460d      	mov	r5, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   217e2:	f7ff fdbf 	bl	21364 <ble_ll_is_controller_busy>
   217e6:	b970      	cbnz	r0, 21806 <ble_ll_resolve_set_priv_mode+0x2a>
   217e8:	4606      	mov	r6, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   217ea:	2d08      	cmp	r5, #8
   217ec:	d10d      	bne.n	2180a <ble_ll_resolve_set_priv_mode+0x2e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   217ee:	4620      	mov	r0, r4
   217f0:	f810 1b01 	ldrb.w	r1, [r0], #1
   217f4:	f7ff fe7a 	bl	214ec <ble_ll_resolv_list_find>
    if (!rl) {
   217f8:	b148      	cbz	r0, 2180e <ble_ll_resolve_set_priv_mode+0x32>
        return BLE_ERR_UNK_CONN_ID;
    }

    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   217fa:	79e3      	ldrb	r3, [r4, #7]
   217fc:	2b01      	cmp	r3, #1
   217fe:	d808      	bhi.n	21812 <ble_ll_resolve_set_priv_mode+0x36>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl->rl_priv_mode = cmd->mode;
   21800:	7043      	strb	r3, [r0, #1]

    return BLE_ERR_SUCCESS;
}
   21802:	4630      	mov	r0, r6
   21804:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_ERR_CMD_DISALLOWED;
   21806:	260c      	movs	r6, #12
   21808:	e7fb      	b.n	21802 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2180a:	2612      	movs	r6, #18
   2180c:	e7f9      	b.n	21802 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_UNK_CONN_ID;
   2180e:	2602      	movs	r6, #2
   21810:	e7f7      	b.n	21802 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21812:	2612      	movs	r6, #18
   21814:	e7f5      	b.n	21802 <ble_ll_resolve_set_priv_mode+0x26>

00021816 <ble_ll_resolv_get_priv_addr>:
}

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   21816:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   21818:	b180      	cbz	r0, 2183c <ble_ll_resolv_get_priv_addr+0x26>
   2181a:	460e      	mov	r6, r1
   2181c:	4615      	mov	r5, r2
   2181e:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   21820:	b1b2      	cbz	r2, 21850 <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   21822:	f7f4 ff6f 	bl	16704 <os_arch_save_sr>
    if (local) {
   21826:	b33e      	cbz	r6, 21878 <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   21828:	78a3      	ldrb	r3, [r4, #2]
   2182a:	b1db      	cbz	r3, 21864 <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   2182c:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   21830:	602b      	str	r3, [r5, #0]
   21832:	88a3      	ldrh	r3, [r4, #4]
   21834:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   21836:	f7f4 ff6b 	bl	16710 <os_arch_restore_sr>
}
   2183a:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   2183c:	f7f2 ff0a 	bl	14654 <hal_debugger_connected>
   21840:	b100      	cbz	r0, 21844 <ble_ll_resolv_get_priv_addr+0x2e>
   21842:	be01      	bkpt	0x0001
   21844:	2300      	movs	r3, #0
   21846:	461a      	mov	r2, r3
   21848:	4619      	mov	r1, r3
   2184a:	4618      	mov	r0, r3
   2184c:	f7f3 faa4 	bl	14d98 <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   21850:	f7f2 ff00 	bl	14654 <hal_debugger_connected>
   21854:	b100      	cbz	r0, 21858 <ble_ll_resolv_get_priv_addr+0x42>
   21856:	be01      	bkpt	0x0001
   21858:	2300      	movs	r3, #0
   2185a:	461a      	mov	r2, r3
   2185c:	4619      	mov	r1, r3
   2185e:	4618      	mov	r0, r3
   21860:	f7f3 fa9a 	bl	14d98 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   21864:	f7f2 fef6 	bl	14654 <hal_debugger_connected>
   21868:	b100      	cbz	r0, 2186c <ble_ll_resolv_get_priv_addr+0x56>
   2186a:	be01      	bkpt	0x0001
   2186c:	2300      	movs	r3, #0
   2186e:	461a      	mov	r2, r3
   21870:	4619      	mov	r1, r3
   21872:	4618      	mov	r0, r3
   21874:	f7f3 fa90 	bl	14d98 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   21878:	78e3      	ldrb	r3, [r4, #3]
   2187a:	b12b      	cbz	r3, 21888 <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   2187c:	f854 3f30 	ldr.w	r3, [r4, #48]!
   21880:	602b      	str	r3, [r5, #0]
   21882:	88a3      	ldrh	r3, [r4, #4]
   21884:	80ab      	strh	r3, [r5, #4]
   21886:	e7d6      	b.n	21836 <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   21888:	f7f2 fee4 	bl	14654 <hal_debugger_connected>
   2188c:	b100      	cbz	r0, 21890 <ble_ll_resolv_get_priv_addr+0x7a>
   2188e:	be01      	bkpt	0x0001
   21890:	2300      	movs	r3, #0
   21892:	461a      	mov	r2, r3
   21894:	4619      	mov	r1, r3
   21896:	4618      	mov	r0, r3
   21898:	f7f3 fa7e 	bl	14d98 <__assert_func>

0002189c <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   2189c:	b538      	push	{r3, r4, r5, lr}
   2189e:	4605      	mov	r5, r0
   218a0:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   218a2:	f7f4 ff2f 	bl	16704 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   218a6:	4a06      	ldr	r2, [pc, #24]	; (218c0 <ble_ll_resolv_set_peer_rpa+0x24>)
   218a8:	2336      	movs	r3, #54	; 0x36
   218aa:	fb03 f305 	mul.w	r3, r3, r5
   218ae:	3330      	adds	r3, #48	; 0x30
   218b0:	18d1      	adds	r1, r2, r3
   218b2:	6825      	ldr	r5, [r4, #0]
   218b4:	50d5      	str	r5, [r2, r3]
   218b6:	88a3      	ldrh	r3, [r4, #4]
   218b8:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   218ba:	f7f4 ff29 	bl	16710 <os_arch_restore_sr>
}
   218be:	bd38      	pop	{r3, r4, r5, pc}
   218c0:	1000258c 	.word	0x1000258c

000218c4 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   218c4:	b538      	push	{r3, r4, r5, lr}
   218c6:	4615      	mov	r5, r2
   218c8:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   218ca:	f7ff fe0f 	bl	214ec <ble_ll_resolv_list_find>
    if (rl) {
   218ce:	b178      	cbz	r0, 218f0 <ble_ll_resolv_gen_rpa+0x2c>
   218d0:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   218d2:	b10c      	cbz	r4, 218d8 <ble_ll_resolv_gen_rpa+0x14>
   218d4:	7882      	ldrb	r2, [r0, #2]
   218d6:	b922      	cbnz	r2, 218e2 <ble_ll_resolv_gen_rpa+0x1e>
   218d8:	b964      	cbnz	r4, 218f4 <ble_ll_resolv_gen_rpa+0x30>
   218da:	78da      	ldrb	r2, [r3, #3]
   218dc:	b90a      	cbnz	r2, 218e2 <ble_ll_resolv_gen_rpa+0x1e>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
            return 1;
        }
    }

    return 0;
   218de:	4620      	mov	r0, r4
   218e0:	e007      	b.n	218f2 <ble_ll_resolv_gen_rpa+0x2e>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   218e2:	462a      	mov	r2, r5
   218e4:	4621      	mov	r1, r4
   218e6:	4618      	mov	r0, r3
   218e8:	f7ff ff95 	bl	21816 <ble_ll_resolv_get_priv_addr>
            return 1;
   218ec:	2001      	movs	r0, #1
   218ee:	e000      	b.n	218f2 <ble_ll_resolv_gen_rpa+0x2e>
    return 0;
   218f0:	2000      	movs	r0, #0
}
   218f2:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   218f4:	2000      	movs	r0, #0
   218f6:	e7fc      	b.n	218f2 <ble_ll_resolv_gen_rpa+0x2e>

000218f8 <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   218f8:	4b01      	ldr	r3, [pc, #4]	; (21900 <ble_ll_resolv_enabled+0x8>)
   218fa:	7818      	ldrb	r0, [r3, #0]
   218fc:	4770      	bx	lr
   218fe:	bf00      	nop
   21900:	10002564 	.word	0x10002564

00021904 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   21904:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   21906:	4b09      	ldr	r3, [pc, #36]	; (2192c <ble_ll_resolv_init+0x28>)
   21908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   2190c:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   2190e:	f000 fc55 	bl	221bc <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   21912:	2804      	cmp	r0, #4
   21914:	d900      	bls.n	21918 <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   21916:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   21918:	4c04      	ldr	r4, [pc, #16]	; (2192c <ble_ll_resolv_init+0x28>)
   2191a:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   2191c:	2300      	movs	r3, #0
   2191e:	4a04      	ldr	r2, [pc, #16]	; (21930 <ble_ll_resolv_init+0x2c>)
   21920:	4904      	ldr	r1, [pc, #16]	; (21934 <ble_ll_resolv_init+0x30>)
   21922:	f104 0008 	add.w	r0, r4, #8
   21926:	f7f3 fbe5 	bl	150f4 <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   2192a:	bd10      	pop	{r4, pc}
   2192c:	10002564 	.word	0x10002564
   21930:	0002144d 	.word	0x0002144d
   21934:	10001fc8 	.word	0x10001fc8

00021938 <ble_ll_resolv_list_reset>:
{
   21938:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   2193a:	4805      	ldr	r0, [pc, #20]	; (21950 <ble_ll_resolv_list_reset+0x18>)
   2193c:	2300      	movs	r3, #0
   2193e:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   21942:	f7f3 fbe5 	bl	15110 <os_callout_stop>
    ble_ll_resolv_list_clr();
   21946:	f7ff fdb3 	bl	214b0 <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   2194a:	f7ff ffdb 	bl	21904 <ble_ll_resolv_init>
}
   2194e:	bd08      	pop	{r3, pc}
   21950:	10002564 	.word	0x10002564

00021954 <ble_ll_rfmgmt_init>:

#else

void
ble_ll_rfmgmt_init(void)
{
   21954:	b508      	push	{r3, lr}
    static bool enabled = false;

    if (!enabled) {
   21956:	4b05      	ldr	r3, [pc, #20]	; (2196c <ble_ll_rfmgmt_init+0x18>)
   21958:	781b      	ldrb	r3, [r3, #0]
   2195a:	b11b      	cbz	r3, 21964 <ble_ll_rfmgmt_init+0x10>
        ble_phy_rfclk_enable();
    }

    enabled = true;
   2195c:	4b03      	ldr	r3, [pc, #12]	; (2196c <ble_ll_rfmgmt_init+0x18>)
   2195e:	2201      	movs	r2, #1
   21960:	701a      	strb	r2, [r3, #0]
}
   21962:	bd08      	pop	{r3, pc}
        ble_phy_rfclk_enable();
   21964:	f000 fcd9 	bl	2231a <ble_phy_rfclk_enable>
   21968:	e7f8      	b.n	2195c <ble_ll_rfmgmt_init+0x8>
   2196a:	bf00      	nop
   2196c:	10002664 	.word	0x10002664

00021970 <preempt_any>:
static int
preempt_any(struct ble_ll_sched_item *sch,
            struct ble_ll_sched_item *item)
{
    return 1;
}
   21970:	2001      	movs	r0, #1
   21972:	4770      	bx	lr

00021974 <preempt_none>:
static int
preempt_none(struct ble_ll_sched_item *sch,
             struct ble_ll_sched_item *item)
{
    return 0;
}
   21974:	2000      	movs	r0, #0
   21976:	4770      	bx	lr

00021978 <preempt_any_except_conn>:

static int
preempt_any_except_conn(struct ble_ll_sched_item *sch,
                        struct ble_ll_sched_item *item)
{
   21978:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sch->sched_type == BLE_LL_SCHED_TYPE_CONN);
   2197a:	7803      	ldrb	r3, [r0, #0]
   2197c:	2b03      	cmp	r3, #3
   2197e:	d104      	bne.n	2198a <preempt_any_except_conn+0x12>

    if (item->sched_type != BLE_LL_SCHED_TYPE_CONN) {
   21980:	780b      	ldrb	r3, [r1, #0]
   21982:	2b03      	cmp	r3, #3
   21984:	d00b      	beq.n	2199e <preempt_any_except_conn+0x26>
        return 1;
   21986:	2001      	movs	r0, #1
    }

    return ble_ll_conn_is_lru(sch->cb_arg, item->cb_arg);
}
   21988:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sch->sched_type == BLE_LL_SCHED_TYPE_CONN);
   2198a:	f7f2 fe63 	bl	14654 <hal_debugger_connected>
   2198e:	b100      	cbz	r0, 21992 <preempt_any_except_conn+0x1a>
   21990:	be01      	bkpt	0x0001
   21992:	2300      	movs	r3, #0
   21994:	461a      	mov	r2, r3
   21996:	4619      	mov	r1, r3
   21998:	4618      	mov	r0, r3
   2199a:	f7f3 f9fd 	bl	14d98 <__assert_func>
    return ble_ll_conn_is_lru(sch->cb_arg, item->cb_arg);
   2199e:	68c9      	ldr	r1, [r1, #12]
   219a0:	68c0      	ldr	r0, [r0, #12]
   219a2:	f7fc f917 	bl	1dbd4 <ble_ll_conn_is_lru>
   219a6:	e7ef      	b.n	21988 <preempt_any_except_conn+0x10>

000219a8 <ble_ll_sched_overlaps_current>:
 * Determines if the schedule item overlaps the currently running schedule
 * item. We only care about connection schedule items
 */
static int
ble_ll_sched_overlaps_current(struct ble_ll_sched_item *sch)
{
   219a8:	b510      	push	{r4, lr}
   219aa:	4604      	mov	r4, r0
    int rc = 0;
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    uint32_t ce_end_time;

    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   219ac:	f7fa ffac 	bl	1c908 <ble_ll_state_get>
   219b0:	2804      	cmp	r0, #4
   219b2:	d001      	beq.n	219b8 <ble_ll_sched_overlaps_current+0x10>
    int rc = 0;
   219b4:	2000      	movs	r0, #0
            rc = 1;
        }
    }
#endif
    return rc;
}
   219b6:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   219b8:	f7fc f916 	bl	1dbe8 <ble_ll_conn_get_ce_end_time>
        if (LL_TMR_GT(ce_end_time, sch->start_time)) {
   219bc:	6863      	ldr	r3, [r4, #4]
   219be:	1ac0      	subs	r0, r0, r3
   219c0:	2800      	cmp	r0, #0
   219c2:	dd01      	ble.n	219c8 <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   219c4:	2001      	movs	r0, #1
    return rc;
   219c6:	e7f6      	b.n	219b6 <ble_ll_sched_overlaps_current+0xe>
    int rc = 0;
   219c8:	2000      	movs	r0, #0
   219ca:	e7f4      	b.n	219b6 <ble_ll_sched_overlaps_current+0xe>

000219cc <ble_ll_sched_preempt>:
{
   219cc:	b538      	push	{r3, r4, r5, lr}
   219ce:	4605      	mov	r5, r0
   219d0:	460c      	mov	r4, r1
    entry = first;
   219d2:	e008      	b.n	219e6 <ble_ll_sched_preempt+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   219d4:	6999      	ldr	r1, [r3, #24]
   219d6:	4a14      	ldr	r2, [pc, #80]	; (21a28 <ble_ll_sched_preempt+0x5c>)
   219d8:	6051      	str	r1, [r2, #4]
   219da:	e00a      	b.n	219f2 <ble_ll_sched_preempt+0x26>
                ble_ll_adv_event_rmvd_from_sched(entry->cb_arg);
   219dc:	68d8      	ldr	r0, [r3, #12]
   219de:	f7fb fe59 	bl	1d694 <ble_ll_adv_event_rmvd_from_sched>
    } while (entry != sch);
   219e2:	42ac      	cmp	r4, r5
   219e4:	d01e      	beq.n	21a24 <ble_ll_sched_preempt+0x58>
        next = TAILQ_NEXT(entry, link);
   219e6:	4623      	mov	r3, r4
   219e8:	6964      	ldr	r4, [r4, #20]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   219ea:	2c00      	cmp	r4, #0
   219ec:	d0f2      	beq.n	219d4 <ble_ll_sched_preempt+0x8>
   219ee:	699a      	ldr	r2, [r3, #24]
   219f0:	61a2      	str	r2, [r4, #24]
   219f2:	699a      	ldr	r2, [r3, #24]
   219f4:	6959      	ldr	r1, [r3, #20]
   219f6:	6011      	str	r1, [r2, #0]
        entry->enqueued = 0;
   219f8:	2200      	movs	r2, #0
   219fa:	705a      	strb	r2, [r3, #1]
        switch (entry->sched_type) {
   219fc:	781a      	ldrb	r2, [r3, #0]
   219fe:	2a01      	cmp	r2, #1
   21a00:	d0ec      	beq.n	219dc <ble_ll_sched_preempt+0x10>
   21a02:	2a03      	cmp	r2, #3
   21a04:	d104      	bne.n	21a10 <ble_ll_sched_preempt+0x44>
                connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   21a06:	68d8      	ldr	r0, [r3, #12]
                ble_ll_event_send(&connsm->conn_ev_end);
   21a08:	3098      	adds	r0, #152	; 0x98
   21a0a:	f7fa ff83 	bl	1c914 <ble_ll_event_send>
                break;
   21a0e:	e7e8      	b.n	219e2 <ble_ll_sched_preempt+0x16>
                BLE_LL_ASSERT(0);
   21a10:	f7f2 fe20 	bl	14654 <hal_debugger_connected>
   21a14:	b100      	cbz	r0, 21a18 <ble_ll_sched_preempt+0x4c>
   21a16:	be01      	bkpt	0x0001
   21a18:	2300      	movs	r3, #0
   21a1a:	461a      	mov	r2, r3
   21a1c:	4619      	mov	r1, r3
   21a1e:	4618      	mov	r0, r3
   21a20:	f7f3 f9ba 	bl	14d98 <__assert_func>
}
   21a24:	bd38      	pop	{r3, r4, r5, pc}
   21a26:	bf00      	nop
   21a28:	10002668 	.word	0x10002668

00021a2c <ble_ll_sched_insert>:
{
   21a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a30:	4605      	mov	r5, r0
   21a32:	4688      	mov	r8, r1
   21a34:	4616      	mov	r6, r2
    OS_ASSERT_CRITICAL();
   21a36:	f7f4 fe6e 	bl	16716 <os_arch_in_critical>
   21a3a:	b150      	cbz	r0, 21a52 <ble_ll_sched_insert+0x26>
    max_start_time = sch->start_time + max_delay;
   21a3c:	686b      	ldr	r3, [r5, #4]
   21a3e:	eb03 0a08 	add.w	sl, r3, r8
    duration = sch->end_time - sch->start_time;
   21a42:	68aa      	ldr	r2, [r5, #8]
   21a44:	eba2 0903 	sub.w	r9, r2, r3
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21a48:	4b43      	ldr	r3, [pc, #268]	; (21b58 <ble_ll_sched_insert+0x12c>)
   21a4a:	681c      	ldr	r4, [r3, #0]
    if (!first) {
   21a4c:	b15c      	cbz	r4, 21a66 <ble_ll_sched_insert+0x3a>
    preempt_first = NULL;
   21a4e:	2700      	movs	r7, #0
   21a50:	e02b      	b.n	21aaa <ble_ll_sched_insert+0x7e>
    OS_ASSERT_CRITICAL();
   21a52:	f7f2 fdff 	bl	14654 <hal_debugger_connected>
   21a56:	b100      	cbz	r0, 21a5a <ble_ll_sched_insert+0x2e>
   21a58:	be01      	bkpt	0x0001
   21a5a:	2300      	movs	r3, #0
   21a5c:	461a      	mov	r2, r3
   21a5e:	4619      	mov	r1, r3
   21a60:	4618      	mov	r0, r3
   21a62:	f7f3 f999 	bl	14d98 <__assert_func>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   21a66:	462a      	mov	r2, r5
   21a68:	f842 4f14 	str.w	r4, [r2, #20]!
   21a6c:	605a      	str	r2, [r3, #4]
   21a6e:	601d      	str	r5, [r3, #0]
   21a70:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   21a72:	2301      	movs	r3, #1
   21a74:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   21a76:	e041      	b.n	21afc <ble_ll_sched_insert+0xd0>
            TAILQ_INSERT_BEFORE(entry, sch, link);
   21a78:	69a3      	ldr	r3, [r4, #24]
   21a7a:	61ab      	str	r3, [r5, #24]
   21a7c:	616c      	str	r4, [r5, #20]
   21a7e:	69a3      	ldr	r3, [r4, #24]
   21a80:	601d      	str	r5, [r3, #0]
   21a82:	f105 0314 	add.w	r3, r5, #20
   21a86:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   21a88:	2301      	movs	r3, #1
   21a8a:	706b      	strb	r3, [r5, #1]
            goto done;
   21a8c:	e02f      	b.n	21aee <ble_ll_sched_insert+0xc2>
                sch->start_time = entry->end_time + 1;
   21a8e:	68a3      	ldr	r3, [r4, #8]
   21a90:	3301      	adds	r3, #1
   21a92:	606b      	str	r3, [r5, #4]
                if ((max_delay == 0) || LL_TMR_GEQ(sch->start_time,
   21a94:	f1b8 0f00 	cmp.w	r8, #0
   21a98:	d01b      	beq.n	21ad2 <ble_ll_sched_insert+0xa6>
   21a9a:	eba3 020a 	sub.w	r2, r3, sl
   21a9e:	2a00      	cmp	r2, #0
   21aa0:	da17      	bge.n	21ad2 <ble_ll_sched_insert+0xa6>
                sch->end_time = sch->start_time + duration;
   21aa2:	444b      	add	r3, r9
   21aa4:	60ab      	str	r3, [r5, #8]
                preempt_first = NULL;
   21aa6:	2700      	movs	r7, #0
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   21aa8:	6964      	ldr	r4, [r4, #20]
   21aaa:	b1ac      	cbz	r4, 21ad8 <ble_ll_sched_insert+0xac>
        if (LL_TMR_LEQ(sch->end_time, entry->start_time)) {
   21aac:	68ab      	ldr	r3, [r5, #8]
   21aae:	6862      	ldr	r2, [r4, #4]
   21ab0:	1a9b      	subs	r3, r3, r2
   21ab2:	2b00      	cmp	r3, #0
   21ab4:	dde0      	ble.n	21a78 <ble_ll_sched_insert+0x4c>
           LL_TMR_GT(sch2->end_time, sch1->start_time);
   21ab6:	68a3      	ldr	r3, [r4, #8]
   21ab8:	686a      	ldr	r2, [r5, #4]
   21aba:	1a9b      	subs	r3, r3, r2
    return LL_TMR_GT(sch1->end_time, sch2->start_time) &&
   21abc:	2b00      	cmp	r3, #0
   21abe:	ddf3      	ble.n	21aa8 <ble_ll_sched_insert+0x7c>
            if (preempt_cb(sch, entry)) {
   21ac0:	4621      	mov	r1, r4
   21ac2:	4628      	mov	r0, r5
   21ac4:	47b0      	blx	r6
   21ac6:	2800      	cmp	r0, #0
   21ac8:	d0e1      	beq.n	21a8e <ble_ll_sched_insert+0x62>
                if (!preempt_first) {
   21aca:	2f00      	cmp	r7, #0
   21acc:	d1ec      	bne.n	21aa8 <ble_ll_sched_insert+0x7c>
                    preempt_first = entry;
   21ace:	4627      	mov	r7, r4
   21ad0:	e7ea      	b.n	21aa8 <ble_ll_sched_insert+0x7c>
                    sch->enqueued = 0;
   21ad2:	2300      	movs	r3, #0
   21ad4:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   21ad6:	e011      	b.n	21afc <ble_ll_sched_insert+0xd0>
        TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   21ad8:	2300      	movs	r3, #0
   21ada:	616b      	str	r3, [r5, #20]
   21adc:	4b1e      	ldr	r3, [pc, #120]	; (21b58 <ble_ll_sched_insert+0x12c>)
   21ade:	685a      	ldr	r2, [r3, #4]
   21ae0:	61aa      	str	r2, [r5, #24]
   21ae2:	6015      	str	r5, [r2, #0]
   21ae4:	f105 0214 	add.w	r2, r5, #20
   21ae8:	605a      	str	r2, [r3, #4]
        sch->enqueued = 1;
   21aea:	2301      	movs	r3, #1
   21aec:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   21aee:	b12f      	cbz	r7, 21afc <ble_ll_sched_insert+0xd0>
        BLE_LL_ASSERT(sch->enqueued);
   21af0:	786b      	ldrb	r3, [r5, #1]
   21af2:	b163      	cbz	r3, 21b0e <ble_ll_sched_insert+0xe2>
        ble_ll_sched_preempt(sch, preempt_first);
   21af4:	4639      	mov	r1, r7
   21af6:	4628      	mov	r0, r5
   21af8:	f7ff ff68 	bl	219cc <ble_ll_sched_preempt>
    if (TAILQ_FIRST(&g_ble_ll_sched_q) == sch) {
   21afc:	4b16      	ldr	r3, [pc, #88]	; (21b58 <ble_ll_sched_insert+0x12c>)
   21afe:	681b      	ldr	r3, [r3, #0]
   21b00:	42ab      	cmp	r3, r5
   21b02:	d00e      	beq.n	21b22 <ble_ll_sched_insert+0xf6>
    return sch->enqueued ? 0 : -1;
   21b04:	786b      	ldrb	r3, [r5, #1]
   21b06:	b31b      	cbz	r3, 21b50 <ble_ll_sched_insert+0x124>
   21b08:	2000      	movs	r0, #0
}
   21b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        BLE_LL_ASSERT(sch->enqueued);
   21b0e:	f7f2 fda1 	bl	14654 <hal_debugger_connected>
   21b12:	b100      	cbz	r0, 21b16 <ble_ll_sched_insert+0xea>
   21b14:	be01      	bkpt	0x0001
   21b16:	2300      	movs	r3, #0
   21b18:	461a      	mov	r2, r3
   21b1a:	4619      	mov	r1, r3
   21b1c:	4618      	mov	r0, r3
   21b1e:	f7f3 f93b 	bl	14d98 <__assert_func>
        BLE_LL_ASSERT(sch->enqueued);
   21b22:	786b      	ldrb	r3, [r5, #1]
   21b24:	b153      	cbz	r3, 21b3c <ble_ll_sched_insert+0x110>
    if (g_ble_ll_sched_q_head_changed) {
   21b26:	4b0d      	ldr	r3, [pc, #52]	; (21b5c <ble_ll_sched_insert+0x130>)
   21b28:	781b      	ldrb	r3, [r3, #0]
   21b2a:	2b00      	cmp	r3, #0
   21b2c:	d1ea      	bne.n	21b04 <ble_ll_sched_insert+0xd8>
    g_ble_ll_sched_q_head_changed = 1;
   21b2e:	4b0b      	ldr	r3, [pc, #44]	; (21b5c <ble_ll_sched_insert+0x130>)
   21b30:	2201      	movs	r2, #1
   21b32:	701a      	strb	r2, [r3, #0]
}

static inline void
ble_ll_tmr_stop(struct ble_ll_tmr *tmr)
{
    os_cputime_timer_stop(&tmr->t);
   21b34:	480a      	ldr	r0, [pc, #40]	; (21b60 <ble_ll_sched_insert+0x134>)
   21b36:	f010 fa60 	bl	31ffa <os_cputime_timer_stop>
}
   21b3a:	e7e3      	b.n	21b04 <ble_ll_sched_insert+0xd8>
        BLE_LL_ASSERT(sch->enqueued);
   21b3c:	f7f2 fd8a 	bl	14654 <hal_debugger_connected>
   21b40:	b100      	cbz	r0, 21b44 <ble_ll_sched_insert+0x118>
   21b42:	be01      	bkpt	0x0001
   21b44:	2300      	movs	r3, #0
   21b46:	461a      	mov	r2, r3
   21b48:	4619      	mov	r1, r3
   21b4a:	4618      	mov	r0, r3
   21b4c:	f7f3 f924 	bl	14d98 <__assert_func>
    return sch->enqueued ? 0 : -1;
   21b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21b54:	e7d9      	b.n	21b0a <ble_ll_sched_insert+0xde>
   21b56:	bf00      	nop
   21b58:	10002668 	.word	0x10002668
   21b5c:	10002670 	.word	0x10002670
   21b60:	10002674 	.word	0x10002674

00021b64 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   21b64:	b538      	push	{r3, r4, r5, lr}
   21b66:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   21b68:	f7fa fece 	bl	1c908 <ble_ll_state_get>
   21b6c:	4605      	mov	r5, r0
    return os_cputime_get32();
   21b6e:	f010 fa48 	bl	32002 <os_cputime_get32>

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, ble_ll_tmr_get(),
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   21b72:	b925      	cbnz	r5, 21b7e <ble_ll_sched_execute_item+0x1a>
        BLE_LL_ASSERT(0);
        break;
    }

sched:
    BLE_LL_ASSERT(sch->sched_cb);
   21b74:	6923      	ldr	r3, [r4, #16]
   21b76:	b313      	cbz	r3, 21bbe <ble_ll_sched_execute_item+0x5a>

    BLE_LL_DEBUG_GPIO(SCHED_ITEM, 1);
    rc = sch->sched_cb(sch);
   21b78:	4620      	mov	r0, r4
   21b7a:	4798      	blx	r3
    if (rc != BLE_LL_SCHED_STATE_RUNNING) {
        BLE_LL_DEBUG_GPIO(SCHED_ITEM, 0);
    }

    return rc;
}
   21b7c:	bd38      	pop	{r3, r4, r5, pc}
    ble_phy_disable();
   21b7e:	f000 fb77 	bl	22270 <ble_phy_disable>
    switch (lls) {
   21b82:	2d01      	cmp	r5, #1
   21b84:	d008      	beq.n	21b98 <ble_ll_sched_execute_item+0x34>
   21b86:	2d04      	cmp	r5, #4
   21b88:	d10f      	bne.n	21baa <ble_ll_sched_execute_item+0x46>
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
   21b8a:	4a12      	ldr	r2, [pc, #72]	; (21bd4 <ble_ll_sched_execute_item+0x70>)
   21b8c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   21b8e:	3301      	adds	r3, #1
   21b90:	67d3      	str	r3, [r2, #124]	; 0x7c
        ble_ll_conn_event_halt();
   21b92:	f7fc fc8f 	bl	1e4b4 <ble_ll_conn_event_halt>
        break;
   21b96:	e7ed      	b.n	21b74 <ble_ll_sched_execute_item+0x10>
        STATS_INC(ble_ll_stats, sched_state_adv_errs);
   21b98:	4a0e      	ldr	r2, [pc, #56]	; (21bd4 <ble_ll_sched_execute_item+0x70>)
   21b9a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   21b9e:	3301      	adds	r3, #1
   21ba0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        ble_ll_adv_halt();
   21ba4:	f7fb fd7a 	bl	1d69c <ble_ll_adv_halt>
        break;
   21ba8:	e7e4      	b.n	21b74 <ble_ll_sched_execute_item+0x10>
        BLE_LL_ASSERT(0);
   21baa:	f7f2 fd53 	bl	14654 <hal_debugger_connected>
   21bae:	b100      	cbz	r0, 21bb2 <ble_ll_sched_execute_item+0x4e>
   21bb0:	be01      	bkpt	0x0001
   21bb2:	2300      	movs	r3, #0
   21bb4:	461a      	mov	r2, r3
   21bb6:	4619      	mov	r1, r3
   21bb8:	4618      	mov	r0, r3
   21bba:	f7f3 f8ed 	bl	14d98 <__assert_func>
    BLE_LL_ASSERT(sch->sched_cb);
   21bbe:	f7f2 fd49 	bl	14654 <hal_debugger_connected>
   21bc2:	b100      	cbz	r0, 21bc6 <ble_ll_sched_execute_item+0x62>
   21bc4:	be01      	bkpt	0x0001
   21bc6:	2300      	movs	r3, #0
   21bc8:	461a      	mov	r2, r3
   21bca:	4619      	mov	r1, r3
   21bcc:	4618      	mov	r0, r3
   21bce:	f7f3 f8e3 	bl	14d98 <__assert_func>
   21bd2:	bf00      	nop
   21bd4:	10001ea8 	.word	0x10001ea8

00021bd8 <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   21bd8:	4b11      	ldr	r3, [pc, #68]	; (21c20 <ble_ll_sched_run+0x48>)
   21bda:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   21bdc:	b1f0      	cbz	r0, 21c1c <ble_ll_sched_run+0x44>
{
   21bde:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   21be0:	6943      	ldr	r3, [r0, #20]
   21be2:	b1bb      	cbz	r3, 21c14 <ble_ll_sched_run+0x3c>
   21be4:	6982      	ldr	r2, [r0, #24]
   21be6:	619a      	str	r2, [r3, #24]
   21be8:	6983      	ldr	r3, [r0, #24]
   21bea:	6942      	ldr	r2, [r0, #20]
   21bec:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   21bee:	2300      	movs	r3, #0
   21bf0:	7043      	strb	r3, [r0, #1]
        g_ble_ll_sched_q_head_changed = 1;
   21bf2:	4c0c      	ldr	r4, [pc, #48]	; (21c24 <ble_ll_sched_run+0x4c>)
   21bf4:	2301      	movs	r3, #1
   21bf6:	7023      	strb	r3, [r4, #0]

        ble_ll_sched_execute_item(sch);
   21bf8:	f7ff ffb4 	bl	21b64 <ble_ll_sched_execute_item>
    if (!g_ble_ll_sched_q_head_changed) {
   21bfc:	7823      	ldrb	r3, [r4, #0]
   21bfe:	b143      	cbz	r3, 21c12 <ble_ll_sched_run+0x3a>
    g_ble_ll_sched_q_head_changed = 0;
   21c00:	2200      	movs	r2, #0
   21c02:	7022      	strb	r2, [r4, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21c04:	4b06      	ldr	r3, [pc, #24]	; (21c20 <ble_ll_sched_run+0x48>)
   21c06:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21c08:	b11b      	cbz	r3, 21c12 <ble_ll_sched_run+0x3a>
    os_cputime_timer_start(&tmr->t, tgt);
   21c0a:	6859      	ldr	r1, [r3, #4]
   21c0c:	4806      	ldr	r0, [pc, #24]	; (21c28 <ble_ll_sched_run+0x50>)
   21c0e:	f010 f9f0 	bl	31ff2 <os_cputime_timer_start>

        ble_ll_sched_restart();
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   21c12:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   21c14:	6982      	ldr	r2, [r0, #24]
   21c16:	4b02      	ldr	r3, [pc, #8]	; (21c20 <ble_ll_sched_run+0x48>)
   21c18:	605a      	str	r2, [r3, #4]
   21c1a:	e7e5      	b.n	21be8 <ble_ll_sched_run+0x10>
   21c1c:	4770      	bx	lr
   21c1e:	bf00      	nop
   21c20:	10002668 	.word	0x10002668
   21c24:	10002670 	.word	0x10002670
   21c28:	10002674 	.word	0x10002674

00021c2c <ble_ll_sched_conn_reschedule>:
{
   21c2c:	b570      	push	{r4, r5, r6, lr}
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   21c2e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   21c30:	4a2d      	ldr	r2, [pc, #180]	; (21ce8 <ble_ll_sched_conn_reschedule+0xbc>)
   21c32:	7812      	ldrb	r2, [r2, #0]
   21c34:	1a9b      	subs	r3, r3, r2
   21c36:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
    switch (connsm->conn_role) {
   21c3a:	79c3      	ldrb	r3, [r0, #7]
   21c3c:	2b02      	cmp	r3, #2
   21c3e:	d13f      	bne.n	21cc0 <ble_ll_sched_conn_reschedule+0x94>
   21c40:	4604      	mov	r4, r0
   21c42:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
        usecs = connsm->periph_cur_window_widening;
   21c46:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    if (usecs <= 31249) {
   21c4a:	f647 2311 	movw	r3, #31249	; 0x7a11
   21c4e:	4298      	cmp	r0, r3
   21c50:	d833      	bhi.n	21cba <ble_ll_sched_conn_reschedule+0x8e>
        return (usecs * 137439) / 4194304;
   21c52:	4b26      	ldr	r3, [pc, #152]	; (21cec <ble_ll_sched_conn_reschedule+0xc0>)
   21c54:	fb03 f000 	mul.w	r0, r3, r0
   21c58:	0d80      	lsrs	r0, r0, #22
        sch->start_time -= (ble_ll_tmr_u2t(usecs) + 1);
   21c5a:	3001      	adds	r0, #1
   21c5c:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
   21c60:	1a2d      	subs	r5, r5, r0
   21c62:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
        sch->remainder = 0;
   21c66:	2300      	movs	r3, #0
   21c68:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
    sch->end_time = connsm->ce_end_time;
   21c6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   21c6e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    return os_cputime_get32();
   21c72:	f010 f9c6 	bl	32002 <os_cputime_get32>
    if (LL_TMR_LT(sch->start_time, ble_ll_tmr_get())) {
   21c76:	1a28      	subs	r0, r5, r0
   21c78:	2800      	cmp	r0, #0
   21c7a:	db31      	blt.n	21ce0 <ble_ll_sched_conn_reschedule+0xb4>
    OS_ENTER_CRITICAL(sr);
   21c7c:	f7f4 fd42 	bl	16704 <os_arch_save_sr>
   21c80:	4605      	mov	r5, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   21c82:	4630      	mov	r0, r6
   21c84:	f7ff fe90 	bl	219a8 <ble_ll_sched_overlaps_current>
   21c88:	bb20      	cbnz	r0, 21cd4 <ble_ll_sched_conn_reschedule+0xa8>
    rc = ble_ll_sched_insert(sch, 0, preempt_any_except_conn);
   21c8a:	4a19      	ldr	r2, [pc, #100]	; (21cf0 <ble_ll_sched_conn_reschedule+0xc4>)
   21c8c:	2100      	movs	r1, #0
   21c8e:	4630      	mov	r0, r6
   21c90:	f7ff fecc 	bl	21a2c <ble_ll_sched_insert>
   21c94:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
   21c96:	4628      	mov	r0, r5
   21c98:	f7f4 fd3a 	bl	16710 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   21c9c:	4b15      	ldr	r3, [pc, #84]	; (21cf4 <ble_ll_sched_conn_reschedule+0xc8>)
   21c9e:	781b      	ldrb	r3, [r3, #0]
   21ca0:	b14b      	cbz	r3, 21cb6 <ble_ll_sched_conn_reschedule+0x8a>
    g_ble_ll_sched_q_head_changed = 0;
   21ca2:	4b14      	ldr	r3, [pc, #80]	; (21cf4 <ble_ll_sched_conn_reschedule+0xc8>)
   21ca4:	2200      	movs	r2, #0
   21ca6:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21ca8:	4b13      	ldr	r3, [pc, #76]	; (21cf8 <ble_ll_sched_conn_reschedule+0xcc>)
   21caa:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21cac:	b11b      	cbz	r3, 21cb6 <ble_ll_sched_conn_reschedule+0x8a>
    os_cputime_timer_start(&tmr->t, tgt);
   21cae:	6859      	ldr	r1, [r3, #4]
   21cb0:	4812      	ldr	r0, [pc, #72]	; (21cfc <ble_ll_sched_conn_reschedule+0xd0>)
   21cb2:	f010 f99e 	bl	31ff2 <os_cputime_timer_start>
}
   21cb6:	4620      	mov	r0, r4
   21cb8:	bd70      	pop	{r4, r5, r6, pc}
    return os_cputime_usecs_to_ticks(usecs);
   21cba:	f010 f9a7 	bl	3200c <os_cputime_usecs_to_ticks>
   21cbe:	e7cc      	b.n	21c5a <ble_ll_sched_conn_reschedule+0x2e>
        BLE_LL_ASSERT(0);
   21cc0:	f7f2 fcc8 	bl	14654 <hal_debugger_connected>
   21cc4:	b100      	cbz	r0, 21cc8 <ble_ll_sched_conn_reschedule+0x9c>
   21cc6:	be01      	bkpt	0x0001
   21cc8:	2300      	movs	r3, #0
   21cca:	461a      	mov	r2, r3
   21ccc:	4619      	mov	r1, r3
   21cce:	4618      	mov	r0, r3
   21cd0:	f7f3 f862 	bl	14d98 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   21cd4:	4628      	mov	r0, r5
   21cd6:	f7f4 fd1b 	bl	16710 <os_arch_restore_sr>
        return -1;
   21cda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21cde:	e7ea      	b.n	21cb6 <ble_ll_sched_conn_reschedule+0x8a>
        return -1;
   21ce0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21ce4:	e7e7      	b.n	21cb6 <ble_ll_sched_conn_reschedule+0x8a>
   21ce6:	bf00      	nop
   21ce8:	10002665 	.word	0x10002665
   21cec:	000218df 	.word	0x000218df
   21cf0:	00021979 	.word	0x00021979
   21cf4:	10002670 	.word	0x10002670
   21cf8:	10002668 	.word	0x10002668
   21cfc:	10002674 	.word	0x10002674

00021d00 <ble_ll_sched_conn_periph_new>:
{
   21d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d02:	4604      	mov	r4, r0
    sch = &connsm->conn_sch;
   21d04:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   21d08:	6f05      	ldr	r5, [r0, #112]	; 0x70
   21d0a:	4b1a      	ldr	r3, [pc, #104]	; (21d74 <ble_ll_sched_conn_periph_new+0x74>)
   21d0c:	781b      	ldrb	r3, [r3, #0]
   21d0e:	1aed      	subs	r5, r5, r3
                      ble_ll_tmr_u2t(connsm->periph_cur_window_widening) - 1;
   21d10:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    if (usecs <= 31249) {
   21d14:	f647 2311 	movw	r3, #31249	; 0x7a11
   21d18:	4298      	cmp	r0, r3
   21d1a:	d827      	bhi.n	21d6c <ble_ll_sched_conn_periph_new+0x6c>
        return (usecs * 137439) / 4194304;
   21d1c:	4b16      	ldr	r3, [pc, #88]	; (21d78 <ble_ll_sched_conn_periph_new+0x78>)
   21d1e:	fb03 f000 	mul.w	r0, r3, r0
   21d22:	0d80      	lsrs	r0, r0, #22
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   21d24:	1a2d      	subs	r5, r5, r0
                      ble_ll_tmr_u2t(connsm->periph_cur_window_widening) - 1;
   21d26:	3d01      	subs	r5, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   21d28:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    sch->end_time = connsm->ce_end_time;
   21d2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   21d2e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    sch->remainder = 0;
   21d32:	2700      	movs	r7, #0
   21d34:	f884 70da 	strb.w	r7, [r4, #218]	; 0xda
    OS_ENTER_CRITICAL(sr);
   21d38:	f7f4 fce4 	bl	16704 <os_arch_save_sr>
   21d3c:	4605      	mov	r5, r0
    rc = ble_ll_sched_insert(sch, 0, preempt_any);
   21d3e:	4a0f      	ldr	r2, [pc, #60]	; (21d7c <ble_ll_sched_conn_periph_new+0x7c>)
   21d40:	4639      	mov	r1, r7
   21d42:	4630      	mov	r0, r6
   21d44:	f7ff fe72 	bl	21a2c <ble_ll_sched_insert>
   21d48:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
   21d4a:	4628      	mov	r0, r5
   21d4c:	f7f4 fce0 	bl	16710 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   21d50:	4b0b      	ldr	r3, [pc, #44]	; (21d80 <ble_ll_sched_conn_periph_new+0x80>)
   21d52:	781b      	ldrb	r3, [r3, #0]
   21d54:	b143      	cbz	r3, 21d68 <ble_ll_sched_conn_periph_new+0x68>
    g_ble_ll_sched_q_head_changed = 0;
   21d56:	4b0a      	ldr	r3, [pc, #40]	; (21d80 <ble_ll_sched_conn_periph_new+0x80>)
   21d58:	701f      	strb	r7, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21d5a:	4b0a      	ldr	r3, [pc, #40]	; (21d84 <ble_ll_sched_conn_periph_new+0x84>)
   21d5c:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21d5e:	b11b      	cbz	r3, 21d68 <ble_ll_sched_conn_periph_new+0x68>
    os_cputime_timer_start(&tmr->t, tgt);
   21d60:	6859      	ldr	r1, [r3, #4]
   21d62:	4809      	ldr	r0, [pc, #36]	; (21d88 <ble_ll_sched_conn_periph_new+0x88>)
   21d64:	f010 f945 	bl	31ff2 <os_cputime_timer_start>
}
   21d68:	4620      	mov	r0, r4
   21d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return os_cputime_usecs_to_ticks(usecs);
   21d6c:	f010 f94e 	bl	3200c <os_cputime_usecs_to_ticks>
   21d70:	e7d8      	b.n	21d24 <ble_ll_sched_conn_periph_new+0x24>
   21d72:	bf00      	nop
   21d74:	10002665 	.word	0x10002665
   21d78:	000218df 	.word	0x000218df
   21d7c:	00021971 	.word	0x00021971
   21d80:	10002670 	.word	0x10002670
   21d84:	10002668 	.word	0x10002668
   21d88:	10002674 	.word	0x10002674

00021d8c <ble_ll_sched_adv_new>:
{
   21d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d90:	4604      	mov	r4, r0
   21d92:	460e      	mov	r6, r1
   21d94:	4617      	mov	r7, r2
    OS_ENTER_CRITICAL(sr);
   21d96:	f7f4 fcb5 	bl	16704 <os_arch_save_sr>
   21d9a:	4605      	mov	r5, r0
    rc = ble_ll_sched_insert(sch, BLE_LL_SCHED_MAX_DELAY_ANY,
   21d9c:	4a14      	ldr	r2, [pc, #80]	; (21df0 <ble_ll_sched_adv_new+0x64>)
   21d9e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21da2:	4620      	mov	r0, r4
   21da4:	f7ff fe42 	bl	21a2c <ble_ll_sched_insert>
    BLE_LL_ASSERT(rc == 0);
   21da8:	b9b8      	cbnz	r0, 21dda <ble_ll_sched_adv_new+0x4e>
   21daa:	4680      	mov	r8, r0
    cb(sch->cb_arg, sch->start_time, arg);
   21dac:	463a      	mov	r2, r7
   21dae:	6861      	ldr	r1, [r4, #4]
   21db0:	68e0      	ldr	r0, [r4, #12]
   21db2:	47b0      	blx	r6
    OS_EXIT_CRITICAL(sr);
   21db4:	4628      	mov	r0, r5
   21db6:	f7f4 fcab 	bl	16710 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   21dba:	4b0e      	ldr	r3, [pc, #56]	; (21df4 <ble_ll_sched_adv_new+0x68>)
   21dbc:	781b      	ldrb	r3, [r3, #0]
   21dbe:	b14b      	cbz	r3, 21dd4 <ble_ll_sched_adv_new+0x48>
    g_ble_ll_sched_q_head_changed = 0;
   21dc0:	4b0c      	ldr	r3, [pc, #48]	; (21df4 <ble_ll_sched_adv_new+0x68>)
   21dc2:	2200      	movs	r2, #0
   21dc4:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21dc6:	4b0c      	ldr	r3, [pc, #48]	; (21df8 <ble_ll_sched_adv_new+0x6c>)
   21dc8:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21dca:	b11b      	cbz	r3, 21dd4 <ble_ll_sched_adv_new+0x48>
    os_cputime_timer_start(&tmr->t, tgt);
   21dcc:	6859      	ldr	r1, [r3, #4]
   21dce:	480b      	ldr	r0, [pc, #44]	; (21dfc <ble_ll_sched_adv_new+0x70>)
   21dd0:	f010 f90f 	bl	31ff2 <os_cputime_timer_start>
}
   21dd4:	4640      	mov	r0, r8
   21dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(rc == 0);
   21dda:	f7f2 fc3b 	bl	14654 <hal_debugger_connected>
   21dde:	b100      	cbz	r0, 21de2 <ble_ll_sched_adv_new+0x56>
   21de0:	be01      	bkpt	0x0001
   21de2:	2300      	movs	r3, #0
   21de4:	461a      	mov	r2, r3
   21de6:	4619      	mov	r1, r3
   21de8:	4618      	mov	r0, r3
   21dea:	f7f2 ffd5 	bl	14d98 <__assert_func>
   21dee:	bf00      	nop
   21df0:	00021975 	.word	0x00021975
   21df4:	10002670 	.word	0x10002670
   21df8:	10002668 	.word	0x10002668
   21dfc:	10002674 	.word	0x10002674

00021e00 <ble_ll_sched_adv_reschedule>:
{
   21e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e04:	4605      	mov	r5, r0
   21e06:	460c      	mov	r4, r1
    max_end_time = sch->end_time + max_delay_ticks;
   21e08:	6883      	ldr	r3, [r0, #8]
   21e0a:	eb03 0801 	add.w	r8, r3, r1
    OS_ENTER_CRITICAL(sr);
   21e0e:	f7f4 fc79 	bl	16704 <os_arch_save_sr>
   21e12:	4606      	mov	r6, r0
    rc = ble_ll_sched_insert(sch, max_delay_ticks, preempt_none);
   21e14:	4a18      	ldr	r2, [pc, #96]	; (21e78 <ble_ll_sched_adv_reschedule+0x78>)
   21e16:	4621      	mov	r1, r4
   21e18:	4628      	mov	r0, r5
   21e1a:	f7ff fe07 	bl	21a2c <ble_ll_sched_insert>
    if (rc == 0) {
   21e1e:	4607      	mov	r7, r0
   21e20:	b980      	cbnz	r0, 21e44 <ble_ll_sched_adv_reschedule+0x44>
        next = TAILQ_NEXT(sch, link);
   21e22:	696b      	ldr	r3, [r5, #20]
        if (next) {
   21e24:	b13b      	cbz	r3, 21e36 <ble_ll_sched_adv_reschedule+0x36>
            if (LL_TMR_LT(next->start_time, max_end_time)) {
   21e26:	685c      	ldr	r4, [r3, #4]
   21e28:	eba4 0308 	sub.w	r3, r4, r8
   21e2c:	2b00      	cmp	r3, #0
   21e2e:	db00      	blt.n	21e32 <ble_ll_sched_adv_reschedule+0x32>
    max_end_time = sch->end_time + max_delay_ticks;
   21e30:	4644      	mov	r4, r8
            rand_ticks = max_end_time - sch->end_time;
   21e32:	68a9      	ldr	r1, [r5, #8]
   21e34:	1a64      	subs	r4, r4, r1
        if (rand_ticks) {
   21e36:	b9c4      	cbnz	r4, 21e6a <ble_ll_sched_adv_reschedule+0x6a>
        sch->start_time += rand_ticks;
   21e38:	686b      	ldr	r3, [r5, #4]
   21e3a:	4423      	add	r3, r4
   21e3c:	606b      	str	r3, [r5, #4]
        sch->end_time += rand_ticks;
   21e3e:	68a9      	ldr	r1, [r5, #8]
   21e40:	4421      	add	r1, r4
   21e42:	60a9      	str	r1, [r5, #8]
    OS_EXIT_CRITICAL(sr);
   21e44:	4630      	mov	r0, r6
   21e46:	f7f4 fc63 	bl	16710 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   21e4a:	4b0c      	ldr	r3, [pc, #48]	; (21e7c <ble_ll_sched_adv_reschedule+0x7c>)
   21e4c:	781b      	ldrb	r3, [r3, #0]
   21e4e:	b14b      	cbz	r3, 21e64 <ble_ll_sched_adv_reschedule+0x64>
    g_ble_ll_sched_q_head_changed = 0;
   21e50:	4b0a      	ldr	r3, [pc, #40]	; (21e7c <ble_ll_sched_adv_reschedule+0x7c>)
   21e52:	2200      	movs	r2, #0
   21e54:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21e56:	4b0a      	ldr	r3, [pc, #40]	; (21e80 <ble_ll_sched_adv_reschedule+0x80>)
   21e58:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21e5a:	b11b      	cbz	r3, 21e64 <ble_ll_sched_adv_reschedule+0x64>
   21e5c:	6859      	ldr	r1, [r3, #4]
   21e5e:	4809      	ldr	r0, [pc, #36]	; (21e84 <ble_ll_sched_adv_reschedule+0x84>)
   21e60:	f010 f8c7 	bl	31ff2 <os_cputime_timer_start>
}
   21e64:	4638      	mov	r0, r7
   21e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rand_ticks = ble_ll_rand() % rand_ticks;
   21e6a:	f7ff fa25 	bl	212b8 <ble_ll_rand>
   21e6e:	fbb0 f3f4 	udiv	r3, r0, r4
   21e72:	fb04 0413 	mls	r4, r4, r3, r0
   21e76:	e7df      	b.n	21e38 <ble_ll_sched_adv_reschedule+0x38>
   21e78:	00021975 	.word	0x00021975
   21e7c:	10002670 	.word	0x10002670
   21e80:	10002668 	.word	0x10002668
   21e84:	10002674 	.word	0x10002674

00021e88 <ble_ll_sched_adv_resched_pdu>:
{
   21e88:	b538      	push	{r3, r4, r5, lr}
   21e8a:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
   21e8c:	f7f4 fc3a 	bl	16704 <os_arch_save_sr>
   21e90:	4604      	mov	r4, r0
    lls = ble_ll_state_get();
   21e92:	f7fa fd39 	bl	1c908 <ble_ll_state_get>
    switch(lls) {
   21e96:	2801      	cmp	r0, #1
   21e98:	d018      	beq.n	21ecc <ble_ll_sched_adv_resched_pdu+0x44>
   21e9a:	2804      	cmp	r0, #4
   21e9c:	d01d      	beq.n	21eda <ble_ll_sched_adv_resched_pdu+0x52>
    rc = ble_ll_sched_insert(sch, 0, preempt_none);
   21e9e:	4a12      	ldr	r2, [pc, #72]	; (21ee8 <ble_ll_sched_adv_resched_pdu+0x60>)
   21ea0:	2100      	movs	r1, #0
   21ea2:	4628      	mov	r0, r5
   21ea4:	f7ff fdc2 	bl	21a2c <ble_ll_sched_insert>
   21ea8:	4605      	mov	r5, r0
    OS_EXIT_CRITICAL(sr);
   21eaa:	4620      	mov	r0, r4
   21eac:	f7f4 fc30 	bl	16710 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   21eb0:	4b0e      	ldr	r3, [pc, #56]	; (21eec <ble_ll_sched_adv_resched_pdu+0x64>)
   21eb2:	781b      	ldrb	r3, [r3, #0]
   21eb4:	b17b      	cbz	r3, 21ed6 <ble_ll_sched_adv_resched_pdu+0x4e>
    g_ble_ll_sched_q_head_changed = 0;
   21eb6:	4b0d      	ldr	r3, [pc, #52]	; (21eec <ble_ll_sched_adv_resched_pdu+0x64>)
   21eb8:	2200      	movs	r2, #0
   21eba:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21ebc:	4b0c      	ldr	r3, [pc, #48]	; (21ef0 <ble_ll_sched_adv_resched_pdu+0x68>)
   21ebe:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21ec0:	b14b      	cbz	r3, 21ed6 <ble_ll_sched_adv_resched_pdu+0x4e>
   21ec2:	6859      	ldr	r1, [r3, #4]
   21ec4:	480b      	ldr	r0, [pc, #44]	; (21ef4 <ble_ll_sched_adv_resched_pdu+0x6c>)
   21ec6:	f010 f894 	bl	31ff2 <os_cputime_timer_start>
}
   21eca:	e004      	b.n	21ed6 <ble_ll_sched_adv_resched_pdu+0x4e>
        OS_EXIT_CRITICAL(sr);
   21ecc:	4620      	mov	r0, r4
   21ece:	f7f4 fc1f 	bl	16710 <os_arch_restore_sr>
        return -1;
   21ed2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   21ed6:	4628      	mov	r0, r5
   21ed8:	bd38      	pop	{r3, r4, r5, pc}
        OS_EXIT_CRITICAL(sr);
   21eda:	4620      	mov	r0, r4
   21edc:	f7f4 fc18 	bl	16710 <os_arch_restore_sr>
        return -1;
   21ee0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21ee4:	e7f7      	b.n	21ed6 <ble_ll_sched_adv_resched_pdu+0x4e>
   21ee6:	bf00      	nop
   21ee8:	00021975 	.word	0x00021975
   21eec:	10002670 	.word	0x10002670
   21ef0:	10002668 	.word	0x10002668
   21ef4:	10002674 	.word	0x10002674

00021ef8 <ble_ll_sched_rmv_elem>:
{
   21ef8:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(sch);
   21efa:	b1c8      	cbz	r0, 21f30 <ble_ll_sched_rmv_elem+0x38>
   21efc:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   21efe:	f7f4 fc01 	bl	16704 <os_arch_save_sr>
   21f02:	4605      	mov	r5, r0
    if (sch->enqueued) {
   21f04:	7863      	ldrb	r3, [r4, #1]
   21f06:	b35b      	cbz	r3, 21f60 <ble_ll_sched_rmv_elem+0x68>
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   21f08:	4b20      	ldr	r3, [pc, #128]	; (21f8c <ble_ll_sched_rmv_elem+0x94>)
   21f0a:	681b      	ldr	r3, [r3, #0]
   21f0c:	42a3      	cmp	r3, r4
   21f0e:	d019      	beq.n	21f44 <ble_ll_sched_rmv_elem+0x4c>
    first_removed = 0;
   21f10:	2100      	movs	r1, #0
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   21f12:	6963      	ldr	r3, [r4, #20]
   21f14:	b1c3      	cbz	r3, 21f48 <ble_ll_sched_rmv_elem+0x50>
   21f16:	69a2      	ldr	r2, [r4, #24]
   21f18:	619a      	str	r2, [r3, #24]
   21f1a:	69a3      	ldr	r3, [r4, #24]
   21f1c:	6962      	ldr	r2, [r4, #20]
   21f1e:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   21f20:	2300      	movs	r3, #0
   21f22:	7063      	strb	r3, [r4, #1]
    if (first_removed) {
   21f24:	b379      	cbz	r1, 21f86 <ble_ll_sched_rmv_elem+0x8e>
    if (g_ble_ll_sched_q_head_changed) {
   21f26:	4b1a      	ldr	r3, [pc, #104]	; (21f90 <ble_ll_sched_rmv_elem+0x98>)
   21f28:	781b      	ldrb	r3, [r3, #0]
   21f2a:	b18b      	cbz	r3, 21f50 <ble_ll_sched_rmv_elem+0x58>
        rc = 0;
   21f2c:	2400      	movs	r4, #0
   21f2e:	e018      	b.n	21f62 <ble_ll_sched_rmv_elem+0x6a>
    BLE_LL_ASSERT(sch);
   21f30:	f7f2 fb90 	bl	14654 <hal_debugger_connected>
   21f34:	b100      	cbz	r0, 21f38 <ble_ll_sched_rmv_elem+0x40>
   21f36:	be01      	bkpt	0x0001
   21f38:	2300      	movs	r3, #0
   21f3a:	461a      	mov	r2, r3
   21f3c:	4619      	mov	r1, r3
   21f3e:	4618      	mov	r0, r3
   21f40:	f7f2 ff2a 	bl	14d98 <__assert_func>
            first_removed = 1;
   21f44:	2101      	movs	r1, #1
   21f46:	e7e4      	b.n	21f12 <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   21f48:	69a2      	ldr	r2, [r4, #24]
   21f4a:	4b10      	ldr	r3, [pc, #64]	; (21f8c <ble_ll_sched_rmv_elem+0x94>)
   21f4c:	605a      	str	r2, [r3, #4]
   21f4e:	e7e4      	b.n	21f1a <ble_ll_sched_rmv_elem+0x22>
    g_ble_ll_sched_q_head_changed = 1;
   21f50:	4b0f      	ldr	r3, [pc, #60]	; (21f90 <ble_ll_sched_rmv_elem+0x98>)
   21f52:	2201      	movs	r2, #1
   21f54:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_stop(&tmr->t);
   21f56:	480f      	ldr	r0, [pc, #60]	; (21f94 <ble_ll_sched_rmv_elem+0x9c>)
   21f58:	f010 f84f 	bl	31ffa <os_cputime_timer_stop>
        rc = 0;
   21f5c:	2400      	movs	r4, #0
}
   21f5e:	e000      	b.n	21f62 <ble_ll_sched_rmv_elem+0x6a>
        rc = 1;
   21f60:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   21f62:	4628      	mov	r0, r5
   21f64:	f7f4 fbd4 	bl	16710 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   21f68:	4b09      	ldr	r3, [pc, #36]	; (21f90 <ble_ll_sched_rmv_elem+0x98>)
   21f6a:	781b      	ldrb	r3, [r3, #0]
   21f6c:	b14b      	cbz	r3, 21f82 <ble_ll_sched_rmv_elem+0x8a>
    g_ble_ll_sched_q_head_changed = 0;
   21f6e:	4b08      	ldr	r3, [pc, #32]	; (21f90 <ble_ll_sched_rmv_elem+0x98>)
   21f70:	2200      	movs	r2, #0
   21f72:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   21f74:	4b05      	ldr	r3, [pc, #20]	; (21f8c <ble_ll_sched_rmv_elem+0x94>)
   21f76:	681b      	ldr	r3, [r3, #0]
    if (first) {
   21f78:	b11b      	cbz	r3, 21f82 <ble_ll_sched_rmv_elem+0x8a>
    os_cputime_timer_start(&tmr->t, tgt);
   21f7a:	6859      	ldr	r1, [r3, #4]
   21f7c:	4805      	ldr	r0, [pc, #20]	; (21f94 <ble_ll_sched_rmv_elem+0x9c>)
   21f7e:	f010 f838 	bl	31ff2 <os_cputime_timer_start>
}
   21f82:	4620      	mov	r0, r4
   21f84:	bd38      	pop	{r3, r4, r5, pc}
        rc = 0;
   21f86:	2400      	movs	r4, #0
   21f88:	e7eb      	b.n	21f62 <ble_ll_sched_rmv_elem+0x6a>
   21f8a:	bf00      	nop
   21f8c:	10002668 	.word	0x10002668
   21f90:	10002670 	.word	0x10002670
   21f94:	10002674 	.word	0x10002674

00021f98 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   21f98:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&tmr->t);
   21f9a:	4802      	ldr	r0, [pc, #8]	; (21fa4 <ble_ll_sched_stop+0xc>)
   21f9c:	f010 f82d 	bl	31ffa <os_cputime_timer_stop>
    ble_ll_tmr_stop(&g_ble_ll_sched_timer);
}
   21fa0:	bd08      	pop	{r3, pc}
   21fa2:	bf00      	nop
   21fa4:	10002674 	.word	0x10002674

00021fa8 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   21fa8:	b508      	push	{r3, lr}

    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks = ble_ll_tmr_u2t_up(XCVR_TX_SCHED_DELAY_USECS);
   21faa:	4b06      	ldr	r3, [pc, #24]	; (21fc4 <ble_ll_sched_init+0x1c>)
   21fac:	2208      	movs	r2, #8
   21fae:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_init(&tmr->t, cb, arg);
   21fb0:	2200      	movs	r2, #0
   21fb2:	4905      	ldr	r1, [pc, #20]	; (21fc8 <ble_ll_sched_init+0x20>)
   21fb4:	4805      	ldr	r0, [pc, #20]	; (21fcc <ble_ll_sched_init+0x24>)
   21fb6:	f00f fffd 	bl	31fb4 <os_cputime_timer_init>
        ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_USECS_PER_PERIOD));
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    g_ble_ll_sched_q_head_changed = 0;
   21fba:	2000      	movs	r0, #0
   21fbc:	4b04      	ldr	r3, [pc, #16]	; (21fd0 <ble_ll_sched_init+0x28>)
   21fbe:	7018      	strb	r0, [r3, #0]

    return 0;
}
   21fc0:	bd08      	pop	{r3, pc}
   21fc2:	bf00      	nop
   21fc4:	10002665 	.word	0x10002665
   21fc8:	00021bd9 	.word	0x00021bd9
   21fcc:	10002674 	.word	0x10002674
   21fd0:	10002670 	.word	0x10002670

00021fd4 <ble_ll_utils_remapped_channel>:
    return aa;
}

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   21fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   21fd6:	2400      	movs	r4, #0
    chan = 0;
   21fd8:	4626      	mov	r6, r4
    cntr = 0;
   21fda:	4625      	mov	r5, r4
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   21fdc:	e011      	b.n	22002 <ble_ll_utils_remapped_channel+0x2e>
        if (usable_chans != 0) {
            mask = 0x01;
            for (j = 0; j < 8; j++) {
                if (usable_chans & mask) {
                    if (cntr == remap_index) {
                        return (chan + j);
   21fde:	4432      	add	r2, r6
   21fe0:	b2d0      	uxtb	r0, r2
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
    return 0;
}
   21fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                mask <<= 1;
   21fe4:	005b      	lsls	r3, r3, #1
   21fe6:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   21fe8:	3201      	adds	r2, #1
   21fea:	2a07      	cmp	r2, #7
   21fec:	dc06      	bgt.n	21ffc <ble_ll_utils_remapped_channel+0x28>
                if (usable_chans & mask) {
   21fee:	423b      	tst	r3, r7
   21ff0:	d0f8      	beq.n	21fe4 <ble_ll_utils_remapped_channel+0x10>
                    if (cntr == remap_index) {
   21ff2:	4285      	cmp	r5, r0
   21ff4:	d0f3      	beq.n	21fde <ble_ll_utils_remapped_channel+0xa>
                    ++cntr;
   21ff6:	3501      	adds	r5, #1
   21ff8:	b2ed      	uxtb	r5, r5
   21ffa:	e7f3      	b.n	21fe4 <ble_ll_utils_remapped_channel+0x10>
        chan += 8;
   21ffc:	3608      	adds	r6, #8
   21ffe:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   22000:	3401      	adds	r4, #1
   22002:	2c04      	cmp	r4, #4
   22004:	dc05      	bgt.n	22012 <ble_ll_utils_remapped_channel+0x3e>
        usable_chans = chanmap[i];
   22006:	5d0f      	ldrb	r7, [r1, r4]
        if (usable_chans != 0) {
   22008:	2f00      	cmp	r7, #0
   2200a:	d0f7      	beq.n	21ffc <ble_ll_utils_remapped_channel+0x28>
            for (j = 0; j < 8; j++) {
   2200c:	2200      	movs	r2, #0
            mask = 0x01;
   2200e:	2301      	movs	r3, #1
   22010:	e7eb      	b.n	21fea <ble_ll_utils_remapped_channel+0x16>
    BLE_LL_ASSERT(0);
   22012:	f7f2 fb1f 	bl	14654 <hal_debugger_connected>
   22016:	b100      	cbz	r0, 2201a <ble_ll_utils_remapped_channel+0x46>
   22018:	be01      	bkpt	0x0001
   2201a:	2300      	movs	r3, #0
   2201c:	461a      	mov	r2, r3
   2201e:	4619      	mov	r1, r3
   22020:	4618      	mov	r0, r3
   22022:	f7f2 feb9 	bl	14d98 <__assert_func>

00022026 <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   22026:	b430      	push	{r4, r5}
   22028:	4605      	mov	r5, r0
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   2202a:	2000      	movs	r0, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   2202c:	4601      	mov	r1, r0
   2202e:	e00d      	b.n	2204c <ble_ll_utils_calc_num_used_chans+0x26>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   22030:	005b      	lsls	r3, r3, #1
   22032:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   22034:	3201      	adds	r2, #1
   22036:	2a07      	cmp	r2, #7
   22038:	dc07      	bgt.n	2204a <ble_ll_utils_calc_num_used_chans+0x24>
                    if (chanbyte & mask) {
   2203a:	4223      	tst	r3, r4
   2203c:	d0f8      	beq.n	22030 <ble_ll_utils_calc_num_used_chans+0xa>
                        ++used_channels;
   2203e:	3001      	adds	r0, #1
   22040:	b2c0      	uxtb	r0, r0
   22042:	e7f5      	b.n	22030 <ble_ll_utils_calc_num_used_chans+0xa>
                mask = 0x01;
   22044:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   22046:	2200      	movs	r2, #0
   22048:	e7f5      	b.n	22036 <ble_ll_utils_calc_num_used_chans+0x10>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   2204a:	3101      	adds	r1, #1
   2204c:	2904      	cmp	r1, #4
   2204e:	dc07      	bgt.n	22060 <ble_ll_utils_calc_num_used_chans+0x3a>
        chanbyte = chmap[i];
   22050:	5c6c      	ldrb	r4, [r5, r1]
        if (chanbyte) {
   22052:	2c00      	cmp	r4, #0
   22054:	d0f9      	beq.n	2204a <ble_ll_utils_calc_num_used_chans+0x24>
            if (chanbyte == 0xff) {
   22056:	2cff      	cmp	r4, #255	; 0xff
   22058:	d1f4      	bne.n	22044 <ble_ll_utils_calc_num_used_chans+0x1e>
                used_channels += 8;
   2205a:	3008      	adds	r0, #8
   2205c:	b2c0      	uxtb	r0, r0
   2205e:	e7f4      	b.n	2204a <ble_ll_utils_calc_num_used_chans+0x24>
                }
            }
        }
    }
    return used_channels;
}
   22060:	bc30      	pop	{r4, r5}
   22062:	4770      	bx	lr

00022064 <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   22064:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   22066:	2800      	cmp	r0, #0
   22068:	dc01      	bgt.n	2206e <ble_ll_utils_calc_window_widening+0xa>
    window_widening = 0;
   2206a:	2000      	movs	r0, #0
        total_sca_ppm = g_ble_sca_ppm_tbl[central_sca] + MYNEWT_VAL(BLE_LL_SCA);
        window_widening = (total_sca_ppm * delta_msec) / 1000;
    }

    return window_widening;
}
   2206c:	4770      	bx	lr
{
   2206e:	b510      	push	{r4, lr}
   22070:	4614      	mov	r4, r2
    return os_cputime_ticks_to_usecs(ticks);
   22072:	f00f ffd3 	bl	3201c <os_cputime_ticks_to_usecs>
        delta_msec = ble_ll_tmr_t2u(time_since_last_anchor) / 1000;
   22076:	4a07      	ldr	r2, [pc, #28]	; (22094 <ble_ll_utils_calc_window_widening+0x30>)
   22078:	fba2 3000 	umull	r3, r0, r2, r0
   2207c:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[central_sca] + MYNEWT_VAL(BLE_LL_SCA);
   2207e:	4906      	ldr	r1, [pc, #24]	; (22098 <ble_ll_utils_calc_window_widening+0x34>)
   22080:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   22084:	303c      	adds	r0, #60	; 0x3c
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   22086:	fb00 f003 	mul.w	r0, r0, r3
   2208a:	fba2 3000 	umull	r3, r0, r2, r0
   2208e:	0980      	lsrs	r0, r0, #6
}
   22090:	bd10      	pop	{r4, pc}
   22092:	bf00      	nop
   22094:	10624dd3 	.word	0x10624dd3
   22098:	00034764 	.word	0x00034764

0002209c <ble_ll_whitelist_search>:
        }
        ++wl;
    }

    return 0;
}
   2209c:	2000      	movs	r0, #0
   2209e:	4770      	bx	lr

000220a0 <ble_ll_whitelist_chg_allowed>:
{
   220a0:	b508      	push	{r3, lr}
    if (ble_ll_adv_can_chg_whitelist()) {
   220a2:	f7fb fbf7 	bl	1d894 <ble_ll_adv_can_chg_whitelist>
   220a6:	b900      	cbnz	r0, 220aa <ble_ll_whitelist_chg_allowed+0xa>
}
   220a8:	bd08      	pop	{r3, pc}
        return 1;
   220aa:	2001      	movs	r0, #1
   220ac:	e7fc      	b.n	220a8 <ble_ll_whitelist_chg_allowed+0x8>

000220ae <ble_ll_whitelist_clear>:
{
   220ae:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   220b0:	f7ff fff6 	bl	220a0 <ble_ll_whitelist_chg_allowed>
   220b4:	b118      	cbz	r0, 220be <ble_ll_whitelist_clear+0x10>
    ble_hw_whitelist_clear();
   220b6:	f000 f84d 	bl	22154 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   220ba:	2000      	movs	r0, #0
}
   220bc:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   220be:	200c      	movs	r0, #12
   220c0:	e7fc      	b.n	220bc <ble_ll_whitelist_clear+0xe>

000220c2 <ble_ll_whitelist_read_size>:
{
   220c2:	4603      	mov	r3, r0
    rsp->size = BLE_LL_WHITELIST_SIZE;
   220c4:	2000      	movs	r0, #0
   220c6:	7018      	strb	r0, [r3, #0]
    *rsplen = sizeof(*rsp);
   220c8:	2301      	movs	r3, #1
   220ca:	700b      	strb	r3, [r1, #0]
}
   220cc:	4770      	bx	lr

000220ce <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   220ce:	2907      	cmp	r1, #7
   220d0:	d001      	beq.n	220d6 <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   220d2:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   220d4:	4770      	bx	lr
{
   220d6:	b510      	push	{r4, lr}
   220d8:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   220da:	f7ff ffe1 	bl	220a0 <ble_ll_whitelist_chg_allowed>
   220de:	b138      	cbz	r0, 220f0 <ble_ll_whitelist_add+0x22>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   220e0:	4620      	mov	r0, r4
   220e2:	f810 1b01 	ldrb.w	r1, [r0], #1
   220e6:	f7ff ffd9 	bl	2209c <ble_ll_whitelist_search>
   220ea:	b118      	cbz	r0, 220f4 <ble_ll_whitelist_add+0x26>
    rc = BLE_ERR_SUCCESS;
   220ec:	2000      	movs	r0, #0
}
   220ee:	bd10      	pop	{r4, pc}
        return BLE_ERR_CMD_DISALLOWED;
   220f0:	200c      	movs	r0, #12
   220f2:	e7fc      	b.n	220ee <ble_ll_whitelist_add+0x20>
            rc = BLE_ERR_MEM_CAPACITY;
   220f4:	2007      	movs	r0, #7
   220f6:	e7fa      	b.n	220ee <ble_ll_whitelist_add+0x20>

000220f8 <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   220f8:	2907      	cmp	r1, #7
   220fa:	d001      	beq.n	22100 <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   220fc:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   220fe:	4770      	bx	lr
{
   22100:	b538      	push	{r3, r4, r5, lr}
   22102:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   22104:	f7ff ffcc 	bl	220a0 <ble_ll_whitelist_chg_allowed>
   22108:	b188      	cbz	r0, 2212e <ble_ll_whitelist_rmv+0x36>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   2210a:	f814 5b01 	ldrb.w	r5, [r4], #1
   2210e:	4629      	mov	r1, r5
   22110:	4620      	mov	r0, r4
   22112:	f7ff ffc3 	bl	2209c <ble_ll_whitelist_search>
    if (position) {
   22116:	b120      	cbz	r0, 22122 <ble_ll_whitelist_rmv+0x2a>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   22118:	1e43      	subs	r3, r0, #1
   2211a:	4a06      	ldr	r2, [pc, #24]	; (22134 <ble_ll_whitelist_rmv+0x3c>)
   2211c:	2100      	movs	r1, #0
   2211e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   22122:	4629      	mov	r1, r5
   22124:	4620      	mov	r0, r4
   22126:	f000 f816 	bl	22156 <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   2212a:	2000      	movs	r0, #0
}
   2212c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   2212e:	200c      	movs	r0, #12
   22130:	e7fc      	b.n	2212c <ble_ll_whitelist_rmv+0x34>
   22132:	bf00      	nop
   22134:	1000268c 	.word	0x1000268c

00022138 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   22138:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   2213a:	f000 f80d 	bl	22158 <ble_hw_whitelist_enable>
#endif
}
   2213e:	bd08      	pop	{r3, pc}

00022140 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   22140:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   22142:	f000 f80a 	bl	2215a <ble_hw_whitelist_disable>
#endif
}
   22146:	bd08      	pop	{r3, pc}

00022148 <ble_hw_get_public_addr>:
/* Returns public device address or -1 if not present */
int
ble_hw_get_public_addr(ble_addr_t *addr)
{
    return -1;
}
   22148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2214c:	4770      	bx	lr

0002214e <ble_hw_get_static_addr>:
/* Returns random static address or -1 if not present */
int
ble_hw_get_static_addr(ble_addr_t *addr)
{
    return -1;
}
   2214e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22152:	4770      	bx	lr

00022154 <ble_hw_whitelist_clear>:
 */
void
ble_hw_whitelist_clear(void)
{
    g_ble_hw_whitelist_mask = 0;
}
   22154:	4770      	bx	lr

00022156 <ble_hw_whitelist_rmv>:
 */
void
ble_hw_whitelist_rmv(const uint8_t *addr, uint8_t addr_type)
{
    return;
}
   22156:	4770      	bx	lr

00022158 <ble_hw_whitelist_enable>:
 */
void
ble_hw_whitelist_enable(void)
{
    return;
}
   22158:	4770      	bx	lr

0002215a <ble_hw_whitelist_disable>:
 */
void
ble_hw_whitelist_disable(void)
{
    return;
}
   2215a:	4770      	bx	lr

0002215c <ble_hw_encrypt_block>:
/* Encrypt data */
int
ble_hw_encrypt_block(struct ble_encryption_block *ecb)
{
    return -1;
}
   2215c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22160:	4770      	bx	lr
	...

00022164 <ble_hw_rng_init>:
 * @return int
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    rng_cb = cb;
   22164:	4b01      	ldr	r3, [pc, #4]	; (2216c <ble_hw_rng_init+0x8>)
   22166:	6018      	str	r0, [r3, #0]
    return 0;
}
   22168:	2000      	movs	r0, #0
   2216a:	4770      	bx	lr
   2216c:	1000268c 	.word	0x1000268c

00022170 <ble_hw_rng_start>:
 * @return int
 */
int
ble_hw_rng_start(void)
{
    rng_started = true;
   22170:	4b0b      	ldr	r3, [pc, #44]	; (221a0 <ble_hw_rng_start+0x30>)
   22172:	2201      	movs	r2, #1
   22174:	701a      	strb	r2, [r3, #0]

    if (rng_cb) {
   22176:	4b0b      	ldr	r3, [pc, #44]	; (221a4 <ble_hw_rng_start+0x34>)
   22178:	681b      	ldr	r3, [r3, #0]
   2217a:	b17b      	cbz	r3, 2219c <ble_hw_rng_start+0x2c>
        while (rng_started) {
   2217c:	4b08      	ldr	r3, [pc, #32]	; (221a0 <ble_hw_rng_start+0x30>)
   2217e:	781b      	ldrb	r3, [r3, #0]
   22180:	b163      	cbz	r3, 2219c <ble_hw_rng_start+0x2c>
{
   22182:	b510      	push	{r4, lr}
            rng_cb(rand());
   22184:	4b07      	ldr	r3, [pc, #28]	; (221a4 <ble_hw_rng_start+0x34>)
   22186:	681c      	ldr	r4, [r3, #0]
   22188:	f7f4 fc64 	bl	16a54 <lrand48>
   2218c:	b2c0      	uxtb	r0, r0
   2218e:	47a0      	blx	r4
        while (rng_started) {
   22190:	4b03      	ldr	r3, [pc, #12]	; (221a0 <ble_hw_rng_start+0x30>)
   22192:	781b      	ldrb	r3, [r3, #0]
   22194:	2b00      	cmp	r3, #0
   22196:	d1f5      	bne.n	22184 <ble_hw_rng_start+0x14>
        }
    }

    return 0;
}
   22198:	2000      	movs	r0, #0
   2219a:	bd10      	pop	{r4, pc}
   2219c:	2000      	movs	r0, #0
   2219e:	4770      	bx	lr
   221a0:	10002690 	.word	0x10002690
   221a4:	1000268c 	.word	0x1000268c

000221a8 <ble_hw_rng_stop>:
 * @return int
 */
int
ble_hw_rng_stop(void)
{
    rng_started = false;
   221a8:	2000      	movs	r0, #0
   221aa:	4b01      	ldr	r3, [pc, #4]	; (221b0 <ble_hw_rng_stop+0x8>)
   221ac:	7018      	strb	r0, [r3, #0]
    return 0;
}
   221ae:	4770      	bx	lr
   221b0:	10002690 	.word	0x10002690

000221b4 <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
}
   221b4:	4770      	bx	lr

000221b6 <ble_hw_resolv_list_add>:
 */
int
ble_hw_resolv_list_add(uint8_t *irk)
{
    return BLE_ERR_MEM_CAPACITY;
}
   221b6:	2007      	movs	r0, #7
   221b8:	4770      	bx	lr

000221ba <ble_hw_resolv_list_rmv>:
 * @param index Index of IRK to remove
 */
void
ble_hw_resolv_list_rmv(int index)
{
}
   221ba:	4770      	bx	lr

000221bc <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return 0;
}
   221bc:	2000      	movs	r0, #0
   221be:	4770      	bx	lr

000221c0 <ble_phy_init>:
 */
int
ble_phy_init(void)
{
    /* Set phy channel to an invalid channel so first set channel works */
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   221c0:	4b03      	ldr	r3, [pc, #12]	; (221d0 <ble_phy_init+0x10>)
   221c2:	2000      	movs	r0, #0
   221c4:	7158      	strb	r0, [r3, #5]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   221c6:	2228      	movs	r2, #40	; 0x28
   221c8:	711a      	strb	r2, [r3, #4]

    g_ble_phy_data.rx_pwr_compensation = 0;
   221ca:	8058      	strh	r0, [r3, #2]

    /* XXX: emulate ISR? */

    return 0;
}
   221cc:	4770      	bx	lr
   221ce:	bf00      	nop
   221d0:	10002694 	.word	0x10002694

000221d4 <ble_phy_encrypt_enable>:
 */
void
ble_phy_encrypt_enable(uint64_t pkt_counter, uint8_t *iv, uint8_t *key,
                       uint8_t is_master)
{
}
   221d4:	4770      	bx	lr

000221d6 <ble_phy_encrypt_disable>:
}

void
ble_phy_encrypt_disable(void)
{
}
   221d6:	4770      	bx	lr

000221d8 <ble_phy_set_txend_cb>:

void
ble_phy_set_txend_cb(ble_phy_tx_end_func txend_cb, void *arg)
{
    /* Set transmit end callback and arg */
    g_ble_phy_data.txend_cb = txend_cb;
   221d8:	4b01      	ldr	r3, [pc, #4]	; (221e0 <ble_phy_set_txend_cb+0x8>)
   221da:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   221dc:	6259      	str	r1, [r3, #36]	; 0x24
}
   221de:	4770      	bx	lr
   221e0:	10002694 	.word	0x10002694

000221e4 <ble_phy_tx_set_start_time>:
 */
int
ble_phy_tx_set_start_time(uint32_t cputime, uint8_t rem_usecs)
{
    return 0;
}
   221e4:	2000      	movs	r0, #0
   221e6:	4770      	bx	lr

000221e8 <ble_phy_rx_set_start_time>:
 */
int
ble_phy_rx_set_start_time(uint32_t cputime, uint8_t rem_usecs)
{
    return 0;
}
   221e8:	2000      	movs	r0, #0
   221ea:	4770      	bx	lr

000221ec <ble_phy_txpwr_set>:
 *
 * @return int 0: success; anything else is an error
 */
int
ble_phy_txpwr_set(int dbm)
{
   221ec:	b508      	push	{r3, lr}
    /* Check valid range */
    assert(dbm <= BLE_PHY_MAX_PWR_DBM);
   221ee:	280a      	cmp	r0, #10
   221f0:	dc07      	bgt.n	22202 <ble_phy_txpwr_set+0x16>

    /* "Rail" power level if outside supported range */
    if (dbm > BLE_XCVR_TX_PWR_MAX_DBM) {
   221f2:	281e      	cmp	r0, #30
   221f4:	dc0f      	bgt.n	22216 <ble_phy_txpwr_set+0x2a>
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
    } else {
        if (dbm < BLE_XCVR_TX_PWR_MIN_DBM) {
   221f6:	f110 0f14 	cmn.w	r0, #20
   221fa:	da0d      	bge.n	22218 <ble_phy_txpwr_set+0x2c>
            dbm = BLE_XCVR_TX_PWR_MIN_DBM;
   221fc:	f06f 0013 	mvn.w	r0, #19
   22200:	e00a      	b.n	22218 <ble_phy_txpwr_set+0x2c>
    assert(dbm <= BLE_PHY_MAX_PWR_DBM);
   22202:	f7f2 fa27 	bl	14654 <hal_debugger_connected>
   22206:	b100      	cbz	r0, 2220a <ble_phy_txpwr_set+0x1e>
   22208:	be01      	bkpt	0x0001
   2220a:	2300      	movs	r3, #0
   2220c:	461a      	mov	r2, r3
   2220e:	4619      	mov	r1, r3
   22210:	4618      	mov	r0, r3
   22212:	f7f2 fdc1 	bl	14d98 <__assert_func>
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
   22216:	201e      	movs	r0, #30
        }
    }

    g_ble_phy_data.phy_txpwr_dbm = dbm;
   22218:	4b01      	ldr	r3, [pc, #4]	; (22220 <ble_phy_txpwr_set+0x34>)
   2221a:	7058      	strb	r0, [r3, #1]

    return 0;
}
   2221c:	2000      	movs	r0, #0
   2221e:	bd08      	pop	{r3, pc}
   22220:	10002694 	.word	0x10002694

00022224 <ble_phy_txpower_round>:
 * @return int Rounded power in dBm
 */
int ble_phy_txpower_round(int dbm)
{
    /* "Rail" power level if outside supported range */
    if (dbm > BLE_XCVR_TX_PWR_MAX_DBM) {
   22224:	281e      	cmp	r0, #30
   22226:	dc03      	bgt.n	22230 <ble_phy_txpower_round+0xc>
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
    } else {
        if (dbm < BLE_XCVR_TX_PWR_MIN_DBM) {
   22228:	f110 0f14 	cmn.w	r0, #20
   2222c:	db02      	blt.n	22234 <ble_phy_txpower_round+0x10>
   2222e:	4770      	bx	lr
        dbm = BLE_XCVR_TX_PWR_MAX_DBM;
   22230:	201e      	movs	r0, #30
   22232:	4770      	bx	lr
            dbm = BLE_XCVR_TX_PWR_MIN_DBM;
   22234:	f06f 0013 	mvn.w	r0, #19
        }
    }

    return dbm;
}
   22238:	4770      	bx	lr
	...

0002223c <ble_phy_set_rx_pwr_compensation>:
}

void
ble_phy_set_rx_pwr_compensation(int8_t compensation)
{
    g_ble_phy_data.rx_pwr_compensation = compensation;
   2223c:	4b01      	ldr	r3, [pc, #4]	; (22244 <ble_phy_set_rx_pwr_compensation+0x8>)
   2223e:	8058      	strh	r0, [r3, #2]
}
   22240:	4770      	bx	lr
   22242:	bf00      	nop
   22244:	10002694 	.word	0x10002694

00022248 <ble_phy_setchan>:
 *
 * @return int 0: success; PHY error code otherwise
 */
int
ble_phy_setchan(uint8_t chan, uint32_t access_addr, uint32_t crcinit)
{
   22248:	b508      	push	{r3, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   2224a:	2827      	cmp	r0, #39	; 0x27
   2224c:	d804      	bhi.n	22258 <ble_phy_setchan+0x10>
    /* Check for valid channel range */
    if (chan >= BLE_PHY_NUM_CHANS) {
        return BLE_PHY_ERR_INV_PARAM;
    }

    g_ble_phy_data.phy_access_address = access_addr;
   2224e:	4b07      	ldr	r3, [pc, #28]	; (2226c <ble_phy_setchan+0x24>)
   22250:	6119      	str	r1, [r3, #16]

    g_ble_phy_data.phy_chan = chan;
   22252:	7118      	strb	r0, [r3, #4]

    return 0;
}
   22254:	2000      	movs	r0, #0
   22256:	bd08      	pop	{r3, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   22258:	f7f2 f9fc 	bl	14654 <hal_debugger_connected>
   2225c:	b100      	cbz	r0, 22260 <ble_phy_setchan+0x18>
   2225e:	be01      	bkpt	0x0001
   22260:	2300      	movs	r3, #0
   22262:	461a      	mov	r2, r3
   22264:	4619      	mov	r1, r3
   22266:	4618      	mov	r0, r3
   22268:	f7f2 fd96 	bl	14d98 <__assert_func>
   2226c:	10002694 	.word	0x10002694

00022270 <ble_phy_disable>:
 *  -> Sets phy state to idle.
 */
void
ble_phy_disable(void)
{
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   22270:	4b01      	ldr	r3, [pc, #4]	; (22278 <ble_phy_disable+0x8>)
   22272:	2200      	movs	r2, #0
   22274:	715a      	strb	r2, [r3, #5]
}
   22276:	4770      	bx	lr
   22278:	10002694 	.word	0x10002694

0002227c <ble_phy_state_get>:
 */
int
ble_phy_state_get(void)
{
    return g_ble_phy_data.phy_state;
}
   2227c:	4b01      	ldr	r3, [pc, #4]	; (22284 <ble_phy_state_get+0x8>)
   2227e:	7958      	ldrb	r0, [r3, #5]
   22280:	4770      	bx	lr
   22282:	bf00      	nop
   22284:	10002694 	.word	0x10002694

00022288 <ble_phy_tx>:
{
   22288:	b5f0      	push	{r4, r5, r6, r7, lr}
   2228a:	b083      	sub	sp, #12
   2228c:	4605      	mov	r5, r0
   2228e:	460e      	mov	r6, r1
   22290:	4614      	mov	r4, r2
    if (ble_phy_state_get() != BLE_PHY_STATE_IDLE) {
   22292:	f7ff fff3 	bl	2227c <ble_phy_state_get>
   22296:	b9c0      	cbnz	r0, 222ca <ble_phy_tx+0x42>
   22298:	4607      	mov	r7, r0
    if (g_ble_phy_data.phy_chan < BLE_PHY_NUM_DATA_CHANS) {
   2229a:	4b15      	ldr	r3, [pc, #84]	; (222f0 <ble_phy_tx+0x68>)
   2229c:	791b      	ldrb	r3, [r3, #4]
   2229e:	2b24      	cmp	r3, #36	; 0x24
   222a0:	d91b      	bls.n	222da <ble_phy_tx+0x52>
    g_ble_phy_data.phy_transition = end_trans;
   222a2:	4b13      	ldr	r3, [pc, #76]	; (222f0 <ble_phy_tx+0x68>)
   222a4:	719c      	strb	r4, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   222a6:	2202      	movs	r2, #2
   222a8:	715a      	strb	r2, [r3, #5]
    ++g_ble_phy_stats.tx_good;
   222aa:	4c12      	ldr	r4, [pc, #72]	; (222f4 <ble_phy_tx+0x6c>)
   222ac:	6823      	ldr	r3, [r4, #0]
   222ae:	3301      	adds	r3, #1
   222b0:	6023      	str	r3, [r4, #0]
    g_ble_phy_stats.tx_bytes += pducb(g_ble_phy_tx_buf, pducb_arg, &hdr_byte) +
   222b2:	f10d 0207 	add.w	r2, sp, #7
   222b6:	4631      	mov	r1, r6
   222b8:	480f      	ldr	r0, [pc, #60]	; (222f8 <ble_phy_tx+0x70>)
   222ba:	47a8      	blx	r5
   222bc:	3002      	adds	r0, #2
   222be:	68e3      	ldr	r3, [r4, #12]
   222c0:	4403      	add	r3, r0
   222c2:	60e3      	str	r3, [r4, #12]
}
   222c4:	4638      	mov	r0, r7
   222c6:	b003      	add	sp, #12
   222c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_phy_disable();
   222ca:	f7ff ffd1 	bl	22270 <ble_phy_disable>
        ++g_ble_phy_stats.radio_state_errs;
   222ce:	4a09      	ldr	r2, [pc, #36]	; (222f4 <ble_phy_tx+0x6c>)
   222d0:	6a53      	ldr	r3, [r2, #36]	; 0x24
   222d2:	3301      	adds	r3, #1
   222d4:	6253      	str	r3, [r2, #36]	; 0x24
        return BLE_PHY_ERR_RADIO_STATE;
   222d6:	2701      	movs	r7, #1
   222d8:	e7f4      	b.n	222c4 <ble_phy_tx+0x3c>
        assert(0);
   222da:	f7f2 f9bb 	bl	14654 <hal_debugger_connected>
   222de:	b100      	cbz	r0, 222e2 <ble_phy_tx+0x5a>
   222e0:	be01      	bkpt	0x0001
   222e2:	2300      	movs	r3, #0
   222e4:	461a      	mov	r2, r3
   222e6:	4619      	mov	r1, r3
   222e8:	4618      	mov	r0, r3
   222ea:	f7f2 fd55 	bl	14d98 <__assert_func>
   222ee:	bf00      	nop
   222f0:	10002694 	.word	0x10002694
   222f4:	100026c4 	.word	0x100026c4
   222f8:	100026f0 	.word	0x100026f0

000222fc <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   222fc:	20fb      	movs	r0, #251	; 0xfb
   222fe:	4770      	bx	lr

00022300 <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    g_ble_phy_data.phy_privacy = 1;
   22300:	4b01      	ldr	r3, [pc, #4]	; (22308 <ble_phy_resolv_list_enable+0x8>)
   22302:	2201      	movs	r2, #1
   22304:	725a      	strb	r2, [r3, #9]
}
   22306:	4770      	bx	lr
   22308:	10002694 	.word	0x10002694

0002230c <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   2230c:	4b01      	ldr	r3, [pc, #4]	; (22314 <ble_phy_resolv_list_disable+0x8>)
   2230e:	2200      	movs	r2, #0
   22310:	725a      	strb	r2, [r3, #9]
}
   22312:	4770      	bx	lr
   22314:	10002694 	.word	0x10002694

00022318 <ble_phy_wfr_enable>:
#endif

void
ble_phy_wfr_enable(int txrx, uint8_t tx_phy_mode, uint32_t wfr_usecs)
{
}
   22318:	4770      	bx	lr

0002231a <ble_phy_rfclk_enable>:

void
ble_phy_rfclk_enable(void)
{
}
   2231a:	4770      	bx	lr

0002231c <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   2231c:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   2231e:	2300      	movs	r3, #0
   22320:	2b1a      	cmp	r3, #26
   22322:	d809      	bhi.n	22338 <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   22324:	4a06      	ldr	r2, [pc, #24]	; (22340 <ble_att_rx_dispatch_entry_find+0x24>)
   22326:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   2232a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   2232e:	428a      	cmp	r2, r1
   22330:	d005      	beq.n	2233e <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   22332:	d803      	bhi.n	2233c <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   22334:	3301      	adds	r3, #1
   22336:	e7f3      	b.n	22320 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   22338:	2000      	movs	r0, #0
   2233a:	4770      	bx	lr
   2233c:	2000      	movs	r0, #0
}
   2233e:	4770      	bx	lr
   22340:	0003477c 	.word	0x0003477c

00022344 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   22344:	3801      	subs	r0, #1
   22346:	2851      	cmp	r0, #81	; 0x51
   22348:	f200 80f2 	bhi.w	22530 <ble_att_inc_rx_stat+0x1ec>
   2234c:	e8df f010 	tbh	[pc, r0, lsl #1]
   22350:	00570052 	.word	0x00570052
   22354:	0061005c 	.word	0x0061005c
   22358:	006b0066 	.word	0x006b0066
   2235c:	00750070 	.word	0x00750070
   22360:	007f007a 	.word	0x007f007a
   22364:	00890084 	.word	0x00890084
   22368:	0093008e 	.word	0x0093008e
   2236c:	009d0098 	.word	0x009d0098
   22370:	00ab00a4 	.word	0x00ab00a4
   22374:	00f000b2 	.word	0x00f000b2
   22378:	00b900f0 	.word	0x00b900f0
   2237c:	00c700c0 	.word	0x00c700c0
   22380:	00f000ce 	.word	0x00f000ce
   22384:	00f000d5 	.word	0x00f000d5
   22388:	00e300dc 	.word	0x00e300dc
   2238c:	00f000f0 	.word	0x00f000f0
   22390:	00f000f0 	.word	0x00f000f0
   22394:	00f000f0 	.word	0x00f000f0
   22398:	00f000f0 	.word	0x00f000f0
   2239c:	00f000f0 	.word	0x00f000f0
   223a0:	00f000f0 	.word	0x00f000f0
   223a4:	00f000f0 	.word	0x00f000f0
   223a8:	00f000f0 	.word	0x00f000f0
   223ac:	00f000f0 	.word	0x00f000f0
   223b0:	00f000f0 	.word	0x00f000f0
   223b4:	00f000f0 	.word	0x00f000f0
   223b8:	00f000f0 	.word	0x00f000f0
   223bc:	00f000f0 	.word	0x00f000f0
   223c0:	00f000f0 	.word	0x00f000f0
   223c4:	00f000f0 	.word	0x00f000f0
   223c8:	00f000f0 	.word	0x00f000f0
   223cc:	00f000f0 	.word	0x00f000f0
   223d0:	00f000f0 	.word	0x00f000f0
   223d4:	00f000f0 	.word	0x00f000f0
   223d8:	00f000f0 	.word	0x00f000f0
   223dc:	00f000f0 	.word	0x00f000f0
   223e0:	00f000f0 	.word	0x00f000f0
   223e4:	00f000f0 	.word	0x00f000f0
   223e8:	00f000f0 	.word	0x00f000f0
   223ec:	00f000f0 	.word	0x00f000f0
   223f0:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   223f4:	4a4f      	ldr	r2, [pc, #316]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   223f6:	68d3      	ldr	r3, [r2, #12]
   223f8:	3301      	adds	r3, #1
   223fa:	60d3      	str	r3, [r2, #12]
        break;
   223fc:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   223fe:	4a4d      	ldr	r2, [pc, #308]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22400:	6953      	ldr	r3, [r2, #20]
   22402:	3301      	adds	r3, #1
   22404:	6153      	str	r3, [r2, #20]
        break;
   22406:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   22408:	4a4a      	ldr	r2, [pc, #296]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2240a:	69d3      	ldr	r3, [r2, #28]
   2240c:	3301      	adds	r3, #1
   2240e:	61d3      	str	r3, [r2, #28]
        break;
   22410:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   22412:	4a48      	ldr	r2, [pc, #288]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22414:	6a53      	ldr	r3, [r2, #36]	; 0x24
   22416:	3301      	adds	r3, #1
   22418:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   2241a:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   2241c:	4a45      	ldr	r2, [pc, #276]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2241e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22420:	3301      	adds	r3, #1
   22422:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   22424:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   22426:	4a43      	ldr	r2, [pc, #268]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22428:	6b53      	ldr	r3, [r2, #52]	; 0x34
   2242a:	3301      	adds	r3, #1
   2242c:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   2242e:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   22430:	4a40      	ldr	r2, [pc, #256]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22432:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   22434:	3301      	adds	r3, #1
   22436:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   22438:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   2243a:	4a3e      	ldr	r2, [pc, #248]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2243c:	6c53      	ldr	r3, [r2, #68]	; 0x44
   2243e:	3301      	adds	r3, #1
   22440:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   22442:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   22444:	4a3b      	ldr	r2, [pc, #236]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22446:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   22448:	3301      	adds	r3, #1
   2244a:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   2244c:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   2244e:	4a39      	ldr	r2, [pc, #228]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22450:	6d53      	ldr	r3, [r2, #84]	; 0x54
   22452:	3301      	adds	r3, #1
   22454:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   22456:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   22458:	4a36      	ldr	r2, [pc, #216]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2245a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   2245c:	3301      	adds	r3, #1
   2245e:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   22460:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   22462:	4a34      	ldr	r2, [pc, #208]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22464:	6e53      	ldr	r3, [r2, #100]	; 0x64
   22466:	3301      	adds	r3, #1
   22468:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   2246a:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   2246c:	4a31      	ldr	r2, [pc, #196]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2246e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   22470:	3301      	adds	r3, #1
   22472:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   22474:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   22476:	4a2f      	ldr	r2, [pc, #188]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22478:	6f53      	ldr	r3, [r2, #116]	; 0x74
   2247a:	3301      	adds	r3, #1
   2247c:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   2247e:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   22480:	4a2c      	ldr	r2, [pc, #176]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22482:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   22484:	3301      	adds	r3, #1
   22486:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   22488:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   2248a:	4a2a      	ldr	r2, [pc, #168]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2248c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   22490:	3301      	adds	r3, #1
   22492:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   22496:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   22498:	4a26      	ldr	r2, [pc, #152]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2249a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2249e:	3301      	adds	r3, #1
   224a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   224a4:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   224a6:	4a23      	ldr	r2, [pc, #140]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224a8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   224ac:	3301      	adds	r3, #1
   224ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   224b2:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   224b4:	4a1f      	ldr	r2, [pc, #124]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224b6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   224ba:	3301      	adds	r3, #1
   224bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   224c0:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   224c2:	4a1c      	ldr	r2, [pc, #112]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224c4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   224c8:	3301      	adds	r3, #1
   224ca:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   224ce:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   224d0:	4a18      	ldr	r2, [pc, #96]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224d2:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   224d6:	3301      	adds	r3, #1
   224d8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   224dc:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   224de:	4a15      	ldr	r2, [pc, #84]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224e0:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   224e4:	3301      	adds	r3, #1
   224e6:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   224ea:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   224ec:	4a11      	ldr	r2, [pc, #68]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224ee:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   224f2:	3301      	adds	r3, #1
   224f4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   224f8:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   224fa:	4a0e      	ldr	r2, [pc, #56]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   224fc:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   22500:	3301      	adds	r3, #1
   22502:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   22506:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   22508:	4a0a      	ldr	r2, [pc, #40]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   2250a:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   2250e:	3301      	adds	r3, #1
   22510:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   22514:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   22516:	4a07      	ldr	r2, [pc, #28]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22518:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   2251c:	3301      	adds	r3, #1
   2251e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   22522:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   22524:	4a03      	ldr	r2, [pc, #12]	; (22534 <ble_att_inc_rx_stat+0x1f0>)
   22526:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   2252a:	3301      	adds	r3, #1
   2252c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   22530:	4770      	bx	lr
   22532:	bf00      	nop
   22534:	100027f4 	.word	0x100027f4

00022538 <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   22538:	f010 0f40 	tst.w	r0, #64	; 0x40
   2253c:	d000      	beq.n	22540 <ble_att_rx_handle_unknown_request+0x8>
   2253e:	4770      	bx	lr
{
   22540:	b570      	push	{r4, r5, r6, lr}
   22542:	b082      	sub	sp, #8
   22544:	4604      	mov	r4, r0
   22546:	460e      	mov	r6, r1
   22548:	4615      	mov	r5, r2
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   2254a:	6810      	ldr	r0, [r2, #0]
   2254c:	8a01      	ldrh	r1, [r0, #16]
   2254e:	f7f3 f962 	bl	15816 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   22552:	2306      	movs	r3, #6
   22554:	9300      	str	r3, [sp, #0]
   22556:	2300      	movs	r3, #0
   22558:	4622      	mov	r2, r4
   2255a:	6829      	ldr	r1, [r5, #0]
   2255c:	4630      	mov	r0, r6
   2255e:	f001 f98f 	bl	23880 <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   22562:	2300      	movs	r3, #0
   22564:	602b      	str	r3, [r5, #0]
}
   22566:	b002      	add	sp, #8
   22568:	bd70      	pop	{r4, r5, r6, pc}

0002256a <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   2256a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2256e:	b082      	sub	sp, #8
   22570:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   22572:	f007 fc70 	bl	29e56 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   22576:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2257a:	4298      	cmp	r0, r3
   2257c:	d033      	beq.n	225e6 <ble_att_rx+0x7c>
   2257e:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   22580:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   22584:	f10d 0307 	add.w	r3, sp, #7
   22588:	2201      	movs	r2, #1
   2258a:	2100      	movs	r1, #0
   2258c:	6920      	ldr	r0, [r4, #16]
   2258e:	f7f3 f915 	bl	157bc <os_mbuf_copydata>
    if (rc != 0) {
   22592:	bb50      	cbnz	r0, 225ea <ble_att_rx+0x80>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   22594:	f89d 6007 	ldrb.w	r6, [sp, #7]
   22598:	4630      	mov	r0, r6
   2259a:	f7ff febf 	bl	2231c <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   2259e:	4680      	mov	r8, r0
   225a0:	b188      	cbz	r0, 225c6 <ble_att_rx+0x5c>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   225a2:	4630      	mov	r0, r6
   225a4:	f7ff fece 	bl	22344 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   225a8:	2101      	movs	r1, #1
   225aa:	6920      	ldr	r0, [r4, #16]
   225ac:	f7f3 f933 	bl	15816 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   225b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   225b4:	4639      	mov	r1, r7
   225b6:	4628      	mov	r0, r5
   225b8:	4798      	blx	r3
    if (rc != 0) {
   225ba:	4604      	mov	r4, r0
   225bc:	b950      	cbnz	r0, 225d4 <ble_att_rx+0x6a>
        }
        return rc;
    }

    return 0;
}
   225be:	4620      	mov	r0, r4
   225c0:	b002      	add	sp, #8
   225c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   225c6:	463a      	mov	r2, r7
   225c8:	4629      	mov	r1, r5
   225ca:	4630      	mov	r0, r6
   225cc:	f7ff ffb4 	bl	22538 <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   225d0:	2408      	movs	r4, #8
   225d2:	e7f4      	b.n	225be <ble_att_rx+0x54>
        if (rc == BLE_HS_ENOTSUP) {
   225d4:	2808      	cmp	r0, #8
   225d6:	d1f2      	bne.n	225be <ble_att_rx+0x54>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   225d8:	463a      	mov	r2, r7
   225da:	4629      	mov	r1, r5
   225dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   225e0:	f7ff ffaa 	bl	22538 <ble_att_rx_handle_unknown_request>
        return rc;
   225e4:	e7eb      	b.n	225be <ble_att_rx+0x54>
        return BLE_HS_ENOTCONN;
   225e6:	2407      	movs	r4, #7
   225e8:	e7e9      	b.n	225be <ble_att_rx+0x54>
        return BLE_HS_EMSGSIZE;
   225ea:	2404      	movs	r4, #4
   225ec:	e7e7      	b.n	225be <ble_att_rx+0x54>

000225ee <ble_att_conn_chan_find>:
{
   225ee:	b508      	push	{r3, lr}
   225f0:	4613      	mov	r3, r2
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   225f2:	460a      	mov	r2, r1
   225f4:	2104      	movs	r1, #4
   225f6:	f007 f8b9 	bl	2976c <ble_hs_misc_conn_chan_find>
}
   225fa:	bd08      	pop	{r3, pc}

000225fc <ble_att_inc_tx_stat>:
    switch (att_op) {
   225fc:	3801      	subs	r0, #1
   225fe:	2851      	cmp	r0, #81	; 0x51
   22600:	f200 80f4 	bhi.w	227ec <ble_att_inc_tx_stat+0x1f0>
   22604:	e8df f010 	tbh	[pc, r0, lsl #1]
   22608:	00570052 	.word	0x00570052
   2260c:	0061005c 	.word	0x0061005c
   22610:	006b0066 	.word	0x006b0066
   22614:	00750070 	.word	0x00750070
   22618:	007f007a 	.word	0x007f007a
   2261c:	00890084 	.word	0x00890084
   22620:	0093008e 	.word	0x0093008e
   22624:	009f0098 	.word	0x009f0098
   22628:	00ad00a6 	.word	0x00ad00a6
   2262c:	00f200b4 	.word	0x00f200b4
   22630:	00bb00f2 	.word	0x00bb00f2
   22634:	00c900c2 	.word	0x00c900c2
   22638:	00f200d0 	.word	0x00f200d0
   2263c:	00f200d7 	.word	0x00f200d7
   22640:	00e500de 	.word	0x00e500de
   22644:	00f200f2 	.word	0x00f200f2
   22648:	00f200f2 	.word	0x00f200f2
   2264c:	00f200f2 	.word	0x00f200f2
   22650:	00f200f2 	.word	0x00f200f2
   22654:	00f200f2 	.word	0x00f200f2
   22658:	00f200f2 	.word	0x00f200f2
   2265c:	00f200f2 	.word	0x00f200f2
   22660:	00f200f2 	.word	0x00f200f2
   22664:	00f200f2 	.word	0x00f200f2
   22668:	00f200f2 	.word	0x00f200f2
   2266c:	00f200f2 	.word	0x00f200f2
   22670:	00f200f2 	.word	0x00f200f2
   22674:	00f200f2 	.word	0x00f200f2
   22678:	00f200f2 	.word	0x00f200f2
   2267c:	00f200f2 	.word	0x00f200f2
   22680:	00f200f2 	.word	0x00f200f2
   22684:	00f200f2 	.word	0x00f200f2
   22688:	00f200f2 	.word	0x00f200f2
   2268c:	00f200f2 	.word	0x00f200f2
   22690:	00f200f2 	.word	0x00f200f2
   22694:	00f200f2 	.word	0x00f200f2
   22698:	00f200f2 	.word	0x00f200f2
   2269c:	00f200f2 	.word	0x00f200f2
   226a0:	00f200f2 	.word	0x00f200f2
   226a4:	00f200f2 	.word	0x00f200f2
   226a8:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   226ac:	4a50      	ldr	r2, [pc, #320]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226ae:	6913      	ldr	r3, [r2, #16]
   226b0:	3301      	adds	r3, #1
   226b2:	6113      	str	r3, [r2, #16]
        break;
   226b4:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   226b6:	4a4e      	ldr	r2, [pc, #312]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226b8:	6993      	ldr	r3, [r2, #24]
   226ba:	3301      	adds	r3, #1
   226bc:	6193      	str	r3, [r2, #24]
        break;
   226be:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   226c0:	4a4b      	ldr	r2, [pc, #300]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226c2:	6a13      	ldr	r3, [r2, #32]
   226c4:	3301      	adds	r3, #1
   226c6:	6213      	str	r3, [r2, #32]
        break;
   226c8:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   226ca:	4a49      	ldr	r2, [pc, #292]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   226ce:	3301      	adds	r3, #1
   226d0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   226d2:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   226d4:	4a46      	ldr	r2, [pc, #280]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   226d8:	3301      	adds	r3, #1
   226da:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   226dc:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   226de:	4a44      	ldr	r2, [pc, #272]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226e0:	6b93      	ldr	r3, [r2, #56]	; 0x38
   226e2:	3301      	adds	r3, #1
   226e4:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   226e6:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   226e8:	4a41      	ldr	r2, [pc, #260]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
   226ec:	3301      	adds	r3, #1
   226ee:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   226f0:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   226f2:	4a3f      	ldr	r2, [pc, #252]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226f4:	6c93      	ldr	r3, [r2, #72]	; 0x48
   226f6:	3301      	adds	r3, #1
   226f8:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   226fa:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   226fc:	4a3c      	ldr	r2, [pc, #240]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   226fe:	6d13      	ldr	r3, [r2, #80]	; 0x50
   22700:	3301      	adds	r3, #1
   22702:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   22704:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   22706:	4a3a      	ldr	r2, [pc, #232]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22708:	6d93      	ldr	r3, [r2, #88]	; 0x58
   2270a:	3301      	adds	r3, #1
   2270c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   2270e:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   22710:	4a37      	ldr	r2, [pc, #220]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22712:	6e13      	ldr	r3, [r2, #96]	; 0x60
   22714:	3301      	adds	r3, #1
   22716:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   22718:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   2271a:	4a35      	ldr	r2, [pc, #212]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   2271c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2271e:	3301      	adds	r3, #1
   22720:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   22722:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   22724:	4a32      	ldr	r2, [pc, #200]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22726:	6f13      	ldr	r3, [r2, #112]	; 0x70
   22728:	3301      	adds	r3, #1
   2272a:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   2272c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   2272e:	4a30      	ldr	r2, [pc, #192]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22730:	6f93      	ldr	r3, [r2, #120]	; 0x78
   22732:	3301      	adds	r3, #1
   22734:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   22736:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   22738:	4a2d      	ldr	r2, [pc, #180]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   2273a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   2273e:	3301      	adds	r3, #1
   22740:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   22744:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   22746:	4a2a      	ldr	r2, [pc, #168]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22748:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2274c:	3301      	adds	r3, #1
   2274e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   22752:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   22754:	4a26      	ldr	r2, [pc, #152]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22756:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2275a:	3301      	adds	r3, #1
   2275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   22760:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   22762:	4a23      	ldr	r2, [pc, #140]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22764:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   22768:	3301      	adds	r3, #1
   2276a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   2276e:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   22770:	4a1f      	ldr	r2, [pc, #124]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22772:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   22776:	3301      	adds	r3, #1
   22778:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   2277c:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   2277e:	4a1c      	ldr	r2, [pc, #112]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   22780:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   22784:	3301      	adds	r3, #1
   22786:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   2278a:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   2278c:	4a18      	ldr	r2, [pc, #96]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   2278e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   22792:	3301      	adds	r3, #1
   22794:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   22798:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   2279a:	4a15      	ldr	r2, [pc, #84]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   2279c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   227a0:	3301      	adds	r3, #1
   227a2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   227a6:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   227a8:	4a11      	ldr	r2, [pc, #68]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   227aa:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   227ae:	3301      	adds	r3, #1
   227b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   227b4:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   227b6:	4a0e      	ldr	r2, [pc, #56]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   227b8:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   227bc:	3301      	adds	r3, #1
   227be:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   227c2:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   227c4:	4a0a      	ldr	r2, [pc, #40]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   227c6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   227ca:	3301      	adds	r3, #1
   227cc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   227d0:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   227d2:	4a07      	ldr	r2, [pc, #28]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   227d4:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   227d8:	3301      	adds	r3, #1
   227da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   227de:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   227e0:	4a03      	ldr	r2, [pc, #12]	; (227f0 <ble_att_inc_tx_stat+0x1f4>)
   227e2:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   227e6:	3301      	adds	r3, #1
   227e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   227ec:	4770      	bx	lr
   227ee:	bf00      	nop
   227f0:	100027f4 	.word	0x100027f4

000227f4 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   227f4:	2916      	cmp	r1, #22
   227f6:	d800      	bhi.n	227fa <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   227f8:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   227fa:	8181      	strh	r1, [r0, #12]
}
   227fc:	4770      	bx	lr

000227fe <ble_att_chan_mtu>:
{
   227fe:	b510      	push	{r4, lr}
   22800:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   22802:	f007 faf7 	bl	29df4 <ble_l2cap_is_mtu_req_sent>
   22806:	b130      	cbz	r0, 22816 <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   22808:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   2280a:	b130      	cbz	r0, 2281a <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   2280c:	8963      	ldrh	r3, [r4, #10]
   2280e:	4298      	cmp	r0, r3
   22810:	bf28      	it	cs
   22812:	4618      	movcs	r0, r3
}
   22814:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   22816:	2017      	movs	r0, #23
   22818:	e7fc      	b.n	22814 <ble_att_chan_mtu+0x16>
   2281a:	2017      	movs	r0, #23
   2281c:	e7fa      	b.n	22814 <ble_att_chan_mtu+0x16>

0002281e <ble_att_truncate_to_mtu>:
{
   2281e:	b510      	push	{r4, lr}
   22820:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   22822:	f7ff ffec 	bl	227fe <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   22826:	8a21      	ldrh	r1, [r4, #16]
   22828:	1a0b      	subs	r3, r1, r0
    if (extra_len > 0) {
   2282a:	2b00      	cmp	r3, #0
   2282c:	dc00      	bgt.n	22830 <ble_att_truncate_to_mtu+0x12>
}
   2282e:	bd10      	pop	{r4, pc}
        os_mbuf_adj(txom, -extra_len);
   22830:	1a41      	subs	r1, r0, r1
   22832:	4620      	mov	r0, r4
   22834:	f7f2 ffef 	bl	15816 <os_mbuf_adj>
}
   22838:	e7f9      	b.n	2282e <ble_att_truncate_to_mtu+0x10>

0002283a <ble_att_mtu>:
{
   2283a:	b510      	push	{r4, lr}
   2283c:	b082      	sub	sp, #8
   2283e:	4604      	mov	r4, r0
    ble_hs_lock();
   22840:	f005 f86e 	bl	27920 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   22844:	aa01      	add	r2, sp, #4
   22846:	4669      	mov	r1, sp
   22848:	4620      	mov	r0, r4
   2284a:	f7ff fed0 	bl	225ee <ble_att_conn_chan_find>
    if (rc == 0) {
   2284e:	b128      	cbz	r0, 2285c <ble_att_mtu+0x22>
        mtu = 0;
   22850:	2400      	movs	r4, #0
    ble_hs_unlock();
   22852:	f005 f869 	bl	27928 <ble_hs_unlock>
}
   22856:	4620      	mov	r0, r4
   22858:	b002      	add	sp, #8
   2285a:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   2285c:	9801      	ldr	r0, [sp, #4]
   2285e:	f7ff ffce 	bl	227fe <ble_att_chan_mtu>
   22862:	4604      	mov	r4, r0
   22864:	e7f5      	b.n	22852 <ble_att_mtu+0x18>
	...

00022868 <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   22868:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   2286a:	f007 fa95 	bl	29d98 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   2286e:	4603      	mov	r3, r0
   22870:	b138      	cbz	r0, 22882 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   22872:	2204      	movs	r2, #4
   22874:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   22876:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   22878:	4a03      	ldr	r2, [pc, #12]	; (22888 <ble_att_create_chan+0x20>)
   2287a:	8812      	ldrh	r2, [r2, #0]
   2287c:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   2287e:	4a03      	ldr	r2, [pc, #12]	; (2288c <ble_att_create_chan+0x24>)
   22880:	6182      	str	r2, [r0, #24]

    return chan;
}
   22882:	4618      	mov	r0, r3
   22884:	bd08      	pop	{r3, pc}
   22886:	bf00      	nop
   22888:	100027f2 	.word	0x100027f2
   2288c:	0002256b 	.word	0x0002256b

00022890 <ble_att_init>:

int
ble_att_init(void)
{
   22890:	b500      	push	{lr}
   22892:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   22894:	4b09      	ldr	r3, [pc, #36]	; (228bc <ble_att_init+0x2c>)
   22896:	f44f 7280 	mov.w	r2, #256	; 0x100
   2289a:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   2289c:	4b08      	ldr	r3, [pc, #32]	; (228c0 <ble_att_init+0x30>)
   2289e:	9301      	str	r3, [sp, #4]
   228a0:	2300      	movs	r3, #0
   228a2:	9300      	str	r3, [sp, #0]
   228a4:	2236      	movs	r2, #54	; 0x36
   228a6:	2104      	movs	r1, #4
   228a8:	4806      	ldr	r0, [pc, #24]	; (228c4 <ble_att_init+0x34>)
   228aa:	f7f7 fcbb 	bl	1a224 <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   228ae:	b910      	cbnz	r0, 228b6 <ble_att_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;
}
   228b0:	b003      	add	sp, #12
   228b2:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   228b6:	200b      	movs	r0, #11
   228b8:	e7fa      	b.n	228b0 <ble_att_init+0x20>
   228ba:	bf00      	nop
   228bc:	100027f2 	.word	0x100027f2
   228c0:	00034774 	.word	0x00034774
   228c4:	100027f4 	.word	0x100027f4

000228c8 <ble_att_clt_rx_error>:
 * $error response                                                           *
 *****************************************************************************/

int
ble_att_clt_rx_error(uint16_t conn_handle, struct os_mbuf **rxom)
{
   228c8:	b570      	push	{r4, r5, r6, lr}
   228ca:	4605      	mov	r5, r0
   228cc:	460c      	mov	r4, r1
    struct ble_att_error_rsp *rsp;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   228ce:	2104      	movs	r1, #4
   228d0:	4620      	mov	r0, r4
   228d2:	f006 ff20 	bl	29716 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   228d6:	4606      	mov	r6, r0
   228d8:	b108      	cbz	r0, 228de <ble_att_clt_rx_error+0x16>

    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
                     le16toh(rsp->baep_error_code));

    return 0;
}
   228da:	4630      	mov	r0, r6
   228dc:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   228de:	6823      	ldr	r3, [r4, #0]
   228e0:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   228e2:	78da      	ldrb	r2, [r3, #3]
   228e4:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   228e8:	4628      	mov	r0, r5
   228ea:	f003 fea4 	bl	26636 <ble_gattc_rx_err>
    return 0;
   228ee:	e7f4      	b.n	228da <ble_att_clt_rx_error+0x12>

000228f0 <ble_att_clt_rx_mtu>:
    return rc;
}

int
ble_att_clt_rx_mtu(uint16_t conn_handle, struct os_mbuf **rxom)
{
   228f0:	b570      	push	{r4, r5, r6, lr}
   228f2:	b082      	sub	sp, #8
   228f4:	4604      	mov	r4, r0
   228f6:	460d      	mov	r5, r1
    uint16_t mtu;
    int rc;

    mtu = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   228f8:	2102      	movs	r1, #2
   228fa:	4628      	mov	r0, r5
   228fc:	f006 ff0b 	bl	29716 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   22900:	b148      	cbz	r0, 22916 <ble_att_clt_rx_mtu+0x26>
   22902:	4606      	mov	r6, r0
    mtu = 0;
   22904:	2500      	movs	r5, #0
        if (rc == 0) {
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
        }
    }

    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   22906:	462a      	mov	r2, r5
   22908:	4631      	mov	r1, r6
   2290a:	4620      	mov	r0, r4
   2290c:	f003 fea9 	bl	26662 <ble_gattc_rx_mtu>
    return rc;
}
   22910:	4630      	mov	r0, r6
   22912:	b002      	add	sp, #8
   22914:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   22916:	682b      	ldr	r3, [r5, #0]
   22918:	681d      	ldr	r5, [r3, #0]
        ble_hs_lock();
   2291a:	f005 f801 	bl	27920 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   2291e:	aa01      	add	r2, sp, #4
   22920:	2100      	movs	r1, #0
   22922:	4620      	mov	r0, r4
   22924:	f7ff fe63 	bl	225ee <ble_att_conn_chan_find>
        if (rc == 0) {
   22928:	4606      	mov	r6, r0
   2292a:	b150      	cbz	r0, 22942 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   2292c:	2500      	movs	r5, #0
        ble_hs_unlock();
   2292e:	f004 fffb 	bl	27928 <ble_hs_unlock>
        if (rc == 0) {
   22932:	2e00      	cmp	r6, #0
   22934:	d1e7      	bne.n	22906 <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   22936:	462a      	mov	r2, r5
   22938:	2104      	movs	r1, #4
   2293a:	4620      	mov	r0, r4
   2293c:	f002 fe97 	bl	2566e <ble_gap_mtu_event>
   22940:	e7e1      	b.n	22906 <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   22942:	8829      	ldrh	r1, [r5, #0]
   22944:	9801      	ldr	r0, [sp, #4]
   22946:	f7ff ff55 	bl	227f4 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   2294a:	9801      	ldr	r0, [sp, #4]
   2294c:	f7ff ff57 	bl	227fe <ble_att_chan_mtu>
   22950:	4605      	mov	r5, r0
   22952:	e7ec      	b.n	2292e <ble_att_clt_rx_mtu+0x3e>

00022954 <ble_att_clt_tx_find_info>:

    req->bafq_start_handle = htole16(start_handle);
    req->bafq_end_handle = htole16(end_handle);

    return ble_att_tx(conn_handle, txom);
}
   22954:	2008      	movs	r0, #8
   22956:	4770      	bx	lr

00022958 <ble_att_clt_rx_find_info>:

done:
    /* Notify GATT that response processing is done. */
    ble_gattc_rx_find_info_complete(conn_handle, rc);
    return rc;
}
   22958:	2008      	movs	r0, #8
   2295a:	4770      	bx	lr

0002295c <ble_att_clt_tx_find_type_value>:
    req->bavq_end_handle = htole16(end_handle);
    req->bavq_attr_type = htole16(attribute_type);
    memcpy(req->bavq_value, attribute_value, value_len);

    return ble_att_tx(conn_handle, txom);
}
   2295c:	2008      	movs	r0, #8
   2295e:	4770      	bx	lr

00022960 <ble_att_clt_rx_find_type_value>:

    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);

    return 0;
}
   22960:	2008      	movs	r0, #8
   22962:	4770      	bx	lr

00022964 <ble_att_clt_tx_read_type>:
    req->batq_end_handle = htole16(end_handle);

    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   22964:	2008      	movs	r0, #8
   22966:	4770      	bx	lr

00022968 <ble_att_clt_rx_read_type>:
done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_type_complete(conn_handle, rc);
    return rc;

}
   22968:	2008      	movs	r0, #8
   2296a:	4770      	bx	lr

0002296c <ble_att_clt_tx_read>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2296c:	2008      	movs	r0, #8
   2296e:	4770      	bx	lr

00022970 <ble_att_clt_rx_read>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
    return 0;
}
   22970:	2008      	movs	r0, #8
   22972:	4770      	bx	lr

00022974 <ble_att_clt_tx_read_blob>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   22974:	2008      	movs	r0, #8
   22976:	4770      	bx	lr

00022978 <ble_att_clt_rx_read_blob>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
    return 0;
}
   22978:	2008      	movs	r0, #8
   2297a:	4770      	bx	lr

0002297c <ble_att_clt_rx_read_mult>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
    return 0;
}
   2297c:	2008      	movs	r0, #8
   2297e:	4770      	bx	lr

00022980 <ble_att_clt_tx_read_group_type>:
    req->bagq_start_handle = htole16(start_handle);
    req->bagq_end_handle = htole16(end_handle);
    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   22980:	2008      	movs	r0, #8
   22982:	4770      	bx	lr

00022984 <ble_att_clt_rx_read_group_type>:

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
    return rc;
}
   22984:	2008      	movs	r0, #8
   22986:	4770      	bx	lr

00022988 <ble_att_clt_rx_write>:
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
    return 0;
}
   22988:	2008      	movs	r0, #8
   2298a:	4770      	bx	lr

0002298c <ble_att_clt_tx_prep_write>:
    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
    return rc;
}
   2298c:	2008      	movs	r0, #8
   2298e:	4770      	bx	lr

00022990 <ble_att_clt_rx_prep_write>:

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
    return rc;
}
   22990:	2008      	movs	r0, #8
   22992:	4770      	bx	lr

00022994 <ble_att_clt_tx_exec_write>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   22994:	2008      	movs	r0, #8
   22996:	4770      	bx	lr

00022998 <ble_att_clt_rx_exec_write>:
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
    return 0;
}
   22998:	2008      	movs	r0, #8
   2299a:	4770      	bx	lr

0002299c <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   2299c:	b570      	push	{r4, r5, r6, lr}
   2299e:	b082      	sub	sp, #8
   229a0:	4614      	mov	r4, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   229a2:	b931      	cbnz	r1, 229b2 <ble_att_clt_tx_notify+0x16>
        rc = BLE_HS_EINVAL;
   229a4:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   229a6:	4620      	mov	r0, r4
   229a8:	f7f2 fe5e 	bl	15668 <os_mbuf_free_chain>
    return rc;
}
   229ac:	4628      	mov	r0, r5
   229ae:	b002      	add	sp, #8
   229b0:	bd70      	pop	{r4, r5, r6, pc}
   229b2:	4605      	mov	r5, r0
   229b4:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   229b6:	aa01      	add	r2, sp, #4
   229b8:	2102      	movs	r1, #2
   229ba:	201b      	movs	r0, #27
   229bc:	f000 f846 	bl	22a4c <ble_att_cmd_get>
    if (req == NULL) {
   229c0:	b150      	cbz	r0, 229d8 <ble_att_clt_tx_notify+0x3c>
    req->banq_handle = htole16(handle);
   229c2:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   229c4:	4621      	mov	r1, r4
   229c6:	9801      	ldr	r0, [sp, #4]
   229c8:	f7f3 f859 	bl	15a7e <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   229cc:	9901      	ldr	r1, [sp, #4]
   229ce:	4628      	mov	r0, r5
   229d0:	f000 f84a 	bl	22a68 <ble_att_tx>
   229d4:	4605      	mov	r5, r0
   229d6:	e7e9      	b.n	229ac <ble_att_clt_tx_notify+0x10>
        rc = BLE_HS_ENOMEM;
   229d8:	2506      	movs	r5, #6
   229da:	e7e4      	b.n	229a6 <ble_att_clt_tx_notify+0xa>

000229dc <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   229dc:	b570      	push	{r4, r5, r6, lr}
   229de:	b082      	sub	sp, #8
   229e0:	4614      	mov	r4, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   229e2:	b931      	cbnz	r1, 229f2 <ble_att_clt_tx_indicate+0x16>
        rc = BLE_HS_EINVAL;
   229e4:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   229e6:	4620      	mov	r0, r4
   229e8:	f7f2 fe3e 	bl	15668 <os_mbuf_free_chain>
    return rc;
}
   229ec:	4628      	mov	r0, r5
   229ee:	b002      	add	sp, #8
   229f0:	bd70      	pop	{r4, r5, r6, pc}
   229f2:	4605      	mov	r5, r0
   229f4:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   229f6:	aa01      	add	r2, sp, #4
   229f8:	2102      	movs	r1, #2
   229fa:	201d      	movs	r0, #29
   229fc:	f000 f826 	bl	22a4c <ble_att_cmd_get>
    if (req == NULL) {
   22a00:	b150      	cbz	r0, 22a18 <ble_att_clt_tx_indicate+0x3c>
    req->baiq_handle = htole16(handle);
   22a02:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   22a04:	4621      	mov	r1, r4
   22a06:	9801      	ldr	r0, [sp, #4]
   22a08:	f7f3 f839 	bl	15a7e <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   22a0c:	9901      	ldr	r1, [sp, #4]
   22a0e:	4628      	mov	r0, r5
   22a10:	f000 f82a 	bl	22a68 <ble_att_tx>
   22a14:	4605      	mov	r5, r0
   22a16:	e7e9      	b.n	229ec <ble_att_clt_tx_indicate+0x10>
        rc = BLE_HS_ENOMEM;
   22a18:	2506      	movs	r5, #6
   22a1a:	e7e4      	b.n	229e6 <ble_att_clt_tx_indicate+0xa>

00022a1c <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   22a1c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   22a1e:	f003 fe32 	bl	26686 <ble_gattc_rx_indicate_rsp>
    return 0;
}
   22a22:	2000      	movs	r0, #0
   22a24:	bd08      	pop	{r3, pc}

00022a26 <ble_att_cmd_prepare>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   22a26:	b570      	push	{r4, r5, r6, lr}
   22a28:	4606      	mov	r6, r0
   22a2a:	4614      	mov	r4, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   22a2c:	3101      	adds	r1, #1
   22a2e:	b289      	uxth	r1, r1
   22a30:	4610      	mov	r0, r2
   22a32:	f7f3 f846 	bl	15ac2 <os_mbuf_extend>
   22a36:	b120      	cbz	r0, 22a42 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   22a38:	6825      	ldr	r5, [r4, #0]
   22a3a:	f805 6b01 	strb.w	r6, [r5], #1

    return hdr->data;
}
   22a3e:	4628      	mov	r0, r5
   22a40:	bd70      	pop	{r4, r5, r6, pc}
   22a42:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   22a44:	4620      	mov	r0, r4
   22a46:	f7f2 fe0f 	bl	15668 <os_mbuf_free_chain>
        return NULL;
   22a4a:	e7f8      	b.n	22a3e <ble_att_cmd_prepare+0x18>

00022a4c <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   22a4c:	b570      	push	{r4, r5, r6, lr}
   22a4e:	4605      	mov	r5, r0
   22a50:	460e      	mov	r6, r1
   22a52:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   22a54:	f006 fe40 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
   22a58:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   22a5a:	b120      	cbz	r0, 22a66 <ble_att_cmd_get+0x1a>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   22a5c:	4602      	mov	r2, r0
   22a5e:	4631      	mov	r1, r6
   22a60:	4628      	mov	r0, r5
   22a62:	f7ff ffe0 	bl	22a26 <ble_att_cmd_prepare>
}
   22a66:	bd70      	pop	{r4, r5, r6, pc}

00022a68 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   22a68:	b530      	push	{r4, r5, lr}
   22a6a:	b083      	sub	sp, #12
   22a6c:	4605      	mov	r5, r0
   22a6e:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   22a70:	680b      	ldr	r3, [r1, #0]
   22a72:	7818      	ldrb	r0, [r3, #0]
   22a74:	f7ff fdc2 	bl	225fc <ble_att_inc_tx_stat>

    ble_hs_lock();
   22a78:	f004 ff52 	bl	27920 <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   22a7c:	ab01      	add	r3, sp, #4
   22a7e:	466a      	mov	r2, sp
   22a80:	2104      	movs	r1, #4
   22a82:	4628      	mov	r0, r5
   22a84:	f006 fe8a 	bl	2979c <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   22a88:	b140      	cbz	r0, 22a9c <ble_att_tx+0x34>
   22a8a:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   22a8c:	4620      	mov	r0, r4
   22a8e:	f7f2 fdeb 	bl	15668 <os_mbuf_free_chain>
    } else {
        ble_att_truncate_to_mtu(chan, txom);
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    ble_hs_unlock();
   22a92:	f004 ff49 	bl	27928 <ble_hs_unlock>

    return rc;
}
   22a96:	4628      	mov	r0, r5
   22a98:	b003      	add	sp, #12
   22a9a:	bd30      	pop	{r4, r5, pc}
        ble_att_truncate_to_mtu(chan, txom);
   22a9c:	4621      	mov	r1, r4
   22a9e:	9801      	ldr	r0, [sp, #4]
   22aa0:	f7ff febd 	bl	2281e <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   22aa4:	4622      	mov	r2, r4
   22aa6:	9901      	ldr	r1, [sp, #4]
   22aa8:	9800      	ldr	r0, [sp, #0]
   22aaa:	f007 fa6f 	bl	29f8c <ble_l2cap_tx>
   22aae:	4605      	mov	r5, r0
   22ab0:	e7ef      	b.n	22a92 <ble_att_tx+0x2a>
	...

00022ab4 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   22ab4:	4b02      	ldr	r3, [pc, #8]	; (22ac0 <ble_att_svr_next_id+0xc>)
   22ab6:	8818      	ldrh	r0, [r3, #0]
   22ab8:	3001      	adds	r0, #1
   22aba:	b280      	uxth	r0, r0
   22abc:	8018      	strh	r0, [r3, #0]
}
   22abe:	4770      	bx	lr
   22ac0:	10002900 	.word	0x10002900

00022ac4 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   22ac4:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   22ac6:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   22ac8:	b16b      	cbz	r3, 22ae6 <ble_att_svr_prep_find_prev+0x22>
{
   22aca:	b410      	push	{r4}
   22acc:	e002      	b.n	22ad4 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   22ace:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   22ad0:	681b      	ldr	r3, [r3, #0]
   22ad2:	b133      	cbz	r3, 22ae2 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   22ad4:	889c      	ldrh	r4, [r3, #4]
   22ad6:	428c      	cmp	r4, r1
   22ad8:	d803      	bhi.n	22ae2 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   22ada:	d1f8      	bne.n	22ace <ble_att_svr_prep_find_prev+0xa>
   22adc:	88dc      	ldrh	r4, [r3, #6]
   22ade:	4294      	cmp	r4, r2
   22ae0:	d9f5      	bls.n	22ace <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   22ae2:	bc10      	pop	{r4}
   22ae4:	4770      	bx	lr
   22ae6:	4770      	bx	lr

00022ae8 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   22ae8:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   22aea:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   22aec:	b343      	cbz	r3, 22b40 <ble_att_svr_prep_validate+0x58>
{
   22aee:	b410      	push	{r4}
   22af0:	e00b      	b.n	22b0a <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   22af2:	88da      	ldrh	r2, [r3, #6]
   22af4:	b9ca      	cbnz	r2, 22b2a <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   22af6:	88da      	ldrh	r2, [r3, #6]
   22af8:	6898      	ldr	r0, [r3, #8]
   22afa:	8a00      	ldrh	r0, [r0, #16]
   22afc:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   22afe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   22b02:	dc16      	bgt.n	22b32 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   22b04:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   22b06:	681b      	ldr	r3, [r3, #0]
   22b08:	b1bb      	cbz	r3, 22b3a <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   22b0a:	2a00      	cmp	r2, #0
   22b0c:	d0f1      	beq.n	22af2 <ble_att_svr_prep_validate+0xa>
   22b0e:	8894      	ldrh	r4, [r2, #4]
   22b10:	8898      	ldrh	r0, [r3, #4]
   22b12:	4284      	cmp	r4, r0
   22b14:	d1ed      	bne.n	22af2 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   22b16:	88d4      	ldrh	r4, [r2, #6]
   22b18:	6892      	ldr	r2, [r2, #8]
   22b1a:	8a12      	ldrh	r2, [r2, #16]
   22b1c:	4422      	add	r2, r4
                entry->bape_offset) {
   22b1e:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   22b20:	42a2      	cmp	r2, r4
   22b22:	d0e8      	beq.n	22af6 <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   22b24:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   22b26:	2007      	movs	r0, #7
   22b28:	e008      	b.n	22b3c <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   22b2a:	889b      	ldrh	r3, [r3, #4]
   22b2c:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   22b2e:	2007      	movs	r0, #7
   22b30:	e004      	b.n	22b3c <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   22b32:	889b      	ldrh	r3, [r3, #4]
   22b34:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   22b36:	200d      	movs	r0, #13
   22b38:	e000      	b.n	22b3c <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   22b3a:	2000      	movs	r0, #0
}
   22b3c:	bc10      	pop	{r4}
   22b3e:	4770      	bx	lr
    return 0;
   22b40:	2000      	movs	r0, #0
}
   22b42:	4770      	bx	lr

00022b44 <ble_att_svr_entry_alloc>:
{
   22b44:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   22b46:	4806      	ldr	r0, [pc, #24]	; (22b60 <ble_att_svr_entry_alloc+0x1c>)
   22b48:	f7f3 f95d 	bl	15e06 <os_memblock_get>
    if (entry != NULL) {
   22b4c:	4603      	mov	r3, r0
   22b4e:	b128      	cbz	r0, 22b5c <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   22b50:	2200      	movs	r2, #0
   22b52:	6002      	str	r2, [r0, #0]
   22b54:	6042      	str	r2, [r0, #4]
   22b56:	6082      	str	r2, [r0, #8]
   22b58:	60c2      	str	r2, [r0, #12]
   22b5a:	6102      	str	r2, [r0, #16]
}
   22b5c:	4618      	mov	r0, r3
   22b5e:	bd08      	pop	{r3, pc}
   22b60:	100028dc 	.word	0x100028dc

00022b64 <ble_att_svr_get_sec_state>:
{
   22b64:	b538      	push	{r3, r4, r5, lr}
   22b66:	4605      	mov	r5, r0
   22b68:	460c      	mov	r4, r1
    ble_hs_lock();
   22b6a:	f004 fed9 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   22b6e:	4628      	mov	r0, r5
   22b70:	f005 fd4a 	bl	28608 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   22b74:	6d83      	ldr	r3, [r0, #88]	; 0x58
   22b76:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   22b78:	f004 fed6 	bl	27928 <ble_hs_unlock>
}
   22b7c:	bd38      	pop	{r3, r4, r5, pc}

00022b7e <ble_att_svr_check_perms>:
{
   22b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b82:	b0a6      	sub	sp, #152	; 0x98
   22b84:	4605      	mov	r5, r0
   22b86:	4614      	mov	r4, r2
   22b88:	461e      	mov	r6, r3
    if (is_read) {
   22b8a:	b389      	cbz	r1, 22bf0 <ble_att_svr_check_perms+0x72>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   22b8c:	7a11      	ldrb	r1, [r2, #8]
   22b8e:	f011 0f01 	tst.w	r1, #1
   22b92:	d029      	beq.n	22be8 <ble_att_svr_check_perms+0x6a>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   22b94:	f001 0704 	and.w	r7, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   22b98:	f001 0808 	and.w	r8, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   22b9c:	f001 0010 	and.w	r0, r1, #16
    if (!enc && !authen && !author) {
   22ba0:	b91f      	cbnz	r7, 22baa <ble_att_svr_check_perms+0x2c>
   22ba2:	f1b8 0f00 	cmp.w	r8, #0
   22ba6:	d100      	bne.n	22baa <ble_att_svr_check_perms+0x2c>
   22ba8:	b1d8      	cbz	r0, 22be2 <ble_att_svr_check_perms+0x64>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   22baa:	a925      	add	r1, sp, #148	; 0x94
   22bac:	4628      	mov	r0, r5
   22bae:	f7ff ffd9 	bl	22b64 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   22bb2:	b917      	cbnz	r7, 22bba <ble_att_svr_check_perms+0x3c>
   22bb4:	f1b8 0f00 	cmp.w	r8, #0
   22bb8:	d004      	beq.n	22bc4 <ble_att_svr_check_perms+0x46>
   22bba:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   22bbe:	f013 0f01 	tst.w	r3, #1
   22bc2:	d024      	beq.n	22c0e <ble_att_svr_check_perms+0x90>
    if (authen && !sec_state.authenticated) {
   22bc4:	f1b8 0f00 	cmp.w	r8, #0
   22bc8:	d004      	beq.n	22bd4 <ble_att_svr_check_perms+0x56>
   22bca:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   22bce:	f013 0f02 	tst.w	r3, #2
   22bd2:	d050      	beq.n	22c76 <ble_att_svr_check_perms+0xf8>
    if (entry->ha_min_key_size > sec_state.key_size) {
   22bd4:	7a63      	ldrb	r3, [r4, #9]
   22bd6:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   22bda:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   22bde:	d84f      	bhi.n	22c80 <ble_att_svr_check_perms+0x102>
    return 0;
   22be0:	2000      	movs	r0, #0
}
   22be2:	b026      	add	sp, #152	; 0x98
   22be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   22be8:	2302      	movs	r3, #2
   22bea:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   22bec:	2010      	movs	r0, #16
   22bee:	e7f8      	b.n	22be2 <ble_att_svr_check_perms+0x64>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   22bf0:	7a11      	ldrb	r1, [r2, #8]
   22bf2:	f011 0f02 	tst.w	r1, #2
   22bf6:	d006      	beq.n	22c06 <ble_att_svr_check_perms+0x88>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   22bf8:	f001 0720 	and.w	r7, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   22bfc:	f001 0840 	and.w	r8, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   22c00:	f001 0080 	and.w	r0, r1, #128	; 0x80
   22c04:	e7cc      	b.n	22ba0 <ble_att_svr_check_perms+0x22>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   22c06:	2303      	movs	r3, #3
   22c08:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   22c0a:	2010      	movs	r0, #16
   22c0c:	e7e9      	b.n	22be2 <ble_att_svr_check_perms+0x64>
        ble_hs_lock();
   22c0e:	f004 fe87 	bl	27920 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   22c12:	4628      	mov	r0, r5
   22c14:	f005 fce0 	bl	285d8 <ble_hs_conn_find>
        if (conn != NULL) {
   22c18:	b1a8      	cbz	r0, 22c46 <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   22c1a:	a901      	add	r1, sp, #4
   22c1c:	f005 fd14 	bl	28648 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   22c20:	2300      	movs	r3, #0
   22c22:	9309      	str	r3, [sp, #36]	; 0x24
   22c24:	930a      	str	r3, [sp, #40]	; 0x28
   22c26:	930b      	str	r3, [sp, #44]	; 0x2c
   22c28:	930c      	str	r3, [sp, #48]	; 0x30
   22c2a:	930d      	str	r3, [sp, #52]	; 0x34
   22c2c:	930e      	str	r3, [sp, #56]	; 0x38
   22c2e:	930f      	str	r3, [sp, #60]	; 0x3c
            key_sec.peer_addr = addrs.peer_id_addr;
   22c30:	f8dd 000b 	ldr.w	r0, [sp, #11]
   22c34:	9008      	str	r0, [sp, #32]
   22c36:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   22c3a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   22c3e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   22c42:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   22c46:	f004 fe6f 	bl	27928 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   22c4a:	a910      	add	r1, sp, #64	; 0x40
   22c4c:	a808      	add	r0, sp, #32
   22c4e:	f009 fb72 	bl	2c336 <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   22c52:	b938      	cbnz	r0, 22c64 <ble_att_svr_check_perms+0xe6>
   22c54:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   22c58:	f013 0f01 	tst.w	r3, #1
   22c5c:	d002      	beq.n	22c64 <ble_att_svr_check_perms+0xe6>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   22c5e:	230f      	movs	r3, #15
   22c60:	7033      	strb	r3, [r6, #0]
   22c62:	e001      	b.n	22c68 <ble_att_svr_check_perms+0xea>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   22c64:	2305      	movs	r3, #5
   22c66:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   22c68:	7830      	ldrb	r0, [r6, #0]
   22c6a:	b110      	cbz	r0, 22c72 <ble_att_svr_check_perms+0xf4>
   22c6c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   22c70:	e7b7      	b.n	22be2 <ble_att_svr_check_perms+0x64>
   22c72:	2000      	movs	r0, #0
   22c74:	e7b5      	b.n	22be2 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   22c76:	2305      	movs	r3, #5
   22c78:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   22c7a:	f240 1005 	movw	r0, #261	; 0x105
   22c7e:	e7b0      	b.n	22be2 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   22c80:	230c      	movs	r3, #12
   22c82:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   22c84:	f44f 7086 	mov.w	r0, #268	; 0x10c
   22c88:	e7ab      	b.n	22be2 <ble_att_svr_check_perms+0x64>

00022c8a <ble_att_svr_read>:
{
   22c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c8c:	b087      	sub	sp, #28
   22c8e:	4606      	mov	r6, r0
   22c90:	460c      	mov	r4, r1
   22c92:	4615      	mov	r5, r2
   22c94:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   22c96:	2300      	movs	r3, #0
   22c98:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   22c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22ca0:	4298      	cmp	r0, r3
   22ca2:	d10e      	bne.n	22cc2 <ble_att_svr_read+0x38>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   22ca4:	68e7      	ldr	r7, [r4, #12]
   22ca6:	6923      	ldr	r3, [r4, #16]
   22ca8:	9301      	str	r3, [sp, #4]
   22caa:	ab03      	add	r3, sp, #12
   22cac:	9300      	str	r3, [sp, #0]
   22cae:	462b      	mov	r3, r5
   22cb0:	2201      	movs	r2, #1
   22cb2:	8961      	ldrh	r1, [r4, #10]
   22cb4:	4630      	mov	r0, r6
   22cb6:	47b8      	blx	r7
    if (rc != 0) {
   22cb8:	4603      	mov	r3, r0
   22cba:	b960      	cbnz	r0, 22cd6 <ble_att_svr_read+0x4c>
}
   22cbc:	4618      	mov	r0, r3
   22cbe:	b007      	add	sp, #28
   22cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   22cc2:	f10d 0317 	add.w	r3, sp, #23
   22cc6:	460a      	mov	r2, r1
   22cc8:	2101      	movs	r1, #1
   22cca:	f7ff ff58 	bl	22b7e <ble_att_svr_check_perms>
        if (rc != 0) {
   22cce:	4603      	mov	r3, r0
   22cd0:	2800      	cmp	r0, #0
   22cd2:	d0e7      	beq.n	22ca4 <ble_att_svr_read+0x1a>
   22cd4:	e002      	b.n	22cdc <ble_att_svr_read+0x52>
        att_err = rc;
   22cd6:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   22cda:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   22cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   22cde:	2a00      	cmp	r2, #0
   22ce0:	d0ec      	beq.n	22cbc <ble_att_svr_read+0x32>
        *out_att_err = att_err;
   22ce2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   22ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
   22ce8:	700a      	strb	r2, [r1, #0]
   22cea:	e7e7      	b.n	22cbc <ble_att_svr_read+0x32>

00022cec <ble_att_svr_write>:
{
   22cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22cf0:	b085      	sub	sp, #20
   22cf2:	4605      	mov	r5, r0
   22cf4:	460c      	mov	r4, r1
   22cf6:	4616      	mov	r6, r2
   22cf8:	4698      	mov	r8, r3
   22cfa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   22cfc:	2200      	movs	r2, #0
   22cfe:	f88d 200f 	strb.w	r2, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   22d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22d06:	4290      	cmp	r0, r2
   22d08:	d114      	bne.n	22d34 <ble_att_svr_write+0x48>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   22d0a:	f8d4 900c 	ldr.w	r9, [r4, #12]
   22d0e:	6923      	ldr	r3, [r4, #16]
   22d10:	9301      	str	r3, [sp, #4]
   22d12:	f8cd 8000 	str.w	r8, [sp]
   22d16:	4633      	mov	r3, r6
   22d18:	2202      	movs	r2, #2
   22d1a:	8961      	ldrh	r1, [r4, #10]
   22d1c:	4628      	mov	r0, r5
   22d1e:	47c8      	blx	r9
    if (rc != 0) {
   22d20:	4602      	mov	r2, r0
   22d22:	b988      	cbnz	r0, 22d48 <ble_att_svr_write+0x5c>
    if (out_att_err != NULL) {
   22d24:	b117      	cbz	r7, 22d2c <ble_att_svr_write+0x40>
        *out_att_err = att_err;
   22d26:	f89d 300f 	ldrb.w	r3, [sp, #15]
   22d2a:	703b      	strb	r3, [r7, #0]
}
   22d2c:	4610      	mov	r0, r2
   22d2e:	b005      	add	sp, #20
   22d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   22d34:	f10d 030f 	add.w	r3, sp, #15
   22d38:	460a      	mov	r2, r1
   22d3a:	2100      	movs	r1, #0
   22d3c:	f7ff ff1f 	bl	22b7e <ble_att_svr_check_perms>
        if (rc != 0) {
   22d40:	4602      	mov	r2, r0
   22d42:	2800      	cmp	r0, #0
   22d44:	d0e1      	beq.n	22d0a <ble_att_svr_write+0x1e>
   22d46:	e7ed      	b.n	22d24 <ble_att_svr_write+0x38>
        att_err = rc;
   22d48:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   22d4c:	2209      	movs	r2, #9
        goto done;
   22d4e:	e7e9      	b.n	22d24 <ble_att_svr_write+0x38>

00022d50 <ble_att_svr_pullup_req_base>:
{
   22d50:	b510      	push	{r4, lr}
   22d52:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   22d54:	f006 fcdf 	bl	29716 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   22d58:	2806      	cmp	r0, #6
   22d5a:	d003      	beq.n	22d64 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   22d5c:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   22d5e:	b104      	cbz	r4, 22d62 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   22d60:	7023      	strb	r3, [r4, #0]
}
   22d62:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   22d64:	2311      	movs	r3, #17
   22d66:	e7fa      	b.n	22d5e <ble_att_svr_pullup_req_base+0xe>

00022d68 <ble_att_svr_build_mtu_rsp>:
{
   22d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22d6c:	b083      	sub	sp, #12
   22d6e:	4606      	mov	r6, r0
   22d70:	460f      	mov	r7, r1
   22d72:	4615      	mov	r5, r2
   22d74:	461c      	mov	r4, r3
   22d76:	f04f 0800 	mov.w	r8, #0
    *att_err = 0; /* Silence unnecessary warning. */
   22d7a:	f883 8000 	strb.w	r8, [r3]
    ble_hs_lock();
   22d7e:	f004 fdcf 	bl	27920 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   22d82:	aa01      	add	r2, sp, #4
   22d84:	4641      	mov	r1, r8
   22d86:	4630      	mov	r0, r6
   22d88:	f7ff fc31 	bl	225ee <ble_att_conn_chan_find>
    if (rc == 0) {
   22d8c:	4681      	mov	r9, r0
   22d8e:	b910      	cbnz	r0, 22d96 <ble_att_svr_build_mtu_rsp+0x2e>
        mtu = chan->my_mtu;
   22d90:	9b01      	ldr	r3, [sp, #4]
   22d92:	f8b3 800a 	ldrh.w	r8, [r3, #10]
    ble_hs_unlock();
   22d96:	f004 fdc7 	bl	27928 <ble_hs_unlock>
    if (rc != 0) {
   22d9a:	f1b9 0f00 	cmp.w	r9, #0
   22d9e:	d005      	beq.n	22dac <ble_att_svr_build_mtu_rsp+0x44>
    txom = NULL;
   22da0:	2600      	movs	r6, #0
    *out_txom = txom;
   22da2:	602e      	str	r6, [r5, #0]
}
   22da4:	4648      	mov	r0, r9
   22da6:	b003      	add	sp, #12
   22da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   22dac:	683e      	ldr	r6, [r7, #0]
    *rxom = NULL;
   22dae:	2300      	movs	r3, #0
   22db0:	603b      	str	r3, [r7, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   22db2:	8a31      	ldrh	r1, [r6, #16]
   22db4:	4630      	mov	r0, r6
   22db6:	f7f2 fd2e 	bl	15816 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   22dba:	4632      	mov	r2, r6
   22dbc:	2102      	movs	r1, #2
   22dbe:	2003      	movs	r0, #3
   22dc0:	f7ff fe31 	bl	22a26 <ble_att_cmd_prepare>
    if (cmd == NULL) {
   22dc4:	b110      	cbz	r0, 22dcc <ble_att_svr_build_mtu_rsp+0x64>
    cmd->bamc_mtu = htole16(mtu);
   22dc6:	f8a0 8000 	strh.w	r8, [r0]
    rc = 0;
   22dca:	e7ea      	b.n	22da2 <ble_att_svr_build_mtu_rsp+0x3a>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   22dcc:	2311      	movs	r3, #17
   22dce:	7023      	strb	r3, [r4, #0]
        rc = BLE_HS_ENOMEM;
   22dd0:	f04f 0906 	mov.w	r9, #6
        goto done;
   22dd4:	e7e5      	b.n	22da2 <ble_att_svr_build_mtu_rsp+0x3a>

00022dd6 <ble_att_svr_pkt>:
{
   22dd6:	b570      	push	{r4, r5, r6, lr}
   22dd8:	4606      	mov	r6, r0
   22dda:	460c      	mov	r4, r1
   22ddc:	4615      	mov	r5, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   22dde:	f006 fc7b 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
   22de2:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   22de4:	b108      	cbz	r0, 22dea <ble_att_svr_pkt+0x14>
        return 0;
   22de6:	2000      	movs	r0, #0
}
   22de8:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   22dea:	6833      	ldr	r3, [r6, #0]
   22dec:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   22dee:	2300      	movs	r3, #0
   22df0:	6033      	str	r3, [r6, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   22df2:	2311      	movs	r3, #17
   22df4:	702b      	strb	r3, [r5, #0]
    return BLE_HS_ENOMEM;
   22df6:	2006      	movs	r0, #6
   22df8:	e7f6      	b.n	22de8 <ble_att_svr_pkt+0x12>

00022dfa <ble_att_svr_build_write_rsp>:
{
   22dfa:	b570      	push	{r4, r5, r6, lr}
   22dfc:	b082      	sub	sp, #8
   22dfe:	460c      	mov	r4, r1
   22e00:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   22e02:	a901      	add	r1, sp, #4
   22e04:	f7ff ffe7 	bl	22dd6 <ble_att_svr_pkt>
    if (rc != 0) {
   22e08:	4606      	mov	r6, r0
   22e0a:	b120      	cbz	r0, 22e16 <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   22e0c:	9b01      	ldr	r3, [sp, #4]
   22e0e:	6023      	str	r3, [r4, #0]
}
   22e10:	4630      	mov	r0, r6
   22e12:	b002      	add	sp, #8
   22e14:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   22e16:	9a01      	ldr	r2, [sp, #4]
   22e18:	2100      	movs	r1, #0
   22e1a:	2013      	movs	r0, #19
   22e1c:	f7ff fe03 	bl	22a26 <ble_att_cmd_prepare>
   22e20:	2800      	cmp	r0, #0
   22e22:	d1f3      	bne.n	22e0c <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   22e24:	2311      	movs	r3, #17
   22e26:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   22e28:	2606      	movs	r6, #6
        goto done;
   22e2a:	e7ef      	b.n	22e0c <ble_att_svr_build_write_rsp+0x12>

00022e2c <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   22e2c:	b570      	push	{r4, r5, r6, lr}
   22e2e:	b082      	sub	sp, #8
   22e30:	460c      	mov	r4, r1
   22e32:	4615      	mov	r5, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   22e34:	a901      	add	r1, sp, #4
   22e36:	f7ff ffce 	bl	22dd6 <ble_att_svr_pkt>
    if (rc != 0) {
   22e3a:	4606      	mov	r6, r0
   22e3c:	b120      	cbz	r0, 22e48 <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   22e3e:	9b01      	ldr	r3, [sp, #4]
   22e40:	6023      	str	r3, [r4, #0]
    return rc;
}
   22e42:	4630      	mov	r0, r6
   22e44:	b002      	add	sp, #8
   22e46:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   22e48:	9a01      	ldr	r2, [sp, #4]
   22e4a:	2100      	movs	r1, #0
   22e4c:	201e      	movs	r0, #30
   22e4e:	f7ff fdea 	bl	22a26 <ble_att_cmd_prepare>
   22e52:	2800      	cmp	r0, #0
   22e54:	d1f3      	bne.n	22e3e <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   22e56:	2311      	movs	r3, #17
   22e58:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   22e5a:	2606      	movs	r6, #6
        goto done;
   22e5c:	e7ef      	b.n	22e3e <ble_att_svr_build_indicate_rsp+0x12>
	...

00022e60 <ble_att_svr_fill_info>:
{
   22e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e64:	4680      	mov	r8, r0
   22e66:	460f      	mov	r7, r1
   22e68:	4691      	mov	r9, r2
   22e6a:	469b      	mov	fp, r3
   22e6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    *format = 0;
   22e70:	2600      	movs	r6, #0
   22e72:	f88a 6000 	strb.w	r6, [sl]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   22e76:	4b20      	ldr	r3, [pc, #128]	; (22ef8 <ble_att_svr_fill_info+0x98>)
   22e78:	681c      	ldr	r4, [r3, #0]
   22e7a:	e021      	b.n	22ec0 <ble_att_svr_fill_info+0x60>
                if (*format == 0) {
   22e7c:	f89a 3000 	ldrb.w	r3, [sl]
   22e80:	b923      	cbnz	r3, 22e8c <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   22e82:	2301      	movs	r3, #1
   22e84:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 4;
   22e88:	2104      	movs	r1, #4
   22e8a:	e006      	b.n	22e9a <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   22e8c:	2b01      	cmp	r3, #1
   22e8e:	d12a      	bne.n	22ee6 <ble_att_svr_fill_info+0x86>
                entry_sz = 4;
   22e90:	2104      	movs	r1, #4
   22e92:	e002      	b.n	22e9a <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   22e94:	2b02      	cmp	r3, #2
   22e96:	d126      	bne.n	22ee6 <ble_att_svr_fill_info+0x86>
                entry_sz = 18;
   22e98:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   22e9a:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   22e9e:	440b      	add	r3, r1
   22ea0:	455b      	cmp	r3, fp
   22ea2:	dc20      	bgt.n	22ee6 <ble_att_svr_fill_info+0x86>
            buf = os_mbuf_extend(om, entry_sz);
   22ea4:	4648      	mov	r0, r9
   22ea6:	f7f2 fe0c 	bl	15ac2 <os_mbuf_extend>
            if (buf == NULL) {
   22eaa:	4605      	mov	r5, r0
   22eac:	b1f8      	cbz	r0, 22eee <ble_att_svr_fill_info+0x8e>
            put_le16(buf + 0, ha->ha_handle_id);
   22eae:	8961      	ldrh	r1, [r4, #10]
   22eb0:	f00f f814 	bl	31edc <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   22eb4:	1ca9      	adds	r1, r5, #2
   22eb6:	6860      	ldr	r0, [r4, #4]
   22eb8:	f009 fc56 	bl	2c768 <ble_uuid_flat>
            num_entries++;
   22ebc:	3601      	adds	r6, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   22ebe:	6824      	ldr	r4, [r4, #0]
   22ec0:	b18c      	cbz	r4, 22ee6 <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id > end_handle) {
   22ec2:	8965      	ldrh	r5, [r4, #10]
   22ec4:	42bd      	cmp	r5, r7
   22ec6:	d80e      	bhi.n	22ee6 <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id >= start_handle) {
   22ec8:	4545      	cmp	r5, r8
   22eca:	d3f8      	bcc.n	22ebe <ble_att_svr_fill_info+0x5e>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   22ecc:	6863      	ldr	r3, [r4, #4]
   22ece:	781b      	ldrb	r3, [r3, #0]
   22ed0:	2b10      	cmp	r3, #16
   22ed2:	d0d3      	beq.n	22e7c <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   22ed4:	f89a 3000 	ldrb.w	r3, [sl]
   22ed8:	2b00      	cmp	r3, #0
   22eda:	d1db      	bne.n	22e94 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   22edc:	2302      	movs	r3, #2
   22ede:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 18;
   22ee2:	2112      	movs	r1, #18
   22ee4:	e7d9      	b.n	22e9a <ble_att_svr_fill_info+0x3a>
    if (rc == 0 && num_entries == 0) {
   22ee6:	b126      	cbz	r6, 22ef2 <ble_att_svr_fill_info+0x92>
   22ee8:	2000      	movs	r0, #0
}
   22eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rc = BLE_HS_ENOMEM;
   22eee:	2006      	movs	r0, #6
        return rc;
   22ef0:	e7fb      	b.n	22eea <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   22ef2:	2005      	movs	r0, #5
   22ef4:	e7f9      	b.n	22eea <ble_att_svr_fill_info+0x8a>
   22ef6:	bf00      	nop
   22ef8:	10002904 	.word	0x10002904

00022efc <ble_att_svr_build_find_info_rsp>:
{
   22efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f00:	b082      	sub	sp, #8
   22f02:	4606      	mov	r6, r0
   22f04:	460d      	mov	r5, r1
   22f06:	4617      	mov	r7, r2
    txom = *rxom;
   22f08:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   22f0a:	2100      	movs	r1, #0
   22f0c:	6019      	str	r1, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   22f0e:	8a21      	ldrh	r1, [r4, #16]
   22f10:	4620      	mov	r0, r4
   22f12:	f7f2 fc80 	bl	15816 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   22f16:	4622      	mov	r2, r4
   22f18:	2101      	movs	r1, #1
   22f1a:	2005      	movs	r0, #5
   22f1c:	f7ff fd83 	bl	22a26 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   22f20:	b188      	cbz	r0, 22f46 <ble_att_svr_build_find_info_rsp+0x4a>
   22f22:	4680      	mov	r8, r0
    mtu = ble_att_mtu(conn_handle);
   22f24:	4630      	mov	r0, r6
   22f26:	f7ff fc88 	bl	2283a <ble_att_mtu>
   22f2a:	4603      	mov	r3, r0
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   22f2c:	f8cd 8000 	str.w	r8, [sp]
   22f30:	4622      	mov	r2, r4
   22f32:	4639      	mov	r1, r7
   22f34:	4628      	mov	r0, r5
   22f36:	f7ff ff93 	bl	22e60 <ble_att_svr_fill_info>
    if (rc != 0) {
   22f3a:	b948      	cbnz	r0, 22f50 <ble_att_svr_build_find_info_rsp+0x54>
    *out_txom = txom;
   22f3c:	9b08      	ldr	r3, [sp, #32]
   22f3e:	601c      	str	r4, [r3, #0]
}
   22f40:	b002      	add	sp, #8
   22f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   22f46:	2311      	movs	r3, #17
   22f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22f4a:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   22f4c:	2006      	movs	r0, #6
        goto done;
   22f4e:	e7f5      	b.n	22f3c <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   22f50:	230a      	movs	r3, #10
   22f52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22f54:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   22f56:	2005      	movs	r0, #5
        goto done;
   22f58:	e7f0      	b.n	22f3c <ble_att_svr_build_find_info_rsp+0x40>

00022f5a <ble_att_svr_read_group_type_entry_write>:
{
   22f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f5e:	460c      	mov	r4, r1
   22f60:	4617      	mov	r7, r2
   22f62:	461e      	mov	r6, r3
   22f64:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   22f68:	f898 3000 	ldrb.w	r3, [r8]
   22f6c:	2b10      	cmp	r3, #16
   22f6e:	d016      	beq.n	22f9e <ble_att_svr_read_group_type_entry_write+0x44>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   22f70:	2114      	movs	r1, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   22f72:	8a05      	ldrh	r5, [r0, #16]
   22f74:	440d      	add	r5, r1
   22f76:	42a5      	cmp	r5, r4
   22f78:	dc13      	bgt.n	22fa2 <ble_att_svr_read_group_type_entry_write+0x48>
    buf = os_mbuf_extend(om, len);
   22f7a:	f7f2 fda2 	bl	15ac2 <os_mbuf_extend>
    if (buf == NULL) {
   22f7e:	4604      	mov	r4, r0
   22f80:	b188      	cbz	r0, 22fa6 <ble_att_svr_read_group_type_entry_write+0x4c>
    put_le16(buf + 0, start_group_handle);
   22f82:	4639      	mov	r1, r7
   22f84:	f00e ffaa 	bl	31edc <put_le16>
    put_le16(buf + 2, end_group_handle);
   22f88:	4631      	mov	r1, r6
   22f8a:	1ca0      	adds	r0, r4, #2
   22f8c:	f00e ffa6 	bl	31edc <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   22f90:	1d21      	adds	r1, r4, #4
   22f92:	4640      	mov	r0, r8
   22f94:	f009 fbe8 	bl	2c768 <ble_uuid_flat>
    return 0;
   22f98:	2000      	movs	r0, #0
}
   22f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   22f9e:	2106      	movs	r1, #6
   22fa0:	e7e7      	b.n	22f72 <ble_att_svr_read_group_type_entry_write+0x18>
        return BLE_HS_EMSGSIZE;
   22fa2:	2004      	movs	r0, #4
   22fa4:	e7f9      	b.n	22f9a <ble_att_svr_read_group_type_entry_write+0x40>
        return BLE_HS_ENOMEM;
   22fa6:	2006      	movs	r0, #6
   22fa8:	e7f7      	b.n	22f9a <ble_att_svr_read_group_type_entry_write+0x40>

00022faa <ble_att_svr_is_valid_find_group_type>:
{
   22faa:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   22fac:	f009 fba2 	bl	2c6f4 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   22fb0:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   22fb4:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   22fb6:	2b01      	cmp	r3, #1
   22fb8:	d907      	bls.n	22fca <ble_att_svr_is_valid_find_group_type+0x20>
   22fba:	f642 0303 	movw	r3, #10243	; 0x2803
   22fbe:	4298      	cmp	r0, r3
   22fc0:	d001      	beq.n	22fc6 <ble_att_svr_is_valid_find_group_type+0x1c>
   22fc2:	2000      	movs	r0, #0
   22fc4:	e002      	b.n	22fcc <ble_att_svr_is_valid_find_group_type+0x22>
   22fc6:	2001      	movs	r0, #1
   22fc8:	e000      	b.n	22fcc <ble_att_svr_is_valid_find_group_type+0x22>
   22fca:	2001      	movs	r0, #1
}
   22fcc:	bd08      	pop	{r3, pc}

00022fce <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   22fce:	7803      	ldrb	r3, [r0, #0]
   22fd0:	2b10      	cmp	r3, #16
   22fd2:	d126      	bne.n	23022 <ble_att_svr_is_valid_group_end+0x54>
{
   22fd4:	b510      	push	{r4, lr}
   22fd6:	460c      	mov	r4, r1
    if (uuid->type != BLE_UUID_TYPE_16) {
   22fd8:	780b      	ldrb	r3, [r1, #0]
   22fda:	2b10      	cmp	r3, #16
   22fdc:	d001      	beq.n	22fe2 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   22fde:	2000      	movs	r0, #0
}
   22fe0:	bd10      	pop	{r4, pc}
    switch (ble_uuid_u16(uuid_group)) {
   22fe2:	f009 fb87 	bl	2c6f4 <ble_uuid_u16>
   22fe6:	f642 0301 	movw	r3, #10241	; 0x2801
   22fea:	4298      	cmp	r0, r3
   22fec:	d907      	bls.n	22ffe <ble_att_svr_is_valid_group_end+0x30>
   22fee:	f642 0303 	movw	r3, #10243	; 0x2803
   22ff2:	4298      	cmp	r0, r3
   22ff4:	d108      	bne.n	23008 <ble_att_svr_is_valid_group_end+0x3a>
        return ble_att_svr_is_valid_find_group_type(uuid);
   22ff6:	4620      	mov	r0, r4
   22ff8:	f7ff ffd7 	bl	22faa <ble_att_svr_is_valid_find_group_type>
   22ffc:	e7f0      	b.n	22fe0 <ble_att_svr_is_valid_group_end+0x12>
    switch (ble_uuid_u16(uuid_group)) {
   22ffe:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   23002:	d203      	bcs.n	2300c <ble_att_svr_is_valid_group_end+0x3e>
   23004:	2001      	movs	r0, #1
   23006:	e7eb      	b.n	22fe0 <ble_att_svr_is_valid_group_end+0x12>
   23008:	2001      	movs	r0, #1
   2300a:	e7e9      	b.n	22fe0 <ble_att_svr_is_valid_group_end+0x12>
        uuid16 = ble_uuid_u16(uuid);
   2300c:	4620      	mov	r0, r4
   2300e:	f009 fb71 	bl	2c6f4 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   23012:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   23016:	b280      	uxth	r0, r0
   23018:	2801      	cmp	r0, #1
   2301a:	bf8c      	ite	hi
   2301c:	2000      	movhi	r0, #0
   2301e:	2001      	movls	r0, #1
   23020:	e7de      	b.n	22fe0 <ble_att_svr_is_valid_group_end+0x12>
        return 1;
   23022:	2001      	movs	r0, #1
}
   23024:	4770      	bx	lr

00023026 <ble_att_svr_is_valid_read_group_type>:
{
   23026:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   23028:	f009 fb64 	bl	2c6f4 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   2302c:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   23030:	b280      	uxth	r0, r0
}
   23032:	2801      	cmp	r0, #1
   23034:	bf8c      	ite	hi
   23036:	2000      	movhi	r0, #0
   23038:	2001      	movls	r0, #1
   2303a:	bd08      	pop	{r3, pc}

0002303c <ble_att_svr_read_flat>:
{
   2303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23040:	b082      	sub	sp, #8
   23042:	4604      	mov	r4, r0
   23044:	460d      	mov	r5, r1
   23046:	4616      	mov	r6, r2
   23048:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   2304a:	f006 fb45 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   2304e:	4607      	mov	r7, r0
   23050:	b300      	cbz	r0, 23094 <ble_att_svr_read_flat+0x58>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   23052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23054:	9300      	str	r3, [sp, #0]
   23056:	4603      	mov	r3, r0
   23058:	4632      	mov	r2, r6
   2305a:	4629      	mov	r1, r5
   2305c:	4620      	mov	r0, r4
   2305e:	f7ff fe14 	bl	22c8a <ble_att_svr_read>
    if (rc != 0) {
   23062:	4604      	mov	r4, r0
   23064:	b950      	cbnz	r0, 2307c <ble_att_svr_read_flat+0x40>
    len = OS_MBUF_PKTLEN(om);
   23066:	8a3d      	ldrh	r5, [r7, #16]
    if (len > max_len) {
   23068:	4545      	cmp	r5, r8
   2306a:	d80e      	bhi.n	2308a <ble_att_svr_read_flat+0x4e>
    rc = os_mbuf_copydata(om, 0, len, dst);
   2306c:	9b08      	ldr	r3, [sp, #32]
   2306e:	462a      	mov	r2, r5
   23070:	2100      	movs	r1, #0
   23072:	4638      	mov	r0, r7
   23074:	f7f2 fba2 	bl	157bc <os_mbuf_copydata>
    *out_len = len;
   23078:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2307a:	801d      	strh	r5, [r3, #0]
    os_mbuf_free_chain(om);
   2307c:	4638      	mov	r0, r7
   2307e:	f7f2 faf3 	bl	15668 <os_mbuf_free_chain>
}
   23082:	4620      	mov	r0, r4
   23084:	b002      	add	sp, #8
   23086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   2308a:	230e      	movs	r3, #14
   2308c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2308e:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   23090:	2404      	movs	r4, #4
        goto done;
   23092:	e7f3      	b.n	2307c <ble_att_svr_read_flat+0x40>
        rc = BLE_HS_ENOMEM;
   23094:	2406      	movs	r4, #6
   23096:	e7f1      	b.n	2307c <ble_att_svr_read_flat+0x40>

00023098 <ble_att_svr_fill_type_value_entry>:
{
   23098:	b530      	push	{r4, r5, lr}
   2309a:	b083      	sub	sp, #12
   2309c:	4604      	mov	r4, r0
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   2309e:	8a00      	ldrh	r0, [r0, #16]
   230a0:	3004      	adds	r0, #4
    if (rsp_sz > mtu) {
   230a2:	4298      	cmp	r0, r3
   230a4:	dd02      	ble.n	230ac <ble_att_svr_fill_type_value_entry+0x14>
        return 0;
   230a6:	2000      	movs	r0, #0
}
   230a8:	b003      	add	sp, #12
   230aa:	bd30      	pop	{r4, r5, pc}
   230ac:	4615      	mov	r5, r2
    put_le16(&u16, first);
   230ae:	f10d 0006 	add.w	r0, sp, #6
   230b2:	f00e ff13 	bl	31edc <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   230b6:	2202      	movs	r2, #2
   230b8:	f10d 0106 	add.w	r1, sp, #6
   230bc:	4620      	mov	r0, r4
   230be:	f7f2 faec 	bl	1569a <os_mbuf_append>
    if (rc != 0) {
   230c2:	b968      	cbnz	r0, 230e0 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   230c4:	4629      	mov	r1, r5
   230c6:	f10d 0006 	add.w	r0, sp, #6
   230ca:	f00e ff07 	bl	31edc <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   230ce:	2202      	movs	r2, #2
   230d0:	f10d 0106 	add.w	r1, sp, #6
   230d4:	4620      	mov	r0, r4
   230d6:	f7f2 fae0 	bl	1569a <os_mbuf_append>
    if (rc != 0) {
   230da:	b930      	cbnz	r0, 230ea <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   230dc:	2001      	movs	r0, #1
   230de:	e7e3      	b.n	230a8 <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   230e0:	2311      	movs	r3, #17
   230e2:	9a06      	ldr	r2, [sp, #24]
   230e4:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   230e6:	2006      	movs	r0, #6
   230e8:	e7de      	b.n	230a8 <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   230ea:	2311      	movs	r3, #17
   230ec:	9a06      	ldr	r2, [sp, #24]
   230ee:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   230f0:	2006      	movs	r0, #6
   230f2:	e7d9      	b.n	230a8 <ble_att_svr_fill_type_value_entry+0x10>

000230f4 <ble_att_svr_fill_type_value>:
{
   230f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230f8:	b08d      	sub	sp, #52	; 0x34
   230fa:	4682      	mov	sl, r0
   230fc:	460e      	mov	r6, r1
   230fe:	4690      	mov	r8, r2
   23100:	9305      	str	r3, [sp, #20]
   23102:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
   23106:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2310a:	4b33      	ldr	r3, [pc, #204]	; (231d8 <ble_att_svr_fill_type_value+0xe4>)
   2310c:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   2310e:	2700      	movs	r7, #0
    first = 0;
   23110:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   23112:	e015      	b.n	23140 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   23114:	f8cd 9000 	str.w	r9, [sp]
   23118:	465b      	mov	r3, fp
   2311a:	463a      	mov	r2, r7
   2311c:	4629      	mov	r1, r5
   2311e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   23120:	f7ff ffba 	bl	23098 <ble_att_svr_fill_type_value_entry>
   23124:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   23126:	2801      	cmp	r0, #1
   23128:	d13a      	bne.n	231a0 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   2312a:	8963      	ldrh	r3, [r4, #10]
   2312c:	4543      	cmp	r3, r8
   2312e:	d833      	bhi.n	23198 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   23130:	2700      	movs	r7, #0
            first = 0;
   23132:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   23134:	a905      	add	r1, sp, #20
   23136:	6860      	ldr	r0, [r4, #4]
   23138:	f009 fa6a 	bl	2c610 <ble_uuid_cmp>
   2313c:	b188      	cbz	r0, 23162 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2313e:	6824      	ldr	r4, [r4, #0]
   23140:	b364      	cbz	r4, 2319c <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   23142:	8963      	ldrh	r3, [r4, #10]
   23144:	42b3      	cmp	r3, r6
   23146:	d3fa      	bcc.n	2313e <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   23148:	b90d      	cbnz	r5, 2314e <ble_att_svr_fill_type_value+0x5a>
   2314a:	4543      	cmp	r3, r8
   2314c:	d826      	bhi.n	2319c <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   2314e:	2d00      	cmp	r5, #0
   23150:	d0f0      	beq.n	23134 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   23152:	6861      	ldr	r1, [r4, #4]
   23154:	a805      	add	r0, sp, #20
   23156:	f7ff ff3a 	bl	22fce <ble_att_svr_is_valid_group_end>
   2315a:	2800      	cmp	r0, #0
   2315c:	d1da      	bne.n	23114 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   2315e:	8967      	ldrh	r7, [r4, #10]
                continue;
   23160:	e7ed      	b.n	2313e <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   23162:	f8cd 9008 	str.w	r9, [sp, #8]
   23166:	f10d 031e 	add.w	r3, sp, #30
   2316a:	9301      	str	r3, [sp, #4]
   2316c:	ab08      	add	r3, sp, #32
   2316e:	9300      	str	r3, [sp, #0]
   23170:	2310      	movs	r3, #16
   23172:	2200      	movs	r2, #0
   23174:	4621      	mov	r1, r4
   23176:	4650      	mov	r0, sl
   23178:	f7ff ff60 	bl	2303c <ble_att_svr_read_flat>
            if (rc != 0) {
   2317c:	4603      	mov	r3, r0
   2317e:	b978      	cbnz	r0, 231a0 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   23180:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   23184:	aa08      	add	r2, sp, #32
   23186:	2106      	movs	r1, #6
   23188:	9816      	ldr	r0, [sp, #88]	; 0x58
   2318a:	f7f2 fb95 	bl	158b8 <os_mbuf_cmpf>
            if (rc == 0) {
   2318e:	2800      	cmp	r0, #0
   23190:	d1d5      	bne.n	2313e <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   23192:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   23194:	462f      	mov	r7, r5
   23196:	e7d2      	b.n	2313e <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   23198:	2700      	movs	r7, #0
            first = 0;
   2319a:	463d      	mov	r5, r7
    if (first) {
   2319c:	b94d      	cbnz	r5, 231b2 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   2319e:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   231a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   231a2:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   231a4:	b90b      	cbnz	r3, 231aa <ble_att_svr_fill_type_value+0xb6>
   231a6:	2a01      	cmp	r2, #1
   231a8:	d910      	bls.n	231cc <ble_att_svr_fill_type_value+0xd8>
}
   231aa:	4618      	mov	r0, r3
   231ac:	b00d      	add	sp, #52	; 0x34
   231ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   231b2:	f8cd 9000 	str.w	r9, [sp]
   231b6:	465b      	mov	r3, fp
   231b8:	463a      	mov	r2, r7
   231ba:	4629      	mov	r1, r5
   231bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   231be:	f7ff ff6b 	bl	23098 <ble_att_svr_fill_type_value_entry>
   231c2:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   231c4:	2801      	cmp	r0, #1
   231c6:	d1eb      	bne.n	231a0 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   231c8:	2300      	movs	r3, #0
   231ca:	e7e9      	b.n	231a0 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   231cc:	230a      	movs	r3, #10
   231ce:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   231d2:	2305      	movs	r3, #5
   231d4:	e7e9      	b.n	231aa <ble_att_svr_fill_type_value+0xb6>
   231d6:	bf00      	nop
   231d8:	10002904 	.word	0x10002904

000231dc <ble_att_svr_build_find_type_value_rsp>:
{
   231dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231e0:	b088      	sub	sp, #32
   231e2:	4604      	mov	r4, r0
   231e4:	4688      	mov	r8, r1
   231e6:	4617      	mov	r7, r2
   231e8:	9305      	str	r3, [sp, #20]
   231ea:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   231ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   231ee:	462a      	mov	r2, r5
   231f0:	a907      	add	r1, sp, #28
   231f2:	4630      	mov	r0, r6
   231f4:	f7ff fdef 	bl	22dd6 <ble_att_svr_pkt>
    if (rc != 0) {
   231f8:	b128      	cbz	r0, 23206 <ble_att_svr_build_find_type_value_rsp+0x2a>
    *out_txom = txom;
   231fa:	9a07      	ldr	r2, [sp, #28]
   231fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   231fe:	601a      	str	r2, [r3, #0]
}
   23200:	b008      	add	sp, #32
   23202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   23206:	9a07      	ldr	r2, [sp, #28]
   23208:	2100      	movs	r1, #0
   2320a:	2007      	movs	r0, #7
   2320c:	f7ff fc0b 	bl	22a26 <ble_att_cmd_prepare>
    if (buf == NULL) {
   23210:	b178      	cbz	r0, 23232 <ble_att_svr_build_find_type_value_rsp+0x56>
    mtu = ble_att_mtu(conn_handle);
   23212:	4620      	mov	r0, r4
   23214:	f7ff fb11 	bl	2283a <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   23218:	9503      	str	r5, [sp, #12]
   2321a:	9002      	str	r0, [sp, #8]
   2321c:	9b07      	ldr	r3, [sp, #28]
   2321e:	9301      	str	r3, [sp, #4]
   23220:	6833      	ldr	r3, [r6, #0]
   23222:	9300      	str	r3, [sp, #0]
   23224:	9b05      	ldr	r3, [sp, #20]
   23226:	463a      	mov	r2, r7
   23228:	4641      	mov	r1, r8
   2322a:	4620      	mov	r0, r4
   2322c:	f7ff ff62 	bl	230f4 <ble_att_svr_fill_type_value>
    if (rc != 0) {
   23230:	e7e3      	b.n	231fa <ble_att_svr_build_find_type_value_rsp+0x1e>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23232:	2311      	movs	r3, #17
   23234:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   23236:	2006      	movs	r0, #6
        goto done;
   23238:	e7df      	b.n	231fa <ble_att_svr_build_find_type_value_rsp+0x1e>

0002323a <ble_att_svr_service_uuid>:
{
   2323a:	b510      	push	{r4, lr}
   2323c:	b08a      	sub	sp, #40	; 0x28
   2323e:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   23240:	9202      	str	r2, [sp, #8]
   23242:	f10d 0316 	add.w	r3, sp, #22
   23246:	9301      	str	r3, [sp, #4]
   23248:	ab06      	add	r3, sp, #24
   2324a:	9300      	str	r3, [sp, #0]
   2324c:	2310      	movs	r3, #16
   2324e:	2200      	movs	r2, #0
   23250:	4601      	mov	r1, r0
   23252:	f64f 70ff 	movw	r0, #65535	; 0xffff
   23256:	f7ff fef1 	bl	2303c <ble_att_svr_read_flat>
    if (rc != 0) {
   2325a:	b108      	cbz	r0, 23260 <ble_att_svr_service_uuid+0x26>
}
   2325c:	b00a      	add	sp, #40	; 0x28
   2325e:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   23260:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23264:	a906      	add	r1, sp, #24
   23266:	4620      	mov	r0, r4
   23268:	f009 f9aa 	bl	2c5c0 <ble_uuid_init_from_buf>
    return rc;
   2326c:	e7f6      	b.n	2325c <ble_att_svr_service_uuid+0x22>
	...

00023270 <ble_att_svr_build_read_group_type_rsp>:
{
   23270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23274:	b08b      	sub	sp, #44	; 0x2c
   23276:	460e      	mov	r6, r1
   23278:	4617      	mov	r7, r2
   2327a:	4698      	mov	r8, r3
   2327c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   23280:	2500      	movs	r5, #0
    *att_err = 0;
   23282:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23284:	701d      	strb	r5, [r3, #0]
    *err_handle = start_handle;
   23286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   23288:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   2328a:	f7ff fad6 	bl	2283a <ble_att_mtu>
   2328e:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   23290:	f8d9 a000 	ldr.w	sl, [r9]
    *rxom = NULL;
   23294:	f8c9 5000 	str.w	r5, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   23298:	f8ba 1010 	ldrh.w	r1, [sl, #16]
   2329c:	4650      	mov	r0, sl
   2329e:	f7f2 faba 	bl	15816 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   232a2:	4652      	mov	r2, sl
   232a4:	2101      	movs	r1, #1
   232a6:	2011      	movs	r0, #17
   232a8:	f7ff fbbd 	bl	22a26 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   232ac:	b130      	cbz	r0, 232bc <ble_att_svr_build_read_group_type_rsp+0x4c>
   232ae:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   232b0:	2500      	movs	r5, #0
   232b2:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   232b4:	4b4b      	ldr	r3, [pc, #300]	; (233e4 <ble_att_svr_build_read_group_type_rsp+0x174>)
   232b6:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   232b8:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   232ba:	e03e      	b.n	2333a <ble_att_svr_build_read_group_type_rsp+0xca>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   232bc:	2311      	movs	r3, #17
   232be:	9a16      	ldr	r2, [sp, #88]	; 0x58
   232c0:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   232c2:	2306      	movs	r3, #6
    end_group_handle = 0;
   232c4:	46a9      	mov	r9, r5
        goto done;
   232c6:	e059      	b.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   232c8:	6860      	ldr	r0, [r4, #4]
   232ca:	f7ff feac 	bl	23026 <ble_att_svr_is_valid_read_group_type>
   232ce:	b910      	cbnz	r0, 232d6 <ble_att_svr_build_read_group_type_rsp+0x66>
                end_group_handle = entry->ha_handle_id;
   232d0:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   232d4:	e03a      	b.n	2334c <ble_att_svr_build_read_group_type_rsp+0xdc>
                rc = ble_att_svr_read_group_type_entry_write(
   232d6:	ab05      	add	r3, sp, #20
   232d8:	9300      	str	r3, [sp, #0]
   232da:	464b      	mov	r3, r9
   232dc:	462a      	mov	r2, r5
   232de:	9903      	ldr	r1, [sp, #12]
   232e0:	4650      	mov	r0, sl
   232e2:	f7ff fe3a 	bl	22f5a <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   232e6:	4603      	mov	r3, r0
   232e8:	b918      	cbnz	r0, 232f2 <ble_att_svr_build_read_group_type_rsp+0x82>
                end_group_handle = 0;
   232ea:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   232ee:	464d      	mov	r5, r9
   232f0:	e02e      	b.n	23350 <ble_att_svr_build_read_group_type_rsp+0xe0>
                    *err_handle = entry->ha_handle_id;
   232f2:	8962      	ldrh	r2, [r4, #10]
   232f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   232f6:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   232f8:	2806      	cmp	r0, #6
   232fa:	d003      	beq.n	23304 <ble_att_svr_build_read_group_type_rsp+0x94>
                end_group_handle = 0;
   232fc:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   23300:	464d      	mov	r5, r9
                    goto done;
   23302:	e03b      	b.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23304:	2211      	movs	r2, #17
   23306:	9916      	ldr	r1, [sp, #88]	; 0x58
   23308:	700a      	strb	r2, [r1, #0]
   2330a:	e7f7      	b.n	232fc <ble_att_svr_build_read_group_type_rsp+0x8c>
                    *err_handle = entry->ha_handle_id;
   2330c:	8962      	ldrh	r2, [r4, #10]
   2330e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   23310:	800a      	strh	r2, [r1, #0]
                    goto done;
   23312:	e033      	b.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   23314:	f89d 3014 	ldrb.w	r3, [sp, #20]
   23318:	2b10      	cmp	r3, #16
   2331a:	d003      	beq.n	23324 <ble_att_svr_build_read_group_type_rsp+0xb4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   2331c:	2314      	movs	r3, #20
   2331e:	f88b 3000 	strb.w	r3, [fp]
   23322:	e007      	b.n	23334 <ble_att_svr_build_read_group_type_rsp+0xc4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   23324:	2306      	movs	r3, #6
   23326:	f88b 3000 	strb.w	r3, [fp]
   2332a:	e003      	b.n	23334 <ble_att_svr_build_read_group_type_rsp+0xc4>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   2332c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   23330:	2a10      	cmp	r2, #16
   23332:	d123      	bne.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
                start_group_handle = entry->ha_handle_id;
   23334:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   23336:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   23338:	6824      	ldr	r4, [r4, #0]
   2333a:	2c00      	cmp	r4, #0
   2333c:	d03a      	beq.n	233b4 <ble_att_svr_build_read_group_type_rsp+0x144>
        if (entry->ha_handle_id < start_handle) {
   2333e:	8963      	ldrh	r3, [r4, #10]
   23340:	42b3      	cmp	r3, r6
   23342:	d3f9      	bcc.n	23338 <ble_att_svr_build_read_group_type_rsp+0xc8>
        if (entry->ha_handle_id > end_handle) {
   23344:	42bb      	cmp	r3, r7
   23346:	d837      	bhi.n	233b8 <ble_att_svr_build_read_group_type_rsp+0x148>
        if (start_group_handle != 0) {
   23348:	2d00      	cmp	r5, #0
   2334a:	d1bd      	bne.n	232c8 <ble_att_svr_build_read_group_type_rsp+0x58>
        if (start_group_handle == 0) {
   2334c:	2d00      	cmp	r5, #0
   2334e:	d1f3      	bne.n	23338 <ble_att_svr_build_read_group_type_rsp+0xc8>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   23350:	4641      	mov	r1, r8
   23352:	6860      	ldr	r0, [r4, #4]
   23354:	f009 f95c 	bl	2c610 <ble_uuid_cmp>
   23358:	2800      	cmp	r0, #0
   2335a:	d1ed      	bne.n	23338 <ble_att_svr_build_read_group_type_rsp+0xc8>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   2335c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2335e:	a905      	add	r1, sp, #20
   23360:	4620      	mov	r0, r4
   23362:	f7ff ff6a 	bl	2323a <ble_att_svr_service_uuid>
                if (rc != 0) {
   23366:	4603      	mov	r3, r0
   23368:	2800      	cmp	r0, #0
   2336a:	d1cf      	bne.n	2330c <ble_att_svr_build_read_group_type_rsp+0x9c>
                switch (rsp->bagp_length) {
   2336c:	f89b 2000 	ldrb.w	r2, [fp]
   23370:	2a06      	cmp	r2, #6
   23372:	d0db      	beq.n	2332c <ble_att_svr_build_read_group_type_rsp+0xbc>
   23374:	2a14      	cmp	r2, #20
   23376:	d018      	beq.n	233aa <ble_att_svr_build_read_group_type_rsp+0x13a>
   23378:	2a00      	cmp	r2, #0
   2337a:	d0cb      	beq.n	23314 <ble_att_svr_build_read_group_type_rsp+0xa4>
    if (rc == 0) {
   2337c:	bb2b      	cbnz	r3, 233ca <ble_att_svr_build_read_group_type_rsp+0x15a>
        if (start_group_handle != 0) {
   2337e:	b15d      	cbz	r5, 23398 <ble_att_svr_build_read_group_type_rsp+0x128>
            if (entry == NULL) {
   23380:	b1e4      	cbz	r4, 233bc <ble_att_svr_build_read_group_type_rsp+0x14c>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   23382:	ab05      	add	r3, sp, #20
   23384:	9300      	str	r3, [sp, #0]
   23386:	464b      	mov	r3, r9
   23388:	462a      	mov	r2, r5
   2338a:	9903      	ldr	r1, [sp, #12]
   2338c:	4650      	mov	r0, sl
   2338e:	f7ff fde4 	bl	22f5a <ble_att_svr_read_group_type_entry_write>
   23392:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   23394:	2806      	cmp	r0, #6
   23396:	d014      	beq.n	233c2 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   23398:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   2339c:	2a02      	cmp	r2, #2
   2339e:	d814      	bhi.n	233ca <ble_att_svr_build_read_group_type_rsp+0x15a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   233a0:	230a      	movs	r3, #10
   233a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   233a4:	7013      	strb	r3, [r2, #0]
            rc = BLE_HS_ENOENT;
   233a6:	2305      	movs	r3, #5
   233a8:	e010      	b.n	233cc <ble_att_svr_build_read_group_type_rsp+0x15c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   233aa:	f89d 2014 	ldrb.w	r2, [sp, #20]
   233ae:	2a10      	cmp	r2, #16
   233b0:	d1c0      	bne.n	23334 <ble_att_svr_build_read_group_type_rsp+0xc4>
   233b2:	e7e3      	b.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
    rc = 0;
   233b4:	2300      	movs	r3, #0
   233b6:	e7e1      	b.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
            rc = 0;
   233b8:	2300      	movs	r3, #0
   233ba:	e7df      	b.n	2337c <ble_att_svr_build_read_group_type_rsp+0x10c>
                end_group_handle = 0xffff;
   233bc:	f64f 79ff 	movw	r9, #65535	; 0xffff
   233c0:	e7df      	b.n	23382 <ble_att_svr_build_read_group_type_rsp+0x112>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   233c2:	2211      	movs	r2, #17
   233c4:	9916      	ldr	r1, [sp, #88]	; 0x58
   233c6:	700a      	strb	r2, [r1, #0]
   233c8:	e7e6      	b.n	23398 <ble_att_svr_build_read_group_type_rsp+0x128>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   233ca:	b10b      	cbz	r3, 233d0 <ble_att_svr_build_read_group_type_rsp+0x160>
   233cc:	2b04      	cmp	r3, #4
   233ce:	d006      	beq.n	233de <ble_att_svr_build_read_group_type_rsp+0x16e>
    *out_txom = txom;
   233d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   233d2:	f8c2 a000 	str.w	sl, [r2]
}
   233d6:	4618      	mov	r0, r3
   233d8:	b00b      	add	sp, #44	; 0x2c
   233da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   233de:	2300      	movs	r3, #0
   233e0:	e7f6      	b.n	233d0 <ble_att_svr_build_read_group_type_rsp+0x160>
   233e2:	bf00      	nop
   233e4:	10002904 	.word	0x10002904

000233e8 <ble_att_svr_prep_free>:
    if (entry != NULL) {
   233e8:	b148      	cbz	r0, 233fe <ble_att_svr_prep_free+0x16>
{
   233ea:	b510      	push	{r4, lr}
   233ec:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   233ee:	6880      	ldr	r0, [r0, #8]
   233f0:	f7f2 f93a 	bl	15668 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   233f4:	4621      	mov	r1, r4
   233f6:	4802      	ldr	r0, [pc, #8]	; (23400 <ble_att_svr_prep_free+0x18>)
   233f8:	f7f2 fd2d 	bl	15e56 <os_memblock_put>
}
   233fc:	bd10      	pop	{r4, pc}
   233fe:	4770      	bx	lr
   23400:	10002c0c 	.word	0x10002c0c

00023404 <ble_att_svr_prep_alloc>:
{
   23404:	b570      	push	{r4, r5, r6, lr}
   23406:	4606      	mov	r6, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   23408:	480c      	ldr	r0, [pc, #48]	; (2343c <ble_att_svr_prep_alloc+0x38>)
   2340a:	f7f2 fcfc 	bl	15e06 <os_memblock_get>
    if (entry == NULL) {
   2340e:	4604      	mov	r4, r0
   23410:	b150      	cbz	r0, 23428 <ble_att_svr_prep_alloc+0x24>
    memset(entry, 0, sizeof *entry);
   23412:	2300      	movs	r3, #0
   23414:	6003      	str	r3, [r0, #0]
   23416:	6043      	str	r3, [r0, #4]
   23418:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   2341a:	f006 f95d 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
   2341e:	4605      	mov	r5, r0
   23420:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   23422:	b120      	cbz	r0, 2342e <ble_att_svr_prep_alloc+0x2a>
}
   23424:	4620      	mov	r0, r4
   23426:	bd70      	pop	{r4, r5, r6, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   23428:	2309      	movs	r3, #9
   2342a:	7033      	strb	r3, [r6, #0]
        return NULL;
   2342c:	e7fa      	b.n	23424 <ble_att_svr_prep_alloc+0x20>
        ble_att_svr_prep_free(entry);
   2342e:	4620      	mov	r0, r4
   23430:	f7ff ffda 	bl	233e8 <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23434:	2311      	movs	r3, #17
   23436:	7033      	strb	r3, [r6, #0]
        return NULL;
   23438:	462c      	mov	r4, r5
   2343a:	e7f3      	b.n	23424 <ble_att_svr_prep_alloc+0x20>
   2343c:	10002c0c 	.word	0x10002c0c

00023440 <ble_att_svr_insert_prep_entry>:
{
   23440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23444:	4688      	mov	r8, r1
   23446:	4691      	mov	r9, r2
   23448:	461d      	mov	r5, r3
   2344a:	9f08      	ldr	r7, [sp, #32]
    conn = ble_hs_conn_find_assert(conn_handle);
   2344c:	f005 f8dc 	bl	28608 <ble_hs_conn_find_assert>
   23450:	4606      	mov	r6, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   23452:	4638      	mov	r0, r7
   23454:	f7ff ffd6 	bl	23404 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   23458:	b368      	cbz	r0, 234b6 <ble_att_svr_insert_prep_entry+0x76>
   2345a:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   2345c:	f8a0 8004 	strh.w	r8, [r0, #4]
    prep_entry->bape_offset = offset;
   23460:	f8a0 9006 	strh.w	r9, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   23464:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   23466:	3b04      	subs	r3, #4
   23468:	b29b      	uxth	r3, r3
   2346a:	2204      	movs	r2, #4
   2346c:	4629      	mov	r1, r5
   2346e:	6880      	ldr	r0, [r0, #8]
   23470:	f7f2 f978 	bl	15764 <os_mbuf_appendfrom>
    if (rc != 0) {
   23474:	4605      	mov	r5, r0
   23476:	b9a0      	cbnz	r0, 234a2 <ble_att_svr_insert_prep_entry+0x62>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   23478:	464a      	mov	r2, r9
   2347a:	4641      	mov	r1, r8
   2347c:	f106 0044 	add.w	r0, r6, #68	; 0x44
   23480:	f7ff fb20 	bl	22ac4 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   23484:	b198      	cbz	r0, 234ae <ble_att_svr_insert_prep_entry+0x6e>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   23486:	6802      	ldr	r2, [r0, #0]
   23488:	6022      	str	r2, [r4, #0]
   2348a:	6004      	str	r4, [r0, #0]
    return os_time_get();
   2348c:	f7f3 f874 	bl	16578 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   23490:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   23494:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   23496:	64b0      	str	r0, [r6, #72]	; 0x48
    ble_hs_timer_resched();
   23498:	f004 fb34 	bl	27b04 <ble_hs_timer_resched>
}
   2349c:	4628      	mov	r0, r5
   2349e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_att_svr_prep_free(prep_entry);
   234a2:	4620      	mov	r0, r4
   234a4:	f7ff ffa0 	bl	233e8 <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   234a8:	2309      	movs	r3, #9
   234aa:	703b      	strb	r3, [r7, #0]
        return rc;
   234ac:	e7f6      	b.n	2349c <ble_att_svr_insert_prep_entry+0x5c>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   234ae:	6c73      	ldr	r3, [r6, #68]	; 0x44
   234b0:	6023      	str	r3, [r4, #0]
   234b2:	6474      	str	r4, [r6, #68]	; 0x44
   234b4:	e7ea      	b.n	2348c <ble_att_svr_insert_prep_entry+0x4c>
        return BLE_HS_ENOMEM;
   234b6:	2506      	movs	r5, #6
   234b8:	e7f0      	b.n	2349c <ble_att_svr_insert_prep_entry+0x5c>

000234ba <ble_att_svr_prep_extract>:
{
   234ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   234be:	4605      	mov	r5, r0
   234c0:	4689      	mov	r9, r1
   234c2:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   234c4:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   234c6:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   234c8:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   234ca:	e00b      	b.n	234e4 <ble_att_svr_prep_extract+0x2a>
            os_mbuf_concat(om, entry->bape_value);
   234cc:	68a1      	ldr	r1, [r4, #8]
   234ce:	4630      	mov	r0, r6
   234d0:	f7f2 fad5 	bl	15a7e <os_mbuf_concat>
        entry->bape_value = NULL;
   234d4:	2300      	movs	r3, #0
   234d6:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   234d8:	682b      	ldr	r3, [r5, #0]
   234da:	681b      	ldr	r3, [r3, #0]
   234dc:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   234de:	4620      	mov	r0, r4
   234e0:	f7ff ff82 	bl	233e8 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   234e4:	682c      	ldr	r4, [r5, #0]
   234e6:	b134      	cbz	r4, 234f6 <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   234e8:	88a3      	ldrh	r3, [r4, #4]
   234ea:	42bb      	cmp	r3, r7
   234ec:	d103      	bne.n	234f6 <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   234ee:	2e00      	cmp	r6, #0
   234f0:	d1ec      	bne.n	234cc <ble_att_svr_prep_extract+0x12>
            om = entry->bape_value;
   234f2:	68a6      	ldr	r6, [r4, #8]
   234f4:	e7ee      	b.n	234d4 <ble_att_svr_prep_extract+0x1a>
    *out_attr_handle = attr_handle;
   234f6:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   234fa:	f8c8 6000 	str.w	r6, [r8]
}
   234fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00023504 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   23504:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   23506:	4c03      	ldr	r4, [pc, #12]	; (23514 <ble_att_svr_free_start_mem+0x10>)
   23508:	6820      	ldr	r0, [r4, #0]
   2350a:	f00e feff 	bl	3230c <free>
    ble_att_svr_entry_mem = NULL;
   2350e:	2300      	movs	r3, #0
   23510:	6023      	str	r3, [r4, #0]
}
   23512:	bd10      	pop	{r4, pc}
   23514:	100028d8 	.word	0x100028d8

00023518 <ble_att_svr_register>:
{
   23518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2351c:	4680      	mov	r8, r0
   2351e:	460f      	mov	r7, r1
   23520:	4616      	mov	r6, r2
   23522:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   23524:	f7ff fb0e 	bl	22b44 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   23528:	b1b8      	cbz	r0, 2355a <ble_att_svr_register+0x42>
   2352a:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   2352c:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   23530:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   23532:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   23534:	f7ff fabe 	bl	22ab4 <ble_att_svr_next_id>
   23538:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   2353a:	9b06      	ldr	r3, [sp, #24]
   2353c:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   2353e:	9b07      	ldr	r3, [sp, #28]
   23540:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   23542:	2300      	movs	r3, #0
   23544:	6023      	str	r3, [r4, #0]
   23546:	4b07      	ldr	r3, [pc, #28]	; (23564 <ble_att_svr_register+0x4c>)
   23548:	685a      	ldr	r2, [r3, #4]
   2354a:	6014      	str	r4, [r2, #0]
   2354c:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   2354e:	b135      	cbz	r5, 2355e <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   23550:	8963      	ldrh	r3, [r4, #10]
   23552:	802b      	strh	r3, [r5, #0]
    return 0;
   23554:	2000      	movs	r0, #0
}
   23556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   2355a:	2006      	movs	r0, #6
   2355c:	e7fb      	b.n	23556 <ble_att_svr_register+0x3e>
    return 0;
   2355e:	2000      	movs	r0, #0
   23560:	e7f9      	b.n	23556 <ble_att_svr_register+0x3e>
   23562:	bf00      	nop
   23564:	10002904 	.word	0x10002904

00023568 <ble_att_svr_prev_handle>:
}
   23568:	4b01      	ldr	r3, [pc, #4]	; (23570 <ble_att_svr_prev_handle+0x8>)
   2356a:	8818      	ldrh	r0, [r3, #0]
   2356c:	4770      	bx	lr
   2356e:	bf00      	nop
   23570:	10002900 	.word	0x10002900

00023574 <ble_att_svr_find_by_handle>:
{
   23574:	4602      	mov	r2, r0
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   23576:	4b04      	ldr	r3, [pc, #16]	; (23588 <ble_att_svr_find_by_handle+0x14>)
   23578:	6818      	ldr	r0, [r3, #0]
   2357a:	b120      	cbz	r0, 23586 <ble_att_svr_find_by_handle+0x12>
        if (entry->ha_handle_id == handle_id) {
   2357c:	8943      	ldrh	r3, [r0, #10]
   2357e:	4293      	cmp	r3, r2
   23580:	d001      	beq.n	23586 <ble_att_svr_find_by_handle+0x12>
         entry = STAILQ_NEXT(entry, ha_next)) {
   23582:	6800      	ldr	r0, [r0, #0]
   23584:	e7f9      	b.n	2357a <ble_att_svr_find_by_handle+0x6>
}
   23586:	4770      	bx	lr
   23588:	10002904 	.word	0x10002904

0002358c <ble_att_svr_write_handle>:
{
   2358c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2358e:	b083      	sub	sp, #12
   23590:	4607      	mov	r7, r0
   23592:	4614      	mov	r4, r2
   23594:	461d      	mov	r5, r3
   23596:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   23598:	4608      	mov	r0, r1
   2359a:	f7ff ffeb 	bl	23574 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   2359e:	b140      	cbz	r0, 235b2 <ble_att_svr_write_handle+0x26>
   235a0:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   235a2:	9600      	str	r6, [sp, #0]
   235a4:	462b      	mov	r3, r5
   235a6:	4622      	mov	r2, r4
   235a8:	4638      	mov	r0, r7
   235aa:	f7ff fb9f 	bl	22cec <ble_att_svr_write>
}
   235ae:	b003      	add	sp, #12
   235b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   235b2:	b10e      	cbz	r6, 235b8 <ble_att_svr_write_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   235b4:	2301      	movs	r3, #1
   235b6:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   235b8:	2005      	movs	r0, #5
   235ba:	e7f8      	b.n	235ae <ble_att_svr_write_handle+0x22>

000235bc <ble_att_svr_prep_write>:
{
   235bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235c0:	b084      	sub	sp, #16
   235c2:	4606      	mov	r6, r0
   235c4:	460d      	mov	r5, r1
   235c6:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   235c8:	2300      	movs	r3, #0
   235ca:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   235cc:	4611      	mov	r1, r2
   235ce:	4628      	mov	r0, r5
   235d0:	f7ff fa8a 	bl	22ae8 <ble_att_svr_prep_validate>
    if (rc != 0) {
   235d4:	4680      	mov	r8, r0
   235d6:	b9f8      	cbnz	r0, 23618 <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   235d8:	682b      	ldr	r3, [r5, #0]
   235da:	b1eb      	cbz	r3, 23618 <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   235dc:	aa03      	add	r2, sp, #12
   235de:	f10d 010a 	add.w	r1, sp, #10
   235e2:	4628      	mov	r0, r5
   235e4:	f7ff ff69 	bl	234ba <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   235e8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   235ec:	f7ff ffc2 	bl	23574 <ble_att_svr_find_by_handle>
   235f0:	4601      	mov	r1, r0
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   235f2:	f10d 0309 	add.w	r3, sp, #9
   235f6:	9300      	str	r3, [sp, #0]
   235f8:	ab03      	add	r3, sp, #12
   235fa:	2200      	movs	r2, #0
   235fc:	4630      	mov	r0, r6
   235fe:	f7ff fb75 	bl	22cec <ble_att_svr_write>
   23602:	4604      	mov	r4, r0
        os_mbuf_free_chain(om);
   23604:	9803      	ldr	r0, [sp, #12]
   23606:	f7f2 f82f 	bl	15668 <os_mbuf_free_chain>
        if (rc != 0) {
   2360a:	2c00      	cmp	r4, #0
   2360c:	d0e4      	beq.n	235d8 <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   2360e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   23612:	803b      	strh	r3, [r7, #0]
            return att_err;
   23614:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   23618:	4640      	mov	r0, r8
   2361a:	b004      	add	sp, #16
   2361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023620 <ble_att_svr_find_by_uuid>:
{
   23620:	b570      	push	{r4, r5, r6, lr}
   23622:	460d      	mov	r5, r1
   23624:	4616      	mov	r6, r2
    if (prev == NULL) {
   23626:	b108      	cbz	r0, 2362c <ble_att_svr_find_by_uuid+0xc>
        entry = STAILQ_NEXT(prev, ha_next);
   23628:	6804      	ldr	r4, [r0, #0]
   2362a:	e003      	b.n	23634 <ble_att_svr_find_by_uuid+0x14>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   2362c:	4b09      	ldr	r3, [pc, #36]	; (23654 <ble_att_svr_find_by_uuid+0x34>)
   2362e:	681c      	ldr	r4, [r3, #0]
   23630:	e000      	b.n	23634 <ble_att_svr_find_by_uuid+0x14>
         entry = STAILQ_NEXT(entry, ha_next)) {
   23632:	6824      	ldr	r4, [r4, #0]
    for (;
   23634:	b15c      	cbz	r4, 2364e <ble_att_svr_find_by_uuid+0x2e>
         entry != NULL && entry->ha_handle_id <= end_handle;
   23636:	8963      	ldrh	r3, [r4, #10]
   23638:	42b3      	cmp	r3, r6
   2363a:	d807      	bhi.n	2364c <ble_att_svr_find_by_uuid+0x2c>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   2363c:	b13d      	cbz	r5, 2364e <ble_att_svr_find_by_uuid+0x2e>
   2363e:	4629      	mov	r1, r5
   23640:	6860      	ldr	r0, [r4, #4]
   23642:	f008 ffe5 	bl	2c610 <ble_uuid_cmp>
   23646:	2800      	cmp	r0, #0
   23648:	d1f3      	bne.n	23632 <ble_att_svr_find_by_uuid+0x12>
   2364a:	e000      	b.n	2364e <ble_att_svr_find_by_uuid+0x2e>
    return NULL;
   2364c:	2400      	movs	r4, #0
}
   2364e:	4620      	mov	r0, r4
   23650:	bd70      	pop	{r4, r5, r6, pc}
   23652:	bf00      	nop
   23654:	10002904 	.word	0x10002904

00023658 <ble_att_svr_build_read_type_rsp>:
{
   23658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2365c:	b08f      	sub	sp, #60	; 0x3c
   2365e:	9005      	str	r0, [sp, #20]
   23660:	460d      	mov	r5, r1
   23662:	4616      	mov	r6, r2
   23664:	461f      	mov	r7, r3
   23666:	9b18      	ldr	r3, [sp, #96]	; 0x60
   23668:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   2366c:	2200      	movs	r2, #0
   2366e:	f88b 2000 	strb.w	r2, [fp]
    *err_handle = start_handle;
   23672:	991b      	ldr	r1, [sp, #108]	; 0x6c
   23674:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   23676:	f8d3 8000 	ldr.w	r8, [r3]
    *rxom = NULL;
   2367a:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   2367c:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   23680:	4640      	mov	r0, r8
   23682:	f7f2 f8c8 	bl	15816 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   23686:	4642      	mov	r2, r8
   23688:	2101      	movs	r1, #1
   2368a:	2009      	movs	r0, #9
   2368c:	f7ff f9cb 	bl	22a26 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   23690:	9007      	str	r0, [sp, #28]
   23692:	b148      	cbz	r0, 236a8 <ble_att_svr_build_read_type_rsp+0x50>
    mtu = ble_att_mtu(conn_handle);
   23694:	9805      	ldr	r0, [sp, #20]
   23696:	f7ff f8d0 	bl	2283a <ble_att_mtu>
   2369a:	4681      	mov	r9, r0
    prev_attr_len = 0;
   2369c:	f04f 0a00 	mov.w	sl, #0
    entry_written = 0;
   236a0:	f8cd a018 	str.w	sl, [sp, #24]
    entry = NULL;
   236a4:	4654      	mov	r4, sl
   236a6:	e029      	b.n	236fc <ble_att_svr_build_read_type_rsp+0xa4>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   236a8:	2311      	movs	r3, #17
   236aa:	f88b 3000 	strb.w	r3, [fp]
        *err_handle = 0;
   236ae:	2300      	movs	r3, #0
   236b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   236b2:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   236b4:	2206      	movs	r2, #6
    prev_attr_len = 0;
   236b6:	469a      	mov	sl, r3
    entry_written = 0;
   236b8:	9306      	str	r3, [sp, #24]
        goto done;
   236ba:	e052      	b.n	23762 <ble_att_svr_build_read_type_rsp+0x10a>
                *err_handle = entry->ha_handle_id;
   236bc:	8963      	ldrh	r3, [r4, #10]
   236be:	991b      	ldr	r1, [sp, #108]	; 0x6c
   236c0:	800b      	strh	r3, [r1, #0]
                goto done;
   236c2:	e04e      	b.n	23762 <ble_att_svr_build_read_type_rsp+0x10a>
            } else if (prev_attr_len != attr_len) {
   236c4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   236c8:	4553      	cmp	r3, sl
   236ca:	d14a      	bne.n	23762 <ble_att_svr_build_read_type_rsp+0x10a>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   236cc:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   236d0:	3302      	adds	r3, #2
   236d2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   236d6:	440b      	add	r3, r1
            if (txomlen > mtu) {
   236d8:	4599      	cmp	r9, r3
   236da:	db42      	blt.n	23762 <ble_att_svr_build_read_type_rsp+0x10a>
            data = os_mbuf_extend(txom, 2 + attr_len);
   236dc:	3102      	adds	r1, #2
   236de:	b289      	uxth	r1, r1
   236e0:	4640      	mov	r0, r8
   236e2:	f7f2 f9ee 	bl	15ac2 <os_mbuf_extend>
            if (data == NULL) {
   236e6:	b398      	cbz	r0, 23750 <ble_att_svr_build_read_type_rsp+0xf8>
            data->handle = htole16(entry->ha_handle_id);
   236e8:	8962      	ldrh	r2, [r4, #10]
   236ea:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   236ee:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   236f2:	a908      	add	r1, sp, #32
   236f4:	f7f3 f9da 	bl	16aac <memcpy>
            entry_written = 1;
   236f8:	2301      	movs	r3, #1
   236fa:	9306      	str	r3, [sp, #24]
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   236fc:	4632      	mov	r2, r6
   236fe:	4639      	mov	r1, r7
   23700:	4620      	mov	r0, r4
   23702:	f7ff ff8d 	bl	23620 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   23706:	4604      	mov	r4, r0
   23708:	b350      	cbz	r0, 23760 <ble_att_svr_build_read_type_rsp+0x108>
        if (entry->ha_handle_id >= start_handle) {
   2370a:	8943      	ldrh	r3, [r0, #10]
   2370c:	42ab      	cmp	r3, r5
   2370e:	d3f5      	bcc.n	236fc <ble_att_svr_build_read_type_rsp+0xa4>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   23710:	f8cd b008 	str.w	fp, [sp, #8]
   23714:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   23718:	9301      	str	r3, [sp, #4]
   2371a:	ab08      	add	r3, sp, #32
   2371c:	9300      	str	r3, [sp, #0]
   2371e:	2313      	movs	r3, #19
   23720:	2200      	movs	r2, #0
   23722:	4601      	mov	r1, r0
   23724:	9805      	ldr	r0, [sp, #20]
   23726:	f7ff fc89 	bl	2303c <ble_att_svr_read_flat>
            if (rc != 0) {
   2372a:	4602      	mov	r2, r0
   2372c:	2800      	cmp	r0, #0
   2372e:	d1c5      	bne.n	236bc <ble_att_svr_build_read_type_rsp+0x64>
            if (attr_len > mtu - 4) {
   23730:	f1a9 0303 	sub.w	r3, r9, #3
   23734:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   23738:	428b      	cmp	r3, r1
   2373a:	dc03      	bgt.n	23744 <ble_att_svr_build_read_type_rsp+0xec>
                attr_len = mtu - 4;
   2373c:	f1a9 0304 	sub.w	r3, r9, #4
   23740:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   23744:	f1ba 0f00 	cmp.w	sl, #0
   23748:	d1bc      	bne.n	236c4 <ble_att_svr_build_read_type_rsp+0x6c>
                prev_attr_len = attr_len;
   2374a:	f8bd a036 	ldrh.w	sl, [sp, #54]	; 0x36
   2374e:	e7bd      	b.n	236cc <ble_att_svr_build_read_type_rsp+0x74>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23750:	2311      	movs	r3, #17
   23752:	f88b 3000 	strb.w	r3, [fp]
                *err_handle = entry->ha_handle_id;
   23756:	8963      	ldrh	r3, [r4, #10]
   23758:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2375a:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   2375c:	2206      	movs	r2, #6
                goto done;
   2375e:	e000      	b.n	23762 <ble_att_svr_build_read_type_rsp+0x10a>
            rc = BLE_HS_ENOENT;
   23760:	2205      	movs	r2, #5
    if (!entry_written) {
   23762:	9b06      	ldr	r3, [sp, #24]
   23764:	b943      	cbnz	r3, 23778 <ble_att_svr_build_read_type_rsp+0x120>
        if (*att_err == 0) {
   23766:	f89b 3000 	ldrb.w	r3, [fp]
   2376a:	b913      	cbnz	r3, 23772 <ble_att_svr_build_read_type_rsp+0x11a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   2376c:	230a      	movs	r3, #10
   2376e:	f88b 3000 	strb.w	r3, [fp]
        if (rc == 0) {
   23772:	b94a      	cbnz	r2, 23788 <ble_att_svr_build_read_type_rsp+0x130>
            rc = BLE_HS_ENOENT;
   23774:	2205      	movs	r2, #5
   23776:	e007      	b.n	23788 <ble_att_svr_build_read_type_rsp+0x130>
        *att_err = 0;
   23778:	2200      	movs	r2, #0
   2377a:	f88b 2000 	strb.w	r2, [fp]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   2377e:	f10a 0a02 	add.w	sl, sl, #2
   23782:	9b07      	ldr	r3, [sp, #28]
   23784:	f883 a000 	strb.w	sl, [r3]
    *out_txom = txom;
   23788:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2378a:	f8c3 8000 	str.w	r8, [r3]
}
   2378e:	4610      	mov	r0, r2
   23790:	b00f      	add	sp, #60	; 0x3c
   23792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023796 <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   23796:	6802      	ldr	r2, [r0, #0]
   23798:	b11a      	cbz	r2, 237a2 <ble_att_svr_ticks_until_tmo+0xc>
    time_diff = svr->basc_prep_timeout_at - now;
   2379a:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   2379c:	1a40      	subs	r0, r0, r1
   2379e:	d403      	bmi.n	237a8 <ble_att_svr_ticks_until_tmo+0x12>
}
   237a0:	4770      	bx	lr
        return BLE_HS_FOREVER;
   237a2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   237a6:	4770      	bx	lr
        return 0;
   237a8:	2000      	movs	r0, #0
   237aa:	e7f9      	b.n	237a0 <ble_att_svr_ticks_until_tmo+0xa>

000237ac <ble_att_svr_read_handle>:
{
   237ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   237ae:	b083      	sub	sp, #12
   237b0:	4607      	mov	r7, r0
   237b2:	4614      	mov	r4, r2
   237b4:	461d      	mov	r5, r3
   237b6:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   237b8:	4608      	mov	r0, r1
   237ba:	f7ff fedb 	bl	23574 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   237be:	b140      	cbz	r0, 237d2 <ble_att_svr_read_handle+0x26>
   237c0:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   237c2:	9600      	str	r6, [sp, #0]
   237c4:	462b      	mov	r3, r5
   237c6:	4622      	mov	r2, r4
   237c8:	4638      	mov	r0, r7
   237ca:	f7ff fa5e 	bl	22c8a <ble_att_svr_read>
}
   237ce:	b003      	add	sp, #12
   237d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   237d2:	b10e      	cbz	r6, 237d8 <ble_att_svr_read_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   237d4:	2301      	movs	r3, #1
   237d6:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   237d8:	2005      	movs	r0, #5
   237da:	e7f8      	b.n	237ce <ble_att_svr_read_handle+0x22>

000237dc <ble_att_svr_build_read_mult_rsp>:
{
   237dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   237e0:	b084      	sub	sp, #16
   237e2:	4680      	mov	r8, r0
   237e4:	460c      	mov	r4, r1
   237e6:	4691      	mov	r9, r2
   237e8:	461e      	mov	r6, r3
    mtu = ble_att_mtu(conn_handle);
   237ea:	f7ff f826 	bl	2283a <ble_att_mtu>
   237ee:	4607      	mov	r7, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   237f0:	4632      	mov	r2, r6
   237f2:	a903      	add	r1, sp, #12
   237f4:	4620      	mov	r0, r4
   237f6:	f7ff faee 	bl	22dd6 <ble_att_svr_pkt>
    if (rc != 0) {
   237fa:	4682      	mov	sl, r0
   237fc:	b148      	cbz	r0, 23812 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   237fe:	2300      	movs	r3, #0
   23800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23802:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   23804:	9b03      	ldr	r3, [sp, #12]
   23806:	f8c9 3000 	str.w	r3, [r9]
}
   2380a:	4650      	mov	r0, sl
   2380c:	b004      	add	sp, #16
   2380e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   23812:	9a03      	ldr	r2, [sp, #12]
   23814:	2100      	movs	r1, #0
   23816:	200f      	movs	r0, #15
   23818:	f7ff f905 	bl	22a26 <ble_att_cmd_prepare>
   2381c:	b318      	cbz	r0, 23866 <ble_att_svr_build_read_mult_rsp+0x8a>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   2381e:	6823      	ldr	r3, [r4, #0]
   23820:	8a1b      	ldrh	r3, [r3, #16]
   23822:	2b01      	cmp	r3, #1
   23824:	d9ee      	bls.n	23804 <ble_att_svr_build_read_mult_rsp+0x28>
   23826:	9b03      	ldr	r3, [sp, #12]
   23828:	8a1b      	ldrh	r3, [r3, #16]
   2382a:	42bb      	cmp	r3, r7
   2382c:	d2ea      	bcs.n	23804 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   2382e:	4632      	mov	r2, r6
   23830:	2102      	movs	r1, #2
   23832:	4620      	mov	r0, r4
   23834:	f7ff fa8c 	bl	22d50 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   23838:	b9e8      	cbnz	r0, 23876 <ble_att_svr_build_read_mult_rsp+0x9a>
        handle = get_le16((*rxom)->om_data);
   2383a:	6823      	ldr	r3, [r4, #0]
   2383c:	6818      	ldr	r0, [r3, #0]
   2383e:	f00e fb6e 	bl	31f1e <get_le16>
   23842:	4605      	mov	r5, r0
        os_mbuf_adj(*rxom, 2);
   23844:	2102      	movs	r1, #2
   23846:	6820      	ldr	r0, [r4, #0]
   23848:	f7f1 ffe5 	bl	15816 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   2384c:	9600      	str	r6, [sp, #0]
   2384e:	9b03      	ldr	r3, [sp, #12]
   23850:	2200      	movs	r2, #0
   23852:	4629      	mov	r1, r5
   23854:	4640      	mov	r0, r8
   23856:	f7ff ffa9 	bl	237ac <ble_att_svr_read_handle>
        if (rc != 0) {
   2385a:	2800      	cmp	r0, #0
   2385c:	d0df      	beq.n	2381e <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   2385e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23860:	8015      	strh	r5, [r2, #0]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   23862:	4682      	mov	sl, r0
            goto done;
   23864:	e7ce      	b.n	23804 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23866:	2311      	movs	r3, #17
   23868:	7033      	strb	r3, [r6, #0]
        *err_handle = 0;
   2386a:	2300      	movs	r3, #0
   2386c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2386e:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   23870:	f04f 0a06 	mov.w	sl, #6
        goto done;
   23874:	e7c6      	b.n	23804 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   23876:	2200      	movs	r2, #0
   23878:	990c      	ldr	r1, [sp, #48]	; 0x30
   2387a:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   2387c:	4682      	mov	sl, r0
            goto done;
   2387e:	e7c1      	b.n	23804 <ble_att_svr_build_read_mult_rsp+0x28>

00023880 <ble_att_svr_tx_error_rsp>:
{
   23880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23882:	4605      	mov	r5, r0
   23884:	460c      	mov	r4, r1
   23886:	4617      	mov	r7, r2
   23888:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   2388a:	460a      	mov	r2, r1
   2388c:	2104      	movs	r1, #4
   2388e:	2001      	movs	r0, #1
   23890:	f7ff f8c9 	bl	22a26 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   23894:	b150      	cbz	r0, 238ac <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   23896:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   23898:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   2389c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   238a0:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   238a2:	4621      	mov	r1, r4
   238a4:	4628      	mov	r0, r5
   238a6:	f7ff f8df 	bl	22a68 <ble_att_tx>
}
   238aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   238ac:	2006      	movs	r0, #6
   238ae:	e7fc      	b.n	238aa <ble_att_svr_tx_error_rsp+0x2a>

000238b0 <ble_att_svr_tx_rsp>:
{
   238b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   238b4:	b085      	sub	sp, #20
   238b6:	4607      	mov	r7, r0
   238b8:	4614      	mov	r4, r2
   238ba:	461e      	mov	r6, r3
   238bc:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   238c0:	4689      	mov	r9, r1
   238c2:	b111      	cbz	r1, 238ca <ble_att_svr_tx_rsp+0x1a>
   238c4:	f1b8 0f00 	cmp.w	r8, #0
   238c8:	d03d      	beq.n	23946 <ble_att_svr_tx_rsp+0x96>
        ble_hs_lock();
   238ca:	f004 f829 	bl	27920 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   238ce:	aa03      	add	r2, sp, #12
   238d0:	a902      	add	r1, sp, #8
   238d2:	4638      	mov	r0, r7
   238d4:	f7fe fe8b 	bl	225ee <ble_att_conn_chan_find>
        if (rc != 0) {
   238d8:	4605      	mov	r5, r0
   238da:	b918      	cbnz	r0, 238e4 <ble_att_svr_tx_rsp+0x34>
            if (hs_status == 0) {
   238dc:	f1b9 0f00 	cmp.w	r9, #0
   238e0:	d018      	beq.n	23914 <ble_att_svr_tx_rsp+0x64>
   238e2:	464d      	mov	r5, r9
        ble_hs_unlock();
   238e4:	f004 f820 	bl	27928 <ble_hs_unlock>
        if (hs_status != 0) {
   238e8:	b375      	cbz	r5, 23948 <ble_att_svr_tx_rsp+0x98>
            STATS_INC(ble_att_stats, error_rsp_tx);
   238ea:	4a1b      	ldr	r2, [pc, #108]	; (23958 <ble_att_svr_tx_rsp+0xa8>)
   238ec:	6913      	ldr	r3, [r2, #16]
   238ee:	3301      	adds	r3, #1
   238f0:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   238f2:	b324      	cbz	r4, 2393e <ble_att_svr_tx_rsp+0x8e>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   238f4:	8a21      	ldrh	r1, [r4, #16]
   238f6:	4620      	mov	r0, r4
   238f8:	f7f1 ff8d 	bl	15816 <os_mbuf_adj>
            if (om != NULL) {
   238fc:	b324      	cbz	r4, 23948 <ble_att_svr_tx_rsp+0x98>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   238fe:	f8cd 8000 	str.w	r8, [sp]
   23902:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   23906:	4632      	mov	r2, r6
   23908:	4621      	mov	r1, r4
   2390a:	4638      	mov	r0, r7
   2390c:	f7ff ffb8 	bl	23880 <ble_att_svr_tx_error_rsp>
                om = NULL;
   23910:	2400      	movs	r4, #0
   23912:	e019      	b.n	23948 <ble_att_svr_tx_rsp+0x98>
                ble_att_inc_tx_stat(om->om_data[0]);
   23914:	6823      	ldr	r3, [r4, #0]
   23916:	7818      	ldrb	r0, [r3, #0]
   23918:	f7fe fe70 	bl	225fc <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   2391c:	4621      	mov	r1, r4
   2391e:	9803      	ldr	r0, [sp, #12]
   23920:	f7fe ff7d 	bl	2281e <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   23924:	4622      	mov	r2, r4
   23926:	9903      	ldr	r1, [sp, #12]
   23928:	9802      	ldr	r0, [sp, #8]
   2392a:	f006 fb2f 	bl	29f8c <ble_l2cap_tx>
                if (hs_status != 0) {
   2392e:	4605      	mov	r5, r0
   23930:	b908      	cbnz	r0, 23936 <ble_att_svr_tx_rsp+0x86>
                om = NULL;
   23932:	2400      	movs	r4, #0
   23934:	e7d6      	b.n	238e4 <ble_att_svr_tx_rsp+0x34>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   23936:	f04f 080e 	mov.w	r8, #14
                om = NULL;
   2393a:	2400      	movs	r4, #0
   2393c:	e7d2      	b.n	238e4 <ble_att_svr_tx_rsp+0x34>
                om = ble_hs_mbuf_l2cap_pkt();
   2393e:	f005 fecb 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
   23942:	4604      	mov	r4, r0
   23944:	e7da      	b.n	238fc <ble_att_svr_tx_rsp+0x4c>
   23946:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   23948:	4620      	mov	r0, r4
   2394a:	f7f1 fe8d 	bl	15668 <os_mbuf_free_chain>
}
   2394e:	4628      	mov	r0, r5
   23950:	b005      	add	sp, #20
   23952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23956:	bf00      	nop
   23958:	100027f4 	.word	0x100027f4

0002395c <ble_att_svr_rx_mtu>:
{
   2395c:	b570      	push	{r4, r5, r6, lr}
   2395e:	b086      	sub	sp, #24
   23960:	4605      	mov	r5, r0
   23962:	460c      	mov	r4, r1
    txom = NULL;
   23964:	2300      	movs	r3, #0
   23966:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   23968:	f10d 020b 	add.w	r2, sp, #11
   2396c:	2102      	movs	r1, #2
   2396e:	4620      	mov	r0, r4
   23970:	f7ff f9ee 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23974:	b180      	cbz	r0, 23998 <ble_att_svr_rx_mtu+0x3c>
   23976:	4601      	mov	r1, r0
    mtu = 0;
   23978:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   2397a:	2300      	movs	r3, #0
   2397c:	9301      	str	r3, [sp, #4]
   2397e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23982:	9300      	str	r3, [sp, #0]
   23984:	2302      	movs	r3, #2
   23986:	9a03      	ldr	r2, [sp, #12]
   23988:	4628      	mov	r0, r5
   2398a:	f7ff ff91 	bl	238b0 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   2398e:	4604      	mov	r4, r0
   23990:	b170      	cbz	r0, 239b0 <ble_att_svr_rx_mtu+0x54>
}
   23992:	4620      	mov	r0, r4
   23994:	b006      	add	sp, #24
   23996:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   23998:	6823      	ldr	r3, [r4, #0]
   2399a:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   2399c:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   2399e:	f10d 030b 	add.w	r3, sp, #11
   239a2:	aa03      	add	r2, sp, #12
   239a4:	4621      	mov	r1, r4
   239a6:	4628      	mov	r0, r5
   239a8:	f7ff f9de 	bl	22d68 <ble_att_svr_build_mtu_rsp>
   239ac:	4601      	mov	r1, r0
    if (rc != 0) {
   239ae:	e7e4      	b.n	2397a <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   239b0:	f003 ffb6 	bl	27920 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   239b4:	aa05      	add	r2, sp, #20
   239b6:	a904      	add	r1, sp, #16
   239b8:	4628      	mov	r0, r5
   239ba:	f7fe fe18 	bl	225ee <ble_att_conn_chan_find>
        if (rc == 0) {
   239be:	4604      	mov	r4, r0
   239c0:	b148      	cbz	r0, 239d6 <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   239c2:	f003 ffb1 	bl	27928 <ble_hs_unlock>
        if (rc == 0) {
   239c6:	2c00      	cmp	r4, #0
   239c8:	d1e3      	bne.n	23992 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   239ca:	4632      	mov	r2, r6
   239cc:	2104      	movs	r1, #4
   239ce:	4628      	mov	r0, r5
   239d0:	f001 fe4d 	bl	2566e <ble_gap_mtu_event>
    return rc;
   239d4:	e7dd      	b.n	23992 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   239d6:	4631      	mov	r1, r6
   239d8:	9805      	ldr	r0, [sp, #20]
   239da:	f7fe ff0b 	bl	227f4 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   239de:	9805      	ldr	r0, [sp, #20]
   239e0:	7b83      	ldrb	r3, [r0, #14]
   239e2:	f043 0301 	orr.w	r3, r3, #1
   239e6:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   239e8:	f7fe ff09 	bl	227fe <ble_att_chan_mtu>
   239ec:	4606      	mov	r6, r0
   239ee:	e7e8      	b.n	239c2 <ble_att_svr_rx_mtu+0x66>

000239f0 <ble_att_svr_rx_find_info>:
{
   239f0:	b570      	push	{r4, r5, r6, lr}
   239f2:	b084      	sub	sp, #16
   239f4:	4606      	mov	r6, r0
   239f6:	460c      	mov	r4, r1
    txom = NULL;
   239f8:	2300      	movs	r3, #0
   239fa:	9303      	str	r3, [sp, #12]
    att_err = 0;
   239fc:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23a00:	f10d 020b 	add.w	r2, sp, #11
   23a04:	2104      	movs	r1, #4
   23a06:	4620      	mov	r0, r4
   23a08:	f7ff f9a2 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23a0c:	bb20      	cbnz	r0, 23a58 <ble_att_svr_rx_find_info+0x68>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   23a0e:	6823      	ldr	r3, [r4, #0]
   23a10:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   23a12:	881d      	ldrh	r5, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   23a14:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   23a16:	4295      	cmp	r5, r2
   23a18:	d800      	bhi.n	23a1c <ble_att_svr_rx_find_info+0x2c>
   23a1a:	b975      	cbnz	r5, 23a3a <ble_att_svr_rx_find_info+0x4a>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   23a1c:	2301      	movs	r3, #1
   23a1e:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   23a22:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   23a24:	9501      	str	r5, [sp, #4]
   23a26:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23a2a:	9300      	str	r3, [sp, #0]
   23a2c:	2304      	movs	r3, #4
   23a2e:	9a03      	ldr	r2, [sp, #12]
   23a30:	4630      	mov	r0, r6
   23a32:	f7ff ff3d 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23a36:	b004      	add	sp, #16
   23a38:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   23a3a:	f10d 030b 	add.w	r3, sp, #11
   23a3e:	9301      	str	r3, [sp, #4]
   23a40:	ab03      	add	r3, sp, #12
   23a42:	9300      	str	r3, [sp, #0]
   23a44:	4623      	mov	r3, r4
   23a46:	4629      	mov	r1, r5
   23a48:	4630      	mov	r0, r6
   23a4a:	f7ff fa57 	bl	22efc <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   23a4e:	4601      	mov	r1, r0
   23a50:	2800      	cmp	r0, #0
   23a52:	d1e7      	bne.n	23a24 <ble_att_svr_rx_find_info+0x34>
    err_handle = 0;
   23a54:	2500      	movs	r5, #0
   23a56:	e7e5      	b.n	23a24 <ble_att_svr_rx_find_info+0x34>
   23a58:	4601      	mov	r1, r0
        err_handle = 0;
   23a5a:	2500      	movs	r5, #0
   23a5c:	e7e2      	b.n	23a24 <ble_att_svr_rx_find_info+0x34>

00023a5e <ble_att_svr_rx_find_type_value>:
{
   23a5e:	b570      	push	{r4, r5, r6, lr}
   23a60:	b088      	sub	sp, #32
   23a62:	4605      	mov	r5, r0
   23a64:	460c      	mov	r4, r1
    txom = NULL;
   23a66:	2300      	movs	r3, #0
   23a68:	9306      	str	r3, [sp, #24]
    att_err = 0;
   23a6a:	f88d 3017 	strb.w	r3, [sp, #23]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23a6e:	f10d 0217 	add.w	r2, sp, #23
   23a72:	2106      	movs	r1, #6
   23a74:	4620      	mov	r0, r4
   23a76:	f7ff f96b 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23a7a:	bb58      	cbnz	r0, 23ad4 <ble_att_svr_rx_find_type_value+0x76>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   23a7c:	6823      	ldr	r3, [r4, #0]
   23a7e:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   23a80:	881e      	ldrh	r6, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   23a82:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   23a84:	889b      	ldrh	r3, [r3, #4]
   23a86:	2110      	movs	r1, #16
   23a88:	f88d 101c 	strb.w	r1, [sp, #28]
   23a8c:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   23a90:	4296      	cmp	r6, r2
   23a92:	d800      	bhi.n	23a96 <ble_att_svr_rx_find_type_value+0x38>
   23a94:	b976      	cbnz	r6, 23ab4 <ble_att_svr_rx_find_type_value+0x56>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   23a96:	2301      	movs	r3, #1
   23a98:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   23a9c:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   23a9e:	9601      	str	r6, [sp, #4]
   23aa0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23aa4:	9300      	str	r3, [sp, #0]
   23aa6:	2306      	movs	r3, #6
   23aa8:	9a06      	ldr	r2, [sp, #24]
   23aaa:	4628      	mov	r0, r5
   23aac:	f7ff ff00 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23ab0:	b008      	add	sp, #32
   23ab2:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   23ab4:	f10d 0317 	add.w	r3, sp, #23
   23ab8:	9302      	str	r3, [sp, #8]
   23aba:	ab06      	add	r3, sp, #24
   23abc:	9301      	str	r3, [sp, #4]
   23abe:	9400      	str	r4, [sp, #0]
   23ac0:	9b07      	ldr	r3, [sp, #28]
   23ac2:	4631      	mov	r1, r6
   23ac4:	4628      	mov	r0, r5
   23ac6:	f7ff fb89 	bl	231dc <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   23aca:	4601      	mov	r1, r0
   23acc:	2800      	cmp	r0, #0
   23ace:	d1e6      	bne.n	23a9e <ble_att_svr_rx_find_type_value+0x40>
    err_handle = 0;
   23ad0:	2600      	movs	r6, #0
   23ad2:	e7e4      	b.n	23a9e <ble_att_svr_rx_find_type_value+0x40>
   23ad4:	4601      	mov	r1, r0
   23ad6:	2600      	movs	r6, #0
   23ad8:	e7e1      	b.n	23a9e <ble_att_svr_rx_find_type_value+0x40>

00023ada <ble_att_svr_rx_read_type>:
{
   23ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ade:	b08c      	sub	sp, #48	; 0x30
   23ae0:	4605      	mov	r5, r0
   23ae2:	460c      	mov	r4, r1
    txom = NULL;
   23ae4:	2300      	movs	r3, #0
   23ae6:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   23ae8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   23aec:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   23af0:	680b      	ldr	r3, [r1, #0]
   23af2:	8a1e      	ldrh	r6, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   23af4:	2e06      	cmp	r6, #6
   23af6:	d001      	beq.n	23afc <ble_att_svr_rx_read_type+0x22>
   23af8:	2e14      	cmp	r6, #20
   23afa:	d132      	bne.n	23b62 <ble_att_svr_rx_read_type+0x88>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   23afc:	f10d 0213 	add.w	r2, sp, #19
   23b00:	4631      	mov	r1, r6
   23b02:	4620      	mov	r0, r4
   23b04:	f7ff f924 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23b08:	4601      	mov	r1, r0
   23b0a:	bb58      	cbnz	r0, 23b64 <ble_att_svr_rx_read_type+0x8a>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   23b0c:	6821      	ldr	r1, [r4, #0]
   23b0e:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   23b10:	881a      	ldrh	r2, [r3, #0]
   23b12:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   23b14:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   23b18:	4547      	cmp	r7, r8
   23b1a:	d800      	bhi.n	23b1e <ble_att_svr_rx_read_type+0x44>
   23b1c:	b937      	cbnz	r7, 23b2c <ble_att_svr_rx_read_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   23b1e:	2301      	movs	r3, #1
   23b20:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   23b24:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   23b28:	210a      	movs	r1, #10
        goto done;
   23b2a:	e01b      	b.n	23b64 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   23b2c:	1f33      	subs	r3, r6, #4
   23b2e:	2204      	movs	r2, #4
   23b30:	a805      	add	r0, sp, #20
   23b32:	f008 fe05 	bl	2c740 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   23b36:	b118      	cbz	r0, 23b40 <ble_att_svr_rx_read_type+0x66>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   23b38:	2104      	movs	r1, #4
   23b3a:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   23b3e:	e011      	b.n	23b64 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   23b40:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   23b44:	9303      	str	r3, [sp, #12]
   23b46:	f10d 0313 	add.w	r3, sp, #19
   23b4a:	9302      	str	r3, [sp, #8]
   23b4c:	ab0b      	add	r3, sp, #44	; 0x2c
   23b4e:	9301      	str	r3, [sp, #4]
   23b50:	9400      	str	r4, [sp, #0]
   23b52:	ab05      	add	r3, sp, #20
   23b54:	4642      	mov	r2, r8
   23b56:	4639      	mov	r1, r7
   23b58:	4628      	mov	r0, r5
   23b5a:	f7ff fd7d 	bl	23658 <ble_att_svr_build_read_type_rsp>
   23b5e:	4601      	mov	r1, r0
    if (rc != 0) {
   23b60:	e000      	b.n	23b64 <ble_att_svr_rx_read_type+0x8a>
        rc = BLE_HS_EBADDATA;
   23b62:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   23b64:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   23b68:	9301      	str	r3, [sp, #4]
   23b6a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   23b6e:	9300      	str	r3, [sp, #0]
   23b70:	2308      	movs	r3, #8
   23b72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23b74:	4628      	mov	r0, r5
   23b76:	f7ff fe9b 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23b7a:	b00c      	add	sp, #48	; 0x30
   23b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023b80 <ble_att_svr_rx_read>:
{
   23b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b84:	b084      	sub	sp, #16
   23b86:	4605      	mov	r5, r0
   23b88:	460c      	mov	r4, r1
    att_err = 0;
   23b8a:	2300      	movs	r3, #0
   23b8c:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23b90:	f10d 020f 	add.w	r2, sp, #15
   23b94:	2102      	movs	r1, #2
   23b96:	4620      	mov	r0, r4
   23b98:	f7ff f8da 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23b9c:	b170      	cbz	r0, 23bbc <ble_att_svr_rx_read+0x3c>
   23b9e:	4601      	mov	r1, r0
    err_handle = 0;
   23ba0:	2600      	movs	r6, #0
    txom = NULL;
   23ba2:	4637      	mov	r7, r6
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   23ba4:	9601      	str	r6, [sp, #4]
   23ba6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23baa:	9300      	str	r3, [sp, #0]
   23bac:	230a      	movs	r3, #10
   23bae:	463a      	mov	r2, r7
   23bb0:	4628      	mov	r0, r5
   23bb2:	f7ff fe7d 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23bb6:	b004      	add	sp, #16
   23bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   23bbc:	6827      	ldr	r7, [r4, #0]
   23bbe:	683b      	ldr	r3, [r7, #0]
    err_handle = le16toh(req->barq_handle);
   23bc0:	881e      	ldrh	r6, [r3, #0]
    *rxom = NULL;
   23bc2:	f04f 0800 	mov.w	r8, #0
   23bc6:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   23bca:	8a39      	ldrh	r1, [r7, #16]
   23bcc:	4638      	mov	r0, r7
   23bce:	f7f1 fe22 	bl	15816 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   23bd2:	463a      	mov	r2, r7
   23bd4:	4641      	mov	r1, r8
   23bd6:	200b      	movs	r0, #11
   23bd8:	f7fe ff25 	bl	22a26 <ble_att_cmd_prepare>
   23bdc:	b150      	cbz	r0, 23bf4 <ble_att_svr_rx_read+0x74>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   23bde:	f10d 030f 	add.w	r3, sp, #15
   23be2:	9300      	str	r3, [sp, #0]
   23be4:	463b      	mov	r3, r7
   23be6:	2200      	movs	r2, #0
   23be8:	4631      	mov	r1, r6
   23bea:	4628      	mov	r0, r5
   23bec:	f7ff fdde 	bl	237ac <ble_att_svr_read_handle>
   23bf0:	4601      	mov	r1, r0
done:
   23bf2:	e7d7      	b.n	23ba4 <ble_att_svr_rx_read+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23bf4:	2311      	movs	r3, #17
   23bf6:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   23bfa:	2106      	movs	r1, #6
        goto done;
   23bfc:	e7d2      	b.n	23ba4 <ble_att_svr_rx_read+0x24>

00023bfe <ble_att_svr_rx_read_blob>:
{
   23bfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23c02:	b085      	sub	sp, #20
   23c04:	4605      	mov	r5, r0
   23c06:	460c      	mov	r4, r1
    att_err = 0;
   23c08:	2300      	movs	r3, #0
   23c0a:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23c0e:	f10d 020f 	add.w	r2, sp, #15
   23c12:	2104      	movs	r1, #4
   23c14:	4620      	mov	r0, r4
   23c16:	f7ff f89b 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23c1a:	b170      	cbz	r0, 23c3a <ble_att_svr_rx_read_blob+0x3c>
   23c1c:	4601      	mov	r1, r0
    err_handle = 0;
   23c1e:	2700      	movs	r7, #0
    txom = NULL;
   23c20:	463e      	mov	r6, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   23c22:	9701      	str	r7, [sp, #4]
   23c24:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23c28:	9300      	str	r3, [sp, #0]
   23c2a:	230c      	movs	r3, #12
   23c2c:	4632      	mov	r2, r6
   23c2e:	4628      	mov	r0, r5
   23c30:	f7ff fe3e 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23c34:	b005      	add	sp, #20
   23c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   23c3a:	6826      	ldr	r6, [r4, #0]
   23c3c:	6833      	ldr	r3, [r6, #0]
    err_handle = le16toh(req->babq_handle);
   23c3e:	881f      	ldrh	r7, [r3, #0]
    offset = le16toh(req->babq_offset);
   23c40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   23c44:	f04f 0800 	mov.w	r8, #0
   23c48:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   23c4c:	8a31      	ldrh	r1, [r6, #16]
   23c4e:	4630      	mov	r0, r6
   23c50:	f7f1 fde1 	bl	15816 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   23c54:	4632      	mov	r2, r6
   23c56:	4641      	mov	r1, r8
   23c58:	200d      	movs	r0, #13
   23c5a:	f7fe fee4 	bl	22a26 <ble_att_cmd_prepare>
   23c5e:	b150      	cbz	r0, 23c76 <ble_att_svr_rx_read_blob+0x78>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   23c60:	f10d 030f 	add.w	r3, sp, #15
   23c64:	9300      	str	r3, [sp, #0]
   23c66:	4633      	mov	r3, r6
   23c68:	464a      	mov	r2, r9
   23c6a:	4639      	mov	r1, r7
   23c6c:	4628      	mov	r0, r5
   23c6e:	f7ff fd9d 	bl	237ac <ble_att_svr_read_handle>
   23c72:	4601      	mov	r1, r0
    if (rc != 0) {
   23c74:	e7d5      	b.n	23c22 <ble_att_svr_rx_read_blob+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23c76:	2311      	movs	r3, #17
   23c78:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   23c7c:	2106      	movs	r1, #6
        goto done;
   23c7e:	e7d0      	b.n	23c22 <ble_att_svr_rx_read_blob+0x24>

00023c80 <ble_att_svr_rx_read_mult>:
{
   23c80:	b510      	push	{r4, lr}
   23c82:	b084      	sub	sp, #16
   23c84:	4604      	mov	r4, r0
    txom = NULL;
   23c86:	2300      	movs	r3, #0
   23c88:	9303      	str	r3, [sp, #12]
    err_handle = 0;
   23c8a:	f8ad 300a 	strh.w	r3, [sp, #10]
    att_err = 0;
   23c8e:	f88d 3009 	strb.w	r3, [sp, #9]
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   23c92:	f10d 030a 	add.w	r3, sp, #10
   23c96:	9300      	str	r3, [sp, #0]
   23c98:	f10d 0309 	add.w	r3, sp, #9
   23c9c:	aa03      	add	r2, sp, #12
   23c9e:	f7ff fd9d 	bl	237dc <ble_att_svr_build_read_mult_rsp>
   23ca2:	4601      	mov	r1, r0
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   23ca4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   23ca8:	9301      	str	r3, [sp, #4]
   23caa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   23cae:	9300      	str	r3, [sp, #0]
   23cb0:	230e      	movs	r3, #14
   23cb2:	9a03      	ldr	r2, [sp, #12]
   23cb4:	4620      	mov	r0, r4
   23cb6:	f7ff fdfb 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23cba:	b004      	add	sp, #16
   23cbc:	bd10      	pop	{r4, pc}

00023cbe <ble_att_svr_rx_read_group_type>:
{
   23cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23cc2:	b08c      	sub	sp, #48	; 0x30
   23cc4:	4605      	mov	r5, r0
   23cc6:	460c      	mov	r4, r1
    txom = NULL;
   23cc8:	2300      	movs	r3, #0
   23cca:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   23ccc:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   23cd0:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   23cd4:	680b      	ldr	r3, [r1, #0]
   23cd6:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   23cd8:	2906      	cmp	r1, #6
   23cda:	d001      	beq.n	23ce0 <ble_att_svr_rx_read_group_type+0x22>
   23cdc:	2914      	cmp	r1, #20
   23cde:	d140      	bne.n	23d62 <ble_att_svr_rx_read_group_type+0xa4>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   23ce0:	f10d 0215 	add.w	r2, sp, #21
   23ce4:	4620      	mov	r0, r4
   23ce6:	f7ff f833 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23cea:	4601      	mov	r1, r0
   23cec:	2800      	cmp	r0, #0
   23cee:	d139      	bne.n	23d64 <ble_att_svr_rx_read_group_type+0xa6>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   23cf0:	6821      	ldr	r1, [r4, #0]
   23cf2:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   23cf4:	881e      	ldrh	r6, [r3, #0]
   23cf6:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   23cf8:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   23cfc:	4547      	cmp	r7, r8
   23cfe:	d800      	bhi.n	23d02 <ble_att_svr_rx_read_group_type+0x44>
   23d00:	b937      	cbnz	r7, 23d10 <ble_att_svr_rx_read_group_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   23d02:	2301      	movs	r3, #1
   23d04:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   23d08:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   23d0c:	210a      	movs	r1, #10
        goto done;
   23d0e:	e029      	b.n	23d64 <ble_att_svr_rx_read_group_type+0xa6>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   23d10:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   23d12:	3b04      	subs	r3, #4
   23d14:	2204      	movs	r2, #4
   23d16:	a806      	add	r0, sp, #24
   23d18:	f008 fd12 	bl	2c740 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   23d1c:	b130      	cbz	r0, 23d2c <ble_att_svr_rx_read_group_type+0x6e>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   23d1e:	2304      	movs	r3, #4
   23d20:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   23d24:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   23d28:	210a      	movs	r1, #10
        goto done;
   23d2a:	e01b      	b.n	23d64 <ble_att_svr_rx_read_group_type+0xa6>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   23d2c:	a806      	add	r0, sp, #24
   23d2e:	f7ff f97a 	bl	23026 <ble_att_svr_is_valid_read_group_type>
   23d32:	b928      	cbnz	r0, 23d40 <ble_att_svr_rx_read_group_type+0x82>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   23d34:	2110      	movs	r1, #16
   23d36:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   23d3a:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   23d3e:	e011      	b.n	23d64 <ble_att_svr_rx_read_group_type+0xa6>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   23d40:	f10d 0316 	add.w	r3, sp, #22
   23d44:	9303      	str	r3, [sp, #12]
   23d46:	f10d 0315 	add.w	r3, sp, #21
   23d4a:	9302      	str	r3, [sp, #8]
   23d4c:	ab0b      	add	r3, sp, #44	; 0x2c
   23d4e:	9301      	str	r3, [sp, #4]
   23d50:	9400      	str	r4, [sp, #0]
   23d52:	ab06      	add	r3, sp, #24
   23d54:	4642      	mov	r2, r8
   23d56:	4639      	mov	r1, r7
   23d58:	4628      	mov	r0, r5
   23d5a:	f7ff fa89 	bl	23270 <ble_att_svr_build_read_group_type_rsp>
   23d5e:	4601      	mov	r1, r0
    if (rc != 0) {
   23d60:	e000      	b.n	23d64 <ble_att_svr_rx_read_group_type+0xa6>
        rc = BLE_HS_EBADDATA;
   23d62:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   23d64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   23d68:	9301      	str	r3, [sp, #4]
   23d6a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   23d6e:	9300      	str	r3, [sp, #0]
   23d70:	2310      	movs	r3, #16
   23d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23d74:	4628      	mov	r0, r5
   23d76:	f7ff fd9b 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23d7a:	b00c      	add	sp, #48	; 0x30
   23d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023d80 <ble_att_svr_rx_write>:
{
   23d80:	b570      	push	{r4, r5, r6, lr}
   23d82:	b084      	sub	sp, #16
   23d84:	4605      	mov	r5, r0
   23d86:	460c      	mov	r4, r1
    txom = NULL;
   23d88:	2300      	movs	r3, #0
   23d8a:	9303      	str	r3, [sp, #12]
    att_err = 0;
   23d8c:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23d90:	f10d 020b 	add.w	r2, sp, #11
   23d94:	2102      	movs	r1, #2
   23d96:	4620      	mov	r0, r4
   23d98:	f7fe ffda 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23d9c:	b160      	cbz	r0, 23db8 <ble_att_svr_rx_write+0x38>
   23d9e:	4601      	mov	r1, r0
    handle = 0;
   23da0:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   23da2:	9601      	str	r6, [sp, #4]
   23da4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   23da8:	9300      	str	r3, [sp, #0]
   23daa:	2312      	movs	r3, #18
   23dac:	9a03      	ldr	r2, [sp, #12]
   23dae:	4628      	mov	r0, r5
   23db0:	f7ff fd7e 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23db4:	b004      	add	sp, #16
   23db6:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   23db8:	6823      	ldr	r3, [r4, #0]
   23dba:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   23dbc:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   23dbe:	f10d 020b 	add.w	r2, sp, #11
   23dc2:	a903      	add	r1, sp, #12
   23dc4:	4620      	mov	r0, r4
   23dc6:	f7ff f818 	bl	22dfa <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   23dca:	4601      	mov	r1, r0
   23dcc:	2800      	cmp	r0, #0
   23dce:	d1e8      	bne.n	23da2 <ble_att_svr_rx_write+0x22>
    os_mbuf_adj(*rxom, sizeof(*req));
   23dd0:	2102      	movs	r1, #2
   23dd2:	6820      	ldr	r0, [r4, #0]
   23dd4:	f7f1 fd1f 	bl	15816 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   23dd8:	f10d 030b 	add.w	r3, sp, #11
   23ddc:	9300      	str	r3, [sp, #0]
   23dde:	4623      	mov	r3, r4
   23de0:	2200      	movs	r2, #0
   23de2:	4631      	mov	r1, r6
   23de4:	4628      	mov	r0, r5
   23de6:	f7ff fbd1 	bl	2358c <ble_att_svr_write_handle>
   23dea:	4601      	mov	r1, r0
    if (rc != 0) {
   23dec:	e7d9      	b.n	23da2 <ble_att_svr_rx_write+0x22>

00023dee <ble_att_svr_rx_write_no_rsp>:
{
   23dee:	b570      	push	{r4, r5, r6, lr}
   23df0:	b084      	sub	sp, #16
   23df2:	4605      	mov	r5, r0
   23df4:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23df6:	f10d 020f 	add.w	r2, sp, #15
   23dfa:	2102      	movs	r1, #2
   23dfc:	4620      	mov	r0, r4
   23dfe:	f7fe ffa7 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23e02:	4603      	mov	r3, r0
   23e04:	b110      	cbz	r0, 23e0c <ble_att_svr_rx_write_no_rsp+0x1e>
}
   23e06:	4618      	mov	r0, r3
   23e08:	b004      	add	sp, #16
   23e0a:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   23e0c:	6820      	ldr	r0, [r4, #0]
   23e0e:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   23e10:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   23e12:	2102      	movs	r1, #2
   23e14:	f7f1 fcff 	bl	15816 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   23e18:	f10d 030f 	add.w	r3, sp, #15
   23e1c:	9300      	str	r3, [sp, #0]
   23e1e:	4623      	mov	r3, r4
   23e20:	2200      	movs	r2, #0
   23e22:	4631      	mov	r1, r6
   23e24:	4628      	mov	r0, r5
   23e26:	f7ff fbb1 	bl	2358c <ble_att_svr_write_handle>
   23e2a:	4603      	mov	r3, r0
   23e2c:	e7eb      	b.n	23e06 <ble_att_svr_rx_write_no_rsp+0x18>

00023e2e <ble_att_svr_prep_clear>:
{
   23e2e:	b510      	push	{r4, lr}
   23e30:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   23e32:	6820      	ldr	r0, [r4, #0]
   23e34:	b120      	cbz	r0, 23e40 <ble_att_svr_prep_clear+0x12>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   23e36:	6803      	ldr	r3, [r0, #0]
   23e38:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   23e3a:	f7ff fad5 	bl	233e8 <ble_att_svr_prep_free>
   23e3e:	e7f8      	b.n	23e32 <ble_att_svr_prep_clear+0x4>
}
   23e40:	bd10      	pop	{r4, pc}

00023e42 <ble_att_svr_rx_prep_write>:
{
   23e42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23e46:	b085      	sub	sp, #20
   23e48:	4605      	mov	r5, r0
   23e4a:	460c      	mov	r4, r1
    att_err = 0;
   23e4c:	2300      	movs	r3, #0
   23e4e:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23e52:	f10d 020f 	add.w	r2, sp, #15
   23e56:	2104      	movs	r1, #4
   23e58:	4620      	mov	r0, r4
   23e5a:	f7fe ff79 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23e5e:	b178      	cbz	r0, 23e80 <ble_att_svr_rx_prep_write+0x3e>
   23e60:	4606      	mov	r6, r0
    err_handle = 0;
   23e62:	2700      	movs	r7, #0
    txom = NULL;
   23e64:	46b8      	mov	r8, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   23e66:	9701      	str	r7, [sp, #4]
   23e68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23e6c:	9300      	str	r3, [sp, #0]
   23e6e:	2316      	movs	r3, #22
   23e70:	4642      	mov	r2, r8
   23e72:	4631      	mov	r1, r6
   23e74:	4628      	mov	r0, r5
   23e76:	f7ff fd1b 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23e7a:	b005      	add	sp, #20
   23e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   23e80:	6823      	ldr	r3, [r4, #0]
   23e82:	f8d3 9000 	ldr.w	r9, [r3]
    err_handle = le16toh(req->bapc_handle);
   23e86:	f8b9 7000 	ldrh.w	r7, [r9]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   23e8a:	4638      	mov	r0, r7
   23e8c:	f7ff fb72 	bl	23574 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   23e90:	4680      	mov	r8, r0
   23e92:	b158      	cbz	r0, 23eac <ble_att_svr_rx_prep_write+0x6a>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   23e94:	f10d 030f 	add.w	r3, sp, #15
   23e98:	4602      	mov	r2, r0
   23e9a:	2100      	movs	r1, #0
   23e9c:	4628      	mov	r0, r5
   23e9e:	f7fe fe6e 	bl	22b7e <ble_att_svr_check_perms>
    if (rc != 0) {
   23ea2:	4606      	mov	r6, r0
   23ea4:	b138      	cbz	r0, 23eb6 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   23ea6:	f04f 0800 	mov.w	r8, #0
   23eaa:	e7dc      	b.n	23e66 <ble_att_svr_rx_prep_write+0x24>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   23eac:	2301      	movs	r3, #1
   23eae:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   23eb2:	2605      	movs	r6, #5
        goto done;
   23eb4:	e7d7      	b.n	23e66 <ble_att_svr_rx_prep_write+0x24>
    ble_hs_lock();
   23eb6:	f003 fd33 	bl	27920 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   23eba:	f8b9 1000 	ldrh.w	r1, [r9]
                                       le16toh(req->bapc_offset), *rxom,
   23ebe:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   23ec2:	f10d 030f 	add.w	r3, sp, #15
   23ec6:	9300      	str	r3, [sp, #0]
   23ec8:	6823      	ldr	r3, [r4, #0]
   23eca:	4628      	mov	r0, r5
   23ecc:	f7ff fab8 	bl	23440 <ble_att_svr_insert_prep_entry>
   23ed0:	4606      	mov	r6, r0
    ble_hs_unlock();
   23ed2:	f003 fd29 	bl	27928 <ble_hs_unlock>
    txom = *rxom;
   23ed6:	f8d4 8000 	ldr.w	r8, [r4]
    *rxom = NULL;
   23eda:	2300      	movs	r3, #0
   23edc:	6023      	str	r3, [r4, #0]
    if (rc != 0) {
   23ede:	2e00      	cmp	r6, #0
   23ee0:	d1c1      	bne.n	23e66 <ble_att_svr_rx_prep_write+0x24>
    os_mbuf_prepend(txom, 1);
   23ee2:	2101      	movs	r1, #1
   23ee4:	4640      	mov	r0, r8
   23ee6:	f7f1 fd24 	bl	15932 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   23eea:	f8d8 3000 	ldr.w	r3, [r8]
   23eee:	2217      	movs	r2, #23
   23ef0:	701a      	strb	r2, [r3, #0]
    rc = 0;
   23ef2:	e7b8      	b.n	23e66 <ble_att_svr_rx_prep_write+0x24>

00023ef4 <ble_att_svr_rx_exec_write>:
{
   23ef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23ef8:	b085      	sub	sp, #20
   23efa:	4605      	mov	r5, r0
   23efc:	460c      	mov	r4, r1
    err_handle = 0;
   23efe:	2300      	movs	r3, #0
   23f00:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   23f04:	f10d 0209 	add.w	r2, sp, #9
   23f08:	2101      	movs	r1, #1
   23f0a:	4620      	mov	r0, r4
   23f0c:	f7fe ff20 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23f10:	4607      	mov	r7, r0
   23f12:	b190      	cbz	r0, 23f3a <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   23f14:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   23f18:	4646      	mov	r6, r8
    if (rc == 0) {
   23f1a:	b337      	cbz	r7, 23f6a <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   23f1c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   23f20:	9301      	str	r3, [sp, #4]
   23f22:	f89d 3009 	ldrb.w	r3, [sp, #9]
   23f26:	9300      	str	r3, [sp, #0]
   23f28:	2318      	movs	r3, #24
   23f2a:	4632      	mov	r2, r6
   23f2c:	4639      	mov	r1, r7
   23f2e:	4628      	mov	r0, r5
   23f30:	f7ff fcbe 	bl	238b0 <ble_att_svr_tx_rsp>
}
   23f34:	b005      	add	sp, #20
   23f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   23f3a:	6826      	ldr	r6, [r4, #0]
   23f3c:	6833      	ldr	r3, [r6, #0]
    flags = req->baeq_flags;
   23f3e:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   23f42:	f04f 0900 	mov.w	r9, #0
   23f46:	f8c4 9000 	str.w	r9, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   23f4a:	8a31      	ldrh	r1, [r6, #16]
   23f4c:	4630      	mov	r0, r6
   23f4e:	f7f1 fc62 	bl	15816 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   23f52:	4632      	mov	r2, r6
   23f54:	4649      	mov	r1, r9
   23f56:	2019      	movs	r0, #25
   23f58:	f7fe fd65 	bl	22a26 <ble_att_cmd_prepare>
   23f5c:	2800      	cmp	r0, #0
   23f5e:	d1dc      	bne.n	23f1a <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   23f60:	2311      	movs	r3, #17
   23f62:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   23f66:	2706      	movs	r7, #6
        goto done;
   23f68:	e7d7      	b.n	23f1a <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   23f6a:	f003 fcd9 	bl	27920 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   23f6e:	4628      	mov	r0, r5
   23f70:	f004 fb4a 	bl	28608 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   23f74:	6c43      	ldr	r3, [r0, #68]	; 0x44
   23f76:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   23f78:	2300      	movs	r3, #0
   23f7a:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   23f7c:	f003 fcd4 	bl	27928 <ble_hs_unlock>
        if (flags) {
   23f80:	f1b8 0f00 	cmp.w	r8, #0
   23f84:	d103      	bne.n	23f8e <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   23f86:	a803      	add	r0, sp, #12
   23f88:	f7ff ff51 	bl	23e2e <ble_att_svr_prep_clear>
   23f8c:	e7c6      	b.n	23f1c <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   23f8e:	f10d 020a 	add.w	r2, sp, #10
   23f92:	a903      	add	r1, sp, #12
   23f94:	4628      	mov	r0, r5
   23f96:	f7ff fb11 	bl	235bc <ble_att_svr_prep_write>
   23f9a:	b2c0      	uxtb	r0, r0
   23f9c:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   23fa0:	2800      	cmp	r0, #0
   23fa2:	d0f0      	beq.n	23f86 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   23fa4:	2709      	movs	r7, #9
   23fa6:	e7ee      	b.n	23f86 <ble_att_svr_rx_exec_write+0x92>

00023fa8 <ble_att_svr_rx_notify>:
{
   23fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23faa:	4605      	mov	r5, r0
   23fac:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   23fae:	2200      	movs	r2, #0
   23fb0:	2102      	movs	r1, #2
   23fb2:	4620      	mov	r0, r4
   23fb4:	f7fe fecc 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23fb8:	b988      	cbnz	r0, 23fde <ble_att_svr_rx_notify+0x36>
   23fba:	4606      	mov	r6, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   23fbc:	6820      	ldr	r0, [r4, #0]
   23fbe:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   23fc0:	881f      	ldrh	r7, [r3, #0]
    if (handle == 0) {
   23fc2:	b177      	cbz	r7, 23fe2 <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   23fc4:	2102      	movs	r1, #2
   23fc6:	f7f1 fc26 	bl	15816 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   23fca:	2300      	movs	r3, #0
   23fcc:	6822      	ldr	r2, [r4, #0]
   23fce:	4639      	mov	r1, r7
   23fd0:	4628      	mov	r0, r5
   23fd2:	f001 face 	bl	25572 <ble_gap_notify_rx_event>
    *rxom = NULL;
   23fd6:	2300      	movs	r3, #0
   23fd8:	6023      	str	r3, [r4, #0]
}
   23fda:	4630      	mov	r0, r6
   23fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   23fde:	2606      	movs	r6, #6
   23fe0:	e7fb      	b.n	23fda <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   23fe2:	260a      	movs	r6, #10
   23fe4:	e7f9      	b.n	23fda <ble_att_svr_rx_notify+0x32>

00023fe6 <ble_att_svr_rx_indicate>:
{
   23fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
   23fe8:	b085      	sub	sp, #20
   23fea:	4607      	mov	r7, r0
   23fec:	460c      	mov	r4, r1
    txom = NULL;
   23fee:	2200      	movs	r2, #0
   23ff0:	9203      	str	r2, [sp, #12]
    att_err = 0;
   23ff2:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   23ff6:	2102      	movs	r1, #2
   23ff8:	4620      	mov	r0, r4
   23ffa:	f7fe fea9 	bl	22d50 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   23ffe:	b9d0      	cbnz	r0, 24036 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   24000:	6823      	ldr	r3, [r4, #0]
   24002:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   24004:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   24006:	b90d      	cbnz	r5, 2400c <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   24008:	260a      	movs	r6, #10
   2400a:	e016      	b.n	2403a <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   2400c:	f10d 020b 	add.w	r2, sp, #11
   24010:	a903      	add	r1, sp, #12
   24012:	4620      	mov	r0, r4
   24014:	f7fe ff0a 	bl	22e2c <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   24018:	4606      	mov	r6, r0
   2401a:	b970      	cbnz	r0, 2403a <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   2401c:	2102      	movs	r1, #2
   2401e:	6820      	ldr	r0, [r4, #0]
   24020:	f7f1 fbf9 	bl	15816 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   24024:	2301      	movs	r3, #1
   24026:	6822      	ldr	r2, [r4, #0]
   24028:	4629      	mov	r1, r5
   2402a:	4638      	mov	r0, r7
   2402c:	f001 faa1 	bl	25572 <ble_gap_notify_rx_event>
    *rxom = NULL;
   24030:	2300      	movs	r3, #0
   24032:	6023      	str	r3, [r4, #0]
    rc = 0;
   24034:	e001      	b.n	2403a <ble_att_svr_rx_indicate+0x54>
   24036:	4606      	mov	r6, r0
    handle = 0;
   24038:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   2403a:	9501      	str	r5, [sp, #4]
   2403c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   24040:	9300      	str	r3, [sp, #0]
   24042:	231d      	movs	r3, #29
   24044:	9a03      	ldr	r2, [sp, #12]
   24046:	4631      	mov	r1, r6
   24048:	4638      	mov	r0, r7
   2404a:	f7ff fc31 	bl	238b0 <ble_att_svr_tx_rsp>
}
   2404e:	b005      	add	sp, #20
   24050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00024054 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   24054:	b510      	push	{r4, lr}
   24056:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   24058:	f7ff fa54 	bl	23504 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   2405c:	4b0f      	ldr	r3, [pc, #60]	; (2409c <ble_att_svr_start+0x48>)
   2405e:	881c      	ldrh	r4, [r3, #0]
   24060:	b91c      	cbnz	r4, 2406a <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   24062:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   24064:	4620      	mov	r0, r4
   24066:	b002      	add	sp, #8
   24068:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   2406a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2406e:	0080      	lsls	r0, r0, #2
   24070:	f00e f916 	bl	322a0 <malloc>
   24074:	4603      	mov	r3, r0
   24076:	4a0a      	ldr	r2, [pc, #40]	; (240a0 <ble_att_svr_start+0x4c>)
   24078:	6010      	str	r0, [r2, #0]
        if (ble_att_svr_entry_mem == NULL) {
   2407a:	b168      	cbz	r0, 24098 <ble_att_svr_start+0x44>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   2407c:	4a09      	ldr	r2, [pc, #36]	; (240a4 <ble_att_svr_start+0x50>)
   2407e:	9200      	str	r2, [sp, #0]
   24080:	2214      	movs	r2, #20
   24082:	4621      	mov	r1, r4
   24084:	4808      	ldr	r0, [pc, #32]	; (240a8 <ble_att_svr_start+0x54>)
   24086:	f7f1 fe95 	bl	15db4 <os_mempool_init>
        if (rc != 0) {
   2408a:	b908      	cbnz	r0, 24090 <ble_att_svr_start+0x3c>
    return 0;
   2408c:	2400      	movs	r4, #0
   2408e:	e7e9      	b.n	24064 <ble_att_svr_start+0x10>
            rc = BLE_HS_EOS;
   24090:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   24092:	f7ff fa37 	bl	23504 <ble_att_svr_free_start_mem>
    return rc;
   24096:	e7e5      	b.n	24064 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   24098:	2406      	movs	r4, #6
   2409a:	e7fa      	b.n	24092 <ble_att_svr_start+0x3e>
   2409c:	10003038 	.word	0x10003038
   240a0:	100028d8 	.word	0x100028d8
   240a4:	00034854 	.word	0x00034854
   240a8:	100028dc 	.word	0x100028dc

000240ac <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   240ac:	b500      	push	{lr}
   240ae:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   240b0:	4b0a      	ldr	r3, [pc, #40]	; (240dc <ble_att_svr_init+0x30>)
   240b2:	9300      	str	r3, [sp, #0]
   240b4:	4b0a      	ldr	r3, [pc, #40]	; (240e0 <ble_att_svr_init+0x34>)
   240b6:	220c      	movs	r2, #12
   240b8:	2140      	movs	r1, #64	; 0x40
   240ba:	480a      	ldr	r0, [pc, #40]	; (240e4 <ble_att_svr_init+0x38>)
   240bc:	f7f1 fe7a 	bl	15db4 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   240c0:	b950      	cbnz	r0, 240d8 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   240c2:	4b09      	ldr	r3, [pc, #36]	; (240e8 <ble_att_svr_init+0x3c>)
   240c4:	6018      	str	r0, [r3, #0]
   240c6:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   240c8:	4b08      	ldr	r3, [pc, #32]	; (240ec <ble_att_svr_init+0x40>)
   240ca:	6018      	str	r0, [r3, #0]
   240cc:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   240ce:	4b08      	ldr	r3, [pc, #32]	; (240f0 <ble_att_svr_init+0x44>)
   240d0:	8018      	strh	r0, [r3, #0]

    return 0;
}
   240d2:	b003      	add	sp, #12
   240d4:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   240d8:	200b      	movs	r0, #11
   240da:	e7fa      	b.n	240d2 <ble_att_svr_init+0x26>
   240dc:	0003486c 	.word	0x0003486c
   240e0:	1000290c 	.word	0x1000290c
   240e4:	10002c0c 	.word	0x10002c0c
   240e8:	10002904 	.word	0x10002904
   240ec:	100028f8 	.word	0x100028f8
   240f0:	10002900 	.word	0x10002900

000240f4 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   240f4:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   240f6:	b119      	cbz	r1, 24100 <ble_gap_call_event_cb+0xc>
   240f8:	460b      	mov	r3, r1
        rc = cb(event, cb_arg);
   240fa:	4611      	mov	r1, r2
   240fc:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   240fe:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   24100:	7803      	ldrb	r3, [r0, #0]
   24102:	2b04      	cmp	r3, #4
   24104:	d001      	beq.n	2410a <ble_gap_call_event_cb+0x16>
        rc = 0;
   24106:	2000      	movs	r0, #0
    return rc;
   24108:	e7f9      	b.n	240fe <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   2410a:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   2410c:	6883      	ldr	r3, [r0, #8]
   2410e:	6810      	ldr	r0, [r2, #0]
   24110:	6851      	ldr	r1, [r2, #4]
   24112:	6892      	ldr	r2, [r2, #8]
   24114:	6018      	str	r0, [r3, #0]
   24116:	6059      	str	r1, [r3, #4]
   24118:	609a      	str	r2, [r3, #8]
        rc = 0;
   2411a:	2000      	movs	r0, #0
   2411c:	e7ef      	b.n	240fe <ble_gap_call_event_cb+0xa>
	...

00024120 <ble_gap_is_preempted>:
    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
        return true;
    }
#endif
#if NIMBLE_BLE_ADVERTISE
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   24120:	2300      	movs	r3, #0
   24122:	2b00      	cmp	r3, #0
   24124:	dd01      	ble.n	2412a <ble_gap_is_preempted+0xa>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }
#endif
    return false;
   24126:	2000      	movs	r0, #0
}
   24128:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   2412a:	4a05      	ldr	r2, [pc, #20]	; (24140 <ble_gap_is_preempted+0x20>)
   2412c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   24130:	7852      	ldrb	r2, [r2, #1]
   24132:	f3c2 0080 	ubfx	r0, r2, #2, #1
   24136:	f012 0f04 	tst.w	r2, #4
   2413a:	d1f5      	bne.n	24128 <ble_gap_is_preempted+0x8>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   2413c:	3301      	adds	r3, #1
   2413e:	e7f0      	b.n	24122 <ble_gap_is_preempted+0x2>
   24140:	10002cec 	.word	0x10002cec

00024144 <ble_gap_has_client>:

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   24144:	b120      	cbz	r0, 24150 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb != NULL;
   24146:	6880      	ldr	r0, [r0, #8]
   24148:	3800      	subs	r0, #0
   2414a:	bf18      	it	ne
   2414c:	2001      	movne	r0, #1
   2414e:	4770      	bx	lr
        return 0;
   24150:	2000      	movs	r0, #0
}
   24152:	4770      	bx	lr

00024154 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   24154:	8803      	ldrh	r3, [r0, #0]
   24156:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   24158:	8843      	ldrh	r3, [r0, #2]
   2415a:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   2415c:	8883      	ldrh	r3, [r0, #4]
   2415e:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   24160:	88c3      	ldrh	r3, [r0, #6]
   24162:	80cb      	strh	r3, [r1, #6]
}
   24164:	4770      	bx	lr
	...

00024168 <ble_gap_adv_active_instance>:
#if NIMBLE_BLE_ADVERTISE || NIMBLE_BLE_CONNECT
static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   24168:	0100      	lsls	r0, r0, #4
   2416a:	4b03      	ldr	r3, [pc, #12]	; (24178 <ble_gap_adv_active_instance+0x10>)
   2416c:	5c18      	ldrb	r0, [r3, r0]
}
   2416e:	2801      	cmp	r0, #1
   24170:	bf14      	ite	ne
   24172:	2000      	movne	r0, #0
   24174:	2001      	moveq	r0, #1
   24176:	4770      	bx	lr
   24178:	10002cec 	.word	0x10002cec

0002417c <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   2417c:	4b05      	ldr	r3, [pc, #20]	; (24194 <ble_gap_accept_master_conn+0x18>)
   2417e:	7c1b      	ldrb	r3, [r3, #16]
   24180:	2b02      	cmp	r3, #2
   24182:	d001      	beq.n	24188 <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   24184:	2005      	movs	r0, #5
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   24186:	4770      	bx	lr
        STATS_INC(ble_gap_stats, connect_mst);
   24188:	4a03      	ldr	r2, [pc, #12]	; (24198 <ble_gap_accept_master_conn+0x1c>)
   2418a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   2418c:	3301      	adds	r3, #1
   2418e:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   24190:	2000      	movs	r0, #0
   24192:	4770      	bx	lr
   24194:	10002cec 	.word	0x10002cec
   24198:	10002c2c 	.word	0x10002c2c

0002419c <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   2419c:	b988      	cbnz	r0, 241c2 <ble_gap_accept_slave_conn+0x26>
{
   2419e:	b510      	push	{r4, lr}
   241a0:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   241a2:	f7ff ffe1 	bl	24168 <ble_gap_adv_active_instance>
   241a6:	b170      	cbz	r0, 241c6 <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   241a8:	4b09      	ldr	r3, [pc, #36]	; (241d0 <ble_gap_accept_slave_conn+0x34>)
   241aa:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   241ae:	7863      	ldrb	r3, [r4, #1]
   241b0:	f013 0f08 	tst.w	r3, #8
   241b4:	d009      	beq.n	241ca <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   241b6:	4a07      	ldr	r2, [pc, #28]	; (241d4 <ble_gap_accept_slave_conn+0x38>)
   241b8:	6e13      	ldr	r3, [r2, #96]	; 0x60
   241ba:	3301      	adds	r3, #1
   241bc:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   241be:	2000      	movs	r0, #0
    }

    return rc;
}
   241c0:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   241c2:	2005      	movs	r0, #5
}
   241c4:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   241c6:	2005      	movs	r0, #5
   241c8:	e7fa      	b.n	241c0 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   241ca:	2005      	movs	r0, #5
    return rc;
   241cc:	e7f8      	b.n	241c0 <ble_gap_accept_slave_conn+0x24>
   241ce:	bf00      	nop
   241d0:	10002cec 	.word	0x10002cec
   241d4:	10002c2c 	.word	0x10002c2c

000241d8 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   241d8:	7803      	ldrb	r3, [r0, #0]
   241da:	b11b      	cbz	r3, 241e4 <ble_gap_adv_type+0xc>
   241dc:	2b01      	cmp	r3, #1
   241de:	d005      	beq.n	241ec <ble_gap_adv_type+0x14>
   241e0:	2000      	movs	r0, #0
   241e2:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   241e4:	7843      	ldrb	r3, [r0, #1]
   241e6:	b93b      	cbnz	r3, 241f8 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   241e8:	2003      	movs	r0, #3
   241ea:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   241ec:	7a03      	ldrb	r3, [r0, #8]
   241ee:	f013 0f01 	tst.w	r3, #1
   241f2:	d003      	beq.n	241fc <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   241f4:	2001      	movs	r0, #1
   241f6:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   241f8:	2002      	movs	r0, #2
   241fa:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   241fc:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   241fe:	4770      	bx	lr

00024200 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   24200:	2801      	cmp	r0, #1
   24202:	d011      	beq.n	24228 <ble_gap_adv_dflt_itvls+0x28>
   24204:	2802      	cmp	r0, #2
   24206:	d00a      	beq.n	2421e <ble_gap_adv_dflt_itvls+0x1e>
   24208:	b120      	cbz	r0, 24214 <ble_gap_adv_dflt_itvls+0x14>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   2420a:	2330      	movs	r3, #48	; 0x30
   2420c:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   2420e:	2360      	movs	r3, #96	; 0x60
   24210:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   24212:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   24214:	23a0      	movs	r3, #160	; 0xa0
   24216:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   24218:	23f0      	movs	r3, #240	; 0xf0
   2421a:	8013      	strh	r3, [r2, #0]
        break;
   2421c:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   2421e:	2330      	movs	r3, #48	; 0x30
   24220:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   24222:	2360      	movs	r3, #96	; 0x60
   24224:	8013      	strh	r3, [r2, #0]
        break;
   24226:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   24228:	2330      	movs	r3, #48	; 0x30
   2422a:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   2422c:	2360      	movs	r3, #96	; 0x60
   2422e:	8013      	strh	r3, [r2, #0]
        break;
   24230:	4770      	bx	lr
	...

00024234 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   24234:	b410      	push	{r4}
   24236:	4602      	mov	r2, r0
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   24238:	4b06      	ldr	r3, [pc, #24]	; (24254 <ble_gap_update_entry_find+0x20>)
   2423a:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   2423c:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   2423e:	b128      	cbz	r0, 2424c <ble_gap_update_entry_find+0x18>
        if (entry->conn_handle == conn_handle) {
   24240:	8a83      	ldrh	r3, [r0, #20]
   24242:	4293      	cmp	r3, r2
   24244:	d002      	beq.n	2424c <ble_gap_update_entry_find+0x18>
            break;
        }

        prev = entry;
   24246:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   24248:	6800      	ldr	r0, [r0, #0]
   2424a:	e7f8      	b.n	2423e <ble_gap_update_entry_find+0xa>
    }

    if (out_prev != NULL) {
   2424c:	b101      	cbz	r1, 24250 <ble_gap_update_entry_find+0x1c>
        *out_prev = prev;
   2424e:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   24250:	bc10      	pop	{r4}
   24252:	4770      	bx	lr
   24254:	10002cb4 	.word	0x10002cb4

00024258 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   24258:	8802      	ldrh	r2, [r0, #0]
   2425a:	8843      	ldrh	r3, [r0, #2]
   2425c:	429a      	cmp	r2, r3
   2425e:	d814      	bhi.n	2428a <ble_gap_validate_conn_params+0x32>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   24260:	2a05      	cmp	r2, #5
   24262:	d914      	bls.n	2428e <ble_gap_validate_conn_params+0x36>
   24264:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   24268:	d813      	bhi.n	24292 <ble_gap_validate_conn_params+0x3a>
        return false;
    }

    if (params->latency > 0x01F3) {
   2426a:	8882      	ldrh	r2, [r0, #4]
   2426c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   24270:	d211      	bcs.n	24296 <ble_gap_validate_conn_params+0x3e>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   24272:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   24274:	fb02 3303 	mla	r3, r2, r3, r3
   24278:	2b00      	cmp	r3, #0
   2427a:	db04      	blt.n	24286 <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   2427c:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   24280:	dd0b      	ble.n	2429a <ble_gap_validate_conn_params+0x42>
        return false;
    }

    return true;
   24282:	2001      	movs	r0, #1
   24284:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   24286:	3303      	adds	r3, #3
   24288:	e7f8      	b.n	2427c <ble_gap_validate_conn_params+0x24>
        return false;
   2428a:	2000      	movs	r0, #0
   2428c:	4770      	bx	lr
        return false;
   2428e:	2000      	movs	r0, #0
   24290:	4770      	bx	lr
   24292:	2000      	movs	r0, #0
   24294:	4770      	bx	lr
        return false;
   24296:	2000      	movs	r0, #0
   24298:	4770      	bx	lr
        return false;
   2429a:	2000      	movs	r0, #0
}
   2429c:	4770      	bx	lr
	...

000242a0 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   242a0:	b538      	push	{r3, r4, r5, lr}
   242a2:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   242a4:	4b05      	ldr	r3, [pc, #20]	; (242bc <ble_gap_event_listener_call+0x1c>)
   242a6:	681c      	ldr	r4, [r3, #0]
   242a8:	b12c      	cbz	r4, 242b6 <ble_gap_event_listener_call+0x16>
        evl->fn(event, evl->arg);
   242aa:	6823      	ldr	r3, [r4, #0]
   242ac:	6861      	ldr	r1, [r4, #4]
   242ae:	4628      	mov	r0, r5
   242b0:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   242b2:	68a4      	ldr	r4, [r4, #8]
   242b4:	e7f8      	b.n	242a8 <ble_gap_event_listener_call+0x8>
    }

    return 0;
}
   242b6:	2000      	movs	r0, #0
   242b8:	bd38      	pop	{r3, r4, r5, pc}
   242ba:	bf00      	nop
   242bc:	10002c28 	.word	0x10002c28

000242c0 <ble_gap_extract_conn_cb>:
{
   242c0:	b570      	push	{r4, r5, r6, lr}
   242c2:	4606      	mov	r6, r0
   242c4:	460d      	mov	r5, r1
   242c6:	4614      	mov	r4, r2
    ble_hs_lock();
   242c8:	f003 fb2a 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   242cc:	4630      	mov	r0, r6
   242ce:	f004 f983 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   242d2:	4606      	mov	r6, r0
   242d4:	b140      	cbz	r0, 242e8 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   242d6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   242d8:	602b      	str	r3, [r5, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   242da:	6e03      	ldr	r3, [r0, #96]	; 0x60
   242dc:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   242de:	f003 fb23 	bl	27928 <ble_hs_unlock>
    if (conn == NULL) {
   242e2:	b12e      	cbz	r6, 242f0 <ble_gap_extract_conn_cb+0x30>
        return 0;
   242e4:	2000      	movs	r0, #0
}
   242e6:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   242e8:	2300      	movs	r3, #0
   242ea:	602b      	str	r3, [r5, #0]
        *out_cb_arg = NULL;
   242ec:	6023      	str	r3, [r4, #0]
   242ee:	e7f6      	b.n	242de <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   242f0:	2007      	movs	r0, #7
   242f2:	e7f8      	b.n	242e6 <ble_gap_extract_conn_cb+0x26>

000242f4 <ble_gap_call_conn_event_cb>:
{
   242f4:	b510      	push	{r4, lr}
   242f6:	b082      	sub	sp, #8
   242f8:	4604      	mov	r4, r0
   242fa:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   242fc:	466a      	mov	r2, sp
   242fe:	a901      	add	r1, sp, #4
   24300:	f7ff ffde 	bl	242c0 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   24304:	b108      	cbz	r0, 2430a <ble_gap_call_conn_event_cb+0x16>
}
   24306:	b002      	add	sp, #8
   24308:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   2430a:	9a00      	ldr	r2, [sp, #0]
   2430c:	9901      	ldr	r1, [sp, #4]
   2430e:	4620      	mov	r0, r4
   24310:	f7ff fef0 	bl	240f4 <ble_gap_call_event_cb>
    if (rc != 0) {
   24314:	e7f7      	b.n	24306 <ble_gap_call_conn_event_cb+0x12>

00024316 <ble_gap_fill_conn_desc>:
{
   24316:	b570      	push	{r4, r5, r6, lr}
   24318:	b088      	sub	sp, #32
   2431a:	4605      	mov	r5, r0
   2431c:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   2431e:	ae01      	add	r6, sp, #4
   24320:	4631      	mov	r1, r6
   24322:	f004 f991 	bl	28648 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   24326:	e896 0003 	ldmia.w	r6, {r0, r1}
   2432a:	6060      	str	r0, [r4, #4]
   2432c:	f104 0308 	add.w	r3, r4, #8
   24330:	f823 1b02 	strh.w	r1, [r3], #2
   24334:	0c09      	lsrs	r1, r1, #16
   24336:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   24338:	f8dd 300b 	ldr.w	r3, [sp, #11]
   2433c:	f8c4 300b 	str.w	r3, [r4, #11]
   24340:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   24344:	f89d 3011 	ldrb.w	r3, [sp, #17]
   24348:	f8a4 200f 	strh.w	r2, [r4, #15]
   2434c:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   2434e:	f8dd 3012 	ldr.w	r3, [sp, #18]
   24352:	f8c4 3012 	str.w	r3, [r4, #18]
   24356:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2435a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2435e:	82e2      	strh	r2, [r4, #22]
   24360:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   24362:	f8dd 3019 	ldr.w	r3, [sp, #25]
   24366:	f8c4 3019 	str.w	r3, [r4, #25]
   2436a:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   2436e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   24372:	f8a4 201d 	strh.w	r2, [r4, #29]
   24376:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   24378:	88ab      	ldrh	r3, [r5, #4]
   2437a:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   2437c:	8bab      	ldrh	r3, [r5, #28]
   2437e:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   24380:	8beb      	ldrh	r3, [r5, #30]
   24382:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   24384:	8c2b      	ldrh	r3, [r5, #32]
   24386:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   24388:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   2438c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   24390:	6dab      	ldr	r3, [r5, #88]	; 0x58
   24392:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   24394:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   24398:	f013 0f01 	tst.w	r3, #1
   2439c:	d004      	beq.n	243a8 <ble_gap_fill_conn_desc+0x92>
        desc->role = BLE_GAP_ROLE_MASTER;
   2439e:	2300      	movs	r3, #0
   243a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   243a4:	b008      	add	sp, #32
   243a6:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_SLAVE;
   243a8:	2301      	movs	r3, #1
   243aa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   243ae:	e7f9      	b.n	243a4 <ble_gap_fill_conn_desc+0x8e>

000243b0 <ble_gap_conn_to_snapshot>:
{
   243b0:	b538      	push	{r3, r4, r5, lr}
   243b2:	4605      	mov	r5, r0
   243b4:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   243b6:	6809      	ldr	r1, [r1, #0]
   243b8:	f7ff ffad 	bl	24316 <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   243bc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   243be:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   243c0:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   243c2:	60a3      	str	r3, [r4, #8]
}
   243c4:	bd38      	pop	{r3, r4, r5, pc}

000243c6 <ble_gap_find_snapshot>:
{
   243c6:	b538      	push	{r3, r4, r5, lr}
   243c8:	4604      	mov	r4, r0
   243ca:	460d      	mov	r5, r1
    ble_hs_lock();
   243cc:	f003 faa8 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   243d0:	4620      	mov	r0, r4
   243d2:	f004 f901 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   243d6:	4604      	mov	r4, r0
   243d8:	b110      	cbz	r0, 243e0 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   243da:	4629      	mov	r1, r5
   243dc:	f7ff ffe8 	bl	243b0 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   243e0:	f003 faa2 	bl	27928 <ble_hs_unlock>
    if (conn == NULL) {
   243e4:	b10c      	cbz	r4, 243ea <ble_gap_find_snapshot+0x24>
        return 0;
   243e6:	2000      	movs	r0, #0
}
   243e8:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   243ea:	2007      	movs	r0, #7
   243ec:	e7fc      	b.n	243e8 <ble_gap_find_snapshot+0x22>

000243ee <ble_gap_rd_rem_sup_feat_tx>:
{
   243ee:	b500      	push	{lr}
   243f0:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   243f2:	f8ad 000c 	strh.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   243f6:	2300      	movs	r3, #0
   243f8:	9300      	str	r3, [sp, #0]
   243fa:	2202      	movs	r2, #2
   243fc:	a903      	add	r1, sp, #12
   243fe:	f242 0016 	movw	r0, #8214	; 0x2016
   24402:	f004 fc3f 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   24406:	b005      	add	sp, #20
   24408:	f85d fb04 	ldr.w	pc, [sp], #4

0002440c <ble_gap_conn_cancel_tx>:
{
   2440c:	b500      	push	{lr}
   2440e:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24410:	2100      	movs	r1, #0
   24412:	9100      	str	r1, [sp, #0]
   24414:	460b      	mov	r3, r1
   24416:	460a      	mov	r2, r1
   24418:	f242 000e 	movw	r0, #8206	; 0x200e
   2441c:	f004 fc32 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   24420:	b003      	add	sp, #12
   24422:	f85d fb04 	ldr.w	pc, [sp], #4

00024426 <ble_gap_adv_enable_tx>:
{
   24426:	b500      	push	{lr}
   24428:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   2442a:	3800      	subs	r0, #0
   2442c:	bf18      	it	ne
   2442e:	2001      	movne	r0, #1
   24430:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24434:	2300      	movs	r3, #0
   24436:	9300      	str	r3, [sp, #0]
   24438:	2201      	movs	r2, #1
   2443a:	a903      	add	r1, sp, #12
   2443c:	f242 000a 	movw	r0, #8202	; 0x200a
   24440:	f004 fc20 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   24444:	b005      	add	sp, #20
   24446:	f85d fb04 	ldr.w	pc, [sp], #4

0002444a <ble_gap_adv_params_tx>:
{
   2444a:	b570      	push	{r4, r5, r6, lr}
   2444c:	b08a      	sub	sp, #40	; 0x28
   2444e:	4606      	mov	r6, r0
   24450:	460c      	mov	r4, r1
   24452:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   24454:	2300      	movs	r3, #0
   24456:	9308      	str	r3, [sp, #32]
   24458:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   2445c:	8853      	ldrh	r3, [r2, #2]
   2445e:	b90b      	cbnz	r3, 24464 <ble_gap_adv_params_tx+0x1a>
   24460:	8892      	ldrh	r2, [r2, #4]
   24462:	b342      	cbz	r2, 244b6 <ble_gap_adv_params_tx+0x6c>
        cmd.min_interval = htole16(adv_params->itvl_min);
   24464:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   24468:	88ab      	ldrh	r3, [r5, #4]
   2446a:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   2446e:	4628      	mov	r0, r5
   24470:	f7ff feb2 	bl	241d8 <ble_gap_adv_type>
   24474:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   24478:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   2447c:	b354      	cbz	r4, 244d4 <ble_gap_adv_params_tx+0x8a>
    cmd.peer_addr_type = peer_addr->type;
   2447e:	7823      	ldrb	r3, [r4, #0]
   24480:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   24484:	f854 3f01 	ldr.w	r3, [r4, #1]!
   24488:	f8cd 3017 	str.w	r3, [sp, #23]
   2448c:	88a3      	ldrh	r3, [r4, #4]
   2448e:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   24492:	79ab      	ldrb	r3, [r5, #6]
   24494:	bb03      	cbnz	r3, 244d8 <ble_gap_adv_params_tx+0x8e>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   24496:	2307      	movs	r3, #7
   24498:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   2449c:	79eb      	ldrb	r3, [r5, #7]
   2449e:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   244a2:	2300      	movs	r3, #0
   244a4:	9300      	str	r3, [sp, #0]
   244a6:	220f      	movs	r2, #15
   244a8:	a904      	add	r1, sp, #16
   244aa:	f242 0006 	movw	r0, #8198	; 0x2006
   244ae:	f004 fbe9 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   244b2:	b00a      	add	sp, #40	; 0x28
   244b4:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   244b6:	aa03      	add	r2, sp, #12
   244b8:	f10d 010e 	add.w	r1, sp, #14
   244bc:	7828      	ldrb	r0, [r5, #0]
   244be:	f7ff fe9f 	bl	24200 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   244c2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   244c6:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   244ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   244ce:	f8ad 3012 	strh.w	r3, [sp, #18]
   244d2:	e7cc      	b.n	2446e <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   244d4:	ac08      	add	r4, sp, #32
   244d6:	e7d2      	b.n	2447e <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = adv_params->channel_map;
   244d8:	f88d 301d 	strb.w	r3, [sp, #29]
   244dc:	e7de      	b.n	2449c <ble_gap_adv_params_tx+0x52>

000244de <ble_gap_tx_param_pos_reply>:
{
   244de:	b500      	push	{lr}
   244e0:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   244e2:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   244e6:	880b      	ldrh	r3, [r1, #0]
   244e8:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   244ec:	884b      	ldrh	r3, [r1, #2]
   244ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   244f2:	888b      	ldrh	r3, [r1, #4]
   244f4:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   244f8:	88cb      	ldrh	r3, [r1, #6]
   244fa:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   244fe:	890b      	ldrh	r3, [r1, #8]
   24500:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   24504:	894b      	ldrh	r3, [r1, #10]
   24506:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2450a:	2300      	movs	r3, #0
   2450c:	9300      	str	r3, [sp, #0]
   2450e:	220e      	movs	r2, #14
   24510:	a902      	add	r1, sp, #8
   24512:	f242 0020 	movw	r0, #8224	; 0x2020
   24516:	f004 fbb5 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   2451a:	b007      	add	sp, #28
   2451c:	f85d fb04 	ldr.w	pc, [sp], #4

00024520 <ble_gap_tx_param_neg_reply>:
{
   24520:	b500      	push	{lr}
   24522:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   24524:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   24528:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2452c:	2300      	movs	r3, #0
   2452e:	9300      	str	r3, [sp, #0]
   24530:	2203      	movs	r2, #3
   24532:	a903      	add	r1, sp, #12
   24534:	f242 0021 	movw	r0, #8225	; 0x2021
   24538:	f004 fba4 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   2453c:	b005      	add	sp, #20
   2453e:	f85d fb04 	ldr.w	pc, [sp], #4

00024542 <ble_gap_update_tx>:
{
   24542:	b500      	push	{lr}
   24544:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   24546:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   2454a:	880b      	ldrh	r3, [r1, #0]
   2454c:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   24550:	884b      	ldrh	r3, [r1, #2]
   24552:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   24556:	888b      	ldrh	r3, [r1, #4]
   24558:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   2455c:	88cb      	ldrh	r3, [r1, #6]
   2455e:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   24562:	890b      	ldrh	r3, [r1, #8]
   24564:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   24568:	894b      	ldrh	r3, [r1, #10]
   2456a:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2456e:	2300      	movs	r3, #0
   24570:	9300      	str	r3, [sp, #0]
   24572:	220e      	movs	r2, #14
   24574:	a902      	add	r1, sp, #8
   24576:	f242 0013 	movw	r0, #8211	; 0x2013
   2457a:	f004 fb83 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   2457e:	b007      	add	sp, #28
   24580:	f85d fb04 	ldr.w	pc, [sp], #4

00024584 <ble_gap_update_entry_remove>:
{
   24584:	b510      	push	{r4, lr}
   24586:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   24588:	a901      	add	r1, sp, #4
   2458a:	f7ff fe53 	bl	24234 <ble_gap_update_entry_find>
    if (entry != NULL) {
   2458e:	4604      	mov	r4, r0
   24590:	b128      	cbz	r0, 2459e <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   24592:	9b01      	ldr	r3, [sp, #4]
   24594:	b133      	cbz	r3, 245a4 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   24596:	6802      	ldr	r2, [r0, #0]
   24598:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   2459a:	f003 fab3 	bl	27b04 <ble_hs_timer_resched>
}
   2459e:	4620      	mov	r0, r4
   245a0:	b002      	add	sp, #8
   245a2:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   245a4:	4b02      	ldr	r3, [pc, #8]	; (245b0 <ble_gap_update_entry_remove+0x2c>)
   245a6:	681a      	ldr	r2, [r3, #0]
   245a8:	6812      	ldr	r2, [r2, #0]
   245aa:	601a      	str	r2, [r3, #0]
   245ac:	e7f5      	b.n	2459a <ble_gap_update_entry_remove+0x16>
   245ae:	bf00      	nop
   245b0:	10002cb4 	.word	0x10002cb4

000245b4 <ble_gap_slave_reset_state>:
{
   245b4:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   245b6:	4b06      	ldr	r3, [pc, #24]	; (245d0 <ble_gap_slave_reset_state+0x1c>)
   245b8:	0101      	lsls	r1, r0, #4
   245ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   245be:	2200      	movs	r2, #0
   245c0:	545a      	strb	r2, [r3, r1]
    ble_gap_slave[instance].exp_set = 0;
   245c2:	7843      	ldrb	r3, [r0, #1]
   245c4:	f362 1304 	bfi	r3, r2, #4, #1
   245c8:	7043      	strb	r3, [r0, #1]
    ble_hs_timer_resched();
   245ca:	f003 fa9b 	bl	27b04 <ble_hs_timer_resched>
}
   245ce:	bd08      	pop	{r3, pc}
   245d0:	10002cec 	.word	0x10002cec

000245d4 <ble_gap_slave_extract_cb>:
{
   245d4:	b570      	push	{r4, r5, r6, lr}
   245d6:	4604      	mov	r4, r0
   245d8:	460e      	mov	r6, r1
   245da:	4615      	mov	r5, r2
    ble_hs_lock();
   245dc:	f003 f9a0 	bl	27920 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   245e0:	4b06      	ldr	r3, [pc, #24]	; (245fc <ble_gap_slave_extract_cb+0x28>)
   245e2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   245e6:	689a      	ldr	r2, [r3, #8]
   245e8:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   245ea:	68db      	ldr	r3, [r3, #12]
   245ec:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   245ee:	4620      	mov	r0, r4
   245f0:	f7ff ffe0 	bl	245b4 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   245f4:	f003 f998 	bl	27928 <ble_hs_unlock>
}
   245f8:	bd70      	pop	{r4, r5, r6, pc}
   245fa:	bf00      	nop
   245fc:	10002cec 	.word	0x10002cec

00024600 <ble_gap_adv_finished>:
{
   24600:	b530      	push	{r4, r5, lr}
   24602:	b091      	sub	sp, #68	; 0x44
   24604:	4604      	mov	r4, r0
   24606:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   24608:	2234      	movs	r2, #52	; 0x34
   2460a:	2100      	movs	r1, #0
   2460c:	a803      	add	r0, sp, #12
   2460e:	f7f2 fa72 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   24612:	2309      	movs	r3, #9
   24614:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   24618:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   2461a:	a803      	add	r0, sp, #12
   2461c:	f7ff fe40 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   24620:	aa01      	add	r2, sp, #4
   24622:	a902      	add	r1, sp, #8
   24624:	4620      	mov	r0, r4
   24626:	f7ff ffd5 	bl	245d4 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   2462a:	9b02      	ldr	r3, [sp, #8]
   2462c:	b113      	cbz	r3, 24634 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   2462e:	9901      	ldr	r1, [sp, #4]
   24630:	a803      	add	r0, sp, #12
   24632:	4798      	blx	r3
}
   24634:	b011      	add	sp, #68	; 0x44
   24636:	bd30      	pop	{r4, r5, pc}

00024638 <ble_gap_master_reset_state>:
{
   24638:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   2463a:	4b08      	ldr	r3, [pc, #32]	; (2465c <ble_gap_master_reset_state+0x24>)
   2463c:	2200      	movs	r2, #0
   2463e:	741a      	strb	r2, [r3, #16]
    ble_gap_master.exp_set = 0;
   24640:	7c59      	ldrb	r1, [r3, #17]
   24642:	f362 0100 	bfi	r1, r2, #0, #1
   24646:	7459      	strb	r1, [r3, #17]
    ble_gap_master.conn.cancel = 0;
   24648:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   2464c:	f362 01c3 	bfi	r1, r2, #3, #1
   24650:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    ble_hs_timer_resched();
   24654:	f003 fa56 	bl	27b04 <ble_hs_timer_resched>
}
   24658:	bd08      	pop	{r3, pc}
   2465a:	bf00      	nop
   2465c:	10002cec 	.word	0x10002cec

00024660 <ble_gap_master_extract_state>:
{
   24660:	b570      	push	{r4, r5, r6, lr}
   24662:	4604      	mov	r4, r0
   24664:	460e      	mov	r6, r1
    ble_hs_lock();
   24666:	f003 f95b 	bl	27920 <ble_hs_lock>
    *out_state = ble_gap_master;
   2466a:	4d08      	ldr	r5, [pc, #32]	; (2468c <ble_gap_master_extract_state+0x2c>)
   2466c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2466e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   24670:	682b      	ldr	r3, [r5, #0]
   24672:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   24674:	b916      	cbnz	r6, 2467c <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   24676:	f003 f957 	bl	27928 <ble_hs_unlock>
}
   2467a:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   2467c:	f7ff ffdc 	bl	24638 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   24680:	f1a5 0320 	sub.w	r3, r5, #32
   24684:	2200      	movs	r2, #0
   24686:	f883 2020 	strb.w	r2, [r3, #32]
   2468a:	e7f4      	b.n	24676 <ble_gap_master_extract_state+0x16>
   2468c:	10002cfc 	.word	0x10002cfc

00024690 <ble_gap_master_connect_failure>:
{
   24690:	b510      	push	{r4, lr}
   24692:	b092      	sub	sp, #72	; 0x48
   24694:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   24696:	2101      	movs	r1, #1
   24698:	a80d      	add	r0, sp, #52	; 0x34
   2469a:	f7ff ffe1 	bl	24660 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   2469e:	a80d      	add	r0, sp, #52	; 0x34
   246a0:	f7ff fd50 	bl	24144 <ble_gap_has_client>
   246a4:	b910      	cbnz	r0, 246ac <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   246a6:	2000      	movs	r0, #0
}
   246a8:	b012      	add	sp, #72	; 0x48
   246aa:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   246ac:	2234      	movs	r2, #52	; 0x34
   246ae:	2100      	movs	r1, #0
   246b0:	4668      	mov	r0, sp
   246b2:	f7f2 fa20 	bl	16af6 <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   246b6:	2300      	movs	r3, #0
   246b8:	f88d 3000 	strb.w	r3, [sp]
        event.connect.status = status;
   246bc:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   246be:	9910      	ldr	r1, [sp, #64]	; 0x40
   246c0:	4668      	mov	r0, sp
   246c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   246c4:	4798      	blx	r3
   246c6:	e7ef      	b.n	246a8 <ble_gap_master_connect_failure+0x18>

000246c8 <ble_gap_master_failed>:
{
   246c8:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   246ca:	4b06      	ldr	r3, [pc, #24]	; (246e4 <ble_gap_master_failed+0x1c>)
   246cc:	7c1b      	ldrb	r3, [r3, #16]
   246ce:	2b02      	cmp	r3, #2
   246d0:	d000      	beq.n	246d4 <ble_gap_master_failed+0xc>
}
   246d2:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   246d4:	4a04      	ldr	r2, [pc, #16]	; (246e8 <ble_gap_master_failed+0x20>)
   246d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
   246d8:	3301      	adds	r3, #1
   246da:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   246dc:	f7ff ffd8 	bl	24690 <ble_gap_master_connect_failure>
}
   246e0:	e7f7      	b.n	246d2 <ble_gap_master_failed+0xa>
   246e2:	bf00      	nop
   246e4:	10002cec 	.word	0x10002cec
   246e8:	10002c2c 	.word	0x10002c2c

000246ec <ble_gap_master_connect_cancelled>:
{
   246ec:	b510      	push	{r4, lr}
   246ee:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   246f0:	2101      	movs	r1, #1
   246f2:	a80d      	add	r0, sp, #52	; 0x34
   246f4:	f7ff ffb4 	bl	24660 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   246f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   246fa:	b1ac      	cbz	r4, 24728 <ble_gap_master_connect_cancelled+0x3c>
        memset(&event, 0, sizeof event);
   246fc:	2234      	movs	r2, #52	; 0x34
   246fe:	2100      	movs	r1, #0
   24700:	4668      	mov	r0, sp
   24702:	f7f2 f9f8 	bl	16af6 <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   24706:	2300      	movs	r3, #0
   24708:	f88d 3000 	strb.w	r3, [sp]
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2470c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24710:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   24714:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   24718:	f013 0f08 	tst.w	r3, #8
   2471c:	d006      	beq.n	2472c <ble_gap_master_connect_cancelled+0x40>
            event.connect.status = BLE_HS_EAPP;
   2471e:	2309      	movs	r3, #9
   24720:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   24722:	9910      	ldr	r1, [sp, #64]	; 0x40
   24724:	4668      	mov	r0, sp
   24726:	47a0      	blx	r4
}
   24728:	b012      	add	sp, #72	; 0x48
   2472a:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   2472c:	230d      	movs	r3, #13
   2472e:	9301      	str	r3, [sp, #4]
   24730:	e7f7      	b.n	24722 <ble_gap_master_connect_cancelled+0x36>
	...

00024734 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   24734:	b128      	cbz	r0, 24742 <ble_gap_update_entry_free+0xe>
{
   24736:	b508      	push	{r3, lr}
   24738:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   2473a:	4802      	ldr	r0, [pc, #8]	; (24744 <ble_gap_update_entry_free+0x10>)
   2473c:	f7f1 fb8b 	bl	15e56 <os_memblock_put>
}
   24740:	bd08      	pop	{r3, pc}
   24742:	4770      	bx	lr
   24744:	10002cd0 	.word	0x10002cd0

00024748 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   24748:	4b0b      	ldr	r3, [pc, #44]	; (24778 <ble_gap_master_ticks_until_exp+0x30>)
   2474a:	7c1b      	ldrb	r3, [r3, #16]
   2474c:	b173      	cbz	r3, 2476c <ble_gap_master_ticks_until_exp+0x24>
   2474e:	4b0a      	ldr	r3, [pc, #40]	; (24778 <ble_gap_master_ticks_until_exp+0x30>)
   24750:	7c5b      	ldrb	r3, [r3, #17]
   24752:	f013 0f01 	tst.w	r3, #1
   24756:	d00c      	beq.n	24772 <ble_gap_master_ticks_until_exp+0x2a>
{
   24758:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   2475a:	4b07      	ldr	r3, [pc, #28]	; (24778 <ble_gap_master_ticks_until_exp+0x30>)
   2475c:	695c      	ldr	r4, [r3, #20]
   2475e:	f7f1 ff0b 	bl	16578 <os_time_get>
   24762:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   24764:	2800      	cmp	r0, #0
   24766:	dc00      	bgt.n	2476a <ble_gap_master_ticks_until_exp+0x22>
    return 0;
   24768:	2000      	movs	r0, #0
}
   2476a:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   2476c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24770:	4770      	bx	lr
   24772:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   24776:	4770      	bx	lr
   24778:	10002cec 	.word	0x10002cec

0002477c <ble_gap_update_next_exp>:
{
   2477c:	b538      	push	{r3, r4, r5, lr}
   2477e:	4605      	mov	r5, r0
   24780:	f7f1 fefa 	bl	16578 <os_time_get>
   24784:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   24786:	4b0b      	ldr	r3, [pc, #44]	; (247b4 <ble_gap_update_next_exp+0x38>)
   24788:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   2478a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2478e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   24792:	e002      	b.n	2479a <ble_gap_update_next_exp+0x1e>
            ticks = 0;
   24794:	2300      	movs	r3, #0
   24796:	e005      	b.n	247a4 <ble_gap_update_next_exp+0x28>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   24798:	6812      	ldr	r2, [r2, #0]
   2479a:	b142      	cbz	r2, 247ae <ble_gap_update_next_exp+0x32>
        ticks = entry->exp_os_ticks - now;
   2479c:	6913      	ldr	r3, [r2, #16]
   2479e:	1b1b      	subs	r3, r3, r4
        if (ticks <= 0) {
   247a0:	2b00      	cmp	r3, #0
   247a2:	ddf7      	ble.n	24794 <ble_gap_update_next_exp+0x18>
        if (ticks < best_ticks) {
   247a4:	4299      	cmp	r1, r3
   247a6:	ddf7      	ble.n	24798 <ble_gap_update_next_exp+0x1c>
            conn_handle = entry->conn_handle;
   247a8:	8a90      	ldrh	r0, [r2, #20]
            best_ticks = ticks;
   247aa:	4619      	mov	r1, r3
   247ac:	e7f4      	b.n	24798 <ble_gap_update_next_exp+0x1c>
    if (out_ticks_from_now != NULL) {
   247ae:	b105      	cbz	r5, 247b2 <ble_gap_update_next_exp+0x36>
        *out_ticks_from_now = best_ticks;
   247b0:	6029      	str	r1, [r5, #0]
}
   247b2:	bd38      	pop	{r3, r4, r5, pc}
   247b4:	10002cb4 	.word	0x10002cb4

000247b8 <ble_gap_update_timer>:
{
   247b8:	b510      	push	{r4, lr}
   247ba:	b082      	sub	sp, #8
   247bc:	e007      	b.n	247ce <ble_gap_update_timer+0x16>
        ble_hs_unlock();
   247be:	f003 f8b3 	bl	27928 <ble_hs_unlock>
            entry = NULL;
   247c2:	2400      	movs	r4, #0
   247c4:	e002      	b.n	247cc <ble_gap_update_timer+0x14>
            ble_gap_update_entry_free(entry);
   247c6:	4620      	mov	r0, r4
   247c8:	f7ff ffb4 	bl	24734 <ble_gap_update_entry_free>
    } while (entry != NULL);
   247cc:	b17c      	cbz	r4, 247ee <ble_gap_update_timer+0x36>
        ble_hs_lock();
   247ce:	f003 f8a7 	bl	27920 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   247d2:	a801      	add	r0, sp, #4
   247d4:	f7ff ffd2 	bl	2477c <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   247d8:	9b01      	ldr	r3, [sp, #4]
   247da:	2b00      	cmp	r3, #0
   247dc:	d1ef      	bne.n	247be <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
   247de:	f7ff fed1 	bl	24584 <ble_gap_update_entry_remove>
   247e2:	4604      	mov	r4, r0
        ble_hs_unlock();
   247e4:	f003 f8a0 	bl	27928 <ble_hs_unlock>
        if (entry != NULL) {
   247e8:	2c00      	cmp	r4, #0
   247ea:	d1ec      	bne.n	247c6 <ble_gap_update_timer+0xe>
   247ec:	e7ee      	b.n	247cc <ble_gap_update_timer+0x14>
}
   247ee:	9801      	ldr	r0, [sp, #4]
   247f0:	b002      	add	sp, #8
   247f2:	bd10      	pop	{r4, pc}

000247f4 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   247f4:	4b0b      	ldr	r3, [pc, #44]	; (24824 <ble_gap_slave_ticks_until_exp+0x30>)
   247f6:	781b      	ldrb	r3, [r3, #0]
   247f8:	b173      	cbz	r3, 24818 <ble_gap_slave_ticks_until_exp+0x24>
   247fa:	4b0a      	ldr	r3, [pc, #40]	; (24824 <ble_gap_slave_ticks_until_exp+0x30>)
   247fc:	785b      	ldrb	r3, [r3, #1]
   247fe:	f013 0f10 	tst.w	r3, #16
   24802:	d00c      	beq.n	2481e <ble_gap_slave_ticks_until_exp+0x2a>
{
   24804:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   24806:	4b07      	ldr	r3, [pc, #28]	; (24824 <ble_gap_slave_ticks_until_exp+0x30>)
   24808:	685c      	ldr	r4, [r3, #4]
   2480a:	f7f1 feb5 	bl	16578 <os_time_get>
   2480e:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   24810:	2800      	cmp	r0, #0
   24812:	dc00      	bgt.n	24816 <ble_gap_slave_ticks_until_exp+0x22>
    return 0;
   24814:	2000      	movs	r0, #0
}
   24816:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   24818:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2481c:	4770      	bx	lr
   2481e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   24822:	4770      	bx	lr
   24824:	10002cec 	.word	0x10002cec

00024828 <ble_gap_slave_timer>:
{
   24828:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   2482a:	f7ff ffe3 	bl	247f4 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   2482e:	b100      	cbz	r0, 24832 <ble_gap_slave_timer+0xa>
}
   24830:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   24832:	2000      	movs	r0, #0
   24834:	f7ff fdf7 	bl	24426 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   24838:	b108      	cbz	r0, 2483e <ble_gap_slave_timer+0x16>
        return 100;
   2483a:	2064      	movs	r0, #100	; 0x64
   2483c:	e7f8      	b.n	24830 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   2483e:	f7ff feb9 	bl	245b4 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   24842:	2300      	movs	r3, #0
   24844:	461a      	mov	r2, r3
   24846:	210d      	movs	r1, #13
   24848:	4618      	mov	r0, r3
   2484a:	f7ff fed9 	bl	24600 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   2484e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24852:	e7ed      	b.n	24830 <ble_gap_slave_timer+0x8>

00024854 <ble_gap_slave_set_timer>:
{
   24854:	b510      	push	{r4, lr}
   24856:	4604      	mov	r4, r0
   24858:	f7f1 fe8e 	bl	16578 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   2485c:	4404      	add	r4, r0
   2485e:	4b04      	ldr	r3, [pc, #16]	; (24870 <ble_gap_slave_set_timer+0x1c>)
   24860:	605c      	str	r4, [r3, #4]
    ble_gap_slave[0].exp_set = 1;
   24862:	785a      	ldrb	r2, [r3, #1]
   24864:	f042 0210 	orr.w	r2, r2, #16
   24868:	705a      	strb	r2, [r3, #1]
    ble_hs_timer_resched();
   2486a:	f003 f94b 	bl	27b04 <ble_hs_timer_resched>
}
   2486e:	bd10      	pop	{r4, pc}
   24870:	10002cec 	.word	0x10002cec

00024874 <ble_gap_log_adv>:
{
   24874:	b5f0      	push	{r4, r5, r6, r7, lr}
   24876:	b087      	sub	sp, #28
   24878:	4606      	mov	r6, r0
   2487a:	460d      	mov	r5, r1
   2487c:	4614      	mov	r4, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   2487e:	7853      	ldrb	r3, [r2, #1]
   24880:	4a15      	ldr	r2, [pc, #84]	; (248d8 <ble_gap_log_adv+0x64>)
   24882:	2101      	movs	r1, #1
   24884:	2004      	movs	r0, #4
   24886:	f7f4 ff53 	bl	19730 <modlog_printf>
    if (direct_addr) {
   2488a:	b1ad      	cbz	r5, 248b8 <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   2488c:	782b      	ldrb	r3, [r5, #0]
   2488e:	4a13      	ldr	r2, [pc, #76]	; (248dc <ble_gap_log_adv+0x68>)
   24890:	2101      	movs	r1, #1
   24892:	2004      	movs	r0, #4
   24894:	f7f4 ff4c 	bl	19730 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   24898:	796b      	ldrb	r3, [r5, #5]
   2489a:	792a      	ldrb	r2, [r5, #4]
   2489c:	78e9      	ldrb	r1, [r5, #3]
   2489e:	78a8      	ldrb	r0, [r5, #2]
   248a0:	786f      	ldrb	r7, [r5, #1]
   248a2:	9704      	str	r7, [sp, #16]
   248a4:	9003      	str	r0, [sp, #12]
   248a6:	9102      	str	r1, [sp, #8]
   248a8:	9201      	str	r2, [sp, #4]
   248aa:	9300      	str	r3, [sp, #0]
   248ac:	79ab      	ldrb	r3, [r5, #6]
   248ae:	4a0c      	ldr	r2, [pc, #48]	; (248e0 <ble_gap_log_adv+0x6c>)
   248b0:	2101      	movs	r1, #1
   248b2:	2004      	movs	r0, #4
   248b4:	f7f4 ff3c 	bl	19730 <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   248b8:	79e3      	ldrb	r3, [r4, #7]
   248ba:	8862      	ldrh	r2, [r4, #2]
   248bc:	88a1      	ldrh	r1, [r4, #4]
   248be:	9103      	str	r1, [sp, #12]
   248c0:	9202      	str	r2, [sp, #8]
   248c2:	9301      	str	r3, [sp, #4]
   248c4:	9600      	str	r6, [sp, #0]
   248c6:	79a3      	ldrb	r3, [r4, #6]
   248c8:	4a06      	ldr	r2, [pc, #24]	; (248e4 <ble_gap_log_adv+0x70>)
   248ca:	2101      	movs	r1, #1
   248cc:	2004      	movs	r0, #4
   248ce:	f7f4 ff2f 	bl	19730 <modlog_printf>
}
   248d2:	b007      	add	sp, #28
   248d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   248d6:	bf00      	nop
   248d8:	000348b8 	.word	0x000348b8
   248dc:	000348c8 	.word	0x000348c8
   248e0:	00033f98 	.word	0x00033f98
   248e4:	000348ec 	.word	0x000348ec

000248e8 <ble_gap_log_update>:
{
   248e8:	b570      	push	{r4, r5, r6, lr}
   248ea:	b086      	sub	sp, #24
   248ec:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "connection parameter update; "
   248ee:	880a      	ldrh	r2, [r1, #0]
   248f0:	8848      	ldrh	r0, [r1, #2]
   248f2:	888c      	ldrh	r4, [r1, #4]
   248f4:	88cd      	ldrh	r5, [r1, #6]
   248f6:	890e      	ldrh	r6, [r1, #8]
   248f8:	8949      	ldrh	r1, [r1, #10]
   248fa:	9105      	str	r1, [sp, #20]
   248fc:	9604      	str	r6, [sp, #16]
   248fe:	9503      	str	r5, [sp, #12]
   24900:	9402      	str	r4, [sp, #8]
   24902:	9001      	str	r0, [sp, #4]
   24904:	9200      	str	r2, [sp, #0]
   24906:	4a03      	ldr	r2, [pc, #12]	; (24914 <ble_gap_log_update+0x2c>)
   24908:	2101      	movs	r1, #1
   2490a:	2004      	movs	r0, #4
   2490c:	f7f4 ff10 	bl	19730 <modlog_printf>
}
   24910:	b006      	add	sp, #24
   24912:	bd70      	pop	{r4, r5, r6, pc}
   24914:	00034948 	.word	0x00034948

00024918 <ble_gap_master_timer>:
{
   24918:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   2491a:	f7ff ff15 	bl	24748 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   2491e:	b9e0      	cbnz	r0, 2495a <ble_gap_master_timer+0x42>
    switch (ble_gap_master.op) {
   24920:	4b0f      	ldr	r3, [pc, #60]	; (24960 <ble_gap_master_timer+0x48>)
   24922:	7c1b      	ldrb	r3, [r3, #16]
   24924:	2b01      	cmp	r3, #1
   24926:	d00c      	beq.n	24942 <ble_gap_master_timer+0x2a>
   24928:	2b02      	cmp	r3, #2
   2492a:	d114      	bne.n	24956 <ble_gap_master_timer+0x3e>
        rc = ble_gap_conn_cancel_tx();
   2492c:	f7ff fd6e 	bl	2440c <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   24930:	b9a0      	cbnz	r0, 2495c <ble_gap_master_timer+0x44>
            ble_gap_master.exp_set = 0;
   24932:	4b0b      	ldr	r3, [pc, #44]	; (24960 <ble_gap_master_timer+0x48>)
   24934:	7c5a      	ldrb	r2, [r3, #17]
   24936:	f36f 0200 	bfc	r2, #0, #1
   2493a:	745a      	strb	r2, [r3, #17]
    return BLE_HS_FOREVER;
   2493c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   24940:	e00b      	b.n	2495a <ble_gap_master_timer+0x42>
        assert(0);
   24942:	f7ef fe87 	bl	14654 <hal_debugger_connected>
   24946:	b100      	cbz	r0, 2494a <ble_gap_master_timer+0x32>
   24948:	be01      	bkpt	0x0001
   2494a:	2300      	movs	r3, #0
   2494c:	461a      	mov	r2, r3
   2494e:	4619      	mov	r1, r3
   24950:	4618      	mov	r0, r3
   24952:	f7f0 fa21 	bl	14d98 <__assert_func>
    switch (ble_gap_master.op) {
   24956:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   2495a:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   2495c:	200c      	movs	r0, #12
   2495e:	e7fc      	b.n	2495a <ble_gap_master_timer+0x42>
   24960:	10002cec 	.word	0x10002cec

00024964 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   24964:	b34a      	cbz	r2, 249ba <ble_gap_adv_validate+0x56>
{
   24966:	b508      	push	{r3, lr}
   24968:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   2496a:	2803      	cmp	r0, #3
   2496c:	d827      	bhi.n	249be <ble_gap_adv_validate+0x5a>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   2496e:	7852      	ldrb	r2, [r2, #1]
   24970:	2a02      	cmp	r2, #2
   24972:	d826      	bhi.n	249c2 <ble_gap_adv_validate+0x5e>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   24974:	4a1b      	ldr	r2, [pc, #108]	; (249e4 <ble_gap_adv_validate+0x80>)
   24976:	7812      	ldrb	r2, [r2, #0]
   24978:	bb2a      	cbnz	r2, 249c6 <ble_gap_adv_validate+0x62>
    switch (adv_params->conn_mode) {
   2497a:	781a      	ldrb	r2, [r3, #0]
   2497c:	2a01      	cmp	r2, #1
   2497e:	d013      	beq.n	249a8 <ble_gap_adv_validate+0x44>
   24980:	2a02      	cmp	r2, #2
   24982:	d008      	beq.n	24996 <ble_gap_adv_validate+0x32>
   24984:	b10a      	cbz	r2, 2498a <ble_gap_adv_validate+0x26>
   24986:	2003      	movs	r0, #3
}
   24988:	bd08      	pop	{r3, pc}
        if (adv_params->high_duty_cycle) {
   2498a:	7a1b      	ldrb	r3, [r3, #8]
   2498c:	f013 0f01 	tst.w	r3, #1
   24990:	d11b      	bne.n	249ca <ble_gap_adv_validate+0x66>
    return 0;
   24992:	2000      	movs	r0, #0
   24994:	e7f8      	b.n	24988 <ble_gap_adv_validate+0x24>
        if (adv_params->high_duty_cycle) {
   24996:	7a1b      	ldrb	r3, [r3, #8]
   24998:	f013 0f01 	tst.w	r3, #1
   2499c:	d117      	bne.n	249ce <ble_gap_adv_validate+0x6a>
        if (!ble_hs_conn_can_alloc()) {
   2499e:	f003 fd4f 	bl	28440 <ble_hs_conn_can_alloc>
   249a2:	b1b0      	cbz	r0, 249d2 <ble_gap_adv_validate+0x6e>
    return 0;
   249a4:	2000      	movs	r0, #0
   249a6:	e7ef      	b.n	24988 <ble_gap_adv_validate+0x24>
        if (peer_addr == NULL) {
   249a8:	b1a9      	cbz	r1, 249d6 <ble_gap_adv_validate+0x72>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   249aa:	780b      	ldrb	r3, [r1, #0]
   249ac:	2b03      	cmp	r3, #3
   249ae:	d814      	bhi.n	249da <ble_gap_adv_validate+0x76>
        if (!ble_hs_conn_can_alloc()) {
   249b0:	f003 fd46 	bl	28440 <ble_hs_conn_can_alloc>
   249b4:	b198      	cbz	r0, 249de <ble_gap_adv_validate+0x7a>
    return 0;
   249b6:	2000      	movs	r0, #0
   249b8:	e7e6      	b.n	24988 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   249ba:	2003      	movs	r0, #3
}
   249bc:	4770      	bx	lr
        return BLE_HS_EINVAL;
   249be:	2003      	movs	r0, #3
   249c0:	e7e2      	b.n	24988 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   249c2:	2003      	movs	r0, #3
   249c4:	e7e0      	b.n	24988 <ble_gap_adv_validate+0x24>
        return BLE_HS_EALREADY;
   249c6:	2002      	movs	r0, #2
   249c8:	e7de      	b.n	24988 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   249ca:	2003      	movs	r0, #3
   249cc:	e7dc      	b.n	24988 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   249ce:	2003      	movs	r0, #3
   249d0:	e7da      	b.n	24988 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   249d2:	2006      	movs	r0, #6
   249d4:	e7d8      	b.n	24988 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   249d6:	2003      	movs	r0, #3
   249d8:	e7d6      	b.n	24988 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   249da:	2003      	movs	r0, #3
   249dc:	e7d4      	b.n	24988 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   249de:	2006      	movs	r0, #6
   249e0:	e7d2      	b.n	24988 <ble_gap_adv_validate+0x24>
   249e2:	bf00      	nop
   249e4:	10002cec 	.word	0x10002cec

000249e8 <ble_gap_update_entry_alloc>:
{
   249e8:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   249ea:	4807      	ldr	r0, [pc, #28]	; (24a08 <ble_gap_update_entry_alloc+0x20>)
   249ec:	f7f1 fa0b 	bl	15e06 <os_memblock_get>
    if (entry != NULL) {
   249f0:	4603      	mov	r3, r0
   249f2:	b130      	cbz	r0, 24a02 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   249f4:	2200      	movs	r2, #0
   249f6:	6002      	str	r2, [r0, #0]
   249f8:	6042      	str	r2, [r0, #4]
   249fa:	6082      	str	r2, [r0, #8]
   249fc:	60c2      	str	r2, [r0, #12]
   249fe:	6102      	str	r2, [r0, #16]
   24a00:	6142      	str	r2, [r0, #20]
}
   24a02:	4618      	mov	r0, r3
   24a04:	bd08      	pop	{r3, pc}
   24a06:	bf00      	nop
   24a08:	10002cd0 	.word	0x10002cd0

00024a0c <ble_gap_conn_find>:
{
   24a0c:	b538      	push	{r3, r4, r5, lr}
   24a0e:	4605      	mov	r5, r0
   24a10:	460c      	mov	r4, r1
    ble_hs_lock();
   24a12:	f002 ff85 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   24a16:	4628      	mov	r0, r5
   24a18:	f003 fdde 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   24a1c:	4605      	mov	r5, r0
   24a1e:	b118      	cbz	r0, 24a28 <ble_gap_conn_find+0x1c>
   24a20:	b114      	cbz	r4, 24a28 <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   24a22:	4621      	mov	r1, r4
   24a24:	f7ff fc77 	bl	24316 <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   24a28:	f002 ff7e 	bl	27928 <ble_hs_unlock>
    if (conn == NULL) {
   24a2c:	b10d      	cbz	r5, 24a32 <ble_gap_conn_find+0x26>
        return 0;
   24a2e:	2000      	movs	r0, #0
}
   24a30:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   24a32:	2007      	movs	r0, #7
   24a34:	e7fc      	b.n	24a30 <ble_gap_conn_find+0x24>

00024a36 <ble_gap_master_in_progress>:
}
   24a36:	2000      	movs	r0, #0
   24a38:	4770      	bx	lr

00024a3a <ble_gap_rx_adv_report>:
}
   24a3a:	4770      	bx	lr

00024a3c <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   24a3c:	b538      	push	{r3, r4, r5, lr}
   24a3e:	4604      	mov	r4, r0
    ble_hs_lock();
   24a40:	f002 ff6e 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   24a44:	8860      	ldrh	r0, [r4, #2]
   24a46:	f003 fdc7 	bl	285d8 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   24a4a:	b110      	cbz	r0, 24a52 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   24a4c:	4605      	mov	r5, r0
   24a4e:	7863      	ldrb	r3, [r4, #1]
   24a50:	b113      	cbz	r3, 24a58 <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   24a52:	f002 ff69 	bl	27928 <ble_hs_unlock>
}
   24a56:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   24a58:	1d20      	adds	r0, r4, #4
   24a5a:	f00d fa65 	bl	31f28 <get_le32>
   24a5e:	6268      	str	r0, [r5, #36]	; 0x24
   24a60:	e7f7      	b.n	24a52 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

00024a62 <ble_gap_rx_l2cap_update_req>:
{
   24a62:	b530      	push	{r4, r5, lr}
   24a64:	b08f      	sub	sp, #60	; 0x3c
   24a66:	4604      	mov	r4, r0
   24a68:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   24a6a:	2234      	movs	r2, #52	; 0x34
   24a6c:	2100      	movs	r1, #0
   24a6e:	a801      	add	r0, sp, #4
   24a70:	f7f2 f841 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   24a74:	2305      	movs	r3, #5
   24a76:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   24a7a:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   24a7e:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   24a80:	4621      	mov	r1, r4
   24a82:	a801      	add	r0, sp, #4
   24a84:	f7ff fc36 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   24a88:	b00f      	add	sp, #60	; 0x3c
   24a8a:	bd30      	pop	{r4, r5, pc}

00024a8c <ble_gap_rx_phy_update_complete>:
{
   24a8c:	b570      	push	{r4, r5, r6, lr}
   24a8e:	b08e      	sub	sp, #56	; 0x38
   24a90:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   24a92:	8845      	ldrh	r5, [r0, #2]
   24a94:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   24a96:	2234      	movs	r2, #52	; 0x34
   24a98:	2100      	movs	r1, #0
   24a9a:	a801      	add	r0, sp, #4
   24a9c:	f7f2 f82b 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   24aa0:	2312      	movs	r3, #18
   24aa2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   24aa6:	7863      	ldrb	r3, [r4, #1]
   24aa8:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   24aaa:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   24aae:	7923      	ldrb	r3, [r4, #4]
   24ab0:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   24ab4:	7963      	ldrb	r3, [r4, #5]
   24ab6:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   24aba:	a801      	add	r0, sp, #4
   24abc:	f7ff fbf0 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   24ac0:	4631      	mov	r1, r6
   24ac2:	a801      	add	r0, sp, #4
   24ac4:	f7ff fc16 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   24ac8:	b00e      	add	sp, #56	; 0x38
   24aca:	bd70      	pop	{r4, r5, r6, pc}

00024acc <ble_gap_timer>:
{
   24acc:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   24ace:	f7ff ff23 	bl	24918 <ble_gap_master_timer>
   24ad2:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   24ad4:	f7ff fe70 	bl	247b8 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   24ad8:	4284      	cmp	r4, r0
   24ada:	bfa8      	it	ge
   24adc:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   24ade:	f7ff fea3 	bl	24828 <ble_gap_slave_timer>
   24ae2:	42a0      	cmp	r0, r4
   24ae4:	dd01      	ble.n	24aea <ble_gap_timer+0x1e>
}
   24ae6:	4620      	mov	r0, r4
   24ae8:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   24aea:	f7ff fe9d 	bl	24828 <ble_gap_slave_timer>
   24aee:	4604      	mov	r4, r0
    return min_ticks;
   24af0:	e7f9      	b.n	24ae6 <ble_gap_timer+0x1a>
	...

00024af4 <ble_gap_adv_start>:
{
   24af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24af8:	b082      	sub	sp, #8
   24afa:	4604      	mov	r4, r0
   24afc:	460e      	mov	r6, r1
   24afe:	4617      	mov	r7, r2
   24b00:	461d      	mov	r5, r3
    STATS_INC(ble_gap_stats, adv_start);
   24b02:	4a41      	ldr	r2, [pc, #260]	; (24c08 <ble_gap_adv_start+0x114>)
   24b04:	69d3      	ldr	r3, [r2, #28]
   24b06:	3301      	adds	r3, #1
   24b08:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   24b0a:	f002 ff09 	bl	27920 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   24b0e:	462a      	mov	r2, r5
   24b10:	4631      	mov	r1, r6
   24b12:	4620      	mov	r0, r4
   24b14:	f7ff ff26 	bl	24964 <ble_gap_adv_validate>
    if (rc != 0) {
   24b18:	4680      	mov	r8, r0
   24b1a:	b9a8      	cbnz	r0, 24b48 <ble_gap_adv_start+0x54>
    if (duration_ms != BLE_HS_FOREVER) {
   24b1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   24b20:	429f      	cmp	r7, r3
   24b22:	d006      	beq.n	24b32 <ble_gap_adv_start+0x3e>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   24b24:	a901      	add	r1, sp, #4
   24b26:	4638      	mov	r0, r7
   24b28:	f7f1 fdc7 	bl	166ba <os_time_ms_to_ticks>
        if (rc != 0) {
   24b2c:	f010 0fff 	tst.w	r0, #255	; 0xff
   24b30:	d117      	bne.n	24b62 <ble_gap_adv_start+0x6e>
    if (!ble_hs_is_enabled()) {
   24b32:	f002 ff2d 	bl	27990 <ble_hs_is_enabled>
   24b36:	b1c8      	cbz	r0, 24b6c <ble_gap_adv_start+0x78>
    if (ble_gap_is_preempted()) {
   24b38:	f7ff faf2 	bl	24120 <ble_gap_is_preempted>
   24b3c:	b9d8      	cbnz	r0, 24b76 <ble_gap_adv_start+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   24b3e:	4620      	mov	r0, r4
   24b40:	f004 fd57 	bl	295f2 <ble_hs_id_use_addr>
    if (rc != 0) {
   24b44:	4680      	mov	r8, r0
   24b46:	b1d8      	cbz	r0, 24b80 <ble_gap_adv_start+0x8c>
    ble_hs_unlock();
   24b48:	f002 feee 	bl	27928 <ble_hs_unlock>
    if (rc != 0) {
   24b4c:	f1b8 0f00 	cmp.w	r8, #0
   24b50:	d003      	beq.n	24b5a <ble_gap_adv_start+0x66>
        STATS_INC(ble_gap_stats, adv_start_fail);
   24b52:	4a2d      	ldr	r2, [pc, #180]	; (24c08 <ble_gap_adv_start+0x114>)
   24b54:	6a13      	ldr	r3, [r2, #32]
   24b56:	3301      	adds	r3, #1
   24b58:	6213      	str	r3, [r2, #32]
}
   24b5a:	4640      	mov	r0, r8
   24b5c:	b002      	add	sp, #8
   24b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   24b62:	f002 fee1 	bl	27928 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   24b66:	f04f 0803 	mov.w	r8, #3
   24b6a:	e7f2      	b.n	24b52 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   24b6c:	f002 fedc 	bl	27928 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   24b70:	f04f 081e 	mov.w	r8, #30
   24b74:	e7ed      	b.n	24b52 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   24b76:	f002 fed7 	bl	27928 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   24b7a:	f04f 081d 	mov.w	r8, #29
   24b7e:	e7e8      	b.n	24b52 <ble_gap_adv_start+0x5e>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   24b80:	4a22      	ldr	r2, [pc, #136]	; (24c0c <ble_gap_adv_start+0x118>)
   24b82:	2101      	movs	r1, #1
   24b84:	2004      	movs	r0, #4
   24b86:	f7f4 fdd3 	bl	19730 <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   24b8a:	462a      	mov	r2, r5
   24b8c:	4631      	mov	r1, r6
   24b8e:	4620      	mov	r0, r4
   24b90:	f7ff fe70 	bl	24874 <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   24b94:	4a1e      	ldr	r2, [pc, #120]	; (24c10 <ble_gap_adv_start+0x11c>)
   24b96:	2101      	movs	r1, #1
   24b98:	2004      	movs	r0, #4
   24b9a:	f7f4 fdc9 	bl	19730 <modlog_printf>
    ble_gap_slave[0].cb = cb;
   24b9e:	4b1d      	ldr	r3, [pc, #116]	; (24c14 <ble_gap_adv_start+0x120>)
   24ba0:	9a08      	ldr	r2, [sp, #32]
   24ba2:	609a      	str	r2, [r3, #8]
    ble_gap_slave[0].cb_arg = cb_arg;
   24ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24ba6:	60da      	str	r2, [r3, #12]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   24ba8:	785a      	ldrb	r2, [r3, #1]
   24baa:	f364 0201 	bfi	r2, r4, #0, #2
   24bae:	705a      	strb	r2, [r3, #1]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   24bb0:	782b      	ldrb	r3, [r5, #0]
   24bb2:	b1d3      	cbz	r3, 24bea <ble_gap_adv_start+0xf6>
        ble_gap_slave[0].connectable = 1;
   24bb4:	4a17      	ldr	r2, [pc, #92]	; (24c14 <ble_gap_adv_start+0x120>)
   24bb6:	7853      	ldrb	r3, [r2, #1]
   24bb8:	f043 0308 	orr.w	r3, r3, #8
   24bbc:	7053      	strb	r3, [r2, #1]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   24bbe:	462a      	mov	r2, r5
   24bc0:	4631      	mov	r1, r6
   24bc2:	4620      	mov	r0, r4
   24bc4:	f7ff fc41 	bl	2444a <ble_gap_adv_params_tx>
    if (rc != 0) {
   24bc8:	4680      	mov	r8, r0
   24bca:	2800      	cmp	r0, #0
   24bcc:	d1bc      	bne.n	24b48 <ble_gap_adv_start+0x54>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   24bce:	2001      	movs	r0, #1
   24bd0:	4b10      	ldr	r3, [pc, #64]	; (24c14 <ble_gap_adv_start+0x120>)
   24bd2:	7018      	strb	r0, [r3, #0]
    rc = ble_gap_adv_enable_tx(1);
   24bd4:	f7ff fc27 	bl	24426 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   24bd8:	4680      	mov	r8, r0
   24bda:	b960      	cbnz	r0, 24bf6 <ble_gap_adv_start+0x102>
    if (duration_ms != BLE_HS_FOREVER) {
   24bdc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   24be0:	429f      	cmp	r7, r3
   24be2:	d10c      	bne.n	24bfe <ble_gap_adv_start+0x10a>
    ble_hs_unlock();
   24be4:	f002 fea0 	bl	27928 <ble_hs_unlock>
    if (rc != 0) {
   24be8:	e7b7      	b.n	24b5a <ble_gap_adv_start+0x66>
        ble_gap_slave[0].connectable = 0;
   24bea:	4b0a      	ldr	r3, [pc, #40]	; (24c14 <ble_gap_adv_start+0x120>)
   24bec:	785a      	ldrb	r2, [r3, #1]
   24bee:	f36f 02c3 	bfc	r2, #3, #1
   24bf2:	705a      	strb	r2, [r3, #1]
   24bf4:	e7e3      	b.n	24bbe <ble_gap_adv_start+0xca>
        ble_gap_slave_reset_state(0);
   24bf6:	2000      	movs	r0, #0
   24bf8:	f7ff fcdc 	bl	245b4 <ble_gap_slave_reset_state>
        goto done;
   24bfc:	e7a4      	b.n	24b48 <ble_gap_adv_start+0x54>
        ble_gap_slave_set_timer(duration_ticks);
   24bfe:	9801      	ldr	r0, [sp, #4]
   24c00:	f7ff fe28 	bl	24854 <ble_gap_slave_set_timer>
   24c04:	e7ee      	b.n	24be4 <ble_gap_adv_start+0xf0>
   24c06:	bf00      	nop
   24c08:	10002c2c 	.word	0x10002c2c
   24c0c:	000349f8 	.word	0x000349f8
   24c10:	00034dd4 	.word	0x00034dd4
   24c14:	10002cec 	.word	0x10002cec

00024c18 <ble_gap_adv_set_data>:
{
   24c18:	b510      	push	{r4, lr}
   24c1a:	b08a      	sub	sp, #40	; 0x28
   24c1c:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, adv_set_data);
   24c1e:	4a0f      	ldr	r2, [pc, #60]	; (24c5c <ble_gap_adv_set_data+0x44>)
   24c20:	6a53      	ldr	r3, [r2, #36]	; 0x24
   24c22:	3301      	adds	r3, #1
   24c24:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   24c26:	4601      	mov	r1, r0
   24c28:	b190      	cbz	r0, 24c50 <ble_gap_adv_set_data+0x38>
   24c2a:	2c1f      	cmp	r4, #31
   24c2c:	dc14      	bgt.n	24c58 <ble_gap_adv_set_data+0x40>
    memcpy(cmd.adv_data, data, data_len);
   24c2e:	4622      	mov	r2, r4
   24c30:	f10d 0009 	add.w	r0, sp, #9
   24c34:	f7f1 ff3a 	bl	16aac <memcpy>
    cmd.adv_data_len = data_len;
   24c38:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   24c3c:	2300      	movs	r3, #0
   24c3e:	9300      	str	r3, [sp, #0]
   24c40:	2220      	movs	r2, #32
   24c42:	a902      	add	r1, sp, #8
   24c44:	f242 0008 	movw	r0, #8200	; 0x2008
   24c48:	f004 f81c 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   24c4c:	b00a      	add	sp, #40	; 0x28
   24c4e:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   24c50:	2c00      	cmp	r4, #0
   24c52:	d0ea      	beq.n	24c2a <ble_gap_adv_set_data+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24c54:	2012      	movs	r0, #18
   24c56:	e7f9      	b.n	24c4c <ble_gap_adv_set_data+0x34>
   24c58:	2012      	movs	r0, #18
   24c5a:	e7f7      	b.n	24c4c <ble_gap_adv_set_data+0x34>
   24c5c:	10002c2c 	.word	0x10002c2c

00024c60 <ble_gap_adv_set_fields>:
{
   24c60:	b500      	push	{lr}
   24c62:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   24c64:	231f      	movs	r3, #31
   24c66:	f10d 0207 	add.w	r2, sp, #7
   24c6a:	a902      	add	r1, sp, #8
   24c6c:	f003 fba6 	bl	283bc <ble_hs_adv_set_fields>
    if (rc != 0) {
   24c70:	b110      	cbz	r0, 24c78 <ble_gap_adv_set_fields+0x18>
}
   24c72:	b00b      	add	sp, #44	; 0x2c
   24c74:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   24c78:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24c7c:	a802      	add	r0, sp, #8
   24c7e:	f7ff ffcb 	bl	24c18 <ble_gap_adv_set_data>
    if (rc != 0) {
   24c82:	e7f6      	b.n	24c72 <ble_gap_adv_set_fields+0x12>

00024c84 <ble_gap_adv_active>:
{
   24c84:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   24c86:	2000      	movs	r0, #0
   24c88:	f7ff fa6e 	bl	24168 <ble_gap_adv_active_instance>
}
   24c8c:	bd08      	pop	{r3, pc}
	...

00024c90 <ble_gap_rx_conn_complete>:
{
   24c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c92:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   24c94:	4a6b      	ldr	r2, [pc, #428]	; (24e44 <ble_gap_rx_conn_complete+0x1b4>)
   24c96:	6f53      	ldr	r3, [r2, #116]	; 0x74
   24c98:	3301      	adds	r3, #1
   24c9a:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   24c9c:	7803      	ldrb	r3, [r0, #0]
   24c9e:	b37b      	cbz	r3, 24d00 <ble_gap_rx_conn_complete+0x70>
        switch (evt->status) {
   24ca0:	2b02      	cmp	r3, #2
   24ca2:	d00e      	beq.n	24cc2 <ble_gap_rx_conn_complete+0x32>
   24ca4:	2b3c      	cmp	r3, #60	; 0x3c
   24ca6:	d11c      	bne.n	24ce2 <ble_gap_rx_conn_complete+0x52>
            if (ble_gap_adv_active()) {
   24ca8:	f7ff ffec 	bl	24c84 <ble_gap_adv_active>
   24cac:	b910      	cbnz	r0, 24cb4 <ble_gap_rx_conn_complete+0x24>
        return 0;
   24cae:	2000      	movs	r0, #0
}
   24cb0:	b011      	add	sp, #68	; 0x44
   24cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   24cb4:	2300      	movs	r3, #0
   24cb6:	461a      	mov	r2, r3
   24cb8:	4619      	mov	r1, r3
   24cba:	4618      	mov	r0, r3
   24cbc:	f7ff fca0 	bl	24600 <ble_gap_adv_finished>
   24cc0:	e7f5      	b.n	24cae <ble_gap_rx_conn_complete+0x1e>
            if (ble_gap_master_in_progress()) {
   24cc2:	f7ff feb8 	bl	24a36 <ble_gap_master_in_progress>
   24cc6:	2800      	cmp	r0, #0
   24cc8:	d0f1      	beq.n	24cae <ble_gap_rx_conn_complete+0x1e>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   24cca:	4b5f      	ldr	r3, [pc, #380]	; (24e48 <ble_gap_rx_conn_complete+0x1b8>)
   24ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
   24cd0:	2b02      	cmp	r3, #2
   24cd2:	d002      	beq.n	24cda <ble_gap_rx_conn_complete+0x4a>
                    ble_gap_master_connect_cancelled();
   24cd4:	f7ff fd0a 	bl	246ec <ble_gap_master_connect_cancelled>
   24cd8:	e7e9      	b.n	24cae <ble_gap_rx_conn_complete+0x1e>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   24cda:	201d      	movs	r0, #29
   24cdc:	f7ff fcf4 	bl	246c8 <ble_gap_master_failed>
   24ce0:	e7e5      	b.n	24cae <ble_gap_rx_conn_complete+0x1e>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   24ce2:	4a5a      	ldr	r2, [pc, #360]	; (24e4c <ble_gap_rx_conn_complete+0x1bc>)
   24ce4:	2101      	movs	r1, #1
   24ce6:	2004      	movs	r0, #4
   24ce8:	f7f4 fd22 	bl	19730 <modlog_printf>
            assert(0);
   24cec:	f7ef fcb2 	bl	14654 <hal_debugger_connected>
   24cf0:	b100      	cbz	r0, 24cf4 <ble_gap_rx_conn_complete+0x64>
   24cf2:	be01      	bkpt	0x0001
   24cf4:	2300      	movs	r3, #0
   24cf6:	461a      	mov	r2, r3
   24cf8:	4619      	mov	r1, r3
   24cfa:	4618      	mov	r0, r3
   24cfc:	f7f0 f84c 	bl	14d98 <__assert_func>
   24d00:	4604      	mov	r4, r0
   24d02:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   24d04:	2100      	movs	r1, #0
   24d06:	8840      	ldrh	r0, [r0, #2]
   24d08:	f003 fb75 	bl	283f6 <ble_hs_atomic_conn_flags>
   24d0c:	2800      	cmp	r0, #0
   24d0e:	d0cf      	beq.n	24cb0 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   24d10:	7923      	ldrb	r3, [r4, #4]
   24d12:	2b00      	cmp	r3, #0
   24d14:	d064      	beq.n	24de0 <ble_gap_rx_conn_complete+0x150>
   24d16:	2b01      	cmp	r3, #1
   24d18:	d067      	beq.n	24dea <ble_gap_rx_conn_complete+0x15a>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   24d1a:	8860      	ldrh	r0, [r4, #2]
   24d1c:	f003 fc0a 	bl	28534 <ble_hs_conn_alloc>
   24d20:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   24d22:	89a3      	ldrh	r3, [r4, #12]
   24d24:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   24d26:	89e3      	ldrh	r3, [r4, #14]
   24d28:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   24d2a:	8a23      	ldrh	r3, [r4, #16]
   24d2c:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   24d2e:	7ca3      	ldrb	r3, [r4, #18]
   24d30:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   24d34:	7923      	ldrb	r3, [r4, #4]
   24d36:	2b00      	cmp	r3, #0
   24d38:	d15d      	bne.n	24df6 <ble_gap_rx_conn_complete+0x166>
        conn->bhc_cb = ble_gap_master.cb;
   24d3a:	4b43      	ldr	r3, [pc, #268]	; (24e48 <ble_gap_rx_conn_complete+0x1b8>)
   24d3c:	699a      	ldr	r2, [r3, #24]
   24d3e:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   24d40:	69da      	ldr	r2, [r3, #28]
   24d42:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   24d44:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   24d48:	f042 0201 	orr.w	r2, r2, #1
   24d4c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   24d50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   24d54:	f3c3 0341 	ubfx	r3, r3, #1, #2
   24d58:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   24d5a:	f7ff fc6d 	bl	24638 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   24d5e:	7966      	ldrb	r6, [r4, #5]
   24d60:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   24d62:	4623      	mov	r3, r4
   24d64:	f853 2f06 	ldr.w	r2, [r3, #6]!
   24d68:	60aa      	str	r2, [r5, #8]
   24d6a:	889b      	ldrh	r3, [r3, #4]
   24d6c:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   24d6e:	2301      	movs	r3, #1
   24d70:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   24d72:	4623      	mov	r3, r4
   24d74:	f853 2f13 	ldr.w	r2, [r3, #19]!
   24d78:	f8c5 200f 	str.w	r2, [r5, #15]
   24d7c:	889b      	ldrh	r3, [r3, #4]
   24d7e:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   24d82:	2300      	movs	r3, #0
   24d84:	930e      	str	r3, [sp, #56]	; 0x38
   24d86:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   24d8a:	f104 0719 	add.w	r7, r4, #25
   24d8e:	2206      	movs	r2, #6
   24d90:	4639      	mov	r1, r7
   24d92:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   24d96:	f7f1 fe65 	bl	16a64 <memcmp>
   24d9a:	2800      	cmp	r0, #0
   24d9c:	d14a      	bne.n	24e34 <ble_gap_rx_conn_complete+0x1a4>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   24d9e:	2e01      	cmp	r6, #1
   24da0:	d038      	beq.n	24e14 <ble_gap_rx_conn_complete+0x184>
    ble_hs_lock();
   24da2:	f002 fdbd 	bl	27920 <ble_hs_lock>
    memset(&event, 0, sizeof event);
   24da6:	2234      	movs	r2, #52	; 0x34
   24da8:	2100      	movs	r1, #0
   24daa:	a801      	add	r0, sp, #4
   24dac:	f7f1 fea3 	bl	16af6 <memset>
    ble_hs_conn_insert(conn);
   24db0:	4628      	mov	r0, r5
   24db2:	f003 fc1d 	bl	285f0 <ble_hs_conn_insert>
    ble_hs_unlock();
   24db6:	f002 fdb7 	bl	27928 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   24dba:	2500      	movs	r5, #0
   24dbc:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   24dc0:	8863      	ldrh	r3, [r4, #2]
   24dc2:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   24dc6:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   24dc8:	a801      	add	r0, sp, #4
   24dca:	f7ff fa69 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   24dce:	8861      	ldrh	r1, [r4, #2]
   24dd0:	a801      	add	r0, sp, #4
   24dd2:	f7ff fa8f 	bl	242f4 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   24dd6:	8860      	ldrh	r0, [r4, #2]
   24dd8:	f7ff fb09 	bl	243ee <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   24ddc:	4628      	mov	r0, r5
   24dde:	e767      	b.n	24cb0 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   24de0:	f7ff f9cc 	bl	2417c <ble_gap_accept_master_conn>
        if (rc != 0) {
   24de4:	2800      	cmp	r0, #0
   24de6:	d098      	beq.n	24d1a <ble_gap_rx_conn_complete+0x8a>
   24de8:	e762      	b.n	24cb0 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   24dea:	4630      	mov	r0, r6
   24dec:	f7ff f9d6 	bl	2419c <ble_gap_accept_slave_conn>
        if (rc != 0) {
   24df0:	2800      	cmp	r0, #0
   24df2:	d092      	beq.n	24d1a <ble_gap_rx_conn_complete+0x8a>
   24df4:	e75c      	b.n	24cb0 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   24df6:	4b14      	ldr	r3, [pc, #80]	; (24e48 <ble_gap_rx_conn_complete+0x1b8>)
   24df8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   24dfc:	689a      	ldr	r2, [r3, #8]
   24dfe:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   24e00:	68da      	ldr	r2, [r3, #12]
   24e02:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   24e04:	785b      	ldrb	r3, [r3, #1]
   24e06:	f3c3 0301 	ubfx	r3, r3, #0, #2
   24e0a:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   24e0c:	4630      	mov	r0, r6
   24e0e:	f7ff fbd1 	bl	245b4 <ble_gap_slave_reset_state>
   24e12:	e7a4      	b.n	24d5e <ble_gap_rx_conn_complete+0xce>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   24e14:	7b6b      	ldrb	r3, [r5, #13]
   24e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   24e1a:	2b40      	cmp	r3, #64	; 0x40
   24e1c:	d1c1      	bne.n	24da2 <ble_gap_rx_conn_complete+0x112>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   24e1e:	462b      	mov	r3, r5
   24e20:	f853 2f07 	ldr.w	r2, [r3, #7]!
   24e24:	f8c5 2015 	str.w	r2, [r5, #21]
   24e28:	889a      	ldrh	r2, [r3, #4]
   24e2a:	799b      	ldrb	r3, [r3, #6]
   24e2c:	f8a5 2019 	strh.w	r2, [r5, #25]
   24e30:	76eb      	strb	r3, [r5, #27]
   24e32:	e7b6      	b.n	24da2 <ble_gap_rx_conn_complete+0x112>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   24e34:	2301      	movs	r3, #1
   24e36:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   24e38:	683b      	ldr	r3, [r7, #0]
   24e3a:	f8c5 3016 	str.w	r3, [r5, #22]
   24e3e:	88bb      	ldrh	r3, [r7, #4]
   24e40:	836b      	strh	r3, [r5, #26]
   24e42:	e7ae      	b.n	24da2 <ble_gap_rx_conn_complete+0x112>
   24e44:	10002c2c 	.word	0x10002c2c
   24e48:	10002cec 	.word	0x10002cec
   24e4c:	00034a20 	.word	0x00034a20

00024e50 <ble_gap_adv_stop_no_lock>:
{
   24e50:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   24e52:	4a0e      	ldr	r2, [pc, #56]	; (24e8c <ble_gap_adv_stop_no_lock+0x3c>)
   24e54:	6953      	ldr	r3, [r2, #20]
   24e56:	3301      	adds	r3, #1
   24e58:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   24e5a:	f7ff ff13 	bl	24c84 <ble_gap_adv_active>
   24e5e:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   24e60:	4a0b      	ldr	r2, [pc, #44]	; (24e90 <ble_gap_adv_stop_no_lock+0x40>)
   24e62:	2101      	movs	r1, #1
   24e64:	2004      	movs	r0, #4
   24e66:	f7f4 fc63 	bl	19730 <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   24e6a:	2000      	movs	r0, #0
   24e6c:	f7ff fadb 	bl	24426 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   24e70:	4605      	mov	r5, r0
   24e72:	b128      	cbz	r0, 24e80 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   24e74:	4a05      	ldr	r2, [pc, #20]	; (24e8c <ble_gap_adv_stop_no_lock+0x3c>)
   24e76:	6993      	ldr	r3, [r2, #24]
   24e78:	3301      	adds	r3, #1
   24e7a:	6193      	str	r3, [r2, #24]
}
   24e7c:	4628      	mov	r0, r5
   24e7e:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   24e80:	f7ff fb98 	bl	245b4 <ble_gap_slave_reset_state>
    if (!active) {
   24e84:	2c00      	cmp	r4, #0
   24e86:	d1f9      	bne.n	24e7c <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   24e88:	2502      	movs	r5, #2
   24e8a:	e7f3      	b.n	24e74 <ble_gap_adv_stop_no_lock+0x24>
   24e8c:	10002c2c 	.word	0x10002c2c
   24e90:	00034a64 	.word	0x00034a64

00024e94 <ble_gap_disc_active>:
}
   24e94:	2000      	movs	r0, #0
   24e96:	4770      	bx	lr

00024e98 <ble_gap_conn_active>:
}
   24e98:	2000      	movs	r0, #0
   24e9a:	4770      	bx	lr

00024e9c <ble_gap_conn_cancel_no_lock>:
{
   24e9c:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   24e9e:	4a0f      	ldr	r2, [pc, #60]	; (24edc <ble_gap_conn_cancel_no_lock+0x40>)
   24ea0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   24ea2:	3301      	adds	r3, #1
   24ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   24ea6:	f7ff fff7 	bl	24e98 <ble_gap_conn_active>
   24eaa:	b928      	cbnz	r0, 24eb8 <ble_gap_conn_cancel_no_lock+0x1c>
        rc = BLE_HS_EALREADY;
   24eac:	2002      	movs	r0, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   24eae:	4a0b      	ldr	r2, [pc, #44]	; (24edc <ble_gap_conn_cancel_no_lock+0x40>)
   24eb0:	6d13      	ldr	r3, [r2, #80]	; 0x50
   24eb2:	3301      	adds	r3, #1
   24eb4:	6513      	str	r3, [r2, #80]	; 0x50
}
   24eb6:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   24eb8:	4a09      	ldr	r2, [pc, #36]	; (24ee0 <ble_gap_conn_cancel_no_lock+0x44>)
   24eba:	2101      	movs	r1, #1
   24ebc:	2004      	movs	r0, #4
   24ebe:	f7f4 fc37 	bl	19730 <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   24ec2:	f7ff faa3 	bl	2440c <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   24ec6:	2800      	cmp	r0, #0
   24ec8:	d1f1      	bne.n	24eae <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   24eca:	4a06      	ldr	r2, [pc, #24]	; (24ee4 <ble_gap_conn_cancel_no_lock+0x48>)
   24ecc:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
   24ed0:	f043 0308 	orr.w	r3, r3, #8
   24ed4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    if (rc != 0) {
   24ed8:	e7ed      	b.n	24eb6 <ble_gap_conn_cancel_no_lock+0x1a>
   24eda:	bf00      	nop
   24edc:	10002c2c 	.word	0x10002c2c
   24ee0:	00034a90 	.word	0x00034a90
   24ee4:	10002cec 	.word	0x10002cec

00024ee8 <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   24ee8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   24eec:	f013 0f02 	tst.w	r3, #2
   24ef0:	d120      	bne.n	24f34 <ble_gap_terminate_with_conn+0x4c>
{
   24ef2:	b530      	push	{r4, r5, lr}
   24ef4:	b085      	sub	sp, #20
   24ef6:	4604      	mov	r4, r0
   24ef8:	460d      	mov	r5, r1
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   24efa:	9100      	str	r1, [sp, #0]
   24efc:	8883      	ldrh	r3, [r0, #4]
   24efe:	4a0e      	ldr	r2, [pc, #56]	; (24f38 <ble_gap_terminate_with_conn+0x50>)
   24f00:	2101      	movs	r1, #1
   24f02:	2004      	movs	r0, #4
   24f04:	f7f4 fc14 	bl	19730 <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   24f08:	88a3      	ldrh	r3, [r4, #4]
   24f0a:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   24f0e:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   24f12:	2300      	movs	r3, #0
   24f14:	9300      	str	r3, [sp, #0]
   24f16:	2203      	movs	r2, #3
   24f18:	a903      	add	r1, sp, #12
   24f1a:	f240 4006 	movw	r0, #1030	; 0x406
   24f1e:	f003 feb1 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   24f22:	b928      	cbnz	r0, 24f30 <ble_gap_terminate_with_conn+0x48>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   24f24:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   24f28:	f043 0302 	orr.w	r3, r3, #2
   24f2c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   24f30:	b005      	add	sp, #20
   24f32:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   24f34:	2002      	movs	r0, #2
}
   24f36:	4770      	bx	lr
   24f38:	00034abc 	.word	0x00034abc

00024f3c <ble_gap_terminate>:
{
   24f3c:	b538      	push	{r3, r4, r5, lr}
   24f3e:	4604      	mov	r4, r0
   24f40:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   24f42:	4a0d      	ldr	r2, [pc, #52]	; (24f78 <ble_gap_terminate+0x3c>)
   24f44:	6c53      	ldr	r3, [r2, #68]	; 0x44
   24f46:	3301      	adds	r3, #1
   24f48:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   24f4a:	f002 fce9 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   24f4e:	4620      	mov	r0, r4
   24f50:	f003 fb42 	bl	285d8 <ble_hs_conn_find>
    if (conn == NULL) {
   24f54:	b160      	cbz	r0, 24f70 <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   24f56:	4629      	mov	r1, r5
   24f58:	f7ff ffc6 	bl	24ee8 <ble_gap_terminate_with_conn>
   24f5c:	4604      	mov	r4, r0
    ble_hs_unlock();
   24f5e:	f002 fce3 	bl	27928 <ble_hs_unlock>
    if (rc != 0) {
   24f62:	b11c      	cbz	r4, 24f6c <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   24f64:	4a04      	ldr	r2, [pc, #16]	; (24f78 <ble_gap_terminate+0x3c>)
   24f66:	6c93      	ldr	r3, [r2, #72]	; 0x48
   24f68:	3301      	adds	r3, #1
   24f6a:	6493      	str	r3, [r2, #72]	; 0x48
}
   24f6c:	4620      	mov	r0, r4
   24f6e:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   24f70:	f002 fcda 	bl	27928 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   24f74:	2407      	movs	r4, #7
   24f76:	e7f5      	b.n	24f64 <ble_gap_terminate+0x28>
   24f78:	10002c2c 	.word	0x10002c2c

00024f7c <ble_gap_update_notify>:
{
   24f7c:	b530      	push	{r4, r5, lr}
   24f7e:	b08f      	sub	sp, #60	; 0x3c
   24f80:	4604      	mov	r4, r0
   24f82:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   24f84:	2234      	movs	r2, #52	; 0x34
   24f86:	2100      	movs	r1, #0
   24f88:	a801      	add	r0, sp, #4
   24f8a:	f7f1 fdb4 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   24f8e:	2303      	movs	r3, #3
   24f90:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   24f94:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   24f98:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   24f9a:	a801      	add	r0, sp, #4
   24f9c:	f7ff f980 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   24fa0:	4621      	mov	r1, r4
   24fa2:	a801      	add	r0, sp, #4
   24fa4:	f7ff f9a6 	bl	242f4 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   24fa8:	2d0d      	cmp	r5, #13
   24faa:	d001      	beq.n	24fb0 <ble_gap_update_notify+0x34>
}
   24fac:	b00f      	add	sp, #60	; 0x3c
   24fae:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   24fb0:	2113      	movs	r1, #19
   24fb2:	4620      	mov	r0, r4
   24fb4:	f7ff ffc2 	bl	24f3c <ble_gap_terminate>
}
   24fb8:	e7f8      	b.n	24fac <ble_gap_update_notify+0x30>
	...

00024fbc <ble_gap_conn_broken>:
{
   24fbc:	b570      	push	{r4, r5, r6, lr}
   24fbe:	b090      	sub	sp, #64	; 0x40
   24fc0:	4604      	mov	r4, r0
   24fc2:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   24fc4:	2234      	movs	r2, #52	; 0x34
   24fc6:	2100      	movs	r1, #0
   24fc8:	4668      	mov	r0, sp
   24fca:	f7f1 fd94 	bl	16af6 <memset>
    snap.desc = &event.disconnect.conn;
   24fce:	ab02      	add	r3, sp, #8
   24fd0:	930d      	str	r3, [sp, #52]	; 0x34
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   24fd2:	a90d      	add	r1, sp, #52	; 0x34
   24fd4:	4620      	mov	r0, r4
   24fd6:	f7ff f9f6 	bl	243c6 <ble_gap_find_snapshot>
    if (rc != 0) {
   24fda:	b108      	cbz	r0, 24fe0 <ble_gap_conn_broken+0x24>
}
   24fdc:	b010      	add	sp, #64	; 0x40
   24fde:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   24fe0:	f002 fc9e 	bl	27920 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   24fe4:	4620      	mov	r0, r4
   24fe6:	f7ff facd 	bl	24584 <ble_gap_update_entry_remove>
   24fea:	4606      	mov	r6, r0
    ble_hs_unlock();
   24fec:	f002 fc9c 	bl	27928 <ble_hs_unlock>
    if (entry != NULL) {
   24ff0:	b136      	cbz	r6, 25000 <ble_gap_conn_broken+0x44>
        ble_gap_update_notify(conn_handle, reason);
   24ff2:	4629      	mov	r1, r5
   24ff4:	4620      	mov	r0, r4
   24ff6:	f7ff ffc1 	bl	24f7c <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   24ffa:	4630      	mov	r0, r6
   24ffc:	f7ff fb9a 	bl	24734 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   25000:	4629      	mov	r1, r5
   25002:	4620      	mov	r0, r4
   25004:	f005 fa20 	bl	2a448 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
   25008:	4620      	mov	r0, r4
   2500a:	f006 ff59 	bl	2bec0 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
   2500e:	4620      	mov	r0, r4
   25010:	f002 f928 	bl	27264 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   25014:	4620      	mov	r0, r4
   25016:	f001 fb43 	bl	266a0 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   2501a:	4620      	mov	r0, r4
   2501c:	f003 fc9c 	bl	28958 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   25020:	4620      	mov	r0, r4
   25022:	f003 f9d3 	bl	283cc <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   25026:	2301      	movs	r3, #1
   25028:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   2502c:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   2502e:	4668      	mov	r0, sp
   25030:	f7ff f936 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   25034:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25036:	990e      	ldr	r1, [sp, #56]	; 0x38
   25038:	4668      	mov	r0, sp
   2503a:	f7ff f85b 	bl	240f4 <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   2503e:	4a02      	ldr	r2, [pc, #8]	; (25048 <ble_gap_conn_broken+0x8c>)
   25040:	6e53      	ldr	r3, [r2, #100]	; 0x64
   25042:	3301      	adds	r3, #1
   25044:	6653      	str	r3, [r2, #100]	; 0x64
   25046:	e7c9      	b.n	24fdc <ble_gap_conn_broken+0x20>
   25048:	10002c2c 	.word	0x10002c2c

0002504c <ble_gap_rx_disconn_complete>:
{
   2504c:	b570      	push	{r4, r5, r6, lr}
   2504e:	b08e      	sub	sp, #56	; 0x38
   25050:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   25052:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   25056:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   25058:	4a14      	ldr	r2, [pc, #80]	; (250ac <ble_gap_rx_disconn_complete+0x60>)
   2505a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2505c:	3301      	adds	r3, #1
   2505e:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   25060:	7803      	ldrb	r3, [r0, #0]
   25062:	b953      	cbnz	r3, 2507a <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   25064:	78c1      	ldrb	r1, [r0, #3]
   25066:	b111      	cbz	r1, 2506e <ble_gap_rx_disconn_complete+0x22>
   25068:	f501 7100 	add.w	r1, r1, #512	; 0x200
   2506c:	e000      	b.n	25070 <ble_gap_rx_disconn_complete+0x24>
   2506e:	2100      	movs	r1, #0
   25070:	4630      	mov	r0, r6
   25072:	f7ff ffa3 	bl	24fbc <ble_gap_conn_broken>
}
   25076:	b00e      	add	sp, #56	; 0x38
   25078:	bd70      	pop	{r4, r5, r6, pc}
        memset(&event, 0, sizeof event);
   2507a:	2234      	movs	r2, #52	; 0x34
   2507c:	2100      	movs	r1, #0
   2507e:	a801      	add	r0, sp, #4
   25080:	f7f1 fd39 	bl	16af6 <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   25084:	2306      	movs	r3, #6
   25086:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   2508a:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   2508e:	7823      	ldrb	r3, [r4, #0]
   25090:	b153      	cbz	r3, 250a8 <ble_gap_rx_disconn_complete+0x5c>
   25092:	f503 7300 	add.w	r3, r3, #512	; 0x200
   25096:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   25098:	a801      	add	r0, sp, #4
   2509a:	f7ff f901 	bl	242a0 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   2509e:	4631      	mov	r1, r6
   250a0:	a801      	add	r0, sp, #4
   250a2:	f7ff f927 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   250a6:	e7e6      	b.n	25076 <ble_gap_rx_disconn_complete+0x2a>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   250a8:	2300      	movs	r3, #0
   250aa:	e7f4      	b.n	25096 <ble_gap_rx_disconn_complete+0x4a>
   250ac:	10002c2c 	.word	0x10002c2c

000250b0 <ble_gap_reset_state>:
{
   250b0:	b510      	push	{r4, lr}
   250b2:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
   250b4:	f003 f9b5 	bl	28422 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   250b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   250bc:	4298      	cmp	r0, r3
   250be:	d003      	beq.n	250c8 <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
   250c0:	4621      	mov	r1, r4
   250c2:	f7ff ff7b 	bl	24fbc <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   250c6:	e7f5      	b.n	250b4 <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
   250c8:	2000      	movs	r0, #0
   250ca:	f7ff f84d 	bl	24168 <ble_gap_adv_active_instance>
   250ce:	b918      	cbnz	r0, 250d8 <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
   250d0:	4620      	mov	r0, r4
   250d2:	f7ff faf9 	bl	246c8 <ble_gap_master_failed>
}
   250d6:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
   250d8:	2300      	movs	r3, #0
   250da:	461a      	mov	r2, r3
   250dc:	4621      	mov	r1, r4
   250de:	4618      	mov	r0, r3
   250e0:	f7ff fa8e 	bl	24600 <ble_gap_adv_finished>
   250e4:	e7f4      	b.n	250d0 <ble_gap_reset_state+0x20>
	...

000250e8 <ble_gap_rx_update_complete>:
{
   250e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   250ea:	b091      	sub	sp, #68	; 0x44
   250ec:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   250ee:	4a2c      	ldr	r2, [pc, #176]	; (251a0 <ble_gap_rx_update_complete+0xb8>)
   250f0:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   250f2:	3301      	adds	r3, #1
   250f4:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   250f6:	2234      	movs	r2, #52	; 0x34
   250f8:	2100      	movs	r1, #0
   250fa:	a801      	add	r0, sp, #4
   250fc:	f7f1 fcfb 	bl	16af6 <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   25100:	2300      	movs	r3, #0
   25102:	930e      	str	r3, [sp, #56]	; 0x38
   25104:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   25106:	f002 fc0b 	bl	27920 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   2510a:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   2510c:	4628      	mov	r0, r5
   2510e:	f003 fa63 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   25112:	b120      	cbz	r0, 2511e <ble_gap_rx_update_complete+0x36>
   25114:	4606      	mov	r6, r0
        switch (ev->status) {
   25116:	7863      	ldrb	r3, [r4, #1]
   25118:	b193      	cbz	r3, 25140 <ble_gap_rx_update_complete+0x58>
   2511a:	2b1a      	cmp	r3, #26
   2511c:	d017      	beq.n	2514e <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   2511e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   25122:	b353      	cbz	r3, 2517a <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   25124:	f002 fc00 	bl	27928 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   25128:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   2512c:	bb5b      	cbnz	r3, 25186 <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   2512e:	7861      	ldrb	r1, [r4, #1]
   25130:	b399      	cbz	r1, 2519a <ble_gap_rx_update_complete+0xb2>
   25132:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   25136:	4628      	mov	r0, r5
   25138:	f7ff ff20 	bl	24f7c <ble_gap_update_notify>
}
   2513c:	b011      	add	sp, #68	; 0x44
   2513e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   25140:	88a3      	ldrh	r3, [r4, #4]
   25142:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   25144:	88e3      	ldrh	r3, [r4, #6]
   25146:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   25148:	8923      	ldrh	r3, [r4, #8]
   2514a:	8403      	strh	r3, [r0, #32]
            break;
   2514c:	e7e7      	b.n	2511e <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   2514e:	2100      	movs	r1, #0
   25150:	4628      	mov	r0, r5
   25152:	f7ff f86f 	bl	24234 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   25156:	4607      	mov	r7, r0
   25158:	2800      	cmp	r0, #0
   2515a:	d0e0      	beq.n	2511e <ble_gap_rx_update_complete+0x36>
   2515c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   25160:	f013 0f01 	tst.w	r3, #1
   25164:	d1db      	bne.n	2511e <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   25166:	a90e      	add	r1, sp, #56	; 0x38
   25168:	3004      	adds	r0, #4
   2516a:	f7fe fff3 	bl	24154 <ble_gap_update_to_l2cap>
    return os_time_get();
   2516e:	f7f1 fa03 	bl	16578 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   25172:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   25176:	6138      	str	r0, [r7, #16]
   25178:	e7d1      	b.n	2511e <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   2517a:	4628      	mov	r0, r5
   2517c:	f7ff fa02 	bl	24584 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   25180:	f7ff fad8 	bl	24734 <ble_gap_update_entry_free>
   25184:	e7ce      	b.n	25124 <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   25186:	2300      	movs	r3, #0
   25188:	4a06      	ldr	r2, [pc, #24]	; (251a4 <ble_gap_rx_update_complete+0xbc>)
   2518a:	a90e      	add	r1, sp, #56	; 0x38
   2518c:	4628      	mov	r0, r5
   2518e:	f005 f8ef 	bl	2a370 <ble_l2cap_sig_update>
        if (rc == 0) {
   25192:	4601      	mov	r1, r0
   25194:	2800      	cmp	r0, #0
   25196:	d0d1      	beq.n	2513c <ble_gap_rx_update_complete+0x54>
   25198:	e7cd      	b.n	25136 <ble_gap_rx_update_complete+0x4e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   2519a:	2100      	movs	r1, #0
   2519c:	e7cb      	b.n	25136 <ble_gap_rx_update_complete+0x4e>
   2519e:	bf00      	nop
   251a0:	10002c2c 	.word	0x10002c2c
   251a4:	000251a9 	.word	0x000251a9

000251a8 <ble_gap_update_l2cap_cb>:
{
   251a8:	b570      	push	{r4, r5, r6, lr}
   251aa:	4605      	mov	r5, r0
   251ac:	460e      	mov	r6, r1
    ble_hs_lock();
   251ae:	f002 fbb7 	bl	27920 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   251b2:	4628      	mov	r0, r5
   251b4:	f7ff f9e6 	bl	24584 <ble_gap_update_entry_remove>
   251b8:	4604      	mov	r4, r0
    ble_hs_unlock();
   251ba:	f002 fbb5 	bl	27928 <ble_hs_unlock>
    if (entry != NULL) {
   251be:	b11c      	cbz	r4, 251c8 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   251c0:	4620      	mov	r0, r4
   251c2:	f7ff fab7 	bl	24734 <ble_gap_update_entry_free>
        if (status != 0) {
   251c6:	b906      	cbnz	r6, 251ca <ble_gap_update_l2cap_cb+0x22>
}
   251c8:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   251ca:	4631      	mov	r1, r6
   251cc:	4628      	mov	r0, r5
   251ce:	f7ff fed5 	bl	24f7c <ble_gap_update_notify>
}
   251d2:	e7f9      	b.n	251c8 <ble_gap_update_l2cap_cb+0x20>

000251d4 <ble_gap_update_failed>:
{
   251d4:	b570      	push	{r4, r5, r6, lr}
   251d6:	4604      	mov	r4, r0
   251d8:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   251da:	4a0a      	ldr	r2, [pc, #40]	; (25204 <ble_gap_update_failed+0x30>)
   251dc:	6d93      	ldr	r3, [r2, #88]	; 0x58
   251de:	3301      	adds	r3, #1
   251e0:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   251e2:	f002 fb9d 	bl	27920 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   251e6:	4620      	mov	r0, r4
   251e8:	f7ff f9cc 	bl	24584 <ble_gap_update_entry_remove>
   251ec:	4606      	mov	r6, r0
    ble_hs_unlock();
   251ee:	f002 fb9b 	bl	27928 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   251f2:	4630      	mov	r0, r6
   251f4:	f7ff fa9e 	bl	24734 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   251f8:	4629      	mov	r1, r5
   251fa:	4620      	mov	r0, r4
   251fc:	f7ff febe 	bl	24f7c <ble_gap_update_notify>
}
   25200:	bd70      	pop	{r4, r5, r6, pc}
   25202:	bf00      	nop
   25204:	10002c2c 	.word	0x10002c2c

00025208 <ble_gap_rx_param_req>:
{
   25208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2520c:	b094      	sub	sp, #80	; 0x50
   2520e:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   25210:	f04f 0834 	mov.w	r8, #52	; 0x34
   25214:	4642      	mov	r2, r8
   25216:	2100      	movs	r1, #0
   25218:	a801      	add	r0, sp, #4
   2521a:	f7f1 fc6c 	bl	16af6 <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   2521e:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   25222:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   25226:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   2522a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   2522e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   25232:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   25236:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   2523a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   2523e:	2300      	movs	r3, #0
   25240:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   25244:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   25248:	ae0e      	add	r6, sp, #56	; 0x38
   2524a:	ad11      	add	r5, sp, #68	; 0x44
   2524c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   25250:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   25254:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   25258:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   2525a:	4642      	mov	r2, r8
   2525c:	4619      	mov	r1, r3
   2525e:	a801      	add	r0, sp, #4
   25260:	f7f1 fc49 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   25264:	2304      	movs	r3, #4
   25266:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   2526a:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   2526e:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   25270:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   25272:	4621      	mov	r1, r4
   25274:	eb0d 0003 	add.w	r0, sp, r3
   25278:	f7ff f83c 	bl	242f4 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   2527c:	b948      	cbnz	r0, 25292 <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   2527e:	a90e      	add	r1, sp, #56	; 0x38
   25280:	4620      	mov	r0, r4
   25282:	f7ff f92c 	bl	244de <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   25286:	4601      	mov	r1, r0
   25288:	b138      	cbz	r0, 2529a <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   2528a:	4620      	mov	r0, r4
   2528c:	f7ff ffa2 	bl	251d4 <ble_gap_update_failed>
   25290:	e003      	b.n	2529a <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   25292:	b2c1      	uxtb	r1, r0
   25294:	4620      	mov	r0, r4
   25296:	f7ff f943 	bl	24520 <ble_gap_tx_param_neg_reply>
}
   2529a:	b014      	add	sp, #80	; 0x50
   2529c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000252a0 <ble_gap_update_params>:
{
   252a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   252a4:	b082      	sub	sp, #8
   252a6:	4607      	mov	r7, r0
   252a8:	460c      	mov	r4, r1
    if (!ble_gap_validate_conn_params(params)) {
   252aa:	4608      	mov	r0, r1
   252ac:	f7fe ffd4 	bl	24258 <ble_gap_validate_conn_params>
   252b0:	2800      	cmp	r0, #0
   252b2:	d07e      	beq.n	253b2 <ble_gap_update_params+0x112>
    STATS_INC(ble_gap_stats, update);
   252b4:	4a40      	ldr	r2, [pc, #256]	; (253b8 <ble_gap_update_params+0x118>)
   252b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
   252b8:	3301      	adds	r3, #1
   252ba:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   252bc:	2300      	movs	r3, #0
   252be:	9300      	str	r3, [sp, #0]
   252c0:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   252c2:	f002 fb2d 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   252c6:	4638      	mov	r0, r7
   252c8:	f003 f986 	bl	285d8 <ble_hs_conn_find>
    if (conn == NULL) {
   252cc:	4606      	mov	r6, r0
   252ce:	2800      	cmp	r0, #0
   252d0:	d04d      	beq.n	2536e <ble_gap_update_params+0xce>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   252d2:	2100      	movs	r1, #0
   252d4:	4638      	mov	r0, r7
   252d6:	f7fe ffad 	bl	24234 <ble_gap_update_entry_find>
    if (dup != NULL) {
   252da:	b1c0      	cbz	r0, 2530e <ble_gap_update_params+0x6e>
        rc = BLE_HS_EALREADY;
   252dc:	2502      	movs	r5, #2
    l2cap_update = 0;
   252de:	f04f 0800 	mov.w	r8, #0
    entry = NULL;
   252e2:	4646      	mov	r6, r8
    ble_hs_unlock();
   252e4:	f002 fb20 	bl	27928 <ble_hs_unlock>
    if (!l2cap_update) {
   252e8:	f1b8 0f00 	cmp.w	r8, #0
   252ec:	d14d      	bne.n	2538a <ble_gap_update_params+0xea>
        ble_hs_timer_resched();
   252ee:	f002 fc09 	bl	27b04 <ble_hs_timer_resched>
    ble_hs_lock();
   252f2:	f002 fb15 	bl	27920 <ble_hs_lock>
    if (rc == 0) {
   252f6:	2d00      	cmp	r5, #0
   252f8:	d153      	bne.n	253a2 <ble_gap_update_params+0x102>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   252fa:	4b30      	ldr	r3, [pc, #192]	; (253bc <ble_gap_update_params+0x11c>)
   252fc:	681a      	ldr	r2, [r3, #0]
   252fe:	6032      	str	r2, [r6, #0]
   25300:	601e      	str	r6, [r3, #0]
    ble_hs_unlock();
   25302:	f002 fb11 	bl	27928 <ble_hs_unlock>
}
   25306:	4628      	mov	r0, r5
   25308:	b002      	add	sp, #8
   2530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry = ble_gap_update_entry_alloc();
   2530e:	f7ff fb6b 	bl	249e8 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   25312:	4680      	mov	r8, r0
   25314:	b378      	cbz	r0, 25376 <ble_gap_update_params+0xd6>
    entry->conn_handle = conn_handle;
   25316:	8287      	strh	r7, [r0, #20]
    entry->params = *params;
   25318:	1d03      	adds	r3, r0, #4
   2531a:	6820      	ldr	r0, [r4, #0]
   2531c:	6861      	ldr	r1, [r4, #4]
   2531e:	68a2      	ldr	r2, [r4, #8]
   25320:	c307      	stmia	r3!, {r0, r1, r2}
   25322:	f7f1 f929 	bl	16578 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   25326:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   2532a:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   2532e:	4a24      	ldr	r2, [pc, #144]	; (253c0 <ble_gap_update_params+0x120>)
   25330:	2101      	movs	r1, #1
   25332:	2004      	movs	r0, #4
   25334:	f7f4 f9fc 	bl	19730 <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   25338:	4621      	mov	r1, r4
   2533a:	4638      	mov	r0, r7
   2533c:	f7ff fad4 	bl	248e8 <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   25340:	4a20      	ldr	r2, [pc, #128]	; (253c4 <ble_gap_update_params+0x124>)
   25342:	2101      	movs	r1, #1
   25344:	2004      	movs	r0, #4
   25346:	f7f4 f9f3 	bl	19730 <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   2534a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2534c:	f013 0f02 	tst.w	r3, #2
   25350:	d104      	bne.n	2535c <ble_gap_update_params+0xbc>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   25352:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   25356:	f013 0f01 	tst.w	r3, #1
   2535a:	d011      	beq.n	25380 <ble_gap_update_params+0xe0>
        rc = ble_gap_update_tx(conn_handle, params);
   2535c:	4621      	mov	r1, r4
   2535e:	4638      	mov	r0, r7
   25360:	f7ff f8ef 	bl	24542 <ble_gap_update_tx>
   25364:	4605      	mov	r5, r0
    entry = ble_gap_update_entry_alloc();
   25366:	4646      	mov	r6, r8
    l2cap_update = 0;
   25368:	f04f 0800 	mov.w	r8, #0
   2536c:	e7ba      	b.n	252e4 <ble_gap_update_params+0x44>
        rc = BLE_HS_ENOTCONN;
   2536e:	2507      	movs	r5, #7
    l2cap_update = 0;
   25370:	f04f 0800 	mov.w	r8, #0
   25374:	e7b6      	b.n	252e4 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   25376:	4606      	mov	r6, r0
        rc = BLE_HS_ENOMEM;
   25378:	2506      	movs	r5, #6
    l2cap_update = 0;
   2537a:	f04f 0800 	mov.w	r8, #0
   2537e:	e7b1      	b.n	252e4 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   25380:	4646      	mov	r6, r8
        rc = 0;
   25382:	2500      	movs	r5, #0
        l2cap_update = 1;
   25384:	f04f 0801 	mov.w	r8, #1
   25388:	e7ac      	b.n	252e4 <ble_gap_update_params+0x44>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   2538a:	4669      	mov	r1, sp
   2538c:	4620      	mov	r0, r4
   2538e:	f7fe fee1 	bl	24154 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   25392:	2300      	movs	r3, #0
   25394:	4a0c      	ldr	r2, [pc, #48]	; (253c8 <ble_gap_update_params+0x128>)
   25396:	4669      	mov	r1, sp
   25398:	4638      	mov	r0, r7
   2539a:	f004 ffe9 	bl	2a370 <ble_l2cap_sig_update>
   2539e:	4605      	mov	r5, r0
   253a0:	e7a7      	b.n	252f2 <ble_gap_update_params+0x52>
        ble_gap_update_entry_free(entry);
   253a2:	4630      	mov	r0, r6
   253a4:	f7ff f9c6 	bl	24734 <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   253a8:	4a03      	ldr	r2, [pc, #12]	; (253b8 <ble_gap_update_params+0x118>)
   253aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
   253ac:	3301      	adds	r3, #1
   253ae:	6593      	str	r3, [r2, #88]	; 0x58
   253b0:	e7a7      	b.n	25302 <ble_gap_update_params+0x62>
        return BLE_HS_EINVAL;
   253b2:	2503      	movs	r5, #3
   253b4:	e7a7      	b.n	25306 <ble_gap_update_params+0x66>
   253b6:	bf00      	nop
   253b8:	10002c2c 	.word	0x10002c2c
   253bc:	10002cb4 	.word	0x10002cb4
   253c0:	00034b0c 	.word	0x00034b0c
   253c4:	00034dd4 	.word	0x00034dd4
   253c8:	000251a9 	.word	0x000251a9

000253cc <ble_gap_unpair>:
{
   253cc:	b510      	push	{r4, lr}
   253ce:	b082      	sub	sp, #8
   253d0:	4604      	mov	r4, r0
    if (ble_addr_cmp(peer_addr, BLE_ADDR_ANY) == 0) {
   253d2:	2300      	movs	r3, #0
   253d4:	9300      	str	r3, [sp, #0]
   253d6:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   253da:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   253dc:	b928      	cbnz	r0, 253ea <ble_gap_unpair+0x1e>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   253de:	2206      	movs	r2, #6
   253e0:	f10d 0101 	add.w	r1, sp, #1
   253e4:	1c60      	adds	r0, r4, #1
   253e6:	f7f1 fb3d 	bl	16a64 <memcmp>
   253ea:	b1a0      	cbz	r0, 25416 <ble_gap_unpair+0x4a>
    ble_hs_lock();
   253ec:	f002 fa98 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find_by_addr(peer_addr);
   253f0:	4620      	mov	r0, r4
   253f2:	f003 f995 	bl	28720 <ble_hs_conn_find_by_addr>
    if (conn != NULL) {
   253f6:	b110      	cbz	r0, 253fe <ble_gap_unpair+0x32>
        ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   253f8:	2113      	movs	r1, #19
   253fa:	f7ff fd75 	bl	24ee8 <ble_gap_terminate_with_conn>
    ble_hs_unlock();
   253fe:	f002 fa93 	bl	27928 <ble_hs_unlock>
                             peer_addr->val);
   25402:	4621      	mov	r1, r4
    ble_hs_pvcy_remove_entry(peer_addr->type,
   25404:	f811 0b01 	ldrb.w	r0, [r1], #1
   25408:	f004 fa61 	bl	298ce <ble_hs_pvcy_remove_entry>
    return ble_store_util_delete_peer(peer_addr);
   2540c:	4620      	mov	r0, r4
   2540e:	f007 f888 	bl	2c522 <ble_store_util_delete_peer>
}
   25412:	b002      	add	sp, #8
   25414:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   25416:	2003      	movs	r0, #3
   25418:	e7fb      	b.n	25412 <ble_gap_unpair+0x46>

0002541a <ble_gap_unpair_oldest_peer>:
{
   2541a:	b500      	push	{lr}
   2541c:	b085      	sub	sp, #20
    rc = ble_store_util_bonded_peers(
   2541e:	2201      	movs	r2, #1
   25420:	a901      	add	r1, sp, #4
   25422:	a802      	add	r0, sp, #8
   25424:	f007 f856 	bl	2c4d4 <ble_store_util_bonded_peers>
    if (rc != 0) {
   25428:	b920      	cbnz	r0, 25434 <ble_gap_unpair_oldest_peer+0x1a>
    if (num_peers == 0) {
   2542a:	9b01      	ldr	r3, [sp, #4]
   2542c:	b12b      	cbz	r3, 2543a <ble_gap_unpair_oldest_peer+0x20>
    rc = ble_gap_unpair(&oldest_peer_id_addr);
   2542e:	a802      	add	r0, sp, #8
   25430:	f7ff ffcc 	bl	253cc <ble_gap_unpair>
}
   25434:	b005      	add	sp, #20
   25436:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ENOENT;
   2543a:	2005      	movs	r0, #5
   2543c:	e7fa      	b.n	25434 <ble_gap_unpair_oldest_peer+0x1a>

0002543e <ble_gap_unpair_oldest_except>:
{
   2543e:	b570      	push	{r4, r5, r6, lr}
   25440:	b088      	sub	sp, #32
   25442:	4605      	mov	r5, r0
    rc = ble_store_util_bonded_peers(
   25444:	2203      	movs	r2, #3
   25446:	a901      	add	r1, sp, #4
   25448:	a802      	add	r0, sp, #8
   2544a:	f007 f843 	bl	2c4d4 <ble_store_util_bonded_peers>
    if (rc != 0) {
   2544e:	4604      	mov	r4, r0
   25450:	bb18      	cbnz	r0, 2549a <ble_gap_unpair_oldest_except+0x5c>
    if (num_peers == 0) {
   25452:	9e01      	ldr	r6, [sp, #4]
   25454:	b966      	cbnz	r6, 25470 <ble_gap_unpair_oldest_except+0x32>
        return BLE_HS_ENOENT;
   25456:	2405      	movs	r4, #5
   25458:	e01f      	b.n	2549a <ble_gap_unpair_oldest_except+0x5c>
   2545a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   2545e:	ab02      	add	r3, sp, #8
   25460:	4419      	add	r1, r3
   25462:	2206      	movs	r2, #6
   25464:	3101      	adds	r1, #1
   25466:	1c68      	adds	r0, r5, #1
   25468:	f7f1 fafc 	bl	16a64 <memcmp>
        if (ble_addr_cmp(peer_addr, &peer_id_addrs[i]) != 0) {
   2546c:	b960      	cbnz	r0, 25488 <ble_gap_unpair_oldest_except+0x4a>
    for (i = 0; i < num_peers; i++) {
   2546e:	3401      	adds	r4, #1
   25470:	42a6      	cmp	r6, r4
   25472:	dd09      	ble.n	25488 <ble_gap_unpair_oldest_except+0x4a>
    type_diff = a->type - b->type;
   25474:	782b      	ldrb	r3, [r5, #0]
   25476:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   2547a:	a908      	add	r1, sp, #32
   2547c:	440a      	add	r2, r1
   2547e:	f812 0c18 	ldrb.w	r0, [r2, #-24]
    if (type_diff != 0) {
   25482:	1a18      	subs	r0, r3, r0
   25484:	d0e9      	beq.n	2545a <ble_gap_unpair_oldest_except+0x1c>
   25486:	e7f1      	b.n	2546c <ble_gap_unpair_oldest_except+0x2e>
    if (i >= num_peers) {
   25488:	42a6      	cmp	r6, r4
   2548a:	dd09      	ble.n	254a0 <ble_gap_unpair_oldest_except+0x62>
    return ble_gap_unpair(&peer_id_addrs[i]);
   2548c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   25490:	ab02      	add	r3, sp, #8
   25492:	1918      	adds	r0, r3, r4
   25494:	f7ff ff9a 	bl	253cc <ble_gap_unpair>
   25498:	4604      	mov	r4, r0
}
   2549a:	4620      	mov	r0, r4
   2549c:	b008      	add	sp, #32
   2549e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
   254a0:	2406      	movs	r4, #6
   254a2:	e7fa      	b.n	2549a <ble_gap_unpair_oldest_except+0x5c>

000254a4 <ble_gap_passkey_event>:
{
   254a4:	b530      	push	{r4, r5, lr}
   254a6:	b08f      	sub	sp, #60	; 0x3c
   254a8:	4604      	mov	r4, r0
   254aa:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   254ac:	2234      	movs	r2, #52	; 0x34
   254ae:	2100      	movs	r1, #0
   254b0:	a801      	add	r0, sp, #4
   254b2:	f7f1 fb20 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
   254b6:	230b      	movs	r3, #11
   254b8:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
   254bc:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
   254c0:	ab02      	add	r3, sp, #8
   254c2:	e895 0003 	ldmia.w	r5, {r0, r1}
   254c6:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
   254ca:	4621      	mov	r1, r4
   254cc:	a801      	add	r0, sp, #4
   254ce:	f7fe ff11 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   254d2:	b00f      	add	sp, #60	; 0x3c
   254d4:	bd30      	pop	{r4, r5, pc}

000254d6 <ble_gap_enc_event>:
{
   254d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   254d8:	b08f      	sub	sp, #60	; 0x3c
   254da:	4604      	mov	r4, r0
   254dc:	460d      	mov	r5, r1
   254de:	4616      	mov	r6, r2
   254e0:	461f      	mov	r7, r3
    memset(&event, 0, sizeof event);
   254e2:	2234      	movs	r2, #52	; 0x34
   254e4:	2100      	movs	r1, #0
   254e6:	a801      	add	r0, sp, #4
   254e8:	f7f1 fb05 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
   254ec:	230a      	movs	r3, #10
   254ee:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
   254f2:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
   254f6:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   254f8:	a801      	add	r0, sp, #4
   254fa:	f7fe fed1 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   254fe:	4621      	mov	r1, r4
   25500:	a801      	add	r0, sp, #4
   25502:	f7fe fef7 	bl	242f4 <ble_gap_call_conn_event_cb>
    if (status != 0) {
   25506:	b90d      	cbnz	r5, 2550c <ble_gap_enc_event+0x36>
    if (security_restored) {
   25508:	b916      	cbnz	r6, 25510 <ble_gap_enc_event+0x3a>
    if (bonded) {
   2550a:	b92f      	cbnz	r7, 25518 <ble_gap_enc_event+0x42>
}
   2550c:	b00f      	add	sp, #60	; 0x3c
   2550e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_gatts_bonding_restored(conn_handle);
   25510:	4620      	mov	r0, r4
   25512:	f002 f895 	bl	27640 <ble_gatts_bonding_restored>
        return;
   25516:	e7f9      	b.n	2550c <ble_gap_enc_event+0x36>
        ble_gatts_bonding_established(conn_handle);
   25518:	4620      	mov	r0, r4
   2551a:	f002 f851 	bl	275c0 <ble_gatts_bonding_established>
   2551e:	e7f5      	b.n	2550c <ble_gap_enc_event+0x36>

00025520 <ble_gap_identity_event>:
{
   25520:	b510      	push	{r4, lr}
   25522:	b08e      	sub	sp, #56	; 0x38
   25524:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   25526:	2234      	movs	r2, #52	; 0x34
   25528:	2100      	movs	r1, #0
   2552a:	a801      	add	r0, sp, #4
   2552c:	f7f1 fae3 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
   25530:	2310      	movs	r3, #16
   25532:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
   25536:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2553a:	4621      	mov	r1, r4
   2553c:	a801      	add	r0, sp, #4
   2553e:	f7fe fed9 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   25542:	b00e      	add	sp, #56	; 0x38
   25544:	bd10      	pop	{r4, pc}

00025546 <ble_gap_repeat_pairing_event>:
{
   25546:	b510      	push	{r4, lr}
   25548:	b08e      	sub	sp, #56	; 0x38
   2554a:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   2554c:	2234      	movs	r2, #52	; 0x34
   2554e:	2100      	movs	r1, #0
   25550:	a801      	add	r0, sp, #4
   25552:	f7f1 fad0 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
   25556:	2311      	movs	r3, #17
   25558:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
   2555c:	6820      	ldr	r0, [r4, #0]
   2555e:	9002      	str	r0, [sp, #8]
   25560:	88a3      	ldrh	r3, [r4, #4]
   25562:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
   25566:	8821      	ldrh	r1, [r4, #0]
   25568:	a801      	add	r0, sp, #4
   2556a:	f7fe fec3 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   2556e:	b00e      	add	sp, #56	; 0x38
   25570:	bd10      	pop	{r4, pc}

00025572 <ble_gap_notify_rx_event>:
{
   25572:	b5f0      	push	{r4, r5, r6, r7, lr}
   25574:	b08f      	sub	sp, #60	; 0x3c
   25576:	4604      	mov	r4, r0
   25578:	460f      	mov	r7, r1
   2557a:	4616      	mov	r6, r2
   2557c:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   2557e:	2234      	movs	r2, #52	; 0x34
   25580:	2100      	movs	r1, #0
   25582:	a801      	add	r0, sp, #4
   25584:	f7f1 fab7 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   25588:	230c      	movs	r3, #12
   2558a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   2558e:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   25592:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   25596:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   25598:	f04f 0300 	mov.w	r3, #0
   2559c:	f365 0300 	bfi	r3, r5, #0, #1
   255a0:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   255a4:	a801      	add	r0, sp, #4
   255a6:	f7fe fe7b 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   255aa:	4621      	mov	r1, r4
   255ac:	a801      	add	r0, sp, #4
   255ae:	f7fe fea1 	bl	242f4 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   255b2:	9802      	ldr	r0, [sp, #8]
   255b4:	f7f0 f858 	bl	15668 <os_mbuf_free_chain>
}
   255b8:	b00f      	add	sp, #60	; 0x3c
   255ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000255bc <ble_gap_notify_tx_event>:
{
   255bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   255be:	b08f      	sub	sp, #60	; 0x3c
   255c0:	4607      	mov	r7, r0
   255c2:	460c      	mov	r4, r1
   255c4:	4616      	mov	r6, r2
   255c6:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   255c8:	2234      	movs	r2, #52	; 0x34
   255ca:	2100      	movs	r1, #0
   255cc:	a801      	add	r0, sp, #4
   255ce:	f7f1 fa92 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   255d2:	230d      	movs	r3, #13
   255d4:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   255d8:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   255dc:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   255de:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   255e2:	f04f 0300 	mov.w	r3, #0
   255e6:	f365 0300 	bfi	r3, r5, #0, #1
   255ea:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   255ee:	a801      	add	r0, sp, #4
   255f0:	f7fe fe56 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   255f4:	4621      	mov	r1, r4
   255f6:	a801      	add	r0, sp, #4
   255f8:	f7fe fe7c 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   255fc:	b00f      	add	sp, #60	; 0x3c
   255fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025600 <ble_gap_subscribe_event>:
{
   25600:	b5f0      	push	{r4, r5, r6, r7, lr}
   25602:	b08f      	sub	sp, #60	; 0x3c
   25604:	4605      	mov	r5, r0
   25606:	460f      	mov	r7, r1
   25608:	4616      	mov	r6, r2
   2560a:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   2560c:	2234      	movs	r2, #52	; 0x34
   2560e:	2100      	movs	r1, #0
   25610:	a801      	add	r0, sp, #4
   25612:	f7f1 fa70 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   25616:	230e      	movs	r3, #14
   25618:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   2561c:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   25620:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   25624:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   25628:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   2562c:	3a00      	subs	r2, #0
   2562e:	bf18      	it	ne
   25630:	2201      	movne	r2, #1
   25632:	1e23      	subs	r3, r4, #0
   25634:	bf18      	it	ne
   25636:	2301      	movne	r3, #1
   25638:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   2563c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   25640:	3a00      	subs	r2, #0
   25642:	bf18      	it	ne
   25644:	2201      	movne	r2, #1
   25646:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   2564a:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   2564e:	3a00      	subs	r2, #0
   25650:	bf18      	it	ne
   25652:	2201      	movne	r2, #1
   25654:	f362 03c3 	bfi	r3, r2, #3, #1
   25658:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   2565c:	a801      	add	r0, sp, #4
   2565e:	f7fe fe1f 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   25662:	4629      	mov	r1, r5
   25664:	a801      	add	r0, sp, #4
   25666:	f7fe fe45 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   2566a:	b00f      	add	sp, #60	; 0x3c
   2566c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002566e <ble_gap_mtu_event>:
{
   2566e:	b570      	push	{r4, r5, r6, lr}
   25670:	b08e      	sub	sp, #56	; 0x38
   25672:	4604      	mov	r4, r0
   25674:	460e      	mov	r6, r1
   25676:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   25678:	2234      	movs	r2, #52	; 0x34
   2567a:	2100      	movs	r1, #0
   2567c:	a801      	add	r0, sp, #4
   2567e:	f7f1 fa3a 	bl	16af6 <memset>
    event.type = BLE_GAP_EVENT_MTU;
   25682:	230f      	movs	r3, #15
   25684:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   25688:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   2568c:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   25690:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   25694:	a801      	add	r0, sp, #4
   25696:	f7fe fe03 	bl	242a0 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2569a:	4621      	mov	r1, r4
   2569c:	a801      	add	r0, sp, #4
   2569e:	f7fe fe29 	bl	242f4 <ble_gap_call_conn_event_cb>
}
   256a2:	b00e      	add	sp, #56	; 0x38
   256a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000256a8 <ble_gap_preempt_no_lock>:
{
   256a8:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   256aa:	f7ff fbd1 	bl	24e50 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   256ae:	b920      	cbnz	r0, 256ba <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   256b0:	4a06      	ldr	r2, [pc, #24]	; (256cc <ble_gap_preempt_no_lock+0x24>)
   256b2:	7853      	ldrb	r3, [r2, #1]
   256b4:	f043 0304 	orr.w	r3, r3, #4
   256b8:	7053      	strb	r3, [r2, #1]
    rc = ble_gap_conn_cancel_no_lock();
   256ba:	f7ff fbef 	bl	24e9c <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   256be:	b918      	cbnz	r0, 256c8 <ble_gap_preempt_no_lock+0x20>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   256c0:	4b02      	ldr	r3, [pc, #8]	; (256cc <ble_gap_preempt_no_lock+0x24>)
   256c2:	2202      	movs	r2, #2
   256c4:	f883 2020 	strb.w	r2, [r3, #32]
}
   256c8:	bd08      	pop	{r3, pc}
   256ca:	bf00      	nop
   256cc:	10002cec 	.word	0x10002cec

000256d0 <ble_gap_preempt>:
{
   256d0:	b508      	push	{r3, lr}
    ble_hs_lock();
   256d2:	f002 f925 	bl	27920 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   256d6:	f7fe fd23 	bl	24120 <ble_gap_is_preempted>
   256da:	b110      	cbz	r0, 256e2 <ble_gap_preempt+0x12>
    ble_hs_unlock();
   256dc:	f002 f924 	bl	27928 <ble_hs_unlock>
}
   256e0:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   256e2:	f7ff ffe1 	bl	256a8 <ble_gap_preempt_no_lock>
   256e6:	e7f9      	b.n	256dc <ble_gap_preempt+0xc>

000256e8 <ble_gap_preempt_done>:
{
   256e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   256ea:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   256ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   256f0:	482c      	ldr	r0, [pc, #176]	; (257a4 <ble_gap_preempt_done+0xbc>)
   256f2:	f7f1 f93f 	bl	16974 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   256f6:	4b2c      	ldr	r3, [pc, #176]	; (257a8 <ble_gap_preempt_done+0xc0>)
   256f8:	2400      	movs	r4, #0
   256fa:	601c      	str	r4, [r3, #0]
   256fc:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   256fe:	f002 f90f 	bl	27920 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   25702:	4623      	mov	r3, r4
   25704:	2b00      	cmp	r3, #0
   25706:	dd15      	ble.n	25734 <ble_gap_preempt_done+0x4c>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   25708:	4b28      	ldr	r3, [pc, #160]	; (257ac <ble_gap_preempt_done+0xc4>)
   2570a:	f893 3020 	ldrb.w	r3, [r3, #32]
   2570e:	2b01      	cmp	r3, #1
   25710:	d028      	beq.n	25764 <ble_gap_preempt_done+0x7c>
    disc_preempted = 0;
   25712:	2700      	movs	r7, #0
    ble_hs_unlock();
   25714:	f002 f908 	bl	27928 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   25718:	2309      	movs	r3, #9
   2571a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   2571e:	231d      	movs	r3, #29
   25720:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   25722:	2400      	movs	r4, #0
   25724:	2c00      	cmp	r4, #0
   25726:	dd25      	ble.n	25774 <ble_gap_preempt_done+0x8c>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   25728:	481e      	ldr	r0, [pc, #120]	; (257a4 <ble_gap_preempt_done+0xbc>)
   2572a:	f7f1 f8c3 	bl	168b4 <os_mutex_release>
    if (disc_preempted) {
   2572e:	bb6f      	cbnz	r7, 2578c <ble_gap_preempt_done+0xa4>
}
   25730:	b00f      	add	sp, #60	; 0x3c
   25732:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   25734:	4a1d      	ldr	r2, [pc, #116]	; (257ac <ble_gap_preempt_done+0xc4>)
   25736:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2573a:	7852      	ldrb	r2, [r2, #1]
   2573c:	f012 0f04 	tst.w	r2, #4
   25740:	d00e      	beq.n	25760 <ble_gap_preempt_done+0x78>
            ble_gap_slave[i].preempted = 0;
   25742:	4a1a      	ldr	r2, [pc, #104]	; (257ac <ble_gap_preempt_done+0xc4>)
   25744:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   25748:	7851      	ldrb	r1, [r2, #1]
   2574a:	f36f 0182 	bfc	r1, #2, #1
   2574e:	7051      	strb	r1, [r2, #1]
            slaves[i].cb = ble_gap_slave[i].cb;
   25750:	6890      	ldr	r0, [r2, #8]
   25752:	4915      	ldr	r1, [pc, #84]	; (257a8 <ble_gap_preempt_done+0xc0>)
   25754:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   25758:	68d2      	ldr	r2, [r2, #12]
   2575a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2575e:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   25760:	3301      	adds	r3, #1
   25762:	e7cf      	b.n	25704 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   25764:	4b11      	ldr	r3, [pc, #68]	; (257ac <ble_gap_preempt_done+0xc4>)
   25766:	2200      	movs	r2, #0
   25768:	f883 2020 	strb.w	r2, [r3, #32]
        master_cb = ble_gap_master.cb;
   2576c:	699d      	ldr	r5, [r3, #24]
        master_arg = ble_gap_master.cb_arg;
   2576e:	69de      	ldr	r6, [r3, #28]
        disc_preempted = 1;
   25770:	2701      	movs	r7, #1
   25772:	e7cf      	b.n	25714 <ble_gap_preempt_done+0x2c>
        if (slaves[i].cb) {
   25774:	4b0c      	ldr	r3, [pc, #48]	; (257a8 <ble_gap_preempt_done+0xc0>)
   25776:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   2577a:	b129      	cbz	r1, 25788 <ble_gap_preempt_done+0xa0>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   2577c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   25780:	685a      	ldr	r2, [r3, #4]
   25782:	a801      	add	r0, sp, #4
   25784:	f7fe fcb6 	bl	240f4 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   25788:	3401      	adds	r4, #1
   2578a:	e7cb      	b.n	25724 <ble_gap_preempt_done+0x3c>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   2578c:	2308      	movs	r3, #8
   2578e:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   25792:	231d      	movs	r3, #29
   25794:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   25796:	4632      	mov	r2, r6
   25798:	4629      	mov	r1, r5
   2579a:	a801      	add	r0, sp, #4
   2579c:	f7fe fcaa 	bl	240f4 <ble_gap_call_event_cb>
}
   257a0:	e7c6      	b.n	25730 <ble_gap_preempt_done+0x48>
   257a2:	bf00      	nop
   257a4:	10002d10 	.word	0x10002d10
   257a8:	10002d1c 	.word	0x10002d1c
   257ac:	10002cec 	.word	0x10002cec

000257b0 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   257b0:	4b0c      	ldr	r3, [pc, #48]	; (257e4 <ble_gap_event_listener_unregister+0x34>)
   257b2:	681a      	ldr	r2, [r3, #0]
   257b4:	4613      	mov	r3, r2
   257b6:	b11b      	cbz	r3, 257c0 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   257b8:	4283      	cmp	r3, r0
   257ba:	d001      	beq.n	257c0 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   257bc:	689b      	ldr	r3, [r3, #8]
   257be:	e7fa      	b.n	257b6 <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   257c0:	b173      	cbz	r3, 257e0 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   257c2:	4282      	cmp	r2, r0
   257c4:	d007      	beq.n	257d6 <ble_gap_event_listener_unregister+0x26>
   257c6:	4613      	mov	r3, r2
   257c8:	6892      	ldr	r2, [r2, #8]
   257ca:	4282      	cmp	r2, r0
   257cc:	d1fb      	bne.n	257c6 <ble_gap_event_listener_unregister+0x16>
   257ce:	6892      	ldr	r2, [r2, #8]
   257d0:	609a      	str	r2, [r3, #8]
        rc = 0;
   257d2:	2000      	movs	r0, #0
   257d4:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   257d6:	6892      	ldr	r2, [r2, #8]
   257d8:	4b02      	ldr	r3, [pc, #8]	; (257e4 <ble_gap_event_listener_unregister+0x34>)
   257da:	601a      	str	r2, [r3, #0]
        rc = 0;
   257dc:	2000      	movs	r0, #0
   257de:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   257e0:	2005      	movs	r0, #5
}
   257e2:	4770      	bx	lr
   257e4:	10002c28 	.word	0x10002c28

000257e8 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   257e8:	b510      	push	{r4, lr}
   257ea:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   257ec:	4b15      	ldr	r3, [pc, #84]	; (25844 <ble_gap_init+0x5c>)
   257ee:	2400      	movs	r4, #0
   257f0:	611c      	str	r4, [r3, #16]
   257f2:	615c      	str	r4, [r3, #20]
   257f4:	619c      	str	r4, [r3, #24]
   257f6:	61dc      	str	r4, [r3, #28]
   257f8:	621c      	str	r4, [r3, #32]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   257fa:	601c      	str	r4, [r3, #0]
   257fc:	605c      	str	r4, [r3, #4]
   257fe:	609c      	str	r4, [r3, #8]
   25800:	60dc      	str	r4, [r3, #12]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   25802:	4811      	ldr	r0, [pc, #68]	; (25848 <ble_gap_init+0x60>)
   25804:	f7f1 f84c 	bl	168a0 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   25808:	4b10      	ldr	r3, [pc, #64]	; (2584c <ble_gap_init+0x64>)
   2580a:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   2580c:	4b10      	ldr	r3, [pc, #64]	; (25850 <ble_gap_init+0x68>)
   2580e:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   25810:	4b10      	ldr	r3, [pc, #64]	; (25854 <ble_gap_init+0x6c>)
   25812:	9300      	str	r3, [sp, #0]
   25814:	4b10      	ldr	r3, [pc, #64]	; (25858 <ble_gap_init+0x70>)
   25816:	2218      	movs	r2, #24
   25818:	2101      	movs	r1, #1
   2581a:	4810      	ldr	r0, [pc, #64]	; (2585c <ble_gap_init+0x74>)
   2581c:	f7f0 faca 	bl	15db4 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   25820:	b120      	cbz	r0, 2582c <ble_gap_init+0x44>
   25822:	2801      	cmp	r0, #1
   25824:	d10c      	bne.n	25840 <ble_gap_init+0x58>
   25826:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   25828:	b002      	add	sp, #8
   2582a:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   2582c:	4b0c      	ldr	r3, [pc, #48]	; (25860 <ble_gap_init+0x78>)
   2582e:	9301      	str	r3, [sp, #4]
   25830:	2300      	movs	r3, #0
   25832:	9300      	str	r3, [sp, #0]
   25834:	221f      	movs	r2, #31
   25836:	2104      	movs	r1, #4
   25838:	480a      	ldr	r0, [pc, #40]	; (25864 <ble_gap_init+0x7c>)
   2583a:	f7f4 fcf3 	bl	1a224 <stats_init_and_reg>
    if (rc != 0) {
   2583e:	e7f3      	b.n	25828 <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   25840:	200b      	movs	r0, #11
   25842:	e7f1      	b.n	25828 <ble_gap_init+0x40>
   25844:	10002cec 	.word	0x10002cec
   25848:	10002d10 	.word	0x10002d10
   2584c:	10002cb4 	.word	0x10002cb4
   25850:	10002c28 	.word	0x10002c28
   25854:	00034b28 	.word	0x00034b28
   25858:	10002cb8 	.word	0x10002cb8
   2585c:	10002cd0 	.word	0x10002cd0
   25860:	00034b38 	.word	0x00034b38
   25864:	10002c2c 	.word	0x10002c2c

00025868 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   25868:	4b01      	ldr	r3, [pc, #4]	; (25870 <ble_gattc_err_dispatch_get+0x8>)
   2586a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2586e:	4770      	bx	lr
   25870:	00034ba8 	.word	0x00034ba8

00025874 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   25874:	4b01      	ldr	r3, [pc, #4]	; (2587c <ble_gattc_resume_dispatch_get+0x8>)
   25876:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2587a:	4770      	bx	lr
   2587c:	00034be4 	.word	0x00034be4

00025880 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   25880:	4b01      	ldr	r3, [pc, #4]	; (25888 <ble_gattc_tmo_dispatch_get+0x8>)
   25882:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   25886:	4770      	bx	lr
   25888:	00034c20 	.word	0x00034c20

0002588c <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   2588c:	880a      	ldrh	r2, [r1, #0]
   2588e:	8903      	ldrh	r3, [r0, #8]
   25890:	429a      	cmp	r2, r3
   25892:	d107      	bne.n	258a4 <ble_gattc_proc_matches_conn_op+0x18>
        return 0;
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   25894:	788b      	ldrb	r3, [r1, #2]
   25896:	7a82      	ldrb	r2, [r0, #10]
   25898:	4293      	cmp	r3, r2
   2589a:	d005      	beq.n	258a8 <ble_gattc_proc_matches_conn_op+0x1c>
   2589c:	2bff      	cmp	r3, #255	; 0xff
   2589e:	d105      	bne.n	258ac <ble_gattc_proc_matches_conn_op+0x20>
        return 0;
    }

    return 1;
   258a0:	2001      	movs	r0, #1
   258a2:	4770      	bx	lr
        return 0;
   258a4:	2000      	movs	r0, #0
   258a6:	4770      	bx	lr
    return 1;
   258a8:	2001      	movs	r0, #1
   258aa:	4770      	bx	lr
        return 0;
   258ac:	2000      	movs	r0, #0
}
   258ae:	4770      	bx	lr

000258b0 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   258b0:	6843      	ldr	r3, [r0, #4]
   258b2:	680a      	ldr	r2, [r1, #0]
   258b4:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   258b6:	2b00      	cmp	r3, #0
   258b8:	dd05      	ble.n	258c6 <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   258ba:	684a      	ldr	r2, [r1, #4]
   258bc:	429a      	cmp	r2, r3
   258be:	dd04      	ble.n	258ca <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   258c0:	604b      	str	r3, [r1, #4]
    }
    return 0;
   258c2:	2000      	movs	r0, #0
   258c4:	4770      	bx	lr
        return 1;
   258c6:	2001      	movs	r0, #1
   258c8:	4770      	bx	lr
    return 0;
   258ca:	2000      	movs	r0, #0
}
   258cc:	4770      	bx	lr

000258ce <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   258ce:	7ac0      	ldrb	r0, [r0, #11]
}
   258d0:	f000 0001 	and.w	r0, r0, #1
   258d4:	4770      	bx	lr

000258d6 <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   258d6:	b510      	push	{r4, lr}
   258d8:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   258da:	7a80      	ldrb	r0, [r0, #10]
   258dc:	f7ff ffd0 	bl	25880 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   258e0:	b110      	cbz	r0, 258e8 <ble_gattc_proc_timeout+0x12>
   258e2:	4603      	mov	r3, r0
        cb(proc);
   258e4:	4620      	mov	r0, r4
   258e6:	4798      	blx	r3
    }
}
   258e8:	bd10      	pop	{r4, pc}
	...

000258ec <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   258ec:	4603      	mov	r3, r0
   258ee:	b118      	cbz	r0, 258f8 <ble_gattc_error+0xc>
   258f0:	280e      	cmp	r0, #14
   258f2:	d102      	bne.n	258fa <ble_gattc_error+0xe>
        att_handle = 0;
   258f4:	2100      	movs	r1, #0
   258f6:	e000      	b.n	258fa <ble_gattc_error+0xe>
   258f8:	2100      	movs	r1, #0
    }

    error.status = status;
   258fa:	4802      	ldr	r0, [pc, #8]	; (25904 <ble_gattc_error+0x18>)
   258fc:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   258fe:	8041      	strh	r1, [r0, #2]
    return &error;
}
   25900:	4770      	bx	lr
   25902:	bf00      	nop
   25904:	10002ec4 	.word	0x10002ec4

00025908 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   25908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2590a:	4604      	mov	r4, r0
   2590c:	461e      	mov	r6, r3
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2590e:	4608      	mov	r0, r1
   25910:	b129      	cbz	r1, 2591e <ble_gattc_mtu_cb+0x16>
   25912:	290e      	cmp	r1, #14
   25914:	d003      	beq.n	2591e <ble_gattc_mtu_cb+0x16>
        STATS_INC(ble_gattc_stats, mtu_fail);
   25916:	4909      	ldr	r1, [pc, #36]	; (2593c <ble_gattc_mtu_cb+0x34>)
   25918:	690b      	ldr	r3, [r1, #16]
   2591a:	3301      	adds	r3, #1
   2591c:	610b      	str	r3, [r1, #16]
    }

    if (proc->mtu.cb == NULL) {
   2591e:	68e5      	ldr	r5, [r4, #12]
   25920:	b14d      	cbz	r5, 25936 <ble_gattc_mtu_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   25922:	8927      	ldrh	r7, [r4, #8]
                          ble_gattc_error(status, att_handle),
   25924:	4611      	mov	r1, r2
   25926:	f7ff ffe1 	bl	258ec <ble_gattc_error>
   2592a:	4601      	mov	r1, r0
        rc = proc->mtu.cb(proc->conn_handle,
   2592c:	6923      	ldr	r3, [r4, #16]
   2592e:	4632      	mov	r2, r6
   25930:	4638      	mov	r0, r7
   25932:	47a8      	blx	r5
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   25934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25936:	2000      	movs	r0, #0
    return rc;
   25938:	e7fc      	b.n	25934 <ble_gattc_mtu_cb+0x2c>
   2593a:	bf00      	nop
   2593c:	10002e2c 	.word	0x10002e2c

00025940 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   25940:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   25942:	2300      	movs	r3, #0
   25944:	461a      	mov	r2, r3
   25946:	210d      	movs	r1, #13
   25948:	f7ff ffde 	bl	25908 <ble_gattc_mtu_cb>
}
   2594c:	bd08      	pop	{r3, pc}

0002594e <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   2594e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   25950:	2300      	movs	r3, #0
   25952:	f7ff ffd9 	bl	25908 <ble_gattc_mtu_cb>
}
   25956:	bd08      	pop	{r3, pc}

00025958 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   25958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2595a:	4604      	mov	r4, r0
   2595c:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   2595e:	4608      	mov	r0, r1
   25960:	b129      	cbz	r1, 2596e <ble_gattc_disc_all_svcs_cb+0x16>
   25962:	290e      	cmp	r1, #14
   25964:	d003      	beq.n	2596e <ble_gattc_disc_all_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   25966:	4909      	ldr	r1, [pc, #36]	; (2598c <ble_gattc_disc_all_svcs_cb+0x34>)
   25968:	698b      	ldr	r3, [r1, #24]
   2596a:	3301      	adds	r3, #1
   2596c:	618b      	str	r3, [r1, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   2596e:	6925      	ldr	r5, [r4, #16]
   25970:	b14d      	cbz	r5, 25986 <ble_gattc_disc_all_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   25972:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   25974:	4611      	mov	r1, r2
   25976:	f7ff ffb9 	bl	258ec <ble_gattc_error>
   2597a:	4601      	mov	r1, r0
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   2597c:	6963      	ldr	r3, [r4, #20]
   2597e:	4632      	mov	r2, r6
   25980:	4638      	mov	r0, r7
   25982:	47a8      	blx	r5
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   25984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25986:	2000      	movs	r0, #0
    return rc;
   25988:	e7fc      	b.n	25984 <ble_gattc_disc_all_svcs_cb+0x2c>
   2598a:	bf00      	nop
   2598c:	10002e2c 	.word	0x10002e2c

00025990 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   25990:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   25992:	2300      	movs	r3, #0
   25994:	461a      	mov	r2, r3
   25996:	210d      	movs	r1, #13
   25998:	f7ff ffde 	bl	25958 <ble_gattc_disc_all_svcs_cb>
}
   2599c:	bd08      	pop	{r3, pc}

0002599e <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   2599e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   259a0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   259a4:	d004      	beq.n	259b0 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   259a6:	2300      	movs	r3, #0
   259a8:	b289      	uxth	r1, r1
   259aa:	f7ff ffd5 	bl	25958 <ble_gattc_disc_all_svcs_cb>
}
   259ae:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   259b0:	210e      	movs	r1, #14
   259b2:	e7f8      	b.n	259a6 <ble_gattc_disc_all_svcs_err+0x8>

000259b4 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   259b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   259b6:	4604      	mov	r4, r0
   259b8:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   259ba:	4608      	mov	r0, r1
   259bc:	b129      	cbz	r1, 259ca <ble_gattc_disc_svc_uuid_cb+0x16>
   259be:	290e      	cmp	r1, #14
   259c0:	d003      	beq.n	259ca <ble_gattc_disc_svc_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   259c2:	4909      	ldr	r1, [pc, #36]	; (259e8 <ble_gattc_disc_svc_uuid_cb+0x34>)
   259c4:	6a0b      	ldr	r3, [r1, #32]
   259c6:	3301      	adds	r3, #1
   259c8:	620b      	str	r3, [r1, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   259ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
   259cc:	b14d      	cbz	r5, 259e2 <ble_gattc_disc_svc_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   259ce:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   259d0:	4611      	mov	r1, r2
   259d2:	f7ff ff8b 	bl	258ec <ble_gattc_error>
   259d6:	4601      	mov	r1, r0
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   259d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   259da:	4632      	mov	r2, r6
   259dc:	4638      	mov	r0, r7
   259de:	47a8      	blx	r5
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   259e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   259e2:	2000      	movs	r0, #0
    return rc;
   259e4:	e7fc      	b.n	259e0 <ble_gattc_disc_svc_uuid_cb+0x2c>
   259e6:	bf00      	nop
   259e8:	10002e2c 	.word	0x10002e2c

000259ec <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   259ec:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   259ee:	2300      	movs	r3, #0
   259f0:	461a      	mov	r2, r3
   259f2:	210d      	movs	r1, #13
   259f4:	f7ff ffde 	bl	259b4 <ble_gattc_disc_svc_uuid_cb>
}
   259f8:	bd08      	pop	{r3, pc}

000259fa <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   259fa:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   259fc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   25a00:	d003      	beq.n	25a0a <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   25a02:	2300      	movs	r3, #0
   25a04:	f7ff ffd6 	bl	259b4 <ble_gattc_disc_svc_uuid_cb>
}
   25a08:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   25a0a:	210e      	movs	r1, #14
   25a0c:	e7f9      	b.n	25a02 <ble_gattc_disc_svc_uuid_err+0x8>
	...

00025a10 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   25a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a12:	4604      	mov	r4, r0
   25a14:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25a16:	4608      	mov	r0, r1
   25a18:	b129      	cbz	r1, 25a26 <ble_gattc_find_inc_svcs_cb+0x16>
   25a1a:	290e      	cmp	r1, #14
   25a1c:	d003      	beq.n	25a26 <ble_gattc_find_inc_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   25a1e:	4909      	ldr	r1, [pc, #36]	; (25a44 <ble_gattc_find_inc_svcs_cb+0x34>)
   25a20:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   25a22:	3301      	adds	r3, #1
   25a24:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   25a26:	6965      	ldr	r5, [r4, #20]
   25a28:	b14d      	cbz	r5, 25a3e <ble_gattc_find_inc_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   25a2a:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   25a2c:	4611      	mov	r1, r2
   25a2e:	f7ff ff5d 	bl	258ec <ble_gattc_error>
   25a32:	4601      	mov	r1, r0
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   25a34:	69a3      	ldr	r3, [r4, #24]
   25a36:	4632      	mov	r2, r6
   25a38:	4638      	mov	r0, r7
   25a3a:	47a8      	blx	r5
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   25a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25a3e:	2000      	movs	r0, #0
    return rc;
   25a40:	e7fc      	b.n	25a3c <ble_gattc_find_inc_svcs_cb+0x2c>
   25a42:	bf00      	nop
   25a44:	10002e2c 	.word	0x10002e2c

00025a48 <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   25a48:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   25a4a:	2300      	movs	r3, #0
   25a4c:	461a      	mov	r2, r3
   25a4e:	210d      	movs	r1, #13
   25a50:	f7ff ffde 	bl	25a10 <ble_gattc_find_inc_svcs_cb>
}
   25a54:	bd08      	pop	{r3, pc}

00025a56 <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   25a56:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   25a58:	8a03      	ldrh	r3, [r0, #16]
   25a5a:	b913      	cbnz	r3, 25a62 <ble_gattc_find_inc_svcs_err+0xc>
   25a5c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   25a60:	d003      	beq.n	25a6a <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   25a62:	2300      	movs	r3, #0
   25a64:	f7ff ffd4 	bl	25a10 <ble_gattc_find_inc_svcs_cb>
}
   25a68:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   25a6a:	210e      	movs	r1, #14
   25a6c:	e7f9      	b.n	25a62 <ble_gattc_find_inc_svcs_err+0xc>
	...

00025a70 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   25a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a72:	4604      	mov	r4, r0
   25a74:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25a76:	4608      	mov	r0, r1
   25a78:	b129      	cbz	r1, 25a86 <ble_gattc_disc_all_chrs_cb+0x16>
   25a7a:	290e      	cmp	r1, #14
   25a7c:	d003      	beq.n	25a86 <ble_gattc_disc_all_chrs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   25a7e:	4909      	ldr	r1, [pc, #36]	; (25aa4 <ble_gattc_disc_all_chrs_cb+0x34>)
   25a80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   25a82:	3301      	adds	r3, #1
   25a84:	630b      	str	r3, [r1, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   25a86:	6925      	ldr	r5, [r4, #16]
   25a88:	b14d      	cbz	r5, 25a9e <ble_gattc_disc_all_chrs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   25a8a:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   25a8c:	4611      	mov	r1, r2
   25a8e:	f7ff ff2d 	bl	258ec <ble_gattc_error>
   25a92:	4601      	mov	r1, r0
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   25a94:	6963      	ldr	r3, [r4, #20]
   25a96:	4632      	mov	r2, r6
   25a98:	4638      	mov	r0, r7
   25a9a:	47a8      	blx	r5
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   25a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25a9e:	2000      	movs	r0, #0
    return rc;
   25aa0:	e7fc      	b.n	25a9c <ble_gattc_disc_all_chrs_cb+0x2c>
   25aa2:	bf00      	nop
   25aa4:	10002e2c 	.word	0x10002e2c

00025aa8 <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   25aa8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   25aaa:	2300      	movs	r3, #0
   25aac:	461a      	mov	r2, r3
   25aae:	210d      	movs	r1, #13
   25ab0:	f7ff ffde 	bl	25a70 <ble_gattc_disc_all_chrs_cb>
}
   25ab4:	bd08      	pop	{r3, pc}

00025ab6 <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   25ab6:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   25ab8:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   25abc:	d003      	beq.n	25ac6 <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   25abe:	2300      	movs	r3, #0
   25ac0:	f7ff ffd6 	bl	25a70 <ble_gattc_disc_all_chrs_cb>
}
   25ac4:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   25ac6:	210e      	movs	r1, #14
   25ac8:	e7f9      	b.n	25abe <ble_gattc_disc_all_chrs_err+0x8>
	...

00025acc <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   25acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25ace:	4604      	mov	r4, r0
   25ad0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25ad2:	4608      	mov	r0, r1
   25ad4:	b129      	cbz	r1, 25ae2 <ble_gattc_disc_chr_uuid_cb+0x16>
   25ad6:	290e      	cmp	r1, #14
   25ad8:	d003      	beq.n	25ae2 <ble_gattc_disc_chr_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   25ada:	4909      	ldr	r1, [pc, #36]	; (25b00 <ble_gattc_disc_chr_uuid_cb+0x34>)
   25adc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   25ade:	3301      	adds	r3, #1
   25ae0:	638b      	str	r3, [r1, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   25ae2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   25ae4:	b14d      	cbz	r5, 25afa <ble_gattc_disc_chr_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   25ae6:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   25ae8:	4611      	mov	r1, r2
   25aea:	f7ff feff 	bl	258ec <ble_gattc_error>
   25aee:	4601      	mov	r1, r0
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   25af0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25af2:	4632      	mov	r2, r6
   25af4:	4638      	mov	r0, r7
   25af6:	47a8      	blx	r5
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   25af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25afa:	2000      	movs	r0, #0
    return rc;
   25afc:	e7fc      	b.n	25af8 <ble_gattc_disc_chr_uuid_cb+0x2c>
   25afe:	bf00      	nop
   25b00:	10002e2c 	.word	0x10002e2c

00025b04 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   25b04:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   25b06:	2300      	movs	r3, #0
   25b08:	461a      	mov	r2, r3
   25b0a:	210d      	movs	r1, #13
   25b0c:	f7ff ffde 	bl	25acc <ble_gattc_disc_chr_uuid_cb>
}
   25b10:	bd08      	pop	{r3, pc}

00025b12 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   25b12:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   25b14:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   25b18:	d003      	beq.n	25b22 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   25b1a:	2300      	movs	r3, #0
   25b1c:	f7ff ffd6 	bl	25acc <ble_gattc_disc_chr_uuid_cb>
}
   25b20:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   25b22:	210e      	movs	r1, #14
   25b24:	e7f9      	b.n	25b1a <ble_gattc_disc_chr_uuid_err+0x8>
	...

00025b28 <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   25b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b2a:	b083      	sub	sp, #12
   25b2c:	4604      	mov	r4, r0
   25b2e:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25b30:	4608      	mov	r0, r1
   25b32:	b129      	cbz	r1, 25b40 <ble_gattc_disc_all_dscs_cb+0x18>
   25b34:	290e      	cmp	r1, #14
   25b36:	d003      	beq.n	25b40 <ble_gattc_disc_all_dscs_cb+0x18>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   25b38:	490a      	ldr	r1, [pc, #40]	; (25b64 <ble_gattc_disc_all_dscs_cb+0x3c>)
   25b3a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   25b3c:	3301      	adds	r3, #1
   25b3e:	640b      	str	r3, [r1, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   25b40:	6965      	ldr	r5, [r4, #20]
   25b42:	b165      	cbz	r5, 25b5e <ble_gattc_disc_all_dscs_cb+0x36>
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   25b44:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   25b46:	4611      	mov	r1, r2
   25b48:	f7ff fed0 	bl	258ec <ble_gattc_error>
   25b4c:	4601      	mov	r1, r0
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   25b4e:	69a3      	ldr	r3, [r4, #24]
   25b50:	9300      	str	r3, [sp, #0]
   25b52:	4633      	mov	r3, r6
   25b54:	89a2      	ldrh	r2, [r4, #12]
   25b56:	4638      	mov	r0, r7
   25b58:	47a8      	blx	r5
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   25b5a:	b003      	add	sp, #12
   25b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = 0;
   25b5e:	2000      	movs	r0, #0
    return rc;
   25b60:	e7fb      	b.n	25b5a <ble_gattc_disc_all_dscs_cb+0x32>
   25b62:	bf00      	nop
   25b64:	10002e2c 	.word	0x10002e2c

00025b68 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   25b68:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   25b6a:	2300      	movs	r3, #0
   25b6c:	461a      	mov	r2, r3
   25b6e:	210d      	movs	r1, #13
   25b70:	f7ff ffda 	bl	25b28 <ble_gattc_disc_all_dscs_cb>
}
   25b74:	bd08      	pop	{r3, pc}

00025b76 <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   25b76:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   25b78:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   25b7c:	d003      	beq.n	25b86 <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   25b7e:	2300      	movs	r3, #0
   25b80:	f7ff ffd2 	bl	25b28 <ble_gattc_disc_all_dscs_cb>
}
   25b84:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   25b86:	210e      	movs	r1, #14
   25b88:	e7f9      	b.n	25b7e <ble_gattc_disc_all_dscs_err+0x8>
	...

00025b8c <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   25b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b8e:	4604      	mov	r4, r0
   25b90:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25b92:	4608      	mov	r0, r1
   25b94:	b129      	cbz	r1, 25ba2 <ble_gattc_read_cb+0x16>
   25b96:	290e      	cmp	r1, #14
   25b98:	d003      	beq.n	25ba2 <ble_gattc_read_cb+0x16>
        STATS_INC(ble_gattc_stats, read_fail);
   25b9a:	4909      	ldr	r1, [pc, #36]	; (25bc0 <ble_gattc_read_cb+0x34>)
   25b9c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   25b9e:	3301      	adds	r3, #1
   25ba0:	648b      	str	r3, [r1, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   25ba2:	6925      	ldr	r5, [r4, #16]
   25ba4:	b14d      	cbz	r5, 25bba <ble_gattc_read_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   25ba6:	8927      	ldrh	r7, [r4, #8]
                           ble_gattc_error(status, att_handle), attr,
   25ba8:	4611      	mov	r1, r2
   25baa:	f7ff fe9f 	bl	258ec <ble_gattc_error>
   25bae:	4601      	mov	r1, r0
        rc = proc->read.cb(proc->conn_handle,
   25bb0:	6963      	ldr	r3, [r4, #20]
   25bb2:	4632      	mov	r2, r6
   25bb4:	4638      	mov	r0, r7
   25bb6:	47a8      	blx	r5
                           proc->read.cb_arg);
    }

    return rc;
}
   25bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25bba:	2000      	movs	r0, #0
    return rc;
   25bbc:	e7fc      	b.n	25bb8 <ble_gattc_read_cb+0x2c>
   25bbe:	bf00      	nop
   25bc0:	10002e2c 	.word	0x10002e2c

00025bc4 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   25bc4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   25bc6:	2300      	movs	r3, #0
   25bc8:	461a      	mov	r2, r3
   25bca:	210d      	movs	r1, #13
   25bcc:	f7ff ffde 	bl	25b8c <ble_gattc_read_cb>
}
   25bd0:	bd08      	pop	{r3, pc}

00025bd2 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   25bd2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   25bd4:	2300      	movs	r3, #0
   25bd6:	f7ff ffd9 	bl	25b8c <ble_gattc_read_cb>
}
   25bda:	bd08      	pop	{r3, pc}

00025bdc <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   25bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bde:	4604      	mov	r4, r0
   25be0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25be2:	4608      	mov	r0, r1
   25be4:	b129      	cbz	r1, 25bf2 <ble_gattc_read_uuid_cb+0x16>
   25be6:	290e      	cmp	r1, #14
   25be8:	d003      	beq.n	25bf2 <ble_gattc_read_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   25bea:	4909      	ldr	r1, [pc, #36]	; (25c10 <ble_gattc_read_uuid_cb+0x34>)
   25bec:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   25bee:	3301      	adds	r3, #1
   25bf0:	650b      	str	r3, [r1, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   25bf2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   25bf4:	b14d      	cbz	r5, 25c0a <ble_gattc_read_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   25bf6:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   25bf8:	4611      	mov	r1, r2
   25bfa:	f7ff fe77 	bl	258ec <ble_gattc_error>
   25bfe:	4601      	mov	r1, r0
        rc = proc->read_uuid.cb(proc->conn_handle,
   25c00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25c02:	4632      	mov	r2, r6
   25c04:	4638      	mov	r0, r7
   25c06:	47a8      	blx	r5
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   25c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25c0a:	2000      	movs	r0, #0
    return rc;
   25c0c:	e7fc      	b.n	25c08 <ble_gattc_read_uuid_cb+0x2c>
   25c0e:	bf00      	nop
   25c10:	10002e2c 	.word	0x10002e2c

00025c14 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   25c14:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   25c16:	2300      	movs	r3, #0
   25c18:	461a      	mov	r2, r3
   25c1a:	210d      	movs	r1, #13
   25c1c:	f7ff ffde 	bl	25bdc <ble_gattc_read_uuid_cb>
}
   25c20:	bd08      	pop	{r3, pc}

00025c22 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   25c22:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   25c24:	2300      	movs	r3, #0
   25c26:	f7ff ffd9 	bl	25bdc <ble_gattc_read_uuid_cb>
}
   25c2a:	bd08      	pop	{r3, pc}

00025c2c <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   25c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c2e:	4604      	mov	r4, r0
   25c30:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25c32:	4608      	mov	r0, r1
   25c34:	b129      	cbz	r1, 25c42 <ble_gattc_read_long_cb+0x16>
   25c36:	290e      	cmp	r1, #14
   25c38:	d003      	beq.n	25c42 <ble_gattc_read_long_cb+0x16>
        STATS_INC(ble_gattc_stats, read_long_fail);
   25c3a:	4909      	ldr	r1, [pc, #36]	; (25c60 <ble_gattc_read_long_cb+0x34>)
   25c3c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   25c3e:	3301      	adds	r3, #1
   25c40:	658b      	str	r3, [r1, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   25c42:	6925      	ldr	r5, [r4, #16]
   25c44:	b14d      	cbz	r5, 25c5a <ble_gattc_read_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   25c46:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   25c48:	4611      	mov	r1, r2
   25c4a:	f7ff fe4f 	bl	258ec <ble_gattc_error>
   25c4e:	4601      	mov	r1, r0
        rc = proc->read_long.cb(proc->conn_handle,
   25c50:	6963      	ldr	r3, [r4, #20]
   25c52:	4632      	mov	r2, r6
   25c54:	4638      	mov	r0, r7
   25c56:	47a8      	blx	r5
                                proc->read_long.cb_arg);
    }

    return rc;
}
   25c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   25c5a:	2000      	movs	r0, #0
    return rc;
   25c5c:	e7fc      	b.n	25c58 <ble_gattc_read_long_cb+0x2c>
   25c5e:	bf00      	nop
   25c60:	10002e2c 	.word	0x10002e2c

00025c64 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   25c64:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   25c66:	2300      	movs	r3, #0
   25c68:	461a      	mov	r2, r3
   25c6a:	210d      	movs	r1, #13
   25c6c:	f7ff ffde 	bl	25c2c <ble_gattc_read_long_cb>
}
   25c70:	bd08      	pop	{r3, pc}

00025c72 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   25c72:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   25c74:	2300      	movs	r3, #0
   25c76:	f7ff ffd9 	bl	25c2c <ble_gattc_read_long_cb>
}
   25c7a:	bd08      	pop	{r3, pc}

00025c7c <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   25c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c7e:	b083      	sub	sp, #12
   25c80:	4606      	mov	r6, r0
   25c82:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25c84:	4608      	mov	r0, r1
   25c86:	b129      	cbz	r1, 25c94 <ble_gattc_read_mult_cb+0x18>
   25c88:	290e      	cmp	r1, #14
   25c8a:	d003      	beq.n	25c94 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   25c8c:	490f      	ldr	r1, [pc, #60]	; (25ccc <ble_gattc_read_mult_cb+0x50>)
   25c8e:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   25c90:	3301      	adds	r3, #1
   25c92:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   25c94:	2300      	movs	r3, #0
   25c96:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   25c9a:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   25c9e:	b18c      	cbz	r4, 25cc4 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   25ca0:	6823      	ldr	r3, [r4, #0]
   25ca2:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   25ca4:	6a35      	ldr	r5, [r6, #32]
   25ca6:	b17d      	cbz	r5, 25cc8 <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   25ca8:	8937      	ldrh	r7, [r6, #8]
                                ble_gattc_error(status, att_handle), &attr,
   25caa:	4611      	mov	r1, r2
   25cac:	f7ff fe1e 	bl	258ec <ble_gattc_error>
   25cb0:	4601      	mov	r1, r0
        rc = proc->read_mult.cb(proc->conn_handle,
   25cb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   25cb4:	466a      	mov	r2, sp
   25cb6:	4638      	mov	r0, r7
   25cb8:	47a8      	blx	r5
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   25cba:	b10c      	cbz	r4, 25cc0 <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   25cbc:	9b01      	ldr	r3, [sp, #4]
   25cbe:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   25cc0:	b003      	add	sp, #12
   25cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   25cc4:	9301      	str	r3, [sp, #4]
   25cc6:	e7ed      	b.n	25ca4 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   25cc8:	2000      	movs	r0, #0
   25cca:	e7f6      	b.n	25cba <ble_gattc_read_mult_cb+0x3e>
   25ccc:	10002e2c 	.word	0x10002e2c

00025cd0 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   25cd0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   25cd2:	2300      	movs	r3, #0
   25cd4:	461a      	mov	r2, r3
   25cd6:	210d      	movs	r1, #13
   25cd8:	f7ff ffd0 	bl	25c7c <ble_gattc_read_mult_cb>
}
   25cdc:	bd08      	pop	{r3, pc}

00025cde <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   25cde:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   25ce0:	2300      	movs	r3, #0
   25ce2:	f7ff ffcb 	bl	25c7c <ble_gattc_read_mult_cb>
}
   25ce6:	bd08      	pop	{r3, pc}

00025ce8 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   25ce8:	b570      	push	{r4, r5, r6, lr}
   25cea:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25cec:	4608      	mov	r0, r1
   25cee:	b129      	cbz	r1, 25cfc <ble_gattc_write_long_cb+0x14>
   25cf0:	290e      	cmp	r1, #14
   25cf2:	d003      	beq.n	25cfc <ble_gattc_write_long_cb+0x14>
        STATS_INC(ble_gattc_stats, write_long_fail);
   25cf4:	4909      	ldr	r1, [pc, #36]	; (25d1c <ble_gattc_write_long_cb+0x34>)
   25cf6:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   25cf8:	3301      	adds	r3, #1
   25cfa:	678b      	str	r3, [r1, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   25cfc:	69a5      	ldr	r5, [r4, #24]
   25cfe:	b155      	cbz	r5, 25d16 <ble_gattc_write_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   25d00:	8926      	ldrh	r6, [r4, #8]
                                 ble_gattc_error(status, att_handle),
   25d02:	4611      	mov	r1, r2
   25d04:	f7ff fdf2 	bl	258ec <ble_gattc_error>
   25d08:	4601      	mov	r1, r0
        rc = proc->write_long.cb(proc->conn_handle,
   25d0a:	69e3      	ldr	r3, [r4, #28]
   25d0c:	f104 020c 	add.w	r2, r4, #12
   25d10:	4630      	mov	r0, r6
   25d12:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   25d14:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   25d16:	2000      	movs	r0, #0
    return rc;
   25d18:	e7fc      	b.n	25d14 <ble_gattc_write_long_cb+0x2c>
   25d1a:	bf00      	nop
   25d1c:	10002e2c 	.word	0x10002e2c

00025d20 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   25d20:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   25d22:	2200      	movs	r2, #0
   25d24:	210d      	movs	r1, #13
   25d26:	f7ff ffdf 	bl	25ce8 <ble_gattc_write_long_cb>
}
   25d2a:	bd08      	pop	{r3, pc}

00025d2c <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   25d2c:	b570      	push	{r4, r5, r6, lr}
   25d2e:	b082      	sub	sp, #8
   25d30:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   25d32:	4608      	mov	r0, r1
   25d34:	b139      	cbz	r1, 25d46 <ble_gattc_write_reliable_cb+0x1a>
   25d36:	290e      	cmp	r1, #14
   25d38:	d005      	beq.n	25d46 <ble_gattc_write_reliable_cb+0x1a>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   25d3a:	490c      	ldr	r1, [pc, #48]	; (25d6c <ble_gattc_write_reliable_cb+0x40>)
   25d3c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   25d40:	3301      	adds	r3, #1
   25d42:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   25d46:	6b25      	ldr	r5, [r4, #48]	; 0x30
   25d48:	b175      	cbz	r5, 25d68 <ble_gattc_write_reliable_cb+0x3c>
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   25d4a:	8926      	ldrh	r6, [r4, #8]
                                     ble_gattc_error(status, att_handle),
   25d4c:	4611      	mov	r1, r2
   25d4e:	f7ff fdcd 	bl	258ec <ble_gattc_error>
   25d52:	4601      	mov	r1, r0
        rc = proc->write_reliable.cb(proc->conn_handle,
   25d54:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25d56:	9300      	str	r3, [sp, #0]
   25d58:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   25d5c:	f104 020c 	add.w	r2, r4, #12
   25d60:	4630      	mov	r0, r6
   25d62:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   25d64:	b002      	add	sp, #8
   25d66:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   25d68:	2000      	movs	r0, #0
    return rc;
   25d6a:	e7fb      	b.n	25d64 <ble_gattc_write_reliable_cb+0x38>
   25d6c:	10002e2c 	.word	0x10002e2c

00025d70 <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   25d70:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   25d72:	2200      	movs	r2, #0
   25d74:	210d      	movs	r1, #13
   25d76:	f7ff ffd9 	bl	25d2c <ble_gattc_write_reliable_cb>
}
   25d7a:	bd08      	pop	{r3, pc}

00025d7c <ble_gattc_proc_set_resume_timer>:
{
   25d7c:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   25d7e:	7ac3      	ldrb	r3, [r0, #11]
   25d80:	f043 0301 	orr.w	r3, r3, #1
   25d84:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   25d86:	4b07      	ldr	r3, [pc, #28]	; (25da4 <ble_gattc_proc_set_resume_timer+0x28>)
   25d88:	681b      	ldr	r3, [r3, #0]
   25d8a:	b103      	cbz	r3, 25d8e <ble_gattc_proc_set_resume_timer+0x12>
}
   25d8c:	bd08      	pop	{r3, pc}
    return os_time_get();
   25d8e:	f7f0 fbf3 	bl	16578 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   25d92:	3080      	adds	r0, #128	; 0x80
   25d94:	4b03      	ldr	r3, [pc, #12]	; (25da4 <ble_gattc_proc_set_resume_timer+0x28>)
   25d96:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   25d98:	2800      	cmp	r0, #0
   25d9a:	d1f7      	bne.n	25d8c <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   25d9c:	3001      	adds	r0, #1
   25d9e:	6018      	str	r0, [r3, #0]
}
   25da0:	e7f4      	b.n	25d8c <ble_gattc_proc_set_resume_timer+0x10>
   25da2:	bf00      	nop
   25da4:	10002e28 	.word	0x10002e28

00025da8 <ble_gattc_process_resume_status>:
{
   25da8:	b508      	push	{r3, lr}
    switch (status) {
   25daa:	460b      	mov	r3, r1
   25dac:	b121      	cbz	r1, 25db8 <ble_gattc_process_resume_status+0x10>
   25dae:	2906      	cmp	r1, #6
   25db0:	d102      	bne.n	25db8 <ble_gattc_process_resume_status+0x10>
        ble_gattc_proc_set_resume_timer(proc);
   25db2:	f7ff ffe3 	bl	25d7c <ble_gattc_proc_set_resume_timer>
        return 0;
   25db6:	2300      	movs	r3, #0
}
   25db8:	4618      	mov	r0, r3
   25dba:	bd08      	pop	{r3, pc}

00025dbc <ble_gattc_proc_set_exp_timer>:
{
   25dbc:	b510      	push	{r4, lr}
   25dbe:	4604      	mov	r4, r0
   25dc0:	f7f0 fbda 	bl	16578 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   25dc4:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   25dc8:	6060      	str	r0, [r4, #4]
}
   25dca:	bd10      	pop	{r4, pc}

00025dcc <ble_gattc_ticks_until_resume>:
{
   25dcc:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   25dce:	4b08      	ldr	r3, [pc, #32]	; (25df0 <ble_gattc_ticks_until_resume+0x24>)
   25dd0:	681b      	ldr	r3, [r3, #0]
   25dd2:	b13b      	cbz	r3, 25de4 <ble_gattc_ticks_until_resume+0x18>
   25dd4:	f7f0 fbd0 	bl	16578 <os_time_get>
    diff = ble_gattc_resume_at - now;
   25dd8:	4b05      	ldr	r3, [pc, #20]	; (25df0 <ble_gattc_ticks_until_resume+0x24>)
   25dda:	681b      	ldr	r3, [r3, #0]
   25ddc:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   25dde:	2800      	cmp	r0, #0
   25de0:	dd03      	ble.n	25dea <ble_gattc_ticks_until_resume+0x1e>
}
   25de2:	bd08      	pop	{r3, pc}
        return BLE_HS_FOREVER;
   25de4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   25de8:	e7fb      	b.n	25de2 <ble_gattc_ticks_until_resume+0x16>
        return 0;
   25dea:	2000      	movs	r0, #0
   25dec:	e7f9      	b.n	25de2 <ble_gattc_ticks_until_resume+0x16>
   25dee:	bf00      	nop
   25df0:	10002e28 	.word	0x10002e28

00025df4 <ble_gattc_extract>:
{
   25df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25df8:	4681      	mov	r9, r0
   25dfa:	4688      	mov	r8, r1
   25dfc:	4692      	mov	sl, r2
   25dfe:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   25e00:	2500      	movs	r5, #0
   25e02:	601d      	str	r5, [r3, #0]
   25e04:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   25e06:	f001 fd8b 	bl	27920 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   25e0a:	4b17      	ldr	r3, [pc, #92]	; (25e68 <ble_gattc_extract+0x74>)
   25e0c:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   25e0e:	46ab      	mov	fp, r5
    while (proc != NULL) {
   25e10:	e00b      	b.n	25e2a <ble_gattc_extract+0x36>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   25e12:	4a15      	ldr	r2, [pc, #84]	; (25e68 <ble_gattc_extract+0x74>)
   25e14:	6813      	ldr	r3, [r2, #0]
   25e16:	681b      	ldr	r3, [r3, #0]
   25e18:	6013      	str	r3, [r2, #0]
   25e1a:	b9a3      	cbnz	r3, 25e46 <ble_gattc_extract+0x52>
   25e1c:	6052      	str	r2, [r2, #4]
   25e1e:	e012      	b.n	25e46 <ble_gattc_extract+0x52>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   25e20:	4b11      	ldr	r3, [pc, #68]	; (25e68 <ble_gattc_extract+0x74>)
   25e22:	605d      	str	r5, [r3, #4]
   25e24:	e00f      	b.n	25e46 <ble_gattc_extract+0x52>
            prev = proc;
   25e26:	4625      	mov	r5, r4
   25e28:	4634      	mov	r4, r6
    while (proc != NULL) {
   25e2a:	b1c4      	cbz	r4, 25e5e <ble_gattc_extract+0x6a>
        next = STAILQ_NEXT(proc, next);
   25e2c:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   25e2e:	4641      	mov	r1, r8
   25e30:	4620      	mov	r0, r4
   25e32:	47c8      	blx	r9
   25e34:	2800      	cmp	r0, #0
   25e36:	d0f6      	beq.n	25e26 <ble_gattc_extract+0x32>
            if (prev == NULL) {
   25e38:	2d00      	cmp	r5, #0
   25e3a:	d0ea      	beq.n	25e12 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   25e3c:	682b      	ldr	r3, [r5, #0]
   25e3e:	681b      	ldr	r3, [r3, #0]
   25e40:	602b      	str	r3, [r5, #0]
   25e42:	2b00      	cmp	r3, #0
   25e44:	d0ec      	beq.n	25e20 <ble_gattc_extract+0x2c>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   25e46:	2300      	movs	r3, #0
   25e48:	6023      	str	r3, [r4, #0]
   25e4a:	687b      	ldr	r3, [r7, #4]
   25e4c:	601c      	str	r4, [r3, #0]
   25e4e:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   25e50:	f1ba 0f00 	cmp.w	sl, #0
   25e54:	dde8      	ble.n	25e28 <ble_gattc_extract+0x34>
                num_extracted++;
   25e56:	f10b 0b01 	add.w	fp, fp, #1
                if (num_extracted >= max_procs) {
   25e5a:	45da      	cmp	sl, fp
   25e5c:	dce4      	bgt.n	25e28 <ble_gattc_extract+0x34>
    ble_hs_unlock();
   25e5e:	f001 fd63 	bl	27928 <ble_hs_unlock>
}
   25e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e66:	bf00      	nop
   25e68:	10002e20 	.word	0x10002e20

00025e6c <ble_gattc_extract_expired>:
{
   25e6c:	b510      	push	{r4, lr}
   25e6e:	b082      	sub	sp, #8
   25e70:	4604      	mov	r4, r0
   25e72:	f7f0 fb81 	bl	16578 <os_time_get>
    criteria.now = ble_npl_time_get();
   25e76:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   25e78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   25e7c:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   25e7e:	2200      	movs	r2, #0
   25e80:	6022      	str	r2, [r4, #0]
   25e82:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   25e84:	4623      	mov	r3, r4
   25e86:	4669      	mov	r1, sp
   25e88:	4802      	ldr	r0, [pc, #8]	; (25e94 <ble_gattc_extract_expired+0x28>)
   25e8a:	f7ff ffb3 	bl	25df4 <ble_gattc_extract>
}
   25e8e:	9801      	ldr	r0, [sp, #4]
   25e90:	b002      	add	sp, #8
   25e92:	bd10      	pop	{r4, pc}
   25e94:	000258b1 	.word	0x000258b1

00025e98 <ble_gattc_extract_stalled>:
{
   25e98:	b508      	push	{r3, lr}
   25e9a:	4603      	mov	r3, r0
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   25e9c:	2200      	movs	r2, #0
   25e9e:	4611      	mov	r1, r2
   25ea0:	4801      	ldr	r0, [pc, #4]	; (25ea8 <ble_gattc_extract_stalled+0x10>)
   25ea2:	f7ff ffa7 	bl	25df4 <ble_gattc_extract>
}
   25ea6:	bd08      	pop	{r3, pc}
   25ea8:	000258cf 	.word	0x000258cf

00025eac <ble_gattc_extract_by_conn_op>:
{
   25eac:	b500      	push	{lr}
   25eae:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   25eb0:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   25eb4:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   25eb8:	a901      	add	r1, sp, #4
   25eba:	4803      	ldr	r0, [pc, #12]	; (25ec8 <ble_gattc_extract_by_conn_op+0x1c>)
   25ebc:	f7ff ff9a 	bl	25df4 <ble_gattc_extract>
}
   25ec0:	b003      	add	sp, #12
   25ec2:	f85d fb04 	ldr.w	pc, [sp], #4
   25ec6:	bf00      	nop
   25ec8:	0002588d 	.word	0x0002588d

00025ecc <ble_gattc_extract_first_by_conn_op>:
{
   25ecc:	b500      	push	{lr}
   25ece:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   25ed0:	466b      	mov	r3, sp
   25ed2:	2201      	movs	r2, #1
   25ed4:	f7ff ffea 	bl	25eac <ble_gattc_extract_by_conn_op>
}
   25ed8:	9800      	ldr	r0, [sp, #0]
   25eda:	b003      	add	sp, #12
   25edc:	f85d fb04 	ldr.w	pc, [sp], #4

00025ee0 <ble_gattc_proc_insert>:
{
   25ee0:	b510      	push	{r4, lr}
   25ee2:	4604      	mov	r4, r0
    ble_hs_lock();
   25ee4:	f001 fd1c 	bl	27920 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   25ee8:	2300      	movs	r3, #0
   25eea:	6023      	str	r3, [r4, #0]
   25eec:	4b03      	ldr	r3, [pc, #12]	; (25efc <ble_gattc_proc_insert+0x1c>)
   25eee:	685a      	ldr	r2, [r3, #4]
   25ef0:	6014      	str	r4, [r2, #0]
   25ef2:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   25ef4:	f001 fd18 	bl	27928 <ble_hs_unlock>
}
   25ef8:	bd10      	pop	{r4, pc}
   25efa:	bf00      	nop
   25efc:	10002e20 	.word	0x10002e20

00025f00 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   25f00:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   25f02:	2301      	movs	r3, #1
   25f04:	8982      	ldrh	r2, [r0, #12]
   25f06:	8901      	ldrh	r1, [r0, #8]
   25f08:	200d      	movs	r0, #13
   25f0a:	f7ff fb57 	bl	255bc <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   25f0e:	bd08      	pop	{r3, pc}

00025f10 <ble_gattc_write_cb>:
{
   25f10:	b570      	push	{r4, r5, r6, lr}
   25f12:	b082      	sub	sp, #8
   25f14:	4604      	mov	r4, r0
    if (status != 0 && status != BLE_HS_EDONE) {
   25f16:	4608      	mov	r0, r1
   25f18:	b129      	cbz	r1, 25f26 <ble_gattc_write_cb+0x16>
   25f1a:	290e      	cmp	r1, #14
   25f1c:	d003      	beq.n	25f26 <ble_gattc_write_cb+0x16>
        STATS_INC(ble_gattc_stats, write_fail);
   25f1e:	490c      	ldr	r1, [pc, #48]	; (25f50 <ble_gattc_write_cb+0x40>)
   25f20:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   25f22:	3301      	adds	r3, #1
   25f24:	670b      	str	r3, [r1, #112]	; 0x70
    if (proc->write.cb == NULL) {
   25f26:	6925      	ldr	r5, [r4, #16]
   25f28:	b185      	cbz	r5, 25f4c <ble_gattc_write_cb+0x3c>
        memset(&attr, 0, sizeof attr);
   25f2a:	2300      	movs	r3, #0
   25f2c:	9300      	str	r3, [sp, #0]
   25f2e:	9301      	str	r3, [sp, #4]
        attr.handle = proc->write.att_handle;
   25f30:	89a3      	ldrh	r3, [r4, #12]
   25f32:	f8ad 3000 	strh.w	r3, [sp]
        rc = proc->write.cb(proc->conn_handle,
   25f36:	8926      	ldrh	r6, [r4, #8]
                            ble_gattc_error(status, att_handle),
   25f38:	4611      	mov	r1, r2
   25f3a:	f7ff fcd7 	bl	258ec <ble_gattc_error>
   25f3e:	4601      	mov	r1, r0
        rc = proc->write.cb(proc->conn_handle,
   25f40:	6963      	ldr	r3, [r4, #20]
   25f42:	466a      	mov	r2, sp
   25f44:	4630      	mov	r0, r6
   25f46:	47a8      	blx	r5
}
   25f48:	b002      	add	sp, #8
   25f4a:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   25f4c:	2000      	movs	r0, #0
    return rc;
   25f4e:	e7fb      	b.n	25f48 <ble_gattc_write_cb+0x38>
   25f50:	10002e2c 	.word	0x10002e2c

00025f54 <ble_gattc_write_tmo>:
{
   25f54:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   25f56:	2200      	movs	r2, #0
   25f58:	210d      	movs	r1, #13
   25f5a:	f7ff ffd9 	bl	25f10 <ble_gattc_write_cb>
}
   25f5e:	bd08      	pop	{r3, pc}

00025f60 <ble_gattc_write_err>:
{
   25f60:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   25f62:	f7ff ffd5 	bl	25f10 <ble_gattc_write_cb>
}
   25f66:	bd08      	pop	{r3, pc}

00025f68 <ble_gattc_proc_free>:
    if (proc != NULL) {
   25f68:	b128      	cbz	r0, 25f76 <ble_gattc_proc_free+0xe>
{
   25f6a:	b508      	push	{r3, lr}
   25f6c:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   25f6e:	4802      	ldr	r0, [pc, #8]	; (25f78 <ble_gattc_proc_free+0x10>)
   25f70:	f7ef ff71 	bl	15e56 <os_memblock_put>
}
   25f74:	bd08      	pop	{r3, pc}
   25f76:	4770      	bx	lr
   25f78:	10002e04 	.word	0x10002e04

00025f7c <ble_gattc_fail_procs>:
{
   25f7c:	b530      	push	{r4, r5, lr}
   25f7e:	b083      	sub	sp, #12
   25f80:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   25f82:	466b      	mov	r3, sp
   25f84:	2200      	movs	r2, #0
   25f86:	f7ff ff91 	bl	25eac <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   25f8a:	e004      	b.n	25f96 <ble_gattc_fail_procs+0x1a>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   25f8c:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   25f90:	4620      	mov	r0, r4
   25f92:	f7ff ffe9 	bl	25f68 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   25f96:	9c00      	ldr	r4, [sp, #0]
   25f98:	b16c      	cbz	r4, 25fb6 <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   25f9a:	7aa0      	ldrb	r0, [r4, #10]
   25f9c:	f7ff fc64 	bl	25868 <ble_gattc_err_dispatch_get>
   25fa0:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   25fa2:	2200      	movs	r2, #0
   25fa4:	4629      	mov	r1, r5
   25fa6:	4620      	mov	r0, r4
   25fa8:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   25faa:	9b00      	ldr	r3, [sp, #0]
   25fac:	681b      	ldr	r3, [r3, #0]
   25fae:	9300      	str	r3, [sp, #0]
   25fb0:	2b00      	cmp	r3, #0
   25fb2:	d1ed      	bne.n	25f90 <ble_gattc_fail_procs+0x14>
   25fb4:	e7ea      	b.n	25f8c <ble_gattc_fail_procs+0x10>
}
   25fb6:	b003      	add	sp, #12
   25fb8:	bd30      	pop	{r4, r5, pc}

00025fba <ble_gattc_write_reliable_err>:
{
   25fba:	b510      	push	{r4, lr}
   25fbc:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   25fbe:	f7ff feb5 	bl	25d2c <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   25fc2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   25fc6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   25fca:	429a      	cmp	r2, r3
   25fcc:	d300      	bcc.n	25fd0 <ble_gattc_write_reliable_err+0x16>
}
   25fce:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   25fd0:	2100      	movs	r1, #0
   25fd2:	8920      	ldrh	r0, [r4, #8]
   25fd4:	f7fc fcde 	bl	22994 <ble_att_clt_tx_exec_write>
}
   25fd8:	e7f9      	b.n	25fce <ble_gattc_write_reliable_err+0x14>

00025fda <ble_gattc_write_long_err>:
{
   25fda:	b570      	push	{r4, r5, r6, lr}
   25fdc:	4604      	mov	r4, r0
   25fde:	460d      	mov	r5, r1
   25fe0:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   25fe2:	89c3      	ldrh	r3, [r0, #14]
   25fe4:	b11b      	cbz	r3, 25fee <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   25fe6:	6902      	ldr	r2, [r0, #16]
   25fe8:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   25fea:	4293      	cmp	r3, r2
   25fec:	d305      	bcc.n	25ffa <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   25fee:	4632      	mov	r2, r6
   25ff0:	4629      	mov	r1, r5
   25ff2:	4620      	mov	r0, r4
   25ff4:	f7ff fe78 	bl	25ce8 <ble_gattc_write_long_cb>
}
   25ff8:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   25ffa:	2100      	movs	r1, #0
   25ffc:	8900      	ldrh	r0, [r0, #8]
   25ffe:	f7fc fcc9 	bl	22994 <ble_att_clt_tx_exec_write>
   26002:	e7f4      	b.n	25fee <ble_gattc_write_long_err+0x14>

00026004 <ble_gattc_write_reliable_tx>:
{
   26004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26008:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   2600a:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   2600e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   26012:	429d      	cmp	r5, r3
   26014:	d226      	bcs.n	26064 <ble_gattc_write_reliable_tx+0x60>
    attr = proc->write_reliable.attrs + attr_idx;
   26016:	f100 070c 	add.w	r7, r0, #12
   2601a:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   2601e:	8900      	ldrh	r0, [r0, #8]
   26020:	f7fc fc0b 	bl	2283a <ble_att_mtu>
   26024:	3805      	subs	r0, #5
   26026:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   26028:	b348      	cbz	r0, 2607e <ble_gattc_write_reliable_tx+0x7a>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   2602a:	6873      	ldr	r3, [r6, #4]
   2602c:	8a1b      	ldrh	r3, [r3, #16]
   2602e:	8872      	ldrh	r2, [r6, #2]
   26030:	1a9b      	subs	r3, r3, r2
   26032:	4298      	cmp	r0, r3
   26034:	bfa8      	it	ge
   26036:	4618      	movge	r0, r3
    proc->write_reliable.length =
   26038:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   2603a:	f003 fb52 	bl	296e2 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2603e:	4680      	mov	r8, r0
   26040:	b308      	cbz	r0, 26086 <ble_gattc_write_reliable_tx+0x82>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   26042:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   26044:	8872      	ldrh	r2, [r6, #2]
   26046:	6871      	ldr	r1, [r6, #4]
   26048:	f7ef fb8c 	bl	15764 <os_mbuf_appendfrom>
    if (rc != 0) {
   2604c:	b9e8      	cbnz	r0, 2608a <ble_gattc_write_reliable_tx+0x86>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   2604e:	4643      	mov	r3, r8
   26050:	8872      	ldrh	r2, [r6, #2]
   26052:	f837 1035 	ldrh.w	r1, [r7, r5, lsl #3]
   26056:	8920      	ldrh	r0, [r4, #8]
   26058:	f7fc fc98 	bl	2298c <ble_att_clt_tx_prep_write>
   2605c:	4604      	mov	r4, r0
    om = NULL;
   2605e:	f04f 0800 	mov.w	r8, #0
done:
   26062:	e006      	b.n	26072 <ble_gattc_write_reliable_tx+0x6e>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   26064:	2101      	movs	r1, #1
   26066:	8900      	ldrh	r0, [r0, #8]
   26068:	f7fc fc94 	bl	22994 <ble_att_clt_tx_exec_write>
   2606c:	4604      	mov	r4, r0
    om = NULL;
   2606e:	f04f 0800 	mov.w	r8, #0
    os_mbuf_free_chain(om);
   26072:	4640      	mov	r0, r8
   26074:	f7ef faf8 	bl	15668 <os_mbuf_free_chain>
}
   26078:	4620      	mov	r0, r4
   2607a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   2607e:	2407      	movs	r4, #7
    om = NULL;
   26080:	f04f 0800 	mov.w	r8, #0
   26084:	e7f5      	b.n	26072 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   26086:	2406      	movs	r4, #6
   26088:	e7f3      	b.n	26072 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   2608a:	2406      	movs	r4, #6
   2608c:	e7f1      	b.n	26072 <ble_gattc_write_reliable_tx+0x6e>

0002608e <ble_gattc_write_reliable_resume>:
{
   2608e:	b538      	push	{r3, r4, r5, lr}
   26090:	4604      	mov	r4, r0
    status = ble_gattc_write_reliable_tx(proc);
   26092:	f7ff ffb7 	bl	26004 <ble_gattc_write_reliable_tx>
   26096:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   26098:	4620      	mov	r0, r4
   2609a:	f7ff fe85 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2609e:	4605      	mov	r5, r0
   260a0:	b908      	cbnz	r0, 260a6 <ble_gattc_write_reliable_resume+0x18>
}
   260a2:	4628      	mov	r0, r5
   260a4:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   260a6:	2200      	movs	r2, #0
   260a8:	4601      	mov	r1, r0
   260aa:	4620      	mov	r0, r4
   260ac:	f7ff fe3e 	bl	25d2c <ble_gattc_write_reliable_cb>
        return rc;
   260b0:	e7f7      	b.n	260a2 <ble_gattc_write_reliable_resume+0x14>

000260b2 <ble_gattc_write_long_tx>:
{
   260b2:	b538      	push	{r3, r4, r5, lr}
   260b4:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   260b6:	8900      	ldrh	r0, [r0, #8]
   260b8:	f7fc fbbf 	bl	2283a <ble_att_mtu>
   260bc:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   260be:	2a00      	cmp	r2, #0
   260c0:	dd27      	ble.n	26112 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   260c2:	6923      	ldr	r3, [r4, #16]
   260c4:	8a1b      	ldrh	r3, [r3, #16]
   260c6:	89e0      	ldrh	r0, [r4, #14]
   260c8:	1a18      	subs	r0, r3, r0
   260ca:	4290      	cmp	r0, r2
   260cc:	bfa8      	it	ge
   260ce:	4610      	movge	r0, r2
    if (write_len <= 0) {
   260d0:	2800      	cmp	r0, #0
   260d2:	dd17      	ble.n	26104 <ble_gattc_write_long_tx+0x52>
    proc->write_long.length = write_len;
   260d4:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   260d6:	f003 fb04 	bl	296e2 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   260da:	4605      	mov	r5, r0
   260dc:	b1e0      	cbz	r0, 26118 <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   260de:	8aa3      	ldrh	r3, [r4, #20]
   260e0:	89e2      	ldrh	r2, [r4, #14]
   260e2:	6921      	ldr	r1, [r4, #16]
   260e4:	f7ef fb3e 	bl	15764 <os_mbuf_appendfrom>
    if (rc != 0) {
   260e8:	b9c0      	cbnz	r0, 2611c <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   260ea:	462b      	mov	r3, r5
   260ec:	89e2      	ldrh	r2, [r4, #14]
   260ee:	89a1      	ldrh	r1, [r4, #12]
   260f0:	8920      	ldrh	r0, [r4, #8]
   260f2:	f7fc fc4b 	bl	2298c <ble_att_clt_tx_prep_write>
   260f6:	4604      	mov	r4, r0
    om = NULL;
   260f8:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   260fa:	4628      	mov	r0, r5
   260fc:	f7ef fab4 	bl	15668 <os_mbuf_free_chain>
}
   26100:	4620      	mov	r0, r4
   26102:	bd38      	pop	{r3, r4, r5, pc}
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   26104:	2101      	movs	r1, #1
   26106:	8920      	ldrh	r0, [r4, #8]
   26108:	f7fc fc44 	bl	22994 <ble_att_clt_tx_exec_write>
   2610c:	4604      	mov	r4, r0
    om = NULL;
   2610e:	2500      	movs	r5, #0
        goto done;
   26110:	e7f3      	b.n	260fa <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOTCONN;
   26112:	2407      	movs	r4, #7
    om = NULL;
   26114:	2500      	movs	r5, #0
   26116:	e7f0      	b.n	260fa <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   26118:	2406      	movs	r4, #6
   2611a:	e7ee      	b.n	260fa <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   2611c:	2406      	movs	r4, #6
   2611e:	e7ec      	b.n	260fa <ble_gattc_write_long_tx+0x48>

00026120 <ble_gattc_write_long_resume>:
{
   26120:	b538      	push	{r3, r4, r5, lr}
   26122:	4604      	mov	r4, r0
    status = ble_gattc_write_long_tx(proc);
   26124:	f7ff ffc5 	bl	260b2 <ble_gattc_write_long_tx>
   26128:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2612a:	4620      	mov	r0, r4
   2612c:	f7ff fe3c 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   26130:	4605      	mov	r5, r0
   26132:	b908      	cbnz	r0, 26138 <ble_gattc_write_long_resume+0x18>
}
   26134:	4628      	mov	r0, r5
   26136:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   26138:	2200      	movs	r2, #0
   2613a:	4601      	mov	r1, r0
   2613c:	4620      	mov	r0, r4
   2613e:	f7ff fdd3 	bl	25ce8 <ble_gattc_write_long_cb>
        return rc;
   26142:	e7f7      	b.n	26134 <ble_gattc_write_long_resume+0x14>

00026144 <ble_gattc_read_long_tx>:
{
   26144:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   26146:	89c2      	ldrh	r2, [r0, #14]
   26148:	b922      	cbnz	r2, 26154 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   2614a:	8981      	ldrh	r1, [r0, #12]
   2614c:	8900      	ldrh	r0, [r0, #8]
   2614e:	f7fc fc0d 	bl	2296c <ble_att_clt_tx_read>
}
   26152:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   26154:	8981      	ldrh	r1, [r0, #12]
   26156:	8900      	ldrh	r0, [r0, #8]
   26158:	f7fc fc0c 	bl	22974 <ble_att_clt_tx_read_blob>
        if (rc != 0) {
   2615c:	e7f9      	b.n	26152 <ble_gattc_read_long_tx+0xe>

0002615e <ble_gattc_read_long_resume>:
{
   2615e:	b538      	push	{r3, r4, r5, lr}
   26160:	4604      	mov	r4, r0
    status = ble_gattc_read_long_tx(proc);
   26162:	f7ff ffef 	bl	26144 <ble_gattc_read_long_tx>
   26166:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   26168:	4620      	mov	r0, r4
   2616a:	f7ff fe1d 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2616e:	4605      	mov	r5, r0
   26170:	b908      	cbnz	r0, 26176 <ble_gattc_read_long_resume+0x18>
}
   26172:	4628      	mov	r0, r5
   26174:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   26176:	2300      	movs	r3, #0
   26178:	461a      	mov	r2, r3
   2617a:	4601      	mov	r1, r0
   2617c:	4620      	mov	r0, r4
   2617e:	f7ff fd55 	bl	25c2c <ble_gattc_read_long_cb>
        return rc;
   26182:	e7f6      	b.n	26172 <ble_gattc_read_long_resume+0x14>

00026184 <ble_gattc_disc_all_dscs_tx>:
{
   26184:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   26186:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   26188:	3101      	adds	r1, #1
   2618a:	8a02      	ldrh	r2, [r0, #16]
   2618c:	b289      	uxth	r1, r1
   2618e:	8900      	ldrh	r0, [r0, #8]
   26190:	f7fc fbe0 	bl	22954 <ble_att_clt_tx_find_info>
}
   26194:	bd08      	pop	{r3, pc}

00026196 <ble_gattc_disc_all_dscs_resume>:
{
   26196:	b538      	push	{r3, r4, r5, lr}
   26198:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   2619a:	f7ff fff3 	bl	26184 <ble_gattc_disc_all_dscs_tx>
   2619e:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   261a0:	4620      	mov	r0, r4
   261a2:	f7ff fe01 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   261a6:	4605      	mov	r5, r0
   261a8:	b908      	cbnz	r0, 261ae <ble_gattc_disc_all_dscs_resume+0x18>
}
   261aa:	4628      	mov	r0, r5
   261ac:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   261ae:	2300      	movs	r3, #0
   261b0:	461a      	mov	r2, r3
   261b2:	4601      	mov	r1, r0
   261b4:	4620      	mov	r0, r4
   261b6:	f7ff fcb7 	bl	25b28 <ble_gattc_disc_all_dscs_cb>
        return rc;
   261ba:	e7f6      	b.n	261aa <ble_gattc_disc_all_dscs_resume+0x14>

000261bc <ble_gattc_disc_chr_uuid_tx>:
{
   261bc:	b500      	push	{lr}
   261be:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   261c0:	4b06      	ldr	r3, [pc, #24]	; (261dc <ble_gattc_disc_chr_uuid_tx+0x20>)
   261c2:	681b      	ldr	r3, [r3, #0]
   261c4:	9301      	str	r3, [sp, #4]
                                  proc->disc_chr_uuid.prev_handle + 1,
   261c6:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   261c8:	3101      	adds	r1, #1
   261ca:	ab01      	add	r3, sp, #4
   261cc:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   261ce:	b289      	uxth	r1, r1
   261d0:	8900      	ldrh	r0, [r0, #8]
   261d2:	f7fc fbc7 	bl	22964 <ble_att_clt_tx_read_type>
}
   261d6:	b003      	add	sp, #12
   261d8:	f85d fb04 	ldr.w	pc, [sp], #4
   261dc:	00033c8c 	.word	0x00033c8c

000261e0 <ble_gattc_disc_chr_uuid_resume>:
{
   261e0:	b538      	push	{r3, r4, r5, lr}
   261e2:	4604      	mov	r4, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   261e4:	f7ff ffea 	bl	261bc <ble_gattc_disc_chr_uuid_tx>
   261e8:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   261ea:	4620      	mov	r0, r4
   261ec:	f7ff fddc 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   261f0:	4605      	mov	r5, r0
   261f2:	b908      	cbnz	r0, 261f8 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   261f4:	4628      	mov	r0, r5
   261f6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   261f8:	2300      	movs	r3, #0
   261fa:	461a      	mov	r2, r3
   261fc:	4601      	mov	r1, r0
   261fe:	4620      	mov	r0, r4
   26200:	f7ff fc64 	bl	25acc <ble_gattc_disc_chr_uuid_cb>
        return rc;
   26204:	e7f6      	b.n	261f4 <ble_gattc_disc_chr_uuid_resume+0x14>
	...

00026208 <ble_gattc_disc_all_chrs_tx>:
{
   26208:	b500      	push	{lr}
   2620a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   2620c:	4b06      	ldr	r3, [pc, #24]	; (26228 <ble_gattc_disc_all_chrs_tx+0x20>)
   2620e:	681b      	ldr	r3, [r3, #0]
   26210:	9301      	str	r3, [sp, #4]
                                  proc->disc_all_chrs.prev_handle + 1,
   26212:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   26214:	3101      	adds	r1, #1
   26216:	ab01      	add	r3, sp, #4
   26218:	89c2      	ldrh	r2, [r0, #14]
   2621a:	b289      	uxth	r1, r1
   2621c:	8900      	ldrh	r0, [r0, #8]
   2621e:	f7fc fba1 	bl	22964 <ble_att_clt_tx_read_type>
}
   26222:	b003      	add	sp, #12
   26224:	f85d fb04 	ldr.w	pc, [sp], #4
   26228:	00033c8c 	.word	0x00033c8c

0002622c <ble_gattc_disc_all_chrs_resume>:
{
   2622c:	b538      	push	{r3, r4, r5, lr}
   2622e:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   26230:	f7ff ffea 	bl	26208 <ble_gattc_disc_all_chrs_tx>
   26234:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   26236:	4620      	mov	r0, r4
   26238:	f7ff fdb6 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   2623c:	4605      	mov	r5, r0
   2623e:	b908      	cbnz	r0, 26244 <ble_gattc_disc_all_chrs_resume+0x18>
}
   26240:	4628      	mov	r0, r5
   26242:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   26244:	2300      	movs	r3, #0
   26246:	461a      	mov	r2, r3
   26248:	4601      	mov	r1, r0
   2624a:	4620      	mov	r0, r4
   2624c:	f7ff fc10 	bl	25a70 <ble_gattc_disc_all_chrs_cb>
        return rc;
   26250:	e7f6      	b.n	26240 <ble_gattc_disc_all_chrs_resume+0x14>
	...

00026254 <ble_gattc_find_inc_svcs_tx>:
{
   26254:	b500      	push	{lr}
   26256:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   26258:	4b09      	ldr	r3, [pc, #36]	; (26280 <ble_gattc_find_inc_svcs_tx+0x2c>)
   2625a:	685b      	ldr	r3, [r3, #4]
   2625c:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   2625e:	8a01      	ldrh	r1, [r0, #16]
   26260:	b951      	cbnz	r1, 26278 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   26262:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   26264:	3101      	adds	r1, #1
   26266:	ab01      	add	r3, sp, #4
   26268:	89c2      	ldrh	r2, [r0, #14]
   2626a:	b289      	uxth	r1, r1
   2626c:	8900      	ldrh	r0, [r0, #8]
   2626e:	f7fc fb79 	bl	22964 <ble_att_clt_tx_read_type>
}
   26272:	b003      	add	sp, #12
   26274:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   26278:	8900      	ldrh	r0, [r0, #8]
   2627a:	f7fc fb77 	bl	2296c <ble_att_clt_tx_read>
        if (rc != 0) {
   2627e:	e7f8      	b.n	26272 <ble_gattc_find_inc_svcs_tx+0x1e>
   26280:	00033c8c 	.word	0x00033c8c

00026284 <ble_gattc_find_inc_svcs_resume>:
{
   26284:	b538      	push	{r3, r4, r5, lr}
   26286:	4604      	mov	r4, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   26288:	f7ff ffe4 	bl	26254 <ble_gattc_find_inc_svcs_tx>
   2628c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2628e:	4620      	mov	r0, r4
   26290:	f7ff fd8a 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   26294:	4605      	mov	r5, r0
   26296:	b908      	cbnz	r0, 2629c <ble_gattc_find_inc_svcs_resume+0x18>
}
   26298:	4628      	mov	r0, r5
   2629a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   2629c:	2300      	movs	r3, #0
   2629e:	461a      	mov	r2, r3
   262a0:	4601      	mov	r1, r0
   262a2:	4620      	mov	r0, r4
   262a4:	f7ff fbb4 	bl	25a10 <ble_gattc_find_inc_svcs_cb>
        return rc;
   262a8:	e7f6      	b.n	26298 <ble_gattc_find_inc_svcs_resume+0x14>

000262aa <ble_gattc_disc_svc_uuid_tx>:
{
   262aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   262ac:	b087      	sub	sp, #28
   262ae:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   262b0:	f100 060c 	add.w	r6, r0, #12
   262b4:	ad02      	add	r5, sp, #8
   262b6:	4629      	mov	r1, r5
   262b8:	4630      	mov	r0, r6
   262ba:	f006 fa55 	bl	2c768 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   262be:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   262c0:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   262c2:	4630      	mov	r0, r6
   262c4:	f006 fa7c 	bl	2c7c0 <ble_uuid_length>
   262c8:	1c61      	adds	r1, r4, #1
   262ca:	9001      	str	r0, [sp, #4]
   262cc:	9500      	str	r5, [sp, #0]
   262ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   262d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   262d6:	b289      	uxth	r1, r1
   262d8:	4638      	mov	r0, r7
   262da:	f7fc fb3f 	bl	2295c <ble_att_clt_tx_find_type_value>
}
   262de:	b007      	add	sp, #28
   262e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000262e2 <ble_gattc_disc_svc_uuid_resume>:
{
   262e2:	b538      	push	{r3, r4, r5, lr}
   262e4:	4604      	mov	r4, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   262e6:	f7ff ffe0 	bl	262aa <ble_gattc_disc_svc_uuid_tx>
   262ea:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   262ec:	4620      	mov	r0, r4
   262ee:	f7ff fd5b 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   262f2:	4605      	mov	r5, r0
   262f4:	b908      	cbnz	r0, 262fa <ble_gattc_disc_svc_uuid_resume+0x18>
}
   262f6:	4628      	mov	r0, r5
   262f8:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   262fa:	2300      	movs	r3, #0
   262fc:	461a      	mov	r2, r3
   262fe:	4601      	mov	r1, r0
   26300:	4620      	mov	r0, r4
   26302:	f7ff fb57 	bl	259b4 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   26306:	e7f6      	b.n	262f6 <ble_gattc_disc_svc_uuid_resume+0x14>

00026308 <ble_gattc_disc_all_svcs_tx>:
{
   26308:	b500      	push	{lr}
   2630a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   2630c:	4b07      	ldr	r3, [pc, #28]	; (2632c <ble_gattc_disc_all_svcs_tx+0x24>)
   2630e:	689b      	ldr	r3, [r3, #8]
   26310:	9301      	str	r3, [sp, #4]
                                        proc->disc_all_svcs.prev_handle + 1,
   26312:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   26314:	3101      	adds	r1, #1
   26316:	ab01      	add	r3, sp, #4
   26318:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2631c:	b289      	uxth	r1, r1
   2631e:	8900      	ldrh	r0, [r0, #8]
   26320:	f7fc fb2e 	bl	22980 <ble_att_clt_tx_read_group_type>
}
   26324:	b003      	add	sp, #12
   26326:	f85d fb04 	ldr.w	pc, [sp], #4
   2632a:	bf00      	nop
   2632c:	00033c8c 	.word	0x00033c8c

00026330 <ble_gattc_disc_all_svcs_resume>:
{
   26330:	b538      	push	{r3, r4, r5, lr}
   26332:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   26334:	f7ff ffe8 	bl	26308 <ble_gattc_disc_all_svcs_tx>
   26338:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2633a:	4620      	mov	r0, r4
   2633c:	f7ff fd34 	bl	25da8 <ble_gattc_process_resume_status>
    if (rc != 0) {
   26340:	4605      	mov	r5, r0
   26342:	b908      	cbnz	r0, 26348 <ble_gattc_disc_all_svcs_resume+0x18>
}
   26344:	4628      	mov	r0, r5
   26346:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   26348:	2300      	movs	r3, #0
   2634a:	461a      	mov	r2, r3
   2634c:	b281      	uxth	r1, r0
   2634e:	4620      	mov	r0, r4
   26350:	f7ff fb02 	bl	25958 <ble_gattc_disc_all_svcs_cb>
        return rc;
   26354:	e7f6      	b.n	26344 <ble_gattc_disc_all_svcs_resume+0x14>

00026356 <ble_gattc_process_status>:
{
   26356:	b510      	push	{r4, lr}
   26358:	4604      	mov	r4, r0
    switch (status) {
   2635a:	b961      	cbnz	r1, 26376 <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   2635c:	7ac3      	ldrb	r3, [r0, #11]
   2635e:	f013 0f01 	tst.w	r3, #1
   26362:	d005      	beq.n	26370 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   26364:	4620      	mov	r0, r4
   26366:	f7ff fdbb 	bl	25ee0 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   2636a:	f001 fbcb 	bl	27b04 <ble_hs_timer_resched>
}
   2636e:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   26370:	f7ff fd24 	bl	25dbc <ble_gattc_proc_set_exp_timer>
   26374:	e7f6      	b.n	26364 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   26376:	f7ff fdf7 	bl	25f68 <ble_gattc_proc_free>
}
   2637a:	e7f8      	b.n	2636e <ble_gattc_process_status+0x18>

0002637c <ble_gattc_resume_procs>:
{
   2637c:	b510      	push	{r4, lr}
   2637e:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   26380:	4b0c      	ldr	r3, [pc, #48]	; (263b4 <ble_gattc_resume_procs+0x38>)
   26382:	2200      	movs	r2, #0
   26384:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   26386:	4668      	mov	r0, sp
   26388:	f7ff fd86 	bl	25e98 <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   2638c:	9c00      	ldr	r4, [sp, #0]
   2638e:	b17c      	cbz	r4, 263b0 <ble_gattc_resume_procs+0x34>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   26390:	7aa0      	ldrb	r0, [r4, #10]
   26392:	f7ff fa6f 	bl	25874 <ble_gattc_resume_dispatch_get>
   26396:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   26398:	7ae3      	ldrb	r3, [r4, #11]
   2639a:	f023 0301 	bic.w	r3, r3, #1
   2639e:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   263a0:	4620      	mov	r0, r4
   263a2:	4790      	blx	r2
   263a4:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   263a6:	4620      	mov	r0, r4
   263a8:	f7ff ffd5 	bl	26356 <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   263ac:	6824      	ldr	r4, [r4, #0]
   263ae:	e7ee      	b.n	2638e <ble_gattc_resume_procs+0x12>
}
   263b0:	b002      	add	sp, #8
   263b2:	bd10      	pop	{r4, pc}
   263b4:	10002e28 	.word	0x10002e28

000263b8 <ble_gattc_proc_alloc>:
{
   263b8:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   263ba:	4805      	ldr	r0, [pc, #20]	; (263d0 <ble_gattc_proc_alloc+0x18>)
   263bc:	f7ef fd23 	bl	15e06 <os_memblock_get>
    if (proc != NULL) {
   263c0:	4604      	mov	r4, r0
   263c2:	b118      	cbz	r0, 263cc <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   263c4:	2238      	movs	r2, #56	; 0x38
   263c6:	2100      	movs	r1, #0
   263c8:	f7f0 fb95 	bl	16af6 <memset>
}
   263cc:	4620      	mov	r0, r4
   263ce:	bd10      	pop	{r4, pc}
   263d0:	10002e04 	.word	0x10002e04

000263d4 <ble_gattc_log_proc_init>:
{
   263d4:	b508      	push	{r3, lr}
   263d6:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   263d8:	4a02      	ldr	r2, [pc, #8]	; (263e4 <ble_gattc_log_proc_init+0x10>)
   263da:	2101      	movs	r1, #1
   263dc:	2004      	movs	r0, #4
   263de:	f7f3 f9a7 	bl	19730 <modlog_printf>
}
   263e2:	bd08      	pop	{r3, pc}
   263e4:	00034b40 	.word	0x00034b40

000263e8 <ble_gattc_log_notify>:
{
   263e8:	b510      	push	{r4, lr}
   263ea:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   263ec:	4804      	ldr	r0, [pc, #16]	; (26400 <ble_gattc_log_notify+0x18>)
   263ee:	f7ff fff1 	bl	263d4 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   263f2:	4623      	mov	r3, r4
   263f4:	4a03      	ldr	r2, [pc, #12]	; (26404 <ble_gattc_log_notify+0x1c>)
   263f6:	2101      	movs	r1, #1
   263f8:	2004      	movs	r0, #4
   263fa:	f7f3 f999 	bl	19730 <modlog_printf>
}
   263fe:	bd10      	pop	{r4, pc}
   26400:	00034b60 	.word	0x00034b60
   26404:	00034b6c 	.word	0x00034b6c

00026408 <ble_gattc_log_indicate>:
{
   26408:	b510      	push	{r4, lr}
   2640a:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   2640c:	4804      	ldr	r0, [pc, #16]	; (26420 <ble_gattc_log_indicate+0x18>)
   2640e:	f7ff ffe1 	bl	263d4 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   26412:	4623      	mov	r3, r4
   26414:	4a03      	ldr	r2, [pc, #12]	; (26424 <ble_gattc_log_indicate+0x1c>)
   26416:	2101      	movs	r1, #1
   26418:	2004      	movs	r0, #4
   2641a:	f7f3 f989 	bl	19730 <modlog_printf>
}
   2641e:	bd10      	pop	{r4, pc}
   26420:	00034b7c 	.word	0x00034b7c
   26424:	00034b6c 	.word	0x00034b6c

00026428 <ble_gattc_indicate_err>:
{
   26428:	b538      	push	{r3, r4, r5, lr}
   2642a:	4604      	mov	r4, r0
   2642c:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   2642e:	2907      	cmp	r1, #7
   26430:	d004      	beq.n	2643c <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   26432:	8981      	ldrh	r1, [r0, #12]
   26434:	8900      	ldrh	r0, [r0, #8]
   26436:	f001 f849 	bl	274cc <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   2643a:	b940      	cbnz	r0, 2644e <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   2643c:	2301      	movs	r3, #1
   2643e:	89a2      	ldrh	r2, [r4, #12]
   26440:	8921      	ldrh	r1, [r4, #8]
   26442:	4628      	mov	r0, r5
   26444:	f7ff f8ba 	bl	255bc <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   26448:	8920      	ldrh	r0, [r4, #8]
   2644a:	f001 f813 	bl	27474 <ble_gatts_send_next_indicate>
}
   2644e:	bd38      	pop	{r3, r4, r5, pc}

00026450 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   26450:	b510      	push	{r4, lr}
   26452:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   26454:	8981      	ldrh	r1, [r0, #12]
   26456:	8900      	ldrh	r0, [r0, #8]
   26458:	f001 f838 	bl	274cc <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   2645c:	b100      	cbz	r0, 26460 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   2645e:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   26460:	2301      	movs	r3, #1
   26462:	89a2      	ldrh	r2, [r4, #12]
   26464:	8921      	ldrh	r1, [r4, #8]
   26466:	200e      	movs	r0, #14
   26468:	f7ff f8a8 	bl	255bc <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   2646c:	8920      	ldrh	r0, [r4, #8]
   2646e:	f001 f801 	bl	27474 <ble_gatts_send_next_indicate>
   26472:	e7f4      	b.n	2645e <ble_gattc_indicate_rx_rsp+0xe>

00026474 <ble_gattc_timer>:
{
   26474:	b530      	push	{r4, r5, lr}
   26476:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   26478:	4668      	mov	r0, sp
   2647a:	f7ff fcf7 	bl	25e6c <ble_gattc_extract_expired>
   2647e:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   26480:	e004      	b.n	2648c <ble_gattc_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   26482:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   26486:	4620      	mov	r0, r4
   26488:	f7ff fd6e 	bl	25f68 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   2648c:	9c00      	ldr	r4, [sp, #0]
   2648e:	b194      	cbz	r4, 264b6 <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   26490:	4a11      	ldr	r2, [pc, #68]	; (264d8 <ble_gattc_timer+0x64>)
   26492:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   26496:	3301      	adds	r3, #1
   26498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   2649c:	4620      	mov	r0, r4
   2649e:	f7ff fa1a 	bl	258d6 <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   264a2:	2113      	movs	r1, #19
   264a4:	8920      	ldrh	r0, [r4, #8]
   264a6:	f7fe fd49 	bl	24f3c <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   264aa:	9b00      	ldr	r3, [sp, #0]
   264ac:	681b      	ldr	r3, [r3, #0]
   264ae:	9300      	str	r3, [sp, #0]
   264b0:	2b00      	cmp	r3, #0
   264b2:	d1e8      	bne.n	26486 <ble_gattc_timer+0x12>
   264b4:	e7e5      	b.n	26482 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   264b6:	f7ff fc89 	bl	25dcc <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   264ba:	4603      	mov	r3, r0
   264bc:	b128      	cbz	r0, 264ca <ble_gattc_timer+0x56>
}
   264be:	42ab      	cmp	r3, r5
   264c0:	bfa8      	it	ge
   264c2:	462b      	movge	r3, r5
   264c4:	4618      	mov	r0, r3
   264c6:	b003      	add	sp, #12
   264c8:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   264ca:	f7ff ff57 	bl	2637c <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   264ce:	f7ff fc7d 	bl	25dcc <ble_gattc_ticks_until_resume>
   264d2:	4603      	mov	r3, r0
   264d4:	e7f3      	b.n	264be <ble_gattc_timer+0x4a>
   264d6:	bf00      	nop
   264d8:	10002e2c 	.word	0x10002e2c

000264dc <ble_gattc_notify_custom>:
{
   264dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   264de:	b083      	sub	sp, #12
   264e0:	4606      	mov	r6, r0
   264e2:	460d      	mov	r5, r1
   264e4:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   264e6:	4a1c      	ldr	r2, [pc, #112]	; (26558 <ble_gattc_notify_custom+0x7c>)
   264e8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   264ec:	3301      	adds	r3, #1
   264ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   264f2:	4608      	mov	r0, r1
   264f4:	f7ff ff78 	bl	263e8 <ble_gattc_log_notify>
    if (txom == NULL) {
   264f8:	b1cc      	cbz	r4, 2652e <ble_gattc_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   264fa:	4622      	mov	r2, r4
   264fc:	4629      	mov	r1, r5
   264fe:	4630      	mov	r0, r6
   26500:	f7fc fa4c 	bl	2299c <ble_att_clt_tx_notify>
    if (rc != 0) {
   26504:	4607      	mov	r7, r0
   26506:	b320      	cbz	r0, 26552 <ble_gattc_notify_custom+0x76>
   26508:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   2650a:	4a13      	ldr	r2, [pc, #76]	; (26558 <ble_gattc_notify_custom+0x7c>)
   2650c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   26510:	3301      	adds	r3, #1
   26512:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   26516:	2300      	movs	r3, #0
   26518:	462a      	mov	r2, r5
   2651a:	4631      	mov	r1, r6
   2651c:	4638      	mov	r0, r7
   2651e:	f7ff f84d 	bl	255bc <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   26522:	4620      	mov	r0, r4
   26524:	f7ef f8a0 	bl	15668 <os_mbuf_free_chain>
}
   26528:	4638      	mov	r0, r7
   2652a:	b003      	add	sp, #12
   2652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   2652e:	f003 f8d8 	bl	296e2 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   26532:	4604      	mov	r4, r0
   26534:	b158      	cbz	r0, 2654e <ble_gattc_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   26536:	2200      	movs	r2, #0
   26538:	9200      	str	r2, [sp, #0]
   2653a:	4603      	mov	r3, r0
   2653c:	4629      	mov	r1, r5
   2653e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   26542:	f7fd f933 	bl	237ac <ble_att_svr_read_handle>
        if (rc != 0) {
   26546:	2800      	cmp	r0, #0
   26548:	d0d7      	beq.n	264fa <ble_gattc_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   2654a:	2709      	movs	r7, #9
   2654c:	e7dd      	b.n	2650a <ble_gattc_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   2654e:	2706      	movs	r7, #6
   26550:	e7db      	b.n	2650a <ble_gattc_notify_custom+0x2e>
   26552:	2400      	movs	r4, #0
   26554:	e7df      	b.n	26516 <ble_gattc_notify_custom+0x3a>
   26556:	bf00      	nop
   26558:	10002e2c 	.word	0x10002e2c

0002655c <ble_gattc_notify>:
{
   2655c:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   2655e:	2200      	movs	r2, #0
   26560:	f7ff ffbc 	bl	264dc <ble_gattc_notify_custom>
}
   26564:	bd08      	pop	{r3, pc}

00026566 <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   26566:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   26568:	2207      	movs	r2, #7
   2656a:	210e      	movs	r1, #14
   2656c:	f7ff fd06 	bl	25f7c <ble_gattc_fail_procs>
}
   26570:	bd08      	pop	{r3, pc}
	...

00026574 <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   26574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26578:	b082      	sub	sp, #8
   2657a:	4606      	mov	r6, r0
   2657c:	460c      	mov	r4, r1
   2657e:	4615      	mov	r5, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   26580:	4a29      	ldr	r2, [pc, #164]	; (26628 <ble_gattc_indicate_custom+0xb4>)
   26582:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   26586:	3301      	adds	r3, #1
   26588:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   2658c:	f7ff ff14 	bl	263b8 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   26590:	4680      	mov	r8, r0
   26592:	b360      	cbz	r0, 265ee <ble_gattc_indicate_custom+0x7a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   26594:	230e      	movs	r3, #14
   26596:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   26598:	8106      	strh	r6, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   2659a:	8184      	strh	r4, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   2659c:	4620      	mov	r0, r4
   2659e:	f7ff ff33 	bl	26408 <ble_gattc_log_indicate>

    if (txom == NULL) {
   265a2:	b14d      	cbz	r5, 265b8 <ble_gattc_indicate_custom+0x44>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   265a4:	462a      	mov	r2, r5
   265a6:	4621      	mov	r1, r4
   265a8:	4630      	mov	r0, r6
   265aa:	f7fc fa17 	bl	229dc <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   265ae:	4607      	mov	r7, r0
   265b0:	b190      	cbz	r0, 265d8 <ble_gattc_indicate_custom+0x64>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   265b2:	b3b7      	cbz	r7, 26622 <ble_gattc_indicate_custom+0xae>
   265b4:	2500      	movs	r5, #0
   265b6:	e01b      	b.n	265f0 <ble_gattc_indicate_custom+0x7c>
        txom = ble_hs_mbuf_att_pkt();
   265b8:	f003 f893 	bl	296e2 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   265bc:	4605      	mov	r5, r0
   265be:	b370      	cbz	r0, 2661e <ble_gattc_indicate_custom+0xaa>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   265c0:	2200      	movs	r2, #0
   265c2:	9200      	str	r2, [sp, #0]
   265c4:	4603      	mov	r3, r0
   265c6:	4621      	mov	r1, r4
   265c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   265cc:	f7fd f8ee 	bl	237ac <ble_att_svr_read_handle>
        if (rc != 0) {
   265d0:	2800      	cmp	r0, #0
   265d2:	d0e7      	beq.n	265a4 <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_EAPP;
   265d4:	2709      	movs	r7, #9
   265d6:	e00b      	b.n	265f0 <ble_gattc_indicate_custom+0x7c>
    ble_hs_lock();
   265d8:	f001 f9a2 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   265dc:	4630      	mov	r0, r6
   265de:	f001 fffb 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   265e2:	b108      	cbz	r0, 265e8 <ble_gattc_indicate_custom+0x74>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   265e4:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
    ble_hs_unlock();
   265e8:	f001 f99e 	bl	27928 <ble_hs_unlock>
   265ec:	e7e1      	b.n	265b2 <ble_gattc_indicate_custom+0x3e>
        rc = BLE_HS_ENOMEM;
   265ee:	2706      	movs	r7, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   265f0:	4a0d      	ldr	r2, [pc, #52]	; (26628 <ble_gattc_indicate_custom+0xb4>)
   265f2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   265f6:	3301      	adds	r3, #1
   265f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   265fc:	2301      	movs	r3, #1
   265fe:	4622      	mov	r2, r4
   26600:	4631      	mov	r1, r6
   26602:	4638      	mov	r0, r7
   26604:	f7fe ffda 	bl	255bc <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   26608:	4639      	mov	r1, r7
   2660a:	4640      	mov	r0, r8
   2660c:	f7ff fea3 	bl	26356 <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   26610:	4628      	mov	r0, r5
   26612:	f7ef f829 	bl	15668 <os_mbuf_free_chain>
    return rc;
}
   26616:	4638      	mov	r0, r7
   26618:	b002      	add	sp, #8
   2661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   2661e:	2706      	movs	r7, #6
   26620:	e7e6      	b.n	265f0 <ble_gattc_indicate_custom+0x7c>
   26622:	2500      	movs	r5, #0
   26624:	e7ea      	b.n	265fc <ble_gattc_indicate_custom+0x88>
   26626:	bf00      	nop
   26628:	10002e2c 	.word	0x10002e2c

0002662c <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   2662c:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   2662e:	2200      	movs	r2, #0
   26630:	f7ff ffa0 	bl	26574 <ble_gattc_indicate_custom>
}
   26634:	bd08      	pop	{r3, pc}

00026636 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   26636:	b570      	push	{r4, r5, r6, lr}
   26638:	460d      	mov	r5, r1
   2663a:	4614      	mov	r4, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   2663c:	21ff      	movs	r1, #255	; 0xff
   2663e:	f7ff fc45 	bl	25ecc <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   26642:	b168      	cbz	r0, 26660 <ble_gattc_rx_err+0x2a>
   26644:	4606      	mov	r6, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   26646:	7a80      	ldrb	r0, [r0, #10]
   26648:	f7ff f90e 	bl	25868 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   2664c:	4603      	mov	r3, r0
   2664e:	b120      	cbz	r0, 2665a <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   26650:	462a      	mov	r2, r5
   26652:	f504 7180 	add.w	r1, r4, #256	; 0x100
   26656:	4630      	mov	r0, r6
   26658:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   2665a:	4630      	mov	r0, r6
   2665c:	f7ff fc84 	bl	25f68 <ble_gattc_proc_free>
    }
}
   26660:	bd70      	pop	{r4, r5, r6, pc}

00026662 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   26662:	b570      	push	{r4, r5, r6, lr}
   26664:	460c      	mov	r4, r1
   26666:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   26668:	2100      	movs	r1, #0
   2666a:	f7ff fc2f 	bl	25ecc <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   2666e:	b148      	cbz	r0, 26684 <ble_gattc_rx_mtu+0x22>
   26670:	4606      	mov	r6, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   26672:	462b      	mov	r3, r5
   26674:	2200      	movs	r2, #0
   26676:	4621      	mov	r1, r4
   26678:	f7ff f946 	bl	25908 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   2667c:	210e      	movs	r1, #14
   2667e:	4630      	mov	r0, r6
   26680:	f7ff fe69 	bl	26356 <ble_gattc_process_status>
    }
}
   26684:	bd70      	pop	{r4, r5, r6, pc}

00026686 <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   26686:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   26688:	210e      	movs	r1, #14
   2668a:	f7ff fc1f 	bl	25ecc <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   2668e:	b130      	cbz	r0, 2669e <ble_gattc_rx_indicate_rsp+0x18>
   26690:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   26692:	f7ff fedd 	bl	26450 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   26696:	210e      	movs	r1, #14
   26698:	4620      	mov	r0, r4
   2669a:	f7ff fe5c 	bl	26356 <ble_gattc_process_status>
    }
}
   2669e:	bd10      	pop	{r4, pc}

000266a0 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   266a0:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   266a2:	2207      	movs	r2, #7
   266a4:	21ff      	movs	r1, #255	; 0xff
   266a6:	f7ff fc69 	bl	25f7c <ble_gattc_fail_procs>
}
   266aa:	bd08      	pop	{r3, pc}

000266ac <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   266ac:	b500      	push	{lr}
   266ae:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   266b0:	4b0e      	ldr	r3, [pc, #56]	; (266ec <ble_gattc_init+0x40>)
   266b2:	2200      	movs	r2, #0
   266b4:	601a      	str	r2, [r3, #0]
   266b6:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   266b8:	4b0d      	ldr	r3, [pc, #52]	; (266f0 <ble_gattc_init+0x44>)
   266ba:	9300      	str	r3, [sp, #0]
   266bc:	4b0d      	ldr	r3, [pc, #52]	; (266f4 <ble_gattc_init+0x48>)
   266be:	2238      	movs	r2, #56	; 0x38
   266c0:	2104      	movs	r1, #4
   266c2:	480d      	ldr	r0, [pc, #52]	; (266f8 <ble_gattc_init+0x4c>)
   266c4:	f7ef fb76 	bl	15db4 <os_mempool_init>
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   266c8:	b110      	cbz	r0, 266d0 <ble_gattc_init+0x24>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   266ca:	b003      	add	sp, #12
   266cc:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   266d0:	4b0a      	ldr	r3, [pc, #40]	; (266fc <ble_gattc_init+0x50>)
   266d2:	9301      	str	r3, [sp, #4]
   266d4:	2300      	movs	r3, #0
   266d6:	9300      	str	r3, [sp, #0]
   266d8:	2223      	movs	r2, #35	; 0x23
   266da:	2104      	movs	r1, #4
   266dc:	4808      	ldr	r0, [pc, #32]	; (26700 <ble_gattc_init+0x54>)
   266de:	f7f3 fda1 	bl	1a224 <stats_init_and_reg>
    if (rc != 0) {
   266e2:	2800      	cmp	r0, #0
   266e4:	d0f1      	beq.n	266ca <ble_gattc_init+0x1e>
        return BLE_HS_EOS;
   266e6:	200b      	movs	r0, #11
   266e8:	e7ef      	b.n	266ca <ble_gattc_init+0x1e>
   266ea:	bf00      	nop
   266ec:	10002e20 	.word	0x10002e20
   266f0:	00034b88 	.word	0x00034b88
   266f4:	10002d24 	.word	0x10002d24
   266f8:	10002e04 	.word	0x10002e04
   266fc:	00034b9c 	.word	0x00034b9c
   26700:	10002e2c 	.word	0x10002e2c

00026704 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   26704:	8a03      	ldrh	r3, [r0, #16]
   26706:	f013 0010 	ands.w	r0, r3, #16
   2670a:	d000      	beq.n	2670e <ble_gatts_chr_clt_cfg_allowed+0xa>
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   2670c:	2001      	movs	r0, #1
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   2670e:	f013 0f20 	tst.w	r3, #32
   26712:	d001      	beq.n	26718 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   26714:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   26718:	4770      	bx	lr

0002671a <ble_gatts_att_flags_from_chr_flags>:

static uint8_t
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
   2671a:	4603      	mov	r3, r0
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   2671c:	f010 0f02 	tst.w	r0, #2
   26720:	d124      	bne.n	2676c <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   26722:	2000      	movs	r0, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   26724:	f013 0f0c 	tst.w	r3, #12
   26728:	d001      	beq.n	2672e <ble_gatts_att_flags_from_chr_flags+0x14>
        att_flags |= BLE_ATT_F_WRITE;
   2672a:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   2672e:	f413 7f00 	tst.w	r3, #512	; 0x200
   26732:	d001      	beq.n	26738 <ble_gatts_att_flags_from_chr_flags+0x1e>
        att_flags |= BLE_ATT_F_READ_ENC;
   26734:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   26738:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2673c:	d001      	beq.n	26742 <ble_gatts_att_flags_from_chr_flags+0x28>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   2673e:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   26742:	f413 6f00 	tst.w	r3, #2048	; 0x800
   26746:	d001      	beq.n	2674c <ble_gatts_att_flags_from_chr_flags+0x32>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   26748:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   2674c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   26750:	d001      	beq.n	26756 <ble_gatts_att_flags_from_chr_flags+0x3c>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   26752:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   26756:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2675a:	d001      	beq.n	26760 <ble_gatts_att_flags_from_chr_flags+0x46>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   2675c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   26760:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   26764:	d001      	beq.n	2676a <ble_gatts_att_flags_from_chr_flags+0x50>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   26766:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return att_flags;
}
   2676a:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   2676c:	2001      	movs	r0, #1
   2676e:	e7d9      	b.n	26724 <ble_gatts_att_flags_from_chr_flags+0xa>

00026770 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   26770:	8a03      	ldrh	r3, [r0, #16]
   26772:	f013 0f01 	tst.w	r3, #1
   26776:	d124      	bne.n	267c2 <ble_gatts_chr_properties+0x52>
    properties = 0;
   26778:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   2677a:	f013 0f02 	tst.w	r3, #2
   2677e:	d001      	beq.n	26784 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   26780:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   26784:	f013 0f04 	tst.w	r3, #4
   26788:	d001      	beq.n	2678e <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   2678a:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   2678e:	f013 0f08 	tst.w	r3, #8
   26792:	d001      	beq.n	26798 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   26794:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   26798:	f013 0f10 	tst.w	r3, #16
   2679c:	d001      	beq.n	267a2 <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   2679e:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   267a2:	f013 0f20 	tst.w	r3, #32
   267a6:	d001      	beq.n	267ac <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   267a8:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   267ac:	f013 0f40 	tst.w	r3, #64	; 0x40
   267b0:	d001      	beq.n	267b6 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   267b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   267b6:	f413 7fc0 	tst.w	r3, #384	; 0x180
   267ba:	d001      	beq.n	267c0 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   267bc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   267c0:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   267c2:	2001      	movs	r0, #1
   267c4:	e7d9      	b.n	2677a <ble_gatts_chr_properties+0xa>

000267c6 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   267c6:	6803      	ldr	r3, [r0, #0]
   267c8:	b11b      	cbz	r3, 267d2 <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    if (chr->access_cb == NULL) {
   267ca:	6843      	ldr	r3, [r0, #4]
   267cc:	b11b      	cbz	r3, 267d6 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   267ce:	2001      	movs	r0, #1
   267d0:	4770      	bx	lr
        return 0;
   267d2:	2000      	movs	r0, #0
   267d4:	4770      	bx	lr
        return 0;
   267d6:	2000      	movs	r0, #0
}
   267d8:	4770      	bx	lr

000267da <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   267da:	2802      	cmp	r0, #2
   267dc:	d001      	beq.n	267e2 <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   267de:	2000      	movs	r0, #0
   267e0:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   267e2:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   267e4:	4770      	bx	lr
	...

000267e8 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   267e8:	b110      	cbz	r0, 267f0 <ble_gatts_chr_inc_val_stat+0x8>
   267ea:	2801      	cmp	r0, #1
   267ec:	d005      	beq.n	267fa <ble_gatts_chr_inc_val_stat+0x12>
   267ee:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   267f0:	4a04      	ldr	r2, [pc, #16]	; (26804 <ble_gatts_chr_inc_val_stat+0x1c>)
   267f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
   267f4:	3301      	adds	r3, #1
   267f6:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   267f8:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   267fa:	4a02      	ldr	r2, [pc, #8]	; (26804 <ble_gatts_chr_inc_val_stat+0x1c>)
   267fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   267fe:	3301      	adds	r3, #1
   26800:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   26802:	4770      	bx	lr
   26804:	10002ef8 	.word	0x10002ef8

00026808 <ble_gatts_find_svc_entry_idx>:
    return rc;
}

static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
   26808:	4602      	mov	r2, r0
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2680a:	2000      	movs	r0, #0
   2680c:	4b07      	ldr	r3, [pc, #28]	; (2682c <ble_gatts_find_svc_entry_idx+0x24>)
   2680e:	881b      	ldrh	r3, [r3, #0]
   26810:	4283      	cmp	r3, r0
   26812:	dd07      	ble.n	26824 <ble_gatts_find_svc_entry_idx+0x1c>
        if (ble_gatts_svc_entries[i].svc == svc) {
   26814:	4b06      	ldr	r3, [pc, #24]	; (26830 <ble_gatts_find_svc_entry_idx+0x28>)
   26816:	681b      	ldr	r3, [r3, #0]
   26818:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   2681c:	4293      	cmp	r3, r2
   2681e:	d003      	beq.n	26828 <ble_gatts_find_svc_entry_idx+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   26820:	3001      	adds	r0, #1
   26822:	e7f3      	b.n	2680c <ble_gatts_find_svc_entry_idx+0x4>
            return i;
        }
    }

    return -1;
   26824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26828:	4770      	bx	lr
   2682a:	bf00      	nop
   2682c:	10002ef4 	.word	0x10002ef4
   26830:	10002f30 	.word	0x10002f30

00026834 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   26834:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   26836:	6885      	ldr	r5, [r0, #8]
   26838:	b1ad      	cbz	r5, 26866 <ble_gatts_svc_incs_satisfied+0x32>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   2683a:	2400      	movs	r4, #0
   2683c:	e000      	b.n	26840 <ble_gatts_svc_incs_satisfied+0xc>
   2683e:	3401      	adds	r4, #1
   26840:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   26844:	b168      	cbz	r0, 26862 <ble_gatts_svc_incs_satisfied+0x2e>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   26846:	f7ff ffdf 	bl	26808 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   2684a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2684e:	d00c      	beq.n	2686a <ble_gatts_svc_incs_satisfied+0x36>
   26850:	4b07      	ldr	r3, [pc, #28]	; (26870 <ble_gatts_svc_incs_satisfied+0x3c>)
   26852:	681b      	ldr	r3, [r3, #0]
   26854:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26858:	8883      	ldrh	r3, [r0, #4]
   2685a:	2b00      	cmp	r3, #0
   2685c:	d1ef      	bne.n	2683e <ble_gatts_svc_incs_satisfied+0xa>
            return 0;
   2685e:	2000      	movs	r0, #0
   26860:	e000      	b.n	26864 <ble_gatts_svc_incs_satisfied+0x30>
        }
    }

    return 1;
   26862:	2001      	movs	r0, #1
}
   26864:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
   26866:	2001      	movs	r0, #1
   26868:	e7fc      	b.n	26864 <ble_gatts_svc_incs_satisfied+0x30>
            return 0;
   2686a:	2000      	movs	r0, #0
   2686c:	e7fa      	b.n	26864 <ble_gatts_svc_incs_satisfied+0x30>
   2686e:	bf00      	nop
   26870:	10002f30 	.word	0x10002f30

00026874 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   26874:	2802      	cmp	r0, #2
   26876:	d001      	beq.n	2687c <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   26878:	2002      	movs	r0, #2
   2687a:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   2687c:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   2687e:	4770      	bx	lr

00026880 <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   26880:	2802      	cmp	r0, #2
   26882:	d002      	beq.n	2688a <ble_gatts_dsc_inc_stat+0xa>
   26884:	2803      	cmp	r0, #3
   26886:	d005      	beq.n	26894 <ble_gatts_dsc_inc_stat+0x14>
   26888:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   2688a:	4a05      	ldr	r2, [pc, #20]	; (268a0 <ble_gatts_dsc_inc_stat+0x20>)
   2688c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2688e:	3301      	adds	r3, #1
   26890:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   26892:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   26894:	4a02      	ldr	r2, [pc, #8]	; (268a0 <ble_gatts_dsc_inc_stat+0x20>)
   26896:	6b13      	ldr	r3, [r2, #48]	; 0x30
   26898:	3301      	adds	r3, #1
   2689a:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   2689c:	4770      	bx	lr
   2689e:	bf00      	nop
   268a0:	10002ef8 	.word	0x10002ef8

000268a4 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   268a4:	6803      	ldr	r3, [r0, #0]
   268a6:	b11b      	cbz	r3, 268b0 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   268a8:	6883      	ldr	r3, [r0, #8]
   268aa:	b11b      	cbz	r3, 268b4 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    return 1;
   268ac:	2001      	movs	r0, #1
   268ae:	4770      	bx	lr
        return 0;
   268b0:	2000      	movs	r0, #0
   268b2:	4770      	bx	lr
        return 0;
   268b4:	2000      	movs	r0, #0
}
   268b6:	4770      	bx	lr

000268b8 <ble_gatts_clt_cfg_find_idx>:
}

static int
ble_gatts_clt_cfg_find_idx(struct ble_gatts_clt_cfg *cfgs,
                           uint16_t chr_val_handle)
{
   268b8:	4602      	mov	r2, r0
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   268ba:	2000      	movs	r0, #0
   268bc:	4b06      	ldr	r3, [pc, #24]	; (268d8 <ble_gatts_clt_cfg_find_idx+0x20>)
   268be:	681b      	ldr	r3, [r3, #0]
   268c0:	4283      	cmp	r3, r0
   268c2:	dd05      	ble.n	268d0 <ble_gatts_clt_cfg_find_idx+0x18>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   268c4:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
   268c8:	428b      	cmp	r3, r1
   268ca:	d003      	beq.n	268d4 <ble_gatts_clt_cfg_find_idx+0x1c>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   268cc:	3001      	adds	r0, #1
   268ce:	e7f5      	b.n	268bc <ble_gatts_clt_cfg_find_idx+0x4>
            return i;
        }
    }

    return -1;
   268d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   268d4:	4770      	bx	lr
   268d6:	bf00      	nop
   268d8:	10002eec 	.word	0x10002eec

000268dc <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   268dc:	b510      	push	{r4, lr}
   268de:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   268e0:	f7ff ffea 	bl	268b8 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   268e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   268e8:	d002      	beq.n	268f0 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   268ea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   268ee:	bd10      	pop	{r4, pc}
        return NULL;
   268f0:	2000      	movs	r0, #0
   268f2:	e7fc      	b.n	268ee <ble_gatts_clt_cfg_find+0x12>

000268f4 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   268f4:	2801      	cmp	r0, #1
   268f6:	d003      	beq.n	26900 <ble_gatts_svc_type_to_uuid+0xc>
   268f8:	2802      	cmp	r0, #2
   268fa:	d005      	beq.n	26908 <ble_gatts_svc_type_to_uuid+0x14>
   268fc:	2003      	movs	r0, #3
   268fe:	4770      	bx	lr
    case BLE_GATT_SVC_TYPE_PRIMARY:
        *uuid = uuid_pri;
   26900:	4b03      	ldr	r3, [pc, #12]	; (26910 <ble_gatts_svc_type_to_uuid+0x1c>)
   26902:	600b      	str	r3, [r1, #0]
        return 0;
   26904:	2000      	movs	r0, #0
   26906:	4770      	bx	lr

    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
   26908:	4b02      	ldr	r3, [pc, #8]	; (26914 <ble_gatts_svc_type_to_uuid+0x20>)
   2690a:	600b      	str	r3, [r1, #0]
        return 0;
   2690c:	2000      	movs	r0, #0

    default:
        return BLE_HS_EINVAL;
    }
}
   2690e:	4770      	bx	lr
   26910:	100002c4 	.word	0x100002c4
   26914:	100002c8 	.word	0x100002c8

00026918 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   26918:	7803      	ldrb	r3, [r0, #0]
   2691a:	3b01      	subs	r3, #1
   2691c:	b2db      	uxtb	r3, r3
   2691e:	2b01      	cmp	r3, #1
   26920:	d803      	bhi.n	2692a <ble_gatts_svc_is_sane+0x12>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    }

    if (svc->uuid == NULL) {
   26922:	6843      	ldr	r3, [r0, #4]
   26924:	b11b      	cbz	r3, 2692e <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   26926:	2001      	movs	r0, #1
   26928:	4770      	bx	lr
        return 0;
   2692a:	2000      	movs	r0, #0
   2692c:	4770      	bx	lr
        return 0;
   2692e:	2000      	movs	r0, #0
}
   26930:	4770      	bx	lr
	...

00026934 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   26934:	4b01      	ldr	r3, [pc, #4]	; (2693c <ble_gatts_clt_cfg_size+0x8>)
   26936:	6818      	ldr	r0, [r3, #0]
}
   26938:	0080      	lsls	r0, r0, #2
   2693a:	4770      	bx	lr
   2693c:	10002eec 	.word	0x10002eec

00026940 <ble_gatts_schedule_update>:
 *                                  if any.  0 if nothing should get sent.
 */
static uint8_t
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
   26940:	4603      	mov	r3, r0
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   26942:	788a      	ldrb	r2, [r1, #2]
   26944:	f991 0002 	ldrsb.w	r0, [r1, #2]
   26948:	2800      	cmp	r0, #0
   2694a:	db01      	blt.n	26950 <ble_gatts_schedule_update+0x10>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   2694c:	2000      	movs	r0, #0
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    }

    return att_op;
}
   2694e:	4770      	bx	lr
{
   26950:	b410      	push	{r4}
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   26952:	f012 0401 	ands.w	r4, r2, #1
   26956:	d107      	bne.n	26968 <ble_gatts_schedule_update+0x28>
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   26958:	f012 0002 	ands.w	r0, r2, #2
   2695c:	d008      	beq.n	26970 <ble_gatts_schedule_update+0x30>
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   2695e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   26962:	b93b      	cbnz	r3, 26974 <ble_gatts_schedule_update+0x34>
            att_op = BLE_ATT_OP_INDICATE_REQ;
   26964:	201d      	movs	r0, #29
   26966:	e000      	b.n	2696a <ble_gatts_schedule_update+0x2a>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   26968:	201b      	movs	r0, #27
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   2696a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2696e:	708a      	strb	r2, [r1, #2]
}
   26970:	bc10      	pop	{r4}
   26972:	4770      	bx	lr
            att_op = 0;
   26974:	4620      	mov	r0, r4
   26976:	e7fb      	b.n	26970 <ble_gatts_schedule_update+0x30>

00026978 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   26978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2697c:	4682      	mov	sl, r0
   2697e:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   26980:	f04f 0900 	mov.w	r9, #0
   26984:	e049      	b.n	26a1a <ble_gatts_count_resources+0xa2>
            for (i = 0; svc->includes[i] != NULL; i++) {
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   26986:	8863      	ldrh	r3, [r4, #2]
   26988:	3301      	adds	r3, #1
   2698a:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   2698c:	8963      	ldrh	r3, [r4, #10]
   2698e:	3301      	adds	r3, #1
   26990:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   26992:	3201      	adds	r2, #1
   26994:	68bb      	ldr	r3, [r7, #8]
   26996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   2699a:	2b00      	cmp	r3, #0
   2699c:	d1f3      	bne.n	26986 <ble_gatts_count_resources+0xe>
   2699e:	e050      	b.n	26a42 <ble_gatts_count_resources+0xca>
   269a0:	2200      	movs	r2, #0
   269a2:	e7f7      	b.n	26994 <ble_gatts_count_resources+0x1c>
                    res->dscs++;
                    res->cccds++;
                    res->attrs++;
                }

                if (chr->descriptors != NULL) {
   269a4:	68f3      	ldr	r3, [r6, #12]
   269a6:	bb1b      	cbnz	r3, 269f0 <ble_gatts_count_resources+0x78>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   269a8:	f108 0801 	add.w	r8, r8, #1
   269ac:	68fb      	ldr	r3, [r7, #12]
   269ae:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   269b2:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   269b6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   269ba:	2b00      	cmp	r3, #0
   269bc:	d02b      	beq.n	26a16 <ble_gatts_count_resources+0x9e>
                if (!ble_gatts_chr_is_sane(chr)) {
   269be:	4630      	mov	r0, r6
   269c0:	f7ff ff01 	bl	267c6 <ble_gatts_chr_is_sane>
   269c4:	2800      	cmp	r0, #0
   269c6:	d046      	beq.n	26a56 <ble_gatts_count_resources+0xde>
                res->chrs++;
   269c8:	88a3      	ldrh	r3, [r4, #4]
   269ca:	3301      	adds	r3, #1
   269cc:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   269ce:	8963      	ldrh	r3, [r4, #10]
   269d0:	3302      	adds	r3, #2
   269d2:	b29b      	uxth	r3, r3
   269d4:	8163      	strh	r3, [r4, #10]
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   269d6:	8a32      	ldrh	r2, [r6, #16]
   269d8:	f012 0f30 	tst.w	r2, #48	; 0x30
   269dc:	d0e2      	beq.n	269a4 <ble_gatts_count_resources+0x2c>
                    res->dscs++;
   269de:	88e2      	ldrh	r2, [r4, #6]
   269e0:	3201      	adds	r2, #1
   269e2:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   269e4:	8922      	ldrh	r2, [r4, #8]
   269e6:	3201      	adds	r2, #1
   269e8:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   269ea:	3301      	adds	r3, #1
   269ec:	8163      	strh	r3, [r4, #10]
   269ee:	e7d9      	b.n	269a4 <ble_gatts_count_resources+0x2c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   269f0:	2500      	movs	r5, #0
   269f2:	68f2      	ldr	r2, [r6, #12]
   269f4:	012b      	lsls	r3, r5, #4
   269f6:	eb02 1005 	add.w	r0, r2, r5, lsl #4
   269fa:	58d3      	ldr	r3, [r2, r3]
   269fc:	2b00      	cmp	r3, #0
   269fe:	d0d3      	beq.n	269a8 <ble_gatts_count_resources+0x30>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   26a00:	f7ff ff50 	bl	268a4 <ble_gatts_dsc_is_sane>
   26a04:	b348      	cbz	r0, 26a5a <ble_gatts_count_resources+0xe2>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   26a06:	88e3      	ldrh	r3, [r4, #6]
   26a08:	3301      	adds	r3, #1
   26a0a:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   26a0c:	8963      	ldrh	r3, [r4, #10]
   26a0e:	3301      	adds	r3, #1
   26a10:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   26a12:	3501      	adds	r5, #1
   26a14:	e7ed      	b.n	269f2 <ble_gatts_count_resources+0x7a>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   26a16:	f109 0901 	add.w	r9, r9, #1
   26a1a:	ea4f 1309 	mov.w	r3, r9, lsl #4
   26a1e:	eb0a 1709 	add.w	r7, sl, r9, lsl #4
   26a22:	f81a 3003 	ldrb.w	r3, [sl, r3]
   26a26:	b193      	cbz	r3, 26a4e <ble_gatts_count_resources+0xd6>
        if (!ble_gatts_svc_is_sane(svc)) {
   26a28:	4638      	mov	r0, r7
   26a2a:	f7ff ff75 	bl	26918 <ble_gatts_svc_is_sane>
   26a2e:	b180      	cbz	r0, 26a52 <ble_gatts_count_resources+0xda>
        res->svcs++;
   26a30:	8823      	ldrh	r3, [r4, #0]
   26a32:	3301      	adds	r3, #1
   26a34:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   26a36:	8963      	ldrh	r3, [r4, #10]
   26a38:	3301      	adds	r3, #1
   26a3a:	8163      	strh	r3, [r4, #10]
        if (svc->includes != NULL) {
   26a3c:	68bb      	ldr	r3, [r7, #8]
   26a3e:	2b00      	cmp	r3, #0
   26a40:	d1ae      	bne.n	269a0 <ble_gatts_count_resources+0x28>
        if (svc->characteristics != NULL) {
   26a42:	68fb      	ldr	r3, [r7, #12]
   26a44:	2b00      	cmp	r3, #0
   26a46:	d0e6      	beq.n	26a16 <ble_gatts_count_resources+0x9e>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   26a48:	f04f 0800 	mov.w	r8, #0
   26a4c:	e7ae      	b.n	269ac <ble_gatts_count_resources+0x34>
                }
            }
        }
    }

    return 0;
   26a4e:	2000      	movs	r0, #0
   26a50:	e004      	b.n	26a5c <ble_gatts_count_resources+0xe4>
            return BLE_HS_EINVAL;
   26a52:	2003      	movs	r0, #3
   26a54:	e002      	b.n	26a5c <ble_gatts_count_resources+0xe4>
                    return BLE_HS_EINVAL;
   26a56:	2003      	movs	r0, #3
   26a58:	e000      	b.n	26a5c <ble_gatts_count_resources+0xe4>
                            return BLE_HS_EINVAL;
   26a5a:	2003      	movs	r0, #3
}
   26a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026a60 <ble_gatts_clt_cfg_access_locked>:
{
   26a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a64:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   26a66:	2300      	movs	r3, #0
   26a68:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   26a6a:	1e4c      	subs	r4, r1, #1
   26a6c:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   26a6e:	42a1      	cmp	r1, r4
   26a70:	d366      	bcc.n	26b40 <ble_gatts_clt_cfg_access_locked+0xe0>
   26a72:	4605      	mov	r5, r0
   26a74:	4617      	mov	r7, r2
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   26a76:	4621      	mov	r1, r4
   26a78:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   26a7a:	f7ff ff2f 	bl	268dc <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   26a7e:	4680      	mov	r8, r0
   26a80:	2800      	cmp	r0, #0
   26a82:	d05f      	beq.n	26b44 <ble_gatts_clt_cfg_access_locked+0xe4>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   26a84:	7883      	ldrb	r3, [r0, #2]
   26a86:	9a08      	ldr	r2, [sp, #32]
   26a88:	7013      	strb	r3, [r2, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   26a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26a8c:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   26a8e:	4638      	mov	r0, r7
   26a90:	f7ff fef0 	bl	26874 <ble_gatts_dsc_op>
   26a94:	4607      	mov	r7, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   26a96:	f7ff fef3 	bl	26880 <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   26a9a:	2f02      	cmp	r7, #2
   26a9c:	d005      	beq.n	26aaa <ble_gatts_clt_cfg_access_locked+0x4a>
   26a9e:	2f03      	cmp	r7, #3
   26aa0:	d015      	beq.n	26ace <ble_gatts_clt_cfg_access_locked+0x6e>
   26aa2:	270e      	movs	r7, #14
}
   26aa4:	4638      	mov	r0, r7
   26aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        STATS_INC(ble_gatts_stats, dsc_reads);
   26aaa:	4a29      	ldr	r2, [pc, #164]	; (26b50 <ble_gatts_clt_cfg_access_locked+0xf0>)
   26aac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   26aae:	3301      	adds	r3, #1
   26ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   26ab2:	2102      	movs	r1, #2
   26ab4:	9806      	ldr	r0, [sp, #24]
   26ab6:	f7ef f804 	bl	15ac2 <os_mbuf_extend>
        if (buf == NULL) {
   26aba:	2800      	cmp	r0, #0
   26abc:	d044      	beq.n	26b48 <ble_gatts_clt_cfg_access_locked+0xe8>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   26abe:	f898 1002 	ldrb.w	r1, [r8, #2]
   26ac2:	f001 0103 	and.w	r1, r1, #3
   26ac6:	f00b fa09 	bl	31edc <put_le16>
    return 0;
   26aca:	2700      	movs	r7, #0
        break;
   26acc:	e7ea      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
        STATS_INC(ble_gatts_stats, dsc_writes);
   26ace:	4a20      	ldr	r2, [pc, #128]	; (26b50 <ble_gatts_clt_cfg_access_locked+0xf0>)
   26ad0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   26ad2:	3301      	adds	r3, #1
   26ad4:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   26ad6:	9b06      	ldr	r3, [sp, #24]
   26ad8:	8a1b      	ldrh	r3, [r3, #16]
   26ada:	2b02      	cmp	r3, #2
   26adc:	d001      	beq.n	26ae2 <ble_gatts_clt_cfg_access_locked+0x82>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   26ade:	270d      	movs	r7, #13
   26ae0:	e7e0      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
        om = os_mbuf_pullup(om, 2);
   26ae2:	2102      	movs	r1, #2
   26ae4:	9806      	ldr	r0, [sp, #24]
   26ae6:	f7ef f81a 	bl	15b1e <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   26aea:	6800      	ldr	r0, [r0, #0]
   26aec:	f00b fa17 	bl	31f1e <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   26af0:	f898 7003 	ldrb.w	r7, [r8, #3]
   26af4:	ea30 0707 	bics.w	r7, r0, r7
   26af8:	d128      	bne.n	26b4c <ble_gatts_clt_cfg_access_locked+0xec>
        if (clt_cfg->flags != flags) {
   26afa:	f898 3002 	ldrb.w	r3, [r8, #2]
   26afe:	4283      	cmp	r3, r0
   26b00:	d0d0      	beq.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
            clt_cfg->flags = flags;
   26b02:	b2c0      	uxtb	r0, r0
   26b04:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   26b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26b0a:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   26b0c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   26b10:	f013 0f04 	tst.w	r3, #4
   26b14:	d0c6      	beq.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   26b16:	462b      	mov	r3, r5
   26b18:	f853 0f07 	ldr.w	r0, [r3, #7]!
   26b1c:	6030      	str	r0, [r6, #0]
   26b1e:	889a      	ldrh	r2, [r3, #4]
   26b20:	799b      	ldrb	r3, [r3, #6]
   26b22:	80b2      	strh	r2, [r6, #4]
   26b24:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   26b26:	79e8      	ldrb	r0, [r5, #7]
   26b28:	f002 fe51 	bl	297ce <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   26b2c:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   26b2e:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   26b30:	f898 3002 	ldrb.w	r3, [r8, #2]
   26b34:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   26b36:	7b33      	ldrb	r3, [r6, #12]
   26b38:	f36f 0300 	bfc	r3, #0, #1
   26b3c:	7333      	strb	r3, [r6, #12]
   26b3e:	e7b1      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   26b40:	270e      	movs	r7, #14
   26b42:	e7af      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   26b44:	270e      	movs	r7, #14
   26b46:	e7ad      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   26b48:	2711      	movs	r7, #17
   26b4a:	e7ab      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   26b4c:	2706      	movs	r7, #6
   26b4e:	e7a9      	b.n	26aa4 <ble_gatts_clt_cfg_access_locked+0x44>
   26b50:	10002ef8 	.word	0x10002ef8

00026b54 <ble_gatts_subscribe_event>:
{
   26b54:	b530      	push	{r4, r5, lr}
   26b56:	b085      	sub	sp, #20
   26b58:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   26b5c:	ea83 0504 	eor.w	r5, r3, r4
   26b60:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   26b64:	d101      	bne.n	26b6a <ble_gatts_subscribe_event+0x16>
}
   26b66:	b005      	add	sp, #20
   26b68:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   26b6a:	f004 0502 	and.w	r5, r4, #2
   26b6e:	9502      	str	r5, [sp, #8]
   26b70:	f003 0502 	and.w	r5, r3, #2
   26b74:	9501      	str	r5, [sp, #4]
   26b76:	f004 0401 	and.w	r4, r4, #1
   26b7a:	9400      	str	r4, [sp, #0]
   26b7c:	f003 0301 	and.w	r3, r3, #1
   26b80:	f7fe fd3e 	bl	25600 <ble_gap_subscribe_event>
}
   26b84:	e7ef      	b.n	26b66 <ble_gatts_subscribe_event+0x12>

00026b86 <ble_gatts_clt_cfg_access>:
{
   26b86:	b5f0      	push	{r4, r5, r6, r7, lr}
   26b88:	b08d      	sub	sp, #52	; 0x34
   26b8a:	4606      	mov	r6, r0
   26b8c:	460d      	mov	r5, r1
   26b8e:	4617      	mov	r7, r2
   26b90:	461c      	mov	r4, r3
    ble_hs_lock();
   26b92:	f000 fec5 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   26b96:	4630      	mov	r0, r6
   26b98:	f001 fd1e 	bl	285d8 <ble_hs_conn_find>
    if (conn == NULL) {
   26b9c:	b1b0      	cbz	r0, 26bcc <ble_gatts_clt_cfg_access+0x46>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   26b9e:	f10d 0312 	add.w	r3, sp, #18
   26ba2:	9303      	str	r3, [sp, #12]
   26ba4:	f10d 0313 	add.w	r3, sp, #19
   26ba8:	9302      	str	r3, [sp, #8]
   26baa:	ab08      	add	r3, sp, #32
   26bac:	9301      	str	r3, [sp, #4]
   26bae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26bb0:	681b      	ldr	r3, [r3, #0]
   26bb2:	9300      	str	r3, [sp, #0]
   26bb4:	4623      	mov	r3, r4
   26bb6:	463a      	mov	r2, r7
   26bb8:	4629      	mov	r1, r5
   26bba:	f7ff ff51 	bl	26a60 <ble_gatts_clt_cfg_access_locked>
   26bbe:	4604      	mov	r4, r0
    ble_hs_unlock();
   26bc0:	f000 feb2 	bl	27928 <ble_hs_unlock>
    if (rc != 0) {
   26bc4:	b134      	cbz	r4, 26bd4 <ble_gatts_clt_cfg_access+0x4e>
}
   26bc6:	4620      	mov	r0, r4
   26bc8:	b00d      	add	sp, #52	; 0x34
   26bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_hs_unlock();
   26bcc:	f000 feac 	bl	27928 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   26bd0:	240e      	movs	r4, #14
   26bd2:	e7f8      	b.n	26bc6 <ble_gatts_clt_cfg_access+0x40>
    chr_val_handle = attr_handle - 1;
   26bd4:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   26bd6:	f89d 3012 	ldrb.w	r3, [sp, #18]
   26bda:	9300      	str	r3, [sp, #0]
   26bdc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   26be0:	2201      	movs	r2, #1
   26be2:	b289      	uxth	r1, r1
   26be4:	4630      	mov	r0, r6
   26be6:	f7ff ffb5 	bl	26b54 <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   26bea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   26bee:	2b00      	cmp	r3, #0
   26bf0:	d0e9      	beq.n	26bc6 <ble_gatts_clt_cfg_access+0x40>
        if (cccd_value.flags == 0) {
   26bf2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   26bf6:	b943      	cbnz	r3, 26c0a <ble_gatts_clt_cfg_access+0x84>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   26bf8:	a908      	add	r1, sp, #32
   26bfa:	a805      	add	r0, sp, #20
   26bfc:	f005 fbde 	bl	2c3bc <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   26c00:	a805      	add	r0, sp, #20
   26c02:	f005 fbd5 	bl	2c3b0 <ble_store_delete_cccd>
   26c06:	4604      	mov	r4, r0
   26c08:	e7dd      	b.n	26bc6 <ble_gatts_clt_cfg_access+0x40>
            rc = ble_store_write_cccd(&cccd_value);
   26c0a:	a808      	add	r0, sp, #32
   26c0c:	f005 fbca 	bl	2c3a4 <ble_store_write_cccd>
   26c10:	4604      	mov	r4, r0
   26c12:	e7d8      	b.n	26bc6 <ble_gatts_clt_cfg_access+0x40>

00026c14 <ble_gatts_register_inc>:
{
   26c14:	b500      	push	{lr}
   26c16:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   26c18:	9001      	str	r0, [sp, #4]
   26c1a:	4b06      	ldr	r3, [pc, #24]	; (26c34 <ble_gatts_register_inc+0x20>)
   26c1c:	9300      	str	r3, [sp, #0]
   26c1e:	f10d 030e 	add.w	r3, sp, #14
   26c22:	2200      	movs	r2, #0
   26c24:	2101      	movs	r1, #1
   26c26:	4804      	ldr	r0, [pc, #16]	; (26c38 <ble_gatts_register_inc+0x24>)
   26c28:	f7fc fc76 	bl	23518 <ble_att_svr_register>
}
   26c2c:	b005      	add	sp, #20
   26c2e:	f85d fb04 	ldr.w	pc, [sp], #4
   26c32:	bf00      	nop
   26c34:	00026fad 	.word	0x00026fad
   26c38:	100002cc 	.word	0x100002cc

00026c3c <ble_gatts_register_clt_cfg_dsc>:
{
   26c3c:	b500      	push	{lr}
   26c3e:	b083      	sub	sp, #12
   26c40:	4603      	mov	r3, r0
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   26c42:	2200      	movs	r2, #0
   26c44:	9201      	str	r2, [sp, #4]
   26c46:	4907      	ldr	r1, [pc, #28]	; (26c64 <ble_gatts_register_clt_cfg_dsc+0x28>)
   26c48:	9100      	str	r1, [sp, #0]
   26c4a:	2103      	movs	r1, #3
   26c4c:	4806      	ldr	r0, [pc, #24]	; (26c68 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   26c4e:	f7fc fc63 	bl	23518 <ble_att_svr_register>
    if (rc != 0) {
   26c52:	b918      	cbnz	r0, 26c5c <ble_gatts_register_clt_cfg_dsc+0x20>
    STATS_INC(ble_gatts_stats, dscs);
   26c54:	4a05      	ldr	r2, [pc, #20]	; (26c6c <ble_gatts_register_clt_cfg_dsc+0x30>)
   26c56:	6953      	ldr	r3, [r2, #20]
   26c58:	3301      	adds	r3, #1
   26c5a:	6153      	str	r3, [r2, #20]
}
   26c5c:	b003      	add	sp, #12
   26c5e:	f85d fb04 	ldr.w	pc, [sp], #4
   26c62:	bf00      	nop
   26c64:	00026b87 	.word	0x00026b87
   26c68:	100002d4 	.word	0x100002d4
   26c6c:	10002ef8 	.word	0x10002ef8

00026c70 <ble_gatts_register_dsc>:
{
   26c70:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c72:	b089      	sub	sp, #36	; 0x24
   26c74:	4606      	mov	r6, r0
   26c76:	460d      	mov	r5, r1
   26c78:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   26c7a:	4610      	mov	r0, r2
   26c7c:	f7ff fe12 	bl	268a4 <ble_gatts_dsc_is_sane>
   26c80:	b310      	cbz	r0, 26cc8 <ble_gatts_register_dsc+0x58>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   26c82:	9401      	str	r4, [sp, #4]
   26c84:	4b11      	ldr	r3, [pc, #68]	; (26ccc <ble_gatts_register_dsc+0x5c>)
   26c86:	9300      	str	r3, [sp, #0]
   26c88:	f10d 030a 	add.w	r3, sp, #10
   26c8c:	7962      	ldrb	r2, [r4, #5]
   26c8e:	7921      	ldrb	r1, [r4, #4]
   26c90:	6820      	ldr	r0, [r4, #0]
   26c92:	f7fc fc41 	bl	23518 <ble_att_svr_register>
    if (rc != 0) {
   26c96:	4607      	mov	r7, r0
   26c98:	b998      	cbnz	r0, 26cc2 <ble_gatts_register_dsc+0x52>
    if (register_cb != NULL) {
   26c9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26c9c:	b16b      	cbz	r3, 26cba <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   26c9e:	2303      	movs	r3, #3
   26ca0:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   26ca4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   26ca8:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   26cac:	9607      	str	r6, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   26cae:	9506      	str	r5, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   26cb0:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   26cb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   26cb4:	a803      	add	r0, sp, #12
   26cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26cb8:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   26cba:	4a05      	ldr	r2, [pc, #20]	; (26cd0 <ble_gatts_register_dsc+0x60>)
   26cbc:	6953      	ldr	r3, [r2, #20]
   26cbe:	3301      	adds	r3, #1
   26cc0:	6153      	str	r3, [r2, #20]
}
   26cc2:	4638      	mov	r0, r7
   26cc4:	b009      	add	sp, #36	; 0x24
   26cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   26cc8:	2703      	movs	r7, #3
   26cca:	e7fa      	b.n	26cc2 <ble_gatts_register_dsc+0x52>
   26ccc:	000270df 	.word	0x000270df
   26cd0:	10002ef8 	.word	0x10002ef8

00026cd4 <ble_gatts_register_chr>:
{
   26cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26cd8:	b08b      	sub	sp, #44	; 0x2c
   26cda:	4607      	mov	r7, r0
   26cdc:	460c      	mov	r4, r1
   26cde:	4616      	mov	r6, r2
   26ce0:	4698      	mov	r8, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   26ce2:	4608      	mov	r0, r1
   26ce4:	f7ff fd6f 	bl	267c6 <ble_gatts_chr_is_sane>
   26ce8:	2800      	cmp	r0, #0
   26cea:	d063      	beq.n	26db4 <ble_gatts_register_chr+0xe0>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   26cec:	4620      	mov	r0, r4
   26cee:	f7ff fd09 	bl	26704 <ble_gatts_chr_clt_cfg_allowed>
   26cf2:	b140      	cbz	r0, 26d06 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   26cf4:	4b33      	ldr	r3, [pc, #204]	; (26dc4 <ble_gatts_register_chr+0xf0>)
   26cf6:	881a      	ldrh	r2, [r3, #0]
   26cf8:	4b33      	ldr	r3, [pc, #204]	; (26dc8 <ble_gatts_register_chr+0xf4>)
   26cfa:	681b      	ldr	r3, [r3, #0]
   26cfc:	429a      	cmp	r2, r3
   26cfe:	db5c      	blt.n	26dba <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   26d00:	3301      	adds	r3, #1
   26d02:	4a31      	ldr	r2, [pc, #196]	; (26dc8 <ble_gatts_register_chr+0xf4>)
   26d04:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   26d06:	9401      	str	r4, [sp, #4]
   26d08:	4b30      	ldr	r3, [pc, #192]	; (26dcc <ble_gatts_register_chr+0xf8>)
   26d0a:	9300      	str	r3, [sp, #0]
   26d0c:	f10d 0312 	add.w	r3, sp, #18
   26d10:	2200      	movs	r2, #0
   26d12:	2101      	movs	r1, #1
   26d14:	482e      	ldr	r0, [pc, #184]	; (26dd0 <ble_gatts_register_chr+0xfc>)
   26d16:	f7fc fbff 	bl	23518 <ble_att_svr_register>
    if (rc != 0) {
   26d1a:	4681      	mov	r9, r0
   26d1c:	b118      	cbz	r0, 26d26 <ble_gatts_register_chr+0x52>
}
   26d1e:	4648      	mov	r0, r9
   26d20:	b00b      	add	sp, #44	; 0x2c
   26d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   26d26:	8a20      	ldrh	r0, [r4, #16]
   26d28:	f7ff fcf7 	bl	2671a <ble_gatts_att_flags_from_chr_flags>
   26d2c:	4601      	mov	r1, r0
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   26d2e:	9401      	str	r4, [sp, #4]
   26d30:	4b28      	ldr	r3, [pc, #160]	; (26dd4 <ble_gatts_register_chr+0x100>)
   26d32:	9300      	str	r3, [sp, #0]
   26d34:	ab04      	add	r3, sp, #16
   26d36:	7ca2      	ldrb	r2, [r4, #18]
   26d38:	6820      	ldr	r0, [r4, #0]
   26d3a:	f7fc fbed 	bl	23518 <ble_att_svr_register>
    if (rc != 0) {
   26d3e:	4681      	mov	r9, r0
   26d40:	2800      	cmp	r0, #0
   26d42:	d1ec      	bne.n	26d1e <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   26d44:	6963      	ldr	r3, [r4, #20]
   26d46:	b113      	cbz	r3, 26d4e <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   26d48:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   26d4c:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   26d4e:	b17e      	cbz	r6, 26d70 <ble_gatts_register_chr+0x9c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   26d50:	2302      	movs	r3, #2
   26d52:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   26d56:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   26d5a:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   26d5e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   26d62:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   26d66:	9708      	str	r7, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   26d68:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   26d6a:	4641      	mov	r1, r8
   26d6c:	a805      	add	r0, sp, #20
   26d6e:	47b0      	blx	r6
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   26d70:	4620      	mov	r0, r4
   26d72:	f7ff fcc7 	bl	26704 <ble_gatts_chr_clt_cfg_allowed>
   26d76:	b980      	cbnz	r0, 26d9a <ble_gatts_register_chr+0xc6>
    if (chr->descriptors != NULL) {
   26d78:	68e5      	ldr	r5, [r4, #12]
   26d7a:	b1b5      	cbz	r5, 26daa <ble_gatts_register_chr+0xd6>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   26d7c:	682b      	ldr	r3, [r5, #0]
   26d7e:	b1a3      	cbz	r3, 26daa <ble_gatts_register_chr+0xd6>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   26d80:	f8cd 8004 	str.w	r8, [sp, #4]
   26d84:	9600      	str	r6, [sp, #0]
   26d86:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   26d8a:	462a      	mov	r2, r5
   26d8c:	4621      	mov	r1, r4
   26d8e:	4638      	mov	r0, r7
   26d90:	f7ff ff6e 	bl	26c70 <ble_gatts_register_dsc>
            if (rc != 0) {
   26d94:	b9a0      	cbnz	r0, 26dc0 <ble_gatts_register_chr+0xec>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   26d96:	3510      	adds	r5, #16
   26d98:	e7f0      	b.n	26d7c <ble_gatts_register_chr+0xa8>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   26d9a:	f10d 000e 	add.w	r0, sp, #14
   26d9e:	f7ff ff4d 	bl	26c3c <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   26da2:	2800      	cmp	r0, #0
   26da4:	d0e8      	beq.n	26d78 <ble_gatts_register_chr+0xa4>
            return rc;
   26da6:	4681      	mov	r9, r0
   26da8:	e7b9      	b.n	26d1e <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   26daa:	4a0b      	ldr	r2, [pc, #44]	; (26dd8 <ble_gatts_register_chr+0x104>)
   26dac:	6913      	ldr	r3, [r2, #16]
   26dae:	3301      	adds	r3, #1
   26db0:	6113      	str	r3, [r2, #16]
    return 0;
   26db2:	e7b4      	b.n	26d1e <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   26db4:	f04f 0903 	mov.w	r9, #3
   26db8:	e7b1      	b.n	26d1e <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   26dba:	f04f 0906 	mov.w	r9, #6
   26dbe:	e7ae      	b.n	26d1e <ble_gatts_register_chr+0x4a>
                return rc;
   26dc0:	4681      	mov	r9, r0
   26dc2:	e7ac      	b.n	26d1e <ble_gatts_register_chr+0x4a>
   26dc4:	1000303a 	.word	0x1000303a
   26dc8:	10002eec 	.word	0x10002eec
   26dcc:	00026f51 	.word	0x00026f51
   26dd0:	100002d0 	.word	0x100002d0
   26dd4:	000270a7 	.word	0x000270a7
   26dd8:	10002ef8 	.word	0x10002ef8

00026ddc <ble_gatts_register_svc>:
{
   26ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26de0:	b088      	sub	sp, #32
   26de2:	4604      	mov	r4, r0
   26de4:	460d      	mov	r5, r1
   26de6:	4616      	mov	r6, r2
   26de8:	461f      	mov	r7, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   26dea:	f7ff fd23 	bl	26834 <ble_gatts_svc_incs_satisfied>
   26dee:	2800      	cmp	r0, #0
   26df0:	d046      	beq.n	26e80 <ble_gatts_register_svc+0xa4>
    if (!ble_gatts_svc_is_sane(svc)) {
   26df2:	4620      	mov	r0, r4
   26df4:	f7ff fd90 	bl	26918 <ble_gatts_svc_is_sane>
   26df8:	2800      	cmp	r0, #0
   26dfa:	d047      	beq.n	26e8c <ble_gatts_register_svc+0xb0>
    uuid = NULL;
   26dfc:	f04f 0800 	mov.w	r8, #0
   26e00:	f8cd 8008 	str.w	r8, [sp, #8]
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   26e04:	a902      	add	r1, sp, #8
   26e06:	7820      	ldrb	r0, [r4, #0]
   26e08:	f7ff fd74 	bl	268f4 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   26e0c:	9401      	str	r4, [sp, #4]
   26e0e:	4b23      	ldr	r3, [pc, #140]	; (26e9c <ble_gatts_register_svc+0xc0>)
   26e10:	9300      	str	r3, [sp, #0]
   26e12:	462b      	mov	r3, r5
   26e14:	4642      	mov	r2, r8
   26e16:	2101      	movs	r1, #1
   26e18:	9802      	ldr	r0, [sp, #8]
   26e1a:	f7fc fb7d 	bl	23518 <ble_att_svr_register>
    if (rc != 0) {
   26e1e:	4680      	mov	r8, r0
   26e20:	bb80      	cbnz	r0, 26e84 <ble_gatts_register_svc+0xa8>
    if (register_cb != NULL) {
   26e22:	b14e      	cbz	r6, 26e38 <ble_gatts_register_svc+0x5c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   26e24:	2301      	movs	r3, #1
   26e26:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   26e2a:	882b      	ldrh	r3, [r5, #0]
   26e2c:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   26e30:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   26e32:	4639      	mov	r1, r7
   26e34:	a803      	add	r0, sp, #12
   26e36:	47b0      	blx	r6
    if (svc->includes != NULL) {
   26e38:	68a3      	ldr	r3, [r4, #8]
   26e3a:	b17b      	cbz	r3, 26e5c <ble_gatts_register_svc+0x80>
        for (i = 0; svc->includes[i] != NULL; i++) {
   26e3c:	4645      	mov	r5, r8
   26e3e:	68a3      	ldr	r3, [r4, #8]
   26e40:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   26e44:	b150      	cbz	r0, 26e5c <ble_gatts_register_svc+0x80>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   26e46:	f7ff fcdf 	bl	26808 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   26e4a:	4b15      	ldr	r3, [pc, #84]	; (26ea0 <ble_gatts_register_svc+0xc4>)
   26e4c:	681b      	ldr	r3, [r3, #0]
   26e4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26e52:	f7ff fedf 	bl	26c14 <ble_gatts_register_inc>
            if (rc != 0) {
   26e56:	b9e0      	cbnz	r0, 26e92 <ble_gatts_register_svc+0xb6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   26e58:	3501      	adds	r5, #1
   26e5a:	e7f0      	b.n	26e3e <ble_gatts_register_svc+0x62>
    if (svc->characteristics != NULL) {
   26e5c:	68e5      	ldr	r5, [r4, #12]
   26e5e:	b155      	cbz	r5, 26e76 <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   26e60:	682b      	ldr	r3, [r5, #0]
   26e62:	b143      	cbz	r3, 26e76 <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   26e64:	463b      	mov	r3, r7
   26e66:	4632      	mov	r2, r6
   26e68:	4629      	mov	r1, r5
   26e6a:	4620      	mov	r0, r4
   26e6c:	f7ff ff32 	bl	26cd4 <ble_gatts_register_chr>
            if (rc != 0) {
   26e70:	b988      	cbnz	r0, 26e96 <ble_gatts_register_svc+0xba>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   26e72:	3518      	adds	r5, #24
   26e74:	e7f4      	b.n	26e60 <ble_gatts_register_svc+0x84>
    STATS_INC(ble_gatts_stats, svcs);
   26e76:	4a0b      	ldr	r2, [pc, #44]	; (26ea4 <ble_gatts_register_svc+0xc8>)
   26e78:	68d3      	ldr	r3, [r2, #12]
   26e7a:	3301      	adds	r3, #1
   26e7c:	60d3      	str	r3, [r2, #12]
    return 0;
   26e7e:	e001      	b.n	26e84 <ble_gatts_register_svc+0xa8>
        return BLE_HS_EAGAIN;
   26e80:	f04f 0801 	mov.w	r8, #1
}
   26e84:	4640      	mov	r0, r8
   26e86:	b008      	add	sp, #32
   26e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   26e8c:	f04f 0803 	mov.w	r8, #3
   26e90:	e7f8      	b.n	26e84 <ble_gatts_register_svc+0xa8>
                return rc;
   26e92:	4680      	mov	r8, r0
   26e94:	e7f6      	b.n	26e84 <ble_gatts_register_svc+0xa8>
                return rc;
   26e96:	4680      	mov	r8, r0
   26e98:	e7f4      	b.n	26e84 <ble_gatts_register_svc+0xa8>
   26e9a:	bf00      	nop
   26e9c:	00026f1d 	.word	0x00026f1d
   26ea0:	10002f30 	.word	0x10002f30
   26ea4:	10002ef8 	.word	0x10002ef8

00026ea8 <ble_gatts_register_round>:
{
   26ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26eac:	b083      	sub	sp, #12
   26eae:	4607      	mov	r7, r0
   26eb0:	4689      	mov	r9, r1
   26eb2:	4690      	mov	r8, r2
    *out_num_registered = 0;
   26eb4:	2400      	movs	r4, #0
   26eb6:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   26eb8:	e009      	b.n	26ece <ble_gatts_register_round+0x26>
                entry->handle = handle;
   26eba:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   26ebe:	80b3      	strh	r3, [r6, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   26ec0:	f7fc fb52 	bl	23568 <ble_att_svr_prev_handle>
   26ec4:	80f0      	strh	r0, [r6, #6]
                (*out_num_registered)++;
   26ec6:	683b      	ldr	r3, [r7, #0]
   26ec8:	3301      	adds	r3, #1
   26eca:	603b      	str	r3, [r7, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   26ecc:	3401      	adds	r4, #1
   26ece:	4b11      	ldr	r3, [pc, #68]	; (26f14 <ble_gatts_register_round+0x6c>)
   26ed0:	881b      	ldrh	r3, [r3, #0]
   26ed2:	42a3      	cmp	r3, r4
   26ed4:	dd17      	ble.n	26f06 <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   26ed6:	4b10      	ldr	r3, [pc, #64]	; (26f18 <ble_gatts_register_round+0x70>)
   26ed8:	681d      	ldr	r5, [r3, #0]
   26eda:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
        if (entry->handle == 0) {
   26ede:	88b3      	ldrh	r3, [r6, #4]
   26ee0:	2b00      	cmp	r3, #0
   26ee2:	d1f3      	bne.n	26ecc <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   26ee4:	4643      	mov	r3, r8
   26ee6:	464a      	mov	r2, r9
   26ee8:	f10d 0106 	add.w	r1, sp, #6
   26eec:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   26ef0:	f7ff ff74 	bl	26ddc <ble_gatts_register_svc>
            switch (rc) {
   26ef4:	4603      	mov	r3, r0
   26ef6:	2800      	cmp	r0, #0
   26ef8:	d0df      	beq.n	26eba <ble_gatts_register_round+0x12>
   26efa:	2801      	cmp	r0, #1
   26efc:	d0e6      	beq.n	26ecc <ble_gatts_register_round+0x24>
}
   26efe:	4618      	mov	r0, r3
   26f00:	b003      	add	sp, #12
   26f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*out_num_registered == 0) {
   26f06:	683b      	ldr	r3, [r7, #0]
   26f08:	b10b      	cbz	r3, 26f0e <ble_gatts_register_round+0x66>
    return 0;
   26f0a:	2300      	movs	r3, #0
   26f0c:	e7f7      	b.n	26efe <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   26f0e:	2303      	movs	r3, #3
   26f10:	e7f5      	b.n	26efe <ble_gatts_register_round+0x56>
   26f12:	bf00      	nop
   26f14:	10002ef4 	.word	0x10002ef4
   26f18:	10002f30 	.word	0x10002f30

00026f1c <ble_gatts_svc_access>:
{
   26f1c:	b538      	push	{r3, r4, r5, lr}
   26f1e:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   26f20:	4a0a      	ldr	r2, [pc, #40]	; (26f4c <ble_gatts_svc_access+0x30>)
   26f22:	6993      	ldr	r3, [r2, #24]
   26f24:	3301      	adds	r3, #1
   26f26:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   26f28:	9b04      	ldr	r3, [sp, #16]
   26f2a:	681d      	ldr	r5, [r3, #0]
   26f2c:	6860      	ldr	r0, [r4, #4]
   26f2e:	f005 fc47 	bl	2c7c0 <ble_uuid_length>
   26f32:	b281      	uxth	r1, r0
   26f34:	4628      	mov	r0, r5
   26f36:	f7ee fdc4 	bl	15ac2 <os_mbuf_extend>
    if (buf == NULL) {
   26f3a:	b128      	cbz	r0, 26f48 <ble_gatts_svc_access+0x2c>
   26f3c:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   26f3e:	6860      	ldr	r0, [r4, #4]
   26f40:	f005 fc12 	bl	2c768 <ble_uuid_flat>
    return 0;
   26f44:	2000      	movs	r0, #0
}
   26f46:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   26f48:	2011      	movs	r0, #17
   26f4a:	e7fc      	b.n	26f46 <ble_gatts_svc_access+0x2a>
   26f4c:	10002ef8 	.word	0x10002ef8

00026f50 <ble_gatts_chr_def_access>:
{
   26f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f52:	460c      	mov	r4, r1
   26f54:	9f06      	ldr	r7, [sp, #24]
   26f56:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   26f58:	4a13      	ldr	r2, [pc, #76]	; (26fa8 <ble_gatts_chr_def_access+0x58>)
   26f5a:	6a13      	ldr	r3, [r2, #32]
   26f5c:	3301      	adds	r3, #1
   26f5e:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   26f60:	2103      	movs	r1, #3
   26f62:	6838      	ldr	r0, [r7, #0]
   26f64:	f7ee fdad 	bl	15ac2 <os_mbuf_extend>
    if (buf == NULL) {
   26f68:	b1d0      	cbz	r0, 26fa0 <ble_gatts_chr_def_access+0x50>
   26f6a:	4605      	mov	r5, r0
    buf[0] = ble_gatts_chr_properties(chr);
   26f6c:	4630      	mov	r0, r6
   26f6e:	f7ff fbff 	bl	26770 <ble_gatts_chr_properties>
   26f72:	4603      	mov	r3, r0
   26f74:	4628      	mov	r0, r5
   26f76:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(buf + 1, attr_handle + 1);
   26f7a:	1c61      	adds	r1, r4, #1
   26f7c:	b289      	uxth	r1, r1
   26f7e:	f00a ffad 	bl	31edc <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   26f82:	683c      	ldr	r4, [r7, #0]
   26f84:	6830      	ldr	r0, [r6, #0]
   26f86:	f005 fc1b 	bl	2c7c0 <ble_uuid_length>
   26f8a:	b281      	uxth	r1, r0
   26f8c:	4620      	mov	r0, r4
   26f8e:	f7ee fd98 	bl	15ac2 <os_mbuf_extend>
    if (buf == NULL) {
   26f92:	4601      	mov	r1, r0
   26f94:	b130      	cbz	r0, 26fa4 <ble_gatts_chr_def_access+0x54>
    ble_uuid_flat(chr->uuid, buf);
   26f96:	6830      	ldr	r0, [r6, #0]
   26f98:	f005 fbe6 	bl	2c768 <ble_uuid_flat>
    return 0;
   26f9c:	2000      	movs	r0, #0
}
   26f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   26fa0:	2011      	movs	r0, #17
   26fa2:	e7fc      	b.n	26f9e <ble_gatts_chr_def_access+0x4e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   26fa4:	2011      	movs	r0, #17
   26fa6:	e7fa      	b.n	26f9e <ble_gatts_chr_def_access+0x4e>
   26fa8:	10002ef8 	.word	0x10002ef8

00026fac <ble_gatts_inc_access>:
{
   26fac:	b570      	push	{r4, r5, r6, lr}
   26fae:	9e04      	ldr	r6, [sp, #16]
   26fb0:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   26fb2:	4a13      	ldr	r2, [pc, #76]	; (27000 <ble_gatts_inc_access+0x54>)
   26fb4:	69d3      	ldr	r3, [r2, #28]
   26fb6:	3301      	adds	r3, #1
   26fb8:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   26fba:	2104      	movs	r1, #4
   26fbc:	6830      	ldr	r0, [r6, #0]
   26fbe:	f7ee fd80 	bl	15ac2 <os_mbuf_extend>
    if (buf == NULL) {
   26fc2:	b1c8      	cbz	r0, 26ff8 <ble_gatts_inc_access+0x4c>
   26fc4:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   26fc6:	88a1      	ldrh	r1, [r4, #4]
   26fc8:	f00a ff88 	bl	31edc <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   26fcc:	88e1      	ldrh	r1, [r4, #6]
   26fce:	1ca8      	adds	r0, r5, #2
   26fd0:	f00a ff84 	bl	31edc <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   26fd4:	6823      	ldr	r3, [r4, #0]
   26fd6:	6858      	ldr	r0, [r3, #4]
   26fd8:	f005 fb8c 	bl	2c6f4 <ble_uuid_u16>
    if (uuid16 != 0) {
   26fdc:	4604      	mov	r4, r0
   26fde:	b908      	cbnz	r0, 26fe4 <ble_gatts_inc_access+0x38>
    return 0;
   26fe0:	2000      	movs	r0, #0
}
   26fe2:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   26fe4:	2102      	movs	r1, #2
   26fe6:	6830      	ldr	r0, [r6, #0]
   26fe8:	f7ee fd6b 	bl	15ac2 <os_mbuf_extend>
        if (buf == NULL) {
   26fec:	b130      	cbz	r0, 26ffc <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   26fee:	4621      	mov	r1, r4
   26ff0:	f00a ff74 	bl	31edc <put_le16>
    return 0;
   26ff4:	2000      	movs	r0, #0
   26ff6:	e7f4      	b.n	26fe2 <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   26ff8:	2011      	movs	r0, #17
   26ffa:	e7f2      	b.n	26fe2 <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   26ffc:	2011      	movs	r0, #17
   26ffe:	e7f0      	b.n	26fe2 <ble_gatts_inc_access+0x36>
   27000:	10002ef8 	.word	0x10002ef8

00027004 <ble_gatts_val_access>:
{
   27004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27008:	4607      	mov	r7, r0
   2700a:	460d      	mov	r5, r1
   2700c:	4616      	mov	r6, r2
   2700e:	461c      	mov	r4, r3
   27010:	f8dd 8020 	ldr.w	r8, [sp, #32]
    switch (gatt_ctxt->op) {
   27014:	781b      	ldrb	r3, [r3, #0]
   27016:	2b03      	cmp	r3, #3
   27018:	d841      	bhi.n	2709e <ble_gatts_val_access+0x9a>
   2701a:	e8df f003 	tbb	[pc, r3]
   2701e:	3202      	.short	0x3202
   27020:	3202      	.short	0x3202
        if (offset == 0) {
   27022:	b9fe      	cbnz	r6, 27064 <ble_gatts_val_access+0x60>
            gatt_ctxt->om = *om;
   27024:	f8d8 3000 	ldr.w	r3, [r8]
   27028:	6063      	str	r3, [r4, #4]
            new_om = 0;
   2702a:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   2702e:	6863      	ldr	r3, [r4, #4]
   27030:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   27034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27036:	4622      	mov	r2, r4
   27038:	4629      	mov	r1, r5
   2703a:	4638      	mov	r0, r7
   2703c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   2703e:	47a8      	blx	r5
        if (rc == 0) {
   27040:	4605      	mov	r5, r0
   27042:	b9b8      	cbnz	r0, 27074 <ble_gatts_val_access+0x70>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   27044:	6861      	ldr	r1, [r4, #4]
   27046:	8a0b      	ldrh	r3, [r1, #16]
   27048:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   2704c:	1b9b      	subs	r3, r3, r6
   2704e:	d410      	bmi.n	27072 <ble_gatts_val_access+0x6e>
                if (new_om) {
   27050:	f1b9 0f00 	cmp.w	r9, #0
   27054:	d00e      	beq.n	27074 <ble_gatts_val_access+0x70>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   27056:	b29b      	uxth	r3, r3
   27058:	4632      	mov	r2, r6
   2705a:	f8d8 0000 	ldr.w	r0, [r8]
   2705e:	f7ee fb81 	bl	15764 <os_mbuf_appendfrom>
   27062:	e007      	b.n	27074 <ble_gatts_val_access+0x70>
            gatt_ctxt->om = ble_hs_mbuf_att_pkt();
   27064:	f002 fb3d 	bl	296e2 <ble_hs_mbuf_att_pkt>
   27068:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   2706a:	b1d0      	cbz	r0, 270a2 <ble_gatts_val_access+0x9e>
            new_om = 1;
   2706c:	f04f 0901 	mov.w	r9, #1
   27070:	e7dd      	b.n	2702e <ble_gatts_val_access+0x2a>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   27072:	2507      	movs	r5, #7
        if (new_om) {
   27074:	f1b9 0f00 	cmp.w	r9, #0
   27078:	d00e      	beq.n	27098 <ble_gatts_val_access+0x94>
            os_mbuf_free_chain(gatt_ctxt->om);
   2707a:	6860      	ldr	r0, [r4, #4]
   2707c:	f7ee faf4 	bl	15668 <os_mbuf_free_chain>
   27080:	e00a      	b.n	27098 <ble_gatts_val_access+0x94>
        gatt_ctxt->om = *om;
   27082:	f8d8 3000 	ldr.w	r3, [r8]
   27086:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   27088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2708a:	4622      	mov	r2, r4
   2708c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   2708e:	47a8      	blx	r5
   27090:	4605      	mov	r5, r0
        *om = gatt_ctxt->om;
   27092:	6863      	ldr	r3, [r4, #4]
   27094:	f8c8 3000 	str.w	r3, [r8]
}
   27098:	4628      	mov	r0, r5
   2709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (gatt_ctxt->op) {
   2709e:	250e      	movs	r5, #14
   270a0:	e7fa      	b.n	27098 <ble_gatts_val_access+0x94>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   270a2:	2511      	movs	r5, #17
   270a4:	e7f8      	b.n	27098 <ble_gatts_val_access+0x94>

000270a6 <ble_gatts_chr_val_access>:
{
   270a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   270a8:	b089      	sub	sp, #36	; 0x24
   270aa:	4604      	mov	r4, r0
   270ac:	460d      	mov	r5, r1
   270ae:	461e      	mov	r6, r3
   270b0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   270b2:	4610      	mov	r0, r2
   270b4:	f7ff fb91 	bl	267da <ble_gatts_chr_op>
   270b8:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   270bc:	9707      	str	r7, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   270be:	f7ff fb93 	bl	267e8 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   270c2:	68bb      	ldr	r3, [r7, #8]
   270c4:	9302      	str	r3, [sp, #8]
   270c6:	687b      	ldr	r3, [r7, #4]
   270c8:	9301      	str	r3, [sp, #4]
   270ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   270cc:	9300      	str	r3, [sp, #0]
   270ce:	ab05      	add	r3, sp, #20
   270d0:	4632      	mov	r2, r6
   270d2:	4629      	mov	r1, r5
   270d4:	4620      	mov	r0, r4
   270d6:	f7ff ff95 	bl	27004 <ble_gatts_val_access>
}
   270da:	b009      	add	sp, #36	; 0x24
   270dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000270de <ble_gatts_dsc_access>:
{
   270de:	b5f0      	push	{r4, r5, r6, r7, lr}
   270e0:	b089      	sub	sp, #36	; 0x24
   270e2:	4604      	mov	r4, r0
   270e4:	460d      	mov	r5, r1
   270e6:	461e      	mov	r6, r3
   270e8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   270ea:	4610      	mov	r0, r2
   270ec:	f7ff fbc2 	bl	26874 <ble_gatts_dsc_op>
   270f0:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   270f4:	9707      	str	r7, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   270f6:	f7ff fbc3 	bl	26880 <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   270fa:	68fb      	ldr	r3, [r7, #12]
   270fc:	9302      	str	r3, [sp, #8]
   270fe:	68bb      	ldr	r3, [r7, #8]
   27100:	9301      	str	r3, [sp, #4]
   27102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27104:	9300      	str	r3, [sp, #0]
   27106:	ab05      	add	r3, sp, #20
   27108:	4632      	mov	r2, r6
   2710a:	4629      	mov	r1, r5
   2710c:	4620      	mov	r0, r4
   2710e:	f7ff ff79 	bl	27004 <ble_gatts_val_access>
}
   27112:	b009      	add	sp, #36	; 0x24
   27114:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027116 <ble_gatts_mutable>:
{
   27116:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   27118:	f7fd fdb4 	bl	24c84 <ble_gap_adv_active>
   2711c:	b108      	cbz	r0, 27122 <ble_gatts_mutable+0xc>
        return false;
   2711e:	2000      	movs	r0, #0
}
   27120:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   27122:	f7fd feb7 	bl	24e94 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   27126:	2800      	cmp	r0, #0
   27128:	d1f9      	bne.n	2711e <ble_gatts_mutable+0x8>
        ble_gap_conn_active()) {
   2712a:	f7fd feb5 	bl	24e98 <ble_gap_conn_active>
        ble_gap_disc_active() ||
   2712e:	2800      	cmp	r0, #0
   27130:	d1f5      	bne.n	2711e <ble_gatts_mutable+0x8>
    if (ble_hs_conn_first() != NULL) {
   27132:	f001 fa83 	bl	2863c <ble_hs_conn_first>
   27136:	b108      	cbz	r0, 2713c <ble_gatts_mutable+0x26>
        return false;
   27138:	2000      	movs	r0, #0
   2713a:	e7f1      	b.n	27120 <ble_gatts_mutable+0xa>
    return true;
   2713c:	2001      	movs	r0, #1
   2713e:	e7ef      	b.n	27120 <ble_gatts_mutable+0xa>

00027140 <ble_gatts_free_mem>:
{
   27140:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   27142:	4c06      	ldr	r4, [pc, #24]	; (2715c <ble_gatts_free_mem+0x1c>)
   27144:	6820      	ldr	r0, [r4, #0]
   27146:	f00b f8e1 	bl	3230c <free>
    ble_gatts_clt_cfg_mem = NULL;
   2714a:	2500      	movs	r5, #0
   2714c:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   2714e:	4c04      	ldr	r4, [pc, #16]	; (27160 <ble_gatts_free_mem+0x20>)
   27150:	6820      	ldr	r0, [r4, #0]
   27152:	f00b f8db 	bl	3230c <free>
    ble_gatts_svc_entries = NULL;
   27156:	6025      	str	r5, [r4, #0]
}
   27158:	bd38      	pop	{r3, r4, r5, pc}
   2715a:	bf00      	nop
   2715c:	10002ec8 	.word	0x10002ec8
   27160:	10002f30 	.word	0x10002f30

00027164 <ble_gatts_free_svc_defs>:
{
   27164:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   27166:	4c04      	ldr	r4, [pc, #16]	; (27178 <ble_gatts_free_svc_defs+0x14>)
   27168:	6820      	ldr	r0, [r4, #0]
   2716a:	f00b f8cf 	bl	3230c <free>
    ble_gatts_svc_defs = NULL;
   2716e:	2300      	movs	r3, #0
   27170:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   27172:	4a02      	ldr	r2, [pc, #8]	; (2717c <ble_gatts_free_svc_defs+0x18>)
   27174:	6013      	str	r3, [r2, #0]
}
   27176:	bd10      	pop	{r4, pc}
   27178:	10002f2c 	.word	0x10002f2c
   2717c:	10002ef0 	.word	0x10002ef0

00027180 <ble_gatts_tx_notifications_one_chr>:
{
   27180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27184:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   27186:	4601      	mov	r1, r0
   27188:	4b17      	ldr	r3, [pc, #92]	; (271e8 <ble_gatts_tx_notifications_one_chr+0x68>)
   2718a:	6818      	ldr	r0, [r3, #0]
   2718c:	f7ff fb94 	bl	268b8 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   27190:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27194:	d026      	beq.n	271e4 <ble_gatts_tx_notifications_one_chr+0x64>
   27196:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   27198:	2600      	movs	r6, #0
   2719a:	e008      	b.n	271ae <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   2719c:	2400      	movs	r4, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2719e:	f64f 77ff 	movw	r7, #65535	; 0xffff
   271a2:	e013      	b.n	271cc <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
   271a4:	4641      	mov	r1, r8
   271a6:	4638      	mov	r0, r7
   271a8:	f7ff f9d8 	bl	2655c <ble_gattc_notify>
    for (i = 0; ; i++) {
   271ac:	3601      	adds	r6, #1
        ble_hs_lock();
   271ae:	f000 fbb7 	bl	27920 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   271b2:	4630      	mov	r0, r6
   271b4:	f001 fa2c 	bl	28610 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   271b8:	4605      	mov	r5, r0
   271ba:	2800      	cmp	r0, #0
   271bc:	d0ee      	beq.n	2719c <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   271be:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   271c0:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   271c4:	f7ff fbbc 	bl	26940 <ble_gatts_schedule_update>
   271c8:	4604      	mov	r4, r0
            conn_handle = conn->bhc_handle;
   271ca:	88af      	ldrh	r7, [r5, #4]
        ble_hs_unlock();
   271cc:	f000 fbac 	bl	27928 <ble_hs_unlock>
        if (conn == NULL) {
   271d0:	b145      	cbz	r5, 271e4 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   271d2:	2c1b      	cmp	r4, #27
   271d4:	d0e6      	beq.n	271a4 <ble_gatts_tx_notifications_one_chr+0x24>
   271d6:	2c1d      	cmp	r4, #29
   271d8:	d1e8      	bne.n	271ac <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
   271da:	4641      	mov	r1, r8
   271dc:	4638      	mov	r0, r7
   271de:	f7ff fa25 	bl	2662c <ble_gattc_indicate>
            break;
   271e2:	e7e3      	b.n	271ac <ble_gatts_tx_notifications_one_chr+0x2c>
}
   271e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   271e8:	10002ee8 	.word	0x10002ee8

000271ec <ble_gatts_register_svcs>:
{
   271ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   271ee:	b083      	sub	sp, #12
   271f0:	460e      	mov	r6, r1
   271f2:	4617      	mov	r7, r2
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   271f4:	2400      	movs	r4, #0
   271f6:	0123      	lsls	r3, r4, #4
   271f8:	eb00 1104 	add.w	r1, r0, r4, lsl #4
   271fc:	5cc3      	ldrb	r3, [r0, r3]
   271fe:	b19b      	cbz	r3, 27228 <ble_gatts_register_svcs+0x3c>
        idx = ble_gatts_num_svc_entries + i;
   27200:	4b15      	ldr	r3, [pc, #84]	; (27258 <ble_gatts_register_svcs+0x6c>)
   27202:	881b      	ldrh	r3, [r3, #0]
   27204:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   27206:	4a15      	ldr	r2, [pc, #84]	; (2725c <ble_gatts_register_svcs+0x70>)
   27208:	8812      	ldrh	r2, [r2, #0]
   2720a:	429a      	cmp	r2, r3
   2720c:	dd1f      	ble.n	2724e <ble_gatts_register_svcs+0x62>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   2720e:	4a14      	ldr	r2, [pc, #80]	; (27260 <ble_gatts_register_svcs+0x74>)
   27210:	6812      	ldr	r2, [r2, #0]
   27212:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   27216:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   2721a:	2300      	movs	r3, #0
   2721c:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   2721e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27222:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   27224:	3401      	adds	r4, #1
   27226:	e7e6      	b.n	271f6 <ble_gatts_register_svcs+0xa>
    ble_gatts_num_svc_entries += num_svcs;
   27228:	4a0b      	ldr	r2, [pc, #44]	; (27258 <ble_gatts_register_svcs+0x6c>)
   2722a:	8813      	ldrh	r3, [r2, #0]
   2722c:	4423      	add	r3, r4
   2722e:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   27230:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   27232:	42a5      	cmp	r5, r4
   27234:	da09      	bge.n	2724a <ble_gatts_register_svcs+0x5e>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   27236:	463a      	mov	r2, r7
   27238:	4631      	mov	r1, r6
   2723a:	a801      	add	r0, sp, #4
   2723c:	f7ff fe34 	bl	26ea8 <ble_gatts_register_round>
        if (rc != 0) {
   27240:	4603      	mov	r3, r0
   27242:	b928      	cbnz	r0, 27250 <ble_gatts_register_svcs+0x64>
        total_registered += cur_registered;
   27244:	9b01      	ldr	r3, [sp, #4]
   27246:	441d      	add	r5, r3
   27248:	e7f3      	b.n	27232 <ble_gatts_register_svcs+0x46>
    return 0;
   2724a:	2300      	movs	r3, #0
   2724c:	e000      	b.n	27250 <ble_gatts_register_svcs+0x64>
            return BLE_HS_ENOMEM;
   2724e:	2306      	movs	r3, #6
}
   27250:	4618      	mov	r0, r3
   27252:	b003      	add	sp, #12
   27254:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27256:	bf00      	nop
   27258:	10002ef4 	.word	0x10002ef4
   2725c:	1000303c 	.word	0x1000303c
   27260:	10002f30 	.word	0x10002f30

00027264 <ble_gatts_connection_broken>:
{
   27264:	b5f0      	push	{r4, r5, r6, r7, lr}
   27266:	b083      	sub	sp, #12
   27268:	4606      	mov	r6, r0
    ble_hs_lock();
   2726a:	f000 fb59 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2726e:	4630      	mov	r0, r6
   27270:	f001 f9b2 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   27274:	4604      	mov	r4, r0
   27276:	b120      	cbz	r0, 27282 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   27278:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   2727a:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   2727c:	2300      	movs	r3, #0
   2727e:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   27280:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   27282:	f000 fb51 	bl	27928 <ble_hs_unlock>
    if (conn == NULL) {
   27286:	b1bc      	cbz	r4, 272b8 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   27288:	4630      	mov	r0, r6
   2728a:	f7ff f96c 	bl	26566 <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   2728e:	b19d      	cbz	r5, 272b8 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   27290:	2400      	movs	r4, #0
   27292:	e00b      	b.n	272ac <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   27294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   27298:	789b      	ldrb	r3, [r3, #2]
   2729a:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   2729e:	2200      	movs	r2, #0
   272a0:	9200      	str	r2, [sp, #0]
   272a2:	2202      	movs	r2, #2
   272a4:	4630      	mov	r0, r6
   272a6:	f7ff fc55 	bl	26b54 <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   272aa:	3401      	adds	r4, #1
   272ac:	42a7      	cmp	r7, r4
   272ae:	dcf1      	bgt.n	27294 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   272b0:	4629      	mov	r1, r5
   272b2:	4802      	ldr	r0, [pc, #8]	; (272bc <ble_gatts_connection_broken+0x58>)
   272b4:	f7ee fdcf 	bl	15e56 <os_memblock_put>
}
   272b8:	b003      	add	sp, #12
   272ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   272bc:	10002ecc 	.word	0x10002ecc

000272c0 <ble_gatts_start>:
{
   272c0:	b570      	push	{r4, r5, r6, lr}
   272c2:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   272c4:	4b43      	ldr	r3, [pc, #268]	; (273d4 <ble_gatts_start+0x114>)
   272c6:	681b      	ldr	r3, [r3, #0]
   272c8:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   272ca:	f000 fb29 	bl	27920 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   272ce:	f7ff ff22 	bl	27116 <ble_gatts_mutable>
   272d2:	b948      	cbnz	r0, 272e8 <ble_gatts_start+0x28>
        rc = BLE_HS_EBUSY;
   272d4:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   272d6:	f7ff ff33 	bl	27140 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   272da:	f7ff ff43 	bl	27164 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   272de:	f000 fb23 	bl	27928 <ble_hs_unlock>
}
   272e2:	4620      	mov	r0, r4
   272e4:	b004      	add	sp, #16
   272e6:	bd70      	pop	{r4, r5, r6, pc}
    ble_gatts_free_mem();
   272e8:	f7ff ff2a 	bl	27140 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   272ec:	f7fc feb2 	bl	24054 <ble_att_svr_start>
    if (rc != 0) {
   272f0:	4604      	mov	r4, r0
   272f2:	2800      	cmp	r0, #0
   272f4:	d168      	bne.n	273c8 <ble_gatts_start+0x108>
    if (ble_hs_max_client_configs > 0) {
   272f6:	4b38      	ldr	r3, [pc, #224]	; (273d8 <ble_gatts_start+0x118>)
   272f8:	8818      	ldrh	r0, [r3, #0]
   272fa:	b9b0      	cbnz	r0, 2732a <ble_gatts_start+0x6a>
    if (ble_hs_max_services > 0) {
   272fc:	4b37      	ldr	r3, [pc, #220]	; (273dc <ble_gatts_start+0x11c>)
   272fe:	8818      	ldrh	r0, [r3, #0]
   27300:	b9e0      	cbnz	r0, 2733c <ble_gatts_start+0x7c>
    ble_gatts_num_svc_entries = 0;
   27302:	4b37      	ldr	r3, [pc, #220]	; (273e0 <ble_gatts_start+0x120>)
   27304:	2200      	movs	r2, #0
   27306:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   27308:	4b36      	ldr	r3, [pc, #216]	; (273e4 <ble_gatts_start+0x124>)
   2730a:	681b      	ldr	r3, [r3, #0]
   2730c:	42a3      	cmp	r3, r4
   2730e:	dd1e      	ble.n	2734e <ble_gatts_start+0x8e>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   27310:	4b35      	ldr	r3, [pc, #212]	; (273e8 <ble_gatts_start+0x128>)
   27312:	6818      	ldr	r0, [r3, #0]
   27314:	4b35      	ldr	r3, [pc, #212]	; (273ec <ble_gatts_start+0x12c>)
   27316:	685a      	ldr	r2, [r3, #4]
   27318:	6819      	ldr	r1, [r3, #0]
   2731a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   2731e:	f7ff ff65 	bl	271ec <ble_gatts_register_svcs>
        if (rc != 0) {
   27322:	2800      	cmp	r0, #0
   27324:	d14f      	bne.n	273c6 <ble_gatts_start+0x106>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   27326:	3401      	adds	r4, #1
   27328:	e7ee      	b.n	27308 <ble_gatts_start+0x48>
        ble_gatts_clt_cfg_mem = malloc(
   2732a:	0080      	lsls	r0, r0, #2
   2732c:	f00a ffb8 	bl	322a0 <malloc>
   27330:	4b2f      	ldr	r3, [pc, #188]	; (273f0 <ble_gatts_start+0x130>)
   27332:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   27334:	2800      	cmp	r0, #0
   27336:	d1e1      	bne.n	272fc <ble_gatts_start+0x3c>
            rc = BLE_HS_ENOMEM;
   27338:	2406      	movs	r4, #6
   2733a:	e7cc      	b.n	272d6 <ble_gatts_start+0x16>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   2733c:	00c0      	lsls	r0, r0, #3
   2733e:	f00a ffaf 	bl	322a0 <malloc>
        ble_gatts_svc_entries =
   27342:	4b2c      	ldr	r3, [pc, #176]	; (273f4 <ble_gatts_start+0x134>)
   27344:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   27346:	2800      	cmp	r0, #0
   27348:	d1db      	bne.n	27302 <ble_gatts_start+0x42>
            rc = BLE_HS_ENOMEM;
   2734a:	2406      	movs	r4, #6
   2734c:	e7c3      	b.n	272d6 <ble_gatts_start+0x16>
    ble_gatts_free_svc_defs();
   2734e:	f7ff ff09 	bl	27164 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   27352:	4b29      	ldr	r3, [pc, #164]	; (273f8 <ble_gatts_start+0x138>)
   27354:	681c      	ldr	r4, [r3, #0]
   27356:	2c00      	cmp	r4, #0
   27358:	d0c1      	beq.n	272de <ble_gatts_start+0x1e>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   2735a:	4b1f      	ldr	r3, [pc, #124]	; (273d8 <ble_gatts_start+0x118>)
   2735c:	881b      	ldrh	r3, [r3, #0]
   2735e:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   27362:	f7ff fae7 	bl	26934 <ble_gatts_clt_cfg_size>
   27366:	4602      	mov	r2, r0
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   27368:	4b24      	ldr	r3, [pc, #144]	; (273fc <ble_gatts_start+0x13c>)
   2736a:	9300      	str	r3, [sp, #0]
   2736c:	4b20      	ldr	r3, [pc, #128]	; (273f0 <ble_gatts_start+0x130>)
   2736e:	681b      	ldr	r3, [r3, #0]
   27370:	b2a1      	uxth	r1, r4
   27372:	4823      	ldr	r0, [pc, #140]	; (27400 <ble_gatts_start+0x140>)
   27374:	f7ee fd1e 	bl	15db4 <os_mempool_init>
   27378:	4606      	mov	r6, r0
   2737a:	4604      	mov	r4, r0
    if (rc != 0) {
   2737c:	b108      	cbz	r0, 27382 <ble_gatts_start+0xc2>
        rc = BLE_HS_EOS;
   2737e:	240b      	movs	r4, #11
   27380:	e7a9      	b.n	272d6 <ble_gatts_start+0x16>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   27382:	481f      	ldr	r0, [pc, #124]	; (27400 <ble_gatts_start+0x140>)
   27384:	f7ee fd3f 	bl	15e06 <os_memblock_get>
   27388:	4b1e      	ldr	r3, [pc, #120]	; (27404 <ble_gatts_start+0x144>)
   2738a:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   2738c:	b1f8      	cbz	r0, 273ce <ble_gatts_start+0x10e>
    ha = NULL;
   2738e:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   27390:	f64f 72ff 	movw	r2, #65535	; 0xffff
   27394:	a903      	add	r1, sp, #12
   27396:	4628      	mov	r0, r5
   27398:	f7fc f942 	bl	23620 <ble_att_svr_find_by_uuid>
   2739c:	4605      	mov	r5, r0
   2739e:	b198      	cbz	r0, 273c8 <ble_gatts_start+0x108>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   273a0:	6928      	ldr	r0, [r5, #16]
   273a2:	f7ff f9af 	bl	26704 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   273a6:	4602      	mov	r2, r0
   273a8:	2800      	cmp	r0, #0
   273aa:	d0f1      	beq.n	27390 <ble_gatts_start+0xd0>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   273ac:	896b      	ldrh	r3, [r5, #10]
   273ae:	4915      	ldr	r1, [pc, #84]	; (27404 <ble_gatts_start+0x144>)
   273b0:	6808      	ldr	r0, [r1, #0]
   273b2:	eb00 0186 	add.w	r1, r0, r6, lsl #2
   273b6:	3301      	adds	r3, #1
   273b8:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   273bc:	70ca      	strb	r2, [r1, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   273be:	2300      	movs	r3, #0
   273c0:	708b      	strb	r3, [r1, #2]
            idx++;
   273c2:	3601      	adds	r6, #1
   273c4:	e7e4      	b.n	27390 <ble_gatts_start+0xd0>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   273c6:	4604      	mov	r4, r0
    if (rc != 0) {
   273c8:	2c00      	cmp	r4, #0
   273ca:	d088      	beq.n	272de <ble_gatts_start+0x1e>
   273cc:	e783      	b.n	272d6 <ble_gatts_start+0x16>
        rc = BLE_HS_ENOMEM;
   273ce:	2406      	movs	r4, #6
   273d0:	e781      	b.n	272d6 <ble_gatts_start+0x16>
   273d2:	bf00      	nop
   273d4:	00033c98 	.word	0x00033c98
   273d8:	1000303a 	.word	0x1000303a
   273dc:	1000303c 	.word	0x1000303c
   273e0:	10002ef4 	.word	0x10002ef4
   273e4:	10002ef0 	.word	0x10002ef0
   273e8:	10002f2c 	.word	0x10002f2c
   273ec:	100002d8 	.word	0x100002d8
   273f0:	10002ec8 	.word	0x10002ec8
   273f4:	10002f30 	.word	0x10002f30
   273f8:	10002eec 	.word	0x10002eec
   273fc:	00034c5c 	.word	0x00034c5c
   27400:	10002ecc 	.word	0x10002ecc
   27404:	10002ee8 	.word	0x10002ee8

00027408 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   27408:	4b05      	ldr	r3, [pc, #20]	; (27420 <ble_gatts_conn_can_alloc+0x18>)
   2740a:	681b      	ldr	r3, [r3, #0]
   2740c:	b123      	cbz	r3, 27418 <ble_gatts_conn_can_alloc+0x10>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   2740e:	4b05      	ldr	r3, [pc, #20]	; (27424 <ble_gatts_conn_can_alloc+0x1c>)
   27410:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   27412:	b11b      	cbz	r3, 2741c <ble_gatts_conn_can_alloc+0x14>
   27414:	2001      	movs	r0, #1
   27416:	4770      	bx	lr
   27418:	2001      	movs	r0, #1
   2741a:	4770      	bx	lr
   2741c:	2000      	movs	r0, #0
}
   2741e:	4770      	bx	lr
   27420:	10002eec 	.word	0x10002eec
   27424:	10002ecc 	.word	0x10002ecc

00027428 <ble_gatts_conn_init>:
{
   27428:	b570      	push	{r4, r5, r6, lr}
   2742a:	4604      	mov	r4, r0
    if (ble_gatts_num_cfgable_chrs > 0) {
   2742c:	4b0e      	ldr	r3, [pc, #56]	; (27468 <ble_gatts_conn_init+0x40>)
   2742e:	681b      	ldr	r3, [r3, #0]
   27430:	2b00      	cmp	r3, #0
   27432:	dc03      	bgt.n	2743c <ble_gatts_conn_init+0x14>
        gatts_conn->clt_cfgs = NULL;
   27434:	2000      	movs	r0, #0
   27436:	6020      	str	r0, [r4, #0]
        gatts_conn->num_clt_cfgs = 0;
   27438:	6060      	str	r0, [r4, #4]
}
   2743a:	bd70      	pop	{r4, r5, r6, pc}
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   2743c:	480b      	ldr	r0, [pc, #44]	; (2746c <ble_gatts_conn_init+0x44>)
   2743e:	f7ee fce2 	bl	15e06 <os_memblock_get>
   27442:	4605      	mov	r5, r0
   27444:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   27446:	b168      	cbz	r0, 27464 <ble_gatts_conn_init+0x3c>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   27448:	4b09      	ldr	r3, [pc, #36]	; (27470 <ble_gatts_conn_init+0x48>)
   2744a:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   2744c:	f7ff fa72 	bl	26934 <ble_gatts_clt_cfg_size>
   27450:	4602      	mov	r2, r0
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   27452:	4631      	mov	r1, r6
   27454:	4628      	mov	r0, r5
   27456:	f7ef fb29 	bl	16aac <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   2745a:	4b03      	ldr	r3, [pc, #12]	; (27468 <ble_gatts_conn_init+0x40>)
   2745c:	681b      	ldr	r3, [r3, #0]
   2745e:	6063      	str	r3, [r4, #4]
    return 0;
   27460:	2000      	movs	r0, #0
   27462:	e7ea      	b.n	2743a <ble_gatts_conn_init+0x12>
            return BLE_HS_ENOMEM;
   27464:	2006      	movs	r0, #6
   27466:	e7e8      	b.n	2743a <ble_gatts_conn_init+0x12>
   27468:	10002eec 	.word	0x10002eec
   2746c:	10002ecc 	.word	0x10002ecc
   27470:	10002ee8 	.word	0x10002ee8

00027474 <ble_gatts_send_next_indicate>:
{
   27474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27476:	4606      	mov	r6, r0
    ble_hs_lock();
   27478:	f000 fa52 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2747c:	4630      	mov	r0, r6
   2747e:	f001 f8ab 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   27482:	4604      	mov	r4, r0
   27484:	b108      	cbz	r0, 2748a <ble_gatts_send_next_indicate+0x16>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   27486:	2200      	movs	r2, #0
   27488:	e002      	b.n	27490 <ble_gatts_send_next_indicate+0x1c>
    chr_val_handle = 0;
   2748a:	2700      	movs	r7, #0
   2748c:	e011      	b.n	274b2 <ble_gatts_send_next_indicate+0x3e>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   2748e:	3201      	adds	r2, #1
   27490:	6d23      	ldr	r3, [r4, #80]	; 0x50
   27492:	4293      	cmp	r3, r2
   27494:	dd0c      	ble.n	274b0 <ble_gatts_send_next_indicate+0x3c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   27496:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   27498:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   2749c:	789d      	ldrb	r5, [r3, #2]
   2749e:	f993 1002 	ldrsb.w	r1, [r3, #2]
   274a2:	2900      	cmp	r1, #0
   274a4:	daf3      	bge.n	2748e <ble_gatts_send_next_indicate+0x1a>
                chr_val_handle = clt_cfg->chr_val_handle;
   274a6:	881f      	ldrh	r7, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   274a8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   274ac:	709d      	strb	r5, [r3, #2]
                break;
   274ae:	e000      	b.n	274b2 <ble_gatts_send_next_indicate+0x3e>
    chr_val_handle = 0;
   274b0:	2700      	movs	r7, #0
    ble_hs_unlock();
   274b2:	f000 fa39 	bl	27928 <ble_hs_unlock>
    if (conn == NULL) {
   274b6:	b12c      	cbz	r4, 274c4 <ble_gatts_send_next_indicate+0x50>
    if (chr_val_handle == 0) {
   274b8:	b137      	cbz	r7, 274c8 <ble_gatts_send_next_indicate+0x54>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   274ba:	4639      	mov	r1, r7
   274bc:	4630      	mov	r0, r6
   274be:	f7ff f8b5 	bl	2662c <ble_gattc_indicate>
}
   274c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   274c4:	2007      	movs	r0, #7
   274c6:	e7fc      	b.n	274c2 <ble_gatts_send_next_indicate+0x4e>
        return BLE_HS_ENOENT;
   274c8:	2005      	movs	r0, #5
   274ca:	e7fa      	b.n	274c2 <ble_gatts_send_next_indicate+0x4e>

000274cc <ble_gatts_rx_indicate_ack>:
{
   274cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274d0:	b084      	sub	sp, #16
   274d2:	4606      	mov	r6, r0
   274d4:	460d      	mov	r5, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   274d6:	4b2f      	ldr	r3, [pc, #188]	; (27594 <ble_gatts_rx_indicate_ack+0xc8>)
   274d8:	681c      	ldr	r4, [r3, #0]
   274da:	4620      	mov	r0, r4
   274dc:	f7ff f9ec 	bl	268b8 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   274e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   274e4:	d04e      	beq.n	27584 <ble_gatts_rx_indicate_ack+0xb8>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   274e6:	ea4f 0880 	mov.w	r8, r0, lsl #2
   274ea:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   274ee:	78e3      	ldrb	r3, [r4, #3]
   274f0:	f013 0f02 	tst.w	r3, #2
   274f4:	d048      	beq.n	27588 <ble_gatts_rx_indicate_ack+0xbc>
    ble_hs_lock();
   274f6:	f000 fa13 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   274fa:	4630      	mov	r0, r6
   274fc:	f001 f86c 	bl	285d8 <ble_hs_conn_find>
   27500:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   27502:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   27506:	42aa      	cmp	r2, r5
   27508:	d006      	beq.n	27518 <ble_gatts_rx_indicate_ack+0x4c>
        rc = BLE_HS_ENOENT;
   2750a:	2405      	movs	r4, #5
    ble_hs_unlock();
   2750c:	f000 fa0c 	bl	27928 <ble_hs_unlock>
    if (rc != 0) {
   27510:	bbdc      	cbnz	r4, 2758a <ble_gatts_rx_indicate_ack+0xbe>
    if (persist) {
   27512:	bb9f      	cbnz	r7, 2757c <ble_gatts_rx_indicate_ack+0xb0>
    return 0;
   27514:	463c      	mov	r4, r7
   27516:	e038      	b.n	2758a <ble_gatts_rx_indicate_ack+0xbe>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   27518:	2200      	movs	r2, #0
   2751a:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2751e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   27520:	4490      	add	r8, r2
        persist = conn->bhc_sec_state.bonded &&
   27522:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   27526:	f012 0f04 	tst.w	r2, #4
   2752a:	d024      	beq.n	27576 <ble_gatts_rx_indicate_ack+0xaa>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   2752c:	f998 2002 	ldrsb.w	r2, [r8, #2]
        persist = conn->bhc_sec_state.bonded &&
   27530:	2a00      	cmp	r2, #0
   27532:	da02      	bge.n	2753a <ble_gatts_rx_indicate_ack+0x6e>
        rc = 0;
   27534:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   27536:	4627      	mov	r7, r4
   27538:	e7e8      	b.n	2750c <ble_gatts_rx_indicate_ack+0x40>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   2753a:	4602      	mov	r2, r0
   2753c:	f852 0f07 	ldr.w	r0, [r2, #7]!
   27540:	9000      	str	r0, [sp, #0]
   27542:	8891      	ldrh	r1, [r2, #4]
   27544:	7992      	ldrb	r2, [r2, #6]
   27546:	f8ad 1004 	strh.w	r1, [sp, #4]
   2754a:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2754e:	79d8      	ldrb	r0, [r3, #7]
   27550:	f002 f93d 	bl	297ce <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   27554:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   27558:	f8ad 5008 	strh.w	r5, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   2755c:	f898 3002 	ldrb.w	r3, [r8, #2]
   27560:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   27564:	f89d 300c 	ldrb.w	r3, [sp, #12]
   27568:	f36f 0300 	bfc	r3, #0, #1
   2756c:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   27570:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   27572:	2701      	movs	r7, #1
   27574:	e7ca      	b.n	2750c <ble_gatts_rx_indicate_ack+0x40>
        rc = 0;
   27576:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   27578:	4627      	mov	r7, r4
   2757a:	e7c7      	b.n	2750c <ble_gatts_rx_indicate_ack+0x40>
        rc = ble_store_write_cccd(&cccd_value);
   2757c:	4668      	mov	r0, sp
   2757e:	f004 ff11 	bl	2c3a4 <ble_store_write_cccd>
        if (rc != 0) {
   27582:	e002      	b.n	2758a <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   27584:	2405      	movs	r4, #5
   27586:	e000      	b.n	2758a <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   27588:	2405      	movs	r4, #5
}
   2758a:	4620      	mov	r0, r4
   2758c:	b004      	add	sp, #16
   2758e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27592:	bf00      	nop
   27594:	10002ee8 	.word	0x10002ee8

00027598 <ble_gatts_tx_notifications>:
{
   27598:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2759a:	2400      	movs	r4, #0
   2759c:	4b06      	ldr	r3, [pc, #24]	; (275b8 <ble_gatts_tx_notifications+0x20>)
   2759e:	681b      	ldr	r3, [r3, #0]
   275a0:	42a3      	cmp	r3, r4
   275a2:	dd07      	ble.n	275b4 <ble_gatts_tx_notifications+0x1c>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   275a4:	4b05      	ldr	r3, [pc, #20]	; (275bc <ble_gatts_tx_notifications+0x24>)
   275a6:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   275a8:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   275ac:	f7ff fde8 	bl	27180 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   275b0:	3401      	adds	r4, #1
   275b2:	e7f3      	b.n	2759c <ble_gatts_tx_notifications+0x4>
}
   275b4:	bd10      	pop	{r4, pc}
   275b6:	bf00      	nop
   275b8:	10002eec 	.word	0x10002eec
   275bc:	10002ee8 	.word	0x10002ee8

000275c0 <ble_gatts_bonding_established>:
{
   275c0:	b570      	push	{r4, r5, r6, lr}
   275c2:	b084      	sub	sp, #16
   275c4:	4606      	mov	r6, r0
    ble_hs_lock();
   275c6:	f000 f9ab 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   275ca:	4630      	mov	r0, r6
   275cc:	f001 f804 	bl	285d8 <ble_hs_conn_find>
   275d0:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
   275d2:	4603      	mov	r3, r0
   275d4:	f853 0f07 	ldr.w	r0, [r3, #7]!
   275d8:	9000      	str	r0, [sp, #0]
   275da:	889a      	ldrh	r2, [r3, #4]
   275dc:	799b      	ldrb	r3, [r3, #6]
   275de:	f8ad 2004 	strh.w	r2, [sp, #4]
   275e2:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   275e6:	79e8      	ldrb	r0, [r5, #7]
   275e8:	f002 f8f1 	bl	297ce <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
   275ec:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   275f0:	2400      	movs	r4, #0
   275f2:	e017      	b.n	27624 <ble_gatts_bonding_established+0x64>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
   275f4:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
   275f8:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   275fc:	789b      	ldrb	r3, [r3, #2]
   275fe:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   27602:	f89d 300c 	ldrb.w	r3, [sp, #12]
   27606:	f36f 0300 	bfc	r3, #0, #1
   2760a:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
   2760e:	f000 f98b 	bl	27928 <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
   27612:	4668      	mov	r0, sp
   27614:	f004 fec6 	bl	2c3a4 <ble_store_write_cccd>
            ble_hs_lock();
   27618:	f000 f982 	bl	27920 <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
   2761c:	4630      	mov	r0, r6
   2761e:	f000 ffdb 	bl	285d8 <ble_hs_conn_find>
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   27622:	3401      	adds	r4, #1
   27624:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   27626:	42a3      	cmp	r3, r4
   27628:	dd06      	ble.n	27638 <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
   2762a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   2762c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
   27630:	7899      	ldrb	r1, [r3, #2]
   27632:	2900      	cmp	r1, #0
   27634:	d0f5      	beq.n	27622 <ble_gatts_bonding_established+0x62>
   27636:	e7dd      	b.n	275f4 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
   27638:	f000 f976 	bl	27928 <ble_hs_unlock>
}
   2763c:	b004      	add	sp, #16
   2763e:	bd70      	pop	{r4, r5, r6, pc}

00027640 <ble_gatts_bonding_restored>:
{
   27640:	b570      	push	{r4, r5, r6, lr}
   27642:	b08a      	sub	sp, #40	; 0x28
   27644:	4606      	mov	r6, r0
    ble_hs_lock();
   27646:	f000 f96b 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2764a:	4630      	mov	r0, r6
   2764c:	f000 ffc4 	bl	285d8 <ble_hs_conn_find>
   27650:	4603      	mov	r3, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
   27652:	4602      	mov	r2, r0
   27654:	f852 0f07 	ldr.w	r0, [r2, #7]!
   27658:	9003      	str	r0, [sp, #12]
   2765a:	8891      	ldrh	r1, [r2, #4]
   2765c:	7992      	ldrb	r2, [r2, #6]
   2765e:	f8ad 1010 	strh.w	r1, [sp, #16]
   27662:	f88d 2012 	strb.w	r2, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   27666:	79d8      	ldrb	r0, [r3, #7]
   27668:	f002 f8b1 	bl	297ce <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
   2766c:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
   27670:	2300      	movs	r3, #0
   27672:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
   27676:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
   2767a:	f000 f955 	bl	27928 <ble_hs_unlock>
   2767e:	e015      	b.n	276ac <ble_gatts_bonding_restored+0x6c>
        att_op = 0;
   27680:	2400      	movs	r4, #0
        ble_hs_unlock();
   27682:	f000 f951 	bl	27928 <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
   27686:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2768a:	9300      	str	r3, [sp, #0]
   2768c:	2300      	movs	r3, #0
   2768e:	2203      	movs	r2, #3
   27690:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   27694:	4630      	mov	r0, r6
   27696:	f7ff fa5d 	bl	26b54 <ble_gatts_subscribe_event>
        switch (att_op) {
   2769a:	2c1b      	cmp	r4, #27
   2769c:	d029      	beq.n	276f2 <ble_gatts_bonding_restored+0xb2>
   2769e:	2c1d      	cmp	r4, #29
   276a0:	d038      	beq.n	27714 <ble_gatts_bonding_restored+0xd4>
        cccd_key.idx++;
   276a2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   276a6:	3301      	adds	r3, #1
   276a8:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   276ac:	a906      	add	r1, sp, #24
   276ae:	a803      	add	r0, sp, #12
   276b0:	f004 fe71 	bl	2c396 <ble_store_read_cccd>
        if (rc != 0) {
   276b4:	bba0      	cbnz	r0, 27720 <ble_gatts_bonding_restored+0xe0>
        ble_hs_lock();
   276b6:	f000 f933 	bl	27920 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   276ba:	4630      	mov	r0, r6
   276bc:	f000 ff8c 	bl	285d8 <ble_hs_conn_find>
   276c0:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   276c2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   276c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   276c8:	f7ff f908 	bl	268dc <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
   276cc:	4601      	mov	r1, r0
   276ce:	2800      	cmp	r0, #0
   276d0:	d0d6      	beq.n	27680 <ble_gatts_bonding_restored+0x40>
            clt_cfg->flags = cccd_value.flags;
   276d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   276d6:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
   276d8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   276dc:	f014 0401 	ands.w	r4, r4, #1
   276e0:	d0cf      	beq.n	27682 <ble_gatts_bonding_restored+0x42>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   276e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   276e6:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
   276e8:	4628      	mov	r0, r5
   276ea:	f7ff f929 	bl	26940 <ble_gatts_schedule_update>
   276ee:	4604      	mov	r4, r0
   276f0:	e7c7      	b.n	27682 <ble_gatts_bonding_restored+0x42>
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
   276f2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   276f6:	4630      	mov	r0, r6
   276f8:	f7fe ff30 	bl	2655c <ble_gattc_notify>
            if (rc == 0) {
   276fc:	2800      	cmp	r0, #0
   276fe:	d1d0      	bne.n	276a2 <ble_gatts_bonding_restored+0x62>
                cccd_value.value_changed = 0;
   27700:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   27704:	f36f 0300 	bfc	r3, #0, #1
   27708:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
   2770c:	a806      	add	r0, sp, #24
   2770e:	f004 fe49 	bl	2c3a4 <ble_store_write_cccd>
   27712:	e7c6      	b.n	276a2 <ble_gatts_bonding_restored+0x62>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
   27714:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   27718:	4630      	mov	r0, r6
   2771a:	f7fe ff87 	bl	2662c <ble_gattc_indicate>
            break;
   2771e:	e7c0      	b.n	276a2 <ble_gatts_bonding_restored+0x62>
}
   27720:	b00a      	add	sp, #40	; 0x28
   27722:	bd70      	pop	{r4, r5, r6, pc}

00027724 <ble_gatts_add_svcs>:
{
   27724:	b570      	push	{r4, r5, r6, lr}
   27726:	4604      	mov	r4, r0
    ble_hs_lock();
   27728:	f000 f8fa 	bl	27920 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2772c:	f7ff fcf3 	bl	27116 <ble_gatts_mutable>
   27730:	b198      	cbz	r0, 2775a <ble_gatts_add_svcs+0x36>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   27732:	4b0c      	ldr	r3, [pc, #48]	; (27764 <ble_gatts_add_svcs+0x40>)
   27734:	681e      	ldr	r6, [r3, #0]
   27736:	1c75      	adds	r5, r6, #1
    p = realloc(ble_gatts_svc_defs,
   27738:	00a9      	lsls	r1, r5, #2
   2773a:	4b0b      	ldr	r3, [pc, #44]	; (27768 <ble_gatts_add_svcs+0x44>)
   2773c:	6818      	ldr	r0, [r3, #0]
   2773e:	f00a fe05 	bl	3234c <realloc>
    if (p == NULL) {
   27742:	b160      	cbz	r0, 2775e <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   27744:	4a08      	ldr	r2, [pc, #32]	; (27768 <ble_gatts_add_svcs+0x44>)
   27746:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   27748:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    ble_gatts_num_svc_defs++;
   2774c:	4b05      	ldr	r3, [pc, #20]	; (27764 <ble_gatts_add_svcs+0x40>)
   2774e:	601d      	str	r5, [r3, #0]
    rc = 0;
   27750:	2400      	movs	r4, #0
    ble_hs_unlock();
   27752:	f000 f8e9 	bl	27928 <ble_hs_unlock>
}
   27756:	4620      	mov	r0, r4
   27758:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBUSY;
   2775a:	240f      	movs	r4, #15
   2775c:	e7f9      	b.n	27752 <ble_gatts_add_svcs+0x2e>
        rc = BLE_HS_ENOMEM;
   2775e:	2406      	movs	r4, #6
   27760:	e7f7      	b.n	27752 <ble_gatts_add_svcs+0x2e>
   27762:	bf00      	nop
   27764:	10002ef0 	.word	0x10002ef0
   27768:	10002f2c 	.word	0x10002f2c

0002776c <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   2776c:	b500      	push	{lr}
   2776e:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   27770:	2300      	movs	r3, #0
   27772:	9301      	str	r3, [sp, #4]
   27774:	9302      	str	r3, [sp, #8]
   27776:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   27778:	a901      	add	r1, sp, #4
   2777a:	f7ff f8fd 	bl	26978 <ble_gatts_count_resources>
    if (rc != 0) {
   2777e:	b990      	cbnz	r0, 277a6 <ble_gatts_count_cfg+0x3a>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   27780:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   27784:	4a09      	ldr	r2, [pc, #36]	; (277ac <ble_gatts_count_cfg+0x40>)
   27786:	8811      	ldrh	r1, [r2, #0]
   27788:	440b      	add	r3, r1
   2778a:	8013      	strh	r3, [r2, #0]
    ble_hs_max_attrs += res.attrs;
   2778c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   27790:	4a07      	ldr	r2, [pc, #28]	; (277b0 <ble_gatts_count_cfg+0x44>)
   27792:	8811      	ldrh	r1, [r2, #0]
   27794:	440b      	add	r3, r1
   27796:	8013      	strh	r3, [r2, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   27798:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ble_hs_max_client_configs +=
   2779c:	4a05      	ldr	r2, [pc, #20]	; (277b4 <ble_gatts_count_cfg+0x48>)
   2779e:	8813      	ldrh	r3, [r2, #0]
   277a0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   277a4:	8013      	strh	r3, [r2, #0]

    return 0;
}
   277a6:	b005      	add	sp, #20
   277a8:	f85d fb04 	ldr.w	pc, [sp], #4
   277ac:	1000303c 	.word	0x1000303c
   277b0:	10003038 	.word	0x10003038
   277b4:	1000303a 	.word	0x1000303a

000277b8 <ble_gatts_init>:
    return rc;
}

int
ble_gatts_init(void)
{
   277b8:	b500      	push	{lr}
   277ba:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   277bc:	2300      	movs	r3, #0
   277be:	4a09      	ldr	r2, [pc, #36]	; (277e4 <ble_gatts_init+0x2c>)
   277c0:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   277c2:	4a09      	ldr	r2, [pc, #36]	; (277e8 <ble_gatts_init+0x30>)
   277c4:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   277c6:	4a09      	ldr	r2, [pc, #36]	; (277ec <ble_gatts_init+0x34>)
   277c8:	9201      	str	r2, [sp, #4]
   277ca:	9300      	str	r3, [sp, #0]
   277cc:	220a      	movs	r2, #10
   277ce:	2104      	movs	r1, #4
   277d0:	4807      	ldr	r0, [pc, #28]	; (277f0 <ble_gatts_init+0x38>)
   277d2:	f7f2 fd27 	bl	1a224 <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   277d6:	b910      	cbnz	r0, 277de <ble_gatts_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;

}
   277d8:	b003      	add	sp, #12
   277da:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   277de:	200b      	movs	r0, #11
   277e0:	e7fa      	b.n	277d8 <ble_gatts_init+0x20>
   277e2:	bf00      	nop
   277e4:	10002eec 	.word	0x10002eec
   277e8:	10002ee8 	.word	0x10002ee8
   277ec:	00034c74 	.word	0x00034c74
   277f0:	10002ef8 	.word	0x10002ef8

000277f4 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   277f4:	b510      	push	{r4, lr}
   277f6:	b082      	sub	sp, #8
   277f8:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   277fa:	e00a      	b.n	27812 <ble_hs_wakeup_tx_conn+0x1e>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   277fc:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   27800:	6422      	str	r2, [r4, #64]	; 0x40

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   27802:	3b10      	subs	r3, #16
   27804:	9301      	str	r3, [sp, #4]
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   27806:	a901      	add	r1, sp, #4
   27808:	4620      	mov	r0, r4
   2780a:	f001 fa93 	bl	28d34 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   2780e:	2801      	cmp	r0, #1
   27810:	d006      	beq.n	27820 <ble_hs_wakeup_tx_conn+0x2c>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   27812:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   27814:	b17b      	cbz	r3, 27836 <ble_hs_wakeup_tx_conn+0x42>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   27816:	685a      	ldr	r2, [r3, #4]
   27818:	63e2      	str	r2, [r4, #60]	; 0x3c
   2781a:	2a00      	cmp	r2, #0
   2781c:	d1f1      	bne.n	27802 <ble_hs_wakeup_tx_conn+0xe>
   2781e:	e7ed      	b.n	277fc <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   27820:	9b01      	ldr	r3, [sp, #4]
   27822:	f103 0110 	add.w	r1, r3, #16
   27826:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   27828:	615a      	str	r2, [r3, #20]
   2782a:	b10a      	cbz	r2, 27830 <ble_hs_wakeup_tx_conn+0x3c>
   2782c:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   2782e:	e003      	b.n	27838 <ble_hs_wakeup_tx_conn+0x44>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   27830:	3314      	adds	r3, #20
   27832:	6423      	str	r3, [r4, #64]	; 0x40
   27834:	e7fa      	b.n	2782c <ble_hs_wakeup_tx_conn+0x38>
        }
    }

    return 0;
   27836:	2000      	movs	r0, #0
}
   27838:	b002      	add	sp, #8
   2783a:	bd10      	pop	{r4, pc}

0002783c <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   2783c:	b510      	push	{r4, lr}
   2783e:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   27840:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   27842:	4803      	ldr	r0, [pc, #12]	; (27850 <ble_hs_event_rx_hci_ev+0x14>)
   27844:	f7ee fb07 	bl	15e56 <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
   27848:	4620      	mov	r0, r4
   2784a:	f001 fd45 	bl	292d8 <ble_hs_hci_evt_process>
}
   2784e:	bd10      	pop	{r4, pc}
   27850:	10002f7c 	.word	0x10002f7c

00027854 <ble_hs_clear_rx_queue>:
{
   27854:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   27856:	4805      	ldr	r0, [pc, #20]	; (2786c <ble_hs_clear_rx_queue+0x18>)
   27858:	f001 ffd6 	bl	29808 <ble_mqueue_get>
   2785c:	4603      	mov	r3, r0
   2785e:	b118      	cbz	r0, 27868 <ble_hs_clear_rx_queue+0x14>
        os_mbuf_free_chain(om);
   27860:	4618      	mov	r0, r3
   27862:	f7ed ff01 	bl	15668 <os_mbuf_free_chain>
   27866:	e7f6      	b.n	27856 <ble_hs_clear_rx_queue+0x2>
}
   27868:	bd08      	pop	{r3, pc}
   2786a:	bf00      	nop
   2786c:	10003054 	.word	0x10003054

00027870 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   27870:	b510      	push	{r4, lr}
   27872:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
   27874:	f001 f872 	bl	2895c <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   27878:	4622      	mov	r2, r4
   2787a:	4b06      	ldr	r3, [pc, #24]	; (27894 <ble_hs_rx_data+0x24>)
   2787c:	6819      	ldr	r1, [r3, #0]
   2787e:	4806      	ldr	r0, [pc, #24]	; (27898 <ble_hs_rx_data+0x28>)
   27880:	f001 ffd3 	bl	2982a <ble_mqueue_put>
    if (rc != 0) {
   27884:	b900      	cbnz	r0, 27888 <ble_hs_rx_data+0x18>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   27886:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   27888:	4620      	mov	r0, r4
   2788a:	f7ed feed 	bl	15668 <os_mbuf_free_chain>
        return BLE_HS_EOS;
   2788e:	200b      	movs	r0, #11
   27890:	e7f9      	b.n	27886 <ble_hs_rx_data+0x16>
   27892:	bf00      	nop
   27894:	10002f78 	.word	0x10002f78
   27898:	10003054 	.word	0x10003054

0002789c <ble_hs_event_tx_notify>:
{
   2789c:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   2789e:	f7ff fe7b 	bl	27598 <ble_gatts_tx_notifications>
}
   278a2:	bd08      	pop	{r3, pc}

000278a4 <ble_hs_evq_get>:
}
   278a4:	4b01      	ldr	r3, [pc, #4]	; (278ac <ble_hs_evq_get+0x8>)
   278a6:	6818      	ldr	r0, [r3, #0]
   278a8:	4770      	bx	lr
   278aa:	bf00      	nop
   278ac:	10002f78 	.word	0x10002f78

000278b0 <ble_hs_sched_start_stage2>:
{
   278b0:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   278b2:	f7ff fff7 	bl	278a4 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   278b6:	4902      	ldr	r1, [pc, #8]	; (278c0 <ble_hs_sched_start_stage2+0x10>)
   278b8:	f7ed fda1 	bl	153fe <os_eventq_put>
}
   278bc:	bd08      	pop	{r3, pc}
   278be:	bf00      	nop
   278c0:	10002f58 	.word	0x10002f58

000278c4 <ble_hs_event_start_stage1>:
{
   278c4:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   278c6:	f7ff fff3 	bl	278b0 <ble_hs_sched_start_stage2>
}
   278ca:	bd08      	pop	{r3, pc}

000278cc <ble_hs_evq_set>:
    ble_hs_evq = evq;
   278cc:	4b01      	ldr	r3, [pc, #4]	; (278d4 <ble_hs_evq_set+0x8>)
   278ce:	6018      	str	r0, [r3, #0]
}
   278d0:	4770      	bx	lr
   278d2:	bf00      	nop
   278d4:	10002f78 	.word	0x10002f78

000278d8 <ble_hs_is_parent_task>:
{
   278d8:	b508      	push	{r3, lr}
    return os_started();
   278da:	f7ed fb1d 	bl	14f18 <os_started>
    return !ble_npl_os_started() ||
   278de:	b908      	cbnz	r0, 278e4 <ble_hs_is_parent_task+0xc>
   278e0:	2001      	movs	r0, #1
}
   278e2:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   278e4:	f7ee fc3a 	bl	1615c <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   278e8:	4b03      	ldr	r3, [pc, #12]	; (278f8 <ble_hs_is_parent_task+0x20>)
   278ea:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   278ec:	4283      	cmp	r3, r0
   278ee:	d001      	beq.n	278f4 <ble_hs_is_parent_task+0x1c>
   278f0:	2000      	movs	r0, #0
   278f2:	e7f6      	b.n	278e2 <ble_hs_is_parent_task+0xa>
   278f4:	2001      	movs	r0, #1
   278f6:	e7f4      	b.n	278e2 <ble_hs_is_parent_task+0xa>
   278f8:	1000304c 	.word	0x1000304c

000278fc <ble_hs_lock_nested>:
{
   278fc:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   278fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27902:	4802      	ldr	r0, [pc, #8]	; (2790c <ble_hs_lock_nested+0x10>)
   27904:	f7ef f836 	bl	16974 <os_mutex_pend>
}
   27908:	bd08      	pop	{r3, pc}
   2790a:	bf00      	nop
   2790c:	10003040 	.word	0x10003040

00027910 <ble_hs_unlock_nested>:
{
   27910:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   27912:	4802      	ldr	r0, [pc, #8]	; (2791c <ble_hs_unlock_nested+0xc>)
   27914:	f7ee ffce 	bl	168b4 <os_mutex_release>
}
   27918:	bd08      	pop	{r3, pc}
   2791a:	bf00      	nop
   2791c:	10003040 	.word	0x10003040

00027920 <ble_hs_lock>:
{
   27920:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   27922:	f7ff ffeb 	bl	278fc <ble_hs_lock_nested>
}
   27926:	bd08      	pop	{r3, pc}

00027928 <ble_hs_unlock>:
{
   27928:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   2792a:	f7ff fff1 	bl	27910 <ble_hs_unlock_nested>
}
   2792e:	bd08      	pop	{r3, pc}

00027930 <ble_hs_process_rx_data_queue>:
{
   27930:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   27932:	4805      	ldr	r0, [pc, #20]	; (27948 <ble_hs_process_rx_data_queue+0x18>)
   27934:	f001 ff68 	bl	29808 <ble_mqueue_get>
   27938:	4603      	mov	r3, r0
   2793a:	b118      	cbz	r0, 27944 <ble_hs_process_rx_data_queue+0x14>
        ble_hs_hci_evt_acl_process(om);
   2793c:	4618      	mov	r0, r3
   2793e:	f001 fce9 	bl	29314 <ble_hs_hci_evt_acl_process>
   27942:	e7f6      	b.n	27932 <ble_hs_process_rx_data_queue+0x2>
}
   27944:	bd08      	pop	{r3, pc}
   27946:	bf00      	nop
   27948:	10003054 	.word	0x10003054

0002794c <ble_hs_event_rx_data>:
{
   2794c:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   2794e:	f7ff ffef 	bl	27930 <ble_hs_process_rx_data_queue>
}
   27952:	bd08      	pop	{r3, pc}

00027954 <ble_hs_wakeup_tx>:
{
   27954:	b510      	push	{r4, lr}
    ble_hs_lock();
   27956:	f7ff ffe3 	bl	27920 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   2795a:	f000 fe6f 	bl	2863c <ble_hs_conn_first>
   2795e:	b148      	cbz	r0, 27974 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   27960:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   27964:	f013 0f04 	tst.w	r3, #4
   27968:	d101      	bne.n	2796e <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   2796a:	6800      	ldr	r0, [r0, #0]
   2796c:	e7f7      	b.n	2795e <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   2796e:	f7ff ff41 	bl	277f4 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   27972:	b948      	cbnz	r0, 27988 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   27974:	f000 fe62 	bl	2863c <ble_hs_conn_first>
   27978:	4604      	mov	r4, r0
   2797a:	b12c      	cbz	r4, 27988 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   2797c:	4620      	mov	r0, r4
   2797e:	f7ff ff39 	bl	277f4 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   27982:	b908      	cbnz	r0, 27988 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   27984:	6824      	ldr	r4, [r4, #0]
   27986:	e7f8      	b.n	2797a <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   27988:	f7ff ffce 	bl	27928 <ble_hs_unlock>
}
   2798c:	bd10      	pop	{r4, pc}
	...

00027990 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   27990:	4b03      	ldr	r3, [pc, #12]	; (279a0 <ble_hs_is_enabled+0x10>)
   27992:	7818      	ldrb	r0, [r3, #0]
}
   27994:	2802      	cmp	r0, #2
   27996:	bf14      	ite	ne
   27998:	2000      	movne	r0, #0
   2799a:	2001      	moveq	r0, #1
   2799c:	4770      	bx	lr
   2799e:	bf00      	nop
   279a0:	10002f34 	.word	0x10002f34

000279a4 <ble_hs_timer_reset>:
{
   279a4:	b510      	push	{r4, lr}
   279a6:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   279a8:	f7ff fff2 	bl	27990 <ble_hs_is_enabled>
   279ac:	b918      	cbnz	r0, 279b6 <ble_hs_timer_reset+0x12>
    os_callout_stop(&co->co);
   279ae:	4804      	ldr	r0, [pc, #16]	; (279c0 <ble_hs_timer_reset+0x1c>)
   279b0:	f7ed fbae 	bl	15110 <os_callout_stop>
}
   279b4:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   279b6:	4621      	mov	r1, r4
   279b8:	4801      	ldr	r0, [pc, #4]	; (279c0 <ble_hs_timer_reset+0x1c>)
   279ba:	f7ed fbc7 	bl	1514c <os_callout_reset>
   279be:	e7f9      	b.n	279b4 <ble_hs_timer_reset+0x10>
   279c0:	100030a8 	.word	0x100030a8

000279c4 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   279c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   279c8:	4298      	cmp	r0, r3
   279ca:	d010      	beq.n	279ee <ble_hs_timer_sched+0x2a>
{
   279cc:	b510      	push	{r4, lr}
   279ce:	4604      	mov	r4, r0
    return os_time_get();
   279d0:	f7ee fdd2 	bl	16578 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   279d4:	4420      	add	r0, r4
   279d6:	4b06      	ldr	r3, [pc, #24]	; (279f0 <ble_hs_timer_sched+0x2c>)
   279d8:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   279da:	b123      	cbz	r3, 279e6 <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   279dc:	4b04      	ldr	r3, [pc, #16]	; (279f0 <ble_hs_timer_sched+0x2c>)
   279de:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   279e0:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   279e2:	2800      	cmp	r0, #0
   279e4:	da02      	bge.n	279ec <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   279e6:	4620      	mov	r0, r4
   279e8:	f7ff ffdc 	bl	279a4 <ble_hs_timer_reset>
}
   279ec:	bd10      	pop	{r4, pc}
   279ee:	4770      	bx	lr
   279f0:	100030a8 	.word	0x100030a8

000279f4 <ble_hs_sync>:
{
   279f4:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   279f6:	4b14      	ldr	r3, [pc, #80]	; (27a48 <ble_hs_sync+0x54>)
   279f8:	2201      	movs	r2, #1
   279fa:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   279fc:	f002 f947 	bl	29c8e <ble_hs_startup_go>
    if (rc == 0) {
   27a00:	4604      	mov	r4, r0
   27a02:	b940      	cbnz	r0, 27a16 <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   27a04:	4b10      	ldr	r3, [pc, #64]	; (27a48 <ble_hs_sync+0x54>)
   27a06:	2202      	movs	r2, #2
   27a08:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   27a0a:	200c      	movs	r0, #12
   27a0c:	f7ff ffda 	bl	279c4 <ble_hs_timer_sched>
    if (rc == 0) {
   27a10:	b12c      	cbz	r4, 27a1e <ble_hs_sync+0x2a>
}
   27a12:	4620      	mov	r0, r4
   27a14:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   27a16:	4b0c      	ldr	r3, [pc, #48]	; (27a48 <ble_hs_sync+0x54>)
   27a18:	2200      	movs	r2, #0
   27a1a:	701a      	strb	r2, [r3, #0]
   27a1c:	e7f5      	b.n	27a0a <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   27a1e:	f001 fedf 	bl	297e0 <ble_hs_misc_restore_irks>
        if (rc != 0) {
   27a22:	4604      	mov	r4, r0
   27a24:	b940      	cbnz	r0, 27a38 <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   27a26:	4b09      	ldr	r3, [pc, #36]	; (27a4c <ble_hs_sync+0x58>)
   27a28:	691b      	ldr	r3, [r3, #16]
   27a2a:	b103      	cbz	r3, 27a2e <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   27a2c:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   27a2e:	4a08      	ldr	r2, [pc, #32]	; (27a50 <ble_hs_sync+0x5c>)
   27a30:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   27a32:	3301      	adds	r3, #1
   27a34:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   27a36:	e7ec      	b.n	27a12 <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   27a38:	4603      	mov	r3, r0
   27a3a:	4a06      	ldr	r2, [pc, #24]	; (27a54 <ble_hs_sync+0x60>)
   27a3c:	2101      	movs	r1, #1
   27a3e:	2004      	movs	r0, #4
   27a40:	f7f1 fe76 	bl	19730 <modlog_printf>
   27a44:	e7ef      	b.n	27a26 <ble_hs_sync+0x32>
   27a46:	bf00      	nop
   27a48:	100030a4 	.word	0x100030a4
   27a4c:	100002d8 	.word	0x100002d8
   27a50:	1000306c 	.word	0x1000306c
   27a54:	00034c80 	.word	0x00034c80

00027a58 <ble_hs_reset>:
{
   27a58:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   27a5a:	4a0f      	ldr	r2, [pc, #60]	; (27a98 <ble_hs_reset+0x40>)
   27a5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27a5e:	3301      	adds	r3, #1
   27a60:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   27a62:	4b0e      	ldr	r3, [pc, #56]	; (27a9c <ble_hs_reset+0x44>)
   27a64:	2200      	movs	r2, #0
   27a66:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   27a68:	f005 fe7c 	bl	2d764 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   27a6c:	f7ff fef2 	bl	27854 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
   27a70:	4b0b      	ldr	r3, [pc, #44]	; (27aa0 <ble_hs_reset+0x48>)
   27a72:	6818      	ldr	r0, [r3, #0]
   27a74:	f7fd fb1c 	bl	250b0 <ble_gap_reset_state>
    ble_hs_id_reset();
   27a78:	f001 fdf0 	bl	2965c <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   27a7c:	4b09      	ldr	r3, [pc, #36]	; (27aa4 <ble_hs_reset+0x4c>)
   27a7e:	68db      	ldr	r3, [r3, #12]
   27a80:	b11b      	cbz	r3, 27a8a <ble_hs_reset+0x32>
   27a82:	4a07      	ldr	r2, [pc, #28]	; (27aa0 <ble_hs_reset+0x48>)
   27a84:	6810      	ldr	r0, [r2, #0]
   27a86:	b100      	cbz	r0, 27a8a <ble_hs_reset+0x32>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   27a88:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   27a8a:	4b05      	ldr	r3, [pc, #20]	; (27aa0 <ble_hs_reset+0x48>)
   27a8c:	2200      	movs	r2, #0
   27a8e:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   27a90:	f7ff ffb0 	bl	279f4 <ble_hs_sync>
}
   27a94:	bd08      	pop	{r3, pc}
   27a96:	bf00      	nop
   27a98:	1000306c 	.word	0x1000306c
   27a9c:	100030a4 	.word	0x100030a4
   27aa0:	10003050 	.word	0x10003050
   27aa4:	100002d8 	.word	0x100002d8

00027aa8 <ble_hs_event_reset>:
{
   27aa8:	b508      	push	{r3, lr}
    ble_hs_reset();
   27aaa:	f7ff ffd5 	bl	27a58 <ble_hs_reset>
}
   27aae:	bd08      	pop	{r3, pc}

00027ab0 <ble_hs_timer_exp>:
{
   27ab0:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   27ab2:	4b13      	ldr	r3, [pc, #76]	; (27b00 <ble_hs_timer_exp+0x50>)
   27ab4:	781b      	ldrb	r3, [r3, #0]
   27ab6:	b1b3      	cbz	r3, 27ae6 <ble_hs_timer_exp+0x36>
   27ab8:	2b02      	cmp	r3, #2
   27aba:	d117      	bne.n	27aec <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   27abc:	f7fe fcda 	bl	26474 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   27ac0:	f7ff ff80 	bl	279c4 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   27ac4:	f002 fcdc 	bl	2a480 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   27ac8:	f7ff ff7c 	bl	279c4 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
   27acc:	f004 f8da 	bl	2bc84 <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
   27ad0:	f7ff ff78 	bl	279c4 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   27ad4:	f000 fe64 	bl	287a0 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   27ad8:	f7ff ff74 	bl	279c4 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   27adc:	f7fc fff6 	bl	24acc <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   27ae0:	f7ff ff70 	bl	279c4 <ble_hs_timer_sched>
}
   27ae4:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   27ae6:	f7ff ffb7 	bl	27a58 <ble_hs_reset>
        break;
   27aea:	e7fb      	b.n	27ae4 <ble_hs_timer_exp+0x34>
        assert(0);
   27aec:	f7ec fdb2 	bl	14654 <hal_debugger_connected>
   27af0:	b100      	cbz	r0, 27af4 <ble_hs_timer_exp+0x44>
   27af2:	be01      	bkpt	0x0001
   27af4:	2300      	movs	r3, #0
   27af6:	461a      	mov	r2, r3
   27af8:	4619      	mov	r1, r3
   27afa:	4618      	mov	r0, r3
   27afc:	f7ed f94c 	bl	14d98 <__assert_func>
   27b00:	100030a4 	.word	0x100030a4

00027b04 <ble_hs_timer_resched>:
{
   27b04:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   27b06:	2000      	movs	r0, #0
   27b08:	f7ff ff4c 	bl	279a4 <ble_hs_timer_reset>
}
   27b0c:	bd08      	pop	{r3, pc}
	...

00027b10 <ble_hs_enqueue_hci_event>:
{
   27b10:	b510      	push	{r4, lr}
   27b12:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   27b14:	480a      	ldr	r0, [pc, #40]	; (27b40 <ble_hs_enqueue_hci_event+0x30>)
   27b16:	f7ee f976 	bl	15e06 <os_memblock_get>
    if (ev == NULL) {
   27b1a:	b160      	cbz	r0, 27b36 <ble_hs_enqueue_hci_event+0x26>
   27b1c:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   27b1e:	2300      	movs	r3, #0
   27b20:	6003      	str	r3, [r0, #0]
   27b22:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   27b24:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   27b26:	4b07      	ldr	r3, [pc, #28]	; (27b44 <ble_hs_enqueue_hci_event+0x34>)
   27b28:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   27b2a:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   27b2c:	4b06      	ldr	r3, [pc, #24]	; (27b48 <ble_hs_enqueue_hci_event+0x38>)
   27b2e:	6818      	ldr	r0, [r3, #0]
   27b30:	f7ed fc65 	bl	153fe <os_eventq_put>
}
   27b34:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   27b36:	4620      	mov	r0, r4
   27b38:	f005 fdc0 	bl	2d6bc <ble_hci_trans_buf_free>
   27b3c:	e7fa      	b.n	27b34 <ble_hs_enqueue_hci_event+0x24>
   27b3e:	bf00      	nop
   27b40:	10002f7c 	.word	0x10002f7c
   27b44:	0002783d 	.word	0x0002783d
   27b48:	10002f78 	.word	0x10002f78

00027b4c <ble_hs_sched_reset>:
{
   27b4c:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   27b4e:	4b04      	ldr	r3, [pc, #16]	; (27b60 <ble_hs_sched_reset+0x14>)
   27b50:	6018      	str	r0, [r3, #0]
   27b52:	4904      	ldr	r1, [pc, #16]	; (27b64 <ble_hs_sched_reset+0x18>)
   27b54:	4b04      	ldr	r3, [pc, #16]	; (27b68 <ble_hs_sched_reset+0x1c>)
   27b56:	6818      	ldr	r0, [r3, #0]
   27b58:	f7ed fc51 	bl	153fe <os_eventq_put>
}
   27b5c:	bd08      	pop	{r3, pc}
   27b5e:	bf00      	nop
   27b60:	10003050 	.word	0x10003050
   27b64:	10002f38 	.word	0x10002f38
   27b68:	10002f78 	.word	0x10002f78

00027b6c <ble_hs_hw_error>:
{
   27b6c:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   27b6e:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   27b72:	f7ff ffeb 	bl	27b4c <ble_hs_sched_reset>
}
   27b76:	bd08      	pop	{r3, pc}

00027b78 <ble_hs_start>:
{
   27b78:	b510      	push	{r4, lr}
    ble_hs_lock();
   27b7a:	f7ff fed1 	bl	27920 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   27b7e:	4b18      	ldr	r3, [pc, #96]	; (27be0 <ble_hs_start+0x68>)
   27b80:	781b      	ldrb	r3, [r3, #0]
   27b82:	2b01      	cmp	r3, #1
   27b84:	d028      	beq.n	27bd8 <ble_hs_start+0x60>
   27b86:	2b02      	cmp	r3, #2
   27b88:	d021      	beq.n	27bce <ble_hs_start+0x56>
   27b8a:	b14b      	cbz	r3, 27ba0 <ble_hs_start+0x28>
        assert(0);
   27b8c:	f7ec fd62 	bl	14654 <hal_debugger_connected>
   27b90:	b100      	cbz	r0, 27b94 <ble_hs_start+0x1c>
   27b92:	be01      	bkpt	0x0001
   27b94:	2300      	movs	r3, #0
   27b96:	461a      	mov	r2, r3
   27b98:	4619      	mov	r1, r3
   27b9a:	4618      	mov	r0, r3
   27b9c:	f7ed f8fc 	bl	14d98 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   27ba0:	4b0f      	ldr	r3, [pc, #60]	; (27be0 <ble_hs_start+0x68>)
   27ba2:	2202      	movs	r2, #2
   27ba4:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   27ba6:	f7ff febf 	bl	27928 <ble_hs_unlock>
    return os_sched_get_current_task();
   27baa:	f7ee fad7 	bl	1615c <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   27bae:	4b0d      	ldr	r3, [pc, #52]	; (27be4 <ble_hs_start+0x6c>)
   27bb0:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   27bb2:	2300      	movs	r3, #0
   27bb4:	4a0c      	ldr	r2, [pc, #48]	; (27be8 <ble_hs_start+0x70>)
   27bb6:	490d      	ldr	r1, [pc, #52]	; (27bec <ble_hs_start+0x74>)
   27bb8:	6809      	ldr	r1, [r1, #0]
   27bba:	480d      	ldr	r0, [pc, #52]	; (27bf0 <ble_hs_start+0x78>)
   27bbc:	f7ed fa9a 	bl	150f4 <os_callout_init>
    rc = ble_gatts_start();
   27bc0:	f7ff fb7e 	bl	272c0 <ble_gatts_start>
    if (rc != 0) {
   27bc4:	4604      	mov	r4, r0
   27bc6:	b928      	cbnz	r0, 27bd4 <ble_hs_start+0x5c>
    ble_hs_sync();
   27bc8:	f7ff ff14 	bl	279f4 <ble_hs_sync>
    return 0;
   27bcc:	e002      	b.n	27bd4 <ble_hs_start+0x5c>
    ble_hs_unlock();
   27bce:	f7ff feab 	bl	27928 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   27bd2:	2402      	movs	r4, #2
}
   27bd4:	4620      	mov	r0, r4
   27bd6:	bd10      	pop	{r4, pc}
    ble_hs_unlock();
   27bd8:	f7ff fea6 	bl	27928 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   27bdc:	240f      	movs	r4, #15
        return rc;
   27bde:	e7f9      	b.n	27bd4 <ble_hs_start+0x5c>
   27be0:	10002f34 	.word	0x10002f34
   27be4:	1000304c 	.word	0x1000304c
   27be8:	00027ab1 	.word	0x00027ab1
   27bec:	10002f78 	.word	0x10002f78
   27bf0:	100030a8 	.word	0x100030a8

00027bf4 <ble_hs_event_start_stage2>:
{
   27bf4:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   27bf6:	f7ff ffbf 	bl	27b78 <ble_hs_start>
    assert(rc == 0);
   27bfa:	b900      	cbnz	r0, 27bfe <ble_hs_event_start_stage2+0xa>
}
   27bfc:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   27bfe:	f7ec fd29 	bl	14654 <hal_debugger_connected>
   27c02:	b100      	cbz	r0, 27c06 <ble_hs_event_start_stage2+0x12>
   27c04:	be01      	bkpt	0x0001
   27c06:	2300      	movs	r3, #0
   27c08:	461a      	mov	r2, r3
   27c0a:	4619      	mov	r1, r3
   27c0c:	4618      	mov	r0, r3
   27c0e:	f7ed f8c3 	bl	14d98 <__assert_func>

00027c12 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   27c12:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
   27c14:	f005 fcfe 	bl	2d614 <ble_hci_trans_hs_acl_tx>
}
   27c18:	bd08      	pop	{r3, pc}
	...

00027c1c <ble_hs_init>:

void
ble_hs_init(void)
{
   27c1c:	b510      	push	{r4, lr}
   27c1e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   27c20:	4b82      	ldr	r3, [pc, #520]	; (27e2c <ble_hs_init+0x210>)
   27c22:	781b      	ldrb	r3, [r3, #0]
   27c24:	2b00      	cmp	r3, #0
   27c26:	d074      	beq.n	27d12 <ble_hs_init+0xf6>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   27c28:	4b81      	ldr	r3, [pc, #516]	; (27e30 <ble_hs_init+0x214>)
   27c2a:	9300      	str	r3, [sp, #0]
   27c2c:	4b81      	ldr	r3, [pc, #516]	; (27e34 <ble_hs_init+0x218>)
   27c2e:	2210      	movs	r2, #16
   27c30:	210a      	movs	r1, #10
   27c32:	4881      	ldr	r0, [pc, #516]	; (27e38 <ble_hs_init+0x21c>)
   27c34:	f7ee f8be 	bl	15db4 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   27c38:	2800      	cmp	r0, #0
   27c3a:	d174      	bne.n	27d26 <ble_hs_init+0x10a>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   27c3c:	2300      	movs	r3, #0
   27c3e:	4a7f      	ldr	r2, [pc, #508]	; (27e3c <ble_hs_init+0x220>)
   27c40:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   27c42:	4a7f      	ldr	r2, [pc, #508]	; (27e40 <ble_hs_init+0x224>)
   27c44:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   27c46:	4a7f      	ldr	r2, [pc, #508]	; (27e44 <ble_hs_init+0x228>)
   27c48:	6013      	str	r3, [r2, #0]
   27c4a:	6093      	str	r3, [r2, #8]
   27c4c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   27c4e:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   27c50:	497d      	ldr	r1, [pc, #500]	; (27e48 <ble_hs_init+0x22c>)
   27c52:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   27c54:	4a7d      	ldr	r2, [pc, #500]	; (27e4c <ble_hs_init+0x230>)
   27c56:	6013      	str	r3, [r2, #0]
   27c58:	6093      	str	r3, [r2, #8]
   27c5a:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   27c5c:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   27c5e:	497c      	ldr	r1, [pc, #496]	; (27e50 <ble_hs_init+0x234>)
   27c60:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   27c62:	4a7c      	ldr	r2, [pc, #496]	; (27e54 <ble_hs_init+0x238>)
   27c64:	6013      	str	r3, [r2, #0]
   27c66:	6093      	str	r3, [r2, #8]
   27c68:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   27c6a:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   27c6c:	497a      	ldr	r1, [pc, #488]	; (27e58 <ble_hs_init+0x23c>)
   27c6e:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   27c70:	4a7a      	ldr	r2, [pc, #488]	; (27e5c <ble_hs_init+0x240>)
   27c72:	6013      	str	r3, [r2, #0]
   27c74:	6093      	str	r3, [r2, #8]
   27c76:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   27c78:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   27c7a:	4b79      	ldr	r3, [pc, #484]	; (27e60 <ble_hs_init+0x244>)
   27c7c:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   27c7e:	f001 f8cd 	bl	28e1c <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   27c82:	f000 fdcb 	bl	2881c <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27c86:	2800      	cmp	r0, #0
   27c88:	d15a      	bne.n	27d40 <ble_hs_init+0x124>
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

#if NIMBLE_BLE_CONNECT
    rc = ble_l2cap_init();
   27c8a:	f002 f99f 	bl	29fcc <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27c8e:	2800      	cmp	r0, #0
   27c90:	d163      	bne.n	27d5a <ble_hs_init+0x13e>

    rc = ble_att_init();
   27c92:	f7fa fdfd 	bl	22890 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27c96:	2800      	cmp	r0, #0
   27c98:	d16c      	bne.n	27d74 <ble_hs_init+0x158>

    rc = ble_att_svr_init();
   27c9a:	f7fc fa07 	bl	240ac <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27c9e:	2800      	cmp	r0, #0
   27ca0:	d175      	bne.n	27d8e <ble_hs_init+0x172>

    rc = ble_gattc_init();
   27ca2:	f7fe fd03 	bl	266ac <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27ca6:	2800      	cmp	r0, #0
   27ca8:	d17e      	bne.n	27da8 <ble_hs_init+0x18c>

    rc = ble_gatts_init();
   27caa:	f7ff fd85 	bl	277b8 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27cae:	2800      	cmp	r0, #0
   27cb0:	f040 8087 	bne.w	27dc2 <ble_hs_init+0x1a6>
#endif
    rc = ble_gap_init();
   27cb4:	f7fd fd98 	bl	257e8 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27cb8:	2800      	cmp	r0, #0
   27cba:	f040 808f 	bne.w	27ddc <ble_hs_init+0x1c0>

    ble_hs_stop_init();
   27cbe:	f002 f843 	bl	29d48 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   27cc2:	2200      	movs	r2, #0
   27cc4:	4967      	ldr	r1, [pc, #412]	; (27e64 <ble_hs_init+0x248>)
   27cc6:	4868      	ldr	r0, [pc, #416]	; (27e68 <ble_hs_init+0x24c>)
   27cc8:	f001 fd94 	bl	297f4 <ble_mqueue_init>

    rc = stats_init_and_reg(
   27ccc:	4b67      	ldr	r3, [pc, #412]	; (27e6c <ble_hs_init+0x250>)
   27cce:	9301      	str	r3, [sp, #4]
   27cd0:	2300      	movs	r3, #0
   27cd2:	9300      	str	r3, [sp, #0]
   27cd4:	220b      	movs	r2, #11
   27cd6:	2104      	movs	r1, #4
   27cd8:	4865      	ldr	r0, [pc, #404]	; (27e70 <ble_hs_init+0x254>)
   27cda:	f7f2 faa3 	bl	1a224 <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   27cde:	2800      	cmp	r0, #0
   27ce0:	f040 8089 	bne.w	27df6 <ble_hs_init+0x1da>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   27ce4:	4863      	ldr	r0, [pc, #396]	; (27e74 <ble_hs_init+0x258>)
   27ce6:	f7ee fddb 	bl	168a0 <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   27cea:	2800      	cmp	r0, #0
   27cec:	f040 8090 	bne.w	27e10 <ble_hs_init+0x1f4>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   27cf0:	f7ed fc3e 	bl	15570 <os_eventq_dflt_get>
   27cf4:	f7ff fdea 	bl	278cc <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   27cf8:	2300      	movs	r3, #0
   27cfa:	4a5f      	ldr	r2, [pc, #380]	; (27e78 <ble_hs_init+0x25c>)
   27cfc:	4619      	mov	r1, r3
   27cfe:	485f      	ldr	r0, [pc, #380]	; (27e7c <ble_hs_init+0x260>)
   27d00:	f005 fc34 	bl	2d56c <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   27d04:	f7ed fc34 	bl	15570 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   27d08:	4952      	ldr	r1, [pc, #328]	; (27e54 <ble_hs_init+0x238>)
   27d0a:	f7ed fb78 	bl	153fe <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   27d0e:	b002      	add	sp, #8
   27d10:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   27d12:	f7ec fc9f 	bl	14654 <hal_debugger_connected>
   27d16:	b100      	cbz	r0, 27d1a <ble_hs_init+0xfe>
   27d18:	be01      	bkpt	0x0001
   27d1a:	2300      	movs	r3, #0
   27d1c:	461a      	mov	r2, r3
   27d1e:	4619      	mov	r1, r3
   27d20:	4618      	mov	r0, r3
   27d22:	f7ed f839 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d26:	f7ec fc95 	bl	14654 <hal_debugger_connected>
   27d2a:	b100      	cbz	r0, 27d2e <ble_hs_init+0x112>
   27d2c:	be01      	bkpt	0x0001
   27d2e:	2000      	movs	r0, #0
   27d30:	9000      	str	r0, [sp, #0]
   27d32:	4b53      	ldr	r3, [pc, #332]	; (27e80 <ble_hs_init+0x264>)
   27d34:	681c      	ldr	r4, [r3, #0]
   27d36:	4603      	mov	r3, r0
   27d38:	4602      	mov	r2, r0
   27d3a:	4601      	mov	r1, r0
   27d3c:	47a0      	blx	r4
   27d3e:	e77d      	b.n	27c3c <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d40:	f7ec fc88 	bl	14654 <hal_debugger_connected>
   27d44:	b100      	cbz	r0, 27d48 <ble_hs_init+0x12c>
   27d46:	be01      	bkpt	0x0001
   27d48:	2000      	movs	r0, #0
   27d4a:	9000      	str	r0, [sp, #0]
   27d4c:	4b4c      	ldr	r3, [pc, #304]	; (27e80 <ble_hs_init+0x264>)
   27d4e:	681c      	ldr	r4, [r3, #0]
   27d50:	4603      	mov	r3, r0
   27d52:	4602      	mov	r2, r0
   27d54:	4601      	mov	r1, r0
   27d56:	47a0      	blx	r4
   27d58:	e797      	b.n	27c8a <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d5a:	f7ec fc7b 	bl	14654 <hal_debugger_connected>
   27d5e:	b100      	cbz	r0, 27d62 <ble_hs_init+0x146>
   27d60:	be01      	bkpt	0x0001
   27d62:	2000      	movs	r0, #0
   27d64:	9000      	str	r0, [sp, #0]
   27d66:	4b46      	ldr	r3, [pc, #280]	; (27e80 <ble_hs_init+0x264>)
   27d68:	681c      	ldr	r4, [r3, #0]
   27d6a:	4603      	mov	r3, r0
   27d6c:	4602      	mov	r2, r0
   27d6e:	4601      	mov	r1, r0
   27d70:	47a0      	blx	r4
   27d72:	e78e      	b.n	27c92 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d74:	f7ec fc6e 	bl	14654 <hal_debugger_connected>
   27d78:	b100      	cbz	r0, 27d7c <ble_hs_init+0x160>
   27d7a:	be01      	bkpt	0x0001
   27d7c:	2000      	movs	r0, #0
   27d7e:	9000      	str	r0, [sp, #0]
   27d80:	4b3f      	ldr	r3, [pc, #252]	; (27e80 <ble_hs_init+0x264>)
   27d82:	681c      	ldr	r4, [r3, #0]
   27d84:	4603      	mov	r3, r0
   27d86:	4602      	mov	r2, r0
   27d88:	4601      	mov	r1, r0
   27d8a:	47a0      	blx	r4
   27d8c:	e785      	b.n	27c9a <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27d8e:	f7ec fc61 	bl	14654 <hal_debugger_connected>
   27d92:	b100      	cbz	r0, 27d96 <ble_hs_init+0x17a>
   27d94:	be01      	bkpt	0x0001
   27d96:	2000      	movs	r0, #0
   27d98:	9000      	str	r0, [sp, #0]
   27d9a:	4b39      	ldr	r3, [pc, #228]	; (27e80 <ble_hs_init+0x264>)
   27d9c:	681c      	ldr	r4, [r3, #0]
   27d9e:	4603      	mov	r3, r0
   27da0:	4602      	mov	r2, r0
   27da2:	4601      	mov	r1, r0
   27da4:	47a0      	blx	r4
   27da6:	e77c      	b.n	27ca2 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27da8:	f7ec fc54 	bl	14654 <hal_debugger_connected>
   27dac:	b100      	cbz	r0, 27db0 <ble_hs_init+0x194>
   27dae:	be01      	bkpt	0x0001
   27db0:	2000      	movs	r0, #0
   27db2:	9000      	str	r0, [sp, #0]
   27db4:	4b32      	ldr	r3, [pc, #200]	; (27e80 <ble_hs_init+0x264>)
   27db6:	681c      	ldr	r4, [r3, #0]
   27db8:	4603      	mov	r3, r0
   27dba:	4602      	mov	r2, r0
   27dbc:	4601      	mov	r1, r0
   27dbe:	47a0      	blx	r4
   27dc0:	e773      	b.n	27caa <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27dc2:	f7ec fc47 	bl	14654 <hal_debugger_connected>
   27dc6:	b100      	cbz	r0, 27dca <ble_hs_init+0x1ae>
   27dc8:	be01      	bkpt	0x0001
   27dca:	2000      	movs	r0, #0
   27dcc:	9000      	str	r0, [sp, #0]
   27dce:	4b2c      	ldr	r3, [pc, #176]	; (27e80 <ble_hs_init+0x264>)
   27dd0:	681c      	ldr	r4, [r3, #0]
   27dd2:	4603      	mov	r3, r0
   27dd4:	4602      	mov	r2, r0
   27dd6:	4601      	mov	r1, r0
   27dd8:	47a0      	blx	r4
   27dda:	e76b      	b.n	27cb4 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27ddc:	f7ec fc3a 	bl	14654 <hal_debugger_connected>
   27de0:	b100      	cbz	r0, 27de4 <ble_hs_init+0x1c8>
   27de2:	be01      	bkpt	0x0001
   27de4:	2000      	movs	r0, #0
   27de6:	9000      	str	r0, [sp, #0]
   27de8:	4b25      	ldr	r3, [pc, #148]	; (27e80 <ble_hs_init+0x264>)
   27dea:	681c      	ldr	r4, [r3, #0]
   27dec:	4603      	mov	r3, r0
   27dee:	4602      	mov	r2, r0
   27df0:	4601      	mov	r1, r0
   27df2:	47a0      	blx	r4
   27df4:	e763      	b.n	27cbe <ble_hs_init+0xa2>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27df6:	f7ec fc2d 	bl	14654 <hal_debugger_connected>
   27dfa:	b100      	cbz	r0, 27dfe <ble_hs_init+0x1e2>
   27dfc:	be01      	bkpt	0x0001
   27dfe:	2000      	movs	r0, #0
   27e00:	9000      	str	r0, [sp, #0]
   27e02:	4b1f      	ldr	r3, [pc, #124]	; (27e80 <ble_hs_init+0x264>)
   27e04:	681c      	ldr	r4, [r3, #0]
   27e06:	4603      	mov	r3, r0
   27e08:	4602      	mov	r2, r0
   27e0a:	4601      	mov	r1, r0
   27e0c:	47a0      	blx	r4
   27e0e:	e769      	b.n	27ce4 <ble_hs_init+0xc8>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27e10:	f7ec fc20 	bl	14654 <hal_debugger_connected>
   27e14:	b100      	cbz	r0, 27e18 <ble_hs_init+0x1fc>
   27e16:	be01      	bkpt	0x0001
   27e18:	2000      	movs	r0, #0
   27e1a:	9000      	str	r0, [sp, #0]
   27e1c:	4b18      	ldr	r3, [pc, #96]	; (27e80 <ble_hs_init+0x264>)
   27e1e:	681c      	ldr	r4, [r3, #0]
   27e20:	4603      	mov	r3, r0
   27e22:	4602      	mov	r2, r0
   27e24:	4601      	mov	r1, r0
   27e26:	47a0      	blx	r4
   27e28:	e762      	b.n	27cf0 <ble_hs_init+0xd4>
   27e2a:	bf00      	nop
   27e2c:	10001e3c 	.word	0x10001e3c
   27e30:	00034cb0 	.word	0x00034cb0
   27e34:	10002f98 	.word	0x10002f98
   27e38:	10002f7c 	.word	0x10002f7c
   27e3c:	10003050 	.word	0x10003050
   27e40:	10002f34 	.word	0x10002f34
   27e44:	10002f68 	.word	0x10002f68
   27e48:	0002789d 	.word	0x0002789d
   27e4c:	10002f38 	.word	0x10002f38
   27e50:	00027aa9 	.word	0x00027aa9
   27e54:	10002f48 	.word	0x10002f48
   27e58:	000278c5 	.word	0x000278c5
   27e5c:	10002f58 	.word	0x10002f58
   27e60:	00027bf5 	.word	0x00027bf5
   27e64:	0002794d 	.word	0x0002794d
   27e68:	10003054 	.word	0x10003054
   27e6c:	00034cc4 	.word	0x00034cc4
   27e70:	1000306c 	.word	0x1000306c
   27e74:	10003040 	.word	0x10003040
   27e78:	00027871 	.word	0x00027871
   27e7c:	00028d01 	.word	0x00028d01
   27e80:	1000028c 	.word	0x1000028c

00027e84 <ble_hs_adv_set_hdr>:
static ble_uuid128_t ble_hs_adv_uuids128[BLE_HS_ADV_MAX_FIELD_SZ / 16];

static int
ble_hs_adv_set_hdr(uint8_t type, uint8_t data_len, uint8_t max_len,
                   uint8_t *dst, uint8_t *dst_len, struct os_mbuf *om)
{
   27e84:	b530      	push	{r4, r5, lr}
   27e86:	b083      	sub	sp, #12
   27e88:	9d06      	ldr	r5, [sp, #24]
   27e8a:	9c07      	ldr	r4, [sp, #28]
   27e8c:	f88d 0007 	strb.w	r0, [sp, #7]
   27e90:	f88d 1006 	strb.w	r1, [sp, #6]
    int rc;

    if (om ) {
   27e94:	b18c      	cbz	r4, 27eba <ble_hs_adv_set_hdr+0x36>
        data_len++;
   27e96:	b2cb      	uxtb	r3, r1
   27e98:	3301      	adds	r3, #1
   27e9a:	f88d 3006 	strb.w	r3, [sp, #6]
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   27e9e:	2201      	movs	r2, #1
   27ea0:	f10d 0106 	add.w	r1, sp, #6
   27ea4:	4620      	mov	r0, r4
   27ea6:	f7ed fbf8 	bl	1569a <os_mbuf_append>
        if (rc) {
   27eaa:	b9c0      	cbnz	r0, 27ede <ble_hs_adv_set_hdr+0x5a>
            return rc;
        }

        return os_mbuf_append(om, &type, sizeof(type));
   27eac:	2201      	movs	r2, #1
   27eae:	f10d 0107 	add.w	r1, sp, #7
   27eb2:	4620      	mov	r0, r4
   27eb4:	f7ed fbf1 	bl	1569a <os_mbuf_append>
   27eb8:	e011      	b.n	27ede <ble_hs_adv_set_hdr+0x5a>
    }


    if (*dst_len + 2 + data_len > max_len) {
   27eba:	782c      	ldrb	r4, [r5, #0]
   27ebc:	1ca0      	adds	r0, r4, #2
   27ebe:	f89d 1006 	ldrb.w	r1, [sp, #6]
   27ec2:	4408      	add	r0, r1
   27ec4:	4290      	cmp	r0, r2
   27ec6:	dc0c      	bgt.n	27ee2 <ble_hs_adv_set_hdr+0x5e>
        return BLE_HS_EMSGSIZE;
    }

    dst[*dst_len] = data_len + 1;
   27ec8:	3101      	adds	r1, #1
   27eca:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   27ecc:	782a      	ldrb	r2, [r5, #0]
   27ece:	3201      	adds	r2, #1
   27ed0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   27ed4:	5499      	strb	r1, [r3, r2]

    *dst_len += 2;
   27ed6:	782b      	ldrb	r3, [r5, #0]
   27ed8:	3302      	adds	r3, #2
   27eda:	702b      	strb	r3, [r5, #0]

    return 0;
   27edc:	2000      	movs	r0, #0
}
   27ede:	b003      	add	sp, #12
   27ee0:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   27ee2:	2004      	movs	r0, #4
   27ee4:	e7fb      	b.n	27ede <ble_hs_adv_set_hdr+0x5a>

00027ee6 <ble_hs_adv_set_flat_mbuf>:

static int
ble_hs_adv_set_flat_mbuf(uint8_t type, int data_len, const void *data,
                         uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                         struct os_mbuf *om)
{
   27ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27eea:	b082      	sub	sp, #8
   27eec:	460c      	mov	r4, r1
   27eee:	4615      	mov	r5, r2
   27ef0:	4699      	mov	r9, r3
   27ef2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   27ef4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int rc;

    BLE_HS_DBG_ASSERT(data_len > 0);

    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   27ef6:	fa5f fa81 	uxtb.w	sl, r1
   27efa:	9601      	str	r6, [sp, #4]
   27efc:	9700      	str	r7, [sp, #0]
   27efe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   27f02:	4651      	mov	r1, sl
   27f04:	f7ff ffbe 	bl	27e84 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   27f08:	4680      	mov	r8, r0
   27f0a:	b930      	cbnz	r0, 27f1a <ble_hs_adv_set_flat_mbuf+0x34>
        return rc;
    }

    if (om) {
   27f0c:	b14e      	cbz	r6, 27f22 <ble_hs_adv_set_flat_mbuf+0x3c>
        return os_mbuf_append(om, data, data_len);
   27f0e:	b2a2      	uxth	r2, r4
   27f10:	4629      	mov	r1, r5
   27f12:	4630      	mov	r0, r6
   27f14:	f7ed fbc1 	bl	1569a <os_mbuf_append>
   27f18:	4680      	mov	r8, r0

    memcpy(dst + *dst_len, data, data_len);
    *dst_len += data_len;

    return 0;
}
   27f1a:	4640      	mov	r0, r8
   27f1c:	b002      	add	sp, #8
   27f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   27f22:	7838      	ldrb	r0, [r7, #0]
   27f24:	4622      	mov	r2, r4
   27f26:	4629      	mov	r1, r5
   27f28:	4448      	add	r0, r9
   27f2a:	f7ee fdbf 	bl	16aac <memcpy>
    *dst_len += data_len;
   27f2e:	7839      	ldrb	r1, [r7, #0]
   27f30:	4451      	add	r1, sl
   27f32:	7039      	strb	r1, [r7, #0]
    return 0;
   27f34:	e7f1      	b.n	27f1a <ble_hs_adv_set_flat_mbuf+0x34>

00027f36 <ble_hs_adv_set_array_uuid16>:
static int
ble_hs_adv_set_array_uuid16(uint8_t type, uint8_t num_elems,
                            const ble_uuid16_t *elems, uint8_t *dst,
                            uint8_t *dst_len, uint8_t max_len,
                            struct os_mbuf *om)
{
   27f36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f3a:	b082      	sub	sp, #8
   27f3c:	460e      	mov	r6, r1
   27f3e:	4617      	mov	r7, r2
   27f40:	4699      	mov	r9, r3
   27f42:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   27f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   27f48:	0049      	lsls	r1, r1, #1
   27f4a:	9501      	str	r5, [sp, #4]
   27f4c:	f8cd 8000 	str.w	r8, [sp]
   27f50:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   27f54:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   27f58:	f7ff ff94 	bl	27e84 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   27f5c:	4682      	mov	sl, r0
   27f5e:	b9d0      	cbnz	r0, 27f96 <ble_hs_adv_set_array_uuid16+0x60>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   27f60:	4604      	mov	r4, r0
   27f62:	e00c      	b.n	27f7e <ble_hs_adv_set_array_uuid16+0x48>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   27f64:	f898 1000 	ldrb.w	r1, [r8]
   27f68:	4449      	add	r1, r9
   27f6a:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   27f6e:	f004 fbfb 	bl	2c768 <ble_uuid_flat>
            *dst_len += 2;
   27f72:	f898 3000 	ldrb.w	r3, [r8]
   27f76:	3302      	adds	r3, #2
   27f78:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   27f7c:	3401      	adds	r4, #1
   27f7e:	42a6      	cmp	r6, r4
   27f80:	dd09      	ble.n	27f96 <ble_hs_adv_set_array_uuid16+0x60>
        if (om) {
   27f82:	2d00      	cmp	r5, #0
   27f84:	d0ee      	beq.n	27f64 <ble_hs_adv_set_array_uuid16+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   27f86:	4629      	mov	r1, r5
   27f88:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   27f8c:	f004 fc1b 	bl	2c7c6 <ble_uuid_to_mbuf>
            if (rc) {
   27f90:	2800      	cmp	r0, #0
   27f92:	d0f3      	beq.n	27f7c <ble_hs_adv_set_array_uuid16+0x46>
                return rc;
   27f94:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   27f96:	4650      	mov	r0, sl
   27f98:	b002      	add	sp, #8
   27f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027f9e <ble_hs_adv_set_array_uuid128>:
static int
ble_hs_adv_set_array_uuid128(uint8_t type, uint8_t num_elems,
                             const ble_uuid128_t *elems, uint8_t *dst,
                             uint8_t *dst_len, uint8_t max_len,
                             struct os_mbuf *om)
{
   27f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27fa2:	b082      	sub	sp, #8
   27fa4:	460e      	mov	r6, r1
   27fa6:	4617      	mov	r7, r2
   27fa8:	4699      	mov	r9, r3
   27faa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   27fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   27fb0:	0109      	lsls	r1, r1, #4
   27fb2:	9501      	str	r5, [sp, #4]
   27fb4:	f8cd 8000 	str.w	r8, [sp]
   27fb8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   27fbc:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   27fc0:	f7ff ff60 	bl	27e84 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   27fc4:	4682      	mov	sl, r0
   27fc6:	b9e0      	cbnz	r0, 28002 <ble_hs_adv_set_array_uuid128+0x64>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   27fc8:	4604      	mov	r4, r0
   27fca:	e00d      	b.n	27fe8 <ble_hs_adv_set_array_uuid128+0x4a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   27fcc:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   27fd0:	f898 1000 	ldrb.w	r1, [r8]
   27fd4:	4449      	add	r1, r9
   27fd6:	4438      	add	r0, r7
   27fd8:	f004 fbc6 	bl	2c768 <ble_uuid_flat>
            *dst_len += 16;
   27fdc:	f898 3000 	ldrb.w	r3, [r8]
   27fe0:	3310      	adds	r3, #16
   27fe2:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   27fe6:	3401      	adds	r4, #1
   27fe8:	42a6      	cmp	r6, r4
   27fea:	dd0a      	ble.n	28002 <ble_hs_adv_set_array_uuid128+0x64>
        if (om) {
   27fec:	2d00      	cmp	r5, #0
   27fee:	d0ed      	beq.n	27fcc <ble_hs_adv_set_array_uuid128+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   27ff0:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   27ff4:	4629      	mov	r1, r5
   27ff6:	4438      	add	r0, r7
   27ff8:	f004 fbe5 	bl	2c7c6 <ble_uuid_to_mbuf>
            if (rc) {
   27ffc:	2800      	cmp	r0, #0
   27ffe:	d0f2      	beq.n	27fe6 <ble_hs_adv_set_array_uuid128+0x48>
                return rc;
   28000:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   28002:	4650      	mov	r0, sl
   28004:	b002      	add	sp, #8
   28006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002800a <ble_hs_adv_set_array_uuid32>:
{
   2800a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2800e:	b084      	sub	sp, #16
   28010:	460e      	mov	r6, r1
   28012:	4617      	mov	r7, r2
   28014:	4699      	mov	r9, r3
   28016:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   2801a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   2801c:	0089      	lsls	r1, r1, #2
   2801e:	9501      	str	r5, [sp, #4]
   28020:	f8cd 8000 	str.w	r8, [sp]
   28024:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   28028:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   2802c:	f7ff ff2a 	bl	27e84 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   28030:	4682      	mov	sl, r0
   28032:	b9f8      	cbnz	r0, 28074 <ble_hs_adv_set_array_uuid32+0x6a>
    for (i = 0; i < num_elems; i++) {
   28034:	4604      	mov	r4, r0
   28036:	e00d      	b.n	28054 <ble_hs_adv_set_array_uuid32+0x4a>
            put_le32(dst + *dst_len, elems[i].value);
   28038:	f898 0000 	ldrb.w	r0, [r8]
   2803c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   28040:	6859      	ldr	r1, [r3, #4]
   28042:	4448      	add	r0, r9
   28044:	f009 ff4e 	bl	31ee4 <put_le32>
            *dst_len += 4;
   28048:	f898 3000 	ldrb.w	r3, [r8]
   2804c:	3304      	adds	r3, #4
   2804e:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   28052:	3401      	adds	r4, #1
   28054:	42a6      	cmp	r6, r4
   28056:	dd0d      	ble.n	28074 <ble_hs_adv_set_array_uuid32+0x6a>
        if (om) {
   28058:	2d00      	cmp	r5, #0
   2805a:	d0ed      	beq.n	28038 <ble_hs_adv_set_array_uuid32+0x2e>
            uuid_le = htole32(elems[i].value);
   2805c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   28060:	685b      	ldr	r3, [r3, #4]
   28062:	9303      	str	r3, [sp, #12]
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   28064:	2204      	movs	r2, #4
   28066:	a903      	add	r1, sp, #12
   28068:	4628      	mov	r0, r5
   2806a:	f7ed fb16 	bl	1569a <os_mbuf_append>
            if (rc) {
   2806e:	2800      	cmp	r0, #0
   28070:	d0ef      	beq.n	28052 <ble_hs_adv_set_array_uuid32+0x48>
                return rc;
   28072:	4682      	mov	sl, r0
}
   28074:	4650      	mov	r0, sl
   28076:	b004      	add	sp, #16
   28078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002807c <ble_hs_adv_set_array16>:

static int
ble_hs_adv_set_array16(uint8_t type, uint8_t num_elems, const uint16_t *elems,
                       uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                       struct os_mbuf *om)
{
   2807c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28080:	b084      	sub	sp, #16
   28082:	460e      	mov	r6, r1
   28084:	4617      	mov	r7, r2
   28086:	4699      	mov	r9, r3
   28088:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   2808c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint16_t tmp;
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   2808e:	0049      	lsls	r1, r1, #1
   28090:	9501      	str	r5, [sp, #4]
   28092:	f8cd 8000 	str.w	r8, [sp]
   28096:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   2809a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2809e:	f7ff fef1 	bl	27e84 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   280a2:	4682      	mov	sl, r0
   280a4:	b9f8      	cbnz	r0, 280e6 <ble_hs_adv_set_array16+0x6a>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   280a6:	4604      	mov	r4, r0
   280a8:	e00c      	b.n	280c4 <ble_hs_adv_set_array16+0x48>
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
            if (rc) {
                return rc;
            }
        } else {
            put_le16(dst + *dst_len, elems[i]);
   280aa:	f898 0000 	ldrb.w	r0, [r8]
   280ae:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   280b2:	4448      	add	r0, r9
   280b4:	f009 ff12 	bl	31edc <put_le16>
            *dst_len += sizeof elems[i];
   280b8:	f898 3000 	ldrb.w	r3, [r8]
   280bc:	3302      	adds	r3, #2
   280be:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   280c2:	3401      	adds	r4, #1
   280c4:	42a6      	cmp	r6, r4
   280c6:	dd0e      	ble.n	280e6 <ble_hs_adv_set_array16+0x6a>
        if (om) {
   280c8:	2d00      	cmp	r5, #0
   280ca:	d0ee      	beq.n	280aa <ble_hs_adv_set_array16+0x2e>
            tmp = htole16(elems[i]);
   280cc:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   280d0:	f8ad 300e 	strh.w	r3, [sp, #14]
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   280d4:	2202      	movs	r2, #2
   280d6:	f10d 010e 	add.w	r1, sp, #14
   280da:	4628      	mov	r0, r5
   280dc:	f7ed fadd 	bl	1569a <os_mbuf_append>
            if (rc) {
   280e0:	2800      	cmp	r0, #0
   280e2:	d0ee      	beq.n	280c2 <ble_hs_adv_set_array16+0x46>
                return rc;
   280e4:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   280e6:	4650      	mov	r0, sl
   280e8:	b004      	add	sp, #16
   280ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000280ee <adv_set_fields>:

static int
adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                      struct os_mbuf *om)
{
   280ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280f2:	b086      	sub	sp, #24
   280f4:	4604      	mov	r4, r0
   280f6:	460d      	mov	r5, r1
   280f8:	4690      	mov	r8, r2
   280fa:	461e      	mov	r6, r3
   280fc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t type;
    int8_t tx_pwr_lvl;
    uint8_t dst_len_local;
    int rc;

    dst_len_local = 0;
   280fe:	2300      	movs	r3, #0
   28100:	f88d 3016 	strb.w	r3, [sp, #22]
     * 2. Explicitly specify the value (flags != 0).
     *
     * Note: The CSS prohibits advertising a flags value of 0, so this method
     * of specifying option 1 vs. 2 is sound.
     */
    if (adv_fields->flags != 0) {
   28104:	7803      	ldrb	r3, [r0, #0]
   28106:	2b00      	cmp	r3, #0
   28108:	f040 80c0 	bne.w	2828c <adv_set_fields+0x19e>
            return rc;
        }
    }

    /*** 0x02,0x03 - 16-bit service class UUIDs. */
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   2810c:	6862      	ldr	r2, [r4, #4]
   2810e:	b19a      	cbz	r2, 28138 <adv_set_fields+0x4a>
   28110:	7a21      	ldrb	r1, [r4, #8]
   28112:	b189      	cbz	r1, 28138 <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   28114:	7a63      	ldrb	r3, [r4, #9]
   28116:	f013 0f01 	tst.w	r3, #1
   2811a:	f000 80c7 	beq.w	282ac <adv_set_fields+0x1be>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   2811e:	2003      	movs	r0, #3
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
        }

        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   28120:	9702      	str	r7, [sp, #8]
   28122:	9601      	str	r6, [sp, #4]
   28124:	f10d 0316 	add.w	r3, sp, #22
   28128:	9300      	str	r3, [sp, #0]
   2812a:	462b      	mov	r3, r5
   2812c:	f7ff ff03 	bl	27f36 <ble_hs_adv_set_array_uuid16>
                                         adv_fields->uuids16, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   28130:	4603      	mov	r3, r0
   28132:	2800      	cmp	r0, #0
   28134:	f040 80a6 	bne.w	28284 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x04,0x05 - 32-bit service class UUIDs. */
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   28138:	68e2      	ldr	r2, [r4, #12]
   2813a:	b19a      	cbz	r2, 28164 <adv_set_fields+0x76>
   2813c:	7c21      	ldrb	r1, [r4, #16]
   2813e:	b189      	cbz	r1, 28164 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   28140:	7c63      	ldrb	r3, [r4, #17]
   28142:	f013 0f01 	tst.w	r3, #1
   28146:	f000 80b3 	beq.w	282b0 <adv_set_fields+0x1c2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   2814a:	2005      	movs	r0, #5
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
        }

        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   2814c:	9702      	str	r7, [sp, #8]
   2814e:	9601      	str	r6, [sp, #4]
   28150:	f10d 0316 	add.w	r3, sp, #22
   28154:	9300      	str	r3, [sp, #0]
   28156:	462b      	mov	r3, r5
   28158:	f7ff ff57 	bl	2800a <ble_hs_adv_set_array_uuid32>
                                         adv_fields->uuids32, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   2815c:	4603      	mov	r3, r0
   2815e:	2800      	cmp	r0, #0
   28160:	f040 8090 	bne.w	28284 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x06,0x07 - 128-bit service class UUIDs. */
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   28164:	6962      	ldr	r2, [r4, #20]
   28166:	b192      	cbz	r2, 2818e <adv_set_fields+0xa0>
   28168:	7e21      	ldrb	r1, [r4, #24]
   2816a:	b181      	cbz	r1, 2818e <adv_set_fields+0xa0>
        if (adv_fields->uuids128_is_complete) {
   2816c:	7e63      	ldrb	r3, [r4, #25]
   2816e:	f013 0f01 	tst.w	r3, #1
   28172:	f000 809f 	beq.w	282b4 <adv_set_fields+0x1c6>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   28176:	2007      	movs	r0, #7
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
        }

        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   28178:	9702      	str	r7, [sp, #8]
   2817a:	9601      	str	r6, [sp, #4]
   2817c:	f10d 0316 	add.w	r3, sp, #22
   28180:	9300      	str	r3, [sp, #0]
   28182:	462b      	mov	r3, r5
   28184:	f7ff ff0b 	bl	27f9e <ble_hs_adv_set_array_uuid128>
                                          adv_fields->uuids128, dst, &dst_len_local,
                                          max_len, om);
        if (rc != 0) {
   28188:	4603      	mov	r3, r0
   2818a:	2800      	cmp	r0, #0
   2818c:	d17a      	bne.n	28284 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x08,0x09 - Local name. */
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   2818e:	69e2      	ldr	r2, [r4, #28]
   28190:	b1a2      	cbz	r2, 281bc <adv_set_fields+0xce>
   28192:	f894 1020 	ldrb.w	r1, [r4, #32]
   28196:	b189      	cbz	r1, 281bc <adv_set_fields+0xce>
        if (adv_fields->name_is_complete) {
   28198:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2819c:	f013 0f01 	tst.w	r3, #1
   281a0:	f000 808a 	beq.w	282b8 <adv_set_fields+0x1ca>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   281a4:	2009      	movs	r0, #9
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
        }

        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   281a6:	9702      	str	r7, [sp, #8]
   281a8:	9601      	str	r6, [sp, #4]
   281aa:	f10d 0316 	add.w	r3, sp, #22
   281ae:	9300      	str	r3, [sp, #0]
   281b0:	462b      	mov	r3, r5
   281b2:	f7ff fe98 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
                                      adv_fields->name, dst, &dst_len_local, max_len,
                                      om);
        if (rc != 0) {
   281b6:	4603      	mov	r3, r0
   281b8:	2800      	cmp	r0, #0
   281ba:	d163      	bne.n	28284 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x0a - Tx power level. */
    if (adv_fields->tx_pwr_lvl_is_present) {
   281bc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   281c0:	f013 0f01 	tst.w	r3, #1
   281c4:	d015      	beq.n	281f2 <adv_set_fields+0x104>
        /* Read the power level from the controller if requested; otherwise use
         * the explicitly specified value.
         */
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   281c6:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   281ca:	f113 0f80 	cmn.w	r3, #128	; 0x80
   281ce:	d075      	beq.n	282bc <adv_set_fields+0x1ce>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
            if (rc != 0) {
                return rc;
            }
        } else {
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   281d0:	f88d 3017 	strb.w	r3, [sp, #23]
        }

        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   281d4:	9702      	str	r7, [sp, #8]
   281d6:	9601      	str	r6, [sp, #4]
   281d8:	f10d 0316 	add.w	r3, sp, #22
   281dc:	9300      	str	r3, [sp, #0]
   281de:	462b      	mov	r3, r5
   281e0:	f10d 0217 	add.w	r2, sp, #23
   281e4:	2101      	movs	r1, #1
   281e6:	200a      	movs	r0, #10
   281e8:	f7ff fe7d 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
                                      &tx_pwr_lvl, dst, &dst_len_local, max_len, om);
        if (rc != 0) {
   281ec:	4603      	mov	r3, r0
   281ee:	2800      	cmp	r0, #0
   281f0:	d148      	bne.n	28284 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x12 - Slave connection interval range. */
    if (adv_fields->slave_itvl_range != NULL) {
   281f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   281f4:	b162      	cbz	r2, 28210 <adv_set_fields+0x122>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   281f6:	9702      	str	r7, [sp, #8]
   281f8:	9601      	str	r6, [sp, #4]
   281fa:	f10d 0316 	add.w	r3, sp, #22
   281fe:	9300      	str	r3, [sp, #0]
   28200:	462b      	mov	r3, r5
   28202:	2104      	movs	r1, #4
   28204:	2012      	movs	r0, #18
   28206:	f7ff fe6e 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
                                      BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN,
                                      adv_fields->slave_itvl_range, dst,
                                      &dst_len_local, max_len, om);
        if (rc != 0) {
   2820a:	4603      	mov	r3, r0
   2820c:	2800      	cmp	r0, #0
   2820e:	d139      	bne.n	28284 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x16 - Service data - 16-bit UUID. */
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   28210:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   28212:	b11a      	cbz	r2, 2821c <adv_set_fields+0x12e>
   28214:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   28218:	2900      	cmp	r1, #0
   2821a:	d157      	bne.n	282cc <adv_set_fields+0x1de>
            return rc;
        }
    }

    /*** 0x17 - Public target address. */
    if (adv_fields->public_tgt_addr != NULL &&
   2821c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2821e:	b11a      	cbz	r2, 28228 <adv_set_fields+0x13a>
        adv_fields->num_public_tgt_addrs != 0) {
   28220:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   28224:	2900      	cmp	r1, #0
   28226:	d15e      	bne.n	282e6 <adv_set_fields+0x1f8>
            return rc;
        }
    }

    /*** 0x19 - Appearance. */
    if (adv_fields->appearance_is_present) {
   28228:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2822c:	f013 0f01 	tst.w	r3, #1
   28230:	d169      	bne.n	28306 <adv_set_fields+0x218>
            return rc;
        }
    }

    /*** 0x1a - Advertising interval. */
    if (adv_fields->adv_itvl_is_present) {
   28232:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   28236:	f013 0f01 	tst.w	r3, #1
   2823a:	d174      	bne.n	28326 <adv_set_fields+0x238>
            return rc;
        }
    }

    /*** 0x20 - Service data - 32-bit UUID. */
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   2823c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   2823e:	b11a      	cbz	r2, 28248 <adv_set_fields+0x15a>
   28240:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   28244:	2900      	cmp	r1, #0
   28246:	d17f      	bne.n	28348 <adv_set_fields+0x25a>
            return rc;
        }
    }

    /*** 0x21 - Service data - 128-bit UUID. */
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   28248:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2824a:	b122      	cbz	r2, 28256 <adv_set_fields+0x168>
   2824c:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   28250:	2900      	cmp	r1, #0
   28252:	f040 8087 	bne.w	28364 <adv_set_fields+0x276>
            return rc;
        }
    }

    /*** 0x24 - URI. */
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   28256:	6d22      	ldr	r2, [r4, #80]	; 0x50
   28258:	b122      	cbz	r2, 28264 <adv_set_fields+0x176>
   2825a:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   2825e:	2900      	cmp	r1, #0
   28260:	f040 808e 	bne.w	28380 <adv_set_fields+0x292>
            return rc;
        }
    }

    /*** 0xff - Manufacturer specific data. */
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   28264:	6da2      	ldr	r2, [r4, #88]	; 0x58
   28266:	b122      	cbz	r2, 28272 <adv_set_fields+0x184>
   28268:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   2826c:	2901      	cmp	r1, #1
   2826e:	f200 8095 	bhi.w	2839c <adv_set_fields+0x2ae>
        if (rc != 0) {
            return rc;
        }
    }

    if (dst_len) {
   28272:	f1b8 0f00 	cmp.w	r8, #0
   28276:	f000 809f 	beq.w	283b8 <adv_set_fields+0x2ca>
        *dst_len = dst_len_local;
   2827a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2827e:	f888 3000 	strb.w	r3, [r8]
    }

    return 0;
   28282:	2300      	movs	r3, #0
}
   28284:	4618      	mov	r0, r3
   28286:	b006      	add	sp, #24
   28288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   2828c:	9702      	str	r7, [sp, #8]
   2828e:	9601      	str	r6, [sp, #4]
   28290:	f10d 0316 	add.w	r3, sp, #22
   28294:	9300      	str	r3, [sp, #0]
   28296:	460b      	mov	r3, r1
   28298:	4602      	mov	r2, r0
   2829a:	2101      	movs	r1, #1
   2829c:	4608      	mov	r0, r1
   2829e:	f7ff fe22 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   282a2:	4603      	mov	r3, r0
   282a4:	2800      	cmp	r0, #0
   282a6:	f43f af31 	beq.w	2810c <adv_set_fields+0x1e>
   282aa:	e7eb      	b.n	28284 <adv_set_fields+0x196>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   282ac:	2002      	movs	r0, #2
   282ae:	e737      	b.n	28120 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   282b0:	2004      	movs	r0, #4
   282b2:	e74b      	b.n	2814c <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   282b4:	2006      	movs	r0, #6
   282b6:	e75f      	b.n	28178 <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   282b8:	2008      	movs	r0, #8
   282ba:	e774      	b.n	281a6 <adv_set_fields+0xb8>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   282bc:	f10d 0017 	add.w	r0, sp, #23
   282c0:	f001 f880 	bl	293c4 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   282c4:	4603      	mov	r3, r0
   282c6:	2800      	cmp	r0, #0
   282c8:	d084      	beq.n	281d4 <adv_set_fields+0xe6>
   282ca:	e7db      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   282cc:	9702      	str	r7, [sp, #8]
   282ce:	9601      	str	r6, [sp, #4]
   282d0:	f10d 0316 	add.w	r3, sp, #22
   282d4:	9300      	str	r3, [sp, #0]
   282d6:	462b      	mov	r3, r5
   282d8:	2016      	movs	r0, #22
   282da:	f7ff fe04 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   282de:	4603      	mov	r3, r0
   282e0:	2800      	cmp	r0, #0
   282e2:	d09b      	beq.n	2821c <adv_set_fields+0x12e>
   282e4:	e7ce      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   282e6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   282ea:	9702      	str	r7, [sp, #8]
   282ec:	9601      	str	r6, [sp, #4]
   282ee:	f10d 0316 	add.w	r3, sp, #22
   282f2:	9300      	str	r3, [sp, #0]
   282f4:	462b      	mov	r3, r5
   282f6:	0049      	lsls	r1, r1, #1
   282f8:	2017      	movs	r0, #23
   282fa:	f7ff fdf4 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   282fe:	4603      	mov	r3, r0
   28300:	2800      	cmp	r0, #0
   28302:	d091      	beq.n	28228 <adv_set_fields+0x13a>
   28304:	e7be      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   28306:	9702      	str	r7, [sp, #8]
   28308:	9601      	str	r6, [sp, #4]
   2830a:	f10d 0316 	add.w	r3, sp, #22
   2830e:	9300      	str	r3, [sp, #0]
   28310:	462b      	mov	r3, r5
   28312:	f104 0236 	add.w	r2, r4, #54	; 0x36
   28316:	2102      	movs	r1, #2
   28318:	2019      	movs	r0, #25
   2831a:	f7ff fde4 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2831e:	4603      	mov	r3, r0
   28320:	2800      	cmp	r0, #0
   28322:	d086      	beq.n	28232 <adv_set_fields+0x144>
   28324:	e7ae      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   28326:	9702      	str	r7, [sp, #8]
   28328:	9601      	str	r6, [sp, #4]
   2832a:	f10d 0316 	add.w	r3, sp, #22
   2832e:	9300      	str	r3, [sp, #0]
   28330:	462b      	mov	r3, r5
   28332:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   28336:	2101      	movs	r1, #1
   28338:	201a      	movs	r0, #26
   2833a:	f7ff fe9f 	bl	2807c <ble_hs_adv_set_array16>
        if (rc != 0) {
   2833e:	4603      	mov	r3, r0
   28340:	2800      	cmp	r0, #0
   28342:	f43f af7b 	beq.w	2823c <adv_set_fields+0x14e>
   28346:	e79d      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   28348:	9702      	str	r7, [sp, #8]
   2834a:	9601      	str	r6, [sp, #4]
   2834c:	f10d 0316 	add.w	r3, sp, #22
   28350:	9300      	str	r3, [sp, #0]
   28352:	462b      	mov	r3, r5
   28354:	2020      	movs	r0, #32
   28356:	f7ff fdc6 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2835a:	4603      	mov	r3, r0
   2835c:	2800      	cmp	r0, #0
   2835e:	f43f af73 	beq.w	28248 <adv_set_fields+0x15a>
   28362:	e78f      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   28364:	9702      	str	r7, [sp, #8]
   28366:	9601      	str	r6, [sp, #4]
   28368:	f10d 0316 	add.w	r3, sp, #22
   2836c:	9300      	str	r3, [sp, #0]
   2836e:	462b      	mov	r3, r5
   28370:	2021      	movs	r0, #33	; 0x21
   28372:	f7ff fdb8 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   28376:	4603      	mov	r3, r0
   28378:	2800      	cmp	r0, #0
   2837a:	f43f af6c 	beq.w	28256 <adv_set_fields+0x168>
   2837e:	e781      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   28380:	9702      	str	r7, [sp, #8]
   28382:	9601      	str	r6, [sp, #4]
   28384:	f10d 0316 	add.w	r3, sp, #22
   28388:	9300      	str	r3, [sp, #0]
   2838a:	462b      	mov	r3, r5
   2838c:	2024      	movs	r0, #36	; 0x24
   2838e:	f7ff fdaa 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   28392:	4603      	mov	r3, r0
   28394:	2800      	cmp	r0, #0
   28396:	f43f af65 	beq.w	28264 <adv_set_fields+0x176>
   2839a:	e773      	b.n	28284 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   2839c:	9702      	str	r7, [sp, #8]
   2839e:	9601      	str	r6, [sp, #4]
   283a0:	f10d 0316 	add.w	r3, sp, #22
   283a4:	9300      	str	r3, [sp, #0]
   283a6:	462b      	mov	r3, r5
   283a8:	20ff      	movs	r0, #255	; 0xff
   283aa:	f7ff fd9c 	bl	27ee6 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   283ae:	4603      	mov	r3, r0
   283b0:	2800      	cmp	r0, #0
   283b2:	f43f af5e 	beq.w	28272 <adv_set_fields+0x184>
   283b6:	e765      	b.n	28284 <adv_set_fields+0x196>
    return 0;
   283b8:	2300      	movs	r3, #0
   283ba:	e763      	b.n	28284 <adv_set_fields+0x196>

000283bc <ble_hs_adv_set_fields>:
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len)
{
   283bc:	b510      	push	{r4, lr}
   283be:	b082      	sub	sp, #8
#if !NIMBLE_BLE_ADVERTISE
    return BLE_HS_ENOTSUP;
#endif

    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   283c0:	2400      	movs	r4, #0
   283c2:	9400      	str	r4, [sp, #0]
   283c4:	f7ff fe93 	bl	280ee <adv_set_fields>
}
   283c8:	b002      	add	sp, #8
   283ca:	bd10      	pop	{r4, pc}

000283cc <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   283cc:	b510      	push	{r4, lr}
   283ce:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   283d0:	f7ff faa6 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   283d4:	4620      	mov	r0, r4
   283d6:	f000 f8ff 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   283da:	4604      	mov	r4, r0
   283dc:	b120      	cbz	r0, 283e8 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   283de:	f000 f8e9 	bl	285b4 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   283e2:	4620      	mov	r0, r4
   283e4:	f000 f87e 	bl	284e4 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   283e8:	f7ff fa9e 	bl	27928 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   283ec:	b10c      	cbz	r4, 283f2 <ble_hs_atomic_conn_delete+0x26>
   283ee:	2000      	movs	r0, #0
}
   283f0:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   283f2:	2007      	movs	r0, #7
   283f4:	e7fc      	b.n	283f0 <ble_hs_atomic_conn_delete+0x24>

000283f6 <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   283f6:	b538      	push	{r3, r4, r5, lr}
   283f8:	4605      	mov	r5, r0
   283fa:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   283fc:	f7ff fa90 	bl	27920 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   28400:	4628      	mov	r0, r5
   28402:	f000 f8e9 	bl	285d8 <ble_hs_conn_find>
    if (conn == NULL) {
   28406:	b140      	cbz	r0, 2841a <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   28408:	b14c      	cbz	r4, 2841e <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   2840a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2840e:	7023      	strb	r3, [r4, #0]
        rc = 0;
   28410:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   28412:	f7ff fa89 	bl	27928 <ble_hs_unlock>

    return rc;
}
   28416:	4620      	mov	r0, r4
   28418:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   2841a:	2407      	movs	r4, #7
   2841c:	e7f9      	b.n	28412 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   2841e:	2400      	movs	r4, #0
   28420:	e7f7      	b.n	28412 <ble_hs_atomic_conn_flags+0x1c>

00028422 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   28422:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   28424:	f7ff fa7c 	bl	27920 <ble_hs_lock>

    conn = ble_hs_conn_first();
   28428:	f000 f908 	bl	2863c <ble_hs_conn_first>
    if (conn != NULL) {
   2842c:	b120      	cbz	r0, 28438 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   2842e:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   28430:	f7ff fa7a 	bl	27928 <ble_hs_unlock>

    return conn_handle;
}
   28434:	4620      	mov	r0, r4
   28436:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   28438:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2843c:	e7f8      	b.n	28430 <ble_hs_atomic_first_conn_handle+0xe>
	...

00028440 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   28440:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   28442:	4b08      	ldr	r3, [pc, #32]	; (28464 <ble_hs_conn_can_alloc+0x24>)
   28444:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   28446:	b153      	cbz	r3, 2845e <ble_hs_conn_can_alloc+0x1e>
   28448:	4b07      	ldr	r3, [pc, #28]	; (28468 <ble_hs_conn_can_alloc+0x28>)
   2844a:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   2844c:	2b02      	cmp	r3, #2
   2844e:	d801      	bhi.n	28454 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   28450:	2000      	movs	r0, #0
   28452:	e005      	b.n	28460 <ble_hs_conn_can_alloc+0x20>
           ble_gatts_conn_can_alloc();
   28454:	f7fe ffd8 	bl	27408 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   28458:	b110      	cbz	r0, 28460 <ble_hs_conn_can_alloc+0x20>
   2845a:	2001      	movs	r0, #1
   2845c:	e000      	b.n	28460 <ble_hs_conn_can_alloc+0x20>
   2845e:	2000      	movs	r0, #0
}
   28460:	bd08      	pop	{r3, pc}
   28462:	bf00      	nop
   28464:	1000312c 	.word	0x1000312c
   28468:	100033a8 	.word	0x100033a8

0002846c <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   2846c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2846e:	e000      	b.n	28472 <ble_hs_conn_chan_find_by_scid+0x6>
   28470:	6800      	ldr	r0, [r0, #0]
   28472:	b128      	cbz	r0, 28480 <ble_hs_conn_chan_find_by_scid+0x14>
        if (chan->scid == cid) {
   28474:	8903      	ldrh	r3, [r0, #8]
   28476:	428b      	cmp	r3, r1
   28478:	d001      	beq.n	2847e <ble_hs_conn_chan_find_by_scid+0x12>
            return chan;
        }
        if (chan->scid > cid) {
   2847a:	d9f9      	bls.n	28470 <ble_hs_conn_chan_find_by_scid+0x4>
            return NULL;
   2847c:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   2847e:	4770      	bx	lr
   28480:	4770      	bx	lr

00028482 <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   28482:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   28484:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   28486:	4633      	mov	r3, r6
    prev = NULL;
   28488:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2848a:	e001      	b.n	28490 <ble_hs_conn_chan_insert+0xe>
        }
        if (cur->scid > chan->scid) {
            break;
        }

        prev = cur;
   2848c:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2848e:	681b      	ldr	r3, [r3, #0]
   28490:	b123      	cbz	r3, 2849c <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   28492:	891c      	ldrh	r4, [r3, #8]
   28494:	890a      	ldrh	r2, [r1, #8]
   28496:	4294      	cmp	r4, r2
   28498:	d00b      	beq.n	284b2 <ble_hs_conn_chan_insert+0x30>
        if (cur->scid > chan->scid) {
   2849a:	d9f7      	bls.n	2848c <ble_hs_conn_chan_insert+0xa>
    }

    if (prev == NULL) {
   2849c:	b12d      	cbz	r5, 284aa <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   2849e:	682b      	ldr	r3, [r5, #0]
   284a0:	600b      	str	r3, [r1, #0]
   284a2:	6029      	str	r1, [r5, #0]
    }

    return 0;
   284a4:	2000      	movs	r0, #0
}
   284a6:	bc70      	pop	{r4, r5, r6}
   284a8:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   284aa:	600e      	str	r6, [r1, #0]
   284ac:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   284ae:	2000      	movs	r0, #0
   284b0:	e7f9      	b.n	284a6 <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   284b2:	2002      	movs	r0, #2
   284b4:	e7f7      	b.n	284a6 <ble_hs_conn_chan_insert+0x24>

000284b6 <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   284b6:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   284b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   284ba:	428b      	cmp	r3, r1
   284bc:	d00b      	beq.n	284d6 <ble_hs_conn_delete_chan+0x20>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   284be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   284c0:	428b      	cmp	r3, r1
   284c2:	d00b      	beq.n	284dc <ble_hs_conn_delete_chan+0x26>
   284c4:	461a      	mov	r2, r3
   284c6:	681b      	ldr	r3, [r3, #0]
   284c8:	428b      	cmp	r3, r1
   284ca:	d1fb      	bne.n	284c4 <ble_hs_conn_delete_chan+0xe>
   284cc:	681b      	ldr	r3, [r3, #0]
   284ce:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   284d0:	f001 fc7c 	bl	29dcc <ble_l2cap_chan_free>
}
   284d4:	bd08      	pop	{r3, pc}
        conn->bhc_rx_chan = NULL;
   284d6:	2300      	movs	r3, #0
   284d8:	6303      	str	r3, [r0, #48]	; 0x30
   284da:	e7f0      	b.n	284be <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   284dc:	681b      	ldr	r3, [r3, #0]
   284de:	62c3      	str	r3, [r0, #44]	; 0x2c
   284e0:	e7f6      	b.n	284d0 <ble_hs_conn_delete_chan+0x1a>
	...

000284e4 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   284e4:	b300      	cbz	r0, 28528 <ble_hs_conn_free+0x44>
{
   284e6:	b510      	push	{r4, lr}
   284e8:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   284ea:	3044      	adds	r0, #68	; 0x44
   284ec:	f7fb fc9f 	bl	23e2e <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   284f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   284f2:	b149      	cbz	r1, 28508 <ble_hs_conn_free+0x24>
        ble_hs_conn_delete_chan(conn, chan);
   284f4:	4620      	mov	r0, r4
   284f6:	f7ff ffde 	bl	284b6 <ble_hs_conn_delete_chan>
   284fa:	e7f9      	b.n	284f0 <ble_hs_conn_free+0xc>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   284fc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   28500:	6423      	str	r3, [r4, #64]	; 0x40
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   28502:	3810      	subs	r0, #16
   28504:	f7ed f8b0 	bl	15668 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   28508:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2850a:	b120      	cbz	r0, 28516 <ble_hs_conn_free+0x32>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2850c:	6843      	ldr	r3, [r0, #4]
   2850e:	63e3      	str	r3, [r4, #60]	; 0x3c
   28510:	2b00      	cmp	r3, #0
   28512:	d1f6      	bne.n	28502 <ble_hs_conn_free+0x1e>
   28514:	e7f2      	b.n	284fc <ble_hs_conn_free+0x18>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   28516:	4621      	mov	r1, r4
   28518:	4804      	ldr	r0, [pc, #16]	; (2852c <ble_hs_conn_free+0x48>)
   2851a:	f7ed fc9c 	bl	15e56 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   2851e:	4a04      	ldr	r2, [pc, #16]	; (28530 <ble_hs_conn_free+0x4c>)
   28520:	6913      	ldr	r3, [r2, #16]
   28522:	3301      	adds	r3, #1
   28524:	6113      	str	r3, [r2, #16]
}
   28526:	bd10      	pop	{r4, pc}
   28528:	4770      	bx	lr
   2852a:	bf00      	nop
   2852c:	1000312c 	.word	0x1000312c
   28530:	1000306c 	.word	0x1000306c

00028534 <ble_hs_conn_alloc>:
{
   28534:	b538      	push	{r3, r4, r5, lr}
   28536:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   28538:	481c      	ldr	r0, [pc, #112]	; (285ac <ble_hs_conn_alloc+0x78>)
   2853a:	f7ed fc64 	bl	15e06 <os_memblock_get>
    if (conn == NULL) {
   2853e:	4604      	mov	r4, r0
   28540:	b370      	cbz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   28542:	2264      	movs	r2, #100	; 0x64
   28544:	2100      	movs	r1, #0
   28546:	f7ee fad6 	bl	16af6 <memset>
    conn->bhc_handle = conn_handle;
   2854a:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   2854c:	4628      	mov	r0, r5
   2854e:	f7fa f98b 	bl	22868 <ble_att_create_chan>
    if (chan == NULL) {
   28552:	4601      	mov	r1, r0
   28554:	b320      	cbz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   28556:	4620      	mov	r0, r4
   28558:	f7ff ff93 	bl	28482 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   2855c:	bb00      	cbnz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   2855e:	4628      	mov	r0, r5
   28560:	f001 ff62 	bl	2a428 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   28564:	4601      	mov	r1, r0
   28566:	b1d8      	cbz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   28568:	4620      	mov	r0, r4
   2856a:	f7ff ff8a 	bl	28482 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   2856e:	b9b8      	cbnz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   28570:	4628      	mov	r0, r5
   28572:	f003 fcd3 	bl	2bf1c <ble_sm_create_chan>
    if (chan == NULL) {
   28576:	4601      	mov	r1, r0
   28578:	b190      	cbz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   2857a:	4620      	mov	r0, r4
   2857c:	f7ff ff81 	bl	28482 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   28580:	b970      	cbnz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   28582:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   28586:	f7fe ff4f 	bl	27428 <ble_gatts_conn_init>
    if (rc != 0) {
   2858a:	b948      	cbnz	r0, 285a0 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   2858c:	4623      	mov	r3, r4
   2858e:	2200      	movs	r2, #0
   28590:	f843 2f3c 	str.w	r2, [r3, #60]!
   28594:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   28596:	4a06      	ldr	r2, [pc, #24]	; (285b0 <ble_hs_conn_alloc+0x7c>)
   28598:	68d3      	ldr	r3, [r2, #12]
   2859a:	3301      	adds	r3, #1
   2859c:	60d3      	str	r3, [r2, #12]
    return conn;
   2859e:	e003      	b.n	285a8 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   285a0:	4620      	mov	r0, r4
   285a2:	f7ff ff9f 	bl	284e4 <ble_hs_conn_free>
    return NULL;
   285a6:	2400      	movs	r4, #0
}
   285a8:	4620      	mov	r0, r4
   285aa:	bd38      	pop	{r3, r4, r5, pc}
   285ac:	1000312c 	.word	0x1000312c
   285b0:	1000306c 	.word	0x1000306c

000285b4 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   285b4:	4b07      	ldr	r3, [pc, #28]	; (285d4 <ble_hs_conn_remove+0x20>)
   285b6:	681b      	ldr	r3, [r3, #0]
   285b8:	4283      	cmp	r3, r0
   285ba:	d006      	beq.n	285ca <ble_hs_conn_remove+0x16>
   285bc:	461a      	mov	r2, r3
   285be:	681b      	ldr	r3, [r3, #0]
   285c0:	4283      	cmp	r3, r0
   285c2:	d1fb      	bne.n	285bc <ble_hs_conn_remove+0x8>
   285c4:	681b      	ldr	r3, [r3, #0]
   285c6:	6013      	str	r3, [r2, #0]
}
   285c8:	4770      	bx	lr
    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   285ca:	681a      	ldr	r2, [r3, #0]
   285cc:	4b01      	ldr	r3, [pc, #4]	; (285d4 <ble_hs_conn_remove+0x20>)
   285ce:	601a      	str	r2, [r3, #0]
   285d0:	4770      	bx	lr
   285d2:	bf00      	nop
   285d4:	10003148 	.word	0x10003148

000285d8 <ble_hs_conn_find>:

struct ble_hs_conn *
ble_hs_conn_find(uint16_t conn_handle)
{
   285d8:	4602      	mov	r2, r0

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   285da:	4b04      	ldr	r3, [pc, #16]	; (285ec <ble_hs_conn_find+0x14>)
   285dc:	6818      	ldr	r0, [r3, #0]
   285de:	b120      	cbz	r0, 285ea <ble_hs_conn_find+0x12>
        if (conn->bhc_handle == conn_handle) {
   285e0:	8883      	ldrh	r3, [r0, #4]
   285e2:	4293      	cmp	r3, r2
   285e4:	d001      	beq.n	285ea <ble_hs_conn_find+0x12>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   285e6:	6800      	ldr	r0, [r0, #0]
   285e8:	e7f9      	b.n	285de <ble_hs_conn_find+0x6>
            return conn;
        }
    }

    return NULL;
}
   285ea:	4770      	bx	lr
   285ec:	10003148 	.word	0x10003148

000285f0 <ble_hs_conn_insert>:
{
   285f0:	b510      	push	{r4, lr}
   285f2:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   285f4:	8880      	ldrh	r0, [r0, #4]
   285f6:	f7ff ffef 	bl	285d8 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   285fa:	4b02      	ldr	r3, [pc, #8]	; (28604 <ble_hs_conn_insert+0x14>)
   285fc:	681a      	ldr	r2, [r3, #0]
   285fe:	6022      	str	r2, [r4, #0]
   28600:	601c      	str	r4, [r3, #0]
}
   28602:	bd10      	pop	{r4, pc}
   28604:	10003148 	.word	0x10003148

00028608 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   28608:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   2860a:	f7ff ffe5 	bl	285d8 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   2860e:	bd08      	pop	{r3, pc}

00028610 <ble_hs_conn_find_by_idx>:
    return NULL;
}

struct ble_hs_conn *
ble_hs_conn_find_by_idx(int idx)
{
   28610:	4602      	mov	r2, r0
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   28612:	4b05      	ldr	r3, [pc, #20]	; (28628 <ble_hs_conn_find_by_idx+0x18>)
   28614:	6818      	ldr	r0, [r3, #0]
    i = 0;
   28616:	2300      	movs	r3, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   28618:	b120      	cbz	r0, 28624 <ble_hs_conn_find_by_idx+0x14>
        if (i == idx) {
   2861a:	4293      	cmp	r3, r2
   2861c:	d002      	beq.n	28624 <ble_hs_conn_find_by_idx+0x14>
            return conn;
        }

        i++;
   2861e:	3301      	adds	r3, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   28620:	6800      	ldr	r0, [r0, #0]
   28622:	e7f9      	b.n	28618 <ble_hs_conn_find_by_idx+0x8>
    }

    return NULL;
}
   28624:	4770      	bx	lr
   28626:	bf00      	nop
   28628:	10003148 	.word	0x10003148

0002862c <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   2862c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   2862e:	f7ff ffd3 	bl	285d8 <ble_hs_conn_find>
}
   28632:	3800      	subs	r0, #0
   28634:	bf18      	it	ne
   28636:	2001      	movne	r0, #1
   28638:	bd08      	pop	{r3, pc}
	...

0002863c <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   2863c:	4b01      	ldr	r3, [pc, #4]	; (28644 <ble_hs_conn_first+0x8>)
   2863e:	6818      	ldr	r0, [r3, #0]
   28640:	4770      	bx	lr
   28642:	bf00      	nop
   28644:	10003148 	.word	0x10003148

00028648 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   28648:	b530      	push	{r4, r5, lr}
   2864a:	b083      	sub	sp, #12
   2864c:	4605      	mov	r5, r0
   2864e:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   28650:	7980      	ldrb	r0, [r0, #6]
   28652:	f001 f8b4 	bl	297be <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   28656:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   28658:	2200      	movs	r2, #0
   2865a:	a901      	add	r1, sp, #4
   2865c:	f000 ff6c 	bl	29538 <ble_hs_id_addr>
    assert(rc == 0);
   28660:	bb78      	cbnz	r0, 286c2 <ble_hs_conn_addrs+0x7a>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   28662:	9b01      	ldr	r3, [sp, #4]
   28664:	681a      	ldr	r2, [r3, #0]
   28666:	f8c4 2001 	str.w	r2, [r4, #1]
   2866a:	889b      	ldrh	r3, [r3, #4]
   2866c:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   28670:	2206      	movs	r2, #6
   28672:	492a      	ldr	r1, [pc, #168]	; (2871c <ble_hs_conn_addrs+0xd4>)
   28674:	f105 000f 	add.w	r0, r5, #15
   28678:	f7ee f9f4 	bl	16a64 <memcmp>
   2867c:	bb58      	cbnz	r0, 286d6 <ble_hs_conn_addrs+0x8e>
        addrs->our_ota_addr = addrs->our_id_addr;
   2867e:	4623      	mov	r3, r4
   28680:	f853 2b0e 	ldr.w	r2, [r3], #14
   28684:	f8c4 200e 	str.w	r2, [r4, #14]
   28688:	88a1      	ldrh	r1, [r4, #4]
   2868a:	79a2      	ldrb	r2, [r4, #6]
   2868c:	8099      	strh	r1, [r3, #4]
   2868e:	719a      	strb	r2, [r3, #6]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   28690:	462b      	mov	r3, r5
   28692:	f853 2f07 	ldr.w	r2, [r3, #7]!
   28696:	f8c4 2007 	str.w	r2, [r4, #7]
   2869a:	8899      	ldrh	r1, [r3, #4]
   2869c:	799a      	ldrb	r2, [r3, #6]
   2869e:	f8a4 100b 	strh.w	r1, [r4, #11]
   286a2:	7362      	strb	r2, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   286a4:	681a      	ldr	r2, [r3, #0]
   286a6:	f8c4 2015 	str.w	r2, [r4, #21]
   286aa:	889a      	ldrh	r2, [r3, #4]
   286ac:	799b      	ldrb	r3, [r3, #6]
   286ae:	f8a4 2019 	strh.w	r2, [r4, #25]
   286b2:	76e3      	strb	r3, [r4, #27]
    switch (conn->bhc_peer_addr.type) {
   286b4:	79eb      	ldrb	r3, [r5, #7]
   286b6:	2b02      	cmp	r3, #2
   286b8:	d017      	beq.n	286ea <ble_hs_conn_addrs+0xa2>
   286ba:	2b03      	cmp	r3, #3
   286bc:	d021      	beq.n	28702 <ble_hs_conn_addrs+0xba>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   286be:	b003      	add	sp, #12
   286c0:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   286c2:	f7eb ffc7 	bl	14654 <hal_debugger_connected>
   286c6:	b100      	cbz	r0, 286ca <ble_hs_conn_addrs+0x82>
   286c8:	be01      	bkpt	0x0001
   286ca:	2300      	movs	r3, #0
   286cc:	461a      	mov	r2, r3
   286ce:	4619      	mov	r1, r3
   286d0:	4618      	mov	r0, r3
   286d2:	f7ec fb61 	bl	14d98 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   286d6:	462b      	mov	r3, r5
   286d8:	f853 2f0e 	ldr.w	r2, [r3, #14]!
   286dc:	f8c4 200e 	str.w	r2, [r4, #14]
   286e0:	889a      	ldrh	r2, [r3, #4]
   286e2:	799b      	ldrb	r3, [r3, #6]
   286e4:	8262      	strh	r2, [r4, #18]
   286e6:	7523      	strb	r3, [r4, #20]
   286e8:	e7d2      	b.n	28690 <ble_hs_conn_addrs+0x48>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   286ea:	2300      	movs	r3, #0
   286ec:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   286ee:	f855 3f15 	ldr.w	r3, [r5, #21]!
   286f2:	f8c4 3015 	str.w	r3, [r4, #21]
   286f6:	88aa      	ldrh	r2, [r5, #4]
   286f8:	79ab      	ldrb	r3, [r5, #6]
   286fa:	f8a4 2019 	strh.w	r2, [r4, #25]
   286fe:	76e3      	strb	r3, [r4, #27]
        break;
   28700:	e7dd      	b.n	286be <ble_hs_conn_addrs+0x76>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   28702:	2301      	movs	r3, #1
   28704:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   28706:	f855 3f15 	ldr.w	r3, [r5, #21]!
   2870a:	f8c4 3015 	str.w	r3, [r4, #21]
   2870e:	88aa      	ldrh	r2, [r5, #4]
   28710:	79ab      	ldrb	r3, [r5, #6]
   28712:	f8a4 2019 	strh.w	r2, [r4, #25]
   28716:	76e3      	strb	r3, [r4, #27]
}
   28718:	e7d1      	b.n	286be <ble_hs_conn_addrs+0x76>
   2871a:	bf00      	nop
   2871c:	00034ce0 	.word	0x00034ce0

00028720 <ble_hs_conn_find_by_addr>:
{
   28720:	b570      	push	{r4, r5, r6, lr}
   28722:	b088      	sub	sp, #32
    if (!addr) {
   28724:	4605      	mov	r5, r0
   28726:	2800      	cmp	r0, #0
   28728:	d033      	beq.n	28792 <ble_hs_conn_find_by_addr+0x72>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2872a:	4b1c      	ldr	r3, [pc, #112]	; (2879c <ble_hs_conn_find_by_addr+0x7c>)
   2872c:	681c      	ldr	r4, [r3, #0]
   2872e:	e016      	b.n	2875e <ble_hs_conn_find_by_addr+0x3e>
        if (BLE_ADDR_IS_RPA(addr)) {
   28730:	79ab      	ldrb	r3, [r5, #6]
   28732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28736:	2b40      	cmp	r3, #64	; 0x40
   28738:	d115      	bne.n	28766 <ble_hs_conn_find_by_addr+0x46>
    type_diff = a->type - b->type;
   2873a:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   2873c:	1a18      	subs	r0, r3, r0
   2873e:	d105      	bne.n	2874c <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   28740:	2206      	movs	r2, #6
   28742:	1c69      	adds	r1, r5, #1
   28744:	f104 0016 	add.w	r0, r4, #22
   28748:	f7ee f98c 	bl	16a64 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   2874c:	b930      	cbnz	r0, 2875c <ble_hs_conn_find_by_addr+0x3c>
   2874e:	e021      	b.n	28794 <ble_hs_conn_find_by_addr+0x74>
   28750:	2206      	movs	r2, #6
   28752:	1c69      	adds	r1, r5, #1
   28754:	a803      	add	r0, sp, #12
   28756:	f7ee f985 	bl	16a64 <memcmp>
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   2875a:	b1d8      	cbz	r0, 28794 <ble_hs_conn_find_by_addr+0x74>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2875c:	6824      	ldr	r4, [r4, #0]
   2875e:	b1cc      	cbz	r4, 28794 <ble_hs_conn_find_by_addr+0x74>
        if (BLE_ADDR_IS_RPA(addr)) {
   28760:	7828      	ldrb	r0, [r5, #0]
   28762:	2801      	cmp	r0, #1
   28764:	d0e4      	beq.n	28730 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   28766:	79e6      	ldrb	r6, [r4, #7]
    if (type_diff != 0) {
   28768:	1a30      	subs	r0, r6, r0
   2876a:	d105      	bne.n	28778 <ble_hs_conn_find_by_addr+0x58>
    return memcmp(a->val, b->val, sizeof(a->val));
   2876c:	2206      	movs	r2, #6
   2876e:	1c69      	adds	r1, r5, #1
   28770:	f104 0008 	add.w	r0, r4, #8
   28774:	f7ee f976 	bl	16a64 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   28778:	b160      	cbz	r0, 28794 <ble_hs_conn_find_by_addr+0x74>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   2877a:	2e01      	cmp	r6, #1
   2877c:	d9ee      	bls.n	2875c <ble_hs_conn_find_by_addr+0x3c>
            ble_hs_conn_addrs(conn, &addrs);
   2877e:	a901      	add	r1, sp, #4
   28780:	4620      	mov	r0, r4
   28782:	f7ff ff61 	bl	28648 <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   28786:	f89d 000b 	ldrb.w	r0, [sp, #11]
   2878a:	782b      	ldrb	r3, [r5, #0]
    if (type_diff != 0) {
   2878c:	1ac0      	subs	r0, r0, r3
   2878e:	d0df      	beq.n	28750 <ble_hs_conn_find_by_addr+0x30>
   28790:	e7e3      	b.n	2875a <ble_hs_conn_find_by_addr+0x3a>
        return NULL;
   28792:	4604      	mov	r4, r0
}
   28794:	4620      	mov	r0, r4
   28796:	b008      	add	sp, #32
   28798:	bd70      	pop	{r4, r5, r6, pc}
   2879a:	bf00      	nop
   2879c:	10003148 	.word	0x10003148

000287a0 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   287a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   287a2:	f7ed fee9 	bl	16578 <os_time_get>
   287a6:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   287a8:	f7ff f8ba 	bl	27920 <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   287ac:	4b1a      	ldr	r3, [pc, #104]	; (28818 <ble_hs_conn_timer+0x78>)
   287ae:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   287b0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   287b4:	e00d      	b.n	287d2 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   287b6:	88a4      	ldrh	r4, [r4, #4]
                        break;
   287b8:	e021      	b.n	287fe <ble_hs_conn_timer+0x5e>
   287ba:	462e      	mov	r6, r5
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   287bc:	4639      	mov	r1, r7
   287be:	f104 0044 	add.w	r0, r4, #68	; 0x44
   287c2:	f7fa ffe8 	bl	23796 <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   287c6:	1e05      	subs	r5, r0, #0
   287c8:	dd14      	ble.n	287f4 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   287ca:	42ae      	cmp	r6, r5
   287cc:	dc00      	bgt.n	287d0 <ble_hs_conn_timer+0x30>
   287ce:	4635      	mov	r5, r6
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   287d0:	6824      	ldr	r4, [r4, #0]
   287d2:	b194      	cbz	r4, 287fa <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   287d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   287d8:	f013 0f02 	tst.w	r3, #2
   287dc:	d1f8      	bne.n	287d0 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   287de:	6b23      	ldr	r3, [r4, #48]	; 0x30
   287e0:	2b00      	cmp	r3, #0
   287e2:	d0ea      	beq.n	287ba <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   287e4:	6b66      	ldr	r6, [r4, #52]	; 0x34
   287e6:	1bf6      	subs	r6, r6, r7
                    if (time_diff <= 0) {
   287e8:	2e00      	cmp	r6, #0
   287ea:	dde4      	ble.n	287b6 <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   287ec:	42b5      	cmp	r5, r6
   287ee:	dce5      	bgt.n	287bc <ble_hs_conn_timer+0x1c>
   287f0:	462e      	mov	r6, r5
   287f2:	e7e3      	b.n	287bc <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   287f4:	88a4      	ldrh	r4, [r4, #4]
                    break;
   287f6:	4635      	mov	r5, r6
   287f8:	e001      	b.n	287fe <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   287fa:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   287fe:	f7ff f893 	bl	27928 <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   28802:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28806:	429c      	cmp	r4, r3
   28808:	d101      	bne.n	2880e <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   2880a:	4628      	mov	r0, r5
   2880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   2880e:	2113      	movs	r1, #19
   28810:	4620      	mov	r0, r4
   28812:	f7fc fb93 	bl	24f3c <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   28816:	e7c4      	b.n	287a2 <ble_hs_conn_timer+0x2>
   28818:	10003148 	.word	0x10003148

0002881c <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   2881c:	b500      	push	{lr}
   2881e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   28820:	4b07      	ldr	r3, [pc, #28]	; (28840 <ble_hs_conn_init+0x24>)
   28822:	9300      	str	r3, [sp, #0]
   28824:	4b07      	ldr	r3, [pc, #28]	; (28844 <ble_hs_conn_init+0x28>)
   28826:	2264      	movs	r2, #100	; 0x64
   28828:	2101      	movs	r1, #1
   2882a:	4807      	ldr	r0, [pc, #28]	; (28848 <ble_hs_conn_init+0x2c>)
   2882c:	f7ed fac2 	bl	15db4 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   28830:	b920      	cbnz	r0, 2883c <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   28832:	4b06      	ldr	r3, [pc, #24]	; (2884c <ble_hs_conn_init+0x30>)
   28834:	6018      	str	r0, [r3, #0]

    return 0;
}
   28836:	b003      	add	sp, #12
   28838:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   2883c:	200b      	movs	r0, #11
   2883e:	e7fa      	b.n	28836 <ble_hs_conn_init+0x1a>
   28840:	00034ccc 	.word	0x00034ccc
   28844:	100030c8 	.word	0x100030c8
   28848:	1000312c 	.word	0x1000312c
   2884c:	10003148 	.word	0x10003148

00028850 <ble_hs_flow_inc_completed_pkts>:
    ble_hs_unlock();
}

static void
ble_hs_flow_inc_completed_pkts(struct ble_hs_conn *conn)
{
   28850:	b508      	push	{r3, lr}

    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    conn->bhc_completed_pkts++;
   28852:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
   28854:	3301      	adds	r3, #1
   28856:	8743      	strh	r3, [r0, #58]	; 0x3a
    ble_hs_flow_num_completed_pkts++;
   28858:	4a10      	ldr	r2, [pc, #64]	; (2889c <ble_hs_flow_inc_completed_pkts+0x4c>)
   2885a:	8813      	ldrh	r3, [r2, #0]
   2885c:	3301      	adds	r3, #1
   2885e:	b29b      	uxth	r3, r3
   28860:	8013      	strh	r3, [r2, #0]

    if (ble_hs_flow_num_completed_pkts > MYNEWT_VAL(BLE_ACL_BUF_COUNT)) {
   28862:	2b04      	cmp	r3, #4
   28864:	d807      	bhi.n	28876 <ble_hs_flow_inc_completed_pkts+0x26>
    }

    /* If the number of free buffers is at or below the configured threshold,
     * send an immediate number-of-copmleted-packets event.
     */
    num_free = MYNEWT_VAL(BLE_ACL_BUF_COUNT) - ble_hs_flow_num_completed_pkts;
   28866:	f1c3 0204 	rsb	r2, r3, #4
   2886a:	b292      	uxth	r2, r2
    if (num_free <= MYNEWT_VAL(BLE_HS_FLOW_CTRL_THRESH)) {
   2886c:	2a02      	cmp	r2, #2
   2886e:	d906      	bls.n	2887e <ble_hs_flow_inc_completed_pkts+0x2e>
        ble_npl_eventq_put(ble_hs_evq_get(), &ble_hs_flow_ev);
        ble_npl_callout_stop(&ble_hs_flow_timer);
    } else if (ble_hs_flow_num_completed_pkts == 1) {
   28870:	2b01      	cmp	r3, #1
   28872:	d00d      	beq.n	28890 <ble_hs_flow_inc_completed_pkts+0x40>
        rc = ble_npl_callout_reset(&ble_hs_flow_timer, BLE_HS_FLOW_ITVL_TICKS);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
    }
}
   28874:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   28876:	200c      	movs	r0, #12
   28878:	f7ff f968 	bl	27b4c <ble_hs_sched_reset>
        return;
   2887c:	e7fa      	b.n	28874 <ble_hs_flow_inc_completed_pkts+0x24>
        ble_npl_eventq_put(ble_hs_evq_get(), &ble_hs_flow_ev);
   2887e:	f7ff f811 	bl	278a4 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   28882:	4907      	ldr	r1, [pc, #28]	; (288a0 <ble_hs_flow_inc_completed_pkts+0x50>)
   28884:	f7ec fdbb 	bl	153fe <os_eventq_put>
    os_callout_stop(&co->co);
   28888:	4806      	ldr	r0, [pc, #24]	; (288a4 <ble_hs_flow_inc_completed_pkts+0x54>)
   2888a:	f7ec fc41 	bl	15110 <os_callout_stop>
}
   2888e:	e7f1      	b.n	28874 <ble_hs_flow_inc_completed_pkts+0x24>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   28890:	2180      	movs	r1, #128	; 0x80
   28892:	4804      	ldr	r0, [pc, #16]	; (288a4 <ble_hs_flow_inc_completed_pkts+0x54>)
   28894:	f7ec fc5a 	bl	1514c <os_callout_reset>
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
   28898:	e7ec      	b.n	28874 <ble_hs_flow_inc_completed_pkts+0x24>
   2889a:	bf00      	nop
   2889c:	10003164 	.word	0x10003164
   288a0:	1000314c 	.word	0x1000314c
   288a4:	10003168 	.word	0x10003168

000288a8 <ble_hs_flow_acl_free>:

static os_error_t
ble_hs_flow_acl_free(struct os_mempool_ext *mpe, void *data, void *arg)
{
   288a8:	b538      	push	{r3, r4, r5, lr}
    const struct os_mempool *mp = om->om_omp->omp_pool;
   288aa:	688a      	ldr	r2, [r1, #8]
   288ac:	6852      	ldr	r2, [r2, #4]
    idx = (addr - mp->mp_membuf_addr) / mp->mp_block_size;
   288ae:	68d4      	ldr	r4, [r2, #12]
   288b0:	1b0b      	subs	r3, r1, r4
   288b2:	6812      	ldr	r2, [r2, #0]
   288b4:	fbb3 f3f2 	udiv	r3, r3, r2
    int rc;

    om = data;

    idx = ble_hs_flow_mbuf_index(om);
    conn_handle = ble_hs_flow_mbuf_conn_handle[idx];
   288b8:	4a09      	ldr	r2, [pc, #36]	; (288e0 <ble_hs_flow_acl_free+0x38>)
   288ba:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]

    /* Free the mbuf back to its pool. */
    rc = os_memblock_put_from_cb(&mpe->mpe_mp, data);
   288be:	f7ed fabb 	bl	15e38 <os_memblock_put_from_cb>
    if (rc != 0) {
   288c2:	4604      	mov	r4, r0
   288c4:	b108      	cbz	r0, 288ca <ble_hs_flow_acl_free+0x22>
    }

    ble_hs_unlock_nested();

    return 0;
}
   288c6:	4620      	mov	r0, r4
   288c8:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_lock_nested();
   288ca:	f7ff f817 	bl	278fc <ble_hs_lock_nested>
    conn = ble_hs_conn_find(conn_handle);
   288ce:	4628      	mov	r0, r5
   288d0:	f7ff fe82 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   288d4:	b108      	cbz	r0, 288da <ble_hs_flow_acl_free+0x32>
        ble_hs_flow_inc_completed_pkts(conn);
   288d6:	f7ff ffbb 	bl	28850 <ble_hs_flow_inc_completed_pkts>
    ble_hs_unlock_nested();
   288da:	f7ff f819 	bl	27910 <ble_hs_unlock_nested>
    return 0;
   288de:	e7f2      	b.n	288c6 <ble_hs_flow_acl_free+0x1e>
   288e0:	1000315c 	.word	0x1000315c

000288e4 <ble_hs_flow_tx_num_comp_pkts>:
{
   288e4:	b510      	push	{r4, lr}
   288e6:	b082      	sub	sp, #8
    for (conn = ble_hs_conn_first();
   288e8:	f7ff fea8 	bl	2863c <ble_hs_conn_first>
   288ec:	4604      	mov	r4, r0
   288ee:	e000      	b.n	288f2 <ble_hs_flow_tx_num_comp_pkts+0xe>
         conn = SLIST_NEXT(conn, bhc_next)) {
   288f0:	6824      	ldr	r4, [r4, #0]
    for (conn = ble_hs_conn_first();
   288f2:	b1b4      	cbz	r4, 28922 <ble_hs_flow_tx_num_comp_pkts+0x3e>
        if (conn->bhc_completed_pkts > 0) {
   288f4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
   288f6:	2b00      	cmp	r3, #0
   288f8:	d0fa      	beq.n	288f0 <ble_hs_flow_tx_num_comp_pkts+0xc>
            cmd->handles = 1;
   288fa:	2201      	movs	r2, #1
   288fc:	f88d 2000 	strb.w	r2, [sp]
            cmd->h[0].handle = htole16(conn->bhc_handle);
   28900:	88a2      	ldrh	r2, [r4, #4]
   28902:	f8ad 2001 	strh.w	r2, [sp, #1]
            cmd->h[0].count = htole16(conn->bhc_completed_pkts);
   28906:	f8ad 3003 	strh.w	r3, [sp, #3]
            conn->bhc_completed_pkts = 0;
   2890a:	2300      	movs	r3, #0
   2890c:	8763      	strh	r3, [r4, #58]	; 0x3a
            rc = ble_hs_hci_cmd_tx_no_rsp(
   2890e:	2205      	movs	r2, #5
   28910:	4669      	mov	r1, sp
   28912:	f640 4035 	movw	r0, #3125	; 0xc35
   28916:	f000 f9a5 	bl	28c64 <ble_hs_hci_cmd_tx_no_rsp>
            if (rc != 0) {
   2891a:	4603      	mov	r3, r0
   2891c:	2800      	cmp	r0, #0
   2891e:	d0e7      	beq.n	288f0 <ble_hs_flow_tx_num_comp_pkts+0xc>
   28920:	e000      	b.n	28924 <ble_hs_flow_tx_num_comp_pkts+0x40>
    return 0;
   28922:	2300      	movs	r3, #0
}
   28924:	4618      	mov	r0, r3
   28926:	b002      	add	sp, #8
   28928:	bd10      	pop	{r4, pc}
	...

0002892c <ble_hs_flow_event_cb>:
{
   2892c:	b508      	push	{r3, lr}
    ble_hs_lock();
   2892e:	f7fe fff7 	bl	27920 <ble_hs_lock>
    if (ble_hs_flow_num_completed_pkts > 0) {
   28932:	4b08      	ldr	r3, [pc, #32]	; (28954 <ble_hs_flow_event_cb+0x28>)
   28934:	881b      	ldrh	r3, [r3, #0]
   28936:	b913      	cbnz	r3, 2893e <ble_hs_flow_event_cb+0x12>
    ble_hs_unlock();
   28938:	f7fe fff6 	bl	27928 <ble_hs_unlock>
}
   2893c:	bd08      	pop	{r3, pc}
        rc = ble_hs_flow_tx_num_comp_pkts();
   2893e:	f7ff ffd1 	bl	288e4 <ble_hs_flow_tx_num_comp_pkts>
        if (rc != 0) {
   28942:	b918      	cbnz	r0, 2894c <ble_hs_flow_event_cb+0x20>
        ble_hs_flow_num_completed_pkts = 0;
   28944:	4b03      	ldr	r3, [pc, #12]	; (28954 <ble_hs_flow_event_cb+0x28>)
   28946:	2200      	movs	r2, #0
   28948:	801a      	strh	r2, [r3, #0]
   2894a:	e7f5      	b.n	28938 <ble_hs_flow_event_cb+0xc>
            ble_hs_sched_reset(rc);
   2894c:	f7ff f8fe 	bl	27b4c <ble_hs_sched_reset>
   28950:	e7f8      	b.n	28944 <ble_hs_flow_event_cb+0x18>
   28952:	bf00      	nop
   28954:	10003164 	.word	0x10003164

00028958 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   28958:	4770      	bx	lr
	...

0002895c <ble_hs_flow_track_data_mbuf>:
    const struct os_mempool *mp = om->om_omp->omp_pool;
   2895c:	6883      	ldr	r3, [r0, #8]
   2895e:	685a      	ldr	r2, [r3, #4]
    idx = (addr - mp->mp_membuf_addr) / mp->mp_block_size;
   28960:	68d3      	ldr	r3, [r2, #12]
   28962:	1ac3      	subs	r3, r0, r3
   28964:	6812      	ldr	r2, [r2, #0]
   28966:	fbb3 f3f2 	udiv	r3, r3, r2
{
#if MYNEWT_VAL(BLE_HS_FLOW_CTRL)
    const struct hci_data_hdr *hdr;
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
   2896a:	6802      	ldr	r2, [r0, #0]
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
   2896c:	8812      	ldrh	r2, [r2, #0]
   2896e:	f3c2 020b 	ubfx	r2, r2, #0, #12
   28972:	4902      	ldr	r1, [pc, #8]	; (2897c <ble_hs_flow_track_data_mbuf+0x20>)
   28974:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
#endif
}
   28978:	4770      	bx	lr
   2897a:	bf00      	nop
   2897c:	1000315c 	.word	0x1000315c

00028980 <ble_hs_flow_startup>:
 *
 * If flow control is disabled, this function is a no-op.
 */
int
ble_hs_flow_startup(void)
{
   28980:	b530      	push	{r4, r5, lr}
   28982:	b087      	sub	sp, #28
#if MYNEWT_VAL(BLE_HS_FLOW_CTRL)
    struct ble_hci_cb_ctlr_to_host_fc_cp enable_cmd;
    struct ble_hci_cb_host_buf_size_cp buf_size_cmd = {
   28984:	2400      	movs	r4, #0
   28986:	f8cd 400e 	str.w	r4, [sp, #14]
   2898a:	f88d 4012 	strb.w	r4, [sp, #18]
   2898e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   28992:	f8ad 300c 	strh.w	r3, [sp, #12]
   28996:	2304      	movs	r3, #4
   28998:	f88d 300f 	strb.w	r3, [sp, #15]
   2899c:	f88d 4010 	strb.w	r4, [sp, #16]
    memset(ev, 0, sizeof(*ev));
   289a0:	4b1f      	ldr	r3, [pc, #124]	; (28a20 <ble_hs_flow_startup+0xa0>)
   289a2:	601c      	str	r4, [r3, #0]
   289a4:	609c      	str	r4, [r3, #8]
   289a6:	60dc      	str	r4, [r3, #12]
    ev->ev.ev_queued = 0;
   289a8:	701c      	strb	r4, [r3, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   289aa:	4a1e      	ldr	r2, [pc, #120]	; (28a24 <ble_hs_flow_startup+0xa4>)
   289ac:	605a      	str	r2, [r3, #4]
    int rc;

    ble_npl_event_init(&ble_hs_flow_ev, ble_hs_flow_event_cb, NULL);

    /* Assume failure. */
    ble_hci_trans_set_acl_free_cb(NULL, NULL);
   289ae:	4621      	mov	r1, r4
   289b0:	4620      	mov	r0, r4
   289b2:	f004 fed5 	bl	2d760 <ble_hci_trans_set_acl_free_cb>

#if MYNEWT_VAL(SELFTEST)
    ble_npl_callout_stop(&ble_hs_flow_timer);
#endif

    enable_cmd.enable = BLE_HCI_CTLR_TO_HOST_FC_ACL;
   289b6:	2201      	movs	r2, #1
   289b8:	f88d 2014 	strb.w	r2, [sp, #20]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   289bc:	9400      	str	r4, [sp, #0]
   289be:	4623      	mov	r3, r4
   289c0:	a905      	add	r1, sp, #20
   289c2:	f640 4031 	movw	r0, #3121	; 0xc31
   289c6:	f000 f95d 	bl	28c84 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_CB_SET_CTLR_TO_HOST_FC),
                           &enable_cmd, sizeof(enable_cmd), NULL, 0);
    if (rc != 0) {
   289ca:	4604      	mov	r4, r0
   289cc:	b110      	cbz	r0, 289d4 <ble_hs_flow_startup+0x54>
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   289ce:	4620      	mov	r0, r4
   289d0:	b007      	add	sp, #28
   289d2:	bd30      	pop	{r4, r5, pc}
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   289d4:	2300      	movs	r3, #0
   289d6:	9300      	str	r3, [sp, #0]
   289d8:	2207      	movs	r2, #7
   289da:	a903      	add	r1, sp, #12
   289dc:	f640 4033 	movw	r0, #3123	; 0xc33
   289e0:	f000 f950 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   289e4:	4604      	mov	r4, r0
   289e6:	b978      	cbnz	r0, 28a08 <ble_hs_flow_startup+0x88>
    ble_hs_flow_num_completed_pkts = 0;
   289e8:	2500      	movs	r5, #0
   289ea:	4b0f      	ldr	r3, [pc, #60]	; (28a28 <ble_hs_flow_startup+0xa8>)
   289ec:	801d      	strh	r5, [r3, #0]
    ble_hci_trans_set_acl_free_cb(ble_hs_flow_acl_free, NULL);
   289ee:	4629      	mov	r1, r5
   289f0:	480e      	ldr	r0, [pc, #56]	; (28a2c <ble_hs_flow_startup+0xac>)
   289f2:	f004 feb5 	bl	2d760 <ble_hci_trans_set_acl_free_cb>
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
   289f6:	f7fe ff55 	bl	278a4 <ble_hs_evq_get>
   289fa:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   289fc:	462b      	mov	r3, r5
   289fe:	4a09      	ldr	r2, [pc, #36]	; (28a24 <ble_hs_flow_startup+0xa4>)
   28a00:	480b      	ldr	r0, [pc, #44]	; (28a30 <ble_hs_flow_startup+0xb0>)
   28a02:	f7ec fb77 	bl	150f4 <os_callout_init>
    return 0;
   28a06:	e7e2      	b.n	289ce <ble_hs_flow_startup+0x4e>
        enable_cmd.enable = BLE_HCI_CTLR_TO_HOST_FC_OFF;
   28a08:	2300      	movs	r3, #0
   28a0a:	f88d 3014 	strb.w	r3, [sp, #20]
        ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   28a0e:	9300      	str	r3, [sp, #0]
   28a10:	2201      	movs	r2, #1
   28a12:	a905      	add	r1, sp, #20
   28a14:	f640 4031 	movw	r0, #3121	; 0xc31
   28a18:	f000 f934 	bl	28c84 <ble_hs_hci_cmd_tx>
        return rc;
   28a1c:	e7d7      	b.n	289ce <ble_hs_flow_startup+0x4e>
   28a1e:	bf00      	nop
   28a20:	1000314c 	.word	0x1000314c
   28a24:	0002892d 	.word	0x0002892d
   28a28:	10003164 	.word	0x10003164
   28a2c:	000288a9 	.word	0x000288a9
   28a30:	10003168 	.word	0x10003168

00028a34 <ble_hs_hci_rx_cmd_complete>:
}

static int
ble_hs_hci_rx_cmd_complete(const void *data, int len,
                           struct ble_hs_hci_ack *out_ack)
{
   28a34:	4603      	mov	r3, r0
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   28a36:	2903      	cmp	r1, #3
   28a38:	d809      	bhi.n	28a4e <ble_hs_hci_rx_cmd_complete+0x1a>
        if (len < sizeof(*nop)) {
   28a3a:	2902      	cmp	r1, #2
   28a3c:	d91b      	bls.n	28a76 <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   28a3e:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   28a42:	b9d3      	cbnz	r3, 28a7a <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   28a44:	2000      	movs	r0, #0
   28a46:	6010      	str	r0, [r2, #0]
        out_ack->bha_params = NULL;
   28a48:	6050      	str	r0, [r2, #4]
        out_ack->bha_params_len = 0;
   28a4a:	6090      	str	r0, [r2, #8]
        return 0;
   28a4c:	4770      	bx	lr
    }

    opcode = le16toh(ev->opcode);
   28a4e:	f8b0 0001 	ldrh.w	r0, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   28a52:	8190      	strh	r0, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   28a54:	78d8      	ldrb	r0, [r3, #3]
   28a56:	b110      	cbz	r0, 28a5e <ble_hs_hci_rx_cmd_complete+0x2a>
   28a58:	f500 7000 	add.w	r0, r0, #512	; 0x200
   28a5c:	e000      	b.n	28a60 <ble_hs_hci_rx_cmd_complete+0x2c>
   28a5e:	2000      	movs	r0, #0
   28a60:	6010      	str	r0, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   28a62:	1f08      	subs	r0, r1, #4
   28a64:	6090      	str	r0, [r2, #8]
    if (out_ack->bha_params_len) {
   28a66:	b118      	cbz	r0, 28a70 <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_params = ev->return_params;
   28a68:	3304      	adds	r3, #4
   28a6a:	6053      	str	r3, [r2, #4]
    } else {
        out_ack->bha_params = NULL;
    }

    return 0;
   28a6c:	2000      	movs	r0, #0
   28a6e:	4770      	bx	lr
        out_ack->bha_params = NULL;
   28a70:	2300      	movs	r3, #0
   28a72:	6053      	str	r3, [r2, #4]
   28a74:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   28a76:	200c      	movs	r0, #12
   28a78:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   28a7a:	200c      	movs	r0, #12
}
   28a7c:	4770      	bx	lr

00028a7e <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   28a7e:	2904      	cmp	r1, #4
   28a80:	d10d      	bne.n	28a9e <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   28a82:	8843      	ldrh	r3, [r0, #2]
   28a84:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   28a86:	2300      	movs	r3, #0
   28a88:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   28a8a:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   28a8c:	7803      	ldrb	r3, [r0, #0]
   28a8e:	b123      	cbz	r3, 28a9a <ble_hs_hci_rx_cmd_status+0x1c>
   28a90:	f503 7300 	add.w	r3, r3, #512	; 0x200
   28a94:	6013      	str	r3, [r2, #0]

    return 0;
   28a96:	2000      	movs	r0, #0
   28a98:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   28a9a:	2300      	movs	r3, #0
   28a9c:	e7fa      	b.n	28a94 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   28a9e:	200c      	movs	r0, #12
}
   28aa0:	4770      	bx	lr
	...

00028aa4 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   28aa4:	4b01      	ldr	r3, [pc, #4]	; (28aac <ble_hs_hci_max_acl_payload_sz+0x8>)
   28aa6:	8818      	ldrh	r0, [r3, #0]
   28aa8:	4770      	bx	lr
   28aaa:	bf00      	nop
   28aac:	1000318e 	.word	0x1000318e

00028ab0 <ble_hs_hci_lock>:
{
   28ab0:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   28ab2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28ab6:	4802      	ldr	r0, [pc, #8]	; (28ac0 <ble_hs_hci_lock+0x10>)
   28ab8:	f7ed ff5c 	bl	16974 <os_mutex_pend>
}
   28abc:	bd08      	pop	{r3, pc}
   28abe:	bf00      	nop
   28ac0:	100032e4 	.word	0x100032e4

00028ac4 <ble_hs_hci_unlock>:
{
   28ac4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   28ac6:	4802      	ldr	r0, [pc, #8]	; (28ad0 <ble_hs_hci_unlock+0xc>)
   28ac8:	f7ed fef4 	bl	168b4 <os_mutex_release>
}
   28acc:	bd08      	pop	{r3, pc}
   28ace:	bf00      	nop
   28ad0:	100032e4 	.word	0x100032e4

00028ad4 <ble_hs_hci_wait_for_ack>:
{
   28ad4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   28ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
   28ada:	4807      	ldr	r0, [pc, #28]	; (28af8 <ble_hs_hci_wait_for_ack+0x24>)
   28adc:	f009 fb04 	bl	320e8 <os_sem_pend>
    switch (rc) {
   28ae0:	b140      	cbz	r0, 28af4 <ble_hs_hci_wait_for_ack+0x20>
   28ae2:	2806      	cmp	r0, #6
   28ae4:	d105      	bne.n	28af2 <ble_hs_hci_wait_for_ack+0x1e>
        STATS_INC(ble_hs_stats, hci_timeout);
   28ae6:	4a05      	ldr	r2, [pc, #20]	; (28afc <ble_hs_hci_wait_for_ack+0x28>)
   28ae8:	6a53      	ldr	r3, [r2, #36]	; 0x24
   28aea:	3301      	adds	r3, #1
   28aec:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   28aee:	2013      	movs	r0, #19
        break;
   28af0:	e000      	b.n	28af4 <ble_hs_hci_wait_for_ack+0x20>
        rc = BLE_HS_EOS;
   28af2:	200b      	movs	r0, #11
}
   28af4:	bd08      	pop	{r3, pc}
   28af6:	bf00      	nop
   28af8:	100032f0 	.word	0x100032f0
   28afc:	1000306c 	.word	0x1000306c

00028b00 <ble_hs_hci_process_ack>:
{
   28b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b04:	4607      	mov	r7, r0
   28b06:	460e      	mov	r6, r1
   28b08:	4690      	mov	r8, r2
   28b0a:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   28b0c:	4a1e      	ldr	r2, [pc, #120]	; (28b88 <ble_hs_hci_process_ack+0x88>)
   28b0e:	6993      	ldr	r3, [r2, #24]
   28b10:	3301      	adds	r3, #1
   28b12:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   28b14:	2300      	movs	r3, #0
   28b16:	6023      	str	r3, [r4, #0]
   28b18:	6063      	str	r3, [r4, #4]
   28b1a:	60a3      	str	r3, [r4, #8]
   28b1c:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   28b1e:	4b1b      	ldr	r3, [pc, #108]	; (28b8c <ble_hs_hci_process_ack+0x8c>)
   28b20:	6818      	ldr	r0, [r3, #0]
   28b22:	7803      	ldrb	r3, [r0, #0]
   28b24:	2b0e      	cmp	r3, #14
   28b26:	d00a      	beq.n	28b3e <ble_hs_hci_process_ack+0x3e>
   28b28:	2b0f      	cmp	r3, #15
   28b2a:	d01e      	beq.n	28b6a <ble_hs_hci_process_ack+0x6a>
   28b2c:	2511      	movs	r5, #17
    if (rc != 0) {
   28b2e:	b11d      	cbz	r5, 28b38 <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   28b30:	4a15      	ldr	r2, [pc, #84]	; (28b88 <ble_hs_hci_process_ack+0x88>)
   28b32:	69d3      	ldr	r3, [r2, #28]
   28b34:	3301      	adds	r3, #1
   28b36:	61d3      	str	r3, [r2, #28]
}
   28b38:	4628      	mov	r0, r5
   28b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   28b3e:	4622      	mov	r2, r4
   28b40:	7841      	ldrb	r1, [r0, #1]
   28b42:	3002      	adds	r0, #2
   28b44:	f7ff ff76 	bl	28a34 <ble_hs_hci_rx_cmd_complete>
   28b48:	4605      	mov	r5, r0
    if (rc == 0) {
   28b4a:	2d00      	cmp	r5, #0
   28b4c:	d1ef      	bne.n	28b2e <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   28b4e:	b19e      	cbz	r6, 28b78 <ble_hs_hci_process_ack+0x78>
   28b50:	6861      	ldr	r1, [r4, #4]
   28b52:	b189      	cbz	r1, 28b78 <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   28b54:	68a3      	ldr	r3, [r4, #8]
   28b56:	4543      	cmp	r3, r8
   28b58:	dd02      	ble.n	28b60 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   28b5a:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   28b5e:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   28b60:	68a2      	ldr	r2, [r4, #8]
   28b62:	4630      	mov	r0, r6
   28b64:	f7ed ffa2 	bl	16aac <memcpy>
   28b68:	e008      	b.n	28b7c <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   28b6a:	4622      	mov	r2, r4
   28b6c:	7841      	ldrb	r1, [r0, #1]
   28b6e:	3002      	adds	r0, #2
   28b70:	f7ff ff85 	bl	28a7e <ble_hs_hci_rx_cmd_status>
   28b74:	4605      	mov	r5, r0
        break;
   28b76:	e7e8      	b.n	28b4a <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   28b78:	2300      	movs	r3, #0
   28b7a:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   28b7c:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   28b7e:	89a3      	ldrh	r3, [r4, #12]
   28b80:	42bb      	cmp	r3, r7
   28b82:	d0d4      	beq.n	28b2e <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   28b84:	250c      	movs	r5, #12
   28b86:	e7d3      	b.n	28b30 <ble_hs_hci_process_ack+0x30>
   28b88:	1000306c 	.word	0x1000306c
   28b8c:	10003188 	.word	0x10003188

00028b90 <ble_hs_hci_rx_ack>:
{
   28b90:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   28b92:	4b06      	ldr	r3, [pc, #24]	; (28bac <ble_hs_hci_rx_ack+0x1c>)
   28b94:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   28b96:	b92b      	cbnz	r3, 28ba4 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   28b98:	4b05      	ldr	r3, [pc, #20]	; (28bb0 <ble_hs_hci_rx_ack+0x20>)
   28b9a:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   28b9c:	4803      	ldr	r0, [pc, #12]	; (28bac <ble_hs_hci_rx_ack+0x1c>)
   28b9e:	f009 fa71 	bl	32084 <os_sem_release>
}
   28ba2:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   28ba4:	f004 fd8a 	bl	2d6bc <ble_hci_trans_buf_free>
        return;
   28ba8:	e7fb      	b.n	28ba2 <ble_hs_hci_rx_ack+0x12>
   28baa:	bf00      	nop
   28bac:	100032f0 	.word	0x100032f0
   28bb0:	10003188 	.word	0x10003188

00028bb4 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   28bb4:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, sizeof(struct ble_mbuf_hdr));
   28bb6:	2110      	movs	r1, #16
   28bb8:	4805      	ldr	r0, [pc, #20]	; (28bd0 <ble_hs_hci_frag_alloc+0x1c>)
   28bba:	f7ec fd32 	bl	15622 <os_mbuf_get_pkthdr>
#else
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
#endif
    if (om != NULL) {
   28bbe:	b118      	cbz	r0, 28bc8 <ble_hs_hci_frag_alloc+0x14>
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   28bc0:	6803      	ldr	r3, [r0, #0]
   28bc2:	3304      	adds	r3, #4
   28bc4:	6003      	str	r3, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   28bc6:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   28bc8:	f000 fd81 	bl	296ce <ble_hs_mbuf_acl_pkt>
    if (om != NULL) {
   28bcc:	e7fb      	b.n	28bc6 <ble_hs_hci_frag_alloc+0x12>
   28bce:	bf00      	nop
   28bd0:	100032bc 	.word	0x100032bc

00028bd4 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   28bd4:	b510      	push	{r4, lr}
   28bd6:	b082      	sub	sp, #8
   28bd8:	4604      	mov	r4, r0
   28bda:	4608      	mov	r0, r1
   28bdc:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   28bde:	2200      	movs	r2, #0
   28be0:	f000 fbe8 	bl	293b4 <ble_hs_hci_util_handle_pb_bc_join>
   28be4:	4601      	mov	r1, r0
   28be6:	a801      	add	r0, sp, #4
   28be8:	f009 f978 	bl	31edc <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   28bec:	8a21      	ldrh	r1, [r4, #16]
   28bee:	f10d 0006 	add.w	r0, sp, #6
   28bf2:	f009 f973 	bl	31edc <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   28bf6:	2104      	movs	r1, #4
   28bf8:	4620      	mov	r0, r4
   28bfa:	f7ec fe9a 	bl	15932 <os_mbuf_prepend>
    if (om2 == NULL) {
   28bfe:	4604      	mov	r4, r0
   28c00:	b158      	cbz	r0, 28c1a <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   28c02:	2104      	movs	r1, #4
   28c04:	f7ec ff8b 	bl	15b1e <os_mbuf_pullup>
    if (om == NULL) {
   28c08:	4604      	mov	r4, r0
   28c0a:	b130      	cbz	r0, 28c1a <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   28c0c:	6803      	ldr	r3, [r0, #0]
   28c0e:	9a01      	ldr	r2, [sp, #4]
   28c10:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   28c12:	f10d 0006 	add.w	r0, sp, #6
   28c16:	f009 f982 	bl	31f1e <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   28c1a:	4620      	mov	r0, r4
   28c1c:	b002      	add	sp, #8
   28c1e:	bd10      	pop	{r4, pc}

00028c20 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   28c20:	b130      	cbz	r0, 28c30 <ble_hs_hci_set_buf_sz+0x10>
   28c22:	b139      	cbz	r1, 28c34 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   28c24:	4a04      	ldr	r2, [pc, #16]	; (28c38 <ble_hs_hci_set_buf_sz+0x18>)
   28c26:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   28c28:	4b04      	ldr	r3, [pc, #16]	; (28c3c <ble_hs_hci_set_buf_sz+0x1c>)
   28c2a:	8019      	strh	r1, [r3, #0]
    return 0;
   28c2c:	2000      	movs	r0, #0
   28c2e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   28c30:	2003      	movs	r0, #3
   28c32:	4770      	bx	lr
   28c34:	2003      	movs	r0, #3
}
   28c36:	4770      	bx	lr
   28c38:	1000318e 	.word	0x1000318e
   28c3c:	1000318c 	.word	0x1000318c

00028c40 <ble_hs_hci_add_avail_pkts>:
{
   28c40:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   28c42:	4b07      	ldr	r3, [pc, #28]	; (28c60 <ble_hs_hci_add_avail_pkts+0x20>)
   28c44:	881b      	ldrh	r3, [r3, #0]
   28c46:	181a      	adds	r2, r3, r0
   28c48:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   28c4c:	da03      	bge.n	28c56 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   28c4e:	4418      	add	r0, r3
   28c50:	4b03      	ldr	r3, [pc, #12]	; (28c60 <ble_hs_hci_add_avail_pkts+0x20>)
   28c52:	8018      	strh	r0, [r3, #0]
}
   28c54:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   28c56:	200c      	movs	r0, #12
   28c58:	f7fe ff78 	bl	27b4c <ble_hs_sched_reset>
   28c5c:	e7fa      	b.n	28c54 <ble_hs_hci_add_avail_pkts+0x14>
   28c5e:	bf00      	nop
   28c60:	1000318c 	.word	0x1000318c

00028c64 <ble_hs_hci_cmd_tx_no_rsp>:
{
   28c64:	b570      	push	{r4, r5, r6, lr}
   28c66:	4604      	mov	r4, r0
   28c68:	460d      	mov	r5, r1
   28c6a:	4616      	mov	r6, r2
    ble_hs_hci_lock();
   28c6c:	f7ff ff20 	bl	28ab0 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   28c70:	4632      	mov	r2, r6
   28c72:	4629      	mov	r1, r5
   28c74:	4620      	mov	r0, r4
   28c76:	f000 f91d 	bl	28eb4 <ble_hs_hci_cmd_send_buf>
   28c7a:	4604      	mov	r4, r0
    ble_hs_hci_unlock();
   28c7c:	f7ff ff22 	bl	28ac4 <ble_hs_hci_unlock>
}
   28c80:	4620      	mov	r0, r4
   28c82:	bd70      	pop	{r4, r5, r6, pc}

00028c84 <ble_hs_hci_cmd_tx>:
{
   28c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c88:	b084      	sub	sp, #16
   28c8a:	4604      	mov	r4, r0
   28c8c:	460d      	mov	r5, r1
   28c8e:	4616      	mov	r6, r2
   28c90:	461f      	mov	r7, r3
   28c92:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   28c96:	f7ff ff0b 	bl	28ab0 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   28c9a:	4632      	mov	r2, r6
   28c9c:	4629      	mov	r1, r5
   28c9e:	4620      	mov	r0, r4
   28ca0:	f000 f908 	bl	28eb4 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   28ca4:	4605      	mov	r5, r0
   28ca6:	b168      	cbz	r0, 28cc4 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   28ca8:	4b14      	ldr	r3, [pc, #80]	; (28cfc <ble_hs_hci_cmd_tx+0x78>)
   28caa:	6818      	ldr	r0, [r3, #0]
   28cac:	b120      	cbz	r0, 28cb8 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   28cae:	f004 fd05 	bl	2d6bc <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   28cb2:	4b12      	ldr	r3, [pc, #72]	; (28cfc <ble_hs_hci_cmd_tx+0x78>)
   28cb4:	2200      	movs	r2, #0
   28cb6:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   28cb8:	f7ff ff04 	bl	28ac4 <ble_hs_hci_unlock>
}
   28cbc:	4628      	mov	r0, r5
   28cbe:	b004      	add	sp, #16
   28cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   28cc4:	f7ff ff06 	bl	28ad4 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   28cc8:	4605      	mov	r5, r0
   28cca:	b988      	cbnz	r0, 28cf0 <ble_hs_hci_cmd_tx+0x6c>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   28ccc:	466b      	mov	r3, sp
   28cce:	4642      	mov	r2, r8
   28cd0:	4639      	mov	r1, r7
   28cd2:	4620      	mov	r0, r4
   28cd4:	f7ff ff14 	bl	28b00 <ble_hs_hci_process_ack>
    if (rc != 0) {
   28cd8:	4605      	mov	r5, r0
   28cda:	b960      	cbnz	r0, 28cf6 <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   28cdc:	9d00      	ldr	r5, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   28cde:	2d00      	cmp	r5, #0
   28ce0:	d1e2      	bne.n	28ca8 <ble_hs_hci_cmd_tx+0x24>
   28ce2:	9b02      	ldr	r3, [sp, #8]
   28ce4:	4543      	cmp	r3, r8
   28ce6:	d0df      	beq.n	28ca8 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   28ce8:	4628      	mov	r0, r5
   28cea:	f7fe ff2f 	bl	27b4c <ble_hs_sched_reset>
        goto done;
   28cee:	e7db      	b.n	28ca8 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   28cf0:	f7fe ff2c 	bl	27b4c <ble_hs_sched_reset>
        goto done;
   28cf4:	e7d8      	b.n	28ca8 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   28cf6:	f7fe ff29 	bl	27b4c <ble_hs_sched_reset>
        goto done;
   28cfa:	e7d5      	b.n	28ca8 <ble_hs_hci_cmd_tx+0x24>
   28cfc:	10003188 	.word	0x10003188

00028d00 <ble_hs_hci_rx_evt>:
{
   28d00:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   28d02:	7803      	ldrb	r3, [r0, #0]
   28d04:	2b0e      	cmp	r3, #14
   28d06:	d005      	beq.n	28d14 <ble_hs_hci_rx_evt+0x14>
   28d08:	2b0f      	cmp	r3, #15
   28d0a:	d00d      	beq.n	28d28 <ble_hs_hci_rx_evt+0x28>
        ble_hs_enqueue_hci_event(hci_ev);
   28d0c:	f7fe ff00 	bl	27b10 <ble_hs_enqueue_hci_event>
}
   28d10:	2000      	movs	r0, #0
   28d12:	bd08      	pop	{r3, pc}
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   28d14:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   28d18:	fab3 f383 	clz	r3, r3
   28d1c:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   28d1e:	2b00      	cmp	r3, #0
   28d20:	d1f4      	bne.n	28d0c <ble_hs_hci_rx_evt+0xc>
        ble_hs_hci_rx_ack(hci_ev);
   28d22:	f7ff ff35 	bl	28b90 <ble_hs_hci_rx_ack>
   28d26:	e7f3      	b.n	28d10 <ble_hs_hci_rx_evt+0x10>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   28d28:	8883      	ldrh	r3, [r0, #4]
   28d2a:	fab3 f383 	clz	r3, r3
   28d2e:	095b      	lsrs	r3, r3, #5
        break;
   28d30:	e7f5      	b.n	28d1e <ble_hs_hci_rx_evt+0x1e>
	...

00028d34 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   28d34:	b570      	push	{r4, r5, r6, lr}
   28d36:	b082      	sub	sp, #8
   28d38:	4604      	mov	r4, r0
   28d3a:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   28d3c:	680b      	ldr	r3, [r1, #0]
   28d3e:	9301      	str	r3, [sp, #4]
    *om = NULL;
   28d40:	2300      	movs	r3, #0
   28d42:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   28d44:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
   28d48:	f016 0604 	ands.w	r6, r6, #4
   28d4c:	d000      	beq.n	28d50 <ble_hs_hci_acl_tx_now+0x1c>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   28d4e:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   28d50:	9b01      	ldr	r3, [sp, #4]
   28d52:	b35b      	cbz	r3, 28dac <ble_hs_hci_acl_tx_now+0x78>
   28d54:	4a22      	ldr	r2, [pc, #136]	; (28de0 <ble_hs_hci_acl_tx_now+0xac>)
   28d56:	8812      	ldrh	r2, [r2, #0]
   28d58:	b342      	cbz	r2, 28dac <ble_hs_hci_acl_tx_now+0x78>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   28d5a:	f7ff fea3 	bl	28aa4 <ble_hs_hci_max_acl_payload_sz>
   28d5e:	4601      	mov	r1, r0
   28d60:	2300      	movs	r3, #0
   28d62:	4a20      	ldr	r2, [pc, #128]	; (28de4 <ble_hs_hci_acl_tx_now+0xb0>)
   28d64:	a801      	add	r0, sp, #4
   28d66:	f7f1 fa95 	bl	1a294 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   28d6a:	b1d8      	cbz	r0, 28da4 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   28d6c:	4632      	mov	r2, r6
   28d6e:	88a1      	ldrh	r1, [r4, #4]
   28d70:	f7ff ff30 	bl	28bd4 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   28d74:	4606      	mov	r6, r0
   28d76:	b328      	cbz	r0, 28dc4 <ble_hs_hci_acl_tx_now+0x90>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   28d78:	f000 fc7c 	bl	29674 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   28d7c:	4630      	mov	r0, r6
   28d7e:	f7fe ff48 	bl	27c12 <ble_hs_tx_data>
        if (rc != 0) {
   28d82:	4606      	mov	r6, r0
   28d84:	b9f8      	cbnz	r0, 28dc6 <ble_hs_hci_acl_tx_now+0x92>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   28d86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   28d8a:	f043 0304 	orr.w	r3, r3, #4
   28d8e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   28d92:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   28d94:	3301      	adds	r3, #1
   28d96:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   28d98:	4a11      	ldr	r2, [pc, #68]	; (28de0 <ble_hs_hci_acl_tx_now+0xac>)
   28d9a:	8813      	ldrh	r3, [r2, #0]
   28d9c:	3b01      	subs	r3, #1
   28d9e:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   28da0:	2601      	movs	r6, #1
   28da2:	e7d5      	b.n	28d50 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   28da4:	9b01      	ldr	r3, [sp, #4]
   28da6:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   28da8:	2601      	movs	r6, #1
   28daa:	e015      	b.n	28dd8 <ble_hs_hci_acl_tx_now+0xa4>
    }

    if (txom != NULL) {
   28dac:	b113      	cbz	r3, 28db4 <ble_hs_hci_acl_tx_now+0x80>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   28dae:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   28db0:	2601      	movs	r6, #1
   28db2:	e011      	b.n	28dd8 <ble_hs_hci_acl_tx_now+0xa4>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   28db4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   28db8:	f023 0304 	bic.w	r3, r3, #4
   28dbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   28dc0:	2600      	movs	r6, #0
   28dc2:	e009      	b.n	28dd8 <ble_hs_hci_acl_tx_now+0xa4>
            rc = BLE_HS_ENOMEM;
   28dc4:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   28dc6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   28dca:	f023 0304 	bic.w	r3, r3, #4
   28dce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   28dd2:	9801      	ldr	r0, [sp, #4]
   28dd4:	f7ec fc48 	bl	15668 <os_mbuf_free_chain>
    return rc;
}
   28dd8:	4630      	mov	r0, r6
   28dda:	b002      	add	sp, #8
   28ddc:	bd70      	pop	{r4, r5, r6, pc}
   28dde:	bf00      	nop
   28de0:	1000318c 	.word	0x1000318c
   28de4:	00028bb5 	.word	0x00028bb5

00028de8 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   28de8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   28dea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   28dec:	b10b      	cbz	r3, 28df2 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   28dee:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   28df0:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   28df2:	f7ff ff9f 	bl	28d34 <ble_hs_hci_acl_tx_now>
   28df6:	e7fb      	b.n	28df0 <ble_hs_hci_acl_tx+0x8>

00028df8 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   28df8:	4b01      	ldr	r3, [pc, #4]	; (28e00 <ble_hs_hci_set_le_supported_feat+0x8>)
   28dfa:	6018      	str	r0, [r3, #0]
}
   28dfc:	4770      	bx	lr
   28dfe:	bf00      	nop
   28e00:	100032f8 	.word	0x100032f8

00028e04 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   28e04:	4b01      	ldr	r3, [pc, #4]	; (28e0c <ble_hs_hci_set_hci_version+0x8>)
   28e06:	7018      	strb	r0, [r3, #0]
}
   28e08:	4770      	bx	lr
   28e0a:	bf00      	nop
   28e0c:	100032fc 	.word	0x100032fc

00028e10 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   28e10:	4b01      	ldr	r3, [pc, #4]	; (28e18 <ble_hs_hci_get_hci_version+0x8>)
   28e12:	7818      	ldrb	r0, [r3, #0]
   28e14:	4770      	bx	lr
   28e16:	bf00      	nop
   28e18:	100032fc 	.word	0x100032fc

00028e1c <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   28e1c:	b500      	push	{lr}
   28e1e:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   28e20:	2100      	movs	r1, #0
   28e22:	480a      	ldr	r0, [pc, #40]	; (28e4c <ble_hs_hci_init+0x30>)
   28e24:	f009 f926 	bl	32074 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   28e28:	4809      	ldr	r0, [pc, #36]	; (28e50 <ble_hs_hci_init+0x34>)
   28e2a:	f7ed fd39 	bl	168a0 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   28e2e:	4b09      	ldr	r3, [pc, #36]	; (28e54 <ble_hs_hci_init+0x38>)
   28e30:	9301      	str	r3, [sp, #4]
   28e32:	f44f 7396 	mov.w	r3, #300	; 0x12c
   28e36:	9300      	str	r3, [sp, #0]
   28e38:	2301      	movs	r3, #1
   28e3a:	4a07      	ldr	r2, [pc, #28]	; (28e58 <ble_hs_hci_init+0x3c>)
   28e3c:	4907      	ldr	r1, [pc, #28]	; (28e5c <ble_hs_hci_init+0x40>)
   28e3e:	4808      	ldr	r0, [pc, #32]	; (28e60 <ble_hs_hci_init+0x44>)
   28e40:	f7f1 fa10 	bl	1a264 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   28e44:	b003      	add	sp, #12
   28e46:	f85d fb04 	ldr.w	pc, [sp], #4
   28e4a:	bf00      	nop
   28e4c:	100032f0 	.word	0x100032f0
   28e50:	100032e4 	.word	0x100032e4
   28e54:	00034ce8 	.word	0x00034ce8
   28e58:	100032bc 	.word	0x100032bc
   28e5c:	100032c8 	.word	0x100032c8
   28e60:	10003190 	.word	0x10003190

00028e64 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   28e64:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   28e66:	f004 fba9 	bl	2d5bc <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   28e6a:	4603      	mov	r3, r0
   28e6c:	b110      	cbz	r0, 28e74 <ble_hs_hci_cmd_transport+0x10>
   28e6e:	2807      	cmp	r0, #7
   28e70:	d102      	bne.n	28e78 <ble_hs_hci_cmd_transport+0x14>
    case 0:
        return 0;

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;
   28e72:	2314      	movs	r3, #20

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   28e74:	4618      	mov	r0, r3
   28e76:	bd08      	pop	{r3, pc}
        return BLE_HS_EUNKNOWN;
   28e78:	2311      	movs	r3, #17
   28e7a:	e7fb      	b.n	28e74 <ble_hs_hci_cmd_transport+0x10>

00028e7c <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   28e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e7e:	4606      	mov	r6, r0
   28e80:	460d      	mov	r5, r1
   28e82:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   28e84:	2003      	movs	r0, #3
   28e86:	f004 fbf1 	bl	2d66c <ble_hci_trans_buf_alloc>
   28e8a:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   28e8c:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   28e8e:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   28e90:	b945      	cbnz	r5, 28ea4 <ble_hs_hci_cmd_send+0x28>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   28e92:	4620      	mov	r0, r4
   28e94:	f7ff ffe6 	bl	28e64 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   28e98:	b918      	cbnz	r0, 28ea2 <ble_hs_hci_cmd_send+0x26>
        STATS_INC(ble_hs_stats, hci_cmd);
   28e9a:	4a05      	ldr	r2, [pc, #20]	; (28eb0 <ble_hs_hci_cmd_send+0x34>)
   28e9c:	6953      	ldr	r3, [r2, #20]
   28e9e:	3301      	adds	r3, #1
   28ea0:	6153      	str	r3, [r2, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   28ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   28ea4:	462a      	mov	r2, r5
   28ea6:	4639      	mov	r1, r7
   28ea8:	3003      	adds	r0, #3
   28eaa:	f7ed fdff 	bl	16aac <memcpy>
   28eae:	e7f0      	b.n	28e92 <ble_hs_hci_cmd_send+0x16>
   28eb0:	1000306c 	.word	0x1000306c

00028eb4 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   28eb4:	b570      	push	{r4, r5, r6, lr}
   28eb6:	4604      	mov	r4, r0
   28eb8:	460e      	mov	r6, r1
   28eba:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   28ebc:	4b0a      	ldr	r3, [pc, #40]	; (28ee8 <ble_hs_hci_cmd_send_buf+0x34>)
   28ebe:	781b      	ldrb	r3, [r3, #0]
   28ec0:	2b01      	cmp	r3, #1
   28ec2:	d006      	beq.n	28ed2 <ble_hs_hci_cmd_send_buf+0x1e>
   28ec4:	2b02      	cmp	r3, #2
   28ec6:	d007      	beq.n	28ed8 <ble_hs_hci_cmd_send_buf+0x24>
   28ec8:	b10b      	cbz	r3, 28ece <ble_hs_hci_cmd_send_buf+0x1a>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   28eca:	2011      	movs	r0, #17
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
}
   28ecc:	bd70      	pop	{r4, r5, r6, pc}
    switch (ble_hs_sync_state) {
   28ece:	2016      	movs	r0, #22
   28ed0:	e7fc      	b.n	28ecc <ble_hs_hci_cmd_send_buf+0x18>
        if (!ble_hs_is_parent_task()) {
   28ed2:	f7fe fd01 	bl	278d8 <ble_hs_is_parent_task>
   28ed6:	b128      	cbz	r0, 28ee4 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   28ed8:	4632      	mov	r2, r6
   28eda:	4629      	mov	r1, r5
   28edc:	4620      	mov	r0, r4
   28ede:	f7ff ffcd 	bl	28e7c <ble_hs_hci_cmd_send>
   28ee2:	e7f3      	b.n	28ecc <ble_hs_hci_cmd_send_buf+0x18>
            return BLE_HS_ENOTSYNCED;
   28ee4:	2016      	movs	r0, #22
   28ee6:	e7f1      	b.n	28ecc <ble_hs_hci_cmd_send_buf+0x18>
   28ee8:	100030a4 	.word	0x100030a4

00028eec <ble_hs_hci_evt_dispatch_find>:
#define BLE_HS_HCI_EVT_LE_DISPATCH_SZ \
    (sizeof ble_hs_hci_evt_le_dispatch / sizeof ble_hs_hci_evt_le_dispatch[0])

static const struct ble_hs_hci_evt_dispatch_entry *
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
   28eec:	4601      	mov	r1, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   28eee:	2300      	movs	r3, #0
   28ef0:	2b05      	cmp	r3, #5
   28ef2:	d808      	bhi.n	28f06 <ble_hs_hci_evt_dispatch_find+0x1a>
        entry = ble_hs_hci_evt_dispatch + i;
   28ef4:	4a05      	ldr	r2, [pc, #20]	; (28f0c <ble_hs_hci_evt_dispatch_find+0x20>)
   28ef6:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   28efa:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   28efe:	428a      	cmp	r2, r1
   28f00:	d002      	beq.n	28f08 <ble_hs_hci_evt_dispatch_find+0x1c>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   28f02:	3301      	adds	r3, #1
   28f04:	e7f4      	b.n	28ef0 <ble_hs_hci_evt_dispatch_find+0x4>
            return entry;
        }
    }

    return NULL;
   28f06:	2000      	movs	r0, #0
}
   28f08:	4770      	bx	lr
   28f0a:	bf00      	nop
   28f0c:	00034cf8 	.word	0x00034cf8

00028f10 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   28f10:	2818      	cmp	r0, #24
   28f12:	d803      	bhi.n	28f1c <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   28f14:	4b02      	ldr	r3, [pc, #8]	; (28f20 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   28f16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   28f1a:	4770      	bx	lr
        return NULL;
   28f1c:	2000      	movs	r0, #0
}
   28f1e:	4770      	bx	lr
   28f20:	00034d28 	.word	0x00034d28

00028f24 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   28f24:	b16a      	cbz	r2, 28f42 <ble_hs_hci_evt_le_meta+0x1e>
{
   28f26:	b570      	push	{r4, r5, r6, lr}
   28f28:	460c      	mov	r4, r1
   28f2a:	4616      	mov	r6, r2
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   28f2c:	780d      	ldrb	r5, [r1, #0]
   28f2e:	4628      	mov	r0, r5
   28f30:	f7ff ffee 	bl	28f10 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   28f34:	4603      	mov	r3, r0
   28f36:	b130      	cbz	r0, 28f46 <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   28f38:	4632      	mov	r2, r6
   28f3a:	4621      	mov	r1, r4
   28f3c:	4628      	mov	r0, r5
   28f3e:	4798      	blx	r3
    }

    return 0;
}
   28f40:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   28f42:	200c      	movs	r0, #12
}
   28f44:	4770      	bx	lr
    return 0;
   28f46:	2000      	movs	r0, #0
   28f48:	e7fa      	b.n	28f40 <ble_hs_hci_evt_le_meta+0x1c>

00028f4a <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   28f4a:	2901      	cmp	r1, #1
   28f4c:	d91a      	bls.n	28f84 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   28f4e:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   28f50:	3902      	subs	r1, #2
    data += sizeof(*ev);
   28f52:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   28f54:	7840      	ldrb	r0, [r0, #1]
   28f56:	1e43      	subs	r3, r0, #1
   28f58:	b2db      	uxtb	r3, r3
   28f5a:	2b18      	cmp	r3, #24
   28f5c:	d814      	bhi.n	28f88 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   28f5e:	2200      	movs	r2, #0
   28f60:	e003      	b.n	28f6a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x20>

        if (rpt->data_len > len) {
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   28f62:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   28f64:	3305      	adds	r3, #5
   28f66:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   28f68:	3201      	adds	r2, #1
   28f6a:	4290      	cmp	r0, r2
   28f6c:	dd07      	ble.n	28f7e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
        if (len < sizeof(*rpt) + 1) {
   28f6e:	2909      	cmp	r1, #9
   28f70:	d90c      	bls.n	28f8c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x42>
        len -= sizeof(*rpt) + 1;
   28f72:	390a      	subs	r1, #10
        if (rpt->data_len > len) {
   28f74:	7a23      	ldrb	r3, [r4, #8]
   28f76:	428b      	cmp	r3, r1
   28f78:	d9f3      	bls.n	28f62 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x18>
            return BLE_HS_ECONTROLLER;
   28f7a:	200c      	movs	r0, #12
   28f7c:	e007      	b.n	28f8e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
    }

    /* Make sure length was correct */
    if (len) {
   28f7e:	b941      	cbnz	r1, 28f92 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   28f80:	2000      	movs	r0, #0
   28f82:	e004      	b.n	28f8e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
        return BLE_HS_ECONTROLLER;
   28f84:	200c      	movs	r0, #12
}
   28f86:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   28f88:	200a      	movs	r0, #10
   28f8a:	e000      	b.n	28f8e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
   28f8c:	200c      	movs	r0, #12
}
   28f8e:	bc10      	pop	{r4}
   28f90:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   28f92:	200c      	movs	r0, #12
   28f94:	e7fb      	b.n	28f8e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>

00028f96 <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   28f96:	2000      	movs	r0, #0
   28f98:	4770      	bx	lr

00028f9a <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   28f9a:	2000      	movs	r0, #0
   28f9c:	4770      	bx	lr

00028f9e <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   28f9e:	2000      	movs	r0, #0
   28fa0:	4770      	bx	lr

00028fa2 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   28fa2:	2000      	movs	r0, #0
   28fa4:	4770      	bx	lr

00028fa6 <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   28fa6:	2000      	movs	r0, #0
   28fa8:	4770      	bx	lr

00028faa <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   28faa:	2000      	movs	r0, #0
   28fac:	4770      	bx	lr

00028fae <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   28fae:	2000      	movs	r0, #0
   28fb0:	4770      	bx	lr

00028fb2 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   28fb2:	2000      	movs	r0, #0
   28fb4:	4770      	bx	lr

00028fb6 <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   28fb6:	2a01      	cmp	r2, #1
   28fb8:	d001      	beq.n	28fbe <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   28fba:	200c      	movs	r0, #12
}
   28fbc:	4770      	bx	lr
{
   28fbe:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   28fc0:	7808      	ldrb	r0, [r1, #0]
   28fc2:	f7fe fdd3 	bl	27b6c <ble_hs_hw_error>
    return 0;
   28fc6:	2000      	movs	r0, #0
}
   28fc8:	bd08      	pop	{r3, pc}

00028fca <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   28fca:	2a03      	cmp	r2, #3
   28fcc:	d001      	beq.n	28fd2 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   28fce:	200c      	movs	r0, #12
}
   28fd0:	4770      	bx	lr
{
   28fd2:	b508      	push	{r3, lr}
    ble_sm_enc_key_refresh_rx(ev);
   28fd4:	4608      	mov	r0, r1
   28fd6:	f002 fd3f 	bl	2ba58 <ble_sm_enc_key_refresh_rx>
    return 0;
   28fda:	2000      	movs	r0, #0
}
   28fdc:	bd08      	pop	{r3, pc}

00028fde <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   28fde:	2a04      	cmp	r2, #4
   28fe0:	d001      	beq.n	28fe6 <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   28fe2:	200c      	movs	r0, #12
}
   28fe4:	4770      	bx	lr
{
   28fe6:	b508      	push	{r3, lr}
    ble_sm_enc_change_rx(ev);
   28fe8:	4608      	mov	r0, r1
   28fea:	f002 fd2b 	bl	2ba44 <ble_sm_enc_change_rx>
    return 0;
   28fee:	2000      	movs	r0, #0
}
   28ff0:	bd08      	pop	{r3, pc}

00028ff2 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   28ff2:	2a04      	cmp	r2, #4
   28ff4:	d001      	beq.n	28ffa <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   28ff6:	200c      	movs	r0, #12
}
   28ff8:	4770      	bx	lr
{
   28ffa:	b510      	push	{r4, lr}
   28ffc:	460c      	mov	r4, r1
    ble_hs_lock();
   28ffe:	f7fe fc8f 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   29002:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   29006:	f7ff fae7 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   2900a:	b110      	cbz	r0, 29012 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   2900c:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   2900e:	f7ff fe17 	bl	28c40 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   29012:	f7fe fc89 	bl	27928 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   29016:	4620      	mov	r0, r4
   29018:	f7fc f818 	bl	2504c <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   2901c:	f7fe fc9a 	bl	27954 <ble_hs_wakeup_tx>
    return 0;
   29020:	2000      	movs	r0, #0
}
   29022:	bd10      	pop	{r4, pc}

00029024 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   29024:	780b      	ldrb	r3, [r1, #0]
   29026:	009b      	lsls	r3, r3, #2
   29028:	3301      	adds	r3, #1
   2902a:	4293      	cmp	r3, r2
   2902c:	d129      	bne.n	29082 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   2902e:	b570      	push	{r4, r5, r6, lr}
   29030:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   29032:	2400      	movs	r4, #0
   29034:	e008      	b.n	29048 <ble_hs_hci_evt_num_completed_pkts+0x24>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   29036:	200c      	movs	r0, #12
   29038:	f7fe fd88 	bl	27b4c <ble_hs_sched_reset>
                ble_hs_hci_add_avail_pkts(num_pkts);
   2903c:	4630      	mov	r0, r6
   2903e:	f7ff fdff 	bl	28c40 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   29042:	f7fe fc71 	bl	27928 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   29046:	3401      	adds	r4, #1
   29048:	782b      	ldrb	r3, [r5, #0]
   2904a:	42a3      	cmp	r3, r4
   2904c:	dd15      	ble.n	2907a <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   2904e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29052:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   29056:	2e00      	cmp	r6, #0
   29058:	d0f5      	beq.n	29046 <ble_hs_hci_evt_num_completed_pkts+0x22>
            ble_hs_lock();
   2905a:	f7fe fc61 	bl	27920 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   2905e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   29062:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   29066:	f7ff fab7 	bl	285d8 <ble_hs_conn_find>
            if (conn != NULL) {
   2906a:	2800      	cmp	r0, #0
   2906c:	d0e9      	beq.n	29042 <ble_hs_hci_evt_num_completed_pkts+0x1e>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   2906e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   29070:	42b3      	cmp	r3, r6
   29072:	d3e0      	bcc.n	29036 <ble_hs_hci_evt_num_completed_pkts+0x12>
                    conn->bhc_outstanding_pkts -= num_pkts;
   29074:	1b9b      	subs	r3, r3, r6
   29076:	8703      	strh	r3, [r0, #56]	; 0x38
   29078:	e7e0      	b.n	2903c <ble_hs_hci_evt_num_completed_pkts+0x18>
    ble_hs_wakeup_tx();
   2907a:	f7fe fc6b 	bl	27954 <ble_hs_wakeup_tx>
    return 0;
   2907e:	2000      	movs	r0, #0
}
   29080:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   29082:	200c      	movs	r0, #12
}
   29084:	4770      	bx	lr

00029086 <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   29086:	2a06      	cmp	r2, #6
   29088:	d001      	beq.n	2908e <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2908a:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   2908c:	4770      	bx	lr
{
   2908e:	b508      	push	{r3, lr}
    ble_gap_rx_phy_update_complete(ev);
   29090:	4608      	mov	r0, r1
   29092:	f7fb fcfb 	bl	24a8c <ble_gap_rx_phy_update_complete>
    return 0;
   29096:	2000      	movs	r0, #0
}
   29098:	bd08      	pop	{r3, pc}

0002909a <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   2909a:	b530      	push	{r4, r5, lr}
   2909c:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   2909e:	2300      	movs	r3, #0
   290a0:	9300      	str	r3, [sp, #0]
   290a2:	9301      	str	r3, [sp, #4]
   290a4:	9302      	str	r3, [sp, #8]
   290a6:	9304      	str	r3, [sp, #16]
   290a8:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   290aa:	2a01      	cmp	r2, #1
   290ac:	d932      	bls.n	29114 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   290ae:	460d      	mov	r5, r1
   290b0:	784b      	ldrb	r3, [r1, #1]
   290b2:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   290b6:	d12f      	bne.n	29118 <ble_hs_hci_evt_le_dir_adv_rpt+0x7e>
    desc.data = NULL;
   290b8:	2400      	movs	r4, #0
   290ba:	9403      	str	r4, [sp, #12]
    desc.length_data = 0;
   290bc:	f88d 4001 	strb.w	r4, [sp, #1]
    for (i = 0; i < ev->num_reports; i++) {
   290c0:	786b      	ldrb	r3, [r5, #1]
   290c2:	42a3      	cmp	r3, r4
   290c4:	dd23      	ble.n	2910e <ble_hs_hci_evt_le_dir_adv_rpt+0x74>
        desc.event_type = ev->reports[i].type;
   290c6:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   290ca:	789a      	ldrb	r2, [r3, #2]
   290cc:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   290d0:	78da      	ldrb	r2, [r3, #3]
   290d2:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   290d6:	461a      	mov	r2, r3
   290d8:	f852 1f04 	ldr.w	r1, [r2, #4]!
   290dc:	f8cd 1003 	str.w	r1, [sp, #3]
   290e0:	8892      	ldrh	r2, [r2, #4]
   290e2:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   290e6:	7a9a      	ldrb	r2, [r3, #10]
   290e8:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   290ec:	461a      	mov	r2, r3
   290ee:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   290f2:	f8cd 1011 	str.w	r1, [sp, #17]
   290f6:	8892      	ldrh	r2, [r2, #4]
   290f8:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   290fc:	f993 3011 	ldrsb.w	r3, [r3, #17]
   29100:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   29104:	4668      	mov	r0, sp
   29106:	f7fb fc98 	bl	24a3a <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   2910a:	3401      	adds	r4, #1
   2910c:	e7d8      	b.n	290c0 <ble_hs_hci_evt_le_dir_adv_rpt+0x26>
    return 0;
   2910e:	2000      	movs	r0, #0
}
   29110:	b007      	add	sp, #28
   29112:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   29114:	200c      	movs	r0, #12
   29116:	e7fb      	b.n	29110 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   29118:	200c      	movs	r0, #12
   2911a:	e7f9      	b.n	29110 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>

0002911c <ble_hs_hci_evt_le_adv_rpt>:
{
   2911c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2911e:	b087      	sub	sp, #28
   29120:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   29122:	2300      	movs	r3, #0
   29124:	9300      	str	r3, [sp, #0]
   29126:	9301      	str	r3, [sp, #4]
   29128:	9302      	str	r3, [sp, #8]
   2912a:	9303      	str	r3, [sp, #12]
   2912c:	9304      	str	r3, [sp, #16]
   2912e:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   29130:	4611      	mov	r1, r2
   29132:	4630      	mov	r0, r6
   29134:	f7ff ff09 	bl	28f4a <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   29138:	4607      	mov	r7, r0
   2913a:	bb58      	cbnz	r0, 29194 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   2913c:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   2913e:	2200      	movs	r2, #0
   29140:	9204      	str	r2, [sp, #16]
   29142:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   29146:	4605      	mov	r5, r0
   29148:	7872      	ldrb	r2, [r6, #1]
   2914a:	42aa      	cmp	r2, r5
   2914c:	dd22      	ble.n	29194 <ble_hs_hci_evt_le_adv_rpt+0x78>
        data += sizeof(rpt) + rpt->data_len + 1;
   2914e:	7a1c      	ldrb	r4, [r3, #8]
   29150:	3405      	adds	r4, #5
   29152:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   29154:	781a      	ldrb	r2, [r3, #0]
   29156:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   2915a:	785a      	ldrb	r2, [r3, #1]
   2915c:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   29160:	461a      	mov	r2, r3
   29162:	f852 1f02 	ldr.w	r1, [r2, #2]!
   29166:	f8cd 1003 	str.w	r1, [sp, #3]
   2916a:	8892      	ldrh	r2, [r2, #4]
   2916c:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   29170:	7a1a      	ldrb	r2, [r3, #8]
   29172:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   29176:	f103 0209 	add.w	r2, r3, #9
   2917a:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   2917c:	7a1a      	ldrb	r2, [r3, #8]
   2917e:	4413      	add	r3, r2
   29180:	f993 3009 	ldrsb.w	r3, [r3, #9]
   29184:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   29188:	4668      	mov	r0, sp
   2918a:	f7fb fc56 	bl	24a3a <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   2918e:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   29190:	4623      	mov	r3, r4
   29192:	e7d9      	b.n	29148 <ble_hs_hci_evt_le_adv_rpt+0x2c>
}
   29194:	4638      	mov	r0, r7
   29196:	b007      	add	sp, #28
   29198:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002919a <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   2919a:	2a1f      	cmp	r2, #31
   2919c:	d001      	beq.n	291a2 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2919e:	200c      	movs	r0, #12
}
   291a0:	4770      	bx	lr
{
   291a2:	b510      	push	{r4, lr}
   291a4:	b088      	sub	sp, #32
   291a6:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   291a8:	2220      	movs	r2, #32
   291aa:	2100      	movs	r1, #0
   291ac:	4668      	mov	r0, sp
   291ae:	f7ed fca2 	bl	16af6 <memset>
    evt.status = ev->status;
   291b2:	7863      	ldrb	r3, [r4, #1]
   291b4:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   291b8:	bb63      	cbnz	r3, 29214 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   291ba:	8863      	ldrh	r3, [r4, #2]
   291bc:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   291c0:	7923      	ldrb	r3, [r4, #4]
   291c2:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   291c6:	7963      	ldrb	r3, [r4, #5]
   291c8:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   291cc:	4623      	mov	r3, r4
   291ce:	f853 2f06 	ldr.w	r2, [r3, #6]!
   291d2:	f8cd 2006 	str.w	r2, [sp, #6]
   291d6:	889b      	ldrh	r3, [r3, #4]
   291d8:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   291dc:	4623      	mov	r3, r4
   291de:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   291e2:	f8cd 2013 	str.w	r2, [sp, #19]
   291e6:	889b      	ldrh	r3, [r3, #4]
   291e8:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   291ec:	4623      	mov	r3, r4
   291ee:	f853 2f12 	ldr.w	r2, [r3, #18]!
   291f2:	f8cd 2019 	str.w	r2, [sp, #25]
   291f6:	889b      	ldrh	r3, [r3, #4]
   291f8:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   291fc:	8b23      	ldrh	r3, [r4, #24]
   291fe:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   29202:	8b63      	ldrh	r3, [r4, #26]
   29204:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   29208:	8ba3      	ldrh	r3, [r4, #28]
   2920a:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   2920e:	7fa3      	ldrb	r3, [r4, #30]
   29210:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   29214:	2100      	movs	r1, #0
   29216:	4668      	mov	r0, sp
   29218:	f7fb fd3a 	bl	24c90 <ble_gap_rx_conn_complete>
}
   2921c:	b008      	add	sp, #32
   2921e:	bd10      	pop	{r4, pc}

00029220 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   29220:	2a13      	cmp	r2, #19
   29222:	d001      	beq.n	29228 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   29224:	200c      	movs	r0, #12
}
   29226:	4770      	bx	lr
{
   29228:	b510      	push	{r4, lr}
   2922a:	b088      	sub	sp, #32
   2922c:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   2922e:	2220      	movs	r2, #32
   29230:	2100      	movs	r1, #0
   29232:	4668      	mov	r0, sp
   29234:	f7ed fc5f 	bl	16af6 <memset>
    evt.status = ev->status;
   29238:	7863      	ldrb	r3, [r4, #1]
   2923a:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   2923e:	b9e3      	cbnz	r3, 2927a <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   29240:	8863      	ldrh	r3, [r4, #2]
   29242:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   29246:	7923      	ldrb	r3, [r4, #4]
   29248:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   2924c:	7963      	ldrb	r3, [r4, #5]
   2924e:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   29252:	4623      	mov	r3, r4
   29254:	f853 2f06 	ldr.w	r2, [r3, #6]!
   29258:	f8cd 2006 	str.w	r2, [sp, #6]
   2925c:	889b      	ldrh	r3, [r3, #4]
   2925e:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   29262:	89a3      	ldrh	r3, [r4, #12]
   29264:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   29268:	89e3      	ldrh	r3, [r4, #14]
   2926a:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   2926e:	8a23      	ldrh	r3, [r4, #16]
   29270:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   29274:	7ca3      	ldrb	r3, [r4, #18]
   29276:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   2927a:	2100      	movs	r1, #0
   2927c:	4668      	mov	r0, sp
   2927e:	f7fb fd07 	bl	24c90 <ble_gap_rx_conn_complete>
}
   29282:	b008      	add	sp, #32
   29284:	bd10      	pop	{r4, pc}

00029286 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   29286:	2a0b      	cmp	r2, #11
   29288:	d001      	beq.n	2928e <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   2928a:	200c      	movs	r0, #12
}
   2928c:	4770      	bx	lr
{
   2928e:	b508      	push	{r3, lr}
    ble_gap_rx_param_req(ev);
   29290:	4608      	mov	r0, r1
   29292:	f7fb ffb9 	bl	25208 <ble_gap_rx_param_req>
    return 0;
   29296:	2000      	movs	r0, #0
}
   29298:	bd08      	pop	{r3, pc}

0002929a <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   2929a:	2a0d      	cmp	r2, #13
   2929c:	d001      	beq.n	292a2 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   2929e:	200c      	movs	r0, #12
}
   292a0:	4770      	bx	lr
{
   292a2:	b508      	push	{r3, lr}
    ble_sm_ltk_req_rx(ev);
   292a4:	4608      	mov	r0, r1
   292a6:	f002 fbdf 	bl	2ba68 <ble_sm_ltk_req_rx>
    return 0;
   292aa:	2000      	movs	r0, #0
}
   292ac:	bd08      	pop	{r3, pc}

000292ae <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   292ae:	2a0c      	cmp	r2, #12
   292b0:	d001      	beq.n	292b6 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   292b2:	200c      	movs	r0, #12
}
   292b4:	4770      	bx	lr
{
   292b6:	b508      	push	{r3, lr}
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   292b8:	4608      	mov	r0, r1
   292ba:	f7fb fbbf 	bl	24a3c <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   292be:	2000      	movs	r0, #0
}
   292c0:	bd08      	pop	{r3, pc}

000292c2 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   292c2:	2a0a      	cmp	r2, #10
   292c4:	d001      	beq.n	292ca <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   292c6:	200c      	movs	r0, #12
}
   292c8:	4770      	bx	lr
{
   292ca:	b508      	push	{r3, lr}
    ble_gap_rx_update_complete(ev);
   292cc:	4608      	mov	r0, r1
   292ce:	f7fb ff0b 	bl	250e8 <ble_gap_rx_update_complete>
    return 0;
   292d2:	2000      	movs	r0, #0
}
   292d4:	bd08      	pop	{r3, pc}
	...

000292d8 <ble_hs_hci_evt_process>:
#endif

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   292d8:	b538      	push	{r3, r4, r5, lr}
   292da:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   292dc:	4a0c      	ldr	r2, [pc, #48]	; (29310 <ble_hs_hci_evt_process+0x38>)
   292de:	6993      	ldr	r3, [r2, #24]
   292e0:	3301      	adds	r3, #1
   292e2:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   292e4:	7805      	ldrb	r5, [r0, #0]
   292e6:	4628      	mov	r0, r5
   292e8:	f7ff fe00 	bl	28eec <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   292ec:	b150      	cbz	r0, 29304 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   292ee:	6843      	ldr	r3, [r0, #4]
   292f0:	7862      	ldrb	r2, [r4, #1]
   292f2:	1ca1      	adds	r1, r4, #2
   292f4:	4628      	mov	r0, r5
   292f6:	4798      	blx	r3
   292f8:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   292fa:	4620      	mov	r0, r4
   292fc:	f004 f9de 	bl	2d6bc <ble_hci_trans_buf_free>

    return rc;
}
   29300:	4628      	mov	r0, r5
   29302:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   29304:	4a02      	ldr	r2, [pc, #8]	; (29310 <ble_hs_hci_evt_process+0x38>)
   29306:	6a13      	ldr	r3, [r2, #32]
   29308:	3301      	adds	r3, #1
   2930a:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   2930c:	2508      	movs	r5, #8
   2930e:	e7f4      	b.n	292fa <ble_hs_hci_evt_process+0x22>
   29310:	1000306c 	.word	0x1000306c

00029314 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   29314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29318:	b086      	sub	sp, #24
   2931a:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   2931c:	a905      	add	r1, sp, #20
   2931e:	f000 f8a5 	bl	2946c <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   29322:	4605      	mov	r5, r0
   29324:	b130      	cbz	r0, 29334 <ble_hs_hci_evt_acl_process+0x20>
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   29326:	4620      	mov	r0, r4
   29328:	f7ec f99e 	bl	15668 <os_mbuf_free_chain>
    return rc;
#else
    return BLE_HS_ENOTSUP;
#endif
}
   2932c:	4628      	mov	r0, r5
   2932e:	b006      	add	sp, #24
   29330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_mbuf(om);
   29334:	4620      	mov	r0, r4
   29336:	f000 f99d 	bl	29674 <ble_hs_log_mbuf>
    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   2933a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2933e:	8a23      	ldrh	r3, [r4, #16]
   29340:	429a      	cmp	r2, r3
   29342:	d001      	beq.n	29348 <ble_hs_hci_evt_acl_process+0x34>
        rc = BLE_HS_EBADDATA;
   29344:	250a      	movs	r5, #10
   29346:	e7ee      	b.n	29326 <ble_hs_hci_evt_acl_process+0x12>
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   29348:	f8bd 7014 	ldrh.w	r7, [sp, #20]
   2934c:	f3c7 070b 	ubfx	r7, r7, #0, #12
    ble_hs_lock();
   29350:	f7fe fae6 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   29354:	4638      	mov	r0, r7
   29356:	f7ff f93f 	bl	285d8 <ble_hs_conn_find>
    if (conn == NULL) {
   2935a:	4680      	mov	r8, r0
   2935c:	b198      	cbz	r0, 29386 <ble_hs_hci_evt_acl_process+0x72>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   2935e:	ab03      	add	r3, sp, #12
   29360:	9300      	str	r3, [sp, #0]
   29362:	ab04      	add	r3, sp, #16
   29364:	4622      	mov	r2, r4
   29366:	a905      	add	r1, sp, #20
   29368:	f000 fdab 	bl	29ec2 <ble_l2cap_rx>
   2936c:	4606      	mov	r6, r0
        om = NULL;
   2936e:	2400      	movs	r4, #0
    ble_hs_unlock();
   29370:	f7fe fada 	bl	27928 <ble_hs_unlock>
    switch (rc) {
   29374:	b166      	cbz	r6, 29390 <ble_hs_hci_evt_acl_process+0x7c>
   29376:	2e01      	cmp	r6, #1
   29378:	d0d8      	beq.n	2932c <ble_hs_hci_evt_acl_process+0x18>
        if (reject_cid != -1) {
   2937a:	9b03      	ldr	r3, [sp, #12]
   2937c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29380:	d111      	bne.n	293a6 <ble_hs_hci_evt_acl_process+0x92>
        goto err;
   29382:	4635      	mov	r5, r6
   29384:	e7cf      	b.n	29326 <ble_hs_hci_evt_acl_process+0x12>
        reject_cid = -1;
   29386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2938a:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   2938c:	2607      	movs	r6, #7
   2938e:	e7ef      	b.n	29370 <ble_hs_hci_evt_acl_process+0x5c>
        rc = rx_cb(conn->bhc_rx_chan);
   29390:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   29394:	9b04      	ldr	r3, [sp, #16]
   29396:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   29398:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   2939c:	4640      	mov	r0, r8
   2939e:	f000 fd60 	bl	29e62 <ble_l2cap_remove_rx>
    return 0;
   293a2:	4635      	mov	r5, r6
        break;
   293a4:	e7c2      	b.n	2932c <ble_hs_hci_evt_acl_process+0x18>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   293a6:	b29b      	uxth	r3, r3
   293a8:	2200      	movs	r2, #0
   293aa:	4611      	mov	r1, r2
   293ac:	4638      	mov	r0, r7
   293ae:	f001 f90b 	bl	2a5c8 <ble_l2cap_sig_reject_invalid_cid_tx>
   293b2:	e7e6      	b.n	29382 <ble_hs_hci_evt_acl_process+0x6e>

000293b4 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   293b4:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   293b8:	b200      	sxth	r0, r0
           (pb      << 12)  |
   293ba:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   293be:	b280      	uxth	r0, r0
   293c0:	4770      	bx	lr
	...

000293c4 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   293c4:	b530      	push	{r4, r5, lr}
   293c6:	b085      	sub	sp, #20
   293c8:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   293ca:	2301      	movs	r3, #1
   293cc:	9300      	str	r3, [sp, #0]
   293ce:	ab03      	add	r3, sp, #12
   293d0:	2200      	movs	r2, #0
   293d2:	4611      	mov	r1, r2
   293d4:	f242 0007 	movw	r0, #8199	; 0x2007
   293d8:	f7ff fc54 	bl	28c84 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   293dc:	4605      	mov	r5, r0
   293de:	b930      	cbnz	r0, 293ee <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   293e0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   293e4:	7023      	strb	r3, [r4, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   293e6:	3314      	adds	r3, #20
   293e8:	b2db      	uxtb	r3, r3
   293ea:	2b1e      	cmp	r3, #30
   293ec:	d802      	bhi.n	293f4 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   293ee:	4628      	mov	r0, r5
   293f0:	b005      	add	sp, #20
   293f2:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   293f4:	4a02      	ldr	r2, [pc, #8]	; (29400 <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   293f6:	2102      	movs	r1, #2
   293f8:	2004      	movs	r0, #4
   293fa:	f7f0 f999 	bl	19730 <modlog_printf>
   293fe:	e7f6      	b.n	293ee <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   29400:	00034d8c 	.word	0x00034d8c

00029404 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   29404:	b570      	push	{r4, r5, r6, lr}
   29406:	b084      	sub	sp, #16
   29408:	4606      	mov	r6, r0
   2940a:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   2940c:	2c00      	cmp	r4, #0
   2940e:	dd16      	ble.n	2943e <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   29410:	2308      	movs	r3, #8
   29412:	9300      	str	r3, [sp, #0]
   29414:	446b      	add	r3, sp
   29416:	2200      	movs	r2, #0
   29418:	4611      	mov	r1, r2
   2941a:	f242 0018 	movw	r0, #8216	; 0x2018
   2941e:	f7ff fc31 	bl	28c84 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   29422:	4603      	mov	r3, r0
   29424:	b960      	cbnz	r0, 29440 <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   29426:	4625      	mov	r5, r4
   29428:	2c08      	cmp	r4, #8
   2942a:	bf28      	it	cs
   2942c:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   2942e:	462a      	mov	r2, r5
   29430:	a902      	add	r1, sp, #8
   29432:	4630      	mov	r0, r6
   29434:	f7ed fb3a 	bl	16aac <memcpy>

        len -= chunk_sz;
   29438:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   2943a:	442e      	add	r6, r5
   2943c:	e7e6      	b.n	2940c <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   2943e:	2300      	movs	r3, #0
}
   29440:	4618      	mov	r0, r3
   29442:	b004      	add	sp, #16
   29444:	bd70      	pop	{r4, r5, r6, pc}

00029446 <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   29446:	b500      	push	{lr}
   29448:	b085      	sub	sp, #20
   2944a:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   2944c:	6800      	ldr	r0, [r0, #0]
   2944e:	9002      	str	r0, [sp, #8]
   29450:	889b      	ldrh	r3, [r3, #4]
   29452:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   29456:	2300      	movs	r3, #0
   29458:	9300      	str	r3, [sp, #0]
   2945a:	2206      	movs	r2, #6
   2945c:	a902      	add	r1, sp, #8
   2945e:	f242 0005 	movw	r0, #8197	; 0x2005
   29462:	f7ff fc0f 	bl	28c84 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   29466:	b005      	add	sp, #20
   29468:	f85d fb04 	ldr.w	pc, [sp], #4

0002946c <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   2946c:	b570      	push	{r4, r5, r6, lr}
   2946e:	4605      	mov	r5, r0
   29470:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   29472:	460b      	mov	r3, r1
   29474:	2204      	movs	r2, #4
   29476:	2100      	movs	r1, #0
   29478:	f7ec f9a0 	bl	157bc <os_mbuf_copydata>
    if (rc != 0) {
   2947c:	b980      	cbnz	r0, 294a0 <ble_hs_hci_util_data_hdr_strip+0x34>
   2947e:	4606      	mov	r6, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   29480:	2104      	movs	r1, #4
   29482:	4628      	mov	r0, r5
   29484:	f7ec f9c7 	bl	15816 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   29488:	4620      	mov	r0, r4
   2948a:	f008 fd48 	bl	31f1e <get_le16>
   2948e:	4623      	mov	r3, r4
   29490:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   29494:	4618      	mov	r0, r3
   29496:	f008 fd42 	bl	31f1e <get_le16>
   2949a:	8060      	strh	r0, [r4, #2]

    return 0;
}
   2949c:	4630      	mov	r0, r6
   2949e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   294a0:	260c      	movs	r6, #12
   294a2:	e7fb      	b.n	2949c <ble_hs_hci_util_data_hdr_strip+0x30>

000294a4 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   294a4:	b510      	push	{r4, lr}
   294a6:	4604      	mov	r4, r0
    ble_hs_lock();
   294a8:	f7fe fa3a 	bl	27920 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   294ac:	4b03      	ldr	r3, [pc, #12]	; (294bc <ble_hs_id_set_pub+0x18>)
   294ae:	6820      	ldr	r0, [r4, #0]
   294b0:	6018      	str	r0, [r3, #0]
   294b2:	88a2      	ldrh	r2, [r4, #4]
   294b4:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   294b6:	f7fe fa37 	bl	27928 <ble_hs_unlock>
}
   294ba:	bd10      	pop	{r4, pc}
   294bc:	10003300 	.word	0x10003300

000294c0 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   294c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   294c2:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   294c4:	f7fe fa2c 	bl	27920 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   294c8:	7967      	ldrb	r7, [r4, #5]
   294ca:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   294ce:	7820      	ldrb	r0, [r4, #0]
   294d0:	f7ea fedc 	bl	1428c <__popcountsi2>
   294d4:	4605      	mov	r5, r0
    ones += __builtin_popcount(rnd_addr[1]);
   294d6:	7860      	ldrb	r0, [r4, #1]
   294d8:	f7ea fed8 	bl	1428c <__popcountsi2>
   294dc:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[2]);
   294de:	78a0      	ldrb	r0, [r4, #2]
   294e0:	f7ea fed4 	bl	1428c <__popcountsi2>
   294e4:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[3]);
   294e6:	78e0      	ldrb	r0, [r4, #3]
   294e8:	f7ea fed0 	bl	1428c <__popcountsi2>
   294ec:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[4]);
   294ee:	7920      	ldrb	r0, [r4, #4]
   294f0:	f7ea fecc 	bl	1428c <__popcountsi2>
   294f4:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   294f6:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   294fa:	f7ea fec7 	bl	1428c <__popcountsi2>
   294fe:	4428      	add	r0, r5

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   29500:	b10e      	cbz	r6, 29506 <ble_hs_id_set_rnd+0x46>
   29502:	2ec0      	cmp	r6, #192	; 0xc0
   29504:	d110      	bne.n	29528 <ble_hs_id_set_rnd+0x68>
   29506:	b188      	cbz	r0, 2952c <ble_hs_id_set_rnd+0x6c>
            (ones == 0 || ones == 46)) {
   29508:	282e      	cmp	r0, #46	; 0x2e
   2950a:	d011      	beq.n	29530 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   2950c:	4620      	mov	r0, r4
   2950e:	f7ff ff9a 	bl	29446 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   29512:	4605      	mov	r5, r0
   29514:	b920      	cbnz	r0, 29520 <ble_hs_id_set_rnd+0x60>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   29516:	4b07      	ldr	r3, [pc, #28]	; (29534 <ble_hs_id_set_rnd+0x74>)
   29518:	6820      	ldr	r0, [r4, #0]
   2951a:	6018      	str	r0, [r3, #0]
   2951c:	88a2      	ldrh	r2, [r4, #4]
   2951e:	809a      	strh	r2, [r3, #4]

done:
    ble_hs_unlock();
   29520:	f7fe fa02 	bl	27928 <ble_hs_unlock>
    return rc;
}
   29524:	4628      	mov	r0, r5
   29526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   29528:	2503      	movs	r5, #3
   2952a:	e7f9      	b.n	29520 <ble_hs_id_set_rnd+0x60>
   2952c:	2503      	movs	r5, #3
   2952e:	e7f7      	b.n	29520 <ble_hs_id_set_rnd+0x60>
   29530:	2503      	movs	r5, #3
   29532:	e7f5      	b.n	29520 <ble_hs_id_set_rnd+0x60>
   29534:	10003308 	.word	0x10003308

00029538 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   29538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2953a:	460e      	mov	r6, r1
   2953c:	4615      	mov	r5, r2
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   2953e:	b148      	cbz	r0, 29554 <ble_hs_id_addr+0x1c>
   29540:	2801      	cmp	r0, #1
   29542:	d115      	bne.n	29570 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   29544:	4c0d      	ldr	r4, [pc, #52]	; (2957c <ble_hs_id_addr+0x44>)
   29546:	7963      	ldrb	r3, [r4, #5]
   29548:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   2954c:	bf0c      	ite	eq
   2954e:	2701      	moveq	r7, #1
   29550:	2700      	movne	r7, #0
        break;
   29552:	e001      	b.n	29558 <ble_hs_id_addr+0x20>
    switch (id_addr_type) {
   29554:	2700      	movs	r7, #0
   29556:	4c0a      	ldr	r4, [pc, #40]	; (29580 <ble_hs_id_addr+0x48>)

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   29558:	2206      	movs	r2, #6
   2955a:	490a      	ldr	r1, [pc, #40]	; (29584 <ble_hs_id_addr+0x4c>)
   2955c:	4620      	mov	r0, r4
   2955e:	f7ed fa81 	bl	16a64 <memcmp>
   29562:	b138      	cbz	r0, 29574 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   29564:	b106      	cbz	r6, 29568 <ble_hs_id_addr+0x30>
        *out_id_addr = id_addr;
   29566:	6034      	str	r4, [r6, #0]
    }
    if (out_is_nrpa != NULL) {
   29568:	b135      	cbz	r5, 29578 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   2956a:	602f      	str	r7, [r5, #0]
    }

    return 0;
   2956c:	2000      	movs	r0, #0
   2956e:	e000      	b.n	29572 <ble_hs_id_addr+0x3a>
    switch (id_addr_type) {
   29570:	2003      	movs	r0, #3
}
   29572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOADDR;
   29574:	2015      	movs	r0, #21
   29576:	e7fc      	b.n	29572 <ble_hs_id_addr+0x3a>
    return 0;
   29578:	2000      	movs	r0, #0
   2957a:	e7fa      	b.n	29572 <ble_hs_id_addr+0x3a>
   2957c:	10003308 	.word	0x10003308
   29580:	10003300 	.word	0x10003300
   29584:	00034dd8 	.word	0x00034dd8

00029588 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   29588:	b500      	push	{lr}
   2958a:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   2958c:	2801      	cmp	r0, #1
   2958e:	d90e      	bls.n	295ae <ble_hs_id_addr_type_usable+0x26>
   29590:	1e83      	subs	r3, r0, #2
   29592:	b2db      	uxtb	r3, r3
   29594:	2b01      	cmp	r3, #1
   29596:	d80f      	bhi.n	295b8 <ble_hs_id_addr_type_usable+0x30>
        }
        break;

    case BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT:
    case BLE_OWN_ADDR_RPA_RANDOM_DEFAULT:
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   29598:	f000 f911 	bl	297be <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   2959c:	aa01      	add	r2, sp, #4
   2959e:	2100      	movs	r1, #0
   295a0:	f7ff ffca 	bl	29538 <ble_hs_id_addr>
        if (rc != 0) {
   295a4:	b948      	cbnz	r0, 295ba <ble_hs_id_addr_type_usable+0x32>
            return rc;
        }
        if (nrpa) {
   295a6:	9801      	ldr	r0, [sp, #4]
   295a8:	b138      	cbz	r0, 295ba <ble_hs_id_addr_type_usable+0x32>
            return BLE_HS_ENOADDR;
   295aa:	2015      	movs	r0, #21
   295ac:	e005      	b.n	295ba <ble_hs_id_addr_type_usable+0x32>
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   295ae:	2200      	movs	r2, #0
   295b0:	4611      	mov	r1, r2
   295b2:	f7ff ffc1 	bl	29538 <ble_hs_id_addr>
        if (rc != 0) {
   295b6:	e000      	b.n	295ba <ble_hs_id_addr_type_usable+0x32>
    switch (own_addr_type) {
   295b8:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   295ba:	b003      	add	sp, #12
   295bc:	f85d fb04 	ldr.w	pc, [sp], #4

000295c0 <ble_hs_id_copy_addr>:
{
   295c0:	b570      	push	{r4, r5, r6, lr}
   295c2:	b082      	sub	sp, #8
   295c4:	4605      	mov	r5, r0
   295c6:	460c      	mov	r4, r1
   295c8:	4616      	mov	r6, r2
    ble_hs_lock();
   295ca:	f7fe f9a9 	bl	27920 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   295ce:	4632      	mov	r2, r6
   295d0:	a901      	add	r1, sp, #4
   295d2:	4628      	mov	r0, r5
   295d4:	f7ff ffb0 	bl	29538 <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   295d8:	4605      	mov	r5, r0
   295da:	b928      	cbnz	r0, 295e8 <ble_hs_id_copy_addr+0x28>
   295dc:	b124      	cbz	r4, 295e8 <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   295de:	9b01      	ldr	r3, [sp, #4]
   295e0:	681a      	ldr	r2, [r3, #0]
   295e2:	6022      	str	r2, [r4, #0]
   295e4:	889b      	ldrh	r3, [r3, #4]
   295e6:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   295e8:	f7fe f99e 	bl	27928 <ble_hs_unlock>
}
   295ec:	4628      	mov	r0, r5
   295ee:	b002      	add	sp, #8
   295f0:	bd70      	pop	{r4, r5, r6, pc}

000295f2 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   295f2:	b510      	push	{r4, lr}
   295f4:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   295f6:	f7ff ffc7 	bl	29588 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   295fa:	b918      	cbnz	r0, 29604 <ble_hs_id_use_addr+0x12>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   295fc:	3c02      	subs	r4, #2
   295fe:	b2e4      	uxtb	r4, r4
   29600:	2c01      	cmp	r4, #1
   29602:	d900      	bls.n	29606 <ble_hs_id_use_addr+0x14>
            return rc;
        }
    }

    return 0;
}
   29604:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   29606:	f000 f97b 	bl	29900 <ble_hs_pvcy_ensure_started>
        if (rc != 0) {
   2960a:	e7fb      	b.n	29604 <ble_hs_id_use_addr+0x12>

0002960c <ble_hs_id_infer_auto>:

int
ble_hs_id_infer_auto(int privacy, uint8_t *out_addr_type)
{
   2960c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29610:	4604      	mov	r4, r0
   29612:	460d      	mov	r5, r1
    uint8_t addr_type;
    int num_addr_types;
    int rc;
    int i;

    ble_hs_lock();
   29614:	f7fe f984 	bl	27920 <ble_hs_lock>

    if (privacy) {
   29618:	b194      	cbz	r4, 29640 <ble_hs_id_infer_auto+0x34>
        addr_types = priv_addr_types;
   2961a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 29654 <ble_hs_id_infer_auto+0x48>
    } else {
        addr_types = pub_addr_types;
        num_addr_types = sizeof pub_addr_types / sizeof pub_addr_types[0];
    }

    for (i = 0; i < num_addr_types; i++) {
   2961e:	2400      	movs	r4, #0
   29620:	2c01      	cmp	r4, #1
   29622:	dc14      	bgt.n	2964e <ble_hs_id_infer_auto+0x42>
        addr_type = addr_types[i];
   29624:	f818 7004 	ldrb.w	r7, [r8, r4]

        rc = ble_hs_id_addr_type_usable(addr_type);
   29628:	4638      	mov	r0, r7
   2962a:	f7ff ffad 	bl	29588 <ble_hs_id_addr_type_usable>
        switch (rc) {
   2962e:	4606      	mov	r6, r0
   29630:	b148      	cbz	r0, 29646 <ble_hs_id_infer_auto+0x3a>
   29632:	2815      	cmp	r0, #21
   29634:	d009      	beq.n	2964a <ble_hs_id_infer_auto+0x3e>
    }

    rc = BLE_HS_ENOADDR;

done:
    ble_hs_unlock();
   29636:	f7fe f977 	bl	27928 <ble_hs_unlock>
    return rc;
}
   2963a:	4630      	mov	r0, r6
   2963c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        addr_types = pub_addr_types;
   29640:	f8df 8014 	ldr.w	r8, [pc, #20]	; 29658 <ble_hs_id_infer_auto+0x4c>
   29644:	e7eb      	b.n	2961e <ble_hs_id_infer_auto+0x12>
            *out_addr_type = addr_type;
   29646:	702f      	strb	r7, [r5, #0]
            goto done;
   29648:	e7f5      	b.n	29636 <ble_hs_id_infer_auto+0x2a>
    for (i = 0; i < num_addr_types; i++) {
   2964a:	3401      	adds	r4, #1
   2964c:	e7e8      	b.n	29620 <ble_hs_id_infer_auto+0x14>
    rc = BLE_HS_ENOADDR;
   2964e:	2615      	movs	r6, #21
   29650:	e7f1      	b.n	29636 <ble_hs_id_infer_auto+0x2a>
   29652:	bf00      	nop
   29654:	00034dac 	.word	0x00034dac
   29658:	00034db0 	.word	0x00034db0

0002965c <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   2965c:	4a03      	ldr	r2, [pc, #12]	; (2966c <ble_hs_id_reset+0x10>)
   2965e:	2300      	movs	r3, #0
   29660:	6013      	str	r3, [r2, #0]
   29662:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   29664:	4a02      	ldr	r2, [pc, #8]	; (29670 <ble_hs_id_reset+0x14>)
   29666:	6013      	str	r3, [r2, #0]
   29668:	8093      	strh	r3, [r2, #4]
}
   2966a:	4770      	bx	lr
   2966c:	10003300 	.word	0x10003300
   29670:	10003308 	.word	0x10003308

00029674 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   29674:	b530      	push	{r4, r5, lr}
   29676:	b083      	sub	sp, #12
   29678:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   2967a:	2400      	movs	r4, #0
   2967c:	8a2b      	ldrh	r3, [r5, #16]
   2967e:	42a3      	cmp	r3, r4
   29680:	dd08      	ble.n	29694 <ble_hs_log_mbuf+0x20>
        os_mbuf_copydata(om, i, 1, &u8);
   29682:	f10d 0307 	add.w	r3, sp, #7
   29686:	2201      	movs	r2, #1
   29688:	4621      	mov	r1, r4
   2968a:	4628      	mov	r0, r5
   2968c:	f7ec f896 	bl	157bc <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   29690:	3401      	adds	r4, #1
   29692:	e7f3      	b.n	2967c <ble_hs_log_mbuf+0x8>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   29694:	b003      	add	sp, #12
   29696:	bd30      	pop	{r4, r5, pc}

00029698 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   29698:	2300      	movs	r3, #0
   2969a:	428b      	cmp	r3, r1
   2969c:	da01      	bge.n	296a2 <ble_hs_log_flat_buf+0xa>
   2969e:	3301      	adds	r3, #1
   296a0:	e7fb      	b.n	2969a <ble_hs_log_flat_buf+0x2>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   296a2:	4770      	bx	lr

000296a4 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   296a4:	b510      	push	{r4, lr}
   296a6:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_msys_get_pkthdr(0, sizeof(struct ble_mbuf_hdr));
   296a8:	2110      	movs	r1, #16
   296aa:	2000      	movs	r0, #0
   296ac:	f7ec fc68 	bl	15f80 <os_msys_get_pkthdr>
#else
    om = os_msys_get_pkthdr(0, 0);
#endif
    if (om == NULL) {
   296b0:	4603      	mov	r3, r0
   296b2:	b130      	cbz	r0, 296c2 <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   296b4:	6882      	ldr	r2, [r0, #8]
   296b6:	8812      	ldrh	r2, [r2, #0]
   296b8:	42a2      	cmp	r2, r4
   296ba:	d304      	bcc.n	296c6 <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   296bc:	6800      	ldr	r0, [r0, #0]
   296be:	4420      	add	r0, r4
   296c0:	6018      	str	r0, [r3, #0]

    return om;
}
   296c2:	4618      	mov	r0, r3
   296c4:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   296c6:	f7eb ffcf 	bl	15668 <os_mbuf_free_chain>
        return NULL;
   296ca:	2300      	movs	r3, #0
   296cc:	e7f9      	b.n	296c2 <ble_hs_mbuf_gen_pkt+0x1e>

000296ce <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   296ce:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   296d0:	2004      	movs	r0, #4
   296d2:	f7ff ffe7 	bl	296a4 <ble_hs_mbuf_gen_pkt>
}
   296d6:	bd08      	pop	{r3, pc}

000296d8 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   296d8:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   296da:	2008      	movs	r0, #8
   296dc:	f7ff ffe2 	bl	296a4 <ble_hs_mbuf_gen_pkt>
}
   296e0:	bd08      	pop	{r3, pc}

000296e2 <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   296e2:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   296e4:	200d      	movs	r0, #13
   296e6:	f7ff ffdd 	bl	296a4 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   296ea:	bd08      	pop	{r3, pc}

000296ec <ble_hs_mbuf_to_flat>:
}

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   296ec:	b570      	push	{r4, r5, r6, lr}
   296ee:	4614      	mov	r4, r2
   296f0:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   296f2:	8a05      	ldrh	r5, [r0, #16]
   296f4:	4295      	cmp	r5, r2
   296f6:	d900      	bls.n	296fa <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   296f8:	4615      	mov	r5, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   296fa:	460b      	mov	r3, r1
   296fc:	462a      	mov	r2, r5
   296fe:	2100      	movs	r1, #0
   29700:	f7ec f85c 	bl	157bc <os_mbuf_copydata>
    if (rc != 0) {
   29704:	b928      	cbnz	r0, 29712 <ble_hs_mbuf_to_flat+0x26>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   29706:	42a5      	cmp	r5, r4
   29708:	d900      	bls.n	2970c <ble_hs_mbuf_to_flat+0x20>
        rc = BLE_HS_EMSGSIZE;
   2970a:	2004      	movs	r0, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   2970c:	b106      	cbz	r6, 29710 <ble_hs_mbuf_to_flat+0x24>
        *out_copy_len = copy_len;
   2970e:	8035      	strh	r5, [r6, #0]
    }
    return rc;
}
   29710:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   29712:	2011      	movs	r0, #17
   29714:	e7fc      	b.n	29710 <ble_hs_mbuf_to_flat+0x24>

00029716 <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
   29716:	b510      	push	{r4, lr}
   29718:	4604      	mov	r4, r0
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   2971a:	6800      	ldr	r0, [r0, #0]
   2971c:	8a03      	ldrh	r3, [r0, #16]
   2971e:	428b      	cmp	r3, r1
   29720:	db06      	blt.n	29730 <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   29722:	b289      	uxth	r1, r1
   29724:	f7ec f9fb 	bl	15b1e <os_mbuf_pullup>
   29728:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   2972a:	b118      	cbz	r0, 29734 <ble_hs_mbuf_pullup_base+0x1e>
        return BLE_HS_ENOMEM;
    }

    return 0;
   2972c:	2000      	movs	r0, #0
}
   2972e:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   29730:	200a      	movs	r0, #10
   29732:	e7fc      	b.n	2972e <ble_hs_mbuf_pullup_base+0x18>
        return BLE_HS_ENOMEM;
   29734:	2006      	movs	r0, #6
   29736:	e7fa      	b.n	2972e <ble_hs_mbuf_pullup_base+0x18>

00029738 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   29738:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   2973a:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   2973e:	f013 0f01 	tst.w	r3, #1
   29742:	d101      	bne.n	29748 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   29744:	2000      	movs	r0, #0
   29746:	bd08      	pop	{r3, pc}
   29748:	4608      	mov	r0, r1
                                   sec->irk);
   2974a:	460a      	mov	r2, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   2974c:	f812 1b29 	ldrb.w	r1, [r2], #41
   29750:	3001      	adds	r0, #1
   29752:	f000 f94f 	bl	299f4 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   29756:	2800      	cmp	r0, #0
   29758:	d0f4      	beq.n	29744 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   2975a:	4a03      	ldr	r2, [pc, #12]	; (29768 <ble_hs_misc_restore_one_irk+0x30>)
   2975c:	2103      	movs	r1, #3
   2975e:	2004      	movs	r0, #4
   29760:	f7ef ffe6 	bl	19730 <modlog_printf>
   29764:	e7ee      	b.n	29744 <ble_hs_misc_restore_one_irk+0xc>
   29766:	bf00      	nop
   29768:	00034db4 	.word	0x00034db4

0002976c <ble_hs_misc_conn_chan_find>:
{
   2976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2976e:	460e      	mov	r6, r1
   29770:	4615      	mov	r5, r2
   29772:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   29774:	f7fe ff30 	bl	285d8 <ble_hs_conn_find>
    if (conn == NULL) {
   29778:	4607      	mov	r7, r0
   2977a:	b160      	cbz	r0, 29796 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   2977c:	4631      	mov	r1, r6
   2977e:	f7fe fe75 	bl	2846c <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   29782:	4603      	mov	r3, r0
   29784:	b128      	cbz	r0, 29792 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   29786:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   29788:	b105      	cbz	r5, 2978c <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   2978a:	602f      	str	r7, [r5, #0]
    if (out_chan != NULL) {
   2978c:	b104      	cbz	r4, 29790 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   2978e:	6023      	str	r3, [r4, #0]
}
   29790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   29792:	2007      	movs	r0, #7
   29794:	e7f8      	b.n	29788 <ble_hs_misc_conn_chan_find+0x1c>
        chan = NULL;
   29796:	4603      	mov	r3, r0
        rc = BLE_HS_ENOTCONN;
   29798:	2007      	movs	r0, #7
   2979a:	e7f5      	b.n	29788 <ble_hs_misc_conn_chan_find+0x1c>

0002979c <ble_hs_misc_conn_chan_find_reqd>:
{
   2979c:	b530      	push	{r4, r5, lr}
   2979e:	b083      	sub	sp, #12
   297a0:	4615      	mov	r5, r2
   297a2:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   297a4:	ab01      	add	r3, sp, #4
   297a6:	466a      	mov	r2, sp
   297a8:	f7ff ffe0 	bl	2976c <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   297ac:	b928      	cbnz	r0, 297ba <ble_hs_misc_conn_chan_find_reqd+0x1e>
    if (out_conn != NULL) {
   297ae:	b10d      	cbz	r5, 297b4 <ble_hs_misc_conn_chan_find_reqd+0x18>
        *out_conn = conn;
   297b0:	9b00      	ldr	r3, [sp, #0]
   297b2:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   297b4:	b10c      	cbz	r4, 297ba <ble_hs_misc_conn_chan_find_reqd+0x1e>
        *out_chan = chan;
   297b6:	9b01      	ldr	r3, [sp, #4]
   297b8:	6023      	str	r3, [r4, #0]
}
   297ba:	b003      	add	sp, #12
   297bc:	bd30      	pop	{r4, r5, pc}

000297be <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   297be:	2801      	cmp	r0, #1
   297c0:	d002      	beq.n	297c8 <ble_hs_misc_own_addr_type_to_id+0xa>
   297c2:	2803      	cmp	r0, #3
   297c4:	d001      	beq.n	297ca <ble_hs_misc_own_addr_type_to_id+0xc>
   297c6:	2000      	movs	r0, #0
}
   297c8:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   297ca:	2001      	movs	r0, #1
   297cc:	4770      	bx	lr

000297ce <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   297ce:	2801      	cmp	r0, #1
   297d0:	d002      	beq.n	297d8 <ble_hs_misc_peer_addr_type_to_id+0xa>
   297d2:	2803      	cmp	r0, #3
   297d4:	d001      	beq.n	297da <ble_hs_misc_peer_addr_type_to_id+0xc>
   297d6:	2000      	movs	r0, #0
}
   297d8:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   297da:	2001      	movs	r0, #1
   297dc:	4770      	bx	lr
	...

000297e0 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   297e0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   297e2:	2200      	movs	r2, #0
   297e4:	4902      	ldr	r1, [pc, #8]	; (297f0 <ble_hs_misc_restore_irks+0x10>)
   297e6:	2002      	movs	r0, #2
   297e8:	f002 fe09 	bl	2c3fe <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   297ec:	bd08      	pop	{r3, pc}
   297ee:	bf00      	nop
   297f0:	00029739 	.word	0x00029739

000297f4 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   297f4:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   297f6:	2000      	movs	r0, #0
   297f8:	6018      	str	r0, [r3, #0]
   297fa:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   297fc:	6098      	str	r0, [r3, #8]
   297fe:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   29800:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   29802:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   29804:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   29806:	4770      	bx	lr

00029808 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   29808:	b538      	push	{r3, r4, r5, lr}
   2980a:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2980c:	f7ec ff7a 	bl	16704 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   29810:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   29812:	b114      	cbz	r4, 2981a <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   29814:	6863      	ldr	r3, [r4, #4]
   29816:	602b      	str	r3, [r5, #0]
   29818:	b12b      	cbz	r3, 29826 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   2981a:	f7ec ff79 	bl	16710 <os_arch_restore_sr>

    if (mp) {
   2981e:	b104      	cbz	r4, 29822 <ble_mqueue_get+0x1a>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   29820:	3c10      	subs	r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   29822:	4620      	mov	r0, r4
   29824:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   29826:	606d      	str	r5, [r5, #4]
   29828:	e7f7      	b.n	2981a <ble_mqueue_get+0x12>

0002982a <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   2982a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   2982c:	7953      	ldrb	r3, [r2, #5]
   2982e:	2b07      	cmp	r3, #7
   29830:	d916      	bls.n	29860 <ble_mqueue_put+0x36>
   29832:	4605      	mov	r5, r0
   29834:	460e      	mov	r6, r1
   29836:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   29838:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   2983c:	f7ec ff62 	bl	16704 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   29840:	2300      	movs	r3, #0
   29842:	f844 3f14 	str.w	r3, [r4, #20]!
   29846:	686b      	ldr	r3, [r5, #4]
   29848:	601f      	str	r7, [r3, #0]
   2984a:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   2984c:	f7ec ff60 	bl	16710 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   29850:	b146      	cbz	r6, 29864 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   29852:	f105 0108 	add.w	r1, r5, #8
   29856:	4630      	mov	r0, r6
   29858:	f7eb fdd1 	bl	153fe <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   2985c:	2000      	movs	r0, #0
}
   2985e:	e000      	b.n	29862 <ble_mqueue_put+0x38>
err:
    return (rc);
   29860:	2002      	movs	r0, #2
}
   29862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   29864:	2000      	movs	r0, #0
   29866:	e7fc      	b.n	29862 <ble_mqueue_put+0x38>

00029868 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   29868:	1e43      	subs	r3, r0, #1
   2986a:	b29b      	uxth	r3, r3
   2986c:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   29870:	4293      	cmp	r3, r2
   29872:	d80e      	bhi.n	29892 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   29874:	b500      	push	{lr}
   29876:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   29878:	f8ad 000c 	strh.w	r0, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2987c:	2300      	movs	r3, #0
   2987e:	9300      	str	r3, [sp, #0]
   29880:	2202      	movs	r2, #2
   29882:	a903      	add	r1, sp, #12
   29884:	f242 002e 	movw	r0, #8238	; 0x202e
   29888:	f7ff f9fc 	bl	28c84 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   2988c:	b005      	add	sp, #20
   2988e:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   29892:	2012      	movs	r0, #18
}
   29894:	4770      	bx	lr

00029896 <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   29896:	b500      	push	{lr}
   29898:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2989a:	2100      	movs	r1, #0
   2989c:	9100      	str	r1, [sp, #0]
   2989e:	460b      	mov	r3, r1
   298a0:	460a      	mov	r2, r1
   298a2:	f242 0029 	movw	r0, #8233	; 0x2029
   298a6:	f7ff f9ed 	bl	28c84 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   298aa:	b003      	add	sp, #12
   298ac:	f85d fb04 	ldr.w	pc, [sp], #4

000298b0 <ble_hs_pvcy_set_resolve_enabled>:
{
   298b0:	b500      	push	{lr}
   298b2:	b085      	sub	sp, #20
    cmd.enable = enable;
   298b4:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   298b8:	2300      	movs	r3, #0
   298ba:	9300      	str	r3, [sp, #0]
   298bc:	2201      	movs	r2, #1
   298be:	a903      	add	r1, sp, #12
   298c0:	f242 002d 	movw	r0, #8237	; 0x202d
   298c4:	f7ff f9de 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   298c8:	b005      	add	sp, #20
   298ca:	f85d fb04 	ldr.w	pc, [sp], #4

000298ce <ble_hs_pvcy_remove_entry>:
{
   298ce:	b500      	push	{lr}
   298d0:	b085      	sub	sp, #20
    if (addr_type > BLE_ADDR_RANDOM) {
   298d2:	2801      	cmp	r0, #1
   298d4:	d901      	bls.n	298da <ble_hs_pvcy_remove_entry+0xc>
        addr_type = addr_type % 2;
   298d6:	f000 0001 	and.w	r0, r0, #1
    cmd.peer_addr_type = addr_type;
   298da:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(cmd.peer_id_addr, addr, BLE_DEV_ADDR_LEN);
   298de:	680b      	ldr	r3, [r1, #0]
   298e0:	f8cd 3009 	str.w	r3, [sp, #9]
   298e4:	888b      	ldrh	r3, [r1, #4]
   298e6:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   298ea:	2300      	movs	r3, #0
   298ec:	9300      	str	r3, [sp, #0]
   298ee:	2207      	movs	r2, #7
   298f0:	a902      	add	r1, sp, #8
   298f2:	f242 0028 	movw	r0, #8232	; 0x2028
   298f6:	f7ff f9c5 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   298fa:	b005      	add	sp, #20
   298fc:	f85d fb04 	ldr.w	pc, [sp], #4

00029900 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   29900:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   29902:	4b07      	ldr	r3, [pc, #28]	; (29920 <ble_hs_pvcy_ensure_started+0x20>)
   29904:	781b      	ldrb	r3, [r3, #0]
   29906:	b10b      	cbz	r3, 2990c <ble_hs_pvcy_ensure_started+0xc>
        return 0;
   29908:	2000      	movs	r0, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   2990a:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   2990c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   29910:	f7ff ffaa 	bl	29868 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   29914:	2800      	cmp	r0, #0
   29916:	d1f8      	bne.n	2990a <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   29918:	4b01      	ldr	r3, [pc, #4]	; (29920 <ble_hs_pvcy_ensure_started+0x20>)
   2991a:	2201      	movs	r2, #1
   2991c:	701a      	strb	r2, [r3, #0]
    return 0;
   2991e:	e7f4      	b.n	2990a <ble_hs_pvcy_ensure_started+0xa>
   29920:	10003320 	.word	0x10003320

00029924 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   29924:	4b01      	ldr	r3, [pc, #4]	; (2992c <ble_hs_pvcy_our_irk+0x8>)
   29926:	6003      	str	r3, [r0, #0]
    return 0;
}
   29928:	2000      	movs	r0, #0
   2992a:	4770      	bx	lr
   2992c:	10003310 	.word	0x10003310

00029930 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   29930:	7803      	ldrb	r3, [r0, #0]
   29932:	2b01      	cmp	r3, #1
   29934:	d819      	bhi.n	2996a <ble_hs_pvcy_set_mode+0x3a>
{
   29936:	b500      	push	{lr}
   29938:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.mode = priv_mode;
   2993a:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   2993e:	7803      	ldrb	r3, [r0, #0]
   29940:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   29944:	f850 3f01 	ldr.w	r3, [r0, #1]!
   29948:	f8cd 3009 	str.w	r3, [sp, #9]
   2994c:	8883      	ldrh	r3, [r0, #4]
   2994e:	f8ad 300d 	strh.w	r3, [sp, #13]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   29952:	2300      	movs	r3, #0
   29954:	9300      	str	r3, [sp, #0]
   29956:	2208      	movs	r2, #8
   29958:	eb0d 0102 	add.w	r1, sp, r2
   2995c:	f242 004e 	movw	r0, #8270	; 0x204e
   29960:	f7ff f990 	bl	28c84 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   29964:	b005      	add	sp, #20
   29966:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2996a:	2012      	movs	r0, #18
}
   2996c:	4770      	bx	lr
	...

00029970 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   29970:	2901      	cmp	r1, #1
   29972:	d83a      	bhi.n	299ea <ble_hs_pvcy_add_entry_hci+0x7a>
{
   29974:	b5f0      	push	{r4, r5, r6, r7, lr}
   29976:	b08f      	sub	sp, #60	; 0x3c
   29978:	4607      	mov	r7, r0
   2997a:	460d      	mov	r5, r1
   2997c:	4614      	mov	r4, r2
    cmd.peer_addr_type = addr_type;
   2997e:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   29982:	6803      	ldr	r3, [r0, #0]
   29984:	f8cd 3011 	str.w	r3, [sp, #17]
   29988:	8883      	ldrh	r3, [r0, #4]
   2998a:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   2998e:	4e18      	ldr	r6, [pc, #96]	; (299f0 <ble_hs_pvcy_add_entry_hci+0x80>)
   29990:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   29992:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   29996:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   2999a:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   2999e:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   299a2:	6820      	ldr	r0, [r4, #0]
   299a4:	6861      	ldr	r1, [r4, #4]
   299a6:	68a2      	ldr	r2, [r4, #8]
   299a8:	68e3      	ldr	r3, [r4, #12]
   299aa:	f8cd 0017 	str.w	r0, [sp, #23]
   299ae:	f8cd 101b 	str.w	r1, [sp, #27]
   299b2:	f8cd 201f 	str.w	r2, [sp, #31]
   299b6:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   299ba:	2300      	movs	r3, #0
   299bc:	9300      	str	r3, [sp, #0]
   299be:	2227      	movs	r2, #39	; 0x27
   299c0:	a904      	add	r1, sp, #16
   299c2:	f242 0027 	movw	r0, #8231	; 0x2027
   299c6:	f7ff f95d 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   299ca:	b108      	cbz	r0, 299d0 <ble_hs_pvcy_add_entry_hci+0x60>
}
   299cc:	b00f      	add	sp, #60	; 0x3c
   299ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   299d0:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   299d4:	683b      	ldr	r3, [r7, #0]
   299d6:	f8cd 3009 	str.w	r3, [sp, #9]
   299da:	88bb      	ldrh	r3, [r7, #4]
   299dc:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   299e0:	2101      	movs	r1, #1
   299e2:	a802      	add	r0, sp, #8
   299e4:	f7ff ffa4 	bl	29930 <ble_hs_pvcy_set_mode>
    if (rc != 0) {
   299e8:	e7f0      	b.n	299cc <ble_hs_pvcy_add_entry_hci+0x5c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   299ea:	2012      	movs	r0, #18
}
   299ec:	4770      	bx	lr
   299ee:	bf00      	nop
   299f0:	10003310 	.word	0x10003310

000299f4 <ble_hs_pvcy_add_entry>:
{
   299f4:	b570      	push	{r4, r5, r6, lr}
   299f6:	4604      	mov	r4, r0
   299f8:	460d      	mov	r5, r1
   299fa:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   299fc:	4a0a      	ldr	r2, [pc, #40]	; (29a28 <ble_hs_pvcy_add_entry+0x34>)
   299fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   29a00:	3301      	adds	r3, #1
   29a02:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   29a04:	f7fb fe64 	bl	256d0 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   29a08:	4632      	mov	r2, r6
   29a0a:	4629      	mov	r1, r5
   29a0c:	4620      	mov	r0, r4
   29a0e:	f7ff ffaf 	bl	29970 <ble_hs_pvcy_add_entry_hci>
   29a12:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   29a14:	f7fb fe68 	bl	256e8 <ble_gap_preempt_done>
    if (rc != 0) {
   29a18:	b11c      	cbz	r4, 29a22 <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   29a1a:	4a03      	ldr	r2, [pc, #12]	; (29a28 <ble_hs_pvcy_add_entry+0x34>)
   29a1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   29a1e:	3301      	adds	r3, #1
   29a20:	6353      	str	r3, [r2, #52]	; 0x34
}
   29a22:	4620      	mov	r0, r4
   29a24:	bd70      	pop	{r4, r5, r6, pc}
   29a26:	bf00      	nop
   29a28:	1000306c 	.word	0x1000306c

00029a2c <ble_hs_pvcy_set_our_irk>:
{
   29a2c:	b510      	push	{r4, lr}
   29a2e:	b086      	sub	sp, #24
    if (irk != NULL) {
   29a30:	b170      	cbz	r0, 29a50 <ble_hs_pvcy_set_our_irk+0x24>
   29a32:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   29a34:	466c      	mov	r4, sp
   29a36:	6800      	ldr	r0, [r0, #0]
   29a38:	6859      	ldr	r1, [r3, #4]
   29a3a:	689a      	ldr	r2, [r3, #8]
   29a3c:	68db      	ldr	r3, [r3, #12]
   29a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   29a40:	2210      	movs	r2, #16
   29a42:	4669      	mov	r1, sp
   29a44:	4815      	ldr	r0, [pc, #84]	; (29a9c <ble_hs_pvcy_set_our_irk+0x70>)
   29a46:	f7ed f80d 	bl	16a64 <memcmp>
   29a4a:	b938      	cbnz	r0, 29a5c <ble_hs_pvcy_set_our_irk+0x30>
}
   29a4c:	b006      	add	sp, #24
   29a4e:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   29a50:	4b13      	ldr	r3, [pc, #76]	; (29aa0 <ble_hs_pvcy_set_our_irk+0x74>)
   29a52:	466c      	mov	r4, sp
   29a54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29a56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   29a5a:	e7f1      	b.n	29a40 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   29a5c:	4c0f      	ldr	r4, [pc, #60]	; (29a9c <ble_hs_pvcy_set_our_irk+0x70>)
   29a5e:	466b      	mov	r3, sp
   29a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   29a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   29a66:	2000      	movs	r0, #0
   29a68:	f7ff ff22 	bl	298b0 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   29a6c:	2800      	cmp	r0, #0
   29a6e:	d1ed      	bne.n	29a4c <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_clear_entries();
   29a70:	f7ff ff11 	bl	29896 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   29a74:	2800      	cmp	r0, #0
   29a76:	d1e9      	bne.n	29a4c <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   29a78:	2001      	movs	r0, #1
   29a7a:	f7ff ff19 	bl	298b0 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   29a7e:	2800      	cmp	r0, #0
   29a80:	d1e4      	bne.n	29a4c <ble_hs_pvcy_set_our_irk+0x20>
        memset(tmp_addr, 0, 6);
   29a82:	2100      	movs	r1, #0
   29a84:	9104      	str	r1, [sp, #16]
   29a86:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   29a8a:	9100      	str	r1, [sp, #0]
   29a8c:	9101      	str	r1, [sp, #4]
   29a8e:	9102      	str	r1, [sp, #8]
   29a90:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   29a92:	466a      	mov	r2, sp
   29a94:	a804      	add	r0, sp, #16
   29a96:	f7ff ffad 	bl	299f4 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   29a9a:	e7d7      	b.n	29a4c <ble_hs_pvcy_set_our_irk+0x20>
   29a9c:	10003310 	.word	0x10003310
   29aa0:	00034de0 	.word	0x00034de0

00029aa4 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   29aa4:	b500      	push	{lr}
   29aa6:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   29aa8:	2100      	movs	r1, #0
   29aaa:	9100      	str	r1, [sp, #0]
   29aac:	460b      	mov	r3, r1
   29aae:	460a      	mov	r2, r1
   29ab0:	f640 4003 	movw	r0, #3075	; 0xc03
   29ab4:	f7ff f8e6 	bl	28c84 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   29ab8:	b003      	add	sp, #12
   29aba:	f85d fb04 	ldr.w	pc, [sp], #4

00029abe <ble_hs_startup_le_read_buf_sz_tx>:
{
   29abe:	b530      	push	{r4, r5, lr}
   29ac0:	b085      	sub	sp, #20
   29ac2:	4605      	mov	r5, r0
   29ac4:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   29ac6:	2303      	movs	r3, #3
   29ac8:	9300      	str	r3, [sp, #0]
   29aca:	ab03      	add	r3, sp, #12
   29acc:	2200      	movs	r2, #0
   29ace:	4611      	mov	r1, r2
   29ad0:	f242 0002 	movw	r0, #8194	; 0x2002
   29ad4:	f7ff f8d6 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29ad8:	b928      	cbnz	r0, 29ae6 <ble_hs_startup_le_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.data_len);
   29ada:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   29ade:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   29ae0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   29ae4:	7023      	strb	r3, [r4, #0]
}
   29ae6:	b005      	add	sp, #20
   29ae8:	bd30      	pop	{r4, r5, pc}

00029aea <ble_hs_startup_read_buf_sz_tx>:
{
   29aea:	b530      	push	{r4, r5, lr}
   29aec:	b085      	sub	sp, #20
   29aee:	4605      	mov	r5, r0
   29af0:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   29af2:	2307      	movs	r3, #7
   29af4:	9300      	str	r3, [sp, #0]
   29af6:	ab02      	add	r3, sp, #8
   29af8:	2200      	movs	r2, #0
   29afa:	4611      	mov	r1, r2
   29afc:	f241 0005 	movw	r0, #4101	; 0x1005
   29b00:	f7ff f8c0 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29b04:	b928      	cbnz	r0, 29b12 <ble_hs_startup_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.acl_data_len);
   29b06:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   29b0a:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   29b0c:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   29b10:	8023      	strh	r3, [r4, #0]
}
   29b12:	b005      	add	sp, #20
   29b14:	bd30      	pop	{r4, r5, pc}

00029b16 <ble_hs_startup_read_local_ver_tx>:
{
   29b16:	b510      	push	{r4, lr}
   29b18:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   29b1a:	2308      	movs	r3, #8
   29b1c:	9300      	str	r3, [sp, #0]
   29b1e:	446b      	add	r3, sp
   29b20:	2200      	movs	r2, #0
   29b22:	4611      	mov	r1, r2
   29b24:	f241 0001 	movw	r0, #4097	; 0x1001
   29b28:	f7ff f8ac 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29b2c:	4604      	mov	r4, r0
   29b2e:	b110      	cbz	r0, 29b36 <ble_hs_startup_read_local_ver_tx+0x20>
}
   29b30:	4620      	mov	r0, r4
   29b32:	b004      	add	sp, #16
   29b34:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   29b36:	f89d 0008 	ldrb.w	r0, [sp, #8]
   29b3a:	f7ff f963 	bl	28e04 <ble_hs_hci_set_hci_version>
    return 0;
   29b3e:	e7f7      	b.n	29b30 <ble_hs_startup_read_local_ver_tx+0x1a>

00029b40 <ble_hs_startup_set_evmask_tx>:
{
   29b40:	b510      	push	{r4, lr}
   29b42:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   29b44:	f7ff f964 	bl	28e10 <ble_hs_hci_get_hci_version>
   29b48:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   29b4a:	a311      	add	r3, pc, #68	; (adr r3, 29b90 <ble_hs_startup_set_evmask_tx+0x50>)
   29b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   29b50:	e9cd 2304 	strd	r2, r3, [sp, #16]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   29b54:	2300      	movs	r3, #0
   29b56:	9300      	str	r3, [sp, #0]
   29b58:	2208      	movs	r2, #8
   29b5a:	a904      	add	r1, sp, #16
   29b5c:	f640 4001 	movw	r0, #3073	; 0xc01
   29b60:	f7ff f890 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29b64:	b908      	cbnz	r0, 29b6a <ble_hs_startup_set_evmask_tx+0x2a>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   29b66:	2c06      	cmp	r4, #6
   29b68:	d801      	bhi.n	29b6e <ble_hs_startup_set_evmask_tx+0x2e>
}
   29b6a:	b006      	add	sp, #24
   29b6c:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   29b6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   29b72:	2300      	movs	r3, #0
   29b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   29b78:	2300      	movs	r3, #0
   29b7a:	9300      	str	r3, [sp, #0]
   29b7c:	2208      	movs	r2, #8
   29b7e:	eb0d 0102 	add.w	r1, sp, r2
   29b82:	f640 4063 	movw	r0, #3171	; 0xc63
   29b86:	f7ff f87d 	bl	28c84 <ble_hs_hci_cmd_tx>
        if (rc != 0) {
   29b8a:	e7ee      	b.n	29b6a <ble_hs_startup_set_evmask_tx+0x2a>
   29b8c:	f3af 8000 	nop.w
   29b90:	02008090 	.word	0x02008090
   29b94:	20008000 	.word	0x20008000

00029b98 <ble_hs_startup_le_set_evmask_tx>:
{
   29b98:	b500      	push	{lr}
   29b9a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   29b9c:	f7ff f938 	bl	28e10 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   29ba0:	2806      	cmp	r0, #6
   29ba2:	d819      	bhi.n	29bd8 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   29ba4:	231f      	movs	r3, #31
   29ba6:	2200      	movs	r2, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   29ba8:	2807      	cmp	r0, #7
   29baa:	d901      	bls.n	29bb0 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   29bac:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   29bb0:	2808      	cmp	r0, #8
   29bb2:	d903      	bls.n	29bbc <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   29bb4:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
   29bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    cmd.event_mask = htole64(mask);
   29bbc:	9302      	str	r3, [sp, #8]
   29bbe:	9203      	str	r2, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   29bc0:	2300      	movs	r3, #0
   29bc2:	9300      	str	r3, [sp, #0]
   29bc4:	2208      	movs	r2, #8
   29bc6:	eb0d 0102 	add.w	r1, sp, r2
   29bca:	f242 0001 	movw	r0, #8193	; 0x2001
   29bce:	f7ff f859 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   29bd2:	b005      	add	sp, #20
   29bd4:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   29bd8:	233f      	movs	r3, #63	; 0x3f
   29bda:	2200      	movs	r2, #0
   29bdc:	e7e4      	b.n	29ba8 <ble_hs_startup_le_set_evmask_tx+0x10>

00029bde <ble_hs_startup_read_buf_sz>:
{
   29bde:	b500      	push	{lr}
   29be0:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   29be2:	2300      	movs	r3, #0
   29be4:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   29be8:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   29bec:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   29bf0:	f88d 3001 	strb.w	r3, [sp, #1]
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   29bf4:	f10d 0101 	add.w	r1, sp, #1
   29bf8:	f10d 0006 	add.w	r0, sp, #6
   29bfc:	f7ff ff5f 	bl	29abe <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   29c00:	4603      	mov	r3, r0
   29c02:	b978      	cbnz	r0, 29c24 <ble_hs_startup_read_buf_sz+0x46>
    if (le_pktlen != 0) {
   29c04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   29c08:	b183      	cbz	r3, 29c2c <ble_hs_startup_read_buf_sz+0x4e>
        pktlen = le_pktlen;
   29c0a:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   29c0e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   29c12:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   29c16:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   29c1a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   29c1e:	f7fe ffff 	bl	28c20 <ble_hs_hci_set_buf_sz>
   29c22:	4603      	mov	r3, r0
}
   29c24:	4618      	mov	r0, r3
   29c26:	b003      	add	sp, #12
   29c28:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   29c2c:	a901      	add	r1, sp, #4
   29c2e:	f10d 0002 	add.w	r0, sp, #2
   29c32:	f7ff ff5a 	bl	29aea <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   29c36:	4603      	mov	r3, r0
   29c38:	2800      	cmp	r0, #0
   29c3a:	d0ec      	beq.n	29c16 <ble_hs_startup_read_buf_sz+0x38>
   29c3c:	e7f2      	b.n	29c24 <ble_hs_startup_read_buf_sz+0x46>

00029c3e <ble_hs_startup_le_read_sup_f_tx>:
{
   29c3e:	b510      	push	{r4, lr}
   29c40:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   29c42:	2308      	movs	r3, #8
   29c44:	9300      	str	r3, [sp, #0]
   29c46:	446b      	add	r3, sp
   29c48:	2200      	movs	r2, #0
   29c4a:	4611      	mov	r1, r2
   29c4c:	f242 0003 	movw	r0, #8195	; 0x2003
   29c50:	f7ff f818 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29c54:	4604      	mov	r4, r0
   29c56:	b110      	cbz	r0, 29c5e <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   29c58:	4620      	mov	r0, r4
   29c5a:	b004      	add	sp, #16
   29c5c:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   29c5e:	9802      	ldr	r0, [sp, #8]
   29c60:	f7ff f8ca 	bl	28df8 <ble_hs_hci_set_le_supported_feat>
    return 0;
   29c64:	e7f8      	b.n	29c58 <ble_hs_startup_le_read_sup_f_tx+0x1a>

00029c66 <ble_hs_startup_read_bd_addr>:
{
   29c66:	b510      	push	{r4, lr}
   29c68:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   29c6a:	2306      	movs	r3, #6
   29c6c:	9300      	str	r3, [sp, #0]
   29c6e:	ab02      	add	r3, sp, #8
   29c70:	2200      	movs	r2, #0
   29c72:	4611      	mov	r1, r2
   29c74:	f241 0009 	movw	r0, #4105	; 0x1009
   29c78:	f7ff f804 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   29c7c:	4604      	mov	r4, r0
   29c7e:	b110      	cbz	r0, 29c86 <ble_hs_startup_read_bd_addr+0x20>
}
   29c80:	4620      	mov	r0, r4
   29c82:	b004      	add	sp, #16
   29c84:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   29c86:	a802      	add	r0, sp, #8
   29c88:	f7ff fc0c 	bl	294a4 <ble_hs_id_set_pub>
    return 0;
   29c8c:	e7f8      	b.n	29c80 <ble_hs_startup_read_bd_addr+0x1a>

00029c8e <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   29c8e:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   29c90:	f7ff ff08 	bl	29aa4 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   29c94:	4604      	mov	r4, r0
   29c96:	b108      	cbz	r0, 29c9c <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   29c98:	4620      	mov	r0, r4
   29c9a:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   29c9c:	f7ff ff3b 	bl	29b16 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   29ca0:	4604      	mov	r4, r0
   29ca2:	2800      	cmp	r0, #0
   29ca4:	d1f8      	bne.n	29c98 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   29ca6:	f7ff ff4b 	bl	29b40 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   29caa:	4604      	mov	r4, r0
   29cac:	2800      	cmp	r0, #0
   29cae:	d1f3      	bne.n	29c98 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   29cb0:	f7ff ff72 	bl	29b98 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   29cb4:	4604      	mov	r4, r0
   29cb6:	2800      	cmp	r0, #0
   29cb8:	d1ee      	bne.n	29c98 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   29cba:	f7ff ff90 	bl	29bde <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   29cbe:	4604      	mov	r4, r0
   29cc0:	2800      	cmp	r0, #0
   29cc2:	d1e9      	bne.n	29c98 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   29cc4:	f7ff ffbb 	bl	29c3e <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   29cc8:	4604      	mov	r4, r0
   29cca:	2800      	cmp	r0, #0
   29ccc:	d1e4      	bne.n	29c98 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   29cce:	f7ff ffca 	bl	29c66 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   29cd2:	4604      	mov	r4, r0
   29cd4:	2800      	cmp	r0, #0
   29cd6:	d1df      	bne.n	29c98 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   29cd8:	f7ff fea8 	bl	29a2c <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   29cdc:	f7fe fe50 	bl	28980 <ble_hs_flow_startup>
    return 0;
   29ce0:	e7da      	b.n	29c98 <ble_hs_startup_go+0xa>
	...

00029ce4 <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   29ce4:	b538      	push	{r3, r4, r5, lr}
   29ce6:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   29ce8:	480b      	ldr	r0, [pc, #44]	; (29d18 <ble_hs_stop_done+0x34>)
   29cea:	f7eb fa11 	bl	15110 <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   29cee:	f7fd fe17 	bl	27920 <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   29cf2:	480a      	ldr	r0, [pc, #40]	; (29d1c <ble_hs_stop_done+0x38>)
   29cf4:	f7fb fd5c 	bl	257b0 <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   29cf8:	4a09      	ldr	r2, [pc, #36]	; (29d20 <ble_hs_stop_done+0x3c>)
   29cfa:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   29cfc:	2300      	movs	r3, #0
   29cfe:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   29d00:	4a08      	ldr	r2, [pc, #32]	; (29d24 <ble_hs_stop_done+0x40>)
   29d02:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   29d04:	f7fd fe10 	bl	27928 <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   29d08:	b12c      	cbz	r4, 29d16 <ble_hs_stop_done+0x32>
        listener->fn(status, listener->arg);
   29d0a:	6823      	ldr	r3, [r4, #0]
   29d0c:	6861      	ldr	r1, [r4, #4]
   29d0e:	4628      	mov	r0, r5
   29d10:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   29d12:	68a4      	ldr	r4, [r4, #8]
   29d14:	e7f8      	b.n	29d08 <ble_hs_stop_done+0x24>
    }
}
   29d16:	bd38      	pop	{r3, r4, r5, pc}
   29d18:	10003334 	.word	0x10003334
   29d1c:	10003324 	.word	0x10003324
   29d20:	10003330 	.word	0x10003330
   29d24:	10002f34 	.word	0x10002f34

00029d28 <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   29d28:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   29d2a:	4b05      	ldr	r3, [pc, #20]	; (29d40 <ble_hs_stop_terminate_timeout_cb+0x18>)
   29d2c:	781b      	ldrb	r3, [r3, #0]
   29d2e:	4a05      	ldr	r2, [pc, #20]	; (29d44 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   29d30:	2103      	movs	r1, #3
   29d32:	2004      	movs	r0, #4
   29d34:	f7ef fcfc 	bl	19730 <modlog_printf>
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   29d38:	2000      	movs	r0, #0
   29d3a:	f7ff ffd3 	bl	29ce4 <ble_hs_stop_done>
}
   29d3e:	bd08      	pop	{r3, pc}
   29d40:	10003321 	.word	0x10003321
   29d44:	00034df4 	.word	0x00034df4

00029d48 <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   29d48:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   29d4a:	f7eb fc11 	bl	15570 <os_eventq_dflt_get>
   29d4e:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   29d50:	2300      	movs	r3, #0
   29d52:	4a02      	ldr	r2, [pc, #8]	; (29d5c <ble_hs_stop_init+0x14>)
   29d54:	4802      	ldr	r0, [pc, #8]	; (29d60 <ble_hs_stop_init+0x18>)
   29d56:	f7eb f9cd 	bl	150f4 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   29d5a:	bd08      	pop	{r3, pc}
   29d5c:	00029d29 	.word	0x00029d29
   29d60:	10003334 	.word	0x10003334

00029d64 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   29d64:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   29d66:	8903      	ldrh	r3, [r0, #8]
   29d68:	2b04      	cmp	r3, #4
   29d6a:	d001      	beq.n	29d70 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   29d6c:	8940      	ldrh	r0, [r0, #10]
}
   29d6e:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   29d70:	f7f8 fd45 	bl	227fe <ble_att_chan_mtu>
   29d74:	e7fb      	b.n	29d6e <ble_l2cap_get_mtu+0xa>

00029d76 <ble_l2cap_append_rx>:
{
   29d76:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   29d78:	6900      	ldr	r0, [r0, #16]
   29d7a:	f7eb ff87 	bl	15c8c <os_mbuf_pack_chains>
    assert(m);
   29d7e:	b100      	cbz	r0, 29d82 <ble_l2cap_append_rx+0xc>
}
   29d80:	bd08      	pop	{r3, pc}
    assert(m);
   29d82:	f7ea fc67 	bl	14654 <hal_debugger_connected>
   29d86:	b100      	cbz	r0, 29d8a <ble_l2cap_append_rx+0x14>
   29d88:	be01      	bkpt	0x0001
   29d8a:	2300      	movs	r3, #0
   29d8c:	461a      	mov	r2, r3
   29d8e:	4619      	mov	r1, r3
   29d90:	4618      	mov	r0, r3
   29d92:	f7eb f801 	bl	14d98 <__assert_func>
	...

00029d98 <ble_l2cap_chan_alloc>:
{
   29d98:	b510      	push	{r4, lr}
   29d9a:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   29d9c:	4809      	ldr	r0, [pc, #36]	; (29dc4 <ble_l2cap_chan_alloc+0x2c>)
   29d9e:	f7ec f832 	bl	15e06 <os_memblock_get>
    if (chan == NULL) {
   29da2:	4603      	mov	r3, r0
   29da4:	b160      	cbz	r0, 29dc0 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   29da6:	2200      	movs	r2, #0
   29da8:	6002      	str	r2, [r0, #0]
   29daa:	6042      	str	r2, [r0, #4]
   29dac:	6082      	str	r2, [r0, #8]
   29dae:	60c2      	str	r2, [r0, #12]
   29db0:	6102      	str	r2, [r0, #16]
   29db2:	6142      	str	r2, [r0, #20]
   29db4:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   29db6:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   29db8:	4903      	ldr	r1, [pc, #12]	; (29dc8 <ble_l2cap_chan_alloc+0x30>)
   29dba:	68ca      	ldr	r2, [r1, #12]
   29dbc:	3201      	adds	r2, #1
   29dbe:	60ca      	str	r2, [r1, #12]
}
   29dc0:	4618      	mov	r0, r3
   29dc2:	bd10      	pop	{r4, pc}
   29dc4:	100033a8 	.word	0x100033a8
   29dc8:	100033c4 	.word	0x100033c4

00029dcc <ble_l2cap_chan_free>:
    if (chan == NULL) {
   29dcc:	b169      	cbz	r1, 29dea <ble_l2cap_chan_free+0x1e>
{
   29dce:	b510      	push	{r4, lr}
   29dd0:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   29dd2:	6908      	ldr	r0, [r1, #16]
   29dd4:	f7eb fc48 	bl	15668 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   29dd8:	4621      	mov	r1, r4
   29dda:	4804      	ldr	r0, [pc, #16]	; (29dec <ble_l2cap_chan_free+0x20>)
   29ddc:	f7ec f83b 	bl	15e56 <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   29de0:	4a03      	ldr	r2, [pc, #12]	; (29df0 <ble_l2cap_chan_free+0x24>)
   29de2:	6913      	ldr	r3, [r2, #16]
   29de4:	3301      	adds	r3, #1
   29de6:	6113      	str	r3, [r2, #16]
}
   29de8:	bd10      	pop	{r4, pc}
   29dea:	4770      	bx	lr
   29dec:	100033a8 	.word	0x100033a8
   29df0:	100033c4 	.word	0x100033c4

00029df4 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   29df4:	7b80      	ldrb	r0, [r0, #14]
}
   29df6:	f000 0001 	and.w	r0, r0, #1
   29dfa:	4770      	bx	lr

00029dfc <ble_l2cap_parse_hdr>:
{
   29dfc:	b538      	push	{r3, r4, r5, lr}
   29dfe:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   29e00:	4613      	mov	r3, r2
   29e02:	2204      	movs	r2, #4
   29e04:	f7eb fcda 	bl	157bc <os_mbuf_copydata>
    if (rc != 0) {
   29e08:	b960      	cbnz	r0, 29e24 <ble_l2cap_parse_hdr+0x28>
   29e0a:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   29e0c:	4620      	mov	r0, r4
   29e0e:	f008 f886 	bl	31f1e <get_le16>
   29e12:	4623      	mov	r3, r4
   29e14:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   29e18:	4618      	mov	r0, r3
   29e1a:	f008 f880 	bl	31f1e <get_le16>
   29e1e:	8060      	strh	r0, [r4, #2]
}
   29e20:	4628      	mov	r0, r5
   29e22:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   29e24:	2504      	movs	r5, #4
   29e26:	e7fb      	b.n	29e20 <ble_l2cap_parse_hdr+0x24>

00029e28 <ble_l2cap_prepend_hdr>:
{
   29e28:	b530      	push	{r4, r5, lr}
   29e2a:	b083      	sub	sp, #12
   29e2c:	4604      	mov	r4, r0
   29e2e:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   29e30:	4611      	mov	r1, r2
   29e32:	a801      	add	r0, sp, #4
   29e34:	f008 f852 	bl	31edc <put_le16>
    put_le16(&hdr.cid, cid);
   29e38:	4629      	mov	r1, r5
   29e3a:	f10d 0006 	add.w	r0, sp, #6
   29e3e:	f008 f84d 	bl	31edc <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   29e42:	2104      	movs	r1, #4
   29e44:	4620      	mov	r0, r4
   29e46:	f7eb feee 	bl	15c26 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   29e4a:	b110      	cbz	r0, 29e52 <ble_l2cap_prepend_hdr+0x2a>
    memcpy(om->om_data, &hdr, sizeof hdr);
   29e4c:	6803      	ldr	r3, [r0, #0]
   29e4e:	9a01      	ldr	r2, [sp, #4]
   29e50:	601a      	str	r2, [r3, #0]
}
   29e52:	b003      	add	sp, #12
   29e54:	bd30      	pop	{r4, r5, pc}

00029e56 <ble_l2cap_get_conn_handle>:
    if (!chan) {
   29e56:	b108      	cbz	r0, 29e5c <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   29e58:	8880      	ldrh	r0, [r0, #4]
   29e5a:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   29e5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   29e60:	4770      	bx	lr

00029e62 <ble_l2cap_remove_rx>:
{
   29e62:	b538      	push	{r3, r4, r5, lr}
   29e64:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   29e66:	2500      	movs	r5, #0
   29e68:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   29e6a:	6908      	ldr	r0, [r1, #16]
   29e6c:	f7eb fbfc 	bl	15668 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   29e70:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   29e72:	82a5      	strh	r5, [r4, #20]
}
   29e74:	bd38      	pop	{r3, r4, r5, pc}

00029e76 <ble_l2cap_rx_payload>:
{
   29e76:	b570      	push	{r4, r5, r6, lr}
   29e78:	4605      	mov	r5, r0
   29e7a:	460c      	mov	r4, r1
   29e7c:	4611      	mov	r1, r2
   29e7e:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   29e80:	6923      	ldr	r3, [r4, #16]
   29e82:	b163      	cbz	r3, 29e9e <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   29e84:	4620      	mov	r0, r4
   29e86:	f7ff ff76 	bl	29d76 <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   29e8a:	6923      	ldr	r3, [r4, #16]
   29e8c:	8a1a      	ldrh	r2, [r3, #16]
   29e8e:	8aa0      	ldrh	r0, [r4, #20]
   29e90:	1a10      	subs	r0, r2, r0
    if (len_diff > 0) {
   29e92:	2800      	cmp	r0, #0
   29e94:	dc05      	bgt.n	29ea2 <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   29e96:	b950      	cbnz	r0, 29eae <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   29e98:	69a3      	ldr	r3, [r4, #24]
   29e9a:	6033      	str	r3, [r6, #0]
}
   29e9c:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   29e9e:	6122      	str	r2, [r4, #16]
   29ea0:	e7f3      	b.n	29e8a <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   29ea2:	4621      	mov	r1, r4
   29ea4:	4628      	mov	r0, r5
   29ea6:	f7ff ffdc 	bl	29e62 <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   29eaa:	200a      	movs	r0, #10
   29eac:	e7f6      	b.n	29e9c <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   29eae:	f7ec fb63 	bl	16578 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   29eb2:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   29eb6:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   29eb8:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   29eba:	f7fd fe23 	bl	27b04 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   29ebe:	2001      	movs	r0, #1
    return rc;
   29ec0:	e7ec      	b.n	29e9c <ble_l2cap_rx_payload+0x26>

00029ec2 <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   29ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ec6:	b082      	sub	sp, #8
   29ec8:	4606      	mov	r6, r0
   29eca:	4614      	mov	r4, r2
   29ecc:	461f      	mov	r7, r3
   29ece:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   29ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29ed4:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   29ed6:	8809      	ldrh	r1, [r1, #0]
   29ed8:	f3c1 3101 	ubfx	r1, r1, #12, #2
    switch (pb) {
   29edc:	2901      	cmp	r1, #1
   29ede:	d031      	beq.n	29f44 <ble_l2cap_rx+0x82>
   29ee0:	2902      	cmp	r1, #2
   29ee2:	d141      	bne.n	29f68 <ble_l2cap_rx+0xa6>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   29ee4:	aa01      	add	r2, sp, #4
   29ee6:	2100      	movs	r1, #0
   29ee8:	4620      	mov	r0, r4
   29eea:	f7ff ff87 	bl	29dfc <ble_l2cap_parse_hdr>
        if (rc != 0) {
   29eee:	4680      	mov	r8, r0
   29ef0:	bbe0      	cbnz	r0, 29f6c <ble_l2cap_rx+0xaa>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   29ef2:	2104      	movs	r1, #4
   29ef4:	4620      	mov	r0, r4
   29ef6:	f7eb fc8e 	bl	15816 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   29efa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   29efe:	4630      	mov	r0, r6
   29f00:	f7fe fab4 	bl	2846c <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   29f04:	4680      	mov	r8, r0
   29f06:	b198      	cbz	r0, 29f30 <ble_l2cap_rx+0x6e>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   29f08:	6903      	ldr	r3, [r0, #16]
   29f0a:	b11b      	cbz	r3, 29f14 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   29f0c:	4601      	mov	r1, r0
   29f0e:	4630      	mov	r0, r6
   29f10:	f7ff ffa7 	bl	29e62 <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   29f14:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   29f18:	4640      	mov	r0, r8
   29f1a:	f7ff ff23 	bl	29d64 <ble_l2cap_get_mtu>
   29f1e:	4285      	cmp	r5, r0
   29f20:	d82b      	bhi.n	29f7a <ble_l2cap_rx+0xb8>
            ble_l2cap_disconnect(chan);
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   29f22:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   29f26:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   29f2a:	f8a8 3014 	strh.w	r3, [r8, #20]
        break;
   29f2e:	e011      	b.n	29f54 <ble_l2cap_rx+0x92>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   29f30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   29f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   29f38:	4293      	cmp	r3, r2
   29f3a:	d000      	beq.n	29f3e <ble_l2cap_rx+0x7c>
                *out_reject_cid = l2cap_hdr.cid;
   29f3c:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   29f3e:	f04f 0805 	mov.w	r8, #5
            goto err;
   29f42:	e013      	b.n	29f6c <ble_l2cap_rx+0xaa>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   29f44:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   29f48:	f1b8 0f00 	cmp.w	r8, #0
   29f4c:	d018      	beq.n	29f80 <ble_l2cap_rx+0xbe>
   29f4e:	f8d8 3010 	ldr.w	r3, [r8, #16]
   29f52:	b1c3      	cbz	r3, 29f86 <ble_l2cap_rx+0xc4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   29f54:	463b      	mov	r3, r7
   29f56:	4622      	mov	r2, r4
   29f58:	4641      	mov	r1, r8
   29f5a:	4630      	mov	r0, r6
   29f5c:	f7ff ff8b 	bl	29e76 <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   29f60:	4680      	mov	r8, r0
   29f62:	b130      	cbz	r0, 29f72 <ble_l2cap_rx+0xb0>
    om = NULL;
   29f64:	2400      	movs	r4, #0
   29f66:	e001      	b.n	29f6c <ble_l2cap_rx+0xaa>
    switch (pb) {
   29f68:	f04f 080a 	mov.w	r8, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   29f6c:	4620      	mov	r0, r4
   29f6e:	f7eb fb7b 	bl	15668 <os_mbuf_free_chain>
    return rc;
}
   29f72:	4640      	mov	r0, r8
   29f74:	b002      	add	sp, #8
   29f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_EBADDATA;
   29f7a:	f04f 080a 	mov.w	r8, #10
   29f7e:	e7f5      	b.n	29f6c <ble_l2cap_rx+0xaa>
            rc = BLE_HS_EBADDATA;
   29f80:	f04f 080a 	mov.w	r8, #10
   29f84:	e7f2      	b.n	29f6c <ble_l2cap_rx+0xaa>
   29f86:	f04f 080a 	mov.w	r8, #10
   29f8a:	e7ef      	b.n	29f6c <ble_l2cap_rx+0xaa>

00029f8c <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   29f8c:	b510      	push	{r4, lr}
   29f8e:	b082      	sub	sp, #8
   29f90:	4604      	mov	r4, r0
   29f92:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   29f94:	4610      	mov	r0, r2
   29f96:	8a12      	ldrh	r2, [r2, #16]
   29f98:	88c9      	ldrh	r1, [r1, #6]
   29f9a:	f7ff ff45 	bl	29e28 <ble_l2cap_prepend_hdr>
   29f9e:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   29fa0:	b188      	cbz	r0, 29fc6 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   29fa2:	a901      	add	r1, sp, #4
   29fa4:	4620      	mov	r0, r4
   29fa6:	f7fe ff1f 	bl	28de8 <ble_hs_hci_acl_tx>
    switch (rc) {
   29faa:	b150      	cbz	r0, 29fc2 <ble_l2cap_tx+0x36>
   29fac:	2801      	cmp	r0, #1
   29fae:	d108      	bne.n	29fc2 <ble_l2cap_tx+0x36>
        /* Success. */
        return 0;

    case BLE_HS_EAGAIN:
        /* Controller could not accommodate full packet.  Enqueue remainder. */
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   29fb0:	9b01      	ldr	r3, [sp, #4]
   29fb2:	2000      	movs	r0, #0
   29fb4:	6158      	str	r0, [r3, #20]
   29fb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   29fb8:	3310      	adds	r3, #16
   29fba:	6013      	str	r3, [r2, #0]
   29fbc:	9b01      	ldr	r3, [sp, #4]
   29fbe:	3314      	adds	r3, #20
   29fc0:	6423      	str	r3, [r4, #64]	; 0x40

    default:
        /* Error. */
        return rc;
    }
}
   29fc2:	b002      	add	sp, #8
   29fc4:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   29fc6:	2006      	movs	r0, #6
   29fc8:	e7fb      	b.n	29fc2 <ble_l2cap_tx+0x36>
	...

00029fcc <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   29fcc:	b500      	push	{lr}
   29fce:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   29fd0:	4b11      	ldr	r3, [pc, #68]	; (2a018 <ble_l2cap_init+0x4c>)
   29fd2:	9300      	str	r3, [sp, #0]
   29fd4:	4b11      	ldr	r3, [pc, #68]	; (2a01c <ble_l2cap_init+0x50>)
   29fd6:	221c      	movs	r2, #28
   29fd8:	2103      	movs	r1, #3
   29fda:	4811      	ldr	r0, [pc, #68]	; (2a020 <ble_l2cap_init+0x54>)
   29fdc:	f7eb feea 	bl	15db4 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   29fe0:	b9a0      	cbnz	r0, 2a00c <ble_l2cap_init+0x40>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   29fe2:	f000 fa71 	bl	2a4c8 <ble_l2cap_sig_init>
    if (rc != 0) {
   29fe6:	4603      	mov	r3, r0
   29fe8:	b988      	cbnz	r0, 2a00e <ble_l2cap_init+0x42>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   29fea:	f001 ff7d 	bl	2bee8 <ble_sm_init>
    if (rc != 0) {
   29fee:	4603      	mov	r3, r0
   29ff0:	b968      	cbnz	r0, 2a00e <ble_l2cap_init+0x42>
        return rc;
    }

    rc = stats_init_and_reg(
   29ff2:	4b0c      	ldr	r3, [pc, #48]	; (2a024 <ble_l2cap_init+0x58>)
   29ff4:	9301      	str	r3, [sp, #4]
   29ff6:	2300      	movs	r3, #0
   29ff8:	9300      	str	r3, [sp, #0]
   29ffa:	220a      	movs	r2, #10
   29ffc:	2104      	movs	r1, #4
   29ffe:	480a      	ldr	r0, [pc, #40]	; (2a028 <ble_l2cap_init+0x5c>)
   2a000:	f7f0 f910 	bl	1a224 <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   2a004:	4603      	mov	r3, r0
   2a006:	b110      	cbz	r0, 2a00e <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   2a008:	230b      	movs	r3, #11
   2a00a:	e000      	b.n	2a00e <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   2a00c:	230b      	movs	r3, #11
    }

    return 0;
}
   2a00e:	4618      	mov	r0, r3
   2a010:	b003      	add	sp, #12
   2a012:	f85d fb04 	ldr.w	pc, [sp], #4
   2a016:	bf00      	nop
   2a018:	00034e34 	.word	0x00034e34
   2a01c:	10003354 	.word	0x10003354
   2a020:	100033a8 	.word	0x100033a8
   2a024:	00034e48 	.word	0x00034e48
   2a028:	100033c4 	.word	0x100033c4

0002a02c <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   2a02c:	4a05      	ldr	r2, [pc, #20]	; (2a044 <ble_l2cap_sig_next_id+0x18>)
   2a02e:	7813      	ldrb	r3, [r2, #0]
   2a030:	3301      	adds	r3, #1
   2a032:	b2db      	uxtb	r3, r3
   2a034:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   2a036:	b913      	cbnz	r3, 2a03e <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   2a038:	4613      	mov	r3, r2
   2a03a:	2201      	movs	r2, #1
   2a03c:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   2a03e:	4b01      	ldr	r3, [pc, #4]	; (2a044 <ble_l2cap_sig_next_id+0x18>)
   2a040:	7818      	ldrb	r0, [r3, #0]
   2a042:	4770      	bx	lr
   2a044:	100033f8 	.word	0x100033f8

0002a048 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   2a048:	281a      	cmp	r0, #26
   2a04a:	d803      	bhi.n	2a054 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   2a04c:	4b02      	ldr	r3, [pc, #8]	; (2a058 <ble_l2cap_sig_dispatch_get+0x10>)
   2a04e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2a052:	4770      	bx	lr
        return NULL;
   2a054:	2000      	movs	r0, #0
}
   2a056:	4770      	bx	lr
   2a058:	00034e6c 	.word	0x00034e6c

0002a05c <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   2a05c:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   2a05e:	8904      	ldrh	r4, [r0, #8]
   2a060:	428c      	cmp	r4, r1
   2a062:	d108      	bne.n	2a076 <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
    }

    if (op != proc->op) {
   2a064:	7a81      	ldrb	r1, [r0, #10]
   2a066:	4291      	cmp	r1, r2
   2a068:	d108      	bne.n	2a07c <ble_l2cap_sig_proc_matches+0x20>
        return 0;
    }

    if (id != 0 && id != proc->id) {
   2a06a:	b14b      	cbz	r3, 2a080 <ble_l2cap_sig_proc_matches+0x24>
   2a06c:	7ac2      	ldrb	r2, [r0, #11]
   2a06e:	429a      	cmp	r2, r3
   2a070:	d108      	bne.n	2a084 <ble_l2cap_sig_proc_matches+0x28>
        return 0;
    }

    return 1;
   2a072:	2001      	movs	r0, #1
   2a074:	e000      	b.n	2a078 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   2a076:	2000      	movs	r0, #0
}
   2a078:	bc10      	pop	{r4}
   2a07a:	4770      	bx	lr
        return 0;
   2a07c:	2000      	movs	r0, #0
   2a07e:	e7fb      	b.n	2a078 <ble_l2cap_sig_proc_matches+0x1c>
    return 1;
   2a080:	2001      	movs	r0, #1
   2a082:	e7f9      	b.n	2a078 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   2a084:	2000      	movs	r0, #0
   2a086:	e7f7      	b.n	2a078 <ble_l2cap_sig_proc_matches+0x1c>

0002a088 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   2a088:	2008      	movs	r0, #8
   2a08a:	4770      	bx	lr

0002a08c <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   2a08c:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   2a08e:	460c      	mov	r4, r1
   2a090:	b119      	cbz	r1, 2a09a <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   2a092:	4a05      	ldr	r2, [pc, #20]	; (2a0a8 <ble_l2cap_sig_update_call_cb+0x1c>)
   2a094:	69d3      	ldr	r3, [r2, #28]
   2a096:	3301      	adds	r3, #1
   2a098:	61d3      	str	r3, [r2, #28]
    }

    if (proc->update.cb != NULL) {
   2a09a:	68c3      	ldr	r3, [r0, #12]
   2a09c:	b11b      	cbz	r3, 2a0a6 <ble_l2cap_sig_update_call_cb+0x1a>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   2a09e:	6902      	ldr	r2, [r0, #16]
   2a0a0:	4621      	mov	r1, r4
   2a0a2:	8900      	ldrh	r0, [r0, #8]
   2a0a4:	4798      	blx	r3
    }
}
   2a0a6:	bd10      	pop	{r4, pc}
   2a0a8:	100033c4 	.word	0x100033c4

0002a0ac <ble_l2cap_sig_proc_insert>:
{
   2a0ac:	b510      	push	{r4, lr}
   2a0ae:	4604      	mov	r4, r0
    ble_hs_lock();
   2a0b0:	f7fd fc36 	bl	27920 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   2a0b4:	4b05      	ldr	r3, [pc, #20]	; (2a0cc <ble_l2cap_sig_proc_insert+0x20>)
   2a0b6:	681b      	ldr	r3, [r3, #0]
   2a0b8:	6023      	str	r3, [r4, #0]
   2a0ba:	b123      	cbz	r3, 2a0c6 <ble_l2cap_sig_proc_insert+0x1a>
   2a0bc:	4b03      	ldr	r3, [pc, #12]	; (2a0cc <ble_l2cap_sig_proc_insert+0x20>)
   2a0be:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   2a0c0:	f7fd fc32 	bl	27928 <ble_hs_unlock>
}
   2a0c4:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   2a0c6:	4b01      	ldr	r3, [pc, #4]	; (2a0cc <ble_l2cap_sig_proc_insert+0x20>)
   2a0c8:	605c      	str	r4, [r3, #4]
   2a0ca:	e7f7      	b.n	2a0bc <ble_l2cap_sig_proc_insert+0x10>
   2a0cc:	1000342c 	.word	0x1000342c

0002a0d0 <ble_l2cap_sig_proc_extract>:
{
   2a0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a0d4:	4607      	mov	r7, r0
   2a0d6:	460e      	mov	r6, r1
   2a0d8:	4615      	mov	r5, r2
    ble_hs_lock();
   2a0da:	f7fd fc21 	bl	27920 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2a0de:	4b15      	ldr	r3, [pc, #84]	; (2a134 <ble_l2cap_sig_proc_extract+0x64>)
   2a0e0:	f8d3 9000 	ldr.w	r9, [r3]
   2a0e4:	464c      	mov	r4, r9
    prev = NULL;
   2a0e6:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2a0ea:	b194      	cbz	r4, 2a112 <ble_l2cap_sig_proc_extract+0x42>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   2a0ec:	462b      	mov	r3, r5
   2a0ee:	4632      	mov	r2, r6
   2a0f0:	4639      	mov	r1, r7
   2a0f2:	4620      	mov	r0, r4
   2a0f4:	f7ff ffb2 	bl	2a05c <ble_l2cap_sig_proc_matches>
   2a0f8:	b910      	cbnz	r0, 2a100 <ble_l2cap_sig_proc_extract+0x30>
        prev = proc;
   2a0fa:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2a0fc:	6824      	ldr	r4, [r4, #0]
   2a0fe:	e7f4      	b.n	2a0ea <ble_l2cap_sig_proc_extract+0x1a>
            if (prev == NULL) {
   2a100:	f1b8 0f00 	cmp.w	r8, #0
   2a104:	d00a      	beq.n	2a11c <ble_l2cap_sig_proc_extract+0x4c>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   2a106:	f8d8 3000 	ldr.w	r3, [r8]
   2a10a:	681b      	ldr	r3, [r3, #0]
   2a10c:	f8c8 3000 	str.w	r3, [r8]
   2a110:	b163      	cbz	r3, 2a12c <ble_l2cap_sig_proc_extract+0x5c>
    ble_hs_unlock();
   2a112:	f7fd fc09 	bl	27928 <ble_hs_unlock>
}
   2a116:	4620      	mov	r0, r4
   2a118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2a11c:	f8d9 3000 	ldr.w	r3, [r9]
   2a120:	4a04      	ldr	r2, [pc, #16]	; (2a134 <ble_l2cap_sig_proc_extract+0x64>)
   2a122:	6013      	str	r3, [r2, #0]
   2a124:	2b00      	cmp	r3, #0
   2a126:	d1f4      	bne.n	2a112 <ble_l2cap_sig_proc_extract+0x42>
   2a128:	6052      	str	r2, [r2, #4]
   2a12a:	e7f2      	b.n	2a112 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   2a12c:	4b01      	ldr	r3, [pc, #4]	; (2a134 <ble_l2cap_sig_proc_extract+0x64>)
   2a12e:	f8c3 8004 	str.w	r8, [r3, #4]
   2a132:	e7ee      	b.n	2a112 <ble_l2cap_sig_proc_extract+0x42>
   2a134:	1000342c 	.word	0x1000342c

0002a138 <ble_l2cap_sig_proc_alloc>:
{
   2a138:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   2a13a:	4806      	ldr	r0, [pc, #24]	; (2a154 <ble_l2cap_sig_proc_alloc+0x1c>)
   2a13c:	f7eb fe63 	bl	15e06 <os_memblock_get>
    if (proc != NULL) {
   2a140:	4603      	mov	r3, r0
   2a142:	b128      	cbz	r0, 2a150 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   2a144:	2200      	movs	r2, #0
   2a146:	6002      	str	r2, [r0, #0]
   2a148:	6042      	str	r2, [r0, #4]
   2a14a:	6082      	str	r2, [r0, #8]
   2a14c:	60c2      	str	r2, [r0, #12]
   2a14e:	6102      	str	r2, [r0, #16]
}
   2a150:	4618      	mov	r0, r3
   2a152:	bd08      	pop	{r3, pc}
   2a154:	10003410 	.word	0x10003410

0002a158 <ble_l2cap_sig_proc_set_timer>:
{
   2a158:	b510      	push	{r4, lr}
   2a15a:	4604      	mov	r4, r0
   2a15c:	f7ec fa0c 	bl	16578 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   2a160:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   2a164:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   2a166:	f7fd fccd 	bl	27b04 <ble_hs_timer_resched>
}
   2a16a:	bd10      	pop	{r4, pc}

0002a16c <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   2a16c:	b570      	push	{r4, r5, r6, lr}
   2a16e:	4604      	mov	r4, r0
   2a170:	f7ec fa02 	bl	16578 <os_time_get>
   2a174:	4605      	mov	r5, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   2a176:	2300      	movs	r3, #0
   2a178:	6023      	str	r3, [r4, #0]
   2a17a:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   2a17c:	f7fd fbd0 	bl	27920 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   2a180:	4b0f      	ldr	r3, [pc, #60]	; (2a1c0 <ble_l2cap_sig_extract_expired+0x54>)
   2a182:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   2a184:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   2a188:	e00a      	b.n	2a1a0 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2a18a:	480d      	ldr	r0, [pc, #52]	; (2a1c0 <ble_l2cap_sig_extract_expired+0x54>)
   2a18c:	6802      	ldr	r2, [r0, #0]
   2a18e:	6812      	ldr	r2, [r2, #0]
   2a190:	6002      	str	r2, [r0, #0]
   2a192:	b17a      	cbz	r2, 2a1b4 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   2a194:	2200      	movs	r2, #0
   2a196:	601a      	str	r2, [r3, #0]
   2a198:	6862      	ldr	r2, [r4, #4]
   2a19a:	6013      	str	r3, [r2, #0]
   2a19c:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   2a19e:	460b      	mov	r3, r1
    while (proc != NULL) {
   2a1a0:	b153      	cbz	r3, 2a1b8 <ble_l2cap_sig_extract_expired+0x4c>
        next = STAILQ_NEXT(proc, next);
   2a1a2:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   2a1a4:	685a      	ldr	r2, [r3, #4]
   2a1a6:	1b52      	subs	r2, r2, r5
        if (time_diff <= 0) {
   2a1a8:	2a00      	cmp	r2, #0
   2a1aa:	ddee      	ble.n	2a18a <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   2a1ac:	4296      	cmp	r6, r2
   2a1ae:	ddf6      	ble.n	2a19e <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   2a1b0:	4616      	mov	r6, r2
   2a1b2:	e7f4      	b.n	2a19e <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2a1b4:	6040      	str	r0, [r0, #4]
   2a1b6:	e7ed      	b.n	2a194 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   2a1b8:	f7fd fbb6 	bl	27928 <ble_hs_unlock>

    return next_exp_in;
}
   2a1bc:	4630      	mov	r0, r6
   2a1be:	bd70      	pop	{r4, r5, r6, pc}
   2a1c0:	1000342c 	.word	0x1000342c

0002a1c4 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   2a1c4:	b128      	cbz	r0, 2a1d2 <ble_l2cap_sig_proc_free+0xe>
{
   2a1c6:	b508      	push	{r3, lr}
   2a1c8:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   2a1ca:	4802      	ldr	r0, [pc, #8]	; (2a1d4 <ble_l2cap_sig_proc_free+0x10>)
   2a1cc:	f7eb fe43 	bl	15e56 <os_memblock_put>
}
   2a1d0:	bd08      	pop	{r3, pc}
   2a1d2:	4770      	bx	lr
   2a1d4:	10003410 	.word	0x10003410

0002a1d8 <ble_l2cap_sig_process_status>:
{
   2a1d8:	b510      	push	{r4, lr}
   2a1da:	4604      	mov	r4, r0
    if (status == 0) {
   2a1dc:	b929      	cbnz	r1, 2a1ea <ble_l2cap_sig_process_status+0x12>
        ble_l2cap_sig_proc_set_timer(proc);
   2a1de:	f7ff ffbb 	bl	2a158 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   2a1e2:	4620      	mov	r0, r4
   2a1e4:	f7ff ff62 	bl	2a0ac <ble_l2cap_sig_proc_insert>
}
   2a1e8:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_free(proc);
   2a1ea:	f7ff ffeb 	bl	2a1c4 <ble_l2cap_sig_proc_free>
}
   2a1ee:	e7fb      	b.n	2a1e8 <ble_l2cap_sig_process_status+0x10>

0002a1f0 <ble_l2cap_sig_rx_reject>:
{
   2a1f0:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   2a1f2:	784a      	ldrb	r2, [r1, #1]
   2a1f4:	2101      	movs	r1, #1
   2a1f6:	f7ff ff6b 	bl	2a0d0 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   2a1fa:	b108      	cbz	r0, 2a200 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   2a1fc:	f7ff ffe2 	bl	2a1c4 <ble_l2cap_sig_proc_free>
}
   2a200:	2000      	movs	r0, #0
   2a202:	bd08      	pop	{r3, pc}

0002a204 <ble_l2cap_sig_update_rsp_rx>:
{
   2a204:	b570      	push	{r4, r5, r6, lr}
   2a206:	4614      	mov	r4, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   2a208:	784a      	ldrb	r2, [r1, #1]
   2a20a:	2100      	movs	r1, #0
   2a20c:	f7ff ff60 	bl	2a0d0 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   2a210:	b1d8      	cbz	r0, 2a24a <ble_l2cap_sig_update_rsp_rx+0x46>
   2a212:	4606      	mov	r6, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   2a214:	2102      	movs	r1, #2
   2a216:	4620      	mov	r0, r4
   2a218:	f7ff fa7d 	bl	29716 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2a21c:	4605      	mov	r5, r0
   2a21e:	b938      	cbnz	r0, 2a230 <ble_l2cap_sig_update_rsp_rx+0x2c>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   2a220:	6823      	ldr	r3, [r4, #0]
   2a222:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   2a224:	881b      	ldrh	r3, [r3, #0]
   2a226:	b163      	cbz	r3, 2a242 <ble_l2cap_sig_update_rsp_rx+0x3e>
   2a228:	2b01      	cmp	r3, #1
   2a22a:	d10c      	bne.n	2a246 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EREJECT;
   2a22c:	2110      	movs	r1, #16
   2a22e:	e000      	b.n	2a232 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = rc;
   2a230:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   2a232:	4630      	mov	r0, r6
   2a234:	f7ff ff2a 	bl	2a08c <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   2a238:	4630      	mov	r0, r6
   2a23a:	f7ff ffc3 	bl	2a1c4 <ble_l2cap_sig_proc_free>
}
   2a23e:	4628      	mov	r0, r5
   2a240:	bd70      	pop	{r4, r5, r6, pc}
    switch (le16toh(rsp->result)) {
   2a242:	4601      	mov	r1, r0
   2a244:	e7f5      	b.n	2a232 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = BLE_HS_EBADDATA;
   2a246:	210a      	movs	r1, #10
   2a248:	e7f3      	b.n	2a232 <ble_l2cap_sig_update_rsp_rx+0x2e>
        return 0;
   2a24a:	2500      	movs	r5, #0
   2a24c:	e7f7      	b.n	2a23e <ble_l2cap_sig_update_rsp_rx+0x3a>
	...

0002a250 <ble_l2cap_sig_rx>:
{
   2a250:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a252:	b085      	sub	sp, #20
   2a254:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   2a256:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   2a258:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   2a25c:	4a1c      	ldr	r2, [pc, #112]	; (2a2d0 <ble_l2cap_sig_rx+0x80>)
   2a25e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2a260:	3301      	adds	r3, #1
   2a262:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   2a264:	6900      	ldr	r0, [r0, #16]
   2a266:	f7ff fa05 	bl	29674 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   2a26a:	2104      	movs	r1, #4
   2a26c:	4630      	mov	r0, r6
   2a26e:	f7ff fa52 	bl	29716 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2a272:	4605      	mov	r5, r0
   2a274:	b110      	cbz	r0, 2a27c <ble_l2cap_sig_rx+0x2c>
}
   2a276:	4628      	mov	r0, r5
   2a278:	b005      	add	sp, #20
   2a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   2a27c:	6923      	ldr	r3, [r4, #16]
   2a27e:	aa03      	add	r2, sp, #12
   2a280:	88d9      	ldrh	r1, [r3, #6]
   2a282:	6818      	ldr	r0, [r3, #0]
   2a284:	f000 f957 	bl	2a536 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   2a288:	2104      	movs	r1, #4
   2a28a:	6920      	ldr	r0, [r4, #16]
   2a28c:	f7eb fac3 	bl	15816 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   2a290:	6923      	ldr	r3, [r4, #16]
   2a292:	8a1a      	ldrh	r2, [r3, #16]
   2a294:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2a298:	429a      	cmp	r2, r3
   2a29a:	d117      	bne.n	2a2cc <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   2a29c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   2a2a0:	f7ff fed2 	bl	2a048 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   2a2a4:	4603      	mov	r3, r0
   2a2a6:	b178      	cbz	r0, 2a2c8 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   2a2a8:	4632      	mov	r2, r6
   2a2aa:	a903      	add	r1, sp, #12
   2a2ac:	4638      	mov	r0, r7
   2a2ae:	4798      	blx	r3
    if (rc) {
   2a2b0:	4605      	mov	r5, r0
   2a2b2:	2800      	cmp	r0, #0
   2a2b4:	d0df      	beq.n	2a276 <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   2a2b6:	2200      	movs	r2, #0
   2a2b8:	9200      	str	r2, [sp, #0]
   2a2ba:	4613      	mov	r3, r2
   2a2bc:	f89d 100d 	ldrb.w	r1, [sp, #13]
   2a2c0:	4638      	mov	r0, r7
   2a2c2:	f000 f95f 	bl	2a584 <ble_l2cap_sig_reject_tx>
   2a2c6:	e7d6      	b.n	2a276 <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   2a2c8:	2510      	movs	r5, #16
   2a2ca:	e7f4      	b.n	2a2b6 <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   2a2cc:	250a      	movs	r5, #10
   2a2ce:	e7d2      	b.n	2a276 <ble_l2cap_sig_rx+0x26>
   2a2d0:	100033c4 	.word	0x100033c4

0002a2d4 <ble_l2cap_sig_update_req_rx>:
{
   2a2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a2d6:	b087      	sub	sp, #28
   2a2d8:	4607      	mov	r7, r0
   2a2da:	460e      	mov	r6, r1
   2a2dc:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   2a2de:	2108      	movs	r1, #8
   2a2e0:	4610      	mov	r0, r2
   2a2e2:	f7ff fa18 	bl	29716 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2a2e6:	4605      	mov	r5, r0
   2a2e8:	b110      	cbz	r0, 2a2f0 <ble_l2cap_sig_update_req_rx+0x1c>
}
   2a2ea:	4628      	mov	r0, r5
   2a2ec:	b007      	add	sp, #28
   2a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   2a2f0:	f10d 0107 	add.w	r1, sp, #7
   2a2f4:	4638      	mov	r0, r7
   2a2f6:	f7fe f87e 	bl	283f6 <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   2a2fa:	4605      	mov	r5, r0
   2a2fc:	2800      	cmp	r0, #0
   2a2fe:	d1f4      	bne.n	2a2ea <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   2a300:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   2a304:	f013 0f01 	tst.w	r3, #1
   2a308:	d030      	beq.n	2a36c <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   2a30a:	6823      	ldr	r3, [r4, #0]
   2a30c:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   2a30e:	881a      	ldrh	r2, [r3, #0]
   2a310:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   2a314:	885a      	ldrh	r2, [r3, #2]
   2a316:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   2a31a:	889a      	ldrh	r2, [r3, #4]
   2a31c:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   2a320:	88db      	ldrh	r3, [r3, #6]
   2a322:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   2a326:	2300      	movs	r3, #0
   2a328:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   2a32c:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   2a330:	a902      	add	r1, sp, #8
   2a332:	4638      	mov	r0, r7
   2a334:	f7fa fb95 	bl	24a62 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   2a338:	4603      	mov	r3, r0
   2a33a:	b178      	cbz	r0, 2a35c <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   2a33c:	b9a3      	cbnz	r3, 2a368 <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   2a33e:	2400      	movs	r4, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   2a340:	ab05      	add	r3, sp, #20
   2a342:	2202      	movs	r2, #2
   2a344:	7871      	ldrb	r1, [r6, #1]
   2a346:	2013      	movs	r0, #19
   2a348:	f000 f8fc 	bl	2a544 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   2a34c:	2800      	cmp	r0, #0
   2a34e:	d0cc      	beq.n	2a2ea <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   2a350:	8004      	strh	r4, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   2a352:	9905      	ldr	r1, [sp, #20]
   2a354:	4638      	mov	r0, r7
   2a356:	f000 f8d1 	bl	2a4fc <ble_l2cap_sig_tx>
    return 0;
   2a35a:	e7c6      	b.n	2a2ea <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   2a35c:	a902      	add	r1, sp, #8
   2a35e:	4638      	mov	r0, r7
   2a360:	f7fa ff9e 	bl	252a0 <ble_gap_update_params>
   2a364:	4603      	mov	r3, r0
   2a366:	e7e9      	b.n	2a33c <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   2a368:	2401      	movs	r4, #1
   2a36a:	e7e9      	b.n	2a340 <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   2a36c:	2510      	movs	r5, #16
   2a36e:	e7bc      	b.n	2a2ea <ble_l2cap_sig_update_req_rx+0x16>

0002a370 <ble_l2cap_sig_update>:
{
   2a370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a374:	b085      	sub	sp, #20
   2a376:	4604      	mov	r4, r0
   2a378:	460e      	mov	r6, r1
   2a37a:	4691      	mov	r9, r2
   2a37c:	4698      	mov	r8, r3
    STATS_INC(ble_l2cap_stats, update_init);
   2a37e:	4b29      	ldr	r3, [pc, #164]	; (2a424 <ble_l2cap_sig_update+0xb4>)
   2a380:	6959      	ldr	r1, [r3, #20]
   2a382:	3101      	adds	r1, #1
   2a384:	6159      	str	r1, [r3, #20]
    ble_hs_lock();
   2a386:	f7fd facb 	bl	27920 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   2a38a:	ab02      	add	r3, sp, #8
   2a38c:	aa01      	add	r2, sp, #4
   2a38e:	2105      	movs	r1, #5
   2a390:	4620      	mov	r0, r4
   2a392:	f7ff fa03 	bl	2979c <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   2a396:	bb50      	cbnz	r0, 2a3ee <ble_l2cap_sig_update+0x7e>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   2a398:	9b01      	ldr	r3, [sp, #4]
   2a39a:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
    ble_hs_unlock();
   2a39e:	f7fd fac3 	bl	27928 <ble_hs_unlock>
    if (master) {
   2a3a2:	f015 0f01 	tst.w	r5, #1
   2a3a6:	d13a      	bne.n	2a41e <ble_l2cap_sig_update+0xae>
    proc = ble_l2cap_sig_proc_alloc();
   2a3a8:	f7ff fec6 	bl	2a138 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   2a3ac:	4607      	mov	r7, r0
   2a3ae:	b350      	cbz	r0, 2a406 <ble_l2cap_sig_update+0x96>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   2a3b0:	2300      	movs	r3, #0
   2a3b2:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   2a3b4:	f7ff fe3a 	bl	2a02c <ble_l2cap_sig_next_id>
   2a3b8:	4601      	mov	r1, r0
   2a3ba:	72f8      	strb	r0, [r7, #11]
    proc->conn_handle = conn_handle;
   2a3bc:	813c      	strh	r4, [r7, #8]
    proc->update.cb = cb;
   2a3be:	f8c7 900c 	str.w	r9, [r7, #12]
    proc->update.cb_arg = cb_arg;
   2a3c2:	f8c7 8010 	str.w	r8, [r7, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   2a3c6:	ab03      	add	r3, sp, #12
   2a3c8:	2208      	movs	r2, #8
   2a3ca:	2012      	movs	r0, #18
   2a3cc:	f000 f8ba 	bl	2a544 <ble_l2cap_sig_cmd_get>
    if (!req) {
   2a3d0:	b1f8      	cbz	r0, 2a412 <ble_l2cap_sig_update+0xa2>
    req->itvl_min = htole16(params->itvl_min);
   2a3d2:	8832      	ldrh	r2, [r6, #0]
   2a3d4:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   2a3d6:	8872      	ldrh	r2, [r6, #2]
   2a3d8:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   2a3da:	88b2      	ldrh	r2, [r6, #4]
   2a3dc:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   2a3de:	88f2      	ldrh	r2, [r6, #6]
   2a3e0:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   2a3e2:	9903      	ldr	r1, [sp, #12]
   2a3e4:	4620      	mov	r0, r4
   2a3e6:	f000 f889 	bl	2a4fc <ble_l2cap_sig_tx>
   2a3ea:	4605      	mov	r5, r0
   2a3ec:	e003      	b.n	2a3f6 <ble_l2cap_sig_update+0x86>
   2a3ee:	4605      	mov	r5, r0
        ble_hs_unlock();
   2a3f0:	f7fd fa9a 	bl	27928 <ble_hs_unlock>
    proc = NULL;
   2a3f4:	2700      	movs	r7, #0
    ble_l2cap_sig_process_status(proc, rc);
   2a3f6:	4629      	mov	r1, r5
   2a3f8:	4638      	mov	r0, r7
   2a3fa:	f7ff feed 	bl	2a1d8 <ble_l2cap_sig_process_status>
}
   2a3fe:	4628      	mov	r0, r5
   2a400:	b005      	add	sp, #20
   2a402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        STATS_INC(ble_l2cap_stats, update_fail);
   2a406:	4a07      	ldr	r2, [pc, #28]	; (2a424 <ble_l2cap_sig_update+0xb4>)
   2a408:	69d3      	ldr	r3, [r2, #28]
   2a40a:	3301      	adds	r3, #1
   2a40c:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   2a40e:	2506      	movs	r5, #6
        goto done;
   2a410:	e7f1      	b.n	2a3f6 <ble_l2cap_sig_update+0x86>
        STATS_INC(ble_l2cap_stats, update_fail);
   2a412:	4a04      	ldr	r2, [pc, #16]	; (2a424 <ble_l2cap_sig_update+0xb4>)
   2a414:	69d3      	ldr	r3, [r2, #28]
   2a416:	3301      	adds	r3, #1
   2a418:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   2a41a:	2506      	movs	r5, #6
        goto done;
   2a41c:	e7eb      	b.n	2a3f6 <ble_l2cap_sig_update+0x86>
        rc = BLE_HS_EINVAL;
   2a41e:	2503      	movs	r5, #3
    proc = NULL;
   2a420:	2700      	movs	r7, #0
   2a422:	e7e8      	b.n	2a3f6 <ble_l2cap_sig_update+0x86>
   2a424:	100033c4 	.word	0x100033c4

0002a428 <ble_l2cap_sig_create_chan>:
{
   2a428:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   2a42a:	f7ff fcb5 	bl	29d98 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   2a42e:	4603      	mov	r3, r0
   2a430:	b130      	cbz	r0, 2a440 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   2a432:	2205      	movs	r2, #5
   2a434:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   2a436:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   2a438:	2264      	movs	r2, #100	; 0x64
   2a43a:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   2a43c:	4a01      	ldr	r2, [pc, #4]	; (2a444 <ble_l2cap_sig_create_chan+0x1c>)
   2a43e:	6182      	str	r2, [r0, #24]
}
   2a440:	4618      	mov	r0, r3
   2a442:	bd08      	pop	{r3, pc}
   2a444:	0002a251 	.word	0x0002a251

0002a448 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   2a448:	b538      	push	{r3, r4, r5, lr}
   2a44a:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   2a44c:	e00b      	b.n	2a466 <ble_l2cap_sig_conn_broken+0x1e>
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, reason);
   2a44e:	4629      	mov	r1, r5
   2a450:	4620      	mov	r0, r4
   2a452:	f7ff fe1b 	bl	2a08c <ble_l2cap_sig_update_call_cb>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2a456:	4a09      	ldr	r2, [pc, #36]	; (2a47c <ble_l2cap_sig_conn_broken+0x34>)
   2a458:	6813      	ldr	r3, [r2, #0]
   2a45a:	681b      	ldr	r3, [r3, #0]
   2a45c:	6013      	str	r3, [r2, #0]
   2a45e:	b14b      	cbz	r3, 2a474 <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   2a460:	4620      	mov	r0, r4
   2a462:	f7ff feaf 	bl	2a1c4 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   2a466:	4b05      	ldr	r3, [pc, #20]	; (2a47c <ble_l2cap_sig_conn_broken+0x34>)
   2a468:	681c      	ldr	r4, [r3, #0]
   2a46a:	b12c      	cbz	r4, 2a478 <ble_l2cap_sig_conn_broken+0x30>
        switch(proc->op) {
   2a46c:	7aa3      	ldrb	r3, [r4, #10]
   2a46e:	2b00      	cmp	r3, #0
   2a470:	d1f1      	bne.n	2a456 <ble_l2cap_sig_conn_broken+0xe>
   2a472:	e7ec      	b.n	2a44e <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2a474:	6052      	str	r2, [r2, #4]
   2a476:	e7f3      	b.n	2a460 <ble_l2cap_sig_conn_broken+0x18>
    }

}
   2a478:	bd38      	pop	{r3, r4, r5, pc}
   2a47a:	bf00      	nop
   2a47c:	1000342c 	.word	0x1000342c

0002a480 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   2a480:	b530      	push	{r4, r5, lr}
   2a482:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   2a484:	4668      	mov	r0, sp
   2a486:	f7ff fe71 	bl	2a16c <ble_l2cap_sig_extract_expired>
   2a48a:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2a48c:	e00a      	b.n	2a4a4 <ble_l2cap_sig_timer+0x24>
        STATS_INC(ble_l2cap_stats, proc_timeout);
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   2a48e:	210d      	movs	r1, #13
   2a490:	4620      	mov	r0, r4
   2a492:	f7ff fdfb 	bl	2a08c <ble_l2cap_sig_update_call_cb>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   2a496:	9b00      	ldr	r3, [sp, #0]
   2a498:	681b      	ldr	r3, [r3, #0]
   2a49a:	9300      	str	r3, [sp, #0]
   2a49c:	b163      	cbz	r3, 2a4b8 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   2a49e:	4620      	mov	r0, r4
   2a4a0:	f7ff fe90 	bl	2a1c4 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   2a4a4:	9c00      	ldr	r4, [sp, #0]
   2a4a6:	b154      	cbz	r4, 2a4be <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   2a4a8:	4a06      	ldr	r2, [pc, #24]	; (2a4c4 <ble_l2cap_sig_timer+0x44>)
   2a4aa:	6a13      	ldr	r3, [r2, #32]
   2a4ac:	3301      	adds	r3, #1
   2a4ae:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   2a4b0:	7aa3      	ldrb	r3, [r4, #10]
   2a4b2:	2b00      	cmp	r3, #0
   2a4b4:	d1ef      	bne.n	2a496 <ble_l2cap_sig_timer+0x16>
   2a4b6:	e7ea      	b.n	2a48e <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   2a4b8:	f8cd d004 	str.w	sp, [sp, #4]
   2a4bc:	e7ef      	b.n	2a49e <ble_l2cap_sig_timer+0x1e>
    }

    return ticks_until_exp;
}
   2a4be:	4628      	mov	r0, r5
   2a4c0:	b003      	add	sp, #12
   2a4c2:	bd30      	pop	{r4, r5, pc}
   2a4c4:	100033c4 	.word	0x100033c4

0002a4c8 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   2a4c8:	b500      	push	{lr}
   2a4ca:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   2a4cc:	4b07      	ldr	r3, [pc, #28]	; (2a4ec <ble_l2cap_sig_init+0x24>)
   2a4ce:	2200      	movs	r2, #0
   2a4d0:	601a      	str	r2, [r3, #0]
   2a4d2:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   2a4d4:	4b06      	ldr	r3, [pc, #24]	; (2a4f0 <ble_l2cap_sig_init+0x28>)
   2a4d6:	9300      	str	r3, [sp, #0]
   2a4d8:	4b06      	ldr	r3, [pc, #24]	; (2a4f4 <ble_l2cap_sig_init+0x2c>)
   2a4da:	2214      	movs	r2, #20
   2a4dc:	2101      	movs	r1, #1
   2a4de:	4806      	ldr	r0, [pc, #24]	; (2a4f8 <ble_l2cap_sig_init+0x30>)
   2a4e0:	f7eb fc68 	bl	15db4 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a4e4:	b003      	add	sp, #12
   2a4e6:	f85d fb04 	ldr.w	pc, [sp], #4
   2a4ea:	bf00      	nop
   2a4ec:	1000342c 	.word	0x1000342c
   2a4f0:	00034e54 	.word	0x00034e54
   2a4f4:	100033fc 	.word	0x100033fc
   2a4f8:	10003410 	.word	0x10003410

0002a4fc <ble_l2cap_sig_tx>:

#if NIMBLE_BLE_CONNECT
/* this function consumes tx os_mbuf */
int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   2a4fc:	b530      	push	{r4, r5, lr}
   2a4fe:	b083      	sub	sp, #12
   2a500:	4605      	mov	r5, r0
   2a502:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   2a504:	f7fd fa0c 	bl	27920 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   2a508:	ab01      	add	r3, sp, #4
   2a50a:	466a      	mov	r2, sp
   2a50c:	2105      	movs	r1, #5
   2a50e:	4628      	mov	r0, r5
   2a510:	f7ff f944 	bl	2979c <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   2a514:	b950      	cbnz	r0, 2a52c <ble_l2cap_sig_tx+0x30>
        rc = ble_l2cap_tx(conn, chan, txom);
   2a516:	4622      	mov	r2, r4
   2a518:	9901      	ldr	r1, [sp, #4]
   2a51a:	9800      	ldr	r0, [sp, #0]
   2a51c:	f7ff fd36 	bl	29f8c <ble_l2cap_tx>
   2a520:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }
    ble_hs_unlock();
   2a522:	f7fd fa01 	bl	27928 <ble_hs_unlock>

    return rc;
}
   2a526:	4628      	mov	r0, r5
   2a528:	b003      	add	sp, #12
   2a52a:	bd30      	pop	{r4, r5, pc}
   2a52c:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   2a52e:	4620      	mov	r0, r4
   2a530:	f7eb f89a 	bl	15668 <os_mbuf_free_chain>
   2a534:	e7f5      	b.n	2a522 <ble_l2cap_sig_tx+0x26>

0002a536 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   2a536:	7803      	ldrb	r3, [r0, #0]
   2a538:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   2a53a:	7843      	ldrb	r3, [r0, #1]
   2a53c:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   2a53e:	8843      	ldrh	r3, [r0, #2]
   2a540:	8053      	strh	r3, [r2, #2]
}
   2a542:	4770      	bx	lr

0002a544 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   2a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a548:	4680      	mov	r8, r0
   2a54a:	460f      	mov	r7, r1
   2a54c:	4616      	mov	r6, r2
   2a54e:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   2a550:	f7ff f8c2 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
   2a554:	4604      	mov	r4, r0
   2a556:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   2a558:	b160      	cbz	r0, 2a574 <ble_l2cap_sig_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   2a55a:	1d31      	adds	r1, r6, #4
   2a55c:	b289      	uxth	r1, r1
   2a55e:	f7eb fab0 	bl	15ac2 <os_mbuf_extend>
   2a562:	4604      	mov	r4, r0
   2a564:	b148      	cbz	r0, 2a57a <ble_l2cap_sig_cmd_get+0x36>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   2a566:	682b      	ldr	r3, [r5, #0]
   2a568:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   2a56a:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   2a56e:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   2a570:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   2a572:	3404      	adds	r4, #4
}
   2a574:	4620      	mov	r0, r4
   2a576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   2a57a:	6828      	ldr	r0, [r5, #0]
   2a57c:	f7eb f874 	bl	15668 <os_mbuf_free_chain>
        return NULL;
   2a580:	e7f8      	b.n	2a574 <ble_l2cap_sig_cmd_get+0x30>
	...

0002a584 <ble_l2cap_sig_reject_tx>:
{
   2a584:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a586:	b083      	sub	sp, #12
   2a588:	4604      	mov	r4, r0
   2a58a:	4616      	mov	r6, r2
   2a58c:	461d      	mov	r5, r3
   2a58e:	9f08      	ldr	r7, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   2a590:	1cba      	adds	r2, r7, #2
   2a592:	ab01      	add	r3, sp, #4
   2a594:	b292      	uxth	r2, r2
   2a596:	2001      	movs	r0, #1
   2a598:	f7ff ffd4 	bl	2a544 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   2a59c:	b178      	cbz	r0, 2a5be <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   2a59e:	f820 6b02 	strh.w	r6, [r0], #2
    memcpy(cmd->data, data, data_len);
   2a5a2:	463a      	mov	r2, r7
   2a5a4:	4629      	mov	r1, r5
   2a5a6:	f7ec fa81 	bl	16aac <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   2a5aa:	4a06      	ldr	r2, [pc, #24]	; (2a5c4 <ble_l2cap_sig_reject_tx+0x40>)
   2a5ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2a5ae:	3301      	adds	r3, #1
   2a5b0:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   2a5b2:	9901      	ldr	r1, [sp, #4]
   2a5b4:	4620      	mov	r0, r4
   2a5b6:	f7ff ffa1 	bl	2a4fc <ble_l2cap_sig_tx>
}
   2a5ba:	b003      	add	sp, #12
   2a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   2a5be:	2006      	movs	r0, #6
   2a5c0:	e7fb      	b.n	2a5ba <ble_l2cap_sig_reject_tx+0x36>
   2a5c2:	bf00      	nop
   2a5c4:	100033c4 	.word	0x100033c4

0002a5c8 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   2a5c8:	b500      	push	{lr}
   2a5ca:	b085      	sub	sp, #20
    } data = {
   2a5cc:	f8ad 300c 	strh.w	r3, [sp, #12]
   2a5d0:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   2a5d4:	2304      	movs	r3, #4
   2a5d6:	9300      	str	r3, [sp, #0]
   2a5d8:	ab03      	add	r3, sp, #12
   2a5da:	2202      	movs	r2, #2
   2a5dc:	f7ff ffd2 	bl	2a584 <ble_l2cap_sig_reject_tx>
}
   2a5e0:	b005      	add	sp, #20
   2a5e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002a5e8 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   2a5e8:	280e      	cmp	r0, #14
   2a5ea:	d803      	bhi.n	2a5f4 <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   2a5ec:	4b02      	ldr	r3, [pc, #8]	; (2a5f8 <ble_sm_dispatch_get+0x10>)
   2a5ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2a5f2:	4770      	bx	lr
        return NULL;
   2a5f4:	2000      	movs	r0, #0
}
   2a5f6:	4770      	bx	lr
   2a5f8:	00034f14 	.word	0x00034f14

0002a5fc <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   2a5fc:	b121      	cbz	r1, 2a608 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2a5fe:	680a      	ldr	r2, [r1, #0]
   2a600:	6812      	ldr	r2, [r2, #0]
   2a602:	600a      	str	r2, [r1, #0]
   2a604:	b142      	cbz	r2, 2a618 <ble_sm_proc_remove+0x1c>
    }

    ble_sm_dbg_assert_no_cycles();
}
   2a606:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   2a608:	4a05      	ldr	r2, [pc, #20]	; (2a620 <ble_sm_proc_remove+0x24>)
   2a60a:	6813      	ldr	r3, [r2, #0]
   2a60c:	681b      	ldr	r3, [r3, #0]
   2a60e:	6013      	str	r3, [r2, #0]
   2a610:	2b00      	cmp	r3, #0
   2a612:	d1f8      	bne.n	2a606 <ble_sm_proc_remove+0xa>
   2a614:	6052      	str	r2, [r2, #4]
   2a616:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2a618:	4a01      	ldr	r2, [pc, #4]	; (2a620 <ble_sm_proc_remove+0x24>)
   2a61a:	6051      	str	r1, [r2, #4]
}
   2a61c:	e7f3      	b.n	2a606 <ble_sm_proc_remove+0xa>
   2a61e:	bf00      	nop
   2a620:	10003550 	.word	0x10003550

0002a624 <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   2a624:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   2a626:	8944      	ldrh	r4, [r0, #10]
   2a628:	428c      	cmp	r4, r1
   2a62a:	d10e      	bne.n	2a64a <ble_sm_proc_matches+0x26>
        return 0;
    }

    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   2a62c:	2aff      	cmp	r2, #255	; 0xff
   2a62e:	d002      	beq.n	2a636 <ble_sm_proc_matches+0x12>
   2a630:	7b41      	ldrb	r1, [r0, #13]
   2a632:	4291      	cmp	r1, r2
   2a634:	d10c      	bne.n	2a650 <ble_sm_proc_matches+0x2c>
        return 0;
    }

    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   2a636:	7a02      	ldrb	r2, [r0, #8]
   2a638:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   2a63c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a640:	d008      	beq.n	2a654 <ble_sm_proc_matches+0x30>
   2a642:	429a      	cmp	r2, r3
   2a644:	d108      	bne.n	2a658 <ble_sm_proc_matches+0x34>
        return 0;
    }

    return 1;
   2a646:	2001      	movs	r0, #1
   2a648:	e000      	b.n	2a64c <ble_sm_proc_matches+0x28>
        return 0;
   2a64a:	2000      	movs	r0, #0
}
   2a64c:	bc10      	pop	{r4}
   2a64e:	4770      	bx	lr
        return 0;
   2a650:	2000      	movs	r0, #0
   2a652:	e7fb      	b.n	2a64c <ble_sm_proc_matches+0x28>
    return 1;
   2a654:	2001      	movs	r0, #1
   2a656:	e7f9      	b.n	2a64c <ble_sm_proc_matches+0x28>
        return 0;
   2a658:	2000      	movs	r0, #0
   2a65a:	e7f7      	b.n	2a64c <ble_sm_proc_matches+0x28>

0002a65c <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   2a65c:	4b04      	ldr	r3, [pc, #16]	; (2a670 <ble_sm_insert+0x14>)
   2a65e:	681b      	ldr	r3, [r3, #0]
   2a660:	6003      	str	r3, [r0, #0]
   2a662:	b113      	cbz	r3, 2a66a <ble_sm_insert+0xe>
   2a664:	4b02      	ldr	r3, [pc, #8]	; (2a670 <ble_sm_insert+0x14>)
   2a666:	6018      	str	r0, [r3, #0]
}
   2a668:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   2a66a:	4b01      	ldr	r3, [pc, #4]	; (2a670 <ble_sm_insert+0x14>)
   2a66c:	6058      	str	r0, [r3, #4]
   2a66e:	e7f9      	b.n	2a664 <ble_sm_insert+0x8>
   2a670:	10003550 	.word	0x10003550

0002a674 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   2a674:	f240 4307 	movw	r3, #1031	; 0x407
   2a678:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   2a67a:	2307      	movs	r3, #7
   2a67c:	7113      	strb	r3, [r2, #4]
}
   2a67e:	4770      	bx	lr

0002a680 <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   2a680:	4b08      	ldr	r3, [pc, #32]	; (2a6a4 <ble_sm_build_authreq+0x24>)
   2a682:	7a5b      	ldrb	r3, [r3, #9]
   2a684:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   2a688:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   2a68c:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   2a690:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   2a694:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   2a698:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   2a69c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   2a6a0:	4770      	bx	lr
   2a6a2:	bf00      	nop
   2a6a4:	100002d8 	.word	0x100002d8

0002a6a8 <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   2a6a8:	7f03      	ldrb	r3, [r0, #28]
   2a6aa:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   2a6ac:	7f43      	ldrb	r3, [r0, #29]
   2a6ae:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2a6b0:	7a03      	ldrb	r3, [r0, #8]
   2a6b2:	f013 0f10 	tst.w	r3, #16
   2a6b6:	d007      	beq.n	2a6c8 <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   2a6b8:	780b      	ldrb	r3, [r1, #0]
   2a6ba:	f023 0301 	bic.w	r3, r3, #1
   2a6be:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   2a6c0:	7813      	ldrb	r3, [r2, #0]
   2a6c2:	f023 0301 	bic.w	r3, r3, #1
   2a6c6:	7013      	strb	r3, [r2, #0]
    }
}
   2a6c8:	4770      	bx	lr

0002a6ca <ble_sm_chk_store_overflow_by_type>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a6ca:	2000      	movs	r0, #0
   2a6cc:	4770      	bx	lr

0002a6ce <ble_sm_chk_store_overflow>:

static int
ble_sm_chk_store_overflow(uint16_t conn_handle)
{
   2a6ce:	b510      	push	{r4, lr}
   2a6d0:	4604      	mov	r4, r0
    int rc;

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   2a6d2:	4601      	mov	r1, r0
   2a6d4:	2002      	movs	r0, #2
   2a6d6:	f7ff fff8 	bl	2a6ca <ble_sm_chk_store_overflow_by_type>
                                           conn_handle);
    if (rc != 0) {
   2a6da:	b918      	cbnz	r0, 2a6e4 <ble_sm_chk_store_overflow+0x16>
        return rc;
    }

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   2a6dc:	4621      	mov	r1, r4
   2a6de:	2001      	movs	r0, #1
   2a6e0:	f7ff fff3 	bl	2a6ca <ble_sm_chk_store_overflow_by_type>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a6e4:	bd10      	pop	{r4, pc}

0002a6e6 <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2a6e6:	7a03      	ldrb	r3, [r0, #8]
   2a6e8:	f013 0f10 	tst.w	r3, #16
   2a6ec:	d101      	bne.n	2a6f2 <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   2a6ee:	2001      	movs	r0, #1
    }
}
   2a6f0:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   2a6f2:	2009      	movs	r0, #9
   2a6f4:	4770      	bx	lr
	...

0002a6f8 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   2a6f8:	b510      	push	{r4, lr}
   2a6fa:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   2a6fc:	4b06      	ldr	r3, [pc, #24]	; (2a718 <ble_sm_pair_base_fill+0x20>)
   2a6fe:	7a1a      	ldrb	r2, [r3, #8]
   2a700:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   2a702:	7a5b      	ldrb	r3, [r3, #9]
   2a704:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2a708:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   2a70a:	f7ff ffb9 	bl	2a680 <ble_sm_build_authreq>
   2a70e:	70a0      	strb	r0, [r4, #2]
    cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
   2a710:	2310      	movs	r3, #16
   2a712:	70e3      	strb	r3, [r4, #3]
}
   2a714:	bd10      	pop	{r4, pc}
   2a716:	bf00      	nop
   2a718:	100002d8 	.word	0x100002d8

0002a71c <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   2a71c:	b510      	push	{r4, lr}
   2a71e:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   2a720:	2301      	movs	r3, #1
   2a722:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   2a724:	3011      	adds	r0, #17
   2a726:	f7ff ffe7 	bl	2a6f8 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   2a72a:	4b03      	ldr	r3, [pc, #12]	; (2a738 <ble_sm_pair_req_fill+0x1c>)
   2a72c:	7a9a      	ldrb	r2, [r3, #10]
   2a72e:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   2a730:	7adb      	ldrb	r3, [r3, #11]
   2a732:	75a3      	strb	r3, [r4, #22]
}
   2a734:	bd10      	pop	{r4, pc}
   2a736:	bf00      	nop
   2a738:	100002d8 	.word	0x100002d8

0002a73c <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   2a73c:	b510      	push	{r4, lr}
   2a73e:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   2a740:	2302      	movs	r3, #2
   2a742:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   2a744:	3018      	adds	r0, #24
   2a746:	f7ff ffd7 	bl	2a6f8 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   2a74a:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   2a74c:	4a04      	ldr	r2, [pc, #16]	; (2a760 <ble_sm_pair_rsp_fill+0x24>)
   2a74e:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   2a750:	400b      	ands	r3, r1
   2a752:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   2a754:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   2a756:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   2a758:	4013      	ands	r3, r2
   2a75a:	7763      	strb	r3, [r4, #29]
}
   2a75c:	bd10      	pop	{r4, pc}
   2a75e:	bf00      	nop
   2a760:	100002d8 	.word	0x100002d8

0002a764 <ble_sm_verify_auth_requirements>:
     */
    if (MYNEWT_VAL(BLE_SM_SC_LVL) >= 3 && !(cmd & BLE_SM_PAIR_AUTHREQ_MITM)) {
        return false;
    }
    return true;
}
   2a764:	2001      	movs	r0, #1
   2a766:	4770      	bx	lr

0002a768 <ble_sm_gen_ediv>:
{
   2a768:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   2a76a:	2102      	movs	r1, #2
   2a76c:	f7fe fe4a 	bl	29404 <ble_hs_hci_util_rand>
}
   2a770:	bd08      	pop	{r3, pc}

0002a772 <ble_sm_gen_master_id_rand>:
{
   2a772:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   2a774:	2108      	movs	r1, #8
   2a776:	3002      	adds	r0, #2
   2a778:	f7fe fe44 	bl	29404 <ble_hs_hci_util_rand>
}
   2a77c:	bd08      	pop	{r3, pc}

0002a77e <ble_sm_gen_csrk>:
{
   2a77e:	b508      	push	{r3, lr}
   2a780:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   2a782:	2110      	movs	r1, #16
   2a784:	f7fe fe3e 	bl	29404 <ble_hs_hci_util_rand>
}
   2a788:	bd08      	pop	{r3, pc}

0002a78a <ble_sm_io_action>:
{
   2a78a:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2a78c:	7a03      	ldrb	r3, [r0, #8]
   2a78e:	f013 0f10 	tst.w	r3, #16
   2a792:	d001      	beq.n	2a798 <ble_sm_io_action+0xe>
        return ble_sm_sc_io_action(proc, action);
   2a794:	2008      	movs	r0, #8
}
   2a796:	bd08      	pop	{r3, pc}
        return ble_sm_lgcy_io_action(proc, action);
   2a798:	f001 fc28 	bl	2bfec <ble_sm_lgcy_io_action>
   2a79c:	e7fb      	b.n	2a796 <ble_sm_io_action+0xc>

0002a79e <ble_sm_pair_cfg>:
{
   2a79e:	b510      	push	{r4, lr}
   2a7a0:	b082      	sub	sp, #8
   2a7a2:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   2a7a4:	7cc3      	ldrb	r3, [r0, #19]
   2a7a6:	f013 0f08 	tst.w	r3, #8
   2a7aa:	d007      	beq.n	2a7bc <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   2a7ac:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   2a7ae:	f013 0f08 	tst.w	r3, #8
   2a7b2:	d003      	beq.n	2a7bc <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   2a7b4:	7a03      	ldrb	r3, [r0, #8]
   2a7b6:	f043 0310 	orr.w	r3, r3, #16
   2a7ba:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   2a7bc:	f10d 0206 	add.w	r2, sp, #6
   2a7c0:	f10d 0107 	add.w	r1, sp, #7
   2a7c4:	4620      	mov	r0, r4
   2a7c6:	f7ff ff6f 	bl	2a6a8 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2a7ca:	7a22      	ldrb	r2, [r4, #8]
   2a7cc:	f012 0f01 	tst.w	r2, #1
   2a7d0:	d03b      	beq.n	2a84a <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   2a7d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   2a7d6:	7ce1      	ldrb	r1, [r4, #19]
   2a7d8:	f011 0f01 	tst.w	r1, #1
   2a7dc:	d006      	beq.n	2a7ec <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   2a7de:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   2a7e0:	f011 0f01 	tst.w	r1, #1
   2a7e4:	d002      	beq.n	2a7ec <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   2a7e6:	f042 0220 	orr.w	r2, r2, #32
   2a7ea:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   2a7ec:	7a22      	ldrb	r2, [r4, #8]
   2a7ee:	f012 0f10 	tst.w	r2, #16
   2a7f2:	d108      	bne.n	2a806 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   2a7f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   2a7f8:	b929      	cbnz	r1, 2a806 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   2a7fa:	f89d 1006 	ldrb.w	r1, [sp, #6]
   2a7fe:	b911      	cbnz	r1, 2a806 <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   2a800:	f022 0220 	bic.w	r2, r2, #32
   2a804:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   2a806:	2200      	movs	r2, #0
   2a808:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   2a80a:	f013 0f01 	tst.w	r3, #1
   2a80e:	d001      	beq.n	2a814 <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   2a810:	2203      	movs	r2, #3
   2a812:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   2a814:	f013 0f02 	tst.w	r3, #2
   2a818:	d003      	beq.n	2a822 <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   2a81a:	7ba2      	ldrb	r2, [r4, #14]
   2a81c:	f042 020c 	orr.w	r2, r2, #12
   2a820:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   2a822:	f013 0f04 	tst.w	r3, #4
   2a826:	d003      	beq.n	2a830 <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   2a828:	7ba3      	ldrb	r3, [r4, #14]
   2a82a:	f043 0310 	orr.w	r3, r3, #16
   2a82e:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   2a830:	7ee3      	ldrb	r3, [r4, #27]
   2a832:	7d22      	ldrb	r2, [r4, #20]
   2a834:	4293      	cmp	r3, r2
   2a836:	bf28      	it	cs
   2a838:	4613      	movcs	r3, r2
   2a83a:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   2a83c:	f10d 0105 	add.w	r1, sp, #5
   2a840:	4620      	mov	r0, r4
   2a842:	f7ff ffa2 	bl	2a78a <ble_sm_io_action>
}
   2a846:	b002      	add	sp, #8
   2a848:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   2a84a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a84e:	e7c2      	b.n	2a7d6 <ble_sm_pair_cfg+0x38>

0002a850 <ble_sm_gen_ltk>:
{
   2a850:	b570      	push	{r4, r5, r6, lr}
   2a852:	4605      	mov	r5, r0
   2a854:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   2a856:	7bc1      	ldrb	r1, [r0, #15]
   2a858:	4620      	mov	r0, r4
   2a85a:	f7fe fdd3 	bl	29404 <ble_hs_hci_util_rand>
    if (rc != 0) {
   2a85e:	4606      	mov	r6, r0
   2a860:	b108      	cbz	r0, 2a866 <ble_sm_gen_ltk+0x16>
}
   2a862:	4630      	mov	r0, r6
   2a864:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   2a866:	7be8      	ldrb	r0, [r5, #15]
   2a868:	f1c0 0210 	rsb	r2, r0, #16
   2a86c:	2100      	movs	r1, #0
   2a86e:	4420      	add	r0, r4
   2a870:	f7ec f941 	bl	16af6 <memset>
    return 0;
   2a874:	e7f5      	b.n	2a862 <ble_sm_gen_ltk+0x12>
	...

0002a878 <ble_sm_exec>:
{
   2a878:	b570      	push	{r4, r5, r6, lr}
   2a87a:	4606      	mov	r6, r0
   2a87c:	460c      	mov	r4, r1
   2a87e:	4615      	mov	r5, r2
    memset(res, 0, sizeof *res);
   2a880:	2300      	movs	r3, #0
   2a882:	600b      	str	r3, [r1, #0]
   2a884:	604b      	str	r3, [r1, #4]
   2a886:	608b      	str	r3, [r1, #8]
   2a888:	60cb      	str	r3, [r1, #12]
   2a88a:	610b      	str	r3, [r1, #16]
   2a88c:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   2a88e:	8940      	ldrh	r0, [r0, #10]
   2a890:	f7fd fecc 	bl	2862c <ble_hs_conn_exists>
   2a894:	b910      	cbnz	r0, 2a89c <ble_sm_exec+0x24>
        res->app_status = BLE_HS_ENOTCONN;
   2a896:	2307      	movs	r3, #7
   2a898:	6023      	str	r3, [r4, #0]
}
   2a89a:	bd70      	pop	{r4, r5, r6, pc}
        cb = ble_sm_state_dispatch[proc->state];
   2a89c:	7b72      	ldrb	r2, [r6, #13]
   2a89e:	4b04      	ldr	r3, [pc, #16]	; (2a8b0 <ble_sm_exec+0x38>)
   2a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   2a8a4:	462a      	mov	r2, r5
   2a8a6:	4621      	mov	r1, r4
   2a8a8:	4630      	mov	r0, r6
   2a8aa:	4798      	blx	r3
}
   2a8ac:	e7f5      	b.n	2a89a <ble_sm_exec+0x22>
   2a8ae:	bf00      	nop
   2a8b0:	00034f50 	.word	0x00034f50

0002a8b4 <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   2a8b4:	b570      	push	{r4, r5, r6, lr}
   2a8b6:	b082      	sub	sp, #8
   2a8b8:	4604      	mov	r4, r0
   2a8ba:	460d      	mov	r5, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   2a8bc:	aa01      	add	r2, sp, #4
   2a8be:	2101      	movs	r1, #1
   2a8c0:	200b      	movs	r0, #11
   2a8c2:	f001 fb3b 	bl	2bf3c <ble_sm_cmd_get>
    if (!cmd) {
   2a8c6:	b150      	cbz	r0, 2a8de <ble_sm_sec_req_exec+0x2a>
   2a8c8:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   2a8ca:	f7ff fed9 	bl	2a680 <ble_sm_build_authreq>
   2a8ce:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   2a8d0:	9901      	ldr	r1, [sp, #4]
   2a8d2:	8960      	ldrh	r0, [r4, #10]
   2a8d4:	f001 fb4c 	bl	2bf70 <ble_sm_tx>
    if (rc != 0) {
   2a8d8:	b920      	cbnz	r0, 2a8e4 <ble_sm_sec_req_exec+0x30>
        res->app_status = rc;
        return;
    }
}
   2a8da:	b002      	add	sp, #8
   2a8dc:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOMEM;
   2a8de:	2306      	movs	r3, #6
   2a8e0:	602b      	str	r3, [r5, #0]
        return;
   2a8e2:	e7fa      	b.n	2a8da <ble_sm_sec_req_exec+0x26>
        res->app_status = rc;
   2a8e4:	6028      	str	r0, [r5, #0]
        return;
   2a8e6:	e7f8      	b.n	2a8da <ble_sm_sec_req_exec+0x26>

0002a8e8 <ble_sm_fill_store_value>:
{
   2a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8ec:	4606      	mov	r6, r0
   2a8ee:	4688      	mov	r8, r1
   2a8f0:	4617      	mov	r7, r2
   2a8f2:	461d      	mov	r5, r3
   2a8f4:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   2a8f6:	2250      	movs	r2, #80	; 0x50
   2a8f8:	2100      	movs	r1, #0
   2a8fa:	4620      	mov	r0, r4
   2a8fc:	f7ec f8fb 	bl	16af6 <memset>
    value_sec->peer_addr = *peer_addr;
   2a900:	6830      	ldr	r0, [r6, #0]
   2a902:	6020      	str	r0, [r4, #0]
   2a904:	88b2      	ldrh	r2, [r6, #4]
   2a906:	79b3      	ldrb	r3, [r6, #6]
   2a908:	80a2      	strh	r2, [r4, #4]
   2a90a:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   2a90c:	782b      	ldrb	r3, [r5, #0]
   2a90e:	f003 0303 	and.w	r3, r3, #3
   2a912:	2b03      	cmp	r3, #3
   2a914:	d009      	beq.n	2a92a <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   2a916:	782b      	ldrb	r3, [r5, #0]
   2a918:	f013 0f04 	tst.w	r3, #4
   2a91c:	d12e      	bne.n	2a97c <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   2a91e:	782b      	ldrb	r3, [r5, #0]
   2a920:	f013 0f08 	tst.w	r3, #8
   2a924:	d13f      	bne.n	2a9a6 <ble_sm_fill_store_value+0xbe>
}
   2a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   2a92a:	7c6b      	ldrb	r3, [r5, #17]
   2a92c:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   2a92e:	886b      	ldrh	r3, [r5, #2]
   2a930:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   2a932:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   2a936:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   2a93a:	462b      	mov	r3, r5
   2a93c:	f853 0f12 	ldr.w	r0, [r3, #18]!
   2a940:	6859      	ldr	r1, [r3, #4]
   2a942:	689a      	ldr	r2, [r3, #8]
   2a944:	68db      	ldr	r3, [r3, #12]
   2a946:	61a0      	str	r0, [r4, #24]
   2a948:	61e1      	str	r1, [r4, #28]
   2a94a:	6222      	str	r2, [r4, #32]
   2a94c:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   2a94e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2a952:	f043 0301 	orr.w	r3, r3, #1
   2a956:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   2a95a:	f1b8 0800 	subs.w	r8, r8, #0
   2a95e:	bf18      	it	ne
   2a960:	f04f 0801 	movne.w	r8, #1
   2a964:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2a968:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   2a96c:	3f00      	subs	r7, #0
   2a96e:	bf18      	it	ne
   2a970:	2701      	movne	r7, #1
   2a972:	f367 0382 	bfi	r3, r7, #2, #1
   2a976:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   2a97a:	e7cc      	b.n	2a916 <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   2a97c:	462b      	mov	r3, r5
   2a97e:	f853 0f22 	ldr.w	r0, [r3, #34]!
   2a982:	6859      	ldr	r1, [r3, #4]
   2a984:	689a      	ldr	r2, [r3, #8]
   2a986:	68db      	ldr	r3, [r3, #12]
   2a988:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
   2a98c:	f8c4 102d 	str.w	r1, [r4, #45]	; 0x2d
   2a990:	f8c4 2031 	str.w	r2, [r4, #49]	; 0x31
   2a994:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   2a998:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2a99c:	f043 0301 	orr.w	r3, r3, #1
   2a9a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   2a9a4:	e7bb      	b.n	2a91e <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   2a9a6:	f855 0f32 	ldr.w	r0, [r5, #50]!
   2a9aa:	6869      	ldr	r1, [r5, #4]
   2a9ac:	68aa      	ldr	r2, [r5, #8]
   2a9ae:	68eb      	ldr	r3, [r5, #12]
   2a9b0:	f8c4 003a 	str.w	r0, [r4, #58]	; 0x3a
   2a9b4:	f8c4 103e 	str.w	r1, [r4, #62]	; 0x3e
   2a9b8:	f8c4 2042 	str.w	r2, [r4, #66]	; 0x42
   2a9bc:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   2a9c0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2a9c4:	f043 0301 	orr.w	r3, r3, #1
   2a9c8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   2a9cc:	e7ab      	b.n	2a926 <ble_sm_fill_store_value+0x3e>

0002a9ce <ble_sm_update_sec_state>:
{
   2a9ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a9d0:	460f      	mov	r7, r1
   2a9d2:	4615      	mov	r5, r2
   2a9d4:	461e      	mov	r6, r3
    conn = ble_hs_conn_find(conn_handle);
   2a9d6:	f7fd fdff 	bl	285d8 <ble_hs_conn_find>
    if (conn != NULL) {
   2a9da:	b1e0      	cbz	r0, 2aa16 <ble_sm_update_sec_state+0x48>
   2a9dc:	4604      	mov	r4, r0
        conn->bhc_sec_state.encrypted = encrypted;
   2a9de:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   2a9e2:	f367 0200 	bfi	r2, r7, #0, #1
   2a9e6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   2a9ea:	b125      	cbz	r5, 2a9f6 <ble_sm_update_sec_state+0x28>
            conn->bhc_sec_state.authenticated = 1;
   2a9ec:	b2d3      	uxtb	r3, r2
   2a9ee:	f043 0302 	orr.w	r3, r3, #2
   2a9f2:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        if (bonded) {
   2a9f6:	b12e      	cbz	r6, 2aa04 <ble_sm_update_sec_state+0x36>
            conn->bhc_sec_state.bonded = 1;
   2a9f8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   2a9fc:	f043 0304 	orr.w	r3, r3, #4
   2aa00:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (key_size) {
   2aa04:	9b06      	ldr	r3, [sp, #24]
   2aa06:	b133      	cbz	r3, 2aa16 <ble_sm_update_sec_state+0x48>
            conn->bhc_sec_state.key_size = key_size;
   2aa08:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   2aa0c:	9a06      	ldr	r2, [sp, #24]
   2aa0e:	f362 03c7 	bfi	r3, r2, #3, #5
   2aa12:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
   2aa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002aa18 <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2aa18:	b530      	push	{r4, r5, lr}
   2aa1a:	b083      	sub	sp, #12
   2aa1c:	4604      	mov	r4, r0
   2aa1e:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   2aa20:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   2aa22:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   2aa24:	9300      	str	r3, [sp, #0]
   2aa26:	f3c2 1340 	ubfx	r3, r2, #5, #1
   2aa2a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   2aa2e:	2101      	movs	r1, #1
   2aa30:	8940      	ldrh	r0, [r0, #10]
   2aa32:	f7ff ffcc 	bl	2a9ce <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   2aa36:	23ff      	movs	r3, #255	; 0xff
   2aa38:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   2aa3a:	2300      	movs	r3, #0
   2aa3c:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   2aa3e:	7d2b      	ldrb	r3, [r5, #20]
   2aa40:	f043 0302 	orr.w	r3, r3, #2
   2aa44:	752b      	strb	r3, [r5, #20]
}
   2aa46:	b003      	add	sp, #12
   2aa48:	bd30      	pop	{r4, r5, pc}

0002aa4a <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   2aa4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa4e:	b08a      	sub	sp, #40	; 0x28
   2aa50:	4604      	mov	r4, r0
   2aa52:	460e      	mov	r6, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   2aa54:	f10d 020a 	add.w	r2, sp, #10
   2aa58:	f10d 010b 	add.w	r1, sp, #11
   2aa5c:	f7ff fe24 	bl	2a6a8 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2aa60:	7a23      	ldrb	r3, [r4, #8]
   2aa62:	f013 0f01 	tst.w	r3, #1
   2aa66:	d018      	beq.n	2aa9a <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   2aa68:	f89d 500b 	ldrb.w	r5, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   2aa6c:	f015 0f01 	tst.w	r5, #1
   2aa70:	d116      	bne.n	2aaa0 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   2aa72:	f015 0f02 	tst.w	r5, #2
   2aa76:	d17a      	bne.n	2ab6e <ble_sm_key_exch_exec+0x124>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   2aa78:	f015 0f04 	tst.w	r5, #4
   2aa7c:	f040 80e4 	bne.w	2ac48 <ble_sm_key_exch_exec+0x1fe>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   2aa80:	7a23      	ldrb	r3, [r4, #8]
   2aa82:	f013 0f01 	tst.w	r3, #1
   2aa86:	d103      	bne.n	2aa90 <ble_sm_key_exch_exec+0x46>
   2aa88:	7ba3      	ldrb	r3, [r4, #14]
   2aa8a:	2b00      	cmp	r3, #0
   2aa8c:	f040 8110 	bne.w	2acb0 <ble_sm_key_exch_exec+0x266>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   2aa90:	4631      	mov	r1, r6
   2aa92:	4620      	mov	r0, r4
   2aa94:	f7ff ffc0 	bl	2aa18 <ble_sm_key_exch_success>
   2aa98:	e10a      	b.n	2acb0 <ble_sm_key_exch_exec+0x266>
        our_key_dist = resp_key_dist;
   2aa9a:	f89d 500a 	ldrb.w	r5, [sp, #10]
   2aa9e:	e7e5      	b.n	2aa6c <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   2aaa0:	aa01      	add	r2, sp, #4
   2aaa2:	2110      	movs	r1, #16
   2aaa4:	2006      	movs	r0, #6
   2aaa6:	f001 fa49 	bl	2bf3c <ble_sm_cmd_get>
        if (!enc_info) {
   2aaaa:	4601      	mov	r1, r0
   2aaac:	2800      	cmp	r0, #0
   2aaae:	f000 80f7 	beq.w	2aca0 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   2aab2:	4680      	mov	r8, r0
   2aab4:	4620      	mov	r0, r4
   2aab6:	f7ff fecb 	bl	2a850 <ble_sm_gen_ltk>
        if (rc != 0) {
   2aaba:	4607      	mov	r7, r0
   2aabc:	2800      	cmp	r0, #0
   2aabe:	d14a      	bne.n	2ab56 <ble_sm_key_exch_exec+0x10c>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   2aac0:	f8d8 0000 	ldr.w	r0, [r8]
   2aac4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   2aac8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2aacc:	f8d8 300c 	ldr.w	r3, [r8, #12]
   2aad0:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
   2aad4:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
   2aad8:	f8c4 208a 	str.w	r2, [r4, #138]	; 0x8a
   2aadc:	f8c4 308e 	str.w	r3, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   2aae0:	7be3      	ldrb	r3, [r4, #15]
   2aae2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   2aae6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   2aaea:	f043 0301 	orr.w	r3, r3, #1
   2aaee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   2aaf2:	9901      	ldr	r1, [sp, #4]
   2aaf4:	8960      	ldrh	r0, [r4, #10]
   2aaf6:	f001 fa3b 	bl	2bf70 <ble_sm_tx>
        if (rc != 0) {
   2aafa:	4607      	mov	r7, r0
   2aafc:	2800      	cmp	r0, #0
   2aafe:	f040 80d0 	bne.w	2aca2 <ble_sm_key_exch_exec+0x258>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   2ab02:	aa01      	add	r2, sp, #4
   2ab04:	210a      	movs	r1, #10
   2ab06:	2007      	movs	r0, #7
   2ab08:	f001 fa18 	bl	2bf3c <ble_sm_cmd_get>
        if (!master_id) {
   2ab0c:	4680      	mov	r8, r0
   2ab0e:	2800      	cmp	r0, #0
   2ab10:	f000 80d1 	beq.w	2acb6 <ble_sm_key_exch_exec+0x26c>
        rc = ble_sm_gen_ediv(master_id);
   2ab14:	f7ff fe28 	bl	2a768 <ble_sm_gen_ediv>
        if (rc != 0) {
   2ab18:	4607      	mov	r7, r0
   2ab1a:	bb00      	cbnz	r0, 2ab5e <ble_sm_key_exch_exec+0x114>
        rc = ble_sm_gen_master_id_rand(master_id);
   2ab1c:	4640      	mov	r0, r8
   2ab1e:	f7ff fe28 	bl	2a772 <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   2ab22:	4607      	mov	r7, r0
   2ab24:	b9f8      	cbnz	r0, 2ab66 <ble_sm_key_exch_exec+0x11c>
        proc->our_keys.ediv_rand_valid = 1;
   2ab26:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   2ab2a:	f043 0302 	orr.w	r3, r3, #2
   2ab2e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   2ab32:	f8d8 2002 	ldr.w	r2, [r8, #2]
   2ab36:	f8d8 3006 	ldr.w	r3, [r8, #6]
   2ab3a:	67a2      	str	r2, [r4, #120]	; 0x78
   2ab3c:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   2ab3e:	f8b8 3000 	ldrh.w	r3, [r8]
   2ab42:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   2ab46:	9901      	ldr	r1, [sp, #4]
   2ab48:	8960      	ldrh	r0, [r4, #10]
   2ab4a:	f001 fa11 	bl	2bf70 <ble_sm_tx>
        if (rc != 0) {
   2ab4e:	4607      	mov	r7, r0
   2ab50:	2800      	cmp	r0, #0
   2ab52:	d08e      	beq.n	2aa72 <ble_sm_key_exch_exec+0x28>
   2ab54:	e0a5      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   2ab56:	9801      	ldr	r0, [sp, #4]
   2ab58:	f7ea fd86 	bl	15668 <os_mbuf_free_chain>
            goto err;
   2ab5c:	e0a1      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   2ab5e:	9801      	ldr	r0, [sp, #4]
   2ab60:	f7ea fd82 	bl	15668 <os_mbuf_free_chain>
            goto err;
   2ab64:	e09d      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   2ab66:	9801      	ldr	r0, [sp, #4]
   2ab68:	f7ea fd7e 	bl	15668 <os_mbuf_free_chain>
            goto err;
   2ab6c:	e099      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   2ab6e:	aa01      	add	r2, sp, #4
   2ab70:	2110      	movs	r1, #16
   2ab72:	2008      	movs	r0, #8
   2ab74:	f001 f9e2 	bl	2bf3c <ble_sm_cmd_get>
        if (!id_info) {
   2ab78:	4680      	mov	r8, r0
   2ab7a:	2800      	cmp	r0, #0
   2ab7c:	f000 809d 	beq.w	2acba <ble_sm_key_exch_exec+0x270>
        rc = ble_hs_pvcy_our_irk(&irk);
   2ab80:	4668      	mov	r0, sp
   2ab82:	f7fe fecf 	bl	29924 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   2ab86:	4607      	mov	r7, r0
   2ab88:	2800      	cmp	r0, #0
   2ab8a:	d159      	bne.n	2ac40 <ble_sm_key_exch_exec+0x1f6>
        memcpy(id_info->irk, irk, 16);
   2ab8c:	9b00      	ldr	r3, [sp, #0]
   2ab8e:	6818      	ldr	r0, [r3, #0]
   2ab90:	6859      	ldr	r1, [r3, #4]
   2ab92:	689a      	ldr	r2, [r3, #8]
   2ab94:	68db      	ldr	r3, [r3, #12]
   2ab96:	f8c8 0000 	str.w	r0, [r8]
   2ab9a:	f8c8 1004 	str.w	r1, [r8, #4]
   2ab9e:	f8c8 2008 	str.w	r2, [r8, #8]
   2aba2:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   2aba6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   2abaa:	f043 0304 	orr.w	r3, r3, #4
   2abae:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   2abb2:	9901      	ldr	r1, [sp, #4]
   2abb4:	8960      	ldrh	r0, [r4, #10]
   2abb6:	f001 f9db 	bl	2bf70 <ble_sm_tx>
        if (rc != 0) {
   2abba:	4607      	mov	r7, r0
   2abbc:	2800      	cmp	r0, #0
   2abbe:	d170      	bne.n	2aca2 <ble_sm_key_exch_exec+0x258>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   2abc0:	aa01      	add	r2, sp, #4
   2abc2:	2107      	movs	r1, #7
   2abc4:	2009      	movs	r0, #9
   2abc6:	f001 f9b9 	bl	2bf3c <ble_sm_cmd_get>
        if (!addr_info) {
   2abca:	4607      	mov	r7, r0
   2abcc:	2800      	cmp	r0, #0
   2abce:	d076      	beq.n	2acbe <ble_sm_key_exch_exec+0x274>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   2abd0:	8960      	ldrh	r0, [r4, #10]
   2abd2:	f7fd fd19 	bl	28608 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   2abd6:	a903      	add	r1, sp, #12
   2abd8:	f7fd fd36 	bl	28648 <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   2abdc:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2abe0:	463b      	mov	r3, r7
   2abe2:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   2abe6:	f8dd 200d 	ldr.w	r2, [sp, #13]
   2abea:	f8c7 2001 	str.w	r2, [r7, #1]
   2abee:	f8bd 2011 	ldrh.w	r2, [sp, #17]
   2abf2:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   2abf4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   2abf8:	f042 0210 	orr.w	r2, r2, #16
   2abfc:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   2ac00:	9a00      	ldr	r2, [sp, #0]
   2ac02:	f8d2 c000 	ldr.w	ip, [r2]
   2ac06:	6850      	ldr	r0, [r2, #4]
   2ac08:	6891      	ldr	r1, [r2, #8]
   2ac0a:	68d2      	ldr	r2, [r2, #12]
   2ac0c:	f8c4 c092 	str.w	ip, [r4, #146]	; 0x92
   2ac10:	f8c4 0096 	str.w	r0, [r4, #150]	; 0x96
   2ac14:	f8c4 109a 	str.w	r1, [r4, #154]	; 0x9a
   2ac18:	f8c4 209e 	str.w	r2, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   2ac1c:	783a      	ldrb	r2, [r7, #0]
   2ac1e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   2ac22:	681a      	ldr	r2, [r3, #0]
   2ac24:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   2ac28:	889b      	ldrh	r3, [r3, #4]
   2ac2a:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   2ac2e:	9901      	ldr	r1, [sp, #4]
   2ac30:	8960      	ldrh	r0, [r4, #10]
   2ac32:	f001 f99d 	bl	2bf70 <ble_sm_tx>
        if (rc != 0) {
   2ac36:	4607      	mov	r7, r0
   2ac38:	2800      	cmp	r0, #0
   2ac3a:	f43f af1d 	beq.w	2aa78 <ble_sm_key_exch_exec+0x2e>
   2ac3e:	e030      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   2ac40:	9801      	ldr	r0, [sp, #4]
   2ac42:	f7ea fd11 	bl	15668 <os_mbuf_free_chain>
            goto err;
   2ac46:	e02c      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   2ac48:	aa01      	add	r2, sp, #4
   2ac4a:	2110      	movs	r1, #16
   2ac4c:	200a      	movs	r0, #10
   2ac4e:	f001 f975 	bl	2bf3c <ble_sm_cmd_get>
        if (!sign_info) {
   2ac52:	4601      	mov	r1, r0
   2ac54:	b3a8      	cbz	r0, 2acc2 <ble_sm_key_exch_exec+0x278>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   2ac56:	4605      	mov	r5, r0
   2ac58:	4620      	mov	r0, r4
   2ac5a:	f7ff fd90 	bl	2a77e <ble_sm_gen_csrk>
        if (rc != 0) {
   2ac5e:	4607      	mov	r7, r0
   2ac60:	b9d0      	cbnz	r0, 2ac98 <ble_sm_key_exch_exec+0x24e>
        proc->our_keys.csrk_valid = 1;
   2ac62:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   2ac66:	f043 0308 	orr.w	r3, r3, #8
   2ac6a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   2ac6e:	6828      	ldr	r0, [r5, #0]
   2ac70:	6869      	ldr	r1, [r5, #4]
   2ac72:	68aa      	ldr	r2, [r5, #8]
   2ac74:	68eb      	ldr	r3, [r5, #12]
   2ac76:	f8c4 00a2 	str.w	r0, [r4, #162]	; 0xa2
   2ac7a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
   2ac7e:	f8c4 20aa 	str.w	r2, [r4, #170]	; 0xaa
   2ac82:	f8c4 30ae 	str.w	r3, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   2ac86:	9901      	ldr	r1, [sp, #4]
   2ac88:	8960      	ldrh	r0, [r4, #10]
   2ac8a:	f001 f971 	bl	2bf70 <ble_sm_tx>
        if (rc != 0) {
   2ac8e:	4607      	mov	r7, r0
   2ac90:	2800      	cmp	r0, #0
   2ac92:	f43f aef5 	beq.w	2aa80 <ble_sm_key_exch_exec+0x36>
   2ac96:	e004      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   2ac98:	9801      	ldr	r0, [sp, #4]
   2ac9a:	f7ea fce5 	bl	15668 <os_mbuf_free_chain>
            goto err;
   2ac9e:	e000      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   2aca0:	2706      	movs	r7, #6
    }

    return;

err:
    res->app_status = rc;
   2aca2:	6037      	str	r7, [r6, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2aca4:	2308      	movs	r3, #8
   2aca6:	7133      	strb	r3, [r6, #4]
    res->enc_cb = 1;
   2aca8:	7d33      	ldrb	r3, [r6, #20]
   2acaa:	f043 0302 	orr.w	r3, r3, #2
   2acae:	7533      	strb	r3, [r6, #20]
}
   2acb0:	b00a      	add	sp, #40	; 0x28
   2acb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   2acb6:	2706      	movs	r7, #6
   2acb8:	e7f3      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   2acba:	2706      	movs	r7, #6
   2acbc:	e7f1      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   2acbe:	2706      	movs	r7, #6
   2acc0:	e7ef      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   2acc2:	2706      	movs	r7, #6
   2acc4:	e7ed      	b.n	2aca2 <ble_sm_key_exch_exec+0x258>

0002acc6 <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2acc6:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   2acc8:	7b83      	ldrb	r3, [r0, #14]
   2acca:	b93b      	cbnz	r3, 2acdc <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2accc:	7a03      	ldrb	r3, [r0, #8]
   2acce:	f013 0f01 	tst.w	r3, #1
   2acd2:	d004      	beq.n	2acde <ble_sm_key_rxed+0x18>
            res->execute = 1;
   2acd4:	7d0b      	ldrb	r3, [r1, #20]
   2acd6:	f043 0301 	orr.w	r3, r3, #1
   2acda:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   2acdc:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   2acde:	f7ff fe9b 	bl	2aa18 <ble_sm_key_exch_success>
}
   2ace2:	e7fb      	b.n	2acdc <ble_sm_key_rxed+0x16>

0002ace4 <ble_sm_start_encrypt_tx>:
{
   2ace4:	b510      	push	{r4, lr}
   2ace6:	b08a      	sub	sp, #40	; 0x28
   2ace8:	4603      	mov	r3, r0
    cmd.conn_handle = htole16(params->connection_handle);
   2acea:	8802      	ldrh	r2, [r0, #0]
   2acec:	f8ad 200c 	strh.w	r2, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   2acf0:	8842      	ldrh	r2, [r0, #2]
   2acf2:	f8ad 2016 	strh.w	r2, [sp, #22]
    cmd.rand = htole64(params->random_number);
   2acf6:	6881      	ldr	r1, [r0, #8]
   2acf8:	68c2      	ldr	r2, [r0, #12]
   2acfa:	f8cd 100e 	str.w	r1, [sp, #14]
   2acfe:	f8cd 2012 	str.w	r2, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   2ad02:	ac06      	add	r4, sp, #24
   2ad04:	f853 0f10 	ldr.w	r0, [r3, #16]!
   2ad08:	6859      	ldr	r1, [r3, #4]
   2ad0a:	689a      	ldr	r2, [r3, #8]
   2ad0c:	68db      	ldr	r3, [r3, #12]
   2ad0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2ad10:	2300      	movs	r3, #0
   2ad12:	9300      	str	r3, [sp, #0]
   2ad14:	221c      	movs	r2, #28
   2ad16:	a903      	add	r1, sp, #12
   2ad18:	f242 0019 	movw	r0, #8217	; 0x2019
   2ad1c:	f7fd ffb2 	bl	28c84 <ble_hs_hci_cmd_tx>
}
   2ad20:	b00a      	add	sp, #40	; 0x28
   2ad22:	bd10      	pop	{r4, pc}

0002ad24 <ble_sm_enc_restore_exec>:
{
   2ad24:	b510      	push	{r4, lr}
   2ad26:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   2ad28:	4610      	mov	r0, r2
   2ad2a:	f7ff ffdb 	bl	2ace4 <ble_sm_start_encrypt_tx>
   2ad2e:	6020      	str	r0, [r4, #0]
}
   2ad30:	bd10      	pop	{r4, pc}

0002ad32 <ble_sm_enc_start_exec>:
{
   2ad32:	b530      	push	{r4, r5, lr}
   2ad34:	b089      	sub	sp, #36	; 0x24
   2ad36:	4603      	mov	r3, r0
   2ad38:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   2ad3a:	8942      	ldrh	r2, [r0, #10]
   2ad3c:	f8ad 2000 	strh.w	r2, [sp]
    cmd.encrypted_diversifier = 0;
   2ad40:	2200      	movs	r2, #0
   2ad42:	f8ad 2002 	strh.w	r2, [sp, #2]
    cmd.random_number = 0;
   2ad46:	2000      	movs	r0, #0
   2ad48:	2100      	movs	r1, #0
   2ad4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   2ad4e:	ac04      	add	r4, sp, #16
   2ad50:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   2ad54:	6859      	ldr	r1, [r3, #4]
   2ad56:	689a      	ldr	r2, [r3, #8]
   2ad58:	68db      	ldr	r3, [r3, #12]
   2ad5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   2ad5c:	4668      	mov	r0, sp
   2ad5e:	f7ff ffc1 	bl	2ace4 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   2ad62:	b130      	cbz	r0, 2ad72 <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2ad64:	2208      	movs	r2, #8
   2ad66:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   2ad68:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   2ad6a:	7d2b      	ldrb	r3, [r5, #20]
   2ad6c:	f043 0302 	orr.w	r3, r3, #2
   2ad70:	752b      	strb	r3, [r5, #20]
}
   2ad72:	b009      	add	sp, #36	; 0x24
   2ad74:	bd30      	pop	{r4, r5, pc}

0002ad76 <ble_sm_ltk_req_reply_tx>:
{
   2ad76:	b530      	push	{r4, r5, lr}
   2ad78:	b089      	sub	sp, #36	; 0x24
   2ad7a:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   2ad7c:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   2ad80:	680d      	ldr	r5, [r1, #0]
   2ad82:	6848      	ldr	r0, [r1, #4]
   2ad84:	688a      	ldr	r2, [r1, #8]
   2ad86:	68cb      	ldr	r3, [r1, #12]
   2ad88:	f8cd 500e 	str.w	r5, [sp, #14]
   2ad8c:	f8cd 0012 	str.w	r0, [sp, #18]
   2ad90:	f8cd 2016 	str.w	r2, [sp, #22]
   2ad94:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2ad98:	2302      	movs	r3, #2
   2ad9a:	9300      	str	r3, [sp, #0]
   2ad9c:	ab02      	add	r3, sp, #8
   2ad9e:	2212      	movs	r2, #18
   2ada0:	a903      	add	r1, sp, #12
   2ada2:	f242 001a 	movw	r0, #8218	; 0x201a
   2ada6:	f7fd ff6d 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2adaa:	b918      	cbnz	r0, 2adb4 <ble_sm_ltk_req_reply_tx+0x3e>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   2adac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2adb0:	42a3      	cmp	r3, r4
   2adb2:	d101      	bne.n	2adb8 <ble_sm_ltk_req_reply_tx+0x42>
}
   2adb4:	b009      	add	sp, #36	; 0x24
   2adb6:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   2adb8:	200c      	movs	r0, #12
   2adba:	e7fb      	b.n	2adb4 <ble_sm_ltk_req_reply_tx+0x3e>

0002adbc <ble_sm_ltk_start_exec>:
{
   2adbc:	b538      	push	{r3, r4, r5, lr}
   2adbe:	4604      	mov	r4, r0
   2adc0:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   2adc2:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   2adc6:	8940      	ldrh	r0, [r0, #10]
   2adc8:	f7ff ffd5 	bl	2ad76 <ble_sm_ltk_req_reply_tx>
   2adcc:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   2adce:	b910      	cbnz	r0, 2add6 <ble_sm_ltk_start_exec+0x1a>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   2add0:	2305      	movs	r3, #5
   2add2:	7363      	strb	r3, [r4, #13]
}
   2add4:	bd38      	pop	{r3, r4, r5, pc}
        res->enc_cb = 1;
   2add6:	7d2b      	ldrb	r3, [r5, #20]
   2add8:	f043 0302 	orr.w	r3, r3, #2
   2addc:	752b      	strb	r3, [r5, #20]
}
   2adde:	e7f9      	b.n	2add4 <ble_sm_ltk_start_exec+0x18>

0002ade0 <ble_sm_ltk_req_neg_reply_tx>:
{
   2ade0:	b510      	push	{r4, lr}
   2ade2:	b084      	sub	sp, #16
   2ade4:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   2ade6:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2adea:	2202      	movs	r2, #2
   2adec:	9200      	str	r2, [sp, #0]
   2adee:	ab02      	add	r3, sp, #8
   2adf0:	a903      	add	r1, sp, #12
   2adf2:	f242 001b 	movw	r0, #8219	; 0x201b
   2adf6:	f7fd ff45 	bl	28c84 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2adfa:	b918      	cbnz	r0, 2ae04 <ble_sm_ltk_req_neg_reply_tx+0x24>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   2adfc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2ae00:	42a3      	cmp	r3, r4
   2ae02:	d101      	bne.n	2ae08 <ble_sm_ltk_req_neg_reply_tx+0x28>
}
   2ae04:	b004      	add	sp, #16
   2ae06:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   2ae08:	200c      	movs	r0, #12
   2ae0a:	e7fb      	b.n	2ae04 <ble_sm_ltk_req_neg_reply_tx+0x24>

0002ae0c <ble_sm_ltk_restore_exec>:
{
   2ae0c:	b570      	push	{r4, r5, r6, lr}
   2ae0e:	4606      	mov	r6, r0
   2ae10:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   2ae12:	b1e2      	cbz	r2, 2ae4e <ble_sm_ltk_restore_exec+0x42>
   2ae14:	4615      	mov	r5, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   2ae16:	f102 0118 	add.w	r1, r2, #24
   2ae1a:	8940      	ldrh	r0, [r0, #10]
   2ae1c:	f7ff ffab 	bl	2ad76 <ble_sm_ltk_req_reply_tx>
   2ae20:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   2ae22:	b958      	cbnz	r0, 2ae3c <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   2ae24:	79eb      	ldrb	r3, [r5, #7]
   2ae26:	73f3      	strb	r3, [r6, #15]
            if (value_sec->authenticated) {
   2ae28:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   2ae2c:	f013 0f02 	tst.w	r3, #2
   2ae30:	d008      	beq.n	2ae44 <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   2ae32:	7a33      	ldrb	r3, [r6, #8]
   2ae34:	f043 0308 	orr.w	r3, r3, #8
   2ae38:	7233      	strb	r3, [r6, #8]
   2ae3a:	e003      	b.n	2ae44 <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   2ae3c:	7d23      	ldrb	r3, [r4, #20]
   2ae3e:	f043 0302 	orr.w	r3, r3, #2
   2ae42:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   2ae44:	6823      	ldr	r3, [r4, #0]
   2ae46:	b90b      	cbnz	r3, 2ae4c <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   2ae48:	2306      	movs	r3, #6
   2ae4a:	7373      	strb	r3, [r6, #13]
}
   2ae4c:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   2ae4e:	8940      	ldrh	r0, [r0, #10]
   2ae50:	f7ff ffc6 	bl	2ade0 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   2ae54:	2305      	movs	r3, #5
   2ae56:	6023      	str	r3, [r4, #0]
   2ae58:	e7f4      	b.n	2ae44 <ble_sm_ltk_restore_exec+0x38>

0002ae5a <ble_sm_random_exec>:
{
   2ae5a:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2ae5c:	7a03      	ldrb	r3, [r0, #8]
   2ae5e:	f013 0f10 	tst.w	r3, #16
   2ae62:	d000      	beq.n	2ae66 <ble_sm_random_exec+0xc>
}
   2ae64:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_random_exec(proc, res);
   2ae66:	f001 f966 	bl	2c136 <ble_sm_lgcy_random_exec>
}
   2ae6a:	e7fb      	b.n	2ae64 <ble_sm_random_exec+0xa>

0002ae6c <ble_sm_confirm_exec>:
{
   2ae6c:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   2ae6e:	7a03      	ldrb	r3, [r0, #8]
   2ae70:	f013 0f10 	tst.w	r3, #16
   2ae74:	d000      	beq.n	2ae78 <ble_sm_confirm_exec+0xc>
}
   2ae76:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_confirm_exec(proc, res);
   2ae78:	f001 f90c 	bl	2c094 <ble_sm_lgcy_confirm_exec>
}
   2ae7c:	e7fb      	b.n	2ae76 <ble_sm_confirm_exec+0xa>

0002ae7e <ble_sm_proc_set_timer>:
{
   2ae7e:	b510      	push	{r4, lr}
   2ae80:	4604      	mov	r4, r0
   2ae82:	f7eb fb79 	bl	16578 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   2ae86:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   2ae8a:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   2ae8c:	f7fc fe3a 	bl	27b04 <ble_hs_timer_resched>
}
   2ae90:	bd10      	pop	{r4, pc}
	...

0002ae94 <ble_sm_extract_expired>:
{
   2ae94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ae96:	4605      	mov	r5, r0
   2ae98:	f7eb fb6e 	bl	16578 <os_time_get>
   2ae9c:	4606      	mov	r6, r0
    STAILQ_INIT(dst_list);
   2ae9e:	2400      	movs	r4, #0
   2aea0:	602c      	str	r4, [r5, #0]
   2aea2:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   2aea4:	f7fc fd3c 	bl	27920 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   2aea8:	4b15      	ldr	r3, [pc, #84]	; (2af00 <ble_sm_extract_expired+0x6c>)
   2aeaa:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   2aeac:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    while (proc != NULL) {
   2aeb0:	e00a      	b.n	2aec8 <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   2aeb2:	b19c      	cbz	r4, 2aedc <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2aeb4:	6822      	ldr	r2, [r4, #0]
   2aeb6:	6812      	ldr	r2, [r2, #0]
   2aeb8:	6022      	str	r2, [r4, #0]
   2aeba:	b1ba      	cbz	r2, 2aeec <ble_sm_extract_expired+0x58>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   2aebc:	682a      	ldr	r2, [r5, #0]
   2aebe:	601a      	str	r2, [r3, #0]
   2aec0:	b1ba      	cbz	r2, 2aef2 <ble_sm_extract_expired+0x5e>
   2aec2:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   2aec4:	461c      	mov	r4, r3
   2aec6:	4603      	mov	r3, r0
    while (proc != NULL) {
   2aec8:	b1ab      	cbz	r3, 2aef6 <ble_sm_extract_expired+0x62>
        next = STAILQ_NEXT(proc, next);
   2aeca:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   2aecc:	685a      	ldr	r2, [r3, #4]
   2aece:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   2aed0:	2a00      	cmp	r2, #0
   2aed2:	ddee      	ble.n	2aeb2 <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   2aed4:	4297      	cmp	r7, r2
   2aed6:	ddf5      	ble.n	2aec4 <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   2aed8:	4617      	mov	r7, r2
   2aeda:	e7f3      	b.n	2aec4 <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   2aedc:	4908      	ldr	r1, [pc, #32]	; (2af00 <ble_sm_extract_expired+0x6c>)
   2aede:	680a      	ldr	r2, [r1, #0]
   2aee0:	6812      	ldr	r2, [r2, #0]
   2aee2:	600a      	str	r2, [r1, #0]
   2aee4:	2a00      	cmp	r2, #0
   2aee6:	d1e9      	bne.n	2aebc <ble_sm_extract_expired+0x28>
   2aee8:	6049      	str	r1, [r1, #4]
   2aeea:	e7e7      	b.n	2aebc <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2aeec:	4a04      	ldr	r2, [pc, #16]	; (2af00 <ble_sm_extract_expired+0x6c>)
   2aeee:	6054      	str	r4, [r2, #4]
   2aef0:	e7e4      	b.n	2aebc <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   2aef2:	606b      	str	r3, [r5, #4]
   2aef4:	e7e5      	b.n	2aec2 <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   2aef6:	f7fc fd17 	bl	27928 <ble_hs_unlock>
}
   2aefa:	4638      	mov	r0, r7
   2aefc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aefe:	bf00      	nop
   2af00:	10003550 	.word	0x10003550

0002af04 <ble_sm_pair_fail_tx>:
{
   2af04:	b530      	push	{r4, r5, lr}
   2af06:	b083      	sub	sp, #12
   2af08:	4604      	mov	r4, r0
   2af0a:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   2af0c:	aa01      	add	r2, sp, #4
   2af0e:	2101      	movs	r1, #1
   2af10:	2005      	movs	r0, #5
   2af12:	f001 f813 	bl	2bf3c <ble_sm_cmd_get>
    if (cmd) {
   2af16:	b130      	cbz	r0, 2af26 <ble_sm_pair_fail_tx+0x22>
        cmd->reason = reason;
   2af18:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   2af1a:	9901      	ldr	r1, [sp, #4]
   2af1c:	4620      	mov	r0, r4
   2af1e:	f001 f827 	bl	2bf70 <ble_sm_tx>
        if (rc) {
   2af22:	4603      	mov	r3, r0
   2af24:	b908      	cbnz	r0, 2af2a <ble_sm_pair_fail_tx+0x26>
}
   2af26:	b003      	add	sp, #12
   2af28:	bd30      	pop	{r4, r5, pc}
            BLE_HS_LOG(ERROR, "ble_sm_pair_fail_tx failed, rc = %d\n", rc);
   2af2a:	4a03      	ldr	r2, [pc, #12]	; (2af38 <ble_sm_pair_fail_tx+0x34>)
   2af2c:	2103      	movs	r1, #3
   2af2e:	2004      	movs	r0, #4
   2af30:	f7ee fbfe 	bl	19730 <modlog_printf>
}
   2af34:	e7f7      	b.n	2af26 <ble_sm_pair_fail_tx+0x22>
   2af36:	bf00      	nop
   2af38:	00034ed8 	.word	0x00034ed8

0002af3c <ble_sm_persist_keys>:
{
   2af3c:	b570      	push	{r4, r5, r6, lr}
   2af3e:	b09a      	sub	sp, #104	; 0x68
   2af40:	4604      	mov	r4, r0
    ble_hs_lock();
   2af42:	f7fc fced 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   2af46:	8960      	ldrh	r0, [r4, #10]
   2af48:	f7fd fb46 	bl	285d8 <ble_hs_conn_find>
   2af4c:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   2af4e:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   2af52:	f013 0f10 	tst.w	r3, #16
   2af56:	d053      	beq.n	2b000 <ble_sm_persist_keys+0xc4>
        peer_addr.type = proc->peer_keys.addr_type;
   2af58:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   2af5c:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   2af60:	4623      	mov	r3, r4
   2af62:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   2af66:	f8cd 2009 	str.w	r2, [sp, #9]
   2af6a:	889b      	ldrh	r3, [r3, #4]
   2af6c:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   2af70:	9802      	ldr	r0, [sp, #8]
   2af72:	f8c5 0007 	str.w	r0, [r5, #7]
   2af76:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   2af7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2af7e:	f8a5 200b 	strh.w	r2, [r5, #11]
   2af82:	736b      	strb	r3, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   2af84:	2300      	movs	r3, #0
   2af86:	9318      	str	r3, [sp, #96]	; 0x60
   2af88:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   2af8c:	2206      	movs	r2, #6
   2af8e:	f105 0116 	add.w	r1, r5, #22
   2af92:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   2af96:	f7eb fd65 	bl	16a64 <memcmp>
   2af9a:	b128      	cbz	r0, 2afa8 <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   2af9c:	2e03      	cmp	r6, #3
   2af9e:	d808      	bhi.n	2afb2 <ble_sm_persist_keys+0x76>
   2afa0:	e8df f006 	tbb	[pc, r6]
   2afa4:	2b052b05 	.word	0x2b052b05
    ble_hs_unlock();
   2afa8:	f7fc fcbe 	bl	27928 <ble_hs_unlock>
    if (identity_ev) {
   2afac:	e006      	b.n	2afbc <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   2afae:	2302      	movs	r3, #2
   2afb0:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   2afb2:	f7fc fcb9 	bl	27928 <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   2afb6:	8960      	ldrh	r0, [r4, #10]
   2afb8:	f7fa fab2 	bl	25520 <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   2afbc:	7a25      	ldrb	r5, [r4, #8]
   2afbe:	f005 0608 	and.w	r6, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   2afc2:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   2afc6:	ab04      	add	r3, sp, #16
   2afc8:	9300      	str	r3, [sp, #0]
   2afca:	f104 0370 	add.w	r3, r4, #112	; 0x70
   2afce:	462a      	mov	r2, r5
   2afd0:	4631      	mov	r1, r6
   2afd2:	a802      	add	r0, sp, #8
   2afd4:	f7ff fc88 	bl	2a8e8 <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   2afd8:	a804      	add	r0, sp, #16
   2afda:	f001 f9a6 	bl	2c32a <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   2afde:	ab04      	add	r3, sp, #16
   2afe0:	9300      	str	r3, [sp, #0]
   2afe2:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   2afe6:	462a      	mov	r2, r5
   2afe8:	4631      	mov	r1, r6
   2afea:	a802      	add	r0, sp, #8
   2afec:	f7ff fc7c 	bl	2a8e8 <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   2aff0:	a804      	add	r0, sp, #16
   2aff2:	f001 f9a7 	bl	2c344 <ble_store_write_peer_sec>
}
   2aff6:	b01a      	add	sp, #104	; 0x68
   2aff8:	bd70      	pop	{r4, r5, r6, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   2affa:	2303      	movs	r3, #3
   2affc:	71eb      	strb	r3, [r5, #7]
                break;
   2affe:	e7d8      	b.n	2afb2 <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   2b000:	4603      	mov	r3, r0
   2b002:	f853 0f07 	ldr.w	r0, [r3, #7]!
   2b006:	9002      	str	r0, [sp, #8]
   2b008:	889a      	ldrh	r2, [r3, #4]
   2b00a:	799b      	ldrb	r3, [r3, #6]
   2b00c:	f8ad 200c 	strh.w	r2, [sp, #12]
   2b010:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2b014:	79e8      	ldrb	r0, [r5, #7]
   2b016:	f7fe fbda 	bl	297ce <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   2b01a:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   2b01e:	f7fc fc83 	bl	27928 <ble_hs_unlock>
    if (identity_ev) {
   2b022:	e7cb      	b.n	2afbc <ble_sm_persist_keys+0x80>

0002b024 <ble_sm_proc_free>:
    if (proc != NULL) {
   2b024:	b128      	cbz	r0, 2b032 <ble_sm_proc_free+0xe>
{
   2b026:	b508      	push	{r3, lr}
   2b028:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   2b02a:	4802      	ldr	r0, [pc, #8]	; (2b034 <ble_sm_proc_free+0x10>)
   2b02c:	f7ea ff13 	bl	15e56 <os_memblock_put>
}
   2b030:	bd08      	pop	{r3, pc}
   2b032:	4770      	bx	lr
   2b034:	10003534 	.word	0x10003534

0002b038 <ble_sm_proc_alloc>:
{
   2b038:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   2b03a:	4806      	ldr	r0, [pc, #24]	; (2b054 <ble_sm_proc_alloc+0x1c>)
   2b03c:	f7ea fee3 	bl	15e06 <os_memblock_get>
    if (proc != NULL) {
   2b040:	4604      	mov	r4, r0
   2b042:	b120      	cbz	r0, 2b04e <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   2b044:	f44f 7280 	mov.w	r2, #256	; 0x100
   2b048:	2100      	movs	r1, #0
   2b04a:	f7eb fd54 	bl	16af6 <memset>
}
   2b04e:	4620      	mov	r0, r4
   2b050:	bd10      	pop	{r4, pc}
   2b052:	bf00      	nop
   2b054:	10003534 	.word	0x10003534

0002b058 <ble_sm_retrieve_ltk>:
{
   2b058:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b05a:	b089      	sub	sp, #36	; 0x24
   2b05c:	4606      	mov	r6, r0
   2b05e:	4615      	mov	r5, r2
   2b060:	461c      	mov	r4, r3
   2b062:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   2b064:	2220      	movs	r2, #32
   2b066:	2100      	movs	r1, #0
   2b068:	4668      	mov	r0, sp
   2b06a:	f7eb fd44 	bl	16af6 <memset>
    key_sec.peer_addr.type = peer_addr_type;
   2b06e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   2b072:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   2b076:	683b      	ldr	r3, [r7, #0]
   2b078:	f8cd 3001 	str.w	r3, [sp, #1]
   2b07c:	88bb      	ldrh	r3, [r7, #4]
   2b07e:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   2b082:	f8ad 6008 	strh.w	r6, [sp, #8]
    key_sec.rand_num = rand;
   2b086:	9504      	str	r5, [sp, #16]
   2b088:	9405      	str	r4, [sp, #20]
    key_sec.ediv_rand_present = 1;
   2b08a:	2301      	movs	r3, #1
   2b08c:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   2b090:	9910      	ldr	r1, [sp, #64]	; 0x40
   2b092:	4668      	mov	r0, sp
   2b094:	f001 f942 	bl	2c31c <ble_store_read_our_sec>
}
   2b098:	b009      	add	sp, #36	; 0x24
   2b09a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b09c <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   2b09c:	b538      	push	{r3, r4, r5, lr}
   2b09e:	460d      	mov	r5, r1
   2b0a0:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   2b0a2:	7d13      	ldrb	r3, [r2, #20]
   2b0a4:	f043 0302 	orr.w	r3, r3, #2
   2b0a8:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b0aa:	2101      	movs	r1, #1
   2b0ac:	4628      	mov	r0, r5
   2b0ae:	f7fe fb32 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b0b2:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   2b0b4:	b930      	cbnz	r0, 2b0c4 <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   2b0b6:	682b      	ldr	r3, [r5, #0]
   2b0b8:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   2b0ba:	781b      	ldrb	r3, [r3, #0]
   2b0bc:	b10b      	cbz	r3, 2b0c2 <ble_sm_fail_rx+0x26>
   2b0be:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   2b0c2:	6020      	str	r0, [r4, #0]
    }
}
   2b0c4:	bd38      	pop	{r3, r4, r5, pc}

0002b0c6 <ble_sm_read_bond>:
{
   2b0c6:	b510      	push	{r4, lr}
   2b0c8:	b094      	sub	sp, #80	; 0x50
   2b0ca:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   2b0cc:	a901      	add	r1, sp, #4
   2b0ce:	f7f9 fc9d 	bl	24a0c <ble_gap_conn_find>
    if (rc != 0) {
   2b0d2:	b108      	cbz	r0, 2b0d8 <ble_sm_read_bond+0x12>
}
   2b0d4:	b014      	add	sp, #80	; 0x50
   2b0d6:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   2b0d8:	900d      	str	r0, [sp, #52]	; 0x34
   2b0da:	900e      	str	r0, [sp, #56]	; 0x38
   2b0dc:	900f      	str	r0, [sp, #60]	; 0x3c
   2b0de:	9010      	str	r0, [sp, #64]	; 0x40
   2b0e0:	9011      	str	r0, [sp, #68]	; 0x44
   2b0e2:	9012      	str	r0, [sp, #72]	; 0x48
   2b0e4:	9013      	str	r0, [sp, #76]	; 0x4c
    key_sec.peer_addr = desc.peer_id_addr;
   2b0e6:	f8dd 000f 	ldr.w	r0, [sp, #15]
   2b0ea:	900c      	str	r0, [sp, #48]	; 0x30
   2b0ec:	f8bd 2013 	ldrh.w	r2, [sp, #19]
   2b0f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2b0f4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   2b0f8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   2b0fc:	4621      	mov	r1, r4
   2b0fe:	a80c      	add	r0, sp, #48	; 0x30
   2b100:	f001 f919 	bl	2c336 <ble_store_read_peer_sec>
    return rc;
   2b104:	e7e6      	b.n	2b0d4 <ble_sm_read_bond+0xe>

0002b106 <ble_sm_chk_repeat_pairing>:
{
   2b106:	b570      	push	{r4, r5, r6, lr}
   2b108:	b096      	sub	sp, #88	; 0x58
   2b10a:	4604      	mov	r4, r0
   2b10c:	460d      	mov	r5, r1
   2b10e:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   2b110:	4669      	mov	r1, sp
   2b112:	4620      	mov	r0, r4
   2b114:	f7ff ffd7 	bl	2b0c6 <ble_sm_read_bond>
        switch (rc) {
   2b118:	4603      	mov	r3, r0
   2b11a:	b120      	cbz	r0, 2b126 <ble_sm_chk_repeat_pairing+0x20>
   2b11c:	2805      	cmp	r0, #5
   2b11e:	d02f      	beq.n	2b180 <ble_sm_chk_repeat_pairing+0x7a>
}
   2b120:	4618      	mov	r0, r3
   2b122:	b016      	add	sp, #88	; 0x58
   2b124:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   2b126:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   2b12a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2b12e:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   2b132:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   2b136:	f3c2 0140 	ubfx	r1, r2, #1, #1
   2b13a:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   2b13e:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   2b142:	f3c2 0280 	ubfx	r2, r2, #2, #1
   2b146:	f362 0341 	bfi	r3, r2, #1, #1
   2b14a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   2b14e:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   2b152:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   2b156:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   2b15a:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   2b15e:	f3c5 1200 	ubfx	r2, r5, #4, #1
   2b162:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   2b166:	f3c5 1240 	ubfx	r2, r5, #5, #1
   2b16a:	f362 0382 	bfi	r3, r2, #2, #1
   2b16e:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   2b172:	a814      	add	r0, sp, #80	; 0x50
   2b174:	f7fa f9e7 	bl	25546 <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   2b178:	2801      	cmp	r0, #1
   2b17a:	d0c9      	beq.n	2b110 <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   2b17c:	2302      	movs	r3, #2
   2b17e:	e7cf      	b.n	2b120 <ble_sm_chk_repeat_pairing+0x1a>
        switch (rc) {
   2b180:	2300      	movs	r3, #0
   2b182:	e7cd      	b.n	2b120 <ble_sm_chk_repeat_pairing+0x1a>

0002b184 <ble_sm_gen_pair_rand>:
{
   2b184:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   2b186:	2110      	movs	r1, #16
   2b188:	f7fe f93c 	bl	29404 <ble_hs_hci_util_rand>
}
   2b18c:	bd08      	pop	{r3, pc}

0002b18e <ble_sm_ia_ra>:
{
   2b18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b192:	b088      	sub	sp, #32
   2b194:	4605      	mov	r5, r0
   2b196:	460f      	mov	r7, r1
   2b198:	4614      	mov	r4, r2
   2b19a:	461e      	mov	r6, r3
   2b19c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   2b1a0:	8940      	ldrh	r0, [r0, #10]
   2b1a2:	f7fd fa31 	bl	28608 <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   2b1a6:	a901      	add	r1, sp, #4
   2b1a8:	f7fd fa4e 	bl	28648 <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2b1ac:	7a2b      	ldrb	r3, [r5, #8]
   2b1ae:	f013 0f01 	tst.w	r3, #1
   2b1b2:	d016      	beq.n	2b1e2 <ble_sm_ia_ra+0x54>
        *out_iat = addrs.our_ota_addr.type;
   2b1b4:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2b1b8:	703b      	strb	r3, [r7, #0]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   2b1ba:	f8dd 3013 	ldr.w	r3, [sp, #19]
   2b1be:	6023      	str	r3, [r4, #0]
   2b1c0:	f8bd 3017 	ldrh.w	r3, [sp, #23]
   2b1c4:	80a3      	strh	r3, [r4, #4]
        *out_rat = addrs.peer_ota_addr.type;
   2b1c6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2b1ca:	7033      	strb	r3, [r6, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   2b1cc:	f8dd 301a 	ldr.w	r3, [sp, #26]
   2b1d0:	f8c8 3000 	str.w	r3, [r8]
   2b1d4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2b1d8:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   2b1dc:	b008      	add	sp, #32
   2b1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.peer_ota_addr.type;
   2b1e2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2b1e6:	703b      	strb	r3, [r7, #0]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   2b1e8:	f8dd 301a 	ldr.w	r3, [sp, #26]
   2b1ec:	6023      	str	r3, [r4, #0]
   2b1ee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   2b1f2:	80a3      	strh	r3, [r4, #4]
        *out_rat = addrs.our_ota_addr.type;
   2b1f4:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2b1f8:	7033      	strb	r3, [r6, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   2b1fa:	f8dd 3013 	ldr.w	r3, [sp, #19]
   2b1fe:	f8c8 3000 	str.w	r3, [r8]
   2b202:	f8bd 3017 	ldrh.w	r3, [sp, #23]
   2b206:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   2b20a:	e7e7      	b.n	2b1dc <ble_sm_ia_ra+0x4e>

0002b20c <ble_sm_proc_find>:
{
   2b20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b210:	4607      	mov	r7, r0
   2b212:	460e      	mov	r6, r1
   2b214:	4615      	mov	r5, r2
   2b216:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   2b218:	4b0b      	ldr	r3, [pc, #44]	; (2b248 <ble_sm_proc_find+0x3c>)
   2b21a:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   2b21c:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   2b220:	b174      	cbz	r4, 2b240 <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   2b222:	462b      	mov	r3, r5
   2b224:	4632      	mov	r2, r6
   2b226:	4639      	mov	r1, r7
   2b228:	4620      	mov	r0, r4
   2b22a:	f7ff f9fb 	bl	2a624 <ble_sm_proc_matches>
   2b22e:	b910      	cbnz	r0, 2b236 <ble_sm_proc_find+0x2a>
        prev = proc;
   2b230:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   2b232:	6824      	ldr	r4, [r4, #0]
   2b234:	e7f4      	b.n	2b220 <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   2b236:	f1b9 0f00 	cmp.w	r9, #0
   2b23a:	d001      	beq.n	2b240 <ble_sm_proc_find+0x34>
                *out_prev = prev;
   2b23c:	f8c9 8000 	str.w	r8, [r9]
}
   2b240:	4620      	mov	r0, r4
   2b242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b246:	bf00      	nop
   2b248:	10003550 	.word	0x10003550

0002b24c <ble_sm_sign_info_rx>:
{
   2b24c:	b570      	push	{r4, r5, r6, lr}
   2b24e:	4606      	mov	r6, r0
   2b250:	460d      	mov	r5, r1
   2b252:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b254:	2110      	movs	r1, #16
   2b256:	4628      	mov	r0, r5
   2b258:	f7fe fa5d 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b25c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b25e:	b130      	cbz	r0, 2b26e <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b260:	2308      	movs	r3, #8
   2b262:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2b264:	7d23      	ldrb	r3, [r4, #20]
   2b266:	f043 0302 	orr.w	r3, r3, #2
   2b26a:	7523      	strb	r3, [r4, #20]
}
   2b26c:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   2b26e:	682b      	ldr	r3, [r5, #0]
   2b270:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2b272:	f7fc fb55 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2b276:	2300      	movs	r3, #0
   2b278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b27c:	2107      	movs	r1, #7
   2b27e:	4630      	mov	r0, r6
   2b280:	f7ff ffc4 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2b284:	4603      	mov	r3, r0
   2b286:	b1e0      	cbz	r0, 2b2c2 <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   2b288:	7b82      	ldrb	r2, [r0, #14]
   2b28a:	f022 0210 	bic.w	r2, r2, #16
   2b28e:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   2b290:	682e      	ldr	r6, [r5, #0]
   2b292:	6868      	ldr	r0, [r5, #4]
   2b294:	68a9      	ldr	r1, [r5, #8]
   2b296:	68ea      	ldr	r2, [r5, #12]
   2b298:	f8c3 60ea 	str.w	r6, [r3, #234]	; 0xea
   2b29c:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
   2b2a0:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
   2b2a4:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   2b2a8:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   2b2ac:	f042 0208 	orr.w	r2, r2, #8
   2b2b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   2b2b4:	4621      	mov	r1, r4
   2b2b6:	4618      	mov	r0, r3
   2b2b8:	f7ff fd05 	bl	2acc6 <ble_sm_key_rxed>
    ble_hs_unlock();
   2b2bc:	f7fc fb34 	bl	27928 <ble_hs_unlock>
   2b2c0:	e7d4      	b.n	2b26c <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2b2c2:	2305      	movs	r3, #5
   2b2c4:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b2c6:	2308      	movs	r3, #8
   2b2c8:	7123      	strb	r3, [r4, #4]
   2b2ca:	e7f7      	b.n	2b2bc <ble_sm_sign_info_rx+0x70>

0002b2cc <ble_sm_id_addr_info_rx>:
{
   2b2cc:	b570      	push	{r4, r5, r6, lr}
   2b2ce:	4606      	mov	r6, r0
   2b2d0:	460d      	mov	r5, r1
   2b2d2:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b2d4:	2107      	movs	r1, #7
   2b2d6:	4628      	mov	r0, r5
   2b2d8:	f7fe fa1d 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b2dc:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b2de:	b130      	cbz	r0, 2b2ee <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b2e0:	2308      	movs	r3, #8
   2b2e2:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2b2e4:	7d23      	ldrb	r3, [r4, #20]
   2b2e6:	f043 0302 	orr.w	r3, r3, #2
   2b2ea:	7523      	strb	r3, [r4, #20]
}
   2b2ec:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   2b2ee:	682b      	ldr	r3, [r5, #0]
   2b2f0:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2b2f2:	f7fc fb15 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2b2f6:	2300      	movs	r3, #0
   2b2f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b2fc:	2107      	movs	r1, #7
   2b2fe:	4630      	mov	r0, r6
   2b300:	f7ff ff84 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2b304:	b1d0      	cbz	r0, 2b33c <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   2b306:	7b82      	ldrb	r2, [r0, #14]
   2b308:	f022 0208 	bic.w	r2, r2, #8
   2b30c:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   2b30e:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   2b312:	f042 0210 	orr.w	r2, r2, #16
   2b316:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   2b31a:	782a      	ldrb	r2, [r5, #0]
   2b31c:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   2b320:	462a      	mov	r2, r5
   2b322:	f852 1f01 	ldr.w	r1, [r2, #1]!
   2b326:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   2b32a:	8892      	ldrh	r2, [r2, #4]
   2b32c:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   2b330:	4621      	mov	r1, r4
   2b332:	f7ff fcc8 	bl	2acc6 <ble_sm_key_rxed>
    ble_hs_unlock();
   2b336:	f7fc faf7 	bl	27928 <ble_hs_unlock>
   2b33a:	e7d7      	b.n	2b2ec <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2b33c:	2305      	movs	r3, #5
   2b33e:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b340:	2308      	movs	r3, #8
   2b342:	7123      	strb	r3, [r4, #4]
   2b344:	e7f7      	b.n	2b336 <ble_sm_id_addr_info_rx+0x6a>

0002b346 <ble_sm_id_info_rx>:
{
   2b346:	b570      	push	{r4, r5, r6, lr}
   2b348:	4606      	mov	r6, r0
   2b34a:	460d      	mov	r5, r1
   2b34c:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b34e:	2110      	movs	r1, #16
   2b350:	4628      	mov	r0, r5
   2b352:	f7fe f9e0 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b356:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b358:	b130      	cbz	r0, 2b368 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b35a:	2308      	movs	r3, #8
   2b35c:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2b35e:	7d23      	ldrb	r3, [r4, #20]
   2b360:	f043 0302 	orr.w	r3, r3, #2
   2b364:	7523      	strb	r3, [r4, #20]
}
   2b366:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   2b368:	682b      	ldr	r3, [r5, #0]
   2b36a:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2b36c:	f7fc fad8 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2b370:	2300      	movs	r3, #0
   2b372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b376:	2107      	movs	r1, #7
   2b378:	4630      	mov	r0, r6
   2b37a:	f7ff ff47 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2b37e:	4603      	mov	r3, r0
   2b380:	b1e0      	cbz	r0, 2b3bc <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   2b382:	7b82      	ldrb	r2, [r0, #14]
   2b384:	f022 0204 	bic.w	r2, r2, #4
   2b388:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   2b38a:	682e      	ldr	r6, [r5, #0]
   2b38c:	6868      	ldr	r0, [r5, #4]
   2b38e:	68a9      	ldr	r1, [r5, #8]
   2b390:	68ea      	ldr	r2, [r5, #12]
   2b392:	f8c3 60da 	str.w	r6, [r3, #218]	; 0xda
   2b396:	f8c3 00de 	str.w	r0, [r3, #222]	; 0xde
   2b39a:	f8c3 10e2 	str.w	r1, [r3, #226]	; 0xe2
   2b39e:	f8c3 20e6 	str.w	r2, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   2b3a2:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   2b3a6:	f042 0204 	orr.w	r2, r2, #4
   2b3aa:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   2b3ae:	4621      	mov	r1, r4
   2b3b0:	4618      	mov	r0, r3
   2b3b2:	f7ff fc88 	bl	2acc6 <ble_sm_key_rxed>
    ble_hs_unlock();
   2b3b6:	f7fc fab7 	bl	27928 <ble_hs_unlock>
   2b3ba:	e7d4      	b.n	2b366 <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2b3bc:	2305      	movs	r3, #5
   2b3be:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b3c0:	2308      	movs	r3, #8
   2b3c2:	7123      	strb	r3, [r4, #4]
   2b3c4:	e7f7      	b.n	2b3b6 <ble_sm_id_info_rx+0x70>

0002b3c6 <ble_sm_master_id_rx>:
{
   2b3c6:	b570      	push	{r4, r5, r6, lr}
   2b3c8:	4606      	mov	r6, r0
   2b3ca:	460d      	mov	r5, r1
   2b3cc:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b3ce:	210a      	movs	r1, #10
   2b3d0:	4628      	mov	r0, r5
   2b3d2:	f7fe f9a0 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b3d6:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b3d8:	b130      	cbz	r0, 2b3e8 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b3da:	2308      	movs	r3, #8
   2b3dc:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2b3de:	7d23      	ldrb	r3, [r4, #20]
   2b3e0:	f043 0302 	orr.w	r3, r3, #2
   2b3e4:	7523      	strb	r3, [r4, #20]
}
   2b3e6:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   2b3e8:	682b      	ldr	r3, [r5, #0]
   2b3ea:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2b3ec:	f7fc fa98 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2b3f0:	2300      	movs	r3, #0
   2b3f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b3f6:	2107      	movs	r1, #7
   2b3f8:	4630      	mov	r0, r6
   2b3fa:	f7ff ff07 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2b3fe:	b1d0      	cbz	r0, 2b436 <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   2b400:	7b82      	ldrb	r2, [r0, #14]
   2b402:	f022 0202 	bic.w	r2, r2, #2
   2b406:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   2b408:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   2b40c:	f042 0202 	orr.w	r2, r2, #2
   2b410:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   2b414:	882a      	ldrh	r2, [r5, #0]
   2b416:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   2b41a:	f8d5 1002 	ldr.w	r1, [r5, #2]
   2b41e:	f8d5 2006 	ldr.w	r2, [r5, #6]
   2b422:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   2b426:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   2b42a:	4621      	mov	r1, r4
   2b42c:	f7ff fc4b 	bl	2acc6 <ble_sm_key_rxed>
    ble_hs_unlock();
   2b430:	f7fc fa7a 	bl	27928 <ble_hs_unlock>
   2b434:	e7d7      	b.n	2b3e6 <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2b436:	2305      	movs	r3, #5
   2b438:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b43a:	2308      	movs	r3, #8
   2b43c:	7123      	strb	r3, [r4, #4]
   2b43e:	e7f7      	b.n	2b430 <ble_sm_master_id_rx+0x6a>

0002b440 <ble_sm_enc_info_rx>:
{
   2b440:	b570      	push	{r4, r5, r6, lr}
   2b442:	4606      	mov	r6, r0
   2b444:	460d      	mov	r5, r1
   2b446:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b448:	2110      	movs	r1, #16
   2b44a:	4628      	mov	r0, r5
   2b44c:	f7fe f963 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b450:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b452:	b130      	cbz	r0, 2b462 <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b454:	2308      	movs	r3, #8
   2b456:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2b458:	7d23      	ldrb	r3, [r4, #20]
   2b45a:	f043 0302 	orr.w	r3, r3, #2
   2b45e:	7523      	strb	r3, [r4, #20]
}
   2b460:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   2b462:	682b      	ldr	r3, [r5, #0]
   2b464:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2b466:	f7fc fa5b 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2b46a:	2300      	movs	r3, #0
   2b46c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b470:	2107      	movs	r1, #7
   2b472:	4630      	mov	r0, r6
   2b474:	f7ff feca 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2b478:	4603      	mov	r3, r0
   2b47a:	b1f8      	cbz	r0, 2b4bc <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   2b47c:	7b82      	ldrb	r2, [r0, #14]
   2b47e:	f022 0201 	bic.w	r2, r2, #1
   2b482:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   2b484:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   2b488:	f042 0201 	orr.w	r2, r2, #1
   2b48c:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   2b490:	682e      	ldr	r6, [r5, #0]
   2b492:	6868      	ldr	r0, [r5, #4]
   2b494:	68a9      	ldr	r1, [r5, #8]
   2b496:	68ea      	ldr	r2, [r5, #12]
   2b498:	f8c3 60ca 	str.w	r6, [r3, #202]	; 0xca
   2b49c:	f8c3 00ce 	str.w	r0, [r3, #206]	; 0xce
   2b4a0:	f8c3 10d2 	str.w	r1, [r3, #210]	; 0xd2
   2b4a4:	f8c3 20d6 	str.w	r2, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   2b4a8:	7bda      	ldrb	r2, [r3, #15]
   2b4aa:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   2b4ae:	4621      	mov	r1, r4
   2b4b0:	4618      	mov	r0, r3
   2b4b2:	f7ff fc08 	bl	2acc6 <ble_sm_key_rxed>
    ble_hs_unlock();
   2b4b6:	f7fc fa37 	bl	27928 <ble_hs_unlock>
   2b4ba:	e7d1      	b.n	2b460 <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2b4bc:	2305      	movs	r3, #5
   2b4be:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b4c0:	2308      	movs	r3, #8
   2b4c2:	7123      	strb	r3, [r4, #4]
   2b4c4:	e7f7      	b.n	2b4b6 <ble_sm_enc_info_rx+0x76>

0002b4c6 <ble_sm_pair_req_rx>:
{
   2b4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b4ca:	b082      	sub	sp, #8
   2b4cc:	4606      	mov	r6, r0
   2b4ce:	460d      	mov	r5, r1
   2b4d0:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   2b4d2:	2106      	movs	r1, #6
   2b4d4:	4628      	mov	r0, r5
   2b4d6:	f7fe f91e 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b4da:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b4dc:	b110      	cbz	r0, 2b4e4 <ble_sm_pair_req_rx+0x1e>
}
   2b4de:	b002      	add	sp, #8
   2b4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   2b4e4:	682b      	ldr	r3, [r5, #0]
   2b4e6:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   2b4e8:	f7fc fa1a 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   2b4ec:	ab01      	add	r3, sp, #4
   2b4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b4f2:	21ff      	movs	r1, #255	; 0xff
   2b4f4:	4630      	mov	r0, r6
   2b4f6:	f7ff fe89 	bl	2b20c <ble_sm_proc_find>
    if (proc != NULL) {
   2b4fa:	4605      	mov	r5, r0
   2b4fc:	b180      	cbz	r0, 2b520 <ble_sm_pair_req_rx+0x5a>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   2b4fe:	7b43      	ldrb	r3, [r0, #13]
   2b500:	2b08      	cmp	r3, #8
   2b502:	d007      	beq.n	2b514 <ble_sm_pair_req_rx+0x4e>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b504:	2308      	movs	r3, #8
   2b506:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   2b508:	f44f 6381 	mov.w	r3, #1032	; 0x408
   2b50c:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   2b50e:	f7fc fa0b 	bl	27928 <ble_hs_unlock>
            return;
   2b512:	e7e4      	b.n	2b4de <ble_sm_pair_req_rx+0x18>
        ble_sm_proc_remove(proc, prev);
   2b514:	9901      	ldr	r1, [sp, #4]
   2b516:	f7ff f871 	bl	2a5fc <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   2b51a:	4628      	mov	r0, r5
   2b51c:	f7ff fd82 	bl	2b024 <ble_sm_proc_free>
    ble_hs_unlock();
   2b520:	f7fc fa02 	bl	27928 <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   2b524:	4630      	mov	r0, r6
   2b526:	f7ff f8d2 	bl	2a6ce <ble_sm_chk_store_overflow>
    if (rc != 0) {
   2b52a:	b118      	cbz	r0, 2b534 <ble_sm_pair_req_rx+0x6e>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b52c:	2208      	movs	r2, #8
   2b52e:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   2b530:	6020      	str	r0, [r4, #0]
        return;
   2b532:	e7d4      	b.n	2b4de <ble_sm_pair_req_rx+0x18>
    ble_hs_lock();
   2b534:	f7fc f9f4 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   2b538:	f7ff fd7e 	bl	2b038 <ble_sm_proc_alloc>
    if (proc != NULL) {
   2b53c:	4605      	mov	r5, r0
   2b53e:	2800      	cmp	r0, #0
   2b540:	d048      	beq.n	2b5d4 <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   2b542:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   2b544:	2300      	movs	r3, #0
   2b546:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   2b548:	f7ff f888 	bl	2a65c <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   2b54c:	2301      	movs	r3, #1
   2b54e:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   2b550:	683b      	ldr	r3, [r7, #0]
   2b552:	f8c5 3011 	str.w	r3, [r5, #17]
   2b556:	88bb      	ldrh	r3, [r7, #4]
   2b558:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   2b55c:	8968      	ldrh	r0, [r5, #10]
   2b55e:	f7fd f853 	bl	28608 <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   2b562:	f890 8028 	ldrb.w	r8, [r0, #40]	; 0x28
   2b566:	f018 0801 	ands.w	r8, r8, #1
   2b56a:	d007      	beq.n	2b57c <ble_sm_pair_req_rx+0xb6>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   2b56c:	2307      	movs	r3, #7
   2b56e:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   2b570:	f240 4307 	movw	r3, #1031	; 0x407
   2b574:	6023      	str	r3, [r4, #0]
    key_size = 0;
   2b576:	2500      	movs	r5, #0
    proc_flags = 0;
   2b578:	46a8      	mov	r8, r5
   2b57a:	e02d      	b.n	2b5d8 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   2b57c:	78fb      	ldrb	r3, [r7, #3]
   2b57e:	2b06      	cmp	r3, #6
   2b580:	d806      	bhi.n	2b590 <ble_sm_pair_req_rx+0xca>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   2b582:	2306      	movs	r3, #6
   2b584:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   2b586:	f240 4306 	movw	r3, #1030	; 0x406
   2b58a:	6023      	str	r3, [r4, #0]
    key_size = 0;
   2b58c:	4645      	mov	r5, r8
   2b58e:	e023      	b.n	2b5d8 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   2b590:	2b10      	cmp	r3, #16
   2b592:	d906      	bls.n	2b5a2 <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   2b594:	230a      	movs	r3, #10
   2b596:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   2b598:	f240 430a 	movw	r3, #1034	; 0x40a
   2b59c:	6023      	str	r3, [r4, #0]
    key_size = 0;
   2b59e:	4645      	mov	r5, r8
   2b5a0:	e01a      	b.n	2b5d8 <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   2b5a2:	78b8      	ldrb	r0, [r7, #2]
   2b5a4:	f7ff f8de 	bl	2a764 <ble_sm_verify_auth_requirements>
   2b5a8:	b930      	cbnz	r0, 2b5b8 <ble_sm_pair_req_rx+0xf2>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   2b5aa:	2303      	movs	r3, #3
   2b5ac:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   2b5ae:	f240 4303 	movw	r3, #1027	; 0x403
   2b5b2:	6023      	str	r3, [r4, #0]
    key_size = 0;
   2b5b4:	4645      	mov	r5, r8
   2b5b6:	e00f      	b.n	2b5d8 <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   2b5b8:	4628      	mov	r0, r5
   2b5ba:	f7ff f8bf 	bl	2a73c <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   2b5be:	4628      	mov	r0, r5
   2b5c0:	f7ff f8ed 	bl	2a79e <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   2b5c4:	f895 8008 	ldrb.w	r8, [r5, #8]
            key_size = proc->key_size;
   2b5c8:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   2b5ca:	7d23      	ldrb	r3, [r4, #20]
   2b5cc:	f043 0301 	orr.w	r3, r3, #1
   2b5d0:	7523      	strb	r3, [r4, #20]
   2b5d2:	e001      	b.n	2b5d8 <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   2b5d4:	2500      	movs	r5, #0
    proc_flags = 0;
   2b5d6:	46a8      	mov	r8, r5
    ble_hs_unlock();
   2b5d8:	f7fc f9a6 	bl	27928 <ble_hs_unlock>
    if (res->app_status == 0) {
   2b5dc:	6823      	ldr	r3, [r4, #0]
   2b5de:	2b00      	cmp	r3, #0
   2b5e0:	f47f af7d 	bne.w	2b4de <ble_sm_pair_req_rx+0x18>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   2b5e4:	462a      	mov	r2, r5
   2b5e6:	4641      	mov	r1, r8
   2b5e8:	4630      	mov	r0, r6
   2b5ea:	f7ff fd8c 	bl	2b106 <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   2b5ee:	2800      	cmp	r0, #0
   2b5f0:	f43f af75 	beq.w	2b4de <ble_sm_pair_req_rx+0x18>
            res->app_status = rc;
   2b5f4:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   2b5f6:	7d23      	ldrb	r3, [r4, #20]
   2b5f8:	f36f 0300 	bfc	r3, #0, #1
   2b5fc:	7523      	strb	r3, [r4, #20]
   2b5fe:	e76e      	b.n	2b4de <ble_sm_pair_req_rx+0x18>

0002b600 <ble_sm_ioact_state>:
    switch (action) {
   2b600:	2804      	cmp	r0, #4
   2b602:	d00c      	beq.n	2b61e <ble_sm_ioact_state+0x1e>
   2b604:	d807      	bhi.n	2b616 <ble_sm_ioact_state+0x16>
   2b606:	3801      	subs	r0, #1
   2b608:	b2c0      	uxtb	r0, r0
   2b60a:	2802      	cmp	r0, #2
   2b60c:	d801      	bhi.n	2b612 <ble_sm_ioact_state+0x12>
        return BLE_SM_PROC_STATE_CONFIRM;
   2b60e:	2001      	movs	r0, #1
   2b610:	4770      	bx	lr
    switch (action) {
   2b612:	20ff      	movs	r0, #255	; 0xff
   2b614:	4770      	bx	lr
   2b616:	2805      	cmp	r0, #5
   2b618:	d103      	bne.n	2b622 <ble_sm_ioact_state+0x22>
        return BLE_SM_PROC_STATE_RANDOM;
   2b61a:	2002      	movs	r0, #2
   2b61c:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   2b61e:	200a      	movs	r0, #10
   2b620:	4770      	bx	lr
    switch (action) {
   2b622:	20ff      	movs	r0, #255	; 0xff
}
   2b624:	4770      	bx	lr

0002b626 <ble_sm_proc_can_advance>:
{
   2b626:	b510      	push	{r4, lr}
   2b628:	b082      	sub	sp, #8
   2b62a:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   2b62c:	f10d 0107 	add.w	r1, sp, #7
   2b630:	f7ff f8ab 	bl	2a78a <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   2b634:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2b638:	f7ff ffe2 	bl	2b600 <ble_sm_ioact_state>
   2b63c:	7b63      	ldrb	r3, [r4, #13]
   2b63e:	4298      	cmp	r0, r3
   2b640:	d106      	bne.n	2b650 <ble_sm_proc_can_advance+0x2a>
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   2b642:	7a23      	ldrb	r3, [r4, #8]
   2b644:	f003 0306 	and.w	r3, r3, #6
   2b648:	2b06      	cmp	r3, #6
   2b64a:	d004      	beq.n	2b656 <ble_sm_proc_can_advance+0x30>
    return 0;
   2b64c:	2000      	movs	r0, #0
   2b64e:	e000      	b.n	2b652 <ble_sm_proc_can_advance+0x2c>
        return 1;
   2b650:	2001      	movs	r0, #1
}
   2b652:	b002      	add	sp, #8
   2b654:	bd10      	pop	{r4, pc}
        return 1;
   2b656:	2001      	movs	r0, #1
   2b658:	e7fb      	b.n	2b652 <ble_sm_proc_can_advance+0x2c>

0002b65a <ble_sm_confirm_rx>:
{
   2b65a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b65c:	b083      	sub	sp, #12
   2b65e:	4606      	mov	r6, r0
   2b660:	460d      	mov	r5, r1
   2b662:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2b664:	2110      	movs	r1, #16
   2b666:	4628      	mov	r0, r5
   2b668:	f7fe f855 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b66c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b66e:	b138      	cbz	r0, 2b680 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b670:	2308      	movs	r3, #8
   2b672:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2b674:	7d23      	ldrb	r3, [r4, #20]
   2b676:	f043 0302 	orr.w	r3, r3, #2
   2b67a:	7523      	strb	r3, [r4, #20]
}
   2b67c:	b003      	add	sp, #12
   2b67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   2b680:	682b      	ldr	r3, [r5, #0]
   2b682:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   2b684:	f7fc f94c 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   2b688:	2300      	movs	r3, #0
   2b68a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b68e:	2101      	movs	r1, #1
   2b690:	4630      	mov	r0, r6
   2b692:	f7ff fdbb 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2b696:	4605      	mov	r5, r0
   2b698:	b1b0      	cbz	r0, 2b6c8 <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   2b69a:	6838      	ldr	r0, [r7, #0]
   2b69c:	6879      	ldr	r1, [r7, #4]
   2b69e:	68ba      	ldr	r2, [r7, #8]
   2b6a0:	68fb      	ldr	r3, [r7, #12]
   2b6a2:	f8c5 002e 	str.w	r0, [r5, #46]	; 0x2e
   2b6a6:	f8c5 1032 	str.w	r1, [r5, #50]	; 0x32
   2b6aa:	f8c5 2036 	str.w	r2, [r5, #54]	; 0x36
   2b6ae:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2b6b2:	7a2b      	ldrb	r3, [r5, #8]
   2b6b4:	f013 0f01 	tst.w	r3, #1
   2b6b8:	d00b      	beq.n	2b6d2 <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   2b6ba:	2302      	movs	r3, #2
   2b6bc:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   2b6be:	7d23      	ldrb	r3, [r4, #20]
   2b6c0:	f043 0301 	orr.w	r3, r3, #1
   2b6c4:	7523      	strb	r3, [r4, #20]
   2b6c6:	e001      	b.n	2b6cc <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   2b6c8:	2305      	movs	r3, #5
   2b6ca:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   2b6cc:	f7fc f92c 	bl	27928 <ble_hs_unlock>
   2b6d0:	e7d4      	b.n	2b67c <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   2b6d2:	f10d 0107 	add.w	r1, sp, #7
   2b6d6:	4628      	mov	r0, r5
   2b6d8:	f7ff f857 	bl	2a78a <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   2b6dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2b6e0:	f7ff ff8e 	bl	2b600 <ble_sm_ioact_state>
   2b6e4:	7b6b      	ldrb	r3, [r5, #13]
   2b6e6:	4298      	cmp	r0, r3
   2b6e8:	d009      	beq.n	2b6fe <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   2b6ea:	4628      	mov	r0, r5
   2b6ec:	f7ff ff9b 	bl	2b626 <ble_sm_proc_can_advance>
   2b6f0:	2800      	cmp	r0, #0
   2b6f2:	d0eb      	beq.n	2b6cc <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   2b6f4:	7d23      	ldrb	r3, [r4, #20]
   2b6f6:	f043 0301 	orr.w	r3, r3, #1
   2b6fa:	7523      	strb	r3, [r4, #20]
   2b6fc:	e7e6      	b.n	2b6cc <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   2b6fe:	7a2b      	ldrb	r3, [r5, #8]
   2b700:	f043 0304 	orr.w	r3, r3, #4
   2b704:	722b      	strb	r3, [r5, #8]
   2b706:	e7f0      	b.n	2b6ea <ble_sm_confirm_rx+0x90>

0002b708 <ble_sm_pair_rsp_rx>:
{
   2b708:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b70a:	b083      	sub	sp, #12
   2b70c:	4606      	mov	r6, r0
   2b70e:	460d      	mov	r5, r1
   2b710:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   2b712:	2106      	movs	r1, #6
   2b714:	4628      	mov	r0, r5
   2b716:	f7fd fffe 	bl	29716 <ble_hs_mbuf_pullup_base>
   2b71a:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2b71c:	b128      	cbz	r0, 2b72a <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   2b71e:	7d23      	ldrb	r3, [r4, #20]
   2b720:	f043 0302 	orr.w	r3, r3, #2
   2b724:	7523      	strb	r3, [r4, #20]
}
   2b726:	b003      	add	sp, #12
   2b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   2b72a:	682b      	ldr	r3, [r5, #0]
   2b72c:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   2b72e:	f7fc f8f7 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   2b732:	2300      	movs	r3, #0
   2b734:	2201      	movs	r2, #1
   2b736:	4619      	mov	r1, r3
   2b738:	4630      	mov	r0, r6
   2b73a:	f7ff fd67 	bl	2b20c <ble_sm_proc_find>
    if (proc != NULL) {
   2b73e:	4605      	mov	r5, r0
   2b740:	b168      	cbz	r0, 2b75e <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   2b742:	2302      	movs	r3, #2
   2b744:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   2b746:	683b      	ldr	r3, [r7, #0]
   2b748:	6183      	str	r3, [r0, #24]
   2b74a:	88bb      	ldrh	r3, [r7, #4]
   2b74c:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   2b74e:	78fb      	ldrb	r3, [r7, #3]
   2b750:	2b06      	cmp	r3, #6
   2b752:	d807      	bhi.n	2b764 <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   2b754:	2306      	movs	r3, #6
   2b756:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   2b758:	f240 4306 	movw	r3, #1030	; 0x406
   2b75c:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   2b75e:	f7fc f8e3 	bl	27928 <ble_hs_unlock>
   2b762:	e7e0      	b.n	2b726 <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   2b764:	2b10      	cmp	r3, #16
   2b766:	d905      	bls.n	2b774 <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   2b768:	230a      	movs	r3, #10
   2b76a:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   2b76c:	f240 430a 	movw	r3, #1034	; 0x40a
   2b770:	6023      	str	r3, [r4, #0]
   2b772:	e7f4      	b.n	2b75e <ble_sm_pair_rsp_rx+0x56>
        } else if (!ble_sm_verify_auth_requirements(rsp->authreq)) {
   2b774:	78b8      	ldrb	r0, [r7, #2]
   2b776:	f7fe fff5 	bl	2a764 <ble_sm_verify_auth_requirements>
   2b77a:	b928      	cbnz	r0, 2b788 <ble_sm_pair_rsp_rx+0x80>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   2b77c:	2303      	movs	r3, #3
   2b77e:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   2b780:	f240 4303 	movw	r3, #1027	; 0x403
   2b784:	6023      	str	r3, [r4, #0]
   2b786:	e7ea      	b.n	2b75e <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   2b788:	4628      	mov	r0, r5
   2b78a:	f7ff f808 	bl	2a79e <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   2b78e:	f10d 0107 	add.w	r1, sp, #7
   2b792:	4628      	mov	r0, r5
   2b794:	f7fe fff9 	bl	2a78a <ble_sm_io_action>
            if (rc != 0) {
   2b798:	b148      	cbz	r0, 2b7ae <ble_sm_pair_rsp_rx+0xa6>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   2b79a:	2303      	movs	r3, #3
   2b79c:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   2b79e:	f240 4303 	movw	r3, #1027	; 0x403
   2b7a2:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   2b7a4:	7d23      	ldrb	r3, [r4, #20]
   2b7a6:	f043 0302 	orr.w	r3, r3, #2
   2b7aa:	7523      	strb	r3, [r4, #20]
   2b7ac:	e7d7      	b.n	2b75e <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   2b7ae:	4628      	mov	r0, r5
   2b7b0:	f7fe ff99 	bl	2a6e6 <ble_sm_state_after_pair>
   2b7b4:	4606      	mov	r6, r0
   2b7b6:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   2b7b8:	f89d 7007 	ldrb.w	r7, [sp, #7]
   2b7bc:	4638      	mov	r0, r7
   2b7be:	f7ff ff1f 	bl	2b600 <ble_sm_ioact_state>
   2b7c2:	42b0      	cmp	r0, r6
   2b7c4:	d009      	beq.n	2b7da <ble_sm_pair_rsp_rx+0xd2>
                if (ble_sm_proc_can_advance(proc)) {
   2b7c6:	4628      	mov	r0, r5
   2b7c8:	f7ff ff2d 	bl	2b626 <ble_sm_proc_can_advance>
   2b7cc:	2800      	cmp	r0, #0
   2b7ce:	d0c6      	beq.n	2b75e <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   2b7d0:	7d23      	ldrb	r3, [r4, #20]
   2b7d2:	f043 0301 	orr.w	r3, r3, #1
   2b7d6:	7523      	strb	r3, [r4, #20]
   2b7d8:	e7c1      	b.n	2b75e <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   2b7da:	7227      	strb	r7, [r4, #8]
   2b7dc:	e7f3      	b.n	2b7c6 <ble_sm_pair_rsp_rx+0xbe>

0002b7de <ble_sm_process_result>:
{
   2b7de:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b7e0:	b083      	sub	sp, #12
   2b7e2:	4607      	mov	r7, r0
   2b7e4:	460c      	mov	r4, r1
    rm = 0;
   2b7e6:	2600      	movs	r6, #0
   2b7e8:	e032      	b.n	2b850 <ble_sm_process_result+0x72>
                ble_sm_exec(proc, res, res->state_arg);
   2b7ea:	6922      	ldr	r2, [r4, #16]
   2b7ec:	4621      	mov	r1, r4
   2b7ee:	f7ff f843 	bl	2a878 <ble_sm_exec>
   2b7f2:	e03c      	b.n	2b86e <ble_sm_process_result+0x90>
                rm = 1;
   2b7f4:	2601      	movs	r6, #1
   2b7f6:	e042      	b.n	2b87e <ble_sm_process_result+0xa0>
                ble_sm_proc_set_timer(proc);
   2b7f8:	4628      	mov	r0, r5
   2b7fa:	f7ff fb40 	bl	2ae7e <ble_sm_proc_set_timer>
   2b7fe:	e042      	b.n	2b886 <ble_sm_process_result+0xa8>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   2b800:	4638      	mov	r0, r7
   2b802:	f7ff fb7f 	bl	2af04 <ble_sm_pair_fail_tx>
   2b806:	e041      	b.n	2b88c <ble_sm_process_result+0xae>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore, res->bonded);
   2b808:	461a      	mov	r2, r3
   2b80a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2b80e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   2b812:	6821      	ldr	r1, [r4, #0]
   2b814:	4638      	mov	r0, r7
   2b816:	f7f9 fe5e 	bl	254d6 <ble_gap_enc_event>
   2b81a:	e03e      	b.n	2b89a <ble_sm_process_result+0xbc>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   2b81c:	f104 0108 	add.w	r1, r4, #8
   2b820:	4638      	mov	r0, r7
   2b822:	f7f9 fe3f 	bl	254a4 <ble_gap_passkey_event>
   2b826:	e03d      	b.n	2b8a4 <ble_sm_process_result+0xc6>
            ble_sm_persist_keys(proc);
   2b828:	4628      	mov	r0, r5
   2b82a:	f7ff fb87 	bl	2af3c <ble_sm_persist_keys>
        if (rm) {
   2b82e:	2e00      	cmp	r6, #0
   2b830:	d142      	bne.n	2b8b8 <ble_sm_process_result+0xda>
        if (!res->execute) {
   2b832:	7d23      	ldrb	r3, [r4, #20]
   2b834:	f013 0f01 	tst.w	r3, #1
   2b838:	d041      	beq.n	2b8be <ble_sm_process_result+0xe0>
        memset(res, 0, sizeof *res);
   2b83a:	2300      	movs	r3, #0
   2b83c:	6023      	str	r3, [r4, #0]
   2b83e:	6063      	str	r3, [r4, #4]
   2b840:	60a3      	str	r3, [r4, #8]
   2b842:	60e3      	str	r3, [r4, #12]
   2b844:	6123      	str	r3, [r4, #16]
   2b846:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   2b848:	7d23      	ldrb	r3, [r4, #20]
   2b84a:	f043 0301 	orr.w	r3, r3, #1
   2b84e:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   2b850:	f7fc f866 	bl	27920 <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   2b854:	ab01      	add	r3, sp, #4
   2b856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b85a:	21ff      	movs	r1, #255	; 0xff
   2b85c:	4638      	mov	r0, r7
   2b85e:	f7ff fcd5 	bl	2b20c <ble_sm_proc_find>
        if (proc != NULL) {
   2b862:	4605      	mov	r5, r0
   2b864:	b178      	cbz	r0, 2b886 <ble_sm_process_result+0xa8>
            if (res->execute) {
   2b866:	7d23      	ldrb	r3, [r4, #20]
   2b868:	f013 0f01 	tst.w	r3, #1
   2b86c:	d1bd      	bne.n	2b7ea <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   2b86e:	6823      	ldr	r3, [r4, #0]
   2b870:	b103      	cbz	r3, 2b874 <ble_sm_process_result+0x96>
                rm = 1;
   2b872:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   2b874:	7b6b      	ldrb	r3, [r5, #13]
   2b876:	2bff      	cmp	r3, #255	; 0xff
   2b878:	d0bc      	beq.n	2b7f4 <ble_sm_process_result+0x16>
            if (rm) {
   2b87a:	2e00      	cmp	r6, #0
   2b87c:	d0bc      	beq.n	2b7f8 <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   2b87e:	9901      	ldr	r1, [sp, #4]
   2b880:	4628      	mov	r0, r5
   2b882:	f7fe febb 	bl	2a5fc <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   2b886:	7921      	ldrb	r1, [r4, #4]
   2b888:	2900      	cmp	r1, #0
   2b88a:	d1b9      	bne.n	2b800 <ble_sm_process_result+0x22>
        ble_hs_unlock();
   2b88c:	f7fc f84c 	bl	27928 <ble_hs_unlock>
        if (proc == NULL) {
   2b890:	b1ad      	cbz	r5, 2b8be <ble_sm_process_result+0xe0>
        if (res->enc_cb) {
   2b892:	7d23      	ldrb	r3, [r4, #20]
   2b894:	f013 0f02 	tst.w	r3, #2
   2b898:	d1b6      	bne.n	2b808 <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   2b89a:	6823      	ldr	r3, [r4, #0]
   2b89c:	b913      	cbnz	r3, 2b8a4 <ble_sm_process_result+0xc6>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   2b89e:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   2b8a0:	2b00      	cmp	r3, #0
   2b8a2:	d1bb      	bne.n	2b81c <ble_sm_process_result+0x3e>
        if (res->app_status == 0    &&
   2b8a4:	6823      	ldr	r3, [r4, #0]
   2b8a6:	2b00      	cmp	r3, #0
   2b8a8:	d1c1      	bne.n	2b82e <ble_sm_process_result+0x50>
   2b8aa:	2e00      	cmp	r6, #0
   2b8ac:	d0bf      	beq.n	2b82e <ble_sm_process_result+0x50>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   2b8ae:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   2b8b0:	f013 0f20 	tst.w	r3, #32
   2b8b4:	d0bb      	beq.n	2b82e <ble_sm_process_result+0x50>
   2b8b6:	e7b7      	b.n	2b828 <ble_sm_process_result+0x4a>
            ble_sm_proc_free(proc);
   2b8b8:	4628      	mov	r0, r5
   2b8ba:	f7ff fbb3 	bl	2b024 <ble_sm_proc_free>
}
   2b8be:	b003      	add	sp, #12
   2b8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002b8c2 <ble_sm_enc_event_rx>:
{
   2b8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b8c6:	b088      	sub	sp, #32
   2b8c8:	4606      	mov	r6, r0
   2b8ca:	460d      	mov	r5, r1
   2b8cc:	4617      	mov	r7, r2
    memset(&res, 0, sizeof res);
   2b8ce:	2400      	movs	r4, #0
   2b8d0:	9402      	str	r4, [sp, #8]
   2b8d2:	9403      	str	r4, [sp, #12]
   2b8d4:	9404      	str	r4, [sp, #16]
   2b8d6:	9405      	str	r4, [sp, #20]
   2b8d8:	9406      	str	r4, [sp, #24]
   2b8da:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   2b8dc:	f7fc f820 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   2b8e0:	4623      	mov	r3, r4
   2b8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b8e6:	21ff      	movs	r1, #255	; 0xff
   2b8e8:	4630      	mov	r0, r6
   2b8ea:	f7ff fc8f 	bl	2b20c <ble_sm_proc_find>
    if (proc != NULL) {
   2b8ee:	4604      	mov	r4, r0
   2b8f0:	2800      	cmp	r0, #0
   2b8f2:	d03c      	beq.n	2b96e <ble_sm_enc_event_rx+0xac>
        switch (proc->state) {
   2b8f4:	7b43      	ldrb	r3, [r0, #13]
   2b8f6:	2b05      	cmp	r3, #5
   2b8f8:	d00a      	beq.n	2b910 <ble_sm_enc_event_rx+0x4e>
   2b8fa:	2b06      	cmp	r3, #6
   2b8fc:	d024      	beq.n	2b948 <ble_sm_enc_event_rx+0x86>
            proc->state = BLE_SM_PROC_STATE_NONE;
   2b8fe:	23ff      	movs	r3, #255	; 0xff
   2b900:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   2b902:	2308      	movs	r3, #8
   2b904:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   2b908:	2300      	movs	r3, #0
    bonded = 0;
   2b90a:	4698      	mov	r8, r3
    authenticated = 0;
   2b90c:	461a      	mov	r2, r3
            break;
   2b90e:	e031      	b.n	2b974 <ble_sm_enc_event_rx+0xb2>
            if (evt_status == 0) {
   2b910:	b9b5      	cbnz	r5, 2b940 <ble_sm_enc_event_rx+0x7e>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   2b912:	2307      	movs	r3, #7
   2b914:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   2b916:	7a03      	ldrb	r3, [r0, #8]
   2b918:	f013 0f01 	tst.w	r3, #1
   2b91c:	d001      	beq.n	2b922 <ble_sm_enc_event_rx+0x60>
                    proc->rx_key_flags == 0) {
   2b91e:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   2b920:	b92b      	cbnz	r3, 2b92e <ble_sm_enc_event_rx+0x6c>
                    res.execute = 1;
   2b922:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2b926:	f043 0301 	orr.w	r3, r3, #1
   2b92a:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   2b92e:	7be3      	ldrb	r3, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   2b930:	7a22      	ldrb	r2, [r4, #8]
   2b932:	f012 0f08 	tst.w	r2, #8
   2b936:	d12c      	bne.n	2b992 <ble_sm_enc_event_rx+0xd0>
    bonded = 0;
   2b938:	f04f 0800 	mov.w	r8, #0
    authenticated = 0;
   2b93c:	4642      	mov	r2, r8
   2b93e:	e019      	b.n	2b974 <ble_sm_enc_event_rx+0xb2>
                proc->state = BLE_SM_PROC_STATE_NONE;
   2b940:	23ff      	movs	r3, #255	; 0xff
   2b942:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   2b944:	2300      	movs	r3, #0
   2b946:	e7f3      	b.n	2b930 <ble_sm_enc_event_rx+0x6e>
            proc->state = BLE_SM_PROC_STATE_NONE;
   2b948:	23ff      	movs	r3, #255	; 0xff
   2b94a:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   2b94c:	7a03      	ldrb	r3, [r0, #8]
   2b94e:	f013 0f08 	tst.w	r3, #8
   2b952:	d10a      	bne.n	2b96a <ble_sm_enc_event_rx+0xa8>
    authenticated = 0;
   2b954:	2200      	movs	r2, #0
            res.restore = 1;
   2b956:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2b95a:	f043 0308 	orr.w	r3, r3, #8
   2b95e:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   2b962:	7be3      	ldrb	r3, [r4, #15]
            bonded = 1;
   2b964:	f04f 0801 	mov.w	r8, #1
            break;
   2b968:	e004      	b.n	2b974 <ble_sm_enc_event_rx+0xb2>
                authenticated = 1;
   2b96a:	2201      	movs	r2, #1
   2b96c:	e7f3      	b.n	2b956 <ble_sm_enc_event_rx+0x94>
    key_size = 0;
   2b96e:	2300      	movs	r3, #0
    bonded = 0;
   2b970:	4698      	mov	r8, r3
    authenticated = 0;
   2b972:	461a      	mov	r2, r3
    if (evt_status == 0) {
   2b974:	b18d      	cbz	r5, 2b99a <ble_sm_enc_event_rx+0xd8>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   2b976:	b114      	cbz	r4, 2b97e <ble_sm_enc_event_rx+0xbc>
   2b978:	7b63      	ldrb	r3, [r4, #13]
   2b97a:	2bff      	cmp	r3, #255	; 0xff
   2b97c:	d116      	bne.n	2b9ac <ble_sm_enc_event_rx+0xea>
        res.enc_cb = 1;
   2b97e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2b982:	f043 0302 	orr.w	r3, r3, #2
   2b986:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   2b98a:	b16d      	cbz	r5, 2b9a8 <ble_sm_enc_event_rx+0xe6>
   2b98c:	f505 7500 	add.w	r5, r5, #512	; 0x200
   2b990:	e00b      	b.n	2b9aa <ble_sm_enc_event_rx+0xe8>
    bonded = 0;
   2b992:	f04f 0800 	mov.w	r8, #0
                authenticated = 1;
   2b996:	2201      	movs	r2, #1
   2b998:	e7ec      	b.n	2b974 <ble_sm_enc_event_rx+0xb2>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   2b99a:	9300      	str	r3, [sp, #0]
   2b99c:	4643      	mov	r3, r8
   2b99e:	4639      	mov	r1, r7
   2b9a0:	4630      	mov	r0, r6
   2b9a2:	f7ff f814 	bl	2a9ce <ble_sm_update_sec_state>
   2b9a6:	e7e6      	b.n	2b976 <ble_sm_enc_event_rx+0xb4>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   2b9a8:	2500      	movs	r5, #0
   2b9aa:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   2b9ac:	f7fb ffbc 	bl	27928 <ble_hs_unlock>
    res.bonded = bonded;
   2b9b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2b9b4:	f368 0382 	bfi	r3, r8, #2, #1
   2b9b8:	f88d 301c 	strb.w	r3, [sp, #28]
    ble_sm_process_result(conn_handle, &res);
   2b9bc:	a902      	add	r1, sp, #8
   2b9be:	4630      	mov	r0, r6
   2b9c0:	f7ff ff0d 	bl	2b7de <ble_sm_process_result>
}
   2b9c4:	b008      	add	sp, #32
   2b9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0002b9cc <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   2b9cc:	b570      	push	{r4, r5, r6, lr}
   2b9ce:	b088      	sub	sp, #32
   2b9d0:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);
   2b9d2:	4a1b      	ldr	r2, [pc, #108]	; (2ba40 <ble_sm_rx+0x74>)
   2b9d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2b9d6:	3301      	adds	r3, #1
   2b9d8:	6313      	str	r3, [r2, #48]	; 0x30

    conn_handle = ble_l2cap_get_conn_handle(chan);
   2b9da:	f7fe fa3c 	bl	29e56 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   2b9de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b9e2:	4298      	cmp	r0, r3
   2b9e4:	d026      	beq.n	2ba34 <ble_sm_rx+0x68>
   2b9e6:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   2b9e8:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   2b9ec:	f10d 0307 	add.w	r3, sp, #7
   2b9f0:	2201      	movs	r2, #1
   2b9f2:	2100      	movs	r1, #0
   2b9f4:	6920      	ldr	r0, [r4, #16]
   2b9f6:	f7e9 fee1 	bl	157bc <os_mbuf_copydata>
    if (rc != 0) {
   2b9fa:	b9e8      	cbnz	r0, 2ba38 <ble_sm_rx+0x6c>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   2b9fc:	2101      	movs	r1, #1
   2b9fe:	6920      	ldr	r0, [r4, #16]
   2ba00:	f7e9 ff09 	bl	15816 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   2ba04:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2ba08:	f7fe fdee 	bl	2a5e8 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   2ba0c:	4604      	mov	r4, r0
   2ba0e:	b1a8      	cbz	r0, 2ba3c <ble_sm_rx+0x70>
        memset(&res, 0, sizeof res);
   2ba10:	2300      	movs	r3, #0
   2ba12:	9302      	str	r3, [sp, #8]
   2ba14:	9303      	str	r3, [sp, #12]
   2ba16:	9304      	str	r3, [sp, #16]
   2ba18:	9305      	str	r3, [sp, #20]
   2ba1a:	9306      	str	r3, [sp, #24]
   2ba1c:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   2ba1e:	aa02      	add	r2, sp, #8
   2ba20:	4631      	mov	r1, r6
   2ba22:	4628      	mov	r0, r5
   2ba24:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   2ba26:	a902      	add	r1, sp, #8
   2ba28:	4628      	mov	r0, r5
   2ba2a:	f7ff fed8 	bl	2b7de <ble_sm_process_result>
        rc = res.app_status;
   2ba2e:	9802      	ldr	r0, [sp, #8]
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   2ba30:	b008      	add	sp, #32
   2ba32:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
   2ba34:	2007      	movs	r0, #7
   2ba36:	e7fb      	b.n	2ba30 <ble_sm_rx+0x64>
        return BLE_HS_EBADDATA;
   2ba38:	200a      	movs	r0, #10
   2ba3a:	e7f9      	b.n	2ba30 <ble_sm_rx+0x64>
        rc = BLE_HS_ENOTSUP;
   2ba3c:	2008      	movs	r0, #8
   2ba3e:	e7f7      	b.n	2ba30 <ble_sm_rx+0x64>
   2ba40:	100033c4 	.word	0x100033c4

0002ba44 <ble_sm_enc_change_rx>:
{
   2ba44:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   2ba46:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   2ba48:	f002 0201 	and.w	r2, r2, #1
   2ba4c:	7801      	ldrb	r1, [r0, #0]
   2ba4e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2ba52:	f7ff ff36 	bl	2b8c2 <ble_sm_enc_event_rx>
}
   2ba56:	bd08      	pop	{r3, pc}

0002ba58 <ble_sm_enc_key_refresh_rx>:
{
   2ba58:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   2ba5a:	2201      	movs	r2, #1
   2ba5c:	7801      	ldrb	r1, [r0, #0]
   2ba5e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   2ba62:	f7ff ff2e 	bl	2b8c2 <ble_sm_enc_event_rx>
}
   2ba66:	bd08      	pop	{r3, pc}

0002ba68 <ble_sm_ltk_req_rx>:
{
   2ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ba6a:	b0a9      	sub	sp, #164	; 0xa4
   2ba6c:	4605      	mov	r5, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   2ba6e:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   2ba72:	b2be      	uxth	r6, r7
    memset(&res, 0, sizeof res);
   2ba74:	2400      	movs	r4, #0
   2ba76:	9407      	str	r4, [sp, #28]
   2ba78:	9408      	str	r4, [sp, #32]
   2ba7a:	9409      	str	r4, [sp, #36]	; 0x24
   2ba7c:	940a      	str	r4, [sp, #40]	; 0x28
   2ba7e:	940b      	str	r4, [sp, #44]	; 0x2c
   2ba80:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   2ba82:	f7fb ff4d 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   2ba86:	4623      	mov	r3, r4
   2ba88:	4622      	mov	r2, r4
   2ba8a:	21ff      	movs	r1, #255	; 0xff
   2ba8c:	4630      	mov	r0, r6
   2ba8e:	f7ff fbbd 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2ba92:	b168      	cbz	r0, 2bab0 <ble_sm_ltk_req_rx+0x48>
   2ba94:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   2ba96:	7b43      	ldrb	r3, [r0, #13]
   2ba98:	2b08      	cmp	r3, #8
   2ba9a:	d01c      	beq.n	2bad6 <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   2ba9c:	2b03      	cmp	r3, #3
   2ba9e:	d13b      	bne.n	2bb18 <ble_sm_ltk_req_rx+0xb0>
        res.execute = 1;
   2baa0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2baa4:	f043 0301 	orr.w	r3, r3, #1
   2baa8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   2baac:	2700      	movs	r7, #0
   2baae:	e026      	b.n	2bafe <ble_sm_ltk_req_rx+0x96>
        proc = ble_sm_proc_alloc();
   2bab0:	f7ff fac2 	bl	2b038 <ble_sm_proc_alloc>
        if (proc == NULL) {
   2bab4:	4604      	mov	r4, r0
   2bab6:	b158      	cbz	r0, 2bad0 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   2bab8:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   2baba:	2304      	movs	r3, #4
   2babc:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   2babe:	f7fe fdcd 	bl	2a65c <ble_sm_insert>
            res.execute = 1;
   2bac2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2bac6:	f043 0301 	orr.w	r3, r3, #1
   2baca:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    if (restore) {
   2bace:	e00a      	b.n	2bae6 <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   2bad0:	2306      	movs	r3, #6
   2bad2:	9307      	str	r3, [sp, #28]
    if (restore) {
   2bad4:	e007      	b.n	2bae6 <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   2bad6:	2304      	movs	r3, #4
   2bad8:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   2bada:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2bade:	f043 0301 	orr.w	r3, r3, #1
   2bae2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   2bae6:	4630      	mov	r0, r6
   2bae8:	f7fc fd8e 	bl	28608 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   2baec:	a90d      	add	r1, sp, #52	; 0x34
   2baee:	f7fc fdab 	bl	28648 <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   2baf2:	9910      	ldr	r1, [sp, #64]	; 0x40
   2baf4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   2baf6:	9005      	str	r0, [sp, #20]
   2baf8:	f8ad 1018 	strh.w	r1, [sp, #24]
   2bafc:	2701      	movs	r7, #1
    ble_hs_unlock();
   2bafe:	f7fb ff13 	bl	27928 <ble_hs_unlock>
    if (proc == NULL) {
   2bb02:	b17c      	cbz	r4, 2bb24 <ble_sm_ltk_req_rx+0xbc>
    if (res.app_status == 0) {
   2bb04:	9b07      	ldr	r3, [sp, #28]
   2bb06:	b903      	cbnz	r3, 2bb0a <ble_sm_ltk_req_rx+0xa2>
        if (restore) {
   2bb08:	b977      	cbnz	r7, 2bb28 <ble_sm_ltk_req_rx+0xc0>
    ble_sm_process_result(conn_handle, &res);
   2bb0a:	a907      	add	r1, sp, #28
   2bb0c:	4630      	mov	r0, r6
   2bb0e:	f7ff fe66 	bl	2b7de <ble_sm_process_result>
    return 0;
   2bb12:	2000      	movs	r0, #0
}
   2bb14:	b029      	add	sp, #164	; 0xa4
   2bb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   2bb18:	4630      	mov	r0, r6
   2bb1a:	f7ff f961 	bl	2ade0 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   2bb1e:	2700      	movs	r7, #0
        proc = NULL;
   2bb20:	463c      	mov	r4, r7
   2bb22:	e7ec      	b.n	2bafe <ble_sm_ltk_req_rx+0x96>
        return res.app_status;
   2bb24:	9807      	ldr	r0, [sp, #28]
   2bb26:	e7f5      	b.n	2bb14 <ble_sm_ltk_req_rx+0xac>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   2bb28:	ab14      	add	r3, sp, #80	; 0x50
   2bb2a:	9302      	str	r3, [sp, #8]
   2bb2c:	ab05      	add	r3, sp, #20
   2bb2e:	9301      	str	r3, [sp, #4]
   2bb30:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   2bb34:	9300      	str	r3, [sp, #0]
   2bb36:	f8d5 2003 	ldr.w	r2, [r5, #3]
   2bb3a:	f8d5 3007 	ldr.w	r3, [r5, #7]
   2bb3e:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   2bb42:	f7ff fa89 	bl	2b058 <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   2bb46:	b910      	cbnz	r0, 2bb4e <ble_sm_ltk_req_rx+0xe6>
                res.state_arg = &value_sec;
   2bb48:	ab14      	add	r3, sp, #80	; 0x50
   2bb4a:	930b      	str	r3, [sp, #44]	; 0x2c
   2bb4c:	e7dd      	b.n	2bb0a <ble_sm_ltk_req_rx+0xa2>
                res.state_arg = NULL;
   2bb4e:	2300      	movs	r3, #0
   2bb50:	930b      	str	r3, [sp, #44]	; 0x2c
   2bb52:	e7da      	b.n	2bb0a <ble_sm_ltk_req_rx+0xa2>

0002bb54 <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2bb54:	7a03      	ldrb	r3, [r0, #8]
   2bb56:	f013 0f01 	tst.w	r3, #1
   2bb5a:	d001      	beq.n	2bb60 <ble_sm_our_pair_rand+0xc>
        return proc->randm;
   2bb5c:	303e      	adds	r0, #62	; 0x3e
   2bb5e:	4770      	bx	lr
        return proc->rands;
   2bb60:	304e      	adds	r0, #78	; 0x4e
}
   2bb62:	4770      	bx	lr

0002bb64 <ble_sm_pair_exec>:
{
   2bb64:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bb66:	b083      	sub	sp, #12
   2bb68:	4604      	mov	r4, r0
   2bb6a:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   2bb6c:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   2bb6e:	f013 0501 	ands.w	r5, r3, #1
   2bb72:	d01d      	beq.n	2bbb0 <ble_sm_pair_exec+0x4c>
   2bb74:	2001      	movs	r0, #1
   2bb76:	aa01      	add	r2, sp, #4
   2bb78:	2106      	movs	r1, #6
   2bb7a:	f000 f9df 	bl	2bf3c <ble_sm_cmd_get>
    if (cmd == NULL) {
   2bb7e:	4607      	mov	r7, r0
   2bb80:	2800      	cmp	r0, #0
   2bb82:	d03f      	beq.n	2bc04 <ble_sm_pair_exec+0xa0>
    if (is_req) {
   2bb84:	b1b5      	cbz	r5, 2bbb4 <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   2bb86:	4620      	mov	r0, r4
   2bb88:	f7fe fdc8 	bl	2a71c <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   2bb8c:	4623      	mov	r3, r4
   2bb8e:	f853 2f11 	ldr.w	r2, [r3, #17]!
   2bb92:	603a      	str	r2, [r7, #0]
   2bb94:	889b      	ldrh	r3, [r3, #4]
   2bb96:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   2bb98:	9901      	ldr	r1, [sp, #4]
   2bb9a:	8960      	ldrh	r0, [r4, #10]
   2bb9c:	f000 f9e8 	bl	2bf70 <ble_sm_tx>
    if (rc != 0) {
   2bba0:	4603      	mov	r3, r0
   2bba2:	b300      	cbz	r0, 2bbe6 <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   2bba4:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   2bba6:	b90d      	cbnz	r5, 2bbac <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2bba8:	2308      	movs	r3, #8
   2bbaa:	7133      	strb	r3, [r6, #4]
}
   2bbac:	b003      	add	sp, #12
   2bbae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   2bbb0:	2002      	movs	r0, #2
   2bbb2:	e7e0      	b.n	2bb76 <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   2bbb4:	4623      	mov	r3, r4
   2bbb6:	f853 2f18 	ldr.w	r2, [r3, #24]!
   2bbba:	6002      	str	r2, [r0, #0]
   2bbbc:	889b      	ldrh	r3, [r3, #4]
   2bbbe:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   2bbc0:	4620      	mov	r0, r4
   2bbc2:	f7fe fd90 	bl	2a6e6 <ble_sm_state_after_pair>
   2bbc6:	7360      	strb	r0, [r4, #13]
        rc = ble_sm_io_action(proc, &ioact);
   2bbc8:	f10d 0103 	add.w	r1, sp, #3
   2bbcc:	4620      	mov	r0, r4
   2bbce:	f7fe fddc 	bl	2a78a <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   2bbd2:	f89d 7003 	ldrb.w	r7, [sp, #3]
   2bbd6:	4638      	mov	r0, r7
   2bbd8:	f7ff fd12 	bl	2b600 <ble_sm_ioact_state>
   2bbdc:	7b63      	ldrb	r3, [r4, #13]
   2bbde:	4298      	cmp	r0, r3
   2bbe0:	d1da      	bne.n	2bb98 <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   2bbe2:	7237      	strb	r7, [r6, #8]
   2bbe4:	e7d8      	b.n	2bb98 <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   2bbe6:	4620      	mov	r0, r4
   2bbe8:	f7ff ffb4 	bl	2bb54 <ble_sm_our_pair_rand>
   2bbec:	f7ff faca 	bl	2b184 <ble_sm_gen_pair_rand>
   2bbf0:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   2bbf2:	2800      	cmp	r0, #0
   2bbf4:	d0da      	beq.n	2bbac <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2bbf6:	2308      	movs	r3, #8
   2bbf8:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   2bbfa:	7d33      	ldrb	r3, [r6, #20]
   2bbfc:	f043 0302 	orr.w	r3, r3, #2
   2bc00:	7533      	strb	r3, [r6, #20]
        return;
   2bc02:	e7d3      	b.n	2bbac <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   2bc04:	2306      	movs	r3, #6
   2bc06:	e7cd      	b.n	2bba4 <ble_sm_pair_exec+0x40>

0002bc08 <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2bc08:	7a03      	ldrb	r3, [r0, #8]
   2bc0a:	f013 0f01 	tst.w	r3, #1
   2bc0e:	d001      	beq.n	2bc14 <ble_sm_peer_pair_rand+0xc>
        return proc->rands;
   2bc10:	304e      	adds	r0, #78	; 0x4e
   2bc12:	4770      	bx	lr
        return proc->randm;
   2bc14:	303e      	adds	r0, #62	; 0x3e
}
   2bc16:	4770      	bx	lr

0002bc18 <ble_sm_random_rx>:
{
   2bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc1a:	4606      	mov	r6, r0
   2bc1c:	460d      	mov	r5, r1
   2bc1e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2bc20:	2110      	movs	r1, #16
   2bc22:	4628      	mov	r0, r5
   2bc24:	f7fd fd77 	bl	29716 <ble_hs_mbuf_pullup_base>
   2bc28:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2bc2a:	b130      	cbz	r0, 2bc3a <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2bc2c:	2308      	movs	r3, #8
   2bc2e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2bc30:	7d23      	ldrb	r3, [r4, #20]
   2bc32:	f043 0302 	orr.w	r3, r3, #2
   2bc36:	7523      	strb	r3, [r4, #20]
}
   2bc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   2bc3a:	682b      	ldr	r3, [r5, #0]
   2bc3c:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2bc3e:	f7fb fe6f 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   2bc42:	2300      	movs	r3, #0
   2bc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bc48:	2102      	movs	r1, #2
   2bc4a:	4630      	mov	r0, r6
   2bc4c:	f7ff fade 	bl	2b20c <ble_sm_proc_find>
    if (proc == NULL) {
   2bc50:	4606      	mov	r6, r0
   2bc52:	b190      	cbz	r0, 2bc7a <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   2bc54:	f7ff ffd8 	bl	2bc08 <ble_sm_peer_pair_rand>
   2bc58:	682f      	ldr	r7, [r5, #0]
   2bc5a:	6869      	ldr	r1, [r5, #4]
   2bc5c:	68aa      	ldr	r2, [r5, #8]
   2bc5e:	68eb      	ldr	r3, [r5, #12]
   2bc60:	6007      	str	r7, [r0, #0]
   2bc62:	6041      	str	r1, [r0, #4]
   2bc64:	6082      	str	r2, [r0, #8]
   2bc66:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   2bc68:	7a33      	ldrb	r3, [r6, #8]
   2bc6a:	f013 0f10 	tst.w	r3, #16
   2bc6e:	d106      	bne.n	2bc7e <ble_sm_random_rx+0x66>
            ble_sm_lgcy_random_rx(proc, res);
   2bc70:	4621      	mov	r1, r4
   2bc72:	4630      	mov	r0, r6
   2bc74:	f000 fa93 	bl	2c19e <ble_sm_lgcy_random_rx>
   2bc78:	e001      	b.n	2bc7e <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   2bc7a:	2305      	movs	r3, #5
   2bc7c:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   2bc7e:	f7fb fe53 	bl	27928 <ble_hs_unlock>
   2bc82:	e7d9      	b.n	2bc38 <ble_sm_random_rx+0x20>

0002bc84 <ble_sm_timer>:
{
   2bc84:	b530      	push	{r4, r5, lr}
   2bc86:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   2bc88:	4668      	mov	r0, sp
   2bc8a:	f7ff f903 	bl	2ae94 <ble_sm_extract_expired>
   2bc8e:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   2bc90:	e004      	b.n	2bc9c <ble_sm_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   2bc92:	f8cd d004 	str.w	sp, [sp, #4]
        ble_sm_proc_free(proc);
   2bc96:	4620      	mov	r0, r4
   2bc98:	f7ff f9c4 	bl	2b024 <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   2bc9c:	9c00      	ldr	r4, [sp, #0]
   2bc9e:	b15c      	cbz	r4, 2bcb8 <ble_sm_timer+0x34>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0, 0);
   2bca0:	2300      	movs	r3, #0
   2bca2:	461a      	mov	r2, r3
   2bca4:	210d      	movs	r1, #13
   2bca6:	8960      	ldrh	r0, [r4, #10]
   2bca8:	f7f9 fc15 	bl	254d6 <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   2bcac:	9b00      	ldr	r3, [sp, #0]
   2bcae:	681b      	ldr	r3, [r3, #0]
   2bcb0:	9300      	str	r3, [sp, #0]
   2bcb2:	2b00      	cmp	r3, #0
   2bcb4:	d1ef      	bne.n	2bc96 <ble_sm_timer+0x12>
   2bcb6:	e7ec      	b.n	2bc92 <ble_sm_timer+0xe>
}
   2bcb8:	4628      	mov	r0, r5
   2bcba:	b003      	add	sp, #12
   2bcbc:	bd30      	pop	{r4, r5, pc}

0002bcbe <ble_sm_pair_initiate>:
{
   2bcbe:	b530      	push	{r4, r5, lr}
   2bcc0:	b087      	sub	sp, #28
   2bcc2:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   2bcc4:	2400      	movs	r4, #0
   2bcc6:	9400      	str	r4, [sp, #0]
   2bcc8:	9401      	str	r4, [sp, #4]
   2bcca:	9402      	str	r4, [sp, #8]
   2bccc:	9403      	str	r4, [sp, #12]
   2bcce:	9404      	str	r4, [sp, #16]
   2bcd0:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   2bcd2:	f7fb fe25 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   2bcd6:	4623      	mov	r3, r4
   2bcd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bcdc:	21ff      	movs	r1, #255	; 0xff
   2bcde:	4628      	mov	r0, r5
   2bce0:	f7ff fa94 	bl	2b20c <ble_sm_proc_find>
   2bce4:	4604      	mov	r4, r0
    ble_hs_unlock();
   2bce6:	f7fb fe1f 	bl	27928 <ble_hs_unlock>
    if (proc != NULL) {
   2bcea:	bb2c      	cbnz	r4, 2bd38 <ble_sm_pair_initiate+0x7a>
    rc = ble_sm_chk_store_overflow(conn_handle);
   2bcec:	4628      	mov	r0, r5
   2bcee:	f7fe fcee 	bl	2a6ce <ble_sm_chk_store_overflow>
    if (rc != 0) {
   2bcf2:	bb10      	cbnz	r0, 2bd3a <ble_sm_pair_initiate+0x7c>
    proc = ble_sm_proc_alloc();
   2bcf4:	f7ff f9a0 	bl	2b038 <ble_sm_proc_alloc>
    if (proc == NULL) {
   2bcf8:	4604      	mov	r4, r0
   2bcfa:	b1d0      	cbz	r0, 2bd32 <ble_sm_pair_initiate+0x74>
        proc->conn_handle = conn_handle;
   2bcfc:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   2bcfe:	2300      	movs	r3, #0
   2bd00:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   2bd02:	7a03      	ldrb	r3, [r0, #8]
   2bd04:	f043 0301 	orr.w	r3, r3, #1
   2bd08:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   2bd0a:	f7fb fe09 	bl	27920 <ble_hs_lock>
        ble_sm_insert(proc);
   2bd0e:	4620      	mov	r0, r4
   2bd10:	f7fe fca4 	bl	2a65c <ble_sm_insert>
        ble_hs_unlock();
   2bd14:	f7fb fe08 	bl	27928 <ble_hs_unlock>
        res.execute = 1;
   2bd18:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2bd1c:	f043 0301 	orr.w	r3, r3, #1
   2bd20:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   2bd24:	b11c      	cbz	r4, 2bd2e <ble_sm_pair_initiate+0x70>
        ble_sm_process_result(conn_handle, &res);
   2bd26:	4669      	mov	r1, sp
   2bd28:	4628      	mov	r0, r5
   2bd2a:	f7ff fd58 	bl	2b7de <ble_sm_process_result>
    return res.app_status;
   2bd2e:	9800      	ldr	r0, [sp, #0]
   2bd30:	e003      	b.n	2bd3a <ble_sm_pair_initiate+0x7c>
        res.app_status = BLE_HS_ENOMEM;
   2bd32:	2306      	movs	r3, #6
   2bd34:	9300      	str	r3, [sp, #0]
   2bd36:	e7f5      	b.n	2bd24 <ble_sm_pair_initiate+0x66>
        return BLE_HS_EALREADY;
   2bd38:	2002      	movs	r0, #2
}
   2bd3a:	b007      	add	sp, #28
   2bd3c:	bd30      	pop	{r4, r5, pc}

0002bd3e <ble_sm_enc_initiate>:
{
   2bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd42:	b08e      	sub	sp, #56	; 0x38
   2bd44:	4605      	mov	r5, r0
   2bd46:	4688      	mov	r8, r1
   2bd48:	4617      	mov	r7, r2
   2bd4a:	461e      	mov	r6, r3
    memset(&res, 0, sizeof res);
   2bd4c:	2400      	movs	r4, #0
   2bd4e:	9408      	str	r4, [sp, #32]
   2bd50:	9409      	str	r4, [sp, #36]	; 0x24
   2bd52:	940a      	str	r4, [sp, #40]	; 0x28
   2bd54:	940b      	str	r4, [sp, #44]	; 0x2c
   2bd56:	940c      	str	r4, [sp, #48]	; 0x30
   2bd58:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   2bd5a:	f7fb fde1 	bl	27920 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   2bd5e:	4623      	mov	r3, r4
   2bd60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd64:	21ff      	movs	r1, #255	; 0xff
   2bd66:	4628      	mov	r0, r5
   2bd68:	f7ff fa50 	bl	2b20c <ble_sm_proc_find>
    if (proc != NULL) {
   2bd6c:	b158      	cbz	r0, 2bd86 <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   2bd6e:	2302      	movs	r3, #2
   2bd70:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   2bd72:	f7fb fdd9 	bl	27928 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   2bd76:	a908      	add	r1, sp, #32
   2bd78:	4628      	mov	r0, r5
   2bd7a:	f7ff fd30 	bl	2b7de <ble_sm_process_result>
}
   2bd7e:	9808      	ldr	r0, [sp, #32]
   2bd80:	b00e      	add	sp, #56	; 0x38
   2bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   2bd86:	f7ff f957 	bl	2b038 <ble_sm_proc_alloc>
        if (proc == NULL) {
   2bd8a:	4603      	mov	r3, r0
   2bd8c:	b338      	cbz	r0, 2bdde <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   2bd8e:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   2bd90:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   2bd94:	2206      	movs	r2, #6
   2bd96:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   2bd98:	7a02      	ldrb	r2, [r0, #8]
   2bd9a:	f042 0201 	orr.w	r2, r2, #1
   2bd9e:	7202      	strb	r2, [r0, #8]
            if (auth) {
   2bda0:	9916      	ldr	r1, [sp, #88]	; 0x58
   2bda2:	b111      	cbz	r1, 2bdaa <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   2bda4:	f042 0208 	orr.w	r2, r2, #8
   2bda8:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   2bdaa:	4618      	mov	r0, r3
   2bdac:	f7fe fc56 	bl	2a65c <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   2bdb0:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   2bdb4:	f8ad 6002 	strh.w	r6, [sp, #2]
            cmd.random_number = rand_val;
   2bdb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   2bdbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   2bdc0:	ac04      	add	r4, sp, #16
   2bdc2:	6838      	ldr	r0, [r7, #0]
   2bdc4:	6879      	ldr	r1, [r7, #4]
   2bdc6:	68ba      	ldr	r2, [r7, #8]
   2bdc8:	68fb      	ldr	r3, [r7, #12]
   2bdca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   2bdcc:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   2bdd0:	f043 0301 	orr.w	r3, r3, #1
   2bdd4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   2bdd8:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   2bddc:	e7c9      	b.n	2bd72 <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   2bdde:	2306      	movs	r3, #6
   2bde0:	9308      	str	r3, [sp, #32]
   2bde2:	e7c6      	b.n	2bd72 <ble_sm_enc_initiate+0x34>

0002bde4 <ble_sm_sec_req_rx>:
{
   2bde4:	b570      	push	{r4, r5, r6, lr}
   2bde6:	b0a8      	sub	sp, #160	; 0xa0
   2bde8:	4606      	mov	r6, r0
   2bdea:	460d      	mov	r5, r1
   2bdec:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2bdee:	2101      	movs	r1, #1
   2bdf0:	4628      	mov	r0, r5
   2bdf2:	f7fd fc90 	bl	29716 <ble_hs_mbuf_pullup_base>
   2bdf6:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2bdf8:	b108      	cbz	r0, 2bdfe <ble_sm_sec_req_rx+0x1a>
}
   2bdfa:	b028      	add	sp, #160	; 0xa0
   2bdfc:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   2bdfe:	682b      	ldr	r3, [r5, #0]
   2be00:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2be02:	f7fb fd8d 	bl	27920 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   2be06:	4630      	mov	r0, r6
   2be08:	f7fc fbfe 	bl	28608 <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   2be0c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2be10:	f013 0f01 	tst.w	r3, #1
   2be14:	d132      	bne.n	2be7c <ble_sm_sec_req_rx+0x98>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   2be16:	f240 4307 	movw	r3, #1031	; 0x407
   2be1a:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   2be1c:	2307      	movs	r3, #7
   2be1e:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   2be20:	f7fb fd82 	bl	27928 <ble_hs_unlock>
    if (res->app_status == 0) {
   2be24:	6823      	ldr	r3, [r4, #0]
   2be26:	2b00      	cmp	r3, #0
   2be28:	d1e7      	bne.n	2bdfa <ble_sm_sec_req_rx+0x16>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   2be2a:	782b      	ldrb	r3, [r5, #0]
   2be2c:	f013 0f01 	tst.w	r3, #1
   2be30:	d13b      	bne.n	2beaa <ble_sm_sec_req_rx+0xc6>
            res->app_status = BLE_HS_ENOENT;
   2be32:	2305      	movs	r3, #5
   2be34:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   2be36:	6823      	ldr	r3, [r4, #0]
   2be38:	b953      	cbnz	r3, 2be50 <ble_sm_sec_req_rx+0x6c>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   2be3a:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   2be3c:	f013 0f04 	tst.w	r3, #4
   2be40:	d006      	beq.n	2be50 <ble_sm_sec_req_rx+0x6c>
   2be42:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   2be46:	f013 0f02 	tst.w	r3, #2
   2be4a:	d101      	bne.n	2be50 <ble_sm_sec_req_rx+0x6c>
                res->app_status = BLE_HS_EREJECT;
   2be4c:	2310      	movs	r3, #16
   2be4e:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   2be50:	6823      	ldr	r3, [r4, #0]
   2be52:	2b00      	cmp	r3, #0
   2be54:	d12f      	bne.n	2beb6 <ble_sm_sec_req_rx+0xd2>
                                                  value_sec.authenticated);
   2be56:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   2be5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   2be5e:	9302      	str	r3, [sp, #8]
   2be60:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   2be64:	e9cd 2300 	strd	r2, r3, [sp]
   2be68:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2be6c:	aa1a      	add	r2, sp, #104	; 0x68
   2be6e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   2be72:	4630      	mov	r0, r6
   2be74:	f7ff ff63 	bl	2bd3e <ble_sm_enc_initiate>
   2be78:	6020      	str	r0, [r4, #0]
   2be7a:	e7be      	b.n	2bdfa <ble_sm_sec_req_rx+0x16>
        ble_hs_conn_addrs(conn, &addrs);
   2be7c:	a905      	add	r1, sp, #20
   2be7e:	f7fc fbe3 	bl	28648 <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   2be82:	2300      	movs	r3, #0
   2be84:	930d      	str	r3, [sp, #52]	; 0x34
   2be86:	930e      	str	r3, [sp, #56]	; 0x38
   2be88:	930f      	str	r3, [sp, #60]	; 0x3c
   2be8a:	9310      	str	r3, [sp, #64]	; 0x40
   2be8c:	9311      	str	r3, [sp, #68]	; 0x44
   2be8e:	9312      	str	r3, [sp, #72]	; 0x48
   2be90:	9313      	str	r3, [sp, #76]	; 0x4c
        key_sec.peer_addr = addrs.peer_id_addr;
   2be92:	f8dd 001b 	ldr.w	r0, [sp, #27]
   2be96:	900c      	str	r0, [sp, #48]	; 0x30
   2be98:	f8bd 201f 	ldrh.w	r2, [sp, #31]
   2be9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   2bea0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   2bea4:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   2bea8:	e7ba      	b.n	2be20 <ble_sm_sec_req_rx+0x3c>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   2beaa:	a914      	add	r1, sp, #80	; 0x50
   2beac:	a80c      	add	r0, sp, #48	; 0x30
   2beae:	f000 fa42 	bl	2c336 <ble_store_read_peer_sec>
   2beb2:	6020      	str	r0, [r4, #0]
   2beb4:	e7bf      	b.n	2be36 <ble_sm_sec_req_rx+0x52>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   2beb6:	4630      	mov	r0, r6
   2beb8:	f7ff ff01 	bl	2bcbe <ble_sm_pair_initiate>
   2bebc:	6020      	str	r0, [r4, #0]
   2bebe:	e79c      	b.n	2bdfa <ble_sm_sec_req_rx+0x16>

0002bec0 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   2bec0:	b500      	push	{lr}
   2bec2:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   2bec4:	2300      	movs	r3, #0
   2bec6:	9301      	str	r3, [sp, #4]
   2bec8:	9302      	str	r3, [sp, #8]
   2beca:	9303      	str	r3, [sp, #12]
   2becc:	9304      	str	r3, [sp, #16]
   2bece:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   2bed0:	2307      	movs	r3, #7
   2bed2:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   2bed4:	2302      	movs	r3, #2
   2bed6:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   2beda:	4669      	mov	r1, sp
   2bedc:	f7ff fc7f 	bl	2b7de <ble_sm_process_result>
}
   2bee0:	b007      	add	sp, #28
   2bee2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002bee8 <ble_sm_init>:

int
ble_sm_init(void)
{
   2bee8:	b500      	push	{lr}
   2beea:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   2beec:	4b07      	ldr	r3, [pc, #28]	; (2bf0c <ble_sm_init+0x24>)
   2beee:	2200      	movs	r2, #0
   2bef0:	601a      	str	r2, [r3, #0]
   2bef2:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   2bef4:	4b06      	ldr	r3, [pc, #24]	; (2bf10 <ble_sm_init+0x28>)
   2bef6:	9300      	str	r3, [sp, #0]
   2bef8:	4b06      	ldr	r3, [pc, #24]	; (2bf14 <ble_sm_init+0x2c>)
   2befa:	f44f 7280 	mov.w	r2, #256	; 0x100
   2befe:	2101      	movs	r1, #1
   2bf00:	4805      	ldr	r0, [pc, #20]	; (2bf18 <ble_sm_init+0x30>)
   2bf02:	f7e9 ff57 	bl	15db4 <os_mempool_init>
    }

    ble_sm_sc_init();

    return 0;
}
   2bf06:	b003      	add	sp, #12
   2bf08:	f85d fb04 	ldr.w	pc, [sp], #4
   2bf0c:	10003550 	.word	0x10003550
   2bf10:	00034f00 	.word	0x00034f00
   2bf14:	10003434 	.word	0x10003434
   2bf18:	10003534 	.word	0x10003534

0002bf1c <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   2bf1c:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   2bf1e:	f7fd ff3b 	bl	29d98 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   2bf22:	4603      	mov	r3, r0
   2bf24:	b130      	cbz	r0, 2bf34 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   2bf26:	2206      	movs	r2, #6
   2bf28:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   2bf2a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   2bf2c:	2241      	movs	r2, #65	; 0x41
   2bf2e:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   2bf30:	4a01      	ldr	r2, [pc, #4]	; (2bf38 <ble_sm_create_chan+0x1c>)
   2bf32:	6182      	str	r2, [r0, #24]

    return chan;
}
   2bf34:	4618      	mov	r0, r3
   2bf36:	bd08      	pop	{r3, pc}
   2bf38:	0002b9cd 	.word	0x0002b9cd

0002bf3c <ble_sm_cmd_get>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   2bf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bf3e:	4607      	mov	r7, r0
   2bf40:	460d      	mov	r5, r1
   2bf42:	4616      	mov	r6, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   2bf44:	f7fd fbc8 	bl	296d8 <ble_hs_mbuf_l2cap_pkt>
   2bf48:	4604      	mov	r4, r0
   2bf4a:	6030      	str	r0, [r6, #0]
    if (*txom == NULL) {
   2bf4c:	b148      	cbz	r0, 2bf62 <ble_sm_cmd_get+0x26>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   2bf4e:	1c69      	adds	r1, r5, #1
   2bf50:	b289      	uxth	r1, r1
   2bf52:	f7e9 fdb6 	bl	15ac2 <os_mbuf_extend>
   2bf56:	4604      	mov	r4, r0
   2bf58:	b128      	cbz	r0, 2bf66 <ble_sm_cmd_get+0x2a>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   2bf5a:	6833      	ldr	r3, [r6, #0]

    hdr->opcode = opcode;
   2bf5c:	681c      	ldr	r4, [r3, #0]
   2bf5e:	f804 7b01 	strb.w	r7, [r4], #1

    return hdr->data;
}
   2bf62:	4620      	mov	r0, r4
   2bf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mbuf_free_chain(*txom);
   2bf66:	6830      	ldr	r0, [r6, #0]
   2bf68:	f7e9 fb7e 	bl	15668 <os_mbuf_free_chain>
        return NULL;
   2bf6c:	e7f9      	b.n	2bf62 <ble_sm_cmd_get+0x26>
	...

0002bf70 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   2bf70:	b530      	push	{r4, r5, lr}
   2bf72:	b083      	sub	sp, #12
   2bf74:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   2bf76:	4a0c      	ldr	r2, [pc, #48]	; (2bfa8 <ble_sm_tx+0x38>)
   2bf78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2bf7a:	3301      	adds	r3, #1
   2bf7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   2bf7e:	ab01      	add	r3, sp, #4
   2bf80:	466a      	mov	r2, sp
   2bf82:	2106      	movs	r1, #6
   2bf84:	f7fd fc0a 	bl	2979c <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   2bf88:	b940      	cbnz	r0, 2bf9c <ble_sm_tx+0x2c>
        rc = ble_l2cap_tx(conn, chan, txom);
   2bf8a:	4622      	mov	r2, r4
   2bf8c:	9901      	ldr	r1, [sp, #4]
   2bf8e:	9800      	ldr	r0, [sp, #0]
   2bf90:	f7fd fffc 	bl	29f8c <ble_l2cap_tx>
   2bf94:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }

    return rc;
}
   2bf96:	4628      	mov	r0, r5
   2bf98:	b003      	add	sp, #12
   2bf9a:	bd30      	pop	{r4, r5, pc}
   2bf9c:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   2bf9e:	4620      	mov	r0, r4
   2bfa0:	f7e9 fb62 	bl	15668 <os_mbuf_free_chain>
    return rc;
   2bfa4:	e7f7      	b.n	2bf96 <ble_sm_tx+0x26>
   2bfa6:	bf00      	nop
   2bfa8:	100033c4 	.word	0x100033c4

0002bfac <ble_sm_gen_stk>:
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
}

static int
ble_sm_gen_stk(struct ble_sm_proc *proc)
{
   2bfac:	b570      	push	{r4, r5, r6, lr}
   2bfae:	b084      	sub	sp, #16
   2bfb0:	4604      	mov	r4, r0
    uint8_t key[16];
    int rc;

    rc = ble_sm_alg_s1(proc->tk, proc->rands, proc->randm, key);
   2bfb2:	466b      	mov	r3, sp
   2bfb4:	f100 023e 	add.w	r2, r0, #62	; 0x3e
   2bfb8:	f100 014e 	add.w	r1, r0, #78	; 0x4e
   2bfbc:	301e      	adds	r0, #30
   2bfbe:	f000 fc46 	bl	2c84e <ble_sm_alg_s1>
    if (rc != 0) {
   2bfc2:	4605      	mov	r5, r0
   2bfc4:	b110      	cbz	r0, 2bfcc <ble_sm_gen_stk+0x20>

    /* Ensure proper key size */
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);

    return 0;
}
   2bfc6:	4628      	mov	r0, r5
   2bfc8:	b004      	add	sp, #16
   2bfca:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(proc->ltk, key, proc->key_size);
   2bfcc:	f104 065e 	add.w	r6, r4, #94	; 0x5e
   2bfd0:	7be4      	ldrb	r4, [r4, #15]
   2bfd2:	4622      	mov	r2, r4
   2bfd4:	4669      	mov	r1, sp
   2bfd6:	4630      	mov	r0, r6
   2bfd8:	f7ea fd68 	bl	16aac <memcpy>
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);
   2bfdc:	f1c4 0210 	rsb	r2, r4, #16
   2bfe0:	2100      	movs	r1, #0
   2bfe2:	1930      	adds	r0, r6, r4
   2bfe4:	f7ea fd87 	bl	16af6 <memset>
    return 0;
   2bfe8:	e7ed      	b.n	2bfc6 <ble_sm_gen_stk+0x1a>
	...

0002bfec <ble_sm_lgcy_io_action>:
{
   2bfec:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   2bfee:	7c83      	ldrb	r3, [r0, #18]
   2bff0:	2b01      	cmp	r3, #1
   2bff2:	d00a      	beq.n	2c00a <ble_sm_lgcy_io_action+0x1e>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   2bff4:	7cc3      	ldrb	r3, [r0, #19]
   2bff6:	f013 0f04 	tst.w	r3, #4
   2bffa:	d10b      	bne.n	2c014 <ble_sm_lgcy_io_action+0x28>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   2bffc:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   2bffe:	f013 0f04 	tst.w	r3, #4
   2c002:	d107      	bne.n	2c014 <ble_sm_lgcy_io_action+0x28>
        *action = BLE_SM_IOACT_NONE;
   2c004:	2300      	movs	r3, #0
   2c006:	700b      	strb	r3, [r1, #0]
   2c008:	e00c      	b.n	2c024 <ble_sm_lgcy_io_action+0x38>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   2c00a:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   2c00c:	2b01      	cmp	r3, #1
   2c00e:	d1f1      	bne.n	2bff4 <ble_sm_lgcy_io_action+0x8>
        *action = BLE_SM_IOACT_OOB;
   2c010:	700b      	strb	r3, [r1, #0]
   2c012:	e007      	b.n	2c024 <ble_sm_lgcy_io_action+0x38>
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   2c014:	7c43      	ldrb	r3, [r0, #17]
   2c016:	2b04      	cmp	r3, #4
   2c018:	d802      	bhi.n	2c020 <ble_sm_lgcy_io_action+0x34>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   2c01a:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   2c01c:	2a04      	cmp	r2, #4
   2c01e:	d90a      	bls.n	2c036 <ble_sm_lgcy_io_action+0x4a>
        *action = BLE_SM_IOACT_NONE;
   2c020:	2300      	movs	r3, #0
   2c022:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   2c024:	780b      	ldrb	r3, [r1, #0]
   2c026:	2b01      	cmp	r3, #1
   2c028:	d026      	beq.n	2c078 <ble_sm_lgcy_io_action+0x8c>
   2c02a:	d819      	bhi.n	2c060 <ble_sm_lgcy_io_action+0x74>
   2c02c:	b9ab      	cbnz	r3, 2c05a <ble_sm_lgcy_io_action+0x6e>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   2c02e:	2300      	movs	r3, #0
   2c030:	7303      	strb	r3, [r0, #12]
    return 0;
   2c032:	4618      	mov	r0, r3
        break;
   2c034:	e012      	b.n	2c05c <ble_sm_lgcy_io_action+0x70>
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2c036:	7a04      	ldrb	r4, [r0, #8]
   2c038:	f014 0f01 	tst.w	r4, #1
   2c03c:	d006      	beq.n	2c04c <ble_sm_lgcy_io_action+0x60>
        *action = ble_sm_lgcy_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   2c03e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   2c042:	4c12      	ldr	r4, [pc, #72]	; (2c08c <ble_sm_lgcy_io_action+0xa0>)
   2c044:	4422      	add	r2, r4
   2c046:	5cd3      	ldrb	r3, [r2, r3]
   2c048:	700b      	strb	r3, [r1, #0]
   2c04a:	e7eb      	b.n	2c024 <ble_sm_lgcy_io_action+0x38>
        *action = ble_sm_lgcy_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   2c04c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   2c050:	4c0f      	ldr	r4, [pc, #60]	; (2c090 <ble_sm_lgcy_io_action+0xa4>)
   2c052:	4422      	add	r2, r4
   2c054:	5cd3      	ldrb	r3, [r2, r3]
   2c056:	700b      	strb	r3, [r1, #0]
   2c058:	e7e4      	b.n	2c024 <ble_sm_lgcy_io_action+0x38>
    switch (*action) {
   2c05a:	2003      	movs	r0, #3
}
   2c05c:	bc10      	pop	{r4}
   2c05e:	4770      	bx	lr
    switch (*action) {
   2c060:	3b02      	subs	r3, #2
   2c062:	b2db      	uxtb	r3, r3
   2c064:	2b01      	cmp	r3, #1
   2c066:	d80f      	bhi.n	2c088 <ble_sm_lgcy_io_action+0x9c>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   2c068:	2301      	movs	r3, #1
   2c06a:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   2c06c:	7a03      	ldrb	r3, [r0, #8]
   2c06e:	f043 0308 	orr.w	r3, r3, #8
   2c072:	7203      	strb	r3, [r0, #8]
    return 0;
   2c074:	2000      	movs	r0, #0
        break;
   2c076:	e7f1      	b.n	2c05c <ble_sm_lgcy_io_action+0x70>
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   2c078:	2302      	movs	r3, #2
   2c07a:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   2c07c:	7a03      	ldrb	r3, [r0, #8]
   2c07e:	f043 0308 	orr.w	r3, r3, #8
   2c082:	7203      	strb	r3, [r0, #8]
    return 0;
   2c084:	2000      	movs	r0, #0
        break;
   2c086:	e7e9      	b.n	2c05c <ble_sm_lgcy_io_action+0x70>
    switch (*action) {
   2c088:	2003      	movs	r0, #3
   2c08a:	e7e7      	b.n	2c05c <ble_sm_lgcy_io_action+0x70>
   2c08c:	00034f7c 	.word	0x00034f7c
   2c090:	00034f98 	.word	0x00034f98

0002c094 <ble_sm_lgcy_confirm_exec>:
{
   2c094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c098:	b08d      	sub	sp, #52	; 0x34
   2c09a:	4604      	mov	r4, r0
   2c09c:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   2c09e:	aa0b      	add	r2, sp, #44	; 0x2c
   2c0a0:	2110      	movs	r1, #16
   2c0a2:	2003      	movs	r0, #3
   2c0a4:	f7ff ff4a 	bl	2bf3c <ble_sm_cmd_get>
    if (cmd == NULL) {
   2c0a8:	2800      	cmp	r0, #0
   2c0aa:	d042      	beq.n	2c132 <ble_sm_lgcy_confirm_exec+0x9e>
   2c0ac:	4681      	mov	r9, r0
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   2c0ae:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   2c0b2:	af07      	add	r7, sp, #28
   2c0b4:	9700      	str	r7, [sp, #0]
   2c0b6:	f10d 031a 	add.w	r3, sp, #26
   2c0ba:	4642      	mov	r2, r8
   2c0bc:	f10d 011b 	add.w	r1, sp, #27
   2c0c0:	4620      	mov	r0, r4
   2c0c2:	f7ff f864 	bl	2b18e <ble_sm_ia_ra>
    rc = ble_sm_alg_c1(proc->tk, ble_sm_our_pair_rand(proc), proc->pair_req,
   2c0c6:	f104 061e 	add.w	r6, r4, #30
   2c0ca:	4620      	mov	r0, r4
   2c0cc:	f7ff fd42 	bl	2bb54 <ble_sm_our_pair_rand>
   2c0d0:	4601      	mov	r1, r0
   2c0d2:	f8cd 9010 	str.w	r9, [sp, #16]
   2c0d6:	9703      	str	r7, [sp, #12]
   2c0d8:	f8cd 8008 	str.w	r8, [sp, #8]
   2c0dc:	f89d 301a 	ldrb.w	r3, [sp, #26]
   2c0e0:	9301      	str	r3, [sp, #4]
   2c0e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2c0e6:	9300      	str	r3, [sp, #0]
   2c0e8:	f104 0317 	add.w	r3, r4, #23
   2c0ec:	f104 0210 	add.w	r2, r4, #16
   2c0f0:	4630      	mov	r0, r6
   2c0f2:	f000 fbd4 	bl	2c89e <ble_sm_alg_c1>
    if (rc != 0) {
   2c0f6:	4606      	mov	r6, r0
   2c0f8:	b168      	cbz	r0, 2c116 <ble_sm_lgcy_confirm_exec+0x82>
    if (txom) {
   2c0fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2c0fc:	b108      	cbz	r0, 2c102 <ble_sm_lgcy_confirm_exec+0x6e>
        os_mbuf_free_chain(txom);
   2c0fe:	f7e9 fab3 	bl	15668 <os_mbuf_free_chain>
    res->app_status = rc;
   2c102:	602e      	str	r6, [r5, #0]
    res->enc_cb = 1;
   2c104:	7d2b      	ldrb	r3, [r5, #20]
   2c106:	f043 0302 	orr.w	r3, r3, #2
   2c10a:	752b      	strb	r3, [r5, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2c10c:	2308      	movs	r3, #8
   2c10e:	712b      	strb	r3, [r5, #4]
}
   2c110:	b00d      	add	sp, #52	; 0x34
   2c112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = ble_sm_tx(proc->conn_handle, txom);
   2c116:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c118:	8960      	ldrh	r0, [r4, #10]
   2c11a:	f7ff ff29 	bl	2bf70 <ble_sm_tx>
    if (rc != 0) {
   2c11e:	4606      	mov	r6, r0
   2c120:	2800      	cmp	r0, #0
   2c122:	d1ea      	bne.n	2c0fa <ble_sm_lgcy_confirm_exec+0x66>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   2c124:	7a23      	ldrb	r3, [r4, #8]
   2c126:	f013 0f01 	tst.w	r3, #1
   2c12a:	d1f1      	bne.n	2c110 <ble_sm_lgcy_confirm_exec+0x7c>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   2c12c:	2302      	movs	r3, #2
   2c12e:	7363      	strb	r3, [r4, #13]
   2c130:	e7ee      	b.n	2c110 <ble_sm_lgcy_confirm_exec+0x7c>
        rc = BLE_HS_ENOMEM;
   2c132:	2606      	movs	r6, #6
   2c134:	e7e1      	b.n	2c0fa <ble_sm_lgcy_confirm_exec+0x66>

0002c136 <ble_sm_lgcy_random_exec>:

void
ble_sm_lgcy_random_exec(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2c136:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c138:	b083      	sub	sp, #12
   2c13a:	4606      	mov	r6, r0
   2c13c:	460c      	mov	r4, r1
    struct ble_sm_pair_random *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   2c13e:	aa01      	add	r2, sp, #4
   2c140:	2110      	movs	r1, #16
   2c142:	2004      	movs	r0, #4
   2c144:	f7ff fefa 	bl	2bf3c <ble_sm_cmd_get>
    if (cmd == NULL) {
   2c148:	b1b8      	cbz	r0, 2c17a <ble_sm_lgcy_random_exec+0x44>
   2c14a:	4605      	mov	r5, r0
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   2c14c:	4630      	mov	r0, r6
   2c14e:	f7ff fd01 	bl	2bb54 <ble_sm_our_pair_rand>
   2c152:	6807      	ldr	r7, [r0, #0]
   2c154:	6841      	ldr	r1, [r0, #4]
   2c156:	6882      	ldr	r2, [r0, #8]
   2c158:	68c3      	ldr	r3, [r0, #12]
   2c15a:	602f      	str	r7, [r5, #0]
   2c15c:	6069      	str	r1, [r5, #4]
   2c15e:	60aa      	str	r2, [r5, #8]
   2c160:	60eb      	str	r3, [r5, #12]

    rc = ble_sm_tx(proc->conn_handle, txom);
   2c162:	9901      	ldr	r1, [sp, #4]
   2c164:	8970      	ldrh	r0, [r6, #10]
   2c166:	f7ff ff03 	bl	2bf70 <ble_sm_tx>
    if (rc != 0) {
   2c16a:	b980      	cbnz	r0, 2c18e <ble_sm_lgcy_random_exec+0x58>
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   2c16c:	7a33      	ldrb	r3, [r6, #8]
   2c16e:	f013 0f01 	tst.w	r3, #1
   2c172:	d10a      	bne.n	2c18a <ble_sm_lgcy_random_exec+0x54>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   2c174:	2303      	movs	r3, #3
   2c176:	7373      	strb	r3, [r6, #13]
   2c178:	e007      	b.n	2c18a <ble_sm_lgcy_random_exec+0x54>
        res->app_status = BLE_HS_ENOMEM;
   2c17a:	2306      	movs	r3, #6
   2c17c:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   2c17e:	7d23      	ldrb	r3, [r4, #20]
   2c180:	f043 0302 	orr.w	r3, r3, #2
   2c184:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2c186:	2308      	movs	r3, #8
   2c188:	7123      	strb	r3, [r4, #4]
    }
}
   2c18a:	b003      	add	sp, #12
   2c18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->app_status = rc;
   2c18e:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   2c190:	7d23      	ldrb	r3, [r4, #20]
   2c192:	f043 0302 	orr.w	r3, r3, #2
   2c196:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2c198:	2308      	movs	r3, #8
   2c19a:	7123      	strb	r3, [r4, #4]
        return;
   2c19c:	e7f5      	b.n	2c18a <ble_sm_lgcy_random_exec+0x54>

0002c19e <ble_sm_lgcy_random_rx>:

void
ble_sm_lgcy_random_rx(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2c19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c1a2:	b090      	sub	sp, #64	; 0x40
   2c1a4:	4604      	mov	r4, r0
   2c1a6:	460d      	mov	r5, r1
    uint8_t ra[6];
    uint8_t iat;
    uint8_t rat;
    int rc;

    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   2c1a8:	ae0a      	add	r6, sp, #40	; 0x28
   2c1aa:	af08      	add	r7, sp, #32
   2c1ac:	9700      	str	r7, [sp, #0]
   2c1ae:	f10d 031e 	add.w	r3, sp, #30
   2c1b2:	4632      	mov	r2, r6
   2c1b4:	f10d 011f 	add.w	r1, sp, #31
   2c1b8:	f7fe ffe9 	bl	2b18e <ble_sm_ia_ra>

    rc = ble_sm_alg_c1(proc->tk, ble_sm_peer_pair_rand(proc), proc->pair_req,
   2c1bc:	f104 081e 	add.w	r8, r4, #30
   2c1c0:	4620      	mov	r0, r4
   2c1c2:	f7ff fd21 	bl	2bc08 <ble_sm_peer_pair_rand>
   2c1c6:	4601      	mov	r1, r0
   2c1c8:	ab0c      	add	r3, sp, #48	; 0x30
   2c1ca:	9304      	str	r3, [sp, #16]
   2c1cc:	9703      	str	r7, [sp, #12]
   2c1ce:	9602      	str	r6, [sp, #8]
   2c1d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2c1d4:	9301      	str	r3, [sp, #4]
   2c1d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2c1da:	9300      	str	r3, [sp, #0]
   2c1dc:	f104 0317 	add.w	r3, r4, #23
   2c1e0:	f104 0210 	add.w	r2, r4, #16
   2c1e4:	4640      	mov	r0, r8
   2c1e6:	f000 fb5a 	bl	2c89e <ble_sm_alg_c1>
                       proc->pair_rsp, iat, rat, ia, ra, confirm_val);
    if (rc != 0) {
   2c1ea:	b980      	cbnz	r0, 2c20e <ble_sm_lgcy_random_rx+0x70>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        res->enc_cb = 1;
        return;
    }

    if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   2c1ec:	2210      	movs	r2, #16
   2c1ee:	a90c      	add	r1, sp, #48	; 0x30
   2c1f0:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   2c1f4:	f7ea fc36 	bl	16a64 <memcmp>
   2c1f8:	b198      	cbz	r0, 2c222 <ble_sm_lgcy_random_rx+0x84>
        /* Random number mismatch. */
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   2c1fa:	f240 4304 	movw	r3, #1028	; 0x404
   2c1fe:	602b      	str	r3, [r5, #0]
        res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   2c200:	2304      	movs	r3, #4
   2c202:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   2c204:	7d2b      	ldrb	r3, [r5, #20]
   2c206:	f043 0302 	orr.w	r3, r3, #2
   2c20a:	752b      	strb	r3, [r5, #20]
        return;
   2c20c:	e006      	b.n	2c21c <ble_sm_lgcy_random_rx+0x7e>
        res->app_status = rc;
   2c20e:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2c210:	2308      	movs	r3, #8
   2c212:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   2c214:	7d2b      	ldrb	r3, [r5, #20]
   2c216:	f043 0302 	orr.w	r3, r3, #2
   2c21a:	752b      	strb	r3, [r5, #20]
         */
        proc->state = BLE_SM_PROC_STATE_ENC_START;
    }

    res->execute = 1;
}
   2c21c:	b010      	add	sp, #64	; 0x40
   2c21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_sm_gen_stk(proc);
   2c222:	4620      	mov	r0, r4
   2c224:	f7ff fec2 	bl	2bfac <ble_sm_gen_stk>
    if (rc != 0) {
   2c228:	b950      	cbnz	r0, 2c240 <ble_sm_lgcy_random_rx+0xa2>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2c22a:	7a23      	ldrb	r3, [r4, #8]
   2c22c:	f013 0f01 	tst.w	r3, #1
   2c230:	d001      	beq.n	2c236 <ble_sm_lgcy_random_rx+0x98>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   2c232:	2305      	movs	r3, #5
   2c234:	7363      	strb	r3, [r4, #13]
    res->execute = 1;
   2c236:	7d2b      	ldrb	r3, [r5, #20]
   2c238:	f043 0301 	orr.w	r3, r3, #1
   2c23c:	752b      	strb	r3, [r5, #20]
   2c23e:	e7ed      	b.n	2c21c <ble_sm_lgcy_random_rx+0x7e>
        res->app_status = rc;
   2c240:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2c242:	2308      	movs	r3, #8
   2c244:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   2c246:	7d2b      	ldrb	r3, [r5, #20]
   2c248:	f043 0302 	orr.w	r3, r3, #2
   2c24c:	752b      	strb	r3, [r5, #20]
        return;
   2c24e:	e7e5      	b.n	2c21c <ble_sm_lgcy_random_rx+0x7e>

0002c250 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   2c250:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   2c252:	4b04      	ldr	r3, [pc, #16]	; (2c264 <ble_store_status+0x14>)
   2c254:	6a1b      	ldr	r3, [r3, #32]
   2c256:	b11b      	cbz	r3, 2c260 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   2c258:	4a02      	ldr	r2, [pc, #8]	; (2c264 <ble_store_status+0x14>)
   2c25a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   2c25c:	4798      	blx	r3
    }

    return rc;
}
   2c25e:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   2c260:	2008      	movs	r0, #8
    return rc;
   2c262:	e7fc      	b.n	2c25e <ble_store_status+0xe>
   2c264:	100002d8 	.word	0x100002d8

0002c268 <ble_store_read>:
{
   2c268:	b570      	push	{r4, r5, r6, lr}
   2c26a:	4604      	mov	r4, r0
   2c26c:	460d      	mov	r5, r1
   2c26e:	4616      	mov	r6, r2
    ble_hs_lock();
   2c270:	f7fb fb56 	bl	27920 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   2c274:	4b06      	ldr	r3, [pc, #24]	; (2c290 <ble_store_read+0x28>)
   2c276:	695b      	ldr	r3, [r3, #20]
   2c278:	b143      	cbz	r3, 2c28c <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   2c27a:	4632      	mov	r2, r6
   2c27c:	4629      	mov	r1, r5
   2c27e:	4620      	mov	r0, r4
   2c280:	4798      	blx	r3
   2c282:	4604      	mov	r4, r0
    ble_hs_unlock();
   2c284:	f7fb fb50 	bl	27928 <ble_hs_unlock>
}
   2c288:	4620      	mov	r0, r4
   2c28a:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   2c28c:	2408      	movs	r4, #8
   2c28e:	e7f9      	b.n	2c284 <ble_store_read+0x1c>
   2c290:	100002d8 	.word	0x100002d8

0002c294 <ble_store_delete>:
{
   2c294:	b538      	push	{r3, r4, r5, lr}
   2c296:	4604      	mov	r4, r0
   2c298:	460d      	mov	r5, r1
    ble_hs_lock();
   2c29a:	f7fb fb41 	bl	27920 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   2c29e:	4b06      	ldr	r3, [pc, #24]	; (2c2b8 <ble_store_delete+0x24>)
   2c2a0:	69db      	ldr	r3, [r3, #28]
   2c2a2:	b13b      	cbz	r3, 2c2b4 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   2c2a4:	4629      	mov	r1, r5
   2c2a6:	4620      	mov	r0, r4
   2c2a8:	4798      	blx	r3
   2c2aa:	4604      	mov	r4, r0
    ble_hs_unlock();
   2c2ac:	f7fb fb3c 	bl	27928 <ble_hs_unlock>
}
   2c2b0:	4620      	mov	r0, r4
   2c2b2:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   2c2b4:	2408      	movs	r4, #8
   2c2b6:	e7f9      	b.n	2c2ac <ble_store_delete+0x18>
   2c2b8:	100002d8 	.word	0x100002d8

0002c2bc <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   2c2bc:	b500      	push	{lr}
   2c2be:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   2c2c0:	2301      	movs	r3, #1
   2c2c2:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   2c2c4:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   2c2c6:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   2c2c8:	a801      	add	r0, sp, #4
   2c2ca:	f7ff ffc1 	bl	2c250 <ble_store_status>
}
   2c2ce:	b005      	add	sp, #20
   2c2d0:	f85d fb04 	ldr.w	pc, [sp], #4

0002c2d4 <ble_store_write>:
{
   2c2d4:	b570      	push	{r4, r5, r6, lr}
   2c2d6:	4606      	mov	r6, r0
   2c2d8:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   2c2da:	4b0d      	ldr	r3, [pc, #52]	; (2c310 <ble_store_write+0x3c>)
   2c2dc:	699b      	ldr	r3, [r3, #24]
   2c2de:	b1a3      	cbz	r3, 2c30a <ble_store_write+0x36>
        ble_hs_lock();
   2c2e0:	f7fb fb1e 	bl	27920 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   2c2e4:	4b0a      	ldr	r3, [pc, #40]	; (2c310 <ble_store_write+0x3c>)
   2c2e6:	699b      	ldr	r3, [r3, #24]
   2c2e8:	4629      	mov	r1, r5
   2c2ea:	4630      	mov	r0, r6
   2c2ec:	4798      	blx	r3
   2c2ee:	4604      	mov	r4, r0
        ble_hs_unlock();
   2c2f0:	f7fb fb1a 	bl	27928 <ble_hs_unlock>
        switch (rc) {
   2c2f4:	b154      	cbz	r4, 2c30c <ble_store_write+0x38>
   2c2f6:	2c1b      	cmp	r4, #27
   2c2f8:	d108      	bne.n	2c30c <ble_store_write+0x38>
            rc = ble_store_overflow_event(obj_type, val);
   2c2fa:	4629      	mov	r1, r5
   2c2fc:	4630      	mov	r0, r6
   2c2fe:	f7ff ffdd 	bl	2c2bc <ble_store_overflow_event>
            if (rc != 0) {
   2c302:	4604      	mov	r4, r0
   2c304:	2800      	cmp	r0, #0
   2c306:	d0eb      	beq.n	2c2e0 <ble_store_write+0xc>
   2c308:	e000      	b.n	2c30c <ble_store_write+0x38>
        return BLE_HS_ENOTSUP;
   2c30a:	2408      	movs	r4, #8
}
   2c30c:	4620      	mov	r0, r4
   2c30e:	bd70      	pop	{r4, r5, r6, pc}
   2c310:	100002d8 	.word	0x100002d8

0002c314 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   2c314:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   2c316:	f7ff ffdd 	bl	2c2d4 <ble_store_write>
    return rc;
}
   2c31a:	bd08      	pop	{r3, pc}

0002c31c <ble_store_read_our_sec>:
{
   2c31c:	b508      	push	{r3, lr}
   2c31e:	460a      	mov	r2, r1
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   2c320:	4601      	mov	r1, r0
   2c322:	2001      	movs	r0, #1
   2c324:	f7ff ffa0 	bl	2c268 <ble_store_read>
}
   2c328:	bd08      	pop	{r3, pc}

0002c32a <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   2c32a:	b508      	push	{r3, lr}
   2c32c:	4601      	mov	r1, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   2c32e:	2001      	movs	r0, #1
   2c330:	f7ff fff0 	bl	2c314 <ble_store_persist_sec>
    return rc;
}
   2c334:	bd08      	pop	{r3, pc}

0002c336 <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   2c336:	b508      	push	{r3, lr}
   2c338:	460a      	mov	r2, r1
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   2c33a:	4601      	mov	r1, r0
   2c33c:	2002      	movs	r0, #2
   2c33e:	f7ff ff93 	bl	2c268 <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2c342:	bd08      	pop	{r3, pc}

0002c344 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   2c344:	b570      	push	{r4, r5, r6, lr}
   2c346:	b082      	sub	sp, #8
   2c348:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   2c34a:	4601      	mov	r1, r0
   2c34c:	2002      	movs	r0, #2
   2c34e:	f7ff ffe1 	bl	2c314 <ble_store_persist_sec>
    if (rc != 0) {
   2c352:	4606      	mov	r6, r0
   2c354:	b990      	cbnz	r0, 2c37c <ble_store_write_peer_sec+0x38>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   2c356:	2300      	movs	r3, #0
   2c358:	9300      	str	r3, [sp, #0]
   2c35a:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2c35e:	7825      	ldrb	r5, [r4, #0]
   2c360:	4628      	mov	r0, r5
    if (type_diff != 0) {
   2c362:	b92d      	cbnz	r5, 2c370 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   2c364:	2206      	movs	r2, #6
   2c366:	f10d 0101 	add.w	r1, sp, #1
   2c36a:	1c60      	adds	r0, r4, #1
   2c36c:	f7ea fb7a 	bl	16a64 <memcmp>
   2c370:	b120      	cbz	r0, 2c37c <ble_store_write_peer_sec+0x38>
   2c372:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2c376:	f013 0f01 	tst.w	r3, #1
   2c37a:	d102      	bne.n	2c382 <ble_store_write_peer_sec+0x3e>
            return rc;
        }
    }

    return 0;
}
   2c37c:	4630      	mov	r0, r6
   2c37e:	b002      	add	sp, #8
   2c380:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   2c382:	f104 0229 	add.w	r2, r4, #41	; 0x29
   2c386:	4629      	mov	r1, r5
   2c388:	1c60      	adds	r0, r4, #1
   2c38a:	f7fd fb33 	bl	299f4 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   2c38e:	2800      	cmp	r0, #0
   2c390:	d0f4      	beq.n	2c37c <ble_store_write_peer_sec+0x38>
            return rc;
   2c392:	4606      	mov	r6, r0
   2c394:	e7f2      	b.n	2c37c <ble_store_write_peer_sec+0x38>

0002c396 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   2c396:	b508      	push	{r3, lr}
   2c398:	460a      	mov	r2, r1
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   2c39a:	4601      	mov	r1, r0
   2c39c:	2003      	movs	r0, #3
   2c39e:	f7ff ff63 	bl	2c268 <ble_store_read>
    return rc;
}
   2c3a2:	bd08      	pop	{r3, pc}

0002c3a4 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   2c3a4:	b508      	push	{r3, lr}
   2c3a6:	4601      	mov	r1, r0
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   2c3a8:	2003      	movs	r0, #3
   2c3aa:	f7ff ff93 	bl	2c2d4 <ble_store_write>
    return rc;
}
   2c3ae:	bd08      	pop	{r3, pc}

0002c3b0 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   2c3b0:	b508      	push	{r3, lr}
   2c3b2:	4601      	mov	r1, r0
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   2c3b4:	2003      	movs	r0, #3
   2c3b6:	f7ff ff6d 	bl	2c294 <ble_store_delete>
    return rc;
}
   2c3ba:	bd08      	pop	{r3, pc}

0002c3bc <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   2c3bc:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   2c3be:	6808      	ldr	r0, [r1, #0]
   2c3c0:	6018      	str	r0, [r3, #0]
   2c3c2:	8888      	ldrh	r0, [r1, #4]
   2c3c4:	798a      	ldrb	r2, [r1, #6]
   2c3c6:	8098      	strh	r0, [r3, #4]
   2c3c8:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   2c3ca:	890a      	ldrh	r2, [r1, #8]
   2c3cc:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   2c3ce:	2200      	movs	r2, #0
   2c3d0:	729a      	strb	r2, [r3, #10]
}
   2c3d2:	4770      	bx	lr

0002c3d4 <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   2c3d4:	4603      	mov	r3, r0
   2c3d6:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   2c3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
   2c3dc:	6018      	str	r0, [r3, #0]
   2c3de:	8099      	strh	r1, [r3, #4]
   2c3e0:	0c09      	lsrs	r1, r1, #16
   2c3e2:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   2c3e4:	8911      	ldrh	r1, [r2, #8]
   2c3e6:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   2c3e8:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   2c3ec:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   2c3f0:	7e1a      	ldrb	r2, [r3, #24]
   2c3f2:	f042 0201 	orr.w	r2, r2, #1
   2c3f6:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   2c3f8:	2200      	movs	r2, #0
   2c3fa:	765a      	strb	r2, [r3, #25]
}
   2c3fc:	4770      	bx	lr

0002c3fe <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   2c3fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c402:	b09d      	sub	sp, #116	; 0x74
   2c404:	4604      	mov	r4, r0
   2c406:	4688      	mov	r8, r1
   2c408:	4617      	mov	r7, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   2c40a:	2220      	movs	r2, #32
   2c40c:	2100      	movs	r1, #0
   2c40e:	a814      	add	r0, sp, #80	; 0x50
   2c410:	f7ea fb71 	bl	16af6 <memset>
    switch(obj_type) {
   2c414:	2c02      	cmp	r4, #2
   2c416:	dd08      	ble.n	2c42a <ble_store_iterate+0x2c>
   2c418:	2c03      	cmp	r4, #3
   2c41a:	d108      	bne.n	2c42e <ble_store_iterate+0x30>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   2c41c:	2300      	movs	r3, #0
   2c41e:	9314      	str	r3, [sp, #80]	; 0x50
   2c420:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   2c424:	f10d 095a 	add.w	r9, sp, #90	; 0x5a
            break;
   2c428:	e009      	b.n	2c43e <ble_store_iterate+0x40>
    switch(obj_type) {
   2c42a:	2c00      	cmp	r4, #0
   2c42c:	dc01      	bgt.n	2c432 <ble_store_iterate+0x34>
        default:
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
   2c42e:	2503      	movs	r5, #3
   2c430:	e011      	b.n	2c456 <ble_store_iterate+0x58>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   2c432:	2300      	movs	r3, #0
   2c434:	9314      	str	r3, [sp, #80]	; 0x50
   2c436:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   2c43a:	f10d 0969 	add.w	r9, sp, #105	; 0x69
    int idx = 0;
   2c43e:	2600      	movs	r6, #0
    }

    while (1) {
        *pidx = idx;
   2c440:	f889 6000 	strb.w	r6, [r9]
        rc = ble_store_read(obj_type, &key, &value);
   2c444:	466a      	mov	r2, sp
   2c446:	a914      	add	r1, sp, #80	; 0x50
   2c448:	4620      	mov	r0, r4
   2c44a:	f7ff ff0d 	bl	2c268 <ble_store_read>
        switch (rc) {
   2c44e:	4605      	mov	r5, r0
   2c450:	b128      	cbz	r0, 2c45e <ble_store_iterate+0x60>
   2c452:	2805      	cmp	r0, #5
   2c454:	d00e      	beq.n	2c474 <ble_store_iterate+0x76>
            return rc;
        }

        idx++;
    }
}
   2c456:	4628      	mov	r0, r5
   2c458:	b01d      	add	sp, #116	; 0x74
   2c45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (callback != NULL) {
   2c45e:	f1b8 0f00 	cmp.w	r8, #0
   2c462:	d005      	beq.n	2c470 <ble_store_iterate+0x72>
                rc = callback(obj_type, &value, cookie);
   2c464:	463a      	mov	r2, r7
   2c466:	4669      	mov	r1, sp
   2c468:	4620      	mov	r0, r4
   2c46a:	47c0      	blx	r8
                if (rc != 0) {
   2c46c:	2800      	cmp	r0, #0
   2c46e:	d1f2      	bne.n	2c456 <ble_store_iterate+0x58>
        idx++;
   2c470:	3601      	adds	r6, #1
        *pidx = idx;
   2c472:	e7e5      	b.n	2c440 <ble_store_iterate+0x42>
        switch (rc) {
   2c474:	2500      	movs	r5, #0
   2c476:	e7ee      	b.n	2c456 <ble_store_iterate+0x58>

0002c478 <ble_store_util_iter_unique_peer>:

static int
ble_store_util_iter_unique_peer(int obj_type,
                                union ble_store_value *val,
                                void *arg)
{
   2c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c47a:	460e      	mov	r6, r1
   2c47c:	4615      	mov	r5, r2
                      obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    set = arg;

    /* Do nothing if this peer is a duplicate. */
    for (i = 0; i < set->num_peers; i++) {
   2c47e:	2400      	movs	r4, #0
   2c480:	e006      	b.n	2c490 <ble_store_util_iter_unique_peer+0x18>
   2c482:	2206      	movs	r2, #6
   2c484:	1c71      	adds	r1, r6, #1
   2c486:	1c78      	adds	r0, r7, #1
   2c488:	f7ea faec 	bl	16a64 <memcmp>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   2c48c:	b1e8      	cbz	r0, 2c4ca <ble_store_util_iter_unique_peer+0x52>
    for (i = 0; i < set->num_peers; i++) {
   2c48e:	3401      	adds	r4, #1
   2c490:	686b      	ldr	r3, [r5, #4]
   2c492:	42a3      	cmp	r3, r4
   2c494:	dd08      	ble.n	2c4a8 <ble_store_util_iter_unique_peer+0x30>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   2c496:	682a      	ldr	r2, [r5, #0]
   2c498:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   2c49c:	18d7      	adds	r7, r2, r3
    type_diff = a->type - b->type;
   2c49e:	5cd3      	ldrb	r3, [r2, r3]
   2c4a0:	7830      	ldrb	r0, [r6, #0]
    if (type_diff != 0) {
   2c4a2:	1a18      	subs	r0, r3, r0
   2c4a4:	d0ed      	beq.n	2c482 <ble_store_util_iter_unique_peer+0xa>
   2c4a6:	e7f1      	b.n	2c48c <ble_store_util_iter_unique_peer+0x14>
            return 0;
        }
    }

    if (set->num_peers >= set->max_peers) {
   2c4a8:	68aa      	ldr	r2, [r5, #8]
   2c4aa:	4293      	cmp	r3, r2
   2c4ac:	da0e      	bge.n	2c4cc <ble_store_util_iter_unique_peer+0x54>
        /* Overflow; abort the iterate procedure. */
        set->status = BLE_HS_ENOMEM;
        return 1;
    }

    set->peer_id_addrs[set->num_peers] = val->sec.peer_addr;
   2c4ae:	6829      	ldr	r1, [r5, #0]
   2c4b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2c4b4:	18ca      	adds	r2, r1, r3
   2c4b6:	6830      	ldr	r0, [r6, #0]
   2c4b8:	50c8      	str	r0, [r1, r3]
   2c4ba:	88b1      	ldrh	r1, [r6, #4]
   2c4bc:	79b3      	ldrb	r3, [r6, #6]
   2c4be:	8091      	strh	r1, [r2, #4]
   2c4c0:	7193      	strb	r3, [r2, #6]
    set->num_peers++;
   2c4c2:	686b      	ldr	r3, [r5, #4]
   2c4c4:	3301      	adds	r3, #1
   2c4c6:	606b      	str	r3, [r5, #4]

    return 0;
   2c4c8:	2000      	movs	r0, #0
}
   2c4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        set->status = BLE_HS_ENOMEM;
   2c4cc:	2306      	movs	r3, #6
   2c4ce:	60eb      	str	r3, [r5, #12]
        return 1;
   2c4d0:	2001      	movs	r0, #1
   2c4d2:	e7fa      	b.n	2c4ca <ble_store_util_iter_unique_peer+0x52>

0002c4d4 <ble_store_util_bonded_peers>:
 *                              Other nonzero on error.
 */
int
ble_store_util_bonded_peers(ble_addr_t *out_peer_id_addrs, int *out_num_peers,
                            int max_peers)
{
   2c4d4:	b510      	push	{r4, lr}
   2c4d6:	b084      	sub	sp, #16
   2c4d8:	460c      	mov	r4, r1
    struct ble_store_util_peer_set set = {
   2c4da:	9000      	str	r0, [sp, #0]
   2c4dc:	2300      	movs	r3, #0
   2c4de:	9301      	str	r3, [sp, #4]
   2c4e0:	9202      	str	r2, [sp, #8]
   2c4e2:	9303      	str	r3, [sp, #12]
        .max_peers = max_peers,
        .status = 0,
    };
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_OUR_SEC,
   2c4e4:	466a      	mov	r2, sp
   2c4e6:	4906      	ldr	r1, [pc, #24]	; (2c500 <ble_store_util_bonded_peers+0x2c>)
   2c4e8:	2001      	movs	r0, #1
   2c4ea:	f7ff ff88 	bl	2c3fe <ble_store_iterate>
                           ble_store_util_iter_unique_peer,
                           &set);
    if (rc != 0) {
   2c4ee:	4603      	mov	r3, r0
   2c4f0:	b918      	cbnz	r0, 2c4fa <ble_store_util_bonded_peers+0x26>
        return rc;
    }
    if (set.status != 0) {
   2c4f2:	9b03      	ldr	r3, [sp, #12]
   2c4f4:	b90b      	cbnz	r3, 2c4fa <ble_store_util_bonded_peers+0x26>
        return set.status;
    }

    *out_num_peers = set.num_peers;
   2c4f6:	9a01      	ldr	r2, [sp, #4]
   2c4f8:	6022      	str	r2, [r4, #0]
    return 0;
}
   2c4fa:	4618      	mov	r0, r3
   2c4fc:	b004      	add	sp, #16
   2c4fe:	bd10      	pop	{r4, pc}
   2c500:	0002c479 	.word	0x0002c479

0002c504 <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   2c504:	b538      	push	{r3, r4, r5, lr}
   2c506:	4605      	mov	r5, r0
   2c508:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   2c50a:	4621      	mov	r1, r4
   2c50c:	4628      	mov	r0, r5
   2c50e:	f7ff fec1 	bl	2c294 <ble_store_delete>
    } while (rc == 0);
   2c512:	4603      	mov	r3, r0
   2c514:	2800      	cmp	r0, #0
   2c516:	d0f8      	beq.n	2c50a <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   2c518:	2805      	cmp	r0, #5
   2c51a:	d100      	bne.n	2c51e <ble_store_util_delete_all+0x1a>
        return rc;
    }

    return 0;
   2c51c:	2300      	movs	r3, #0
}
   2c51e:	4618      	mov	r0, r3
   2c520:	bd38      	pop	{r3, r4, r5, pc}

0002c522 <ble_store_util_delete_peer>:
{
   2c522:	b510      	push	{r4, lr}
   2c524:	b088      	sub	sp, #32
   2c526:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   2c528:	2220      	movs	r2, #32
   2c52a:	2100      	movs	r1, #0
   2c52c:	4668      	mov	r0, sp
   2c52e:	f7ea fae2 	bl	16af6 <memset>
    key.sec.peer_addr = *peer_id_addr;
   2c532:	6820      	ldr	r0, [r4, #0]
   2c534:	9000      	str	r0, [sp, #0]
   2c536:	88a2      	ldrh	r2, [r4, #4]
   2c538:	79a3      	ldrb	r3, [r4, #6]
   2c53a:	f8ad 2004 	strh.w	r2, [sp, #4]
   2c53e:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   2c542:	4669      	mov	r1, sp
   2c544:	2001      	movs	r0, #1
   2c546:	f7ff ffdd 	bl	2c504 <ble_store_util_delete_all>
    if (rc != 0) {
   2c54a:	4603      	mov	r3, r0
   2c54c:	b110      	cbz	r0, 2c554 <ble_store_util_delete_peer+0x32>
}
   2c54e:	4618      	mov	r0, r3
   2c550:	b008      	add	sp, #32
   2c552:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   2c554:	4669      	mov	r1, sp
   2c556:	2002      	movs	r0, #2
   2c558:	f7ff ffd4 	bl	2c504 <ble_store_util_delete_all>
    if (rc != 0) {
   2c55c:	4603      	mov	r3, r0
   2c55e:	2800      	cmp	r0, #0
   2c560:	d1f5      	bne.n	2c54e <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   2c562:	2220      	movs	r2, #32
   2c564:	2100      	movs	r1, #0
   2c566:	4668      	mov	r0, sp
   2c568:	f7ea fac5 	bl	16af6 <memset>
    key.cccd.peer_addr = *peer_id_addr;
   2c56c:	6820      	ldr	r0, [r4, #0]
   2c56e:	9000      	str	r0, [sp, #0]
   2c570:	88a2      	ldrh	r2, [r4, #4]
   2c572:	79a3      	ldrb	r3, [r4, #6]
   2c574:	f8ad 2004 	strh.w	r2, [sp, #4]
   2c578:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   2c57c:	4669      	mov	r1, sp
   2c57e:	2003      	movs	r0, #3
   2c580:	f7ff ffc0 	bl	2c504 <ble_store_util_delete_all>
   2c584:	4603      	mov	r3, r0
    if (rc != 0) {
   2c586:	e7e2      	b.n	2c54e <ble_store_util_delete_peer+0x2c>

0002c588 <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   2c588:	b508      	push	{r3, lr}
    switch (event->event_code) {
   2c58a:	6803      	ldr	r3, [r0, #0]
   2c58c:	2b01      	cmp	r3, #1
   2c58e:	d003      	beq.n	2c598 <ble_store_util_status_rr+0x10>
   2c590:	2b02      	cmp	r3, #2
   2c592:	d113      	bne.n	2c5bc <ble_store_util_status_rr+0x34>
   2c594:	2000      	movs	r0, #0
        return 0;

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   2c596:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   2c598:	6843      	ldr	r3, [r0, #4]
   2c59a:	2b02      	cmp	r3, #2
   2c59c:	dd05      	ble.n	2c5aa <ble_store_util_status_rr+0x22>
   2c59e:	2b03      	cmp	r3, #3
   2c5a0:	d107      	bne.n	2c5b2 <ble_store_util_status_rr+0x2a>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   2c5a2:	6880      	ldr	r0, [r0, #8]
   2c5a4:	f7f8 ff4b 	bl	2543e <ble_gap_unpair_oldest_except>
   2c5a8:	e7f5      	b.n	2c596 <ble_store_util_status_rr+0xe>
        switch (event->overflow.obj_type) {
   2c5aa:	2b00      	cmp	r3, #0
   2c5ac:	dc03      	bgt.n	2c5b6 <ble_store_util_status_rr+0x2e>
   2c5ae:	2011      	movs	r0, #17
   2c5b0:	e7f1      	b.n	2c596 <ble_store_util_status_rr+0xe>
   2c5b2:	2011      	movs	r0, #17
   2c5b4:	e7ef      	b.n	2c596 <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   2c5b6:	f7f8 ff30 	bl	2541a <ble_gap_unpair_oldest_peer>
   2c5ba:	e7ec      	b.n	2c596 <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   2c5bc:	2011      	movs	r0, #17
   2c5be:	e7ea      	b.n	2c596 <ble_store_util_status_rr+0xe>

0002c5c0 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   2c5c0:	b570      	push	{r4, r5, r6, lr}
   2c5c2:	4604      	mov	r4, r0
   2c5c4:	4608      	mov	r0, r1
    switch (len) {
   2c5c6:	2a04      	cmp	r2, #4
   2c5c8:	d00c      	beq.n	2c5e4 <ble_uuid_init_from_buf+0x24>
   2c5ca:	2a10      	cmp	r2, #16
   2c5cc:	d011      	beq.n	2c5f2 <ble_uuid_init_from_buf+0x32>
   2c5ce:	2a02      	cmp	r2, #2
   2c5d0:	d001      	beq.n	2c5d6 <ble_uuid_init_from_buf+0x16>
   2c5d2:	2003      	movs	r0, #3
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
}
   2c5d4:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   2c5d6:	2310      	movs	r3, #16
   2c5d8:	7023      	strb	r3, [r4, #0]
        uuid->u16.value = get_le16(buf);
   2c5da:	f005 fca0 	bl	31f1e <get_le16>
   2c5de:	8060      	strh	r0, [r4, #2]
        return 0;
   2c5e0:	2000      	movs	r0, #0
   2c5e2:	e7f7      	b.n	2c5d4 <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_32;
   2c5e4:	2320      	movs	r3, #32
   2c5e6:	7023      	strb	r3, [r4, #0]
        uuid->u32.value = get_le32(buf);
   2c5e8:	f005 fc9e 	bl	31f28 <get_le32>
   2c5ec:	6060      	str	r0, [r4, #4]
        return 0;
   2c5ee:	2000      	movs	r0, #0
   2c5f0:	e7f0      	b.n	2c5d4 <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
   2c5f2:	4623      	mov	r3, r4
   2c5f4:	2280      	movs	r2, #128	; 0x80
   2c5f6:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   2c5fa:	680e      	ldr	r6, [r1, #0]
   2c5fc:	684d      	ldr	r5, [r1, #4]
   2c5fe:	6889      	ldr	r1, [r1, #8]
   2c600:	68c2      	ldr	r2, [r0, #12]
   2c602:	f8c4 6001 	str.w	r6, [r4, #1]
   2c606:	605d      	str	r5, [r3, #4]
   2c608:	6099      	str	r1, [r3, #8]
   2c60a:	60da      	str	r2, [r3, #12]
        return 0;
   2c60c:	2000      	movs	r0, #0
   2c60e:	e7e1      	b.n	2c5d4 <ble_uuid_init_from_buf+0x14>

0002c610 <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   2c610:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   2c612:	7803      	ldrb	r3, [r0, #0]
   2c614:	780a      	ldrb	r2, [r1, #0]
   2c616:	4293      	cmp	r3, r2
   2c618:	d001      	beq.n	2c61e <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   2c61a:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   2c61c:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   2c61e:	2b20      	cmp	r3, #32
   2c620:	d00a      	beq.n	2c638 <ble_uuid_cmp+0x28>
   2c622:	2b80      	cmp	r3, #128	; 0x80
   2c624:	d00c      	beq.n	2c640 <ble_uuid_cmp+0x30>
   2c626:	2b10      	cmp	r3, #16
   2c628:	d002      	beq.n	2c630 <ble_uuid_cmp+0x20>
   2c62a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c62e:	e7f5      	b.n	2c61c <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   2c630:	8840      	ldrh	r0, [r0, #2]
   2c632:	884b      	ldrh	r3, [r1, #2]
   2c634:	1ac0      	subs	r0, r0, r3
   2c636:	e7f1      	b.n	2c61c <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   2c638:	6840      	ldr	r0, [r0, #4]
   2c63a:	684b      	ldr	r3, [r1, #4]
   2c63c:	1ac0      	subs	r0, r0, r3
   2c63e:	e7ed      	b.n	2c61c <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   2c640:	2210      	movs	r2, #16
   2c642:	3101      	adds	r1, #1
   2c644:	3001      	adds	r0, #1
   2c646:	f7ea fa0d 	bl	16a64 <memcmp>
   2c64a:	e7e7      	b.n	2c61c <ble_uuid_cmp+0xc>

0002c64c <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   2c64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c650:	b091      	sub	sp, #68	; 0x44
   2c652:	4688      	mov	r8, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   2c654:	7803      	ldrb	r3, [r0, #0]
   2c656:	2b20      	cmp	r3, #32
   2c658:	d00f      	beq.n	2c67a <ble_uuid_to_str+0x2e>
   2c65a:	2b80      	cmp	r3, #128	; 0x80
   2c65c:	d013      	beq.n	2c686 <ble_uuid_to_str+0x3a>
   2c65e:	2b10      	cmp	r3, #16
   2c660:	d002      	beq.n	2c668 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   2c662:	2300      	movs	r3, #0
   2c664:	700b      	strb	r3, [r1, #0]
        break;
   2c666:	e004      	b.n	2c672 <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   2c668:	8842      	ldrh	r2, [r0, #2]
   2c66a:	491f      	ldr	r1, [pc, #124]	; (2c6e8 <ble_uuid_to_str+0x9c>)
   2c66c:	4640      	mov	r0, r8
   2c66e:	f005 fe9d 	bl	323ac <sprintf>
    }

    return dst;
}
   2c672:	4640      	mov	r0, r8
   2c674:	b011      	add	sp, #68	; 0x44
   2c676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   2c67a:	6842      	ldr	r2, [r0, #4]
   2c67c:	491b      	ldr	r1, [pc, #108]	; (2c6ec <ble_uuid_to_str+0xa0>)
   2c67e:	4640      	mov	r0, r8
   2c680:	f005 fe94 	bl	323ac <sprintf>
        break;
   2c684:	e7f5      	b.n	2c672 <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   2c686:	7b83      	ldrb	r3, [r0, #14]
   2c688:	930e      	str	r3, [sp, #56]	; 0x38
   2c68a:	7b42      	ldrb	r2, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   2c68c:	7b01      	ldrb	r1, [r0, #12]
   2c68e:	7ac4      	ldrb	r4, [r0, #11]
   2c690:	940f      	str	r4, [sp, #60]	; 0x3c
   2c692:	7a84      	ldrb	r4, [r0, #10]
   2c694:	7a45      	ldrb	r5, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   2c696:	7a06      	ldrb	r6, [r0, #8]
   2c698:	79c7      	ldrb	r7, [r0, #7]
   2c69a:	f890 c006 	ldrb.w	ip, [r0, #6]
   2c69e:	f890 e005 	ldrb.w	lr, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   2c6a2:	7903      	ldrb	r3, [r0, #4]
   2c6a4:	f890 9003 	ldrb.w	r9, [r0, #3]
   2c6a8:	f890 a002 	ldrb.w	sl, [r0, #2]
   2c6ac:	f890 b001 	ldrb.w	fp, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   2c6b0:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   2c6b4:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   2c6b8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2c6bc:	930a      	str	r3, [sp, #40]	; 0x28
   2c6be:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   2c6c2:	f8cd c020 	str.w	ip, [sp, #32]
   2c6c6:	9707      	str	r7, [sp, #28]
   2c6c8:	9606      	str	r6, [sp, #24]
   2c6ca:	9505      	str	r5, [sp, #20]
   2c6cc:	9404      	str	r4, [sp, #16]
   2c6ce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2c6d0:	9403      	str	r4, [sp, #12]
   2c6d2:	9102      	str	r1, [sp, #8]
   2c6d4:	9201      	str	r2, [sp, #4]
   2c6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c6d8:	9300      	str	r3, [sp, #0]
   2c6da:	7bc3      	ldrb	r3, [r0, #15]
   2c6dc:	7c02      	ldrb	r2, [r0, #16]
   2c6de:	4904      	ldr	r1, [pc, #16]	; (2c6f0 <ble_uuid_to_str+0xa4>)
   2c6e0:	4640      	mov	r0, r8
   2c6e2:	f005 fe63 	bl	323ac <sprintf>
        break;
   2c6e6:	e7c4      	b.n	2c672 <ble_uuid_to_str+0x26>
   2c6e8:	00034fb4 	.word	0x00034fb4
   2c6ec:	00034fbc 	.word	0x00034fbc
   2c6f0:	00034fc4 	.word	0x00034fc4

0002c6f4 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   2c6f4:	7803      	ldrb	r3, [r0, #0]
   2c6f6:	2b10      	cmp	r3, #16
   2c6f8:	d001      	beq.n	2c6fe <ble_uuid_u16+0xa>
   2c6fa:	2000      	movs	r0, #0
}
   2c6fc:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   2c6fe:	8840      	ldrh	r0, [r0, #2]
   2c700:	4770      	bx	lr

0002c702 <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   2c702:	b570      	push	{r4, r5, r6, lr}
   2c704:	4604      	mov	r4, r0
    int rc = 0;

    if (len == 2) {
   2c706:	2a02      	cmp	r2, #2
   2c708:	d003      	beq.n	2c712 <ble_uuid_init_from_att_buf+0x10>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   2c70a:	2a10      	cmp	r2, #16
   2c70c:	d009      	beq.n	2c722 <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   2c70e:	2003      	movs	r0, #3
    }

    return rc;
}
   2c710:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   2c712:	2310      	movs	r3, #16
   2c714:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   2c716:	4608      	mov	r0, r1
   2c718:	f005 fc01 	bl	31f1e <get_le16>
   2c71c:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   2c71e:	2000      	movs	r0, #0
   2c720:	e7f6      	b.n	2c710 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_128;
   2c722:	4603      	mov	r3, r0
   2c724:	2280      	movs	r2, #128	; 0x80
   2c726:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   2c72a:	680e      	ldr	r6, [r1, #0]
   2c72c:	684d      	ldr	r5, [r1, #4]
   2c72e:	6888      	ldr	r0, [r1, #8]
   2c730:	68ca      	ldr	r2, [r1, #12]
   2c732:	f8c4 6001 	str.w	r6, [r4, #1]
   2c736:	605d      	str	r5, [r3, #4]
   2c738:	6098      	str	r0, [r3, #8]
   2c73a:	60da      	str	r2, [r3, #12]
    int rc = 0;
   2c73c:	2000      	movs	r0, #0
   2c73e:	e7e7      	b.n	2c710 <ble_uuid_init_from_att_buf+0xe>

0002c740 <ble_uuid_init_from_att_mbuf>:
{
   2c740:	b530      	push	{r4, r5, lr}
   2c742:	b085      	sub	sp, #20
   2c744:	4605      	mov	r5, r0
   2c746:	4608      	mov	r0, r1
   2c748:	4611      	mov	r1, r2
   2c74a:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   2c74c:	466b      	mov	r3, sp
   2c74e:	4622      	mov	r2, r4
   2c750:	f7e9 f834 	bl	157bc <os_mbuf_copydata>
    if (rc != 0) {
   2c754:	b108      	cbz	r0, 2c75a <ble_uuid_init_from_att_mbuf+0x1a>
}
   2c756:	b005      	add	sp, #20
   2c758:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   2c75a:	4622      	mov	r2, r4
   2c75c:	4669      	mov	r1, sp
   2c75e:	4628      	mov	r0, r5
   2c760:	f7ff ffcf 	bl	2c702 <ble_uuid_init_from_att_buf>
    return rc;
   2c764:	e7f7      	b.n	2c756 <ble_uuid_init_from_att_mbuf+0x16>
	...

0002c768 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   2c768:	b570      	push	{r4, r5, r6, lr}
   2c76a:	4605      	mov	r5, r0
   2c76c:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   2c76e:	7803      	ldrb	r3, [r0, #0]
   2c770:	2b20      	cmp	r3, #32
   2c772:	d00b      	beq.n	2c78c <ble_uuid_flat+0x24>
   2c774:	2b80      	cmp	r3, #128	; 0x80
   2c776:	d016      	beq.n	2c7a6 <ble_uuid_flat+0x3e>
   2c778:	2b10      	cmp	r3, #16
   2c77a:	d001      	beq.n	2c780 <ble_uuid_flat+0x18>
   2c77c:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   2c77e:	bd70      	pop	{r4, r5, r6, pc}
        put_le16(dst, BLE_UUID16(uuid)->value);
   2c780:	8841      	ldrh	r1, [r0, #2]
   2c782:	4620      	mov	r0, r4
   2c784:	f005 fbaa 	bl	31edc <put_le16>
    return 0;
   2c788:	2000      	movs	r0, #0
        break;
   2c78a:	e7f8      	b.n	2c77e <ble_uuid_flat+0x16>
        memcpy(dst, ble_uuid_base, 16);
   2c78c:	4e0b      	ldr	r6, [pc, #44]	; (2c7bc <ble_uuid_flat+0x54>)
   2c78e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2c790:	6020      	str	r0, [r4, #0]
   2c792:	6061      	str	r1, [r4, #4]
   2c794:	60a2      	str	r2, [r4, #8]
   2c796:	4620      	mov	r0, r4
   2c798:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   2c79c:	6869      	ldr	r1, [r5, #4]
   2c79e:	f005 fba1 	bl	31ee4 <put_le32>
    return 0;
   2c7a2:	2000      	movs	r0, #0
        break;
   2c7a4:	e7eb      	b.n	2c77e <ble_uuid_flat+0x16>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   2c7a6:	f855 0f01 	ldr.w	r0, [r5, #1]!
   2c7aa:	6869      	ldr	r1, [r5, #4]
   2c7ac:	68aa      	ldr	r2, [r5, #8]
   2c7ae:	68eb      	ldr	r3, [r5, #12]
   2c7b0:	6020      	str	r0, [r4, #0]
   2c7b2:	6061      	str	r1, [r4, #4]
   2c7b4:	60a2      	str	r2, [r4, #8]
   2c7b6:	60e3      	str	r3, [r4, #12]
    return 0;
   2c7b8:	2000      	movs	r0, #0
        break;
   2c7ba:	e7e0      	b.n	2c77e <ble_uuid_flat+0x16>
   2c7bc:	0003500c 	.word	0x0003500c

0002c7c0 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   2c7c0:	7800      	ldrb	r0, [r0, #0]
}
   2c7c2:	08c0      	lsrs	r0, r0, #3
   2c7c4:	4770      	bx	lr

0002c7c6 <ble_uuid_to_mbuf>:
{
   2c7c6:	b538      	push	{r3, r4, r5, lr}
   2c7c8:	4605      	mov	r5, r0
   2c7ca:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   2c7cc:	f7ff fff8 	bl	2c7c0 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   2c7d0:	b281      	uxth	r1, r0
   2c7d2:	4620      	mov	r0, r4
   2c7d4:	f7e9 f975 	bl	15ac2 <os_mbuf_extend>
    if (buf == NULL) {
   2c7d8:	b128      	cbz	r0, 2c7e6 <ble_uuid_to_mbuf+0x20>
   2c7da:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   2c7dc:	4628      	mov	r0, r5
   2c7de:	f7ff ffc3 	bl	2c768 <ble_uuid_flat>
    return 0;
   2c7e2:	2000      	movs	r0, #0
}
   2c7e4:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   2c7e6:	2006      	movs	r0, #6
   2c7e8:	e7fc      	b.n	2c7e4 <ble_uuid_to_mbuf+0x1e>

0002c7ea <ble_sm_alg_xor_128>:
static void
ble_sm_alg_xor_128(const uint8_t *p, const uint8_t *q, uint8_t *r)
{
    int i;

    for (i = 0; i < 16; i++) {
   2c7ea:	2300      	movs	r3, #0
   2c7ec:	2b0f      	cmp	r3, #15
   2c7ee:	dc09      	bgt.n	2c804 <ble_sm_alg_xor_128+0x1a>
{
   2c7f0:	b430      	push	{r4, r5}
        r[i] = p[i] ^ q[i];
   2c7f2:	5cc4      	ldrb	r4, [r0, r3]
   2c7f4:	5ccd      	ldrb	r5, [r1, r3]
   2c7f6:	406c      	eors	r4, r5
   2c7f8:	54d4      	strb	r4, [r2, r3]
    for (i = 0; i < 16; i++) {
   2c7fa:	3301      	adds	r3, #1
   2c7fc:	2b0f      	cmp	r3, #15
   2c7fe:	ddf8      	ble.n	2c7f2 <ble_sm_alg_xor_128+0x8>
    }
}
   2c800:	bc30      	pop	{r4, r5}
   2c802:	4770      	bx	lr
   2c804:	4770      	bx	lr

0002c806 <ble_sm_alg_encrypt>:

static int
ble_sm_alg_encrypt(const uint8_t *key, const uint8_t *plaintext,
                   uint8_t *enc_data)
{
   2c806:	b530      	push	{r4, r5, lr}
   2c808:	b0b1      	sub	sp, #196	; 0xc4
   2c80a:	460d      	mov	r5, r1
   2c80c:	4614      	mov	r4, r2
    struct tc_aes_key_sched_struct s;
    uint8_t tmp[16];

    swap_buf(tmp, key, 16);
   2c80e:	2210      	movs	r2, #16
   2c810:	4601      	mov	r1, r0
   2c812:	4668      	mov	r0, sp
   2c814:	f005 fbba 	bl	31f8c <swap_buf>

    if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   2c818:	4669      	mov	r1, sp
   2c81a:	a804      	add	r0, sp, #16
   2c81c:	f001 fa0a 	bl	2dc34 <tc_aes128_set_encrypt_key>
   2c820:	b188      	cbz	r0, 2c846 <ble_sm_alg_encrypt+0x40>
        return BLE_HS_EUNKNOWN;
    }

    swap_buf(tmp, plaintext, 16);
   2c822:	2210      	movs	r2, #16
   2c824:	4629      	mov	r1, r5
   2c826:	4668      	mov	r0, sp
   2c828:	f005 fbb0 	bl	31f8c <swap_buf>

    if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   2c82c:	aa04      	add	r2, sp, #16
   2c82e:	4669      	mov	r1, sp
   2c830:	4620      	mov	r0, r4
   2c832:	f001 fa5d 	bl	2dcf0 <tc_aes_encrypt>
   2c836:	b140      	cbz	r0, 2c84a <ble_sm_alg_encrypt+0x44>
        return BLE_HS_EUNKNOWN;
    }

    swap_in_place(enc_data, 16);
   2c838:	2110      	movs	r1, #16
   2c83a:	4620      	mov	r0, r4
   2c83c:	f005 fb96 	bl	31f6c <swap_in_place>

    return 0;
   2c840:	2000      	movs	r0, #0
}
   2c842:	b031      	add	sp, #196	; 0xc4
   2c844:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EUNKNOWN;
   2c846:	2011      	movs	r0, #17
   2c848:	e7fb      	b.n	2c842 <ble_sm_alg_encrypt+0x3c>
        return BLE_HS_EUNKNOWN;
   2c84a:	2011      	movs	r0, #17
   2c84c:	e7f9      	b.n	2c842 <ble_sm_alg_encrypt+0x3c>

0002c84e <ble_sm_alg_s1>:

int
ble_sm_alg_s1(const uint8_t *k, const uint8_t *r1, const uint8_t *r2,
              uint8_t *out)
{
   2c84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c852:	4607      	mov	r7, r0
   2c854:	460e      	mov	r6, r1
   2c856:	4615      	mov	r5, r2
   2c858:	461c      	mov	r4, r3
     * r1' is concatenated with r2' to generate r' which is used as
     * the 128-bit input parameter plaintextData to security function e:
     *
     *    r' = r1' || r2'
     */
    memcpy(out, r2, 8);
   2c85a:	6812      	ldr	r2, [r2, #0]
   2c85c:	686b      	ldr	r3, [r5, #4]
   2c85e:	6022      	str	r2, [r4, #0]
   2c860:	6063      	str	r3, [r4, #4]
    memcpy(out + 8, r1, 8);
   2c862:	680a      	ldr	r2, [r1, #0]
   2c864:	684b      	ldr	r3, [r1, #4]
   2c866:	60a2      	str	r2, [r4, #8]
   2c868:	60e3      	str	r3, [r4, #12]

    /* s1(k, r1 , r2) = e(k, r') */
    rc = ble_sm_alg_encrypt(k, out, out);
   2c86a:	4622      	mov	r2, r4
   2c86c:	4621      	mov	r1, r4
   2c86e:	f7ff ffca 	bl	2c806 <ble_sm_alg_encrypt>
    if (rc != 0) {
   2c872:	4680      	mov	r8, r0
   2c874:	b110      	cbz	r0, 2c87c <ble_sm_alg_s1+0x2e>
    BLE_HS_LOG(DEBUG, "\n    out=");
    ble_hs_log_flat_buf(out, 16);
    BLE_HS_LOG(DEBUG, "\n");

    return 0;
}
   2c876:	4640      	mov	r0, r8
   2c878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_flat_buf(k, 16);
   2c87c:	2110      	movs	r1, #16
   2c87e:	4638      	mov	r0, r7
   2c880:	f7fc ff0a 	bl	29698 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r1, 16);
   2c884:	2110      	movs	r1, #16
   2c886:	4630      	mov	r0, r6
   2c888:	f7fc ff06 	bl	29698 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r2, 16);
   2c88c:	2110      	movs	r1, #16
   2c88e:	4628      	mov	r0, r5
   2c890:	f7fc ff02 	bl	29698 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(out, 16);
   2c894:	2110      	movs	r1, #16
   2c896:	4620      	mov	r0, r4
   2c898:	f7fc fefe 	bl	29698 <ble_hs_log_flat_buf>
    return 0;
   2c89c:	e7eb      	b.n	2c876 <ble_sm_alg_s1+0x28>

0002c89e <ble_sm_alg_c1>:
ble_sm_alg_c1(const uint8_t *k, const uint8_t *r,
              const uint8_t *preq, const uint8_t *pres,
              uint8_t iat, uint8_t rat,
              const uint8_t *ia, const uint8_t *ra,
              uint8_t *out_enc_data)
{
   2c89e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c8a2:	b088      	sub	sp, #32
   2c8a4:	4680      	mov	r8, r0
   2c8a6:	460f      	mov	r7, r1
   2c8a8:	4615      	mov	r5, r2
   2c8aa:	461c      	mov	r4, r3
   2c8ac:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2c8b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2c8b4:	9e14      	ldr	r6, [sp, #80]	; 0x50
    uint8_t p1[16], p2[16];
    int rc;

    BLE_HS_LOG(DEBUG, "ble_sm_alg_c1()\n    k=");
    ble_hs_log_flat_buf(k, 16);
   2c8b6:	2110      	movs	r1, #16
   2c8b8:	f7fc feee 	bl	29698 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    r=");
    ble_hs_log_flat_buf(r, 16);
   2c8bc:	2110      	movs	r1, #16
   2c8be:	4638      	mov	r0, r7
   2c8c0:	f7fc feea 	bl	29698 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    iat=%d rat=%d", iat, rat);
    BLE_HS_LOG(DEBUG, "\n    ia=");
    ble_hs_log_flat_buf(ia, 6);
   2c8c4:	2106      	movs	r1, #6
   2c8c6:	4648      	mov	r0, r9
   2c8c8:	f7fc fee6 	bl	29698 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    ra=");
    ble_hs_log_flat_buf(ra, 6);
   2c8cc:	2106      	movs	r1, #6
   2c8ce:	4650      	mov	r0, sl
   2c8d0:	f7fc fee2 	bl	29698 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    preq=");
    ble_hs_log_flat_buf(preq, 7);
   2c8d4:	2107      	movs	r1, #7
   2c8d6:	4628      	mov	r0, r5
   2c8d8:	f7fc fede 	bl	29698 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    pres=");
    ble_hs_log_flat_buf(pres, 7);
   2c8dc:	2107      	movs	r1, #7
   2c8de:	4620      	mov	r0, r4
   2c8e0:	f7fc feda 	bl	29698 <ble_hs_log_flat_buf>

    /* pres, preq, rat and iat are concatenated to generate p1 */
    p1[0] = iat;
   2c8e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   2c8e8:	f88d 3010 	strb.w	r3, [sp, #16]
    p1[1] = rat;
   2c8ec:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c8f0:	f88d 3011 	strb.w	r3, [sp, #17]
    memcpy(p1 + 2, preq, 7);
   2c8f4:	682b      	ldr	r3, [r5, #0]
   2c8f6:	f8cd 3012 	str.w	r3, [sp, #18]
   2c8fa:	88aa      	ldrh	r2, [r5, #4]
   2c8fc:	79ab      	ldrb	r3, [r5, #6]
   2c8fe:	f8ad 2016 	strh.w	r2, [sp, #22]
   2c902:	f88d 3018 	strb.w	r3, [sp, #24]
    memcpy(p1 + 9, pres, 7);
   2c906:	6823      	ldr	r3, [r4, #0]
   2c908:	f8cd 3019 	str.w	r3, [sp, #25]
   2c90c:	88a2      	ldrh	r2, [r4, #4]
   2c90e:	79a3      	ldrb	r3, [r4, #6]
   2c910:	f8ad 201d 	strh.w	r2, [sp, #29]
   2c914:	f88d 301f 	strb.w	r3, [sp, #31]

    BLE_HS_LOG(DEBUG, "\n    p1=");
    ble_hs_log_flat_buf(p1, sizeof p1);
   2c918:	2110      	movs	r1, #16
   2c91a:	eb0d 0001 	add.w	r0, sp, r1
   2c91e:	f7fc febb 	bl	29698 <ble_hs_log_flat_buf>

    /* c1 = e(k, e(k, r XOR p1) XOR p2) */

    /* Using out_enc_data as temporary output buffer */
    ble_sm_alg_xor_128(r, p1, out_enc_data);
   2c922:	4632      	mov	r2, r6
   2c924:	a904      	add	r1, sp, #16
   2c926:	4638      	mov	r0, r7
   2c928:	f7ff ff5f 	bl	2c7ea <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   2c92c:	4632      	mov	r2, r6
   2c92e:	4631      	mov	r1, r6
   2c930:	4640      	mov	r0, r8
   2c932:	f7ff ff68 	bl	2c806 <ble_sm_alg_encrypt>
    if (rc != 0) {
   2c936:	bb40      	cbnz	r0, 2c98a <ble_sm_alg_c1+0xec>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    /* ra is concatenated with ia and padding to generate p2 */
    memcpy(p2, ra, 6);
   2c938:	f8da 0000 	ldr.w	r0, [sl]
   2c93c:	9000      	str	r0, [sp, #0]
   2c93e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
   2c942:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(p2 + 6, ia, 6);
   2c946:	f8d9 3000 	ldr.w	r3, [r9]
   2c94a:	f8cd 3006 	str.w	r3, [sp, #6]
   2c94e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   2c952:	f8ad 300a 	strh.w	r3, [sp, #10]
    memset(p2 + 12, 0, 4);
   2c956:	2300      	movs	r3, #0
   2c958:	9303      	str	r3, [sp, #12]

    BLE_HS_LOG(DEBUG, "\n    p2=");
    ble_hs_log_flat_buf(p2, sizeof p2);
   2c95a:	2110      	movs	r1, #16
   2c95c:	4668      	mov	r0, sp
   2c95e:	f7fc fe9b 	bl	29698 <ble_hs_log_flat_buf>

    ble_sm_alg_xor_128(out_enc_data, p2, out_enc_data);
   2c962:	4632      	mov	r2, r6
   2c964:	4669      	mov	r1, sp
   2c966:	4630      	mov	r0, r6
   2c968:	f7ff ff3f 	bl	2c7ea <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   2c96c:	4632      	mov	r2, r6
   2c96e:	4631      	mov	r1, r6
   2c970:	4640      	mov	r0, r8
   2c972:	f7ff ff48 	bl	2c806 <ble_sm_alg_encrypt>
    if (rc != 0) {
   2c976:	4604      	mov	r4, r0
   2c978:	b948      	cbnz	r0, 2c98e <ble_sm_alg_c1+0xf0>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    BLE_HS_LOG(DEBUG, "\n    out_enc_data=");
    ble_hs_log_flat_buf(out_enc_data, 16);
   2c97a:	2110      	movs	r1, #16
   2c97c:	4630      	mov	r0, r6
   2c97e:	f7fc fe8b 	bl	29698 <ble_hs_log_flat_buf>
    rc = 0;

done:
    BLE_HS_LOG(DEBUG, "\n    rc=%d\n", rc);
    return rc;
}
   2c982:	4620      	mov	r0, r4
   2c984:	b008      	add	sp, #32
   2c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_HS_EUNKNOWN;
   2c98a:	2411      	movs	r4, #17
   2c98c:	e7f9      	b.n	2c982 <ble_sm_alg_c1+0xe4>
        rc = BLE_HS_EUNKNOWN;
   2c98e:	2411      	movs	r4, #17
    return rc;
   2c990:	e7f7      	b.n	2c982 <ble_sm_alg_c1+0xe4>
	...

0002c994 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   2c994:	b538      	push	{r3, r4, r5, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   2c996:	4b17      	ldr	r3, [pc, #92]	; (2c9f4 <ble_svc_ans_new_alert_notify+0x60>)
   2c998:	2200      	movs	r2, #0
   2c99a:	601a      	str	r2, [r3, #0]
   2c99c:	605a      	str	r2, [r3, #4]
   2c99e:	609a      	str	r2, [r3, #8]
   2c9a0:	60da      	str	r2, [r3, #12]
   2c9a2:	611a      	str	r2, [r3, #16]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   2c9a4:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   2c9a6:	4a14      	ldr	r2, [pc, #80]	; (2c9f8 <ble_svc_ans_new_alert_notify+0x64>)
   2c9a8:	5c12      	ldrb	r2, [r2, r0]
   2c9aa:	705a      	strb	r2, [r3, #1]

    if (info_str) {
   2c9ac:	b1a9      	cbz	r1, 2c9da <ble_svc_ans_new_alert_notify+0x46>
   2c9ae:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   2c9b0:	4608      	mov	r0, r1
   2c9b2:	f7ea f8c8 	bl	16b46 <strlen>
   2c9b6:	4602      	mov	r2, r0
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   2c9b8:	2812      	cmp	r0, #18
   2c9ba:	dd15      	ble.n	2c9e8 <ble_svc_ans_new_alert_notify+0x54>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   2c9bc:	4b0d      	ldr	r3, [pc, #52]	; (2c9f4 <ble_svc_ans_new_alert_notify+0x60>)
   2c9be:	6825      	ldr	r5, [r4, #0]
   2c9c0:	6860      	ldr	r0, [r4, #4]
   2c9c2:	68a1      	ldr	r1, [r4, #8]
   2c9c4:	68e2      	ldr	r2, [r4, #12]
   2c9c6:	f8c3 5002 	str.w	r5, [r3, #2]
   2c9ca:	f8c3 0006 	str.w	r0, [r3, #6]
   2c9ce:	f8c3 100a 	str.w	r1, [r3, #10]
   2c9d2:	f8c3 200e 	str.w	r2, [r3, #14]
   2c9d6:	8a22      	ldrh	r2, [r4, #16]
   2c9d8:	825a      	strh	r2, [r3, #18]
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   2c9da:	4b08      	ldr	r3, [pc, #32]	; (2c9fc <ble_svc_ans_new_alert_notify+0x68>)
   2c9dc:	8819      	ldrh	r1, [r3, #0]
   2c9de:	4b08      	ldr	r3, [pc, #32]	; (2ca00 <ble_svc_ans_new_alert_notify+0x6c>)
   2c9e0:	8818      	ldrh	r0, [r3, #0]
   2c9e2:	f7f9 fdbb 	bl	2655c <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   2c9e6:	bd38      	pop	{r3, r4, r5, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   2c9e8:	4621      	mov	r1, r4
   2c9ea:	4806      	ldr	r0, [pc, #24]	; (2ca04 <ble_svc_ans_new_alert_notify+0x70>)
   2c9ec:	f7ea f85e 	bl	16aac <memcpy>
   2c9f0:	e7f3      	b.n	2c9da <ble_svc_ans_new_alert_notify+0x46>
   2c9f2:	bf00      	nop
   2c9f4:	10003568 	.word	0x10003568
   2c9f8:	10003560 	.word	0x10003560
   2c9fc:	1000357c 	.word	0x1000357c
   2ca00:	1000355a 	.word	0x1000355a
   2ca04:	1000356a 	.word	0x1000356a

0002ca08 <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   2ca08:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   2ca0a:	4b06      	ldr	r3, [pc, #24]	; (2ca24 <ble_svc_ans_unr_alert_notify+0x1c>)
   2ca0c:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   2ca0e:	4a06      	ldr	r2, [pc, #24]	; (2ca28 <ble_svc_ans_unr_alert_notify+0x20>)
   2ca10:	5c12      	ldrb	r2, [r2, r0]
   2ca12:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   2ca14:	4b05      	ldr	r3, [pc, #20]	; (2ca2c <ble_svc_ans_unr_alert_notify+0x24>)
   2ca16:	8819      	ldrh	r1, [r3, #0]
   2ca18:	4b05      	ldr	r3, [pc, #20]	; (2ca30 <ble_svc_ans_unr_alert_notify+0x28>)
   2ca1a:	8818      	ldrh	r0, [r3, #0]
   2ca1c:	f7f9 fd9e 	bl	2655c <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   2ca20:	bd08      	pop	{r3, pc}
   2ca22:	bf00      	nop
   2ca24:	1000358c 	.word	0x1000358c
   2ca28:	10003584 	.word	0x10003584
   2ca2c:	1000358e 	.word	0x1000358e
   2ca30:	1000355a 	.word	0x1000355a

0002ca34 <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   2ca34:	b510      	push	{r4, lr}
   2ca36:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   2ca38:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   2ca3a:	428b      	cmp	r3, r1
   2ca3c:	d307      	bcc.n	2ca4e <ble_svc_ans_chr_write+0x1a>
   2ca3e:	4293      	cmp	r3, r2
   2ca40:	d807      	bhi.n	2ca52 <ble_svc_ans_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   2ca42:	9b02      	ldr	r3, [sp, #8]
   2ca44:	4621      	mov	r1, r4
   2ca46:	f7fc fe51 	bl	296ec <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   2ca4a:	b920      	cbnz	r0, 2ca56 <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   2ca4c:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   2ca4e:	200d      	movs	r0, #13
   2ca50:	e7fc      	b.n	2ca4c <ble_svc_ans_chr_write+0x18>
   2ca52:	200d      	movs	r0, #13
   2ca54:	e7fa      	b.n	2ca4c <ble_svc_ans_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   2ca56:	200e      	movs	r0, #14
   2ca58:	e7f8      	b.n	2ca4c <ble_svc_ans_chr_write+0x18>
	...

0002ca5c <ble_svc_ans_access>:
{
   2ca5c:	b530      	push	{r4, r5, lr}
   2ca5e:	b083      	sub	sp, #12
   2ca60:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   2ca62:	6893      	ldr	r3, [r2, #8]
   2ca64:	6818      	ldr	r0, [r3, #0]
   2ca66:	f7ff fe45 	bl	2c6f4 <ble_uuid_u16>
    assert(uuid16 != 0);
   2ca6a:	b150      	cbz	r0, 2ca82 <ble_svc_ans_access+0x26>
    switch (uuid16) {
   2ca6c:	f5a0 5329 	sub.w	r3, r0, #10816	; 0x2a40
   2ca70:	3b04      	subs	r3, #4
   2ca72:	2b04      	cmp	r3, #4
   2ca74:	f200 80d7 	bhi.w	2cc26 <ble_svc_ans_access+0x1ca>
   2ca78:	e8df f003 	tbb	[pc, r3]
   2ca7c:	0d235a70 	.word	0x0d235a70
   2ca80:	45          	.byte	0x45
   2ca81:	00          	.byte	0x00
    assert(uuid16 != 0);
   2ca82:	f7e7 fde7 	bl	14654 <hal_debugger_connected>
   2ca86:	b100      	cbz	r0, 2ca8a <ble_svc_ans_access+0x2e>
   2ca88:	be01      	bkpt	0x0001
   2ca8a:	2300      	movs	r3, #0
   2ca8c:	461a      	mov	r2, r3
   2ca8e:	4619      	mov	r1, r3
   2ca90:	4618      	mov	r0, r3
   2ca92:	f7e8 f981 	bl	14d98 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2ca96:	7823      	ldrb	r3, [r4, #0]
   2ca98:	b94b      	cbnz	r3, 2caae <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   2ca9a:	2201      	movs	r2, #1
   2ca9c:	4969      	ldr	r1, [pc, #420]	; (2cc44 <ble_svc_ans_access+0x1e8>)
   2ca9e:	6860      	ldr	r0, [r4, #4]
   2caa0:	f7e8 fdfb 	bl	1569a <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2caa4:	4604      	mov	r4, r0
   2caa6:	2800      	cmp	r0, #0
   2caa8:	d05c      	beq.n	2cb64 <ble_svc_ans_access+0x108>
   2caaa:	2411      	movs	r4, #17
   2caac:	e05a      	b.n	2cb64 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2caae:	f7e7 fdd1 	bl	14654 <hal_debugger_connected>
   2cab2:	b100      	cbz	r0, 2cab6 <ble_svc_ans_access+0x5a>
   2cab4:	be01      	bkpt	0x0001
   2cab6:	2300      	movs	r3, #0
   2cab8:	461a      	mov	r2, r3
   2caba:	4619      	mov	r1, r3
   2cabc:	4618      	mov	r0, r3
   2cabe:	f7e8 f96b 	bl	14d98 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2cac2:	7823      	ldrb	r3, [r4, #0]
   2cac4:	2b01      	cmp	r3, #1
   2cac6:	d00a      	beq.n	2cade <ble_svc_ans_access+0x82>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   2cac8:	b99b      	cbnz	r3, 2caf2 <ble_svc_ans_access+0x96>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   2caca:	2214      	movs	r2, #20
   2cacc:	495e      	ldr	r1, [pc, #376]	; (2cc48 <ble_svc_ans_access+0x1ec>)
   2cace:	6860      	ldr	r0, [r4, #4]
   2cad0:	f7e8 fde3 	bl	1569a <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cad4:	4604      	mov	r4, r0
   2cad6:	2800      	cmp	r0, #0
   2cad8:	d044      	beq.n	2cb64 <ble_svc_ans_access+0x108>
   2cada:	2411      	movs	r4, #17
   2cadc:	e042      	b.n	2cb64 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   2cade:	4b5b      	ldr	r3, [pc, #364]	; (2cc4c <ble_svc_ans_access+0x1f0>)
   2cae0:	9300      	str	r3, [sp, #0]
   2cae2:	4b59      	ldr	r3, [pc, #356]	; (2cc48 <ble_svc_ans_access+0x1ec>)
   2cae4:	2214      	movs	r2, #20
   2cae6:	2100      	movs	r1, #0
   2cae8:	6860      	ldr	r0, [r4, #4]
   2caea:	f7ff ffa3 	bl	2ca34 <ble_svc_ans_chr_write>
   2caee:	4604      	mov	r4, r0
            return rc;
   2caf0:	e038      	b.n	2cb64 <ble_svc_ans_access+0x108>
        assert(0);
   2caf2:	f7e7 fdaf 	bl	14654 <hal_debugger_connected>
   2caf6:	b100      	cbz	r0, 2cafa <ble_svc_ans_access+0x9e>
   2caf8:	be01      	bkpt	0x0001
   2cafa:	2300      	movs	r3, #0
   2cafc:	461a      	mov	r2, r3
   2cafe:	4619      	mov	r1, r3
   2cb00:	4618      	mov	r0, r3
   2cb02:	f7e8 f949 	bl	14d98 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cb06:	7823      	ldrb	r3, [r4, #0]
   2cb08:	b943      	cbnz	r3, 2cb1c <ble_svc_ans_access+0xc0>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   2cb0a:	2201      	movs	r2, #1
   2cb0c:	4950      	ldr	r1, [pc, #320]	; (2cc50 <ble_svc_ans_access+0x1f4>)
   2cb0e:	6860      	ldr	r0, [r4, #4]
   2cb10:	f7e8 fdc3 	bl	1569a <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cb14:	4604      	mov	r4, r0
   2cb16:	b328      	cbz	r0, 2cb64 <ble_svc_ans_access+0x108>
   2cb18:	2411      	movs	r4, #17
   2cb1a:	e023      	b.n	2cb64 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cb1c:	f7e7 fd9a 	bl	14654 <hal_debugger_connected>
   2cb20:	b100      	cbz	r0, 2cb24 <ble_svc_ans_access+0xc8>
   2cb22:	be01      	bkpt	0x0001
   2cb24:	2300      	movs	r3, #0
   2cb26:	461a      	mov	r2, r3
   2cb28:	4619      	mov	r1, r3
   2cb2a:	4618      	mov	r0, r3
   2cb2c:	f7e8 f934 	bl	14d98 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2cb30:	7823      	ldrb	r3, [r4, #0]
   2cb32:	2b01      	cmp	r3, #1
   2cb34:	d008      	beq.n	2cb48 <ble_svc_ans_access+0xec>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   2cb36:	2202      	movs	r2, #2
   2cb38:	4946      	ldr	r1, [pc, #280]	; (2cc54 <ble_svc_ans_access+0x1f8>)
   2cb3a:	6860      	ldr	r0, [r4, #4]
   2cb3c:	f7e8 fdad 	bl	1569a <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cb40:	4604      	mov	r4, r0
   2cb42:	b178      	cbz	r0, 2cb64 <ble_svc_ans_access+0x108>
   2cb44:	2411      	movs	r4, #17
   2cb46:	e00d      	b.n	2cb64 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om,
   2cb48:	2300      	movs	r3, #0
   2cb4a:	9300      	str	r3, [sp, #0]
   2cb4c:	4b41      	ldr	r3, [pc, #260]	; (2cc54 <ble_svc_ans_access+0x1f8>)
   2cb4e:	2202      	movs	r2, #2
   2cb50:	4611      	mov	r1, r2
   2cb52:	6860      	ldr	r0, [r4, #4]
   2cb54:	f7ff ff6e 	bl	2ca34 <ble_svc_ans_chr_write>
   2cb58:	4604      	mov	r4, r0
            return rc;
   2cb5a:	e003      	b.n	2cb64 <ble_svc_ans_access+0x108>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2cb5c:	7823      	ldrb	r3, [r4, #0]
   2cb5e:	2b01      	cmp	r3, #1
   2cb60:	d003      	beq.n	2cb6a <ble_svc_ans_access+0x10e>
        return rc;
   2cb62:	240e      	movs	r4, #14
}
   2cb64:	4620      	mov	r0, r4
   2cb66:	b003      	add	sp, #12
   2cb68:	bd30      	pop	{r4, r5, pc}
            rc = ble_svc_ans_chr_write(ctxt->om,
   2cb6a:	2300      	movs	r3, #0
   2cb6c:	9300      	str	r3, [sp, #0]
   2cb6e:	4b3a      	ldr	r3, [pc, #232]	; (2cc58 <ble_svc_ans_access+0x1fc>)
   2cb70:	2202      	movs	r2, #2
   2cb72:	4611      	mov	r1, r2
   2cb74:	6860      	ldr	r0, [r4, #4]
   2cb76:	f7ff ff5d 	bl	2ca34 <ble_svc_ans_chr_write>
            if (rc != 0) {
   2cb7a:	4604      	mov	r4, r0
   2cb7c:	2800      	cmp	r0, #0
   2cb7e:	d1f1      	bne.n	2cb64 <ble_svc_ans_access+0x108>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   2cb80:	4b35      	ldr	r3, [pc, #212]	; (2cc58 <ble_svc_ans_access+0x1fc>)
   2cb82:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   2cb84:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   2cb86:	2807      	cmp	r0, #7
   2cb88:	d809      	bhi.n	2cb9e <ble_svc_ans_access+0x142>
                cat_bit_mask = (1 << cat_id);
   2cb8a:	2301      	movs	r3, #1
   2cb8c:	4083      	lsls	r3, r0
   2cb8e:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   2cb90:	2a05      	cmp	r2, #5
   2cb92:	d854      	bhi.n	2cc3e <ble_svc_ans_access+0x1e2>
   2cb94:	e8df f002 	tbb	[pc, r2]
   2cb98:	17110c07 	.word	0x17110c07
   2cb9c:	331d      	.short	0x331d
            } else if (cat_id == 0xff) {
   2cb9e:	28ff      	cmp	r0, #255	; 0xff
   2cba0:	d14b      	bne.n	2cc3a <ble_svc_ans_access+0x1de>
                cat_bit_mask = cat_id;
   2cba2:	4603      	mov	r3, r0
   2cba4:	e7f4      	b.n	2cb90 <ble_svc_ans_access+0x134>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   2cba6:	4a27      	ldr	r2, [pc, #156]	; (2cc44 <ble_svc_ans_access+0x1e8>)
   2cba8:	7811      	ldrb	r1, [r2, #0]
   2cbaa:	430b      	orrs	r3, r1
   2cbac:	7013      	strb	r3, [r2, #0]
                break;
   2cbae:	e7d9      	b.n	2cb64 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   2cbb0:	4a27      	ldr	r2, [pc, #156]	; (2cc50 <ble_svc_ans_access+0x1f4>)
   2cbb2:	7811      	ldrb	r1, [r2, #0]
   2cbb4:	430b      	orrs	r3, r1
   2cbb6:	7013      	strb	r3, [r2, #0]
                break;
   2cbb8:	e7d4      	b.n	2cb64 <ble_svc_ans_access+0x108>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   2cbba:	4922      	ldr	r1, [pc, #136]	; (2cc44 <ble_svc_ans_access+0x1e8>)
   2cbbc:	780a      	ldrb	r2, [r1, #0]
   2cbbe:	ea22 0303 	bic.w	r3, r2, r3
   2cbc2:	700b      	strb	r3, [r1, #0]
                break;
   2cbc4:	e7ce      	b.n	2cb64 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   2cbc6:	4922      	ldr	r1, [pc, #136]	; (2cc50 <ble_svc_ans_access+0x1f4>)
   2cbc8:	780a      	ldrb	r2, [r1, #0]
   2cbca:	ea22 0303 	bic.w	r3, r2, r3
   2cbce:	700b      	strb	r3, [r1, #0]
                break;
   2cbd0:	e7c8      	b.n	2cb64 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   2cbd2:	28ff      	cmp	r0, #255	; 0xff
   2cbd4:	d10f      	bne.n	2cbf6 <ble_svc_ans_access+0x19a>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2cbd6:	2507      	movs	r5, #7
   2cbd8:	e000      	b.n	2cbdc <ble_svc_ans_access+0x180>
   2cbda:	3d01      	subs	r5, #1
   2cbdc:	2d00      	cmp	r5, #0
   2cbde:	ddc1      	ble.n	2cb64 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   2cbe0:	4b18      	ldr	r3, [pc, #96]	; (2cc44 <ble_svc_ans_access+0x1e8>)
   2cbe2:	781b      	ldrb	r3, [r3, #0]
   2cbe4:	412b      	asrs	r3, r5
   2cbe6:	f013 0f01 	tst.w	r3, #1
   2cbea:	d0f6      	beq.n	2cbda <ble_svc_ans_access+0x17e>
                            ble_svc_ans_new_alert_notify(i, NULL);
   2cbec:	2100      	movs	r1, #0
   2cbee:	b2e8      	uxtb	r0, r5
   2cbf0:	f7ff fed0 	bl	2c994 <ble_svc_ans_new_alert_notify>
   2cbf4:	e7f1      	b.n	2cbda <ble_svc_ans_access+0x17e>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   2cbf6:	2100      	movs	r1, #0
   2cbf8:	f7ff fecc 	bl	2c994 <ble_svc_ans_new_alert_notify>
   2cbfc:	e7b2      	b.n	2cb64 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   2cbfe:	28ff      	cmp	r0, #255	; 0xff
   2cc00:	d10e      	bne.n	2cc20 <ble_svc_ans_access+0x1c4>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2cc02:	2507      	movs	r5, #7
   2cc04:	e000      	b.n	2cc08 <ble_svc_ans_access+0x1ac>
   2cc06:	3d01      	subs	r5, #1
   2cc08:	2d00      	cmp	r5, #0
   2cc0a:	ddab      	ble.n	2cb64 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   2cc0c:	4b10      	ldr	r3, [pc, #64]	; (2cc50 <ble_svc_ans_access+0x1f4>)
   2cc0e:	781b      	ldrb	r3, [r3, #0]
   2cc10:	412b      	asrs	r3, r5
   2cc12:	f013 0f01 	tst.w	r3, #1
   2cc16:	d0f6      	beq.n	2cc06 <ble_svc_ans_access+0x1aa>
                            ble_svc_ans_unr_alert_notify(i);
   2cc18:	b2e8      	uxtb	r0, r5
   2cc1a:	f7ff fef5 	bl	2ca08 <ble_svc_ans_unr_alert_notify>
   2cc1e:	e7f2      	b.n	2cc06 <ble_svc_ans_access+0x1aa>
                    ble_svc_ans_unr_alert_notify(cat_id);
   2cc20:	f7ff fef2 	bl	2ca08 <ble_svc_ans_unr_alert_notify>
            return 0;
   2cc24:	e79e      	b.n	2cb64 <ble_svc_ans_access+0x108>
        assert(0);
   2cc26:	f7e7 fd15 	bl	14654 <hal_debugger_connected>
   2cc2a:	b100      	cbz	r0, 2cc2e <ble_svc_ans_access+0x1d2>
   2cc2c:	be01      	bkpt	0x0001
   2cc2e:	2300      	movs	r3, #0
   2cc30:	461a      	mov	r2, r3
   2cc32:	4619      	mov	r1, r3
   2cc34:	4618      	mov	r0, r3
   2cc36:	f7e8 f8af 	bl	14d98 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   2cc3a:	240e      	movs	r4, #14
   2cc3c:	e792      	b.n	2cb64 <ble_svc_ans_access+0x108>
   2cc3e:	24a0      	movs	r4, #160	; 0xa0
   2cc40:	e790      	b.n	2cb64 <ble_svc_ans_access+0x108>
   2cc42:	bf00      	nop
   2cc44:	1000355c 	.word	0x1000355c
   2cc48:	10003568 	.word	0x10003568
   2cc4c:	1000357e 	.word	0x1000357e
   2cc50:	10003580 	.word	0x10003580
   2cc54:	1000358c 	.word	0x1000358c
   2cc58:	10003558 	.word	0x10003558

0002cc5c <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   2cc5c:	b510      	push	{r4, lr}
   2cc5e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2cc60:	4b1a      	ldr	r3, [pc, #104]	; (2cccc <ble_svc_ans_init+0x70>)
   2cc62:	781b      	ldrb	r3, [r3, #0]
   2cc64:	b173      	cbz	r3, 2cc84 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   2cc66:	481a      	ldr	r0, [pc, #104]	; (2ccd0 <ble_svc_ans_init+0x74>)
   2cc68:	f7fa fd80 	bl	2776c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cc6c:	b9a0      	cbnz	r0, 2cc98 <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   2cc6e:	4818      	ldr	r0, [pc, #96]	; (2ccd0 <ble_svc_ans_init+0x74>)
   2cc70:	f7fa fd58 	bl	27724 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cc74:	b9e8      	cbnz	r0, 2ccb2 <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   2cc76:	2300      	movs	r3, #0
   2cc78:	4a16      	ldr	r2, [pc, #88]	; (2ccd4 <ble_svc_ans_init+0x78>)
   2cc7a:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   2cc7c:	4a16      	ldr	r2, [pc, #88]	; (2ccd8 <ble_svc_ans_init+0x7c>)
   2cc7e:	7013      	strb	r3, [r2, #0]
}
   2cc80:	b002      	add	sp, #8
   2cc82:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2cc84:	f7e7 fce6 	bl	14654 <hal_debugger_connected>
   2cc88:	b100      	cbz	r0, 2cc8c <ble_svc_ans_init+0x30>
   2cc8a:	be01      	bkpt	0x0001
   2cc8c:	2300      	movs	r3, #0
   2cc8e:	461a      	mov	r2, r3
   2cc90:	4619      	mov	r1, r3
   2cc92:	4618      	mov	r0, r3
   2cc94:	f7e8 f880 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cc98:	f7e7 fcdc 	bl	14654 <hal_debugger_connected>
   2cc9c:	b100      	cbz	r0, 2cca0 <ble_svc_ans_init+0x44>
   2cc9e:	be01      	bkpt	0x0001
   2cca0:	2000      	movs	r0, #0
   2cca2:	9000      	str	r0, [sp, #0]
   2cca4:	4b0d      	ldr	r3, [pc, #52]	; (2ccdc <ble_svc_ans_init+0x80>)
   2cca6:	681c      	ldr	r4, [r3, #0]
   2cca8:	4603      	mov	r3, r0
   2ccaa:	4602      	mov	r2, r0
   2ccac:	4601      	mov	r1, r0
   2ccae:	47a0      	blx	r4
   2ccb0:	e7dd      	b.n	2cc6e <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ccb2:	f7e7 fccf 	bl	14654 <hal_debugger_connected>
   2ccb6:	b100      	cbz	r0, 2ccba <ble_svc_ans_init+0x5e>
   2ccb8:	be01      	bkpt	0x0001
   2ccba:	2000      	movs	r0, #0
   2ccbc:	9000      	str	r0, [sp, #0]
   2ccbe:	4b07      	ldr	r3, [pc, #28]	; (2ccdc <ble_svc_ans_init+0x80>)
   2ccc0:	681c      	ldr	r4, [r3, #0]
   2ccc2:	4603      	mov	r3, r0
   2ccc4:	4602      	mov	r2, r0
   2ccc6:	4601      	mov	r1, r0
   2ccc8:	47a0      	blx	r4
   2ccca:	e7d4      	b.n	2cc76 <ble_svc_ans_init+0x1a>
   2cccc:	10001e3c 	.word	0x10001e3c
   2ccd0:	0003501c 	.word	0x0003501c
   2ccd4:	1000355c 	.word	0x1000355c
   2ccd8:	10003580 	.word	0x10003580
   2ccdc:	1000028c 	.word	0x1000028c

0002cce0 <ble_svc_dis_access>:
    (MYNEWT_VAL(BLE_SVC_DIS_MANUFACTURER_NAME_READ_PERM) >= 0) || \
    (MYNEWT_VAL(BLE_SVC_DIS_SYSTEM_ID_READ_PERM) >= 0)
static int
ble_svc_dis_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   2cce0:	b538      	push	{r3, r4, r5, lr}
   2cce2:	4614      	mov	r4, r2
    uint16_t uuid    = ble_uuid_u16(ctxt->chr->uuid);
   2cce4:	6893      	ldr	r3, [r2, #8]
   2cce6:	6818      	ldr	r0, [r3, #0]
   2cce8:	f7ff fd04 	bl	2c6f4 <ble_uuid_u16>
    const char *info = NULL;

    switch(uuid) {
   2ccec:	f642 2324 	movw	r3, #10788	; 0x2a24
   2ccf0:	4298      	cmp	r0, r3
   2ccf2:	d008      	beq.n	2cd06 <ble_svc_dis_access+0x26>
   2ccf4:	f642 2326 	movw	r3, #10790	; 0x2a26
   2ccf8:	4298      	cmp	r0, r3
   2ccfa:	d109      	bne.n	2cd10 <ble_svc_dis_access+0x30>
#endif
        break;
#endif
#if (MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0)
    case BLE_SVC_DIS_CHR_UUID16_FIRMWARE_REVISION:
        info = ble_svc_dis_data.firmware_revision;
   2ccfc:	4b0f      	ldr	r3, [pc, #60]	; (2cd3c <ble_svc_dis_access+0x5c>)
   2ccfe:	689d      	ldr	r5, [r3, #8]
#ifdef MYNEWT_VAL_BLE_SVC_DIS_FIRMWARE_REVISION_DEFAULT
        if (info == NULL) {
   2cd00:	b91d      	cbnz	r5, 2cd0a <ble_svc_dis_access+0x2a>
    if (info != NULL) {
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    }

    return 0;
   2cd02:	2000      	movs	r0, #0
   2cd04:	e003      	b.n	2cd0e <ble_svc_dis_access+0x2e>
        info = ble_svc_dis_data.model_number;
   2cd06:	4b0d      	ldr	r3, [pc, #52]	; (2cd3c <ble_svc_dis_access+0x5c>)
   2cd08:	681d      	ldr	r5, [r3, #0]
    if (info != NULL) {
   2cd0a:	b95d      	cbnz	r5, 2cd24 <ble_svc_dis_access+0x44>
    return 0;
   2cd0c:	2000      	movs	r0, #0
}
   2cd0e:	bd38      	pop	{r3, r4, r5, pc}
        assert(0);
   2cd10:	f7e7 fca0 	bl	14654 <hal_debugger_connected>
   2cd14:	b100      	cbz	r0, 2cd18 <ble_svc_dis_access+0x38>
   2cd16:	be01      	bkpt	0x0001
   2cd18:	2300      	movs	r3, #0
   2cd1a:	461a      	mov	r2, r3
   2cd1c:	4619      	mov	r1, r3
   2cd1e:	4618      	mov	r0, r3
   2cd20:	f7e8 f83a 	bl	14d98 <__assert_func>
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
   2cd24:	4628      	mov	r0, r5
   2cd26:	f7e9 ff0e 	bl	16b46 <strlen>
   2cd2a:	b282      	uxth	r2, r0
   2cd2c:	4629      	mov	r1, r5
   2cd2e:	6860      	ldr	r0, [r4, #4]
   2cd30:	f7e8 fcb3 	bl	1569a <os_mbuf_append>
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cd34:	2800      	cmp	r0, #0
   2cd36:	d0ea      	beq.n	2cd0e <ble_svc_dis_access+0x2e>
   2cd38:	2011      	movs	r0, #17
   2cd3a:	e7e8      	b.n	2cd0e <ble_svc_dis_access+0x2e>
   2cd3c:	100003fc 	.word	0x100003fc

0002cd40 <ble_svc_dis_firmware_revision_set>:
}

int
ble_svc_dis_firmware_revision_set(const char *value)
{
    ble_svc_dis_data.firmware_revision = value;
   2cd40:	4b01      	ldr	r3, [pc, #4]	; (2cd48 <ble_svc_dis_firmware_revision_set+0x8>)
   2cd42:	6098      	str	r0, [r3, #8]
    return 0;
}
   2cd44:	2000      	movs	r0, #0
   2cd46:	4770      	bx	lr
   2cd48:	100003fc 	.word	0x100003fc

0002cd4c <ble_svc_dis_init>:
/**
 * Initialize the DIS package.
 */
void
ble_svc_dis_init(void)
{
   2cd4c:	b510      	push	{r4, lr}
   2cd4e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2cd50:	4b18      	ldr	r3, [pc, #96]	; (2cdb4 <ble_svc_dis_init+0x68>)
   2cd52:	781b      	ldrb	r3, [r3, #0]
   2cd54:	b14b      	cbz	r3, 2cd6a <ble_svc_dis_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_dis_defs);
   2cd56:	4818      	ldr	r0, [pc, #96]	; (2cdb8 <ble_svc_dis_init+0x6c>)
   2cd58:	f7fa fd08 	bl	2776c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cd5c:	b978      	cbnz	r0, 2cd7e <ble_svc_dis_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_dis_defs);
   2cd5e:	4816      	ldr	r0, [pc, #88]	; (2cdb8 <ble_svc_dis_init+0x6c>)
   2cd60:	f7fa fce0 	bl	27724 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cd64:	b9c0      	cbnz	r0, 2cd98 <ble_svc_dis_init+0x4c>
}
   2cd66:	b002      	add	sp, #8
   2cd68:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2cd6a:	f7e7 fc73 	bl	14654 <hal_debugger_connected>
   2cd6e:	b100      	cbz	r0, 2cd72 <ble_svc_dis_init+0x26>
   2cd70:	be01      	bkpt	0x0001
   2cd72:	2300      	movs	r3, #0
   2cd74:	461a      	mov	r2, r3
   2cd76:	4619      	mov	r1, r3
   2cd78:	4618      	mov	r0, r3
   2cd7a:	f7e8 f80d 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cd7e:	f7e7 fc69 	bl	14654 <hal_debugger_connected>
   2cd82:	b100      	cbz	r0, 2cd86 <ble_svc_dis_init+0x3a>
   2cd84:	be01      	bkpt	0x0001
   2cd86:	2000      	movs	r0, #0
   2cd88:	9000      	str	r0, [sp, #0]
   2cd8a:	4b0c      	ldr	r3, [pc, #48]	; (2cdbc <ble_svc_dis_init+0x70>)
   2cd8c:	681c      	ldr	r4, [r3, #0]
   2cd8e:	4603      	mov	r3, r0
   2cd90:	4602      	mov	r2, r0
   2cd92:	4601      	mov	r1, r0
   2cd94:	47a0      	blx	r4
   2cd96:	e7e2      	b.n	2cd5e <ble_svc_dis_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cd98:	f7e7 fc5c 	bl	14654 <hal_debugger_connected>
   2cd9c:	b100      	cbz	r0, 2cda0 <ble_svc_dis_init+0x54>
   2cd9e:	be01      	bkpt	0x0001
   2cda0:	2000      	movs	r0, #0
   2cda2:	9000      	str	r0, [sp, #0]
   2cda4:	4b05      	ldr	r3, [pc, #20]	; (2cdbc <ble_svc_dis_init+0x70>)
   2cda6:	681c      	ldr	r4, [r3, #0]
   2cda8:	4603      	mov	r3, r0
   2cdaa:	4602      	mov	r2, r0
   2cdac:	4601      	mov	r1, r0
   2cdae:	47a0      	blx	r4
}
   2cdb0:	e7d9      	b.n	2cd66 <ble_svc_dis_init+0x1a>
   2cdb2:	bf00      	nop
   2cdb4:	10001e3c 	.word	0x10001e3c
   2cdb8:	00035054 	.word	0x00035054
   2cdbc:	1000028c 	.word	0x1000028c

0002cdc0 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   2cdc0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   2cdc2:	f7e7 fc47 	bl	14654 <hal_debugger_connected>
   2cdc6:	b100      	cbz	r0, 2cdca <ble_svc_gap_device_name_write_access+0xa>
   2cdc8:	be01      	bkpt	0x0001
   2cdca:	2300      	movs	r3, #0
   2cdcc:	461a      	mov	r2, r3
   2cdce:	4619      	mov	r1, r3
   2cdd0:	4618      	mov	r0, r3
   2cdd2:	f7e7 ffe1 	bl	14d98 <__assert_func>

0002cdd6 <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   2cdd6:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   2cdd8:	f7e7 fc3c 	bl	14654 <hal_debugger_connected>
   2cddc:	b100      	cbz	r0, 2cde0 <ble_svc_gap_appearance_write_access+0xa>
   2cdde:	be01      	bkpt	0x0001
   2cde0:	2300      	movs	r3, #0
   2cde2:	461a      	mov	r2, r3
   2cde4:	4619      	mov	r1, r3
   2cde6:	4618      	mov	r0, r3
   2cde8:	f7e7 ffd6 	bl	14d98 <__assert_func>

0002cdec <ble_svc_gap_device_name_read_access>:
{
   2cdec:	b538      	push	{r3, r4, r5, lr}
   2cdee:	4604      	mov	r4, r0
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   2cdf0:	4d06      	ldr	r5, [pc, #24]	; (2ce0c <ble_svc_gap_device_name_read_access+0x20>)
   2cdf2:	4628      	mov	r0, r5
   2cdf4:	f7e9 fea7 	bl	16b46 <strlen>
   2cdf8:	b282      	uxth	r2, r0
   2cdfa:	4629      	mov	r1, r5
   2cdfc:	6860      	ldr	r0, [r4, #4]
   2cdfe:	f7e8 fc4c 	bl	1569a <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2ce02:	b900      	cbnz	r0, 2ce06 <ble_svc_gap_device_name_read_access+0x1a>
}
   2ce04:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2ce06:	2011      	movs	r0, #17
   2ce08:	e7fc      	b.n	2ce04 <ble_svc_gap_device_name_read_access+0x18>
   2ce0a:	bf00      	nop
   2ce0c:	1000046c 	.word	0x1000046c

0002ce10 <ble_svc_gap_appearance_read_access>:
{
   2ce10:	b500      	push	{lr}
   2ce12:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   2ce14:	4b07      	ldr	r3, [pc, #28]	; (2ce34 <ble_svc_gap_appearance_read_access+0x24>)
   2ce16:	881b      	ldrh	r3, [r3, #0]
   2ce18:	f8ad 3006 	strh.w	r3, [sp, #6]
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   2ce1c:	2202      	movs	r2, #2
   2ce1e:	f10d 0106 	add.w	r1, sp, #6
   2ce22:	6840      	ldr	r0, [r0, #4]
   2ce24:	f7e8 fc39 	bl	1569a <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2ce28:	b910      	cbnz	r0, 2ce30 <ble_svc_gap_appearance_read_access+0x20>
}
   2ce2a:	b003      	add	sp, #12
   2ce2c:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2ce30:	2011      	movs	r0, #17
   2ce32:	e7fa      	b.n	2ce2a <ble_svc_gap_appearance_read_access+0x1a>
   2ce34:	10003590 	.word	0x10003590

0002ce38 <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   2ce38:	b510      	push	{r4, lr}
   2ce3a:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   2ce3c:	6893      	ldr	r3, [r2, #8]
   2ce3e:	6818      	ldr	r0, [r3, #0]
   2ce40:	f7ff fc58 	bl	2c6f4 <ble_uuid_u16>
    assert(uuid16 != 0);
   2ce44:	b1a0      	cbz	r0, 2ce70 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   2ce46:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   2ce4a:	d01b      	beq.n	2ce84 <ble_svc_gap_access+0x4c>
   2ce4c:	f642 2201 	movw	r2, #10753	; 0x2a01
   2ce50:	4290      	cmp	r0, r2
   2ce52:	d133      	bne.n	2cebc <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   2ce54:	7823      	ldrb	r3, [r4, #0]
   2ce56:	b353      	cbz	r3, 2ceae <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2ce58:	2b01      	cmp	r3, #1
   2ce5a:	d02c      	beq.n	2ceb6 <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   2ce5c:	f7e7 fbfa 	bl	14654 <hal_debugger_connected>
   2ce60:	b100      	cbz	r0, 2ce64 <ble_svc_gap_access+0x2c>
   2ce62:	be01      	bkpt	0x0001
   2ce64:	2300      	movs	r3, #0
   2ce66:	461a      	mov	r2, r3
   2ce68:	4619      	mov	r1, r3
   2ce6a:	4618      	mov	r0, r3
   2ce6c:	f7e7 ff94 	bl	14d98 <__assert_func>
    assert(uuid16 != 0);
   2ce70:	f7e7 fbf0 	bl	14654 <hal_debugger_connected>
   2ce74:	b100      	cbz	r0, 2ce78 <ble_svc_gap_access+0x40>
   2ce76:	be01      	bkpt	0x0001
   2ce78:	2300      	movs	r3, #0
   2ce7a:	461a      	mov	r2, r3
   2ce7c:	4619      	mov	r1, r3
   2ce7e:	4618      	mov	r0, r3
   2ce80:	f7e7 ff8a 	bl	14d98 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   2ce84:	7823      	ldrb	r3, [r4, #0]
   2ce86:	b15b      	cbz	r3, 2cea0 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2ce88:	2b01      	cmp	r3, #1
   2ce8a:	d00d      	beq.n	2cea8 <ble_svc_gap_access+0x70>
            assert(0);
   2ce8c:	f7e7 fbe2 	bl	14654 <hal_debugger_connected>
   2ce90:	b100      	cbz	r0, 2ce94 <ble_svc_gap_access+0x5c>
   2ce92:	be01      	bkpt	0x0001
   2ce94:	2300      	movs	r3, #0
   2ce96:	461a      	mov	r2, r3
   2ce98:	4619      	mov	r1, r3
   2ce9a:	4618      	mov	r0, r3
   2ce9c:	f7e7 ff7c 	bl	14d98 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   2cea0:	4620      	mov	r0, r4
   2cea2:	f7ff ffa3 	bl	2cdec <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   2cea6:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   2cea8:	4620      	mov	r0, r4
   2ceaa:	f7ff ff89 	bl	2cdc0 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   2ceae:	4620      	mov	r0, r4
   2ceb0:	f7ff ffae 	bl	2ce10 <ble_svc_gap_appearance_read_access>
        return rc;
   2ceb4:	e7f7      	b.n	2cea6 <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   2ceb6:	4620      	mov	r0, r4
   2ceb8:	f7ff ff8d 	bl	2cdd6 <ble_svc_gap_appearance_write_access>
        assert(0);
   2cebc:	f7e7 fbca 	bl	14654 <hal_debugger_connected>
   2cec0:	b100      	cbz	r0, 2cec4 <ble_svc_gap_access+0x8c>
   2cec2:	be01      	bkpt	0x0001
   2cec4:	2300      	movs	r3, #0
   2cec6:	461a      	mov	r2, r3
   2cec8:	4619      	mov	r1, r3
   2ceca:	4618      	mov	r0, r3
   2cecc:	f7e7 ff64 	bl	14d98 <__assert_func>

0002ced0 <ble_svc_gap_device_name>:

const char *
ble_svc_gap_device_name(void)
{
    return ble_svc_gap_name;
}
   2ced0:	4800      	ldr	r0, [pc, #0]	; (2ced4 <ble_svc_gap_device_name+0x4>)
   2ced2:	4770      	bx	lr
   2ced4:	1000046c 	.word	0x1000046c

0002ced8 <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   2ced8:	b510      	push	{r4, lr}
   2ceda:	b082      	sub	sp, #8
#if NIMBLE_BLE_CONNECT
    int rc;
#endif

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2cedc:	4b18      	ldr	r3, [pc, #96]	; (2cf40 <ble_svc_gap_init+0x68>)
   2cede:	781b      	ldrb	r3, [r3, #0]
   2cee0:	b14b      	cbz	r3, 2cef6 <ble_svc_gap_init+0x1e>

#if NIMBLE_BLE_CONNECT
    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   2cee2:	4818      	ldr	r0, [pc, #96]	; (2cf44 <ble_svc_gap_init+0x6c>)
   2cee4:	f7fa fc42 	bl	2776c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cee8:	b978      	cbnz	r0, 2cf0a <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   2ceea:	4816      	ldr	r0, [pc, #88]	; (2cf44 <ble_svc_gap_init+0x6c>)
   2ceec:	f7fa fc1a 	bl	27724 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cef0:	b9c0      	cbnz	r0, 2cf24 <ble_svc_gap_init+0x4c>
#endif
}
   2cef2:	b002      	add	sp, #8
   2cef4:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2cef6:	f7e7 fbad 	bl	14654 <hal_debugger_connected>
   2cefa:	b100      	cbz	r0, 2cefe <ble_svc_gap_init+0x26>
   2cefc:	be01      	bkpt	0x0001
   2cefe:	2300      	movs	r3, #0
   2cf00:	461a      	mov	r2, r3
   2cf02:	4619      	mov	r1, r3
   2cf04:	4618      	mov	r0, r3
   2cf06:	f7e7 ff47 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cf0a:	f7e7 fba3 	bl	14654 <hal_debugger_connected>
   2cf0e:	b100      	cbz	r0, 2cf12 <ble_svc_gap_init+0x3a>
   2cf10:	be01      	bkpt	0x0001
   2cf12:	2000      	movs	r0, #0
   2cf14:	9000      	str	r0, [sp, #0]
   2cf16:	4b0c      	ldr	r3, [pc, #48]	; (2cf48 <ble_svc_gap_init+0x70>)
   2cf18:	681c      	ldr	r4, [r3, #0]
   2cf1a:	4603      	mov	r3, r0
   2cf1c:	4602      	mov	r2, r0
   2cf1e:	4601      	mov	r1, r0
   2cf20:	47a0      	blx	r4
   2cf22:	e7e2      	b.n	2ceea <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cf24:	f7e7 fb96 	bl	14654 <hal_debugger_connected>
   2cf28:	b100      	cbz	r0, 2cf2c <ble_svc_gap_init+0x54>
   2cf2a:	be01      	bkpt	0x0001
   2cf2c:	2000      	movs	r0, #0
   2cf2e:	9000      	str	r0, [sp, #0]
   2cf30:	4b05      	ldr	r3, [pc, #20]	; (2cf48 <ble_svc_gap_init+0x70>)
   2cf32:	681c      	ldr	r4, [r3, #0]
   2cf34:	4603      	mov	r3, r0
   2cf36:	4602      	mov	r2, r0
   2cf38:	4601      	mov	r1, r0
   2cf3a:	47a0      	blx	r4
}
   2cf3c:	e7d9      	b.n	2cef2 <ble_svc_gap_init+0x1a>
   2cf3e:	bf00      	nop
   2cf40:	10001e3c 	.word	0x10001e3c
   2cf44:	00035074 	.word	0x00035074
   2cf48:	1000028c 	.word	0x1000028c

0002cf4c <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   2cf4c:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cf4e:	7813      	ldrb	r3, [r2, #0]
   2cf50:	b9a3      	cbnz	r3, 2cf7c <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   2cf52:	6891      	ldr	r1, [r2, #8]
   2cf54:	4b14      	ldr	r3, [pc, #80]	; (2cfa8 <ble_svc_gatt_access+0x5c>)
   2cf56:	4299      	cmp	r1, r3
   2cf58:	d11a      	bne.n	2cf90 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   2cf5a:	2104      	movs	r1, #4
   2cf5c:	6850      	ldr	r0, [r2, #4]
   2cf5e:	f7e8 fdb0 	bl	15ac2 <os_mbuf_extend>
    if (u8p == NULL) {
   2cf62:	4604      	mov	r4, r0
   2cf64:	b1f0      	cbz	r0, 2cfa4 <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   2cf66:	4b11      	ldr	r3, [pc, #68]	; (2cfac <ble_svc_gatt_access+0x60>)
   2cf68:	8819      	ldrh	r1, [r3, #0]
   2cf6a:	f004 ffb7 	bl	31edc <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   2cf6e:	4b10      	ldr	r3, [pc, #64]	; (2cfb0 <ble_svc_gatt_access+0x64>)
   2cf70:	8819      	ldrh	r1, [r3, #0]
   2cf72:	1ca0      	adds	r0, r4, #2
   2cf74:	f004 ffb2 	bl	31edc <put_le16>

    return 0;
   2cf78:	2000      	movs	r0, #0
}
   2cf7a:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cf7c:	f7e7 fb6a 	bl	14654 <hal_debugger_connected>
   2cf80:	b100      	cbz	r0, 2cf84 <ble_svc_gatt_access+0x38>
   2cf82:	be01      	bkpt	0x0001
   2cf84:	2300      	movs	r3, #0
   2cf86:	461a      	mov	r2, r3
   2cf88:	4619      	mov	r1, r3
   2cf8a:	4618      	mov	r0, r3
   2cf8c:	f7e7 ff04 	bl	14d98 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   2cf90:	f7e7 fb60 	bl	14654 <hal_debugger_connected>
   2cf94:	b100      	cbz	r0, 2cf98 <ble_svc_gatt_access+0x4c>
   2cf96:	be01      	bkpt	0x0001
   2cf98:	2300      	movs	r3, #0
   2cf9a:	461a      	mov	r2, r3
   2cf9c:	4619      	mov	r1, r3
   2cf9e:	4618      	mov	r0, r3
   2cfa0:	f7e7 fefa 	bl	14d98 <__assert_func>
        return BLE_HS_ENOMEM;
   2cfa4:	2006      	movs	r0, #6
   2cfa6:	e7e8      	b.n	2cf7a <ble_svc_gatt_access+0x2e>
   2cfa8:	10000494 	.word	0x10000494
   2cfac:	10003596 	.word	0x10003596
   2cfb0:	10003594 	.word	0x10003594

0002cfb4 <ble_svc_gatt_init>:
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
}

void
ble_svc_gatt_init(void)
{
   2cfb4:	b510      	push	{r4, lr}
   2cfb6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2cfb8:	4b18      	ldr	r3, [pc, #96]	; (2d01c <ble_svc_gatt_init+0x68>)
   2cfba:	781b      	ldrb	r3, [r3, #0]
   2cfbc:	b14b      	cbz	r3, 2cfd2 <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   2cfbe:	4818      	ldr	r0, [pc, #96]	; (2d020 <ble_svc_gatt_init+0x6c>)
   2cfc0:	f7fa fbd4 	bl	2776c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cfc4:	b978      	cbnz	r0, 2cfe6 <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   2cfc6:	4816      	ldr	r0, [pc, #88]	; (2d020 <ble_svc_gatt_init+0x6c>)
   2cfc8:	f7fa fbac 	bl	27724 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cfcc:	b9c0      	cbnz	r0, 2d000 <ble_svc_gatt_init+0x4c>
}
   2cfce:	b002      	add	sp, #8
   2cfd0:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2cfd2:	f7e7 fb3f 	bl	14654 <hal_debugger_connected>
   2cfd6:	b100      	cbz	r0, 2cfda <ble_svc_gatt_init+0x26>
   2cfd8:	be01      	bkpt	0x0001
   2cfda:	2300      	movs	r3, #0
   2cfdc:	461a      	mov	r2, r3
   2cfde:	4619      	mov	r1, r3
   2cfe0:	4618      	mov	r0, r3
   2cfe2:	f7e7 fed9 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cfe6:	f7e7 fb35 	bl	14654 <hal_debugger_connected>
   2cfea:	b100      	cbz	r0, 2cfee <ble_svc_gatt_init+0x3a>
   2cfec:	be01      	bkpt	0x0001
   2cfee:	2000      	movs	r0, #0
   2cff0:	9000      	str	r0, [sp, #0]
   2cff2:	4b0c      	ldr	r3, [pc, #48]	; (2d024 <ble_svc_gatt_init+0x70>)
   2cff4:	681c      	ldr	r4, [r3, #0]
   2cff6:	4603      	mov	r3, r0
   2cff8:	4602      	mov	r2, r0
   2cffa:	4601      	mov	r1, r0
   2cffc:	47a0      	blx	r4
   2cffe:	e7e2      	b.n	2cfc6 <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d000:	f7e7 fb28 	bl	14654 <hal_debugger_connected>
   2d004:	b100      	cbz	r0, 2d008 <ble_svc_gatt_init+0x54>
   2d006:	be01      	bkpt	0x0001
   2d008:	2000      	movs	r0, #0
   2d00a:	9000      	str	r0, [sp, #0]
   2d00c:	4b05      	ldr	r3, [pc, #20]	; (2d024 <ble_svc_gatt_init+0x70>)
   2d00e:	681c      	ldr	r4, [r3, #0]
   2d010:	4603      	mov	r3, r0
   2d012:	4602      	mov	r2, r0
   2d014:	4601      	mov	r1, r0
   2d016:	47a0      	blx	r4
}
   2d018:	e7d9      	b.n	2cfce <ble_svc_gatt_init+0x1a>
   2d01a:	bf00      	nop
   2d01c:	10001e3c 	.word	0x10001e3c
   2d020:	00035094 	.word	0x00035094
   2d024:	1000028c 	.word	0x1000028c

0002d028 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   2d028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d02c:	b083      	sub	sp, #12
   2d02e:	4605      	mov	r5, r0
   2d030:	460f      	mov	r7, r1
   2d032:	4690      	mov	r8, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   2d034:	2400      	movs	r4, #0
    skipped = 0;
   2d036:	46a1      	mov	r9, r4
    for (i = 0; i < num_value_secs; i++) {
   2d038:	e004      	b.n	2d044 <ble_store_config_find_sec+0x1c>
        return type_diff;
   2d03a:	4650      	mov	r0, sl
   2d03c:	e019      	b.n	2d072 <ble_store_config_find_sec+0x4a>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   2d03e:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < num_value_secs; i++) {
   2d042:	3401      	adds	r4, #1
   2d044:	4544      	cmp	r4, r8
   2d046:	da38      	bge.n	2d0ba <ble_store_config_find_sec+0x92>
        cur = value_secs + i;
   2d048:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2d04c:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   2d050:	eb07 1606 	add.w	r6, r7, r6, lsl #4
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   2d054:	2300      	movs	r3, #0
   2d056:	9300      	str	r3, [sp, #0]
   2d058:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2d05c:	f895 a000 	ldrb.w	sl, [r5]
    if (type_diff != 0) {
   2d060:	f1ba 0f00 	cmp.w	sl, #0
   2d064:	d1e9      	bne.n	2d03a <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   2d066:	2206      	movs	r2, #6
   2d068:	f10d 0101 	add.w	r1, sp, #1
   2d06c:	1c68      	adds	r0, r5, #1
   2d06e:	f7e9 fcf9 	bl	16a64 <memcmp>
   2d072:	b158      	cbz	r0, 2d08c <ble_store_config_find_sec+0x64>
    type_diff = a->type - b->type;
   2d074:	f817 000b 	ldrb.w	r0, [r7, fp]
    if (type_diff != 0) {
   2d078:	ebb0 000a 	subs.w	r0, r0, sl
   2d07c:	d104      	bne.n	2d088 <ble_store_config_find_sec+0x60>
    return memcmp(a->val, b->val, sizeof(a->val));
   2d07e:	2206      	movs	r2, #6
   2d080:	1c69      	adds	r1, r5, #1
   2d082:	1c70      	adds	r0, r6, #1
   2d084:	f7e9 fcee 	bl	16a64 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   2d088:	2800      	cmp	r0, #0
   2d08a:	d1da      	bne.n	2d042 <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   2d08c:	7e2b      	ldrb	r3, [r5, #24]
   2d08e:	f013 0f01 	tst.w	r3, #1
   2d092:	d00b      	beq.n	2d0ac <ble_store_config_find_sec+0x84>
            if (cur->ediv != key_sec->ediv) {
   2d094:	8932      	ldrh	r2, [r6, #8]
   2d096:	892b      	ldrh	r3, [r5, #8]
   2d098:	429a      	cmp	r2, r3
   2d09a:	d1d2      	bne.n	2d042 <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   2d09c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   2d0a0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   2d0a4:	4299      	cmp	r1, r3
   2d0a6:	bf08      	it	eq
   2d0a8:	4290      	cmpeq	r0, r2
   2d0aa:	d1ca      	bne.n	2d042 <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   2d0ac:	7e6b      	ldrb	r3, [r5, #25]
   2d0ae:	454b      	cmp	r3, r9
   2d0b0:	dcc5      	bgt.n	2d03e <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   2d0b2:	4620      	mov	r0, r4
   2d0b4:	b003      	add	sp, #12
   2d0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   2d0ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d0be:	e7f8      	b.n	2d0b2 <ble_store_config_find_sec+0x8a>

0002d0c0 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   2d0c0:	b510      	push	{r4, lr}
   2d0c2:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   2d0c4:	4b0a      	ldr	r3, [pc, #40]	; (2d0f0 <ble_store_config_read_peer_sec+0x30>)
   2d0c6:	681a      	ldr	r2, [r3, #0]
   2d0c8:	490a      	ldr	r1, [pc, #40]	; (2d0f4 <ble_store_config_read_peer_sec+0x34>)
   2d0ca:	f7ff ffad 	bl	2d028 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   2d0ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d0d2:	d00a      	beq.n	2d0ea <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   2d0d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2d0d8:	2250      	movs	r2, #80	; 0x50
   2d0da:	4906      	ldr	r1, [pc, #24]	; (2d0f4 <ble_store_config_read_peer_sec+0x34>)
   2d0dc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2d0e0:	4620      	mov	r0, r4
   2d0e2:	f7e9 fce3 	bl	16aac <memcpy>
    return 0;
   2d0e6:	2000      	movs	r0, #0
}
   2d0e8:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2d0ea:	2005      	movs	r0, #5
   2d0ec:	e7fc      	b.n	2d0e8 <ble_store_config_read_peer_sec+0x28>
   2d0ee:	bf00      	nop
   2d0f0:	10003620 	.word	0x10003620
   2d0f4:	10003718 	.word	0x10003718

0002d0f8 <ble_store_config_read_our_sec>:
{
   2d0f8:	b510      	push	{r4, lr}
   2d0fa:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   2d0fc:	4b0a      	ldr	r3, [pc, #40]	; (2d128 <ble_store_config_read_our_sec+0x30>)
   2d0fe:	681a      	ldr	r2, [r3, #0]
   2d100:	490a      	ldr	r1, [pc, #40]	; (2d12c <ble_store_config_read_our_sec+0x34>)
   2d102:	f7ff ff91 	bl	2d028 <ble_store_config_find_sec>
    if (idx == -1) {
   2d106:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d10a:	d00a      	beq.n	2d122 <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   2d10c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2d110:	2250      	movs	r2, #80	; 0x50
   2d112:	4906      	ldr	r1, [pc, #24]	; (2d12c <ble_store_config_read_our_sec+0x34>)
   2d114:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2d118:	4620      	mov	r0, r4
   2d11a:	f7e9 fcc7 	bl	16aac <memcpy>
    return 0;
   2d11e:	2000      	movs	r0, #0
}
   2d120:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2d122:	2005      	movs	r0, #5
   2d124:	e7fc      	b.n	2d120 <ble_store_config_read_our_sec+0x28>
   2d126:	bf00      	nop
   2d128:	1000361c 	.word	0x1000361c
   2d12c:	10003628 	.word	0x10003628

0002d130 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   2d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d134:	b082      	sub	sp, #8
   2d136:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2d138:	2400      	movs	r4, #0
    skipped = 0;
   2d13a:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2d13c:	e004      	b.n	2d148 <ble_store_config_find_cccd+0x18>
        return type_diff;
   2d13e:	4630      	mov	r0, r6
   2d140:	e019      	b.n	2d176 <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   2d142:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2d146:	3401      	adds	r4, #1
   2d148:	4b18      	ldr	r3, [pc, #96]	; (2d1ac <ble_store_config_find_cccd+0x7c>)
   2d14a:	681b      	ldr	r3, [r3, #0]
   2d14c:	42a3      	cmp	r3, r4
   2d14e:	dd2a      	ble.n	2d1a6 <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   2d150:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   2d154:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2d1b0 <ble_store_config_find_cccd+0x80>
   2d158:	eb09 1704 	add.w	r7, r9, r4, lsl #4
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   2d15c:	2300      	movs	r3, #0
   2d15e:	9300      	str	r3, [sp, #0]
   2d160:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2d164:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   2d166:	2e00      	cmp	r6, #0
   2d168:	d1e9      	bne.n	2d13e <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   2d16a:	2206      	movs	r2, #6
   2d16c:	f10d 0101 	add.w	r1, sp, #1
   2d170:	1c68      	adds	r0, r5, #1
   2d172:	f7e9 fc77 	bl	16a64 <memcmp>
   2d176:	b150      	cbz	r0, 2d18e <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   2d178:	f819 000a 	ldrb.w	r0, [r9, sl]
    if (type_diff != 0) {
   2d17c:	1b80      	subs	r0, r0, r6
   2d17e:	d104      	bne.n	2d18a <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   2d180:	2206      	movs	r2, #6
   2d182:	1c69      	adds	r1, r5, #1
   2d184:	1c78      	adds	r0, r7, #1
   2d186:	f7e9 fc6d 	bl	16a64 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   2d18a:	2800      	cmp	r0, #0
   2d18c:	d1db      	bne.n	2d146 <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   2d18e:	892b      	ldrh	r3, [r5, #8]
   2d190:	b113      	cbz	r3, 2d198 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   2d192:	893a      	ldrh	r2, [r7, #8]
   2d194:	4293      	cmp	r3, r2
   2d196:	d1d6      	bne.n	2d146 <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   2d198:	7aab      	ldrb	r3, [r5, #10]
   2d19a:	4543      	cmp	r3, r8
   2d19c:	dcd1      	bgt.n	2d142 <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   2d19e:	4620      	mov	r0, r4
   2d1a0:	b002      	add	sp, #8
   2d1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   2d1a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2d1aa:	e7f8      	b.n	2d19e <ble_store_config_find_cccd+0x6e>
   2d1ac:	10003618 	.word	0x10003618
   2d1b0:	10003598 	.word	0x10003598

0002d1b4 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   2d1b4:	b510      	push	{r4, lr}
   2d1b6:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   2d1b8:	f7ff ffba 	bl	2d130 <ble_store_config_find_cccd>
    if (idx == -1) {
   2d1bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d1c0:	d007      	beq.n	2d1d2 <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   2d1c2:	4b05      	ldr	r3, [pc, #20]	; (2d1d8 <ble_store_config_read_cccd+0x24>)
   2d1c4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2d1c8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2d1ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   2d1ce:	2000      	movs	r0, #0
}
   2d1d0:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2d1d2:	2005      	movs	r0, #5
   2d1d4:	e7fc      	b.n	2d1d0 <ble_store_config_read_cccd+0x1c>
   2d1d6:	bf00      	nop
   2d1d8:	10003598 	.word	0x10003598

0002d1dc <ble_store_config_print_key_sec>:
{
   2d1dc:	b510      	push	{r4, lr}
   2d1de:	b082      	sub	sp, #8
   2d1e0:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   2d1e2:	2300      	movs	r3, #0
   2d1e4:	9300      	str	r3, [sp, #0]
   2d1e6:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2d1ea:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   2d1ec:	b928      	cbnz	r0, 2d1fa <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   2d1ee:	2206      	movs	r2, #6
   2d1f0:	f10d 0101 	add.w	r1, sp, #1
   2d1f4:	1c60      	adds	r0, r4, #1
   2d1f6:	f7e9 fc35 	bl	16a64 <memcmp>
   2d1fa:	b908      	cbnz	r0, 2d200 <ble_store_config_print_key_sec+0x24>
}
   2d1fc:	b002      	add	sp, #8
   2d1fe:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   2d200:	2106      	movs	r1, #6
   2d202:	1c60      	adds	r0, r4, #1
   2d204:	f7fc fa48 	bl	29698 <ble_hs_log_flat_buf>
}
   2d208:	e7f8      	b.n	2d1fc <ble_store_config_print_key_sec+0x20>

0002d20a <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   2d20a:	b538      	push	{r3, r4, r5, lr}
   2d20c:	460c      	mov	r4, r1
   2d20e:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   2d210:	2802      	cmp	r0, #2
   2d212:	d005      	beq.n	2d220 <ble_store_config_read+0x16>
   2d214:	2803      	cmp	r0, #3
   2d216:	d013      	beq.n	2d240 <ble_store_config_read+0x36>
   2d218:	2801      	cmp	r0, #1
   2d21a:	d009      	beq.n	2d230 <ble_store_config_read+0x26>
   2d21c:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2d21e:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   2d220:	4608      	mov	r0, r1
   2d222:	f7ff ffdb 	bl	2d1dc <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   2d226:	4629      	mov	r1, r5
   2d228:	4620      	mov	r0, r4
   2d22a:	f7ff ff49 	bl	2d0c0 <ble_store_config_read_peer_sec>
        return rc;
   2d22e:	e7f6      	b.n	2d21e <ble_store_config_read+0x14>
        ble_store_config_print_key_sec(&key->sec);
   2d230:	4608      	mov	r0, r1
   2d232:	f7ff ffd3 	bl	2d1dc <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   2d236:	4629      	mov	r1, r5
   2d238:	4620      	mov	r0, r4
   2d23a:	f7ff ff5d 	bl	2d0f8 <ble_store_config_read_our_sec>
        return rc;
   2d23e:	e7ee      	b.n	2d21e <ble_store_config_read+0x14>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   2d240:	4611      	mov	r1, r2
   2d242:	4620      	mov	r0, r4
   2d244:	f7ff ffb6 	bl	2d1b4 <ble_store_config_read_cccd>
        return rc;
   2d248:	e7e9      	b.n	2d21e <ble_store_config_read+0x14>

0002d24a <ble_store_config_print_value_sec>:
{
   2d24a:	b510      	push	{r4, lr}
   2d24c:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   2d24e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2d252:	f013 0f01 	tst.w	r3, #1
   2d256:	d10a      	bne.n	2d26e <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   2d258:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2d25c:	f013 0f01 	tst.w	r3, #1
   2d260:	d10a      	bne.n	2d278 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   2d262:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2d266:	f013 0f01 	tst.w	r3, #1
   2d26a:	d10b      	bne.n	2d284 <ble_store_config_print_value_sec+0x3a>
}
   2d26c:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   2d26e:	2110      	movs	r1, #16
   2d270:	3018      	adds	r0, #24
   2d272:	f7fc fa11 	bl	29698 <ble_hs_log_flat_buf>
   2d276:	e7ef      	b.n	2d258 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   2d278:	2110      	movs	r1, #16
   2d27a:	f104 0029 	add.w	r0, r4, #41	; 0x29
   2d27e:	f7fc fa0b 	bl	29698 <ble_hs_log_flat_buf>
   2d282:	e7ee      	b.n	2d262 <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   2d284:	2110      	movs	r1, #16
   2d286:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   2d28a:	f7fc fa05 	bl	29698 <ble_hs_log_flat_buf>
}
   2d28e:	e7ed      	b.n	2d26c <ble_store_config_print_value_sec+0x22>

0002d290 <ble_store_config_write_peer_sec>:
{
   2d290:	b530      	push	{r4, r5, lr}
   2d292:	b089      	sub	sp, #36	; 0x24
   2d294:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   2d296:	f7ff ffd8 	bl	2d24a <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2d29a:	4621      	mov	r1, r4
   2d29c:	4668      	mov	r0, sp
   2d29e:	f7ff f899 	bl	2c3d4 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   2d2a2:	4b0f      	ldr	r3, [pc, #60]	; (2d2e0 <ble_store_config_write_peer_sec+0x50>)
   2d2a4:	681d      	ldr	r5, [r3, #0]
   2d2a6:	462a      	mov	r2, r5
   2d2a8:	490e      	ldr	r1, [pc, #56]	; (2d2e4 <ble_store_config_write_peer_sec+0x54>)
   2d2aa:	4668      	mov	r0, sp
   2d2ac:	f7ff febc 	bl	2d028 <ble_store_config_find_sec>
    if (idx == -1) {
   2d2b0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d2b4:	d00b      	beq.n	2d2ce <ble_store_config_write_peer_sec+0x3e>
    ble_store_config_peer_secs[idx] = *value_sec;
   2d2b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2d2ba:	2250      	movs	r2, #80	; 0x50
   2d2bc:	4621      	mov	r1, r4
   2d2be:	4b09      	ldr	r3, [pc, #36]	; (2d2e4 <ble_store_config_write_peer_sec+0x54>)
   2d2c0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2d2c4:	f7e9 fbf2 	bl	16aac <memcpy>
    return 0;
   2d2c8:	2000      	movs	r0, #0
}
   2d2ca:	b009      	add	sp, #36	; 0x24
   2d2cc:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2d2ce:	2d02      	cmp	r5, #2
   2d2d0:	dc04      	bgt.n	2d2dc <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   2d2d2:	1c6a      	adds	r2, r5, #1
   2d2d4:	4b02      	ldr	r3, [pc, #8]	; (2d2e0 <ble_store_config_write_peer_sec+0x50>)
   2d2d6:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   2d2d8:	4628      	mov	r0, r5
   2d2da:	e7ec      	b.n	2d2b6 <ble_store_config_write_peer_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2d2dc:	201b      	movs	r0, #27
   2d2de:	e7f4      	b.n	2d2ca <ble_store_config_write_peer_sec+0x3a>
   2d2e0:	10003620 	.word	0x10003620
   2d2e4:	10003718 	.word	0x10003718

0002d2e8 <ble_store_config_write_our_sec>:
{
   2d2e8:	b530      	push	{r4, r5, lr}
   2d2ea:	b089      	sub	sp, #36	; 0x24
   2d2ec:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   2d2ee:	f7ff ffac 	bl	2d24a <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2d2f2:	4621      	mov	r1, r4
   2d2f4:	4668      	mov	r0, sp
   2d2f6:	f7ff f86d 	bl	2c3d4 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   2d2fa:	4b0f      	ldr	r3, [pc, #60]	; (2d338 <ble_store_config_write_our_sec+0x50>)
   2d2fc:	681d      	ldr	r5, [r3, #0]
   2d2fe:	462a      	mov	r2, r5
   2d300:	490e      	ldr	r1, [pc, #56]	; (2d33c <ble_store_config_write_our_sec+0x54>)
   2d302:	4668      	mov	r0, sp
   2d304:	f7ff fe90 	bl	2d028 <ble_store_config_find_sec>
    if (idx == -1) {
   2d308:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d30c:	d00b      	beq.n	2d326 <ble_store_config_write_our_sec+0x3e>
    ble_store_config_our_secs[idx] = *value_sec;
   2d30e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2d312:	2250      	movs	r2, #80	; 0x50
   2d314:	4621      	mov	r1, r4
   2d316:	4b09      	ldr	r3, [pc, #36]	; (2d33c <ble_store_config_write_our_sec+0x54>)
   2d318:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2d31c:	f7e9 fbc6 	bl	16aac <memcpy>
    return 0;
   2d320:	2000      	movs	r0, #0
}
   2d322:	b009      	add	sp, #36	; 0x24
   2d324:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2d326:	2d02      	cmp	r5, #2
   2d328:	dc04      	bgt.n	2d334 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   2d32a:	1c6a      	adds	r2, r5, #1
   2d32c:	4b02      	ldr	r3, [pc, #8]	; (2d338 <ble_store_config_write_our_sec+0x50>)
   2d32e:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   2d330:	4628      	mov	r0, r5
   2d332:	e7ec      	b.n	2d30e <ble_store_config_write_our_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2d334:	201b      	movs	r0, #27
   2d336:	e7f4      	b.n	2d322 <ble_store_config_write_our_sec+0x3a>
   2d338:	1000361c 	.word	0x1000361c
   2d33c:	10003628 	.word	0x10003628

0002d340 <ble_store_config_write_cccd>:
{
   2d340:	b530      	push	{r4, r5, lr}
   2d342:	b085      	sub	sp, #20
   2d344:	4604      	mov	r4, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   2d346:	4601      	mov	r1, r0
   2d348:	a801      	add	r0, sp, #4
   2d34a:	f7ff f837 	bl	2c3bc <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   2d34e:	a801      	add	r0, sp, #4
   2d350:	f7ff feee 	bl	2d130 <ble_store_config_find_cccd>
    if (idx == -1) {
   2d354:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d358:	d009      	beq.n	2d36e <ble_store_config_write_cccd+0x2e>
    ble_store_config_cccds[idx] = *value_cccd;
   2d35a:	4d0a      	ldr	r5, [pc, #40]	; (2d384 <ble_store_config_write_cccd+0x44>)
   2d35c:	eb05 1500 	add.w	r5, r5, r0, lsl #4
   2d360:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2d364:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 0;
   2d368:	2000      	movs	r0, #0
}
   2d36a:	b005      	add	sp, #20
   2d36c:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   2d36e:	4b06      	ldr	r3, [pc, #24]	; (2d388 <ble_store_config_write_cccd+0x48>)
   2d370:	6818      	ldr	r0, [r3, #0]
   2d372:	2807      	cmp	r0, #7
   2d374:	dc03      	bgt.n	2d37e <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   2d376:	1c43      	adds	r3, r0, #1
   2d378:	4a03      	ldr	r2, [pc, #12]	; (2d388 <ble_store_config_write_cccd+0x48>)
   2d37a:	6013      	str	r3, [r2, #0]
   2d37c:	e7ed      	b.n	2d35a <ble_store_config_write_cccd+0x1a>
            return BLE_HS_ESTORE_CAP;
   2d37e:	201b      	movs	r0, #27
   2d380:	e7f3      	b.n	2d36a <ble_store_config_write_cccd+0x2a>
   2d382:	bf00      	nop
   2d384:	10003598 	.word	0x10003598
   2d388:	10003618 	.word	0x10003618

0002d38c <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   2d38c:	b508      	push	{r3, lr}
   2d38e:	4603      	mov	r3, r0
   2d390:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   2d392:	2b02      	cmp	r3, #2
   2d394:	d005      	beq.n	2d3a2 <ble_store_config_write+0x16>
   2d396:	2b03      	cmp	r3, #3
   2d398:	d009      	beq.n	2d3ae <ble_store_config_write+0x22>
   2d39a:	2b01      	cmp	r3, #1
   2d39c:	d004      	beq.n	2d3a8 <ble_store_config_write+0x1c>
   2d39e:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2d3a0:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_peer_sec(&val->sec);
   2d3a2:	f7ff ff75 	bl	2d290 <ble_store_config_write_peer_sec>
        return rc;
   2d3a6:	e7fb      	b.n	2d3a0 <ble_store_config_write+0x14>
        rc = ble_store_config_write_our_sec(&val->sec);
   2d3a8:	f7ff ff9e 	bl	2d2e8 <ble_store_config_write_our_sec>
        return rc;
   2d3ac:	e7f8      	b.n	2d3a0 <ble_store_config_write+0x14>
        rc = ble_store_config_write_cccd(&val->cccd);
   2d3ae:	f7ff ffc7 	bl	2d340 <ble_store_config_write_cccd>
        return rc;
   2d3b2:	e7f5      	b.n	2d3a0 <ble_store_config_write+0x14>

0002d3b4 <ble_store_config_delete_obj>:
{
   2d3b4:	b510      	push	{r4, lr}
    (*num_values)--;
   2d3b6:	681c      	ldr	r4, [r3, #0]
   2d3b8:	3c01      	subs	r4, #1
   2d3ba:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   2d3bc:	4294      	cmp	r4, r2
   2d3be:	dc01      	bgt.n	2d3c4 <ble_store_config_delete_obj+0x10>
}
   2d3c0:	2000      	movs	r0, #0
   2d3c2:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   2d3c4:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   2d3c8:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   2d3ca:	fb02 f201 	mul.w	r2, r2, r1
   2d3ce:	4401      	add	r1, r0
   2d3d0:	f7e9 fb79 	bl	16ac6 <memmove>
   2d3d4:	e7f4      	b.n	2d3c0 <ble_store_config_delete_obj+0xc>

0002d3d6 <ble_store_config_delete_sec>:
{
   2d3d6:	b538      	push	{r3, r4, r5, lr}
   2d3d8:	460d      	mov	r5, r1
   2d3da:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   2d3dc:	6812      	ldr	r2, [r2, #0]
   2d3de:	f7ff fe23 	bl	2d028 <ble_store_config_find_sec>
    if (idx == -1) {
   2d3e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d3e6:	d006      	beq.n	2d3f6 <ble_store_config_delete_sec+0x20>
   2d3e8:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   2d3ea:	4623      	mov	r3, r4
   2d3ec:	2150      	movs	r1, #80	; 0x50
   2d3ee:	4628      	mov	r0, r5
   2d3f0:	f7ff ffe0 	bl	2d3b4 <ble_store_config_delete_obj>
}
   2d3f4:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   2d3f6:	2005      	movs	r0, #5
   2d3f8:	e7fc      	b.n	2d3f4 <ble_store_config_delete_sec+0x1e>
	...

0002d3fc <ble_store_config_delete_peer_sec>:
{
   2d3fc:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   2d3fe:	4a02      	ldr	r2, [pc, #8]	; (2d408 <ble_store_config_delete_peer_sec+0xc>)
   2d400:	4902      	ldr	r1, [pc, #8]	; (2d40c <ble_store_config_delete_peer_sec+0x10>)
   2d402:	f7ff ffe8 	bl	2d3d6 <ble_store_config_delete_sec>
}
   2d406:	bd08      	pop	{r3, pc}
   2d408:	10003620 	.word	0x10003620
   2d40c:	10003718 	.word	0x10003718

0002d410 <ble_store_config_delete_our_sec>:
{
   2d410:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   2d412:	4a02      	ldr	r2, [pc, #8]	; (2d41c <ble_store_config_delete_our_sec+0xc>)
   2d414:	4902      	ldr	r1, [pc, #8]	; (2d420 <ble_store_config_delete_our_sec+0x10>)
   2d416:	f7ff ffde 	bl	2d3d6 <ble_store_config_delete_sec>
}
   2d41a:	bd08      	pop	{r3, pc}
   2d41c:	1000361c 	.word	0x1000361c
   2d420:	10003628 	.word	0x10003628

0002d424 <ble_store_config_delete_cccd>:
{
   2d424:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   2d426:	f7ff fe83 	bl	2d130 <ble_store_config_find_cccd>
    if (idx == -1) {
   2d42a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d42e:	d006      	beq.n	2d43e <ble_store_config_delete_cccd+0x1a>
   2d430:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   2d432:	4b04      	ldr	r3, [pc, #16]	; (2d444 <ble_store_config_delete_cccd+0x20>)
   2d434:	2110      	movs	r1, #16
   2d436:	4804      	ldr	r0, [pc, #16]	; (2d448 <ble_store_config_delete_cccd+0x24>)
   2d438:	f7ff ffbc 	bl	2d3b4 <ble_store_config_delete_obj>
}
   2d43c:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOENT;
   2d43e:	2005      	movs	r0, #5
   2d440:	e7fc      	b.n	2d43c <ble_store_config_delete_cccd+0x18>
   2d442:	bf00      	nop
   2d444:	10003618 	.word	0x10003618
   2d448:	10003598 	.word	0x10003598

0002d44c <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   2d44c:	b508      	push	{r3, lr}
   2d44e:	4603      	mov	r3, r0
   2d450:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   2d452:	2b02      	cmp	r3, #2
   2d454:	d005      	beq.n	2d462 <ble_store_config_delete+0x16>
   2d456:	2b03      	cmp	r3, #3
   2d458:	d009      	beq.n	2d46e <ble_store_config_delete+0x22>
   2d45a:	2b01      	cmp	r3, #1
   2d45c:	d004      	beq.n	2d468 <ble_store_config_delete+0x1c>
   2d45e:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2d460:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_peer_sec(&key->sec);
   2d462:	f7ff ffcb 	bl	2d3fc <ble_store_config_delete_peer_sec>
        return rc;
   2d466:	e7fb      	b.n	2d460 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_our_sec(&key->sec);
   2d468:	f7ff ffd2 	bl	2d410 <ble_store_config_delete_our_sec>
        return rc;
   2d46c:	e7f8      	b.n	2d460 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_cccd(&key->cccd);
   2d46e:	f7ff ffd9 	bl	2d424 <ble_store_config_delete_cccd>
        return rc;
   2d472:	e7f5      	b.n	2d460 <ble_store_config_delete+0x14>

0002d474 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   2d474:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2d476:	4b0e      	ldr	r3, [pc, #56]	; (2d4b0 <ble_store_config_init+0x3c>)
   2d478:	781b      	ldrb	r3, [r3, #0]
   2d47a:	b173      	cbz	r3, 2d49a <ble_store_config_init+0x26>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   2d47c:	4b0d      	ldr	r3, [pc, #52]	; (2d4b4 <ble_store_config_init+0x40>)
   2d47e:	4a0e      	ldr	r2, [pc, #56]	; (2d4b8 <ble_store_config_init+0x44>)
   2d480:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   2d482:	4a0e      	ldr	r2, [pc, #56]	; (2d4bc <ble_store_config_init+0x48>)
   2d484:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   2d486:	4a0e      	ldr	r2, [pc, #56]	; (2d4c0 <ble_store_config_init+0x4c>)
   2d488:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   2d48a:	2300      	movs	r3, #0
   2d48c:	4a0d      	ldr	r2, [pc, #52]	; (2d4c4 <ble_store_config_init+0x50>)
   2d48e:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   2d490:	4a0d      	ldr	r2, [pc, #52]	; (2d4c8 <ble_store_config_init+0x54>)
   2d492:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   2d494:	4a0d      	ldr	r2, [pc, #52]	; (2d4cc <ble_store_config_init+0x58>)
   2d496:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
}
   2d498:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2d49a:	f7e7 f8db 	bl	14654 <hal_debugger_connected>
   2d49e:	b100      	cbz	r0, 2d4a2 <ble_store_config_init+0x2e>
   2d4a0:	be01      	bkpt	0x0001
   2d4a2:	2300      	movs	r3, #0
   2d4a4:	461a      	mov	r2, r3
   2d4a6:	4619      	mov	r1, r3
   2d4a8:	4618      	mov	r0, r3
   2d4aa:	f7e7 fc75 	bl	14d98 <__assert_func>
   2d4ae:	bf00      	nop
   2d4b0:	10001e3c 	.word	0x10001e3c
   2d4b4:	100002d8 	.word	0x100002d8
   2d4b8:	0002d20b 	.word	0x0002d20b
   2d4bc:	0002d38d 	.word	0x0002d38d
   2d4c0:	0002d44d 	.word	0x0002d44d
   2d4c4:	1000361c 	.word	0x1000361c
   2d4c8:	10003620 	.word	0x10003620
   2d4cc:	10003618 	.word	0x10003618

0002d4d0 <ble_hs_util_load_rand_addr>:
#include "host/util/util.h"
#include "../src/ble_hs_hci_priv.h"

static int
ble_hs_util_load_rand_addr(ble_addr_t *addr)
{
   2d4d0:	b510      	push	{r4, lr}
   2d4d2:	b084      	sub	sp, #16
   2d4d4:	4604      	mov	r4, r0
#if MYNEWT_VAL(BLE_HCI_VS)
    struct ble_hci_vs_rd_static_addr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_VENDOR,
   2d4d6:	2306      	movs	r3, #6
   2d4d8:	9300      	str	r3, [sp, #0]
   2d4da:	ab02      	add	r3, sp, #8
   2d4dc:	2200      	movs	r2, #0
   2d4de:	4611      	mov	r1, r2
   2d4e0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   2d4e4:	f7fb fbce 	bl	28c84 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_VS_RD_STATIC_ADDR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc == 0) {
   2d4e8:	b118      	cbz	r0, 2d4f2 <ble_hs_util_load_rand_addr+0x22>
        memcpy(addr->val, rsp.addr, sizeof(addr->val));
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
   2d4ea:	2315      	movs	r3, #21
}
   2d4ec:	4618      	mov	r0, r3
   2d4ee:	b004      	add	sp, #16
   2d4f0:	bd10      	pop	{r4, pc}
   2d4f2:	4603      	mov	r3, r0
        addr->type = BLE_ADDR_RANDOM;
   2d4f4:	4622      	mov	r2, r4
   2d4f6:	2101      	movs	r1, #1
   2d4f8:	f802 1b01 	strb.w	r1, [r2], #1
        memcpy(addr->val, rsp.addr, sizeof(addr->val));
   2d4fc:	9802      	ldr	r0, [sp, #8]
   2d4fe:	f8c4 0001 	str.w	r0, [r4, #1]
   2d502:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2d506:	8091      	strh	r1, [r2, #4]
        return 0;
   2d508:	e7f0      	b.n	2d4ec <ble_hs_util_load_rand_addr+0x1c>

0002d50a <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   2d50a:	b500      	push	{lr}
   2d50c:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   2d50e:	2200      	movs	r2, #0
   2d510:	4611      	mov	r1, r2
   2d512:	2001      	movs	r0, #1
   2d514:	f7fc f854 	bl	295c0 <ble_hs_id_copy_addr>
    if (rc == 0) {
   2d518:	4603      	mov	r3, r0
   2d51a:	b918      	cbnz	r0, 2d524 <ble_hs_util_ensure_rand_addr+0x1a>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2d51c:	4618      	mov	r0, r3
   2d51e:	b003      	add	sp, #12
   2d520:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_util_load_rand_addr(&addr);
   2d524:	4668      	mov	r0, sp
   2d526:	f7ff ffd3 	bl	2d4d0 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   2d52a:	4603      	mov	r3, r0
   2d52c:	2800      	cmp	r0, #0
   2d52e:	d1f5      	bne.n	2d51c <ble_hs_util_ensure_rand_addr+0x12>
    rc = ble_hs_id_set_rnd(addr.val);
   2d530:	f10d 0001 	add.w	r0, sp, #1
   2d534:	f7fb ffc4 	bl	294c0 <ble_hs_id_set_rnd>
   2d538:	4603      	mov	r3, r0
    if (rc != 0) {
   2d53a:	e7ef      	b.n	2d51c <ble_hs_util_ensure_rand_addr+0x12>

0002d53c <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   2d53c:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   2d53e:	b150      	cbz	r0, 2d556 <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   2d540:	f7ff ffe3 	bl	2d50a <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   2d544:	2815      	cmp	r0, #21
   2d546:	d000      	beq.n	2d54a <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   2d548:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2d54a:	2200      	movs	r2, #0
   2d54c:	4611      	mov	r1, r2
   2d54e:	4610      	mov	r0, r2
   2d550:	f7fc f836 	bl	295c0 <ble_hs_id_copy_addr>
   2d554:	e7f8      	b.n	2d548 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2d556:	2200      	movs	r2, #0
   2d558:	4611      	mov	r1, r2
   2d55a:	4610      	mov	r0, r2
   2d55c:	f7fc f830 	bl	295c0 <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   2d560:	2815      	cmp	r0, #21
   2d562:	d1f1      	bne.n	2d548 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   2d564:	f7ff ffd1 	bl	2d50a <ble_hs_util_ensure_rand_addr>
    return rc;
   2d568:	e7ee      	b.n	2d548 <ble_hs_util_ensure_addr+0xc>
	...

0002d56c <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   2d56c:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   2d56e:	4c05      	ldr	r4, [pc, #20]	; (2d584 <ble_hci_trans_cfg_hs+0x18>)
   2d570:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   2d572:	4805      	ldr	r0, [pc, #20]	; (2d588 <ble_hci_trans_cfg_hs+0x1c>)
   2d574:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   2d576:	4905      	ldr	r1, [pc, #20]	; (2d58c <ble_hci_trans_cfg_hs+0x20>)
   2d578:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   2d57a:	4a05      	ldr	r2, [pc, #20]	; (2d590 <ble_hci_trans_cfg_hs+0x24>)
   2d57c:	6013      	str	r3, [r2, #0]
}
   2d57e:	bc10      	pop	{r4}
   2d580:	4770      	bx	lr
   2d582:	bf00      	nop
   2d584:	10003c44 	.word	0x10003c44
   2d588:	10003c40 	.word	0x10003c40
   2d58c:	10003c34 	.word	0x10003c34
   2d590:	10003c30 	.word	0x10003c30

0002d594 <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   2d594:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   2d596:	4c05      	ldr	r4, [pc, #20]	; (2d5ac <ble_hci_trans_cfg_ll+0x18>)
   2d598:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   2d59a:	4805      	ldr	r0, [pc, #20]	; (2d5b0 <ble_hci_trans_cfg_ll+0x1c>)
   2d59c:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   2d59e:	4905      	ldr	r1, [pc, #20]	; (2d5b4 <ble_hci_trans_cfg_ll+0x20>)
   2d5a0:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   2d5a2:	4a05      	ldr	r2, [pc, #20]	; (2d5b8 <ble_hci_trans_cfg_ll+0x24>)
   2d5a4:	6013      	str	r3, [r2, #0]
}
   2d5a6:	bc10      	pop	{r4}
   2d5a8:	4770      	bx	lr
   2d5aa:	bf00      	nop
   2d5ac:	10003c4c 	.word	0x10003c4c
   2d5b0:	10003c48 	.word	0x10003c48
   2d5b4:	10003c3c 	.word	0x10003c3c
   2d5b8:	10003c38 	.word	0x10003c38

0002d5bc <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   2d5bc:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   2d5be:	4b08      	ldr	r3, [pc, #32]	; (2d5e0 <ble_hci_trans_hs_cmd_tx+0x24>)
   2d5c0:	681b      	ldr	r3, [r3, #0]
   2d5c2:	b11b      	cbz	r3, 2d5cc <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   2d5c4:	4a07      	ldr	r2, [pc, #28]	; (2d5e4 <ble_hci_trans_hs_cmd_tx+0x28>)
   2d5c6:	6811      	ldr	r1, [r2, #0]
   2d5c8:	4798      	blx	r3
    return rc;
}
   2d5ca:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   2d5cc:	f7e7 f842 	bl	14654 <hal_debugger_connected>
   2d5d0:	b100      	cbz	r0, 2d5d4 <ble_hci_trans_hs_cmd_tx+0x18>
   2d5d2:	be01      	bkpt	0x0001
   2d5d4:	2300      	movs	r3, #0
   2d5d6:	461a      	mov	r2, r3
   2d5d8:	4619      	mov	r1, r3
   2d5da:	4618      	mov	r0, r3
   2d5dc:	f7e7 fbdc 	bl	14d98 <__assert_func>
   2d5e0:	10003c4c 	.word	0x10003c4c
   2d5e4:	10003c48 	.word	0x10003c48

0002d5e8 <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   2d5e8:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   2d5ea:	4b08      	ldr	r3, [pc, #32]	; (2d60c <ble_hci_trans_ll_evt_tx+0x24>)
   2d5ec:	681b      	ldr	r3, [r3, #0]
   2d5ee:	b11b      	cbz	r3, 2d5f8 <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   2d5f0:	4a07      	ldr	r2, [pc, #28]	; (2d610 <ble_hci_trans_ll_evt_tx+0x28>)
   2d5f2:	6811      	ldr	r1, [r2, #0]
   2d5f4:	4798      	blx	r3
    return rc;
}
   2d5f6:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   2d5f8:	f7e7 f82c 	bl	14654 <hal_debugger_connected>
   2d5fc:	b100      	cbz	r0, 2d600 <ble_hci_trans_ll_evt_tx+0x18>
   2d5fe:	be01      	bkpt	0x0001
   2d600:	2300      	movs	r3, #0
   2d602:	461a      	mov	r2, r3
   2d604:	4619      	mov	r1, r3
   2d606:	4618      	mov	r0, r3
   2d608:	f7e7 fbc6 	bl	14d98 <__assert_func>
   2d60c:	10003c44 	.word	0x10003c44
   2d610:	10003c40 	.word	0x10003c40

0002d614 <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   2d614:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   2d616:	4b08      	ldr	r3, [pc, #32]	; (2d638 <ble_hci_trans_hs_acl_tx+0x24>)
   2d618:	681b      	ldr	r3, [r3, #0]
   2d61a:	b11b      	cbz	r3, 2d624 <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   2d61c:	4a07      	ldr	r2, [pc, #28]	; (2d63c <ble_hci_trans_hs_acl_tx+0x28>)
   2d61e:	6811      	ldr	r1, [r2, #0]
   2d620:	4798      	blx	r3
    return rc;
}
   2d622:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   2d624:	f7e7 f816 	bl	14654 <hal_debugger_connected>
   2d628:	b100      	cbz	r0, 2d62c <ble_hci_trans_hs_acl_tx+0x18>
   2d62a:	be01      	bkpt	0x0001
   2d62c:	2300      	movs	r3, #0
   2d62e:	461a      	mov	r2, r3
   2d630:	4619      	mov	r1, r3
   2d632:	4618      	mov	r0, r3
   2d634:	f7e7 fbb0 	bl	14d98 <__assert_func>
   2d638:	10003c3c 	.word	0x10003c3c
   2d63c:	10003c38 	.word	0x10003c38

0002d640 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   2d640:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   2d642:	4b08      	ldr	r3, [pc, #32]	; (2d664 <ble_hci_trans_ll_acl_tx+0x24>)
   2d644:	681b      	ldr	r3, [r3, #0]
   2d646:	b11b      	cbz	r3, 2d650 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   2d648:	4a07      	ldr	r2, [pc, #28]	; (2d668 <ble_hci_trans_ll_acl_tx+0x28>)
   2d64a:	6811      	ldr	r1, [r2, #0]
   2d64c:	4798      	blx	r3
    return rc;
}
   2d64e:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   2d650:	f7e7 f800 	bl	14654 <hal_debugger_connected>
   2d654:	b100      	cbz	r0, 2d658 <ble_hci_trans_ll_acl_tx+0x18>
   2d656:	be01      	bkpt	0x0001
   2d658:	2300      	movs	r3, #0
   2d65a:	461a      	mov	r2, r3
   2d65c:	4619      	mov	r1, r3
   2d65e:	4618      	mov	r0, r3
   2d660:	f7e7 fb9a 	bl	14d98 <__assert_func>
   2d664:	10003c34 	.word	0x10003c34
   2d668:	10003c30 	.word	0x10003c30

0002d66c <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   2d66c:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   2d66e:	2802      	cmp	r0, #2
   2d670:	d011      	beq.n	2d696 <ble_hci_trans_buf_alloc+0x2a>
   2d672:	2803      	cmp	r0, #3
   2d674:	d00b      	beq.n	2d68e <ble_hci_trans_buf_alloc+0x22>
   2d676:	2801      	cmp	r0, #1
   2d678:	d016      	beq.n	2d6a8 <ble_hci_trans_buf_alloc+0x3c>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   2d67a:	f7e6 ffeb 	bl	14654 <hal_debugger_connected>
   2d67e:	b100      	cbz	r0, 2d682 <ble_hci_trans_buf_alloc+0x16>
   2d680:	be01      	bkpt	0x0001
   2d682:	2300      	movs	r3, #0
   2d684:	461a      	mov	r2, r3
   2d686:	4619      	mov	r1, r3
   2d688:	4618      	mov	r0, r3
   2d68a:	f7e7 fb85 	bl	14d98 <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   2d68e:	4808      	ldr	r0, [pc, #32]	; (2d6b0 <ble_hci_trans_buf_alloc+0x44>)
   2d690:	f7e8 fbb9 	bl	15e06 <os_memblock_get>
        buf = NULL;
    }

    return buf;
}
   2d694:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   2d696:	4807      	ldr	r0, [pc, #28]	; (2d6b4 <ble_hci_trans_buf_alloc+0x48>)
   2d698:	f7e8 fbb5 	bl	15e06 <os_memblock_get>
        if (buf == NULL) {
   2d69c:	2800      	cmp	r0, #0
   2d69e:	d1f9      	bne.n	2d694 <ble_hci_trans_buf_alloc+0x28>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   2d6a0:	2001      	movs	r0, #1
   2d6a2:	f7ff ffe3 	bl	2d66c <ble_hci_trans_buf_alloc>
   2d6a6:	e7f5      	b.n	2d694 <ble_hci_trans_buf_alloc+0x28>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   2d6a8:	4803      	ldr	r0, [pc, #12]	; (2d6b8 <ble_hci_trans_buf_alloc+0x4c>)
   2d6aa:	f7e8 fbac 	bl	15e06 <os_memblock_get>
        break;
   2d6ae:	e7f1      	b.n	2d694 <ble_hci_trans_buf_alloc+0x28>
   2d6b0:	1000390c 	.word	0x1000390c
   2d6b4:	100039b8 	.word	0x100039b8
   2d6b8:	10003c14 	.word	0x10003c14

0002d6bc <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   2d6bc:	b510      	push	{r4, lr}
   2d6be:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   2d6c0:	4601      	mov	r1, r0
   2d6c2:	4824      	ldr	r0, [pc, #144]	; (2d754 <ble_hci_trans_buf_free+0x98>)
   2d6c4:	f7e8 fb80 	bl	15dc8 <os_memblock_from>
   2d6c8:	b178      	cbz	r0, 2d6ea <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   2d6ca:	4621      	mov	r1, r4
   2d6cc:	4821      	ldr	r0, [pc, #132]	; (2d754 <ble_hci_trans_buf_free+0x98>)
   2d6ce:	f7e8 fbc2 	bl	15e56 <os_memblock_put>
        assert(rc == 0);
   2d6d2:	b900      	cbnz	r0, 2d6d6 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   2d6d4:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   2d6d6:	f7e6 ffbd 	bl	14654 <hal_debugger_connected>
   2d6da:	b100      	cbz	r0, 2d6de <ble_hci_trans_buf_free+0x22>
   2d6dc:	be01      	bkpt	0x0001
   2d6de:	2300      	movs	r3, #0
   2d6e0:	461a      	mov	r2, r3
   2d6e2:	4619      	mov	r1, r3
   2d6e4:	4618      	mov	r0, r3
   2d6e6:	f7e7 fb57 	bl	14d98 <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   2d6ea:	4621      	mov	r1, r4
   2d6ec:	481a      	ldr	r0, [pc, #104]	; (2d758 <ble_hci_trans_buf_free+0x9c>)
   2d6ee:	f7e8 fb6b 	bl	15dc8 <os_memblock_from>
   2d6f2:	b178      	cbz	r0, 2d714 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   2d6f4:	4621      	mov	r1, r4
   2d6f6:	4818      	ldr	r0, [pc, #96]	; (2d758 <ble_hci_trans_buf_free+0x9c>)
   2d6f8:	f7e8 fbad 	bl	15e56 <os_memblock_put>
        assert(rc == 0);
   2d6fc:	2800      	cmp	r0, #0
   2d6fe:	d0e9      	beq.n	2d6d4 <ble_hci_trans_buf_free+0x18>
   2d700:	f7e6 ffa8 	bl	14654 <hal_debugger_connected>
   2d704:	b100      	cbz	r0, 2d708 <ble_hci_trans_buf_free+0x4c>
   2d706:	be01      	bkpt	0x0001
   2d708:	2300      	movs	r3, #0
   2d70a:	461a      	mov	r2, r3
   2d70c:	4619      	mov	r1, r3
   2d70e:	4618      	mov	r0, r3
   2d710:	f7e7 fb42 	bl	14d98 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   2d714:	4621      	mov	r1, r4
   2d716:	4811      	ldr	r0, [pc, #68]	; (2d75c <ble_hci_trans_buf_free+0xa0>)
   2d718:	f7e8 fb56 	bl	15dc8 <os_memblock_from>
   2d71c:	b178      	cbz	r0, 2d73e <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   2d71e:	4621      	mov	r1, r4
   2d720:	480e      	ldr	r0, [pc, #56]	; (2d75c <ble_hci_trans_buf_free+0xa0>)
   2d722:	f7e8 fb98 	bl	15e56 <os_memblock_put>
        assert(rc == 0);
   2d726:	2800      	cmp	r0, #0
   2d728:	d0d4      	beq.n	2d6d4 <ble_hci_trans_buf_free+0x18>
   2d72a:	f7e6 ff93 	bl	14654 <hal_debugger_connected>
   2d72e:	b100      	cbz	r0, 2d732 <ble_hci_trans_buf_free+0x76>
   2d730:	be01      	bkpt	0x0001
   2d732:	2300      	movs	r3, #0
   2d734:	461a      	mov	r2, r3
   2d736:	4619      	mov	r1, r3
   2d738:	4618      	mov	r0, r3
   2d73a:	f7e7 fb2d 	bl	14d98 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   2d73e:	f7e6 ff89 	bl	14654 <hal_debugger_connected>
   2d742:	b100      	cbz	r0, 2d746 <ble_hci_trans_buf_free+0x8a>
   2d744:	be01      	bkpt	0x0001
   2d746:	2300      	movs	r3, #0
   2d748:	461a      	mov	r2, r3
   2d74a:	4619      	mov	r1, r3
   2d74c:	4618      	mov	r0, r3
   2d74e:	f7e7 fb23 	bl	14d98 <__assert_func>
   2d752:	bf00      	nop
   2d754:	100039b8 	.word	0x100039b8
   2d758:	10003c14 	.word	0x10003c14
   2d75c:	1000390c 	.word	0x1000390c

0002d760 <ble_hci_trans_set_acl_free_cb>:
 */
int
ble_hci_trans_set_acl_free_cb(os_mempool_put_fn *cb, void *arg)
{
    return BLE_ERR_UNSUPPORTED;
}
   2d760:	2011      	movs	r0, #17
   2d762:	4770      	bx	lr

0002d764 <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   2d764:	2000      	movs	r0, #0
   2d766:	4770      	bx	lr

0002d768 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   2d768:	b510      	push	{r4, lr}
   2d76a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2d76c:	4b28      	ldr	r3, [pc, #160]	; (2d810 <ble_hci_ram_init+0xa8>)
   2d76e:	781b      	ldrb	r3, [r3, #0]
   2d770:	b1eb      	cbz	r3, 2d7ae <ble_hci_ram_init+0x46>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   2d772:	4b28      	ldr	r3, [pc, #160]	; (2d814 <ble_hci_ram_init+0xac>)
   2d774:	9300      	str	r3, [sp, #0]
   2d776:	4b28      	ldr	r3, [pc, #160]	; (2d818 <ble_hci_ram_init+0xb0>)
   2d778:	f44f 7282 	mov.w	r2, #260	; 0x104
   2d77c:	2101      	movs	r1, #1
   2d77e:	4827      	ldr	r0, [pc, #156]	; (2d81c <ble_hci_ram_init+0xb4>)
   2d780:	f7e8 fb18 	bl	15db4 <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d784:	b9e8      	cbnz	r0, 2d7c2 <ble_hci_ram_init+0x5a>

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   2d786:	4b26      	ldr	r3, [pc, #152]	; (2d820 <ble_hci_ram_init+0xb8>)
   2d788:	9300      	str	r3, [sp, #0]
   2d78a:	4b26      	ldr	r3, [pc, #152]	; (2d824 <ble_hci_ram_init+0xbc>)
   2d78c:	2246      	movs	r2, #70	; 0x46
   2d78e:	2102      	movs	r1, #2
   2d790:	4825      	ldr	r0, [pc, #148]	; (2d828 <ble_hci_ram_init+0xc0>)
   2d792:	f7e8 fb0f 	bl	15db4 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d796:	bb08      	cbnz	r0, 2d7dc <ble_hci_ram_init+0x74>

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   2d798:	4b24      	ldr	r3, [pc, #144]	; (2d82c <ble_hci_ram_init+0xc4>)
   2d79a:	9300      	str	r3, [sp, #0]
   2d79c:	4b24      	ldr	r3, [pc, #144]	; (2d830 <ble_hci_ram_init+0xc8>)
   2d79e:	2246      	movs	r2, #70	; 0x46
   2d7a0:	2108      	movs	r1, #8
   2d7a2:	4824      	ldr	r0, [pc, #144]	; (2d834 <ble_hci_ram_init+0xcc>)
   2d7a4:	f7e8 fb06 	bl	15db4 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d7a8:	bb28      	cbnz	r0, 2d7f6 <ble_hci_ram_init+0x8e>
}
   2d7aa:	b002      	add	sp, #8
   2d7ac:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2d7ae:	f7e6 ff51 	bl	14654 <hal_debugger_connected>
   2d7b2:	b100      	cbz	r0, 2d7b6 <ble_hci_ram_init+0x4e>
   2d7b4:	be01      	bkpt	0x0001
   2d7b6:	2300      	movs	r3, #0
   2d7b8:	461a      	mov	r2, r3
   2d7ba:	4619      	mov	r1, r3
   2d7bc:	4618      	mov	r0, r3
   2d7be:	f7e7 faeb 	bl	14d98 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d7c2:	f7e6 ff47 	bl	14654 <hal_debugger_connected>
   2d7c6:	b100      	cbz	r0, 2d7ca <ble_hci_ram_init+0x62>
   2d7c8:	be01      	bkpt	0x0001
   2d7ca:	2000      	movs	r0, #0
   2d7cc:	9000      	str	r0, [sp, #0]
   2d7ce:	4b1a      	ldr	r3, [pc, #104]	; (2d838 <ble_hci_ram_init+0xd0>)
   2d7d0:	681c      	ldr	r4, [r3, #0]
   2d7d2:	4603      	mov	r3, r0
   2d7d4:	4602      	mov	r2, r0
   2d7d6:	4601      	mov	r1, r0
   2d7d8:	47a0      	blx	r4
   2d7da:	e7d4      	b.n	2d786 <ble_hci_ram_init+0x1e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d7dc:	f7e6 ff3a 	bl	14654 <hal_debugger_connected>
   2d7e0:	b100      	cbz	r0, 2d7e4 <ble_hci_ram_init+0x7c>
   2d7e2:	be01      	bkpt	0x0001
   2d7e4:	2000      	movs	r0, #0
   2d7e6:	9000      	str	r0, [sp, #0]
   2d7e8:	4b13      	ldr	r3, [pc, #76]	; (2d838 <ble_hci_ram_init+0xd0>)
   2d7ea:	681c      	ldr	r4, [r3, #0]
   2d7ec:	4603      	mov	r3, r0
   2d7ee:	4602      	mov	r2, r0
   2d7f0:	4601      	mov	r1, r0
   2d7f2:	47a0      	blx	r4
   2d7f4:	e7d0      	b.n	2d798 <ble_hci_ram_init+0x30>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2d7f6:	f7e6 ff2d 	bl	14654 <hal_debugger_connected>
   2d7fa:	b100      	cbz	r0, 2d7fe <ble_hci_ram_init+0x96>
   2d7fc:	be01      	bkpt	0x0001
   2d7fe:	2000      	movs	r0, #0
   2d800:	9000      	str	r0, [sp, #0]
   2d802:	4b0d      	ldr	r3, [pc, #52]	; (2d838 <ble_hci_ram_init+0xd0>)
   2d804:	681c      	ldr	r4, [r3, #0]
   2d806:	4603      	mov	r3, r0
   2d808:	4602      	mov	r2, r0
   2d80a:	4601      	mov	r1, r0
   2d80c:	47a0      	blx	r4
}
   2d80e:	e7cc      	b.n	2d7aa <ble_hci_ram_init+0x42>
   2d810:	10001e3c 	.word	0x10001e3c
   2d814:	000350b4 	.word	0x000350b4
   2d818:	10003808 	.word	0x10003808
   2d81c:	1000390c 	.word	0x1000390c
   2d820:	000350cc 	.word	0x000350cc
   2d824:	10003928 	.word	0x10003928
   2d828:	100039b8 	.word	0x100039b8
   2d82c:	000350e4 	.word	0x000350e4
   2d830:	100039d4 	.word	0x100039d4
   2d834:	10003c14 	.word	0x10003c14
   2d838:	1000028c 	.word	0x1000028c

0002d83c <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   2d83c:	2801      	cmp	r0, #1
   2d83e:	d100      	bne.n	2d842 <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   2d840:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   2d842:	2002      	movs	r0, #2
   2d844:	e7fc      	b.n	2d840 <boot_flag_decode+0x4>
	...

0002d848 <boot_magic_decode>:
{
   2d848:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   2d84a:	2210      	movs	r2, #16
   2d84c:	4903      	ldr	r1, [pc, #12]	; (2d85c <boot_magic_decode+0x14>)
   2d84e:	f7e9 f909 	bl	16a64 <memcmp>
   2d852:	b108      	cbz	r0, 2d858 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   2d854:	2002      	movs	r0, #2
}
   2d856:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   2d858:	2001      	movs	r0, #1
   2d85a:	e7fc      	b.n	2d856 <boot_magic_decode+0xe>
   2d85c:	000350fc 	.word	0x000350fc

0002d860 <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d860:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
   2d862:	3828      	subs	r0, #40	; 0x28
   2d864:	4770      	bx	lr

0002d866 <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
   2d866:	2804      	cmp	r0, #4
   2d868:	d00a      	beq.n	2d880 <boot_magic_compatible_check+0x1a>
   2d86a:	2805      	cmp	r0, #5
   2d86c:	d103      	bne.n	2d876 <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
   2d86e:	1e48      	subs	r0, r1, #1
   2d870:	bf18      	it	ne
   2d872:	2001      	movne	r0, #1
   2d874:	4770      	bx	lr

    default:
        return tbl_val == val;
   2d876:	4288      	cmp	r0, r1
   2d878:	bf14      	ite	ne
   2d87a:	2000      	movne	r0, #0
   2d87c:	2001      	moveq	r0, #1
   2d87e:	4770      	bx	lr
    switch (tbl_val) {
   2d880:	2001      	movs	r0, #1
    }
}
   2d882:	4770      	bx	lr

0002d884 <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
   2d884:	b191      	cbz	r1, 2d8ac <bootutil_buffer_is_erased+0x28>
{
   2d886:	b538      	push	{r3, r4, r5, lr}
   2d888:	4614      	mov	r4, r2
   2d88a:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
   2d88c:	b90a      	cbnz	r2, 2d892 <bootutil_buffer_is_erased+0xe>
        return false;
   2d88e:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
   2d890:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
   2d892:	f7eb f975 	bl	18b80 <flash_area_erased_val>
   2d896:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   2d898:	2300      	movs	r3, #0
   2d89a:	42a3      	cmp	r3, r4
   2d89c:	d204      	bcs.n	2d8a8 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
   2d89e:	5cea      	ldrb	r2, [r5, r3]
   2d8a0:	4282      	cmp	r2, r0
   2d8a2:	d105      	bne.n	2d8b0 <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   2d8a4:	3301      	adds	r3, #1
   2d8a6:	e7f8      	b.n	2d89a <bootutil_buffer_is_erased+0x16>
    return true;
   2d8a8:	2001      	movs	r0, #1
   2d8aa:	e7f1      	b.n	2d890 <bootutil_buffer_is_erased+0xc>
        return false;
   2d8ac:	2000      	movs	r0, #0
}
   2d8ae:	4770      	bx	lr
            return false;
   2d8b0:	2000      	movs	r0, #0
   2d8b2:	e7ed      	b.n	2d890 <bootutil_buffer_is_erased+0xc>

0002d8b4 <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
   2d8b4:	b538      	push	{r3, r4, r5, lr}
   2d8b6:	4605      	mov	r5, r0
   2d8b8:	460c      	mov	r4, r1
   2d8ba:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
   2d8bc:	2301      	movs	r3, #1
   2d8be:	4622      	mov	r2, r4
   2d8c0:	f7eb f920 	bl	18b04 <flash_area_read>
    if (rc < 0) {
   2d8c4:	2800      	cmp	r0, #0
   2d8c6:	db0f      	blt.n	2d8e8 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   2d8c8:	2201      	movs	r2, #1
   2d8ca:	4621      	mov	r1, r4
   2d8cc:	4628      	mov	r0, r5
   2d8ce:	f7ff ffd9 	bl	2d884 <bootutil_buffer_is_erased>
   2d8d2:	b118      	cbz	r0, 2d8dc <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   2d8d4:	2303      	movs	r3, #3
   2d8d6:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
   2d8d8:	2000      	movs	r0, #0
   2d8da:	e006      	b.n	2d8ea <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
   2d8dc:	7820      	ldrb	r0, [r4, #0]
   2d8de:	f7ff ffad 	bl	2d83c <boot_flag_decode>
   2d8e2:	7020      	strb	r0, [r4, #0]
    return 0;
   2d8e4:	2000      	movs	r0, #0
   2d8e6:	e000      	b.n	2d8ea <boot_read_flag+0x36>
        return BOOT_EFLASH;
   2d8e8:	2001      	movs	r0, #1
}
   2d8ea:	bd38      	pop	{r3, r4, r5, pc}

0002d8ec <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   2d8ec:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d8ee:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   2d8f0:	2310      	movs	r3, #16
   2d8f2:	4a04      	ldr	r2, [pc, #16]	; (2d904 <boot_write_magic+0x18>)
   2d8f4:	3910      	subs	r1, #16
   2d8f6:	f7eb f918 	bl	18b2a <flash_area_write>
    if (rc != 0) {
   2d8fa:	b900      	cbnz	r0, 2d8fe <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
   2d8fc:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   2d8fe:	2001      	movs	r0, #1
   2d900:	e7fc      	b.n	2d8fc <boot_write_magic+0x10>
   2d902:	bf00      	nop
   2d904:	000350fc 	.word	0x000350fc

0002d908 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   2d908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d90c:	b083      	sub	sp, #12
   2d90e:	4606      	mov	r6, r0
   2d910:	460f      	mov	r7, r1
   2d912:	4690      	mov	r8, r2
   2d914:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   2d916:	f7eb f92e 	bl	18b76 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
   2d91a:	1944      	adds	r4, r0, r5
   2d91c:	b2e4      	uxtb	r4, r4
   2d91e:	3c01      	subs	r4, #1
   2d920:	b264      	sxtb	r4, r4
   2d922:	4240      	negs	r0, r0
   2d924:	4004      	ands	r4, r0
   2d926:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   2d928:	2c08      	cmp	r4, #8
   2d92a:	d904      	bls.n	2d936 <boot_write_trailer+0x2e>
        return -1;
   2d92c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   2d930:	b003      	add	sp, #12
   2d932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
   2d936:	4630      	mov	r0, r6
   2d938:	f7eb f922 	bl	18b80 <flash_area_erased_val>
   2d93c:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   2d93e:	462a      	mov	r2, r5
   2d940:	4641      	mov	r1, r8
   2d942:	4668      	mov	r0, sp
   2d944:	f7e9 f8b2 	bl	16aac <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   2d948:	1b62      	subs	r2, r4, r5
   2d94a:	fa5f f189 	uxtb.w	r1, r9
   2d94e:	eb0d 0005 	add.w	r0, sp, r5
   2d952:	f7e9 f8d0 	bl	16af6 <memset>
    rc = flash_area_write(fap, off, buf, align);
   2d956:	4623      	mov	r3, r4
   2d958:	466a      	mov	r2, sp
   2d95a:	4639      	mov	r1, r7
   2d95c:	4630      	mov	r0, r6
   2d95e:	f7eb f8e4 	bl	18b2a <flash_area_write>
    if (rc != 0) {
   2d962:	2800      	cmp	r0, #0
   2d964:	d0e4      	beq.n	2d930 <boot_write_trailer+0x28>
        return BOOT_EFLASH;
   2d966:	2001      	movs	r0, #1
   2d968:	e7e2      	b.n	2d930 <boot_write_trailer+0x28>

0002d96a <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   2d96a:	b500      	push	{lr}
   2d96c:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
   2d96e:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   2d972:	2301      	movs	r3, #1
   2d974:	aa01      	add	r2, sp, #4
   2d976:	f7ff ffc7 	bl	2d908 <boot_write_trailer>
}
   2d97a:	b003      	add	sp, #12
   2d97c:	f85d fb04 	ldr.w	pc, [sp], #4

0002d980 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
   2d980:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d982:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   2d984:	2201      	movs	r2, #1
   2d986:	3918      	subs	r1, #24
   2d988:	f7ff ffef 	bl	2d96a <boot_write_trailer_flag>
}
   2d98c:	bd08      	pop	{r3, pc}

0002d98e <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
   2d98e:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d990:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   2d992:	3a18      	subs	r2, #24
   2d994:	f7ff ff8e 	bl	2d8b4 <boot_read_flag>
}
   2d998:	bd08      	pop	{r3, pc}

0002d99a <boot_read_swap_state>:
{
   2d99a:	b530      	push	{r4, r5, lr}
   2d99c:	b087      	sub	sp, #28
   2d99e:	4604      	mov	r4, r0
   2d9a0:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   2d9a2:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2d9a4:	2310      	movs	r3, #16
   2d9a6:	aa02      	add	r2, sp, #8
   2d9a8:	3910      	subs	r1, #16
   2d9aa:	f7eb f8ab 	bl	18b04 <flash_area_read>
    if (rc < 0) {
   2d9ae:	2800      	cmp	r0, #0
   2d9b0:	db3b      	blt.n	2da2a <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   2d9b2:	2210      	movs	r2, #16
   2d9b4:	a902      	add	r1, sp, #8
   2d9b6:	4620      	mov	r0, r4
   2d9b8:	f7ff ff64 	bl	2d884 <bootutil_buffer_is_erased>
   2d9bc:	b358      	cbz	r0, 2da16 <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
   2d9be:	2303      	movs	r3, #3
   2d9c0:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
   2d9c2:	4620      	mov	r0, r4
   2d9c4:	f7ff ff4c 	bl	2d860 <boot_swap_info_off>
   2d9c8:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   2d9ca:	2301      	movs	r3, #1
   2d9cc:	f10d 0207 	add.w	r2, sp, #7
   2d9d0:	4620      	mov	r0, r4
   2d9d2:	f7eb f897 	bl	18b04 <flash_area_read>
    if (rc < 0) {
   2d9d6:	2800      	cmp	r0, #0
   2d9d8:	db2a      	blt.n	2da30 <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2d9da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2d9de:	f003 020f 	and.w	r2, r3, #15
   2d9e2:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2d9e4:	091b      	lsrs	r3, r3, #4
   2d9e6:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   2d9e8:	2201      	movs	r2, #1
   2d9ea:	f10d 0107 	add.w	r1, sp, #7
   2d9ee:	4620      	mov	r0, r4
   2d9f0:	f7ff ff48 	bl	2d884 <bootutil_buffer_is_erased>
   2d9f4:	b910      	cbnz	r0, 2d9fc <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   2d9f6:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   2d9f8:	2b04      	cmp	r3, #4
   2d9fa:	d903      	bls.n	2da04 <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   2d9fc:	2301      	movs	r3, #1
   2d9fe:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   2da00:	2300      	movs	r3, #0
   2da02:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
   2da04:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   2da06:	3a20      	subs	r2, #32
   2da08:	1ca9      	adds	r1, r5, #2
   2da0a:	4620      	mov	r0, r4
   2da0c:	f7ff ff52 	bl	2d8b4 <boot_read_flag>
    if (rc) {
   2da10:	b130      	cbz	r0, 2da20 <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
   2da12:	2001      	movs	r0, #1
   2da14:	e00a      	b.n	2da2c <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
   2da16:	a802      	add	r0, sp, #8
   2da18:	f7ff ff16 	bl	2d848 <boot_magic_decode>
   2da1c:	7028      	strb	r0, [r5, #0]
   2da1e:	e7d0      	b.n	2d9c2 <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
   2da20:	1ce9      	adds	r1, r5, #3
   2da22:	4620      	mov	r0, r4
   2da24:	f7ff ffb3 	bl	2d98e <boot_read_image_ok>
   2da28:	e000      	b.n	2da2c <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
   2da2a:	2001      	movs	r0, #1
}
   2da2c:	b007      	add	sp, #28
   2da2e:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   2da30:	2001      	movs	r0, #1
   2da32:	e7fb      	b.n	2da2c <boot_read_swap_state+0x92>

0002da34 <boot_read_swap_state_by_id>:
{
   2da34:	b510      	push	{r4, lr}
   2da36:	b082      	sub	sp, #8
   2da38:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   2da3a:	a901      	add	r1, sp, #4
   2da3c:	b2c0      	uxtb	r0, r0
   2da3e:	f7eb f809 	bl	18a54 <flash_area_open>
    if (rc != 0) {
   2da42:	b110      	cbz	r0, 2da4a <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
   2da44:	2001      	movs	r0, #1
}
   2da46:	b002      	add	sp, #8
   2da48:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   2da4a:	4621      	mov	r1, r4
   2da4c:	9801      	ldr	r0, [sp, #4]
   2da4e:	f7ff ffa4 	bl	2d99a <boot_read_swap_state>
    return rc;
   2da52:	e7f8      	b.n	2da46 <boot_read_swap_state_by_id+0x12>

0002da54 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   2da54:	b510      	push	{r4, lr}
   2da56:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2da58:	2a0e      	cmp	r2, #14
   2da5a:	d811      	bhi.n	2da80 <boot_write_swap_info+0x2c>
   2da5c:	4604      	mov	r4, r0
   2da5e:	290e      	cmp	r1, #14
   2da60:	d818      	bhi.n	2da94 <boot_write_swap_info+0x40>
   2da62:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   2da66:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   2da6a:	f7ff fef9 	bl	2d860 <boot_swap_info_off>
   2da6e:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2da70:	2301      	movs	r3, #1
   2da72:	f10d 0207 	add.w	r2, sp, #7
   2da76:	4620      	mov	r0, r4
   2da78:	f7ff ff46 	bl	2d908 <boot_write_trailer>
}
   2da7c:	b002      	add	sp, #8
   2da7e:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2da80:	f7e6 fde8 	bl	14654 <hal_debugger_connected>
   2da84:	b100      	cbz	r0, 2da88 <boot_write_swap_info+0x34>
   2da86:	be01      	bkpt	0x0001
   2da88:	2300      	movs	r3, #0
   2da8a:	461a      	mov	r2, r3
   2da8c:	4619      	mov	r1, r3
   2da8e:	4618      	mov	r0, r3
   2da90:	f7e7 f982 	bl	14d98 <__assert_func>
   2da94:	f7e6 fdde 	bl	14654 <hal_debugger_connected>
   2da98:	b100      	cbz	r0, 2da9c <boot_write_swap_info+0x48>
   2da9a:	be01      	bkpt	0x0001
   2da9c:	2300      	movs	r3, #0
   2da9e:	461a      	mov	r2, r3
   2daa0:	4619      	mov	r1, r3
   2daa2:	4618      	mov	r0, r3
   2daa4:	f7e7 f978 	bl	14d98 <__assert_func>

0002daa8 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
   2daa8:	b530      	push	{r4, r5, lr}
   2daaa:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   2daac:	a902      	add	r1, sp, #8
   2daae:	2001      	movs	r0, #1
   2dab0:	f7ff ffc0 	bl	2da34 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
   2dab4:	2800      	cmp	r0, #0
   2dab6:	d13e      	bne.n	2db36 <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   2dab8:	4669      	mov	r1, sp
   2daba:	2002      	movs	r0, #2
   2dabc:	f7ff ffba 	bl	2da34 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   2dac0:	2800      	cmp	r0, #0
   2dac2:	d13a      	bne.n	2db3a <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2dac4:	2400      	movs	r4, #0
   2dac6:	e007      	b.n	2dad8 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2dac8:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   2daca:	2b04      	cmp	r3, #4
   2dacc:	d029      	beq.n	2db22 <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   2dace:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2dad2:	4293      	cmp	r3, r2
   2dad4:	d025      	beq.n	2db22 <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2dad6:	3401      	adds	r4, #1
   2dad8:	2c02      	cmp	r4, #2
   2dada:	d829      	bhi.n	2db30 <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
   2dadc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2dae0:	4a17      	ldr	r2, [pc, #92]	; (2db40 <boot_swap_type_multi+0x98>)
   2dae2:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   2dae6:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2daea:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   2daee:	f7ff feba 	bl	2d866 <boot_magic_compatible_check>
   2daf2:	2800      	cmp	r0, #0
   2daf4:	d0ef      	beq.n	2dad6 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   2daf6:	f89d 1000 	ldrb.w	r1, [sp]
   2dafa:	7868      	ldrb	r0, [r5, #1]
   2dafc:	f7ff feb3 	bl	2d866 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   2db00:	2800      	cmp	r0, #0
   2db02:	d0e8      	beq.n	2dad6 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2db04:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   2db06:	2b04      	cmp	r3, #4
   2db08:	d003      	beq.n	2db12 <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   2db0a:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2db0e:	4293      	cmp	r3, r2
   2db10:	d1e1      	bne.n	2dad6 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2db12:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   2db14:	2b04      	cmp	r3, #4
   2db16:	d0d7      	beq.n	2dac8 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   2db18:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2db1c:	4293      	cmp	r3, r2
   2db1e:	d1da      	bne.n	2dad6 <boot_swap_type_multi+0x2e>
   2db20:	e7d2      	b.n	2dac8 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
   2db22:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
   2db24:	1e83      	subs	r3, r0, #2
   2db26:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   2db28:	2b02      	cmp	r3, #2
   2db2a:	d902      	bls.n	2db32 <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
   2db2c:	20ff      	movs	r0, #255	; 0xff
   2db2e:	e000      	b.n	2db32 <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   2db30:	2001      	movs	r0, #1
}
   2db32:	b005      	add	sp, #20
   2db34:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   2db36:	20ff      	movs	r0, #255	; 0xff
   2db38:	e7fb      	b.n	2db32 <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
   2db3a:	20ff      	movs	r0, #255	; 0xff
   2db3c:	e7f9      	b.n	2db32 <boot_swap_type_multi+0x8a>
   2db3e:	bf00      	nop
   2db40:	0003510c 	.word	0x0003510c

0002db44 <boot_swap_type>:
 * This function is not used by the bootloader itself, but its required API
 * by external tooling like mcumgr.
 */
int
boot_swap_type(void)
{
   2db44:	b508      	push	{r3, lr}
    return boot_swap_type_multi(0);
   2db46:	2000      	movs	r0, #0
   2db48:	f7ff ffae 	bl	2daa8 <boot_swap_type_multi>
}
   2db4c:	bd08      	pop	{r3, pc}

0002db4e <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   2db4e:	b530      	push	{r4, r5, lr}
   2db50:	b085      	sub	sp, #20
   2db52:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   2db54:	a901      	add	r1, sp, #4
   2db56:	2002      	movs	r0, #2
   2db58:	f7ff ff6c 	bl	2da34 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   2db5c:	4603      	mov	r3, r0
   2db5e:	bba0      	cbnz	r0, 2dbca <boot_set_pending_multi+0x7c>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   2db60:	f89d 5004 	ldrb.w	r5, [sp, #4]
   2db64:	2d02      	cmp	r5, #2
   2db66:	d02a      	beq.n	2dbbe <boot_set_pending_multi+0x70>
   2db68:	2d03      	cmp	r5, #3
   2db6a:	d00b      	beq.n	2db84 <boot_set_pending_multi+0x36>
   2db6c:	2d01      	cmp	r5, #1
   2db6e:	d02c      	beq.n	2dbca <boot_set_pending_multi+0x7c>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   2db70:	f7e6 fd70 	bl	14654 <hal_debugger_connected>
   2db74:	b100      	cbz	r0, 2db78 <boot_set_pending_multi+0x2a>
   2db76:	be01      	bkpt	0x0001
   2db78:	2300      	movs	r3, #0
   2db7a:	461a      	mov	r2, r3
   2db7c:	4619      	mov	r1, r3
   2db7e:	4618      	mov	r0, r3
   2db80:	f7e7 f90a 	bl	14d98 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2db84:	a903      	add	r1, sp, #12
   2db86:	2002      	movs	r0, #2
   2db88:	f7ea ff64 	bl	18a54 <flash_area_open>
        if (rc != 0) {
   2db8c:	b150      	cbz	r0, 2dba4 <boot_set_pending_multi+0x56>
            rc = BOOT_EFLASH;
   2db8e:	2301      	movs	r3, #1
        if (rc == 0) {
   2db90:	b9db      	cbnz	r3, 2dbca <boot_set_pending_multi+0x7c>
            if (permanent) {
   2db92:	b904      	cbnz	r4, 2db96 <boot_set_pending_multi+0x48>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2db94:	2502      	movs	r5, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   2db96:	2200      	movs	r2, #0
   2db98:	4629      	mov	r1, r5
   2db9a:	9803      	ldr	r0, [sp, #12]
   2db9c:	f7ff ff5a 	bl	2da54 <boot_write_swap_info>
   2dba0:	4603      	mov	r3, r0
   2dba2:	e012      	b.n	2dbca <boot_set_pending_multi+0x7c>
            rc = boot_write_magic(fap);
   2dba4:	9803      	ldr	r0, [sp, #12]
   2dba6:	f7ff fea1 	bl	2d8ec <boot_write_magic>
        if (rc == 0 && permanent) {
   2dbaa:	4603      	mov	r3, r0
   2dbac:	2800      	cmp	r0, #0
   2dbae:	d1ef      	bne.n	2db90 <boot_set_pending_multi+0x42>
   2dbb0:	2c00      	cmp	r4, #0
   2dbb2:	d0ed      	beq.n	2db90 <boot_set_pending_multi+0x42>
            rc = boot_write_image_ok(fap);
   2dbb4:	9803      	ldr	r0, [sp, #12]
   2dbb6:	f7ff fee3 	bl	2d980 <boot_write_image_ok>
   2dbba:	4603      	mov	r3, r0
   2dbbc:	e7e8      	b.n	2db90 <boot_set_pending_multi+0x42>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2dbbe:	a903      	add	r1, sp, #12
   2dbc0:	2002      	movs	r0, #2
   2dbc2:	f7ea ff47 	bl	18a54 <flash_area_open>
        if (rc != 0) {
   2dbc6:	b118      	cbz	r0, 2dbd0 <boot_set_pending_multi+0x82>
            return BOOT_EFLASH;
   2dbc8:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   2dbca:	4618      	mov	r0, r3
   2dbcc:	b005      	add	sp, #20
   2dbce:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   2dbd0:	9803      	ldr	r0, [sp, #12]
   2dbd2:	6882      	ldr	r2, [r0, #8]
   2dbd4:	2100      	movs	r1, #0
   2dbd6:	f7ea ffbb 	bl	18b50 <flash_area_erase>
        return BOOT_EBADIMAGE;
   2dbda:	2303      	movs	r3, #3
   2dbdc:	e7f5      	b.n	2dbca <boot_set_pending_multi+0x7c>

0002dbde <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   2dbde:	b508      	push	{r3, lr}
   2dbe0:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   2dbe2:	2000      	movs	r0, #0
   2dbe4:	f7ff ffb3 	bl	2db4e <boot_set_pending_multi>
}
   2dbe8:	bd08      	pop	{r3, pc}

0002dbea <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   2dbea:	b500      	push	{lr}
   2dbec:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   2dbee:	a901      	add	r1, sp, #4
   2dbf0:	2001      	movs	r0, #1
   2dbf2:	f7ff ff1f 	bl	2da34 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   2dbf6:	b998      	cbnz	r0, 2dc20 <boot_set_confirmed_multi+0x36>
        return rc;
    }

    switch (state_primary_slot.magic) {
   2dbf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2dbfc:	2b02      	cmp	r3, #2
   2dbfe:	d00e      	beq.n	2dc1e <boot_set_confirmed_multi+0x34>
   2dc00:	2b03      	cmp	r3, #3
   2dc02:	d00d      	beq.n	2dc20 <boot_set_confirmed_multi+0x36>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   2dc04:	a903      	add	r1, sp, #12
   2dc06:	2001      	movs	r0, #1
   2dc08:	f7ea ff24 	bl	18a54 <flash_area_open>
    if (rc) {
   2dc0c:	b958      	cbnz	r0, 2dc26 <boot_set_confirmed_multi+0x3c>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   2dc0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2dc12:	2b03      	cmp	r3, #3
   2dc14:	d104      	bne.n	2dc20 <boot_set_confirmed_multi+0x36>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   2dc16:	9803      	ldr	r0, [sp, #12]
   2dc18:	f7ff feb2 	bl	2d980 <boot_write_image_ok>
   2dc1c:	e000      	b.n	2dc20 <boot_set_confirmed_multi+0x36>
        return BOOT_EBADVECT;
   2dc1e:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   2dc20:	b005      	add	sp, #20
   2dc22:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   2dc26:	2001      	movs	r0, #1
   2dc28:	e7fa      	b.n	2dc20 <boot_set_confirmed_multi+0x36>

0002dc2a <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   2dc2a:	b508      	push	{r3, lr}
    return boot_set_confirmed_multi(0);
   2dc2c:	2000      	movs	r0, #0
   2dc2e:	f7ff ffdc 	bl	2dbea <boot_set_confirmed_multi>
}
   2dc32:	bd08      	pop	{r3, pc}

0002dc34 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   2dc34:	b4f0      	push	{r4, r5, r6, r7}
   2dc36:	b08c      	sub	sp, #48	; 0x30
   2dc38:	4607      	mov	r7, r0
   2dc3a:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   2dc3c:	ac01      	add	r4, sp, #4
   2dc3e:	4d2a      	ldr	r5, [pc, #168]	; (2dce8 <tc_aes128_set_encrypt_key+0xb4>)
   2dc40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2dc42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2dc44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2dc46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2dc48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2dc4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   2dc50:	2f00      	cmp	r7, #0
   2dc52:	d045      	beq.n	2dce0 <tc_aes128_set_encrypt_key+0xac>
   2dc54:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   2dc56:	2e00      	cmp	r6, #0
   2dc58:	d044      	beq.n	2dce4 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   2dc5a:	2300      	movs	r3, #0
   2dc5c:	e00f      	b.n	2dc7e <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2dc5e:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   2dc62:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   2dc66:	784a      	ldrb	r2, [r1, #1]
   2dc68:	0412      	lsls	r2, r2, #16
   2dc6a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2dc6e:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2dc70:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2dc74:	78c9      	ldrb	r1, [r1, #3]
   2dc76:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2dc78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   2dc7c:	3301      	adds	r3, #1
   2dc7e:	2b03      	cmp	r3, #3
   2dc80:	d9ed      	bls.n	2dc5e <tc_aes128_set_encrypt_key+0x2a>
   2dc82:	e006      	b.n	2dc92 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   2dc84:	1f19      	subs	r1, r3, #4
   2dc86:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2dc8a:	404a      	eors	r2, r1
   2dc8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2dc90:	3301      	adds	r3, #1
   2dc92:	2b2b      	cmp	r3, #43	; 0x2b
   2dc94:	d820      	bhi.n	2dcd8 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   2dc96:	1e5a      	subs	r2, r3, #1
   2dc98:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   2dc9c:	f013 0f03 	tst.w	r3, #3
   2dca0:	d1f0      	bne.n	2dc84 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   2dca2:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2dca6:	0e11      	lsrs	r1, r2, #24
   2dca8:	4c10      	ldr	r4, [pc, #64]	; (2dcec <tc_aes128_set_encrypt_key+0xb8>)
   2dcaa:	5c65      	ldrb	r5, [r4, r1]
   2dcac:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2dcb0:	5c61      	ldrb	r1, [r4, r1]
   2dcb2:	0409      	lsls	r1, r1, #16
   2dcb4:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   2dcb8:	f3c2 2507 	ubfx	r5, r2, #8, #8
   2dcbc:	5d65      	ldrb	r5, [r4, r5]
   2dcbe:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   2dcc2:	b2d2      	uxtb	r2, r2
   2dcc4:	5ca2      	ldrb	r2, [r4, r2]
   2dcc6:	4311      	orrs	r1, r2
   2dcc8:	f023 0203 	bic.w	r2, r3, #3
   2dccc:	ac0c      	add	r4, sp, #48	; 0x30
   2dcce:	4422      	add	r2, r4
   2dcd0:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   2dcd4:	404a      	eors	r2, r1
   2dcd6:	e7d5      	b.n	2dc84 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   2dcd8:	2001      	movs	r0, #1
}
   2dcda:	b00c      	add	sp, #48	; 0x30
   2dcdc:	bcf0      	pop	{r4, r5, r6, r7}
   2dcde:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2dce0:	2000      	movs	r0, #0
   2dce2:	e7fa      	b.n	2dcda <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   2dce4:	2000      	movs	r0, #0
   2dce6:	e7f8      	b.n	2dcda <tc_aes128_set_encrypt_key+0xa6>
   2dce8:	00033c9c 	.word	0x00033c9c
   2dcec:	00035168 	.word	0x00035168

0002dcf0 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2dcf0:	2800      	cmp	r0, #0
   2dcf2:	f000 839a 	beq.w	2e42a <tc_aes_encrypt+0x73a>
{
   2dcf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dcfa:	b088      	sub	sp, #32
   2dcfc:	4616      	mov	r6, r2
   2dcfe:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2dd00:	2900      	cmp	r1, #0
   2dd02:	f000 8394 	beq.w	2e42e <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2dd06:	2a00      	cmp	r2, #0
   2dd08:	f000 8393 	beq.w	2e432 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2dd0c:	2310      	movs	r3, #16
   2dd0e:	460a      	mov	r2, r1
   2dd10:	4619      	mov	r1, r3
   2dd12:	eb0d 0003 	add.w	r0, sp, r3
   2dd16:	f000 fb91 	bl	2e43c <_copy>
	add_round_key(state, s->words);
   2dd1a:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2dd1c:	6833      	ldr	r3, [r6, #0]
   2dd1e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2dd22:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2dd26:	f88d 2010 	strb.w	r2, [sp, #16]
   2dd2a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2dd2e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   2dd32:	404a      	eors	r2, r1
   2dd34:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2dd38:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2dd3c:	f89d 1012 	ldrb.w	r1, [sp, #18]
   2dd40:	404a      	eors	r2, r1
   2dd42:	f88d 2012 	strb.w	r2, [sp, #18]
   2dd46:	b2db      	uxtb	r3, r3
   2dd48:	f89d 2013 	ldrb.w	r2, [sp, #19]
   2dd4c:	4053      	eors	r3, r2
   2dd4e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2dd52:	6873      	ldr	r3, [r6, #4]
   2dd54:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2dd58:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2dd5c:	f88d 2014 	strb.w	r2, [sp, #20]
   2dd60:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2dd64:	f89d 1015 	ldrb.w	r1, [sp, #21]
   2dd68:	404a      	eors	r2, r1
   2dd6a:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2dd6e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2dd72:	f89d 1016 	ldrb.w	r1, [sp, #22]
   2dd76:	404a      	eors	r2, r1
   2dd78:	f88d 2016 	strb.w	r2, [sp, #22]
   2dd7c:	b2db      	uxtb	r3, r3
   2dd7e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2dd82:	4053      	eors	r3, r2
   2dd84:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2dd88:	68b3      	ldr	r3, [r6, #8]
   2dd8a:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2dd8e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2dd92:	f88d 2018 	strb.w	r2, [sp, #24]
   2dd96:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2dd9a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   2dd9e:	404a      	eors	r2, r1
   2dda0:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2dda4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2dda8:	f89d 101a 	ldrb.w	r1, [sp, #26]
   2ddac:	404a      	eors	r2, r1
   2ddae:	f88d 201a 	strb.w	r2, [sp, #26]
   2ddb2:	b2db      	uxtb	r3, r3
   2ddb4:	f89d 201b 	ldrb.w	r2, [sp, #27]
   2ddb8:	4053      	eors	r3, r2
   2ddba:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2ddbe:	68f3      	ldr	r3, [r6, #12]
   2ddc0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2ddc4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2ddc8:	f88d 201c 	strb.w	r2, [sp, #28]
   2ddcc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2ddd0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2ddd4:	404a      	eors	r2, r1
   2ddd6:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2ddda:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2ddde:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2dde2:	404a      	eors	r2, r1
   2dde4:	f88d 201e 	strb.w	r2, [sp, #30]
   2dde8:	b2db      	uxtb	r3, r3
   2ddea:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2ddee:	4053      	eors	r3, r2
   2ddf0:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   2ddf4:	2400      	movs	r4, #0
}
   2ddf6:	e239      	b.n	2e26c <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2ddf8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2ddfc:	f88d 3000 	strb.w	r3, [sp]
   2de00:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2de04:	f88d 3001 	strb.w	r3, [sp, #1]
   2de08:	f89d 301a 	ldrb.w	r3, [sp, #26]
   2de0c:	f88d 3002 	strb.w	r3, [sp, #2]
   2de10:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2de14:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2de18:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2de1c:	f88d 3004 	strb.w	r3, [sp, #4]
   2de20:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2de24:	f88d 3005 	strb.w	r3, [sp, #5]
   2de28:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2de2c:	f88d 3006 	strb.w	r3, [sp, #6]
   2de30:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2de34:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2de38:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2de3c:	f88d 3008 	strb.w	r3, [sp, #8]
   2de40:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2de44:	f88d 3009 	strb.w	r3, [sp, #9]
   2de48:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2de4c:	f88d 300a 	strb.w	r3, [sp, #10]
   2de50:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2de54:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2de58:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2de5c:	f88d 300c 	strb.w	r3, [sp, #12]
   2de60:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2de64:	f88d 300d 	strb.w	r3, [sp, #13]
   2de68:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2de6c:	f88d 300e 	strb.w	r3, [sp, #14]
   2de70:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2de74:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2de78:	2310      	movs	r3, #16
   2de7a:	466a      	mov	r2, sp
   2de7c:	4619      	mov	r1, r3
   2de7e:	eb0d 0003 	add.w	r0, sp, r3
   2de82:	f000 fadb 	bl	2e43c <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2de86:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2de8a:	f000 fae8 	bl	2e45e <_double_byte>
   2de8e:	4680      	mov	r8, r0
   2de90:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2de94:	f000 fae3 	bl	2e45e <_double_byte>
   2de98:	4601      	mov	r1, r0
   2de9a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2de9e:	f89d 2012 	ldrb.w	r2, [sp, #18]
   2dea2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2dea6:	4041      	eors	r1, r0
   2dea8:	ea88 0801 	eor.w	r8, r8, r1
   2deac:	ea82 0208 	eor.w	r2, r2, r8
   2deb0:	4053      	eors	r3, r2
   2deb2:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2deb6:	f89d 8010 	ldrb.w	r8, [sp, #16]
   2deba:	f000 fad0 	bl	2e45e <_double_byte>
   2debe:	ea88 0800 	eor.w	r8, r8, r0
   2dec2:	fa5f f888 	uxtb.w	r8, r8
   2dec6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2deca:	f000 fac8 	bl	2e45e <_double_byte>
   2dece:	4602      	mov	r2, r0
   2ded0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2ded4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2ded8:	4042      	eors	r2, r0
   2deda:	ea88 0802 	eor.w	r8, r8, r2
   2dede:	ea83 0308 	eor.w	r3, r3, r8
   2dee2:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2dee6:	f89d 8010 	ldrb.w	r8, [sp, #16]
   2deea:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2deee:	ea88 0803 	eor.w	r8, r8, r3
   2def2:	f000 fab4 	bl	2e45e <_double_byte>
   2def6:	ea88 0800 	eor.w	r8, r8, r0
   2defa:	fa5f f888 	uxtb.w	r8, r8
   2defe:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2df02:	f000 faac 	bl	2e45e <_double_byte>
   2df06:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2df0a:	4058      	eors	r0, r3
   2df0c:	ea88 0800 	eor.w	r8, r8, r0
   2df10:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2df14:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2df18:	f000 faa1 	bl	2e45e <_double_byte>
   2df1c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2df20:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2df24:	f89d 8012 	ldrb.w	r8, [sp, #18]
   2df28:	4050      	eors	r0, r2
   2df2a:	4043      	eors	r3, r0
   2df2c:	ea88 0803 	eor.w	r8, r8, r3
   2df30:	fa5f f888 	uxtb.w	r8, r8
   2df34:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2df38:	f000 fa91 	bl	2e45e <_double_byte>
   2df3c:	ea88 0800 	eor.w	r8, r8, r0
   2df40:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2df44:	f89d 0014 	ldrb.w	r0, [sp, #20]
   2df48:	f000 fa89 	bl	2e45e <_double_byte>
   2df4c:	4680      	mov	r8, r0
   2df4e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2df52:	f000 fa84 	bl	2e45e <_double_byte>
   2df56:	4601      	mov	r1, r0
   2df58:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2df5c:	f89d 2016 	ldrb.w	r2, [sp, #22]
   2df60:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2df64:	4041      	eors	r1, r0
   2df66:	ea88 0801 	eor.w	r8, r8, r1
   2df6a:	ea82 0208 	eor.w	r2, r2, r8
   2df6e:	4053      	eors	r3, r2
   2df70:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2df74:	f89d 8014 	ldrb.w	r8, [sp, #20]
   2df78:	f000 fa71 	bl	2e45e <_double_byte>
   2df7c:	ea88 0800 	eor.w	r8, r8, r0
   2df80:	fa5f f888 	uxtb.w	r8, r8
   2df84:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2df88:	f000 fa69 	bl	2e45e <_double_byte>
   2df8c:	4602      	mov	r2, r0
   2df8e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2df92:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2df96:	4042      	eors	r2, r0
   2df98:	ea88 0802 	eor.w	r8, r8, r2
   2df9c:	ea83 0308 	eor.w	r3, r3, r8
   2dfa0:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2dfa4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   2dfa8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2dfac:	ea88 0803 	eor.w	r8, r8, r3
   2dfb0:	f000 fa55 	bl	2e45e <_double_byte>
   2dfb4:	ea88 0800 	eor.w	r8, r8, r0
   2dfb8:	fa5f f888 	uxtb.w	r8, r8
   2dfbc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2dfc0:	f000 fa4d 	bl	2e45e <_double_byte>
   2dfc4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2dfc8:	4058      	eors	r0, r3
   2dfca:	ea88 0800 	eor.w	r8, r8, r0
   2dfce:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2dfd2:	f89d 0014 	ldrb.w	r0, [sp, #20]
   2dfd6:	f000 fa42 	bl	2e45e <_double_byte>
   2dfda:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2dfde:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2dfe2:	f89d 8016 	ldrb.w	r8, [sp, #22]
   2dfe6:	4050      	eors	r0, r2
   2dfe8:	4043      	eors	r3, r0
   2dfea:	ea88 0803 	eor.w	r8, r8, r3
   2dfee:	fa5f f888 	uxtb.w	r8, r8
   2dff2:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2dff6:	f000 fa32 	bl	2e45e <_double_byte>
   2dffa:	ea88 0800 	eor.w	r8, r8, r0
   2dffe:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2e002:	f89d 0018 	ldrb.w	r0, [sp, #24]
   2e006:	f000 fa2a 	bl	2e45e <_double_byte>
   2e00a:	4680      	mov	r8, r0
   2e00c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2e010:	f000 fa25 	bl	2e45e <_double_byte>
   2e014:	4601      	mov	r1, r0
   2e016:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2e01a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2e01e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2e022:	4041      	eors	r1, r0
   2e024:	ea88 0801 	eor.w	r8, r8, r1
   2e028:	ea82 0208 	eor.w	r2, r2, r8
   2e02c:	4053      	eors	r3, r2
   2e02e:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2e032:	f89d 8018 	ldrb.w	r8, [sp, #24]
   2e036:	f000 fa12 	bl	2e45e <_double_byte>
   2e03a:	ea88 0800 	eor.w	r8, r8, r0
   2e03e:	fa5f f888 	uxtb.w	r8, r8
   2e042:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2e046:	f000 fa0a 	bl	2e45e <_double_byte>
   2e04a:	4602      	mov	r2, r0
   2e04c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2e050:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2e054:	4042      	eors	r2, r0
   2e056:	ea88 0802 	eor.w	r8, r8, r2
   2e05a:	ea83 0308 	eor.w	r3, r3, r8
   2e05e:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2e062:	f89d 8018 	ldrb.w	r8, [sp, #24]
   2e066:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2e06a:	ea88 0803 	eor.w	r8, r8, r3
   2e06e:	f000 f9f6 	bl	2e45e <_double_byte>
   2e072:	ea88 0800 	eor.w	r8, r8, r0
   2e076:	fa5f f888 	uxtb.w	r8, r8
   2e07a:	f89d 001b 	ldrb.w	r0, [sp, #27]
   2e07e:	f000 f9ee 	bl	2e45e <_double_byte>
   2e082:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2e086:	4058      	eors	r0, r3
   2e088:	ea88 0800 	eor.w	r8, r8, r0
   2e08c:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2e090:	f89d 0018 	ldrb.w	r0, [sp, #24]
   2e094:	f000 f9e3 	bl	2e45e <_double_byte>
   2e098:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2e09c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2e0a0:	f89d 801a 	ldrb.w	r8, [sp, #26]
   2e0a4:	4050      	eors	r0, r2
   2e0a6:	4043      	eors	r3, r0
   2e0a8:	ea88 0803 	eor.w	r8, r8, r3
   2e0ac:	fa5f f888 	uxtb.w	r8, r8
   2e0b0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   2e0b4:	f000 f9d3 	bl	2e45e <_double_byte>
   2e0b8:	ea88 0800 	eor.w	r8, r8, r0
   2e0bc:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2e0c0:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2e0c4:	f000 f9cb 	bl	2e45e <_double_byte>
   2e0c8:	4680      	mov	r8, r0
   2e0ca:	f89d 001d 	ldrb.w	r0, [sp, #29]
   2e0ce:	f000 f9c6 	bl	2e45e <_double_byte>
   2e0d2:	4601      	mov	r1, r0
   2e0d4:	f89d 001d 	ldrb.w	r0, [sp, #29]
   2e0d8:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2e0dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2e0e0:	4041      	eors	r1, r0
   2e0e2:	ea88 0801 	eor.w	r8, r8, r1
   2e0e6:	ea82 0208 	eor.w	r2, r2, r8
   2e0ea:	4053      	eors	r3, r2
   2e0ec:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2e0f0:	f89d 801c 	ldrb.w	r8, [sp, #28]
   2e0f4:	f000 f9b3 	bl	2e45e <_double_byte>
   2e0f8:	ea88 0800 	eor.w	r8, r8, r0
   2e0fc:	fa5f f888 	uxtb.w	r8, r8
   2e100:	f89d 001e 	ldrb.w	r0, [sp, #30]
   2e104:	f000 f9ab 	bl	2e45e <_double_byte>
   2e108:	4602      	mov	r2, r0
   2e10a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   2e10e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2e112:	4042      	eors	r2, r0
   2e114:	ea88 0802 	eor.w	r8, r8, r2
   2e118:	ea83 0308 	eor.w	r3, r3, r8
   2e11c:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2e120:	f89d 801c 	ldrb.w	r8, [sp, #28]
   2e124:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2e128:	ea88 0803 	eor.w	r8, r8, r3
   2e12c:	f000 f997 	bl	2e45e <_double_byte>
   2e130:	ea88 0800 	eor.w	r8, r8, r0
   2e134:	fa5f f888 	uxtb.w	r8, r8
   2e138:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2e13c:	f000 f98f 	bl	2e45e <_double_byte>
   2e140:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2e144:	4058      	eors	r0, r3
   2e146:	ea88 0800 	eor.w	r8, r8, r0
   2e14a:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2e14e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2e152:	f000 f984 	bl	2e45e <_double_byte>
   2e156:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2e15a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2e15e:	f89d 801e 	ldrb.w	r8, [sp, #30]
   2e162:	4050      	eors	r0, r2
   2e164:	4043      	eors	r3, r0
   2e166:	ea88 0803 	eor.w	r8, r8, r3
   2e16a:	fa5f f888 	uxtb.w	r8, r8
   2e16e:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2e172:	f000 f974 	bl	2e45e <_double_byte>
   2e176:	ea88 0800 	eor.w	r8, r8, r0
   2e17a:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2e17e:	2310      	movs	r3, #16
   2e180:	466a      	mov	r2, sp
   2e182:	4619      	mov	r1, r3
   2e184:	eb0d 0003 	add.w	r0, sp, r3
   2e188:	f000 f958 	bl	2e43c <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2e18c:	3401      	adds	r4, #1
   2e18e:	0123      	lsls	r3, r4, #4
   2e190:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2e194:	58eb      	ldr	r3, [r5, r3]
   2e196:	f89d 1010 	ldrb.w	r1, [sp, #16]
   2e19a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2e19e:	f88d 1010 	strb.w	r1, [sp, #16]
   2e1a2:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2e1a6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2e1aa:	4041      	eors	r1, r0
   2e1ac:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2e1b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2e1b4:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2e1b8:	4041      	eors	r1, r0
   2e1ba:	f88d 1012 	strb.w	r1, [sp, #18]
   2e1be:	b2db      	uxtb	r3, r3
   2e1c0:	f89d 1013 	ldrb.w	r1, [sp, #19]
   2e1c4:	404b      	eors	r3, r1
   2e1c6:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2e1ca:	6853      	ldr	r3, [r2, #4]
   2e1cc:	f89d 1014 	ldrb.w	r1, [sp, #20]
   2e1d0:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2e1d4:	f88d 1014 	strb.w	r1, [sp, #20]
   2e1d8:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2e1dc:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2e1e0:	4041      	eors	r1, r0
   2e1e2:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2e1e6:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2e1ea:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2e1ee:	4041      	eors	r1, r0
   2e1f0:	f88d 1016 	strb.w	r1, [sp, #22]
   2e1f4:	b2db      	uxtb	r3, r3
   2e1f6:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2e1fa:	404b      	eors	r3, r1
   2e1fc:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2e200:	6893      	ldr	r3, [r2, #8]
   2e202:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2e206:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2e20a:	f88d 1018 	strb.w	r1, [sp, #24]
   2e20e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2e212:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2e216:	4041      	eors	r1, r0
   2e218:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2e21c:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2e220:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2e224:	4041      	eors	r1, r0
   2e226:	f88d 101a 	strb.w	r1, [sp, #26]
   2e22a:	b2db      	uxtb	r3, r3
   2e22c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   2e230:	404b      	eors	r3, r1
   2e232:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2e236:	68d3      	ldr	r3, [r2, #12]
   2e238:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2e23c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2e240:	f88d 201c 	strb.w	r2, [sp, #28]
   2e244:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2e248:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2e24c:	404a      	eors	r2, r1
   2e24e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2e252:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2e256:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2e25a:	404a      	eors	r2, r1
   2e25c:	f88d 201e 	strb.w	r2, [sp, #30]
   2e260:	b2db      	uxtb	r3, r3
   2e262:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2e266:	4053      	eors	r3, r2
   2e268:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   2e26c:	2c08      	cmp	r4, #8
   2e26e:	d80a      	bhi.n	2e286 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   2e270:	2300      	movs	r3, #0
   2e272:	2b0f      	cmp	r3, #15
   2e274:	f63f adc0 	bhi.w	2ddf8 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   2e278:	a904      	add	r1, sp, #16
   2e27a:	5cc8      	ldrb	r0, [r1, r3]
   2e27c:	4a6e      	ldr	r2, [pc, #440]	; (2e438 <tc_aes_encrypt+0x748>)
   2e27e:	5c10      	ldrb	r0, [r2, r0]
   2e280:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   2e282:	3301      	adds	r3, #1
   2e284:	e7f5      	b.n	2e272 <tc_aes_encrypt+0x582>
   2e286:	2300      	movs	r3, #0
   2e288:	e005      	b.n	2e296 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   2e28a:	aa04      	add	r2, sp, #16
   2e28c:	5cd1      	ldrb	r1, [r2, r3]
   2e28e:	486a      	ldr	r0, [pc, #424]	; (2e438 <tc_aes_encrypt+0x748>)
   2e290:	5c41      	ldrb	r1, [r0, r1]
   2e292:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   2e294:	3301      	adds	r3, #1
   2e296:	2b0f      	cmp	r3, #15
   2e298:	d9f7      	bls.n	2e28a <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2e29a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2e29e:	f88d 3000 	strb.w	r3, [sp]
   2e2a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2e2a6:	f88d 3001 	strb.w	r3, [sp, #1]
   2e2aa:	f89d 301a 	ldrb.w	r3, [sp, #26]
   2e2ae:	f88d 3002 	strb.w	r3, [sp, #2]
   2e2b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2e2b6:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2e2ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2e2be:	f88d 3004 	strb.w	r3, [sp, #4]
   2e2c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2e2c6:	f88d 3005 	strb.w	r3, [sp, #5]
   2e2ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2e2ce:	f88d 3006 	strb.w	r3, [sp, #6]
   2e2d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2e2d6:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2e2da:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2e2de:	f88d 3008 	strb.w	r3, [sp, #8]
   2e2e2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2e2e6:	f88d 3009 	strb.w	r3, [sp, #9]
   2e2ea:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2e2ee:	f88d 300a 	strb.w	r3, [sp, #10]
   2e2f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2e2f6:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2e2fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2e2fe:	f88d 300c 	strb.w	r3, [sp, #12]
   2e302:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2e306:	f88d 300d 	strb.w	r3, [sp, #13]
   2e30a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2e30e:	f88d 300e 	strb.w	r3, [sp, #14]
   2e312:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2e316:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2e31a:	2310      	movs	r3, #16
   2e31c:	466a      	mov	r2, sp
   2e31e:	4619      	mov	r1, r3
   2e320:	eb0d 0003 	add.w	r0, sp, r3
   2e324:	f000 f88a 	bl	2e43c <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   2e328:	1c63      	adds	r3, r4, #1
   2e32a:	011a      	lsls	r2, r3, #4
   2e32c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2e330:	58b2      	ldr	r2, [r6, r2]
   2e332:	f89d 1010 	ldrb.w	r1, [sp, #16]
   2e336:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   2e33a:	f88d 1010 	strb.w	r1, [sp, #16]
   2e33e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2e342:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2e346:	4041      	eors	r1, r0
   2e348:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2e34c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2e350:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2e354:	4041      	eors	r1, r0
   2e356:	f88d 1012 	strb.w	r1, [sp, #18]
   2e35a:	b2d2      	uxtb	r2, r2
   2e35c:	f89d 1013 	ldrb.w	r1, [sp, #19]
   2e360:	404a      	eors	r2, r1
   2e362:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2e366:	685a      	ldr	r2, [r3, #4]
   2e368:	f89d 1014 	ldrb.w	r1, [sp, #20]
   2e36c:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   2e370:	f88d 1014 	strb.w	r1, [sp, #20]
   2e374:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2e378:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2e37c:	4041      	eors	r1, r0
   2e37e:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2e382:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2e386:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2e38a:	4041      	eors	r1, r0
   2e38c:	f88d 1016 	strb.w	r1, [sp, #22]
   2e390:	b2d2      	uxtb	r2, r2
   2e392:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2e396:	404a      	eors	r2, r1
   2e398:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2e39c:	689a      	ldr	r2, [r3, #8]
   2e39e:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2e3a2:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   2e3a6:	f88d 1018 	strb.w	r1, [sp, #24]
   2e3aa:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2e3ae:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2e3b2:	4041      	eors	r1, r0
   2e3b4:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2e3b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2e3bc:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2e3c0:	4041      	eors	r1, r0
   2e3c2:	f88d 101a 	strb.w	r1, [sp, #26]
   2e3c6:	b2d2      	uxtb	r2, r2
   2e3c8:	f89d 101b 	ldrb.w	r1, [sp, #27]
   2e3cc:	404a      	eors	r2, r1
   2e3ce:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2e3d2:	68db      	ldr	r3, [r3, #12]
   2e3d4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2e3d8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2e3dc:	f88d 201c 	strb.w	r2, [sp, #28]
   2e3e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2e3e4:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2e3e8:	404a      	eors	r2, r1
   2e3ea:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2e3ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2e3f2:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2e3f6:	404a      	eors	r2, r1
   2e3f8:	f88d 201e 	strb.w	r2, [sp, #30]
   2e3fc:	b2db      	uxtb	r3, r3
   2e3fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2e402:	4053      	eors	r3, r2
   2e404:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2e408:	2310      	movs	r3, #16
   2e40a:	eb0d 0203 	add.w	r2, sp, r3
   2e40e:	4619      	mov	r1, r3
   2e410:	4638      	mov	r0, r7
   2e412:	f000 f813 	bl	2e43c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2e416:	2210      	movs	r2, #16
   2e418:	2100      	movs	r1, #0
   2e41a:	eb0d 0002 	add.w	r0, sp, r2
   2e41e:	f000 f81a 	bl	2e456 <_set>

	return TC_CRYPTO_SUCCESS;
   2e422:	2001      	movs	r0, #1
}
   2e424:	b008      	add	sp, #32
   2e426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2e42a:	2000      	movs	r0, #0
}
   2e42c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2e42e:	2000      	movs	r0, #0
   2e430:	e7f8      	b.n	2e424 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   2e432:	2000      	movs	r0, #0
   2e434:	e7f6      	b.n	2e424 <tc_aes_encrypt+0x734>
   2e436:	bf00      	nop
   2e438:	00035168 	.word	0x00035168

0002e43c <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2e43c:	428b      	cmp	r3, r1
   2e43e:	d901      	bls.n	2e444 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   2e440:	2000      	movs	r0, #0
	}
}
   2e442:	4770      	bx	lr
{
   2e444:	b538      	push	{r3, r4, r5, lr}
   2e446:	4615      	mov	r5, r2
   2e448:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2e44a:	461a      	mov	r2, r3
   2e44c:	4629      	mov	r1, r5
   2e44e:	f7e8 fb2d 	bl	16aac <memcpy>
		return from_len;
   2e452:	4620      	mov	r0, r4
}
   2e454:	bd38      	pop	{r3, r4, r5, pc}

0002e456 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2e456:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2e458:	f7e8 fb4d 	bl	16af6 <memset>
}
   2e45c:	bd08      	pop	{r3, pc}

0002e45e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2e45e:	09c3      	lsrs	r3, r0, #7
   2e460:	005a      	lsls	r2, r3, #1
   2e462:	4413      	add	r3, r2
   2e464:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2e468:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2e46c:	b2c0      	uxtb	r0, r0
   2e46e:	4770      	bx	lr

0002e470 <base64_encode>:
    return -1;
}

int
base64_encode(const void *data, int size, char *s, uint8_t should_pad)
{
   2e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e472:	4616      	mov	r6, r2
    int c;
    const unsigned char *q;
    char *last;
    int diff;

    p = s;
   2e474:	4615      	mov	r5, r2

    q = (const unsigned char *) data;
    last = NULL;
   2e476:	2400      	movs	r4, #0
    i = 0;
   2e478:	4622      	mov	r2, r4
    while (i < size) {
   2e47a:	e019      	b.n	2e4b0 <base64_encode+0x40>
            c += q[i];
        i++;
        c *= 256;
        if (i < size)
            c += q[i];
        i++;
   2e47c:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   2e47e:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   2e482:	4f1d      	ldr	r7, [pc, #116]	; (2e4f8 <base64_encode+0x88>)
   2e484:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2e488:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   2e48c:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   2e490:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2e494:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   2e498:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   2e49c:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2e4a0:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   2e4a4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2e4a8:	5d3c      	ldrb	r4, [r7, r4]
   2e4aa:	70ec      	strb	r4, [r5, #3]
        last = p;
   2e4ac:	462c      	mov	r4, r5
        p += 4;
   2e4ae:	3504      	adds	r5, #4
    while (i < size) {
   2e4b0:	428a      	cmp	r2, r1
   2e4b2:	da0d      	bge.n	2e4d0 <base64_encode+0x60>
        c = q[i++];
   2e4b4:	1c57      	adds	r7, r2, #1
   2e4b6:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   2e4b8:	0224      	lsls	r4, r4, #8
        if (i < size)
   2e4ba:	42b9      	cmp	r1, r7
   2e4bc:	dd01      	ble.n	2e4c2 <base64_encode+0x52>
            c += q[i];
   2e4be:	5dc7      	ldrb	r7, [r0, r7]
   2e4c0:	443c      	add	r4, r7
        i++;
   2e4c2:	1c97      	adds	r7, r2, #2
        c *= 256;
   2e4c4:	0224      	lsls	r4, r4, #8
        if (i < size)
   2e4c6:	42b9      	cmp	r1, r7
   2e4c8:	ddd8      	ble.n	2e47c <base64_encode+0xc>
            c += q[i];
   2e4ca:	5dc7      	ldrb	r7, [r0, r7]
   2e4cc:	443c      	add	r4, r7
   2e4ce:	e7d5      	b.n	2e47c <base64_encode+0xc>
    }

    if (last) {
   2e4d0:	b134      	cbz	r4, 2e4e0 <base64_encode+0x70>
        diff = i - size;
   2e4d2:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   2e4d4:	2a00      	cmp	r2, #0
   2e4d6:	dd03      	ble.n	2e4e0 <base64_encode+0x70>
            if (should_pad) {
   2e4d8:	b933      	cbnz	r3, 2e4e8 <base64_encode+0x78>
                memset(last + (4 - diff), '=', diff);
            } else {
                p = last + (4 - diff);
   2e4da:	f1c2 0304 	rsb	r3, r2, #4
   2e4de:	18e5      	adds	r5, r4, r3
            }
        }
    }

    *p = 0;
   2e4e0:	2300      	movs	r3, #0
   2e4e2:	702b      	strb	r3, [r5, #0]

    return (p - s);
}
   2e4e4:	1ba8      	subs	r0, r5, r6
   2e4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   2e4e8:	f1c2 0004 	rsb	r0, r2, #4
   2e4ec:	213d      	movs	r1, #61	; 0x3d
   2e4ee:	4420      	add	r0, r4
   2e4f0:	f7e8 fb01 	bl	16af6 <memset>
   2e4f4:	e7f4      	b.n	2e4e0 <base64_encode+0x70>
   2e4f6:	bf00      	nop
   2e4f8:	00035268 	.word	0x00035268

0002e4fc <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   2e4fc:	69c3      	ldr	r3, [r0, #28]
}
   2e4fe:	5c58      	ldrb	r0, [r3, r1]
   2e500:	4770      	bx	lr

0002e502 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   2e502:	b510      	push	{r4, lr}
   2e504:	4604      	mov	r4, r0
   2e506:	4608      	mov	r0, r1
   2e508:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   2e50a:	69e4      	ldr	r4, [r4, #28]
   2e50c:	461a      	mov	r2, r3
   2e50e:	4421      	add	r1, r4
   2e510:	f7e8 facc 	bl	16aac <memcpy>
}
   2e514:	bd10      	pop	{r4, pc}

0002e516 <cbor_buf_reader_cmp>:
{
   2e516:	b510      	push	{r4, lr}
   2e518:	4604      	mov	r4, r0
   2e51a:	4608      	mov	r0, r1
   2e51c:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   2e51e:	69e4      	ldr	r4, [r4, #28]
   2e520:	461a      	mov	r2, r3
   2e522:	4421      	add	r1, r4
   2e524:	f7e8 fa9e 	bl	16a64 <memcmp>
}
   2e528:	fab0 f080 	clz	r0, r0
   2e52c:	0940      	lsrs	r0, r0, #5
   2e52e:	bd10      	pop	{r4, pc}

0002e530 <cbuf_buf_reader_get64>:
{
   2e530:	b410      	push	{r4}
   2e532:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   2e534:	69c2      	ldr	r2, [r0, #28]
   2e536:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   2e538:	466b      	mov	r3, sp
   2e53a:	5850      	ldr	r0, [r2, r1]
   2e53c:	6861      	ldr	r1, [r4, #4]
   2e53e:	c303      	stmia	r3!, {r0, r1}
}
   2e540:	ba08      	rev	r0, r1
   2e542:	9900      	ldr	r1, [sp, #0]
   2e544:	ba09      	rev	r1, r1
   2e546:	b003      	add	sp, #12
   2e548:	bc10      	pop	{r4}
   2e54a:	4770      	bx	lr

0002e54c <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   2e54c:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   2e54e:	5858      	ldr	r0, [r3, r1]
}
   2e550:	ba00      	rev	r0, r0
   2e552:	4770      	bx	lr

0002e554 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   2e554:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   2e556:	5a58      	ldrh	r0, [r3, r1]
   2e558:	ba40      	rev16	r0, r0
}
   2e55a:	b280      	uxth	r0, r0
   2e55c:	4770      	bx	lr
	...

0002e560 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   2e560:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   2e562:	4b07      	ldr	r3, [pc, #28]	; (2e580 <cbor_buf_reader_init+0x20>)
   2e564:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   2e566:	4b07      	ldr	r3, [pc, #28]	; (2e584 <cbor_buf_reader_init+0x24>)
   2e568:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   2e56a:	4b07      	ldr	r3, [pc, #28]	; (2e588 <cbor_buf_reader_init+0x28>)
   2e56c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   2e56e:	4b07      	ldr	r3, [pc, #28]	; (2e58c <cbor_buf_reader_init+0x2c>)
   2e570:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   2e572:	4b07      	ldr	r3, [pc, #28]	; (2e590 <cbor_buf_reader_init+0x30>)
   2e574:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   2e576:	4b07      	ldr	r3, [pc, #28]	; (2e594 <cbor_buf_reader_init+0x34>)
   2e578:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   2e57a:	6182      	str	r2, [r0, #24]
}
   2e57c:	4770      	bx	lr
   2e57e:	bf00      	nop
   2e580:	0002e4fd 	.word	0x0002e4fd
   2e584:	0002e555 	.word	0x0002e555
   2e588:	0002e54d 	.word	0x0002e54d
   2e58c:	0002e531 	.word	0x0002e531
   2e590:	0002e517 	.word	0x0002e517
   2e594:	0002e503 	.word	0x0002e503

0002e598 <cbor_buf_writer>:
    return (remaining < 0);
}

int
cbor_buf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   2e598:	b538      	push	{r3, r4, r5, lr}
   2e59a:	4604      	mov	r4, r0
    ptrdiff_t remaining = (ptrdiff_t)cb->end;
   2e59c:	68c3      	ldr	r3, [r0, #12]
    remaining -= (ptrdiff_t)cb->ptr;
   2e59e:	6880      	ldr	r0, [r0, #8]
   2e5a0:	1a1b      	subs	r3, r3, r0
    remaining -= (ptrdiff_t)len;
   2e5a2:	1a9b      	subs	r3, r3, r2
    struct cbor_buf_writer *cb = (struct cbor_buf_writer *) arg;

    if (would_overflow(cb, len)) {
   2e5a4:	2b00      	cmp	r3, #0
   2e5a6:	db0a      	blt.n	2e5be <cbor_buf_writer+0x26>
   2e5a8:	4615      	mov	r5, r2
        return CborErrorOutOfMemory;
    }

    memcpy(cb->ptr, data, len);
   2e5aa:	f7e8 fa7f 	bl	16aac <memcpy>
    cb->ptr += len;
   2e5ae:	68a3      	ldr	r3, [r4, #8]
   2e5b0:	442b      	add	r3, r5
   2e5b2:	60a3      	str	r3, [r4, #8]
    cb->enc.bytes_written += len;
   2e5b4:	6862      	ldr	r2, [r4, #4]
   2e5b6:	442a      	add	r2, r5
   2e5b8:	6062      	str	r2, [r4, #4]
    return CborNoError;
   2e5ba:	2000      	movs	r0, #0
}
   2e5bc:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   2e5be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2e5c2:	e7fb      	b.n	2e5bc <cbor_buf_writer+0x24>

0002e5c4 <cbor_buf_writer_init>:

void
cbor_buf_writer_init(struct cbor_buf_writer *cb, uint8_t *buffer, size_t size)
{
    cb->ptr = buffer;
   2e5c4:	6081      	str	r1, [r0, #8]
    cb->end = buffer + size;
   2e5c6:	4411      	add	r1, r2
   2e5c8:	60c1      	str	r1, [r0, #12]
    cb->enc.bytes_written = 0;
   2e5ca:	2300      	movs	r3, #0
   2e5cc:	6043      	str	r3, [r0, #4]
    cb->enc.write = cbor_buf_writer;
   2e5ce:	4b01      	ldr	r3, [pc, #4]	; (2e5d4 <cbor_buf_writer_init+0x10>)
   2e5d0:	6003      	str	r3, [r0, #0]
}
   2e5d2:	4770      	bx	lr
   2e5d4:	0002e599 	.word	0x0002e599

0002e5d8 <cbor_buf_writer_buffer_size>:

size_t
cbor_buf_writer_buffer_size(struct cbor_buf_writer *cb, const uint8_t *buffer)
{
    return (size_t)(cb->ptr - buffer);
   2e5d8:	6880      	ldr	r0, [r0, #8]
}
   2e5da:	1a40      	subs	r0, r0, r1
   2e5dc:	4770      	bx	lr

0002e5de <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   2e5de:	b538      	push	{r3, r4, r5, lr}
   2e5e0:	4614      	mov	r4, r2
   2e5e2:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   2e5e4:	69c5      	ldr	r5, [r0, #28]
   2e5e6:	460b      	mov	r3, r1
   2e5e8:	1929      	adds	r1, r5, r4
   2e5ea:	6a00      	ldr	r0, [r0, #32]
   2e5ec:	f7e7 f8e6 	bl	157bc <os_mbuf_copydata>
    if (rc == 0) {
   2e5f0:	b108      	cbz	r0, 2e5f6 <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   2e5f2:	2000      	movs	r0, #0
}
   2e5f4:	bd38      	pop	{r3, r4, r5, pc}
        return true;
   2e5f6:	2001      	movs	r0, #1
   2e5f8:	e7fc      	b.n	2e5f4 <cbor_mbuf_reader_cpy+0x16>

0002e5fa <cbor_mbuf_reader_get8>:
{
   2e5fa:	b510      	push	{r4, lr}
   2e5fc:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2e5fe:	69c4      	ldr	r4, [r0, #28]
   2e600:	f10d 0307 	add.w	r3, sp, #7
   2e604:	2201      	movs	r2, #1
   2e606:	4421      	add	r1, r4
   2e608:	6a00      	ldr	r0, [r0, #32]
   2e60a:	f7e7 f8d7 	bl	157bc <os_mbuf_copydata>
}
   2e60e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e612:	b002      	add	sp, #8
   2e614:	bd10      	pop	{r4, pc}

0002e616 <cbor_mbuf_reader_cmp>:
{
   2e616:	b538      	push	{r3, r4, r5, lr}
   2e618:	4614      	mov	r4, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   2e61a:	69c5      	ldr	r5, [r0, #28]
   2e61c:	460a      	mov	r2, r1
   2e61e:	1929      	adds	r1, r5, r4
   2e620:	6a00      	ldr	r0, [r0, #32]
   2e622:	f7e7 f949 	bl	158b8 <os_mbuf_cmpf>
}
   2e626:	fab0 f080 	clz	r0, r0
   2e62a:	0940      	lsrs	r0, r0, #5
   2e62c:	bd38      	pop	{r3, r4, r5, pc}

0002e62e <cbor_mbuf_reader_get64>:
{
   2e62e:	b510      	push	{r4, lr}
   2e630:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2e632:	69c4      	ldr	r4, [r0, #28]
   2e634:	466b      	mov	r3, sp
   2e636:	2208      	movs	r2, #8
   2e638:	4421      	add	r1, r4
   2e63a:	6a00      	ldr	r0, [r0, #32]
   2e63c:	f7e7 f8be 	bl	157bc <os_mbuf_copydata>
}
   2e640:	9801      	ldr	r0, [sp, #4]
   2e642:	ba00      	rev	r0, r0
   2e644:	9900      	ldr	r1, [sp, #0]
   2e646:	ba09      	rev	r1, r1
   2e648:	b002      	add	sp, #8
   2e64a:	bd10      	pop	{r4, pc}

0002e64c <cbor_mbuf_reader_get32>:
{
   2e64c:	b510      	push	{r4, lr}
   2e64e:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2e650:	69c4      	ldr	r4, [r0, #28]
   2e652:	ab01      	add	r3, sp, #4
   2e654:	2204      	movs	r2, #4
   2e656:	4421      	add	r1, r4
   2e658:	6a00      	ldr	r0, [r0, #32]
   2e65a:	f7e7 f8af 	bl	157bc <os_mbuf_copydata>
}
   2e65e:	9801      	ldr	r0, [sp, #4]
   2e660:	ba00      	rev	r0, r0
   2e662:	b002      	add	sp, #8
   2e664:	bd10      	pop	{r4, pc}

0002e666 <cbor_mbuf_reader_get16>:
{
   2e666:	b510      	push	{r4, lr}
   2e668:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2e66a:	69c4      	ldr	r4, [r0, #28]
   2e66c:	f10d 0306 	add.w	r3, sp, #6
   2e670:	2202      	movs	r2, #2
   2e672:	4421      	add	r1, r4
   2e674:	6a00      	ldr	r0, [r0, #32]
   2e676:	f7e7 f8a1 	bl	157bc <os_mbuf_copydata>
    return cbor_ntohs(val);
   2e67a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2e67e:	ba40      	rev16	r0, r0
}
   2e680:	b280      	uxth	r0, r0
   2e682:	b002      	add	sp, #8
   2e684:	bd10      	pop	{r4, pc}
	...

0002e688 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   2e688:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   2e68a:	4b0f      	ldr	r3, [pc, #60]	; (2e6c8 <cbor_mbuf_reader_init+0x40>)
   2e68c:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   2e68e:	4b0f      	ldr	r3, [pc, #60]	; (2e6cc <cbor_mbuf_reader_init+0x44>)
   2e690:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   2e692:	4b0f      	ldr	r3, [pc, #60]	; (2e6d0 <cbor_mbuf_reader_init+0x48>)
   2e694:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   2e696:	4b0f      	ldr	r3, [pc, #60]	; (2e6d4 <cbor_mbuf_reader_init+0x4c>)
   2e698:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   2e69a:	4b0f      	ldr	r3, [pc, #60]	; (2e6d8 <cbor_mbuf_reader_init+0x50>)
   2e69c:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   2e69e:	4b0f      	ldr	r3, [pc, #60]	; (2e6dc <cbor_mbuf_reader_init+0x54>)
   2e6a0:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   2e6a2:	794b      	ldrb	r3, [r1, #5]
   2e6a4:	2b07      	cmp	r3, #7
   2e6a6:	d905      	bls.n	2e6b4 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   2e6a8:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   2e6aa:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   2e6ac:	8a0b      	ldrh	r3, [r1, #16]
   2e6ae:	1a9a      	subs	r2, r3, r2
   2e6b0:	6182      	str	r2, [r0, #24]
}
   2e6b2:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   2e6b4:	f7e5 ffce 	bl	14654 <hal_debugger_connected>
   2e6b8:	b100      	cbz	r0, 2e6bc <cbor_mbuf_reader_init+0x34>
   2e6ba:	be01      	bkpt	0x0001
   2e6bc:	2300      	movs	r3, #0
   2e6be:	461a      	mov	r2, r3
   2e6c0:	4619      	mov	r1, r3
   2e6c2:	4618      	mov	r0, r3
   2e6c4:	f7e6 fb68 	bl	14d98 <__assert_func>
   2e6c8:	0002e5fb 	.word	0x0002e5fb
   2e6cc:	0002e667 	.word	0x0002e667
   2e6d0:	0002e64d 	.word	0x0002e64d
   2e6d4:	0002e62f 	.word	0x0002e62f
   2e6d8:	0002e617 	.word	0x0002e617
   2e6dc:	0002e5df 	.word	0x0002e5df

0002e6e0 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   2e6e0:	b538      	push	{r3, r4, r5, lr}
   2e6e2:	4604      	mov	r4, r0
   2e6e4:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   2e6e6:	b292      	uxth	r2, r2
   2e6e8:	6880      	ldr	r0, [r0, #8]
   2e6ea:	f7e6 ffd6 	bl	1569a <os_mbuf_append>
    if (rc) {
   2e6ee:	b918      	cbnz	r0, 2e6f8 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   2e6f0:	6862      	ldr	r2, [r4, #4]
   2e6f2:	442a      	add	r2, r5
   2e6f4:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   2e6f6:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   2e6f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2e6fc:	e7fb      	b.n	2e6f6 <cbor_mbuf_writer+0x16>
	...

0002e700 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   2e700:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   2e702:	2300      	movs	r3, #0
   2e704:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   2e706:	4b01      	ldr	r3, [pc, #4]	; (2e70c <cbor_mbuf_writer_init+0xc>)
   2e708:	6003      	str	r3, [r0, #0]
}
   2e70a:	4770      	bx	lr
   2e70c:	0002e6e1 	.word	0x0002e6e1

0002e710 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   2e710:	b5d0      	push	{r4, r6, r7, lr}
   2e712:	b084      	sub	sp, #16
   2e714:	460c      	mov	r4, r1
    CborError err;
    container->writer = encoder->writer;
   2e716:	6801      	ldr	r1, [r0, #0]
   2e718:	6021      	str	r1, [r4, #0]
    ++encoder->added;
   2e71a:	6881      	ldr	r1, [r0, #8]
   2e71c:	3101      	adds	r1, #1
   2e71e:	6081      	str	r1, [r0, #8]
    container->added = 0;
   2e720:	2100      	movs	r1, #0
   2e722:	60a1      	str	r1, [r4, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   2e724:	f003 0120 	and.w	r1, r3, #32
   2e728:	60e1      	str	r1, [r4, #12]

    if (length == CborIndefiniteLength) {
   2e72a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2e72e:	d10d      	bne.n	2e74c <create_container+0x3c>
        container->flags |= CborIteratorFlag_UnknownLength;
   2e730:	f041 0104 	orr.w	r1, r1, #4
   2e734:	60e1      	str	r1, [r4, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   2e736:	331f      	adds	r3, #31
   2e738:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   2e73c:	6820      	ldr	r0, [r4, #0]
   2e73e:	6803      	ldr	r3, [r0, #0]
   2e740:	2201      	movs	r2, #1
   2e742:	4669      	mov	r1, sp
   2e744:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   2e746:	2000      	movs	r0, #0
   2e748:	b004      	add	sp, #16
   2e74a:	bdd0      	pop	{r4, r6, r7, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   2e74c:	4616      	mov	r6, r2
   2e74e:	2700      	movs	r7, #0
    v = cbor_htonll(v);
   2e750:	ba11      	rev	r1, r2
   2e752:	2000      	movs	r0, #0
    memcpy(where, &v, sizeof(v));
   2e754:	9002      	str	r0, [sp, #8]
   2e756:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   2e758:	2a17      	cmp	r2, #23
   2e75a:	d80b      	bhi.n	2e774 <create_container+0x64>
        *bufstart += shiftedMajorType;
   2e75c:	eb03 6311 	add.w	r3, r3, r1, lsr #24
   2e760:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   2e764:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   2e768:	6820      	ldr	r0, [r4, #0]
   2e76a:	6803      	ldr	r3, [r0, #0]
   2e76c:	aa04      	add	r2, sp, #16
   2e76e:	1a52      	subs	r2, r2, r1
   2e770:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   2e772:	e7e8      	b.n	2e746 <create_container+0x36>
        if (ui > 0xffU)
   2e774:	2f00      	cmp	r7, #0
   2e776:	bf08      	it	eq
   2e778:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   2e77c:	d210      	bcs.n	2e7a0 <create_container+0x90>
        unsigned more = 0;
   2e77e:	2200      	movs	r2, #0
        if (ui > 0xffffU)
   2e780:	2f00      	cmp	r7, #0
   2e782:	bf08      	it	eq
   2e784:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   2e788:	d300      	bcc.n	2e78c <create_container+0x7c>
            ++more;
   2e78a:	3201      	adds	r2, #1
        bufstart -= (size_t)1 << more;
   2e78c:	2101      	movs	r1, #1
   2e78e:	fa01 f002 	lsl.w	r0, r1, r2
   2e792:	f10d 010f 	add.w	r1, sp, #15
   2e796:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   2e798:	4413      	add	r3, r2
   2e79a:	3318      	adds	r3, #24
   2e79c:	700b      	strb	r3, [r1, #0]
   2e79e:	e7e3      	b.n	2e768 <create_container+0x58>
            ++more;
   2e7a0:	2201      	movs	r2, #1
   2e7a2:	e7ed      	b.n	2e780 <create_container+0x70>

0002e7a4 <encode_string>:
{
   2e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e7a6:	b085      	sub	sp, #20
   2e7a8:	4605      	mov	r5, r0
   2e7aa:	460c      	mov	r4, r1
   2e7ac:	461e      	mov	r6, r3
    ++encoder->added;
   2e7ae:	68ab      	ldr	r3, [r5, #8]
   2e7b0:	3301      	adds	r3, #1
   2e7b2:	60ab      	str	r3, [r5, #8]
    v = cbor_htonll(v);
   2e7b4:	ba23      	rev	r3, r4
   2e7b6:	2700      	movs	r7, #0
    memcpy(where, &v, sizeof(v));
   2e7b8:	9702      	str	r7, [sp, #8]
   2e7ba:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   2e7bc:	2c17      	cmp	r4, #23
   2e7be:	d811      	bhi.n	2e7e4 <encode_string+0x40>
        *bufstart += shiftedMajorType;
   2e7c0:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   2e7c4:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   2e7c8:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   2e7cc:	6828      	ldr	r0, [r5, #0]
   2e7ce:	6803      	ldr	r3, [r0, #0]
   2e7d0:	aa04      	add	r2, sp, #16
   2e7d2:	1a52      	subs	r2, r2, r1
   2e7d4:	4798      	blx	r3
   2e7d6:	6828      	ldr	r0, [r5, #0]
   2e7d8:	6803      	ldr	r3, [r0, #0]
   2e7da:	4622      	mov	r2, r4
   2e7dc:	4631      	mov	r1, r6
   2e7de:	4798      	blx	r3
}
   2e7e0:	b005      	add	sp, #20
   2e7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e7e4:	4620      	mov	r0, r4
   2e7e6:	2100      	movs	r1, #0
        if (ui > 0xffU)
   2e7e8:	2900      	cmp	r1, #0
   2e7ea:	bf08      	it	eq
   2e7ec:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   2e7f0:	d210      	bcs.n	2e814 <encode_string+0x70>
        unsigned more = 0;
   2e7f2:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   2e7f4:	2900      	cmp	r1, #0
   2e7f6:	bf08      	it	eq
   2e7f8:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   2e7fc:	d300      	bcc.n	2e800 <encode_string+0x5c>
            ++more;
   2e7fe:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   2e800:	2101      	movs	r1, #1
   2e802:	fa01 f003 	lsl.w	r0, r1, r3
   2e806:	f10d 010f 	add.w	r1, sp, #15
   2e80a:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   2e80c:	441a      	add	r2, r3
   2e80e:	3218      	adds	r2, #24
   2e810:	700a      	strb	r2, [r1, #0]
   2e812:	e7db      	b.n	2e7cc <encode_string+0x28>
            ++more;
   2e814:	2301      	movs	r3, #1
   2e816:	e7ed      	b.n	2e7f4 <encode_string+0x50>

0002e818 <cbor_encoder_init>:
    encoder->writer = writer;
   2e818:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   2e81a:	2300      	movs	r3, #0
   2e81c:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   2e81e:	60c2      	str	r2, [r0, #12]
}
   2e820:	4770      	bx	lr

0002e822 <cbor_encode_uint>:
{
   2e822:	b530      	push	{r4, r5, lr}
   2e824:	b085      	sub	sp, #20
   2e826:	4614      	mov	r4, r2
   2e828:	461d      	mov	r5, r3
    ++encoder->added;
   2e82a:	6883      	ldr	r3, [r0, #8]
   2e82c:	3301      	adds	r3, #1
   2e82e:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   2e830:	ba13      	rev	r3, r2
   2e832:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
   2e834:	9202      	str	r2, [sp, #8]
   2e836:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   2e838:	2d00      	cmp	r5, #0
   2e83a:	bf08      	it	eq
   2e83c:	2c18      	cmpeq	r4, #24
   2e83e:	d20c      	bcs.n	2e85a <cbor_encode_uint+0x38>
        *bufstart += shiftedMajorType;
   2e840:	f3c3 6307 	ubfx	r3, r3, #24, #8
   2e844:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   2e848:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   2e84c:	6800      	ldr	r0, [r0, #0]
   2e84e:	6803      	ldr	r3, [r0, #0]
   2e850:	aa04      	add	r2, sp, #16
   2e852:	1a52      	subs	r2, r2, r1
   2e854:	4798      	blx	r3
}
   2e856:	b005      	add	sp, #20
   2e858:	bd30      	pop	{r4, r5, pc}
        if (ui > 0xffU)
   2e85a:	2d00      	cmp	r5, #0
   2e85c:	bf08      	it	eq
   2e85e:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   2e862:	d214      	bcs.n	2e88e <cbor_encode_uint+0x6c>
        unsigned more = 0;
   2e864:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   2e866:	2d00      	cmp	r5, #0
   2e868:	bf08      	it	eq
   2e86a:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   2e86e:	d300      	bcc.n	2e872 <cbor_encode_uint+0x50>
            ++more;
   2e870:	3301      	adds	r3, #1
        if (ui > 0xffffffffU)
   2e872:	2d01      	cmp	r5, #1
   2e874:	bf08      	it	eq
   2e876:	2c00      	cmpeq	r4, #0
   2e878:	d300      	bcc.n	2e87c <cbor_encode_uint+0x5a>
            ++more;
   2e87a:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   2e87c:	2101      	movs	r1, #1
   2e87e:	fa01 f203 	lsl.w	r2, r1, r3
   2e882:	f10d 010f 	add.w	r1, sp, #15
   2e886:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   2e888:	3318      	adds	r3, #24
   2e88a:	700b      	strb	r3, [r1, #0]
   2e88c:	e7de      	b.n	2e84c <cbor_encode_uint+0x2a>
            ++more;
   2e88e:	2301      	movs	r3, #1
   2e890:	e7e9      	b.n	2e866 <cbor_encode_uint+0x44>

0002e892 <cbor_encode_int>:
{
   2e892:	b570      	push	{r4, r5, r6, lr}
   2e894:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   2e896:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   2e898:	b2ce      	uxtb	r6, r1
   2e89a:	f006 0620 	and.w	r6, r6, #32
    ui ^= value;                            /* complement negatives */
   2e89e:	ea82 0401 	eor.w	r4, r2, r1
   2e8a2:	ea83 0501 	eor.w	r5, r3, r1
    ++encoder->added;
   2e8a6:	6883      	ldr	r3, [r0, #8]
   2e8a8:	3301      	adds	r3, #1
   2e8aa:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   2e8ac:	ba23      	rev	r3, r4
   2e8ae:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
   2e8b0:	9202      	str	r2, [sp, #8]
   2e8b2:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   2e8b4:	2d00      	cmp	r5, #0
   2e8b6:	bf08      	it	eq
   2e8b8:	2c18      	cmpeq	r4, #24
   2e8ba:	d20c      	bcs.n	2e8d6 <cbor_encode_int+0x44>
        *bufstart += shiftedMajorType;
   2e8bc:	eb06 6613 	add.w	r6, r6, r3, lsr #24
   2e8c0:	f88d 600f 	strb.w	r6, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   2e8c4:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   2e8c8:	6800      	ldr	r0, [r0, #0]
   2e8ca:	6803      	ldr	r3, [r0, #0]
   2e8cc:	aa04      	add	r2, sp, #16
   2e8ce:	1a52      	subs	r2, r2, r1
   2e8d0:	4798      	blx	r3
}
   2e8d2:	b004      	add	sp, #16
   2e8d4:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   2e8d6:	2d00      	cmp	r5, #0
   2e8d8:	bf08      	it	eq
   2e8da:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   2e8de:	d215      	bcs.n	2e90c <cbor_encode_int+0x7a>
        unsigned more = 0;
   2e8e0:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   2e8e2:	2d00      	cmp	r5, #0
   2e8e4:	bf08      	it	eq
   2e8e6:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   2e8ea:	d300      	bcc.n	2e8ee <cbor_encode_int+0x5c>
            ++more;
   2e8ec:	3301      	adds	r3, #1
        if (ui > 0xffffffffU)
   2e8ee:	2d01      	cmp	r5, #1
   2e8f0:	bf08      	it	eq
   2e8f2:	2c00      	cmpeq	r4, #0
   2e8f4:	d300      	bcc.n	2e8f8 <cbor_encode_int+0x66>
            ++more;
   2e8f6:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   2e8f8:	2101      	movs	r1, #1
   2e8fa:	fa01 f203 	lsl.w	r2, r1, r3
   2e8fe:	f10d 010f 	add.w	r1, sp, #15
   2e902:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   2e904:	441e      	add	r6, r3
   2e906:	3618      	adds	r6, #24
   2e908:	700e      	strb	r6, [r1, #0]
   2e90a:	e7dd      	b.n	2e8c8 <cbor_encode_int+0x36>
            ++more;
   2e90c:	2301      	movs	r3, #1
   2e90e:	e7e8      	b.n	2e8e2 <cbor_encode_int+0x50>

0002e910 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   2e910:	f1a1 0319 	sub.w	r3, r1, #25
   2e914:	b2db      	uxtb	r3, r3
   2e916:	2b06      	cmp	r3, #6
   2e918:	d926      	bls.n	2e968 <cbor_encode_simple_value+0x58>
{
   2e91a:	b530      	push	{r4, r5, lr}
   2e91c:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   2e91e:	b2cc      	uxtb	r4, r1
   2e920:	2500      	movs	r5, #0
    ++encoder->added;
   2e922:	6883      	ldr	r3, [r0, #8]
   2e924:	3301      	adds	r3, #1
   2e926:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   2e928:	ba09      	rev	r1, r1
   2e92a:	2300      	movs	r3, #0
    memcpy(where, &v, sizeof(v));
   2e92c:	9302      	str	r3, [sp, #8]
   2e92e:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   2e930:	2d00      	cmp	r5, #0
   2e932:	bf08      	it	eq
   2e934:	2c18      	cmpeq	r4, #24
   2e936:	d20d      	bcs.n	2e954 <cbor_encode_simple_value+0x44>
        *bufstart += shiftedMajorType;
   2e938:	f3c1 6107 	ubfx	r1, r1, #24, #8
   2e93c:	3920      	subs	r1, #32
   2e93e:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   2e942:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   2e946:	6800      	ldr	r0, [r0, #0]
   2e948:	6803      	ldr	r3, [r0, #0]
   2e94a:	aa04      	add	r2, sp, #16
   2e94c:	1a52      	subs	r2, r2, r1
   2e94e:	4798      	blx	r3
}
   2e950:	b005      	add	sp, #20
   2e952:	bd30      	pop	{r4, r5, pc}
        unsigned more = 0;
   2e954:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   2e956:	2101      	movs	r1, #1
   2e958:	fa01 f203 	lsl.w	r2, r1, r3
   2e95c:	f10d 010f 	add.w	r1, sp, #15
   2e960:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   2e962:	3b08      	subs	r3, #8
   2e964:	700b      	strb	r3, [r1, #0]
   2e966:	e7ee      	b.n	2e946 <cbor_encode_simple_value+0x36>
        return CborErrorIllegalSimpleType;
   2e968:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   2e96c:	4770      	bx	lr

0002e96e <cbor_encode_byte_string>:
{
   2e96e:	b508      	push	{r3, lr}
   2e970:	460b      	mov	r3, r1
   2e972:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   2e974:	2240      	movs	r2, #64	; 0x40
   2e976:	f7ff ff15 	bl	2e7a4 <encode_string>
}
   2e97a:	bd08      	pop	{r3, pc}

0002e97c <cbor_encode_text_string>:
{
   2e97c:	b508      	push	{r3, lr}
   2e97e:	460b      	mov	r3, r1
   2e980:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   2e982:	2260      	movs	r2, #96	; 0x60
   2e984:	f7ff ff0e 	bl	2e7a4 <encode_string>
}
   2e988:	bd08      	pop	{r3, pc}

0002e98a <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   2e98a:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   2e98c:	2380      	movs	r3, #128	; 0x80
   2e98e:	f7ff febf 	bl	2e710 <create_container>
}
   2e992:	bd08      	pop	{r3, pc}

0002e994 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   2e994:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   2e996:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
   2e99a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2e99e:	429c      	cmp	r4, r3
   2e9a0:	d303      	bcc.n	2e9aa <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   2e9a2:	23a0      	movs	r3, #160	; 0xa0
   2e9a4:	f7ff feb4 	bl	2e710 <create_container>
}
   2e9a8:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
   2e9aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2e9ae:	e7fb      	b.n	2e9a8 <cbor_encoder_create_map+0x14>

0002e9b0 <cbor_encoder_create_indef_byte_string>:
 * \a stringEncoder parameters.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_indef_byte_string(CborEncoder *encoder, CborEncoder *stringEncoder)
{
   2e9b0:	b508      	push	{r3, lr}
    return create_container(encoder, stringEncoder, CborIndefiniteLength, ByteStringType << MajorTypeShift);
   2e9b2:	2340      	movs	r3, #64	; 0x40
   2e9b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e9b8:	f7ff feaa 	bl	2e710 <create_container>
}
   2e9bc:	bd08      	pop	{r3, pc}

0002e9be <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   2e9be:	680b      	ldr	r3, [r1, #0]
   2e9c0:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   2e9c2:	68cb      	ldr	r3, [r1, #12]
   2e9c4:	f013 0f04 	tst.w	r3, #4
   2e9c8:	d101      	bne.n	2e9ce <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   2e9ca:	2000      	movs	r0, #0
}
   2e9cc:	4770      	bx	lr
{
   2e9ce:	b500      	push	{lr}
   2e9d0:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   2e9d2:	23ff      	movs	r3, #255	; 0xff
   2e9d4:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   2e9d8:	6800      	ldr	r0, [r0, #0]
   2e9da:	6803      	ldr	r3, [r0, #0]
   2e9dc:	2201      	movs	r2, #1
   2e9de:	f10d 0107 	add.w	r1, sp, #7
   2e9e2:	4798      	blx	r3
}
   2e9e4:	b003      	add	sp, #12
   2e9e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002e9ea <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2e9ea:	2860      	cmp	r0, #96	; 0x60
   2e9ec:	d009      	beq.n	2ea02 <is_fixed_type+0x18>
   2e9ee:	2840      	cmp	r0, #64	; 0x40
   2e9f0:	d009      	beq.n	2ea06 <is_fixed_type+0x1c>
   2e9f2:	2880      	cmp	r0, #128	; 0x80
   2e9f4:	d009      	beq.n	2ea0a <is_fixed_type+0x20>
   2e9f6:	28a0      	cmp	r0, #160	; 0xa0
   2e9f8:	d001      	beq.n	2e9fe <is_fixed_type+0x14>
   2e9fa:	2001      	movs	r0, #1
           type != CborMapType;
}
   2e9fc:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2e9fe:	2000      	movs	r0, #0
   2ea00:	4770      	bx	lr
   2ea02:	2000      	movs	r0, #0
   2ea04:	4770      	bx	lr
   2ea06:	2000      	movs	r0, #0
   2ea08:	4770      	bx	lr
   2ea0a:	2000      	movs	r0, #0
   2ea0c:	4770      	bx	lr

0002ea0e <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   2ea0e:	2001      	movs	r0, #1
   2ea10:	4770      	bx	lr

0002ea12 <preparse_value>:
{
   2ea12:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   2ea14:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   2ea16:	23ff      	movs	r3, #255	; 0xff
   2ea18:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   2ea1a:	6841      	ldr	r1, [r0, #4]
   2ea1c:	686b      	ldr	r3, [r5, #4]
   2ea1e:	4299      	cmp	r1, r3
   2ea20:	f000 808d 	beq.w	2eb3e <preparse_value+0x12c>
   2ea24:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   2ea26:	6828      	ldr	r0, [r5, #0]
   2ea28:	6803      	ldr	r3, [r0, #0]
   2ea2a:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   2ea2c:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   2ea30:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   2ea32:	2300      	movs	r3, #0
   2ea34:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   2ea36:	f000 031f 	and.w	r3, r0, #31
   2ea3a:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   2ea3c:	2b1b      	cmp	r3, #27
   2ea3e:	d91d      	bls.n	2ea7c <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   2ea40:	2b1f      	cmp	r3, #31
   2ea42:	d10b      	bne.n	2ea5c <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   2ea44:	4630      	mov	r0, r6
   2ea46:	f7ff ffd0 	bl	2e9ea <is_fixed_type>
   2ea4a:	f080 0001 	eor.w	r0, r0, #1
   2ea4e:	f010 0fff 	tst.w	r0, #255	; 0xff
   2ea52:	d00b      	beq.n	2ea6c <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   2ea54:	2304      	movs	r3, #4
   2ea56:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   2ea58:	2000      	movs	r0, #0
}
   2ea5a:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   2ea5c:	2ee0      	cmp	r6, #224	; 0xe0
   2ea5e:	d002      	beq.n	2ea66 <preparse_value+0x54>
   2ea60:	f240 1005 	movw	r0, #261	; 0x105
   2ea64:	e7f9      	b.n	2ea5a <preparse_value+0x48>
   2ea66:	f240 1003 	movw	r0, #259	; 0x103
   2ea6a:	e7f6      	b.n	2ea5a <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   2ea6c:	2ee0      	cmp	r6, #224	; 0xe0
   2ea6e:	d002      	beq.n	2ea76 <preparse_value+0x64>
   2ea70:	f240 1005 	movw	r0, #261	; 0x105
   2ea74:	e7f1      	b.n	2ea5a <preparse_value+0x48>
   2ea76:	f44f 7081 	mov.w	r0, #258	; 0x102
   2ea7a:	e7ee      	b.n	2ea5a <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2ea7c:	2b17      	cmp	r3, #23
   2ea7e:	d91a      	bls.n	2eab6 <preparse_value+0xa4>
   2ea80:	f1a3 0118 	sub.w	r1, r3, #24
   2ea84:	2201      	movs	r2, #1
   2ea86:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   2ea88:	3201      	adds	r2, #1
   2ea8a:	6868      	ldr	r0, [r5, #4]
   2ea8c:	6861      	ldr	r1, [r4, #4]
   2ea8e:	1a40      	subs	r0, r0, r1
   2ea90:	4282      	cmp	r2, r0
   2ea92:	d857      	bhi.n	2eb44 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   2ea94:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   2ea96:	2e20      	cmp	r6, #32
   2ea98:	d00f      	beq.n	2eaba <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   2ea9a:	2a07      	cmp	r2, #7
   2ea9c:	d012      	beq.n	2eac4 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   2ea9e:	2b17      	cmp	r3, #23
   2eaa0:	d953      	bls.n	2eb4a <preparse_value+0x138>
    if (descriptor == Value8Bit)
   2eaa2:	2b18      	cmp	r3, #24
   2eaa4:	d03d      	beq.n	2eb22 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   2eaa6:	2b19      	cmp	r3, #25
   2eaa8:	d042      	beq.n	2eb30 <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   2eaaa:	7be3      	ldrb	r3, [r4, #15]
   2eaac:	f043 0301 	orr.w	r3, r3, #1
   2eab0:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   2eab2:	2000      	movs	r0, #0
   2eab4:	e7d1      	b.n	2ea5a <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2eab6:	2200      	movs	r2, #0
   2eab8:	e7e6      	b.n	2ea88 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   2eaba:	2202      	movs	r2, #2
   2eabc:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   2eabe:	2200      	movs	r2, #0
   2eac0:	73a2      	strb	r2, [r4, #14]
   2eac2:	e7ec      	b.n	2ea9e <preparse_value+0x8c>
        switch (descriptor) {
   2eac4:	3b14      	subs	r3, #20
   2eac6:	2b0b      	cmp	r3, #11
   2eac8:	d812      	bhi.n	2eaf0 <preparse_value+0xde>
   2eaca:	e8df f003 	tbb	[pc, r3]
   2eace:	0d06      	.short	0x0d06
   2ead0:	0d130d0d 	.word	0x0d130d0d
   2ead4:	20200b0b 	.word	0x20200b0b
   2ead8:	2020      	.short	0x2020
            it->extra = false;
   2eada:	2300      	movs	r3, #0
   2eadc:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   2eade:	23f5      	movs	r3, #245	; 0xf5
   2eae0:	73a3      	strb	r3, [r4, #14]
            break;
   2eae2:	e005      	b.n	2eaf0 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   2eae4:	2301      	movs	r3, #1
   2eae6:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   2eae8:	6828      	ldr	r0, [r5, #0]
   2eaea:	6803      	ldr	r3, [r0, #0]
   2eaec:	4798      	blx	r3
   2eaee:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   2eaf0:	2000      	movs	r0, #0
   2eaf2:	e7b2      	b.n	2ea5a <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2eaf4:	6828      	ldr	r0, [r5, #0]
   2eaf6:	6803      	ldr	r3, [r0, #0]
   2eaf8:	3101      	adds	r1, #1
   2eafa:	4798      	blx	r3
   2eafc:	b283      	uxth	r3, r0
   2eafe:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   2eb00:	2b1f      	cmp	r3, #31
   2eb02:	d8f5      	bhi.n	2eaf0 <preparse_value+0xde>
                it->type = CborInvalidType;
   2eb04:	23ff      	movs	r3, #255	; 0xff
   2eb06:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   2eb08:	f44f 7083 	mov.w	r0, #262	; 0x106
   2eb0c:	e7a5      	b.n	2ea5a <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   2eb0e:	f7e5 fda1 	bl	14654 <hal_debugger_connected>
   2eb12:	b100      	cbz	r0, 2eb16 <preparse_value+0x104>
   2eb14:	be01      	bkpt	0x0001
   2eb16:	2300      	movs	r3, #0
   2eb18:	461a      	mov	r2, r3
   2eb1a:	4619      	mov	r1, r3
   2eb1c:	4618      	mov	r0, r3
   2eb1e:	f7e6 f93b 	bl	14d98 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   2eb22:	6828      	ldr	r0, [r5, #0]
   2eb24:	6803      	ldr	r3, [r0, #0]
   2eb26:	3101      	adds	r1, #1
   2eb28:	4798      	blx	r3
   2eb2a:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2eb2c:	2000      	movs	r0, #0
   2eb2e:	e794      	b.n	2ea5a <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2eb30:	6828      	ldr	r0, [r5, #0]
   2eb32:	6843      	ldr	r3, [r0, #4]
   2eb34:	3101      	adds	r1, #1
   2eb36:	4798      	blx	r3
   2eb38:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2eb3a:	2000      	movs	r0, #0
   2eb3c:	e78d      	b.n	2ea5a <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2eb3e:	f240 1001 	movw	r0, #257	; 0x101
   2eb42:	e78a      	b.n	2ea5a <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2eb44:	f240 1001 	movw	r0, #257	; 0x101
   2eb48:	e787      	b.n	2ea5a <preparse_value+0x48>
        return CborNoError;
   2eb4a:	2000      	movs	r0, #0
   2eb4c:	e785      	b.n	2ea5a <preparse_value+0x48>

0002eb4e <preparse_next_value>:
{
   2eb4e:	b510      	push	{r4, lr}
   2eb50:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   2eb52:	6880      	ldr	r0, [r0, #8]
   2eb54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2eb58:	d00c      	beq.n	2eb74 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   2eb5a:	7ba2      	ldrb	r2, [r4, #14]
   2eb5c:	2ac0      	cmp	r2, #192	; 0xc0
   2eb5e:	d002      	beq.n	2eb66 <preparse_next_value+0x18>
   2eb60:	3801      	subs	r0, #1
   2eb62:	60a0      	str	r0, [r4, #8]
   2eb64:	b118      	cbz	r0, 2eb6e <preparse_next_value+0x20>
    return preparse_value(it);
   2eb66:	4620      	mov	r0, r4
   2eb68:	f7ff ff53 	bl	2ea12 <preparse_value>
}
   2eb6c:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   2eb6e:	23ff      	movs	r3, #255	; 0xff
   2eb70:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   2eb72:	e7fb      	b.n	2eb6c <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2eb74:	6861      	ldr	r1, [r4, #4]
   2eb76:	6823      	ldr	r3, [r4, #0]
   2eb78:	685a      	ldr	r2, [r3, #4]
   2eb7a:	4291      	cmp	r1, r2
   2eb7c:	d0f3      	beq.n	2eb66 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   2eb7e:	6818      	ldr	r0, [r3, #0]
   2eb80:	6803      	ldr	r3, [r0, #0]
   2eb82:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2eb84:	28ff      	cmp	r0, #255	; 0xff
   2eb86:	d1ee      	bne.n	2eb66 <preparse_next_value+0x18>
        ++it->offset;
   2eb88:	6863      	ldr	r3, [r4, #4]
   2eb8a:	3301      	adds	r3, #1
   2eb8c:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   2eb8e:	23ff      	movs	r3, #255	; 0xff
   2eb90:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   2eb92:	2000      	movs	r0, #0
   2eb94:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   2eb96:	e7e9      	b.n	2eb6c <preparse_next_value+0x1e>

0002eb98 <extract_length>:
{
   2eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2eb9c:	4605      	mov	r5, r0
   2eb9e:	460e      	mov	r6, r1
   2eba0:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2eba2:	6800      	ldr	r0, [r0, #0]
   2eba4:	6803      	ldr	r3, [r0, #0]
   2eba6:	6809      	ldr	r1, [r1, #0]
   2eba8:	4798      	blx	r3
   2ebaa:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   2ebae:	6833      	ldr	r3, [r6, #0]
   2ebb0:	3301      	adds	r3, #1
   2ebb2:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   2ebb4:	2c17      	cmp	r4, #23
   2ebb6:	d91a      	bls.n	2ebee <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   2ebb8:	2c1b      	cmp	r4, #27
   2ebba:	d83a      	bhi.n	2ec32 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2ebbc:	3c18      	subs	r4, #24
   2ebbe:	f04f 0801 	mov.w	r8, #1
   2ebc2:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2ebc6:	686b      	ldr	r3, [r5, #4]
   2ebc8:	6831      	ldr	r1, [r6, #0]
   2ebca:	1a5b      	subs	r3, r3, r1
   2ebcc:	4598      	cmp	r8, r3
   2ebce:	d835      	bhi.n	2ec3c <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   2ebd0:	f1b8 0f01 	cmp.w	r8, #1
   2ebd4:	d00f      	beq.n	2ebf6 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   2ebd6:	f1b8 0f02 	cmp.w	r8, #2
   2ebda:	d01e      	beq.n	2ec1a <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   2ebdc:	f1b8 0f04 	cmp.w	r8, #4
   2ebe0:	d021      	beq.n	2ec26 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   2ebe2:	6828      	ldr	r0, [r5, #0]
   2ebe4:	68c3      	ldr	r3, [r0, #12]
   2ebe6:	4798      	blx	r3
   2ebe8:	4604      	mov	r4, r0
   2ebea:	460d      	mov	r5, r1
   2ebec:	e008      	b.n	2ec00 <extract_length+0x68>
        *len = additional_information;
   2ebee:	b2e4      	uxtb	r4, r4
   2ebf0:	2500      	movs	r5, #0
        return CborNoError;
   2ebf2:	2000      	movs	r0, #0
   2ebf4:	e008      	b.n	2ec08 <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   2ebf6:	6828      	ldr	r0, [r5, #0]
   2ebf8:	6803      	ldr	r3, [r0, #0]
   2ebfa:	4798      	blx	r3
   2ebfc:	4604      	mov	r4, r0
   2ebfe:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   2ec00:	6833      	ldr	r3, [r6, #0]
   2ec02:	4443      	add	r3, r8
   2ec04:	6033      	str	r3, [r6, #0]
    return CborNoError;
   2ec06:	2000      	movs	r0, #0
    if (err) {
   2ec08:	b9e8      	cbnz	r0, 2ec46 <extract_length+0xae>
    *len = v;
   2ec0a:	603c      	str	r4, [r7, #0]
    if (v != *len)
   2ec0c:	2300      	movs	r3, #0
   2ec0e:	42ab      	cmp	r3, r5
   2ec10:	bf08      	it	eq
   2ec12:	42a4      	cmpeq	r4, r4
   2ec14:	d11a      	bne.n	2ec4c <extract_length+0xb4>
}
   2ec16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   2ec1a:	6828      	ldr	r0, [r5, #0]
   2ec1c:	6843      	ldr	r3, [r0, #4]
   2ec1e:	4798      	blx	r3
   2ec20:	4604      	mov	r4, r0
   2ec22:	2500      	movs	r5, #0
   2ec24:	e7ec      	b.n	2ec00 <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   2ec26:	6828      	ldr	r0, [r5, #0]
   2ec28:	6883      	ldr	r3, [r0, #8]
   2ec2a:	4798      	blx	r3
   2ec2c:	4604      	mov	r4, r0
   2ec2e:	2500      	movs	r5, #0
   2ec30:	e7e6      	b.n	2ec00 <extract_length+0x68>
    *len = 1;
   2ec32:	2401      	movs	r4, #1
   2ec34:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   2ec36:	f240 1005 	movw	r0, #261	; 0x105
   2ec3a:	e7e5      	b.n	2ec08 <extract_length+0x70>
    *len = 1;
   2ec3c:	2401      	movs	r4, #1
   2ec3e:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   2ec40:	f240 1001 	movw	r0, #257	; 0x101
   2ec44:	e7e0      	b.n	2ec08 <extract_length+0x70>
        *len = 0;
   2ec46:	2300      	movs	r3, #0
   2ec48:	603b      	str	r3, [r7, #0]
        return err;
   2ec4a:	e7e4      	b.n	2ec16 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   2ec4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2ec50:	e7e1      	b.n	2ec16 <extract_length+0x7e>

0002ec52 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   2ec52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ec56:	b085      	sub	sp, #20
   2ec58:	4604      	mov	r4, r0
   2ec5a:	4689      	mov	r9, r1
   2ec5c:	4616      	mov	r6, r2
   2ec5e:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   2ec60:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2ec62:	2b40      	cmp	r3, #64	; 0x40
   2ec64:	d001      	beq.n	2ec6a <iterate_string_chunks+0x18>
   2ec66:	2b60      	cmp	r3, #96	; 0x60
   2ec68:	d10c      	bne.n	2ec84 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   2ec6a:	6863      	ldr	r3, [r4, #4]
   2ec6c:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2ec6e:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   2ec70:	f012 0f04 	tst.w	r2, #4
   2ec74:	d010      	beq.n	2ec98 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   2ec76:	3301      	adds	r3, #1
   2ec78:	9302      	str	r3, [sp, #8]
        total = 0;
   2ec7a:	2300      	movs	r3, #0
   2ec7c:	9303      	str	r3, [sp, #12]
        *result = true;
   2ec7e:	2301      	movs	r3, #1
   2ec80:	702b      	strb	r3, [r5, #0]
   2ec82:	e04c      	b.n	2ed1e <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2ec84:	f7e5 fce6 	bl	14654 <hal_debugger_connected>
   2ec88:	b100      	cbz	r0, 2ec8c <iterate_string_chunks+0x3a>
   2ec8a:	be01      	bkpt	0x0001
   2ec8c:	2300      	movs	r3, #0
   2ec8e:	461a      	mov	r2, r3
   2ec90:	4619      	mov	r1, r3
   2ec92:	4618      	mov	r0, r3
   2ec94:	f7e6 f880 	bl	14d98 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   2ec98:	aa03      	add	r2, sp, #12
   2ec9a:	a902      	add	r1, sp, #8
   2ec9c:	6820      	ldr	r0, [r4, #0]
   2ec9e:	f7ff ff7b 	bl	2eb98 <extract_length>
        if (err)
   2eca2:	4603      	mov	r3, r0
   2eca4:	2800      	cmp	r0, #0
   2eca6:	d177      	bne.n	2ed98 <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   2eca8:	6820      	ldr	r0, [r4, #0]
   2ecaa:	6843      	ldr	r3, [r0, #4]
   2ecac:	9a02      	ldr	r2, [sp, #8]
   2ecae:	1a99      	subs	r1, r3, r2
   2ecb0:	9b03      	ldr	r3, [sp, #12]
   2ecb2:	4299      	cmp	r1, r3
   2ecb4:	f0c0 8083 	bcc.w	2edbe <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   2ecb8:	6831      	ldr	r1, [r6, #0]
   2ecba:	428b      	cmp	r3, r1
   2ecbc:	d81e      	bhi.n	2ecfc <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   2ecbe:	4649      	mov	r1, r9
   2ecc0:	6800      	ldr	r0, [r0, #0]
   2ecc2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2ecc4:	47b8      	blx	r7
   2ecc6:	3800      	subs	r0, #0
   2ecc8:	bf18      	it	ne
   2ecca:	2001      	movne	r0, #1
   2eccc:	7028      	strb	r0, [r5, #0]
        offset += total;
   2ecce:	9b02      	ldr	r3, [sp, #8]
   2ecd0:	9a03      	ldr	r2, [sp, #12]
   2ecd2:	4413      	add	r3, r2
   2ecd4:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   2ecd6:	782b      	ldrb	r3, [r5, #0]
   2ecd8:	b14b      	cbz	r3, 2ecee <iterate_string_chunks+0x9c>
   2ecda:	6832      	ldr	r2, [r6, #0]
   2ecdc:	9b03      	ldr	r3, [sp, #12]
   2ecde:	429a      	cmp	r2, r3
   2ece0:	d905      	bls.n	2ecee <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   2ece2:	f1b9 0f00 	cmp.w	r9, #0
   2ece6:	d002      	beq.n	2ecee <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   2ece8:	2200      	movs	r2, #0
   2ecea:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   2ecee:	9b03      	ldr	r3, [sp, #12]
   2ecf0:	6033      	str	r3, [r6, #0]

    if (next) {
   2ecf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ecf4:	2b00      	cmp	r3, #0
   2ecf6:	d156      	bne.n	2eda6 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   2ecf8:	2300      	movs	r3, #0
   2ecfa:	e04d      	b.n	2ed98 <iterate_string_chunks+0x146>
            *result = false;
   2ecfc:	2300      	movs	r3, #0
   2ecfe:	702b      	strb	r3, [r5, #0]
   2ed00:	e7e5      	b.n	2ecce <iterate_string_chunks+0x7c>
                ++offset;
   2ed02:	9b02      	ldr	r3, [sp, #8]
   2ed04:	3301      	adds	r3, #1
   2ed06:	9302      	str	r3, [sp, #8]
                break;
   2ed08:	e7e5      	b.n	2ecd6 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   2ed0a:	2201      	movs	r2, #1
   2ed0c:	e023      	b.n	2ed56 <iterate_string_chunks+0x104>
                *result = false;
   2ed0e:	2300      	movs	r3, #0
   2ed10:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   2ed12:	9b02      	ldr	r3, [sp, #8]
   2ed14:	9a01      	ldr	r2, [sp, #4]
   2ed16:	4413      	add	r3, r2
   2ed18:	9302      	str	r3, [sp, #8]
            total = newTotal;
   2ed1a:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   2ed1e:	6823      	ldr	r3, [r4, #0]
   2ed20:	685a      	ldr	r2, [r3, #4]
   2ed22:	9902      	ldr	r1, [sp, #8]
   2ed24:	428a      	cmp	r2, r1
   2ed26:	d02f      	beq.n	2ed88 <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   2ed28:	6818      	ldr	r0, [r3, #0]
   2ed2a:	6803      	ldr	r3, [r0, #0]
   2ed2c:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   2ed2e:	28ff      	cmp	r0, #255	; 0xff
   2ed30:	d0e7      	beq.n	2ed02 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   2ed32:	f020 001f 	bic.w	r0, r0, #31
   2ed36:	7ba3      	ldrb	r3, [r4, #14]
   2ed38:	4298      	cmp	r0, r3
   2ed3a:	d128      	bne.n	2ed8e <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   2ed3c:	aa01      	add	r2, sp, #4
   2ed3e:	a902      	add	r1, sp, #8
   2ed40:	6820      	ldr	r0, [r4, #0]
   2ed42:	f7ff ff29 	bl	2eb98 <extract_length>
            if (err)
   2ed46:	4603      	mov	r3, r0
   2ed48:	bb30      	cbnz	r0, 2ed98 <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   2ed4a:	9903      	ldr	r1, [sp, #12]
   2ed4c:	9b01      	ldr	r3, [sp, #4]
   2ed4e:	2200      	movs	r2, #0
   2ed50:	eb11 0803 	adds.w	r8, r1, r3
   2ed54:	d2d9      	bcs.n	2ed0a <iterate_string_chunks+0xb8>
   2ed56:	b9ea      	cbnz	r2, 2ed94 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   2ed58:	f8d4 c000 	ldr.w	ip, [r4]
   2ed5c:	f8dc 0004 	ldr.w	r0, [ip, #4]
   2ed60:	9a02      	ldr	r2, [sp, #8]
   2ed62:	1a80      	subs	r0, r0, r2
   2ed64:	4283      	cmp	r3, r0
   2ed66:	d81b      	bhi.n	2eda0 <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   2ed68:	7828      	ldrb	r0, [r5, #0]
   2ed6a:	2800      	cmp	r0, #0
   2ed6c:	d0cf      	beq.n	2ed0e <iterate_string_chunks+0xbc>
   2ed6e:	6830      	ldr	r0, [r6, #0]
   2ed70:	4540      	cmp	r0, r8
   2ed72:	d3cc      	bcc.n	2ed0e <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   2ed74:	4449      	add	r1, r9
   2ed76:	f8dc 0000 	ldr.w	r0, [ip]
   2ed7a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2ed7c:	47b8      	blx	r7
   2ed7e:	3800      	subs	r0, #0
   2ed80:	bf18      	it	ne
   2ed82:	2001      	movne	r0, #1
   2ed84:	7028      	strb	r0, [r5, #0]
   2ed86:	e7c4      	b.n	2ed12 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   2ed88:	f240 1301 	movw	r3, #257	; 0x101
   2ed8c:	e004      	b.n	2ed98 <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   2ed8e:	f44f 7382 	mov.w	r3, #260	; 0x104
   2ed92:	e001      	b.n	2ed98 <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   2ed94:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   2ed98:	4618      	mov	r0, r3
   2ed9a:	b005      	add	sp, #20
   2ed9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   2eda0:	f240 1301 	movw	r3, #257	; 0x101
   2eda4:	e7f8      	b.n	2ed98 <iterate_string_chunks+0x146>
        *next = *value;
   2eda6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2edaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2edac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   2edb0:	9b02      	ldr	r3, [sp, #8]
   2edb2:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   2edb4:	4620      	mov	r0, r4
   2edb6:	f7ff feca 	bl	2eb4e <preparse_next_value>
   2edba:	4603      	mov	r3, r0
   2edbc:	e7ec      	b.n	2ed98 <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   2edbe:	f240 1301 	movw	r3, #257	; 0x101
   2edc2:	e7e9      	b.n	2ed98 <iterate_string_chunks+0x146>

0002edc4 <advance_internal>:
{
   2edc4:	b570      	push	{r4, r5, r6, lr}
   2edc6:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   2edc8:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2edca:	6830      	ldr	r0, [r6, #0]
   2edcc:	6803      	ldr	r3, [r0, #0]
   2edce:	6861      	ldr	r1, [r4, #4]
   2edd0:	4798      	blx	r3
   2edd2:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2edd6:	6863      	ldr	r3, [r4, #4]
   2edd8:	3301      	adds	r3, #1
   2edda:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2eddc:	2817      	cmp	r0, #23
   2edde:	d915      	bls.n	2ee0c <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   2ede0:	281b      	cmp	r0, #27
   2ede2:	d842      	bhi.n	2ee6a <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2ede4:	3818      	subs	r0, #24
   2ede6:	2501      	movs	r5, #1
   2ede8:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2edea:	6873      	ldr	r3, [r6, #4]
   2edec:	6861      	ldr	r1, [r4, #4]
   2edee:	1a5b      	subs	r3, r3, r1
   2edf0:	429d      	cmp	r5, r3
   2edf2:	d83f      	bhi.n	2ee74 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   2edf4:	2d01      	cmp	r5, #1
   2edf6:	d00d      	beq.n	2ee14 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   2edf8:	2d02      	cmp	r5, #2
   2edfa:	d02a      	beq.n	2ee52 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   2edfc:	2d04      	cmp	r5, #4
   2edfe:	d02e      	beq.n	2ee5e <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   2ee00:	6830      	ldr	r0, [r6, #0]
   2ee02:	68c3      	ldr	r3, [r0, #12]
   2ee04:	4798      	blx	r3
   2ee06:	4602      	mov	r2, r0
   2ee08:	460b      	mov	r3, r1
   2ee0a:	e008      	b.n	2ee1e <advance_internal+0x5a>
        *len = additional_information;
   2ee0c:	b2c2      	uxtb	r2, r0
   2ee0e:	2300      	movs	r3, #0
        return CborNoError;
   2ee10:	2100      	movs	r1, #0
   2ee12:	e008      	b.n	2ee26 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   2ee14:	6830      	ldr	r0, [r6, #0]
   2ee16:	6803      	ldr	r3, [r0, #0]
   2ee18:	4798      	blx	r3
   2ee1a:	4602      	mov	r2, r0
   2ee1c:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2ee1e:	6860      	ldr	r0, [r4, #4]
   2ee20:	4428      	add	r0, r5
   2ee22:	6060      	str	r0, [r4, #4]
    return CborNoError;
   2ee24:	2100      	movs	r1, #0
    assert(err == CborNoError);
   2ee26:	bb51      	cbnz	r1, 2ee7e <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   2ee28:	7ba1      	ldrb	r1, [r4, #14]
   2ee2a:	2940      	cmp	r1, #64	; 0x40
   2ee2c:	d001      	beq.n	2ee32 <advance_internal+0x6e>
   2ee2e:	2960      	cmp	r1, #96	; 0x60
   2ee30:	d10b      	bne.n	2ee4a <advance_internal+0x86>
        assert(length == (size_t)length);
   2ee32:	2100      	movs	r1, #0
   2ee34:	4299      	cmp	r1, r3
   2ee36:	bf08      	it	eq
   2ee38:	4292      	cmpeq	r2, r2
   2ee3a:	d12a      	bne.n	2ee92 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2ee3c:	7be3      	ldrb	r3, [r4, #15]
   2ee3e:	f013 0f04 	tst.w	r3, #4
   2ee42:	d130      	bne.n	2eea6 <advance_internal+0xe2>
        it->offset += length;
   2ee44:	6863      	ldr	r3, [r4, #4]
   2ee46:	4413      	add	r3, r2
   2ee48:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   2ee4a:	4620      	mov	r0, r4
   2ee4c:	f7ff fe7f 	bl	2eb4e <preparse_next_value>
}
   2ee50:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   2ee52:	6830      	ldr	r0, [r6, #0]
   2ee54:	6843      	ldr	r3, [r0, #4]
   2ee56:	4798      	blx	r3
   2ee58:	4602      	mov	r2, r0
   2ee5a:	2300      	movs	r3, #0
   2ee5c:	e7df      	b.n	2ee1e <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   2ee5e:	6830      	ldr	r0, [r6, #0]
   2ee60:	6883      	ldr	r3, [r0, #8]
   2ee62:	4798      	blx	r3
   2ee64:	4602      	mov	r2, r0
   2ee66:	2300      	movs	r3, #0
   2ee68:	e7d9      	b.n	2ee1e <advance_internal+0x5a>
    *len = 1;
   2ee6a:	2201      	movs	r2, #1
   2ee6c:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2ee6e:	f240 1105 	movw	r1, #261	; 0x105
   2ee72:	e7d8      	b.n	2ee26 <advance_internal+0x62>
    *len = 1;
   2ee74:	2201      	movs	r2, #1
   2ee76:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2ee78:	f240 1101 	movw	r1, #257	; 0x101
   2ee7c:	e7d3      	b.n	2ee26 <advance_internal+0x62>
    assert(err == CborNoError);
   2ee7e:	f7e5 fbe9 	bl	14654 <hal_debugger_connected>
   2ee82:	b100      	cbz	r0, 2ee86 <advance_internal+0xc2>
   2ee84:	be01      	bkpt	0x0001
   2ee86:	2300      	movs	r3, #0
   2ee88:	461a      	mov	r2, r3
   2ee8a:	4619      	mov	r1, r3
   2ee8c:	4618      	mov	r0, r3
   2ee8e:	f7e5 ff83 	bl	14d98 <__assert_func>
        assert(length == (size_t)length);
   2ee92:	f7e5 fbdf 	bl	14654 <hal_debugger_connected>
   2ee96:	b100      	cbz	r0, 2ee9a <advance_internal+0xd6>
   2ee98:	be01      	bkpt	0x0001
   2ee9a:	2300      	movs	r3, #0
   2ee9c:	461a      	mov	r2, r3
   2ee9e:	4619      	mov	r1, r3
   2eea0:	4618      	mov	r0, r3
   2eea2:	f7e5 ff79 	bl	14d98 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2eea6:	f7e5 fbd5 	bl	14654 <hal_debugger_connected>
   2eeaa:	b100      	cbz	r0, 2eeae <advance_internal+0xea>
   2eeac:	be01      	bkpt	0x0001
   2eeae:	2300      	movs	r3, #0
   2eeb0:	461a      	mov	r2, r3
   2eeb2:	4619      	mov	r1, r3
   2eeb4:	4618      	mov	r0, r3
   2eeb6:	f7e5 ff6f 	bl	14d98 <__assert_func>

0002eeba <_cbor_value_decode_int64_internal>:
{
   2eeba:	b510      	push	{r4, lr}
   2eebc:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2eebe:	6803      	ldr	r3, [r0, #0]
   2eec0:	6818      	ldr	r0, [r3, #0]
   2eec2:	6803      	ldr	r3, [r0, #0]
   2eec4:	6861      	ldr	r1, [r4, #4]
   2eec6:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2eec8:	7be3      	ldrb	r3, [r4, #15]
   2eeca:	f013 0f01 	tst.w	r3, #1
   2eece:	d104      	bne.n	2eeda <_cbor_value_decode_int64_internal+0x20>
   2eed0:	7ba3      	ldrb	r3, [r4, #14]
   2eed2:	2bfa      	cmp	r3, #250	; 0xfa
   2eed4:	d001      	beq.n	2eeda <_cbor_value_decode_int64_internal+0x20>
   2eed6:	2bfb      	cmp	r3, #251	; 0xfb
   2eed8:	d111      	bne.n	2eefe <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2eeda:	f000 031e 	and.w	r3, r0, #30
   2eede:	2b1a      	cmp	r3, #26
   2eee0:	d117      	bne.n	2ef12 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   2eee2:	f010 0f01 	tst.w	r0, #1
   2eee6:	d01e      	beq.n	2ef26 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   2eee8:	f000 001f 	and.w	r0, r0, #31
   2eeec:	281b      	cmp	r0, #27
   2eeee:	d122      	bne.n	2ef36 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   2eef0:	6823      	ldr	r3, [r4, #0]
   2eef2:	6818      	ldr	r0, [r3, #0]
   2eef4:	68c3      	ldr	r3, [r0, #12]
   2eef6:	6861      	ldr	r1, [r4, #4]
   2eef8:	3101      	adds	r1, #1
   2eefa:	4798      	blx	r3
}
   2eefc:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2eefe:	f7e5 fba9 	bl	14654 <hal_debugger_connected>
   2ef02:	b100      	cbz	r0, 2ef06 <_cbor_value_decode_int64_internal+0x4c>
   2ef04:	be01      	bkpt	0x0001
   2ef06:	2300      	movs	r3, #0
   2ef08:	461a      	mov	r2, r3
   2ef0a:	4619      	mov	r1, r3
   2ef0c:	4618      	mov	r0, r3
   2ef0e:	f7e5 ff43 	bl	14d98 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2ef12:	f7e5 fb9f 	bl	14654 <hal_debugger_connected>
   2ef16:	b100      	cbz	r0, 2ef1a <_cbor_value_decode_int64_internal+0x60>
   2ef18:	be01      	bkpt	0x0001
   2ef1a:	2300      	movs	r3, #0
   2ef1c:	461a      	mov	r2, r3
   2ef1e:	4619      	mov	r1, r3
   2ef20:	4618      	mov	r0, r3
   2ef22:	f7e5 ff39 	bl	14d98 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   2ef26:	6823      	ldr	r3, [r4, #0]
   2ef28:	6818      	ldr	r0, [r3, #0]
   2ef2a:	6883      	ldr	r3, [r0, #8]
   2ef2c:	6861      	ldr	r1, [r4, #4]
   2ef2e:	3101      	adds	r1, #1
   2ef30:	4798      	blx	r3
   2ef32:	2100      	movs	r1, #0
   2ef34:	e7e2      	b.n	2eefc <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   2ef36:	f7e5 fb8d 	bl	14654 <hal_debugger_connected>
   2ef3a:	b100      	cbz	r0, 2ef3e <_cbor_value_decode_int64_internal+0x84>
   2ef3c:	be01      	bkpt	0x0001
   2ef3e:	2300      	movs	r3, #0
   2ef40:	461a      	mov	r2, r3
   2ef42:	4619      	mov	r1, r3
   2ef44:	4618      	mov	r0, r3
   2ef46:	f7e5 ff27 	bl	14d98 <__assert_func>

0002ef4a <cbor_parser_init>:
{
   2ef4a:	b510      	push	{r4, lr}
   2ef4c:	4604      	mov	r4, r0
   2ef4e:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   2ef50:	2300      	movs	r3, #0
   2ef52:	6053      	str	r3, [r2, #4]
   2ef54:	6093      	str	r3, [r2, #8]
    parser->d = d;
   2ef56:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   2ef58:	69a4      	ldr	r4, [r4, #24]
   2ef5a:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   2ef5c:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   2ef5e:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   2ef60:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   2ef62:	2301      	movs	r3, #1
   2ef64:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   2ef66:	f7ff fd54 	bl	2ea12 <preparse_value>
}
   2ef6a:	bd10      	pop	{r4, pc}

0002ef6c <cbor_value_advance_fixed>:
{
   2ef6c:	b510      	push	{r4, lr}
   2ef6e:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   2ef70:	7b80      	ldrb	r0, [r0, #14]
   2ef72:	28ff      	cmp	r0, #255	; 0xff
   2ef74:	d008      	beq.n	2ef88 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   2ef76:	f7ff fd38 	bl	2e9ea <is_fixed_type>
   2ef7a:	b178      	cbz	r0, 2ef9c <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   2ef7c:	68a3      	ldr	r3, [r4, #8]
   2ef7e:	b1bb      	cbz	r3, 2efb0 <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   2ef80:	4620      	mov	r0, r4
   2ef82:	f7ff ff1f 	bl	2edc4 <advance_internal>
}
   2ef86:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   2ef88:	f7e5 fb64 	bl	14654 <hal_debugger_connected>
   2ef8c:	b100      	cbz	r0, 2ef90 <cbor_value_advance_fixed+0x24>
   2ef8e:	be01      	bkpt	0x0001
   2ef90:	2300      	movs	r3, #0
   2ef92:	461a      	mov	r2, r3
   2ef94:	4619      	mov	r1, r3
   2ef96:	4618      	mov	r0, r3
   2ef98:	f7e5 fefe 	bl	14d98 <__assert_func>
    assert(is_fixed_type(it->type));
   2ef9c:	f7e5 fb5a 	bl	14654 <hal_debugger_connected>
   2efa0:	b100      	cbz	r0, 2efa4 <cbor_value_advance_fixed+0x38>
   2efa2:	be01      	bkpt	0x0001
   2efa4:	2300      	movs	r3, #0
   2efa6:	461a      	mov	r2, r3
   2efa8:	4619      	mov	r1, r3
   2efaa:	4618      	mov	r0, r3
   2efac:	f7e5 fef4 	bl	14d98 <__assert_func>
        return CborErrorAdvancePastEOF;
   2efb0:	2003      	movs	r0, #3
   2efb2:	e7e8      	b.n	2ef86 <cbor_value_advance_fixed+0x1a>

0002efb4 <cbor_value_enter_container>:
{
   2efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2efb6:	4605      	mov	r5, r0
   2efb8:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   2efba:	7b83      	ldrb	r3, [r0, #14]
   2efbc:	2b80      	cmp	r3, #128	; 0x80
   2efbe:	d021      	beq.n	2f004 <cbor_value_enter_container+0x50>
   2efc0:	2ba0      	cmp	r3, #160	; 0xa0
   2efc2:	d01d      	beq.n	2f000 <cbor_value_enter_container+0x4c>
   2efc4:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2efc6:	b1fb      	cbz	r3, 2f008 <cbor_value_enter_container+0x54>
    *recursed = *it;
   2efc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2efcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   2efd0:	7beb      	ldrb	r3, [r5, #15]
   2efd2:	f013 0f04 	tst.w	r3, #4
   2efd6:	d021      	beq.n	2f01c <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   2efd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2efdc:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   2efde:	460b      	mov	r3, r1
   2efe0:	3301      	adds	r3, #1
   2efe2:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   2efe4:	4620      	mov	r0, r4
   2efe6:	f7ff fd14 	bl	2ea12 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   2efea:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2efee:	d106      	bne.n	2effe <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   2eff0:	6863      	ldr	r3, [r4, #4]
   2eff2:	3301      	adds	r3, #1
   2eff4:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   2eff6:	23ff      	movs	r3, #255	; 0xff
   2eff8:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   2effa:	2000      	movs	r0, #0
   2effc:	60a0      	str	r0, [r4, #8]
}
   2effe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2f000:	2301      	movs	r3, #1
   2f002:	e7e0      	b.n	2efc6 <cbor_value_enter_container+0x12>
   2f004:	2301      	movs	r3, #1
   2f006:	e7de      	b.n	2efc6 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   2f008:	f7e5 fb24 	bl	14654 <hal_debugger_connected>
   2f00c:	b100      	cbz	r0, 2f010 <cbor_value_enter_container+0x5c>
   2f00e:	be01      	bkpt	0x0001
   2f010:	2300      	movs	r3, #0
   2f012:	461a      	mov	r2, r3
   2f014:	4619      	mov	r1, r3
   2f016:	4618      	mov	r0, r3
   2f018:	f7e5 febe 	bl	14d98 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   2f01c:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2f01e:	6838      	ldr	r0, [r7, #0]
   2f020:	6803      	ldr	r3, [r0, #0]
   2f022:	6861      	ldr	r1, [r4, #4]
   2f024:	4798      	blx	r3
   2f026:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2f02a:	6863      	ldr	r3, [r4, #4]
   2f02c:	3301      	adds	r3, #1
   2f02e:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2f030:	2817      	cmp	r0, #23
   2f032:	d915      	bls.n	2f060 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   2f034:	281b      	cmp	r0, #27
   2f036:	d841      	bhi.n	2f0bc <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2f038:	3818      	subs	r0, #24
   2f03a:	2601      	movs	r6, #1
   2f03c:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2f03e:	687b      	ldr	r3, [r7, #4]
   2f040:	6861      	ldr	r1, [r4, #4]
   2f042:	1a5b      	subs	r3, r3, r1
   2f044:	429e      	cmp	r6, r3
   2f046:	d83e      	bhi.n	2f0c6 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   2f048:	2e01      	cmp	r6, #1
   2f04a:	d00d      	beq.n	2f068 <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   2f04c:	2e02      	cmp	r6, #2
   2f04e:	d029      	beq.n	2f0a4 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   2f050:	2e04      	cmp	r6, #4
   2f052:	d02d      	beq.n	2f0b0 <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   2f054:	6838      	ldr	r0, [r7, #0]
   2f056:	68c3      	ldr	r3, [r0, #12]
   2f058:	4798      	blx	r3
   2f05a:	4602      	mov	r2, r0
   2f05c:	460b      	mov	r3, r1
   2f05e:	e008      	b.n	2f072 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   2f060:	b2c2      	uxtb	r2, r0
   2f062:	2300      	movs	r3, #0
        return CborNoError;
   2f064:	2100      	movs	r1, #0
   2f066:	e008      	b.n	2f07a <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   2f068:	6838      	ldr	r0, [r7, #0]
   2f06a:	6803      	ldr	r3, [r0, #0]
   2f06c:	4798      	blx	r3
   2f06e:	4602      	mov	r2, r0
   2f070:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2f072:	6860      	ldr	r0, [r4, #4]
   2f074:	4430      	add	r0, r6
   2f076:	6060      	str	r0, [r4, #4]
    return CborNoError;
   2f078:	2100      	movs	r1, #0
        assert(err == CborNoError);
   2f07a:	bb49      	cbnz	r1, 2f0d0 <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   2f07c:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   2f07e:	2100      	movs	r1, #0
   2f080:	4299      	cmp	r1, r3
   2f082:	bf08      	it	eq
   2f084:	4292      	cmpeq	r2, r2
   2f086:	d12d      	bne.n	2f0e4 <cbor_value_enter_container+0x130>
   2f088:	2b00      	cmp	r3, #0
   2f08a:	bf08      	it	eq
   2f08c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2f090:	d028      	beq.n	2f0e4 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   2f092:	7ba1      	ldrb	r1, [r4, #14]
   2f094:	29a0      	cmp	r1, #160	; 0xa0
   2f096:	d02a      	beq.n	2f0ee <cbor_value_enter_container+0x13a>
        if (len != 0)
   2f098:	4313      	orrs	r3, r2
   2f09a:	d0ac      	beq.n	2eff6 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   2f09c:	4620      	mov	r0, r4
   2f09e:	f7ff fcb8 	bl	2ea12 <preparse_value>
   2f0a2:	e7ac      	b.n	2effe <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   2f0a4:	6838      	ldr	r0, [r7, #0]
   2f0a6:	6843      	ldr	r3, [r0, #4]
   2f0a8:	4798      	blx	r3
   2f0aa:	4602      	mov	r2, r0
   2f0ac:	2300      	movs	r3, #0
   2f0ae:	e7e0      	b.n	2f072 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   2f0b0:	6838      	ldr	r0, [r7, #0]
   2f0b2:	6883      	ldr	r3, [r0, #8]
   2f0b4:	4798      	blx	r3
   2f0b6:	4602      	mov	r2, r0
   2f0b8:	2300      	movs	r3, #0
   2f0ba:	e7da      	b.n	2f072 <cbor_value_enter_container+0xbe>
    *len = 1;
   2f0bc:	2201      	movs	r2, #1
   2f0be:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2f0c0:	f240 1105 	movw	r1, #261	; 0x105
   2f0c4:	e7d9      	b.n	2f07a <cbor_value_enter_container+0xc6>
    *len = 1;
   2f0c6:	2201      	movs	r2, #1
   2f0c8:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2f0ca:	f240 1101 	movw	r1, #257	; 0x101
   2f0ce:	e7d4      	b.n	2f07a <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   2f0d0:	f7e5 fac0 	bl	14654 <hal_debugger_connected>
   2f0d4:	b100      	cbz	r0, 2f0d8 <cbor_value_enter_container+0x124>
   2f0d6:	be01      	bkpt	0x0001
   2f0d8:	2300      	movs	r3, #0
   2f0da:	461a      	mov	r2, r3
   2f0dc:	4619      	mov	r1, r3
   2f0de:	4618      	mov	r0, r3
   2f0e0:	f7e5 fe5a 	bl	14d98 <__assert_func>
            recursed->offset = it->offset;
   2f0e4:	686b      	ldr	r3, [r5, #4]
   2f0e6:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   2f0e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2f0ec:	e787      	b.n	2effe <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   2f0ee:	2a00      	cmp	r2, #0
   2f0f0:	db02      	blt.n	2f0f8 <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   2f0f2:	0056      	lsls	r6, r2, #1
   2f0f4:	60a6      	str	r6, [r4, #8]
   2f0f6:	e7cf      	b.n	2f098 <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   2f0f8:	686b      	ldr	r3, [r5, #4]
   2f0fa:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   2f0fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2f100:	e77d      	b.n	2effe <cbor_value_enter_container+0x4a>

0002f102 <cbor_value_leave_container>:
{
   2f102:	b508      	push	{r3, lr}
   2f104:	7b83      	ldrb	r3, [r0, #14]
   2f106:	2b80      	cmp	r3, #128	; 0x80
   2f108:	d00d      	beq.n	2f126 <cbor_value_leave_container+0x24>
   2f10a:	2ba0      	cmp	r3, #160	; 0xa0
   2f10c:	d009      	beq.n	2f122 <cbor_value_leave_container+0x20>
   2f10e:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2f110:	b15b      	cbz	r3, 2f12a <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   2f112:	7b8b      	ldrb	r3, [r1, #14]
   2f114:	2bff      	cmp	r3, #255	; 0xff
   2f116:	d112      	bne.n	2f13e <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   2f118:	684b      	ldr	r3, [r1, #4]
   2f11a:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   2f11c:	f7ff fd17 	bl	2eb4e <preparse_next_value>
}
   2f120:	bd08      	pop	{r3, pc}
   2f122:	2301      	movs	r3, #1
   2f124:	e7f4      	b.n	2f110 <cbor_value_leave_container+0xe>
   2f126:	2301      	movs	r3, #1
   2f128:	e7f2      	b.n	2f110 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   2f12a:	f7e5 fa93 	bl	14654 <hal_debugger_connected>
   2f12e:	b100      	cbz	r0, 2f132 <cbor_value_leave_container+0x30>
   2f130:	be01      	bkpt	0x0001
   2f132:	2300      	movs	r3, #0
   2f134:	461a      	mov	r2, r3
   2f136:	4619      	mov	r1, r3
   2f138:	4618      	mov	r0, r3
   2f13a:	f7e5 fe2d 	bl	14d98 <__assert_func>
    assert(recursed->type == CborInvalidType);
   2f13e:	f7e5 fa89 	bl	14654 <hal_debugger_connected>
   2f142:	b100      	cbz	r0, 2f146 <cbor_value_leave_container+0x44>
   2f144:	be01      	bkpt	0x0001
   2f146:	2300      	movs	r3, #0
   2f148:	461a      	mov	r2, r3
   2f14a:	4619      	mov	r1, r3
   2f14c:	4618      	mov	r0, r3
   2f14e:	f7e5 fe23 	bl	14d98 <__assert_func>
	...

0002f154 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   2f154:	b510      	push	{r4, lr}
   2f156:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2f158:	460c      	mov	r4, r1
   2f15a:	b179      	cbz	r1, 2f17c <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   2f15c:	6801      	ldr	r1, [r0, #0]
   2f15e:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2f160:	6949      	ldr	r1, [r1, #20]
   2f162:	9101      	str	r1, [sp, #4]
   2f164:	9300      	str	r3, [sp, #0]
   2f166:	f10d 030f 	add.w	r3, sp, #15
   2f16a:	4621      	mov	r1, r4
   2f16c:	f7ff fd71 	bl	2ec52 <iterate_string_chunks>
    return err ? err :
   2f170:	b910      	cbnz	r0, 2f178 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   2f172:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   2f176:	b11b      	cbz	r3, 2f180 <_cbor_value_copy_string+0x2c>
}
   2f178:	b004      	add	sp, #16
   2f17a:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2f17c:	4902      	ldr	r1, [pc, #8]	; (2f188 <_cbor_value_copy_string+0x34>)
   2f17e:	e7f0      	b.n	2f162 <_cbor_value_copy_string+0xe>
    return err ? err :
   2f180:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2f184:	e7f8      	b.n	2f178 <_cbor_value_copy_string+0x24>
   2f186:	bf00      	nop
   2f188:	0002ea0f 	.word	0x0002ea0f

0002f18c <advance_recursive>:
{
   2f18c:	b570      	push	{r4, r5, r6, lr}
   2f18e:	b086      	sub	sp, #24
   2f190:	4604      	mov	r4, r0
   2f192:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   2f194:	7b86      	ldrb	r6, [r0, #14]
   2f196:	4630      	mov	r0, r6
   2f198:	f7ff fc27 	bl	2e9ea <is_fixed_type>
   2f19c:	b9c0      	cbnz	r0, 2f1d0 <advance_recursive+0x44>
   2f19e:	2e80      	cmp	r6, #128	; 0x80
   2f1a0:	d01f      	beq.n	2f1e2 <advance_recursive+0x56>
   2f1a2:	2ea0      	cmp	r6, #160	; 0xa0
   2f1a4:	d01b      	beq.n	2f1de <advance_recursive+0x52>
   2f1a6:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   2f1a8:	b1eb      	cbz	r3, 2f1e6 <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   2f1aa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   2f1ae:	d02b      	beq.n	2f208 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   2f1b0:	a902      	add	r1, sp, #8
   2f1b2:	4620      	mov	r0, r4
   2f1b4:	f7ff fefe 	bl	2efb4 <cbor_value_enter_container>
    if (err)
   2f1b8:	4603      	mov	r3, r0
   2f1ba:	b968      	cbnz	r0, 2f1d8 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   2f1bc:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   2f1be:	b1eb      	cbz	r3, 2f1fc <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   2f1c0:	1c69      	adds	r1, r5, #1
   2f1c2:	a802      	add	r0, sp, #8
   2f1c4:	f7ff ffe2 	bl	2f18c <advance_recursive>
        if (err)
   2f1c8:	4603      	mov	r3, r0
   2f1ca:	2800      	cmp	r0, #0
   2f1cc:	d0f6      	beq.n	2f1bc <advance_recursive+0x30>
   2f1ce:	e003      	b.n	2f1d8 <advance_recursive+0x4c>
        return advance_internal(it);
   2f1d0:	4620      	mov	r0, r4
   2f1d2:	f7ff fdf7 	bl	2edc4 <advance_internal>
   2f1d6:	4603      	mov	r3, r0
}
   2f1d8:	4618      	mov	r0, r3
   2f1da:	b006      	add	sp, #24
   2f1dc:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   2f1de:	2301      	movs	r3, #1
   2f1e0:	e7e2      	b.n	2f1a8 <advance_recursive+0x1c>
   2f1e2:	2301      	movs	r3, #1
   2f1e4:	e7e0      	b.n	2f1a8 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   2f1e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f1ea:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   2f1ec:	4623      	mov	r3, r4
   2f1ee:	aa01      	add	r2, sp, #4
   2f1f0:	2100      	movs	r1, #0
   2f1f2:	4620      	mov	r0, r4
   2f1f4:	f7ff ffae 	bl	2f154 <_cbor_value_copy_string>
   2f1f8:	4603      	mov	r3, r0
   2f1fa:	e7ed      	b.n	2f1d8 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   2f1fc:	a902      	add	r1, sp, #8
   2f1fe:	4620      	mov	r0, r4
   2f200:	f7ff ff7f 	bl	2f102 <cbor_value_leave_container>
   2f204:	4603      	mov	r3, r0
   2f206:	e7e7      	b.n	2f1d8 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   2f208:	f240 4301 	movw	r3, #1025	; 0x401
   2f20c:	e7e4      	b.n	2f1d8 <advance_recursive+0x4c>

0002f20e <cbor_value_advance>:
{
   2f20e:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   2f210:	7b83      	ldrb	r3, [r0, #14]
   2f212:	2bff      	cmp	r3, #255	; 0xff
   2f214:	d005      	beq.n	2f222 <cbor_value_advance+0x14>
    if (!it->remaining)
   2f216:	6883      	ldr	r3, [r0, #8]
   2f218:	b16b      	cbz	r3, 2f236 <cbor_value_advance+0x28>
    return advance_recursive(it, 0);
   2f21a:	2100      	movs	r1, #0
   2f21c:	f7ff ffb6 	bl	2f18c <advance_recursive>
}
   2f220:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   2f222:	f7e5 fa17 	bl	14654 <hal_debugger_connected>
   2f226:	b100      	cbz	r0, 2f22a <cbor_value_advance+0x1c>
   2f228:	be01      	bkpt	0x0001
   2f22a:	2300      	movs	r3, #0
   2f22c:	461a      	mov	r2, r3
   2f22e:	4619      	mov	r1, r3
   2f230:	4618      	mov	r0, r3
   2f232:	f7e5 fdb1 	bl	14d98 <__assert_func>
        return CborErrorAdvancePastEOF;
   2f236:	2003      	movs	r0, #3
   2f238:	e7f2      	b.n	2f220 <cbor_value_advance+0x12>

0002f23a <cbor_value_calculate_string_length>:
{
   2f23a:	b508      	push	{r3, lr}
   2f23c:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   2f23e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f242:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   2f244:	2300      	movs	r3, #0
   2f246:	4619      	mov	r1, r3
   2f248:	f7ff ff84 	bl	2f154 <_cbor_value_copy_string>
}
   2f24c:	bd08      	pop	{r3, pc}
	...

0002f250 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   2f250:	b570      	push	{r4, r5, r6, lr}
   2f252:	4606      	mov	r6, r0
   2f254:	460c      	mov	r4, r1
   2f256:	4615      	mov	r5, r2
    while (n--) {
   2f258:	462b      	mov	r3, r5
   2f25a:	3d01      	subs	r5, #1
   2f25c:	b143      	cbz	r3, 2f270 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2f25e:	f814 2b01 	ldrb.w	r2, [r4], #1
   2f262:	4904      	ldr	r1, [pc, #16]	; (2f274 <hexDump+0x24>)
   2f264:	4630      	mov	r0, r6
   2f266:	f003 fc15 	bl	32a94 <fprintf>
        if (r < 0)
   2f26a:	2800      	cmp	r0, #0
   2f26c:	daf4      	bge.n	2f258 <hexDump+0x8>
   2f26e:	e000      	b.n	2f272 <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   2f270:	2000      	movs	r0, #0
}
   2f272:	bd70      	pop	{r4, r5, r6, pc}
   2f274:	000352ac 	.word	0x000352ac

0002f278 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   2f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f27a:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   2f27c:	e07e      	b.n	2f37c <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   2f27e:	4985      	ldr	r1, [pc, #532]	; (2f494 <utf8EscapedDump+0x21c>)
   2f280:	4630      	mov	r0, r6
   2f282:	f003 fc07 	bl	32a94 <fprintf>
   2f286:	2800      	cmp	r0, #0
   2f288:	f2c0 80e0 	blt.w	2f44c <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   2f28c:	4629      	mov	r1, r5
   2f28e:	e074      	b.n	2f37a <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   2f290:	2a5c      	cmp	r2, #92	; 0x5c
   2f292:	d169      	bne.n	2f368 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   2f294:	4980      	ldr	r1, [pc, #512]	; (2f498 <utf8EscapedDump+0x220>)
   2f296:	4630      	mov	r0, r6
   2f298:	f003 fbfc 	bl	32a94 <fprintf>
   2f29c:	2800      	cmp	r0, #0
   2f29e:	f2c0 80d7 	blt.w	2f450 <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   2f2a2:	4629      	mov	r1, r5
   2f2a4:	e069      	b.n	2f37a <utf8EscapedDump+0x102>
                escaped = 'f';
   2f2a6:	2266      	movs	r2, #102	; 0x66
                break;
   2f2a8:	e7f4      	b.n	2f294 <utf8EscapedDump+0x1c>
                escaped = 'n';
   2f2aa:	226e      	movs	r2, #110	; 0x6e
                break;
   2f2ac:	e7f2      	b.n	2f294 <utf8EscapedDump+0x1c>
                escaped = 'r';
   2f2ae:	2272      	movs	r2, #114	; 0x72
                break;
   2f2b0:	e7f0      	b.n	2f294 <utf8EscapedDump+0x1c>
                escaped = 't';
   2f2b2:	2274      	movs	r2, #116	; 0x74
                break;
   2f2b4:	e7ee      	b.n	2f294 <utf8EscapedDump+0x1c>
                escaped = 'b';
   2f2b6:	2262      	movs	r2, #98	; 0x62
   2f2b8:	e7ec      	b.n	2f294 <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   2f2ba:	2ac1      	cmp	r2, #193	; 0xc1
   2f2bc:	f240 80ca 	bls.w	2f454 <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   2f2c0:	2adf      	cmp	r2, #223	; 0xdf
   2f2c2:	d830      	bhi.n	2f326 <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   2f2c4:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   2f2c8:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   2f2cc:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   2f2ce:	1e58      	subs	r0, r3, #1
   2f2d0:	42b8      	cmp	r0, r7
   2f2d2:	f200 80c5 	bhi.w	2f460 <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   2f2d6:	3102      	adds	r1, #2
   2f2d8:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   2f2da:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   2f2de:	2880      	cmp	r0, #128	; 0x80
   2f2e0:	f040 80c1 	bne.w	2f466 <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   2f2e4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2f2e8:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   2f2ec:	2b02      	cmp	r3, #2
   2f2ee:	d92b      	bls.n	2f348 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   2f2f0:	1ca8      	adds	r0, r5, #2
   2f2f2:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   2f2f4:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   2f2f8:	2980      	cmp	r1, #128	; 0x80
   2f2fa:	f040 80b7 	bne.w	2f46c <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   2f2fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2f302:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   2f306:	2b03      	cmp	r3, #3
   2f308:	f240 808c 	bls.w	2f424 <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   2f30c:	1ce8      	adds	r0, r5, #3
   2f30e:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   2f310:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   2f314:	2980      	cmp	r1, #128	; 0x80
   2f316:	f040 80ac 	bne.w	2f472 <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   2f31a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2f31e:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   2f322:	4605      	mov	r5, r0
   2f324:	e011      	b.n	2f34a <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   2f326:	2aef      	cmp	r2, #239	; 0xef
   2f328:	d805      	bhi.n	2f336 <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   2f32a:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   2f32e:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   2f332:	2303      	movs	r3, #3
   2f334:	e7cb      	b.n	2f2ce <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   2f336:	2af4      	cmp	r2, #244	; 0xf4
   2f338:	f200 808f 	bhi.w	2f45a <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   2f33c:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   2f340:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   2f344:	2304      	movs	r3, #4
   2f346:	e7c2      	b.n	2f2ce <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   2f348:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   2f34a:	4564      	cmp	r4, ip
   2f34c:	f0c0 8094 	bcc.w	2f478 <utf8EscapedDump+0x200>
   2f350:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   2f354:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2f358:	f0c0 8091 	bcc.w	2f47e <utf8EscapedDump+0x206>
   2f35c:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   2f360:	f080 8090 	bcs.w	2f484 <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   2f364:	2b03      	cmp	r3, #3
   2f366:	d85f      	bhi.n	2f428 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   2f368:	4622      	mov	r2, r4
   2f36a:	494c      	ldr	r1, [pc, #304]	; (2f49c <utf8EscapedDump+0x224>)
   2f36c:	4630      	mov	r0, r6
   2f36e:	f003 fb91 	bl	32a94 <fprintf>
   2f372:	2800      	cmp	r0, #0
   2f374:	f2c0 808b 	blt.w	2f48e <utf8EscapedDump+0x216>
   2f378:	4629      	mov	r1, r5
   2f37a:	463a      	mov	r2, r7
    while (n--) {
   2f37c:	1e57      	subs	r7, r2, #1
   2f37e:	2a00      	cmp	r2, #0
   2f380:	d062      	beq.n	2f448 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   2f382:	460d      	mov	r5, r1
   2f384:	f815 2b01 	ldrb.w	r2, [r5], #1
   2f388:	4614      	mov	r4, r2
        if (uc < 0x80) {
   2f38a:	2a7f      	cmp	r2, #127	; 0x7f
   2f38c:	d895      	bhi.n	2f2ba <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   2f38e:	f1a2 0320 	sub.w	r3, r2, #32
   2f392:	2b5e      	cmp	r3, #94	; 0x5e
   2f394:	d804      	bhi.n	2f3a0 <utf8EscapedDump+0x128>
   2f396:	2a5c      	cmp	r2, #92	; 0x5c
   2f398:	d002      	beq.n	2f3a0 <utf8EscapedDump+0x128>
   2f39a:	2a22      	cmp	r2, #34	; 0x22
   2f39c:	f47f af6f 	bne.w	2f27e <utf8EscapedDump+0x6>
            switch (uc) {
   2f3a0:	2a22      	cmp	r2, #34	; 0x22
   2f3a2:	f63f af75 	bhi.w	2f290 <utf8EscapedDump+0x18>
   2f3a6:	2a08      	cmp	r2, #8
   2f3a8:	d3de      	bcc.n	2f368 <utf8EscapedDump+0xf0>
   2f3aa:	f1a2 0308 	sub.w	r3, r2, #8
   2f3ae:	2b1a      	cmp	r3, #26
   2f3b0:	d8da      	bhi.n	2f368 <utf8EscapedDump+0xf0>
   2f3b2:	a101      	add	r1, pc, #4	; (adr r1, 2f3b8 <utf8EscapedDump+0x140>)
   2f3b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2f3b8:	0002f2b7 	.word	0x0002f2b7
   2f3bc:	0002f2b3 	.word	0x0002f2b3
   2f3c0:	0002f2ab 	.word	0x0002f2ab
   2f3c4:	0002f369 	.word	0x0002f369
   2f3c8:	0002f2a7 	.word	0x0002f2a7
   2f3cc:	0002f2af 	.word	0x0002f2af
   2f3d0:	0002f369 	.word	0x0002f369
   2f3d4:	0002f369 	.word	0x0002f369
   2f3d8:	0002f369 	.word	0x0002f369
   2f3dc:	0002f369 	.word	0x0002f369
   2f3e0:	0002f369 	.word	0x0002f369
   2f3e4:	0002f369 	.word	0x0002f369
   2f3e8:	0002f369 	.word	0x0002f369
   2f3ec:	0002f369 	.word	0x0002f369
   2f3f0:	0002f369 	.word	0x0002f369
   2f3f4:	0002f369 	.word	0x0002f369
   2f3f8:	0002f369 	.word	0x0002f369
   2f3fc:	0002f369 	.word	0x0002f369
   2f400:	0002f369 	.word	0x0002f369
   2f404:	0002f369 	.word	0x0002f369
   2f408:	0002f369 	.word	0x0002f369
   2f40c:	0002f369 	.word	0x0002f369
   2f410:	0002f369 	.word	0x0002f369
   2f414:	0002f369 	.word	0x0002f369
   2f418:	0002f369 	.word	0x0002f369
   2f41c:	0002f369 	.word	0x0002f369
   2f420:	0002f295 	.word	0x0002f295
            b = (uint8_t)*buffer++;
   2f424:	4605      	mov	r5, r0
   2f426:	e790      	b.n	2f34a <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   2f428:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   2f42c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   2f430:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   2f434:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   2f438:	4919      	ldr	r1, [pc, #100]	; (2f4a0 <utf8EscapedDump+0x228>)
   2f43a:	4630      	mov	r0, r6
   2f43c:	f003 fb2a 	bl	32a94 <fprintf>
   2f440:	2800      	cmp	r0, #0
   2f442:	db22      	blt.n	2f48a <utf8EscapedDump+0x212>
   2f444:	4629      	mov	r1, r5
   2f446:	e798      	b.n	2f37a <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   2f448:	2000      	movs	r0, #0
   2f44a:	e002      	b.n	2f452 <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   2f44c:	2004      	movs	r0, #4
   2f44e:	e000      	b.n	2f452 <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2f450:	2004      	movs	r0, #4
}
   2f452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   2f454:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f458:	e7fb      	b.n	2f452 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2f45a:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f45e:	e7f8      	b.n	2f452 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2f460:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f464:	e7f5      	b.n	2f452 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2f466:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f46a:	e7f2      	b.n	2f452 <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   2f46c:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f470:	e7ef      	b.n	2f452 <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   2f472:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f476:	e7ec      	b.n	2f452 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2f478:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f47c:	e7e9      	b.n	2f452 <utf8EscapedDump+0x1da>
   2f47e:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f482:	e7e6      	b.n	2f452 <utf8EscapedDump+0x1da>
   2f484:	f44f 7001 	mov.w	r0, #516	; 0x204
   2f488:	e7e3      	b.n	2f452 <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2f48a:	2004      	movs	r0, #4
   2f48c:	e7e1      	b.n	2f452 <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2f48e:	2004      	movs	r0, #4
   2f490:	e7df      	b.n	2f452 <utf8EscapedDump+0x1da>
   2f492:	bf00      	nop
   2f494:	000352b4 	.word	0x000352b4
   2f498:	000352b8 	.word	0x000352b8
   2f49c:	000352cc 	.word	0x000352cc
   2f4a0:	000352bc 	.word	0x000352bc

0002f4a4 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   2f4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f4a6:	b087      	sub	sp, #28
   2f4a8:	4607      	mov	r7, r0
   2f4aa:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   2f4ac:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   2f4ae:	2cc0      	cmp	r4, #192	; 0xc0
   2f4b0:	f000 8138 	beq.w	2f724 <value_to_pretty+0x280>
   2f4b4:	d849      	bhi.n	2f54a <value_to_pretty+0xa6>
   2f4b6:	2c60      	cmp	r4, #96	; 0x60
   2f4b8:	f000 80f5 	beq.w	2f6a6 <value_to_pretty+0x202>
   2f4bc:	d920      	bls.n	2f500 <value_to_pretty+0x5c>
   2f4be:	2c80      	cmp	r4, #128	; 0x80
   2f4c0:	d002      	beq.n	2f4c8 <value_to_pretty+0x24>
   2f4c2:	2ca0      	cmp	r4, #160	; 0xa0
   2f4c4:	f040 81c2 	bne.w	2f84c <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2f4c8:	2c80      	cmp	r4, #128	; 0x80
   2f4ca:	d062      	beq.n	2f592 <value_to_pretty+0xee>
   2f4cc:	49ac      	ldr	r1, [pc, #688]	; (2f780 <value_to_pretty+0x2dc>)
   2f4ce:	4638      	mov	r0, r7
   2f4d0:	f003 fae0 	bl	32a94 <fprintf>
   2f4d4:	2800      	cmp	r0, #0
   2f4d6:	db7d      	blt.n	2f5d4 <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2f4d8:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   2f4da:	f013 0f04 	tst.w	r3, #4
   2f4de:	d005      	beq.n	2f4ec <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   2f4e0:	49a8      	ldr	r1, [pc, #672]	; (2f784 <value_to_pretty+0x2e0>)
   2f4e2:	4638      	mov	r0, r7
   2f4e4:	f003 fad6 	bl	32a94 <fprintf>
   2f4e8:	2800      	cmp	r0, #0
   2f4ea:	db75      	blt.n	2f5d8 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   2f4ec:	a902      	add	r1, sp, #8
   2f4ee:	4628      	mov	r0, r5
   2f4f0:	f7ff fd60 	bl	2efb4 <cbor_value_enter_container>
        if (err) {
   2f4f4:	4606      	mov	r6, r0
   2f4f6:	2800      	cmp	r0, #0
   2f4f8:	d04d      	beq.n	2f596 <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   2f4fa:	9b03      	ldr	r3, [sp, #12]
   2f4fc:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2f4fe:	e181      	b.n	2f804 <value_to_pretty+0x360>
    switch (type) {
   2f500:	2c00      	cmp	r4, #0
   2f502:	d06b      	beq.n	2f5dc <value_to_pretty+0x138>
   2f504:	2c40      	cmp	r4, #64	; 0x40
   2f506:	f040 81a1 	bne.w	2f84c <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   2f50a:	2300      	movs	r3, #0
   2f50c:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   2f50e:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   2f510:	2b40      	cmp	r3, #64	; 0x40
   2f512:	f040 80ab 	bne.w	2f66c <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2f516:	460b      	mov	r3, r1
   2f518:	aa01      	add	r2, sp, #4
   2f51a:	a902      	add	r1, sp, #8
   2f51c:	4628      	mov	r0, r5
   2f51e:	f000 f9e5 	bl	2f8ec <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   2f522:	4606      	mov	r6, r0
   2f524:	2800      	cmp	r0, #0
   2f526:	f040 816d 	bne.w	2f804 <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2f52a:	4997      	ldr	r1, [pc, #604]	; (2f788 <value_to_pretty+0x2e4>)
   2f52c:	4638      	mov	r0, r7
   2f52e:	f003 fab1 	bl	32a94 <fprintf>
   2f532:	2800      	cmp	r0, #0
   2f534:	f280 80a4 	bge.w	2f680 <value_to_pretty+0x1dc>
   2f538:	2401      	movs	r4, #1
        free(buffer);
   2f53a:	9802      	ldr	r0, [sp, #8]
   2f53c:	f002 fee6 	bl	3230c <free>
        return failed ? CborErrorIO : CborNoError;
   2f540:	2c00      	cmp	r4, #0
   2f542:	f000 815f 	beq.w	2f804 <value_to_pretty+0x360>
   2f546:	2604      	movs	r6, #4
   2f548:	e15c      	b.n	2f804 <value_to_pretty+0x360>
    switch (type) {
   2f54a:	2cf7      	cmp	r4, #247	; 0xf7
   2f54c:	f200 817e 	bhi.w	2f84c <value_to_pretty+0x3a8>
   2f550:	2ce0      	cmp	r4, #224	; 0xe0
   2f552:	f0c0 817b 	bcc.w	2f84c <value_to_pretty+0x3a8>
   2f556:	3ce0      	subs	r4, #224	; 0xe0
   2f558:	2c17      	cmp	r4, #23
   2f55a:	f200 8177 	bhi.w	2f84c <value_to_pretty+0x3a8>
   2f55e:	e8df f014 	tbh	[pc, r4, lsl #1]
   2f562:	0131      	.short	0x0131
   2f564:	01750175 	.word	0x01750175
   2f568:	01750175 	.word	0x01750175
   2f56c:	01750175 	.word	0x01750175
   2f570:	01750175 	.word	0x01750175
   2f574:	01750175 	.word	0x01750175
   2f578:	01750175 	.word	0x01750175
   2f57c:	01750175 	.word	0x01750175
   2f580:	01750175 	.word	0x01750175
   2f584:	01750175 	.word	0x01750175
   2f588:	01750175 	.word	0x01750175
   2f58c:	0147015c 	.word	0x0147015c
   2f590:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2f592:	497e      	ldr	r1, [pc, #504]	; (2f78c <value_to_pretty+0x2e8>)
   2f594:	e79b      	b.n	2f4ce <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   2f596:	4622      	mov	r2, r4
   2f598:	a902      	add	r1, sp, #8
   2f59a:	4638      	mov	r0, r7
   2f59c:	f000 f970 	bl	2f880 <container_to_pretty>
        if (err) {
   2f5a0:	4606      	mov	r6, r0
   2f5a2:	b110      	cbz	r0, 2f5aa <value_to_pretty+0x106>
            it->offset = recursed.offset;
   2f5a4:	9b03      	ldr	r3, [sp, #12]
   2f5a6:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2f5a8:	e12c      	b.n	2f804 <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   2f5aa:	a902      	add	r1, sp, #8
   2f5ac:	4628      	mov	r0, r5
   2f5ae:	f7ff fda8 	bl	2f102 <cbor_value_leave_container>
        if (err)
   2f5b2:	4606      	mov	r6, r0
   2f5b4:	2800      	cmp	r0, #0
   2f5b6:	f040 8125 	bne.w	2f804 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2f5ba:	2c80      	cmp	r4, #128	; 0x80
   2f5bc:	d008      	beq.n	2f5d0 <value_to_pretty+0x12c>
   2f5be:	4974      	ldr	r1, [pc, #464]	; (2f790 <value_to_pretty+0x2ec>)
   2f5c0:	4638      	mov	r0, r7
   2f5c2:	f003 fa67 	bl	32a94 <fprintf>
   2f5c6:	2800      	cmp	r0, #0
   2f5c8:	f280 811c 	bge.w	2f804 <value_to_pretty+0x360>
            return CborErrorIO;
   2f5cc:	2604      	movs	r6, #4
   2f5ce:	e119      	b.n	2f804 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2f5d0:	4970      	ldr	r1, [pc, #448]	; (2f794 <value_to_pretty+0x2f0>)
   2f5d2:	e7f5      	b.n	2f5c0 <value_to_pretty+0x11c>
            return CborErrorIO;
   2f5d4:	2604      	movs	r6, #4
   2f5d6:	e115      	b.n	2f804 <value_to_pretty+0x360>
                return CborErrorIO;
   2f5d8:	2604      	movs	r6, #4
   2f5da:	e113      	b.n	2f804 <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   2f5dc:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   2f5de:	b96b      	cbnz	r3, 2f5fc <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2f5e0:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2f5e2:	f013 0f01 	tst.w	r3, #1
   2f5e6:	d113      	bne.n	2f610 <value_to_pretty+0x16c>
   2f5e8:	898a      	ldrh	r2, [r1, #12]
   2f5ea:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   2f5ec:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2f5ee:	b9a9      	cbnz	r1, 2f61c <value_to_pretty+0x178>
   2f5f0:	7be9      	ldrb	r1, [r5, #15]
   2f5f2:	f011 0f02 	tst.w	r1, #2
   2f5f6:	d027      	beq.n	2f648 <value_to_pretty+0x1a4>
   2f5f8:	2100      	movs	r1, #0
   2f5fa:	e010      	b.n	2f61e <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   2f5fc:	f7e5 f82a 	bl	14654 <hal_debugger_connected>
   2f600:	b100      	cbz	r0, 2f604 <value_to_pretty+0x160>
   2f602:	be01      	bkpt	0x0001
   2f604:	2300      	movs	r3, #0
   2f606:	461a      	mov	r2, r3
   2f608:	4619      	mov	r1, r3
   2f60a:	4618      	mov	r0, r3
   2f60c:	f7e5 fbc4 	bl	14d98 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2f610:	4608      	mov	r0, r1
   2f612:	f7ff fc52 	bl	2eeba <_cbor_value_decode_int64_internal>
   2f616:	4602      	mov	r2, r0
   2f618:	460b      	mov	r3, r1
   2f61a:	e7e7      	b.n	2f5ec <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2f61c:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   2f61e:	b9a9      	cbnz	r1, 2f64c <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   2f620:	1c50      	adds	r0, r2, #1
   2f622:	f143 0100 	adc.w	r1, r3, #0
   2f626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2f62a:	bf08      	it	eq
   2f62c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2f630:	d014      	beq.n	2f65c <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   2f632:	4602      	mov	r2, r0
   2f634:	460b      	mov	r3, r1
   2f636:	4958      	ldr	r1, [pc, #352]	; (2f798 <value_to_pretty+0x2f4>)
   2f638:	4638      	mov	r0, r7
   2f63a:	f003 fa2b 	bl	32a94 <fprintf>
   2f63e:	2800      	cmp	r0, #0
   2f640:	f280 80dc 	bge.w	2f7fc <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   2f644:	2604      	movs	r6, #4
   2f646:	e0dd      	b.n	2f804 <value_to_pretty+0x360>
   2f648:	2101      	movs	r1, #1
   2f64a:	e7e8      	b.n	2f61e <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   2f64c:	4953      	ldr	r1, [pc, #332]	; (2f79c <value_to_pretty+0x2f8>)
   2f64e:	4638      	mov	r0, r7
   2f650:	f003 fa20 	bl	32a94 <fprintf>
   2f654:	2800      	cmp	r0, #0
   2f656:	f280 80d1 	bge.w	2f7fc <value_to_pretty+0x358>
   2f65a:	e7f3      	b.n	2f644 <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   2f65c:	4950      	ldr	r1, [pc, #320]	; (2f7a0 <value_to_pretty+0x2fc>)
   2f65e:	4638      	mov	r0, r7
   2f660:	f003 fa18 	bl	32a94 <fprintf>
   2f664:	2800      	cmp	r0, #0
   2f666:	f280 80c9 	bge.w	2f7fc <value_to_pretty+0x358>
   2f66a:	e7eb      	b.n	2f644 <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   2f66c:	f7e4 fff2 	bl	14654 <hal_debugger_connected>
   2f670:	b100      	cbz	r0, 2f674 <value_to_pretty+0x1d0>
   2f672:	be01      	bkpt	0x0001
   2f674:	2300      	movs	r3, #0
   2f676:	461a      	mov	r2, r3
   2f678:	4619      	mov	r1, r3
   2f67a:	4618      	mov	r0, r3
   2f67c:	f7e5 fb8c 	bl	14d98 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2f680:	9a01      	ldr	r2, [sp, #4]
   2f682:	9902      	ldr	r1, [sp, #8]
   2f684:	4638      	mov	r0, r7
   2f686:	f7ff fde3 	bl	2f250 <hexDump>
   2f68a:	2800      	cmp	r0, #0
   2f68c:	da01      	bge.n	2f692 <value_to_pretty+0x1ee>
   2f68e:	2401      	movs	r4, #1
   2f690:	e753      	b.n	2f53a <value_to_pretty+0x96>
   2f692:	4944      	ldr	r1, [pc, #272]	; (2f7a4 <value_to_pretty+0x300>)
   2f694:	4638      	mov	r0, r7
   2f696:	f003 f9fd 	bl	32a94 <fprintf>
   2f69a:	2800      	cmp	r0, #0
   2f69c:	db01      	blt.n	2f6a2 <value_to_pretty+0x1fe>
   2f69e:	2400      	movs	r4, #0
   2f6a0:	e74b      	b.n	2f53a <value_to_pretty+0x96>
   2f6a2:	2401      	movs	r4, #1
   2f6a4:	e749      	b.n	2f53a <value_to_pretty+0x96>
        size_t n = 0;
   2f6a6:	2300      	movs	r3, #0
   2f6a8:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   2f6aa:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   2f6ac:	2b60      	cmp	r3, #96	; 0x60
   2f6ae:	d11c      	bne.n	2f6ea <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2f6b0:	460b      	mov	r3, r1
   2f6b2:	aa01      	add	r2, sp, #4
   2f6b4:	a902      	add	r1, sp, #8
   2f6b6:	4628      	mov	r0, r5
   2f6b8:	f000 f918 	bl	2f8ec <_cbor_value_dup_string>
        if (err)
   2f6bc:	4606      	mov	r6, r0
   2f6be:	2800      	cmp	r0, #0
   2f6c0:	f040 80a0 	bne.w	2f804 <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   2f6c4:	4938      	ldr	r1, [pc, #224]	; (2f7a8 <value_to_pretty+0x304>)
   2f6c6:	4638      	mov	r0, r7
   2f6c8:	f003 f9e4 	bl	32a94 <fprintf>
                      || fprintf(out, "\"") < 0;
   2f6cc:	2800      	cmp	r0, #0
   2f6ce:	da16      	bge.n	2f6fe <value_to_pretty+0x25a>
   2f6d0:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   2f6d2:	461c      	mov	r4, r3
        free(buffer);
   2f6d4:	9802      	ldr	r0, [sp, #8]
   2f6d6:	f002 fe19 	bl	3230c <free>
        return err != CborNoError ? err :
   2f6da:	2e00      	cmp	r6, #0
   2f6dc:	f040 8092 	bne.w	2f804 <value_to_pretty+0x360>
   2f6e0:	2c00      	cmp	r4, #0
   2f6e2:	f000 808f 	beq.w	2f804 <value_to_pretty+0x360>
   2f6e6:	2604      	movs	r6, #4
   2f6e8:	e08c      	b.n	2f804 <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   2f6ea:	f7e4 ffb3 	bl	14654 <hal_debugger_connected>
   2f6ee:	b100      	cbz	r0, 2f6f2 <value_to_pretty+0x24e>
   2f6f0:	be01      	bkpt	0x0001
   2f6f2:	2300      	movs	r3, #0
   2f6f4:	461a      	mov	r2, r3
   2f6f6:	4619      	mov	r1, r3
   2f6f8:	4618      	mov	r0, r3
   2f6fa:	f7e5 fb4d 	bl	14d98 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   2f6fe:	9a01      	ldr	r2, [sp, #4]
   2f700:	9902      	ldr	r1, [sp, #8]
   2f702:	4638      	mov	r0, r7
   2f704:	f7ff fdb8 	bl	2f278 <utf8EscapedDump>
   2f708:	4606      	mov	r6, r0
   2f70a:	b108      	cbz	r0, 2f710 <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   2f70c:	2301      	movs	r3, #1
   2f70e:	e7e0      	b.n	2f6d2 <value_to_pretty+0x22e>
   2f710:	4925      	ldr	r1, [pc, #148]	; (2f7a8 <value_to_pretty+0x304>)
   2f712:	4638      	mov	r0, r7
   2f714:	f003 f9be 	bl	32a94 <fprintf>
   2f718:	2800      	cmp	r0, #0
   2f71a:	db01      	blt.n	2f720 <value_to_pretty+0x27c>
   2f71c:	2300      	movs	r3, #0
   2f71e:	e7d8      	b.n	2f6d2 <value_to_pretty+0x22e>
   2f720:	2301      	movs	r3, #1
   2f722:	e7d6      	b.n	2f6d2 <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   2f724:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   2f726:	2bc0      	cmp	r3, #192	; 0xc0
   2f728:	d120      	bne.n	2f76c <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2f72a:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2f72c:	f013 0f01 	tst.w	r3, #1
   2f730:	d140      	bne.n	2f7b4 <value_to_pretty+0x310>
   2f732:	898a      	ldrh	r2, [r1, #12]
   2f734:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   2f736:	491d      	ldr	r1, [pc, #116]	; (2f7ac <value_to_pretty+0x308>)
   2f738:	4638      	mov	r0, r7
   2f73a:	f003 f9ab 	bl	32a94 <fprintf>
   2f73e:	2800      	cmp	r0, #0
   2f740:	db3e      	blt.n	2f7c0 <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   2f742:	4628      	mov	r0, r5
   2f744:	f7ff fc12 	bl	2ef6c <cbor_value_advance_fixed>
        if (err)
   2f748:	4606      	mov	r6, r0
   2f74a:	2800      	cmp	r0, #0
   2f74c:	d15a      	bne.n	2f804 <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   2f74e:	4629      	mov	r1, r5
   2f750:	4638      	mov	r0, r7
   2f752:	f7ff fea7 	bl	2f4a4 <value_to_pretty>
        if (err)
   2f756:	4606      	mov	r6, r0
   2f758:	2800      	cmp	r0, #0
   2f75a:	d153      	bne.n	2f804 <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   2f75c:	4914      	ldr	r1, [pc, #80]	; (2f7b0 <value_to_pretty+0x30c>)
   2f75e:	4638      	mov	r0, r7
   2f760:	f003 f998 	bl	32a94 <fprintf>
   2f764:	2800      	cmp	r0, #0
   2f766:	da4d      	bge.n	2f804 <value_to_pretty+0x360>
            return CborErrorIO;
   2f768:	2604      	movs	r6, #4
   2f76a:	e04b      	b.n	2f804 <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   2f76c:	f7e4 ff72 	bl	14654 <hal_debugger_connected>
   2f770:	b100      	cbz	r0, 2f774 <value_to_pretty+0x2d0>
   2f772:	be01      	bkpt	0x0001
   2f774:	2300      	movs	r3, #0
   2f776:	461a      	mov	r2, r3
   2f778:	4619      	mov	r1, r3
   2f77a:	4618      	mov	r0, r3
   2f77c:	f7e5 fb0c 	bl	14d98 <__assert_func>
   2f780:	000352d4 	.word	0x000352d4
   2f784:	000352f0 	.word	0x000352f0
   2f788:	00035314 	.word	0x00035314
   2f78c:	000352d8 	.word	0x000352d8
   2f790:	000352dc 	.word	0x000352dc
   2f794:	00034408 	.word	0x00034408
   2f798:	000352f4 	.word	0x000352f4
   2f79c:	00034328 	.word	0x00034328
   2f7a0:	000352fc 	.word	0x000352fc
   2f7a4:	00035318 	.word	0x00035318
   2f7a8:	0003531c 	.word	0x0003531c
   2f7ac:	00035320 	.word	0x00035320
   2f7b0:	00035328 	.word	0x00035328
                _cbor_value_decode_int64_internal(value) : value->extra;
   2f7b4:	4608      	mov	r0, r1
   2f7b6:	f7ff fb80 	bl	2eeba <_cbor_value_decode_int64_internal>
   2f7ba:	4602      	mov	r2, r0
   2f7bc:	460b      	mov	r3, r1
   2f7be:	e7ba      	b.n	2f736 <value_to_pretty+0x292>
            return CborErrorIO;
   2f7c0:	2604      	movs	r6, #4
   2f7c2:	e01f      	b.n	2f804 <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   2f7c4:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   2f7c6:	2be0      	cmp	r3, #224	; 0xe0
   2f7c8:	d108      	bne.n	2f7dc <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   2f7ca:	7b2a      	ldrb	r2, [r5, #12]
   2f7cc:	4926      	ldr	r1, [pc, #152]	; (2f868 <value_to_pretty+0x3c4>)
   2f7ce:	4638      	mov	r0, r7
   2f7d0:	f003 f960 	bl	32a94 <fprintf>
   2f7d4:	2800      	cmp	r0, #0
   2f7d6:	da11      	bge.n	2f7fc <value_to_pretty+0x358>
            return CborErrorIO;
   2f7d8:	2604      	movs	r6, #4
   2f7da:	e013      	b.n	2f804 <value_to_pretty+0x360>
   2f7dc:	f7e4 ff3a 	bl	14654 <hal_debugger_connected>
   2f7e0:	b100      	cbz	r0, 2f7e4 <value_to_pretty+0x340>
   2f7e2:	be01      	bkpt	0x0001
   2f7e4:	2300      	movs	r3, #0
   2f7e6:	461a      	mov	r2, r3
   2f7e8:	4619      	mov	r1, r3
   2f7ea:	4618      	mov	r0, r3
   2f7ec:	f7e5 fad4 	bl	14d98 <__assert_func>
        if (fprintf(out, "null") < 0)
   2f7f0:	491e      	ldr	r1, [pc, #120]	; (2f86c <value_to_pretty+0x3c8>)
   2f7f2:	4638      	mov	r0, r7
   2f7f4:	f003 f94e 	bl	32a94 <fprintf>
   2f7f8:	2800      	cmp	r0, #0
   2f7fa:	db30      	blt.n	2f85e <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   2f7fc:	4628      	mov	r0, r5
   2f7fe:	f7ff fbb5 	bl	2ef6c <cbor_value_advance_fixed>
   2f802:	4606      	mov	r6, r0
    return err;
}
   2f804:	4630      	mov	r0, r6
   2f806:	b007      	add	sp, #28
   2f808:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   2f80a:	4919      	ldr	r1, [pc, #100]	; (2f870 <value_to_pretty+0x3cc>)
   2f80c:	4638      	mov	r0, r7
   2f80e:	f003 f941 	bl	32a94 <fprintf>
   2f812:	2800      	cmp	r0, #0
   2f814:	daf2      	bge.n	2f7fc <value_to_pretty+0x358>
            return CborErrorIO;
   2f816:	2604      	movs	r6, #4
   2f818:	e7f4      	b.n	2f804 <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   2f81a:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   2f81c:	2bf5      	cmp	r3, #245	; 0xf5
   2f81e:	d109      	bne.n	2f834 <value_to_pretty+0x390>
    *result = !!value->extra;
   2f820:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   2f822:	b18b      	cbz	r3, 2f848 <value_to_pretty+0x3a4>
   2f824:	4913      	ldr	r1, [pc, #76]	; (2f874 <value_to_pretty+0x3d0>)
   2f826:	4638      	mov	r0, r7
   2f828:	f003 f934 	bl	32a94 <fprintf>
   2f82c:	2800      	cmp	r0, #0
   2f82e:	dae5      	bge.n	2f7fc <value_to_pretty+0x358>
            return CborErrorIO;
   2f830:	2604      	movs	r6, #4
   2f832:	e7e7      	b.n	2f804 <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   2f834:	f7e4 ff0e 	bl	14654 <hal_debugger_connected>
   2f838:	b100      	cbz	r0, 2f83c <value_to_pretty+0x398>
   2f83a:	be01      	bkpt	0x0001
   2f83c:	2300      	movs	r3, #0
   2f83e:	461a      	mov	r2, r3
   2f840:	4619      	mov	r1, r3
   2f842:	4618      	mov	r0, r3
   2f844:	f7e5 faa8 	bl	14d98 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   2f848:	490b      	ldr	r1, [pc, #44]	; (2f878 <value_to_pretty+0x3d4>)
   2f84a:	e7ec      	b.n	2f826 <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   2f84c:	490b      	ldr	r1, [pc, #44]	; (2f87c <value_to_pretty+0x3d8>)
   2f84e:	4638      	mov	r0, r7
   2f850:	f003 f920 	bl	32a94 <fprintf>
   2f854:	2800      	cmp	r0, #0
   2f856:	db04      	blt.n	2f862 <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   2f858:	f240 1603 	movw	r6, #259	; 0x103
   2f85c:	e7d2      	b.n	2f804 <value_to_pretty+0x360>
            return CborErrorIO;
   2f85e:	2604      	movs	r6, #4
   2f860:	e7d0      	b.n	2f804 <value_to_pretty+0x360>
            return CborErrorIO;
   2f862:	2604      	movs	r6, #4
   2f864:	e7ce      	b.n	2f804 <value_to_pretty+0x360>
   2f866:	bf00      	nop
   2f868:	0003532c 	.word	0x0003532c
   2f86c:	0003533c 	.word	0x0003533c
   2f870:	00035344 	.word	0x00035344
   2f874:	000352e8 	.word	0x000352e8
   2f878:	000352e0 	.word	0x000352e0
   2f87c:	00035350 	.word	0x00035350

0002f880 <container_to_pretty>:
{
   2f880:	b570      	push	{r4, r5, r6, lr}
   2f882:	4604      	mov	r4, r0
   2f884:	460d      	mov	r5, r1
   2f886:	4616      	mov	r6, r2
    const char *comma = "";
   2f888:	4a12      	ldr	r2, [pc, #72]	; (2f8d4 <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   2f88a:	e000      	b.n	2f88e <container_to_pretty+0xe>
{
   2f88c:	4a12      	ldr	r2, [pc, #72]	; (2f8d8 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   2f88e:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   2f890:	b1e3      	cbz	r3, 2f8cc <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   2f892:	4912      	ldr	r1, [pc, #72]	; (2f8dc <container_to_pretty+0x5c>)
   2f894:	4620      	mov	r0, r4
   2f896:	f003 f8fd 	bl	32a94 <fprintf>
   2f89a:	2800      	cmp	r0, #0
   2f89c:	db15      	blt.n	2f8ca <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   2f89e:	4629      	mov	r1, r5
   2f8a0:	4620      	mov	r0, r4
   2f8a2:	f7ff fdff 	bl	2f4a4 <value_to_pretty>
        if (err)
   2f8a6:	4603      	mov	r3, r0
   2f8a8:	b980      	cbnz	r0, 2f8cc <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   2f8aa:	2e80      	cmp	r6, #128	; 0x80
   2f8ac:	d0ee      	beq.n	2f88c <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   2f8ae:	490c      	ldr	r1, [pc, #48]	; (2f8e0 <container_to_pretty+0x60>)
   2f8b0:	4620      	mov	r0, r4
   2f8b2:	f003 f8ef 	bl	32a94 <fprintf>
   2f8b6:	2800      	cmp	r0, #0
   2f8b8:	db0a      	blt.n	2f8d0 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   2f8ba:	4629      	mov	r1, r5
   2f8bc:	4620      	mov	r0, r4
   2f8be:	f7ff fdf1 	bl	2f4a4 <value_to_pretty>
        if (err)
   2f8c2:	4603      	mov	r3, r0
   2f8c4:	2800      	cmp	r0, #0
   2f8c6:	d0e1      	beq.n	2f88c <container_to_pretty+0xc>
   2f8c8:	e000      	b.n	2f8cc <container_to_pretty+0x4c>
            return CborErrorIO;
   2f8ca:	2304      	movs	r3, #4
}
   2f8cc:	4618      	mov	r0, r3
   2f8ce:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   2f8d0:	2304      	movs	r3, #4
   2f8d2:	e7fb      	b.n	2f8cc <container_to_pretty+0x4c>
   2f8d4:	00034e30 	.word	0x00034e30
   2f8d8:	00035358 	.word	0x00035358
   2f8dc:	0003535c 	.word	0x0003535c
   2f8e0:	00035360 	.word	0x00035360

0002f8e4 <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   2f8e4:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   2f8e6:	f7ff fddd 	bl	2f4a4 <value_to_pretty>
}
   2f8ea:	bd08      	pop	{r3, pc}

0002f8ec <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   2f8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   2f8f0:	b181      	cbz	r1, 2f914 <_cbor_value_dup_string+0x28>
   2f8f2:	4605      	mov	r5, r0
   2f8f4:	4614      	mov	r4, r2
   2f8f6:	461e      	mov	r6, r3
   2f8f8:	460f      	mov	r7, r1
    assert(buflen);
   2f8fa:	b1aa      	cbz	r2, 2f928 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   2f8fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f900:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   2f902:	2300      	movs	r3, #0
   2f904:	4619      	mov	r1, r3
   2f906:	f7ff fc25 	bl	2f154 <_cbor_value_copy_string>
    if (err)
   2f90a:	4680      	mov	r8, r0
   2f90c:	b1b0      	cbz	r0, 2f93c <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   2f90e:	4640      	mov	r0, r8
   2f910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   2f914:	f7e4 fe9e 	bl	14654 <hal_debugger_connected>
   2f918:	b100      	cbz	r0, 2f91c <_cbor_value_dup_string+0x30>
   2f91a:	be01      	bkpt	0x0001
   2f91c:	2300      	movs	r3, #0
   2f91e:	461a      	mov	r2, r3
   2f920:	4619      	mov	r1, r3
   2f922:	4618      	mov	r0, r3
   2f924:	f7e5 fa38 	bl	14d98 <__assert_func>
    assert(buflen);
   2f928:	f7e4 fe94 	bl	14654 <hal_debugger_connected>
   2f92c:	b100      	cbz	r0, 2f930 <_cbor_value_dup_string+0x44>
   2f92e:	be01      	bkpt	0x0001
   2f930:	2300      	movs	r3, #0
   2f932:	461a      	mov	r2, r3
   2f934:	4619      	mov	r1, r3
   2f936:	4618      	mov	r0, r3
   2f938:	f7e5 fa2e 	bl	14d98 <__assert_func>
    ++*buflen;
   2f93c:	6820      	ldr	r0, [r4, #0]
   2f93e:	3001      	adds	r0, #1
   2f940:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   2f942:	f002 fcad 	bl	322a0 <malloc>
   2f946:	4601      	mov	r1, r0
   2f948:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   2f94a:	b158      	cbz	r0, 2f964 <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   2f94c:	4633      	mov	r3, r6
   2f94e:	4622      	mov	r2, r4
   2f950:	4628      	mov	r0, r5
   2f952:	f7ff fbff 	bl	2f154 <_cbor_value_copy_string>
    if (err) {
   2f956:	4680      	mov	r8, r0
   2f958:	2800      	cmp	r0, #0
   2f95a:	d0d8      	beq.n	2f90e <_cbor_value_dup_string+0x22>
        free(*buffer);
   2f95c:	6838      	ldr	r0, [r7, #0]
   2f95e:	f002 fcd5 	bl	3230c <free>
        return err;
   2f962:	e7d4      	b.n	2f90e <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   2f964:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   2f968:	e7d1      	b.n	2f90e <_cbor_value_dup_string+0x22>

0002f96a <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   2f96a:	b538      	push	{r3, r4, r5, lr}
   2f96c:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   2f96e:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2f970:	2500      	movs	r5, #0
   2f972:	7963      	ldrb	r3, [r4, #5]
   2f974:	42ab      	cmp	r3, r5
   2f976:	dd08      	ble.n	2f98a <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   2f978:	4620      	mov	r0, r4
   2f97a:	f000 fac7 	bl	2ff0c <fcb_getnext_area>
   2f97e:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   2f980:	69a3      	ldr	r3, [r4, #24]
   2f982:	4283      	cmp	r3, r0
   2f984:	d001      	beq.n	2f98a <fcb_free_sector_cnt+0x20>
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2f986:	3501      	adds	r5, #1
   2f988:	e7f3      	b.n	2f972 <fcb_free_sector_cnt+0x8>
            break;
        }
    }
    return i;
}
   2f98a:	4628      	mov	r0, r5
   2f98c:	bd38      	pop	{r3, r4, r5, pc}

0002f98e <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   2f98e:	69c2      	ldr	r2, [r0, #28]
   2f990:	6983      	ldr	r3, [r0, #24]
   2f992:	429a      	cmp	r2, r3
   2f994:	d001      	beq.n	2f99a <fcb_is_empty+0xc>
   2f996:	2000      	movs	r0, #0
   2f998:	4770      	bx	lr
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
   2f99a:	6a03      	ldr	r3, [r0, #32]
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   2f99c:	2b08      	cmp	r3, #8
   2f99e:	d001      	beq.n	2f9a4 <fcb_is_empty+0x16>
   2f9a0:	2000      	movs	r0, #0
   2f9a2:	4770      	bx	lr
   2f9a4:	2001      	movs	r0, #1
}
   2f9a6:	4770      	bx	lr

0002f9a8 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   2f9a8:	297f      	cmp	r1, #127	; 0x7f
   2f9aa:	d90a      	bls.n	2f9c2 <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   2f9ac:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   2f9b0:	4299      	cmp	r1, r3
   2f9b2:	d809      	bhi.n	2f9c8 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   2f9b4:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2f9b8:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   2f9ba:	09c9      	lsrs	r1, r1, #7
   2f9bc:	7041      	strb	r1, [r0, #1]
        return 2;
   2f9be:	2002      	movs	r0, #2
   2f9c0:	4770      	bx	lr
        buf[0] = len;
   2f9c2:	7001      	strb	r1, [r0, #0]
        return 1;
   2f9c4:	2001      	movs	r0, #1
   2f9c6:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   2f9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   2f9cc:	4770      	bx	lr

0002f9ce <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   2f9ce:	7803      	ldrb	r3, [r0, #0]
   2f9d0:	f990 2000 	ldrsb.w	r2, [r0]
   2f9d4:	2a00      	cmp	r2, #0
   2f9d6:	db02      	blt.n	2f9de <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   2f9d8:	800b      	strh	r3, [r1, #0]
        rc = 1;
   2f9da:	2001      	movs	r0, #1
    }
    return rc;
}
   2f9dc:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   2f9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2f9e2:	7842      	ldrb	r2, [r0, #1]
   2f9e4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   2f9e8:	800b      	strh	r3, [r1, #0]
        rc = 2;
   2f9ea:	2002      	movs	r0, #2
   2f9ec:	4770      	bx	lr

0002f9ee <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   2f9ee:	b500      	push	{lr}
   2f9f0:	b083      	sub	sp, #12
   2f9f2:	4603      	mov	r3, r0
   2f9f4:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   2f9f6:	6819      	ldr	r1, [r3, #0]
   2f9f8:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   2f9fa:	791b      	ldrb	r3, [r3, #4]
   2f9fc:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   2fa00:	23ff      	movs	r3, #255	; 0xff
   2fa02:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   2fa06:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   2fa0a:	2308      	movs	r3, #8
   2fa0c:	466a      	mov	r2, sp
   2fa0e:	2100      	movs	r1, #0
   2fa10:	f7e9 f88b 	bl	18b2a <flash_area_write>
    if (rc) {
   2fa14:	b910      	cbnz	r0, 2fa1c <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   2fa16:	b003      	add	sp, #12
   2fa18:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   2fa1c:	f06f 0001 	mvn.w	r0, #1
   2fa20:	e7f9      	b.n	2fa16 <fcb_sector_hdr_init+0x28>

0002fa22 <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   2fa22:	b530      	push	{r4, r5, lr}
   2fa24:	b083      	sub	sp, #12
   2fa26:	4604      	mov	r4, r0
   2fa28:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   2fa2a:	4615      	mov	r5, r2
   2fa2c:	b19a      	cbz	r2, 2fa56 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   2fa2e:	2308      	movs	r3, #8
   2fa30:	462a      	mov	r2, r5
   2fa32:	2100      	movs	r1, #0
   2fa34:	f7e9 f8bc 	bl	18bb0 <flash_area_read_is_empty>
    if (rc < 0) {
   2fa38:	1e03      	subs	r3, r0, #0
   2fa3a:	db0e      	blt.n	2fa5a <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   2fa3c:	2b01      	cmp	r3, #1
   2fa3e:	d00f      	beq.n	2fa60 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   2fa40:	682a      	ldr	r2, [r5, #0]
   2fa42:	6823      	ldr	r3, [r4, #0]
   2fa44:	429a      	cmp	r2, r3
   2fa46:	d10d      	bne.n	2fa64 <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   2fa48:	792a      	ldrb	r2, [r5, #4]
   2fa4a:	7923      	ldrb	r3, [r4, #4]
   2fa4c:	429a      	cmp	r2, r3
   2fa4e:	d10c      	bne.n	2fa6a <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   2fa50:	2001      	movs	r0, #1
}
   2fa52:	b003      	add	sp, #12
   2fa54:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   2fa56:	466d      	mov	r5, sp
   2fa58:	e7e9      	b.n	2fa2e <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   2fa5a:	f06f 0001 	mvn.w	r0, #1
   2fa5e:	e7f8      	b.n	2fa52 <fcb_sector_hdr_read+0x30>
        return 0;
   2fa60:	2000      	movs	r0, #0
   2fa62:	e7f6      	b.n	2fa52 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   2fa64:	f06f 0006 	mvn.w	r0, #6
   2fa68:	e7f3      	b.n	2fa52 <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   2fa6a:	f06f 0007 	mvn.w	r0, #7
   2fa6e:	e7f0      	b.n	2fa52 <fcb_sector_hdr_read+0x30>

0002fa70 <fcb_init>:
{
   2fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fa74:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   2fa76:	6883      	ldr	r3, [r0, #8]
   2fa78:	2b00      	cmp	r3, #0
   2fa7a:	f000 8087 	beq.w	2fb8c <fcb_init+0x11c>
   2fa7e:	4606      	mov	r6, r0
   2fa80:	7943      	ldrb	r3, [r0, #5]
   2fa82:	7982      	ldrb	r2, [r0, #6]
   2fa84:	1a9b      	subs	r3, r3, r2
   2fa86:	2b00      	cmp	r3, #0
   2fa88:	f340 8083 	ble.w	2fb92 <fcb_init+0x122>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   2fa8c:	f04f 0b00 	mov.w	fp, #0
   2fa90:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   2fa94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   2fa98:	46d1      	mov	r9, sl
    int max_align = 1;
   2fa9a:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2fa9e:	465f      	mov	r7, fp
   2faa0:	e00a      	b.n	2fab8 <fcb_init+0x48>
            max_align = flash_area_align(fap);
   2faa2:	4620      	mov	r0, r4
   2faa4:	f7e9 f867 	bl	18b76 <flash_area_align>
   2faa8:	4680      	mov	r8, r0
   2faaa:	e012      	b.n	2fad2 <fcb_init+0x62>
            oldest = newest = fda.fd_id;
   2faac:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   2fab0:	46a3      	mov	fp, r4
   2fab2:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   2fab4:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2fab6:	3701      	adds	r7, #1
   2fab8:	7973      	ldrb	r3, [r6, #5]
   2faba:	42bb      	cmp	r3, r7
   2fabc:	dd29      	ble.n	2fb12 <fcb_init+0xa2>
        fap = &fcb->f_sectors[i];
   2fabe:	68b4      	ldr	r4, [r6, #8]
   2fac0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2fac4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   2fac8:	4620      	mov	r0, r4
   2faca:	f7e9 f854 	bl	18b76 <flash_area_align>
        if (align > max_align) {
   2face:	4580      	cmp	r8, r0
   2fad0:	dbe7      	blt.n	2faa2 <fcb_init+0x32>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   2fad2:	aa02      	add	r2, sp, #8
   2fad4:	4621      	mov	r1, r4
   2fad6:	4630      	mov	r0, r6
   2fad8:	f7ff ffa3 	bl	2fa22 <fcb_sector_hdr_read>
        if (rc < 0) {
   2fadc:	1e05      	subs	r5, r0, #0
   2fade:	db3b      	blt.n	2fb58 <fcb_init+0xe8>
        if (rc == 0) {
   2fae0:	2d00      	cmp	r5, #0
   2fae2:	d0e8      	beq.n	2fab6 <fcb_init+0x46>
        if (oldest < 0) {
   2fae4:	f1b9 0f00 	cmp.w	r9, #0
   2fae8:	dbe0      	blt.n	2faac <fcb_init+0x3c>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   2faea:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2faee:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   2faf2:	fa0f f38a 	sxth.w	r3, sl
   2faf6:	1ad3      	subs	r3, r2, r3
   2faf8:	2b00      	cmp	r3, #0
   2fafa:	dd02      	ble.n	2fb02 <fcb_init+0x92>
            newest = fda.fd_id;
   2fafc:	468a      	mov	sl, r1
            newest_fap = fap;
   2fafe:	46a3      	mov	fp, r4
   2fb00:	e7d9      	b.n	2fab6 <fcb_init+0x46>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2fb02:	fa0f f389 	sxth.w	r3, r9
   2fb06:	1a9a      	subs	r2, r3, r2
   2fb08:	2a00      	cmp	r2, #0
   2fb0a:	ddd4      	ble.n	2fab6 <fcb_init+0x46>
            oldest = fda.fd_id;
   2fb0c:	4689      	mov	r9, r1
            oldest_fap = fap;
   2fb0e:	9401      	str	r4, [sp, #4]
   2fb10:	e7d1      	b.n	2fab6 <fcb_init+0x46>
    if (oldest < 0) {
   2fb12:	f1b9 0f00 	cmp.w	r9, #0
   2fb16:	db23      	blt.n	2fb60 <fcb_init+0xf0>
    fcb->f_align = max_align;
   2fb18:	fa5f f888 	uxtb.w	r8, r8
   2fb1c:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   2fb20:	9b01      	ldr	r3, [sp, #4]
   2fb22:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   2fb24:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2fb28:	2308      	movs	r3, #8
   2fb2a:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   2fb2c:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2fb30:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   2fb34:	ea18 0505 	ands.w	r5, r8, r5
   2fb38:	d11e      	bne.n	2fb78 <fcb_init+0x108>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   2fb3a:	f106 011c 	add.w	r1, r6, #28
   2fb3e:	4630      	mov	r0, r6
   2fb40:	f000 f9c0 	bl	2fec4 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   2fb44:	f110 0f03 	cmn.w	r0, #3
   2fb48:	d002      	beq.n	2fb50 <fcb_init+0xe0>
        if (rc != 0) {
   2fb4a:	2800      	cmp	r0, #0
   2fb4c:	d0f5      	beq.n	2fb3a <fcb_init+0xca>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   2fb4e:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   2fb50:	f106 000c 	add.w	r0, r6, #12
   2fb54:	f7e6 fea4 	bl	168a0 <os_mutex_init>
}
   2fb58:	4628      	mov	r0, r5
   2fb5a:	b005      	add	sp, #20
   2fb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   2fb60:	68b3      	ldr	r3, [r6, #8]
   2fb62:	461c      	mov	r4, r3
   2fb64:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   2fb66:	2200      	movs	r2, #0
   2fb68:	4619      	mov	r1, r3
   2fb6a:	4630      	mov	r0, r6
   2fb6c:	f7ff ff3f 	bl	2f9ee <fcb_sector_hdr_init>
        if (rc) {
   2fb70:	4682      	mov	sl, r0
   2fb72:	b988      	cbnz	r0, 2fb98 <fcb_init+0x128>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   2fb74:	46a3      	mov	fp, r4
   2fb76:	e7cf      	b.n	2fb18 <fcb_init+0xa8>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2fb78:	f7e4 fd6c 	bl	14654 <hal_debugger_connected>
   2fb7c:	b100      	cbz	r0, 2fb80 <fcb_init+0x110>
   2fb7e:	be01      	bkpt	0x0001
   2fb80:	2300      	movs	r3, #0
   2fb82:	461a      	mov	r2, r3
   2fb84:	4619      	mov	r1, r3
   2fb86:	4618      	mov	r0, r3
   2fb88:	f7e5 f906 	bl	14d98 <__assert_func>
        return FCB_ERR_ARGS;
   2fb8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fb90:	e7e2      	b.n	2fb58 <fcb_init+0xe8>
   2fb92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fb96:	e7df      	b.n	2fb58 <fcb_init+0xe8>
            return rc;
   2fb98:	4605      	mov	r5, r0
   2fb9a:	e7dd      	b.n	2fb58 <fcb_init+0xe8>

0002fb9c <fcb_offset_last_n>:
 * @return 0 on there are any fcbs aviable; FCB_ERR_NOVAR otherwise
 */
int
fcb_offset_last_n(struct fcb *fcb, uint8_t entries,
        struct fcb_entry *last_n_entry)
{
   2fb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb9e:	b085      	sub	sp, #20
   2fba0:	4606      	mov	r6, r0
   2fba2:	4615      	mov	r5, r2
    struct fcb_entry loc;
    int i;

    /* assure a minimum amount of entries */
    if (!entries) {
   2fba4:	460f      	mov	r7, r1
   2fba6:	b901      	cbnz	r1, 2fbaa <fcb_offset_last_n+0xe>
        entries = 1;
   2fba8:	2701      	movs	r7, #1
    }

    i = 0;
    memset(&loc, 0, sizeof(loc));
   2fbaa:	2400      	movs	r4, #0
   2fbac:	9400      	str	r4, [sp, #0]
   2fbae:	9401      	str	r4, [sp, #4]
   2fbb0:	9402      	str	r4, [sp, #8]
   2fbb2:	9403      	str	r4, [sp, #12]
    while (!fcb_getnext(fcb, &loc)) {
   2fbb4:	e002      	b.n	2fbbc <fcb_offset_last_n+0x20>
        if (i == 0) {
            /* Start from the beginning of fcb entries */
            *last_n_entry = loc;
        } else if (i > (entries - 1)) {
   2fbb6:	42a7      	cmp	r7, r4
   2fbb8:	dd0d      	ble.n	2fbd6 <fcb_offset_last_n+0x3a>
            /* Update last_n_entry after n entries and keep updating */
            fcb_getnext(fcb, last_n_entry);
        }
        i++;
   2fbba:	3401      	adds	r4, #1
    while (!fcb_getnext(fcb, &loc)) {
   2fbbc:	4669      	mov	r1, sp
   2fbbe:	4630      	mov	r0, r6
   2fbc0:	f000 f9f4 	bl	2ffac <fcb_getnext>
   2fbc4:	b960      	cbnz	r0, 2fbe0 <fcb_offset_last_n+0x44>
        if (i == 0) {
   2fbc6:	2c00      	cmp	r4, #0
   2fbc8:	d1f5      	bne.n	2fbb6 <fcb_offset_last_n+0x1a>
            *last_n_entry = loc;
   2fbca:	ab04      	add	r3, sp, #16
   2fbcc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   2fbd0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2fbd4:	e7f1      	b.n	2fbba <fcb_offset_last_n+0x1e>
            fcb_getnext(fcb, last_n_entry);
   2fbd6:	4629      	mov	r1, r5
   2fbd8:	4630      	mov	r0, r6
   2fbda:	f000 f9e7 	bl	2ffac <fcb_getnext>
   2fbde:	e7ec      	b.n	2fbba <fcb_offset_last_n+0x1e>
    }

    return (i == 0) ? FCB_ERR_NOVAR : 0;
   2fbe0:	b114      	cbz	r4, 2fbe8 <fcb_offset_last_n+0x4c>
   2fbe2:	2000      	movs	r0, #0
}
   2fbe4:	b005      	add	sp, #20
   2fbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (i == 0) ? FCB_ERR_NOVAR : 0;
   2fbe8:	f06f 0002 	mvn.w	r0, #2
   2fbec:	e7fa      	b.n	2fbe4 <fcb_offset_last_n+0x48>

0002fbee <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   2fbee:	b538      	push	{r3, r4, r5, lr}
   2fbf0:	4604      	mov	r4, r0
    int rc;

    rc = 0;
   2fbf2:	2500      	movs	r5, #0
    while (!fcb_is_empty(fcb)) {
   2fbf4:	4620      	mov	r0, r4
   2fbf6:	f7ff feca 	bl	2f98e <fcb_is_empty>
   2fbfa:	b928      	cbnz	r0, 2fc08 <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   2fbfc:	4620      	mov	r0, r4
   2fbfe:	f000 f9ef 	bl	2ffe0 <fcb_rotate>
        if (rc) {
   2fc02:	4605      	mov	r5, r0
   2fc04:	2800      	cmp	r0, #0
   2fc06:	d0f5      	beq.n	2fbf4 <fcb_clear+0x6>
            break;
        }
    }
    return rc;
}
   2fc08:	4628      	mov	r0, r5
   2fc0a:	bd38      	pop	{r3, r4, r5, pc}

0002fc0c <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   2fc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fc0e:	4605      	mov	r5, r0
   2fc10:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   2fc12:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   2fc14:	2400      	movs	r4, #0
    rfa = NULL;
   2fc16:	4626      	mov	r6, r4
   2fc18:	e006      	b.n	2fc28 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   2fc1a:	69ab      	ldr	r3, [r5, #24]
   2fc1c:	428b      	cmp	r3, r1
   2fc1e:	d00b      	beq.n	2fc38 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   2fc20:	1c63      	adds	r3, r4, #1
   2fc22:	42bc      	cmp	r4, r7
   2fc24:	da09      	bge.n	2fc3a <fcb_new_area+0x2e>
   2fc26:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   2fc28:	4628      	mov	r0, r5
   2fc2a:	f000 f96f 	bl	2ff0c <fcb_getnext_area>
   2fc2e:	4601      	mov	r1, r0
        if (!rfa) {
   2fc30:	2e00      	cmp	r6, #0
   2fc32:	d1f2      	bne.n	2fc1a <fcb_new_area+0xe>
            rfa = fa;
   2fc34:	4606      	mov	r6, r0
   2fc36:	e7f0      	b.n	2fc1a <fcb_new_area+0xe>
            return NULL;
   2fc38:	2600      	movs	r6, #0
    return rfa;
}
   2fc3a:	4630      	mov	r0, r6
   2fc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002fc3e <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2fc3e:	b538      	push	{r3, r4, r5, lr}
   2fc40:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   2fc42:	2100      	movs	r1, #0
   2fc44:	f7ff ffe2 	bl	2fc0c <fcb_new_area>
    if (!fa) {
   2fc48:	b178      	cbz	r0, 2fc6a <fcb_append_to_scratch+0x2c>
   2fc4a:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2fc4c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2fc4e:	3201      	adds	r2, #1
   2fc50:	b292      	uxth	r2, r2
   2fc52:	4601      	mov	r1, r0
   2fc54:	4620      	mov	r0, r4
   2fc56:	f7ff feca 	bl	2f9ee <fcb_sector_hdr_init>
    if (rc) {
   2fc5a:	b928      	cbnz	r0, 2fc68 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   2fc5c:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2fc5e:	2308      	movs	r3, #8
   2fc60:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   2fc62:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   2fc64:	3301      	adds	r3, #1
   2fc66:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   2fc68:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   2fc6a:	f06f 0003 	mvn.w	r0, #3
   2fc6e:	e7fb      	b.n	2fc68 <fcb_append_to_scratch+0x2a>

0002fc70 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2fc70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fc74:	b082      	sub	sp, #8
   2fc76:	4605      	mov	r5, r0
   2fc78:	460c      	mov	r4, r1
   2fc7a:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   2fc7c:	a801      	add	r0, sp, #4
   2fc7e:	f7ff fe93 	bl	2f9a8 <fcb_put_len>
    if (cnt < 0) {
   2fc82:	1e06      	subs	r6, r0, #0
   2fc84:	db58      	blt.n	2fd38 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   2fc86:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2fc8a:	2b01      	cmp	r3, #1
   2fc8c:	d933      	bls.n	2fcf6 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fc8e:	1e58      	subs	r0, r3, #1
   2fc90:	fa10 f686 	uxtah	r6, r0, r6
   2fc94:	4258      	negs	r0, r3
   2fc96:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   2fc98:	2b01      	cmp	r3, #1
   2fc9a:	d903      	bls.n	2fca4 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fc9c:	1e59      	subs	r1, r3, #1
   2fc9e:	440c      	add	r4, r1
   2fca0:	4259      	negs	r1, r3
   2fca2:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2fca4:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   2fca6:	2b01      	cmp	r3, #1
   2fca8:	d927      	bls.n	2fcfa <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fcaa:	425c      	negs	r4, r3
   2fcac:	401c      	ands	r4, r3
   2fcae:	440c      	add	r4, r1
   2fcb0:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2fcb2:	f105 080c 	add.w	r8, r5, #12
   2fcb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fcba:	4640      	mov	r0, r8
   2fcbc:	f7e6 fe5a 	bl	16974 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2fcc0:	b108      	cbz	r0, 2fcc6 <fcb_append+0x56>
   2fcc2:	2809      	cmp	r0, #9
   2fcc4:	d14e      	bne.n	2fd64 <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   2fcc6:	6a2b      	ldr	r3, [r5, #32]
   2fcc8:	4423      	add	r3, r4
   2fcca:	46b1      	mov	r9, r6
   2fccc:	441e      	add	r6, r3
   2fcce:	69eb      	ldr	r3, [r5, #28]
   2fcd0:	689b      	ldr	r3, [r3, #8]
   2fcd2:	429e      	cmp	r6, r3
   2fcd4:	d923      	bls.n	2fd1e <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   2fcd6:	79a9      	ldrb	r1, [r5, #6]
   2fcd8:	4628      	mov	r0, r5
   2fcda:	f7ff ff97 	bl	2fc0c <fcb_new_area>
        if (!fa || (fa->fa_size <
   2fcde:	4682      	mov	sl, r0
   2fce0:	2800      	cmp	r0, #0
   2fce2:	d03c      	beq.n	2fd5e <fcb_append+0xee>
   2fce4:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   2fce6:	eb04 0309 	add.w	r3, r4, r9
   2fcea:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   2fcec:	429a      	cmp	r2, r3
   2fcee:	d206      	bcs.n	2fcfe <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   2fcf0:	f06f 0603 	mvn.w	r6, #3
   2fcf4:	e01d      	b.n	2fd32 <fcb_append+0xc2>
        return len;
   2fcf6:	b2b6      	uxth	r6, r6
   2fcf8:	e7ce      	b.n	2fc98 <fcb_append+0x28>
   2fcfa:	2401      	movs	r4, #1
   2fcfc:	e7d7      	b.n	2fcae <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2fcfe:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   2fd00:	3201      	adds	r2, #1
   2fd02:	b292      	uxth	r2, r2
   2fd04:	4601      	mov	r1, r0
   2fd06:	4628      	mov	r0, r5
   2fd08:	f7ff fe71 	bl	2f9ee <fcb_sector_hdr_init>
        if (rc) {
   2fd0c:	4606      	mov	r6, r0
   2fd0e:	b980      	cbnz	r0, 2fd32 <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   2fd10:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2fd14:	2308      	movs	r3, #8
   2fd16:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   2fd18:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   2fd1a:	3301      	adds	r3, #1
   2fd1c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   2fd1e:	464b      	mov	r3, r9
   2fd20:	aa01      	add	r2, sp, #4
   2fd22:	6a29      	ldr	r1, [r5, #32]
   2fd24:	69e8      	ldr	r0, [r5, #28]
   2fd26:	f7e8 ff00 	bl	18b2a <flash_area_write>
    if (rc) {
   2fd2a:	4606      	mov	r6, r0
   2fd2c:	b140      	cbz	r0, 2fd40 <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   2fd2e:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   2fd32:	4640      	mov	r0, r8
   2fd34:	f7e6 fdbe 	bl	168b4 <os_mutex_release>
    return rc;
}
   2fd38:	4630      	mov	r0, r6
   2fd3a:	b002      	add	sp, #8
   2fd3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   2fd40:	69eb      	ldr	r3, [r5, #28]
   2fd42:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   2fd44:	6a2b      	ldr	r3, [r5, #32]
   2fd46:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   2fd48:	444b      	add	r3, r9
   2fd4a:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   2fd4c:	4423      	add	r3, r4
   2fd4e:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   2fd50:	68bb      	ldr	r3, [r7, #8]
   2fd52:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   2fd54:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   2fd56:	4640      	mov	r0, r8
   2fd58:	f7e6 fdac 	bl	168b4 <os_mutex_release>
    return FCB_OK;
   2fd5c:	e7ec      	b.n	2fd38 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   2fd5e:	f06f 0603 	mvn.w	r6, #3
   2fd62:	e7e6      	b.n	2fd32 <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   2fd64:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2fd68:	e7e6      	b.n	2fd38 <fcb_append+0xc8>

0002fd6a <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   2fd6a:	b530      	push	{r4, r5, lr}
   2fd6c:	b083      	sub	sp, #12
   2fd6e:	4605      	mov	r5, r0
   2fd70:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2fd72:	f10d 0207 	add.w	r2, sp, #7
   2fd76:	f000 f818 	bl	2fdaa <fcb_elem_crc8>
    if (rc) {
   2fd7a:	b988      	cbnz	r0, 2fda0 <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2fd7c:	68a0      	ldr	r0, [r4, #8]
   2fd7e:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2fd80:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2fd84:	2b01      	cmp	r3, #1
   2fd86:	d903      	bls.n	2fd90 <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fd88:	1e5a      	subs	r2, r3, #1
   2fd8a:	4411      	add	r1, r2
   2fd8c:	425b      	negs	r3, r3
   2fd8e:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   2fd90:	2301      	movs	r3, #1
   2fd92:	f10d 0207 	add.w	r2, sp, #7
   2fd96:	4401      	add	r1, r0
   2fd98:	6820      	ldr	r0, [r4, #0]
   2fd9a:	f7e8 fec6 	bl	18b2a <flash_area_write>
    if (rc) {
   2fd9e:	b908      	cbnz	r0, 2fda4 <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   2fda0:	b003      	add	sp, #12
   2fda2:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   2fda4:	f06f 0001 	mvn.w	r0, #1
   2fda8:	e7fa      	b.n	2fda0 <fcb_append_finish+0x36>

0002fdaa <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   2fdaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2fdae:	b08b      	sub	sp, #44	; 0x2c
   2fdb0:	4605      	mov	r5, r0
   2fdb2:	4688      	mov	r8, r1
   2fdb4:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   2fdb6:	6849      	ldr	r1, [r1, #4]
   2fdb8:	1c8a      	adds	r2, r1, #2
   2fdba:	f8d8 0000 	ldr.w	r0, [r8]
   2fdbe:	6883      	ldr	r3, [r0, #8]
   2fdc0:	429a      	cmp	r2, r3
   2fdc2:	d84a      	bhi.n	2fe5a <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   2fdc4:	2302      	movs	r3, #2
   2fdc6:	aa02      	add	r2, sp, #8
   2fdc8:	f7e8 fef2 	bl	18bb0 <flash_area_read_is_empty>
    if (rc < 0) {
   2fdcc:	1e03      	subs	r3, r0, #0
   2fdce:	db47      	blt.n	2fe60 <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   2fdd0:	2b01      	cmp	r3, #1
   2fdd2:	d048      	beq.n	2fe66 <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   2fdd4:	f10d 0106 	add.w	r1, sp, #6
   2fdd8:	a802      	add	r0, sp, #8
   2fdda:	f7ff fdf8 	bl	2f9ce <fcb_get_len>
   2fdde:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   2fde0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   2fde4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2fde8:	2b01      	cmp	r3, #1
   2fdea:	d918      	bls.n	2fe1e <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fdec:	1e5a      	subs	r2, r3, #1
   2fdee:	fa12 f280 	uxtah	r2, r2, r0
   2fdf2:	425b      	negs	r3, r3
   2fdf4:	4013      	ands	r3, r2
   2fdf6:	440b      	add	r3, r1
   2fdf8:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   2fdfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2fe00:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   2fe04:	f003 fa84 	bl	33310 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   2fe08:	4622      	mov	r2, r4
   2fe0a:	a902      	add	r1, sp, #8
   2fe0c:	f003 fa82 	bl	33314 <crc8_calc>
   2fe10:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   2fe12:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   2fe16:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   2fe1a:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   2fe1c:	e010      	b.n	2fe40 <fcb_elem_crc8+0x96>
        return len;
   2fe1e:	b283      	uxth	r3, r0
   2fe20:	e7e9      	b.n	2fdf6 <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   2fe22:	4623      	mov	r3, r4
   2fe24:	aa02      	add	r2, sp, #8
   2fe26:	4629      	mov	r1, r5
   2fe28:	f8d8 0000 	ldr.w	r0, [r8]
   2fe2c:	f7e8 fe6a 	bl	18b04 <flash_area_read>
        if (rc) {
   2fe30:	b9e0      	cbnz	r0, 2fe6c <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   2fe32:	4622      	mov	r2, r4
   2fe34:	a902      	add	r1, sp, #8
   2fe36:	4630      	mov	r0, r6
   2fe38:	f003 fa6c 	bl	33314 <crc8_calc>
   2fe3c:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   2fe3e:	4425      	add	r5, r4
   2fe40:	42bd      	cmp	r5, r7
   2fe42:	d204      	bcs.n	2fe4e <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   2fe44:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   2fe46:	2c20      	cmp	r4, #32
   2fe48:	d9eb      	bls.n	2fe22 <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   2fe4a:	2420      	movs	r4, #32
   2fe4c:	e7e9      	b.n	2fe22 <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   2fe4e:	f889 6000 	strb.w	r6, [r9]

    return 0;
   2fe52:	2000      	movs	r0, #0
}
   2fe54:	b00b      	add	sp, #44	; 0x2c
   2fe56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   2fe5a:	f06f 0002 	mvn.w	r0, #2
   2fe5e:	e7f9      	b.n	2fe54 <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   2fe60:	f06f 0001 	mvn.w	r0, #1
   2fe64:	e7f6      	b.n	2fe54 <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   2fe66:	f06f 0002 	mvn.w	r0, #2
   2fe6a:	e7f3      	b.n	2fe54 <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   2fe6c:	f06f 0001 	mvn.w	r0, #1
   2fe70:	e7f0      	b.n	2fe54 <fcb_elem_crc8+0xaa>

0002fe72 <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   2fe72:	b530      	push	{r4, r5, lr}
   2fe74:	b083      	sub	sp, #12
   2fe76:	4605      	mov	r5, r0
   2fe78:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2fe7a:	f10d 0207 	add.w	r2, sp, #7
   2fe7e:	f7ff ff94 	bl	2fdaa <fcb_elem_crc8>
    if (rc) {
   2fe82:	b9b8      	cbnz	r0, 2feb4 <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2fe84:	68a0      	ldr	r0, [r4, #8]
   2fe86:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2fe88:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2fe8c:	2b01      	cmp	r3, #1
   2fe8e:	d903      	bls.n	2fe98 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fe90:	1e5a      	subs	r2, r3, #1
   2fe92:	4411      	add	r1, r2
   2fe94:	425b      	negs	r3, r3
   2fe96:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   2fe98:	2301      	movs	r3, #1
   2fe9a:	f10d 0206 	add.w	r2, sp, #6
   2fe9e:	4401      	add	r1, r0
   2fea0:	6820      	ldr	r0, [r4, #0]
   2fea2:	f7e8 fe2f 	bl	18b04 <flash_area_read>
    if (rc) {
   2fea6:	b938      	cbnz	r0, 2feb8 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   2fea8:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2feac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2feb0:	429a      	cmp	r2, r3
   2feb2:	d104      	bne.n	2febe <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   2feb4:	b003      	add	sp, #12
   2feb6:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   2feb8:	f06f 0001 	mvn.w	r0, #1
   2febc:	e7fa      	b.n	2feb4 <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   2febe:	f06f 0005 	mvn.w	r0, #5
   2fec2:	e7f7      	b.n	2feb4 <fcb_elem_info+0x42>

0002fec4 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   2fec4:	b570      	push	{r4, r5, r6, lr}
   2fec6:	4606      	mov	r6, r0
   2fec8:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   2feca:	f7ff ffd2 	bl	2fe72 <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   2fece:	b168      	cbz	r0, 2feec <fcb_getnext_in_area+0x28>
   2fed0:	f110 0f06 	cmn.w	r0, #6
   2fed4:	d00a      	beq.n	2feec <fcb_getnext_in_area+0x28>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   2fed6:	bd70      	pop	{r4, r5, r6, pc}
        return len;
   2fed8:	2301      	movs	r3, #1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   2feda:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   2fedc:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   2fede:	4629      	mov	r1, r5
   2fee0:	4630      	mov	r0, r6
   2fee2:	f7ff ffc6 	bl	2fe72 <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   2fee6:	f110 0f06 	cmn.w	r0, #6
   2feea:	d1f4      	bne.n	2fed6 <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   2feec:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   2feee:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   2fef0:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   2fef4:	2b01      	cmp	r3, #1
   2fef6:	d903      	bls.n	2ff00 <fcb_getnext_in_area+0x3c>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2fef8:	1e59      	subs	r1, r3, #1
   2fefa:	440a      	add	r2, r1
   2fefc:	4259      	negs	r1, r3
   2fefe:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   2ff00:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   2ff02:	2b01      	cmp	r3, #1
   2ff04:	d9e8      	bls.n	2fed8 <fcb_getnext_in_area+0x14>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2ff06:	4259      	negs	r1, r3
   2ff08:	400b      	ands	r3, r1
   2ff0a:	e7e6      	b.n	2feda <fcb_getnext_in_area+0x16>

0002ff0c <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   2ff0c:	4603      	mov	r3, r0
    fap++;
   2ff0e:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   2ff10:	6880      	ldr	r0, [r0, #8]
   2ff12:	795b      	ldrb	r3, [r3, #5]
   2ff14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ff18:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2ff1c:	428b      	cmp	r3, r1
   2ff1e:	d900      	bls.n	2ff22 <fcb_getnext_area+0x16>
    fap++;
   2ff20:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   2ff22:	4770      	bx	lr

0002ff24 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   2ff24:	b538      	push	{r3, r4, r5, lr}
   2ff26:	4605      	mov	r5, r0
   2ff28:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   2ff2a:	680b      	ldr	r3, [r1, #0]
   2ff2c:	b313      	cbz	r3, 2ff74 <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   2ff2e:	6863      	ldr	r3, [r4, #4]
   2ff30:	bb1b      	cbnz	r3, 2ff7a <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   2ff32:	2308      	movs	r3, #8
   2ff34:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   2ff36:	4621      	mov	r1, r4
   2ff38:	4628      	mov	r0, r5
   2ff3a:	f7ff ff9a 	bl	2fe72 <fcb_elem_info>
   2ff3e:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   2ff40:	f113 0f06 	cmn.w	r3, #6
   2ff44:	d01f      	beq.n	2ff86 <fcb_getnext_nolock+0x62>
   2ff46:	b19b      	cbz	r3, 2ff70 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   2ff48:	6821      	ldr	r1, [r4, #0]
   2ff4a:	69eb      	ldr	r3, [r5, #28]
   2ff4c:	4299      	cmp	r1, r3
   2ff4e:	d02a      	beq.n	2ffa6 <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   2ff50:	4628      	mov	r0, r5
   2ff52:	f7ff ffdb 	bl	2ff0c <fcb_getnext_area>
   2ff56:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   2ff58:	2308      	movs	r3, #8
   2ff5a:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   2ff5c:	4621      	mov	r1, r4
   2ff5e:	4628      	mov	r0, r5
   2ff60:	f7ff ff87 	bl	2fe72 <fcb_elem_info>
   2ff64:	4603      	mov	r3, r0
            switch (rc) {
   2ff66:	f110 0f06 	cmn.w	r0, #6
   2ff6a:	d00c      	beq.n	2ff86 <fcb_getnext_nolock+0x62>
   2ff6c:	2800      	cmp	r0, #0
   2ff6e:	d1eb      	bne.n	2ff48 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   2ff70:	4618      	mov	r0, r3
   2ff72:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   2ff74:	6983      	ldr	r3, [r0, #24]
   2ff76:	600b      	str	r3, [r1, #0]
   2ff78:	e7d9      	b.n	2ff2e <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   2ff7a:	4621      	mov	r1, r4
   2ff7c:	4628      	mov	r0, r5
   2ff7e:	f7ff ffa1 	bl	2fec4 <fcb_getnext_in_area>
   2ff82:	4603      	mov	r3, r0
   2ff84:	e7dc      	b.n	2ff40 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   2ff86:	f113 0f06 	cmn.w	r3, #6
   2ff8a:	d10a      	bne.n	2ffa2 <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   2ff8c:	4621      	mov	r1, r4
   2ff8e:	4628      	mov	r0, r5
   2ff90:	f7ff ff98 	bl	2fec4 <fcb_getnext_in_area>
        if (rc == 0) {
   2ff94:	4603      	mov	r3, r0
   2ff96:	2800      	cmp	r0, #0
   2ff98:	d0ea      	beq.n	2ff70 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   2ff9a:	f110 0f06 	cmn.w	r0, #6
   2ff9e:	d0f2      	beq.n	2ff86 <fcb_getnext_nolock+0x62>
next_sector:
   2ffa0:	e7d2      	b.n	2ff48 <fcb_getnext_nolock+0x24>
    return 0;
   2ffa2:	2300      	movs	r3, #0
   2ffa4:	e7e4      	b.n	2ff70 <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   2ffa6:	f06f 0302 	mvn.w	r3, #2
   2ffaa:	e7e1      	b.n	2ff70 <fcb_getnext_nolock+0x4c>

0002ffac <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   2ffac:	b570      	push	{r4, r5, r6, lr}
   2ffae:	4604      	mov	r4, r0
   2ffb0:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2ffb2:	f100 060c 	add.w	r6, r0, #12
   2ffb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ffba:	4630      	mov	r0, r6
   2ffbc:	f7e6 fcda 	bl	16974 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2ffc0:	b108      	cbz	r0, 2ffc6 <fcb_getnext+0x1a>
   2ffc2:	2809      	cmp	r0, #9
   2ffc4:	d109      	bne.n	2ffda <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   2ffc6:	4629      	mov	r1, r5
   2ffc8:	4620      	mov	r0, r4
   2ffca:	f7ff ffab 	bl	2ff24 <fcb_getnext_nolock>
   2ffce:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   2ffd0:	4630      	mov	r0, r6
   2ffd2:	f7e6 fc6f 	bl	168b4 <os_mutex_release>

    return rc;
}
   2ffd6:	4620      	mov	r0, r4
   2ffd8:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   2ffda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ffde:	e7fa      	b.n	2ffd6 <fcb_getnext+0x2a>

0002ffe0 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   2ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ffe2:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2ffe4:	f100 050c 	add.w	r5, r0, #12
   2ffe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ffec:	4628      	mov	r0, r5
   2ffee:	f7e6 fcc1 	bl	16974 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2fff2:	b108      	cbz	r0, 2fff8 <fcb_rotate+0x18>
   2fff4:	2809      	cmp	r0, #9
   2fff6:	d12c      	bne.n	30052 <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   2fff8:	69a0      	ldr	r0, [r4, #24]
   2fffa:	6882      	ldr	r2, [r0, #8]
   2fffc:	2100      	movs	r1, #0
   2fffe:	f7e8 fda7 	bl	18b50 <flash_area_erase>
    if (rc) {
   30002:	4606      	mov	r6, r0
   30004:	bb10      	cbnz	r0, 3004c <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   30006:	69a1      	ldr	r1, [r4, #24]
   30008:	69e3      	ldr	r3, [r4, #28]
   3000a:	4299      	cmp	r1, r3
   3000c:	d009      	beq.n	30022 <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   3000e:	69a1      	ldr	r1, [r4, #24]
   30010:	4620      	mov	r0, r4
   30012:	f7ff ff7b 	bl	2ff0c <fcb_getnext_area>
   30016:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   30018:	4628      	mov	r0, r5
   3001a:	f7e6 fc4b 	bl	168b4 <os_mutex_release>
    return rc;
}
   3001e:	4630      	mov	r0, r6
   30020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   30022:	4620      	mov	r0, r4
   30024:	f7ff ff72 	bl	2ff0c <fcb_getnext_area>
   30028:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   3002a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   3002c:	3201      	adds	r2, #1
   3002e:	b292      	uxth	r2, r2
   30030:	4601      	mov	r1, r0
   30032:	4620      	mov	r0, r4
   30034:	f7ff fcdb 	bl	2f9ee <fcb_sector_hdr_init>
        if (rc) {
   30038:	4606      	mov	r6, r0
   3003a:	2800      	cmp	r0, #0
   3003c:	d1ec      	bne.n	30018 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   3003e:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   30040:	2308      	movs	r3, #8
   30042:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   30044:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   30046:	3301      	adds	r3, #1
   30048:	85a3      	strh	r3, [r4, #44]	; 0x2c
   3004a:	e7e0      	b.n	3000e <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   3004c:	f06f 0601 	mvn.w	r6, #1
   30050:	e7e2      	b.n	30018 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   30052:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   30056:	e7e2      	b.n	3001e <fcb_rotate+0x3e>

00030058 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   30058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3005c:	b084      	sub	sp, #16
   3005e:	4606      	mov	r6, r0
   30060:	460d      	mov	r5, r1
   30062:	4617      	mov	r7, r2
   30064:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   30066:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   30068:	2300      	movs	r3, #0
   3006a:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   3006c:	f100 040c 	add.w	r4, r0, #12
   30070:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30074:	4620      	mov	r0, r4
   30076:	f7e6 fc7d 	bl	16974 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   3007a:	b170      	cbz	r0, 3009a <fcb_walk+0x42>
   3007c:	2809      	cmp	r0, #9
   3007e:	d00c      	beq.n	3009a <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   30080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30084:	e01e      	b.n	300c4 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   30086:	4641      	mov	r1, r8
   30088:	4668      	mov	r0, sp
   3008a:	47b8      	blx	r7
        if (rc) {
   3008c:	4603      	mov	r3, r0
   3008e:	b9c8      	cbnz	r0, 300c4 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   30090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30094:	4620      	mov	r0, r4
   30096:	f7e6 fc6d 	bl	16974 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   3009a:	4669      	mov	r1, sp
   3009c:	4630      	mov	r0, r6
   3009e:	f7ff ff41 	bl	2ff24 <fcb_getnext_nolock>
   300a2:	f110 0f03 	cmn.w	r0, #3
   300a6:	d009      	beq.n	300bc <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   300a8:	4620      	mov	r0, r4
   300aa:	f7e6 fc03 	bl	168b4 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   300ae:	2d00      	cmp	r5, #0
   300b0:	d0e9      	beq.n	30086 <fcb_walk+0x2e>
   300b2:	9900      	ldr	r1, [sp, #0]
   300b4:	42a9      	cmp	r1, r5
   300b6:	d0e6      	beq.n	30086 <fcb_walk+0x2e>
            return 0;
   300b8:	2300      	movs	r3, #0
   300ba:	e003      	b.n	300c4 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   300bc:	4620      	mov	r0, r4
   300be:	f7e6 fbf9 	bl	168b4 <os_mutex_release>
    return 0;
   300c2:	2300      	movs	r3, #0
}
   300c4:	4618      	mov	r0, r3
   300c6:	b004      	add	sp, #16
   300c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000300cc <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   300cc:	b908      	cbnz	r0, 300d2 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   300ce:	4802      	ldr	r0, [pc, #8]	; (300d8 <hal_bsp_flash_dev+0xc>)
   300d0:	4770      	bx	lr
        return (NULL);
   300d2:	2000      	movs	r0, #0
}
   300d4:	4770      	bx	lr
   300d6:	bf00      	nop
   300d8:	00035368 	.word	0x00035368

000300dc <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   300dc:	b500      	push	{lr}
   300de:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   300e0:	2301      	movs	r3, #1
   300e2:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   300e6:	a903      	add	r1, sp, #12
   300e8:	2000      	movs	r0, #0
   300ea:	f000 fccf 	bl	30a8c <hal_timer_init>
    assert(rc == 0);
   300ee:	b990      	cbnz	r0, 30116 <hal_bsp_init+0x3a>
    rc = hal_timer_init(3, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   300f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   300f4:	f001 ff58 	bl	31fa8 <os_cputime_init>
    assert(rc == 0);
   300f8:	b9b8      	cbnz	r0, 3012a <hal_bsp_init+0x4e>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   300fa:	4b16      	ldr	r3, [pc, #88]	; (30154 <hal_bsp_init+0x78>)
   300fc:	9301      	str	r3, [sp, #4]
   300fe:	4b16      	ldr	r3, [pc, #88]	; (30158 <hal_bsp_init+0x7c>)
   30100:	9300      	str	r3, [sp, #0]
   30102:	2300      	movs	r3, #0
   30104:	2201      	movs	r2, #1
   30106:	4915      	ldr	r1, [pc, #84]	; (3015c <hal_bsp_init+0x80>)
   30108:	4815      	ldr	r0, [pc, #84]	; (30160 <hal_bsp_init+0x84>)
   3010a:	f7e5 f8ff 	bl	1530c <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   3010e:	b9b0      	cbnz	r0, 3013e <hal_bsp_init+0x62>
    rc = os_dev_create(&os_bsp_adc0.ad_dev, "adc0",
                       OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
                       apollo3_adc_dev_init, &os_bsp_adc0_default_config);
    assert(rc == 0);
#endif
}
   30110:	b005      	add	sp, #20
   30112:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   30116:	f7e4 fa9d 	bl	14654 <hal_debugger_connected>
   3011a:	b100      	cbz	r0, 3011e <hal_bsp_init+0x42>
   3011c:	be01      	bkpt	0x0001
   3011e:	2300      	movs	r3, #0
   30120:	461a      	mov	r2, r3
   30122:	4619      	mov	r1, r3
   30124:	4618      	mov	r0, r3
   30126:	f7e4 fe37 	bl	14d98 <__assert_func>
    assert(rc == 0);
   3012a:	f7e4 fa93 	bl	14654 <hal_debugger_connected>
   3012e:	b100      	cbz	r0, 30132 <hal_bsp_init+0x56>
   30130:	be01      	bkpt	0x0001
   30132:	2300      	movs	r3, #0
   30134:	461a      	mov	r2, r3
   30136:	4619      	mov	r1, r3
   30138:	4618      	mov	r0, r3
   3013a:	f7e4 fe2d 	bl	14d98 <__assert_func>
    assert(rc == 0);
   3013e:	f7e4 fa89 	bl	14654 <hal_debugger_connected>
   30142:	b100      	cbz	r0, 30146 <hal_bsp_init+0x6a>
   30144:	be01      	bkpt	0x0001
   30146:	2300      	movs	r3, #0
   30148:	461a      	mov	r2, r3
   3014a:	4619      	mov	r1, r3
   3014c:	4618      	mov	r0, r3
   3014e:	f7e4 fe23 	bl	14d98 <__assert_func>
   30152:	bf00      	nop
   30154:	00035364 	.word	0x00035364
   30158:	000302c1 	.word	0x000302c1
   3015c:	0003434c 	.word	0x0003434c
   30160:	10003c54 	.word	0x10003c54

00030164 <hal_bsp_hw_id>:

int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
    return 0;
}
   30164:	2000      	movs	r0, #0
   30166:	4770      	bx	lr

00030168 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   30168:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   3016a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3016c:	b118      	cbz	r0, 30176 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   3016e:	3801      	subs	r0, #1
   30170:	f000 feb8 	bl	30ee4 <hal_uart_blocking_tx>
}
   30174:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   30176:	f7e4 fa6d 	bl	14654 <hal_debugger_connected>
   3017a:	b100      	cbz	r0, 3017e <uart_hal_blocking_tx+0x16>
   3017c:	be01      	bkpt	0x0001
   3017e:	2300      	movs	r3, #0
   30180:	461a      	mov	r2, r3
   30182:	4619      	mov	r1, r3
   30184:	4618      	mov	r0, r3
   30186:	f7e4 fe07 	bl	14d98 <__assert_func>

0003018a <uart_hal_start_rx>:
{
   3018a:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   3018c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3018e:	b118      	cbz	r0, 30198 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   30190:	3801      	subs	r0, #1
   30192:	f000 fe73 	bl	30e7c <hal_uart_start_rx>
}
   30196:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   30198:	f7e4 fa5c 	bl	14654 <hal_debugger_connected>
   3019c:	b100      	cbz	r0, 301a0 <uart_hal_start_rx+0x16>
   3019e:	be01      	bkpt	0x0001
   301a0:	2300      	movs	r3, #0
   301a2:	461a      	mov	r2, r3
   301a4:	4619      	mov	r1, r3
   301a6:	4618      	mov	r0, r3
   301a8:	f7e4 fdf6 	bl	14d98 <__assert_func>

000301ac <uart_hal_start_tx>:
{
   301ac:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   301ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
   301b0:	b118      	cbz	r0, 301ba <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   301b2:	3801      	subs	r0, #1
   301b4:	f000 fe10 	bl	30dd8 <hal_uart_start_tx>
}
   301b8:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   301ba:	f7e4 fa4b 	bl	14654 <hal_debugger_connected>
   301be:	b100      	cbz	r0, 301c2 <uart_hal_start_tx+0x16>
   301c0:	be01      	bkpt	0x0001
   301c2:	2300      	movs	r3, #0
   301c4:	461a      	mov	r2, r3
   301c6:	4619      	mov	r1, r3
   301c8:	4618      	mov	r0, r3
   301ca:	f7e4 fde5 	bl	14d98 <__assert_func>

000301ce <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   301ce:	b510      	push	{r4, lr}
   301d0:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   301d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   301d4:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   301d8:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   301dc:	9201      	str	r2, [sp, #4]
   301de:	9300      	str	r3, [sp, #0]
   301e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   301e4:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   301e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
   301ea:	1e60      	subs	r0, r4, #1
   301ec:	f000 ff0c 	bl	31008 <hal_uart_config>
    if (rc) {
   301f0:	b908      	cbnz	r0, 301f6 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   301f2:	b002      	add	sp, #8
   301f4:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   301f6:	2002      	movs	r0, #2
   301f8:	e7fb      	b.n	301f2 <uart_hal_resume+0x24>

000301fa <uart_hal_suspend>:
{
   301fa:	b570      	push	{r4, r5, r6, lr}
   301fc:	4606      	mov	r6, r0
   301fe:	460c      	mov	r4, r1
   30200:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   30202:	f7e6 f9b9 	bl	16578 <os_time_get>
   30206:	1a24      	subs	r4, r4, r0
   30208:	2c00      	cmp	r4, #0
   3020a:	dc06      	bgt.n	3021a <uart_hal_suspend+0x20>
   3020c:	b13d      	cbz	r5, 3021e <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   3020e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   30210:	3801      	subs	r0, #1
   30212:	f000 ff93 	bl	3113c <hal_uart_close>
    if (rc) {
   30216:	b920      	cbnz	r0, 30222 <uart_hal_suspend+0x28>
}
   30218:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   3021a:	2002      	movs	r0, #2
   3021c:	e7fc      	b.n	30218 <uart_hal_suspend+0x1e>
   3021e:	2002      	movs	r0, #2
   30220:	e7fa      	b.n	30218 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   30222:	2002      	movs	r0, #2
   30224:	e7f8      	b.n	30218 <uart_hal_suspend+0x1e>

00030226 <uart_hal_close>:
{
   30226:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   30228:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   3022a:	3801      	subs	r0, #1
   3022c:	f000 ff86 	bl	3113c <hal_uart_close>
    if (rc) {
   30230:	b900      	cbnz	r0, 30234 <uart_hal_close+0xe>
}
   30232:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   30234:	2002      	movs	r0, #2
   30236:	e7fc      	b.n	30232 <uart_hal_close+0xc>

00030238 <uart_hal_open>:
{
   30238:	b550      	push	{r4, r6, lr}
   3023a:	b083      	sub	sp, #12
   3023c:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   3023e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   30240:	2800      	cmp	r0, #0
   30242:	d02b      	beq.n	3029c <uart_hal_open+0x64>
   30244:	4614      	mov	r4, r2
    if (!uc) {
   30246:	2a00      	cmp	r2, #0
   30248:	d032      	beq.n	302b0 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   3024a:	7ef3      	ldrb	r3, [r6, #27]
   3024c:	f013 0f02 	tst.w	r3, #2
   30250:	d130      	bne.n	302b4 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   30252:	7913      	ldrb	r3, [r2, #4]
   30254:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   30258:	79d3      	ldrb	r3, [r2, #7]
   3025a:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   3025e:	7993      	ldrb	r3, [r2, #6]
   30260:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   30264:	6813      	ldr	r3, [r2, #0]
   30266:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   30268:	7953      	ldrb	r3, [r2, #5]
   3026a:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   3026e:	6953      	ldr	r3, [r2, #20]
   30270:	9300      	str	r3, [sp, #0]
   30272:	68d3      	ldr	r3, [r2, #12]
   30274:	6912      	ldr	r2, [r2, #16]
   30276:	68a1      	ldr	r1, [r4, #8]
   30278:	3801      	subs	r0, #1
   3027a:	f000 fd8d 	bl	30d98 <hal_uart_init_cbs>
    if (rc) {
   3027e:	b9e0      	cbnz	r0, 302ba <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   30280:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   30282:	79a3      	ldrb	r3, [r4, #6]
   30284:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   30286:	9201      	str	r2, [sp, #4]
   30288:	9300      	str	r3, [sp, #0]
   3028a:	7963      	ldrb	r3, [r4, #5]
   3028c:	7922      	ldrb	r2, [r4, #4]
   3028e:	6821      	ldr	r1, [r4, #0]
   30290:	3801      	subs	r0, #1
   30292:	f000 feb9 	bl	31008 <hal_uart_config>
    if (rc) {
   30296:	b170      	cbz	r0, 302b6 <uart_hal_open+0x7e>
        return OS_EINVAL;
   30298:	2002      	movs	r0, #2
   3029a:	e00c      	b.n	302b6 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   3029c:	f7e4 f9da 	bl	14654 <hal_debugger_connected>
   302a0:	b100      	cbz	r0, 302a4 <uart_hal_open+0x6c>
   302a2:	be01      	bkpt	0x0001
   302a4:	2300      	movs	r3, #0
   302a6:	461a      	mov	r2, r3
   302a8:	4619      	mov	r1, r3
   302aa:	4618      	mov	r0, r3
   302ac:	f7e4 fd74 	bl	14d98 <__assert_func>
        return OS_EINVAL;
   302b0:	2002      	movs	r0, #2
   302b2:	e000      	b.n	302b6 <uart_hal_open+0x7e>
        return OS_EBUSY;
   302b4:	200b      	movs	r0, #11
}
   302b6:	b003      	add	sp, #12
   302b8:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   302ba:	2002      	movs	r0, #2
   302bc:	e7fb      	b.n	302b6 <uart_hal_open+0x7e>
	...

000302c0 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   302c0:	b570      	push	{r4, r5, r6, lr}
   302c2:	4604      	mov	r4, r0
   302c4:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   302c6:	69c5      	ldr	r5, [r0, #28]
   302c8:	4628      	mov	r0, r5
   302ca:	f7e6 fc3c 	bl	16b46 <strlen>
   302ce:	3801      	subs	r0, #1
   302d0:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   302d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   302d6:	2b09      	cmp	r3, #9
   302d8:	d816      	bhi.n	30308 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   302da:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   302de:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   302e0:	4b0a      	ldr	r3, [pc, #40]	; (3030c <uart_hal_init+0x4c>)
   302e2:	6023      	str	r3, [r4, #0]
   302e4:	4b0a      	ldr	r3, [pc, #40]	; (30310 <uart_hal_init+0x50>)
   302e6:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   302e8:	4b0a      	ldr	r3, [pc, #40]	; (30314 <uart_hal_init+0x54>)
   302ea:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   302ec:	4b0a      	ldr	r3, [pc, #40]	; (30318 <uart_hal_init+0x58>)
   302ee:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   302f0:	4b0a      	ldr	r3, [pc, #40]	; (3031c <uart_hal_init+0x5c>)
   302f2:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   302f4:	4b0a      	ldr	r3, [pc, #40]	; (30320 <uart_hal_init+0x60>)
   302f6:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   302f8:	4b0a      	ldr	r3, [pc, #40]	; (30324 <uart_hal_init+0x64>)
   302fa:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   302fc:	4631      	mov	r1, r6
   302fe:	3830      	subs	r0, #48	; 0x30
   30300:	f000 fe06 	bl	30f10 <hal_uart_init>

    return OS_OK;
   30304:	2000      	movs	r0, #0
}
   30306:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   30308:	2002      	movs	r0, #2
   3030a:	e7fc      	b.n	30306 <uart_hal_init+0x46>
   3030c:	00030239 	.word	0x00030239
   30310:	00030227 	.word	0x00030227
   30314:	000301fb 	.word	0x000301fb
   30318:	000301cf 	.word	0x000301cf
   3031c:	000301ad 	.word	0x000301ad
   30320:	0003018b 	.word	0x0003018b
   30324:	00030169 	.word	0x00030169

00030328 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   30328:	6843      	ldr	r3, [r0, #4]
   3032a:	428b      	cmp	r3, r1
   3032c:	d805      	bhi.n	3033a <hal_flash_check_addr+0x12>
   3032e:	6882      	ldr	r2, [r0, #8]
   30330:	4413      	add	r3, r2
   30332:	428b      	cmp	r3, r1
   30334:	d304      	bcc.n	30340 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   30336:	2000      	movs	r0, #0
   30338:	4770      	bx	lr
        return SYS_EINVAL;
   3033a:	f06f 0001 	mvn.w	r0, #1
   3033e:	4770      	bx	lr
   30340:	f06f 0001 	mvn.w	r0, #1
}
   30344:	4770      	bx	lr

00030346 <hal_flash_init>:
{
   30346:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   30348:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
   3034a:	462c      	mov	r4, r5
   3034c:	e001      	b.n	30352 <hal_flash_init+0xc>
   3034e:	3401      	adds	r4, #1
   30350:	b2e4      	uxtb	r4, r4
   30352:	2cff      	cmp	r4, #255	; 0xff
   30354:	d00b      	beq.n	3036e <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   30356:	4620      	mov	r0, r4
   30358:	f7ff feb8 	bl	300cc <hal_bsp_flash_dev>
        if (!hf) {
   3035c:	b138      	cbz	r0, 3036e <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
   3035e:	6802      	ldr	r2, [r0, #0]
   30360:	6952      	ldr	r2, [r2, #20]
   30362:	4790      	blx	r2
   30364:	2800      	cmp	r0, #0
   30366:	d0f2      	beq.n	3034e <hal_flash_init+0x8>
            rc = SYS_EIO;
   30368:	f06f 0504 	mvn.w	r5, #4
   3036c:	e7ef      	b.n	3034e <hal_flash_init+0x8>
}
   3036e:	4628      	mov	r0, r5
   30370:	bd38      	pop	{r3, r4, r5, pc}

00030372 <hal_flash_align>:
{
   30372:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   30374:	f7ff feaa 	bl	300cc <hal_bsp_flash_dev>
    if (!hf) {
   30378:	b108      	cbz	r0, 3037e <hal_flash_align+0xc>
    return hf->hf_align;
   3037a:	7c00      	ldrb	r0, [r0, #16]
}
   3037c:	bd08      	pop	{r3, pc}
        return 1;
   3037e:	2001      	movs	r0, #1
   30380:	e7fc      	b.n	3037c <hal_flash_align+0xa>

00030382 <hal_flash_erased_val>:
{
   30382:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   30384:	f7ff fea2 	bl	300cc <hal_bsp_flash_dev>
    if (!hf) {
   30388:	b108      	cbz	r0, 3038e <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   3038a:	7d00      	ldrb	r0, [r0, #20]
}
   3038c:	bd08      	pop	{r3, pc}
        return 1;
   3038e:	2001      	movs	r0, #1
   30390:	e7fc      	b.n	3038c <hal_flash_erased_val+0xa>

00030392 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   30392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30396:	460c      	mov	r4, r1
   30398:	4617      	mov	r7, r2
   3039a:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   3039c:	f7ff fe96 	bl	300cc <hal_bsp_flash_dev>
    if (!hf) {
   303a0:	b1a0      	cbz	r0, 303cc <hal_flash_read+0x3a>
   303a2:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   303a4:	4621      	mov	r1, r4
   303a6:	f7ff ffbf 	bl	30328 <hal_flash_check_addr>
   303aa:	b990      	cbnz	r0, 303d2 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   303ac:	1961      	adds	r1, r4, r5
   303ae:	4630      	mov	r0, r6
   303b0:	f7ff ffba 	bl	30328 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   303b4:	b980      	cbnz	r0, 303d8 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   303b6:	6833      	ldr	r3, [r6, #0]
   303b8:	f8d3 8000 	ldr.w	r8, [r3]
   303bc:	462b      	mov	r3, r5
   303be:	463a      	mov	r2, r7
   303c0:	4621      	mov	r1, r4
   303c2:	4630      	mov	r0, r6
   303c4:	47c0      	blx	r8
    if (rc != 0) {
   303c6:	b950      	cbnz	r0, 303de <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   303c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   303cc:	f06f 0001 	mvn.w	r0, #1
   303d0:	e7fa      	b.n	303c8 <hal_flash_read+0x36>
        return SYS_EINVAL;
   303d2:	f06f 0001 	mvn.w	r0, #1
   303d6:	e7f7      	b.n	303c8 <hal_flash_read+0x36>
   303d8:	f06f 0001 	mvn.w	r0, #1
   303dc:	e7f4      	b.n	303c8 <hal_flash_read+0x36>
        return SYS_EIO;
   303de:	f06f 0004 	mvn.w	r0, #4
   303e2:	e7f1      	b.n	303c8 <hal_flash_read+0x36>

000303e4 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   303e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   303e8:	4604      	mov	r4, r0
   303ea:	460d      	mov	r5, r1
   303ec:	4690      	mov	r8, r2
   303ee:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   303f0:	f7ff fe6c 	bl	300cc <hal_bsp_flash_dev>
    if (!hf) {
   303f4:	b1e8      	cbz	r0, 30432 <hal_flash_write+0x4e>
   303f6:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   303f8:	4629      	mov	r1, r5
   303fa:	f7ff ff95 	bl	30328 <hal_flash_check_addr>
   303fe:	b9d8      	cbnz	r0, 30438 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   30400:	19a9      	adds	r1, r5, r6
   30402:	4638      	mov	r0, r7
   30404:	f7ff ff90 	bl	30328 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   30408:	b9c8      	cbnz	r0, 3043e <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   3040a:	08e3      	lsrs	r3, r4, #3
   3040c:	4a10      	ldr	r2, [pc, #64]	; (30450 <hal_flash_write+0x6c>)
   3040e:	5cd0      	ldrb	r0, [r2, r3]
   30410:	f004 0407 	and.w	r4, r4, #7
   30414:	fa40 f404 	asr.w	r4, r0, r4
   30418:	f014 0f01 	tst.w	r4, #1
   3041c:	d112      	bne.n	30444 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   3041e:	683b      	ldr	r3, [r7, #0]
   30420:	685c      	ldr	r4, [r3, #4]
   30422:	4633      	mov	r3, r6
   30424:	4642      	mov	r2, r8
   30426:	4629      	mov	r1, r5
   30428:	4638      	mov	r0, r7
   3042a:	47a0      	blx	r4
    if (rc != 0) {
   3042c:	b968      	cbnz	r0, 3044a <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   3042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   30432:	f06f 0001 	mvn.w	r0, #1
   30436:	e7fa      	b.n	3042e <hal_flash_write+0x4a>
        return SYS_EINVAL;
   30438:	f06f 0001 	mvn.w	r0, #1
   3043c:	e7f7      	b.n	3042e <hal_flash_write+0x4a>
   3043e:	f06f 0001 	mvn.w	r0, #1
   30442:	e7f4      	b.n	3042e <hal_flash_write+0x4a>
        return SYS_EACCES;
   30444:	f06f 0006 	mvn.w	r0, #6
   30448:	e7f1      	b.n	3042e <hal_flash_write+0x4a>
        return SYS_EIO;
   3044a:	f06f 0004 	mvn.w	r0, #4
   3044e:	e7ee      	b.n	3042e <hal_flash_write+0x4a>
   30450:	10003c90 	.word	0x10003c90

00030454 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   30454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30458:	b082      	sub	sp, #8
   3045a:	4605      	mov	r5, r0
   3045c:	460e      	mov	r6, r1
   3045e:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   30460:	f7ff fe34 	bl	300cc <hal_bsp_flash_dev>
    if (!hf) {
   30464:	2800      	cmp	r0, #0
   30466:	d051      	beq.n	3050c <hal_flash_erase+0xb8>
   30468:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   3046a:	4631      	mov	r1, r6
   3046c:	f7ff ff5c 	bl	30328 <hal_flash_check_addr>
   30470:	2800      	cmp	r0, #0
   30472:	d14e      	bne.n	30512 <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
   30474:	eb06 0809 	add.w	r8, r6, r9
   30478:	4641      	mov	r1, r8
   3047a:	4620      	mov	r0, r4
   3047c:	f7ff ff54 	bl	30328 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   30480:	2800      	cmp	r0, #0
   30482:	d149      	bne.n	30518 <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   30484:	08eb      	lsrs	r3, r5, #3
   30486:	4a2a      	ldr	r2, [pc, #168]	; (30530 <hal_flash_erase+0xdc>)
   30488:	5cd7      	ldrb	r7, [r2, r3]
   3048a:	f005 0507 	and.w	r5, r5, #7
   3048e:	fa47 f505 	asr.w	r5, r7, r5
   30492:	f015 0a01 	ands.w	sl, r5, #1
   30496:	d142      	bne.n	3051e <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   30498:	45b0      	cmp	r8, r6
   3049a:	d943      	bls.n	30524 <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   3049c:	6823      	ldr	r3, [r4, #0]
   3049e:	699b      	ldr	r3, [r3, #24]
   304a0:	2b00      	cmp	r3, #0
   304a2:	d031      	beq.n	30508 <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
   304a4:	464a      	mov	r2, r9
   304a6:	4631      	mov	r1, r6
   304a8:	4620      	mov	r0, r4
   304aa:	4798      	blx	r3
   304ac:	4682      	mov	sl, r0
   304ae:	2800      	cmp	r0, #0
   304b0:	d13b      	bne.n	3052a <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
   304b2:	4650      	mov	r0, sl
   304b4:	b002      	add	sp, #8
   304b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   304ba:	f7e4 f8cb 	bl	14654 <hal_debugger_connected>
   304be:	b100      	cbz	r0, 304c2 <hal_flash_erase+0x6e>
   304c0:	be01      	bkpt	0x0001
   304c2:	2300      	movs	r3, #0
   304c4:	461a      	mov	r2, r3
   304c6:	4619      	mov	r1, r3
   304c8:	4618      	mov	r0, r3
   304ca:	f7e4 fc65 	bl	14d98 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   304ce:	3501      	adds	r5, #1
   304d0:	68e3      	ldr	r3, [r4, #12]
   304d2:	42ab      	cmp	r3, r5
   304d4:	dded      	ble.n	304b2 <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   304d6:	6823      	ldr	r3, [r4, #0]
   304d8:	68df      	ldr	r7, [r3, #12]
   304da:	466b      	mov	r3, sp
   304dc:	aa01      	add	r2, sp, #4
   304de:	4629      	mov	r1, r5
   304e0:	4620      	mov	r0, r4
   304e2:	47b8      	blx	r7
            assert(rc == 0);
   304e4:	2800      	cmp	r0, #0
   304e6:	d1e8      	bne.n	304ba <hal_flash_erase+0x66>
            end_area = start + size;
   304e8:	9901      	ldr	r1, [sp, #4]
   304ea:	9b00      	ldr	r3, [sp, #0]
   304ec:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   304ee:	429e      	cmp	r6, r3
   304f0:	d2ed      	bcs.n	304ce <hal_flash_erase+0x7a>
   304f2:	4588      	cmp	r8, r1
   304f4:	d9eb      	bls.n	304ce <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   304f6:	6823      	ldr	r3, [r4, #0]
   304f8:	689b      	ldr	r3, [r3, #8]
   304fa:	4620      	mov	r0, r4
   304fc:	4798      	blx	r3
   304fe:	2800      	cmp	r0, #0
   30500:	d0e5      	beq.n	304ce <hal_flash_erase+0x7a>
                    return SYS_EIO;
   30502:	f06f 0a04 	mvn.w	sl, #4
   30506:	e7d4      	b.n	304b2 <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   30508:	4655      	mov	r5, sl
   3050a:	e7e1      	b.n	304d0 <hal_flash_erase+0x7c>
        return SYS_EINVAL;
   3050c:	f06f 0a01 	mvn.w	sl, #1
   30510:	e7cf      	b.n	304b2 <hal_flash_erase+0x5e>
        return SYS_EINVAL;
   30512:	f06f 0a01 	mvn.w	sl, #1
   30516:	e7cc      	b.n	304b2 <hal_flash_erase+0x5e>
   30518:	f06f 0a01 	mvn.w	sl, #1
   3051c:	e7c9      	b.n	304b2 <hal_flash_erase+0x5e>
        return SYS_EACCES;
   3051e:	f06f 0a06 	mvn.w	sl, #6
   30522:	e7c6      	b.n	304b2 <hal_flash_erase+0x5e>
        return SYS_EINVAL;
   30524:	f06f 0a01 	mvn.w	sl, #1
   30528:	e7c3      	b.n	304b2 <hal_flash_erase+0x5e>
            return SYS_EIO;
   3052a:	f06f 0a04 	mvn.w	sl, #4
   3052e:	e7c0      	b.n	304b2 <hal_flash_erase+0x5e>
   30530:	10003c90 	.word	0x10003c90

00030534 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   30534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30538:	4606      	mov	r6, r0
   3053a:	4690      	mov	r8, r2
   3053c:	461f      	mov	r7, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   3053e:	6804      	ldr	r4, [r0, #0]
   30540:	6824      	ldr	r4, [r4, #0]
   30542:	47a0      	blx	r4
    if (rc != 0) {
   30544:	b960      	cbnz	r0, 30560 <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   30546:	2100      	movs	r1, #0
   30548:	42b9      	cmp	r1, r7
   3054a:	d206      	bcs.n	3055a <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
   3054c:	f818 5001 	ldrb.w	r5, [r8, r1]
   30550:	7d34      	ldrb	r4, [r6, #20]
   30552:	42a5      	cmp	r5, r4
   30554:	d102      	bne.n	3055c <hal_flash_is_erased+0x28>
    for (i = 0; i < num_bytes; i++) {
   30556:	3101      	adds	r1, #1
   30558:	e7f6      	b.n	30548 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
   3055a:	2001      	movs	r0, #1
}
   3055c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   30560:	f06f 0004 	mvn.w	r0, #4
   30564:	e7fa      	b.n	3055c <hal_flash_is_erased+0x28>

00030566 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   30566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3056a:	460c      	mov	r4, r1
   3056c:	4690      	mov	r8, r2
   3056e:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   30570:	f7ff fdac 	bl	300cc <hal_bsp_flash_dev>
    if (!hf) {
   30574:	b1f8      	cbz	r0, 305b6 <hal_flash_isempty+0x50>
   30576:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   30578:	4621      	mov	r1, r4
   3057a:	f7ff fed5 	bl	30328 <hal_flash_check_addr>
   3057e:	b9e8      	cbnz	r0, 305bc <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   30580:	1961      	adds	r1, r4, r5
   30582:	4630      	mov	r0, r6
   30584:	f7ff fed0 	bl	30328 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   30588:	b9d8      	cbnz	r0, 305c2 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   3058a:	6833      	ldr	r3, [r6, #0]
   3058c:	691f      	ldr	r7, [r3, #16]
   3058e:	b15f      	cbz	r7, 305a8 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   30590:	462b      	mov	r3, r5
   30592:	4642      	mov	r2, r8
   30594:	4621      	mov	r1, r4
   30596:	4630      	mov	r0, r6
   30598:	47b8      	blx	r7
        if (rc < 0) {
   3059a:	2800      	cmp	r0, #0
   3059c:	db01      	blt.n	305a2 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   3059e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   305a2:	f06f 0004 	mvn.w	r0, #4
   305a6:	e7fa      	b.n	3059e <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   305a8:	462b      	mov	r3, r5
   305aa:	4642      	mov	r2, r8
   305ac:	4621      	mov	r1, r4
   305ae:	4630      	mov	r0, r6
   305b0:	f7ff ffc0 	bl	30534 <hal_flash_is_erased>
   305b4:	e7f3      	b.n	3059e <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   305b6:	f06f 0001 	mvn.w	r0, #1
   305ba:	e7f0      	b.n	3059e <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   305bc:	f06f 0001 	mvn.w	r0, #1
   305c0:	e7ed      	b.n	3059e <hal_flash_isempty+0x38>
   305c2:	f06f 0001 	mvn.w	r0, #1
   305c6:	e7ea      	b.n	3059e <hal_flash_isempty+0x38>

000305c8 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   305c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   305ca:	b085      	sub	sp, #20
   305cc:	4607      	mov	r7, r0
   305ce:	460e      	mov	r6, r1
   305d0:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   305d2:	2400      	movs	r4, #0
   305d4:	e007      	b.n	305e6 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   305d6:	466a      	mov	r2, sp
   305d8:	19a1      	adds	r1, r4, r6
   305da:	4638      	mov	r0, r7
   305dc:	f7ff ffc3 	bl	30566 <hal_flash_isempty>
        if (empty != 1) {
   305e0:	2801      	cmp	r0, #1
   305e2:	d108      	bne.n	305f6 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   305e4:	3410      	adds	r4, #16
   305e6:	42ac      	cmp	r4, r5
   305e8:	d204      	bcs.n	305f4 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   305ea:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   305ec:	2b0f      	cmp	r3, #15
   305ee:	d9f2      	bls.n	305d6 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   305f0:	2310      	movs	r3, #16
   305f2:	e7f0      	b.n	305d6 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   305f4:	2001      	movs	r0, #1
}
   305f6:	b005      	add	sp, #20
   305f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000305fa <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   305fa:	0349      	lsls	r1, r1, #13
   305fc:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   305fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   30602:	601a      	str	r2, [r3, #0]

    return (0);
}
   30604:	2000      	movs	r0, #0
   30606:	4770      	bx	lr

00030608 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   30608:	2000      	movs	r0, #0
   3060a:	4770      	bx	lr

0003060c <apollo3_flash_erase_sector>:
{
   3060c:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   3060e:	f3c1 3245 	ubfx	r2, r1, #13, #6
   30612:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   30616:	4802      	ldr	r0, [pc, #8]	; (30620 <apollo3_flash_erase_sector+0x14>)
   30618:	f000 ff72 	bl	31500 <am_hal_flash_page_erase>
}
   3061c:	bd08      	pop	{r3, pc}
   3061e:	bf00      	nop
   30620:	12344321 	.word	0x12344321

00030624 <apollo3_flash_write_odd>:
{
   30624:	b510      	push	{r4, lr}
   30626:	b082      	sub	sp, #8
   30628:	460c      	mov	r4, r1
   3062a:	4611      	mov	r1, r2
   3062c:	461a      	mov	r2, r3
    offset = address % 4;
   3062e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   30632:	18c3      	adds	r3, r0, r3
   30634:	2b04      	cmp	r3, #4
   30636:	d80e      	bhi.n	30656 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   30638:	1a24      	subs	r4, r4, r0
    word = *base;
   3063a:	6823      	ldr	r3, [r4, #0]
   3063c:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   3063e:	ab01      	add	r3, sp, #4
   30640:	4418      	add	r0, r3
   30642:	f7e6 fa33 	bl	16aac <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   30646:	2301      	movs	r3, #1
   30648:	4622      	mov	r2, r4
   3064a:	a901      	add	r1, sp, #4
   3064c:	4807      	ldr	r0, [pc, #28]	; (3066c <apollo3_flash_write_odd+0x48>)
   3064e:	f000 ff5d 	bl	3150c <am_hal_flash_program_main>
}
   30652:	b002      	add	sp, #8
   30654:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   30656:	f7e3 fffd 	bl	14654 <hal_debugger_connected>
   3065a:	b100      	cbz	r0, 3065e <apollo3_flash_write_odd+0x3a>
   3065c:	be01      	bkpt	0x0001
   3065e:	2300      	movs	r3, #0
   30660:	461a      	mov	r2, r3
   30662:	4619      	mov	r1, r3
   30664:	4618      	mov	r0, r3
   30666:	f7e4 fb97 	bl	14d98 <__assert_func>
   3066a:	bf00      	nop
   3066c:	12344321 	.word	0x12344321

00030670 <apollo3_flash_write>:
{
   30670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30674:	4607      	mov	r7, r0
   30676:	460d      	mov	r5, r1
   30678:	4616      	mov	r6, r2
   3067a:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   3067c:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   30680:	b672      	cpsid	i
    if (lead_off != 0) {
   30682:	f011 0403 	ands.w	r4, r1, #3
   30686:	d010      	beq.n	306aa <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   30688:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   3068c:	429c      	cmp	r4, r3
   3068e:	d900      	bls.n	30692 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   30690:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   30692:	4623      	mov	r3, r4
   30694:	4632      	mov	r2, r6
   30696:	4629      	mov	r1, r5
   30698:	4638      	mov	r0, r7
   3069a:	f7ff ffc3 	bl	30624 <apollo3_flash_write_odd>
        if (rc != 0) {
   3069e:	4603      	mov	r3, r0
   306a0:	bb98      	cbnz	r0, 3070a <apollo3_flash_write+0x9a>
        u8p += lead_size;
   306a2:	4426      	add	r6, r4
        num_bytes -= lead_size;
   306a4:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   306a8:	4425      	add	r5, r4
    if (num_bytes == 0) {
   306aa:	f1b8 0f00 	cmp.w	r8, #0
   306ae:	d02b      	beq.n	30708 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   306b0:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   306b4:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   306b6:	f016 0f03 	tst.w	r6, #3
   306ba:	d00e      	beq.n	306da <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   306bc:	2400      	movs	r4, #0
   306be:	454c      	cmp	r4, r9
   306c0:	da13      	bge.n	306ea <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   306c2:	2304      	movs	r3, #4
   306c4:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   306c8:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   306cc:	4638      	mov	r0, r7
   306ce:	f7ff ffa9 	bl	30624 <apollo3_flash_write_odd>
            if (rc != 0) {
   306d2:	4603      	mov	r3, r0
   306d4:	b9c8      	cbnz	r0, 3070a <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   306d6:	3401      	adds	r4, #1
   306d8:	e7f1      	b.n	306be <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   306da:	465b      	mov	r3, fp
   306dc:	462a      	mov	r2, r5
   306de:	4631      	mov	r1, r6
   306e0:	480d      	ldr	r0, [pc, #52]	; (30718 <apollo3_flash_write+0xa8>)
   306e2:	f000 ff13 	bl	3150c <am_hal_flash_program_main>
        if (rc != 0) {
   306e6:	4603      	mov	r3, r0
   306e8:	b978      	cbnz	r0, 3070a <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   306ea:	ea4f 018b 	mov.w	r1, fp, lsl #2
   306ee:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   306f2:	2b00      	cmp	r3, #0
   306f4:	dc01      	bgt.n	306fa <apollo3_flash_write+0x8a>
    rc = 0;
   306f6:	2300      	movs	r3, #0
   306f8:	e007      	b.n	3070a <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   306fa:	1872      	adds	r2, r6, r1
   306fc:	4429      	add	r1, r5
   306fe:	4638      	mov	r0, r7
   30700:	f7ff ff90 	bl	30624 <apollo3_flash_write_odd>
   30704:	4603      	mov	r3, r0
        if (rc != 0) {
   30706:	e000      	b.n	3070a <apollo3_flash_write+0x9a>
        rc = 0;
   30708:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   3070a:	f1ba 0f00 	cmp.w	sl, #0
   3070e:	d100      	bne.n	30712 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   30710:	b662      	cpsie	i
}
   30712:	4618      	mov	r0, r3
   30714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30718:	12344321 	.word	0x12344321

0003071c <apollo3_flash_read>:
{
   3071c:	b508      	push	{r3, lr}
   3071e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   30720:	461a      	mov	r2, r3
   30722:	f7e6 f9c3 	bl	16aac <memcpy>
}
   30726:	2000      	movs	r0, #0
   30728:	bd08      	pop	{r3, pc}
	...

0003072c <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   3072c:	b538      	push	{r3, r4, r5, lr}
   3072e:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   30730:	f7e5 fff1 	bl	16716 <os_arch_in_critical>
   30734:	b180      	cbz	r0, 30758 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   30736:	4b0d      	ldr	r3, [pc, #52]	; (3076c <apollo2_os_tick_set_timer+0x40>)
   30738:	6818      	ldr	r0, [r3, #0]
   3073a:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   3073e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   30742:	f001 f933 	bl	319ac <am_hal_stimer_config>
   30746:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   30748:	4621      	mov	r1, r4
   3074a:	2000      	movs	r0, #0
   3074c:	f001 f958 	bl	31a00 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   30750:	4628      	mov	r0, r5
   30752:	f001 f92b 	bl	319ac <am_hal_stimer_config>
}
   30756:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   30758:	f7e3 ff7c 	bl	14654 <hal_debugger_connected>
   3075c:	b100      	cbz	r0, 30760 <apollo2_os_tick_set_timer+0x34>
   3075e:	be01      	bkpt	0x0001
   30760:	2300      	movs	r3, #0
   30762:	461a      	mov	r2, r3
   30764:	4619      	mov	r1, r3
   30766:	4618      	mov	r0, r3
   30768:	f7e4 fb16 	bl	14d98 <__assert_func>
   3076c:	10003c94 	.word	0x10003c94

00030770 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   30770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   30772:	f7e5 ffc7 	bl	16704 <os_arch_save_sr>
   30776:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   30778:	f001 f922 	bl	319c0 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   3077c:	4e0c      	ldr	r6, [pc, #48]	; (307b0 <apollo2_os_tick_handler+0x40>)
   3077e:	6834      	ldr	r4, [r6, #0]
   30780:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   30782:	4f0c      	ldr	r7, [pc, #48]	; (307b4 <apollo2_os_tick_handler+0x44>)
   30784:	6838      	ldr	r0, [r7, #0]
   30786:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   3078a:	4620      	mov	r0, r4
   3078c:	f7e5 fefa 	bl	16584 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   30790:	2001      	movs	r0, #1
   30792:	f001 f97b 	bl	31a8c <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   30796:	683b      	ldr	r3, [r7, #0]
   30798:	6830      	ldr	r0, [r6, #0]
   3079a:	fb03 0404 	mla	r4, r3, r4, r0
   3079e:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   307a0:	2001      	movs	r0, #1
   307a2:	f7ff ffc3 	bl	3072c <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   307a6:	4628      	mov	r0, r5
   307a8:	f7e5 ffb2 	bl	16710 <os_arch_restore_sr>
}
   307ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   307ae:	bf00      	nop
   307b0:	10003c98 	.word	0x10003c98
   307b4:	10003c94 	.word	0x10003c94

000307b8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   307b8:	b510      	push	{r4, lr}
   307ba:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   307bc:	f7e5 ffab 	bl	16716 <os_arch_in_critical>
   307c0:	b128      	cbz	r0, 307ce <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   307c2:	b974      	cbnz	r4, 307e2 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   307c4:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   307c8:	bf30      	wfi

    if (ticks > 0) {
   307ca:	b974      	cbnz	r4, 307ea <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   307cc:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   307ce:	f7e3 ff41 	bl	14654 <hal_debugger_connected>
   307d2:	b100      	cbz	r0, 307d6 <os_tick_idle+0x1e>
   307d4:	be01      	bkpt	0x0001
   307d6:	2300      	movs	r3, #0
   307d8:	461a      	mov	r2, r3
   307da:	4619      	mov	r1, r3
   307dc:	4618      	mov	r0, r3
   307de:	f7e4 fadb 	bl	14d98 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   307e2:	4620      	mov	r0, r4
   307e4:	f7ff ffa2 	bl	3072c <apollo2_os_tick_set_timer>
   307e8:	e7ec      	b.n	307c4 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   307ea:	f7ff ffc1 	bl	30770 <apollo2_os_tick_handler>
}
   307ee:	e7ed      	b.n	307cc <os_tick_idle+0x14>

000307f0 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   307f0:	b538      	push	{r3, r4, r5, lr}
   307f2:	4605      	mov	r5, r0
   307f4:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   307f6:	f001 f8f3 	bl	319e0 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   307fa:	f44f 7083 	mov.w	r0, #262	; 0x106
   307fe:	f001 f8d5 	bl	319ac <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   30802:	2001      	movs	r0, #1
   30804:	f001 f938 	bl	31a78 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   30808:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3080c:	fbb3 f5f5 	udiv	r5, r3, r5
   30810:	4b0c      	ldr	r3, [pc, #48]	; (30844 <os_tick_init+0x54>)
   30812:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   30814:	0164      	lsls	r4, r4, #5
   30816:	b2e4      	uxtb	r4, r4
   30818:	4b0b      	ldr	r3, [pc, #44]	; (30848 <os_tick_init+0x58>)
   3081a:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   3081e:	4a0b      	ldr	r2, [pc, #44]	; (3084c <os_tick_init+0x5c>)
   30820:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   30822:	490b      	ldr	r1, [pc, #44]	; (30850 <os_tick_init+0x60>)
   30824:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30828:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3082c:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   3082e:	f7e5 ff69 	bl	16704 <os_arch_save_sr>
   30832:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   30834:	2001      	movs	r0, #1
   30836:	f7ff ff79 	bl	3072c <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   3083a:	4620      	mov	r0, r4
   3083c:	f7e5 ff68 	bl	16710 <os_arch_restore_sr>
}
   30840:	bd38      	pop	{r3, r4, r5, pc}
   30842:	bf00      	nop
   30844:	10003c94 	.word	0x10003c94
   30848:	e000e100 	.word	0xe000e100
   3084c:	e000ed00 	.word	0xe000ed00
   30850:	00030771 	.word	0x00030771

00030854 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   30854:	b908      	cbnz	r0, 3085a <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   30856:	4802      	ldr	r0, [pc, #8]	; (30860 <apollo3_timer_resolve+0xc>)
   30858:	4770      	bx	lr
        case 1:     return &apollo3_timer_1;
#endif
#if MYNEWT_VAL(TIMER_ADC_SOURCE)
        case 3:     return &apollo3_timer_adc;
#endif
        default:    return NULL;
   3085a:	2000      	movs	r0, #0
    }
}
   3085c:	4770      	bx	lr
   3085e:	bf00      	nop
   30860:	100004c4 	.word	0x100004c4

00030864 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   30864:	b430      	push	{r4, r5}
   30866:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   30868:	6803      	ldr	r3, [r0, #0]
   3086a:	428b      	cmp	r3, r1
   3086c:	d218      	bcs.n	308a0 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   3086e:	2301      	movs	r3, #1
   30870:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   30874:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   30878:	b16a      	cbz	r2, 30896 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   3087a:	428a      	cmp	r2, r1
   3087c:	d201      	bcs.n	30882 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   3087e:	3301      	adds	r3, #1
   30880:	e7f6      	b.n	30870 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   30882:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   30886:	f850 3c08 	ldr.w	r3, [r0, #-8]
   3088a:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   3088c:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   3088e:	4293      	cmp	r3, r2
   30890:	d806      	bhi.n	308a0 <apollo3_timer_tbl_find+0x3c>
                return prev;
   30892:	4620      	mov	r0, r4
   30894:	e004      	b.n	308a0 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   30896:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   3089a:	3801      	subs	r0, #1
   3089c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   308a0:	bc30      	pop	{r4, r5}
   308a2:	4770      	bx	lr

000308a4 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   308a4:	b538      	push	{r3, r4, r5, lr}
   308a6:	4615      	mov	r5, r2
   308a8:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   308aa:	7800      	ldrb	r0, [r0, #0]
   308ac:	3801      	subs	r0, #1
   308ae:	2804      	cmp	r0, #4
   308b0:	d82b      	bhi.n	3090a <apollo3_timer_sdk_cfg+0x66>
   308b2:	e8df f000 	tbb	[pc, r0]
   308b6:	0c03      	.short	0x0c03
   308b8:	1e15      	.short	0x1e15
   308ba:	24          	.byte	0x24
   308bb:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   308bc:	4814      	ldr	r0, [pc, #80]	; (30910 <apollo3_timer_sdk_cfg+0x6c>)
   308be:	f7ff ffd1 	bl	30864 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   308c2:	6803      	ldr	r3, [r0, #0]
   308c4:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   308c6:	6843      	ldr	r3, [r0, #4]
   308c8:	6023      	str	r3, [r4, #0]
        return 0;
   308ca:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   308cc:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   308ce:	4811      	ldr	r0, [pc, #68]	; (30914 <apollo3_timer_sdk_cfg+0x70>)
   308d0:	f7ff ffc8 	bl	30864 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   308d4:	6803      	ldr	r3, [r0, #0]
   308d6:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   308d8:	6843      	ldr	r3, [r0, #4]
   308da:	6023      	str	r3, [r4, #0]
        return 0;
   308dc:	2000      	movs	r0, #0
   308de:	e7f5      	b.n	308cc <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   308e0:	480d      	ldr	r0, [pc, #52]	; (30918 <apollo3_timer_sdk_cfg+0x74>)
   308e2:	f7ff ffbf 	bl	30864 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   308e6:	6803      	ldr	r3, [r0, #0]
   308e8:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   308ea:	6843      	ldr	r3, [r0, #4]
   308ec:	6023      	str	r3, [r4, #0]
        return 0;
   308ee:	2000      	movs	r0, #0
   308f0:	e7ec      	b.n	308cc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   308f2:	2364      	movs	r3, #100	; 0x64
   308f4:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   308f6:	231c      	movs	r3, #28
   308f8:	6023      	str	r3, [r4, #0]
        return 0;
   308fa:	2000      	movs	r0, #0
   308fc:	e7e6      	b.n	308cc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   308fe:	4b07      	ldr	r3, [pc, #28]	; (3091c <apollo3_timer_sdk_cfg+0x78>)
   30900:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   30902:	231e      	movs	r3, #30
   30904:	6023      	str	r3, [r4, #0]
        return 0;
   30906:	2000      	movs	r0, #0
   30908:	e7e0      	b.n	308cc <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   3090a:	f06f 0001 	mvn.w	r0, #1
   3090e:	e7dd      	b.n	308cc <apollo3_timer_sdk_cfg+0x28>
   30910:	0003539c 	.word	0x0003539c
   30914:	000353f4 	.word	0x000353f4
   30918:	000353cc 	.word	0x000353cc
   3091c:	02dc6c00 	.word	0x02dc6c00

00030920 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   30920:	7c43      	ldrb	r3, [r0, #17]
   30922:	2b01      	cmp	r3, #1
   30924:	d103      	bne.n	3092e <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   30926:	2304      	movs	r3, #4
   30928:	600b      	str	r3, [r1, #0]
        return 0;
   3092a:	2000      	movs	r0, #0
   3092c:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   3092e:	f06f 0001 	mvn.w	r0, #1
    }
}
   30932:	4770      	bx	lr

00030934 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   30934:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   30936:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3093a:	7c00      	ldrb	r0, [r0, #16]
   3093c:	f000 fcec 	bl	31318 <am_hal_ctimer_read>
}
   30940:	bd08      	pop	{r3, pc}

00030942 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   30942:	b530      	push	{r4, r5, lr}
   30944:	b083      	sub	sp, #12
   30946:	4604      	mov	r4, r0
   30948:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   3094a:	a901      	add	r1, sp, #4
   3094c:	f7ff ffe8 	bl	30920 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   30950:	b9e8      	cbnz	r0, 3098e <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   30952:	9801      	ldr	r0, [sp, #4]
   30954:	f000 fd9a 	bl	3148c <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   30958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3095c:	7c60      	ldrb	r0, [r4, #17]
   3095e:	f000 fcb1 	bl	312c4 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   30962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30966:	7c60      	ldrb	r0, [r4, #17]
   30968:	f000 fcc2 	bl	312f0 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   3096c:	2300      	movs	r3, #0
   3096e:	462a      	mov	r2, r5
   30970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30974:	7c60      	ldrb	r0, [r4, #17]
   30976:	f000 fd17 	bl	313a8 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   3097a:	9801      	ldr	r0, [sp, #4]
   3097c:	f000 fd5e 	bl	3143c <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   30980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30984:	7c60      	ldrb	r0, [r4, #17]
   30986:	f000 fc73 	bl	31270 <am_hal_ctimer_start>
}
   3098a:	b003      	add	sp, #12
   3098c:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   3098e:	f7e3 fe61 	bl	14654 <hal_debugger_connected>
   30992:	b100      	cbz	r0, 30996 <apollo3_timer_set_ocmp+0x54>
   30994:	be01      	bkpt	0x0001
   30996:	2300      	movs	r3, #0
   30998:	461a      	mov	r2, r3
   3099a:	4619      	mov	r1, r3
   3099c:	4618      	mov	r0, r3
   3099e:	f7e4 f9fb 	bl	14d98 <__assert_func>

000309a2 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   309a2:	b530      	push	{r4, r5, lr}
   309a4:	b083      	sub	sp, #12
   309a6:	4605      	mov	r5, r0
   309a8:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   309aa:	f7ff ffc3 	bl	30934 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   309ae:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   309b0:	2900      	cmp	r1, #0
   309b2:	dd04      	ble.n	309be <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   309b4:	4628      	mov	r0, r5
   309b6:	f7ff ffc4 	bl	30942 <apollo3_timer_set_ocmp>
    }
}
   309ba:	b003      	add	sp, #12
   309bc:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   309be:	a901      	add	r1, sp, #4
   309c0:	4628      	mov	r0, r5
   309c2:	f7ff ffad 	bl	30920 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   309c6:	b918      	cbnz	r0, 309d0 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   309c8:	9801      	ldr	r0, [sp, #4]
   309ca:	f000 fd6f 	bl	314ac <am_hal_ctimer_int_set>
   309ce:	e7f4      	b.n	309ba <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   309d0:	f7e3 fe40 	bl	14654 <hal_debugger_connected>
   309d4:	b100      	cbz	r0, 309d8 <apollo3_timer_set_ocmp_at+0x36>
   309d6:	be01      	bkpt	0x0001
   309d8:	2300      	movs	r3, #0
   309da:	461a      	mov	r2, r3
   309dc:	4619      	mov	r1, r3
   309de:	4618      	mov	r0, r3
   309e0:	f7e4 f9da 	bl	14d98 <__assert_func>

000309e4 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   309e4:	b500      	push	{lr}
   309e6:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   309e8:	a901      	add	r1, sp, #4
   309ea:	f7ff ff99 	bl	30920 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   309ee:	b928      	cbnz	r0, 309fc <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   309f0:	9801      	ldr	r0, [sp, #4]
   309f2:	f000 fd37 	bl	31464 <am_hal_ctimer_int_disable>
}
   309f6:	b003      	add	sp, #12
   309f8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   309fc:	f7e3 fe2a 	bl	14654 <hal_debugger_connected>
   30a00:	b100      	cbz	r0, 30a04 <apollo3_timer_clear_ocmp+0x20>
   30a02:	be01      	bkpt	0x0001
   30a04:	2300      	movs	r3, #0
   30a06:	461a      	mov	r2, r3
   30a08:	4619      	mov	r1, r3
   30a0a:	4618      	mov	r0, r3
   30a0c:	f7e4 f9c4 	bl	14d98 <__assert_func>

00030a10 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   30a10:	b570      	push	{r4, r5, r6, lr}
   30a12:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   30a14:	f7e5 fe76 	bl	16704 <os_arch_save_sr>
   30a18:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   30a1a:	e009      	b.n	30a30 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   30a1c:	6963      	ldr	r3, [r4, #20]
   30a1e:	606b      	str	r3, [r5, #4]
   30a20:	6963      	ldr	r3, [r4, #20]
   30a22:	6922      	ldr	r2, [r4, #16]
   30a24:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   30a26:	2300      	movs	r3, #0
   30a28:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   30a2a:	6863      	ldr	r3, [r4, #4]
   30a2c:	68a0      	ldr	r0, [r4, #8]
   30a2e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   30a30:	682c      	ldr	r4, [r5, #0]
   30a32:	b164      	cbz	r4, 30a4e <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   30a34:	4628      	mov	r0, r5
   30a36:	f7ff ff7d 	bl	30934 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   30a3a:	68e3      	ldr	r3, [r4, #12]
   30a3c:	1ac0      	subs	r0, r0, r3
   30a3e:	2800      	cmp	r0, #0
   30a40:	db05      	blt.n	30a4e <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   30a42:	6923      	ldr	r3, [r4, #16]
   30a44:	2b00      	cmp	r3, #0
   30a46:	d0e9      	beq.n	30a1c <apollo3_timer_chk_queue+0xc>
   30a48:	6962      	ldr	r2, [r4, #20]
   30a4a:	615a      	str	r2, [r3, #20]
   30a4c:	e7e8      	b.n	30a20 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   30a4e:	b13c      	cbz	r4, 30a60 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   30a50:	68e1      	ldr	r1, [r4, #12]
   30a52:	4628      	mov	r0, r5
   30a54:	f7ff ffa5 	bl	309a2 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   30a58:	4630      	mov	r0, r6
   30a5a:	f7e5 fe59 	bl	16710 <os_arch_restore_sr>
}
   30a5e:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   30a60:	4628      	mov	r0, r5
   30a62:	f7ff ffbf 	bl	309e4 <apollo3_timer_clear_ocmp>
   30a66:	e7f7      	b.n	30a58 <apollo3_timer_chk_queue+0x48>

00030a68 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   30a68:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   30a6a:	2001      	movs	r0, #1
   30a6c:	f000 fd2e 	bl	314cc <am_hal_ctimer_int_status_get>
   30a70:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   30a72:	f000 fd0b 	bl	3148c <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   30a76:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   30a7a:	d100      	bne.n	30a7e <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_ADC_SOURCE)
    if (status & AM_HAL_CTIMER_INT_TIMERA3C0) {
        apollo3_timer_chk_queue(&apollo3_timer_adc);
    }
#endif
}
   30a7c:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   30a7e:	4802      	ldr	r0, [pc, #8]	; (30a88 <apollo3_timer_isr+0x20>)
   30a80:	f7ff ffc6 	bl	30a10 <apollo3_timer_chk_queue>
}
   30a84:	e7fa      	b.n	30a7c <apollo3_timer_isr+0x14>
   30a86:	bf00      	nop
   30a88:	100004c4 	.word	0x100004c4

00030a8c <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   30a8c:	b510      	push	{r4, lr}
   30a8e:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   30a90:	f7ff fee0 	bl	30854 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   30a94:	b1b8      	cbz	r0, 30ac6 <hal_timer_init+0x3a>
   30a96:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   30a98:	4a0c      	ldr	r2, [pc, #48]	; (30acc <hal_timer_init+0x40>)
   30a9a:	6812      	ldr	r2, [r2, #0]
   30a9c:	b97a      	cbnz	r2, 30abe <hal_timer_init+0x32>
        nvic_configured = 1;
   30a9e:	4a0b      	ldr	r2, [pc, #44]	; (30acc <hal_timer_init+0x40>)
   30aa0:	2101      	movs	r1, #1
   30aa2:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   30aa4:	4a0a      	ldr	r2, [pc, #40]	; (30ad0 <hal_timer_init+0x44>)
   30aa6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   30aa8:	490a      	ldr	r1, [pc, #40]	; (30ad4 <hal_timer_init+0x48>)
   30aaa:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   30aac:	4a0a      	ldr	r2, [pc, #40]	; (30ad8 <hal_timer_init+0x4c>)
   30aae:	21e0      	movs	r1, #224	; 0xe0
   30ab0:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   30ab8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30abc:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   30abe:	7822      	ldrb	r2, [r4, #0]
   30ac0:	721a      	strb	r2, [r3, #8]

    return 0;
   30ac2:	2000      	movs	r0, #0
}
   30ac4:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   30ac6:	f06f 0001 	mvn.w	r0, #1
   30aca:	e7fb      	b.n	30ac4 <hal_timer_init+0x38>
   30acc:	10003c9c 	.word	0x10003c9c
   30ad0:	e000ed00 	.word	0xe000ed00
   30ad4:	00030a69 	.word	0x00030a69
   30ad8:	e000e100 	.word	0xe000e100

00030adc <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   30adc:	b570      	push	{r4, r5, r6, lr}
   30ade:	b082      	sub	sp, #8
   30ae0:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   30ae2:	f7ff feb7 	bl	30854 <apollo3_timer_resolve>
    if (bsp_timer == NULL || bsp_timer->is_adc_clk) {
   30ae6:	b380      	cbz	r0, 30b4a <hal_timer_config+0x6e>
   30ae8:	4604      	mov	r4, r0
   30aea:	7c83      	ldrb	r3, [r0, #18]
   30aec:	bb83      	cbnz	r3, 30b50 <hal_timer_config+0x74>
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   30aee:	ab01      	add	r3, sp, #4
   30af0:	f100 020c 	add.w	r2, r0, #12
   30af4:	4629      	mov	r1, r5
   30af6:	3008      	adds	r0, #8
   30af8:	f7ff fed4 	bl	308a4 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   30afc:	4605      	mov	r5, r0
   30afe:	b110      	cbz	r0, 30b06 <hal_timer_config+0x2a>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   30b00:	4628      	mov	r0, r5
   30b02:	b002      	add	sp, #8
   30b04:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   30b06:	9e01      	ldr	r6, [sp, #4]
   30b08:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   30b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30b10:	7c20      	ldrb	r0, [r4, #16]
   30b12:	f000 fbed 	bl	312f0 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   30b16:	4632      	mov	r2, r6
   30b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30b1c:	7c20      	ldrb	r0, [r4, #16]
   30b1e:	f000 fb67 	bl	311f0 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   30b22:	9e01      	ldr	r6, [sp, #4]
   30b24:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   30b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30b2c:	7c60      	ldrb	r0, [r4, #17]
   30b2e:	f000 fbdf 	bl	312f0 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   30b32:	4632      	mov	r2, r6
   30b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30b38:	7c60      	ldrb	r0, [r4, #17]
   30b3a:	f000 fb59 	bl	311f0 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   30b3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30b42:	7c20      	ldrb	r0, [r4, #16]
   30b44:	f000 fb94 	bl	31270 <am_hal_ctimer_start>
    return 0;
   30b48:	e7da      	b.n	30b00 <hal_timer_config+0x24>
        return SYS_EINVAL;
   30b4a:	f06f 0501 	mvn.w	r5, #1
   30b4e:	e7d7      	b.n	30b00 <hal_timer_config+0x24>
   30b50:	f06f 0501 	mvn.w	r5, #1
   30b54:	e7d4      	b.n	30b00 <hal_timer_config+0x24>

00030b56 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   30b56:	b508      	push	{r3, lr}
    return SYS_EINVAL;
#endif

    const struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   30b58:	f7ff fe7c 	bl	30854 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   30b5c:	b138      	cbz	r0, 30b6e <hal_timer_read+0x18>
   30b5e:	4603      	mov	r3, r0
        return 0;
    }

    if (bsp_timer->freq_hz == 0) {
   30b60:	68c0      	ldr	r0, [r0, #12]
   30b62:	b900      	cbnz	r0, 30b66 <hal_timer_read+0x10>
        /* Timer not enabled. */
        return 0;
    }

    return apollo3_timer_cur_ticks(bsp_timer);
}
   30b64:	bd08      	pop	{r3, pc}
    return apollo3_timer_cur_ticks(bsp_timer);
   30b66:	4618      	mov	r0, r3
   30b68:	f7ff fee4 	bl	30934 <apollo3_timer_cur_ticks>
   30b6c:	e7fa      	b.n	30b64 <hal_timer_read+0xe>
        return 0;
   30b6e:	2000      	movs	r0, #0
   30b70:	e7f8      	b.n	30b64 <hal_timer_read+0xe>

00030b72 <hal_timer_set_cb>:
 * @return int
 */
int
hal_timer_set_cb(int timer_num, struct hal_timer *timer, hal_timer_cb cb_func,
                 void *arg)
{
   30b72:	b570      	push	{r4, r5, r6, lr}
   30b74:	460c      	mov	r4, r1
   30b76:	4616      	mov	r6, r2
   30b78:	461d      	mov	r5, r3
    return SYS_EINVAL;
#endif

    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   30b7a:	f7ff fe6b 	bl	30854 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   30b7e:	b128      	cbz	r0, 30b8c <hal_timer_set_cb+0x1a>
        return SYS_EINVAL;
    }

    timer->cb_func = cb_func;
   30b80:	6066      	str	r6, [r4, #4]
    timer->cb_arg = arg;
   30b82:	60a5      	str	r5, [r4, #8]
    timer->bsp_timer = bsp_timer;
   30b84:	6020      	str	r0, [r4, #0]
    timer->link.tqe_prev = NULL;
   30b86:	2000      	movs	r0, #0
   30b88:	6160      	str	r0, [r4, #20]

    return 0;
}
   30b8a:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   30b8c:	f06f 0001 	mvn.w	r0, #1
   30b90:	e7fb      	b.n	30b8a <hal_timer_set_cb+0x18>

00030b92 <hal_timer_start_at>:
 *
 * @return int
 */
int
hal_timer_start_at(struct hal_timer *timer, uint32_t tick)
{
   30b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30b96:	4604      	mov	r4, r0
   30b98:	460f      	mov	r7, r1

    struct apollo3_timer *bsp_timer;
    struct hal_timer *cur;
    os_sr_t sr;

    bsp_timer = timer->bsp_timer;
   30b9a:	6806      	ldr	r6, [r0, #0]
    timer->expiry = tick;
   30b9c:	60c1      	str	r1, [r0, #12]

    OS_ENTER_CRITICAL(sr);
   30b9e:	f7e5 fdb1 	bl	16704 <os_arch_save_sr>
   30ba2:	4680      	mov	r8, r0

    if (TAILQ_EMPTY(&bsp_timer->hal_timer_q)) {
   30ba4:	6833      	ldr	r3, [r6, #0]
   30ba6:	b93b      	cbnz	r3, 30bb8 <hal_timer_start_at+0x26>
        TAILQ_INSERT_HEAD(&bsp_timer->hal_timer_q, timer, link);
   30ba8:	4622      	mov	r2, r4
   30baa:	f842 3f10 	str.w	r3, [r2, #16]!
   30bae:	6072      	str	r2, [r6, #4]
   30bb0:	6034      	str	r4, [r6, #0]
   30bb2:	6166      	str	r6, [r4, #20]
   30bb4:	e00f      	b.n	30bd6 <hal_timer_start_at+0x44>
    } else {
        TAILQ_FOREACH(cur, &bsp_timer->hal_timer_q, link) {
   30bb6:	691b      	ldr	r3, [r3, #16]
   30bb8:	b163      	cbz	r3, 30bd4 <hal_timer_start_at+0x42>
            if ((int32_t)(timer->expiry - cur->expiry) < 0) {
   30bba:	68e2      	ldr	r2, [r4, #12]
   30bbc:	68dd      	ldr	r5, [r3, #12]
   30bbe:	1b52      	subs	r2, r2, r5
   30bc0:	2a00      	cmp	r2, #0
   30bc2:	daf8      	bge.n	30bb6 <hal_timer_start_at+0x24>
                TAILQ_INSERT_BEFORE(cur, timer, link);
   30bc4:	695a      	ldr	r2, [r3, #20]
   30bc6:	6162      	str	r2, [r4, #20]
   30bc8:	6123      	str	r3, [r4, #16]
   30bca:	695a      	ldr	r2, [r3, #20]
   30bcc:	6014      	str	r4, [r2, #0]
   30bce:	f104 0210 	add.w	r2, r4, #16
   30bd2:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (cur == NULL) {
   30bd4:	b143      	cbz	r3, 30be8 <hal_timer_start_at+0x56>
            TAILQ_INSERT_TAIL(&bsp_timer->hal_timer_q, timer, link);
        }
    }

    if (timer == TAILQ_FIRST(&bsp_timer->hal_timer_q)) {
   30bd6:	6833      	ldr	r3, [r6, #0]
   30bd8:	42a3      	cmp	r3, r4
   30bda:	d00d      	beq.n	30bf8 <hal_timer_start_at+0x66>
        apollo3_timer_set_ocmp_at(bsp_timer, tick);
    }

    OS_EXIT_CRITICAL(sr);
   30bdc:	4640      	mov	r0, r8
   30bde:	f7e5 fd97 	bl	16710 <os_arch_restore_sr>

    return 0;
}
   30be2:	2000      	movs	r0, #0
   30be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TAILQ_INSERT_TAIL(&bsp_timer->hal_timer_q, timer, link);
   30be8:	6123      	str	r3, [r4, #16]
   30bea:	6873      	ldr	r3, [r6, #4]
   30bec:	6163      	str	r3, [r4, #20]
   30bee:	601c      	str	r4, [r3, #0]
   30bf0:	f104 0310 	add.w	r3, r4, #16
   30bf4:	6073      	str	r3, [r6, #4]
   30bf6:	e7ee      	b.n	30bd6 <hal_timer_start_at+0x44>
        apollo3_timer_set_ocmp_at(bsp_timer, tick);
   30bf8:	4639      	mov	r1, r7
   30bfa:	4630      	mov	r0, r6
   30bfc:	f7ff fed1 	bl	309a2 <apollo3_timer_set_ocmp_at>
   30c00:	e7ec      	b.n	30bdc <hal_timer_start_at+0x4a>

00030c02 <hal_timer_stop>:
    struct apollo3_timer *bsp_timer;
    int reset_ocmp;
    os_sr_t sr;

    /* If timer's prev pointer is null, the timer hasn't been started. */
    if (timer->link.tqe_prev == NULL) {
   30c02:	6943      	ldr	r3, [r0, #20]
   30c04:	b303      	cbz	r3, 30c48 <hal_timer_stop+0x46>
{
   30c06:	b570      	push	{r4, r5, r6, lr}
   30c08:	4604      	mov	r4, r0
        return 0;
    }

    bsp_timer = timer->bsp_timer;
   30c0a:	6806      	ldr	r6, [r0, #0]

    OS_ENTER_CRITICAL(sr);
   30c0c:	f7e5 fd7a 	bl	16704 <os_arch_save_sr>
   30c10:	4605      	mov	r5, r0
    if (timer == TAILQ_FIRST(&bsp_timer->hal_timer_q)) {
        /* If first on queue, we will need to reset OCMP */
        reset_ocmp = 1;
    }

    TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   30c12:	6923      	ldr	r3, [r4, #16]
   30c14:	b18b      	cbz	r3, 30c3a <hal_timer_stop+0x38>
   30c16:	6962      	ldr	r2, [r4, #20]
   30c18:	615a      	str	r2, [r3, #20]
   30c1a:	6963      	ldr	r3, [r4, #20]
   30c1c:	6922      	ldr	r2, [r4, #16]
   30c1e:	601a      	str	r2, [r3, #0]
    timer->link.tqe_prev = NULL;
   30c20:	2300      	movs	r3, #0
   30c22:	6163      	str	r3, [r4, #20]

    if (reset_ocmp) {
        timer = TAILQ_FIRST(&bsp_timer->hal_timer_q);
   30c24:	6833      	ldr	r3, [r6, #0]
        if (timer != NULL) {
   30c26:	b15b      	cbz	r3, 30c40 <hal_timer_stop+0x3e>
            apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   30c28:	68d9      	ldr	r1, [r3, #12]
   30c2a:	4630      	mov	r0, r6
   30c2c:	f7ff feb9 	bl	309a2 <apollo3_timer_set_ocmp_at>
        } else {
            apollo3_timer_clear_ocmp(bsp_timer);
        }
    }

    OS_EXIT_CRITICAL(sr);
   30c30:	4628      	mov	r0, r5
   30c32:	f7e5 fd6d 	bl	16710 <os_arch_restore_sr>

    return 0;
}
   30c36:	2000      	movs	r0, #0
   30c38:	bd70      	pop	{r4, r5, r6, pc}
    TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   30c3a:	6963      	ldr	r3, [r4, #20]
   30c3c:	6073      	str	r3, [r6, #4]
   30c3e:	e7ec      	b.n	30c1a <hal_timer_stop+0x18>
            apollo3_timer_clear_ocmp(bsp_timer);
   30c40:	4630      	mov	r0, r6
   30c42:	f7ff fecf 	bl	309e4 <apollo3_timer_clear_ocmp>
   30c46:	e7f3      	b.n	30c30 <hal_timer_stop+0x2e>
}
   30c48:	2000      	movs	r0, #0
   30c4a:	4770      	bx	lr

00030c4c <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   30c4c:	b538      	push	{r3, r4, r5, lr}
   30c4e:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   30c50:	4b2f      	ldr	r3, [pc, #188]	; (30d10 <apollo3_uart_irqh_x+0xc4>)
   30c52:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   30c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30c56:	ea22 0205 	bic.w	r2, r2, r5
   30c5a:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   30c5c:	f015 0f20 	tst.w	r5, #32
   30c60:	d034      	beq.n	30ccc <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   30c62:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   30c66:	4a2b      	ldr	r2, [pc, #172]	; (30d14 <apollo3_uart_irqh_x+0xc8>)
   30c68:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   30c6c:	f013 0f04 	tst.w	r3, #4
   30c70:	d02c      	beq.n	30ccc <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   30c72:	4b27      	ldr	r3, [pc, #156]	; (30d10 <apollo3_uart_irqh_x+0xc4>)
   30c74:	699b      	ldr	r3, [r3, #24]
   30c76:	f013 0f20 	tst.w	r3, #32
   30c7a:	d127      	bne.n	30ccc <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   30c7c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30c80:	4a24      	ldr	r2, [pc, #144]	; (30d14 <apollo3_uart_irqh_x+0xc8>)
   30c82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30c86:	689a      	ldr	r2, [r3, #8]
   30c88:	6918      	ldr	r0, [r3, #16]
   30c8a:	4790      	blx	r2
                if (data < 0) {
   30c8c:	2800      	cmp	r0, #0
   30c8e:	db02      	blt.n	30c96 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   30c90:	4b1f      	ldr	r3, [pc, #124]	; (30d10 <apollo3_uart_irqh_x+0xc4>)
   30c92:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   30c94:	e7ed      	b.n	30c72 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   30c96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30c9a:	4a1e      	ldr	r2, [pc, #120]	; (30d14 <apollo3_uart_irqh_x+0xc8>)
   30c9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30ca0:	68d9      	ldr	r1, [r3, #12]
   30ca2:	b129      	cbz	r1, 30cb0 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   30ca4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30ca8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30cac:	6918      	ldr	r0, [r3, #16]
   30cae:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   30cb0:	4a17      	ldr	r2, [pc, #92]	; (30d10 <apollo3_uart_irqh_x+0xc4>)
   30cb2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   30cb4:	f023 0320 	bic.w	r3, r3, #32
   30cb8:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   30cba:	4b16      	ldr	r3, [pc, #88]	; (30d14 <apollo3_uart_irqh_x+0xc8>)
   30cbc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   30cc0:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   30cc4:	f36f 0182 	bfc	r1, #2, #1
   30cc8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   30ccc:	f015 0f50 	tst.w	r5, #80	; 0x50
   30cd0:	d100      	bne.n	30cd4 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   30cd2:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   30cd4:	4b0e      	ldr	r3, [pc, #56]	; (30d10 <apollo3_uart_irqh_x+0xc4>)
   30cd6:	699b      	ldr	r3, [r3, #24]
   30cd8:	f013 0f10 	tst.w	r3, #16
   30cdc:	d1f9      	bne.n	30cd2 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   30cde:	4b0c      	ldr	r3, [pc, #48]	; (30d10 <apollo3_uart_irqh_x+0xc4>)
   30ce0:	6819      	ldr	r1, [r3, #0]
   30ce2:	b2c9      	uxtb	r1, r1
   30ce4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30ce8:	4a0a      	ldr	r2, [pc, #40]	; (30d14 <apollo3_uart_irqh_x+0xc8>)
   30cea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30cee:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   30cf0:	685a      	ldr	r2, [r3, #4]
   30cf2:	6918      	ldr	r0, [r3, #16]
   30cf4:	4790      	blx	r2
            if (rc < 0) {
   30cf6:	2800      	cmp	r0, #0
   30cf8:	daec      	bge.n	30cd4 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   30cfa:	4a06      	ldr	r2, [pc, #24]	; (30d14 <apollo3_uart_irqh_x+0xc8>)
   30cfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   30d00:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   30d04:	f043 0302 	orr.w	r3, r3, #2
   30d08:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   30d0c:	e7e1      	b.n	30cd2 <apollo3_uart_irqh_x+0x86>
   30d0e:	bf00      	nop
   30d10:	4001c000 	.word	0x4001c000
   30d14:	10003da4 	.word	0x10003da4

00030d18 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   30d18:	b508      	push	{r3, lr}
   30d1a:	2000      	movs	r0, #0
   30d1c:	f7ff ff96 	bl	30c4c <apollo3_uart_irqh_x>
   30d20:	bd08      	pop	{r3, pc}

00030d22 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   30d22:	b508      	push	{r3, lr}
   30d24:	2001      	movs	r0, #1
   30d26:	f7ff ff91 	bl	30c4c <apollo3_uart_irqh_x>
   30d2a:	bd08      	pop	{r3, pc}

00030d2c <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   30d2c:	b148      	cbz	r0, 30d42 <apollo3_uart_irq_info+0x16>
   30d2e:	2801      	cmp	r0, #1
   30d30:	d10a      	bne.n	30d48 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   30d32:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   30d34:	4b07      	ldr	r3, [pc, #28]	; (30d54 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   30d36:	b101      	cbz	r1, 30d3a <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   30d38:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   30d3a:	b142      	cbz	r2, 30d4e <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   30d3c:	6013      	str	r3, [r2, #0]
    }
    return 0;
   30d3e:	2000      	movs	r0, #0
   30d40:	4770      	bx	lr
    switch (port) {
   30d42:	200f      	movs	r0, #15
   30d44:	4b04      	ldr	r3, [pc, #16]	; (30d58 <apollo3_uart_irq_info+0x2c>)
   30d46:	e7f6      	b.n	30d36 <apollo3_uart_irq_info+0xa>
   30d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30d4c:	4770      	bx	lr
    return 0;
   30d4e:	2000      	movs	r0, #0
}
   30d50:	4770      	bx	lr
   30d52:	bf00      	nop
   30d54:	00030d23 	.word	0x00030d23
   30d58:	00030d19 	.word	0x00030d19

00030d5c <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   30d5c:	b500      	push	{lr}
   30d5e:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   30d60:	aa01      	add	r2, sp, #4
   30d62:	4669      	mov	r1, sp
   30d64:	f7ff ffe2 	bl	30d2c <apollo3_uart_irq_info>
    assert(rc == 0);
   30d68:	b950      	cbnz	r0, 30d80 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   30d6a:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   30d6e:	4a09      	ldr	r2, [pc, #36]	; (30d94 <apollo3_uart_set_nvic+0x38>)
   30d70:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   30d72:	3310      	adds	r3, #16
   30d74:	9901      	ldr	r1, [sp, #4]
   30d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   30d7a:	b003      	add	sp, #12
   30d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   30d80:	f7e3 fc68 	bl	14654 <hal_debugger_connected>
   30d84:	b100      	cbz	r0, 30d88 <apollo3_uart_set_nvic+0x2c>
   30d86:	be01      	bkpt	0x0001
   30d88:	2300      	movs	r3, #0
   30d8a:	461a      	mov	r2, r3
   30d8c:	4619      	mov	r1, r3
   30d8e:	4618      	mov	r0, r3
   30d90:	f7e4 f802 	bl	14d98 <__assert_func>
   30d94:	e000ed00 	.word	0xe000ed00

00030d98 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   30d98:	2801      	cmp	r0, #1
   30d9a:	dc14      	bgt.n	30dc6 <hal_uart_init_cbs+0x2e>
{
   30d9c:	b430      	push	{r4, r5}
    if (u->u_open) {
   30d9e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   30da2:	4d0c      	ldr	r5, [pc, #48]	; (30dd4 <hal_uart_init_cbs+0x3c>)
   30da4:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   30da8:	f014 0f01 	tst.w	r4, #1
   30dac:	d10e      	bne.n	30dcc <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   30dae:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   30db2:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   30db6:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   30db8:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   30dba:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   30dbc:	9b02      	ldr	r3, [sp, #8]
   30dbe:	6123      	str	r3, [r4, #16]
    return 0;
   30dc0:	2000      	movs	r0, #0
}
   30dc2:	bc30      	pop	{r4, r5}
   30dc4:	4770      	bx	lr
        return -1;
   30dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   30dca:	4770      	bx	lr
        return -1;
   30dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30dd0:	e7f7      	b.n	30dc2 <hal_uart_init_cbs+0x2a>
   30dd2:	bf00      	nop
   30dd4:	10003da4 	.word	0x10003da4

00030dd8 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   30dd8:	2801      	cmp	r0, #1
   30dda:	dc49      	bgt.n	30e70 <hal_uart_start_tx+0x98>
{
   30ddc:	b538      	push	{r3, r4, r5, lr}
   30dde:	4604      	mov	r4, r0
    if (!u->u_open) {
   30de0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   30de4:	4a23      	ldr	r2, [pc, #140]	; (30e74 <hal_uart_start_tx+0x9c>)
   30de6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   30dea:	f013 0f01 	tst.w	r3, #1
   30dee:	d100      	bne.n	30df2 <hal_uart_start_tx+0x1a>
}
   30df0:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   30df2:	f7e5 fc87 	bl	16704 <os_arch_save_sr>
   30df6:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   30df8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30dfc:	4a1d      	ldr	r2, [pc, #116]	; (30e74 <hal_uart_start_tx+0x9c>)
   30dfe:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   30e02:	f013 0f04 	tst.w	r3, #4
   30e06:	d11f      	bne.n	30e48 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   30e08:	4b1b      	ldr	r3, [pc, #108]	; (30e78 <hal_uart_start_tx+0xa0>)
   30e0a:	699b      	ldr	r3, [r3, #24]
   30e0c:	f013 0f20 	tst.w	r3, #32
   30e10:	d10c      	bne.n	30e2c <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   30e12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30e16:	4a17      	ldr	r2, [pc, #92]	; (30e74 <hal_uart_start_tx+0x9c>)
   30e18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30e1c:	689a      	ldr	r2, [r3, #8]
   30e1e:	6918      	ldr	r0, [r3, #16]
   30e20:	4790      	blx	r2
            if (data < 0) {
   30e22:	2800      	cmp	r0, #0
   30e24:	db14      	blt.n	30e50 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   30e26:	4b14      	ldr	r3, [pc, #80]	; (30e78 <hal_uart_start_tx+0xa0>)
   30e28:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   30e2a:	e7ed      	b.n	30e08 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   30e2c:	4a11      	ldr	r2, [pc, #68]	; (30e74 <hal_uart_start_tx+0x9c>)
   30e2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   30e32:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   30e36:	f043 0304 	orr.w	r3, r3, #4
   30e3a:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   30e3e:	4a0e      	ldr	r2, [pc, #56]	; (30e78 <hal_uart_start_tx+0xa0>)
   30e40:	6b93      	ldr	r3, [r2, #56]	; 0x38
   30e42:	f043 0320 	orr.w	r3, r3, #32
   30e46:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   30e48:	4628      	mov	r0, r5
   30e4a:	f7e5 fc61 	bl	16710 <os_arch_restore_sr>
   30e4e:	e7cf      	b.n	30df0 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   30e50:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30e54:	4a07      	ldr	r2, [pc, #28]	; (30e74 <hal_uart_start_tx+0x9c>)
   30e56:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30e5a:	68da      	ldr	r2, [r3, #12]
   30e5c:	2a00      	cmp	r2, #0
   30e5e:	d0f3      	beq.n	30e48 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   30e60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   30e64:	4b03      	ldr	r3, [pc, #12]	; (30e74 <hal_uart_start_tx+0x9c>)
   30e66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   30e6a:	6920      	ldr	r0, [r4, #16]
   30e6c:	4790      	blx	r2
   30e6e:	e7eb      	b.n	30e48 <hal_uart_start_tx+0x70>
   30e70:	4770      	bx	lr
   30e72:	bf00      	nop
   30e74:	10003da4 	.word	0x10003da4
   30e78:	4001c000 	.word	0x4001c000

00030e7c <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   30e7c:	2801      	cmp	r0, #1
   30e7e:	dc2c      	bgt.n	30eda <hal_uart_start_rx+0x5e>
{
   30e80:	b538      	push	{r3, r4, r5, lr}
   30e82:	4604      	mov	r4, r0
    if (!u->u_open) {
   30e84:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   30e88:	4a14      	ldr	r2, [pc, #80]	; (30edc <hal_uart_start_rx+0x60>)
   30e8a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   30e8e:	f013 0f01 	tst.w	r3, #1
   30e92:	d002      	beq.n	30e9a <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   30e94:	f013 0f02 	tst.w	r3, #2
   30e98:	d100      	bne.n	30e9c <hal_uart_start_rx+0x20>
}
   30e9a:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   30e9c:	f7e5 fc32 	bl	16704 <os_arch_save_sr>
   30ea0:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   30ea2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30ea6:	4a0d      	ldr	r2, [pc, #52]	; (30edc <hal_uart_start_rx+0x60>)
   30ea8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30eac:	685a      	ldr	r2, [r3, #4]
   30eae:	7859      	ldrb	r1, [r3, #1]
   30eb0:	6918      	ldr	r0, [r3, #16]
   30eb2:	4790      	blx	r2
        if (rc == 0) {
   30eb4:	b968      	cbnz	r0, 30ed2 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   30eb6:	4b09      	ldr	r3, [pc, #36]	; (30edc <hal_uart_start_rx+0x60>)
   30eb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   30ebc:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   30ec0:	f36f 0241 	bfc	r2, #1, #1
   30ec4:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   30ec8:	4a05      	ldr	r2, [pc, #20]	; (30ee0 <hal_uart_start_rx+0x64>)
   30eca:	6b93      	ldr	r3, [r2, #56]	; 0x38
   30ecc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   30ed0:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   30ed2:	4628      	mov	r0, r5
   30ed4:	f7e5 fc1c 	bl	16710 <os_arch_restore_sr>
   30ed8:	e7df      	b.n	30e9a <hal_uart_start_rx+0x1e>
   30eda:	4770      	bx	lr
   30edc:	10003da4 	.word	0x10003da4
   30ee0:	4001c000 	.word	0x4001c000

00030ee4 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   30ee4:	2801      	cmp	r0, #1
   30ee6:	dc0e      	bgt.n	30f06 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   30ee8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   30eec:	4b06      	ldr	r3, [pc, #24]	; (30f08 <hal_uart_blocking_tx+0x24>)
   30eee:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   30ef2:	f013 0f01 	tst.w	r3, #1
   30ef6:	d006      	beq.n	30f06 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   30ef8:	4b04      	ldr	r3, [pc, #16]	; (30f0c <hal_uart_blocking_tx+0x28>)
   30efa:	699b      	ldr	r3, [r3, #24]
   30efc:	f013 0f20 	tst.w	r3, #32
   30f00:	d1fa      	bne.n	30ef8 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   30f02:	4b02      	ldr	r3, [pc, #8]	; (30f0c <hal_uart_blocking_tx+0x28>)
   30f04:	6019      	str	r1, [r3, #0]
}
   30f06:	4770      	bx	lr
   30f08:	10003da4 	.word	0x10003da4
   30f0c:	4001c000 	.word	0x4001c000

00030f10 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   30f10:	2801      	cmp	r0, #1
   30f12:	dc6b      	bgt.n	30fec <hal_uart_init+0xdc>
{
   30f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   30f16:	b083      	sub	sp, #12
   30f18:	4604      	mov	r4, r0
   30f1a:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   30f1c:	4e38      	ldr	r6, [pc, #224]	; (31000 <hal_uart_init+0xf0>)
   30f1e:	0045      	lsls	r5, r0, #1
   30f20:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   30f24:	00db      	lsls	r3, r3, #3
   30f26:	3310      	adds	r3, #16
   30f28:	4433      	add	r3, r6
   30f2a:	1d19      	adds	r1, r3, #4
   30f2c:	f000 fe0c 	bl	31b48 <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   30f30:	4425      	add	r5, r4
   30f32:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   30f36:	2200      	movs	r2, #0
   30f38:	4611      	mov	r1, r2
   30f3a:	6968      	ldr	r0, [r5, #20]
   30f3c:	f000 ff3e 	bl	31dbc <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
   30f40:	2100      	movs	r1, #0
   30f42:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
   30f46:	f10d 0207 	add.w	r2, sp, #7
   30f4a:	6968      	ldr	r0, [r5, #20]
   30f4c:	f000 ffaa 	bl	31ea4 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   30f50:	492c      	ldr	r1, [pc, #176]	; (31004 <hal_uart_init+0xf4>)
   30f52:	6968      	ldr	r0, [r5, #20]
   30f54:	f000 fe96 	bl	31c84 <am_hal_uart_configure>

    switch (cfg->suc_pin_tx) {
   30f58:	7838      	ldrb	r0, [r7, #0]
   30f5a:	2816      	cmp	r0, #22
   30f5c:	d005      	beq.n	30f6a <hal_uart_init+0x5a>
   30f5e:	2823      	cmp	r0, #35	; 0x23
   30f60:	d013      	beq.n	30f8a <hal_uart_init+0x7a>
   30f62:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   30f66:	b003      	add	sp, #12
   30f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pincfg.uFuncSel = 0;
   30f6a:	2500      	movs	r5, #0
   30f6c:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   30f70:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   30f74:	4629      	mov	r1, r5
   30f76:	f000 fb1f 	bl	315b8 <am_hal_gpio_pinconfig>
    switch (cfg->suc_pin_rx) {
   30f7a:	7878      	ldrb	r0, [r7, #1]
   30f7c:	2817      	cmp	r0, #23
   30f7e:	d009      	beq.n	30f94 <hal_uart_init+0x84>
   30f80:	2824      	cmp	r0, #36	; 0x24
   30f82:	d027      	beq.n	30fd4 <hal_uart_init+0xc4>
   30f84:	f06f 0001 	mvn.w	r0, #1
   30f88:	e7ed      	b.n	30f66 <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
   30f8a:	2500      	movs	r5, #0
   30f8c:	2302      	movs	r3, #2
   30f8e:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   30f92:	e7ed      	b.n	30f70 <hal_uart_init+0x60>
        pincfg.uFuncSel = 0;
   30f94:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   30f98:	4629      	mov	r1, r5
   30f9a:	f000 fb0d 	bl	315b8 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts != 0) {
   30f9e:	78b8      	ldrb	r0, [r7, #2]
   30fa0:	b140      	cbz	r0, 30fb4 <hal_uart_init+0xa4>
        switch (cfg->suc_pin_rts) {
   30fa2:	2825      	cmp	r0, #37	; 0x25
   30fa4:	d01a      	beq.n	30fdc <hal_uart_init+0xcc>
   30fa6:	282c      	cmp	r0, #44	; 0x2c
   30fa8:	d123      	bne.n	30ff2 <hal_uart_init+0xe2>
            pincfg.uFuncSel = 0;
   30faa:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   30fae:	4629      	mov	r1, r5
   30fb0:	f000 fb02 	bl	315b8 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts != 0) {
   30fb4:	78f8      	ldrb	r0, [r7, #3]
   30fb6:	b140      	cbz	r0, 30fca <hal_uart_init+0xba>
        switch (cfg->suc_pin_cts) {
   30fb8:	2826      	cmp	r0, #38	; 0x26
   30fba:	d013      	beq.n	30fe4 <hal_uart_init+0xd4>
   30fbc:	282d      	cmp	r0, #45	; 0x2d
   30fbe:	d11b      	bne.n	30ff8 <hal_uart_init+0xe8>
            pincfg.uFuncSel = 0;
   30fc0:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   30fc4:	4629      	mov	r1, r5
   30fc6:	f000 faf7 	bl	315b8 <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   30fca:	4620      	mov	r0, r4
   30fcc:	f7ff fec6 	bl	30d5c <apollo3_uart_set_nvic>
    return 0;
   30fd0:	2000      	movs	r0, #0
   30fd2:	e7c8      	b.n	30f66 <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
   30fd4:	2302      	movs	r3, #2
   30fd6:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   30fda:	e7dd      	b.n	30f98 <hal_uart_init+0x88>
            pincfg.uFuncSel = 2;
   30fdc:	2302      	movs	r3, #2
   30fde:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   30fe2:	e7e4      	b.n	30fae <hal_uart_init+0x9e>
            pincfg.uFuncSel = 2;
   30fe4:	2302      	movs	r3, #2
   30fe6:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   30fea:	e7eb      	b.n	30fc4 <hal_uart_init+0xb4>
        return SYS_EINVAL;
   30fec:	f06f 0001 	mvn.w	r0, #1
}
   30ff0:	4770      	bx	lr
        switch (cfg->suc_pin_rts) {
   30ff2:	f06f 0001 	mvn.w	r0, #1
   30ff6:	e7b6      	b.n	30f66 <hal_uart_init+0x56>
        switch (cfg->suc_pin_cts) {
   30ff8:	f06f 0001 	mvn.w	r0, #1
   30ffc:	e7b3      	b.n	30f66 <hal_uart_init+0x56>
   30ffe:	bf00      	nop
   31000:	10003da4 	.word	0x10003da4
   31004:	0003541c 	.word	0x0003541c

00031008 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   31008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3100c:	b08d      	sub	sp, #52	; 0x34
   3100e:	4604      	mov	r4, r0
   31010:	4688      	mov	r8, r1
   31012:	4615      	mov	r5, r2
   31014:	461e      	mov	r6, r3
   31016:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   3101a:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   3101e:	2228      	movs	r2, #40	; 0x28
   31020:	2100      	movs	r1, #0
   31022:	a801      	add	r0, sp, #4
   31024:	f7e5 fd67 	bl	16af6 <memset>
   31028:	2312      	movs	r3, #18
   3102a:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   3102c:	2c01      	cmp	r4, #1
   3102e:	dc6f      	bgt.n	31110 <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   31030:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   31034:	4a3e      	ldr	r2, [pc, #248]	; (31130 <hal_uart_config+0x128>)
   31036:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   3103a:	f013 0f01 	tst.w	r3, #1
   3103e:	d16a      	bne.n	31116 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   31040:	1f6a      	subs	r2, r5, #5
   31042:	2a03      	cmp	r2, #3
   31044:	d86a      	bhi.n	3111c <hal_uart_config+0x114>
   31046:	e8df f002 	tbb	[pc, r2]
   3104a:	1d20      	.short	0x1d20
   3104c:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   3104e:	2360      	movs	r3, #96	; 0x60
   31050:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   31052:	2e01      	cmp	r6, #1
   31054:	d01c      	beq.n	31090 <hal_uart_config+0x88>
   31056:	2e02      	cmp	r6, #2
   31058:	d163      	bne.n	31122 <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   3105a:	2308      	movs	r3, #8
   3105c:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   3105e:	2200      	movs	r2, #0
   31060:	a90b      	add	r1, sp, #44	; 0x2c
   31062:	4620      	mov	r0, r4
   31064:	f7ff fe62 	bl	30d2c <apollo3_uart_irq_info>
    if (rc != 0) {
   31068:	4605      	mov	r5, r0
   3106a:	2800      	cmp	r0, #0
   3106c:	d15c      	bne.n	31128 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   3106e:	b197      	cbz	r7, 31096 <hal_uart_config+0x8e>
   31070:	3f01      	subs	r7, #1
   31072:	b2ff      	uxtb	r7, r7
   31074:	2f01      	cmp	r7, #1
   31076:	d810      	bhi.n	3109a <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   31078:	2306      	movs	r3, #6
   3107a:	9303      	str	r3, [sp, #12]
        break;
   3107c:	e00d      	b.n	3109a <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   3107e:	2340      	movs	r3, #64	; 0x40
   31080:	9302      	str	r3, [sp, #8]
        break;
   31082:	e7e6      	b.n	31052 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   31084:	2320      	movs	r3, #32
   31086:	9302      	str	r3, [sp, #8]
        break;
   31088:	e7e3      	b.n	31052 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   3108a:	2300      	movs	r3, #0
   3108c:	9302      	str	r3, [sp, #8]
        break;
   3108e:	e7e0      	b.n	31052 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   31090:	2300      	movs	r3, #0
   31092:	9304      	str	r3, [sp, #16]
        break;
   31094:	e7e3      	b.n	3105e <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   31096:	2300      	movs	r3, #0
   31098:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   3109a:	f1b9 0f00 	cmp.w	r9, #0
   3109e:	d030      	beq.n	31102 <hal_uart_config+0xfa>
   310a0:	f1b9 0f01 	cmp.w	r9, #1
   310a4:	d030      	beq.n	31108 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   310a6:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   310aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   310ae:	4a20      	ldr	r2, [pc, #128]	; (31130 <hal_uart_config+0x128>)
   310b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   310b4:	a901      	add	r1, sp, #4
   310b6:	6958      	ldr	r0, [r3, #20]
   310b8:	f000 fde4 	bl	31c84 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   310bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   310be:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   310c0:	2b00      	cmp	r3, #0
   310c2:	db08      	blt.n	310d6 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   310c4:	f002 021f 	and.w	r2, r2, #31
   310c8:	095b      	lsrs	r3, r3, #5
   310ca:	2101      	movs	r1, #1
   310cc:	fa01 f202 	lsl.w	r2, r1, r2
   310d0:	4918      	ldr	r1, [pc, #96]	; (31134 <hal_uart_config+0x12c>)
   310d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   310d6:	4a18      	ldr	r2, [pc, #96]	; (31138 <hal_uart_config+0x130>)
   310d8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   310da:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   310de:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   310e0:	4a13      	ldr	r2, [pc, #76]	; (31130 <hal_uart_config+0x128>)
   310e2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   310e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   310ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   310ee:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   310f2:	f043 0301 	orr.w	r3, r3, #1
   310f6:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   310fa:	4628      	mov	r0, r5
   310fc:	b00d      	add	sp, #52	; 0x34
   310fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   31102:	2300      	movs	r3, #0
   31104:	9305      	str	r3, [sp, #20]
        break;
   31106:	e7ce      	b.n	310a6 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   31108:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   3110c:	9305      	str	r3, [sp, #20]
        break;
   3110e:	e7ca      	b.n	310a6 <hal_uart_config+0x9e>
        return -1;
   31110:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31114:	e7f1      	b.n	310fa <hal_uart_config+0xf2>
        return -1;
   31116:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3111a:	e7ee      	b.n	310fa <hal_uart_config+0xf2>
    if (u->u_open) {
   3111c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31120:	e7eb      	b.n	310fa <hal_uart_config+0xf2>
    switch (stopbits) {
   31122:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   31126:	e7e8      	b.n	310fa <hal_uart_config+0xf2>
        return -1;
   31128:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3112c:	e7e5      	b.n	310fa <hal_uart_config+0xf2>
   3112e:	bf00      	nop
   31130:	10003da4 	.word	0x10003da4
   31134:	e000e100 	.word	0xe000e100
   31138:	4001c000 	.word	0x4001c000

0003113c <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   3113c:	2801      	cmp	r0, #1
   3113e:	dc34      	bgt.n	311aa <hal_uart_close+0x6e>
{
   31140:	b510      	push	{r4, lr}
   31142:	b082      	sub	sp, #8
   31144:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   31146:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   3114a:	4a1b      	ldr	r2, [pc, #108]	; (311b8 <hal_uart_close+0x7c>)
   3114c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   31150:	f013 0f01 	tst.w	r3, #1
   31154:	d02c      	beq.n	311b0 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   31156:	4613      	mov	r3, r2
   31158:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   3115c:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   31160:	f36f 0100 	bfc	r1, #0, #1
   31164:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   31168:	f000 fb58 	bl	3181c <am_hal_interrupt_master_disable>
   3116c:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   3116e:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   31172:	331c      	adds	r3, #28
   31174:	031b      	lsls	r3, r3, #12
   31176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   31178:	f36f 0200 	bfc	r2, #0, #1
   3117c:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   3117e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   31180:	f36f 2249 	bfc	r2, #9, #1
   31184:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   31186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   31188:	f36f 2208 	bfc	r2, #8, #1
   3118c:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   3118e:	9801      	ldr	r0, [sp, #4]
   31190:	f000 fb48 	bl	31824 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   31194:	4b09      	ldr	r3, [pc, #36]	; (311bc <hal_uart_close+0x80>)
   31196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   31198:	f36f 02c3 	bfc	r2, #3, #1
   3119c:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   3119e:	b2e0      	uxtb	r0, r4
   311a0:	f000 fbca 	bl	31938 <am_hal_pwrctrl_periph_disable>
    return 0;
   311a4:	2000      	movs	r0, #0
}
   311a6:	b002      	add	sp, #8
   311a8:	bd10      	pop	{r4, pc}
        return -1;
   311aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   311ae:	4770      	bx	lr
        return -1;
   311b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   311b4:	e7f7      	b.n	311a6 <hal_uart_close+0x6a>
   311b6:	bf00      	nop
   311b8:	10003da4 	.word	0x10003da4
   311bc:	4001c000 	.word	0x4001c000

000311c0 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   311c0:	2000      	movs	r0, #0
   311c2:	4770      	bx	lr

000311c4 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   311c4:	4770      	bx	lr

000311c6 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   311c6:	4770      	bx	lr

000311c8 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   311c8:	b570      	push	{r4, r5, r6, lr}
   311ca:	b082      	sub	sp, #8
   311cc:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   311ce:	0145      	lsls	r5, r0, #5
   311d0:	4e06      	ldr	r6, [pc, #24]	; (311ec <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   311d2:	f000 fb23 	bl	3181c <am_hal_interrupt_master_disable>
   311d6:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   311d8:	59a9      	ldr	r1, [r5, r6]
   311da:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   311de:	430c      	orrs	r4, r1
   311e0:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   311e2:	9801      	ldr	r0, [sp, #4]
   311e4:	f000 fb1e 	bl	31824 <am_hal_interrupt_master_set>

} // ctimer_clr()
   311e8:	b002      	add	sp, #8
   311ea:	bd70      	pop	{r4, r5, r6, pc}
   311ec:	4000800c 	.word	0x4000800c

000311f0 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   311f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   311f4:	b082      	sub	sp, #8
   311f6:	4606      	mov	r6, r0
   311f8:	460c      	mov	r4, r1
   311fa:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   311fc:	f7ff ffe4 	bl	311c8 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   31200:	ea4f 1846 	mov.w	r8, r6, lsl #5
   31204:	4f18      	ldr	r7, [pc, #96]	; (31268 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   31206:	f000 fb09 	bl	3181c <am_hal_interrupt_master_disable>
   3120a:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   3120c:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   31210:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   31214:	d017      	beq.n	31246 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   31216:	ea23 0304 	bic.w	r3, r3, r4
   3121a:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   3121c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   31220:	d013      	beq.n	3124a <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   31222:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   31226:	9801      	ldr	r0, [sp, #4]
   31228:	f000 fafc 	bl	31824 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   3122c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   31230:	d010      	beq.n	31254 <am_hal_ctimer_config_single+0x64>
   31232:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   31236:	d015      	beq.n	31264 <am_hal_ctimer_config_single+0x74>
   31238:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3123c:	429c      	cmp	r4, r3
   3123e:	d007      	beq.n	31250 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   31240:	b002      	add	sp, #8
   31242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   31246:	042d      	lsls	r5, r5, #16
   31248:	e7e5      	b.n	31216 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   3124a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   3124e:	e7e8      	b.n	31222 <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   31250:	2300      	movs	r3, #0
   31252:	e000      	b.n	31256 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   31254:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   31256:	f3c5 0544 	ubfx	r5, r5, #1, #5
   3125a:	4804      	ldr	r0, [pc, #16]	; (3126c <am_hal_ctimer_config_single+0x7c>)
   3125c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   31260:	54f5      	strb	r5, [r6, r3]
   31262:	e7ed      	b.n	31240 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   31264:	2300      	movs	r3, #0
   31266:	e7f6      	b.n	31256 <am_hal_ctimer_config_single+0x66>
   31268:	4000800c 	.word	0x4000800c
   3126c:	100004d8 	.word	0x100004d8

00031270 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   31270:	b5f0      	push	{r4, r5, r6, r7, lr}
   31272:	b083      	sub	sp, #12
   31274:	4605      	mov	r5, r0
   31276:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   31278:	0147      	lsls	r7, r0, #5
   3127a:	4e10      	ldr	r6, [pc, #64]	; (312bc <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   3127c:	f000 face 	bl	3181c <am_hal_interrupt_master_disable>
   31280:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   31282:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   31284:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   31288:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   3128c:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   31290:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   31292:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   31296:	d00c      	beq.n	312b2 <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   31298:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   3129c:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   3129e:	4808      	ldr	r0, [pc, #32]	; (312c0 <am_hal_ctimer_start+0x50>)
   312a0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   312a4:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   312a6:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   312a8:	9801      	ldr	r0, [sp, #4]
   312aa:	f000 fabb 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   312ae:	b003      	add	sp, #12
   312b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   312b2:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   312b6:	2201      	movs	r2, #1
   312b8:	e7f1      	b.n	3129e <am_hal_ctimer_start+0x2e>
   312ba:	bf00      	nop
   312bc:	4000800c 	.word	0x4000800c
   312c0:	100004d8 	.word	0x100004d8

000312c4 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   312c4:	b570      	push	{r4, r5, r6, lr}
   312c6:	b082      	sub	sp, #8
   312c8:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   312ca:	0145      	lsls	r5, r0, #5
   312cc:	4e07      	ldr	r6, [pc, #28]	; (312ec <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   312ce:	f000 faa5 	bl	3181c <am_hal_interrupt_master_disable>
   312d2:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   312d4:	59a9      	ldr	r1, [r5, r6]
   312d6:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   312da:	ea21 0404 	bic.w	r4, r1, r4
   312de:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   312e0:	9801      	ldr	r0, [sp, #4]
   312e2:	f000 fa9f 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   312e6:	b002      	add	sp, #8
   312e8:	bd70      	pop	{r4, r5, r6, pc}
   312ea:	bf00      	nop
   312ec:	4000800c 	.word	0x4000800c

000312f0 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   312f0:	b570      	push	{r4, r5, r6, lr}
   312f2:	b082      	sub	sp, #8
   312f4:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   312f6:	0145      	lsls	r5, r0, #5
   312f8:	4e06      	ldr	r6, [pc, #24]	; (31314 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   312fa:	f000 fa8f 	bl	3181c <am_hal_interrupt_master_disable>
   312fe:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   31300:	59a9      	ldr	r1, [r5, r6]
   31302:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   31306:	430c      	orrs	r4, r1
   31308:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   3130a:	9801      	ldr	r0, [sp, #4]
   3130c:	f000 fa8a 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   31310:	b002      	add	sp, #8
   31312:	bd70      	pop	{r4, r5, r6, pc}
   31314:	4000800c 	.word	0x4000800c

00031318 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   31318:	b530      	push	{r4, r5, lr}
   3131a:	b085      	sub	sp, #20
   3131c:	4602      	mov	r2, r0
   3131e:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   31320:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   31324:	bf14      	ite	ne
   31326:	2100      	movne	r1, #0
   31328:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   3132a:	4b1c      	ldr	r3, [pc, #112]	; (3139c <am_hal_ctimer_read+0x84>)
   3132c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   31330:	4b1b      	ldr	r3, [pc, #108]	; (313a0 <am_hal_ctimer_read+0x88>)
   31332:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   31336:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   31338:	2bff      	cmp	r3, #255	; 0xff
   3133a:	d018      	beq.n	3136e <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   3133c:	f003 031f 	and.w	r3, r3, #31
   31340:	4a18      	ldr	r2, [pc, #96]	; (313a4 <am_hal_ctimer_read+0x8c>)
   31342:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   31344:	b30b      	cbz	r3, 3138a <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   31346:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   3134a:	6b52      	ldr	r2, [r2, #52]	; 0x34
   3134c:	f012 0f04 	tst.w	r2, #4
   31350:	d002      	beq.n	31358 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   31352:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   31354:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   31358:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   3135a:	a901      	add	r1, sp, #4
   3135c:	f000 f916 	bl	3158c <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   31360:	9802      	ldr	r0, [sp, #8]
   31362:	9b01      	ldr	r3, [sp, #4]
   31364:	4043      	eors	r3, r0
   31366:	422b      	tst	r3, r5
   31368:	d010      	beq.n	3138c <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   3136a:	9803      	ldr	r0, [sp, #12]
   3136c:	e00e      	b.n	3138c <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   3136e:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   31370:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   31374:	d006      	beq.n	31384 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   31376:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   3137a:	4d09      	ldr	r5, [pc, #36]	; (313a0 <am_hal_ctimer_read+0x88>)
   3137c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   31380:	5453      	strb	r3, [r2, r1]
   31382:	e7db      	b.n	3133c <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   31384:	f3c3 4344 	ubfx	r3, r3, #17, #5
   31388:	e7f7      	b.n	3137a <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   3138a:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   3138c:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   3138e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   31392:	d001      	beq.n	31398 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   31394:	b005      	add	sp, #20
   31396:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   31398:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   3139a:	e7fb      	b.n	31394 <am_hal_ctimer_read+0x7c>
   3139c:	00035444 	.word	0x00035444
   313a0:	100004d8 	.word	0x100004d8
   313a4:	00035464 	.word	0x00035464

000313a8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   313a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   313ac:	b083      	sub	sp, #12
   313ae:	460d      	mov	r5, r1
   313b0:	4614      	mov	r4, r2
   313b2:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   313b4:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   313b6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 31434 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   313ba:	f8df 907c 	ldr.w	r9, [pc, #124]	; 31438 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   313be:	f000 fa2d 	bl	3181c <am_hal_interrupt_master_disable>
   313c2:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   313c4:	4b1a      	ldr	r3, [pc, #104]	; (31430 <am_hal_ctimer_period_set+0x88>)
   313c6:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   313c8:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   313cc:	d007      	beq.n	313de <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   313ce:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   313d2:	2a80      	cmp	r2, #128	; 0x80
   313d4:	d005      	beq.n	313e2 <am_hal_ctimer_period_set+0x3a>
   313d6:	2ac0      	cmp	r2, #192	; 0xc0
   313d8:	d003      	beq.n	313e2 <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   313da:	2300      	movs	r3, #0
   313dc:	e003      	b.n	313e6 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   313de:	0c12      	lsrs	r2, r2, #16
   313e0:	e7f5      	b.n	313ce <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   313e2:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   313e4:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   313e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   313ea:	4295      	cmp	r5, r2
   313ec:	d013      	beq.n	31416 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   313ee:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   313f2:	d016      	beq.n	31422 <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   313f4:	b2a2      	uxth	r2, r4
   313f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   313fa:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   313fe:	0c1b      	lsrs	r3, r3, #16
   31400:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   31402:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   31406:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   3140a:	9801      	ldr	r0, [sp, #4]
   3140c:	f000 fa0a 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   31410:	b003      	add	sp, #12
   31412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   31416:	b2a4      	uxth	r4, r4
   31418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   3141c:	f846 3008 	str.w	r3, [r6, r8]
   31420:	e7f3      	b.n	3140a <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   31422:	b2a4      	uxth	r4, r4
   31424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   31428:	f846 3009 	str.w	r3, [r6, r9]
   3142c:	e7ed      	b.n	3140a <am_hal_ctimer_period_set+0x62>
   3142e:	bf00      	nop
   31430:	4000800c 	.word	0x4000800c
   31434:	40008004 	.word	0x40008004
   31438:	40008008 	.word	0x40008008

0003143c <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   3143c:	b510      	push	{r4, lr}
   3143e:	b082      	sub	sp, #8
   31440:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   31442:	f000 f9eb 	bl	3181c <am_hal_interrupt_master_disable>
   31446:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   31448:	4a05      	ldr	r2, [pc, #20]	; (31460 <am_hal_ctimer_int_enable+0x24>)
   3144a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   3144e:	4323      	orrs	r3, r4
   31450:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   31454:	9801      	ldr	r0, [sp, #4]
   31456:	f000 f9e5 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   3145a:	b002      	add	sp, #8
   3145c:	bd10      	pop	{r4, pc}
   3145e:	bf00      	nop
   31460:	40008000 	.word	0x40008000

00031464 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   31464:	b510      	push	{r4, lr}
   31466:	b082      	sub	sp, #8
   31468:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   3146a:	f000 f9d7 	bl	3181c <am_hal_interrupt_master_disable>
   3146e:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   31470:	4a05      	ldr	r2, [pc, #20]	; (31488 <am_hal_ctimer_int_disable+0x24>)
   31472:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   31476:	ea23 0304 	bic.w	r3, r3, r4
   3147a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   3147e:	9801      	ldr	r0, [sp, #4]
   31480:	f000 f9d0 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   31484:	b002      	add	sp, #8
   31486:	bd10      	pop	{r4, pc}
   31488:	40008000 	.word	0x40008000

0003148c <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   3148c:	b510      	push	{r4, lr}
   3148e:	b082      	sub	sp, #8
   31490:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   31492:	f000 f9c3 	bl	3181c <am_hal_interrupt_master_disable>
   31496:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   31498:	4b03      	ldr	r3, [pc, #12]	; (314a8 <am_hal_ctimer_int_clear+0x1c>)
   3149a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   3149e:	9801      	ldr	r0, [sp, #4]
   314a0:	f000 f9c0 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   314a4:	b002      	add	sp, #8
   314a6:	bd10      	pop	{r4, pc}
   314a8:	40008000 	.word	0x40008000

000314ac <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   314ac:	b510      	push	{r4, lr}
   314ae:	b082      	sub	sp, #8
   314b0:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   314b2:	f000 f9b3 	bl	3181c <am_hal_interrupt_master_disable>
   314b6:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   314b8:	4b03      	ldr	r3, [pc, #12]	; (314c8 <am_hal_ctimer_int_set+0x1c>)
   314ba:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   314be:	9801      	ldr	r0, [sp, #4]
   314c0:	f000 f9b0 	bl	31824 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   314c4:	b002      	add	sp, #8
   314c6:	bd10      	pop	{r4, pc}
   314c8:	40008000 	.word	0x40008000

000314cc <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   314cc:	b510      	push	{r4, lr}
   314ce:	b082      	sub	sp, #8
   314d0:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   314d2:	f000 f9a3 	bl	3181c <am_hal_interrupt_master_disable>
   314d6:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   314d8:	b15c      	cbz	r4, 314f2 <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   314da:	4b08      	ldr	r3, [pc, #32]	; (314fc <am_hal_ctimer_int_status_get+0x30>)
   314dc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   314e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   314e4:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   314e6:	9801      	ldr	r0, [sp, #4]
   314e8:	f000 f99c 	bl	31824 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   314ec:	4620      	mov	r0, r4
   314ee:	b002      	add	sp, #8
   314f0:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   314f2:	4b02      	ldr	r3, [pc, #8]	; (314fc <am_hal_ctimer_int_status_get+0x30>)
   314f4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   314f8:	e7f5      	b.n	314e6 <am_hal_ctimer_int_status_get+0x1a>
   314fa:	bf00      	nop
   314fc:	40008000 	.word	0x40008000

00031500 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   31500:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   31502:	4b01      	ldr	r3, [pc, #4]	; (31508 <am_hal_flash_page_erase+0x8>)
   31504:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   31506:	bd08      	pop	{r3, pc}
   31508:	08000051 	.word	0x08000051

0003150c <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   3150c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31510:	b082      	sub	sp, #8
   31512:	4605      	mov	r5, r0
   31514:	4616      	mov	r6, r2
   31516:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   31518:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   3151c:	4b0f      	ldr	r3, [pc, #60]	; (3155c <am_hal_flash_program_main+0x50>)
   3151e:	429f      	cmp	r7, r3
   31520:	d005      	beq.n	3152e <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   31522:	4623      	mov	r3, r4
   31524:	4c0e      	ldr	r4, [pc, #56]	; (31560 <am_hal_flash_program_main+0x54>)
   31526:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   31528:	b002      	add	sp, #8
   3152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   3152e:	2c01      	cmp	r4, #1
   31530:	d905      	bls.n	3153e <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   31532:	1e63      	subs	r3, r4, #1
   31534:	f8df 8028 	ldr.w	r8, [pc, #40]	; 31560 <am_hal_flash_program_main+0x54>
   31538:	47c0      	blx	r8
            if ( iRetVal != 0 )
   3153a:	2800      	cmp	r0, #0
   3153c:	d1f4      	bne.n	31528 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   3153e:	f857 3c04 	ldr.w	r3, [r7, #-4]
   31542:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   31544:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   31548:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   3154a:	2301      	movs	r3, #1
   3154c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   31550:	a901      	add	r1, sp, #4
   31552:	4628      	mov	r0, r5
   31554:	4c02      	ldr	r4, [pc, #8]	; (31560 <am_hal_flash_program_main+0x54>)
   31556:	47a0      	blx	r4
   31558:	e7e6      	b.n	31528 <am_hal_flash_program_main+0x1c>
   3155a:	bf00      	nop
   3155c:	10060000 	.word	0x10060000
   31560:	08000055 	.word	0x08000055

00031564 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   31564:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   31566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3156c:	f013 0f04 	tst.w	r3, #4
   31570:	d007      	beq.n	31582 <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   31572:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   31574:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   31576:	4298      	cmp	r0, r3
   31578:	d902      	bls.n	31580 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   3157a:	1ac0      	subs	r0, r0, r3
   3157c:	4b02      	ldr	r3, [pc, #8]	; (31588 <am_hal_flash_delay+0x24>)
   3157e:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   31580:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   31582:	230b      	movs	r3, #11
   31584:	e7f7      	b.n	31576 <am_hal_flash_delay+0x12>
   31586:	bf00      	nop
   31588:	0800009d 	.word	0x0800009d

0003158c <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   3158c:	b412      	push	{r1, r4}
   3158e:	f3ef 8410 	mrs	r4, PRIMASK
   31592:	b672      	cpsid	i
   31594:	6801      	ldr	r1, [r0, #0]
   31596:	6802      	ldr	r2, [r0, #0]
   31598:	6803      	ldr	r3, [r0, #0]
   3159a:	f384 8810 	msr	PRIMASK, r4
   3159e:	bc11      	pop	{r0, r4}
   315a0:	6001      	str	r1, [r0, #0]
   315a2:	6042      	str	r2, [r0, #4]
   315a4:	6083      	str	r3, [r0, #8]
   315a6:	4770      	bx	lr

000315a8 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   315a8:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   315aa:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   315ac:	4298      	cmp	r0, r3
   315ae:	bf14      	ite	ne
   315b0:	2000      	movne	r0, #0
   315b2:	2001      	moveq	r0, #1
   315b4:	4770      	bx	lr
	...

000315b8 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   315b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   315bc:	b087      	sub	sp, #28
   315be:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   315c0:	2831      	cmp	r0, #49	; 0x31
   315c2:	f200 8102 	bhi.w	317ca <am_hal_gpio_pinconfig+0x212>
   315c6:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   315c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   315cc:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   315d0:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   315d4:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   315d6:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   315da:	d013      	beq.n	31604 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   315dc:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   315e0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   315e4:	0940      	lsrs	r0, r0, #5
   315e6:	1d86      	adds	r6, r0, #6
   315e8:	f006 0607 	and.w	r6, r6, #7
   315ec:	2e03      	cmp	r6, #3
   315ee:	f200 80a2 	bhi.w	31736 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   315f2:	3802      	subs	r0, #2
   315f4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   315f8:	4b7a      	ldr	r3, [pc, #488]	; (317e4 <am_hal_gpio_pinconfig+0x22c>)
   315fa:	5d1b      	ldrb	r3, [r3, r4]
   315fc:	f013 0f01 	tst.w	r3, #1
   31600:	f000 80e5 	beq.w	317ce <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   31604:	b16d      	cbz	r5, 31622 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   31606:	2d01      	cmp	r5, #1
   31608:	f000 80a4 	beq.w	31754 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   3160c:	2d02      	cmp	r5, #2
   3160e:	f040 80e0 	bne.w	317d2 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   31612:	4b74      	ldr	r3, [pc, #464]	; (317e4 <am_hal_gpio_pinconfig+0x22c>)
   31614:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   31616:	f013 0f04 	tst.w	r3, #4
   3161a:	f000 80dc 	beq.w	317d6 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   3161e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   31622:	4b71      	ldr	r3, [pc, #452]	; (317e8 <am_hal_gpio_pinconfig+0x230>)
   31624:	5d1d      	ldrb	r5, [r3, r4]
   31626:	410d      	asrs	r5, r1
   31628:	006d      	lsls	r5, r5, #1
   3162a:	f005 0502 	and.w	r5, r5, #2
   3162e:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   31630:	4b6e      	ldr	r3, [pc, #440]	; (317ec <am_hal_gpio_pinconfig+0x234>)
   31632:	5d1b      	ldrb	r3, [r3, r4]
   31634:	428b      	cmp	r3, r1
   31636:	f000 8096 	beq.w	31766 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   3163a:	f89d 700d 	ldrb.w	r7, [sp, #13]
   3163e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   31642:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   31646:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   3164a:	f3c7 1341 	ubfx	r3, r7, #5, #2
   3164e:	00de      	lsls	r6, r3, #3
   31650:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   31654:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   31658:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   3165c:	f007 030c 	and.w	r3, r7, #12
   31660:	2b04      	cmp	r3, #4
   31662:	f000 80a5 	beq.w	317b0 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   31666:	4962      	ldr	r1, [pc, #392]	; (317f0 <am_hal_gpio_pinconfig+0x238>)
   31668:	a803      	add	r0, sp, #12
   3166a:	f7ff ff9d 	bl	315a8 <pincfg_equ>
   3166e:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   31670:	f017 0f60 	tst.w	r7, #96	; 0x60
   31674:	d104      	bne.n	31680 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   31676:	f89d 300d 	ldrb.w	r3, [sp, #13]
   3167a:	09db      	lsrs	r3, r3, #7
   3167c:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   31680:	f89d 300d 	ldrb.w	r3, [sp, #13]
   31684:	f003 0303 	and.w	r3, r3, #3
   31688:	2b02      	cmp	r3, #2
   3168a:	f000 809c 	beq.w	317c6 <am_hal_gpio_pinconfig+0x20e>
   3168e:	2b03      	cmp	r3, #3
   31690:	f000 8095 	beq.w	317be <am_hal_gpio_pinconfig+0x206>
   31694:	2b01      	cmp	r3, #1
   31696:	f000 808e 	beq.w	317b6 <am_hal_gpio_pinconfig+0x1fe>
   3169a:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   3169c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   316a0:	f028 0803 	bic.w	r8, r8, #3
   316a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 31818 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   316a8:	f024 0a03 	bic.w	sl, r4, #3
   316ac:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   316b0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   316b4:	00a2      	lsls	r2, r4, #2
   316b6:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   316ba:	00e3      	lsls	r3, r4, #3
   316bc:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   316c0:	210f      	movs	r1, #15
   316c2:	4091      	lsls	r1, r2
   316c4:	43c9      	mvns	r1, r1
   316c6:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   316c8:	27ff      	movs	r7, #255	; 0xff
   316ca:	409f      	lsls	r7, r3
   316cc:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   316ce:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   316d0:	fa00 f303 	lsl.w	r3, r0, r3
   316d4:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   316d6:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   316d8:	f000 f8a0 	bl	3181c <am_hal_interrupt_master_disable>
   316dc:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   316de:	9b02      	ldr	r3, [sp, #8]
   316e0:	b143      	cbz	r3, 316f4 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   316e2:	f004 021f 	and.w	r2, r4, #31
   316e6:	08e4      	lsrs	r4, r4, #3
   316e8:	f004 0404 	and.w	r4, r4, #4
   316ec:	2301      	movs	r3, #1
   316ee:	4093      	lsls	r3, r2
   316f0:	4a40      	ldr	r2, [pc, #256]	; (317f4 <am_hal_gpio_pinconfig+0x23c>)
   316f2:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   316f4:	4a40      	ldr	r2, [pc, #256]	; (317f8 <am_hal_gpio_pinconfig+0x240>)
   316f6:	2373      	movs	r3, #115	; 0x73
   316f8:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   316fa:	f8d9 3000 	ldr.w	r3, [r9]
   316fe:	403b      	ands	r3, r7
   31700:	431d      	orrs	r5, r3
   31702:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   31706:	f858 300b 	ldr.w	r3, [r8, fp]
   3170a:	9900      	ldr	r1, [sp, #0]
   3170c:	400b      	ands	r3, r1
   3170e:	431e      	orrs	r6, r3
   31710:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   31714:	4939      	ldr	r1, [pc, #228]	; (317fc <am_hal_gpio_pinconfig+0x244>)
   31716:	f85a 3001 	ldr.w	r3, [sl, r1]
   3171a:	401f      	ands	r7, r3
   3171c:	9b01      	ldr	r3, [sp, #4]
   3171e:	431f      	orrs	r7, r3
   31720:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   31724:	2400      	movs	r4, #0
   31726:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   31728:	9805      	ldr	r0, [sp, #20]
   3172a:	f000 f87b 	bl	31824 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   3172e:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   31730:	b007      	add	sp, #28
   31732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   31736:	2bc0      	cmp	r3, #192	; 0xc0
   31738:	d007      	beq.n	3174a <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   3173a:	2b20      	cmp	r3, #32
   3173c:	f47f af62 	bne.w	31604 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   31740:	2c14      	cmp	r4, #20
   31742:	f47f af5f 	bne.w	31604 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   31746:	482e      	ldr	r0, [pc, #184]	; (31800 <am_hal_gpio_pinconfig+0x248>)
   31748:	e7f2      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   3174a:	2c14      	cmp	r4, #20
   3174c:	f43f af5a 	beq.w	31604 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   31750:	482c      	ldr	r0, [pc, #176]	; (31804 <am_hal_gpio_pinconfig+0x24c>)
   31752:	e7ed      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   31754:	4b23      	ldr	r3, [pc, #140]	; (317e4 <am_hal_gpio_pinconfig+0x22c>)
   31756:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   31758:	f013 0f02 	tst.w	r3, #2
   3175c:	f43f af56 	beq.w	3160c <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   31760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   31764:	e75d      	b.n	31622 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   31766:	f89d 300e 	ldrb.w	r3, [sp, #14]
   3176a:	f003 0307 	and.w	r3, r3, #7
   3176e:	2b07      	cmp	r3, #7
   31770:	d033      	beq.n	317da <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   31772:	f89d 300e 	ldrb.w	r3, [sp, #14]
   31776:	f003 0107 	and.w	r1, r3, #7
   3177a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   3177e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   31782:	2300      	movs	r3, #0
   31784:	2b03      	cmp	r3, #3
   31786:	d807      	bhi.n	31798 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   31788:	4a1f      	ldr	r2, [pc, #124]	; (31808 <am_hal_gpio_pinconfig+0x250>)
   3178a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   3178e:	5cd2      	ldrb	r2, [r2, r3]
   31790:	428a      	cmp	r2, r1
   31792:	d001      	beq.n	31798 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   31794:	3301      	adds	r3, #1
   31796:	e7f5      	b.n	31784 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   31798:	2b03      	cmp	r3, #3
   3179a:	d820      	bhi.n	317de <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   3179c:	f89d 600e 	ldrb.w	r6, [sp, #14]
   317a0:	f3c6 1640 	ubfx	r6, r6, #5, #1
   317a4:	00f6      	lsls	r6, r6, #3
   317a6:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   317aa:	2300      	movs	r3, #0
   317ac:	9302      	str	r3, [sp, #8]
   317ae:	e767      	b.n	31680 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   317b0:	2301      	movs	r3, #1
   317b2:	9302      	str	r3, [sp, #8]
   317b4:	e75c      	b.n	31670 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   317b6:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   317ba:	2000      	movs	r0, #0
            break;
   317bc:	e76e      	b.n	3169c <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   317be:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   317c2:	2001      	movs	r0, #1
            break;
   317c4:	e76a      	b.n	3169c <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   317c6:	2001      	movs	r0, #1
   317c8:	e768      	b.n	3169c <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   317ca:	2006      	movs	r0, #6
   317cc:	e7b0      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   317ce:	480c      	ldr	r0, [pc, #48]	; (31800 <am_hal_gpio_pinconfig+0x248>)
   317d0:	e7ae      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   317d2:	480e      	ldr	r0, [pc, #56]	; (3180c <am_hal_gpio_pinconfig+0x254>)
   317d4:	e7ac      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
   317d6:	480d      	ldr	r0, [pc, #52]	; (3180c <am_hal_gpio_pinconfig+0x254>)
   317d8:	e7aa      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   317da:	480d      	ldr	r0, [pc, #52]	; (31810 <am_hal_gpio_pinconfig+0x258>)
   317dc:	e7a8      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   317de:	480d      	ldr	r0, [pc, #52]	; (31814 <am_hal_gpio_pinconfig+0x25c>)
   317e0:	e7a6      	b.n	31730 <am_hal_gpio_pinconfig+0x178>
   317e2:	bf00      	nop
   317e4:	00035488 	.word	0x00035488
   317e8:	000354bc 	.word	0x000354bc
   317ec:	000355b8 	.word	0x000355b8
   317f0:	00035484 	.word	0x00035484
   317f4:	400100b4 	.word	0x400100b4
   317f8:	40010000 	.word	0x40010000
   317fc:	400100e0 	.word	0x400100e0
   31800:	08000100 	.word	0x08000100
   31804:	08000101 	.word	0x08000101
   31808:	000354f0 	.word	0x000354f0
   3180c:	08000102 	.word	0x08000102
   31810:	08000103 	.word	0x08000103
   31814:	08000104 	.word	0x08000104
   31818:	40010040 	.word	0x40010040

0003181c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   3181c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   31820:	b672      	cpsid	i
    __asm("    bx lr");
   31822:	4770      	bx	lr

00031824 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   31824:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   31828:	4770      	bx	lr
	...

0003182c <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   3182c:	4b1c      	ldr	r3, [pc, #112]	; (318a0 <pwrctrl_periph_disable_msk_check+0x74>)
   3182e:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   31830:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   31834:	4a1b      	ldr	r2, [pc, #108]	; (318a4 <pwrctrl_periph_disable_msk_check+0x78>)
   31836:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   3183a:	6852      	ldr	r2, [r2, #4]
   3183c:	2a08      	cmp	r2, #8
   3183e:	d010      	beq.n	31862 <pwrctrl_periph_disable_msk_check+0x36>
   31840:	2a10      	cmp	r2, #16
   31842:	d01a      	beq.n	3187a <pwrctrl_periph_disable_msk_check+0x4e>
   31844:	2a04      	cmp	r2, #4
   31846:	d001      	beq.n	3184c <pwrctrl_periph_disable_msk_check+0x20>
   31848:	2001      	movs	r0, #1
   3184a:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   3184c:	f240 5281 	movw	r2, #1409	; 0x581
   31850:	4213      	tst	r3, r2
   31852:	d01e      	beq.n	31892 <pwrctrl_periph_disable_msk_check+0x66>
   31854:	4a13      	ldr	r2, [pc, #76]	; (318a4 <pwrctrl_periph_disable_msk_check+0x78>)
   31856:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3185a:	4018      	ands	r0, r3
   3185c:	d01e      	beq.n	3189c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   3185e:	2001      	movs	r0, #1
   31860:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   31862:	f013 0f0e 	tst.w	r3, #14
   31866:	d016      	beq.n	31896 <pwrctrl_periph_disable_msk_check+0x6a>
   31868:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   3186c:	4a0d      	ldr	r2, [pc, #52]	; (318a4 <pwrctrl_periph_disable_msk_check+0x78>)
   3186e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   31872:	4018      	ands	r0, r3
   31874:	d012      	beq.n	3189c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   31876:	2001      	movs	r0, #1
   31878:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   3187a:	f013 0f70 	tst.w	r3, #112	; 0x70
   3187e:	d00c      	beq.n	3189a <pwrctrl_periph_disable_msk_check+0x6e>
   31880:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   31884:	4a07      	ldr	r2, [pc, #28]	; (318a4 <pwrctrl_periph_disable_msk_check+0x78>)
   31886:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   3188a:	4018      	ands	r0, r3
   3188c:	d006      	beq.n	3189c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   3188e:	2001      	movs	r0, #1
   31890:	4770      	bx	lr
   31892:	2001      	movs	r0, #1
   31894:	4770      	bx	lr
   31896:	2001      	movs	r0, #1
   31898:	4770      	bx	lr
   3189a:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   3189c:	4770      	bx	lr
   3189e:	bf00      	nop
   318a0:	40021000 	.word	0x40021000
   318a4:	000355ec 	.word	0x000355ec

000318a8 <am_hal_pwrctrl_periph_enable>:
{
   318a8:	b570      	push	{r4, r5, r6, lr}
   318aa:	b082      	sub	sp, #8
   318ac:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   318ae:	f7ff ffb5 	bl	3181c <am_hal_interrupt_master_disable>
   318b2:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   318b4:	4a1e      	ldr	r2, [pc, #120]	; (31930 <am_hal_pwrctrl_periph_enable+0x88>)
   318b6:	6893      	ldr	r3, [r2, #8]
   318b8:	4626      	mov	r6, r4
   318ba:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   318be:	491d      	ldr	r1, [pc, #116]	; (31934 <am_hal_pwrctrl_periph_enable+0x8c>)
   318c0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   318c4:	430b      	orrs	r3, r1
   318c6:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   318c8:	9800      	ldr	r0, [sp, #0]
   318ca:	f7ff ffab 	bl	31824 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   318ce:	2500      	movs	r5, #0
   318d0:	2d13      	cmp	r5, #19
   318d2:	d80e      	bhi.n	318f2 <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   318d4:	20a0      	movs	r0, #160	; 0xa0
   318d6:	f7ff fe45 	bl	31564 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   318da:	4b15      	ldr	r3, [pc, #84]	; (31930 <am_hal_pwrctrl_periph_enable+0x88>)
   318dc:	6999      	ldr	r1, [r3, #24]
   318de:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   318e2:	4a14      	ldr	r2, [pc, #80]	; (31934 <am_hal_pwrctrl_periph_enable+0x8c>)
   318e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   318e8:	685b      	ldr	r3, [r3, #4]
   318ea:	4219      	tst	r1, r3
   318ec:	d101      	bne.n	318f2 <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   318ee:	350a      	adds	r5, #10
   318f0:	e7ee      	b.n	318d0 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   318f2:	4b0f      	ldr	r3, [pc, #60]	; (31930 <am_hal_pwrctrl_periph_enable+0x88>)
   318f4:	6999      	ldr	r1, [r3, #24]
   318f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   318fa:	4a0e      	ldr	r2, [pc, #56]	; (31934 <am_hal_pwrctrl_periph_enable+0x8c>)
   318fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   31900:	685b      	ldr	r3, [r3, #4]
   31902:	4219      	tst	r1, r3
   31904:	d002      	beq.n	3190c <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   31906:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   31908:	b002      	add	sp, #8
   3190a:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   3190c:	f7ff ff86 	bl	3181c <am_hal_interrupt_master_disable>
   31910:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   31912:	4a07      	ldr	r2, [pc, #28]	; (31930 <am_hal_pwrctrl_periph_enable+0x88>)
   31914:	6893      	ldr	r3, [r2, #8]
   31916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   3191a:	4906      	ldr	r1, [pc, #24]	; (31934 <am_hal_pwrctrl_periph_enable+0x8c>)
   3191c:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   31920:	ea23 0301 	bic.w	r3, r3, r1
   31924:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   31926:	9801      	ldr	r0, [sp, #4]
   31928:	f7ff ff7c 	bl	31824 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   3192c:	2001      	movs	r0, #1
   3192e:	e7eb      	b.n	31908 <am_hal_pwrctrl_periph_enable+0x60>
   31930:	40021000 	.word	0x40021000
   31934:	000355ec 	.word	0x000355ec

00031938 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   31938:	b570      	push	{r4, r5, r6, lr}
   3193a:	b082      	sub	sp, #8
   3193c:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   3193e:	f7ff ff6d 	bl	3181c <am_hal_interrupt_master_disable>
   31942:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   31944:	4a17      	ldr	r2, [pc, #92]	; (319a4 <am_hal_pwrctrl_periph_disable+0x6c>)
   31946:	6893      	ldr	r3, [r2, #8]
   31948:	4626      	mov	r6, r4
   3194a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   3194e:	4916      	ldr	r1, [pc, #88]	; (319a8 <am_hal_pwrctrl_periph_disable+0x70>)
   31950:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   31954:	ea23 0301 	bic.w	r3, r3, r1
   31958:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   3195a:	9801      	ldr	r0, [sp, #4]
   3195c:	f7ff ff62 	bl	31824 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   31960:	2500      	movs	r5, #0
   31962:	2d13      	cmp	r5, #19
   31964:	d80e      	bhi.n	31984 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   31966:	20a0      	movs	r0, #160	; 0xa0
   31968:	f7ff fdfc 	bl	31564 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   3196c:	4b0d      	ldr	r3, [pc, #52]	; (319a4 <am_hal_pwrctrl_periph_disable+0x6c>)
   3196e:	6999      	ldr	r1, [r3, #24]
   31970:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   31974:	4a0c      	ldr	r2, [pc, #48]	; (319a8 <am_hal_pwrctrl_periph_disable+0x70>)
   31976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3197a:	685b      	ldr	r3, [r3, #4]
   3197c:	4219      	tst	r1, r3
   3197e:	d001      	beq.n	31984 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   31980:	350a      	adds	r5, #10
   31982:	e7ee      	b.n	31962 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   31984:	4b07      	ldr	r3, [pc, #28]	; (319a4 <am_hal_pwrctrl_periph_disable+0x6c>)
   31986:	6998      	ldr	r0, [r3, #24]
   31988:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   3198c:	4a06      	ldr	r2, [pc, #24]	; (319a8 <am_hal_pwrctrl_periph_disable+0x70>)
   3198e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   31992:	685b      	ldr	r3, [r3, #4]
   31994:	4018      	ands	r0, r3
   31996:	d101      	bne.n	3199c <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   31998:	b002      	add	sp, #8
   3199a:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   3199c:	4620      	mov	r0, r4
   3199e:	f7ff ff45 	bl	3182c <pwrctrl_periph_disable_msk_check>
   319a2:	e7f9      	b.n	31998 <am_hal_pwrctrl_periph_disable+0x60>
   319a4:	40021000 	.word	0x40021000
   319a8:	000355ec 	.word	0x000355ec

000319ac <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   319ac:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   319ae:	4a03      	ldr	r2, [pc, #12]	; (319bc <am_hal_stimer_config+0x10>)
   319b0:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   319b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   319b8:	4770      	bx	lr
   319ba:	bf00      	nop
   319bc:	40008000 	.word	0x40008000

000319c0 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   319c0:	b500      	push	{lr}
   319c2:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   319c4:	a901      	add	r1, sp, #4
   319c6:	4805      	ldr	r0, [pc, #20]	; (319dc <am_hal_stimer_counter_get+0x1c>)
   319c8:	f7ff fde0 	bl	3158c <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   319cc:	9802      	ldr	r0, [sp, #8]
   319ce:	9b01      	ldr	r3, [sp, #4]
   319d0:	4283      	cmp	r3, r0
   319d2:	d000      	beq.n	319d6 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   319d4:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   319d6:	b005      	add	sp, #20
   319d8:	f85d fb04 	ldr.w	pc, [sp], #4
   319dc:	40008144 	.word	0x40008144

000319e0 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   319e0:	4b06      	ldr	r3, [pc, #24]	; (319fc <am_hal_stimer_counter_clear+0x1c>)
   319e2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   319e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   319ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   319ee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   319f2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   319f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   319fa:	4770      	bx	lr
   319fc:	40008000 	.word	0x40008000

00031a00 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   31a00:	2807      	cmp	r0, #7
   31a02:	d900      	bls.n	31a06 <am_hal_stimer_compare_delta_set+0x6>
   31a04:	4770      	bx	lr
{
   31a06:	b5f0      	push	{r4, r5, r6, r7, lr}
   31a08:	b083      	sub	sp, #12
   31a0a:	4605      	mov	r5, r0
   31a0c:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   31a0e:	f7ff ff05 	bl	3181c <am_hal_interrupt_master_disable>
   31a12:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   31a14:	4b16      	ldr	r3, [pc, #88]	; (31a70 <am_hal_stimer_compare_delta_set+0x70>)
   31a16:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   31a1a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   31a1e:	f44f 7080 	mov.w	r0, #256	; 0x100
   31a22:	40a8      	lsls	r0, r5
   31a24:	ea22 0200 	bic.w	r2, r2, r0
   31a28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   31a2c:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   31a2e:	2903      	cmp	r1, #3
   31a30:	f101 0101 	add.w	r1, r1, #1
   31a34:	d810      	bhi.n	31a58 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   31a36:	4b0e      	ldr	r3, [pc, #56]	; (31a70 <am_hal_stimer_compare_delta_set+0x70>)
   31a38:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   31a3c:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   31a3e:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   31a42:	4a0c      	ldr	r2, [pc, #48]	; (31a74 <am_hal_stimer_compare_delta_set+0x74>)
   31a44:	442a      	add	r2, r5
   31a46:	0092      	lsls	r2, r2, #2
   31a48:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   31a4a:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   31a4c:	1ad3      	subs	r3, r2, r3
   31a4e:	2b00      	cmp	r3, #0
   31a50:	dbed      	blt.n	31a2e <am_hal_stimer_compare_delta_set+0x2e>
   31a52:	1bd2      	subs	r2, r2, r7
   31a54:	2a00      	cmp	r2, #0
   31a56:	dcea      	bgt.n	31a2e <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   31a58:	4a05      	ldr	r2, [pc, #20]	; (31a70 <am_hal_stimer_compare_delta_set+0x70>)
   31a5a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   31a5e:	4030      	ands	r0, r6
   31a60:	4318      	orrs	r0, r3
   31a62:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   31a66:	9801      	ldr	r0, [sp, #4]
   31a68:	f7ff fedc 	bl	31824 <am_hal_interrupt_master_set>
}
   31a6c:	b003      	add	sp, #12
   31a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31a70:	40008000 	.word	0x40008000
   31a74:	10002054 	.word	0x10002054

00031a78 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   31a78:	4a03      	ldr	r2, [pc, #12]	; (31a88 <am_hal_stimer_int_enable+0x10>)
   31a7a:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   31a7e:	4303      	orrs	r3, r0
   31a80:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   31a84:	4770      	bx	lr
   31a86:	bf00      	nop
   31a88:	40008000 	.word	0x40008000

00031a8c <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   31a8c:	4b01      	ldr	r3, [pc, #4]	; (31a94 <am_hal_stimer_int_clear+0x8>)
   31a8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   31a92:	4770      	bx	lr
   31a94:	40008000 	.word	0x40008000

00031a98 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   31a98:	4b23      	ldr	r3, [pc, #140]	; (31b28 <config_baudrate+0x90>)
   31a9a:	68db      	ldr	r3, [r3, #12]
   31a9c:	b2db      	uxtb	r3, r3
   31a9e:	2b12      	cmp	r3, #18
   31aa0:	d016      	beq.n	31ad0 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   31aa2:	4b21      	ldr	r3, [pc, #132]	; (31b28 <config_baudrate+0x90>)
   31aa4:	68db      	ldr	r3, [r3, #12]
   31aa6:	b2db      	uxtb	r3, r3
   31aa8:	2b20      	cmp	r3, #32
   31aaa:	d902      	bls.n	31ab2 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   31aac:	4b1f      	ldr	r3, [pc, #124]	; (31b2c <config_baudrate+0x94>)
   31aae:	4299      	cmp	r1, r3
   31ab0:	d838      	bhi.n	31b24 <config_baudrate+0x8c>
{
   31ab2:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   31ab4:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   31ab8:	301c      	adds	r0, #28
   31aba:	0300      	lsls	r0, r0, #12
   31abc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   31abe:	f3c3 1302 	ubfx	r3, r3, #4, #3
   31ac2:	3b01      	subs	r3, #1
   31ac4:	2b03      	cmp	r3, #3
   31ac6:	d80c      	bhi.n	31ae2 <config_baudrate+0x4a>
   31ac8:	e8df f003 	tbb	[pc, r3]
   31acc:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   31ad0:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   31ad4:	d9e5      	bls.n	31aa2 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   31ad6:	4816      	ldr	r0, [pc, #88]	; (31b30 <config_baudrate+0x98>)
   31ad8:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   31ada:	4c16      	ldr	r4, [pc, #88]	; (31b34 <config_baudrate+0x9c>)
            break;
   31adc:	e006      	b.n	31aec <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   31ade:	4c16      	ldr	r4, [pc, #88]	; (31b38 <config_baudrate+0xa0>)
            break;
   31ae0:	e004      	b.n	31aec <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   31ae2:	2300      	movs	r3, #0
   31ae4:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   31ae6:	4815      	ldr	r0, [pc, #84]	; (31b3c <config_baudrate+0xa4>)
   31ae8:	e014      	b.n	31b14 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   31aea:	4c15      	ldr	r4, [pc, #84]	; (31b40 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   31aec:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   31aee:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   31af2:	01a3      	lsls	r3, r4, #6
   31af4:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   31af8:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   31afc:	428c      	cmp	r4, r1
   31afe:	d30d      	bcc.n	31b1c <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   31b00:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   31b02:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   31b04:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   31b06:	089b      	lsrs	r3, r3, #2
   31b08:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   31b0c:	fbb4 f3f3 	udiv	r3, r4, r3
   31b10:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   31b12:	2000      	movs	r0, #0
} // config_baudrate()
   31b14:	bc30      	pop	{r4, r5}
   31b16:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   31b18:	4c0a      	ldr	r4, [pc, #40]	; (31b44 <config_baudrate+0xac>)
   31b1a:	e7e7      	b.n	31aec <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   31b1c:	2300      	movs	r3, #0
   31b1e:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   31b20:	4803      	ldr	r0, [pc, #12]	; (31b30 <config_baudrate+0x98>)
   31b22:	e7f7      	b.n	31b14 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   31b24:	4802      	ldr	r0, [pc, #8]	; (31b30 <config_baudrate+0x98>)
} // config_baudrate()
   31b26:	4770      	bx	lr
   31b28:	40020000 	.word	0x40020000
   31b2c:	0016e360 	.word	0x0016e360
   31b30:	08000003 	.word	0x08000003
   31b34:	005b8d80 	.word	0x005b8d80
   31b38:	002dc6c0 	.word	0x002dc6c0
   31b3c:	08000002 	.word	0x08000002
   31b40:	016e3600 	.word	0x016e3600
   31b44:	00b71b00 	.word	0x00b71b00

00031b48 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   31b48:	2801      	cmp	r0, #1
   31b4a:	d81e      	bhi.n	31b8a <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   31b4c:	b1f9      	cbz	r1, 31b8e <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   31b4e:	4a12      	ldr	r2, [pc, #72]	; (31b98 <am_hal_uart_initialize+0x50>)
   31b50:	2368      	movs	r3, #104	; 0x68
   31b52:	fb03 2300 	mla	r3, r3, r0, r2
   31b56:	78db      	ldrb	r3, [r3, #3]
   31b58:	f013 0f01 	tst.w	r3, #1
   31b5c:	d119      	bne.n	31b92 <am_hal_uart_initialize+0x4a>
{
   31b5e:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   31b60:	4614      	mov	r4, r2
   31b62:	2268      	movs	r2, #104	; 0x68
   31b64:	fb02 f200 	mul.w	r2, r2, r0
   31b68:	18a3      	adds	r3, r4, r2
   31b6a:	78dd      	ldrb	r5, [r3, #3]
   31b6c:	f045 0501 	orr.w	r5, r5, #1
   31b70:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   31b72:	58a5      	ldr	r5, [r4, r2]
   31b74:	4e09      	ldr	r6, [pc, #36]	; (31b9c <am_hal_uart_initialize+0x54>)
   31b76:	f366 0517 	bfi	r5, r6, #0, #24
   31b7a:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   31b7c:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   31b7e:	2000      	movs	r0, #0
   31b80:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   31b82:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   31b84:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   31b86:	bc70      	pop	{r4, r5, r6}
   31b88:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   31b8a:	2005      	movs	r0, #5
   31b8c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   31b8e:	2006      	movs	r0, #6
   31b90:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   31b92:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   31b94:	4770      	bx	lr
   31b96:	bf00      	nop
   31b98:	10003dd4 	.word	0x10003dd4
   31b9c:	00ea9e06 	.word	0x00ea9e06

00031ba0 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   31ba0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31ba2:	b170      	cbz	r0, 31bc2 <am_hal_uart_interrupt_enable+0x22>
   31ba4:	6802      	ldr	r2, [r0, #0]
   31ba6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   31baa:	4808      	ldr	r0, [pc, #32]	; (31bcc <am_hal_uart_interrupt_enable+0x2c>)
   31bac:	4282      	cmp	r2, r0
   31bae:	d10a      	bne.n	31bc6 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   31bb0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31bb4:	331c      	adds	r3, #28
   31bb6:	031b      	lsls	r3, r3, #12
   31bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   31bba:	4311      	orrs	r1, r2
   31bbc:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   31bbe:	2000      	movs	r0, #0
   31bc0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   31bc2:	2002      	movs	r0, #2
   31bc4:	4770      	bx	lr
   31bc6:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   31bc8:	4770      	bx	lr
   31bca:	bf00      	nop
   31bcc:	01ea9e06 	.word	0x01ea9e06

00031bd0 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   31bd0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31bd2:	b178      	cbz	r0, 31bf4 <am_hal_uart_interrupt_disable+0x24>
   31bd4:	6802      	ldr	r2, [r0, #0]
   31bd6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   31bda:	4808      	ldr	r0, [pc, #32]	; (31bfc <am_hal_uart_interrupt_disable+0x2c>)
   31bdc:	4282      	cmp	r2, r0
   31bde:	d10b      	bne.n	31bf8 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   31be0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31be4:	331c      	adds	r3, #28
   31be6:	031b      	lsls	r3, r3, #12
   31be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   31bea:	ea22 0101 	bic.w	r1, r2, r1
   31bee:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   31bf0:	2000      	movs	r0, #0
   31bf2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   31bf4:	2002      	movs	r0, #2
   31bf6:	4770      	bx	lr
   31bf8:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   31bfa:	4770      	bx	lr
   31bfc:	01ea9e06 	.word	0x01ea9e06

00031c00 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31c00:	b3d0      	cbz	r0, 31c78 <buffer_configure+0x78>
{
   31c02:	b538      	push	{r3, r4, r5, lr}
   31c04:	461d      	mov	r5, r3
   31c06:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31c08:	6800      	ldr	r0, [r0, #0]
   31c0a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   31c0e:	4b1c      	ldr	r3, [pc, #112]	; (31c80 <buffer_configure+0x80>)
   31c10:	4298      	cmp	r0, r3
   31c12:	d133      	bne.n	31c7c <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   31c14:	b101      	cbz	r1, 31c18 <buffer_configure+0x18>
   31c16:	b992      	cbnz	r2, 31c3e <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   31c18:	2300      	movs	r3, #0
   31c1a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   31c1e:	2120      	movs	r1, #32
   31c20:	4620      	mov	r0, r4
   31c22:	f7ff ffd5 	bl	31bd0 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   31c26:	bb50      	cbnz	r0, 31c7e <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   31c28:	b10d      	cbz	r5, 31c2e <buffer_configure+0x2e>
   31c2a:	9b04      	ldr	r3, [sp, #16]
   31c2c:	b9bb      	cbnz	r3, 31c5e <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   31c2e:	2300      	movs	r3, #0
   31c30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   31c34:	2150      	movs	r1, #80	; 0x50
   31c36:	4620      	mov	r0, r4
   31c38:	f7ff ffca 	bl	31bd0 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   31c3c:	e01f      	b.n	31c7e <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   31c3e:	2001      	movs	r0, #1
   31c40:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   31c44:	4613      	mov	r3, r2
   31c46:	4602      	mov	r2, r0
   31c48:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   31c4c:	f000 f93c 	bl	31ec8 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   31c50:	2120      	movs	r1, #32
   31c52:	4620      	mov	r0, r4
   31c54:	f7ff ffa4 	bl	31ba0 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   31c58:	2800      	cmp	r0, #0
   31c5a:	d0e5      	beq.n	31c28 <buffer_configure+0x28>
   31c5c:	e00f      	b.n	31c7e <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   31c5e:	2201      	movs	r2, #1
   31c60:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   31c64:	4629      	mov	r1, r5
   31c66:	f104 0048 	add.w	r0, r4, #72	; 0x48
   31c6a:	f000 f92d 	bl	31ec8 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   31c6e:	2150      	movs	r1, #80	; 0x50
   31c70:	4620      	mov	r0, r4
   31c72:	f7ff ff95 	bl	31ba0 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   31c76:	e002      	b.n	31c7e <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   31c78:	2002      	movs	r0, #2
} // buffer_configure()
   31c7a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   31c7c:	2002      	movs	r0, #2
} // buffer_configure()
   31c7e:	bd38      	pop	{r3, r4, r5, pc}
   31c80:	01ea9e06 	.word	0x01ea9e06

00031c84 <am_hal_uart_configure>:
{
   31c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31c88:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   31c8a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31c8c:	2800      	cmp	r0, #0
   31c8e:	d073      	beq.n	31d78 <am_hal_uart_configure+0xf4>
   31c90:	4605      	mov	r5, r0
   31c92:	460e      	mov	r6, r1
   31c94:	6803      	ldr	r3, [r0, #0]
   31c96:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31c9a:	4a3c      	ldr	r2, [pc, #240]	; (31d8c <am_hal_uart_configure+0x108>)
   31c9c:	4293      	cmp	r3, r2
   31c9e:	d16d      	bne.n	31d7c <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   31ca0:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   31ca4:	341c      	adds	r4, #28
   31ca6:	0324      	lsls	r4, r4, #12
   31ca8:	2300      	movs	r3, #0
   31caa:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   31cac:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   31cb0:	2b05      	cmp	r3, #5
   31cb2:	d868      	bhi.n	31d86 <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   31cb4:	2b00      	cmp	r3, #0
   31cb6:	d05c      	beq.n	31d72 <am_hal_uart_configure+0xee>
   31cb8:	3b01      	subs	r3, #1
   31cba:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   31cbe:	f7ff fdad 	bl	3181c <am_hal_interrupt_master_disable>
   31cc2:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   31cc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31cc6:	f043 0308 	orr.w	r3, r3, #8
   31cca:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   31ccc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31cce:	f368 1306 	bfi	r3, r8, #4, #3
   31cd2:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   31cd4:	9803      	ldr	r0, [sp, #12]
   31cd6:	f7ff fda5 	bl	31824 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   31cda:	f7ff fd9f 	bl	3181c <am_hal_interrupt_master_disable>
   31cde:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   31ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31ce2:	f36f 0300 	bfc	r3, #0, #1
   31ce6:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   31ce8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31cea:	f36f 2349 	bfc	r3, #9, #1
   31cee:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   31cf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31cf2:	f36f 2308 	bfc	r3, #8, #1
   31cf6:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   31cf8:	9804      	ldr	r0, [sp, #16]
   31cfa:	f7ff fd93 	bl	31824 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   31cfe:	f105 0260 	add.w	r2, r5, #96	; 0x60
   31d02:	6831      	ldr	r1, [r6, #0]
   31d04:	4638      	mov	r0, r7
   31d06:	f7ff fec7 	bl	31a98 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   31d0a:	4607      	mov	r7, r0
   31d0c:	2800      	cmp	r0, #0
   31d0e:	d136      	bne.n	31d7e <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   31d10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31d12:	f36f 338e 	bfc	r3, #14, #1
   31d16:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   31d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31d1a:	f36f 33cf 	bfc	r3, #15, #1
   31d1e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   31d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31d22:	6932      	ldr	r2, [r6, #16]
   31d24:	4313      	orrs	r3, r2
   31d26:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   31d28:	6973      	ldr	r3, [r6, #20]
   31d2a:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   31d2c:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   31d2e:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   31d30:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   31d32:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   31d34:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   31d36:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   31d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   31d3c:	f7ff fd6e 	bl	3181c <am_hal_interrupt_master_disable>
   31d40:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   31d42:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31d44:	f043 0301 	orr.w	r3, r3, #1
   31d48:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   31d4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   31d50:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   31d52:	6b23      	ldr	r3, [r4, #48]	; 0x30
   31d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   31d58:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   31d5a:	9805      	ldr	r0, [sp, #20]
   31d5c:	f7ff fd62 	bl	31824 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   31d60:	6a73      	ldr	r3, [r6, #36]	; 0x24
   31d62:	9300      	str	r3, [sp, #0]
   31d64:	6a33      	ldr	r3, [r6, #32]
   31d66:	69f2      	ldr	r2, [r6, #28]
   31d68:	69b1      	ldr	r1, [r6, #24]
   31d6a:	4628      	mov	r0, r5
   31d6c:	f7ff ff48 	bl	31c00 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   31d70:	e005      	b.n	31d7e <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   31d72:	f04f 0801 	mov.w	r8, #1
   31d76:	e7a2      	b.n	31cbe <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   31d78:	2702      	movs	r7, #2
   31d7a:	e000      	b.n	31d7e <am_hal_uart_configure+0xfa>
   31d7c:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   31d7e:	4638      	mov	r0, r7
   31d80:	b006      	add	sp, #24
   31d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   31d86:	2706      	movs	r7, #6
   31d88:	e7f9      	b.n	31d7e <am_hal_uart_configure+0xfa>
   31d8a:	bf00      	nop
   31d8c:	01ea9e06 	.word	0x01ea9e06

00031d90 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   31d90:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31d92:	b160      	cbz	r0, 31dae <am_hal_uart_interrupt_clear+0x1e>
   31d94:	6802      	ldr	r2, [r0, #0]
   31d96:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   31d9a:	4807      	ldr	r0, [pc, #28]	; (31db8 <am_hal_uart_interrupt_clear+0x28>)
   31d9c:	4282      	cmp	r2, r0
   31d9e:	d108      	bne.n	31db2 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   31da0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   31da4:	331c      	adds	r3, #28
   31da6:	031b      	lsls	r3, r3, #12
   31da8:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   31daa:	2000      	movs	r0, #0
   31dac:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   31dae:	2002      	movs	r0, #2
   31db0:	4770      	bx	lr
   31db2:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   31db4:	4770      	bx	lr
   31db6:	bf00      	nop
   31db8:	01ea9e06 	.word	0x01ea9e06

00031dbc <am_hal_uart_power_control>:
{
   31dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   31dbe:	b083      	sub	sp, #12
   31dc0:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   31dc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   31dc4:	2800      	cmp	r0, #0
   31dc6:	d061      	beq.n	31e8c <am_hal_uart_power_control+0xd0>
   31dc8:	4616      	mov	r6, r2
   31dca:	b2e8      	uxtb	r0, r5
   31dcc:	3008      	adds	r0, #8
   31dce:	b2c7      	uxtb	r7, r0
   31dd0:	6823      	ldr	r3, [r4, #0]
   31dd2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   31dd6:	4a32      	ldr	r2, [pc, #200]	; (31ea0 <am_hal_uart_power_control+0xe4>)
   31dd8:	4293      	cmp	r3, r2
   31dda:	d159      	bne.n	31e90 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   31ddc:	b1a9      	cbz	r1, 31e0a <am_hal_uart_power_control+0x4e>
   31dde:	3901      	subs	r1, #1
   31de0:	b2c9      	uxtb	r1, r1
   31de2:	2901      	cmp	r1, #1
   31de4:	d857      	bhi.n	31e96 <am_hal_uart_power_control+0xda>
            if (bRetainState)
   31de6:	2e00      	cmp	r6, #0
   31de8:	d135      	bne.n	31e56 <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   31dea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   31dee:	4620      	mov	r0, r4
   31df0:	f7ff ffce 	bl	31d90 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   31df4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   31df8:	351c      	adds	r5, #28
   31dfa:	032d      	lsls	r5, r5, #12
   31dfc:	2400      	movs	r4, #0
   31dfe:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   31e00:	4638      	mov	r0, r7
   31e02:	f7ff fd99 	bl	31938 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   31e06:	4620      	mov	r0, r4
            break;
   31e08:	e043      	b.n	31e92 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   31e0a:	b116      	cbz	r6, 31e12 <am_hal_uart_power_control+0x56>
   31e0c:	7923      	ldrb	r3, [r4, #4]
   31e0e:	2b00      	cmp	r3, #0
   31e10:	d043      	beq.n	31e9a <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   31e12:	4638      	mov	r0, r7
   31e14:	f7ff fd48 	bl	318a8 <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   31e18:	b90e      	cbnz	r6, 31e1e <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   31e1a:	2000      	movs	r0, #0
   31e1c:	e039      	b.n	31e92 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   31e1e:	f7ff fcfd 	bl	3181c <am_hal_interrupt_master_disable>
   31e22:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   31e24:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   31e28:	351c      	adds	r5, #28
   31e2a:	032d      	lsls	r5, r5, #12
   31e2c:	68a3      	ldr	r3, [r4, #8]
   31e2e:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   31e30:	68e3      	ldr	r3, [r4, #12]
   31e32:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   31e34:	6923      	ldr	r3, [r4, #16]
   31e36:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   31e38:	6963      	ldr	r3, [r4, #20]
   31e3a:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   31e3c:	69a3      	ldr	r3, [r4, #24]
   31e3e:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   31e40:	69e3      	ldr	r3, [r4, #28]
   31e42:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   31e44:	6a23      	ldr	r3, [r4, #32]
   31e46:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   31e48:	2500      	movs	r5, #0
   31e4a:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   31e4c:	9800      	ldr	r0, [sp, #0]
   31e4e:	f7ff fce9 	bl	31824 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   31e52:	4628      	mov	r0, r5
   31e54:	e01d      	b.n	31e92 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   31e56:	f7ff fce1 	bl	3181c <am_hal_interrupt_master_disable>
   31e5a:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   31e5c:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   31e60:	331c      	adds	r3, #28
   31e62:	031b      	lsls	r3, r3, #12
   31e64:	6a1a      	ldr	r2, [r3, #32]
   31e66:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   31e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   31e6a:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   31e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31e6e:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   31e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   31e72:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   31e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   31e76:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   31e78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   31e7a:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   31e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   31e7e:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   31e80:	2301      	movs	r3, #1
   31e82:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   31e84:	9801      	ldr	r0, [sp, #4]
   31e86:	f7ff fccd 	bl	31824 <am_hal_interrupt_master_set>
   31e8a:	e7ae      	b.n	31dea <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   31e8c:	2002      	movs	r0, #2
   31e8e:	e000      	b.n	31e92 <am_hal_uart_power_control+0xd6>
   31e90:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   31e92:	b003      	add	sp, #12
   31e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   31e96:	2006      	movs	r0, #6
   31e98:	e7fb      	b.n	31e92 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   31e9a:	2007      	movs	r0, #7
   31e9c:	e7f9      	b.n	31e92 <am_hal_uart_power_control+0xd6>
   31e9e:	bf00      	nop
   31ea0:	01ea9e06 	.word	0x01ea9e06

00031ea4 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   31ea4:	b142      	cbz	r2, 31eb8 <am_hal_uart_control+0x14>
   31ea6:	b148      	cbz	r0, 31ebc <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   31ea8:	b951      	cbnz	r1, 31ec0 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   31eaa:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   31eac:	2b05      	cmp	r3, #5
   31eae:	d809      	bhi.n	31ec4 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   31eb0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   31eb4:	2000      	movs	r0, #0
            break ;
   31eb6:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   31eb8:	2006      	movs	r0, #6
   31eba:	4770      	bx	lr
   31ebc:	2006      	movs	r0, #6
   31ebe:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   31ec0:	2006      	movs	r0, #6
   31ec2:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   31ec4:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   31ec6:	4770      	bx	lr

00031ec8 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   31ec8:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   31eca:	2400      	movs	r4, #0
   31ecc:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   31ece:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   31ed0:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   31ed2:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   31ed4:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   31ed6:	6141      	str	r1, [r0, #20]
}
   31ed8:	bc10      	pop	{r4}
   31eda:	4770      	bx	lr

00031edc <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   31edc:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   31ede:	0a09      	lsrs	r1, r1, #8
   31ee0:	7041      	strb	r1, [r0, #1]
}
   31ee2:	4770      	bx	lr

00031ee4 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   31ee4:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   31ee6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   31eea:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   31eec:	f3c1 4307 	ubfx	r3, r1, #16, #8
   31ef0:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   31ef2:	0e09      	lsrs	r1, r1, #24
   31ef4:	70c1      	strb	r1, [r0, #3]
}
   31ef6:	4770      	bx	lr

00031ef8 <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   31ef8:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   31efa:	f3c2 2107 	ubfx	r1, r2, #8, #8
   31efe:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   31f00:	f3c2 4107 	ubfx	r1, r2, #16, #8
   31f04:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   31f06:	0e12      	lsrs	r2, r2, #24
   31f08:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   31f0a:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   31f0c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   31f10:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   31f12:	f3c3 4207 	ubfx	r2, r3, #16, #8
   31f16:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   31f18:	0e1b      	lsrs	r3, r3, #24
   31f1a:	71c3      	strb	r3, [r0, #7]
}
   31f1c:	4770      	bx	lr

00031f1e <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   31f1e:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   31f20:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   31f22:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   31f26:	4770      	bx	lr

00031f28 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   31f28:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   31f2a:	7842      	ldrb	r2, [r0, #1]
   31f2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   31f30:	7882      	ldrb	r2, [r0, #2]
   31f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   31f36:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   31f38:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   31f3c:	4770      	bx	lr

00031f3e <get_le64>:

uint64_t
get_le64(const void *buf)
{
   31f3e:	b4f0      	push	{r4, r5, r6, r7}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   31f40:	7802      	ldrb	r2, [r0, #0]
    x |= (uint64_t)u8ptr[1] << 8;
   31f42:	7844      	ldrb	r4, [r0, #1]
   31f44:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    x |= (uint64_t)u8ptr[2] << 16;
   31f48:	7884      	ldrb	r4, [r0, #2]
   31f4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    x |= (uint64_t)u8ptr[3] << 24;
   31f4e:	78c6      	ldrb	r6, [r0, #3]
    x |= (uint64_t)u8ptr[4] << 32;
   31f50:	7903      	ldrb	r3, [r0, #4]
    x |= (uint64_t)u8ptr[5] << 40;
   31f52:	7944      	ldrb	r4, [r0, #5]
   31f54:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    x |= (uint64_t)u8ptr[6] << 48;
   31f58:	7984      	ldrb	r4, [r0, #6]
   31f5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    x |= (uint64_t)u8ptr[7] << 56;
   31f5e:	79c4      	ldrb	r4, [r0, #7]

    return x;
}
   31f60:	ea42 6006 	orr.w	r0, r2, r6, lsl #24
   31f64:	ea43 6104 	orr.w	r1, r3, r4, lsl #24
   31f68:	bcf0      	pop	{r4, r5, r6, r7}
   31f6a:	4770      	bx	lr

00031f6c <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   31f6c:	3901      	subs	r1, #1
   31f6e:	2300      	movs	r3, #0
   31f70:	428b      	cmp	r3, r1
   31f72:	da0a      	bge.n	31f8a <swap_in_place+0x1e>
{
   31f74:	b410      	push	{r4}
        tmp = u8ptr[i];
   31f76:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   31f78:	5c44      	ldrb	r4, [r0, r1]
   31f7a:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   31f7c:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   31f7e:	3301      	adds	r3, #1
   31f80:	3901      	subs	r1, #1
   31f82:	428b      	cmp	r3, r1
   31f84:	dbf7      	blt.n	31f76 <swap_in_place+0xa>
    }
}
   31f86:	bc10      	pop	{r4}
   31f88:	4770      	bx	lr
   31f8a:	4770      	bx	lr

00031f8c <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   31f8c:	2300      	movs	r3, #0
   31f8e:	4293      	cmp	r3, r2
   31f90:	da09      	bge.n	31fa6 <swap_buf+0x1a>
{
   31f92:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   31f94:	1e54      	subs	r4, r2, #1
   31f96:	1ae4      	subs	r4, r4, r3
   31f98:	5ccd      	ldrb	r5, [r1, r3]
   31f9a:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   31f9c:	3301      	adds	r3, #1
   31f9e:	4293      	cmp	r3, r2
   31fa0:	dbf8      	blt.n	31f94 <swap_buf+0x8>
    }
}
   31fa2:	bc30      	pop	{r4, r5}
   31fa4:	4770      	bx	lr
   31fa6:	4770      	bx	lr

00031fa8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   31fa8:	b508      	push	{r3, lr}
   31faa:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   31fac:	2000      	movs	r0, #0
   31fae:	f7fe fd95 	bl	30adc <hal_timer_config>
    return rc;
}
   31fb2:	bd08      	pop	{r3, pc}

00031fb4 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   31fb4:	b510      	push	{r4, lr}
    assert(timer != NULL);
   31fb6:	b140      	cbz	r0, 31fca <os_cputime_timer_init+0x16>
   31fb8:	460c      	mov	r4, r1
   31fba:	4613      	mov	r3, r2
   31fbc:	4601      	mov	r1, r0
    assert(fp != NULL);
   31fbe:	b174      	cbz	r4, 31fde <os_cputime_timer_init+0x2a>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   31fc0:	4622      	mov	r2, r4
   31fc2:	2000      	movs	r0, #0
   31fc4:	f7fe fdd5 	bl	30b72 <hal_timer_set_cb>
}
   31fc8:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   31fca:	f7e2 fb43 	bl	14654 <hal_debugger_connected>
   31fce:	b100      	cbz	r0, 31fd2 <os_cputime_timer_init+0x1e>
   31fd0:	be01      	bkpt	0x0001
   31fd2:	2300      	movs	r3, #0
   31fd4:	461a      	mov	r2, r3
   31fd6:	4619      	mov	r1, r3
   31fd8:	4618      	mov	r0, r3
   31fda:	f7e2 fedd 	bl	14d98 <__assert_func>
    assert(fp != NULL);
   31fde:	f7e2 fb39 	bl	14654 <hal_debugger_connected>
   31fe2:	b100      	cbz	r0, 31fe6 <os_cputime_timer_init+0x32>
   31fe4:	be01      	bkpt	0x0001
   31fe6:	2300      	movs	r3, #0
   31fe8:	461a      	mov	r2, r3
   31fea:	4619      	mov	r1, r3
   31fec:	4618      	mov	r0, r3
   31fee:	f7e2 fed3 	bl	14d98 <__assert_func>

00031ff2 <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   31ff2:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   31ff4:	f7fe fdcd 	bl	30b92 <hal_timer_start_at>
    return rc;
}
   31ff8:	bd08      	pop	{r3, pc}

00031ffa <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   31ffa:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   31ffc:	f7fe fe01 	bl	30c02 <hal_timer_stop>
}
   32000:	bd08      	pop	{r3, pc}

00032002 <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   32002:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   32004:	2000      	movs	r0, #0
   32006:	f7fe fda6 	bl	30b56 <hal_timer_read>
    return cpu_time;
}
   3200a:	bd08      	pop	{r3, pc}

0003200c <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   3200c:	4b02      	ldr	r3, [pc, #8]	; (32018 <os_cputime_usecs_to_ticks+0xc>)
   3200e:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   32012:	4608      	mov	r0, r1
   32014:	4770      	bx	lr
   32016:	bf00      	nop
   32018:	08637bd0 	.word	0x08637bd0

0003201c <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   3201c:	0a41      	lsrs	r1, r0, #9
   3201e:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   32022:	f3c0 0308 	ubfx	r3, r0, #0, #9
   32026:	fb02 f303 	mul.w	r3, r2, r3
   3202a:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   3202c:	fb02 3001 	mla	r0, r2, r1, r3
   32030:	4770      	bx	lr

00032032 <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   32032:	280b      	cmp	r0, #11
   32034:	d818      	bhi.n	32068 <os_error_to_sys+0x36>
   32036:	e8df f000 	tbb	[pc, r0]
   3203a:	1a06      	.short	0x1a06
   3203c:	17170b08 	.word	0x17170b08
   32040:	1717170e 	.word	0x1717170e
   32044:	1411      	.short	0x1411
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
        case OS_INVALID_PARM:   return SYS_EINVAL; 
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
        case OS_ENOENT:         return SYS_ENOENT; 
        case OS_EBUSY:          return SYS_EBUSY; 
   32046:	2000      	movs	r0, #0
   32048:	4770      	bx	lr
        case OS_EINVAL:         return SYS_EINVAL; 
   3204a:	f06f 0001 	mvn.w	r0, #1
   3204e:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   32050:	f06f 0001 	mvn.w	r0, #1
   32054:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   32056:	f06f 0002 	mvn.w	r0, #2
   3205a:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   3205c:	f06f 0003 	mvn.w	r0, #3
   32060:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   32062:	f06f 0007 	mvn.w	r0, #7
   32066:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   32068:	f06f 000c 	mvn.w	r0, #12
   3206c:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   3206e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   32072:	4770      	bx	lr

00032074 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   32074:	4603      	mov	r3, r0
   32076:	b118      	cbz	r0, 32080 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   32078:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   3207a:	2000      	movs	r0, #0
   3207c:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   3207e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   32080:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   32082:	4770      	bx	lr

00032084 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   32084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   32086:	4b17      	ldr	r3, [pc, #92]	; (320e4 <os_sem_release+0x60>)
   32088:	681b      	ldr	r3, [r3, #0]
   3208a:	b33b      	cbz	r3, 320dc <os_sem_release+0x58>
   3208c:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   3208e:	b338      	cbz	r0, 320e0 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   32090:	f7e4 f864 	bl	1615c <os_sched_get_current_task>
   32094:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   32096:	f7e4 fb35 	bl	16704 <os_arch_save_sr>
   3209a:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   3209c:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   3209e:	b165      	cbz	r5, 320ba <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   320a0:	7b6b      	ldrb	r3, [r5, #13]
   320a2:	f023 0302 	bic.w	r3, r3, #2
   320a6:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   320a8:	4628      	mov	r0, r5
   320aa:	f7e4 f8ab 	bl	16204 <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   320ae:	7afa      	ldrb	r2, [r7, #11]
   320b0:	7aeb      	ldrb	r3, [r5, #11]
   320b2:	429a      	cmp	r2, r3
   320b4:	d20b      	bcs.n	320ce <os_sem_release+0x4a>
    resched = 0;
   320b6:	2400      	movs	r4, #0
   320b8:	e003      	b.n	320c2 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   320ba:	88e3      	ldrh	r3, [r4, #6]
   320bc:	3301      	adds	r3, #1
   320be:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   320c0:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   320c2:	4630      	mov	r0, r6
   320c4:	f7e4 fb24 	bl	16710 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   320c8:	b91c      	cbnz	r4, 320d2 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   320ca:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   320cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   320ce:	2401      	movs	r4, #1
   320d0:	e7f7      	b.n	320c2 <os_sem_release+0x3e>
        os_sched(rdy);
   320d2:	4628      	mov	r0, r5
   320d4:	f7e4 f922 	bl	1631c <os_sched>
    ret = OS_OK;
   320d8:	2000      	movs	r0, #0
   320da:	e7f7      	b.n	320cc <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   320dc:	2009      	movs	r0, #9
   320de:	e7f5      	b.n	320cc <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   320e0:	2003      	movs	r0, #3
   320e2:	e7f3      	b.n	320cc <os_sem_release+0x48>
   320e4:	10000f40 	.word	0x10000f40

000320e8 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   320e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   320ea:	4b2b      	ldr	r3, [pc, #172]	; (32198 <os_sem_pend+0xb0>)
   320ec:	681b      	ldr	r3, [r3, #0]
   320ee:	2b00      	cmp	r3, #0
   320f0:	d04d      	beq.n	3218e <os_sem_pend+0xa6>
   320f2:	4604      	mov	r4, r0
   320f4:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   320f6:	2800      	cmp	r0, #0
   320f8:	d04b      	beq.n	32192 <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   320fa:	f7e4 f82f 	bl	1615c <os_sched_get_current_task>
   320fe:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   32100:	f7e4 fb00 	bl	16704 <os_arch_save_sr>
   32104:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   32106:	88e3      	ldrh	r3, [r4, #6]
   32108:	b14b      	cbz	r3, 3211e <os_sem_pend+0x36>
        sem->sem_tokens--;
   3210a:	3b01      	subs	r3, #1
   3210c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   3210e:	2400      	movs	r4, #0
    sched = 0;
   32110:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   32112:	4630      	mov	r0, r6
   32114:	f7e4 fafc 	bl	16710 <os_arch_restore_sr>

    if (sched) {
   32118:	bb47      	cbnz	r7, 3216c <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   3211a:	4620      	mov	r0, r4
   3211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   3211e:	b317      	cbz	r7, 32166 <os_sem_pend+0x7e>
        current->t_obj = sem;
   32120:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   32122:	7b6b      	ldrb	r3, [r5, #13]
   32124:	f043 0302 	orr.w	r3, r3, #2
   32128:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   3212a:	f8d4 c000 	ldr.w	ip, [r4]
   3212e:	f1bc 0f00 	cmp.w	ip, #0
   32132:	d00e      	beq.n	32152 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   32134:	4663      	mov	r3, ip
        last = NULL;
   32136:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   32138:	b133      	cbz	r3, 32148 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   3213a:	7ae9      	ldrb	r1, [r5, #11]
   3213c:	7ada      	ldrb	r2, [r3, #11]
   3213e:	4291      	cmp	r1, r2
   32140:	d302      	bcc.n	32148 <os_sem_pend+0x60>
                last = entry;
   32142:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   32144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32146:	e7f7      	b.n	32138 <os_sem_pend+0x50>
        if (last) {
   32148:	b118      	cbz	r0, 32152 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   3214a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   3214c:	64eb      	str	r3, [r5, #76]	; 0x4c
   3214e:	64c5      	str	r5, [r0, #76]	; 0x4c
   32150:	e002      	b.n	32158 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   32152:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   32156:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   32158:	4639      	mov	r1, r7
   3215a:	4628      	mov	r0, r5
   3215c:	f7e4 f80a 	bl	16174 <os_sched_sleep>
        ret = OS_OK;
   32160:	2400      	movs	r4, #0
        sched = 1;
   32162:	2701      	movs	r7, #1
   32164:	e7d5      	b.n	32112 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   32166:	2406      	movs	r4, #6
    sched = 0;
   32168:	2700      	movs	r7, #0
   3216a:	e7d2      	b.n	32112 <os_sem_pend+0x2a>
        os_sched(NULL);
   3216c:	2000      	movs	r0, #0
   3216e:	f7e4 f8d5 	bl	1631c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   32172:	7b6c      	ldrb	r4, [r5, #13]
   32174:	f014 0402 	ands.w	r4, r4, #2
   32178:	d0cf      	beq.n	3211a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   3217a:	f7e4 fac3 	bl	16704 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   3217e:	7b6b      	ldrb	r3, [r5, #13]
   32180:	f023 0302 	bic.w	r3, r3, #2
   32184:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   32186:	f7e4 fac3 	bl	16710 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   3218a:	2406      	movs	r4, #6
   3218c:	e7c5      	b.n	3211a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   3218e:	2409      	movs	r4, #9
   32190:	e7c3      	b.n	3211a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   32192:	2403      	movs	r4, #3
   32194:	e7c1      	b.n	3211a <os_sem_pend+0x32>
   32196:	bf00      	nop
   32198:	10000f40 	.word	0x10000f40

0003219c <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   3219c:	2001      	movs	r0, #1
   3219e:	4770      	bx	lr

000321a0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   321a0:	4770      	bx	lr

000321a2 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   321a2:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   321a4:	f101 0320 	add.w	r3, r1, #32
   321a8:	4293      	cmp	r3, r2
   321aa:	d816      	bhi.n	321da <__malloc_from_block+0x38>
{
   321ac:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   321ae:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   321b0:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   321b2:	2501      	movs	r5, #1
   321b4:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   321b6:	1a52      	subs	r2, r2, r1
   321b8:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   321ba:	2200      	movs	r2, #0
   321bc:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   321be:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   321c0:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   321c2:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   321c4:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   321c6:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   321c8:	6901      	ldr	r1, [r0, #16]
   321ca:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   321cc:	6942      	ldr	r2, [r0, #20]
   321ce:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   321d0:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   321d2:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   321d4:	3010      	adds	r0, #16
   321d6:	bc30      	pop	{r4, r5}
   321d8:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   321da:	2300      	movs	r3, #0
   321dc:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   321de:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   321e0:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   321e2:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   321e4:	615a      	str	r2, [r3, #20]
}
   321e6:	3010      	adds	r0, #16
   321e8:	4770      	bx	lr
	...

000321ec <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   321ec:	b410      	push	{r4}
   321ee:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   321f0:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   321f2:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   321f4:	6802      	ldr	r2, [r0, #0]
   321f6:	2a01      	cmp	r2, #1
   321f8:	d00e      	beq.n	32218 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   321fa:	2201      	movs	r2, #1
   321fc:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   321fe:	4a13      	ldr	r2, [pc, #76]	; (3224c <__free_block+0x60>)
   32200:	6910      	ldr	r0, [r2, #16]
   32202:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   32204:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   32206:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   32208:	691a      	ldr	r2, [r3, #16]
   3220a:	6153      	str	r3, [r2, #20]
   3220c:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   3220e:	680b      	ldr	r3, [r1, #0]
   32210:	2b01      	cmp	r3, #1
   32212:	d00b      	beq.n	3222c <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   32214:	bc10      	pop	{r4}
   32216:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   32218:	6842      	ldr	r2, [r0, #4]
   3221a:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   3221c:	429c      	cmp	r4, r3
   3221e:	d1ec      	bne.n	321fa <__free_block+0xe>
        pah->a.size += ah->a.size;
   32220:	685b      	ldr	r3, [r3, #4]
   32222:	441a      	add	r2, r3
   32224:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   32226:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   32228:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   3222a:	e7f0      	b.n	3220e <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   3222c:	6843      	ldr	r3, [r0, #4]
   3222e:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   32230:	428a      	cmp	r2, r1
   32232:	d1ef      	bne.n	32214 <__free_block+0x28>
        ah->a.size += nah->a.size;
   32234:	684a      	ldr	r2, [r1, #4]
   32236:	4413      	add	r3, r2
   32238:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   3223a:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   3223c:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   3223e:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   32240:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   32242:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   32244:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   32246:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   32248:	60da      	str	r2, [r3, #12]
    return ah;
   3224a:	e7e3      	b.n	32214 <__free_block+0x28>
   3224c:	100004e8 	.word	0x100004e8

00032250 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   32250:	2917      	cmp	r1, #23
   32252:	d91e      	bls.n	32292 <add_malloc_block+0x42>
{
   32254:	b510      	push	{r4, lr}
   32256:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   32258:	2301      	movs	r3, #1
   3225a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   3225c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   3225e:	4b0d      	ldr	r3, [pc, #52]	; (32294 <add_malloc_block+0x44>)
   32260:	681b      	ldr	r3, [r3, #0]
   32262:	4798      	blx	r3
   32264:	b1a0      	cbz	r0, 32290 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   32266:	4b0c      	ldr	r3, [pc, #48]	; (32298 <add_malloc_block+0x48>)
   32268:	68db      	ldr	r3, [r3, #12]
   3226a:	681a      	ldr	r2, [r3, #0]
   3226c:	2a02      	cmp	r2, #2
   3226e:	d003      	beq.n	32278 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   32270:	42a3      	cmp	r3, r4
   32272:	d301      	bcc.n	32278 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   32274:	68db      	ldr	r3, [r3, #12]
   32276:	e7f8      	b.n	3226a <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   32278:	689a      	ldr	r2, [r3, #8]
   3227a:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   3227c:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   3227e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   32280:	68a3      	ldr	r3, [r4, #8]
   32282:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   32284:	4620      	mov	r0, r4
   32286:	f7ff ffb1 	bl	321ec <__free_block>

    malloc_unlock();
   3228a:	4b04      	ldr	r3, [pc, #16]	; (3229c <add_malloc_block+0x4c>)
   3228c:	681b      	ldr	r3, [r3, #0]
   3228e:	4798      	blx	r3
}
   32290:	bd10      	pop	{r4, pc}
   32292:	4770      	bx	lr
   32294:	10000500 	.word	0x10000500
   32298:	100004e8 	.word	0x100004e8
   3229c:	10000504 	.word	0x10000504

000322a0 <malloc>:
{
   322a0:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   322a2:	1e43      	subs	r3, r0, #1
   322a4:	f113 0f12 	cmn.w	r3, #18
   322a8:	d825      	bhi.n	322f6 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   322aa:	301f      	adds	r0, #31
   322ac:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   322b0:	4b13      	ldr	r3, [pc, #76]	; (32300 <malloc+0x60>)
   322b2:	681b      	ldr	r3, [r3, #0]
   322b4:	4798      	blx	r3
   322b6:	b300      	cbz	r0, 322fa <malloc+0x5a>
    void *result = NULL;
   322b8:	2500      	movs	r5, #0
   322ba:	e00d      	b.n	322d8 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   322bc:	4621      	mov	r1, r4
   322be:	f7ff ff70 	bl	321a2 <__malloc_from_block>
   322c2:	4605      	mov	r5, r0
    if (result == NULL) {
   322c4:	b995      	cbnz	r5, 322ec <malloc+0x4c>
        more_mem = _sbrk(size);
   322c6:	4620      	mov	r0, r4
   322c8:	f7e2 f9a6 	bl	14618 <_sbrk>
        if (more_mem != (void *)-1) {
   322cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   322d0:	d00c      	beq.n	322ec <malloc+0x4c>
            add_malloc_block(more_mem, size);
   322d2:	4621      	mov	r1, r4
   322d4:	f7ff ffbc 	bl	32250 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   322d8:	4b0a      	ldr	r3, [pc, #40]	; (32304 <malloc+0x64>)
   322da:	6918      	ldr	r0, [r3, #16]
   322dc:	6803      	ldr	r3, [r0, #0]
   322de:	2b02      	cmp	r3, #2
   322e0:	d0f0      	beq.n	322c4 <malloc+0x24>
        if (fp->a.size >= size) {
   322e2:	6843      	ldr	r3, [r0, #4]
   322e4:	42a3      	cmp	r3, r4
   322e6:	d2e9      	bcs.n	322bc <malloc+0x1c>
         fp = fp->next_free) {
   322e8:	6900      	ldr	r0, [r0, #16]
   322ea:	e7f7      	b.n	322dc <malloc+0x3c>
    malloc_unlock();
   322ec:	4b06      	ldr	r3, [pc, #24]	; (32308 <malloc+0x68>)
   322ee:	681b      	ldr	r3, [r3, #0]
   322f0:	4798      	blx	r3
}
   322f2:	4628      	mov	r0, r5
   322f4:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   322f6:	2500      	movs	r5, #0
   322f8:	e7fb      	b.n	322f2 <malloc+0x52>
        return NULL;
   322fa:	2500      	movs	r5, #0
   322fc:	e7f9      	b.n	322f2 <malloc+0x52>
   322fe:	bf00      	nop
   32300:	10000500 	.word	0x10000500
   32304:	100004e8 	.word	0x100004e8
   32308:	10000504 	.word	0x10000504

0003230c <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   3230c:	b170      	cbz	r0, 3232c <free+0x20>
{
   3230e:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   32310:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   32314:	4b06      	ldr	r3, [pc, #24]	; (32330 <free+0x24>)
   32316:	681b      	ldr	r3, [r3, #0]
   32318:	4798      	blx	r3
   3231a:	b900      	cbnz	r0, 3231e <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   3231c:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   3231e:	4620      	mov	r0, r4
   32320:	f7ff ff64 	bl	321ec <__free_block>
    malloc_unlock();
   32324:	4b03      	ldr	r3, [pc, #12]	; (32334 <free+0x28>)
   32326:	681b      	ldr	r3, [r3, #0]
   32328:	4798      	blx	r3
   3232a:	e7f7      	b.n	3231c <free+0x10>
   3232c:	4770      	bx	lr
   3232e:	bf00      	nop
   32330:	10000500 	.word	0x10000500
   32334:	10000504 	.word	0x10000504

00032338 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   32338:	2000      	movs	r0, #0
   3233a:	4770      	bx	lr

0003233c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   3233c:	b510      	push	{r4, lr}
   3233e:	4608      	mov	r0, r1
   32340:	4614      	mov	r4, r2
    console_write(bp, n);
   32342:	4611      	mov	r1, r2
   32344:	f7e6 f832 	bl	183ac <console_write>
    return n;
}
   32348:	4620      	mov	r0, r4
   3234a:	bd10      	pop	{r4, pc}

0003234c <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   3234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   3234e:	b300      	cbz	r0, 32392 <realloc+0x46>
   32350:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   32352:	1e4b      	subs	r3, r1, #1
   32354:	f113 0f12 	cmn.w	r3, #18
   32358:	d820      	bhi.n	3239c <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   3235a:	311f      	adds	r1, #31
   3235c:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   32360:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   32364:	42a5      	cmp	r5, r4
   32366:	d302      	bcc.n	3236e <realloc+0x22>
   32368:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   3236c:	d21c      	bcs.n	323a8 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   3236e:	3d10      	subs	r5, #16

		newptr = malloc(size);
   32370:	4620      	mov	r0, r4
   32372:	f7ff ff95 	bl	322a0 <malloc>
                if (newptr) {
   32376:	4607      	mov	r7, r0
   32378:	b1a0      	cbz	r0, 323a4 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   3237a:	4622      	mov	r2, r4
   3237c:	42ac      	cmp	r4, r5
   3237e:	bf28      	it	cs
   32380:	462a      	movcs	r2, r5
   32382:	4631      	mov	r1, r6
   32384:	f7e4 fb92 	bl	16aac <memcpy>
                    free(ptr);
   32388:	4630      	mov	r0, r6
   3238a:	f7ff ffbf 	bl	3230c <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   3238e:	4638      	mov	r0, r7
   32390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   32392:	4608      	mov	r0, r1
   32394:	f7ff ff84 	bl	322a0 <malloc>
   32398:	4607      	mov	r7, r0
   3239a:	e7f8      	b.n	3238e <realloc+0x42>
		free(ptr);
   3239c:	f7ff ffb6 	bl	3230c <free>
		return NULL;
   323a0:	2700      	movs	r7, #0
   323a2:	e7f4      	b.n	3238e <realloc+0x42>
                    newptr = ptr;
   323a4:	4637      	mov	r7, r6
		return newptr;
   323a6:	e7f2      	b.n	3238e <realloc+0x42>
		return ptr;
   323a8:	4607      	mov	r7, r0
   323aa:	e7f0      	b.n	3238e <realloc+0x42>

000323ac <sprintf>:

#include <stdio.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   323ac:	b40e      	push	{r1, r2, r3}
   323ae:	b500      	push	{lr}
   323b0:	b082      	sub	sp, #8
   323b2:	ab03      	add	r3, sp, #12
   323b4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   323b8:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   323ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   323be:	f000 fb89 	bl	32ad4 <vsnprintf>
	va_end(ap);

	return rv;
}
   323c2:	b002      	add	sp, #8
   323c4:	f85d eb04 	ldr.w	lr, [sp], #4
   323c8:	b003      	add	sp, #12
   323ca:	4770      	bx	lr

000323cc <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   323cc:	b410      	push	{r4}
	char *q = dst;
   323ce:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   323d0:	780c      	ldrb	r4, [r1, #0]
   323d2:	3101      	adds	r1, #1
   323d4:	7014      	strb	r4, [r2, #0]
   323d6:	3201      	adds	r2, #1
	} while (ch);
   323d8:	2c00      	cmp	r4, #0
   323da:	d1f9      	bne.n	323d0 <strcpy+0x4>

	return dst;
}
   323dc:	bc10      	pop	{r4}
   323de:	4770      	bx	lr

000323e0 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   323e0:	b510      	push	{r4, lr}
   323e2:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   323e4:	b132      	cbz	r2, 323f4 <strncpy+0x14>
		n--;
   323e6:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   323e8:	f811 3b01 	ldrb.w	r3, [r1], #1
   323ec:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   323f0:	2b00      	cmp	r3, #0
   323f2:	d1f7      	bne.n	323e4 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   323f4:	2100      	movs	r1, #0
   323f6:	f7e4 fb7e 	bl	16af6 <memset>

	return dst;
}
   323fa:	4620      	mov	r0, r4
   323fc:	bd10      	pop	{r4, pc}

000323fe <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   323fe:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   32400:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   32402:	b14d      	cbz	r5, 32418 <strsep+0x1a>
   32404:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   32406:	4628      	mov	r0, r5
   32408:	f000 fc4c 	bl	32ca4 <strpbrk>
	if (e)
   3240c:	4603      	mov	r3, r0
   3240e:	b110      	cbz	r0, 32416 <strsep+0x18>
		*e++ = '\0';
   32410:	2200      	movs	r2, #0
   32412:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   32416:	6023      	str	r3, [r4, #0]
	return s;
}
   32418:	4628      	mov	r0, r5
   3241a:	bd38      	pop	{r3, r4, r5, pc}

0003241c <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   3241c:	b538      	push	{r3, r4, r5, lr}
   3241e:	460d      	mov	r5, r1
   32420:	4614      	mov	r4, r2
	if (s)
   32422:	b100      	cbz	r0, 32426 <strtok_r+0xa>
		*holder = s;
   32424:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   32426:	4629      	mov	r1, r5
   32428:	4620      	mov	r0, r4
   3242a:	f7ff ffe8 	bl	323fe <strsep>
	} while (s && !*s);
   3242e:	4603      	mov	r3, r0
   32430:	b110      	cbz	r0, 32438 <strtok_r+0x1c>
   32432:	7800      	ldrb	r0, [r0, #0]
   32434:	2800      	cmp	r0, #0
   32436:	d0f6      	beq.n	32426 <strtok_r+0xa>

	return s;
}
   32438:	4618      	mov	r0, r3
   3243a:	bd38      	pop	{r3, r4, r5, pc}

0003243c <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   3243c:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   3243e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32442:	f000 fba1 	bl	32b88 <strntoumax>
}
   32446:	bd08      	pop	{r3, pc}

00032448 <strtoull>:
{
   32448:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   3244a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3244e:	f000 fb9b 	bl	32b88 <strntoumax>
}
   32452:	bd08      	pop	{r3, pc}

00032454 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   32454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32458:	b087      	sub	sp, #28
   3245a:	4604      	mov	r4, r0
   3245c:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   3245e:	6853      	ldr	r3, [r2, #4]
   32460:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   32462:	7893      	ldrb	r3, [r2, #2]
   32464:	f003 0330 	and.w	r3, r3, #48	; 0x30
   32468:	2b10      	cmp	r3, #16
   3246a:	d018      	beq.n	3249e <ui2a+0x4a>
   3246c:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   3246e:	2b20      	cmp	r3, #32
   32470:	d019      	beq.n	324a6 <ui2a+0x52>
{
   32472:	2601      	movs	r6, #1
   32474:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   32476:	4632      	mov	r2, r6
   32478:	463b      	mov	r3, r7
   3247a:	4620      	mov	r0, r4
   3247c:	4629      	mov	r1, r5
   3247e:	f7e1 feed 	bl	1425c <__aeabi_uldivmod>
   32482:	f89a 8003 	ldrb.w	r8, [sl, #3]
   32486:	f04f 0900 	mov.w	r9, #0
   3248a:	4549      	cmp	r1, r9
   3248c:	bf08      	it	eq
   3248e:	4540      	cmpeq	r0, r8
   32490:	d30e      	bcc.n	324b0 <ui2a+0x5c>
        d *= p->base;
   32492:	fb08 f307 	mul.w	r3, r8, r7
   32496:	fba6 6708 	umull	r6, r7, r6, r8
   3249a:	441f      	add	r7, r3
   3249c:	e7eb      	b.n	32476 <ui2a+0x22>
        num = (unsigned short int)num;
   3249e:	b283      	uxth	r3, r0
   324a0:	461c      	mov	r4, r3
   324a2:	2500      	movs	r5, #0
   324a4:	e7e5      	b.n	32472 <ui2a+0x1e>
        num = (unsigned char)num;
   324a6:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   324aa:	461c      	mov	r4, r3
   324ac:	2500      	movs	r5, #0
   324ae:	e7e0      	b.n	32472 <ui2a+0x1e>
    int n = 0;
   324b0:	f04f 0b00 	mov.w	fp, #0
   324b4:	f8cd a014 	str.w	sl, [sp, #20]
   324b8:	e00c      	b.n	324d4 <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   324ba:	2230      	movs	r2, #48	; 0x30
   324bc:	9b04      	ldr	r3, [sp, #16]
   324be:	9c00      	ldr	r4, [sp, #0]
   324c0:	4414      	add	r4, r2
   324c2:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   324c6:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   324ca:	9304      	str	r3, [sp, #16]
   324cc:	4606      	mov	r6, r0
   324ce:	460f      	mov	r7, r1
   324d0:	9c02      	ldr	r4, [sp, #8]
   324d2:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   324d4:	ea56 0307 	orrs.w	r3, r6, r7
   324d8:	d034      	beq.n	32544 <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   324da:	4632      	mov	r2, r6
   324dc:	463b      	mov	r3, r7
   324de:	4620      	mov	r0, r4
   324e0:	4629      	mov	r1, r5
   324e2:	f7e1 febb 	bl	1425c <__aeabi_uldivmod>
   324e6:	9000      	str	r0, [sp, #0]
   324e8:	9101      	str	r1, [sp, #4]
        num %= d;
   324ea:	4632      	mov	r2, r6
   324ec:	463b      	mov	r3, r7
   324ee:	4620      	mov	r0, r4
   324f0:	4629      	mov	r1, r5
   324f2:	f7e1 feb3 	bl	1425c <__aeabi_uldivmod>
   324f6:	9202      	str	r2, [sp, #8]
   324f8:	9303      	str	r3, [sp, #12]
        d /= p->base;
   324fa:	9b05      	ldr	r3, [sp, #20]
   324fc:	f893 8003 	ldrb.w	r8, [r3, #3]
   32500:	f04f 0900 	mov.w	r9, #0
   32504:	4642      	mov	r2, r8
   32506:	464b      	mov	r3, r9
   32508:	4630      	mov	r0, r6
   3250a:	4639      	mov	r1, r7
   3250c:	f7e1 fea6 	bl	1425c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   32510:	f1bb 0f00 	cmp.w	fp, #0
   32514:	d107      	bne.n	32526 <ui2a+0xd2>
   32516:	42bd      	cmp	r5, r7
   32518:	bf08      	it	eq
   3251a:	42b4      	cmpeq	r4, r6
   3251c:	d203      	bcs.n	32526 <ui2a+0xd2>
   3251e:	454f      	cmp	r7, r9
   32520:	bf08      	it	eq
   32522:	4546      	cmpeq	r6, r8
   32524:	d2d2      	bcs.n	324cc <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   32526:	e9dd 3400 	ldrd	r3, r4, [sp]
   3252a:	2c00      	cmp	r4, #0
   3252c:	bf08      	it	eq
   3252e:	2b0a      	cmpeq	r3, #10
   32530:	d3c3      	bcc.n	324ba <ui2a+0x66>
   32532:	9b05      	ldr	r3, [sp, #20]
   32534:	789b      	ldrb	r3, [r3, #2]
   32536:	f013 0f04 	tst.w	r3, #4
   3253a:	d001      	beq.n	32540 <ui2a+0xec>
   3253c:	2237      	movs	r2, #55	; 0x37
   3253e:	e7bd      	b.n	324bc <ui2a+0x68>
   32540:	2257      	movs	r2, #87	; 0x57
   32542:	e7bb      	b.n	324bc <ui2a+0x68>
        }
    }
    *bf = 0;
   32544:	2300      	movs	r3, #0
   32546:	9a04      	ldr	r2, [sp, #16]
   32548:	7013      	strb	r3, [r2, #0]
}
   3254a:	b007      	add	sp, #28
   3254c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032550 <i2a>:

static void i2a(long long int num, struct param *p)
{
   32550:	b510      	push	{r4, lr}
   32552:	4604      	mov	r4, r0
   32554:	460b      	mov	r3, r1
   32556:	4620      	mov	r0, r4
   32558:	4619      	mov	r1, r3
    if (num < 0) {
   3255a:	2c00      	cmp	r4, #0
   3255c:	f173 0300 	sbcs.w	r3, r3, #0
   32560:	db02      	blt.n	32568 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   32562:	f7ff ff77 	bl	32454 <ui2a>
}
   32566:	bd10      	pop	{r4, pc}
        num = -num;
   32568:	4260      	negs	r0, r4
   3256a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   3256e:	7893      	ldrb	r3, [r2, #2]
   32570:	f043 0301 	orr.w	r3, r3, #1
   32574:	7093      	strb	r3, [r2, #2]
   32576:	e7f4      	b.n	32562 <i2a+0x12>

00032578 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   32578:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3257c:	b2db      	uxtb	r3, r3
   3257e:	2b09      	cmp	r3, #9
   32580:	d90b      	bls.n	3259a <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   32582:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   32586:	b2db      	uxtb	r3, r3
   32588:	2b05      	cmp	r3, #5
   3258a:	d908      	bls.n	3259e <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   3258c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   32590:	b2db      	uxtb	r3, r3
   32592:	2b05      	cmp	r3, #5
   32594:	d805      	bhi.n	325a2 <a2d+0x2a>
        return ch - 'A' + 10;
   32596:	3837      	subs	r0, #55	; 0x37
   32598:	4770      	bx	lr
        return ch - '0';
   3259a:	3830      	subs	r0, #48	; 0x30
   3259c:	4770      	bx	lr
        return ch - 'a' + 10;
   3259e:	3857      	subs	r0, #87	; 0x57
   325a0:	4770      	bx	lr
    else
        return -1;
   325a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   325a6:	4770      	bx	lr

000325a8 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   325a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   325ac:	4605      	mov	r5, r0
   325ae:	4688      	mov	r8, r1
   325b0:	4616      	mov	r6, r2
   325b2:	4699      	mov	r9, r3
    const char *p = *src;
   325b4:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   325b6:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   325b8:	4628      	mov	r0, r5
   325ba:	f7ff ffdd 	bl	32578 <a2d>
   325be:	2800      	cmp	r0, #0
   325c0:	db06      	blt.n	325d0 <a2i+0x28>
        if (digit > base)
   325c2:	42b0      	cmp	r0, r6
   325c4:	dc04      	bgt.n	325d0 <a2i+0x28>
            break;
        num = num * base + digit;
   325c6:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   325ca:	f814 5b01 	ldrb.w	r5, [r4], #1
   325ce:	e7f3      	b.n	325b8 <a2i+0x10>
    }
    *src = p;
   325d0:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   325d4:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   325d8:	4628      	mov	r0, r5
   325da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000325de <putf>:

static int putf(FILE *putp, char c)
{
   325de:	b500      	push	{lr}
   325e0:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   325e2:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   325e6:	6803      	ldr	r3, [r0, #0]
   325e8:	681b      	ldr	r3, [r3, #0]
   325ea:	b143      	cbz	r3, 325fe <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   325ec:	2201      	movs	r2, #1
   325ee:	f10d 0107 	add.w	r1, sp, #7
   325f2:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   325f4:	2801      	cmp	r0, #1
   325f6:	d102      	bne.n	325fe <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   325f8:	b003      	add	sp, #12
   325fa:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   325fe:	2000      	movs	r0, #0
   32600:	e7fa      	b.n	325f8 <putf+0x1a>
	...

00032604 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   32604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32608:	4607      	mov	r7, r0
   3260a:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   3260c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   3260e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   32610:	f813 2b01 	ldrb.w	r2, [r3], #1
   32614:	b11a      	cbz	r2, 3261e <putchw+0x1a>
   32616:	2c00      	cmp	r4, #0
   32618:	dd01      	ble.n	3261e <putchw+0x1a>
        n--;
   3261a:	3c01      	subs	r4, #1
   3261c:	e7f8      	b.n	32610 <putchw+0xc>
    if (p->sign)
   3261e:	f898 3002 	ldrb.w	r3, [r8, #2]
   32622:	f013 0f01 	tst.w	r3, #1
   32626:	d000      	beq.n	3262a <putchw+0x26>
        n--;
   32628:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   3262a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   3262e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   32632:	b29b      	uxth	r3, r3
   32634:	f241 0202 	movw	r2, #4098	; 0x1002
   32638:	4293      	cmp	r3, r2
   3263a:	d028      	beq.n	3268e <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   3263c:	f640 0202 	movw	r2, #2050	; 0x802
   32640:	4293      	cmp	r3, r2
   32642:	d026      	beq.n	32692 <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   32644:	f8d8 3000 	ldr.w	r3, [r8]
   32648:	4e36      	ldr	r6, [pc, #216]	; (32724 <putchw+0x120>)
   3264a:	401e      	ands	r6, r3
   3264c:	b34e      	cbz	r6, 326a2 <putchw+0x9e>
    unsigned written = 0;
   3264e:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   32650:	f898 3002 	ldrb.w	r3, [r8, #2]
   32654:	f013 0f01 	tst.w	r3, #1
   32658:	d128      	bne.n	326ac <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   3265a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   3265e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   32662:	b29b      	uxth	r3, r3
   32664:	f241 0202 	movw	r2, #4098	; 0x1002
   32668:	4293      	cmp	r3, r2
   3266a:	d025      	beq.n	326b8 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   3266c:	f640 0202 	movw	r2, #2050	; 0x802
   32670:	4293      	cmp	r3, r2
   32672:	d033      	beq.n	326dc <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   32674:	f898 3001 	ldrb.w	r3, [r8, #1]
   32678:	bbe3      	cbnz	r3, 326f4 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   3267a:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   3267e:	f815 1b01 	ldrb.w	r1, [r5], #1
   32682:	b3e1      	cbz	r1, 326fe <putchw+0xfa>
        written += putf(putp, ch);
   32684:	4638      	mov	r0, r7
   32686:	f7ff ffaa 	bl	325de <putf>
   3268a:	4406      	add	r6, r0
   3268c:	e7f7      	b.n	3267e <putchw+0x7a>
        n -= 2;
   3268e:	3c02      	subs	r4, #2
   32690:	e7d8      	b.n	32644 <putchw+0x40>
        n--;
   32692:	3c01      	subs	r4, #1
   32694:	e7d6      	b.n	32644 <putchw+0x40>
            written += putf(putp, ' ');
   32696:	2120      	movs	r1, #32
   32698:	4638      	mov	r0, r7
   3269a:	f7ff ffa0 	bl	325de <putf>
   3269e:	4406      	add	r6, r0
        while (n-- > 0)
   326a0:	462c      	mov	r4, r5
   326a2:	1e65      	subs	r5, r4, #1
   326a4:	2c00      	cmp	r4, #0
   326a6:	dcf6      	bgt.n	32696 <putchw+0x92>
   326a8:	462c      	mov	r4, r5
   326aa:	e7d1      	b.n	32650 <putchw+0x4c>
        written += putf(putp, '-');
   326ac:	212d      	movs	r1, #45	; 0x2d
   326ae:	4638      	mov	r0, r7
   326b0:	f7ff ff95 	bl	325de <putf>
   326b4:	4406      	add	r6, r0
   326b6:	e7d0      	b.n	3265a <putchw+0x56>
        written += putf(putp, '0');
   326b8:	2130      	movs	r1, #48	; 0x30
   326ba:	4638      	mov	r0, r7
   326bc:	f7ff ff8f 	bl	325de <putf>
   326c0:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   326c2:	f898 3002 	ldrb.w	r3, [r8, #2]
   326c6:	f013 0f04 	tst.w	r3, #4
   326ca:	d005      	beq.n	326d8 <putchw+0xd4>
   326cc:	2158      	movs	r1, #88	; 0x58
   326ce:	4638      	mov	r0, r7
   326d0:	f7ff ff85 	bl	325de <putf>
   326d4:	4406      	add	r6, r0
   326d6:	e7cd      	b.n	32674 <putchw+0x70>
   326d8:	2178      	movs	r1, #120	; 0x78
   326da:	e7f8      	b.n	326ce <putchw+0xca>
        written += putf(putp, '0');
   326dc:	2130      	movs	r1, #48	; 0x30
   326de:	4638      	mov	r0, r7
   326e0:	f7ff ff7d 	bl	325de <putf>
   326e4:	4406      	add	r6, r0
   326e6:	e7c5      	b.n	32674 <putchw+0x70>
            written += putf(putp, '0');
   326e8:	2130      	movs	r1, #48	; 0x30
   326ea:	4638      	mov	r0, r7
   326ec:	f7ff ff77 	bl	325de <putf>
   326f0:	4406      	add	r6, r0
        while (n-- > 0)
   326f2:	462c      	mov	r4, r5
   326f4:	1e65      	subs	r5, r4, #1
   326f6:	2c00      	cmp	r4, #0
   326f8:	dcf6      	bgt.n	326e8 <putchw+0xe4>
   326fa:	462c      	mov	r4, r5
   326fc:	e7bd      	b.n	3267a <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   326fe:	f898 3002 	ldrb.w	r3, [r8, #2]
   32702:	f013 0f08 	tst.w	r3, #8
   32706:	d102      	bne.n	3270e <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   32708:	4630      	mov	r0, r6
   3270a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   3270e:	1e65      	subs	r5, r4, #1
   32710:	2c00      	cmp	r4, #0
   32712:	ddf9      	ble.n	32708 <putchw+0x104>
            written += putf(putp, ' ');
   32714:	2120      	movs	r1, #32
   32716:	4638      	mov	r0, r7
   32718:	f7ff ff61 	bl	325de <putf>
   3271c:	4406      	add	r6, r0
        while (n-- > 0)
   3271e:	462c      	mov	r4, r5
   32720:	e7f5      	b.n	3270e <putchw+0x10a>
   32722:	bf00      	nop
   32724:	0008ff00 	.word	0x0008ff00

00032728 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   32728:	b160      	cbz	r0, 32744 <intarg+0x1c>
   3272a:	2801      	cmp	r0, #1
   3272c:	d017      	beq.n	3275e <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   3272e:	b319      	cbz	r1, 32778 <intarg+0x50>
            val = va_arg(*va, long long);
   32730:	6813      	ldr	r3, [r2, #0]
   32732:	3307      	adds	r3, #7
   32734:	f023 0307 	bic.w	r3, r3, #7
   32738:	f103 0108 	add.w	r1, r3, #8
   3273c:	6011      	str	r1, [r2, #0]
   3273e:	e9d3 0100 	ldrd	r0, r1, [r3]
   32742:	4770      	bx	lr
        if (sign) {
   32744:	b129      	cbz	r1, 32752 <intarg+0x2a>
            val = va_arg(*va, int);
   32746:	6813      	ldr	r3, [r2, #0]
   32748:	1d19      	adds	r1, r3, #4
   3274a:	6011      	str	r1, [r2, #0]
   3274c:	6818      	ldr	r0, [r3, #0]
   3274e:	17c1      	asrs	r1, r0, #31
   32750:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   32752:	6813      	ldr	r3, [r2, #0]
   32754:	1d19      	adds	r1, r3, #4
   32756:	6011      	str	r1, [r2, #0]
   32758:	6818      	ldr	r0, [r3, #0]
   3275a:	2100      	movs	r1, #0
   3275c:	4770      	bx	lr
        if (sign) {
   3275e:	b129      	cbz	r1, 3276c <intarg+0x44>
            val = va_arg(*va, long);
   32760:	6813      	ldr	r3, [r2, #0]
   32762:	1d19      	adds	r1, r3, #4
   32764:	6011      	str	r1, [r2, #0]
   32766:	6818      	ldr	r0, [r3, #0]
   32768:	17c1      	asrs	r1, r0, #31
   3276a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   3276c:	6813      	ldr	r3, [r2, #0]
   3276e:	1d19      	adds	r1, r3, #4
   32770:	6011      	str	r1, [r2, #0]
   32772:	6818      	ldr	r0, [r3, #0]
   32774:	2100      	movs	r1, #0
   32776:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   32778:	6813      	ldr	r3, [r2, #0]
   3277a:	3307      	adds	r3, #7
   3277c:	f023 0307 	bic.w	r3, r3, #7
   32780:	f103 0108 	add.w	r1, r3, #8
   32784:	6011      	str	r1, [r2, #0]
   32786:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   3278a:	4770      	bx	lr

0003278c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   3278c:	b570      	push	{r4, r5, r6, lr}
   3278e:	b08a      	sub	sp, #40	; 0x28
   32790:	4606      	mov	r6, r0
   32792:	9101      	str	r1, [sp, #4]
   32794:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   32796:	ab02      	add	r3, sp, #8
   32798:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   3279a:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   3279c:	9b01      	ldr	r3, [sp, #4]
   3279e:	1c5a      	adds	r2, r3, #1
   327a0:	9201      	str	r2, [sp, #4]
   327a2:	7819      	ldrb	r1, [r3, #0]
   327a4:	2900      	cmp	r1, #0
   327a6:	f000 816e 	beq.w	32a86 <tfp_format+0x2fa>
        if (ch != '%') {
   327aa:	2925      	cmp	r1, #37	; 0x25
   327ac:	d004      	beq.n	327b8 <tfp_format+0x2c>
            written += putf(putp, ch);
   327ae:	4630      	mov	r0, r6
   327b0:	f7ff ff15 	bl	325de <putf>
   327b4:	4405      	add	r5, r0
   327b6:	e7f1      	b.n	3279c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   327b8:	2200      	movs	r2, #0
   327ba:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   327be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   327c2:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   327c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   327ca:	f362 1305 	bfi	r3, r2, #4, #2
   327ce:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   327d2:	9b01      	ldr	r3, [sp, #4]
   327d4:	1c5a      	adds	r2, r3, #1
   327d6:	9201      	str	r2, [sp, #4]
   327d8:	781c      	ldrb	r4, [r3, #0]
   327da:	b12c      	cbz	r4, 327e8 <tfp_format+0x5c>
                switch (ch) {
   327dc:	2c2d      	cmp	r4, #45	; 0x2d
   327de:	d073      	beq.n	328c8 <tfp_format+0x13c>
   327e0:	2c30      	cmp	r4, #48	; 0x30
   327e2:	d061      	beq.n	328a8 <tfp_format+0x11c>
   327e4:	2c23      	cmp	r4, #35	; 0x23
   327e6:	d068      	beq.n	328ba <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   327e8:	2c2a      	cmp	r4, #42	; 0x2a
   327ea:	d077      	beq.n	328dc <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   327ec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   327f0:	b2db      	uxtb	r3, r3
   327f2:	2b09      	cmp	r3, #9
   327f4:	f240 8086 	bls.w	32904 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   327f8:	2c6c      	cmp	r4, #108	; 0x6c
   327fa:	f000 808b 	beq.w	32914 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   327fe:	2c68      	cmp	r4, #104	; 0x68
   32800:	f000 8095 	beq.w	3292e <tfp_format+0x1a2>
            lng = 0;
   32804:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   32806:	2c7a      	cmp	r4, #122	; 0x7a
   32808:	f000 80ab 	beq.w	32962 <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   3280c:	2c78      	cmp	r4, #120	; 0x78
   3280e:	d8c5      	bhi.n	3279c <tfp_format+0x10>
   32810:	2c58      	cmp	r4, #88	; 0x58
   32812:	f0c0 80ab 	bcc.w	3296c <tfp_format+0x1e0>
   32816:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   3281a:	2b20      	cmp	r3, #32
   3281c:	d8be      	bhi.n	3279c <tfp_format+0x10>
   3281e:	a201      	add	r2, pc, #4	; (adr r2, 32824 <tfp_format+0x98>)
   32820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   32824:	000329c5 	.word	0x000329c5
   32828:	0003279d 	.word	0x0003279d
   3282c:	0003279d 	.word	0x0003279d
   32830:	0003279d 	.word	0x0003279d
   32834:	0003279d 	.word	0x0003279d
   32838:	0003279d 	.word	0x0003279d
   3283c:	0003279d 	.word	0x0003279d
   32840:	0003279d 	.word	0x0003279d
   32844:	0003279d 	.word	0x0003279d
   32848:	0003279d 	.word	0x0003279d
   3284c:	0003279d 	.word	0x0003279d
   32850:	00032a5b 	.word	0x00032a5b
   32854:	000329a5 	.word	0x000329a5
   32858:	0003279d 	.word	0x0003279d
   3285c:	0003279d 	.word	0x0003279d
   32860:	0003279d 	.word	0x0003279d
   32864:	0003279d 	.word	0x0003279d
   32868:	000329a5 	.word	0x000329a5
   3286c:	0003279d 	.word	0x0003279d
   32870:	0003279d 	.word	0x0003279d
   32874:	0003279d 	.word	0x0003279d
   32878:	0003279d 	.word	0x0003279d
   3287c:	0003279d 	.word	0x0003279d
   32880:	000329f9 	.word	0x000329f9
   32884:	00032a19 	.word	0x00032a19
   32888:	0003279d 	.word	0x0003279d
   3288c:	0003279d 	.word	0x0003279d
   32890:	00032a6d 	.word	0x00032a6d
   32894:	0003279d 	.word	0x0003279d
   32898:	00032985 	.word	0x00032985
   3289c:	0003279d 	.word	0x0003279d
   328a0:	0003279d 	.word	0x0003279d
   328a4:	000329c5 	.word	0x000329c5
                    if (!p.left) {
   328a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   328ac:	f013 0f08 	tst.w	r3, #8
   328b0:	d18f      	bne.n	327d2 <tfp_format+0x46>
                        p.lz = 1;
   328b2:	2301      	movs	r3, #1
   328b4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   328b8:	e78b      	b.n	327d2 <tfp_format+0x46>
                    p.alt = 1;
   328ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   328be:	f043 0302 	orr.w	r3, r3, #2
   328c2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   328c6:	e784      	b.n	327d2 <tfp_format+0x46>
                    p.left = 1;
   328c8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   328cc:	f043 0308 	orr.w	r3, r3, #8
   328d0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   328d4:	2300      	movs	r3, #0
   328d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   328da:	e77a      	b.n	327d2 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   328dc:	466a      	mov	r2, sp
   328de:	2101      	movs	r1, #1
   328e0:	2000      	movs	r0, #0
   328e2:	f7ff ff21 	bl	32728 <intarg>
                if (i > UCHAR_MAX) {
   328e6:	28ff      	cmp	r0, #255	; 0xff
   328e8:	dd07      	ble.n	328fa <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   328ea:	23ff      	movs	r3, #255	; 0xff
   328ec:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   328f0:	9b01      	ldr	r3, [sp, #4]
   328f2:	1c5a      	adds	r2, r3, #1
   328f4:	9201      	str	r2, [sp, #4]
   328f6:	781c      	ldrb	r4, [r3, #0]
   328f8:	e77e      	b.n	327f8 <tfp_format+0x6c>
                } else if (i > 0) {
   328fa:	2800      	cmp	r0, #0
   328fc:	ddf8      	ble.n	328f0 <tfp_format+0x164>
                    p.width = i;
   328fe:	f88d 0020 	strb.w	r0, [sp, #32]
   32902:	e7f5      	b.n	328f0 <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   32904:	ab08      	add	r3, sp, #32
   32906:	220a      	movs	r2, #10
   32908:	a901      	add	r1, sp, #4
   3290a:	4620      	mov	r0, r4
   3290c:	f7ff fe4c 	bl	325a8 <a2i>
   32910:	4604      	mov	r4, r0
   32912:	e771      	b.n	327f8 <tfp_format+0x6c>
                ch = *(fmt++);
   32914:	9b01      	ldr	r3, [sp, #4]
   32916:	1c5a      	adds	r2, r3, #1
   32918:	9201      	str	r2, [sp, #4]
   3291a:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   3291c:	2c6c      	cmp	r4, #108	; 0x6c
   3291e:	d001      	beq.n	32924 <tfp_format+0x198>
                lng = 1;
   32920:	2001      	movs	r0, #1
   32922:	e770      	b.n	32806 <tfp_format+0x7a>
                    ch = *(fmt++);
   32924:	1c9a      	adds	r2, r3, #2
   32926:	9201      	str	r2, [sp, #4]
   32928:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   3292a:	2002      	movs	r0, #2
   3292c:	e76b      	b.n	32806 <tfp_format+0x7a>
                ch = *(fmt++);
   3292e:	9b01      	ldr	r3, [sp, #4]
   32930:	1c5a      	adds	r2, r3, #1
   32932:	9201      	str	r2, [sp, #4]
   32934:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   32936:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   3293a:	2001      	movs	r0, #1
   3293c:	f360 1105 	bfi	r1, r0, #4, #2
   32940:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   32944:	2c68      	cmp	r4, #104	; 0x68
   32946:	d001      	beq.n	3294c <tfp_format+0x1c0>
            lng = 0;
   32948:	2000      	movs	r0, #0
   3294a:	e75c      	b.n	32806 <tfp_format+0x7a>
                    ch = *(fmt++);
   3294c:	4402      	add	r2, r0
   3294e:	9201      	str	r2, [sp, #4]
   32950:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   32952:	b2cb      	uxtb	r3, r1
   32954:	2202      	movs	r2, #2
   32956:	f362 1305 	bfi	r3, r2, #4, #2
   3295a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   3295e:	2000      	movs	r0, #0
   32960:	e751      	b.n	32806 <tfp_format+0x7a>
                ch = *(fmt++);
   32962:	9b01      	ldr	r3, [sp, #4]
   32964:	1c5a      	adds	r2, r3, #1
   32966:	9201      	str	r2, [sp, #4]
   32968:	781c      	ldrb	r4, [r3, #0]
   3296a:	e74f      	b.n	3280c <tfp_format+0x80>
            switch (ch) {
   3296c:	2c00      	cmp	r4, #0
   3296e:	f000 808a 	beq.w	32a86 <tfp_format+0x2fa>
   32972:	2c25      	cmp	r4, #37	; 0x25
   32974:	f47f af12 	bne.w	3279c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   32978:	4621      	mov	r1, r4
   3297a:	4630      	mov	r0, r6
   3297c:	f7ff fe2f 	bl	325de <putf>
   32980:	4405      	add	r5, r0
                break;
   32982:	e70b      	b.n	3279c <tfp_format+0x10>
                p.base = 10;
   32984:	230a      	movs	r3, #10
   32986:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   3298a:	466a      	mov	r2, sp
   3298c:	2100      	movs	r1, #0
   3298e:	f7ff fecb 	bl	32728 <intarg>
   32992:	aa08      	add	r2, sp, #32
   32994:	f7ff fd5e 	bl	32454 <ui2a>
                written += putchw(putp, &p);
   32998:	a908      	add	r1, sp, #32
   3299a:	4630      	mov	r0, r6
   3299c:	f7ff fe32 	bl	32604 <putchw>
   329a0:	4405      	add	r5, r0
                break;
   329a2:	e6fb      	b.n	3279c <tfp_format+0x10>
                p.base = 10;
   329a4:	230a      	movs	r3, #10
   329a6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   329aa:	466a      	mov	r2, sp
   329ac:	2101      	movs	r1, #1
   329ae:	f7ff febb 	bl	32728 <intarg>
   329b2:	aa08      	add	r2, sp, #32
   329b4:	f7ff fdcc 	bl	32550 <i2a>
                written += putchw(putp, &p);
   329b8:	a908      	add	r1, sp, #32
   329ba:	4630      	mov	r0, r6
   329bc:	f7ff fe22 	bl	32604 <putchw>
   329c0:	4405      	add	r5, r0
                break;
   329c2:	e6eb      	b.n	3279c <tfp_format+0x10>
                p.base = 16;
   329c4:	2310      	movs	r3, #16
   329c6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   329ca:	2c58      	cmp	r4, #88	; 0x58
   329cc:	bf14      	ite	ne
   329ce:	2400      	movne	r4, #0
   329d0:	2401      	moveq	r4, #1
   329d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   329d6:	f364 0382 	bfi	r3, r4, #2, #1
   329da:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   329de:	466a      	mov	r2, sp
   329e0:	2100      	movs	r1, #0
   329e2:	f7ff fea1 	bl	32728 <intarg>
   329e6:	aa08      	add	r2, sp, #32
   329e8:	f7ff fd34 	bl	32454 <ui2a>
                written += putchw(putp, &p);
   329ec:	a908      	add	r1, sp, #32
   329ee:	4630      	mov	r0, r6
   329f0:	f7ff fe08 	bl	32604 <putchw>
   329f4:	4405      	add	r5, r0
                break;
   329f6:	e6d1      	b.n	3279c <tfp_format+0x10>
                p.base = 8;
   329f8:	2308      	movs	r3, #8
   329fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   329fe:	466a      	mov	r2, sp
   32a00:	2100      	movs	r1, #0
   32a02:	f7ff fe91 	bl	32728 <intarg>
   32a06:	aa08      	add	r2, sp, #32
   32a08:	f7ff fd24 	bl	32454 <ui2a>
                written += putchw(putp, &p);
   32a0c:	a908      	add	r1, sp, #32
   32a0e:	4630      	mov	r0, r6
   32a10:	f7ff fdf8 	bl	32604 <putchw>
   32a14:	4405      	add	r5, r0
                break;
   32a16:	e6c1      	b.n	3279c <tfp_format+0x10>
                v = va_arg(va, void *);
   32a18:	9b00      	ldr	r3, [sp, #0]
   32a1a:	1d1a      	adds	r2, r3, #4
   32a1c:	9200      	str	r2, [sp, #0]
   32a1e:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   32a20:	2310      	movs	r3, #16
   32a22:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   32a26:	aa08      	add	r2, sp, #32
   32a28:	2100      	movs	r1, #0
   32a2a:	f7ff fd13 	bl	32454 <ui2a>
                p.width = 2 * sizeof(void*);
   32a2e:	2308      	movs	r3, #8
   32a30:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   32a34:	2301      	movs	r3, #1
   32a36:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   32a3a:	2130      	movs	r1, #48	; 0x30
   32a3c:	4630      	mov	r0, r6
   32a3e:	f7ff fdce 	bl	325de <putf>
   32a42:	4405      	add	r5, r0
                written += putf(putp, 'x');
   32a44:	2178      	movs	r1, #120	; 0x78
   32a46:	4630      	mov	r0, r6
   32a48:	f7ff fdc9 	bl	325de <putf>
   32a4c:	4405      	add	r5, r0
                written += putchw(putp, &p);
   32a4e:	a908      	add	r1, sp, #32
   32a50:	4630      	mov	r0, r6
   32a52:	f7ff fdd7 	bl	32604 <putchw>
   32a56:	4405      	add	r5, r0
                break;
   32a58:	e6a0      	b.n	3279c <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   32a5a:	9b00      	ldr	r3, [sp, #0]
   32a5c:	1d1a      	adds	r2, r3, #4
   32a5e:	9200      	str	r2, [sp, #0]
   32a60:	7819      	ldrb	r1, [r3, #0]
   32a62:	4630      	mov	r0, r6
   32a64:	f7ff fdbb 	bl	325de <putf>
   32a68:	4405      	add	r5, r0
                break;
   32a6a:	e697      	b.n	3279c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   32a6c:	9b00      	ldr	r3, [sp, #0]
   32a6e:	1d1a      	adds	r2, r3, #4
   32a70:	9200      	str	r2, [sp, #0]
   32a72:	681b      	ldr	r3, [r3, #0]
   32a74:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   32a76:	a908      	add	r1, sp, #32
   32a78:	4630      	mov	r0, r6
   32a7a:	f7ff fdc3 	bl	32604 <putchw>
   32a7e:	4405      	add	r5, r0
                p.bf = bf;
   32a80:	ab02      	add	r3, sp, #8
   32a82:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   32a84:	e68a      	b.n	3279c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   32a86:	4628      	mov	r0, r5
   32a88:	b00a      	add	sp, #40	; 0x28
   32a8a:	bd70      	pop	{r4, r5, r6, pc}

00032a8c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   32a8c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   32a8e:	f7ff fe7d 	bl	3278c <tfp_format>
}
   32a92:	bd08      	pop	{r3, pc}

00032a94 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   32a94:	b40e      	push	{r1, r2, r3}
   32a96:	b500      	push	{lr}
   32a98:	b082      	sub	sp, #8
   32a9a:	aa03      	add	r2, sp, #12
   32a9c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   32aa0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   32aa2:	f7ff fff3 	bl	32a8c <vfprintf>
    va_end(va);
    return rv;
}
   32aa6:	b002      	add	sp, #8
   32aa8:	f85d eb04 	ldr.w	lr, [sp], #4
   32aac:	b003      	add	sp, #12
   32aae:	4770      	bx	lr

00032ab0 <printf>:

int printf(const char *fmt, ...)
{
   32ab0:	b40f      	push	{r0, r1, r2, r3}
   32ab2:	b500      	push	{lr}
   32ab4:	b083      	sub	sp, #12
   32ab6:	aa04      	add	r2, sp, #16
   32ab8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   32abc:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   32abe:	4b04      	ldr	r3, [pc, #16]	; (32ad0 <printf+0x20>)
   32ac0:	6818      	ldr	r0, [r3, #0]
   32ac2:	f7ff ffe3 	bl	32a8c <vfprintf>
    va_end(va);
    return rv;
}
   32ac6:	b003      	add	sp, #12
   32ac8:	f85d eb04 	ldr.w	lr, [sp], #4
   32acc:	b004      	add	sp, #16
   32ace:	4770      	bx	lr
   32ad0:	000356a0 	.word	0x000356a0

00032ad4 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   32ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   32ad6:	b085      	sub	sp, #20
   32ad8:	4605      	mov	r5, r0
   32ada:	460c      	mov	r4, r1
   32adc:	4616      	mov	r6, r2
   32ade:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   32ae0:	460a      	mov	r2, r1
   32ae2:	4601      	mov	r1, r0
   32ae4:	4668      	mov	r0, sp
   32ae6:	f000 f843 	bl	32b70 <fmemopen_w>
    tfp_format(f, fmt, va);
   32aea:	463a      	mov	r2, r7
   32aec:	4631      	mov	r1, r6
   32aee:	f7ff fe4d 	bl	3278c <tfp_format>
    if (size > 0) {
   32af2:	b12c      	cbz	r4, 32b00 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   32af4:	9b02      	ldr	r3, [sp, #8]
   32af6:	42a3      	cmp	r3, r4
   32af8:	d205      	bcs.n	32b06 <vsnprintf+0x32>
            *(state.buffer) = '\0';
   32afa:	9b01      	ldr	r3, [sp, #4]
   32afc:	2200      	movs	r2, #0
   32afe:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   32b00:	9802      	ldr	r0, [sp, #8]
   32b02:	b005      	add	sp, #20
   32b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   32b06:	3c01      	subs	r4, #1
   32b08:	2300      	movs	r3, #0
   32b0a:	552b      	strb	r3, [r5, r4]
   32b0c:	e7f8      	b.n	32b00 <vsnprintf+0x2c>

00032b0e <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   32b0e:	b40c      	push	{r2, r3}
   32b10:	b500      	push	{lr}
   32b12:	b083      	sub	sp, #12
   32b14:	ab04      	add	r3, sp, #16
   32b16:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   32b1a:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   32b1c:	f7ff ffda 	bl	32ad4 <vsnprintf>
    va_end(va);
    return rv;
}
   32b20:	b003      	add	sp, #12
   32b22:	f85d eb04 	ldr.w	lr, [sp], #4
   32b26:	b002      	add	sp, #8
   32b28:	4770      	bx	lr
	...

00032b2c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   32b2c:	b508      	push	{r3, lr}
   32b2e:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   32b30:	4601      	mov	r1, r0
   32b32:	4b02      	ldr	r3, [pc, #8]	; (32b3c <vprintf+0x10>)
   32b34:	6818      	ldr	r0, [r3, #0]
   32b36:	f7ff ffa9 	bl	32a8c <vfprintf>
}
   32b3a:	bd08      	pop	{r3, pc}
   32b3c:	000356a0 	.word	0x000356a0

00032b40 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   32b40:	b430      	push	{r4, r5}
   32b42:	4604      	mov	r4, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   32b44:	2000      	movs	r0, #0
    
    while (n--)
   32b46:	e000      	b.n	32b4a <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   32b48:	462a      	mov	r2, r5
    while (n--)
   32b4a:	1e55      	subs	r5, r2, #1
   32b4c:	b16a      	cbz	r2, 32b6a <memfile_write+0x2a>
        f->bytes_written++;
   32b4e:	68a3      	ldr	r3, [r4, #8]
   32b50:	3301      	adds	r3, #1
   32b52:	60a3      	str	r3, [r4, #8]
        if (f->bytes_written <= f->size)
   32b54:	68e2      	ldr	r2, [r4, #12]
   32b56:	4293      	cmp	r3, r2
   32b58:	d8f6      	bhi.n	32b48 <memfile_write+0x8>
            *f->buffer++ = *bp++;
   32b5a:	6863      	ldr	r3, [r4, #4]
   32b5c:	1c5a      	adds	r2, r3, #1
   32b5e:	6062      	str	r2, [r4, #4]
   32b60:	f811 2b01 	ldrb.w	r2, [r1], #1
   32b64:	701a      	strb	r2, [r3, #0]
            i++;
   32b66:	3001      	adds	r0, #1
   32b68:	e7ee      	b.n	32b48 <memfile_write+0x8>
        }
    }
    
    return i;
}
   32b6a:	bc30      	pop	{r4, r5}
   32b6c:	4770      	bx	lr
	...

00032b70 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   32b70:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   32b72:	4c04      	ldr	r4, [pc, #16]	; (32b84 <fmemopen_w+0x14>)
   32b74:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   32b76:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   32b78:	2100      	movs	r1, #0
   32b7a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   32b7c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   32b7e:	bc10      	pop	{r4}
   32b80:	4770      	bx	lr
   32b82:	bf00      	nop
   32b84:	000356a4 	.word	0x000356a4

00032b88 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   32b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32b8c:	4605      	mov	r5, r0
   32b8e:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   32b90:	e001      	b.n	32b96 <strntoumax+0xe>
		nptr++;
   32b92:	3501      	adds	r5, #1
		n--;
   32b94:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   32b96:	b143      	cbz	r3, 32baa <strntoumax+0x22>
   32b98:	7829      	ldrb	r1, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   32b9a:	2920      	cmp	r1, #32
   32b9c:	d0f9      	beq.n	32b92 <strntoumax+0xa>
   32b9e:	290a      	cmp	r1, #10
   32ba0:	d0f7      	beq.n	32b92 <strntoumax+0xa>
   32ba2:	2909      	cmp	r1, #9
   32ba4:	d0f5      	beq.n	32b92 <strntoumax+0xa>
   32ba6:	290d      	cmp	r1, #13
   32ba8:	d0f3      	beq.n	32b92 <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   32baa:	b1a3      	cbz	r3, 32bd6 <strntoumax+0x4e>
		char c = *nptr;
   32bac:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   32bb0:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   32bb4:	d005      	beq.n	32bc2 <strntoumax+0x3a>
   32bb6:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   32bba:	d002      	beq.n	32bc2 <strntoumax+0x3a>
	int minus = 0;
   32bbc:	f04f 0e00 	mov.w	lr, #0
   32bc0:	e00b      	b.n	32bda <strntoumax+0x52>
			minus = (c == '-');
   32bc2:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   32bc6:	bf14      	ite	ne
   32bc8:	f04f 0e00 	movne.w	lr, #0
   32bcc:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   32bd0:	3501      	adds	r5, #1
			n--;
   32bd2:	3b01      	subs	r3, #1
   32bd4:	e001      	b.n	32bda <strntoumax+0x52>
	int minus = 0;
   32bd6:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   32bda:	b9ba      	cbnz	r2, 32c0c <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   32bdc:	2b01      	cmp	r3, #1
   32bde:	d902      	bls.n	32be6 <strntoumax+0x5e>
   32be0:	782a      	ldrb	r2, [r5, #0]
   32be2:	2a30      	cmp	r2, #48	; 0x30
   32be4:	d005      	beq.n	32bf2 <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   32be6:	b32b      	cbz	r3, 32c34 <strntoumax+0xac>
   32be8:	782a      	ldrb	r2, [r5, #0]
   32bea:	2a30      	cmp	r2, #48	; 0x30
   32bec:	d00a      	beq.n	32c04 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   32bee:	220a      	movs	r2, #10
   32bf0:	e00e      	b.n	32c10 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   32bf2:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   32bf4:	2a78      	cmp	r2, #120	; 0x78
   32bf6:	d001      	beq.n	32bfc <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   32bf8:	2a58      	cmp	r2, #88	; 0x58
   32bfa:	d1f4      	bne.n	32be6 <strntoumax+0x5e>
			n -= 2;
   32bfc:	3b02      	subs	r3, #2
			nptr += 2;
   32bfe:	3502      	adds	r5, #2
			base = 16;
   32c00:	2210      	movs	r2, #16
   32c02:	e005      	b.n	32c10 <strntoumax+0x88>
			n--;
   32c04:	3b01      	subs	r3, #1
			nptr++;
   32c06:	3501      	adds	r5, #1
			base = 8;
   32c08:	2208      	movs	r2, #8
   32c0a:	e001      	b.n	32c10 <strntoumax+0x88>
		}
	} else if (base == 16) {
   32c0c:	2a10      	cmp	r2, #16
   32c0e:	d004      	beq.n	32c1a <strntoumax+0x92>
			base = 16;
   32c10:	f04f 0800 	mov.w	r8, #0
   32c14:	f04f 0900 	mov.w	r9, #0
   32c18:	e026      	b.n	32c68 <strntoumax+0xe0>
		if (n >= 2 && nptr[0] == '0' &&
   32c1a:	2b01      	cmp	r3, #1
   32c1c:	d9f8      	bls.n	32c10 <strntoumax+0x88>
   32c1e:	7829      	ldrb	r1, [r5, #0]
   32c20:	2930      	cmp	r1, #48	; 0x30
   32c22:	d1f5      	bne.n	32c10 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   32c24:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   32c26:	2978      	cmp	r1, #120	; 0x78
   32c28:	d001      	beq.n	32c2e <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   32c2a:	2958      	cmp	r1, #88	; 0x58
   32c2c:	d1f0      	bne.n	32c10 <strntoumax+0x88>
			n -= 2;
   32c2e:	3b02      	subs	r3, #2
			nptr += 2;
   32c30:	3502      	adds	r5, #2
   32c32:	e7ed      	b.n	32c10 <strntoumax+0x88>
			base = 10;
   32c34:	220a      	movs	r2, #10
   32c36:	e7eb      	b.n	32c10 <strntoumax+0x88>
		return ch - '0';
   32c38:	4634      	mov	r4, r6
   32c3a:	e002      	b.n	32c42 <strntoumax+0xba>
		return ch - 'A' + 10;
   32c3c:	3c37      	subs	r4, #55	; 0x37
   32c3e:	e000      	b.n	32c42 <strntoumax+0xba>
		return ch - 'a' + 10;
   32c40:	3c57      	subs	r4, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   32c42:	2c00      	cmp	r4, #0
   32c44:	db1e      	blt.n	32c84 <strntoumax+0xfc>
   32c46:	42a2      	cmp	r2, r4
   32c48:	dd1c      	ble.n	32c84 <strntoumax+0xfc>
		v = v * base + d;
   32c4a:	fb02 f109 	mul.w	r1, r2, r9
   32c4e:	17d7      	asrs	r7, r2, #31
   32c50:	fb08 1607 	mla	r6, r8, r7, r1
   32c54:	fba2 0108 	umull	r0, r1, r2, r8
   32c58:	4431      	add	r1, r6
   32c5a:	1900      	adds	r0, r0, r4
   32c5c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   32c60:	4680      	mov	r8, r0
   32c62:	4689      	mov	r9, r1
		n--;
   32c64:	3b01      	subs	r3, #1
		nptr++;
   32c66:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   32c68:	b163      	cbz	r3, 32c84 <strntoumax+0xfc>
   32c6a:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   32c6c:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   32c70:	2e09      	cmp	r6, #9
   32c72:	d9e1      	bls.n	32c38 <strntoumax+0xb0>
	} else if (ch >= 'A' && ch <= 'Z') {
   32c74:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   32c78:	2e19      	cmp	r6, #25
   32c7a:	d9df      	bls.n	32c3c <strntoumax+0xb4>
	} else if (ch >= 'a' && ch <= 'z') {
   32c7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   32c80:	2e19      	cmp	r6, #25
   32c82:	d9dd      	bls.n	32c40 <strntoumax+0xb8>
	}

	if (endptr)
   32c84:	f1bc 0f00 	cmp.w	ip, #0
   32c88:	d001      	beq.n	32c8e <strntoumax+0x106>
		*endptr = (char *)nptr;
   32c8a:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   32c8e:	f1be 0f00 	cmp.w	lr, #0
   32c92:	d003      	beq.n	32c9c <strntoumax+0x114>
   32c94:	f1d8 0800 	rsbs	r8, r8, #0
   32c98:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   32c9c:	4640      	mov	r0, r8
   32c9e:	4649      	mov	r1, r9
   32ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00032ca4 <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   32ca4:	7803      	ldrb	r3, [r0, #0]
   32ca6:	b193      	cbz	r3, 32cce <strpbrk+0x2a>
{
   32ca8:	b410      	push	{r4}
  const char *c = s2;
   32caa:	460a      	mov	r2, r1
   32cac:	e001      	b.n	32cb2 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   32cae:	b953      	cbnz	r3, 32cc6 <strpbrk+0x22>
	break;
      s1++;
   32cb0:	3001      	adds	r0, #1
  while (*s1)
   32cb2:	7804      	ldrb	r4, [r0, #0]
   32cb4:	b13c      	cbz	r4, 32cc6 <strpbrk+0x22>
      for (c = s2; *c; c++)
   32cb6:	460a      	mov	r2, r1
   32cb8:	7813      	ldrb	r3, [r2, #0]
   32cba:	2b00      	cmp	r3, #0
   32cbc:	d0f7      	beq.n	32cae <strpbrk+0xa>
	  if (*s1 == *c)
   32cbe:	42a3      	cmp	r3, r4
   32cc0:	d0f5      	beq.n	32cae <strpbrk+0xa>
      for (c = s2; *c; c++)
   32cc2:	3201      	adds	r2, #1
   32cc4:	e7f8      	b.n	32cb8 <strpbrk+0x14>
    }

  if (*c == '\0')
   32cc6:	7813      	ldrb	r3, [r2, #0]
   32cc8:	b11b      	cbz	r3, 32cd2 <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   32cca:	bc10      	pop	{r4}
   32ccc:	4770      	bx	lr
    return (char *) NULL;
   32cce:	2000      	movs	r0, #0
}
   32cd0:	4770      	bx	lr
    s1 = NULL;
   32cd2:	2000      	movs	r0, #0
   32cd4:	e7f9      	b.n	32cca <strpbrk+0x26>

00032cd6 <log_fcb_registered>:
    /* Initialize watermark to designated unknown value*/
    fl->fl_watermark_off = 0xffffffff;
#endif
#endif
    return 0;
}
   32cd6:	2000      	movs	r0, #0
   32cd8:	4770      	bx	lr

00032cda <log_fcb_flush>:
{
   32cda:	b508      	push	{r3, lr}
    return fcb_clear(fcb);
   32cdc:	6880      	ldr	r0, [r0, #8]
   32cde:	f7fc ff86 	bl	2fbee <fcb_clear>
}
   32ce2:	bd08      	pop	{r3, pc}

00032ce4 <fcb_get_fa_hdr>:
{
   32ce4:	b570      	push	{r4, r5, r6, lr}
   32ce6:	460d      	mov	r5, r1
   32ce8:	4614      	mov	r4, r2
   32cea:	461e      	mov	r6, r3
    rc = fcb_getnext(fcb, fcb_entry);
   32cec:	4611      	mov	r1, r2
   32cee:	f7fd f95d 	bl	2ffac <fcb_getnext>
    if (rc == 0) {
   32cf2:	b100      	cbz	r0, 32cf6 <fcb_get_fa_hdr+0x12>
}
   32cf4:	bd70      	pop	{r4, r5, r6, pc}
        return log_read_hdr(log, fcb_entry, hdr);
   32cf6:	4632      	mov	r2, r6
   32cf8:	4621      	mov	r1, r4
   32cfa:	4628      	mov	r0, r5
   32cfc:	f7e6 faaa 	bl	19254 <log_read_hdr>
   32d00:	e7f8      	b.n	32cf4 <fcb_get_fa_hdr+0x10>

00032d02 <fcb_walk_back_find_start>:
{
   32d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32d06:	b08a      	sub	sp, #40	; 0x28
   32d08:	4606      	mov	r6, r0
   32d0a:	4688      	mov	r8, r1
   32d0c:	4617      	mov	r7, r2
   32d0e:	4699      	mov	r9, r3
    struct fcb_entry iter_entry = {0};
   32d10:	2300      	movs	r3, #0
   32d12:	9302      	str	r3, [sp, #8]
   32d14:	9303      	str	r3, [sp, #12]
   32d16:	9304      	str	r3, [sp, #16]
    iter_entry.fe_area = fcb->f_oldest;
   32d18:	6983      	ldr	r3, [r0, #24]
   32d1a:	9301      	str	r3, [sp, #4]
    rc = fcb_get_fa_hdr(fcb, log, &iter_entry, &hdr);
   32d1c:	ab05      	add	r3, sp, #20
   32d1e:	aa01      	add	r2, sp, #4
   32d20:	f7ff ffe0 	bl	32ce4 <fcb_get_fa_hdr>
    if (rc != 0) {
   32d24:	4682      	mov	sl, r0
   32d26:	bb58      	cbnz	r0, 32d80 <fcb_walk_back_find_start+0x7e>
    if (hdr.ue_index >= log_offset->lo_index) {
   32d28:	68bb      	ldr	r3, [r7, #8]
   32d2a:	9a07      	ldr	r2, [sp, #28]
   32d2c:	429a      	cmp	r2, r3
   32d2e:	d21d      	bcs.n	32d6c <fcb_walk_back_find_start+0x6a>
    fap = fcb->f_active.fe_area;
   32d30:	69f4      	ldr	r4, [r6, #28]
    for (hdr.ue_index = log_offset->lo_index; hdr.ue_index >= log_offset->lo_index;) {
   32d32:	9307      	str	r3, [sp, #28]
   32d34:	e005      	b.n	32d42 <fcb_walk_back_find_start+0x40>
            fap = &(fcb->f_sectors[fcb->f_sector_cnt-1]);
   32d36:	7974      	ldrb	r4, [r6, #5]
   32d38:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   32d3c:	00a4      	lsls	r4, r4, #2
   32d3e:	3c0c      	subs	r4, #12
   32d40:	441c      	add	r4, r3
    for (hdr.ue_index = log_offset->lo_index; hdr.ue_index >= log_offset->lo_index;) {
   32d42:	68bb      	ldr	r3, [r7, #8]
   32d44:	9a07      	ldr	r2, [sp, #28]
   32d46:	429a      	cmp	r2, r3
   32d48:	d310      	bcc.n	32d6c <fcb_walk_back_find_start+0x6a>
        memset(&iter_entry, 0, sizeof(iter_entry));
   32d4a:	2500      	movs	r5, #0
   32d4c:	9502      	str	r5, [sp, #8]
   32d4e:	9503      	str	r5, [sp, #12]
   32d50:	9504      	str	r5, [sp, #16]
        iter_entry.fe_area = fap;
   32d52:	9401      	str	r4, [sp, #4]
        rc = fcb_get_fa_hdr(fcb, log, &iter_entry, &hdr);
   32d54:	ab05      	add	r3, sp, #20
   32d56:	aa01      	add	r2, sp, #4
   32d58:	4641      	mov	r1, r8
   32d5a:	4630      	mov	r0, r6
   32d5c:	f7ff ffc2 	bl	32ce4 <fcb_get_fa_hdr>
        if (rc != 0) {
   32d60:	b990      	cbnz	r0, 32d88 <fcb_walk_back_find_start+0x86>
        if (fap == &fcb->f_sectors[0]) {
   32d62:	68b3      	ldr	r3, [r6, #8]
   32d64:	42a3      	cmp	r3, r4
   32d66:	d0e6      	beq.n	32d36 <fcb_walk_back_find_start+0x34>
            fap--;
   32d68:	3c0c      	subs	r4, #12
   32d6a:	e7ea      	b.n	32d42 <fcb_walk_back_find_start+0x40>
    memcpy(fcb_entry, &iter_entry, sizeof(struct fcb_entry));
   32d6c:	ac01      	add	r4, sp, #4
   32d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   32d70:	f8c9 0000 	str.w	r0, [r9]
   32d74:	f8c9 1004 	str.w	r1, [r9, #4]
   32d78:	f8c9 2008 	str.w	r2, [r9, #8]
   32d7c:	f8c9 300c 	str.w	r3, [r9, #12]
}
   32d80:	4650      	mov	r0, sl
   32d82:	b00a      	add	sp, #40	; 0x28
   32d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return rc;
   32d88:	4682      	mov	sl, r0
   32d8a:	e7f9      	b.n	32d80 <fcb_walk_back_find_start+0x7e>

00032d8c <log_fcb_find_gte>:
{
   32d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32d90:	b087      	sub	sp, #28
   32d92:	4606      	mov	r6, r0
   32d94:	460f      	mov	r7, r1
   32d96:	4614      	mov	r4, r2
    fcb_log = log->l_arg;
   32d98:	f8d0 9008 	ldr.w	r9, [r0, #8]
    memset(out_entry, 0, sizeof *out_entry);
   32d9c:	2300      	movs	r3, #0
   32d9e:	6013      	str	r3, [r2, #0]
   32da0:	6053      	str	r3, [r2, #4]
   32da2:	6093      	str	r3, [r2, #8]
   32da4:	60d3      	str	r3, [r2, #12]
    rc = fcb_getnext(fcb, out_entry);
   32da6:	4611      	mov	r1, r2
   32da8:	4648      	mov	r0, r9
   32daa:	f7fd f8ff 	bl	2ffac <fcb_getnext>
    if (rc == FCB_ERR_NOVAR) {
   32dae:	f110 0f03 	cmn.w	r0, #3
   32db2:	d03d      	beq.n	32e30 <log_fcb_find_gte+0xa4>
   32db4:	46c8      	mov	r8, r9
   32db6:	4605      	mov	r5, r0
    } else if (rc != 0) {
   32db8:	2800      	cmp	r0, #0
   32dba:	d13c      	bne.n	32e36 <log_fcb_find_gte+0xaa>
    if (log_offset->lo_ts < 0) {
   32dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
   32dc0:	2a00      	cmp	r2, #0
   32dc2:	f173 0300 	sbcs.w	r3, r3, #0
   32dc6:	db20      	blt.n	32e0a <log_fcb_find_gte+0x7e>
    rc = log_read_hdr(log, &fcb->f_active, &hdr);
   32dc8:	aa01      	add	r2, sp, #4
   32dca:	f109 011c 	add.w	r1, r9, #28
   32dce:	4630      	mov	r0, r6
   32dd0:	f7e6 fa40 	bl	19254 <log_read_hdr>
    if (rc != 0) {
   32dd4:	4605      	mov	r5, r0
   32dd6:	b9e8      	cbnz	r0, 32e14 <log_fcb_find_gte+0x88>
    if (log_offset->lo_index > hdr.ue_index) {
   32dd8:	68bb      	ldr	r3, [r7, #8]
   32dda:	9a03      	ldr	r2, [sp, #12]
   32ddc:	4293      	cmp	r3, r2
   32dde:	d82d      	bhi.n	32e3c <log_fcb_find_gte+0xb0>
    if ((bmark_found == false) && (log_offset->lo_index != 0)) {
   32de0:	b9e3      	cbnz	r3, 32e1c <log_fcb_find_gte+0x90>
        rc = log_read_hdr(log, out_entry, &hdr);
   32de2:	aa01      	add	r2, sp, #4
   32de4:	4621      	mov	r1, r4
   32de6:	4630      	mov	r0, r6
   32de8:	f7e6 fa34 	bl	19254 <log_read_hdr>
        if (rc != 0) {
   32dec:	4605      	mov	r5, r0
   32dee:	b988      	cbnz	r0, 32e14 <log_fcb_find_gte+0x88>
        if (hdr.ue_index >= log_offset->lo_index) {
   32df0:	68bb      	ldr	r3, [r7, #8]
   32df2:	9a03      	ldr	r2, [sp, #12]
   32df4:	429a      	cmp	r2, r3
   32df6:	d20d      	bcs.n	32e14 <log_fcb_find_gte+0x88>
    } while (fcb_getnext(fcb, out_entry) == 0);
   32df8:	4621      	mov	r1, r4
   32dfa:	4640      	mov	r0, r8
   32dfc:	f7fd f8d6 	bl	2ffac <fcb_getnext>
   32e00:	2800      	cmp	r0, #0
   32e02:	d0ee      	beq.n	32de2 <log_fcb_find_gte+0x56>
    return SYS_ENOENT;
   32e04:	f06f 0503 	mvn.w	r5, #3
   32e08:	e004      	b.n	32e14 <log_fcb_find_gte+0x88>
        *out_entry = fcb->f_active;
   32e0a:	f109 001c 	add.w	r0, r9, #28
   32e0e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   32e10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   32e14:	4628      	mov	r0, r5
   32e16:	b007      	add	sp, #28
   32e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = fcb_walk_back_find_start(fcb, log, log_offset, out_entry);
   32e1c:	4623      	mov	r3, r4
   32e1e:	463a      	mov	r2, r7
   32e20:	4631      	mov	r1, r6
   32e22:	4648      	mov	r0, r9
   32e24:	f7ff ff6d 	bl	32d02 <fcb_walk_back_find_start>
        if (rc != 0) {
   32e28:	4605      	mov	r5, r0
   32e2a:	2800      	cmp	r0, #0
   32e2c:	d0d9      	beq.n	32de2 <log_fcb_find_gte+0x56>
   32e2e:	e7f1      	b.n	32e14 <log_fcb_find_gte+0x88>
        return SYS_ENOENT;
   32e30:	f06f 0503 	mvn.w	r5, #3
   32e34:	e7ee      	b.n	32e14 <log_fcb_find_gte+0x88>
        return SYS_EUNKNOWN;
   32e36:	f06f 050c 	mvn.w	r5, #12
   32e3a:	e7eb      	b.n	32e14 <log_fcb_find_gte+0x88>
        return SYS_ENOENT;
   32e3c:	f06f 0503 	mvn.w	r5, #3
   32e40:	e7e8      	b.n	32e14 <log_fcb_find_gte+0x88>

00032e42 <log_fcb_walk_impl>:
{
   32e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32e46:	b085      	sub	sp, #20
   32e48:	4604      	mov	r4, r0
   32e4a:	460f      	mov	r7, r1
   32e4c:	4615      	mov	r5, r2
   32e4e:	461e      	mov	r6, r3
    fcb_log = log->l_arg;
   32e50:	f8d0 9008 	ldr.w	r9, [r0, #8]
    rc = log_fcb_find_gte(log, log_offset, &loc);
   32e54:	466a      	mov	r2, sp
   32e56:	4629      	mov	r1, r5
   32e58:	f7ff ff98 	bl	32d8c <log_fcb_find_gte>
    switch (rc) {
   32e5c:	f110 0f04 	cmn.w	r0, #4
   32e60:	d01d      	beq.n	32e9e <log_fcb_walk_impl+0x5c>
   32e62:	4680      	mov	r8, r0
   32e64:	b9e8      	cbnz	r0, 32ea2 <log_fcb_walk_impl+0x60>
    fap = loc.fe_area;
   32e66:	f8dd b000 	ldr.w	fp, [sp]
   32e6a:	e00c      	b.n	32e86 <log_fcb_walk_impl+0x44>
        rc = walk_func(log, log_offset, &loc, loc.fe_data_len);
   32e6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   32e70:	466a      	mov	r2, sp
   32e72:	4629      	mov	r1, r5
   32e74:	4620      	mov	r0, r4
   32e76:	47b8      	blx	r7
        if (rc != 0) {
   32e78:	4682      	mov	sl, r0
   32e7a:	b950      	cbnz	r0, 32e92 <log_fcb_walk_impl+0x50>
    } while (fcb_getnext(fcb, &loc) == 0);
   32e7c:	4669      	mov	r1, sp
   32e7e:	4648      	mov	r0, r9
   32e80:	f7fd f894 	bl	2ffac <fcb_getnext>
   32e84:	b948      	cbnz	r0, 32e9a <log_fcb_walk_impl+0x58>
        if (area) {
   32e86:	2e00      	cmp	r6, #0
   32e88:	d0f0      	beq.n	32e6c <log_fcb_walk_impl+0x2a>
            if (fap != loc.fe_area) {
   32e8a:	9b00      	ldr	r3, [sp, #0]
   32e8c:	455b      	cmp	r3, fp
   32e8e:	d0ed      	beq.n	32e6c <log_fcb_walk_impl+0x2a>
   32e90:	e007      	b.n	32ea2 <log_fcb_walk_impl+0x60>
            if (rc < 0) {
   32e92:	2800      	cmp	r0, #0
   32e94:	da05      	bge.n	32ea2 <log_fcb_walk_impl+0x60>
                return rc;
   32e96:	4680      	mov	r8, r0
   32e98:	e003      	b.n	32ea2 <log_fcb_walk_impl+0x60>
    return 0;
   32e9a:	46d0      	mov	r8, sl
   32e9c:	e001      	b.n	32ea2 <log_fcb_walk_impl+0x60>
    switch (rc) {
   32e9e:	f04f 0800 	mov.w	r8, #0
}
   32ea2:	4640      	mov	r0, r8
   32ea4:	b005      	add	sp, #20
   32ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032eaa <log_fcb_walk_area>:
{
   32eaa:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, true);
   32eac:	2301      	movs	r3, #1
   32eae:	f7ff ffc8 	bl	32e42 <log_fcb_walk_impl>
}
   32eb2:	bd08      	pop	{r3, pc}

00032eb4 <log_fcb_walk>:
{
   32eb4:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, false);
   32eb6:	2300      	movs	r3, #0
   32eb8:	f7ff ffc3 	bl	32e42 <log_fcb_walk_impl>
}
   32ebc:	bd08      	pop	{r3, pc}

00032ebe <log_fcb_write_mbuf>:
{
   32ebe:	b538      	push	{r3, r4, r5, lr}
   32ec0:	4605      	mov	r5, r0
   32ec2:	460c      	mov	r4, r1
    while (om) {
   32ec4:	b164      	cbz	r4, 32ee0 <log_fcb_write_mbuf+0x22>
        rc = flash_area_write(loc->fe_area, loc->fe_data_off, om->om_data,
   32ec6:	88e3      	ldrh	r3, [r4, #6]
   32ec8:	6822      	ldr	r2, [r4, #0]
   32eca:	68a9      	ldr	r1, [r5, #8]
   32ecc:	6828      	ldr	r0, [r5, #0]
   32ece:	f7e5 fe2c 	bl	18b2a <flash_area_write>
        if (rc != 0) {
   32ed2:	b938      	cbnz	r0, 32ee4 <log_fcb_write_mbuf+0x26>
        loc->fe_data_off += om->om_len;
   32ed4:	88e2      	ldrh	r2, [r4, #6]
   32ed6:	68ab      	ldr	r3, [r5, #8]
   32ed8:	4413      	add	r3, r2
   32eda:	60ab      	str	r3, [r5, #8]
        om = SLIST_NEXT(om, om_next);
   32edc:	68e4      	ldr	r4, [r4, #12]
   32ede:	e7f1      	b.n	32ec4 <log_fcb_write_mbuf+0x6>
    return 0;
   32ee0:	2000      	movs	r0, #0
}
   32ee2:	bd38      	pop	{r3, r4, r5, pc}
            return SYS_EIO;
   32ee4:	f06f 0004 	mvn.w	r0, #4
   32ee8:	e7fb      	b.n	32ee2 <log_fcb_write_mbuf+0x24>

00032eea <log_fcb_hdr_body_bytes>:
{
   32eea:	b508      	push	{r3, lr}
   32eec:	4603      	mov	r3, r0
    assert((align & (align - 1)) == 0);
   32eee:	3801      	subs	r0, #1
   32ef0:	4018      	ands	r0, r3
   32ef2:	d105      	bne.n	32f00 <log_fcb_hdr_body_bytes+0x16>
    mod = hdr_len & (align - 1);
   32ef4:	1e5a      	subs	r2, r3, #1
   32ef6:	b252      	sxtb	r2, r2
    if (mod == 0) {
   32ef8:	400a      	ands	r2, r1
   32efa:	d000      	beq.n	32efe <log_fcb_hdr_body_bytes+0x14>
    return align - mod;
   32efc:	1a98      	subs	r0, r3, r2
}
   32efe:	bd08      	pop	{r3, pc}
    assert((align & (align - 1)) == 0);
   32f00:	f7e1 fba8 	bl	14654 <hal_debugger_connected>
   32f04:	b100      	cbz	r0, 32f08 <log_fcb_hdr_body_bytes+0x1e>
   32f06:	be01      	bkpt	0x0001
   32f08:	2300      	movs	r3, #0
   32f0a:	461a      	mov	r2, r3
   32f0c:	4619      	mov	r1, r3
   32f0e:	4618      	mov	r0, r3
   32f10:	f7e1 ff42 	bl	14d98 <__assert_func>

00032f14 <log_fcb_read>:
{
   32f14:	b538      	push	{r3, r4, r5, lr}
   32f16:	460d      	mov	r5, r1
   32f18:	4619      	mov	r1, r3
   32f1a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    if (offset + len > loc->fe_data_len) {
   32f1e:	4423      	add	r3, r4
   32f20:	89a8      	ldrh	r0, [r5, #12]
   32f22:	4283      	cmp	r3, r0
   32f24:	dd01      	ble.n	32f2a <log_fcb_read+0x16>
        len = loc->fe_data_len - offset;
   32f26:	1a40      	subs	r0, r0, r1
   32f28:	b284      	uxth	r4, r0
    rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, buf, len);
   32f2a:	68a8      	ldr	r0, [r5, #8]
   32f2c:	4623      	mov	r3, r4
   32f2e:	4401      	add	r1, r0
   32f30:	6828      	ldr	r0, [r5, #0]
   32f32:	f7e5 fde7 	bl	18b04 <flash_area_read>
    if (rc == 0) {
   32f36:	b908      	cbnz	r0, 32f3c <log_fcb_read+0x28>
        return len;
   32f38:	4620      	mov	r0, r4
}
   32f3a:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   32f3c:	2000      	movs	r0, #0
   32f3e:	e7fc      	b.n	32f3a <log_fcb_read+0x26>

00032f40 <log_fcb_copy_entry>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy_entry(struct log *log, struct fcb_entry *entry,
                   struct fcb *dst_fcb)
{
   32f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   32f42:	b0cd      	sub	sp, #308	; 0x134
   32f44:	4604      	mov	r4, r0
   32f46:	460e      	mov	r6, r1
   32f48:	4615      	mov	r5, r2
    uint16_t hdr_len;
    int dlen;
    int rc;
    struct fcb *fcb_tmp;

    rc = log_fcb_read(log, entry, &ueh, 0, LOG_BASE_ENTRY_HDR_SIZE);
   32f4a:	230f      	movs	r3, #15
   32f4c:	9300      	str	r3, [sp, #0]
   32f4e:	2300      	movs	r3, #0
   32f50:	aa47      	add	r2, sp, #284	; 0x11c
   32f52:	f7ff ffdf 	bl	32f14 <log_fcb_read>

    if (rc != LOG_BASE_ENTRY_HDR_SIZE) {
   32f56:	280f      	cmp	r0, #15
   32f58:	d001      	beq.n	32f5e <log_fcb_copy_entry+0x1e>
        goto err;
    }

err:
    return (rc);
}
   32f5a:	b04d      	add	sp, #308	; 0x134
   32f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr_len = log_hdr_len(&ueh);
   32f5e:	a847      	add	r0, sp, #284	; 0x11c
   32f60:	f7e6 f89a 	bl	19098 <log_hdr_len>
    dlen = min(entry->fe_data_len, MYNEWT_VAL(LOG_FCB_COPY_MAX_ENTRY_LEN) +
   32f64:	f100 03ff 	add.w	r3, r0, #255	; 0xff
   32f68:	89b7      	ldrh	r7, [r6, #12]
   32f6a:	42bb      	cmp	r3, r7
   32f6c:	da01      	bge.n	32f72 <log_fcb_copy_entry+0x32>
   32f6e:	f500 7780 	add.w	r7, r0, #256	; 0x100
    rc = log_fcb_read(log, entry, data, 0, dlen);
   32f72:	b2bb      	uxth	r3, r7
   32f74:	9300      	str	r3, [sp, #0]
   32f76:	2300      	movs	r3, #0
   32f78:	aa02      	add	r2, sp, #8
   32f7a:	4631      	mov	r1, r6
   32f7c:	4620      	mov	r0, r4
   32f7e:	f7ff ffc9 	bl	32f14 <log_fcb_read>
    if (rc < 0) {
   32f82:	2800      	cmp	r0, #0
   32f84:	dbe9      	blt.n	32f5a <log_fcb_copy_entry+0x1a>
    fcb_tmp = &((struct fcb_log *)log->l_arg)->fl_fcb;
   32f86:	68a6      	ldr	r6, [r4, #8]
    log->l_arg = dst_fcb;
   32f88:	60a5      	str	r5, [r4, #8]
    rc = log_fcb_append(log, data, dlen);
   32f8a:	463a      	mov	r2, r7
   32f8c:	a902      	add	r1, sp, #8
   32f8e:	4620      	mov	r0, r4
   32f90:	f000 f97f 	bl	33292 <log_fcb_append>
    log->l_arg = fcb_tmp;
   32f94:	60a6      	str	r6, [r4, #8]
    return (rc);
   32f96:	e7e0      	b.n	32f5a <log_fcb_copy_entry+0x1a>

00032f98 <log_fcb_copy>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy(struct log *log, struct fcb *src_fcb, struct fcb *dst_fcb,
             uint32_t offset)
{
   32f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   32f9c:	b085      	sub	sp, #20
   32f9e:	4681      	mov	r9, r0
   32fa0:	460d      	mov	r5, r1
   32fa2:	4690      	mov	r8, r2
   32fa4:	461e      	mov	r6, r3
    struct fcb_entry entry;
    int rc;

    rc = 0;
    memset(&entry, 0, sizeof(entry));
   32fa6:	2700      	movs	r7, #0
   32fa8:	9700      	str	r7, [sp, #0]
   32faa:	9701      	str	r7, [sp, #4]
   32fac:	9702      	str	r7, [sp, #8]
   32fae:	9703      	str	r7, [sp, #12]
    while (!fcb_getnext(src_fcb, &entry)) {
   32fb0:	4669      	mov	r1, sp
   32fb2:	4628      	mov	r0, r5
   32fb4:	f7fc fffa 	bl	2ffac <fcb_getnext>
   32fb8:	b950      	cbnz	r0, 32fd0 <log_fcb_copy+0x38>
        if (entry.fe_elem_off < offset) {
   32fba:	9c01      	ldr	r4, [sp, #4]
   32fbc:	42b4      	cmp	r4, r6
   32fbe:	d3f7      	bcc.n	32fb0 <log_fcb_copy+0x18>
            continue;
        }
        rc = log_fcb_copy_entry(log, &entry, dst_fcb);
   32fc0:	4642      	mov	r2, r8
   32fc2:	4669      	mov	r1, sp
   32fc4:	4648      	mov	r0, r9
   32fc6:	f7ff ffbb 	bl	32f40 <log_fcb_copy_entry>
        if (rc) {
   32fca:	4607      	mov	r7, r0
   32fcc:	2800      	cmp	r0, #0
   32fce:	d0ef      	beq.n	32fb0 <log_fcb_copy+0x18>
            break;
        }
    }

    return (rc);
}
   32fd0:	4638      	mov	r0, r7
   32fd2:	b005      	add	sp, #20
   32fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00032fd8 <log_fcb_rtr_erase>:
    struct fcb_entry entry;
    int rc;
    struct flash_area sector;

    rc = 0;
    if (!log) {
   32fd8:	2800      	cmp	r0, #0
   32fda:	d045      	beq.n	33068 <log_fcb_rtr_erase+0x90>
{
   32fdc:	b530      	push	{r4, r5, lr}
   32fde:	b095      	sub	sp, #84	; 0x54
   32fe0:	4604      	mov	r4, r0
        rc = -1;
        goto err;
    }

    fcb_log = log->l_arg;
   32fe2:	6885      	ldr	r5, [r0, #8]
    fcb = &fcb_log->fl_fcb;

    memset(&fcb_scratch, 0, sizeof(fcb_scratch));
   32fe4:	2230      	movs	r2, #48	; 0x30
   32fe6:	2100      	movs	r1, #0
   32fe8:	a808      	add	r0, sp, #32
   32fea:	f7e3 fd84 	bl	16af6 <memset>

    if (flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &ptr)) {
   32fee:	a907      	add	r1, sp, #28
   32ff0:	2003      	movs	r0, #3
   32ff2:	f7e5 fd2f 	bl	18a54 <flash_area_open>
   32ff6:	b110      	cbz	r0, 32ffe <log_fcb_rtr_erase+0x26>
    rc = 0;
   32ff8:	2000      	movs	r0, #0
    /* Copy back from scratch */
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);

err:
    return (rc);
}
   32ffa:	b015      	add	sp, #84	; 0x54
   32ffc:	bd30      	pop	{r4, r5, pc}
    sector = *ptr;
   32ffe:	9a07      	ldr	r2, [sp, #28]
   33000:	466b      	mov	r3, sp
   33002:	ca07      	ldmia	r2, {r0, r1, r2}
   33004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    fcb_scratch.f_sectors = &sector;
   33008:	930a      	str	r3, [sp, #40]	; 0x28
    fcb_scratch.f_sector_cnt = 1;
   3300a:	2201      	movs	r2, #1
   3300c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    fcb_scratch.f_magic = 0x7EADBADF;
   33010:	4a17      	ldr	r2, [pc, #92]	; (33070 <log_fcb_rtr_erase+0x98>)
   33012:	9208      	str	r2, [sp, #32]
    fcb_scratch.f_version = g_log_info.li_version;
   33014:	4a17      	ldr	r2, [pc, #92]	; (33074 <log_fcb_rtr_erase+0x9c>)
   33016:	7912      	ldrb	r2, [r2, #4]
   33018:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    flash_area_erase(&sector, 0, sector.fa_size);
   3301c:	9a02      	ldr	r2, [sp, #8]
   3301e:	2100      	movs	r1, #0
   33020:	4618      	mov	r0, r3
   33022:	f7e5 fd95 	bl	18b50 <flash_area_erase>
    rc = fcb_init(&fcb_scratch);
   33026:	a808      	add	r0, sp, #32
   33028:	f7fc fd22 	bl	2fa70 <fcb_init>
    if (rc) {
   3302c:	2800      	cmp	r0, #0
   3302e:	d1e4      	bne.n	32ffa <log_fcb_rtr_erase+0x22>
    rc = fcb_offset_last_n(fcb, fcb_log->fl_entries, &entry);
   33030:	aa03      	add	r2, sp, #12
   33032:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   33036:	4628      	mov	r0, r5
   33038:	f7fc fdb0 	bl	2fb9c <fcb_offset_last_n>
    if (rc) {
   3303c:	2800      	cmp	r0, #0
   3303e:	d1dc      	bne.n	32ffa <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, fcb, &fcb_scratch, entry.fe_elem_off);
   33040:	9b04      	ldr	r3, [sp, #16]
   33042:	aa08      	add	r2, sp, #32
   33044:	4629      	mov	r1, r5
   33046:	4620      	mov	r0, r4
   33048:	f7ff ffa6 	bl	32f98 <log_fcb_copy>
    if (rc) {
   3304c:	2800      	cmp	r0, #0
   3304e:	d1d4      	bne.n	32ffa <log_fcb_rtr_erase+0x22>
    rc = log_fcb_flush(log);
   33050:	4620      	mov	r0, r4
   33052:	f7ff fe42 	bl	32cda <log_fcb_flush>
   33056:	4603      	mov	r3, r0
    if (rc) {
   33058:	2800      	cmp	r0, #0
   3305a:	d1ce      	bne.n	32ffa <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);
   3305c:	462a      	mov	r2, r5
   3305e:	a908      	add	r1, sp, #32
   33060:	4620      	mov	r0, r4
   33062:	f7ff ff99 	bl	32f98 <log_fcb_copy>
   33066:	e7c8      	b.n	32ffa <log_fcb_rtr_erase+0x22>
        rc = -1;
   33068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   3306c:	4770      	bx	lr
   3306e:	bf00      	nop
   33070:	7eadbadf 	.word	0x7eadbadf
   33074:	10001bd0 	.word	0x10001bd0

00033078 <log_fcb_start_append>:
{
   33078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3307c:	4604      	mov	r4, r0
   3307e:	460f      	mov	r7, r1
   33080:	4616      	mov	r6, r2
    fcb_log = (struct fcb_log *)log->l_arg;
   33082:	f8d0 8008 	ldr.w	r8, [r0, #8]
    fcb = &fcb_log->fl_fcb;
   33086:	4645      	mov	r5, r8
   33088:	e00d      	b.n	330a6 <log_fcb_start_append+0x2e>
            rc = log_fcb_rtr_erase(log);
   3308a:	4620      	mov	r0, r4
   3308c:	f7ff ffa4 	bl	32fd8 <log_fcb_rtr_erase>
            if (rc) {
   33090:	4603      	mov	r3, r0
   33092:	b140      	cbz	r0, 330a6 <log_fcb_start_append+0x2e>
}
   33094:	4618      	mov	r0, r3
   33096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = fcb_rotate(fcb);
   3309a:	4628      	mov	r0, r5
   3309c:	f7fc ffa0 	bl	2ffe0 <fcb_rotate>
        if (rc) {
   330a0:	4603      	mov	r3, r0
   330a2:	2800      	cmp	r0, #0
   330a4:	d1f6      	bne.n	33094 <log_fcb_start_append+0x1c>
        rc = fcb_append(fcb, len, loc);
   330a6:	4632      	mov	r2, r6
   330a8:	b2b9      	uxth	r1, r7
   330aa:	4628      	mov	r0, r5
   330ac:	f7fc fde0 	bl	2fc70 <fcb_append>
        if (rc == 0) {
   330b0:	4603      	mov	r3, r0
   330b2:	2800      	cmp	r0, #0
   330b4:	d0ee      	beq.n	33094 <log_fcb_start_append+0x1c>
        if (rc != FCB_ERR_NOSPACE) {
   330b6:	f110 0f04 	cmn.w	r0, #4
   330ba:	d1eb      	bne.n	33094 <log_fcb_start_append+0x1c>
        if (fcb_log->fl_entries) {
   330bc:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   330c0:	2b00      	cmp	r3, #0
   330c2:	d1e2      	bne.n	3308a <log_fcb_start_append+0x12>
        if (log->l_rotate_notify_cb != NULL) {
   330c4:	6963      	ldr	r3, [r4, #20]
   330c6:	2b00      	cmp	r3, #0
   330c8:	d0e7      	beq.n	3309a <log_fcb_start_append+0x22>
            fcb_append_to_scratch(fcb);
   330ca:	4628      	mov	r0, r5
   330cc:	f7fc fdb7 	bl	2fc3e <fcb_append_to_scratch>
            log->l_rotate_notify_cb(log);
   330d0:	6963      	ldr	r3, [r4, #20]
   330d2:	4620      	mov	r0, r4
   330d4:	4798      	blx	r3
   330d6:	e7e0      	b.n	3309a <log_fcb_start_append+0x22>

000330d8 <log_fcb_append_mbuf_body>:
{
   330d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   330dc:	b084      	sub	sp, #16
    fcb_log = (struct fcb_log *)log->l_arg;
   330de:	f8d0 8008 	ldr.w	r8, [r0, #8]
    if (fcb->f_align != 1) {
   330e2:	f898 302e 	ldrb.w	r3, [r8, #46]	; 0x2e
   330e6:	2b01      	cmp	r3, #1
   330e8:	d13d      	bne.n	33166 <log_fcb_append_mbuf_body+0x8e>
   330ea:	4604      	mov	r4, r0
   330ec:	460d      	mov	r5, r1
   330ee:	4616      	mov	r6, r2
    len = log_hdr_len(hdr) + os_mbuf_len(om);
   330f0:	4608      	mov	r0, r1
   330f2:	f7e5 ffd1 	bl	19098 <log_hdr_len>
   330f6:	4607      	mov	r7, r0
   330f8:	4630      	mov	r0, r6
   330fa:	f7e2 fac5 	bl	15688 <os_mbuf_len>
    rc = log_fcb_start_append(log, len, &loc);
   330fe:	466a      	mov	r2, sp
   33100:	1839      	adds	r1, r7, r0
   33102:	4620      	mov	r0, r4
   33104:	f7ff ffb8 	bl	33078 <log_fcb_start_append>
    if (rc != 0) {
   33108:	4603      	mov	r3, r0
   3310a:	b118      	cbz	r0, 33114 <log_fcb_append_mbuf_body+0x3c>
}
   3310c:	4618      	mov	r0, r3
   3310e:	b004      	add	sp, #16
   33110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr,
   33114:	230f      	movs	r3, #15
   33116:	462a      	mov	r2, r5
   33118:	9902      	ldr	r1, [sp, #8]
   3311a:	9800      	ldr	r0, [sp, #0]
   3311c:	f7e5 fd05 	bl	18b2a <flash_area_write>
    if (rc != 0) {
   33120:	4603      	mov	r3, r0
   33122:	2800      	cmp	r0, #0
   33124:	d1f2      	bne.n	3310c <log_fcb_append_mbuf_body+0x34>
    loc.fe_data_off += LOG_BASE_ENTRY_HDR_SIZE;
   33126:	9902      	ldr	r1, [sp, #8]
   33128:	310f      	adds	r1, #15
   3312a:	9102      	str	r1, [sp, #8]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   3312c:	7bab      	ldrb	r3, [r5, #14]
   3312e:	f013 0f10 	tst.w	r3, #16
   33132:	d00b      	beq.n	3314c <log_fcb_append_mbuf_body+0x74>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr->ue_imghash,
   33134:	2304      	movs	r3, #4
   33136:	f105 020f 	add.w	r2, r5, #15
   3313a:	9800      	ldr	r0, [sp, #0]
   3313c:	f7e5 fcf5 	bl	18b2a <flash_area_write>
        if (rc != 0) {
   33140:	4603      	mov	r3, r0
   33142:	2800      	cmp	r0, #0
   33144:	d1e2      	bne.n	3310c <log_fcb_append_mbuf_body+0x34>
        loc.fe_data_off += LOG_IMG_HASHLEN;
   33146:	9b02      	ldr	r3, [sp, #8]
   33148:	3304      	adds	r3, #4
   3314a:	9302      	str	r3, [sp, #8]
    rc = log_fcb_write_mbuf(&loc, om);
   3314c:	4631      	mov	r1, r6
   3314e:	4668      	mov	r0, sp
   33150:	f7ff feb5 	bl	32ebe <log_fcb_write_mbuf>
    if (rc != 0) {
   33154:	4603      	mov	r3, r0
   33156:	2800      	cmp	r0, #0
   33158:	d1d8      	bne.n	3310c <log_fcb_append_mbuf_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   3315a:	4669      	mov	r1, sp
   3315c:	4640      	mov	r0, r8
   3315e:	f7fc fe04 	bl	2fd6a <fcb_append_finish>
   33162:	4603      	mov	r3, r0
    if (rc != 0) {
   33164:	e7d2      	b.n	3310c <log_fcb_append_mbuf_body+0x34>
        return SYS_ENOTSUP;
   33166:	f06f 030b 	mvn.w	r3, #11
   3316a:	e7cf      	b.n	3310c <log_fcb_append_mbuf_body+0x34>

0003316c <log_fcb_append_mbuf>:
{
   3316c:	b570      	push	{r4, r5, r6, lr}
   3316e:	b086      	sub	sp, #24
   33170:	4606      	mov	r6, r0
   33172:	460c      	mov	r4, r1
    mlen = os_mbuf_len(om);
   33174:	4608      	mov	r0, r1
   33176:	f7e2 fa87 	bl	15688 <os_mbuf_len>
    if (mlen < LOG_BASE_ENTRY_HDR_SIZE) {
   3317a:	280e      	cmp	r0, #14
   3317c:	d928      	bls.n	331d0 <log_fcb_append_mbuf+0x64>
    om = os_mbuf_pullup(om, LOG_BASE_ENTRY_HDR_SIZE);
   3317e:	210f      	movs	r1, #15
   33180:	4620      	mov	r0, r4
   33182:	f7e2 fccc 	bl	15b1e <os_mbuf_pullup>
   33186:	4604      	mov	r4, r0
    hdr_len = log_hdr_len((struct log_entry_hdr *)om->om_data);
   33188:	6800      	ldr	r0, [r0, #0]
   3318a:	f7e5 ff85 	bl	19098 <log_hdr_len>
   3318e:	4605      	mov	r5, r0
    om = os_mbuf_pullup(om, hdr_len);
   33190:	4601      	mov	r1, r0
   33192:	4620      	mov	r0, r4
   33194:	f7e2 fcc3 	bl	15b1e <os_mbuf_pullup>
   33198:	4604      	mov	r4, r0
    memcpy(&hdr, om->om_data, hdr_len);
   3319a:	462a      	mov	r2, r5
   3319c:	6801      	ldr	r1, [r0, #0]
   3319e:	a801      	add	r0, sp, #4
   331a0:	f7e3 fc84 	bl	16aac <memcpy>
    os_mbuf_adj(om, hdr_len);
   331a4:	4629      	mov	r1, r5
   331a6:	4620      	mov	r0, r4
   331a8:	f7e2 fb35 	bl	15816 <os_mbuf_adj>
    rc = log_fcb_append_mbuf_body(log, &hdr, om);
   331ac:	4622      	mov	r2, r4
   331ae:	a901      	add	r1, sp, #4
   331b0:	4630      	mov	r0, r6
   331b2:	f7ff ff91 	bl	330d8 <log_fcb_append_mbuf_body>
   331b6:	4606      	mov	r6, r0
    os_mbuf_prepend(om, hdr_len);
   331b8:	4629      	mov	r1, r5
   331ba:	4620      	mov	r0, r4
   331bc:	f7e2 fbb9 	bl	15932 <os_mbuf_prepend>
    memcpy(om->om_data, &hdr, hdr_len);
   331c0:	462a      	mov	r2, r5
   331c2:	a901      	add	r1, sp, #4
   331c4:	6820      	ldr	r0, [r4, #0]
   331c6:	f7e3 fc71 	bl	16aac <memcpy>
}
   331ca:	4630      	mov	r0, r6
   331cc:	b006      	add	sp, #24
   331ce:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_ENOMEM;
   331d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   331d4:	e7f9      	b.n	331ca <log_fcb_append_mbuf+0x5e>

000331d6 <log_fcb_append_body>:
{
   331d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   331da:	b08d      	sub	sp, #52	; 0x34
   331dc:	461d      	mov	r5, r3
    fcb_log = (struct fcb_log *)log->l_arg;
   331de:	f8d0 9008 	ldr.w	r9, [r0, #8]
    if (fcb->f_align > LOG_FCB_MAX_ALIGN) {
   331e2:	f899 302e 	ldrb.w	r3, [r9, #46]	; 0x2e
   331e6:	2b08      	cmp	r3, #8
   331e8:	d850      	bhi.n	3328c <log_fcb_append_body+0xb6>
   331ea:	4606      	mov	r6, r0
   331ec:	460c      	mov	r4, r1
   331ee:	4690      	mov	r8, r2
    hdr_len = log_hdr_len(hdr);
   331f0:	4608      	mov	r0, r1
   331f2:	f7e5 ff51 	bl	19098 <log_hdr_len>
   331f6:	4607      	mov	r7, r0
    rc = log_fcb_start_append(log, hdr_len + body_len, &loc);
   331f8:	eb00 0a05 	add.w	sl, r0, r5
   331fc:	aa01      	add	r2, sp, #4
   331fe:	4651      	mov	r1, sl
   33200:	4630      	mov	r0, r6
   33202:	f7ff ff39 	bl	33078 <log_fcb_start_append>
    if (rc != 0) {
   33206:	4603      	mov	r3, r0
   33208:	b118      	cbz	r0, 33212 <log_fcb_append_body+0x3c>
}
   3320a:	4618      	mov	r0, r3
   3320c:	b00d      	add	sp, #52	; 0x34
   3320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdr_alignment = log_fcb_hdr_body_bytes(fcb->f_align, hdr_len);
   33212:	b2f9      	uxtb	r1, r7
   33214:	f899 002e 	ldrb.w	r0, [r9, #46]	; 0x2e
   33218:	f7ff fe67 	bl	32eea <log_fcb_hdr_body_bytes>
   3321c:	4683      	mov	fp, r0
    if (hdr_alignment > body_len) {
   3321e:	4285      	cmp	r5, r0
   33220:	db01      	blt.n	33226 <log_fcb_append_body+0x50>
        chunk_sz = hdr_len + hdr_alignment;
   33222:	eb07 0a00 	add.w	sl, r7, r0
    memcpy(buf, hdr, LOG_BASE_ENTRY_HDR_SIZE);
   33226:	ae05      	add	r6, sp, #20
   33228:	6820      	ldr	r0, [r4, #0]
   3322a:	6861      	ldr	r1, [r4, #4]
   3322c:	68a2      	ldr	r2, [r4, #8]
   3322e:	c607      	stmia	r6!, {r0, r1, r2}
   33230:	89a2      	ldrh	r2, [r4, #12]
   33232:	7ba3      	ldrb	r3, [r4, #14]
   33234:	8032      	strh	r2, [r6, #0]
   33236:	70b3      	strb	r3, [r6, #2]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   33238:	f013 0f10 	tst.w	r3, #16
   3323c:	d003      	beq.n	33246 <log_fcb_append_body+0x70>
        memcpy(buf + LOG_BASE_ENTRY_HDR_SIZE, hdr->ue_imghash, LOG_IMG_HASHLEN);
   3323e:	f8d4 300f 	ldr.w	r3, [r4, #15]
   33242:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    memcpy(buf + hdr_len, u8p, hdr_alignment);
   33246:	465a      	mov	r2, fp
   33248:	4641      	mov	r1, r8
   3324a:	ab05      	add	r3, sp, #20
   3324c:	19d8      	adds	r0, r3, r7
   3324e:	f7e3 fc2d 	bl	16aac <memcpy>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, chunk_sz);
   33252:	4653      	mov	r3, sl
   33254:	aa05      	add	r2, sp, #20
   33256:	9903      	ldr	r1, [sp, #12]
   33258:	9801      	ldr	r0, [sp, #4]
   3325a:	f7e5 fc66 	bl	18b2a <flash_area_write>
    if (rc != 0) {
   3325e:	4603      	mov	r3, r0
   33260:	2800      	cmp	r0, #0
   33262:	d1d2      	bne.n	3320a <log_fcb_append_body+0x34>
    u8p += hdr_alignment;
   33264:	eb08 020b 	add.w	r2, r8, fp
    body_len -= hdr_alignment;
   33268:	eba5 030b 	sub.w	r3, r5, fp
    if (body_len > 0) {
   3326c:	2b00      	cmp	r3, #0
   3326e:	dd07      	ble.n	33280 <log_fcb_append_body+0xaa>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off + chunk_sz, u8p,
   33270:	9903      	ldr	r1, [sp, #12]
   33272:	4451      	add	r1, sl
   33274:	9801      	ldr	r0, [sp, #4]
   33276:	f7e5 fc58 	bl	18b2a <flash_area_write>
        if (rc != 0) {
   3327a:	4603      	mov	r3, r0
   3327c:	2800      	cmp	r0, #0
   3327e:	d1c4      	bne.n	3320a <log_fcb_append_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   33280:	a901      	add	r1, sp, #4
   33282:	4648      	mov	r0, r9
   33284:	f7fc fd71 	bl	2fd6a <fcb_append_finish>
   33288:	4603      	mov	r3, r0
    if (rc != 0) {
   3328a:	e7be      	b.n	3320a <log_fcb_append_body+0x34>
        return SYS_ENOTSUP;
   3328c:	f06f 030b 	mvn.w	r3, #11
   33290:	e7bb      	b.n	3320a <log_fcb_append_body+0x34>

00033292 <log_fcb_append>:
{
   33292:	b570      	push	{r4, r5, r6, lr}
   33294:	4605      	mov	r5, r0
   33296:	460c      	mov	r4, r1
   33298:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   3329a:	4608      	mov	r0, r1
   3329c:	f7e5 fefc 	bl	19098 <log_hdr_len>
    return log_fcb_append_body(log, buf, (uint8_t *)buf + hdr_len,
   332a0:	1a33      	subs	r3, r6, r0
   332a2:	1822      	adds	r2, r4, r0
   332a4:	4621      	mov	r1, r4
   332a6:	4628      	mov	r0, r5
   332a8:	f7ff ff95 	bl	331d6 <log_fcb_append_body>
}
   332ac:	bd70      	pop	{r4, r5, r6, pc}

000332ae <log_fcb_read_mbuf>:
{
   332ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   332b2:	b0a1      	sub	sp, #132	; 0x84
   332b4:	460f      	mov	r7, r1
   332b6:	4690      	mov	r8, r2
   332b8:	461e      	mov	r6, r3
   332ba:	f8bd 90a0 	ldrh.w	r9, [sp, #160]	; 0xa0
    if (offset + len > loc->fe_data_len) {
   332be:	eb03 0209 	add.w	r2, r3, r9
   332c2:	898b      	ldrh	r3, [r1, #12]
   332c4:	429a      	cmp	r2, r3
   332c6:	dd03      	ble.n	332d0 <log_fcb_read_mbuf+0x22>
        len = loc->fe_data_len - offset;
   332c8:	eba3 0906 	sub.w	r9, r3, r6
   332cc:	fa1f f989 	uxth.w	r9, r9
    rem_len = len;
   332d0:	464d      	mov	r5, r9
    while (rem_len > 0) {
   332d2:	e003      	b.n	332dc <log_fcb_read_mbuf+0x2e>
        rem_len -= read_len;
   332d4:	1b2d      	subs	r5, r5, r4
   332d6:	b2ad      	uxth	r5, r5
        offset += read_len;
   332d8:	4434      	add	r4, r6
   332da:	b2a6      	uxth	r6, r4
    while (rem_len > 0) {
   332dc:	b19d      	cbz	r5, 33306 <log_fcb_read_mbuf+0x58>
        read_len = min(rem_len, sizeof(data));
   332de:	462c      	mov	r4, r5
   332e0:	2d80      	cmp	r5, #128	; 0x80
   332e2:	bf28      	it	cs
   332e4:	2480      	movcs	r4, #128	; 0x80
   332e6:	b2a4      	uxth	r4, r4
        rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, data,
   332e8:	68b9      	ldr	r1, [r7, #8]
   332ea:	4623      	mov	r3, r4
   332ec:	466a      	mov	r2, sp
   332ee:	4431      	add	r1, r6
   332f0:	6838      	ldr	r0, [r7, #0]
   332f2:	f7e5 fc07 	bl	18b04 <flash_area_read>
        if (rc) {
   332f6:	b930      	cbnz	r0, 33306 <log_fcb_read_mbuf+0x58>
        rc = os_mbuf_append(om, data, read_len);
   332f8:	4622      	mov	r2, r4
   332fa:	4669      	mov	r1, sp
   332fc:	4640      	mov	r0, r8
   332fe:	f7e2 f9cc 	bl	1569a <os_mbuf_append>
        if (rc) {
   33302:	2800      	cmp	r0, #0
   33304:	d0e6      	beq.n	332d4 <log_fcb_read_mbuf+0x26>
}
   33306:	eba9 0005 	sub.w	r0, r9, r5
   3330a:	b021      	add	sp, #132	; 0x84
   3330c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00033310 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   33310:	20ff      	movs	r0, #255	; 0xff
   33312:	4770      	bx	lr

00033314 <crc8_calc>:

uint8_t
crc8_calc(uint8_t val, void *buf, int cnt)
{
   33314:	b430      	push	{r4, r5}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   33316:	2400      	movs	r4, #0
   33318:	4294      	cmp	r4, r2
   3331a:	da0f      	bge.n	3333c <crc8_calc+0x28>
		val ^= p[i];
   3331c:	5d0b      	ldrb	r3, [r1, r4]
   3331e:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   33320:	0918      	lsrs	r0, r3, #4
   33322:	4d07      	ldr	r5, [pc, #28]	; (33340 <crc8_calc+0x2c>)
   33324:	5628      	ldrsb	r0, [r5, r0]
   33326:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   3332a:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   3332c:	f3c0 1003 	ubfx	r0, r0, #4, #4
   33330:	5628      	ldrsb	r0, [r5, r0]
   33332:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   33336:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   33338:	3401      	adds	r4, #1
   3333a:	e7ed      	b.n	33318 <crc8_calc+0x4>
	}
	return val;
}
   3333c:	bc30      	pop	{r4, r5}
   3333e:	4770      	bx	lr
   33340:	000356d8 	.word	0x000356d8

00033344 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   33344:	6843      	ldr	r3, [r0, #4]
   33346:	4413      	add	r3, r2
   33348:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   3334a:	2000      	movs	r0, #0
   3334c:	4770      	bx	lr
	...

00033350 <log_mgmt_logs_list>:
/**
 * Command handler: log list
 */
static int
log_mgmt_logs_list(struct mgmt_ctxt *ctxt)
{
   33350:	b5f0      	push	{r4, r5, r6, r7, lr}
   33352:	b087      	sub	sp, #28
   33354:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   33356:	2202      	movs	r2, #2
   33358:	4921      	ldr	r1, [pc, #132]	; (333e0 <log_mgmt_logs_list+0x90>)
   3335a:	f7fb fb0f 	bl	2e97c <cbor_encode_text_string>
   3335e:	4606      	mov	r6, r0
    int log_idx;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   33360:	2200      	movs	r2, #0
   33362:	2300      	movs	r3, #0
   33364:	4638      	mov	r0, r7
   33366:	f7fb fa94 	bl	2e892 <cbor_encode_int>
   3336a:	4306      	orrs	r6, r0
   3336c:	2208      	movs	r2, #8
   3336e:	491d      	ldr	r1, [pc, #116]	; (333e4 <log_mgmt_logs_list+0x94>)
   33370:	4638      	mov	r0, r7
   33372:	f7fb fb03 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "log_list");
   33376:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &log_list,
   33378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3337c:	4669      	mov	r1, sp
   3337e:	4638      	mov	r0, r7
   33380:	f7fb fb03 	bl	2e98a <cbor_encoder_create_array>
   33384:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    for (log_idx = 0; ; log_idx++) {
   33386:	2500      	movs	r5, #0
   33388:	e011      	b.n	333ae <log_mgmt_logs_list+0x5e>
        rc = log_mgmt_impl_get_log(log_idx, &log);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &log_list);
   3338a:	4669      	mov	r1, sp
   3338c:	4638      	mov	r0, r7
   3338e:	f7fb fb16 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   33392:	4620      	mov	r0, r4
   33394:	b007      	add	sp, #28
   33396:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err |= cbor_encode_text_stringz(&log_list, log.name);
   33398:	9c04      	ldr	r4, [sp, #16]
   3339a:	4620      	mov	r0, r4
   3339c:	f7e3 fbd3 	bl	16b46 <strlen>
   333a0:	4602      	mov	r2, r0
   333a2:	4621      	mov	r1, r4
   333a4:	4668      	mov	r0, sp
   333a6:	f7fb fae9 	bl	2e97c <cbor_encode_text_string>
   333aa:	4306      	orrs	r6, r0
    for (log_idx = 0; ; log_idx++) {
   333ac:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   333ae:	a904      	add	r1, sp, #16
   333b0:	4628      	mov	r0, r5
   333b2:	f7e8 fb66 	bl	1ba82 <log_mgmt_impl_get_log>
   333b6:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   333b8:	2805      	cmp	r0, #5
   333ba:	d005      	beq.n	333c8 <log_mgmt_logs_list+0x78>
        if (rc != 0) {
   333bc:	2800      	cmp	r0, #0
   333be:	d1e4      	bne.n	3338a <log_mgmt_logs_list+0x3a>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   333c0:	9b05      	ldr	r3, [sp, #20]
   333c2:	2b00      	cmp	r3, #0
   333c4:	d0f2      	beq.n	333ac <log_mgmt_logs_list+0x5c>
   333c6:	e7e7      	b.n	33398 <log_mgmt_logs_list+0x48>
    err |= cbor_encoder_close_container(&ctxt->encoder, &log_list);
   333c8:	4669      	mov	r1, sp
   333ca:	4638      	mov	r0, r7
   333cc:	f7fb faf7 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   333d0:	ea56 0300 	orrs.w	r3, r6, r0
   333d4:	d101      	bne.n	333da <log_mgmt_logs_list+0x8a>
    return 0;
   333d6:	2400      	movs	r4, #0
   333d8:	e7db      	b.n	33392 <log_mgmt_logs_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   333da:	2402      	movs	r4, #2
   333dc:	e7d9      	b.n	33392 <log_mgmt_logs_list+0x42>
   333de:	bf00      	nop
   333e0:	00034260 	.word	0x00034260
   333e4:	000356e8 	.word	0x000356e8

000333e8 <log_mgmt_level_list>:
/**
 * Command handler: log level_list
 */
static int
log_mgmt_level_list(struct mgmt_ctxt *ctxt)
{
   333e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   333ea:	b087      	sub	sp, #28
   333ec:	4607      	mov	r7, r0
   333ee:	2202      	movs	r2, #2
   333f0:	4923      	ldr	r1, [pc, #140]	; (33480 <log_mgmt_level_list+0x98>)
   333f2:	f7fb fac3 	bl	2e97c <cbor_encode_text_string>
   333f6:	4606      	mov	r6, r0
    int level;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   333f8:	2200      	movs	r2, #0
   333fa:	2300      	movs	r3, #0
   333fc:	4638      	mov	r0, r7
   333fe:	f7fb fa48 	bl	2e892 <cbor_encode_int>
   33402:	4306      	orrs	r6, r0
   33404:	2209      	movs	r2, #9
   33406:	491f      	ldr	r1, [pc, #124]	; (33484 <log_mgmt_level_list+0x9c>)
   33408:	4638      	mov	r0, r7
   3340a:	f7fb fab7 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "level_map");
   3340e:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &level_map,
   33410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33414:	a901      	add	r1, sp, #4
   33416:	4638      	mov	r0, r7
   33418:	f7fb fabc 	bl	2e994 <cbor_encoder_create_map>
   3341c:	4306      	orrs	r6, r0
                                   CborIndefiniteLength);

    for (level = 0; ; level++) {
   3341e:	2500      	movs	r5, #0
   33420:	e016      	b.n	33450 <log_mgmt_level_list+0x68>
        rc = log_mgmt_impl_get_level(level, &level_name);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &level_map);
   33422:	a901      	add	r1, sp, #4
   33424:	4638      	mov	r0, r7
   33426:	f7fb faca 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   3342a:	4620      	mov	r0, r4
   3342c:	b007      	add	sp, #28
   3342e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33430:	4620      	mov	r0, r4
   33432:	f7e3 fb88 	bl	16b46 <strlen>
   33436:	4602      	mov	r2, r0
   33438:	4621      	mov	r1, r4
   3343a:	a801      	add	r0, sp, #4
   3343c:	f7fb fa9e 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&level_map, level_name);
   33440:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&level_map, level);
   33442:	462a      	mov	r2, r5
   33444:	17eb      	asrs	r3, r5, #31
   33446:	a801      	add	r0, sp, #4
   33448:	f7fb f9eb 	bl	2e822 <cbor_encode_uint>
   3344c:	4306      	orrs	r6, r0
    for (level = 0; ; level++) {
   3344e:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_level(level, &level_name);
   33450:	a905      	add	r1, sp, #20
   33452:	4628      	mov	r0, r5
   33454:	f7e8 fb36 	bl	1bac4 <log_mgmt_impl_get_level>
   33458:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   3345a:	2805      	cmp	r0, #5
   3345c:	d005      	beq.n	3346a <log_mgmt_level_list+0x82>
        if (rc != 0) {
   3345e:	2800      	cmp	r0, #0
   33460:	d1df      	bne.n	33422 <log_mgmt_level_list+0x3a>
        if (level_name != NULL) {
   33462:	9c05      	ldr	r4, [sp, #20]
   33464:	2c00      	cmp	r4, #0
   33466:	d1e3      	bne.n	33430 <log_mgmt_level_list+0x48>
   33468:	e7f1      	b.n	3344e <log_mgmt_level_list+0x66>
    err |= cbor_encoder_close_container(&ctxt->encoder, &level_map);
   3346a:	a901      	add	r1, sp, #4
   3346c:	4638      	mov	r0, r7
   3346e:	f7fb faa6 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   33472:	ea56 0300 	orrs.w	r3, r6, r0
   33476:	d101      	bne.n	3347c <log_mgmt_level_list+0x94>
    return 0;
   33478:	2400      	movs	r4, #0
   3347a:	e7d6      	b.n	3342a <log_mgmt_level_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   3347c:	2402      	movs	r4, #2
   3347e:	e7d4      	b.n	3342a <log_mgmt_level_list+0x42>
   33480:	00034260 	.word	0x00034260
   33484:	000356f4 	.word	0x000356f4

00033488 <log_mgmt_module_list>:
{
   33488:	b5f0      	push	{r4, r5, r6, r7, lr}
   3348a:	b087      	sub	sp, #28
   3348c:	4607      	mov	r7, r0
   3348e:	2202      	movs	r2, #2
   33490:	4923      	ldr	r1, [pc, #140]	; (33520 <log_mgmt_module_list+0x98>)
   33492:	f7fb fa73 	bl	2e97c <cbor_encode_text_string>
   33496:	4606      	mov	r6, r0
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   33498:	2200      	movs	r2, #0
   3349a:	2300      	movs	r3, #0
   3349c:	4638      	mov	r0, r7
   3349e:	f7fb f9f8 	bl	2e892 <cbor_encode_int>
   334a2:	4306      	orrs	r6, r0
   334a4:	220a      	movs	r2, #10
   334a6:	491f      	ldr	r1, [pc, #124]	; (33524 <log_mgmt_module_list+0x9c>)
   334a8:	4638      	mov	r0, r7
   334aa:	f7fb fa67 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "module_map");
   334ae:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &modules,
   334b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   334b4:	a901      	add	r1, sp, #4
   334b6:	4638      	mov	r0, r7
   334b8:	f7fb fa6c 	bl	2e994 <cbor_encoder_create_map>
   334bc:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   334be:	2500      	movs	r5, #0
   334c0:	e016      	b.n	334f0 <log_mgmt_module_list+0x68>
            cbor_encoder_close_container(&ctxt->encoder, &modules);
   334c2:	a901      	add	r1, sp, #4
   334c4:	4638      	mov	r0, r7
   334c6:	f7fb fa7a 	bl	2e9be <cbor_encoder_close_container>
}
   334ca:	4620      	mov	r0, r4
   334cc:	b007      	add	sp, #28
   334ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   334d0:	4620      	mov	r0, r4
   334d2:	f7e3 fb38 	bl	16b46 <strlen>
   334d6:	4602      	mov	r2, r0
   334d8:	4621      	mov	r1, r4
   334da:	a801      	add	r0, sp, #4
   334dc:	f7fb fa4e 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&modules, module_name);
   334e0:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&modules, module);
   334e2:	462a      	mov	r2, r5
   334e4:	17eb      	asrs	r3, r5, #31
   334e6:	a801      	add	r0, sp, #4
   334e8:	f7fb f99b 	bl	2e822 <cbor_encode_uint>
   334ec:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   334ee:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_module(module, &module_name);
   334f0:	a905      	add	r1, sp, #20
   334f2:	4628      	mov	r0, r5
   334f4:	f7e8 fada 	bl	1baac <log_mgmt_impl_get_module>
   334f8:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   334fa:	2805      	cmp	r0, #5
   334fc:	d005      	beq.n	3350a <log_mgmt_module_list+0x82>
        if (rc != 0) {
   334fe:	2800      	cmp	r0, #0
   33500:	d1df      	bne.n	334c2 <log_mgmt_module_list+0x3a>
        if (module_name != NULL) {
   33502:	9c05      	ldr	r4, [sp, #20]
   33504:	2c00      	cmp	r4, #0
   33506:	d1e3      	bne.n	334d0 <log_mgmt_module_list+0x48>
   33508:	e7f1      	b.n	334ee <log_mgmt_module_list+0x66>
    err |= cbor_encoder_close_container(&ctxt->encoder, &modules);
   3350a:	a901      	add	r1, sp, #4
   3350c:	4638      	mov	r0, r7
   3350e:	f7fb fa56 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   33512:	ea56 0300 	orrs.w	r3, r6, r0
   33516:	d101      	bne.n	3351c <log_mgmt_module_list+0x94>
    return 0;
   33518:	2400      	movs	r4, #0
   3351a:	e7d6      	b.n	334ca <log_mgmt_module_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   3351c:	2402      	movs	r4, #2
   3351e:	e7d4      	b.n	334ca <log_mgmt_module_list+0x42>
   33520:	00034260 	.word	0x00034260
   33524:	00035700 	.word	0x00035700

00033528 <log_mgmt_clear>:
/**
 * Command handler: log clear
 */
static int
log_mgmt_clear(struct mgmt_ctxt *ctxt)
{
   33528:	b570      	push	{r4, r5, r6, lr}
   3352a:	b0aa      	sub	sp, #168	; 0xa8
   3352c:	4605      	mov	r5, r0
    struct log_mgmt_log log;
    char name[LOG_MGMT_NAME_LEN] = {0};
   3352e:	2400      	movs	r4, #0
   33530:	9418      	str	r4, [sp, #96]	; 0x60
   33532:	223c      	movs	r2, #60	; 0x3c
   33534:	4621      	mov	r1, r4
   33536:	a819      	add	r0, sp, #100	; 0x64
   33538:	f7e3 fadd 	bl	16af6 <memset>
    int name_len;
    int log_idx;
    int rc;

    const struct cbor_attr_t attr[] = {
   3353c:	225c      	movs	r2, #92	; 0x5c
   3353e:	4621      	mov	r1, r4
   33540:	a801      	add	r0, sp, #4
   33542:	f7e3 fad8 	bl	16af6 <memset>
   33546:	4b1d      	ldr	r3, [pc, #116]	; (335bc <log_mgmt_clear+0x94>)
   33548:	9300      	str	r3, [sp, #0]
   3354a:	2304      	movs	r3, #4
   3354c:	f88d 3004 	strb.w	r3, [sp, #4]
   33550:	ab18      	add	r3, sp, #96	; 0x60
   33552:	9302      	str	r3, [sp, #8]
   33554:	2340      	movs	r3, #64	; 0x40
   33556:	930a      	str	r3, [sp, #40]	; 0x28
        {
            .attribute = NULL
        },
    };

    name[0] = '\0';
   33558:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    rc = cbor_read_object(&ctxt->it, attr);
   3355c:	4669      	mov	r1, sp
   3355e:	f105 001c 	add.w	r0, r5, #28
   33562:	f7e7 fb4c 	bl	1abfe <cbor_read_object>
    if (rc != 0) {
   33566:	b9f8      	cbnz	r0, 335a8 <log_mgmt_clear+0x80>
   33568:	4606      	mov	r6, r0
        return LOG_MGMT_ERR_EINVAL;
    }
    name_len = strlen(name);
   3356a:	a818      	add	r0, sp, #96	; 0x60
   3356c:	f7e3 faeb 	bl	16b46 <strlen>
   33570:	4605      	mov	r5, r0

    for (log_idx = 0; ; log_idx++) {
   33572:	4634      	mov	r4, r6
   33574:	e005      	b.n	33582 <log_mgmt_clear+0x5a>
            return rc;
        }

        if (log.type != LOG_MGMT_TYPE_STREAM) {
            if (name_len == 0 || strcmp(log.name, name) == 0) {
                rc = log_mgmt_impl_clear(log.name);
   33576:	9828      	ldr	r0, [sp, #160]	; 0xa0
   33578:	f7e8 fb0a 	bl	1bb90 <log_mgmt_impl_clear>
                if (rc != 0) {
   3357c:	b9d0      	cbnz	r0, 335b4 <log_mgmt_clear+0x8c>
                    return rc;
                }

                if (name_len != 0) {
   3357e:	b9dd      	cbnz	r5, 335b8 <log_mgmt_clear+0x90>
    for (log_idx = 0; ; log_idx++) {
   33580:	3401      	adds	r4, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   33582:	a928      	add	r1, sp, #160	; 0xa0
   33584:	4620      	mov	r0, r4
   33586:	f7e8 fa7c 	bl	1ba82 <log_mgmt_impl_get_log>
        if (rc == LOG_MGMT_ERR_ENOENT) {
   3358a:	2805      	cmp	r0, #5
   3358c:	d00f      	beq.n	335ae <log_mgmt_clear+0x86>
        if (rc != 0) {
   3358e:	b968      	cbnz	r0, 335ac <log_mgmt_clear+0x84>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   33590:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   33592:	2b00      	cmp	r3, #0
   33594:	d0f4      	beq.n	33580 <log_mgmt_clear+0x58>
            if (name_len == 0 || strcmp(log.name, name) == 0) {
   33596:	2d00      	cmp	r5, #0
   33598:	d0ed      	beq.n	33576 <log_mgmt_clear+0x4e>
   3359a:	a918      	add	r1, sp, #96	; 0x60
   3359c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   3359e:	f7e3 fac6 	bl	16b2e <strcmp>
   335a2:	2800      	cmp	r0, #0
   335a4:	d1ec      	bne.n	33580 <log_mgmt_clear+0x58>
   335a6:	e7e6      	b.n	33576 <log_mgmt_clear+0x4e>
        return LOG_MGMT_ERR_EINVAL;
   335a8:	2603      	movs	r6, #3
   335aa:	e000      	b.n	335ae <log_mgmt_clear+0x86>
            return rc;
   335ac:	4606      	mov	r6, r0
    if (name_len != 0) {
        return LOG_MGMT_ERR_ENOENT;
    }

    return 0;
}
   335ae:	4630      	mov	r0, r6
   335b0:	b02a      	add	sp, #168	; 0xa8
   335b2:	bd70      	pop	{r4, r5, r6, pc}
                    return rc;
   335b4:	4606      	mov	r6, r0
   335b6:	e7fa      	b.n	335ae <log_mgmt_clear+0x86>
                    return 0;
   335b8:	4606      	mov	r6, r0
   335ba:	e7f8      	b.n	335ae <log_mgmt_clear+0x86>
   335bc:	0003570c 	.word	0x0003570c

000335c0 <log_encode_entries>:
{
   335c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   335c4:	b09b      	sub	sp, #108	; 0x6c
   335c6:	4606      	mov	r6, r0
   335c8:	460d      	mov	r5, r1
   335ca:	4690      	mov	r8, r2
   335cc:	461f      	mov	r7, r3

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   335ce:	2200      	movs	r2, #0
   335d0:	9219      	str	r2, [sp, #100]	; 0x64
    cb->enc.write = &cbor_cnt_writer;
   335d2:	4b2b      	ldr	r3, [pc, #172]	; (33680 <log_encode_entries+0xc0>)
   335d4:	9318      	str	r3, [sp, #96]	; 0x60
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   335d6:	a918      	add	r1, sp, #96	; 0x60
   335d8:	a804      	add	r0, sp, #16
   335da:	f7fb f91d 	bl	2e818 <cbor_encoder_init>
   335de:	2207      	movs	r2, #7
   335e0:	4928      	ldr	r1, [pc, #160]	; (33684 <log_encode_entries+0xc4>)
   335e2:	a804      	add	r0, sp, #16
   335e4:	f7fb f9ca 	bl	2e97c <cbor_encode_text_string>
   335e8:	4604      	mov	r4, r0
    err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   335ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   335ee:	4669      	mov	r1, sp
   335f0:	a804      	add	r0, sp, #16
   335f2:	f7fb f9ca 	bl	2e98a <cbor_encoder_create_array>
   335f6:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   335f8:	4669      	mov	r1, sp
   335fa:	a804      	add	r0, sp, #16
   335fc:	f7fb f9df 	bl	2e9be <cbor_encoder_close_container>
   33600:	ea44 0900 	orr.w	r9, r4, r0
{   return encoder->writer->bytes_written; }
   33604:	682b      	ldr	r3, [r5, #0]
   33606:	685b      	ldr	r3, [r3, #4]
   33608:	9a04      	ldr	r2, [sp, #16]
   3360a:	6854      	ldr	r4, [r2, #4]
    rsp_len = cbor_encode_bytes_written(enc) +
   3360c:	441c      	add	r4, r3
    if (rsp_len > LOG_MGMT_MAX_RSP_LEN) {
   3360e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   33612:	dd04      	ble.n	3361e <log_encode_entries+0x5e>
        rc = LOG_MGMT_ERR_EUNKNOWN;
   33614:	2601      	movs	r6, #1
}
   33616:	4630      	mov	r0, r6
   33618:	b01b      	add	sp, #108	; 0x6c
   3361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   3361e:	2207      	movs	r2, #7
   33620:	4918      	ldr	r1, [pc, #96]	; (33684 <log_encode_entries+0xc4>)
   33622:	4628      	mov	r0, r5
   33624:	f7fb f9aa 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(enc, "entries");
   33628:	ea49 0400 	orr.w	r4, r9, r0
    err |= cbor_encoder_create_array(enc, &entries, CborIndefiniteLength);
   3362c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33630:	4669      	mov	r1, sp
   33632:	4628      	mov	r0, r5
   33634:	f7fb f9a9 	bl	2e98a <cbor_encoder_create_array>
   33638:	4304      	orrs	r4, r0
    filter = (struct log_mgmt_filter) {
   3363a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   3363e:	9715      	str	r7, [sp, #84]	; 0x54
   33640:	9b22      	ldr	r3, [sp, #136]	; 0x88
   33642:	9316      	str	r3, [sp, #88]	; 0x58
{   return encoder->writer->bytes_written; }
   33644:	682b      	ldr	r3, [r5, #0]
   33646:	685f      	ldr	r7, [r3, #4]
    ctxt = (struct log_walk_ctxt) {
   33648:	2230      	movs	r2, #48	; 0x30
   3364a:	2100      	movs	r1, #0
   3364c:	a808      	add	r0, sp, #32
   3364e:	f7e3 fa52 	bl	16af6 <memset>
   33652:	9709      	str	r7, [sp, #36]	; 0x24
   33654:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
    rc = log_mgmt_impl_foreach_entry(log->name, &filter,
   33658:	ab08      	add	r3, sp, #32
   3365a:	4a0b      	ldr	r2, [pc, #44]	; (33688 <log_encode_entries+0xc8>)
   3365c:	a914      	add	r1, sp, #80	; 0x50
   3365e:	6830      	ldr	r0, [r6, #0]
   33660:	f7e8 fa68 	bl	1bb34 <log_mgmt_impl_foreach_entry>
    if (rc < 0) {
   33664:	1e06      	subs	r6, r0, #0
   33666:	db08      	blt.n	3367a <log_encode_entries+0xba>
    err |= cbor_encoder_close_container(enc, &entries);
   33668:	4669      	mov	r1, sp
   3366a:	4628      	mov	r0, r5
   3366c:	f7fb f9a7 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   33670:	ea54 0300 	orrs.w	r3, r4, r0
   33674:	d0cf      	beq.n	33616 <log_encode_entries+0x56>
        return LOG_MGMT_ERR_ENOMEM;
   33676:	2602      	movs	r6, #2
   33678:	e7cd      	b.n	33616 <log_encode_entries+0x56>
        rc = -1 * rc;
   3367a:	4276      	negs	r6, r6
   3367c:	e7f4      	b.n	33668 <log_encode_entries+0xa8>
   3367e:	bf00      	nop
   33680:	00033345 	.word	0x00033345
   33684:	00035718 	.word	0x00035718
   33688:	00033a69 	.word	0x00033a69

0003368c <log_encode>:
{
   3368c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33690:	b087      	sub	sp, #28
   33692:	4605      	mov	r5, r0
   33694:	460e      	mov	r6, r1
   33696:	4690      	mov	r8, r2
   33698:	461f      	mov	r7, r3
    err |= cbor_encoder_create_map(ctxt, &logs, CborIndefiniteLength);
   3369a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3369e:	a902      	add	r1, sp, #8
   336a0:	4630      	mov	r0, r6
   336a2:	f7fb f977 	bl	2e994 <cbor_encoder_create_map>
   336a6:	4604      	mov	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   336a8:	2204      	movs	r2, #4
   336aa:	491c      	ldr	r1, [pc, #112]	; (3371c <log_encode+0x90>)
   336ac:	a802      	add	r0, sp, #8
   336ae:	f7fb f965 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "name");
   336b2:	4304      	orrs	r4, r0
    err |= cbor_encode_text_stringz(&logs, log->name);
   336b4:	f8d5 9000 	ldr.w	r9, [r5]
   336b8:	4648      	mov	r0, r9
   336ba:	f7e3 fa44 	bl	16b46 <strlen>
   336be:	4602      	mov	r2, r0
   336c0:	4649      	mov	r1, r9
   336c2:	a802      	add	r0, sp, #8
   336c4:	f7fb f95a 	bl	2e97c <cbor_encode_text_string>
   336c8:	4304      	orrs	r4, r0
   336ca:	2204      	movs	r2, #4
   336cc:	4914      	ldr	r1, [pc, #80]	; (33720 <log_encode+0x94>)
   336ce:	a802      	add	r0, sp, #8
   336d0:	f7fb f954 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "type");
   336d4:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&logs, log->type);
   336d6:	686a      	ldr	r2, [r5, #4]
   336d8:	17d3      	asrs	r3, r2, #31
   336da:	a802      	add	r0, sp, #8
   336dc:	f7fb f8a1 	bl	2e822 <cbor_encode_uint>
   336e0:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, timestamp, index);
   336e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   336e4:	9300      	str	r3, [sp, #0]
   336e6:	4642      	mov	r2, r8
   336e8:	463b      	mov	r3, r7
   336ea:	a902      	add	r1, sp, #8
   336ec:	4628      	mov	r0, r5
   336ee:	f7ff ff67 	bl	335c0 <log_encode_entries>
    if (rc != 0) {
   336f2:	4605      	mov	r5, r0
   336f4:	b950      	cbnz	r0, 3370c <log_encode+0x80>
    err |= cbor_encoder_close_container(ctxt, &logs);
   336f6:	a902      	add	r1, sp, #8
   336f8:	4630      	mov	r0, r6
   336fa:	f7fb f960 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   336fe:	ea54 0300 	orrs.w	r3, r4, r0
   33702:	d108      	bne.n	33716 <log_encode+0x8a>
}
   33704:	4628      	mov	r0, r5
   33706:	b007      	add	sp, #28
   33708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cbor_encoder_close_container(ctxt, &logs);
   3370c:	a902      	add	r1, sp, #8
   3370e:	4630      	mov	r0, r6
   33710:	f7fb f955 	bl	2e9be <cbor_encoder_close_container>
        return rc;
   33714:	e7f6      	b.n	33704 <log_encode+0x78>
        return LOG_MGMT_ERR_ENOMEM;
   33716:	2502      	movs	r5, #2
   33718:	e7f4      	b.n	33704 <log_encode+0x78>
   3371a:	bf00      	nop
   3371c:	00035710 	.word	0x00035710
   33720:	00035720 	.word	0x00035720

00033724 <log_mgmt_show>:
{
   33724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33728:	b0ce      	sub	sp, #312	; 0x138
   3372a:	4606      	mov	r6, r0
    const struct cbor_attr_t attr[] = {
   3372c:	22bc      	movs	r2, #188	; 0xbc
   3372e:	2100      	movs	r1, #0
   33730:	a803      	add	r0, sp, #12
   33732:	f7e3 f9e0 	bl	16af6 <memset>
   33736:	4b4b      	ldr	r3, [pc, #300]	; (33864 <log_mgmt_show+0x140>)
   33738:	9302      	str	r3, [sp, #8]
   3373a:	2304      	movs	r3, #4
   3373c:	f88d 300c 	strb.w	r3, [sp, #12]
   33740:	ab3e      	add	r3, sp, #248	; 0xf8
   33742:	9304      	str	r3, [sp, #16]
   33744:	2340      	movs	r3, #64	; 0x40
   33746:	930c      	str	r3, [sp, #48]	; 0x30
   33748:	4b47      	ldr	r3, [pc, #284]	; (33868 <log_mgmt_show+0x144>)
   3374a:	930e      	str	r3, [sp, #56]	; 0x38
   3374c:	2301      	movs	r3, #1
   3374e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   33752:	ab32      	add	r3, sp, #200	; 0xc8
   33754:	9310      	str	r3, [sp, #64]	; 0x40
   33756:	4b45      	ldr	r3, [pc, #276]	; (3386c <log_mgmt_show+0x148>)
   33758:	931a      	str	r3, [sp, #104]	; 0x68
   3375a:	2302      	movs	r3, #2
   3375c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   33760:	ab36      	add	r3, sp, #216	; 0xd8
   33762:	931c      	str	r3, [sp, #112]	; 0x70
    name[0] = '\0';
   33764:	2300      	movs	r3, #0
   33766:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    rc = cbor_read_object(&ctxt->it, attr);
   3376a:	a902      	add	r1, sp, #8
   3376c:	f106 001c 	add.w	r0, r6, #28
   33770:	f7e7 fa45 	bl	1abfe <cbor_read_object>
    if (rc != 0) {
   33774:	2800      	cmp	r0, #0
   33776:	d16e      	bne.n	33856 <log_mgmt_show+0x132>
    name_len = strlen(name);
   33778:	a83e      	add	r0, sp, #248	; 0xf8
   3377a:	f7e3 f9e4 	bl	16b46 <strlen>
   3377e:	4682      	mov	sl, r0
   33780:	4607      	mov	r7, r0
    rc = log_mgmt_impl_get_next_idx(&next_idx);
   33782:	a835      	add	r0, sp, #212	; 0xd4
   33784:	f7e8 f9ce 	bl	1bb24 <log_mgmt_impl_get_next_idx>
    if (rc != 0) {
   33788:	4681      	mov	r9, r0
   3378a:	b110      	cbz	r0, 33792 <log_mgmt_show+0x6e>
        return LOG_MGMT_ERR_EUNKNOWN;
   3378c:	f04f 0901 	mov.w	r9, #1
   33790:	e063      	b.n	3385a <log_mgmt_show+0x136>
   33792:	220a      	movs	r2, #10
   33794:	4936      	ldr	r1, [pc, #216]	; (33870 <log_mgmt_show+0x14c>)
   33796:	4630      	mov	r0, r6
   33798:	f7fb f8f0 	bl	2e97c <cbor_encode_text_string>
   3379c:	4680      	mov	r8, r0
    err |= cbor_encode_uint(&ctxt->encoder, next_idx);
   3379e:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   337a0:	2300      	movs	r3, #0
   337a2:	4630      	mov	r0, r6
   337a4:	f7fb f83d 	bl	2e822 <cbor_encode_uint>
   337a8:	ea40 0808 	orr.w	r8, r0, r8
   337ac:	2204      	movs	r2, #4
   337ae:	4931      	ldr	r1, [pc, #196]	; (33874 <log_mgmt_show+0x150>)
   337b0:	4630      	mov	r0, r6
   337b2:	f7fb f8e3 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "logs");
   337b6:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &logs,
   337ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   337be:	a938      	add	r1, sp, #224	; 0xe0
   337c0:	4630      	mov	r0, r6
   337c2:	f7fb f8e2 	bl	2e98a <cbor_encoder_create_array>
   337c6:	ea48 0800 	orr.w	r8, r8, r0
    for (log_idx = 0; ; log_idx++) {
   337ca:	464d      	mov	r5, r9
   337cc:	e02e      	b.n	3382c <log_mgmt_show+0x108>
            if (name_len != 0) {
   337ce:	f1ba 0f00 	cmp.w	sl, #0
   337d2:	d117      	bne.n	33804 <log_mgmt_show+0xe0>
    err |= cbor_encoder_close_container(&ctxt->encoder, &logs);
   337d4:	a938      	add	r1, sp, #224	; 0xe0
   337d6:	4630      	mov	r0, r6
   337d8:	f7fb f8f1 	bl	2e9be <cbor_encoder_close_container>
   337dc:	ea48 0800 	orr.w	r8, r8, r0
   337e0:	2202      	movs	r2, #2
   337e2:	4925      	ldr	r1, [pc, #148]	; (33878 <log_mgmt_show+0x154>)
   337e4:	4630      	mov	r0, r6
   337e6:	f7fb f8c9 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   337ea:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   337ee:	4622      	mov	r2, r4
   337f0:	17e3      	asrs	r3, r4, #31
   337f2:	4630      	mov	r0, r6
   337f4:	f7fb f84d 	bl	2e892 <cbor_encode_int>
    if (err != 0) {
   337f8:	ea58 0300 	orrs.w	r3, r8, r0
   337fc:	d02d      	beq.n	3385a <log_mgmt_show+0x136>
        return LOG_MGMT_ERR_ENOMEM;
   337fe:	f04f 0902 	mov.w	r9, #2
   33802:	e02a      	b.n	3385a <log_mgmt_show+0x136>
                cbor_encoder_close_container(&ctxt->encoder, &logs);
   33804:	a938      	add	r1, sp, #224	; 0xe0
   33806:	4630      	mov	r0, r6
   33808:	f7fb f8d9 	bl	2e9be <cbor_encoder_close_container>
                return LOG_MGMT_ERR_ENOENT;
   3380c:	46a1      	mov	r9, r4
   3380e:	e024      	b.n	3385a <log_mgmt_show+0x136>
                rc = log_encode(&log, &logs, timestamp, index);
   33810:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   33812:	9300      	str	r3, [sp, #0]
   33814:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
   33818:	a938      	add	r1, sp, #224	; 0xe0
   3381a:	a83c      	add	r0, sp, #240	; 0xf0
   3381c:	f7ff ff36 	bl	3368c <log_encode>
                if (rc) {
   33820:	4604      	mov	r4, r0
   33822:	2800      	cmp	r0, #0
   33824:	d1d6      	bne.n	337d4 <log_mgmt_show+0xb0>
                if (name_len > 0) {
   33826:	2f00      	cmp	r7, #0
   33828:	dcd4      	bgt.n	337d4 <log_mgmt_show+0xb0>
    for (log_idx = 0; ; log_idx++) {
   3382a:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   3382c:	a93c      	add	r1, sp, #240	; 0xf0
   3382e:	4628      	mov	r0, r5
   33830:	f7e8 f927 	bl	1ba82 <log_mgmt_impl_get_log>
   33834:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   33836:	2805      	cmp	r0, #5
   33838:	d0c9      	beq.n	337ce <log_mgmt_show+0xaa>
        } else if (rc != 0) {
   3383a:	2800      	cmp	r0, #0
   3383c:	d1ca      	bne.n	337d4 <log_mgmt_show+0xb0>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   3383e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   33840:	2b00      	cmp	r3, #0
   33842:	d0f2      	beq.n	3382a <log_mgmt_show+0x106>
            if (name_len == 0 || strcmp(name, log.name) == 0) {
   33844:	2f00      	cmp	r7, #0
   33846:	d0e3      	beq.n	33810 <log_mgmt_show+0xec>
   33848:	993c      	ldr	r1, [sp, #240]	; 0xf0
   3384a:	a83e      	add	r0, sp, #248	; 0xf8
   3384c:	f7e3 f96f 	bl	16b2e <strcmp>
   33850:	2800      	cmp	r0, #0
   33852:	d1ea      	bne.n	3382a <log_mgmt_show+0x106>
   33854:	e7dc      	b.n	33810 <log_mgmt_show+0xec>
        return LOG_MGMT_ERR_EINVAL;
   33856:	f04f 0903 	mov.w	r9, #3
}
   3385a:	4648      	mov	r0, r9
   3385c:	b04e      	add	sp, #312	; 0x138
   3385e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33862:	bf00      	nop
   33864:	0003570c 	.word	0x0003570c
   33868:	00035728 	.word	0x00035728
   3386c:	0003572c 	.word	0x0003572c
   33870:	00035734 	.word	0x00035734
   33874:	00035740 	.word	0x00035740
   33878:	00034260 	.word	0x00034260

0003387c <log_mgmt_encode_entry>:
{
   3387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33880:	b083      	sub	sp, #12
   33882:	4681      	mov	r9, r0
   33884:	460e      	mov	r6, r1
   33886:	9200      	str	r2, [sp, #0]
   33888:	4698      	mov	r8, r3
{   return encoder->writer->bytes_written; }
   3388a:	6803      	ldr	r3, [r0, #0]
   3388c:	685b      	ldr	r3, [r3, #4]
   3388e:	9301      	str	r3, [sp, #4]
    if (entry->offset == 0) {
   33890:	69cb      	ldr	r3, [r1, #28]
   33892:	2b00      	cmp	r3, #0
   33894:	f040 80ab 	bne.w	339ee <log_mgmt_encode_entry+0x172>
        err |= cbor_encoder_create_map(enc, &lmec->mapenc, CborIndefiniteLength);
   33898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3389c:	4641      	mov	r1, r8
   3389e:	f7fb f879 	bl	2e994 <cbor_encoder_create_map>
   338a2:	4607      	mov	r7, r0
        switch (entry->type) {
   338a4:	7db3      	ldrb	r3, [r6, #22]
   338a6:	f003 030f 	and.w	r3, r3, #15
   338aa:	2b01      	cmp	r3, #1
   338ac:	d005      	beq.n	338ba <log_mgmt_encode_entry+0x3e>
   338ae:	2b02      	cmp	r3, #2
   338b0:	d056      	beq.n	33960 <log_mgmt_encode_entry+0xe4>
   338b2:	2b00      	cmp	r3, #0
   338b4:	d061      	beq.n	3397a <log_mgmt_encode_entry+0xfe>
   338b6:	2007      	movs	r0, #7
   338b8:	e0b1      	b.n	33a1e <log_mgmt_encode_entry+0x1a2>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   338ba:	2204      	movs	r2, #4
   338bc:	4960      	ldr	r1, [pc, #384]	; (33a40 <log_mgmt_encode_entry+0x1c4>)
   338be:	4640      	mov	r0, r8
   338c0:	f7fb f85c 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   338c4:	4307      	orrs	r7, r0
   338c6:	2204      	movs	r2, #4
   338c8:	495e      	ldr	r1, [pc, #376]	; (33a44 <log_mgmt_encode_entry+0x1c8>)
   338ca:	4640      	mov	r0, r8
   338cc:	f7fb f856 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "cbor");
   338d0:	4307      	orrs	r7, r0
   338d2:	2202      	movs	r2, #2
   338d4:	495c      	ldr	r1, [pc, #368]	; (33a48 <log_mgmt_encode_entry+0x1cc>)
   338d6:	4640      	mov	r0, r8
   338d8:	f7fb f850 	bl	2e97c <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "ts");
   338dc:	4307      	orrs	r7, r0
        err |= cbor_encode_int(&lmec->mapenc, entry->ts);
   338de:	e9d6 2300 	ldrd	r2, r3, [r6]
   338e2:	4640      	mov	r0, r8
   338e4:	f7fa ffd5 	bl	2e892 <cbor_encode_int>
   338e8:	4307      	orrs	r7, r0
   338ea:	2205      	movs	r2, #5
   338ec:	4957      	ldr	r1, [pc, #348]	; (33a4c <log_mgmt_encode_entry+0x1d0>)
   338ee:	4640      	mov	r0, r8
   338f0:	f7fb f844 	bl	2e97c <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "level");
   338f4:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->level);
   338f6:	7d72      	ldrb	r2, [r6, #21]
   338f8:	2300      	movs	r3, #0
   338fa:	4640      	mov	r0, r8
   338fc:	f7fa ff91 	bl	2e822 <cbor_encode_uint>
   33900:	4307      	orrs	r7, r0
   33902:	2205      	movs	r2, #5
   33904:	4952      	ldr	r1, [pc, #328]	; (33a50 <log_mgmt_encode_entry+0x1d4>)
   33906:	4640      	mov	r0, r8
   33908:	f7fb f838 	bl	2e97c <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "index");
   3390c:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->index);
   3390e:	68b2      	ldr	r2, [r6, #8]
   33910:	2300      	movs	r3, #0
   33912:	4640      	mov	r0, r8
   33914:	f7fa ff85 	bl	2e822 <cbor_encode_uint>
   33918:	4307      	orrs	r7, r0
   3391a:	2206      	movs	r2, #6
   3391c:	494d      	ldr	r1, [pc, #308]	; (33a54 <log_mgmt_encode_entry+0x1d8>)
   3391e:	4640      	mov	r0, r8
   33920:	f7fb f82c 	bl	2e97c <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "module");
   33924:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->module);
   33926:	7d32      	ldrb	r2, [r6, #20]
   33928:	2300      	movs	r3, #0
   3392a:	4640      	mov	r0, r8
   3392c:	f7fa ff79 	bl	2e822 <cbor_encode_uint>
   33930:	4307      	orrs	r7, r0
        if (entry->flags & LOG_MGMT_FLAGS_IMG_HASH) {
   33932:	7db3      	ldrb	r3, [r6, #22]
   33934:	f013 0f10 	tst.w	r3, #16
   33938:	d12c      	bne.n	33994 <log_mgmt_encode_entry+0x118>
   3393a:	2203      	movs	r2, #3
   3393c:	4946      	ldr	r1, [pc, #280]	; (33a58 <log_mgmt_encode_entry+0x1dc>)
   3393e:	4640      	mov	r0, r8
   33940:	f7fb f81c 	bl	2e97c <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "msg");
   33944:	4307      	orrs	r7, r0
        err |= cbor_encoder_create_indef_byte_string(&lmec->mapenc, &lmec->msgenc);
   33946:	f108 0b10 	add.w	fp, r8, #16
   3394a:	4659      	mov	r1, fp
   3394c:	4640      	mov	r0, r8
   3394e:	f7fb f82f 	bl	2e9b0 <cbor_encoder_create_indef_byte_string>
   33952:	4307      	orrs	r7, r0
        if (out_len != NULL) {
   33954:	9b00      	ldr	r3, [sp, #0]
   33956:	2b00      	cmp	r3, #0
   33958:	d041      	beq.n	339de <log_mgmt_encode_entry+0x162>
    bytes_encoded = 0;
   3395a:	2500      	movs	r5, #0
            for (off = 0; off < entry->len; off += entry->chunklen) {
   3395c:	462b      	mov	r3, r5
   3395e:	e030      	b.n	339c2 <log_mgmt_encode_entry+0x146>
   33960:	2204      	movs	r2, #4
   33962:	4937      	ldr	r1, [pc, #220]	; (33a40 <log_mgmt_encode_entry+0x1c4>)
   33964:	4640      	mov	r0, r8
   33966:	f7fb f809 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   3396a:	4307      	orrs	r7, r0
   3396c:	2203      	movs	r2, #3
   3396e:	493b      	ldr	r1, [pc, #236]	; (33a5c <log_mgmt_encode_entry+0x1e0>)
   33970:	4640      	mov	r0, r8
   33972:	f7fb f803 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "bin");
   33976:	4307      	orrs	r7, r0
            break;
   33978:	e7ab      	b.n	338d2 <log_mgmt_encode_entry+0x56>
   3397a:	2204      	movs	r2, #4
   3397c:	4930      	ldr	r1, [pc, #192]	; (33a40 <log_mgmt_encode_entry+0x1c4>)
   3397e:	4640      	mov	r0, r8
   33980:	f7fa fffc 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   33984:	4307      	orrs	r7, r0
   33986:	2203      	movs	r2, #3
   33988:	4935      	ldr	r1, [pc, #212]	; (33a60 <log_mgmt_encode_entry+0x1e4>)
   3398a:	4640      	mov	r0, r8
   3398c:	f7fa fff6 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "str");
   33990:	4307      	orrs	r7, r0
            break;
   33992:	e79e      	b.n	338d2 <log_mgmt_encode_entry+0x56>
   33994:	2207      	movs	r2, #7
   33996:	4933      	ldr	r1, [pc, #204]	; (33a64 <log_mgmt_encode_entry+0x1e8>)
   33998:	4640      	mov	r0, r8
   3399a:	f7fa ffef 	bl	2e97c <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "imghash");
   3399e:	4307      	orrs	r7, r0
            err |= cbor_encode_byte_string(&lmec->mapenc, entry->imghash,
   339a0:	2204      	movs	r2, #4
   339a2:	69b1      	ldr	r1, [r6, #24]
   339a4:	4640      	mov	r0, r8
   339a6:	f7fa ffe2 	bl	2e96e <cbor_encode_byte_string>
   339aa:	4307      	orrs	r7, r0
   339ac:	e7c5      	b.n	3393a <log_mgmt_encode_entry+0xbe>
                err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, chunklen);
   339ae:	4622      	mov	r2, r4
   339b0:	68f1      	ldr	r1, [r6, #12]
   339b2:	4658      	mov	r0, fp
   339b4:	f7fa ffdb 	bl	2e96e <cbor_encode_byte_string>
   339b8:	4307      	orrs	r7, r0
                bytes_encoded += chunklen;
   339ba:	4425      	add	r5, r4
   339bc:	b2ad      	uxth	r5, r5
            for (off = 0; off < entry->len; off += entry->chunklen) {
   339be:	6a33      	ldr	r3, [r6, #32]
   339c0:	4453      	add	r3, sl
   339c2:	6932      	ldr	r2, [r6, #16]
   339c4:	469a      	mov	sl, r3
   339c6:	429a      	cmp	r2, r3
   339c8:	d919      	bls.n	339fe <log_mgmt_encode_entry+0x182>
                chunklen = entry->chunklen;
   339ca:	6a31      	ldr	r1, [r6, #32]
   339cc:	b28c      	uxth	r4, r1
                if (entry->chunklen > entry->len - off) {
   339ce:	1ad0      	subs	r0, r2, r3
   339d0:	4281      	cmp	r1, r0
   339d2:	d9ec      	bls.n	339ae <log_mgmt_encode_entry+0x132>
                    chunklen = entry->len - off;
   339d4:	b294      	uxth	r4, r2
   339d6:	b29b      	uxth	r3, r3
   339d8:	1ae3      	subs	r3, r4, r3
   339da:	b29c      	uxth	r4, r3
   339dc:	e7e7      	b.n	339ae <log_mgmt_encode_entry+0x132>
            err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   339de:	6a32      	ldr	r2, [r6, #32]
   339e0:	68f1      	ldr	r1, [r6, #12]
   339e2:	4658      	mov	r0, fp
   339e4:	f7fa ffc3 	bl	2e96e <cbor_encode_byte_string>
   339e8:	4307      	orrs	r7, r0
            bytes_encoded = entry->chunklen;
   339ea:	8c35      	ldrh	r5, [r6, #32]
   339ec:	e007      	b.n	339fe <log_mgmt_encode_entry+0x182>
        err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   339ee:	6a0a      	ldr	r2, [r1, #32]
   339f0:	68c9      	ldr	r1, [r1, #12]
   339f2:	f108 0010 	add.w	r0, r8, #16
   339f6:	f7fa ffba 	bl	2e96e <cbor_encode_byte_string>
   339fa:	4607      	mov	r7, r0
        bytes_encoded = entry->chunklen;
   339fc:	8c35      	ldrh	r5, [r6, #32]
   if (entry->offset + bytes_encoded >= entry->len) {
   339fe:	69f4      	ldr	r4, [r6, #28]
   33a00:	4425      	add	r5, r4
   33a02:	6933      	ldr	r3, [r6, #16]
   33a04:	429d      	cmp	r5, r3
   33a06:	d20d      	bcs.n	33a24 <log_mgmt_encode_entry+0x1a8>
   if (out_len) {
   33a08:	9900      	ldr	r1, [sp, #0]
   33a0a:	b131      	cbz	r1, 33a1a <log_mgmt_encode_entry+0x19e>
{   return encoder->writer->bytes_written; }
   33a0c:	f8d9 3000 	ldr.w	r3, [r9]
   33a10:	685a      	ldr	r2, [r3, #4]
       *out_len = cbor_encode_bytes_written(enc) - len;
   33a12:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   33a16:	1ad3      	subs	r3, r2, r3
   33a18:	600b      	str	r3, [r1, #0]
   if (err != 0) {
   33a1a:	b97f      	cbnz	r7, 33a3c <log_mgmt_encode_entry+0x1c0>
   return LOG_MGMT_ERR_EOK;
   33a1c:	2000      	movs	r0, #0
}
   33a1e:	b003      	add	sp, #12
   33a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err |= cbor_encoder_close_container(&lmec->mapenc, &lmec->msgenc);
   33a24:	f108 0110 	add.w	r1, r8, #16
   33a28:	4640      	mov	r0, r8
   33a2a:	f7fa ffc8 	bl	2e9be <cbor_encoder_close_container>
   33a2e:	4307      	orrs	r7, r0
       err |= cbor_encoder_close_container(enc, &lmec->mapenc);
   33a30:	4641      	mov	r1, r8
   33a32:	4648      	mov	r0, r9
   33a34:	f7fa ffc3 	bl	2e9be <cbor_encoder_close_container>
   33a38:	4307      	orrs	r7, r0
   33a3a:	e7e5      	b.n	33a08 <log_mgmt_encode_entry+0x18c>
       return LOG_MGMT_ERR_ENOMEM;
   33a3c:	2002      	movs	r0, #2
   33a3e:	e7ee      	b.n	33a1e <log_mgmt_encode_entry+0x1a2>
   33a40:	00035720 	.word	0x00035720
   33a44:	00035748 	.word	0x00035748
   33a48:	00035728 	.word	0x00035728
   33a4c:	00035758 	.word	0x00035758
   33a50:	0003572c 	.word	0x0003572c
   33a54:	00035760 	.word	0x00035760
   33a58:	00035770 	.word	0x00035770
   33a5c:	00035750 	.word	0x00035750
   33a60:	00035754 	.word	0x00035754
   33a64:	00035768 	.word	0x00035768

00033a68 <log_mgmt_cb_encode>:
{
   33a68:	b570      	push	{r4, r5, r6, lr}
   33a6a:	b088      	sub	sp, #32
   33a6c:	4605      	mov	r5, r0
   33a6e:	460c      	mov	r4, r1
    lmec = &ctxt->lmec;
   33a70:	f101 0610 	add.w	r6, r1, #16
    if (entry->offset == 0) {
   33a74:	69c3      	ldr	r3, [r0, #28]
   33a76:	b9b3      	cbnz	r3, 33aa6 <log_mgmt_cb_encode+0x3e>
    cb->enc.bytes_written = 0;
   33a78:	2200      	movs	r2, #0
   33a7a:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   33a7c:	4b19      	ldr	r3, [pc, #100]	; (33ae4 <log_mgmt_cb_encode+0x7c>)
   33a7e:	9306      	str	r3, [sp, #24]
        cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   33a80:	a906      	add	r1, sp, #24
   33a82:	a802      	add	r0, sp, #8
   33a84:	f7fa fec8 	bl	2e818 <cbor_encoder_init>
        rc = log_mgmt_encode_entry(&cnt_encoder, entry, &entry_len, lmec);
   33a88:	4633      	mov	r3, r6
   33a8a:	aa01      	add	r2, sp, #4
   33a8c:	4629      	mov	r1, r5
   33a8e:	a802      	add	r0, sp, #8
   33a90:	f7ff fef4 	bl	3387c <log_mgmt_encode_entry>
        if (rc != 0) {
   33a94:	b998      	cbnz	r0, 33abe <log_mgmt_cb_encode+0x56>
        if (ctxt->rsp_len + entry_len + 1 > LOG_MGMT_MAX_RSP_LEN) {
   33a96:	6862      	ldr	r2, [r4, #4]
   33a98:	9b01      	ldr	r3, [sp, #4]
   33a9a:	441a      	add	r2, r3
   33a9c:	1c51      	adds	r1, r2, #1
   33a9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   33aa2:	d80e      	bhi.n	33ac2 <log_mgmt_cb_encode+0x5a>
        ctxt->rsp_len += entry_len;
   33aa4:	6062      	str	r2, [r4, #4]
    rc = log_mgmt_encode_entry(ctxt->enc, entry, NULL, lmec);
   33aa6:	4633      	mov	r3, r6
   33aa8:	2200      	movs	r2, #0
   33aaa:	4629      	mov	r1, r5
   33aac:	68a0      	ldr	r0, [r4, #8]
   33aae:	f7ff fee5 	bl	3387c <log_mgmt_encode_entry>
    if (rc != 0) {
   33ab2:	b920      	cbnz	r0, 33abe <log_mgmt_cb_encode+0x56>
    ctxt->counter++;
   33ab4:	68e3      	ldr	r3, [r4, #12]
   33ab6:	3301      	adds	r3, #1
   33ab8:	60e3      	str	r3, [r4, #12]
    ctxt->last_enc_index = entry->index;
   33aba:	68ab      	ldr	r3, [r5, #8]
   33abc:	6023      	str	r3, [r4, #0]
}
   33abe:	b008      	add	sp, #32
   33ac0:	bd70      	pop	{r4, r5, r6, pc}
            if (ctxt->counter == 0) {
   33ac2:	68e2      	ldr	r2, [r4, #12]
   33ac4:	b112      	cbz	r2, 33acc <log_mgmt_cb_encode+0x64>
            return -1 * LOG_MGMT_ERR_EUNKNOWN;
   33ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33aca:	e7f8      	b.n	33abe <log_mgmt_cb_encode+0x56>
                entry->type = LOG_ETYPE_STRING;
   33acc:	7daa      	ldrb	r2, [r5, #22]
   33ace:	f36f 0203 	bfc	r2, #0, #4
   33ad2:	75aa      	strb	r2, [r5, #22]
                snprintf((char *)entry->data, LOG_MGMT_MAX_RSP_LEN,
   33ad4:	4a04      	ldr	r2, [pc, #16]	; (33ae8 <log_mgmt_cb_encode+0x80>)
   33ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
   33ada:	68e8      	ldr	r0, [r5, #12]
   33adc:	f7ff f817 	bl	32b0e <snprintf>
   33ae0:	e7f1      	b.n	33ac6 <log_mgmt_cb_encode+0x5e>
   33ae2:	bf00      	nop
   33ae4:	00033345 	.word	0x00033345
   33ae8:	00035774 	.word	0x00035774

00033aec <log_mgmt_register_group>:

void
log_mgmt_register_group(void)
{
   33aec:	b508      	push	{r3, lr}
    mgmt_register_group(&log_mgmt_group);
   33aee:	4802      	ldr	r0, [pc, #8]	; (33af8 <log_mgmt_register_group+0xc>)
   33af0:	f7e8 fac4 	bl	1c07c <mgmt_register_group>
}
   33af4:	bd08      	pop	{r3, pc}
   33af6:	bf00      	nop
   33af8:	10000514 	.word	0x10000514

00033afc <stat_mgmt_list>:
/**
 * Command handler: stat list
 */
static int
stat_mgmt_list(struct mgmt_ctxt *ctxt)
{
   33afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   33afe:	b087      	sub	sp, #28
   33b00:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   33b02:	2202      	movs	r2, #2
   33b04:	491e      	ldr	r1, [pc, #120]	; (33b80 <stat_mgmt_list+0x84>)
   33b06:	f7fa ff39 	bl	2e97c <cbor_encode_text_string>
   33b0a:	4606      	mov	r6, r0
    int rc;
    int i;

    err = CborNoError;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   33b0c:	2200      	movs	r2, #0
   33b0e:	2300      	movs	r3, #0
   33b10:	4638      	mov	r0, r7
   33b12:	f7fa febe 	bl	2e892 <cbor_encode_int>
   33b16:	4306      	orrs	r6, r0
   33b18:	2209      	movs	r2, #9
   33b1a:	491a      	ldr	r1, [pc, #104]	; (33b84 <stat_mgmt_list+0x88>)
   33b1c:	4638      	mov	r0, r7
   33b1e:	f7fa ff2d 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "stat_list");
   33b22:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &arr_enc,
   33b24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33b28:	a901      	add	r1, sp, #4
   33b2a:	4638      	mov	r0, r7
   33b2c:	f7fa ff2d 	bl	2e98a <cbor_encoder_create_array>
   33b30:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    /* Iterate the list of stat groups, encoding each group's name in the CBOR
     * array.
     */
    for (i = 0; ; i++) {
   33b32:	2500      	movs	r5, #0
        rc = stat_mgmt_impl_get_group(i, &group_name);
   33b34:	a905      	add	r1, sp, #20
   33b36:	4628      	mov	r0, r5
   33b38:	f7e8 fa04 	bl	1bf44 <stat_mgmt_impl_get_group>
   33b3c:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   33b3e:	2805      	cmp	r0, #5
   33b40:	d013      	beq.n	33b6a <stat_mgmt_list+0x6e>
            /* No more stat groups. */
            break;
        } else if (rc != 0) {
   33b42:	b958      	cbnz	r0, 33b5c <stat_mgmt_list+0x60>
            /* Error. */
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
            return rc;
        }

        err |= cbor_encode_text_stringz(&ctxt->encoder, group_name);
   33b44:	9c05      	ldr	r4, [sp, #20]
   33b46:	4620      	mov	r0, r4
   33b48:	f7e2 fffd 	bl	16b46 <strlen>
   33b4c:	4602      	mov	r2, r0
   33b4e:	4621      	mov	r1, r4
   33b50:	4638      	mov	r0, r7
   33b52:	f7fa ff13 	bl	2e97c <cbor_encode_text_string>
   33b56:	4306      	orrs	r6, r0
    for (i = 0; ; i++) {
   33b58:	3501      	adds	r5, #1
        rc = stat_mgmt_impl_get_group(i, &group_name);
   33b5a:	e7eb      	b.n	33b34 <stat_mgmt_list+0x38>
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   33b5c:	a901      	add	r1, sp, #4
   33b5e:	4638      	mov	r0, r7
   33b60:	f7fa ff2d 	bl	2e9be <cbor_encoder_close_container>

    if (err != 0) {
        return MGMT_ERR_ENOMEM;
    }
    return 0;
}
   33b64:	4620      	mov	r0, r4
   33b66:	b007      	add	sp, #28
   33b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err |= cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   33b6a:	a901      	add	r1, sp, #4
   33b6c:	4638      	mov	r0, r7
   33b6e:	f7fa ff26 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   33b72:	ea56 0300 	orrs.w	r3, r6, r0
   33b76:	d101      	bne.n	33b7c <stat_mgmt_list+0x80>
    return 0;
   33b78:	2400      	movs	r4, #0
   33b7a:	e7f3      	b.n	33b64 <stat_mgmt_list+0x68>
        return MGMT_ERR_ENOMEM;
   33b7c:	2402      	movs	r4, #2
   33b7e:	e7f1      	b.n	33b64 <stat_mgmt_list+0x68>
   33b80:	00034260 	.word	0x00034260
   33b84:	00035798 	.word	0x00035798

00033b88 <stat_mgmt_show>:
{
   33b88:	b570      	push	{r4, r5, r6, lr}
   33b8a:	b0a4      	sub	sp, #144	; 0x90
   33b8c:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   33b8e:	225c      	movs	r2, #92	; 0x5c
   33b90:	2100      	movs	r1, #0
   33b92:	a801      	add	r0, sp, #4
   33b94:	f7e2 ffaf 	bl	16af6 <memset>
   33b98:	4b26      	ldr	r3, [pc, #152]	; (33c34 <stat_mgmt_show+0xac>)
   33b9a:	9300      	str	r3, [sp, #0]
   33b9c:	2304      	movs	r3, #4
   33b9e:	f88d 3004 	strb.w	r3, [sp, #4]
   33ba2:	ab1c      	add	r3, sp, #112	; 0x70
   33ba4:	9302      	str	r3, [sp, #8]
   33ba6:	2320      	movs	r3, #32
   33ba8:	930a      	str	r3, [sp, #40]	; 0x28
    err = cbor_read_object(&ctxt->it, attrs);
   33baa:	4669      	mov	r1, sp
   33bac:	f105 001c 	add.w	r0, r5, #28
   33bb0:	f7e7 f825 	bl	1abfe <cbor_read_object>
    if (err != 0) {
   33bb4:	2800      	cmp	r0, #0
   33bb6:	d138      	bne.n	33c2a <stat_mgmt_show+0xa2>
   33bb8:	4604      	mov	r4, r0
   33bba:	2202      	movs	r2, #2
   33bbc:	491e      	ldr	r1, [pc, #120]	; (33c38 <stat_mgmt_show+0xb0>)
   33bbe:	4628      	mov	r0, r5
   33bc0:	f7fa fedc 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   33bc4:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   33bc6:	2200      	movs	r2, #0
   33bc8:	2300      	movs	r3, #0
   33bca:	4628      	mov	r0, r5
   33bcc:	f7fa fe61 	bl	2e892 <cbor_encode_int>
   33bd0:	4304      	orrs	r4, r0
   33bd2:	2204      	movs	r2, #4
   33bd4:	4917      	ldr	r1, [pc, #92]	; (33c34 <stat_mgmt_show+0xac>)
   33bd6:	4628      	mov	r0, r5
   33bd8:	f7fa fed0 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "name");
   33bdc:	4304      	orrs	r4, r0
   33bde:	a81c      	add	r0, sp, #112	; 0x70
   33be0:	f7e2 ffb1 	bl	16b46 <strlen>
   33be4:	4602      	mov	r2, r0
   33be6:	a91c      	add	r1, sp, #112	; 0x70
   33be8:	4628      	mov	r0, r5
   33bea:	f7fa fec7 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, stat_name);
   33bee:	4304      	orrs	r4, r0
   33bf0:	2206      	movs	r2, #6
   33bf2:	4912      	ldr	r1, [pc, #72]	; (33c3c <stat_mgmt_show+0xb4>)
   33bf4:	4628      	mov	r0, r5
   33bf6:	f7fa fec1 	bl	2e97c <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "fields");
   33bfa:	4304      	orrs	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &map_enc,
   33bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33c00:	a918      	add	r1, sp, #96	; 0x60
   33c02:	4628      	mov	r0, r5
   33c04:	f7fa fec6 	bl	2e994 <cbor_encoder_create_map>
   33c08:	4304      	orrs	r4, r0
    rc = stat_mgmt_impl_foreach_entry(stat_name, stat_mgmt_cb_encode,
   33c0a:	aa18      	add	r2, sp, #96	; 0x60
   33c0c:	490c      	ldr	r1, [pc, #48]	; (33c40 <stat_mgmt_show+0xb8>)
   33c0e:	a81c      	add	r0, sp, #112	; 0x70
   33c10:	f7e8 f9aa 	bl	1bf68 <stat_mgmt_impl_foreach_entry>
   33c14:	4606      	mov	r6, r0
    err |= cbor_encoder_close_container(&ctxt->encoder, &map_enc);
   33c16:	a918      	add	r1, sp, #96	; 0x60
   33c18:	4628      	mov	r0, r5
   33c1a:	f7fa fed0 	bl	2e9be <cbor_encoder_close_container>
    if (err != 0) {
   33c1e:	ea54 0300 	orrs.w	r3, r4, r0
   33c22:	d104      	bne.n	33c2e <stat_mgmt_show+0xa6>
}
   33c24:	4630      	mov	r0, r6
   33c26:	b024      	add	sp, #144	; 0x90
   33c28:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
   33c2a:	2603      	movs	r6, #3
   33c2c:	e7fa      	b.n	33c24 <stat_mgmt_show+0x9c>
        rc = MGMT_ERR_ENOMEM;
   33c2e:	2602      	movs	r6, #2
   33c30:	e7f8      	b.n	33c24 <stat_mgmt_show+0x9c>
   33c32:	bf00      	nop
   33c34:	00035710 	.word	0x00035710
   33c38:	00034260 	.word	0x00034260
   33c3c:	000357a4 	.word	0x000357a4
   33c40:	00033c45 	.word	0x00033c45

00033c44 <stat_mgmt_cb_encode>:
{
   33c44:	b570      	push	{r4, r5, r6, lr}
   33c46:	4605      	mov	r5, r0
   33c48:	460c      	mov	r4, r1
    err |= cbor_encode_text_stringz(enc, entry->name);
   33c4a:	6806      	ldr	r6, [r0, #0]
   33c4c:	4630      	mov	r0, r6
   33c4e:	f7e2 ff7a 	bl	16b46 <strlen>
   33c52:	4602      	mov	r2, r0
   33c54:	4631      	mov	r1, r6
   33c56:	4620      	mov	r0, r4
   33c58:	f7fa fe90 	bl	2e97c <cbor_encode_text_string>
   33c5c:	4606      	mov	r6, r0
    err |= cbor_encode_uint(enc, entry->value);
   33c5e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   33c62:	4620      	mov	r0, r4
   33c64:	f7fa fddd 	bl	2e822 <cbor_encode_uint>
    if (err != 0) {
   33c68:	ea50 0306 	orrs.w	r3, r0, r6
   33c6c:	d101      	bne.n	33c72 <stat_mgmt_cb_encode+0x2e>
    return 0;
   33c6e:	2000      	movs	r0, #0
}
   33c70:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   33c72:	2002      	movs	r0, #2
   33c74:	e7fc      	b.n	33c70 <stat_mgmt_cb_encode+0x2c>
	...

00033c78 <stat_mgmt_register_group>:

void
stat_mgmt_register_group(void)
{
   33c78:	b508      	push	{r3, lr}
    mgmt_register_group(&stat_mgmt_group);
   33c7a:	4802      	ldr	r0, [pc, #8]	; (33c84 <stat_mgmt_register_group+0xc>)
   33c7c:	f7e8 f9fe 	bl	1c07c <mgmt_register_group>
}
   33c80:	bd08      	pop	{r3, pc}
   33c82:	bf00      	nop
   33c84:	10000550 	.word	0x10000550
   33c88:	18110010 	.word	0x18110010
   33c8c:	28030010 	.word	0x28030010
   33c90:	28020010 	.word	0x28020010
   33c94:	28000010 	.word	0x28000010
   33c98:	28030010 	.word	0x28030010
   33c9c:	00000000 	.word	0x00000000
   33ca0:	01000000 	.word	0x01000000
   33ca4:	02000000 	.word	0x02000000
   33ca8:	04000000 	.word	0x04000000
   33cac:	08000000 	.word	0x08000000
   33cb0:	10000000 	.word	0x10000000
   33cb4:	20000000 	.word	0x20000000
   33cb8:	40000000 	.word	0x40000000
   33cbc:	80000000 	.word	0x80000000
   33cc0:	1b000000 	.word	0x1b000000
   33cc4:	36000000 	.word	0x36000000
   33cc8:	65736552 	.word	0x65736552
   33ccc:	6e697474 	.word	0x6e697474
   33cd0:	74732067 	.word	0x74732067
   33cd4:	3b657461 	.word	0x3b657461
   33cd8:	61657220 	.word	0x61657220
   33cdc:	3d6e6f73 	.word	0x3d6e6f73
   33ce0:	000a6425 	.word	0x000a6425
   33ce4:	6f727265 	.word	0x6f727265
   33ce8:	65642072 	.word	0x65642072
   33cec:	6d726574 	.word	0x6d726574
   33cf0:	6e696e69 	.word	0x6e696e69
   33cf4:	64612067 	.word	0x64612067
   33cf8:	73657264 	.word	0x73657264
   33cfc:	79742073 	.word	0x79742073
   33d00:	203b6570 	.word	0x203b6570
   33d04:	253d6372 	.word	0x253d6372
   33d08:	00000a64 	.word	0x00000a64
   33d0c:	6f727265 	.word	0x6f727265
   33d10:	65732072 	.word	0x65732072
   33d14:	6e697474 	.word	0x6e697474
   33d18:	64612067 	.word	0x64612067
   33d1c:	74726576 	.word	0x74726576
   33d20:	6d657369 	.word	0x6d657369
   33d24:	20746e65 	.word	0x20746e65
   33d28:	61746164 	.word	0x61746164
   33d2c:	6372203b 	.word	0x6372203b
   33d30:	0a64253d 	.word	0x0a64253d
   33d34:	00000000 	.word	0x00000000
   33d38:	6f727265 	.word	0x6f727265
   33d3c:	6e652072 	.word	0x6e652072
   33d40:	696c6261 	.word	0x696c6261
   33d44:	6120676e 	.word	0x6120676e
   33d48:	72657664 	.word	0x72657664
   33d4c:	65736974 	.word	0x65736974
   33d50:	746e656d 	.word	0x746e656d
   33d54:	6372203b 	.word	0x6372203b
   33d58:	0a64253d 	.word	0x0a64253d
   33d5c:	00000000 	.word	0x00000000
   33d60:	646e6168 	.word	0x646e6168
   33d64:	253d656c 	.word	0x253d656c
   33d68:	756f2064 	.word	0x756f2064
   33d6c:	746f5f72 	.word	0x746f5f72
   33d70:	64615f61 	.word	0x64615f61
   33d74:	745f7264 	.word	0x745f7264
   33d78:	3d657079 	.word	0x3d657079
   33d7c:	6f206425 	.word	0x6f206425
   33d80:	6f5f7275 	.word	0x6f5f7275
   33d84:	615f6174 	.word	0x615f6174
   33d88:	3d726464 	.word	0x3d726464
   33d8c:	00000000 	.word	0x00000000
   33d90:	72756f20 	.word	0x72756f20
   33d94:	5f64695f 	.word	0x5f64695f
   33d98:	72646461 	.word	0x72646461
   33d9c:	7079745f 	.word	0x7079745f
   33da0:	64253d65 	.word	0x64253d65
   33da4:	72756f20 	.word	0x72756f20
   33da8:	5f64695f 	.word	0x5f64695f
   33dac:	72646461 	.word	0x72646461
   33db0:	0000003d 	.word	0x0000003d
   33db4:	65657020 	.word	0x65657020
   33db8:	746f5f72 	.word	0x746f5f72
   33dbc:	64615f61 	.word	0x64615f61
   33dc0:	745f7264 	.word	0x745f7264
   33dc4:	3d657079 	.word	0x3d657079
   33dc8:	70206425 	.word	0x70206425
   33dcc:	5f726565 	.word	0x5f726565
   33dd0:	5f61746f 	.word	0x5f61746f
   33dd4:	72646461 	.word	0x72646461
   33dd8:	0000003d 	.word	0x0000003d
   33ddc:	65657020 	.word	0x65657020
   33de0:	64695f72 	.word	0x64695f72
   33de4:	6464615f 	.word	0x6464615f
   33de8:	79745f72 	.word	0x79745f72
   33dec:	253d6570 	.word	0x253d6570
   33df0:	65702064 	.word	0x65702064
   33df4:	695f7265 	.word	0x695f7265
   33df8:	64615f64 	.word	0x64615f64
   33dfc:	003d7264 	.word	0x003d7264
   33e00:	6e6f6320 	.word	0x6e6f6320
   33e04:	74695f6e 	.word	0x74695f6e
   33e08:	253d6c76 	.word	0x253d6c76
   33e0c:	6f632064 	.word	0x6f632064
   33e10:	6c5f6e6e 	.word	0x6c5f6e6e
   33e14:	6e657461 	.word	0x6e657461
   33e18:	253d7963 	.word	0x253d7963
   33e1c:	75732064 	.word	0x75732064
   33e20:	76726570 	.word	0x76726570
   33e24:	6f697369 	.word	0x6f697369
   33e28:	69745f6e 	.word	0x69745f6e
   33e2c:	756f656d 	.word	0x756f656d
   33e30:	64253d74 	.word	0x64253d74
   33e34:	636e6520 	.word	0x636e6520
   33e38:	74707972 	.word	0x74707972
   33e3c:	253d6465 	.word	0x253d6465
   33e40:	75612064 	.word	0x75612064
   33e44:	6e656874 	.word	0x6e656874
   33e48:	61636974 	.word	0x61636974
   33e4c:	3d646574 	.word	0x3d646574
   33e50:	62206425 	.word	0x62206425
   33e54:	65646e6f 	.word	0x65646e6f
   33e58:	64253d64 	.word	0x64253d64
   33e5c:	0000000a 	.word	0x0000000a
   33e60:	6c696166 	.word	0x6c696166
   33e64:	00006465 	.word	0x00006465
   33e68:	61747365 	.word	0x61747365
   33e6c:	73696c62 	.word	0x73696c62
   33e70:	00646568 	.word	0x00646568
   33e74:	6e6e6f63 	.word	0x6e6e6f63
   33e78:	69746365 	.word	0x69746365
   33e7c:	25206e6f 	.word	0x25206e6f
   33e80:	73203b73 	.word	0x73203b73
   33e84:	75746174 	.word	0x75746174
   33e88:	64253d73 	.word	0x64253d73
   33e8c:	00000020 	.word	0x00000020
   33e90:	63736964 	.word	0x63736964
   33e94:	656e6e6f 	.word	0x656e6e6f
   33e98:	203b7463 	.word	0x203b7463
   33e9c:	73616572 	.word	0x73616572
   33ea0:	253d6e6f 	.word	0x253d6e6f
   33ea4:	00002064 	.word	0x00002064
   33ea8:	6e6e6f63 	.word	0x6e6e6f63
   33eac:	69746365 	.word	0x69746365
   33eb0:	75206e6f 	.word	0x75206e6f
   33eb4:	74616470 	.word	0x74616470
   33eb8:	203b6465 	.word	0x203b6465
   33ebc:	74617473 	.word	0x74617473
   33ec0:	253d7375 	.word	0x253d7375
   33ec4:	00002064 	.word	0x00002064
   33ec8:	65766461 	.word	0x65766461
   33ecc:	73697472 	.word	0x73697472
   33ed0:	6f632065 	.word	0x6f632065
   33ed4:	656c706d 	.word	0x656c706d
   33ed8:	203b6574 	.word	0x203b6574
   33edc:	73616572 	.word	0x73616572
   33ee0:	253d6e6f 	.word	0x253d6e6f
   33ee4:	00000064 	.word	0x00000064
   33ee8:	72636e65 	.word	0x72636e65
   33eec:	69747079 	.word	0x69747079
   33ef0:	63206e6f 	.word	0x63206e6f
   33ef4:	676e6168 	.word	0x676e6168
   33ef8:	76652065 	.word	0x76652065
   33efc:	3b746e65 	.word	0x3b746e65
   33f00:	61747320 	.word	0x61747320
   33f04:	3d737574 	.word	0x3d737574
   33f08:	00206425 	.word	0x00206425
   33f0c:	73627573 	.word	0x73627573
   33f10:	62697263 	.word	0x62697263
   33f14:	76652065 	.word	0x76652065
   33f18:	3b746e65 	.word	0x3b746e65
   33f1c:	6e6f6320 	.word	0x6e6f6320
   33f20:	61685f6e 	.word	0x61685f6e
   33f24:	656c646e 	.word	0x656c646e
   33f28:	2064253d 	.word	0x2064253d
   33f2c:	72747461 	.word	0x72747461
   33f30:	6e61685f 	.word	0x6e61685f
   33f34:	3d656c64 	.word	0x3d656c64
   33f38:	72206425 	.word	0x72206425
   33f3c:	6f736165 	.word	0x6f736165
   33f40:	64253d6e 	.word	0x64253d6e
   33f44:	65727020 	.word	0x65727020
   33f48:	253d6e76 	.word	0x253d6e76
   33f4c:	75632064 	.word	0x75632064
   33f50:	253d6e72 	.word	0x253d6e72
   33f54:	72702064 	.word	0x72702064
   33f58:	3d697665 	.word	0x3d697665
   33f5c:	63206425 	.word	0x63206425
   33f60:	3d697275 	.word	0x3d697275
   33f64:	000a6425 	.word	0x000a6425
   33f68:	2075746d 	.word	0x2075746d
   33f6c:	61647075 	.word	0x61647075
   33f70:	65206574 	.word	0x65206574
   33f74:	746e6576 	.word	0x746e6576
   33f78:	6f63203b 	.word	0x6f63203b
   33f7c:	685f6e6e 	.word	0x685f6e6e
   33f80:	6c646e61 	.word	0x6c646e61
   33f84:	64253d65 	.word	0x64253d65
   33f88:	64696320 	.word	0x64696320
   33f8c:	2064253d 	.word	0x2064253d
   33f90:	3d75746d 	.word	0x3d75746d
   33f94:	000a6425 	.word	0x000a6425
   33f98:	78323025 	.word	0x78323025
   33f9c:	3230253a 	.word	0x3230253a
   33fa0:	30253a78 	.word	0x30253a78
   33fa4:	253a7832 	.word	0x253a7832
   33fa8:	3a783230 	.word	0x3a783230
   33fac:	78323025 	.word	0x78323025
   33fb0:	3230253a 	.word	0x3230253a
   33fb4:	00000078 	.word	0x00000078
   33fb8:	69676572 	.word	0x69676572
   33fbc:	72657473 	.word	0x72657473
   33fc0:	73206465 	.word	0x73206465
   33fc4:	69767265 	.word	0x69767265
   33fc8:	25206563 	.word	0x25206563
   33fcc:	69772073 	.word	0x69772073
   33fd0:	68206874 	.word	0x68206874
   33fd4:	6c646e61 	.word	0x6c646e61
   33fd8:	64253d65 	.word	0x64253d65
   33fdc:	0000000a 	.word	0x0000000a
   33fe0:	69676572 	.word	0x69676572
   33fe4:	72657473 	.word	0x72657473
   33fe8:	20676e69 	.word	0x20676e69
   33fec:	72616863 	.word	0x72616863
   33ff0:	65746361 	.word	0x65746361
   33ff4:	74736972 	.word	0x74736972
   33ff8:	25206369 	.word	0x25206369
   33ffc:	69772073 	.word	0x69772073
   34000:	64206874 	.word	0x64206874
   34004:	685f6665 	.word	0x685f6665
   34008:	6c646e61 	.word	0x6c646e61
   3400c:	64253d65 	.word	0x64253d65
   34010:	6c617620 	.word	0x6c617620
   34014:	6e61685f 	.word	0x6e61685f
   34018:	3d656c64 	.word	0x3d656c64
   3401c:	000a6425 	.word	0x000a6425
   34020:	69676572 	.word	0x69676572
   34024:	72657473 	.word	0x72657473
   34028:	20676e69 	.word	0x20676e69
   3402c:	63736564 	.word	0x63736564
   34030:	74706972 	.word	0x74706972
   34034:	2520726f 	.word	0x2520726f
   34038:	69772073 	.word	0x69772073
   3403c:	68206874 	.word	0x68206874
   34040:	6c646e61 	.word	0x6c646e61
   34044:	64253d65 	.word	0x64253d65
   34048:	0000000a 	.word	0x0000000a

0003404c <gatt_svr_chr_sec_test_rand_uuid>:
   3404c:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   3405c:	0000005c                                \...

00034060 <gatt_svr_chr_sec_test_static_uuid>:
   34060:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   34070:	0000005c                                \...

00034074 <gatt_svr_svc_sec_test_uuid>:
   34074:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   34084:	00000059                                Y...

00034088 <gatt_svr_svcs>:
   34088:	00000001 00034074 00000000 10000104     ....t@..........
	...
   340a8:	696c7073 00000074 74617473 00007375     split...status..

000340b8 <__compound_literal.0>:
   340b8:	000340b0 10000597 00000000 00000002     .@..............
	...
   340d8:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   340e8:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   340f8:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   34108:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   34118:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   34128:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   34138:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   34148:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   34158:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   34168:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   34178:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   34188:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   34198:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   341a8:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   341b8:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   341c8:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   341d8:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   341e8:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   341f8:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   34208:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   34218:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   34228:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   34238:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   34248:	656c6469 00000000 6e69616d 00000000     idle....main....
   34258:	7379736d 0000315f 00006372              msys_1..rc..

00034264 <imgr_mgmt_handlers>:
	...
   34298:	00016c31 252e7525 75252e75 756c252e     1l..%u.%u.%u.%lu
   342a8:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....

000342b8 <g_smp_cbor_cfg>:
   342b8:	00016d63 00016d5b 00016d4b 00016d23     cm..[m..Km..#m..
   342c8:	00016d11 00016d01 00016cf5              .m...m...l..

000342d4 <gatt_svr_chr_smp>:
   342d4:	997c4880 9e261174 ce4e01ae 2e7828fb     .H|.t.&...N..(x.
   342e4:	000000da                                ....

000342e8 <gatt_svr_svc_smp>:
   342e8:	60aa8480 8b8a5274 b74cd386 53dc1d1d     ...`tR....L....S
   342f8:	0000008d                                ....

000342fc <gatt_svr_svcs>:
   342fc:	00000001 000342e8 00000000 10000194     .....B..........
	...
   3431c:	0000002f 646c6c25 00000000 756c6c25     /...%lld....%llu
   3432c:	00000000 006c6176 65766173 00000000     ....val.save....

0003433c <conf_mgmt_handlers>:
   3433c:	00017c31 00017b79 6c363025 00002075     1|..y{..%06lu ..
   3434c:	74726175 00000030 682f6469 00646977     uart0...id/hwid.
   3435c:	622f6469 00007073 612f6469 00007070     id/bsp..id/app..
   3436c:	6d2f6469 61686766 00006873 732f6469     id/mfghash..id/s
   3437c:	61697265 0000006c 64697768 00000000     erial...hwid....
   3438c:	00707362 00707061 69726573 00006c61     bsp.app.serial..
   3439c:	6867666d 00687361 00006469 70656c62     mfghash.id..blep
   343ac:	00687072 6c6f7061 5f336f6c 00627665     rph.apollo3_evb.
   343bc:	4f424552 0000544f 41464544 00544c55     REBOOT..DEFAULT.
   343cc:	424d494e 485f454c 0054534f 3d73745b     NIMBLE_HOST.[ts=
   343dc:	756c6c25 202c7375 3d646f6d 6c207525     %lluus, mod=%u l
   343ec:	6c657665 2075253d 00000000 303d6869     evel=%u ....ih=0
   343fc:	25782578 25782578 00000078 0000005d     x%x%x%x%x...]...
   3440c:	736e6f63 00656c6f                       console.

00034414 <log_console_handler>:
   34414:	00000000 00019373 00000000 00019451     ....s.......Q...
   34424:	00019411 00000000 00000000 00019377     ............w...
   34434:	00000000 0001937b 00000000 6c646f6d     ....{.......modl
   34444:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   34454:	6f626572 722f746f 6f6f6265 6e635f74     reboot/reboot_cn
   34464:	00000074 6f626572 772f746f 74746972     t...reboot/writt
   34474:	00006e65 6f626572 635f746f 0000746e     en..reboot_cnt..
   34484:	74697277 006e6574 6f626572 6c5f746f     written.reboot_l
   34494:	0000676f 45534552 49505f54 0000004e     og..RESET_PIN...
   344a4:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   344b4:	574f5242 54554f4e 00000000 55514552     BROWNOUT....REQU
   344c4:	45545345 00000044 54535953 4f5f4d45     ESTED...SYSTEM_O
   344d4:	495f4646 0000544e 00554644 44524148     FF_INT..DFU.HARD
   344e4:	00000000 4548544f 30203a52 00582578     ....OTHER: 0x%X.
   344f4:	4e4b4e55 204e574f 00006425 006e7372     UNKNOWN %d..rsn.
   34504:	00746e63 00676d69 252e7525 75252e75     cnt.img.%u.%u.%u
   34514:	0075252e 68736168 00000000 00656964     .%u.hash....die.
   34524:	253a7325 00000064 00006370 67616c66     %s:%d...pc..flag
   34534:	00000073 69746361 00006576 00207325     s...active..%s .
   34544:	746f6f62 656c6261 00000000 666e6f63     bootable....conf
   34554:	656d7269 00000064 646e6570 00676e69     irmed...pending.
   34564:	00000031 6f626572 0000746f 00642573     1...reboot..s%d.
   34574:	74617473 00000000 7465733c 0000003e     stat....<set>...
   34584:	0066666f 67616d69 00000065 61746164     off.image...data
   34594:	00000000 006e656c 00616873 72677075     ....len.sha.upgr
   345a4:	00656461                                ade.

000345a8 <img_mgmt_handlers>:
   345a8:	0001b25d 0001b3fd 00000000 0001aed5     ]...............
	...
   345d4:	0001ae55 67616d69 00007365 746f6c73     U...images..slot
   345e4:	00000000 73726576 006e6f69 6d726570     ....version.perm
   345f4:	6e656e61 00000074 696c7073 61745374     anent...splitSta
   34604:	00737574 666e6f63 006d7269 74737075     tus.confirm.upst
   34614:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   34624:	00000000 666e6f63 00000000 55424544     ....conf....DEBU
   34634:	00000047 4f525245 00000052 4f464e49     G...ERROR...INFO
   34644:	00000000 4e524157 00000000 4e4b4e55     ....WARN....UNKN
   34654:	004e574f 54495243 4c414349 00000000     OWN.CRITICAL....
   34664:	6f697270 00000000 00646974 74617473     prio....tid.stat
   34674:	00000065 756b7473 00006573 736b7473     e...stkuse..stks
   34684:	00007a69 63777363 0000746e 746e7572     iz..cswcnt..runt
   34694:	00656d69 7473616c 6568635f 6e696b63     ime.last_checkin
   346a4:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   346b4:	00000000 6b736174 00000073 00000072     ....tasks...r...

000346c4 <os_mgmt_group_handlers>:
   346c4:	0001bd91 0001bd91 00000000 00000000     ................
   346d4:	0001bd21 00000000 00000000 00000000     !...............
	...
   346f0:	0001bbd1 5f656c62 00006c6c 5f656c62     ....ble_ll..ble_
   34700:	635f6c6c 006e6e6f                       ll_conn.

00034708 <g_ble_ll_ctrl_pkt_lengths>:
   34708:	1601070b 0100000c 00000808 17080105     ................
   34718:	00000217 02020808 00010204 2a010122     ............"..*
   34728:	03030f08 0a0a0404 00000a03              ............

00034734 <g_ble_ll_supp_cmds>:
   34734:	00000020 00004000 00000000 22280000      ....@........("
	...
   3474c:	ffc3f700 0000000e 0ff9f000 07800000     ................
	...

00034764 <g_ble_sca_ppm_tbl>:
   34764:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....
   34774:	5f656c62 00747461                       ble_att.

0003477c <ble_att_rx_dispatch>:
   3477c:	00000001 000228c9 00000002 0002395d     .....(......]9..
   3478c:	00000003 000228f1 00000004 000239f1     .....(.......9..
   3479c:	00000005 00022959 00000006 00023a5f     ....Y)......_:..
   347ac:	00000007 00022961 00000008 00023adb     ....a).......:..
   347bc:	00000009 00022969 0000000a 00023b81     ....i).......;..
   347cc:	0000000b 00022971 0000000c 00023bff     ....q).......;..
   347dc:	0000000d 00022979 0000000e 00023c81     ....y).......<..
   347ec:	0000000f 0002297d 00000010 00023cbf     ....}).......<..
   347fc:	00000011 00022985 00000012 00023d81     .....).......=..
   3480c:	00000013 00022989 00000016 00023e43     .....)......C>..
   3481c:	00000017 00022991 00000018 00023ef5     .....).......>..
   3482c:	00000019 00022999 0000001b 00023fa9     .....).......?..
   3483c:	0000001d 00023fe7 0000001e 00022a1d     .....?.......*..
   3484c:	00000052 00023def 5f656c62 5f747461     R....=..ble_att_
   3485c:	5f727673 72746e65 6f705f79 00006c6f     svr_entry_pool..
   3486c:	5f656c62 5f747461 5f727673 70657270     ble_att_svr_prep
   3487c:	746e655f 705f7972 006c6f6f 6e756f63     _entry_pool.coun
   3488c:	64253d74 00000020 72746e65 64252d79     t=%d ...entry-%d
   3489c:	64617b3d 745f7264 3d657079 61206425     ={addr_type=%d a
   348ac:	3d726464 00000000 0000207d 63736964     ddr=....} ..disc
   348bc:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   348cc:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   348dc:	72696420 5f746365 72646461 0000003d      direct_addr=...
   348ec:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   348fc:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   3490c:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   3491c:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   3492c:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   3493c:	6d5f6c76 253d7861 00000064 6e6e6f63     vl_max=%d...conn
   3494c:	69746365 70206e6f 6d617261 72657465     ection parameter
   3495c:	64707520 3b657461 6e6f6320 61685f6e      update; conn_ha
   3496c:	656c646e 2064253d 6c767469 6e696d5f     ndle=%d itvl_min
   3497c:	2064253d 6c767469 78616d5f 2064253d     =%d itvl_max=%d 
   3498c:	6574616c 3d79636e 73206425 72657075     latency=%d super
   3499c:	69736976 745f6e6f 6f656d69 253d7475     vision_timeout=%
   349ac:	696d2064 65635f6e 6e656c5f 2064253d     d min_ce_len=%d 
   349bc:	5f78616d 6c5f6563 253d6e65 00000064     max_ce_len=%d...
   349cc:	20504147 636f7270 72756465 6e692065     GAP procedure in
   349dc:	61697469 3a646574 74657320 69687720     itiated: set whi
   349ec:	696c6574 203b7473 00000000 20504147     telist; ....GAP 
   349fc:	636f7270 72756465 6e692065 61697469     procedure initia
   34a0c:	3a646574 76646120 69747265 203b6573     ted: advertise; 
   34a1c:	00000000 746e6f63 6c6c6f72 72207265     ....controller r
   34a2c:	726f7065 20646574 61766e69 2064696c     eported invalid 
   34a3c:	6f727265 6f632072 69206564 6f63206e     error code in co
   34a4c:	6f636e6e 656c706d 65206574 746e6576     nncomplete event
   34a5c:	7525203a 00000000 20504147 636f7270     : %u....GAP proc
   34a6c:	72756465 6e692065 61697469 3a646574     edure initiated:
   34a7c:	6f747320 64612070 74726576 6e697369      stop advertisin
   34a8c:	000a2e67 20504147 636f7270 72756465     g...GAP procedur
   34a9c:	6e692065 61697469 3a646574 6e616320     e initiated: can
   34aac:	206c6563 6e6e6f63 69746365 000a6e6f     cel connection..
   34abc:	20504147 636f7270 72756465 6e692065     GAP procedure in
   34acc:	61697469 3a646574 72657420 616e696d     itiated: termina
   34adc:	63206574 656e6e6f 6f697463 63203b6e     te connection; c
   34aec:	5f6e6e6f 646e6168 253d656c 63682064     onn_handle=%d hc
   34afc:	65725f69 6e6f7361 0a64253d 00000000     i_reason=%d.....
   34b0c:	20504147 636f7270 72756465 6e692065     GAP procedure in
   34b1c:	61697469 3a646574 00000020 5f656c62     itiated: ...ble_
   34b2c:	5f706167 61647075 00006574 5f656c62     gap_update..ble_
   34b3c:	00706167 54544147 6f727020 75646563     gap.GATT procedu
   34b4c:	69206572 6974696e 64657461 7325203a     re initiated: %s
   34b5c:	00000000 69746f6e 203b7966 00000000     ....notify; ....
   34b6c:	5f747461 646e6168 253d656c 00000a64     att_handle=%d...
   34b7c:	69646e69 65746163 0000203b 5f656c62     indicate; ..ble_
   34b8c:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.
   34b9c:	5f656c62 74746167 00000063              ble_gattc...

00034ba8 <ble_gattc_err_dispatch>:
   34ba8:	0002594f 0002599f 000259fb 00025a57     OY...Y...Y..WZ..
   34bb8:	00025ab7 00025b13 00025b77 00025bd3     .Z...[..w[...[..
   34bc8:	00025c23 00025c73 00025cdf 00025f61     #\..s\...\..a_..
   34bd8:	00025fdb 00025fbb 00026429              ._..._..)d..

00034be4 <ble_gattc_resume_dispatch>:
   34be4:	00000000 00026331 000262e3 00026285     ....1c...b...b..
   34bf4:	0002622d 000261e1 00026197 00000000     -b...a...a......
   34c04:	00000000 0002615f 00000000 00000000     ...._a..........
   34c14:	00026121 0002608f 00000000              !a...`......

00034c20 <ble_gattc_tmo_dispatch>:
   34c20:	00025941 00025991 000259ed 00025a49     AY...Y...Y..IZ..
   34c30:	00025aa9 00025b05 00025b69 00025bc5     .Z...[..i[...[..
   34c40:	00025c15 00025c65 00025cd1 00025f55     .\..e\...\..U_..
   34c50:	00025d21 00025d71 00025f01 5f656c62     !]..q]..._..ble_
   34c60:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   34c70:	00006c6f 5f656c62 74746167 00000073     ol..ble_gatts...
   34c80:	6c696146 74206465 6572206f 726f7473     Failed to restor
   34c90:	52492065 6620734b 206d6f72 726f7473     e IRKs from stor
   34ca0:	73203b65 75746174 64253d73 0000000a     e; status=%d....
   34cb0:	5f656c62 685f7368 655f6963 6f705f76     ble_hs_hci_ev_po
   34cc0:	00006c6f 5f656c62 00007368 5f656c62     ol..ble_hs..ble_
   34cd0:	635f7368 5f6e6e6f 6c6f6f70 00000000     hs_conn_pool....

00034ce0 <ble_hs_conn_null_addr>:
	...
   34ce8:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

00034cf8 <ble_hs_hci_evt_dispatch>:
   34cf8:	0000003e 00028f25 00000013 00029025     >...%.......%...
   34d08:	00000005 00028ff3 00000008 00028fdf     ................
   34d18:	00000030 00028fcb 00000010 00028fb7     0...............

00034d28 <ble_hs_hci_evt_le_dispatch>:
   34d28:	00000000 00029221 0002911d 000292c3     ....!...........
   34d38:	000292af 0002929b 00029287 00000000     ................
	...
   34d50:	0002919b 0002909b 00029087 00028f97     ................
   34d60:	00028f9b 00028f9f 00028fa3 00028fab     ................
   34d70:	00028faf 00028fb3 00000000 00000000     ................
	...
   34d88:	00028fa7 65766461 73697472 74207265     ....advertiser t
   34d98:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   34da8:	00000a65                                e...

00034dac <priv_addr_types.23229>:
   34dac:	00000203                                ....

00034db0 <pub_addr_types.23228>:
   34db0:	00000001 6c696166 74206465 6f63206f     ....failed to co
   34dc0:	6769666e 20657275 74736572 6465726f     nfigure restored
   34dd0:	4b524920 0000000a                        IRK....

00034dd8 <ble_hs_misc_null_addr>:
	...
   34de0:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   34df0:	00000000 5f656c62 735f7368 5f706f74     ....ble_hs_stop_
   34e00:	6d726574 74616e69 69745f65 756f656d     terminate_timeou
   34e10:	62635f74 2064252c 6e6e6f63 69746365     t_cb,%d connecti
   34e20:	73286e6f 74732029 206c6c69 0a207075     on(s) still up .
   34e30:	00000000 5f656c62 6163326c 68635f70     ....ble_l2cap_ch
   34e40:	705f6e61 006c6f6f 5f656c62 6163326c     an_pool.ble_l2ca
   34e50:	00000070 5f656c62 6163326c 69735f70     p...ble_l2cap_si
   34e60:	72705f67 705f636f 006c6f6f              g_proc_pool.

00034e6c <ble_l2cap_sig_dispatch>:
   34e6c:	00000000 0002a1f1 00000000 0002a089     ................
   34e7c:	00000000 0002a089 0002a089 0002a089     ................
   34e8c:	00000000 0002a089 00000000 0002a089     ................
   34e9c:	00000000 0002a089 00000000 0002a089     ................
   34eac:	00000000 0002a089 0002a2d5 0002a205     ................
   34ebc:	0002a089 0002a089 0002a089 0002a089     ................
   34ecc:	0002a089 0002a089 0002a089 5f656c62     ............ble_
   34edc:	705f6d73 5f726961 6c696166 2078745f     sm_pair_fail_tx 
   34eec:	6c696166 202c6465 3d206372 0a642520     failed, rc = %d.
   34efc:	00000000 5f656c62 705f6d73 5f636f72     ....ble_sm_proc_
   34f0c:	6c6f6f70 00000000                       pool....

00034f14 <ble_sm_dispatch>:
   34f14:	00000000 0002b4c7 0002b709 0002b65b     ............[...
   34f24:	0002bc19 0002b09d 0002b441 0002b3c7     ........A.......
   34f34:	0002b347 0002b2cd 0002b24d 0002bde5     G.......M.......
   34f44:	0002a675 0002a675 0002a675              u...u...u...

00034f50 <ble_sm_state_dispatch>:
   34f50:	0002bb65 0002ae6d 0002ae5b 0002adbd     e...m...[.......
   34f60:	0002ae0d 0002ad33 0002ad25 0002aa4b     ....3...%...K...
   34f70:	0002a8b5 00000000 00000000              ............

00034f7c <ble_sm_lgcy_init_ioa>:
   34f7c:	00020000 02000002 03030200 00030002     ................
   34f8c:	00000000 00020303 00000003              ............

00034f98 <ble_sm_lgcy_resp_ioa>:
   34f98:	00030000 03000003 02020300 00020002     ................
   34fa8:	00000000 00030202 00000002 30257830     ............0x%0
   34fb8:	00786834 30257830 00786c38 78323025     4hx.0x%08lx.%02x
   34fc8:	78323025 78323025 78323025 3230252d     %02x%02x%02x-%02
   34fd8:	32302578 30252d78 30257832 252d7832     x%02x-%02x%02x-%
   34fe8:	25783230 2d783230 78323025 78323025     02x%02x-%02x%02x
   34ff8:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   35008:	00000000                                ....

0003500c <ble_uuid_base>:
   3500c:	5f9b34fb 80000080 00001000 00000000     .4._............

0003501c <ble_svc_ans_defs>:
   3501c:	00000001 10000300 00000000 10000318     ................
	...
   3503c:	63617041 4d206568 77656e79 694e2074     Apache Mynewt Ni
   3504c:	454c426d 00000000                       mBLE....

00035054 <ble_svc_dis_defs>:
   35054:	00000001 100003a8 00000000 100003b4     ................
	...

00035074 <ble_svc_gap_defs>:
   35074:	00000001 10000418 00000000 10000424     ............$...
	...

00035094 <ble_svc_gatt_defs>:
   35094:	00000001 1000048c 00000000 10000494     ................
	...
   350b4:	5f656c62 5f696368 5f6d6172 5f646d63     ble_hci_ram_cmd_
   350c4:	6c6f6f70 00000000 5f656c62 5f696368     pool....ble_hci_
   350d4:	5f6d6172 5f747665 705f6968 006c6f6f     ram_evt_hi_pool.
   350e4:	5f656c62 5f696368 5f6d6172 5f747665     ble_hci_ram_evt_
   350f4:	705f6f6c 006c6f6f                       lo_pool.

000350fc <boot_img_magic>:
   350fc:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

0003510c <boot_swap_tables>:
   3510c:	03040104 01040204 03040104 04030301     ................
   3511c:	00000401                                ....

00035120 <sysflash_map_dflt>:
   35120:	00000000 000c0000 00008000 00000001     ................
   35130:	00014000 00038000 00000002 0004c000     .@..............
   35140:	00038000 00000003 00084000 00002000     .........@... ..
   35150:	00000010 00086000 00004000 00000011     .....`...@......
   35160:	0008a000 00004000                       .....@..

00035168 <sbox>:
   35168:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   35178:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   35188:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   35198:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   351a8:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   351b8:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   351c8:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   351d8:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   351e8:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   351f8:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   35208:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   35218:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   35228:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   35238:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   35248:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   35258:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00035268 <base64_chars>:
   35268:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   35278:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   35288:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   35298:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   352a8:	00000000 68323025 00007868 00006325     ....%02hhx..%c..
   352b8:	0063255c 3025755c 5c586c34 34302575     \%c.\u%04lX\u%04
   352c8:	0000586c 3025755c 00586c34 0000007b     lX..\u%04lX.{...
   352d8:	0000005b 0000007d 736c6166 00000065     [...}...false...
   352e8:	65757274 00000000 0000205f 6c6c252d     true...._ ..-%ll
   352f8:	00000075 3438312d 34373634 33373034     u...-18446744073
   35308:	35393037 31363135 00000036 00002768     709551616...h'..
   35318:	00000027 00000022 756c6c25 00000028     '..."...%llu(...
   35328:	00000029 706d6973 2528656c 29756868     )...simple(%hhu)
   35338:	00000000 6c6c756e 00000000 65646e75     ....null....unde
   35348:	656e6966 00000064 61766e69 0064696c     fined...invalid.
   35358:	0000202c 00007325 0000203a              , ..%s..: ..

00035364 <os_bsp_uart0_cfg>:
   35364:	26251716                                ..%&

00035368 <apollo3_flash_dev>:
   35368:	00035380 00000000 00100000 00000080     .S..............
   35378:	00000001 000000ff                       ........

00035380 <apollo3_flash_funcs>:
   35380:	0003071d 00030671 0003060d 000305fb     ....q...........
   35390:	00000000 00030609 00000000              ............

0003539c <apollo3_timer_tbl_hfrc>:
   3539c:	00002ee0 0000000a 0000b798 00000008     ................
   353ac:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   353bc:	00b71b00 00000002 00000000 00000000     ................

000353cc <apollo3_timer_tbl_lfrc>:
   353cc:	00000001 00000018 00000020 00000016     ........ .......
   353dc:	00000200 00000014 00000400 0000001a     ................
	...

000353f4 <apollo3_timer_tbl_xt>:
   353f4:	00000100 00000012 00000800 00000010     ................
   35404:	00004000 0000000e 00008000 0000000c     .@..............
	...

0003541c <g_sUartConfig>:
   3541c:	0001c200 00000060 00000000 00000000     ....`...........
   3542c:	00000000 00000012 10003ca4 00000100     .........<......
   3543c:	10003ca0 00000002                       .<......

00035444 <g_ui32TMRAddrTbl>:
   35444:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   35454:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00035464 <g_ui8TmrClkSrcMask>:
   35464:	01030f0f 00000101 00000000 00000000     ................
   35474:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

00035484 <g_AM_HAL_GPIO_DISABLE>:
   35484:	00000003                                ....

00035488 <g_ui8Bit76Capabilities>:
   35488:	02800101 80010180 80800101 80808080     ................
   35498:	80808080 80808008 01800180 80808080     ................
   354a8:	80808080 01800402 01010401 80808080     ................
   354b8:	00000101                                ....

000354bc <g_ui8Inpen>:
   354bc:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   354cc:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   354dc:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   354ec:	00003130                                01..

000354f0 <g_ui8NCEtable>:
   354f0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   35500:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   35510:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   35520:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   35530:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   35540:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   35550:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   35560:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   35570:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   35580:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   35590:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   355a0:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   355b0:	32221202 43231303                       .."2..#C

000355b8 <g_ui8nCEpins>:
   355b8:	02070707 00080802 01020202 01010101     ................
   355c8:	01010101 01010101 01010101 01010101     ................
   355d8:	01010101 08010101 01010008 01010101     ................
   355e8:	00000101                                ....

000355ec <am_hal_pwrctrl_peripheral_control>:
	...
   355f8:	00000001 00000004 00000004 00000002     ................
   35608:	00000008 00000008 00000004 00000008     ................
   35618:	00000008 00000008 00000008 00000008     ................
   35628:	00000010 00000010 00000010 00000020     ............ ...
   35638:	00000010 00000010 00000040 00000010     ........@.......
   35648:	00000010 00000080 00000004 00000004     ................
   35658:	00000100 00000004 00000004 00000200     ................
   35668:	00000020 00000020 00000400 00000004      ... ...........
   35678:	00000004 00000800 00000040 00000040     ........@...@...
   35688:	00001000 00000080 00000080 00002000     ............. ..
   35698:	00000100 00000100                       ........

000356a0 <stdout>:
   356a0:	10000508                                ....

000356a4 <MemFile_methods>:
   356a4:	00032b41 00000000                       A+......

000356ac <log_fcb_handler>:
   356ac:	00000002 00032f15 000332af 00033293     ...../...2...2..
   356bc:	000331d7 0003316d 000330d9 00032eb5     .1..m1...0......
   356cc:	00032eab 00032cdb 00032cd7              .....,...,..

000356d8 <crc8_small_table>:
   356d8:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
   356e8:	5f676f6c 7473696c 00000000 6576656c     log_list....leve
   356f8:	616d5f6c 00000070 75646f6d 6d5f656c     l_map...module_m
   35708:	00007061 5f676f6c 656d616e 00000000     ap..log_name....
   35718:	72746e65 00736569 65707974 00000000     entries.type....
   35728:	00007374 65646e69 00000078 7478656e     ts..index...next
   35738:	646e695f 00007865 73676f6c 00000000     _index..logs....
   35748:	726f6263 00000000 006e6962 00727473     cbor....bin.str.
   35758:	6576656c 0000006c 75646f6d 0000656c     level...module..
   35768:	68676d69 00687361 0067736d 6f727265     imghash.msg.erro
   35778:	65203a72 7972746e 6f6f7420 72616c20     r: entry too lar
   35788:	28206567 20757a25 65747962 00002973     ge (%zu bytes)..
   35798:	74617473 73696c5f 00000074 6c656966     stat_list...fiel
   357a8:	00007364                                ds..

/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 137124	   1132	  14932	 153188	  25664	/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf
