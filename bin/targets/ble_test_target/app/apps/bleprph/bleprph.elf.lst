
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000c121

Program Header:
0x70000001 off    0x0002eb5c vaddr 0x0002eb5c paddr 0x0002eb5c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002eb74 memsz 0x0002eb74 flags rwx
    LOAD off    0x00030100 vaddr 0x20000100 paddr 0x0002eb74 align 2**16
         filesz 0x00000448 memsz 0x0000046c flags rw-
    LOAD off    0x00030570 vaddr 0x20000570 paddr 0x0002efbc align 2**16
         filesz 0x00000000 memsz 0x00004c74 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  0000c000  0000c000  0000c000  2**0  ALLOC
  1 .text              00022b3c  0000c020  0000c020  0000c020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0002eb5c  0002eb5c  00030548  2**0  CONTENTS
  3 .ARM.exidx         00000018  0002eb5c  0002eb5c  0002eb5c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  20000100  20000100  00030548  2**0  CONTENTS
  6 .data              00000448  20000100  0002eb74  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000024  20000548  0002efbc  00030548  2**2  ALLOC
  8 .bss               00004c74  20000570  0002efbc  00030570  2**3  ALLOC
  9 .stack_dummy       000001b0  200051e8  200051e8  00030548  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000002a  00000000  00000000  000306f8  2**0  CONTENTS, READONLY
 11 .comment           00000079  00000000  00000000  00030722  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  0003079b  2**0  CONTENTS, READONLY
 13 .debug_line        000746ed  00000000  00000000  0003079f  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0013c171  00000000  00000000  000a4e8c  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      000227b8  00000000  00000000  001e0ffd  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005890  00000000  00000000  002037b8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0001c190  00000000  00000000  00209048  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         0005c073  00000000  00000000  002251d8  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00005c38  00000000  00000000  0028124b  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f9a4  00000000  00000000  00286e84  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .imghdr	00000000 .imghdr
0000c020 l    d  .text	00000000 .text
0002eb5c l    d  .ARM.extab	00000000 .ARM.extab
0002eb5c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000100 l    d  .rtt	00000000 .rtt
20000100 l    d  .data	00000000 .data
20000548 l    d  .bssnz	00000000 .bssnz
20000570 l    d  .bss	00000000 .bss
200051e8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_cm4.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
0000c128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000c228 l     F .text	00000024 errata_36
0000c24c l     F .text	00000024 errata_98
0000c270 l     F .text	00000024 errata_103
0000c294 l     F .text	00000024 errata_115
0000c2b8 l     F .text	00000024 errata_120
0000c2dc l     F .text	00000024 errata_121
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
0000c47c l     F .text	00000014 bleprph_on_reset
0000c490 l     F .text	000000dc bleprph_advertise
0000c628 l     F .text	000001d8 bleprph_gap_event
0000c56c l     F .text	00000024 bleprph_on_sync
0000c590 l     F .text	00000098 bleprph_print_conn_desc
20000570 l     O .bss	00000019 ver_str.11298
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 gatt_svr.c
0000c8a4 l     F .text	00000026 gatt_svr_chr_write
0000c8cc l     F .text	000000b0 gatt_svr_chr_access_sec_test
20000589 l     O .bss	00000001 gatt_svr_sec_test_static_val
20000104 l     O .data	00000048 __compound_literal.0
0002d654 l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
0002d668 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
0002d67c l     O .text	00000011 gatt_svr_svc_sec_test_uuid
0002d690 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 ble_test_target-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
2000058a l     O .bss	00000001 split_app_active
2000058b l     O .bss	00000001 split_mode_cur
2000014c l     O .data	00000024 split_scfg
0002d6c0 l     O .text	00000020 __compound_literal.0
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
2000058c l     O .bss	00000004 brk
20000590 l     O .bss	00000004 sbrk_base
20000594 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0000cd04 l     F .text	0000001e os_main
200005e8 l     O .bss	00000100 g_idle_task_stack
200006f0 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
0000d070 l     F .text	00000060 os_dev_add
0000d0d0 l     F .text	00000022 os_dev_initialize
0000d0f2 l     F .text	00000024 os_dev_init
20000f4c l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20000f54 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0000db48 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000dcb8 l     F .text	00000010 os_msys_find_biggest_pool
0000dcc8 l     F .text	0000002c os_msys_find_pool
0000dd40 l     F .text	00000058 os_msys_init_once
20000f6c l     O .bss	000009a0 os_msys_1_data
2000190c l     O .bss	0000000c os_msys_1_mbuf_pool
20001918 l     O .bss	0000001c os_msys_1_mempool
20000170 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0000de1c l     F .text	00000020 os_sanity_check_list_lock
0000de3c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000e1b0 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000e314 l     F .text	00000044 os_deltatime
0000e358 l     F .text	00000064 os_time_tick
20001958 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000e528 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000e8d4 l       .text	00000000 SVC_User
0000e8f2 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
0000e988 l       .text	00000000 test1
0000e97c l       .text	00000000 loop1
0000e98e l       .text	00000000 res1
0000e9aa l       .text	00000000 test2
0000e9b2 l       .text	00000000 done
0000e99e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000e9be l       .text	00000000 test1
0000e9ba l       .text	00000000 loop1
0000e9cc l       .text	00000000 test2
0000e9c8 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 imgmgr.c
0000eb3c l     F .text	0000005c imgr_erase_state
20000188 l     O .data	0000000c imgr_mgmt_group
0002d86c l     O .text	00000038 imgr_mgmt_handlers
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 smp.c
0000ec00 l     F .text	0000000c smp_free_buf
0000ec0c l     F .text	00000010 smp_init_writer
0000ec1c l     F .text	00000012 smp_init_reader
0000ec2e l     F .text	00000028 smp_write_at
0000ec56 l     F .text	00000010 smp_reset_buf
0000ec66 l     F .text	00000008 smp_trim_front
0000ec6e l     F .text	0000002c smp_alloc_rsp
0000ec9a l     F .text	00000024 smp_rsp_frag_alloc
0000ed04 l     F .text	0000004c smp_process_packet
0000ed50 l     F .text	0000000a smp_event_data_in
00000000 l    df *ABS*	00000000 smp_ble.c
0000ede8 l     F .text	00000028 smp_ble_out
0000ee10 l     F .text	00000040 smp_ble_event_data_in
0000ee50 l     F .text	00000090 gatt_svr_chr_access_smp
20000194 l     O .data	00000030 __compound_literal.0
0002d8dc l     O .text	00000011 gatt_svr_chr_smp
0002d8f0 l     O .text	00000011 gatt_svr_svc_smp
0002d904 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 config_init.c
0000ef78 l     F .text	000000e4 config_init_fcb
200019ec l     O .bss	0000006c conf_fcb_area
200001c4 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_store.c
0000f08a l     F .text	0000003c conf_dup_check_cb
0000f0c6 l     F .text	0000001c conf_load_cb
0000f1ec l     F .text	00000008 conf_store_one
20001a5c l     O .bss	00000001 conf_loaded
20001a5d l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0000f260 l     F .text	00000032 conf_get_cb
0000f292 l     F .text	00000028 conf_set_cb
0000f2ba l     F .text	00000020 conf_commit_cb
0000f2da l     F .text	00000008 conf_ev_fn_load
20001a68 l     O .bss	0000000c conf_mtx
200001fc l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_fcb.c
0000f718 l     F .text	00000024 conf_fcb_load
0000f73c l     F .text	00000044 conf_fcb_load_cb
0000f780 l     F .text	0000002c conf_fcb_var_read
0000f7ac l     F .text	000000d6 conf_fcb_compress_internal
0000f882 l     F .text	00000066 conf_fcb_append
0000f986 l     F .text	0000000a conf_fcb_save
2000020c l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 config_mgmt.c
0000fa84 l     F .text	000000b8 conf_mgmt_write
0000fb3c l     F .text	0000007c conf_mgmt_read
2000021c l     O .data	0000000c conf_mgmt_group
0002d944 l     O .text	00000008 conf_mgmt_handlers
00000000 l    df *ABS*	00000000 console.c
0000fbc8 l     F .text	0000004c add_ascii_num_with_char
0000fc14 l     F .text	0000003c console_handle_line
0000fc50 l     F .text	0000003c console_filter_out
0000fc8c l     F .text	0000001e console_filter_write
0000fcac l     F .text	00000044 console_append_char
0000fcf0 l     F .text	0000001e console_write_nolock
0000fd10 l     F .text	00000050 handle_end
0000fd60 l     F .text	00000050 handle_home
0000fdb0 l     F .text	00000068 del_char
0000fe18 l     F .text	00000020 handle_delete
0000fe38 l     F .text	00000190 handle_ansi
0000ffc8 l     F .text	00000058 handle_backspace
00010020 l     F .text	0000005c console_clear_line
0001007c l     F .text	000000a8 insert_char
00010130 l     F .text	0000000a console_nlip_enable_echo
0001013a l     F .text	0000000a console_nlip_disable_echo
00010144 l     F .text	00000104 handle_nlip
20001a74 l     O .bss	00000004 ansi_val
20001a78 l     O .bss	00000004 ansi_val_2
20001a7c l     O .bss	00000010 avail_queue
20001a8c l     O .bss	00000004 completion
20001a90 l     O .bss	00000004 console_compat_rx_cb
20001a98 l     O .bss	0000000c console_write_lock
20001aa4 l     O .bss	00000002 cur
20001aa8 l     O .bss	00000004 current_line_ev
20001aac l     O .bss	00000004 esc_state
20001ab4 l     O .bss	00000004 lines_queue
20001ab8 l     O .bss	00000004 nlip_state
20001abc l     O .bss	00000001 prev_endl.8744
20001abd l     O .bss	00000001 rx_stalled
20001abe l     O .bss	00000002 trailing_chars
20000228 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
2000022c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
0001058c l     F .text	00000008 uart_blocking_tx
00010594 l     F .text	00000014 uart_console_ring_add_char
000105a8 l     F .text	00000014 uart_console_ring_pull_char
000105bc l     F .text	00000016 uart_console_ring_is_full
000105d2 l     F .text	0000000e uart_console_ring_is_empty
000105e0 l     F .text	00000030 uart_console_tx_flush
00010610 l     F .text	0000001c uart_console_tx_char
0001062c l     F .text	00000058 uart_console_queue_char
00010684 l     F .text	00000044 uart_console_rx_char
000106c8 l     F .text	00000074 uart_console_rx_char_event
20001ac0 l     O .bss	00000008 cr_rx
20001ac8 l     O .bss	00000020 cr_rx_buf
20001ae8 l     O .bss	00000008 cr_tx
20001af0 l     O .bss	00000020 cr_tx_buf
20001b20 l     O .bss	00000001 uart_console_rx_stalled
20001b24 l     O .bss	00000004 uart_dev
20001b28 l     O .bss	00000004 write_char_cb
20000230 l     O .data	00000004 b.8592
00000000 l    df *ABS*	00000000 flash_map.c
00010850 l     F .text	00000038 flash_area_find_idx
00010888 l     F .text	00000058 flash_map_area_overlaps
000108e0 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 id.c
00010b58 l     F .text	00000074 id_conf_export
00010bcc l     F .text	000000a0 id_conf_get
00010c6c l     F .text	00000034 id_conf_set
00010ca0 l     F .text	00000060 id_read_mfghash
00000000 l    df *ABS*	00000000 log.c
00010d54 l     F .text	00000028 log_module_find_idx
00010d7c l     F .text	0000001c log_registered
00010d98 l     F .text	0000000c log_chk_type
00010da4 l     F .text	00000014 log_chk_max_entry_len
00010db8 l     F .text	00000016 log_call_append_cb
00010dd0 l     F .text	00000138 log_append_prepare
00011014 l     F .text	0000003c log_read_last_hdr
0001123a l     F .text	00000040 log_read_hdr_walk
000111a6 l     F .text	0000004a log_walk_body_fn
20001bd8 l     O .bss	00000004 g_log_module_count
20001bdc l     O .bss	00000008 g_log_module_list
20001be4 l     O .bss	00000001 log_written
2000025c l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0001127a l     F .text	00000004 log_console_read
0001127e l     F .text	00000004 log_console_walk
00011282 l     F .text	00000004 log_console_flush
00011288 l     F .text	00000048 log_console_print_hdr
000112d0 l     F .text	00000048 log_console_dump_cbor_entry
00011318 l     F .text	00000040 log_console_append_body
00011358 l     F .text	0000001c log_console_append
20001be8 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
20001c04 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
000113f8 l     F .text	00000028 modlog_find_by_module
00011420 l     F .text	0000003c modlog_insert
0001145c l     F .text	0000001c modlog_alloc
00011478 l     F .text	00000058 modlog_infer_handle
000114d0 l     F .text	00000046 modlog_register_no_lock
00011516 l     F .text	0000002a modlog_append_one
00011540 l     F .text	00000084 modlog_append_no_lock
20001c84 l     O .bss	00000004 modlog_first_dflt
20001c88 l     O .bss	000000c0 modlog_mapping_buf
20001d64 l     O .bss	00000004 modlog_mappings
20001d68 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0001173c l     F .text	00000090 mfg_seek_next_aux
000117cc l     F .text	0000006c mfg_read_mmr
00011838 l     F .text	00000050 mfg_read_next_mmr
00011888 l     F .text	00000040 mfg_open_flash_area
000118c8 l     F .text	0000003e mfg_read_tlv_body
00011998 l     F .text	00000042 mfg_read_mmr_refs
20001d8c l     O .bss	00000001 mfg_initialized
20001d90 l     O .bss	00000018 mfg_mmrs
20001da8 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
000119dc l     F .text	00000048 reboot_conf_export
00011a24 l     F .text	00000054 reboot_conf_get
00011a78 l     F .text	00000054 reboot_conf_set
00011acc l     F .text	0000009c log_reboot_init_fcb
00011b68 l     F .text	00000014 log_reboot_init_console
00011c08 l     F .text	00000284 log_reboot_write
20001dac l     O .bss	00000001 log_reboot_written
20001db0 l     O .bss	0000001c reboot_log
20001dcc l     O .bss	00000034 reboot_log_fcb
20001e00 l     O .bss	0000000c reboot_sector
20001e0c l     O .bss	00000020 str_reason.9366
00000000 l    df *ABS*	00000000 stats.c
00011f60 l     F .text	00000010 stats_offset
00011f70 l     F .text	0000004c stats_register_internal
00012054 l     F .text	00000038 stats_module_init_internal
00000000 l    df *ABS*	00000000 sysinit.c
0001214c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
000121e4 l     F .text	0000000c rwlock_complete_handoff
000121f0 l     F .text	0000001a rwlock_read_must_block
0001220a l     F .text	00000016 rwlock_write_must_block
00012220 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 scfg.c
0001237c l     F .text	00000016 scfg_find_setting_by_val
00012392 l     F .text	0000005e scfg_setting_id
000123f0 l     F .text	00000040 scfg_handler_export
00012430 l     F .text	0000001a scfg_find_setting_by_name
0001244a l     F .text	00000026 scfg_handler_get
00012470 l     F .text	00000036 scfg_handler_set
00000000 l    df *ABS*	00000000 cborattr.c
0001256c l     F .text	0000006c valid_attr_type
000125d8 l     F .text	0000004c cbor_target_address
0001281c l     F .text	000002ea cbor_internal_read_object
00000000 l    df *ABS*	00000000 img_mgmt.c
00012b12 l     F .text	0000003a img_mgmt_find_tlvs
00012b4c l     F .text	0000004c img_mgmt_upload_good_rsp
00012cd4 l     F .text	00000036 img_mgmt_upload_log
00012d5c l     F .text	00000058 img_mgmt_erase
00012ddc l     F .text	00000220 img_mgmt_upload
20001e74 l     O .bss	00000004 img_mgmt_upload_arg
20001e78 l     O .bss	00000004 img_mgmt_upload_cb
20000290 l     O .data	0000000c img_mgmt_group
0002dbb4 l     O .text	00000030 img_mgmt_handlers
00000000 l    df *ABS*	00000000 img_mgmt_state.c
00000000 l    df *ABS*	00000000 img_mgmt_util.c
00000000 l    df *ABS*	00000000 mynewt_img_mgmt.c
0001340e l     F .text	00000040 img_mgmt_vercmp
0001344e l     F .text	00000048 img_mgmt_find_best_area_id
00000000 l    df *ABS*	00000000 mynewt_img_mgmt_log.c
0001383c l     F .text	00000004 img_mgmt_log_gen
00000000 l    df *ABS*	00000000 mynewt_log_mgmt.c
00013890 l     F .text	00000020 mynewt_log_mgmt_find_log
000138b0 l     F .text	000000da mynewt_log_mgmt_walk_cb
00000000 l    df *ABS*	00000000 os_mgmt.c
00013ad8 l     F .text	0000000a os_mgmt_reset
00013ae4 l     F .text	00000144 os_mgmt_taskstat_encode_one
00013c28 l     F .text	00000070 os_mgmt_taskstat_read
00013c98 l     F .text	00000074 os_mgmt_echo
2000029c l     O .data	0000000c os_mgmt_group
0002dcd0 l     O .text	00000030 os_mgmt_group_handlers
00000000 l    df *ABS*	00000000 mynewt_os_mgmt.c
00013d24 l     F .text	0000001c mynewt_os_mgmt_task_at
00013d40 l     F .text	00000014 mynewt_os_mgmt_stack_usage
00013d54 l     F .text	0000000a mynewt_os_mgmt_reset_tmo
20001e7c l     O .bss	00000020 mynewt_os_mgmt_reset_callout
00000000 l    df *ABS*	00000000 mynewt_stat_mgmt.c
00013e08 l     F .text	00000042 mynewt_stat_mgmt_walk_cb
00000000 l    df *ABS*	00000000 mgmt.c
00013ec0 l     F .text	00000050 mgmt_find_group
20001e9c l     O .bss	00000004 evt_cb
20001ea0 l     O .bss	00000004 mgmt_group_list
20001ea4 l     O .bss	00000004 mgmt_group_list_end
00000000 l    df *ABS*	00000000 smp.c
0001405c l     F .text	0000001a smp_align4
00014076 l     F .text	0000000a smp_rsp_op
00014080 l     F .text	0000002a smp_init_rsp_hdr
000140aa l     F .text	0000001a smp_read_hdr
000140c4 l     F .text	00000076 smp_handle_single_payload
0001413a l     F .text	00000012 smp_write_hdr
0001414c l     F .text	0000005e smp_handle_single_req
000141aa l     F .text	0000006e smp_build_err_rsp
00014218 l     F .text	0000004c smp_on_err
00000000 l    df *ABS*	00000000 mcumgr_util.c
00000000 l    df *ABS*	00000000 ble_ll.c
000143e0 l     F .text	00000070 ble_ll_count_rx_adv_pdus
00014450 l     F .text	00000016 ble_ll_is_valid_addr
00014468 l     F .text	00000060 ble_ll_count_rx_stats
000144c8 l     F .text	00000020 ble_ll_flush_pkt_queue
00014528 l     F .text	00000038 ble_ll_validate_task
00014560 l     F .text	0000001c ble_ll_hw_err_timer_cb
0001457c l     F .text	0000000a ble_ll_event_comp_pkts
00014586 l     F .text	00000008 ble_ll_event_dbuf_overflow
00014590 l     F .text	00000080 ble_ll_tx_pkt_in
00014610 l     F .text	00000008 ble_ll_event_tx_pkt
00014618 l     F .text	00000088 ble_ll_rx_pkt_in
000146a0 l     F .text	00000008 ble_ll_event_rx_pkt
20002048 l     O .bss	00000180 g_ble_ll_stack
0002dd08 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
00014c24 l     F .text	0000001a ble_ll_adv_first_chan
00014c3e l     F .text	0000001a ble_ll_adv_final_chan
00014c58 l     F .text	00000016 ble_ll_adv_flags_set
00014c6e l     F .text	00000018 ble_ll_adv_flags_clear
00014c86 l     F .text	0000007c ble_ll_adv_rpa_update
00014d02 l     F .text	00000016 ble_ll_adv_active_chanset_clear
00014d18 l     F .text	00000030 ble_ll_adv_drop_event
00014d48 l     F .text	00000038 ble_ll_adv_tx_done
00014d80 l     F .text	00000050 ble_ll_adv_sm_find_configured
00014dd0 l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
00014e04 l     F .text	0000002c ble_ll_adv_scheduled
00014e30 l     F .text	00000068 ble_ll_adv_set_sched
00014fc4 l     F .text	000000ec ble_ll_adv_tx_start_cb
00014e98 l     F .text	0000012c ble_ll_adv_sm_start
000150b0 l     F .text	000000aa ble_ll_adv_legacy_pdu_make
0001515a l     F .text	0000005a ble_ll_adv_scan_rsp_legacy_pdu_make
000151b4 l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
00015208 l     F .text	0000006c ble_ll_adv_sm_stop
00015274 l     F .text	0000002e ble_ll_adv_set_enable
000152a2 l     F .text	0000006a ble_ll_adv_update_data_mbuf
0001530c l     F .text	000000a2 ble_ll_adv_set_scan_rsp_data
000153ae l     F .text	000000bc ble_ll_adv_set_adv_data
0001546c l     F .text	00000154 ble_ll_adv_rx_req
000155c0 l     F .text	000000fc ble_ll_adv_conn_req_rxd
000156bc l     F .text	00000026 ble_ll_adv_sm_stop_timeout
000156e4 l     F .text	00000054 ble_ll_adv_reschedule_event
00015738 l     F .text	00000034 ble_ll_adv_sm_init
000158c8 l     F .text	0000000a ble_ll_adv_event_done
00015794 l     F .text	00000124 ble_ll_adv_done
000158b8 l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
00015cac l     F .text	0000001a ble_ll_conn_is_empty_pdu
00015cc6 l     F .text	00000004 ble_ll_conn_can_send_next_pdu
00015cca l     F .text	0000004a ble_ll_conn_calc_dci_csa1
00015d14 l     F .text	00000018 ble_ll_conn_halt
00015d2c l     F .text	00000014 ble_ll_conn_current_sm_over
00015d40 l     F .text	00000010 ble_ll_conn_rxend_unencrypt
00015d50 l     F .text	00000010 ble_ll_conn_txend_encrypt
00015d60 l     F .text	00000008 ble_ll_conn_wait_txend
00015d68 l     F .text	00000028 ble_ll_conn_start_rx_encrypt
00015d90 l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
00015da0 l     F .text	0000010c ble_ll_conn_event_start_cb
00015eac l     F .text	0000006c ble_ll_conn_chk_csm_flags
00015f18 l     F .text	0000002a ble_ll_conn_adjust_pyld_len
00015f42 l     F .text	00000010 ble_ll_conn_continue_rx_encrypt
00015f54 l     F .text	00000058 ble_ll_conn_get_next_sched_time
00015fac l     F .text	00000454 ble_ll_conn_tx_pdu
00016514 l     F .text	000002ec ble_ll_conn_next_event
00016800 l     F .text	00000154 ble_ll_conn_created
00016954 l     F .text	00000016 ble_ll_conn_set_csa
00016c38 l     F .text	00000150 ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
000176ea l     F .text	00000066 ble_ll_conn_process_conn_params
200024f8 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
00017f74 l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00017fac l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
00017fc6 l     F .text	0000000e ble_ll_ctrl_start_rsp_timer
00017fd4 l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
00017ff4 l     F .text	00000032 ble_ll_ctrl_rx_pause_enc_rsp
00018026 l     F .text	000000ca ble_ll_ctrl_conn_param_pdu_make
000180f0 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
00018204 l     F .text	00000026 ble_ll_ctrl_version_ind_make
0001822a l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
00018254 l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
00018298 l     F .text	00000028 ble_ll_ctrl_update_features
000182c0 l     F .text	0000004c ble_ll_ctrl_rx_feature_req
0001830c l     F .text	00000048 ble_ll_ctrl_enc_req_make
00018354 l     F .text	000000f8 ble_ll_ctrl_proc_init
0001844c l     F .text	00000078 ble_ll_ctrl_rx_conn_update
000184c4 l     F .text	00000040 ble_ll_ctrl_rx_chanmap_req
00018504 l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
00018510 l     F .text	00000066 ble_ll_ctrl_len_proc
00018576 l     F .text	00000072 ble_ll_ctrl_rx_enc_req
000185fa l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
000186f8 l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
0001885c l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
00018a34 l     F .text	000000ac ble_ll_ctrl_proc_unk_rsp
00018ae0 l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
00018b18 l     F .text	00000060 ble_ll_ctrl_rx_version_ind
00018b78 l     F .text	00000046 ble_ll_ctrl_rx_start_enc_rsp
00018bbe l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
00018bc8 l     F .text	00000056 ble_ll_ctrl_rx_conn_param_req
00018c1e l     F .text	00000074 ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
00019178 l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
0001917c l     F .text	00000020 ble_ll_hci_rd_local_version
0001919c l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
000191b8 l     F .text	00000018 ble_ll_hci_rd_bd_addr
000191d0 l     F .text	0000001c ble_ll_hci_set_le_event_mask
000191ec l     F .text	00000018 ble_ll_hci_le_read_bufsize
00019204 l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
0001921c l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
0001923c l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
00019288 l     F .text	0000001c ble_ll_read_rf_path_compensation
000192a4 l     F .text	0000001c ble_ll_hci_cb_set_event_mask
000192c0 l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
000192dc l     F .text	00000010 ble_ll_hci_disconnect
000192ec l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
0001930e l     F .text	0000004c ble_ll_hci_ctlr_bb_cmd_proc
0001935c l     F .text	0000004c ble_ll_hci_rd_local_supp_cmd
000193a8 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
00019402 l     F .text	00000016 ble_ll_hci_status_params_cmd_proc
00019418 l     F .text	00000016 ble_ll_hci_le_read_local_features
0001942e l     F .text	00000042 ble_ll_hci_le_encrypt
00019470 l     F .text	00000012 ble_ll_hci_le_rand
00019482 l     F .text	00000016 ble_ll_hci_le_read_supp_states
00019498 l     F .text	00000060 ble_ll_hci_le_wr_sugg_data_len
000194f8 l     F .text	00000020 ble_ll_read_tx_power
00019518 l     F .text	00000064 ble_ll_write_rf_path_compensation
0001957c l     F .text	0000028e ble_ll_hci_le_cmd_proc
00019844 l     F .text	00000148 ble_ll_hci_cmd_proc
200024fc l     O .bss	00000010 g_ble_ll_hci_cmd_ev
20002510 l     O .bss	00000008 g_ble_ll_hci_event_mask
20002518 l     O .bss	00000008 g_ble_ll_hci_event_mask2
20002520 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
20002528 l     O .bss	00000002 rx_path_pwr_compensation
2000252a l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_hci_vs.c
00019d84 l     F .text	00000018 ble_ll_hci_vs_find_by_ocf
00019d9c l     F .text	0000002c ble_ll_hci_vs_is_controller_busy
00019dc8 l     F .text	00000048 ble_ll_hci_vs_set_tx_power
00019e10 l     F .text	00000032 ble_ll_hci_vs_rd_static_addr
2000252c l     O .bss	00000004 g_ble_ll_hci_vs_list
200002a8 l     O .data	00000018 g_ble_ll_hci_vs_cmds
00000000 l    df *ABS*	00000000 ble_ll_rand.c
2000255c l     O .bss	00000006 xsubi.9499
200002c0 l     O .data	00000001 init.9500
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
0001a048 l     F .text	00000018 ble_ll_resolv_irk_nonzero
0001a060 l     F .text	0000000e ble_ll_is_controller_busy
0001a070 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
0001a090 l     F .text	00000040 ble_ll_is_on_resolv_list
0001a0d0 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
0001a148 l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
0001a650 l     F .text	00000034 ble_ll_rfmgmt_disable
0001a684 l     F .text	0000004c ble_ll_rfmgmt_release_ev
0001a6d0 l     F .text	0000003c ble_ll_rfmgmt_enable
0001a70c l     F .text	00000014 ble_ll_rfmgmt_timer_exp
0001a720 l     F .text	00000084 ble_ll_rfmgmt_timer_reschedule
20002664 l     O .bss	00000044 g_ble_ll_rfmgmt_data
00000000 l    df *ABS*	00000000 ble_ll_sched.c
0001a8ac l     F .text	00000004 preempt_any
0001a8b0 l     F .text	00000004 preempt_none
0001a8b4 l     F .text	00000030 preempt_any_except_conn
0001a8e4 l     F .text	00000024 ble_ll_sched_overlaps_current
0001a908 l     F .text	00000060 ble_ll_sched_preempt
0001a968 l     F .text	00000138 ble_ll_sched_insert
0001aaa0 l     F .text	00000074 ble_ll_sched_execute_item
0001ab14 l     F .text	0000005c ble_ll_sched_run
200026ac l     O .bss	00000008 g_ble_ll_sched_q
200026b4 l     O .bss	00000001 g_ble_ll_sched_q_head_changed
200026b8 l     O .bss	00000018 g_ble_ll_sched_timer
00000000 l    df *ABS*	00000000 ble_ll_utils.c
0002dd78 l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
0001b020 l     F .text	0000000e ble_ll_whitelist_chg_allowed
0001b030 l     F .text	0000003c ble_ll_whitelist_search
00000000 l    df *ABS*	00000000 ble_hw.c
0001b168 l     F .text	00000040 ble_rng_isr
20002710 l     O .bss	00000001 g_ble_hw_whitelist_mask
00000000 l    df *ABS*	00000000 ble_phy.c
0001b4f0 l     F .text	00000018 ble_phy_apply_errata_102_106_107
0001b508 l     F .text	00000020 nrf_wait_disabled
0001b528 l     F .text	000000b0 ble_phy_set_start_time
0001b5d8 l     F .text	00000004 ble_phy_get_ccm_datarate
0001b5dc l     F .text	00000104 ble_phy_rx_xcvr_setup
0001b6e0 l     F .text	00000030 ble_phy_set_access_addr
0001b710 l     F .text	00000020 ble_phy_stop_usec_timer
0001b730 l     F .text	00000048 ble_phy_disable_irq_and_ppi
0001b778 l     F .text	00000058 ble_phy_set_start_now
0001b8e0 l     F .text	000000d0 ble_phy_tx_end_isr
0001bf20 l     F .text	000000c0 ble_phy_isr
0001bc94 l     F .text	00000138 ble_phy_rx_start_isr
0001bdcc l     F .text	00000154 ble_phy_rx_end_isr
200027d0 l     O .bss	00000104 g_ble_phy_enc_buf
200028d4 l     O .bss	00000104 g_ble_phy_rx_buf
200029d8 l     O .bss	00000104 g_ble_phy_tx_buf
0002dd90 l     O .text	00000028 g_ble_phy_chan_freq
0002ddb8 l     O .text	00000004 g_ble_phy_t_rxaddrdelay
0002ddbc l     O .text	00000004 g_ble_phy_t_rxenddelay
0002ddc0 l     O .text	00000004 g_ble_phy_t_txdelay
0002ddc4 l     O .text	00000004 g_ble_phy_t_txenddelay
00000000 l    df *ABS*	00000000 ble_att.c
0001c260 l     F .text	00000028 ble_att_rx_dispatch_entry_find
0001c288 l     F .text	000001f4 ble_att_inc_rx_stat
0001c47c l     F .text	00000032 ble_att_rx_handle_unknown_request
0001c4ae l     F .text	00000084 ble_att_rx
20002c0c l     O .bss	00000002 ble_att_preferred_mtu_val
0002ddd0 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
0001c9f8 l     F .text	00000010 ble_att_svr_next_id
0001ca08 l     F .text	00000024 ble_att_svr_prep_find_prev
0001ca2c l     F .text	0000005c ble_att_svr_prep_validate
0001ca88 l     F .text	00000020 ble_att_svr_entry_alloc
0001caa8 l     F .text	0000001a ble_att_svr_get_sec_state
0001cac2 l     F .text	0000010c ble_att_svr_check_perms
0001cbce l     F .text	00000062 ble_att_svr_read
0001cc30 l     F .text	00000064 ble_att_svr_write
0001cc94 l     F .text	00000018 ble_att_svr_pullup_req_base
0001ccac l     F .text	0000006e ble_att_svr_build_mtu_rsp
0001cd1a l     F .text	00000024 ble_att_svr_pkt
0001cd3e l     F .text	00000032 ble_att_svr_build_write_rsp
0001cd70 l     F .text	00000032 ble_att_svr_build_indicate_rsp
0001cda4 l     F .text	0000009c ble_att_svr_fill_info
0001ce40 l     F .text	0000005e ble_att_svr_build_find_info_rsp
0001ce9e l     F .text	00000050 ble_att_svr_read_group_type_entry_write
0001ceee l     F .text	00000024 ble_att_svr_is_valid_find_group_type
0001cf12 l     F .text	00000058 ble_att_svr_is_valid_group_end
0001cf6a l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0001cf80 l     F .text	0000005c ble_att_svr_read_flat
0001cfdc l     F .text	0000005c ble_att_svr_fill_type_value_entry
0001d038 l     F .text	000000e8 ble_att_svr_fill_type_value
0001d120 l     F .text	0000005e ble_att_svr_build_find_type_value_rsp
0001d17e l     F .text	00000034 ble_att_svr_service_uuid
0001d1b4 l     F .text	00000178 ble_att_svr_build_read_group_type_rsp
0001d32c l     F .text	0000001c ble_att_svr_prep_free
0001d348 l     F .text	0000003c ble_att_svr_prep_alloc
0001d384 l     F .text	0000007a ble_att_svr_insert_prep_entry
0001d3fe l     F .text	00000048 ble_att_svr_prep_extract
0001d448 l     F .text	00000014 ble_att_svr_free_start_mem
0001d4d0 l     F .text	00000030 ble_att_svr_write_handle
0001d500 l     F .text	00000064 ble_att_svr_prep_write
0001d59c l     F .text	0000013e ble_att_svr_build_read_type_rsp
0001d720 l     F .text	000000a4 ble_att_svr_build_read_mult_rsp
0001d7f4 l     F .text	000000ac ble_att_svr_tx_rsp
20002cf4 l     O .bss	00000004 ble_att_svr_entry_mem
20002cf8 l     O .bss	0000001c ble_att_svr_entry_pool
20002d14 l     O .bss	00000008 ble_att_svr_hidden_list
20002d1c l     O .bss	00000002 ble_att_svr_id
20002d20 l     O .bss	00000008 ble_att_svr_list
20002d28 l     O .bss	00000300 ble_att_svr_prep_entry_mem
20003028 l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_gap.c
0001e038 l     F .text	0000002a ble_gap_call_event_cb
0001e064 l     F .text	00000024 ble_gap_is_preempted
0001e088 l     F .text	00000010 ble_gap_has_client
0001e098 l     F .text	00000012 ble_gap_update_to_l2cap
0001e0ac l     F .text	00000014 ble_gap_adv_active_instance
0001e0c0 l     F .text	00000020 ble_gap_accept_master_conn
0001e0e0 l     F .text	0000003c ble_gap_accept_slave_conn
0001e11c l     F .text	00000028 ble_gap_adv_type
0001e144 l     F .text	00000032 ble_gap_adv_dflt_itvls
0001e178 l     F .text	00000024 ble_gap_update_entry_find
0001e19c l     F .text	00000046 ble_gap_validate_conn_params
0001e1e4 l     F .text	00000020 ble_gap_event_listener_call
0001e204 l     F .text	00000034 ble_gap_extract_conn_cb
0001e238 l     F .text	00000022 ble_gap_call_conn_event_cb
0001e25a l     F .text	0000009a ble_gap_fill_conn_desc
0001e2f4 l     F .text	00000016 ble_gap_conn_to_snapshot
0001e30a l     F .text	00000028 ble_gap_find_snapshot
0001e332 l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0001e350 l     F .text	0000001a ble_gap_conn_cancel_tx
0001e36a l     F .text	00000024 ble_gap_adv_enable_tx
0001e38e l     F .text	00000094 ble_gap_adv_params_tx
0001e422 l     F .text	00000042 ble_gap_tx_param_pos_reply
0001e464 l     F .text	00000022 ble_gap_tx_param_neg_reply
0001e486 l     F .text	00000042 ble_gap_update_tx
0001e4c8 l     F .text	00000030 ble_gap_update_entry_remove
0001e4f8 l     F .text	00000020 ble_gap_slave_reset_state
0001e518 l     F .text	0000002c ble_gap_slave_extract_cb
0001e544 l     F .text	00000038 ble_gap_adv_finished
0001e57c l     F .text	00000028 ble_gap_master_reset_state
0001e5a4 l     F .text	00000030 ble_gap_master_extract_state
0001e5d4 l     F .text	00000038 ble_gap_master_connect_failure
0001e60c l     F .text	00000024 ble_gap_master_failed
0001e630 l     F .text	00000046 ble_gap_master_connect_cancelled
0001e678 l     F .text	00000014 ble_gap_update_entry_free
0001e68c l     F .text	00000034 ble_gap_master_ticks_until_exp
0001e6c0 l     F .text	0000003c ble_gap_update_next_exp
0001e6fc l     F .text	0000003c ble_gap_update_timer
0001e738 l     F .text	00000034 ble_gap_slave_ticks_until_exp
0001e76c l     F .text	0000002c ble_gap_slave_timer
0001e798 l     F .text	00000020 ble_gap_slave_set_timer
0001e7b8 l     F .text	00000074 ble_gap_log_adv
0001e82c l     F .text	00000030 ble_gap_log_update
0001e85c l     F .text	0000004c ble_gap_master_timer
0001e8a8 l     F .text	00000084 ble_gap_adv_validate
0001e92c l     F .text	00000024 ble_gap_update_entry_alloc
0001ed94 l     F .text	00000044 ble_gap_adv_stop_no_lock
0001ede0 l     F .text	0000004c ble_gap_conn_cancel_no_lock
0001eec0 l     F .text	0000003e ble_gap_update_notify
0001f0ec l     F .text	0000002c ble_gap_update_l2cap_cb
0001f118 l     F .text	00000034 ble_gap_update_failed
20003044 l     O .bss	00000004 ble_gap_event_listener_list
200030d0 l     O .bss	00000004 ble_gap_update_entries
200030d4 l     O .bss	00000018 ble_gap_update_entry_mem
200030ec l     O .bss	0000001c ble_gap_update_entry_pool
20000548 l     O .bssnz	00000010 ble_gap_slave
20000558 l     O .bssnz	00000014 ble_gap_master
20003108 l     O .bss	0000000c preempt_done_mutex
20003114 l     O .bss	00000008 slaves.13153
00000000 l    df *ABS*	00000000 ble_gattc.c
0001f7ac l     F .text	0000000c ble_gattc_err_dispatch_get
0001f7b8 l     F .text	0000000c ble_gattc_resume_dispatch_get
0001f7c4 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0001f7d0 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0001f7f4 l     F .text	0000001e ble_gattc_proc_matches_expired
0001f812 l     F .text	00000008 ble_gattc_proc_matches_stalled
0001f81a l     F .text	00000014 ble_gattc_proc_timeout
0001f830 l     F .text	0000001c ble_gattc_error
0001f84c l     F .text	00000038 ble_gattc_mtu_cb
0001f884 l     F .text	0000000e ble_gattc_mtu_tmo
0001f892 l     F .text	0000000a ble_gattc_mtu_err
0001f89c l     F .text	00000038 ble_gattc_disc_all_svcs_cb
0001f8d4 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0001f8e2 l     F .text	00000016 ble_gattc_disc_all_svcs_err
0001f8f8 l     F .text	00000038 ble_gattc_disc_svc_uuid_cb
0001f930 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0001f93e l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0001f954 l     F .text	00000038 ble_gattc_find_inc_svcs_cb
0001f98c l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0001f99a l     F .text	00000018 ble_gattc_find_inc_svcs_err
0001f9b4 l     F .text	00000038 ble_gattc_disc_all_chrs_cb
0001f9ec l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0001f9fa l     F .text	00000014 ble_gattc_disc_all_chrs_err
0001fa10 l     F .text	00000038 ble_gattc_disc_chr_uuid_cb
0001fa48 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0001fa56 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0001fa6c l     F .text	00000040 ble_gattc_disc_all_dscs_cb
0001faac l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0001faba l     F .text	00000014 ble_gattc_disc_all_dscs_err
0001fad0 l     F .text	00000038 ble_gattc_read_cb
0001fb08 l     F .text	0000000e ble_gattc_read_tmo
0001fb16 l     F .text	0000000a ble_gattc_read_err
0001fb20 l     F .text	00000038 ble_gattc_read_uuid_cb
0001fb58 l     F .text	0000000e ble_gattc_read_uuid_tmo
0001fb66 l     F .text	0000000a ble_gattc_read_uuid_err
0001fb70 l     F .text	00000038 ble_gattc_read_long_cb
0001fba8 l     F .text	0000000e ble_gattc_read_long_tmo
0001fbb6 l     F .text	0000000a ble_gattc_read_long_err
0001fbc0 l     F .text	00000054 ble_gattc_read_mult_cb
0001fc14 l     F .text	0000000e ble_gattc_read_mult_tmo
0001fc22 l     F .text	0000000a ble_gattc_read_mult_err
0001fc2c l     F .text	00000038 ble_gattc_write_long_cb
0001fc64 l     F .text	0000000c ble_gattc_write_long_tmo
0001fc70 l     F .text	00000044 ble_gattc_write_reliable_cb
0001fcb4 l     F .text	0000000c ble_gattc_write_reliable_tmo
0001fcc0 l     F .text	0000002c ble_gattc_proc_set_resume_timer
0001fcec l     F .text	00000014 ble_gattc_process_resume_status
0001fd00 l     F .text	00000010 ble_gattc_proc_set_exp_timer
0001fd10 l     F .text	00000028 ble_gattc_ticks_until_resume
0001fd38 l     F .text	00000078 ble_gattc_extract
0001fdb0 l     F .text	0000002c ble_gattc_extract_expired
0001fddc l     F .text	00000014 ble_gattc_extract_stalled
0001fdf0 l     F .text	00000020 ble_gattc_extract_by_conn_op
0001fe10 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
0001fe24 l     F .text	00000020 ble_gattc_proc_insert
0001fe44 l     F .text	00000010 ble_gatts_indicate_tmo
0001fe54 l     F .text	00000044 ble_gattc_write_cb
0001fe98 l     F .text	0000000c ble_gattc_write_tmo
0001fea4 l     F .text	00000008 ble_gattc_write_err
0001feac l     F .text	00000014 ble_gattc_proc_free
0001fec0 l     F .text	0000003e ble_gattc_fail_procs
0001fefe l     F .text	00000020 ble_gattc_write_reliable_err
0001ff1e l     F .text	0000002a ble_gattc_write_long_err
0001ff48 l     F .text	0000008a ble_gattc_write_reliable_tx
0001ffd2 l     F .text	00000024 ble_gattc_write_reliable_resume
0001fff6 l     F .text	0000006e ble_gattc_write_long_tx
00020064 l     F .text	00000024 ble_gattc_write_long_resume
00020088 l     F .text	0000001a ble_gattc_read_long_tx
000200a2 l     F .text	00000026 ble_gattc_read_long_resume
000200c8 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
000200da l     F .text	00000026 ble_gattc_disc_all_dscs_resume
00020100 l     F .text	00000024 ble_gattc_disc_chr_uuid_tx
00020124 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
0002014c l     F .text	00000024 ble_gattc_disc_all_chrs_tx
00020170 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
00020198 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
000201c8 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
000201ee l     F .text	00000038 ble_gattc_disc_svc_uuid_tx
00020226 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
0002024c l     F .text	00000028 ble_gattc_disc_all_svcs_tx
00020274 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0002029a l     F .text	00000026 ble_gattc_process_status
000202c0 l     F .text	0000003c ble_gattc_resume_procs
000202fc l     F .text	0000001c ble_gattc_proc_alloc
00020318 l     F .text	00000014 ble_gattc_log_proc_init
0002032c l     F .text	00000020 ble_gattc_log_notify
0002034c l     F .text	00000020 ble_gattc_log_indicate
0002036c l     F .text	00000028 ble_gatts_indicate_err
00020394 l     F .text	00000024 ble_gatts_indicate_rx_rsp
2000311c l     O .bss	000000e0 ble_gattc_proc_mem
200031fc l     O .bss	0000001c ble_gattc_proc_pool
20003218 l     O .bss	00000008 ble_gattc_procs
20003220 l     O .bss	00000004 ble_gattc_resume_at
200032bc l     O .bss	00000004 error.12882
0002e208 l     O .text	0000003c ble_gattc_err_dispatch
0002e244 l     O .text	0000003c ble_gattc_resume_dispatch
0002e280 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
00020650 l     F .text	00000016 ble_gatts_chr_clt_cfg_allowed
00020666 l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
000206bc l     F .text	00000056 ble_gatts_chr_properties
00020712 l     F .text	00000014 ble_gatts_chr_is_sane
00020726 l     F .text	0000000c ble_gatts_chr_op
00020734 l     F .text	00000020 ble_gatts_chr_inc_val_stat
00020754 l     F .text	0000002c ble_gatts_find_svc_entry_idx
00020780 l     F .text	00000040 ble_gatts_svc_incs_satisfied
000207c0 l     F .text	0000000c ble_gatts_dsc_op
000207cc l     F .text	00000024 ble_gatts_dsc_inc_stat
000207f0 l     F .text	00000014 ble_gatts_dsc_is_sane
00020804 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
00020828 l     F .text	00000018 ble_gatts_clt_cfg_find
00020840 l     F .text	00000024 ble_gatts_svc_type_to_uuid
00020864 l     F .text	0000001a ble_gatts_svc_is_sane
00020880 l     F .text	0000000c ble_gatts_clt_cfg_size
0002088c l     F .text	00000038 ble_gatts_schedule_update
000208c4 l     F .text	000000e8 ble_gatts_count_resources
000209ac l     F .text	000000f4 ble_gatts_clt_cfg_access_locked
00020aa0 l     F .text	00000032 ble_gatts_subscribe_event
00020b60 l     F .text	00000028 ble_gatts_register_inc
00020ef8 l     F .text	00000058 ble_gatts_inc_access
00020b88 l     F .text	00000034 ble_gatts_register_clt_cfg_dsc
00020bbc l     F .text	00000064 ble_gatts_register_dsc
0002102a l     F .text	00000038 ble_gatts_dsc_access
00020c20 l     F .text	00000108 ble_gatts_register_chr
00020e9c l     F .text	0000005c ble_gatts_chr_def_access
00020ff2 l     F .text	00000038 ble_gatts_chr_val_access
00020d28 l     F .text	000000cc ble_gatts_register_svc
00020e68 l     F .text	00000034 ble_gatts_svc_access
00020df4 l     F .text	00000074 ble_gatts_register_round
00020f50 l     F .text	000000a2 ble_gatts_val_access
00021062 l     F .text	0000002a ble_gatts_mutable
0002108c l     F .text	00000024 ble_gatts_free_mem
000210b0 l     F .text	0000001c ble_gatts_free_svc_defs
000210cc l     F .text	0000006c ble_gatts_tx_notifications_one_chr
200032c0 l     O .bss	00000004 ble_gatts_clt_cfg_mem
200032c4 l     O .bss	0000001c ble_gatts_clt_cfg_pool
200032e0 l     O .bss	00000004 ble_gatts_clt_cfgs
200032e4 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
200032e8 l     O .bss	00000004 ble_gatts_num_svc_defs
200032ec l     O .bss	00000002 ble_gatts_num_svc_entries
20003324 l     O .bss	00000004 ble_gatts_svc_defs
20003328 l     O .bss	00000004 ble_gatts_svc_entries
200002c4 l     O .data	00000004 __compound_literal.0
200002c8 l     O .data	00000004 __compound_literal.1
200002cc l     O .data	00000004 __compound_literal.2
200002d0 l     O .data	00000004 __compound_literal.3
200002d4 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
00021740 l     F .text	00000048 ble_hs_wakeup_tx_conn
00021788 l     F .text	00000018 ble_hs_event_rx_hci_ev
000217a0 l     F .text	0000001c ble_hs_clear_rx_queue
000217bc l     F .text	00000008 ble_hs_event_tx_notify
000217c4 l     F .text	0000002c ble_hs_rx_data
000217fc l     F .text	00000014 ble_hs_sched_start_stage2
00021810 l     F .text	00000008 ble_hs_event_start_stage1
00021898 l     F .text	00000008 ble_hs_event_rx_data
000218f0 l     F .text	00000020 ble_hs_timer_reset
00021910 l     F .text	00000030 ble_hs_timer_sched
00021940 l     F .text	00000064 ble_hs_sync
000219a4 l     F .text	0000004c ble_hs_reset
000219f0 l     F .text	00000008 ble_hs_event_reset
000219f8 l     F .text	00000054 ble_hs_timer_exp
00021b3c l     F .text	0000001e ble_hs_event_start_stage2
20003330 l     O .bss	00000010 ble_hs_ev_reset
20003340 l     O .bss	00000010 ble_hs_ev_start_stage1
20003350 l     O .bss	00000010 ble_hs_ev_start_stage2
20003360 l     O .bss	00000010 ble_hs_ev_tx_notifications
20003370 l     O .bss	00000004 ble_hs_evq
20003390 l     O .bss	00000040 ble_hs_hci_os_event_buf
200033d8 l     O .bss	0000000c ble_hs_mutex
200033e4 l     O .bss	00000004 ble_hs_parent_task
200033e8 l     O .bss	00000004 ble_hs_reset_reason
200033ec l     O .bss	00000018 ble_hs_rx_q
20003440 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00021dd4 l     F .text	00000062 ble_hs_adv_set_hdr
00021e36 l     F .text	00000050 ble_hs_adv_set_flat_mbuf
00021e86 l     F .text	00000068 ble_hs_adv_set_array_uuid16
00021eee l     F .text	0000006c ble_hs_adv_set_array_uuid128
00021f5a l     F .text	00000072 ble_hs_adv_set_array_uuid32
00021fcc l     F .text	00000072 ble_hs_adv_set_array16
0002203e l     F .text	000002ce adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
20003460 l     O .bss	00000064 ble_hs_conn_elem_mem
200034c4 l     O .bss	0000001c ble_hs_conn_pool
200034e0 l     O .bss	00000004 ble_hs_conns
0002e344 l     O .text	00000006 ble_hs_conn_null_addr
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
000227a8 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
000227f2 l     F .text	00000024 ble_hs_hci_rx_cmd_status
00022818 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
00022824 l     F .text	00000014 ble_hs_hci_lock
00022838 l     F .text	00000010 ble_hs_hci_unlock
00022848 l     F .text	0000002c ble_hs_hci_wait_for_ack
00022874 l     F .text	00000090 ble_hs_hci_process_ack
00022904 l     F .text	00000024 ble_hs_hci_rx_ack
00022928 l     F .text	00000020 ble_hs_hci_frag_alloc
00022948 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
200034e4 l     O .bss	00000004 ble_hs_hci_ack
200034ea l     O .bss	00000002 ble_hs_hci_buf_sz
200034ec l     O .bss	0000012c ble_hs_hci_frag_data
20003618 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
20003624 l     O .bss	0000001c ble_hs_hci_frag_mempool
20003640 l     O .bss	0000000c ble_hs_hci_mutex
2000364c l     O .bss	00000008 ble_hs_hci_sem
20003654 l     O .bss	00000004 ble_hs_hci_sup_feat
20003658 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00022bb8 l     F .text	00000018 ble_hs_hci_cmd_transport
00022bd0 l     F .text	00000038 ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00022c40 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00022c64 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00022c78 l     F .text	00000026 ble_hs_hci_evt_le_meta
00022c9e l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
00022cea l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00022cee l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00022cf2 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00022cf6 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00022cfa l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00022cfe l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00022d02 l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00022d06 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00022d0a l     F .text	00000014 ble_hs_hci_evt_hw_error
00022d1e l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
00022d32 l     F .text	00000014 ble_hs_hci_evt_encrypt_change
00022d46 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00022d78 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
00022dda l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
00022dee l     F .text	00000082 ble_hs_hci_evt_le_dir_adv_rpt
00022e70 l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
00022eee l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
00022f74 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
00022fda l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
00022fee l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
00023002 l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
00023016 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
0002e35c l     O .text	00000030 ble_hs_hci_evt_dispatch
0002e38c l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
000232dc l     F .text	00000038 ble_hs_id_addr_type_usable
2000365c l     O .bss	00000006 ble_hs_id_pub
20003664 l     O .bss	00000006 ble_hs_id_rnd
0002e410 l     O .text	00000002 priv_addr_types.12274
0002e414 l     O .text	00000002 pub_addr_types.12273
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
000233f8 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
0002348c l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
000235bc l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
000235ea l     F .text	0000001a ble_hs_pvcy_clear_entries
00023604 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
000236c4 l     F .text	00000084 ble_hs_pvcy_add_entry_hci
2000366c l     O .bss	00000010 ble_hs_pvcy_irk
2000367c l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
000237f8 l     F .text	0000001a ble_hs_startup_reset_tx
00023812 l     F .text	0000002c ble_hs_startup_le_read_buf_sz_tx
0002383e l     F .text	0000002c ble_hs_startup_read_buf_sz_tx
0002386a l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00023898 l     F .text	00000058 ble_hs_startup_set_evmask_tx
000238f0 l     F .text	00000046 ble_hs_startup_le_set_evmask_tx
00023936 l     F .text	00000060 ble_hs_startup_read_buf_sz
00023996 l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
000239be l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00023a3c l     F .text	00000044 ble_hs_stop_done
00023a80 l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
2000367d l     O .bss	00000001 ble_hs_stop_conn_cnt
20003680 l     O .bss	0000000c ble_hs_stop_gap_listener
2000368c l     O .bss	00000004 ble_hs_stop_listeners
20003690 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00023abc l     F .text	00000012 ble_l2cap_get_mtu
00023ace l     F .text	00000020 ble_l2cap_append_rx
00023bce l     F .text	0000004c ble_l2cap_rx_payload
200036b0 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
00023d84 l     F .text	0000001c ble_l2cap_sig_next_id
00023da0 l     F .text	00000014 ble_l2cap_sig_dispatch_get
00023db4 l     F .text	0000002c ble_l2cap_sig_proc_matches
00023de0 l     F .text	00000004 ble_l2cap_sig_rx_noop
00023de4 l     F .text	00000020 ble_l2cap_sig_update_call_cb
00023e04 l     F .text	00000024 ble_l2cap_sig_proc_insert
00023e28 l     F .text	00000068 ble_l2cap_sig_proc_extract
00023e90 l     F .text	00000020 ble_l2cap_sig_proc_alloc
00023eb0 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
00023ec4 l     F .text	00000058 ble_l2cap_sig_extract_expired
00023f1c l     F .text	00000014 ble_l2cap_sig_proc_free
00023f30 l     F .text	00000018 ble_l2cap_sig_process_status
00023f48 l     F .text	00000014 ble_l2cap_sig_rx_reject
00023f5c l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
00023fa8 l     F .text	00000084 ble_l2cap_sig_rx
0002402c l     F .text	0000009c ble_l2cap_sig_update_req_rx
20003754 l     O .bss	00000001 ble_l2cap_sig_cur_id
20003758 l     O .bss	00000014 ble_l2cap_sig_proc_mem
2000376c l     O .bss	0000001c ble_l2cap_sig_proc_pool
20003788 l     O .bss	00000008 ble_l2cap_sig_procs
0002e4d0 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
00024340 l     F .text	00000014 ble_sm_dispatch_get
00024354 l     F .text	00000028 ble_sm_proc_remove
0002437c l     F .text	00000038 ble_sm_proc_matches
000243b4 l     F .text	00000018 ble_sm_insert
000243cc l     F .text	0000000c ble_sm_rx_noop
000243d8 l     F .text	00000028 ble_sm_build_authreq
00024400 l     F .text	00000022 ble_sm_key_dist
00024422 l     F .text	00000004 ble_sm_chk_store_overflow_by_type
00024426 l     F .text	00000018 ble_sm_chk_store_overflow
0002443e l     F .text	00000010 ble_sm_state_after_pair
00024450 l     F .text	00000024 ble_sm_pair_base_fill
00024474 l     F .text	00000020 ble_sm_pair_req_fill
00024494 l     F .text	00000028 ble_sm_pair_rsp_fill
000244bc l     F .text	00000004 ble_sm_verify_auth_requirements
000244c0 l     F .text	0000000a ble_sm_gen_ediv
000244ca l     F .text	0000000c ble_sm_gen_master_id_rand
000244d6 l     F .text	0000000c ble_sm_gen_csrk
000244e2 l     F .text	00000014 ble_sm_io_action
000244f6 l     F .text	000000b2 ble_sm_pair_cfg
000245a8 l     F .text	00000026 ble_sm_gen_ltk
000245d0 l     F .text	0000003c ble_sm_exec
0002460c l     F .text	00000034 ble_sm_sec_req_exec
00024640 l     F .text	000000e6 ble_sm_fill_store_value
00024726 l     F .text	0000004a ble_sm_update_sec_state
00024770 l     F .text	00000032 ble_sm_key_exch_success
000247a2 l     F .text	0000027c ble_sm_key_exch_exec
00024a1e l     F .text	0000001e ble_sm_key_rxed
00024a3c l     F .text	00000040 ble_sm_start_encrypt_tx
00024a7c l     F .text	0000000e ble_sm_enc_restore_exec
00024a8a l     F .text	00000044 ble_sm_enc_start_exec
00024ace l     F .text	00000046 ble_sm_ltk_req_reply_tx
00024b14 l     F .text	00000024 ble_sm_ltk_start_exec
00024b38 l     F .text	0000002c ble_sm_ltk_req_neg_reply_tx
00024b64 l     F .text	0000004e ble_sm_ltk_restore_exec
00024bb2 l     F .text	00000012 ble_sm_random_exec
00024bc4 l     F .text	00000012 ble_sm_confirm_exec
00024bd6 l     F .text	00000014 ble_sm_proc_set_timer
00024bec l     F .text	00000070 ble_sm_extract_expired
00024c5c l     F .text	00000038 ble_sm_pair_fail_tx
00024c94 l     F .text	000000e8 ble_sm_persist_keys
00024d7c l     F .text	00000014 ble_sm_proc_free
00024d90 l     F .text	00000020 ble_sm_proc_alloc
00024db0 l     F .text	00000044 ble_sm_retrieve_ltk
00024df4 l     F .text	0000002a ble_sm_fail_rx
00024e1e l     F .text	00000040 ble_sm_read_bond
00024e5e l     F .text	0000007e ble_sm_chk_repeat_pairing
00024fa4 l     F .text	00000080 ble_sm_sign_info_rx
00025024 l     F .text	0000007a ble_sm_id_addr_info_rx
0002509e l     F .text	00000080 ble_sm_id_info_rx
0002511e l     F .text	0000007a ble_sm_master_id_rx
00025198 l     F .text	00000086 ble_sm_enc_info_rx
0002521e l     F .text	0000013a ble_sm_pair_req_rx
000253b2 l     F .text	000000ae ble_sm_confirm_rx
00025460 l     F .text	000000d6 ble_sm_pair_rsp_rx
0002561a l     F .text	00000108 ble_sm_enc_event_rx
00025724 l     F .text	00000078 ble_sm_rx
000258bc l     F .text	000000a4 ble_sm_pair_exec
00025970 l     F .text	0000006c ble_sm_random_rx
00025b3c l     F .text	000000dc ble_sm_sec_req_rx
20003790 l     O .bss	00000100 ble_sm_proc_mem
20003890 l     O .bss	0000001c ble_sm_proc_pool
200038ac l     O .bss	00000008 ble_sm_procs
0002e578 l     O .text	0000003c ble_sm_dispatch
0002e5b4 l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_lgcy.c
00025d04 l     F .text	0000003e ble_sm_gen_stk
0002e5e0 l     O .text	00000019 ble_sm_lgcy_init_ioa
0002e5fc l     O .text	00000019 ble_sm_lgcy_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
00025fa8 l     F .text	00000018 ble_store_status
0002606c l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
000261d0 l     F .text	0000005c ble_store_util_iter_unique_peer
00000000 l    df *ABS*	00000000 ble_uuid.c
0002e670 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_sm_alg.c
00026542 l     F .text	0000001c ble_sm_alg_xor_128
0002655e l     F .text	00000048 ble_sm_alg_encrypt
00000000 l    df *ABS*	00000000 ble_svc_ans.c
000266ec l     F .text	00000074 ble_svc_ans_new_alert_notify
00026760 l     F .text	0000002c ble_svc_ans_unr_alert_notify
0002678c l     F .text	00000026 ble_svc_ans_chr_write
000267b4 l     F .text	00000200 ble_svc_ans_access
200038b4 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
200038b6 l     O .bss	00000002 ble_svc_ans_conn_handle
200038b8 l     O .bss	00000001 ble_svc_ans_new_alert_cat
200038bc l     O .bss	00000008 ble_svc_ans_new_alert_cnt
200038c4 l     O .bss	00000014 ble_svc_ans_new_alert_val
200038d8 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
200038da l     O .bss	00000002 ble_svc_ans_new_alert_val_len
200038dc l     O .bss	00000001 ble_svc_ans_unr_alert_cat
200038e0 l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
200038e8 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
200038ea l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
20000300 l     O .data	00000004 __compound_literal.0
20000304 l     O .data	00000004 __compound_literal.1
20000308 l     O .data	00000004 __compound_literal.2
2000030c l     O .data	00000004 __compound_literal.3
20000310 l     O .data	00000004 __compound_literal.4
20000314 l     O .data	00000004 __compound_literal.5
20000318 l     O .data	00000090 __compound_literal.6
0002e680 l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_dis.c
00026a38 l     F .text	00000060 ble_svc_dis_access
200003a8 l     O .data	00000004 __compound_literal.0
200003ac l     O .data	00000004 __compound_literal.1
200003b0 l     O .data	00000004 __compound_literal.2
200003b4 l     O .data	00000048 __compound_literal.3
0002e6b8 l     O .text	00000020 ble_svc_dis_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00026b18 l     F .text	00000016 ble_svc_gap_device_name_write_access
00026b2e l     F .text	00000016 ble_svc_gap_appearance_write_access
00026b44 l     F .text	00000024 ble_svc_gap_device_name_read_access
00026b68 l     F .text	00000028 ble_svc_gap_appearance_read_access
00026b90 l     F .text	00000098 ble_svc_gap_access
200038ec l     O .bss	00000002 ble_svc_gap_appearance
20000418 l     O .data	00000004 __compound_literal.0
2000041c l     O .data	00000004 __compound_literal.1
20000420 l     O .data	00000004 __compound_literal.2
20000424 l     O .data	00000048 __compound_literal.3
2000046c l     O .data	00000020 ble_svc_gap_name
0002e6d8 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
00026ca4 l     F .text	00000068 ble_svc_gatt_access
200038ee l     O .bss	00000002 ble_svc_gatt_changed_val_handle
200038f0 l     O .bss	00000002 ble_svc_gatt_end_handle
200038f2 l     O .bss	00000002 ble_svc_gatt_start_handle
2000048c l     O .data	00000004 __compound_literal.0
20000490 l     O .data	00000004 __compound_literal.1
20000494 l     O .data	00000030 __compound_literal.2
0002e6f8 l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
00026d80 l     F .text	00000098 ble_store_config_find_sec
00026e18 l     F .text	00000038 ble_store_config_read_peer_sec
00026e50 l     F .text	00000038 ble_store_config_read_our_sec
00026e88 l     F .text	00000084 ble_store_config_find_cccd
00026f0c l     F .text	00000028 ble_store_config_read_cccd
00026f34 l     F .text	0000002e ble_store_config_print_key_sec
00026fa2 l     F .text	00000046 ble_store_config_print_value_sec
00026fe8 l     F .text	00000058 ble_store_config_write_peer_sec
00027040 l     F .text	00000058 ble_store_config_write_our_sec
00027098 l     F .text	0000004c ble_store_config_write_cccd
0002710c l     F .text	00000022 ble_store_config_delete_obj
0002712e l     F .text	00000024 ble_store_config_delete_sec
00027154 l     F .text	00000014 ble_store_config_delete_peer_sec
00027168 l     F .text	00000014 ble_store_config_delete_our_sec
0002717c l     F .text	00000028 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 addr.c
00027228 l     F .text	0000003a ble_hs_util_load_rand_addr
00027262 l     F .text	00000032 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 transport.c
000272c4 l     F .text	00000020 ble_transport_acl_put
200040f8 l     O .bss	00001040 pool_evt_lo_buf
20003b60 l     O .bss	0000000c mpool_acl
20003b6c l     O .bss	00000024 pool_acl
20003b90 l     O .bss	00000000 pool_acl_buf
20003b90 l     O .bss	0000001c pool_cmd
20003bac l     O .bss	00000104 pool_cmd_buf
20003cb0 l     O .bss	0000001c pool_evt
20003ccc l     O .bss	00000410 pool_evt_buf
200040dc l     O .bss	0000001c pool_evt_lo
20005138 l     O .bss	00000004 transport_put_acl_from_ll_cb
00000000 l    df *ABS*	00000000 bootutil_public.c
000274d4 l     F .text	0000000a boot_flag_decode
000274e0 l     F .text	00000018 boot_magic_decode
0002754c l     F .text	00000038 boot_read_flag
0002e77c l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 aes_encrypt.c
0002e804 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 base64.c
0002e904 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
00028194 l     F .text	00000006 cbuf_buf_reader_get8
0002819a l     F .text	00000014 cbor_buf_reader_cpy
000281ae l     F .text	0000001a cbor_buf_reader_cmp
000281c8 l     F .text	0000001c cbuf_buf_reader_get64
000281e4 l     F .text	00000008 cbuf_buf_reader_get32
000281ec l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cbor_buf_writer.c
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00028276 l     F .text	0000001c cbor_mbuf_reader_cpy
00028292 l     F .text	0000001c cbor_mbuf_reader_get8
000282ae l     F .text	00000018 cbor_mbuf_reader_cmp
000282c6 l     F .text	0000001e cbor_mbuf_reader_get64
000282e4 l     F .text	0000001a cbor_mbuf_reader_get32
000282fe l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
000283a8 l     F .text	00000094 create_container
0002843c l     F .text	00000074 encode_string
00000000 l    df *ABS*	00000000 cborparser.c
00028682 l     F .text	00000024 is_fixed_type
000286a6 l     F .text	00000004 iterate_noop
000286aa l     F .text	0000013c preparse_value
000287e6 l     F .text	0000004a preparse_next_value
00028830 l     F .text	000000ba extract_length
000288ea l     F .text	00000172 iterate_string_chunks
00028a5c l     F .text	000000f6 advance_internal
00028e24 l     F .text	00000082 advance_recursive
00000000 l    df *ABS*	00000000 cborpretty.c
00028ee8 l     F .text	00000028 hexDump
00028f10 l     F .text	0000022c utf8EscapedDump
0002913c l     F .text	000003dc value_to_pretty
00029518 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
000298a4 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00029d80 l     F .text	0000001e hal_flash_check_addr
20005140 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0002a054 l     F .text	00000028 nrf52k_flash_wait_ready
0002a07c l     F .text	00000050 nrf52k_flash_erase_sector
0002a0cc l     F .text	00000004 nrf52k_flash_init
0002a0d0 l     F .text	00000028 nrf52k_flash_sector_info
0002a0f8 l     F .text	000000c8 nrf52k_flash_write
0002a1c0 l     F .text	0000000e nrf52k_flash_read
0002ea18 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0002a1d0 l     F .text	000000f4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_watchdog.c
0002a41c l     F .text	00000016 nrf52_hal_wdt_default_handler
0002a434 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_clock.c
20005150 l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 nrf52_periph.c
0002a5e0 l     F .text	00000040 nrf52_periph_create_timers
0002a620 l     F .text	00000044 nrf52_periph_create_uart
20005154 l     O .bss	0000003c os_bsp_uart0
0002ea34 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
0002a670 l     F .text	0000000a nrf_read_timer_cntr
0002a67c l     F .text	000000f8 nrf_timer_set_ocmp
0002a774 l     F .text	0000000a nrf_timer_disable_ocmp
0002a77e l     F .text	00000010 nrf_rtc_disable_ocmp
0002a790 l     F .text	00000054 hal_timer_read_bsptimer
0002a7e4 l     F .text	00000070 hal_timer_chk_queue
0002a854 l     F .text	00000040 hal_rtc_timer_irq_handler
0002ea38 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0002ae58 l     F .text	00000004 malloc_lock_nop
0002ae5c l     F .text	00000002 malloc_unlock_nop
0002ae5e l     F .text	00000048 __malloc_from_block
0002aea8 l     F .text	00000064 __free_block
200004c4 l     O .data	00000018 __malloc_head
200004dc l     O .data	00000004 malloc_lock
200004e0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
0002aff4 l     F .text	00000004 stdin_read
0002aff8 l     F .text	00000010 stdout_write
200004e4 l     O .data	00000004 _stdin
200004e8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0002b110 l     F .text	000000fc ui2a
0002b20c l     F .text	00000028 i2a
0002b234 l     F .text	00000030 a2d
0002b264 l     F .text	00000036 a2i
0002b29a l     F .text	00000024 putf
0002b2c0 l     F .text	00000124 putchw
0002b3e4 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 log_fcb.c
0002b992 l     F .text	00000004 log_fcb_registered
0002b996 l     F .text	0000000a log_fcb_flush
0002b9a0 l     F .text	0000001e fcb_get_fa_hdr
0002b9be l     F .text	0000008a fcb_walk_back_find_start
0002ba48 l     F .text	000000b6 log_fcb_find_gte
0002bafe l     F .text	00000068 log_fcb_walk_impl
0002bb66 l     F .text	0000000a log_fcb_walk_area
0002bb70 l     F .text	0000000a log_fcb_walk
0002bb7a l     F .text	0000002c log_fcb_write_mbuf
0002bba6 l     F .text	0000002a log_fcb_hdr_body_bytes
0002bbd0 l     F .text	0000002c log_fcb_read
0002bbfc l     F .text	00000058 log_fcb_copy_entry
0002bf4e l     F .text	0000001c log_fcb_append
0002bc54 l     F .text	00000040 log_fcb_copy
0002bc94 l     F .text	000000a0 log_fcb_rtr_erase
0002bd34 l     F .text	00000060 log_fcb_start_append
0002bd94 l     F .text	00000094 log_fcb_append_mbuf_body
0002be28 l     F .text	0000006a log_fcb_append_mbuf
0002be92 l     F .text	000000bc log_fcb_append_body
0002bf6a l     F .text	00000062 log_fcb_read_mbuf
00000000 l    df *ABS*	00000000 crc8.c
0002ea88 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 log_mgmt.c
0002c000 l     F .text	0000000a cbor_cnt_writer
0002c00c l     F .text	00000098 log_mgmt_logs_list
0002c0a4 l     F .text	000000a0 log_mgmt_level_list
0002c144 l     F .text	000000a0 log_mgmt_module_list
0002c1e4 l     F .text	00000098 log_mgmt_clear
0002c27c l     F .text	000000cc log_encode_entries
0002c724 l     F .text	00000084 log_mgmt_cb_encode
0002c348 l     F .text	00000098 log_encode
0002c3e0 l     F .text	00000158 log_mgmt_show
0002c538 l     F .text	000001ec log_mgmt_encode_entry
200004f0 l     O .data	0000000c log_mgmt_group
200004fc l     O .data	00000030 log_mgmt_handlers
00000000 l    df *ABS*	00000000 stat_mgmt.c
0002c7b8 l     F .text	0000008c stat_mgmt_list
0002c844 l     F .text	000000bc stat_mgmt_show
0002c900 l     F .text	00000032 stat_mgmt_cb_encode
2000052c l     O .data	0000000c stat_mgmt_group
20000538 l     O .data	00000010 stat_mgmt_handlers
00000000 l    df *ABS*	00000000 uart_hal.c
0002c944 l     F .text	00000022 uart_hal_blocking_tx
0002c966 l     F .text	00000022 uart_hal_start_rx
0002c988 l     F .text	00000022 uart_hal_start_tx
0002c9aa l     F .text	0000002c uart_hal_resume
0002c9d6 l     F .text	0000002c uart_hal_suspend
0002ca02 l     F .text	00000012 uart_hal_close
0002ca14 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
0002cb04 l     F .text	00000020 hal_uart_tx_fill_buf
0002cb24 l     F .text	00000072 uart_irq_handler
0002cb98 l     F .text	00000014 uart0_irq_handler
0002cbac l     F .text	00000014 uart1_irq_handler
0002cbc0 l     F .text	00000104 hal_uart_baudrate
200051ac l     O .bss	0000001c uart0
200051c8 l     O .bss	0000001c uart1
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 ble_test_target-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00000000 l    df *ABS*	00000000 
0002d2cc l       .text	00000000 __init_array_end
0002d2cc l       .text	00000000 __preinit_array_end
0002d2cc l       .text	00000000 __init_array_start
0002d2cc l       .text	00000000 __preinit_array_start
00028b52 g     F .text	00000090 _cbor_value_decode_int64_internal
0000da44 g     F .text	00000054 os_mbuf_trim_front
20003a70 g     O .bss	000000f0 ble_store_config_peer_secs
00017d4e g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
0001c8c4 g     F .text	00000004 ble_att_clt_tx_read_group_type
00022560 g     F .text	0000001c ble_hs_conn_find_by_idx
00012500 g     F .text	0000006c scfg_register
00013814 g     F .text	00000028 img_mgmt_module_init
0002a4f8 g     F .text	00000070 nrf52_clock_hfxo_request
00023068 g     F .text	000000a0 ble_hs_hci_evt_acl_process
000107b0 g     F .text	000000a0 uart_console_init
000158d4 g     F .text	00000030 ble_ll_adv_rpa_timeout
00028398 g     F .text	00000010 cbor_mbuf_writer_init
00013498 g     F .text	00000190 img_mgmt_impl_upload_inspect
00023360 g     F .text	00000050 ble_hs_id_infer_auto
200026a8 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
0001c8c8 g     F .text	00000004 ble_att_clt_rx_read_group_type
0000e650 g     F .text	00000030 os_arch_start
00010aca g     F .text	00000024 flash_area_id_from_image_slot
20003404 g     O .bss	00000038 ble_hs_stats
0000f940 g     F .text	00000014 conf_fcb_dst
200051e8 g       .bss	00000000 __HeapBase
2000194c g     O .bss	00000008 g_os_task_list
0000cc80 g     F .text	00000084 os_idle_task
0001c8b8 g     F .text	00000004 ble_att_clt_tx_read_blob
0002b088 g     F .text	00000014 strcpy
00017344 g     F .text	00000024 ble_ll_conn_set_global_chanmap
20002c10 g     O .bss	000000e4 ble_att_stats
20001990 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
0000c18e  w    F .text	00000002 TIMER2_IRQHandler
0002b82c g     F .text	00000018 fmemopen_w
00013304 g     F .text	000000a4 img_mgmt_state_write
0001219c g     F .text	00000048 mem_split_frag
0002537e g     F .text	00000034 ble_sm_proc_can_advance
0000c188  w    F .text	00000002 DebugMon_Handler
0000c878 g     F .text	0000002c print_addr
0000d5c8 g     F .text	0000005a os_mbuf_copydata
20000f64 g     O .bss	00000008 g_os_mempool_list
0000cf00 g     F .text	0000001a os_callout_init
0000cf1c g     F .text	0000003c os_callout_stop
0001f4b6 g     F .text	0000004a ble_gap_notify_rx_event
0000c18e  w    F .text	00000002 RTC0_IRQHandler
0001adf0 g     F .text	00000074 ble_ll_sched_adv_resched_pdu
00015b50 g     F .text	00000040 ble_ll_adv_rx_isr_start
00013e98 g     F .text	00000028 stat_mgmt_module_init
00027632 g     F .text	0000009a boot_read_swap_state
0001c0d4 g     F .text	00000124 ble_phy_tx
00026d0c g     F .text	00000074 ble_svc_gatt_init
0001890c g     F .text	00000050 ble_ll_ctrl_proc_start
0002af0c g     F .text	00000050 add_malloc_block
200026d0 g     O .bss	00000040 g_ble_ll_whitelist
00020582 g     F .text	0000002c ble_gattc_rx_err
000227a0 g     F .text	00000002 ble_hs_flow_connection_broken
00013fb8 g     F .text	00000024 mgmt_write_rsp_status
00017dd0 g     F .text	00000070 ble_ll_conn_hci_set_data_len
0001498c g     F .text	0000007c ble_ll_reset
0000d20a g     F .text	00000070 os_eventq_put
000231f8 g     F .text	0000001c ble_hs_id_set_pub
00013a3c g     F .text	0000005c log_mgmt_impl_foreach_entry
0001a228 g     F .text	0000012c ble_ll_resolv_list_add
20000100 g       .data	00000000 __data_start__
00026114 g     F .text	00000018 ble_store_key_from_value_cccd
0000d8ce g     F .text	0000005c os_mbuf_extend
0002b0d8 g     F .text	00000020 strtok_r
0002ea00 g     O .text	00000018 nrf52k_flash_dev
000241d8 g     F .text	00000048 ble_l2cap_sig_timer
00029a02 g     F .text	00000040 fcb_append_finish
20003374 g     O .bss	0000001c ble_hs_hci_ev_pool
0002825c g     F .text	00000014 cbor_buf_writer_init
0002b76c g     F .text	00000024 printf
0002ea50 g     O .text	00000004 stdout
0000c18e  w    F .text	00000002 SWI0_EGU0_IRQHandler
0002ea5c g     O .text	0000002c log_fcb_handler
00026156 g     F .text	0000007a ble_store_iterate
00029602 g     F .text	00000024 fcb_free_sector_cnt
00011224 g     F .text	0000000a log_flush
20003704 g     O .bss	0000001c ble_l2cap_chan_pool
00017e92 g     F .text	00000042 ble_ll_conn_hci_le_ltk_neg_reply
0000e5c0 g     F .text	0000008c os_arch_os_init
00011e8c g     F .text	00000044 log_reboot
0000c17e  w    F .text	00000002 HardFault_Handler
0001da1e g     F .text	000000a6 ble_att_svr_rx_read_type
0002a8a4 g     F .text	00000068 hal_timer_init
0002150c g     F .text	00000080 ble_gatts_bonding_established
00011918 g     F .text	0000001a mfg_seek_next_with_type
0001dc02 g     F .text	000000c2 ble_att_svr_rx_read_group_type
000205f8 g     F .text	00000058 ble_gattc_init
0002acb6 g     F .text	00000008 os_cputime_timer_stop
0002852a g     F .text	0000007e cbor_encode_int
0001c054 g     F .text	00000048 ble_phy_rx_set_start_time
000276ec g     F .text	00000054 boot_write_swap_info
0000e680 g     F .text	00000060 os_arch_os_start
20003048 g     O .bss	00000088 ble_gap_stats
200032f0 g     O .bss	00000034 ble_gatts_stats
20001ab0 g     O .bss	00000001 g_console_ignore_non_nlip
2000023c g     O .data	00000020 id_conf
0001e97a g     F .text	00000004 ble_gap_master_in_progress
0002231c g     F .text	0000002a ble_hs_atomic_conn_delete
20001ab2 g     O .bss	00000001 g_console_silence_non_nlip
0000c97c g     F .text	00000090 gatt_svr_register_cb
00028c04 g     F .text	00000048 cbor_value_advance_fixed
0001dff0 g     F .text	00000048 ble_att_svr_init
00029dca g     F .text	00000010 hal_flash_align
00011148 g     F .text	00000014 log_read
00013ab0 g     F .text	00000028 log_mgmt_module_init
00021704 g     F .text	0000003c ble_gatts_init
00014954 g     F .text	0000000c ble_ll_state_get
00025358 g     F .text	00000026 ble_sm_ioact_state
0000c18e  w    F .text	00000002 SWI2_EGU2_IRQHandler
000274fe g     F .text	0000001e boot_magic_compatible_check
00013010 g     F .text	00000018 img_mgmt_my_version
000260ee g     F .text	0000000e ble_store_read_cccd
000205ae g     F .text	00000024 ble_gattc_rx_mtu
0000e922 g     F .text	0000000c SysTick_Handler
00024254 g     F .text	0000003a ble_l2cap_sig_tx
00019b9a g     F .text	00000044 ble_ll_hci_ev_conn_update
0000c18e  w    F .text	00000002 GPIOTE_IRQHandler
0001d934 g     F .text	0000006e ble_att_svr_rx_find_info
00019f34 g     F .text	00000080 ble_ll_rand_data_get
0002602c g     F .text	00000040 ble_store_write
00020578 g     F .text	0000000a ble_gatts_indicate
0001dbc4 g     F .text	0000003e ble_att_svr_rx_read_mult
00024180 g     F .text	00000020 ble_l2cap_sig_create_chan
0001b390 g     F .text	00000048 ble_hw_rng_init
000147c4 g     F .text	00000028 ble_ll_rx_pdu_in
00012b06 g     F .text	0000000c cbor_read_object
00028378 g     F .text	0000001e cbor_mbuf_writer
0000dc7e g     F .text	0000002a os_memblock_put
0000c18e  w    F .text	00000002 PWM1_IRQHandler
0000f10c g     F .text	0000000c conf_dst_register
0000ddc2 g     F .text	00000024 os_msys_get_pkthdr
20001b2c g     O .bss	00000004 flash_map
0000e9d2 g     F .text	00000030 memmove
0001a484 g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
0001c8b4 g     F .text	00000004 ble_att_clt_rx_read
00029f8c g     F .text	00000032 hal_flash_is_erased
0002186c g     F .text	00000008 ble_hs_lock
0001a44e g     F .text	00000036 ble_ll_resolv_local_addr_rd
00026014 g     F .text	00000018 ble_store_overflow_event
0000e8f8 g     F .text	0000002a PendSV_Handler
0002b7ca g     F .text	0000001c snprintf
00023bba g     F .text	00000014 ble_l2cap_remove_rx
0000c17c  w    F .text	00000002 NMI_Handler
000211b0 g     F .text	0000005c ble_gatts_connection_broken
0002eb74 g       .ARM.exidx	00000000 __exidx_end
0001b434 g     F .text	0000000c ble_hw_resolv_list_clear
0000ca0c g     F .text	00000018 gatt_svr_init
0000c020 g       .text	00000000 __isr_vector_start
00017c42 g     F .text	00000098 ble_ll_conn_hci_disconnect_cmd
00010f08 g     F .text	00000048 log_init
0002b7fc g     F .text	0000002e memfile_write
0000e534 g     F .text	00000014 os_arch_ctx_sw
00017368 g     F .text	000001f4 ble_ll_conn_periph_start
000285a8 g     F .text	0000005e cbor_encode_simple_value
0001212c g     F .text	00000020 stats_init_and_reg
0002ca9c g     F .text	00000068 uart_hal_init
0000c1ac g     F .text	0000002c hal_system_reset
0002acee g     F .text	00000042 os_error_to_sys
0001a600 g     F .text	00000034 ble_ll_resolv_init
0000cd30 g     F .text	00000088 os_init_idle_task
000281f8 g     F .text	00000038 cbor_buf_reader_init
000259dc g     F .text	0000003a ble_sm_timer
20000188 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000dfac g     F .text	0000000c os_sched_set_current_task
0000c18e  w    F .text	00000002 POWER_CLOCK_IRQHandler
00023b54 g     F .text	0000002c ble_l2cap_parse_hdr
00016ac4 g     F .text	00000060 ble_ll_conn_update_eff_data_len
0002eb74 g       .ARM.exidx	00000000 __etext
0001e9a6 g     F .text	0000002a ble_gap_rx_l2cap_update_req
0002dd1c g     O .text	0000002a g_ble_ll_ctrl_pkt_lengths
0001476c g     F .text	0000002c ble_ll_set_random_addr
00023684 g     F .text	0000003e ble_hs_pvcy_set_mode
0000e4b0 g     F .text	0000004e os_get_uptime_usec
00010528 g     F .text	0000003c console_vprintf
00021b64 g     F .text	00000254 ble_hs_init
0001b4b4 g     F .text	00000004 ble_hw_resolv_list_size
0001f1e4 g     F .text	0000012c ble_gap_update_params
000179a0 g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
0000dda8 g     F .text	0000001a os_msys_get
0000c18e  w    F .text	00000002 RADIO_IRQHandler
00022434 g     F .text	00000050 ble_hs_conn_free
00010a36 g     F .text	00000026 flash_area_write
00021dcc g     F .text	00000008 ble_transport_hs_init
00015948 g     F .text	00000108 ble_ll_adv_set_adv_params
0000d92a g     F .text	00000108 os_mbuf_pullup
000203b8 g     F .text	00000068 ble_gattc_timer
00014c12 g     F .text	0000000a ble_transport_to_ll_acl_impl
20001b10 g     O .bss	00000010 rx_ev
20001ea8 g     O .bss	0000010c ble_ll_stats
000139b4 g     F .text	00000016 log_mgmt_impl_get_module
0000e6f8 g     F .text	000000c0 os_mutex_release
00011fbc g     F .text	0000000a stats_size
00013f64 g     F .text	0000000e mgmt_streamer_init_writer
00012104 g     F .text	00000028 stats_register
0002346a g     F .text	00000022 ble_hs_mbuf_pullup_base
0000de68 g     F .text	00000020 os_sanity_check_register
20000548 g       .bssnz	00000000 __bssnz_start__
20001a58 g     O .bss	00000004 conf_load_srcs
00029666 g     F .text	00000020 fcb_get_len
00015c34 g     F .text	00000034 ble_ll_adv_reset
0000e414 g     F .text	00000026 os_time_delay
0001f500 g     F .text	00000044 ble_gap_notify_tx_event
000277dc g     F .text	0000000a boot_swap_type
2000279c g     O .bss	00000034 g_ble_phy_data
0000d802 g     F .text	00000088 os_mbuf_copyinto
0002257c g     F .text	0000000e ble_hs_conn_exists
000188a8 g     F .text	00000064 ble_ll_ctrl_terminate_start
0000c18e  w    F .text	00000002 PDM_IRQHandler
0001eba4 g     F .text	00000024 ble_gap_adv_set_fields
00010580 g     F .text	0000000c console_get_ticks
000258ac g     F .text	00000010 ble_sm_our_pair_rand
0001bbc4 g     F .text	0000004e ble_phy_txpower_round
200019b8 g     O .bss	00000034 g_smp_ble_transport
00015c68 g     F .text	00000024 ble_ll_adv_enabled
00028be2 g     F .text	00000022 cbor_parser_init
00022b58 g     F .text	0000000c ble_hs_hci_set_hci_version
0000d73e g     F .text	000000c4 os_mbuf_prepend
000147ec g     F .text	00000034 ble_ll_acl_data_in
200002d8 g     O .data	00000028 ble_hs_cfg
0001dd72 g     F .text	00000014 ble_att_svr_prep_clear
000262e0 g     F .text	00000038 ble_store_util_status_rr
0001b354 g     F .text	0000003c ble_hw_encrypt_block
000257c0 g     F .text	000000ec ble_sm_ltk_req_rx
2000258c g     O .bss	000000d8 g_ble_ll_resolv_list
0000dca8 g     F .text	00000010 os_mempool_module_init
0000ed5c g     F .text	0000000c mgmt_evq_set
0000c18e  w    F .text	00000002 TEMP_IRQHandler
0000e55a g     F .text	0000000a os_arch_in_critical
0002644c g     F .text	0000000e ble_uuid_u16
0000c18e  w    F .text	00000002 QDEC_IRQHandler
00016988 g     F .text	00000026 ble_ll_conn_auth_pyld_timer_start
0000c18e  w    F .text	00000002 TIMER3_IRQHandler
00022670 g     F .text	00000080 ble_hs_conn_find_by_addr
0001404c g     F .text	00000010 mgmt_evt
0001b40c g     F .text	00000028 ble_hw_rng_stop
00016e54 g     F .text	000001a0 ble_ll_conn_rx_data_pdu
0000e52a g     F .text	0000000a timer_handler
00013e4c g     F .text	00000024 stat_mgmt_impl_get_group
0000d17c g     F .text	00000020 os_dev_lookup
0000dfb8 g     F .text	00000090 os_sched_sleep
000227a2 g     F .text	00000002 ble_hs_flow_track_data_mbuf
00013f32 g     F .text	00000010 mgmt_streamer_reset_buf
0000e9b8 g     F .text	0000001a memcpy
000217f0 g     F .text	0000000c ble_hs_evq_get
0001b1d8 g     F .text	0000003c ble_hw_get_static_addr
00013fdc g     F .text	00000012 mgmt_err_from_cbor
00022558 g     F .text	00000008 ble_hs_conn_find_assert
0000c18e  w    F .text	00000002 PWM3_IRQHandler
00015bf0 g     F .text	0000002c ble_ll_adv_get_local_rpa
0000f398 g     F .text	00000034 conf_parse_name
0001a4d8 g     F .text	0000003a ble_ll_resolve_set_priv_mode
0002a454 g     F .text	00000080 hal_watchdog_init
0001a1d4 g     F .text	00000014 ble_ll_resolv_list_read_size
000130e8 g     F .text	00000056 img_mgmt_state_set_pending
0001ac4c g     F .text	00000094 ble_ll_sched_conn_periph_new
0001a3ec g     F .text	0000002c ble_ll_resolv_enable_cmd
20002218 g     O .bss	00000001 g_ble_ll_tx_power
000278cc g     F .text	000000bc tc_aes128_set_encrypt_key
0000f118 g     F .text	00000054 conf_load
0001b858 g     F .text	00000088 ble_phy_wfr_enable
00013772 g     F .text	0000002a img_mgmt_impl_erase_image_data
00021138 g     F .text	00000078 ble_gatts_register_svcs
00017bdc g     F .text	00000066 ble_ll_conn_hci_param_nrr
0002ac64 g     F .text	0000000c os_cputime_init
20001a64 g     O .bss	00000004 conf_handlers
0002aa80 g     F .text	00000028 hal_timer_set_cb
0001de38 g     F .text	000000b4 ble_att_svr_rx_exec_write
0001ee2c g     F .text	00000054 ble_gap_terminate_with_conn
00023214 g     F .text	00000078 ble_hs_id_set_rnd
0001895c g     F .text	00000032 ble_ll_ctrl_initiate_dle
0002cfb0 g     F .text	00000000 .hidden __aeabi_uldivmod
0001c920 g     F .text	00000040 ble_att_clt_tx_indicate
00029fbe g     F .text	00000062 hal_flash_isempty
0000ca94 g     F .text	00000048 split_app_init
00000020 g       *ABS*	00000000 _imghdr_size
0000df70 g     F .text	00000030 os_sched_ctx_sw_hook
00029b0a g     F .text	00000052 fcb_elem_info
20001a94 g     O .bss	00000004 console_is_midline
0000d460 g     F .text	00000014 os_mbuf_free
0000c18e  w    F .text	00000002 FPU_IRQHandler
0001f5b2 g     F .text	00000038 ble_gap_mtu_event
0000c18e  w    F .text	00000002 USBD_IRQHandler
0001c96a g     F .text	00000026 ble_att_cmd_prepare
20000100 g     O .data	00000004 SystemCoreClock
00019ec8 g     F .text	0000001c ble_ll_hci_vs_init
0000c190 g     F .text	0000000c hal_system_init
00025cc8 g     F .text	0000003c ble_sm_tx
00023b24 g     F .text	00000028 ble_l2cap_chan_free
00028606 g     F .text	0000000e cbor_encode_byte_string
0000c18e  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001f464 g     F .text	00000026 ble_gap_identity_event
0000e564 g     F .text	00000044 os_arch_task_stack_init
0002645a g     F .text	0000003e ble_uuid_init_from_att_buf
000179ca g     F .text	00000034 ble_ll_disconn_comp_event_send
0002af5c g     F .text	0000006c malloc
0001d6f0 g     F .text	00000030 ble_att_svr_read_handle
00010a10 g     F .text	00000026 flash_area_read
00013840 g     F .text	00000014 img_mgmt_impl_log_upload_start
00019160 g     F .text	00000018 ble_ll_ctrl_init_conn_sm
0000f608 g     F .text	0000002c conf_str_from_bytes
0000cba4 g     F .text	00000044 __assert_func
0001a1e8 g     F .text	00000040 ble_ll_resolv_list_find
00021418 g     F .text	000000cc ble_gatts_rx_indicate_ack
0000eadc g     F .text	00000018 imgr_my_version
0001c540 g     F .text	000001f8 ble_att_inc_tx_stat
00013712 g     F .text	00000032 img_mgmt_impl_read
0000e10c g     F .text	00000048 os_sched_wakeup_ticks
000104c8 g     F .text	00000060 console_pkg_init
0000eb98 g     F .text	0000002c imgmgr_module_init
0000c184  w    F .text	00000002 UsageFault_Handler
000164d0 g     F .text	00000028 ble_ll_conn_sm_get
0002b790 g     F .text	0000003a vsnprintf
0002b0f8 g     F .text	0000000c strtoll
000272e4 g     F .text	00000010 ble_transport_alloc_cmd
20000f44 g     O .bss	00000008 g_callout_list
00023748 g     F .text	00000038 ble_hs_pvcy_add_entry
00026498 g     F .text	00000026 ble_uuid_init_from_att_mbuf
00016400 g     F .text	00000038 ble_ll_conn_find_by_peer_addr
00022b4c g     F .text	0000000c ble_hs_hci_set_le_supported_feat
0001b3d8 g     F .text	00000034 ble_hw_rng_start
000214e4 g     F .text	00000028 ble_gatts_tx_notifications
00014714 g     F .text	00000016 ble_ll_chk_txrx_time
2000233c g     O .bss	00000016 g_ble_ll_conn_params
0000c18e  w    F .text	00000002 UARTE0_UART0_IRQHandler
00013d1c g     F .text	00000008 os_mgmt_module_init
0002b448 g     F .text	00000300 tfp_format
00013164 g     F .text	000001a0 img_mgmt_state_read
2003fe50 g       *ABS*	00000000 __HeapLimit
20000570 g       .bss	00000000 __bss_start__
00021874 g     F .text	00000008 ble_hs_unlock
0000c19c g     F .text	00000010 hal_debugger_connected
00026518 g     F .text	00000006 ble_uuid_length
0001c8d8 g     F .text	00000004 ble_att_clt_tx_exec_write
0001c89c g     F .text	00000004 ble_att_clt_rx_find_info
00029e3c g     F .text	00000070 hal_flash_write
0000c18e  w    F .text	00000002 TIMER4_IRQHandler
0001b1a8 g     F .text	00000030 ble_hw_get_public_addr
0001f544 g     F .text	0000006e ble_gap_subscribe_event
0002d008 g     F .text	000002be .hidden __udivmoddi4
00025d44 g     F .text	000000a8 ble_sm_lgcy_io_action
000199fc g     F .text	0000006c ble_ll_hci_is_event_enabled
00027882 g     F .text	00000040 boot_set_confirmed_multi
0001bb20 g     F .text	00000054 ble_phy_encrypt_enable
00028dec g     F .text	00000038 _cbor_value_copy_string
0001bbb8 g     F .text	0000000c ble_phy_set_txend_cb
0001b440 g     F .text	0000003c ble_hw_resolv_list_add
00023108 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
00019fdc g     F .text	0000002c ble_ll_rand_prand_get
0001c210 g     F .text	00000010 ble_phy_xcvr_state_get
00022598 g     F .text	000000d8 ble_hs_conn_addrs
20001944 g     O .bss	00000004 g_current_task
0000de88 g     F .text	00000084 os_sanity_run
0001bc30 g     F .text	0000000c ble_phy_set_rx_pwr_compensation
00016db4 g     F .text	00000030 ble_ll_conn_timeout
200022a8 g     O .bss	00000004 g_ble_ll_cur_adv_sm
00028656 g     F .text	0000002c cbor_encoder_close_container
0000e548 g     F .text	0000000c os_arch_save_sr
00023522 g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
0002158c g     F .text	000000e4 ble_gatts_bonding_restored
0001a1ac g     F .text	00000028 ble_ll_resolv_list_clr
0002cf68 g     F .text	00000048 hal_uart_close
00027584 g     F .text	0000001c boot_write_magic
00021dc2 g     F .text	0000000a ble_transport_to_hs_acl_impl
0000dbc0 g     F .text	00000014 os_mempool_init
0000f05c g     F .text	0000002c config_pkg_init
000130a4 g     F .text	00000026 img_mgmt_state_any_pending
0000e43c g     F .text	00000038 os_gettimeofday
20001954 g     O .bss	00000001 g_task_id
0000f3cc g     F .text	00000016 conf_parse_and_lookup
00017da2 g     F .text	0000002e ble_ll_conn_hci_set_chan_class
2000343c g     O .bss	00000001 ble_hs_sync_state
00012b98 g     F .text	0000013c img_mgmt_read_info
20000284 g     O .data	00000008 g_stats_registry
0001ea38 g     F .text	00000124 ble_gap_adv_start
0001c8e0 g     F .text	00000040 ble_att_clt_tx_notify
0000f378 g     F .text	00000020 conf_handler_lookup
00014a10 g     F .text	00000070 ble_ll_pdu_max_tx_octets_get
00013f42 g     F .text	00000014 mgmt_streamer_write_at
00022b3c g     F .text	00000010 ble_hs_hci_acl_tx
00016438 g     F .text	00000048 ble_ll_conn_itvl_to_ticks
20002550 g     O .bss	0000000c g_ble_ll_rnum_data
00013d0c g     F .text	00000010 os_mgmt_register_group
0001dac4 g     F .text	0000007e ble_att_svr_rx_read
0002abe4 g     F .text	00000016 get_le32
0002cdac g     F .text	00000064 hal_uart_blocking_tx
00018672 g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
0002eb5c g       .text	00000000 __exidx_start
00020420 g     F .text	00000080 ble_gatts_notify_custom
0002b844 g     F .text	0000011c strntoumax
0001edd8 g     F .text	00000004 ble_gap_disc_active
0000df0c g     F .text	00000010 os_sanity_init
20002330 g     O .bss	00000004 g_ble_ll_conn_cur_sm
0002d8c0 g     O .text	0000001c g_smp_cbor_cfg
0000d4a6 g     F .text	000000a8 os_mbuf_append
00011932 g     F .text	0000000a mfg_read_tlv_mmr_ref
0001c8b0 g     F .text	00000004 ble_att_clt_tx_read
0000e898 g     F .text	00000014 os_set_env
0001c8d4 g     F .text	00000004 ble_att_clt_rx_prep_write
00029d64 g     F .text	00000010 hal_bsp_flash_dev
0000c418 g     F .text	0000004c __libc_init_array
0002a664 g     F .text	0000000c nrf52_periph_create
00023678 g     F .text	0000000c ble_hs_pvcy_our_irk
0002ea54 g     O .text	00000008 MemFile_methods
20001938 g     O .bss	0000000c g_os_sanity_check_mu
0002187c g     F .text	0000001c ble_hs_process_rx_data_queue
000265a6 g     F .text	00000050 ble_sm_alg_s1
0002e43c g     O .text	00000006 ble_hs_misc_null_addr
00010a82 g     F .text	0000000a flash_area_align
0000c18e  w    F .text	00000002 CRYPTOCELL_IRQHandler
0000e2b8 g     F .text	0000005c os_task_info_get
0000cb6c g     F .text	00000038 _sbrk
0001bb74 g     F .text	00000010 ble_phy_encrypt_set_pkt_cntr
00026108 g     F .text	0000000c ble_store_delete_cccd
00028ed2 g     F .text	00000014 cbor_value_calculate_string_length
0002a2c4 g     F .text	000000b0 os_tick_idle
00016b24 g     F .text	00000114 ble_ll_conn_end
00010564 g     F .text	0000001c console_printf
00023622 g     F .text	00000032 ble_hs_pvcy_remove_entry
0001afe8 g     F .text	00000038 ble_ll_utils_calc_window_widening
00010330 g     F .text	00000008 console_blocking_mode
0000f16c g     F .text	00000018 conf_ensure_loaded
00028c4c g     F .text	0000014e cbor_value_enter_container
0000c18e  w    F .text	00000002 I2S_IRQHandler
0001ebc8 g     F .text	0000000a ble_gap_adv_active
0000c414  w    F .text	00000002 _init
00015a9e g     F .text	00000020 ble_ll_hci_set_adv_data
0001c9ac g     F .text	0000004a ble_att_tx
000216b8 g     F .text	0000004c ble_gatts_count_cfg
00029eac g     F .text	000000e0 hal_flash_erase
0001b214 g     F .text	00000018 ble_hw_whitelist_clear
000274f8 g     F .text	00000006 boot_swap_info_off
00015a64 g     F .text	0000001a ble_ll_hci_adv_set_enable
00023314 g     F .text	00000032 ble_hs_id_copy_addr
00015b0c g     F .text	00000044 ble_ll_adv_rx_pkt_in
00029b5c g     F .text	00000048 fcb_getnext_in_area
0000c18e  w    F .text	00000002 SWI4_EGU4_IRQHandler
000124e4 g     F .text	0000001a scfg_save_val
0001f6f4 g     F .text	00000038 ble_gap_event_listener_unregister
00023c1a g     F .text	000000ca ble_l2cap_rx
0000ed68 g     F .text	00000026 smp_rx_req
0002a374 g     F .text	000000a8 os_tick_init
0001b7d4 g     F .text	00000084 ble_phy_rxpdu_copy
0001f48a g     F .text	0000002c ble_gap_repeat_pairing_event
00029886 g     F .text	0000001e fcb_clear
00026f62 g     F .text	00000040 ble_store_config_read
00023422 g     F .text	0000000a ble_hs_mbuf_acl_pkt
00029a42 g     F .text	000000c8 fcb_elem_crc8
000275a0 g     F .text	00000062 boot_write_trailer
0001c8dc g     F .text	00000004 ble_att_clt_rx_exec_write
00012dc8 g     F .text	00000014 img_mgmt_dfu_pending
00011374 g     F .text	00000008 log_console_get
00024edc g     F .text	0000000a ble_sm_gen_pair_rand
0000c18e  w    F .text	00000002 TIMER0_IRQHandler
0000cdb8 g     F .text	000000d8 os_init
00027740 g     F .text	0000009c boot_swap_type_multi
0002120c g     F .text	00000148 ble_gatts_start
0000c120 g     F .text	0000005c Reset_Handler
00022994 g     F .text	00000020 ble_hs_hci_set_buf_sz
00029640 g     F .text	00000026 fcb_put_len
0000c18e  w    F .text	00000002 UARTE1_IRQHandler
0002acd8 g     F .text	00000016 os_cputime_ticks_to_usecs
000115f8 g     F .text	00000040 modlog_append
0000ef2c g     F .text	0000004c smp_ble_pkg_init
200034e8 g     O .bss	00000002 ble_hs_hci_avail_pkts
00010124 g     F .text	0000000c console_echo
00016ff4 g     F .text	00000270 ble_ll_conn_rx_isr_end
000280d4 g     F .text	0000001a _copy
00025a96 g     F .text	000000a6 ble_sm_enc_initiate
20001e3c g     O .bss	00000001 sysinit_active
0001b334 g     F .text	00000014 ble_hw_whitelist_disable
0001ace0 g     F .text	0000007c ble_ll_sched_adv_new
0001b348 g     F .text	0000000c ble_hw_whitelist_match
00017cda g     F .text	00000044 ble_ll_conn_hci_rd_rem_ver_cmd
20001ab1 g     O .bss	00000001 g_console_silence
00019fb4 g     F .text	00000028 ble_ll_rand
000213c0 g     F .text	00000058 ble_gatts_send_next_indicate
0000cadc g     F .text	0000000c split_app_active_get
0002ab98 g     F .text	00000008 put_le16
0001f35e g     F .text	00000024 ble_gap_unpair_oldest_peer
200033d4 g     O .bss	00000002 ble_hs_max_services
00018652 g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
0000d3f6 g     F .text	0000000a os_mbuf_pool_init
0001d564 g     F .text	00000038 ble_att_svr_find_by_uuid
00028622 g     F .text	0000000a cbor_encoder_create_array
0000e92e g     F .text	0000001e os_default_irq_asm
0000e154 g     F .text	0000000c os_sched_next_task
0001ef00 g     F .text	00000090 ble_gap_conn_broken
0000df1c g     F .text	00000054 os_sched_insert
0000cf58 g     F .text	00000080 os_callout_reset
00011948 g     F .text	00000040 mfg_init
0001c77e g     F .text	0000002c ble_att_mtu
0002a568 g     F .text	00000044 nrf52_clock_hfxo_release
0000d1e0 g     F .text	00000010 os_dev_reset
0001c80c g     F .text	00000028 ble_att_clt_rx_error
000241a0 g     F .text	00000038 ble_l2cap_sig_conn_broken
000226f0 g     F .text	0000007c ble_hs_conn_timer
0002b750 g     F .text	0000001c fprintf
00023512 g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
00021ab4 g     F .text	0000000c ble_hs_hw_error
0002302c g     F .text	0000003c ble_hs_hci_evt_process
0000e6e4 g     F .text	00000014 os_mutex_init
00013628 g     F .text	00000040 img_mgmt_impl_erase_slot
0000cb50 g     F .text	0000001c _sbrkInit
0001a878 g     F .text	00000034 ble_ll_rfmgmt_enable_now
00021374 g     F .text	0000004c ble_gatts_conn_init
00013f10 g     F .text	00000010 mgmt_streamer_alloc_rsp
0000d27a g     F .text	0000001a os_eventq_get_no_wait
0001c990 g     F .text	0000001c ble_att_cmd_get
2000056c g       .bssnz	00000000 __bssnz_end__
00010af0 g     F .text	00000068 flash_map_init
0001b0a4 g     F .text	00000010 ble_ll_whitelist_match
00026a98 g     F .text	0000000c ble_svc_dis_firmware_revision_set
0002b7e8 g     F .text	00000014 vprintf
00025ef6 g     F .text	000000b2 ble_sm_lgcy_random_rx
0002cfe0 g     F .text	00000028 .hidden __popcountsi2
0000cd24 g     F .text	0000000c os_started
0000c18e  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
00026368 g     F .text	0000003c ble_uuid_cmp
20000264 g     O .data	00000020 reboot_conf_handler
20001998 g     O .bss	00000004 g_smp_evq
0000f34c g     F .text	00000010 conf_unlock
000257b0 g     F .text	00000010 ble_sm_enc_key_refresh_rx
00022b70 g     F .text	00000048 ble_hs_hci_init
0000e0d0 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00019a68 g     F .text	0000003c ble_ll_hci_cmd_rx
00021824 g     F .text	00000024 ble_hs_is_parent_task
00013028 g     F .text	00000010 img_mgmt_register_group
000120e4 g     F .text	00000020 stats_group_find
00019d2e g     F .text	00000030 ble_ll_hci_ev_hw_err
0001b098 g     F .text	0000000c ble_ll_whitelist_read_size
0002da20 g     O .text	0000002c log_console_handler
0001a418 g     F .text	00000036 ble_ll_resolv_peer_addr_rd
0001232e g     F .text	0000001e rwlock_release_write
0000c18e  w    F .text	00000002 SPIM3_IRQHandler
000124a6 g     F .text	0000003e scfg_save_setting
00012d0a g     F .text	0000003c img_mgmt_find_by_hash
00028ea6 g     F .text	0000002c cbor_value_advance
0000d570 g     F .text	00000058 os_mbuf_appendfrom
00028648 g     F .text	0000000e cbor_encoder_create_indef_byte_string
00010f50 g     F .text	00000010 log_list_get_next
0000c18e  w    F .text	00000002 PWM2_IRQHandler
00021a94 g     F .text	00000020 ble_hs_sched_reset
00018a00 g     F .text	00000034 ble_ll_ctrl_proc_stop
0000ebc4 g     F .text	0000003c imgr_ver_str
0001193c g     F .text	0000000a mfg_read_tlv_hash
0001d9a2 g     F .text	0000007c ble_att_svr_rx_find_type_value
20002224 g     O .bss	00000006 g_random_addr
20000548 g       .data	00000000 __data_end__
00028230 g     F .text	0000002c cbor_buf_writer
00011050 g     F .text	000000d4 log_register
000231c0 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
00029ba4 g     F .text	00000018 fcb_getnext_area
0000f634 g     F .text	00000026 conf_export_cb
000122b4 g     F .text	00000026 rwlock_release_read
000204a0 g     F .text	00000008 ble_gattc_notify_custom
0000c18e  w    F .text	00000002 ECB_IRQHandler
000277e6 g     F .text	00000090 boot_set_pending_multi
000264c0 g     F .text	00000058 ble_uuid_flat
0001af30 g     F .text	00000010 ble_ll_sched_stop
0000edd4 g     F .text	00000014 smp_ble_get_mtu
00017750 g     F .text	0000016a ble_ll_conn_comp_event_send
2000397c g     O .bss	00000004 ble_store_config_num_peer_secs
00025c74 g     F .text	00000020 ble_sm_create_chan
00025c40 g     F .text	00000034 ble_sm_init
0001c224 g     F .text	00000020 ble_phy_resolv_list_enable
00019ab0 g     F .text	00000058 ble_ll_hci_init
0001d8a0 g     F .text	00000094 ble_att_svr_rx_mtu
00014820 g     F .text	00000040 ble_ll_rx_start
0001d4ac g     F .text	0000000c ble_att_svr_prev_handle
0001c09c g     F .text	00000038 ble_phy_tx_set_start_time
00025fc0 g     F .text	0000002c ble_store_read
20001988 g     O .bss	00000004 g_os_time
0001c738 g     F .text	0000000a ble_att_set_peer_mtu
0002ccc4 g     F .text	0000003c hal_uart_init_cbs
0001c7ac g     F .text	00000028 ble_att_create_chan
0001a7d8 g     F .text	00000038 ble_ll_rfmgmt_reset
0002a4e4 g     F .text	00000014 hal_watchdog_tickle
00013f20 g     F .text	00000012 mgmt_streamer_trim_front
200051e4 g       .bss	00000000 __bss_end__
0001696c g     F .text	0000001c ble_ll_conn_wfr_timer_exp
0000d400 g     F .text	0000002e os_mbuf_get
0000c18e  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00023534 g     F .text	00000014 ble_hs_misc_restore_irks
0002627a g     F .text	00000066 ble_store_util_delete_peer
0001b318 g     F .text	0000001c ble_hw_whitelist_enable
20000234 g     O .data	00000004 id_app_str
00011b7c g     F .text	0000008c log_reboot_reason_str
0001e980 g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
00029686 g     F .text	00000034 fcb_sector_hdr_init
0001c762 g     F .text	0000001c ble_att_truncate_to_mtu
00025960 g     F .text	00000010 ble_sm_peer_pair_rand
000164ac g     F .text	00000024 ble_ll_conn_find_by_handle
00029626 g     F .text	0000001a fcb_is_empty
00014a80 g     F .text	00000188 ble_ll_init
000223d2 g     F .text	00000034 ble_hs_conn_chan_insert
00010fa0 g     F .text	00000010 log_hdr_len
200033d0 g     O .bss	00000002 ble_hs_max_attrs
200038f4 g     O .bss	00000080 ble_store_config_cccds
0001b47c g     F .text	00000038 ble_hw_resolv_list_rmv
0000dd98 g     F .text	00000010 os_msys_reset
0000c18e g     F .text	00000002 Default_Handler
0000c464 g     F .text	00000018 _start
0002c7a8 g     F .text	00000010 log_mgmt_register_group
0001df98 g     F .text	00000058 ble_att_svr_start
00014c1c g     F .text	00000008 ble_transport_ll_init
0001b298 g     F .text	00000080 ble_hw_whitelist_rmv
00015a7e g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
0001122e g     F .text	0000000c log_fill_current_img_hash
00013d5e g     F .text	0000004c os_mgmt_impl_task_info
20000238 g     O .data	00000004 id_bsp_str
000269b4 g     F .text	00000084 ble_svc_ans_init
20001e2c g     O .bss	00000010 g_stats_stats
0001313e g     F .text	00000024 img_mgmt_state_confirm
00028108 g     F .text	0000008c base64_encode
0000e8ac g     F .text	00000006 os_arch_init_task_stack
20003978 g     O .bss	00000004 ble_store_config_num_our_secs
000186d2 g     F .text	00000026 ble_ll_ctrl_conn_param_reply
0000d316 g     F .text	00000022 os_eventq_run
00017b30 g     F .text	000000ac ble_ll_conn_hci_param_rr
00013e70 g     F .text	00000028 stat_mgmt_impl_foreach_entry
0002acc8 g     F .text	00000010 os_cputime_usecs_to_ticks
0002ac28 g     F .text	00000020 swap_in_place
0000f338 g     F .text	00000014 conf_lock
0000dbf0 g     F .text	0000003e os_memblock_from
0002e76c g     O .text	00000010 boot_img_magic
2000221c g     O .bss	00000006 g_dev_addr
0001af6c g     F .text	00000052 ble_ll_utils_remapped_channel
0000cb00 g     F .text	0000001c split_write_split
0001401e g     F .text	00000016 mgmt_ntoh_hdr
00010248 g     F .text	00000034 console_lock
00014960 g     F .text	00000010 ble_ll_event_send
000272f4 g     F .text	00000028 ble_transport_alloc_evt
00011fc8 g     F .text	00000068 stats_walk
20001a60 g     O .bss	00000004 conf_save_dst
00025a16 g     F .text	00000080 ble_sm_pair_initiate
20002b00 g     O .bss	0000010c g_nrf_encrypt_scratchpad
0002429c g     F .text	0000003e ble_l2cap_sig_cmd_get
0002622c g     F .text	00000030 ble_store_util_bonded_peers
20001b34 g     O .bss	0000005a id_mfghash
0001ad5c g     F .text	00000094 ble_ll_sched_adv_reschedule
00012ffc g     F .text	00000014 img_mgmt_dfu_confirmed
20000598 g     O .bss	00000050 g_idle_task
2000028c g     O .data	00000004 sysinit_panic_cb
0002aaa8 g     F .text	0000008c hal_timer_start_at
0001afbe g     F .text	00000028 ble_ll_utils_calc_num_used_chans
00023548 g     F .text	00000014 ble_mqueue_init
00014948 g     F .text	0000000c ble_ll_state_set
00013f56 g     F .text	0000000e mgmt_streamer_init_reader
20001934 g     O .bss	00000004 g_os_sanity_check_list
00022528 g     F .text	00000018 ble_hs_conn_find
0002328c g     F .text	00000050 ble_hs_id_addr
0002b09c g     F .text	0000001e strncpy
0002cd00 g     F .text	00000060 hal_uart_start_tx
00025fec g     F .text	00000028 ble_store_delete
0000dc2e g     F .text	00000032 os_memblock_get
0000e048 g     F .text	00000088 os_sched_wakeup
000271cc g     F .text	0000005c ble_store_config_init
0000d396 g     F .text	00000022 os_mqueue_get
0002ad30 g     F .text	00000010 os_sem_init
00021818 g     F .text	0000000c ble_hs_evq_set
0001f5ec g     F .text	00000028 ble_gap_preempt_no_lock
0002b008 g     F .text	00000060 realloc
0001216c g     F .text	00000030 mem_init_mbuf_pool
0002258c g     F .text	0000000c ble_hs_conn_first
0001bc88 g     F .text	0000000c ble_phy_disable
0000cbe8 g     F .text	00000098 os_default_irq
0000eda8 g     F .text	0000002c smp_pkg_init
20002758 g     O .bss	00000001 g_nrf_num_irks
00010a8c g     F .text	0000000a flash_area_erased_val
00017d1e g     F .text	00000030 ble_ll_conn_hci_rd_rssi
2000332c g     O .bss	00000001 ble_hs_enabled_state
0001ea10 g     F .text	00000026 ble_gap_timer
00022a88 g     F .text	000000b4 ble_hs_hci_acl_tx_now
0000dbd4 g     F .text	0000001c os_mempool_ext_init
00025c18 g     F .text	00000026 ble_sm_connection_broken
20001948 g     O .bss	00000004 g_os_last_ctx_sw_time
20002334 g     O .bss	00000008 g_ble_ll_conn_free_list
0002ad40 g     F .text	00000064 os_sem_release
0001af0c g     F .text	00000024 ble_ll_sched_next_time
000130ca g     F .text	0000001e img_mgmt_slot_in_use
00014970 g     F .text	00000010 ble_ll_read_supp_states
0000e970 g     F .text	00000048 memcmp
0000e5a8 g     F .text	00000018 os_arch_init
0002751c g     F .text	00000030 bootutil_buffer_is_erased
00013f84 g     F .text	0000001c mgmt_register_group
0001bc14 g     F .text	0000001c ble_phy_txpwr_set
000296ba g     F .text	0000004e fcb_sector_hdr_read
0000f990 g     F .text	00000096 conf_line_parse
0002d2c8  w    F .text	00000002 .hidden __aeabi_ldiv0
0002abfa g     F .text	0000002e get_le64
0002bfd0 g     F .text	00000030 crc8_calc
0000f6c4 g     F .text	00000054 conf_commit
00012154 g     F .text	0000000c sysinit_start
0002a90c g     F .text	0000013c hal_timer_config
0000d19c g     F .text	00000044 os_dev_open
000270e4 g     F .text	00000028 ble_store_config_write
0000ea60 g     F .text	0000002a strncat
0001f41a g     F .text	0000004a ble_gap_enc_event
00015b90 g     F .text	00000030 ble_ll_adv_can_chg_whitelist
0000cae8 g     F .text	00000018 split_mode_set
00016480 g     F .text	00000012 ble_ll_conn_is_lru
00029708 g     F .text	0000012c fcb_init
0000da98 g     F .text	000000ae os_mbuf_pack_chains
0000eee0 g     F .text	0000004c smp_ble_gatt_svr_init
000104c0 g     F .text	00000008 console_is_init
000229d8 g     F .text	0000007c ble_hs_hci_cmd_tx
0001b0b4 g     F .text	00000064 ble_ll_whitelist_add
000169ae g     F .text	0000001c ble_ll_conn_auth_pyld_timer_cb
0000f1f4 g     F .text	00000058 conf_save
0002ada4 g     F .text	000000b4 os_sem_pend
0002a4d4 g     F .text	00000010 hal_watchdog_enable
00013854 g     F .text	00000014 img_mgmt_impl_log_upload_done
0001234c g     F .text	00000030 rwlock_init
00015bc0 g     F .text	00000030 ble_ll_adv_send_conn_comp_ev
000239e6 g     F .text	00000054 ble_hs_startup_go
0001225a g     F .text	0000005a rwlock_acquire_read
00021ac0 g     F .text	0000007c ble_hs_start
0001590c g     F .text	0000003c ble_ll_adv_halt
0002acae g     F .text	00000008 os_cputime_timer_start
0001576c g     F .text	00000026 ble_ll_adv_chk_rpa_timeout
00018636 g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
0001bb84 g     F .text	00000034 ble_phy_encrypt_disable
0000d3b8 g     F .text	0000003e os_mqueue_put
00021a4c g     F .text	0000000a ble_hs_timer_resched
0001998c g     F .text	00000028 ble_ll_hci_send_noop
0000dcf4 g     F .text	0000004c os_msys_register
200006e8 g     O .bss	00000004 g_os_idle_ctr
00010960 g     F .text	00000034 flash_area_open
00017f08 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
0002b104 g     F .text	0000000c strtoull
0000d6c4 g     F .text	0000007a os_mbuf_cmpf
00011124 g     F .text	00000024 log_walk_body
00010d00 g     F .text	00000054 id_init
0000c18e  w    F .text	00000002 SAADC_IRQHandler
000276cc g     F .text	00000020 boot_read_swap_state_by_id
000185e8 g     F .text	00000012 ble_ll_calc_session_key
000263a4 g     F .text	000000a8 ble_uuid_to_str
00020ad2 g     F .text	0000008e ble_gatts_clt_cfg_access
00012db4 g     F .text	00000014 img_mgmt_dfu_started
0001c204 g     F .text	0000000c ble_phy_rx_started
00019e42 g     F .text	00000032 ble_ll_hci_vs_cmd_proc
0000ea02 g     F .text	00000038 memset
0000c020 g       .text	00000100 __isr_vector
0001dcc4 g     F .text	0000006e ble_att_svr_rx_write
20001e40 g     O .bss	00000030 g_img_mgmt_state
0000c800 g     F .text	00000078 main
000111f0 g     F .text	00000034 log_read_body
0001df2a g     F .text	0000006c ble_att_svr_rx_indicate
00029c44 g     F .text	00000034 fcb_getnext
00017e40 g     F .text	00000052 ble_ll_conn_hci_le_ltk_reply
0002625c g     F .text	0000001e ble_store_util_delete_all
0001af40 g     F .text	0000002c ble_ll_sched_init
0001a024 g     F .text	00000024 ble_ll_rand_init
200019a0 g     O .bss	00000018 g_smp_ble_mq
00010768 g     F .text	00000038 console_out_nolock
00019c50 g     F .text	00000050 ble_ll_hci_ev_ltk_req
000284ba g     F .text	00000070 cbor_encode_uint
0000c18e  w    F .text	00000002 CCM_AAR_IRQHandler
0000c18e  w    F .text	00000002 WDT_IRQHandler
000144e8 g     F .text	00000040 ble_ll_task
00023bae g     F .text	0000000c ble_l2cap_get_conn_handle
000115c4 g     F .text	00000034 modlog_register
00027626 g     F .text	0000000c boot_read_image_ok
00017694 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
00029c78 g     F .text	00000078 fcb_rotate
200021c8 g     O .bss	00000050 g_ble_ll_task
00019cec g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
00012160 g     F .text	0000000c sysinit_end
0001ee80 g     F .text	00000040 ble_gap_terminate
00011674 g     F .text	000000c8 modlog_init
0000e8b2 g     F .text	00000046 SVC_Handler
0001f72c g     F .text	00000080 ble_gap_init
000137ec g     F .text	00000028 img_mgmt_impl_erased_val
00025e8e g     F .text	00000068 ble_sm_lgcy_random_exec
000199b4 g     F .text	00000048 ble_ll_hci_is_le_event_enabled
0001eddc g     F .text	00000004 ble_gap_conn_active
00019d5e g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
0001980a g     F .text	00000004 ble_ll_hci_adv_mode_ext
0000d200 g     F .text	0000000a os_eventq_inited
0001a354 g     F .text	00000098 ble_ll_resolv_list_rmv
00019b50 g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
00013dac g     F .text	0000005c os_mgmt_impl_reset
00013fee g     F .text	00000030 mgmt_ctxt_init
2000275c g     O .bss	00000040 ble_phy_stats
000179fe g     F .text	00000062 ble_ll_conn_hci_read_rem_features
00029dea g     F .text	00000052 hal_flash_read
000233b0 g     F .text	00000018 ble_hs_id_reset
0001027c g     F .text	0000003c console_unlock
0000d37c g     F .text	00000008 os_eventq_dflt_get
0002aa48 g     F .text	00000038 hal_timer_read
20005190 g     O .bss	0000001c nrf52_hal_timer5
0000d294 g     F .text	00000082 os_eventq_get
00010a5c g     F .text	00000026 flash_area_erase
00013a2c g     F .text	00000010 log_mgmt_impl_get_next_idx
0000d494 g     F .text	00000012 os_mbuf_len
0000e4fe g     F .text	0000002a os_time_ms_to_ticks
00011008 g     F .text	0000000a log_walk
0000d034 g     F .text	0000003c os_callout_wakeup_ticks
0001e97e g     F .text	00000002 ble_gap_rx_adv_report
00023b80 g     F .text	0000002e ble_l2cap_prepend_hdr
0000c18e  w    F .text	00000002 SWI5_EGU5_IRQHandler
00015c8c g     F .text	00000020 ble_ll_adv_init
00023436 g     F .text	0000000a ble_hs_mbuf_att_pkt
20001b30 g     O .bss	00000004 flash_map_entries
0000d622 g     F .text	000000a2 os_mbuf_adj
0001eff4 g     F .text	00000036 ble_gap_reset_state
00014034 g     F .text	00000016 mgmt_hton_hdr
20001dae g     O .bss	00000002 reboot_cnt
0000f35c g     F .text	0000001c conf_register
0000c020 g       .imghdr	00000000 __text
0002bfcc g     F .text	00000004 crc8_init
20001e70 g     O .bss	00000004 img_mgmt_dfu_callbacks_fn
0000f954 g     F .text	00000032 conf_fcb_kv_save
00011906 g     F .text	00000012 mfg_seek_next
0002c934 g     F .text	00000010 stat_mgmt_register_group
20003720 g     O .bss	00000034 ble_l2cap_stats
00021b5a g     F .text	00000008 ble_hs_tx_data
0000ea3a g     F .text	00000018 strcmp
00010abc g     F .text	0000000e flash_area_read_is_empty
0001073c g     F .text	0000002c uart_console_blocking_mode
0002579c g     F .text	00000014 ble_sm_enc_change_rx
0000dfa0 g     F .text	0000000c os_sched_get_current_task
0002862c g     F .text	0000001c cbor_encoder_create_map
000102b8 g     F .text	00000078 console_write
00015c20 g     F .text	00000014 ble_ll_adv_wfr_timer_exp
20002564 g     O .bss	00000028 g_ble_ll_resolv_data
0001f3e8 g     F .text	00000032 ble_gap_passkey_event
00023b4c g     F .text	00000008 ble_l2cap_is_mtu_req_sent
0000e960 g     F .text	00000010 lrand48
0002a5ac g     F .text	00000034 hal_bsp_hw_id
0001b9b0 g     F .text	00000170 ble_phy_init
0001c8a8 g     F .text	00000004 ble_att_clt_tx_read_type
0000c310 g     F .text	00000104 SystemInit
0002acbe g     F .text	0000000a os_cputime_get32
0000f8e8 g     F .text	00000058 conf_fcb_src
00026318 g     F .text	00000050 ble_uuid_init_from_buf
0000c18e  w    F .text	00000002 RNG_IRQHandler
00025536 g     F .text	000000e4 ble_sm_process_result
0002737c g     F .text	00000158 ble_transport_init
000233c8 g     F .text	00000024 ble_hs_log_mbuf
0001115c g     F .text	0000004a log_read_hdr
0000d338 g     F .text	00000042 os_eventq_remove
0001b118 g     F .text	00000040 ble_ll_whitelist_rmv
20001fb8 g     O .bss	00000090 g_ble_ll_data
00022540 g     F .text	00000018 ble_hs_conn_insert
0001c220 g     F .text	00000004 ble_phy_max_data_pdu_pyld
0000f184 g     F .text	00000068 conf_save_one
000240c8 g     F .text	000000b8 ble_l2cap_sig_update
0000f3e2 g     F .text	00000176 conf_value_from_str
00010f60 g     F .text	00000040 log_module_get_name
00026c30 g     F .text	00000074 ble_svc_gap_init
0001c8cc g     F .text	00000004 ble_att_clt_rx_write
0002aba0 g     F .text	00000014 put_le32
00012d48 g     F .text	00000014 img_mgmt_dfu_stopped
0001ab70 g     F .text	000000dc ble_ll_sched_conn_reschedule
00021670 g     F .text	00000048 ble_gatts_add_svcs
0001379c g     F .text	00000050 img_mgmt_impl_swap_type
0002b068 g     F .text	00000020 sprintf
00014918 g     F .text	00000030 ble_ll_tx_mbuf_pducb
00022c08 g     F .text	00000038 ble_hs_hci_cmd_send_buf
0001c960 g     F .text	0000000a ble_att_clt_rx_indicate
0001c8a0 g     F .text	00000004 ble_att_clt_tx_find_type_value
0001c8bc g     F .text	00000004 ble_att_clt_rx_read_blob
0000e160 g     F .text	00000022 os_sched
0001c8a4 g     F .text	00000004 ble_att_clt_rx_find_type_value
000223bc g     F .text	00000016 ble_hs_conn_chan_find_by_scid
200003fc g     O .data	0000001c ble_svc_dis_data
0002cd60 g     F .text	0000004c hal_uart_start_rx
00029dda g     F .text	00000010 hal_flash_erased_val
0001c258 g     F .text	00000008 ble_phy_rfclk_disable
0001c8ac g     F .text	00000004 ble_att_clt_rx_read_type
00013868 g     F .text	00000014 img_mgmt_impl_log_pending
00023440 g     F .text	0000002a ble_hs_mbuf_to_flat
000172fc g     F .text	00000048 ble_ll_conn_tx_pkt_in
20003974 g     O .bss	00000004 ble_store_config_num_cccds
2000222c g     O .bss	0000007c g_ble_ll_adv_sm
0000e7b8 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0002342c g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
0000c18e  w    F .text	00000002 RTC2_IRQHandler
0001a598 g     F .text	00000028 ble_ll_resolv_set_peer_rpa
00024f64 g     F .text	00000040 ble_sm_proc_find
0001a5f4 g     F .text	0000000c ble_ll_resolv_enabled
20040000 g       .bss	00000000 __StackTop
0001c742 g     F .text	00000020 ble_att_chan_mtu
00028614 g     F .text	0000000e cbor_encode_text_string
00023118 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
00012624 g     F .text	000001f6 cbor_read_array
20002718 g     O .bss	00000040 g_nrf_irk_list
00019ca0 g     F .text	0000004c ble_ll_hci_ev_rd_rem_used_feat
0000d384 g     F .text	00000012 os_mqueue_init
0000f088 g     F .text	00000002 config_pkg_init_stage2
000280f6 g     F .text	00000012 _double_byte
00026082 g     F .text	0000000c ble_store_write_our_sec
0001908e g     F .text	000000d2 ble_ll_ctrl_tx_done
000234f0 g     F .text	00000022 ble_hs_misc_conn_chan_find_reqd
0000c18e  w    F .text	00000002 PWM0_IRQHandler
0000c18e  w    F .text	00000002 SWI3_EGU3_IRQHandler
00018890 g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
0002b0ba g     F .text	0000001e strsep
00019e74 g     F .text	00000054 ble_ll_hci_vs_register
00019b08 g     F .text	00000048 ble_ll_hci_ev_datalen_chg
00013038 g     F .text	0000006c img_mgmt_state_flags
0000fa28 g     F .text	0000005a conf_line_make
0001deec g     F .text	0000003e ble_att_svr_rx_notify
0001c7d4 g     F .text	00000038 ble_att_init
0001d6da g     F .text	00000016 ble_att_svr_ticks_until_tmo
00023346 g     F .text	0000001a ble_hs_id_use_addr
00022390 g     F .text	0000002c ble_hs_conn_can_alloc
00014798 g     F .text	0000002c ble_ll_wfr_timer_exp
00022346 g     F .text	0000002c ble_hs_atomic_conn_flags
00026c28 g     F .text	00000008 ble_svc_gap_device_name
0001398a g     F .text	0000002a log_mgmt_impl_get_log
0002357e g     F .text	0000003e ble_mqueue_put
0002319a g     F .text	00000026 ble_hs_hci_util_set_random_addr
00010994 g     F .text	0000007c flash_area_to_sectors
0001eb5c g     F .text	00000048 ble_gap_adv_set_data
000227a4 g     F .text	00000004 ble_hs_flow_startup
0001b22c g     F .text	0000006c ble_hw_whitelist_add
00024220 g     F .text	00000034 ble_l2cap_sig_init
00016de4 g     F .text	00000070 ble_ll_conn_rx_isr_start
0000cfd8 g     F .text	0000005c os_callout_tick
0002276c g     F .text	00000034 ble_hs_conn_init
0002e790 g     O .text	00000048 sysflash_map_dflt
0001f614 g     F .text	00000018 ble_gap_preempt
000107a0 g     F .text	00000010 uart_console_is_init
0000c120 g       .text	00000000 __isr_vector_end
0000ce90 g     F .text	00000022 os_start
00014744 g     F .text	00000028 ble_ll_is_valid_own_addr_type
00024320 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
00019040 g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001472a g     F .text	00000018 ble_ll_is_rpa
0001f14c g     F .text	00000098 ble_gap_rx_param_req
0002ac48 g     F .text	0000001c swap_buf
00018690 g     F .text	00000042 ble_ll_ctrl_start_enc_send
00014980 g     F .text	0000000c ble_ll_read_supp_features
000169cc g     F .text	000000f8 ble_ll_conn_sm_new
00015ac0 g     F .text	0000004c ble_ll_adv_rx_isr_end
00017a60 g     F .text	000000d0 ble_ll_conn_hci_update
00019ee4 g     F .text	00000050 ble_ll_rand_sample
0002608e g     F .text	0000000e ble_store_read_peer_sec
0000c18e  w    F .text	00000002 RTC1_IRQHandler
000280ee g     F .text	00000008 _set
00027876 g     F .text	0000000c boot_set_pending
0000e1c8 g     F .text	0000000a os_task_stacktop_get
00021db8 g     F .text	0000000a ble_transport_to_hs_evt_impl
20003224 g     O .bss	00000098 ble_gattc_stats
00023158 g     F .text	00000042 ble_hs_hci_util_rand
00014a08 g     F .text	00000006 ble_ll_pdu_tx_time_get
0002ce6c g     F .text	000000fc hal_uart_config
0002ac70 g     F .text	0000003e os_cputime_timer_init
0002428e g     F .text	0000000e ble_l2cap_sig_hdr_parse
0001d7c4 g     F .text	00000030 ble_att_svr_tx_error_rsp
000164f8 g     F .text	0000001a ble_ll_conn_calc_dci
00013f72 g     F .text	00000010 mgmt_streamer_free_buf
00013a98 g     F .text	00000018 log_mgmt_impl_clear
000204c0 g     F .text	000000b8 ble_gatts_indicate_custom
0000f24c g     F .text	00000014 conf_store_init
0001b160 g     F .text	00000008 ble_ll_whitelist_disable
00013668 g     F .text	0000007c img_mgmt_impl_write_pending
00023780 g     F .text	00000078 ble_hs_pvcy_set_our_irk
0000c18e  w    F .text	00000002 SWI1_EGU1_IRQHandler
0001f02c g     F .text	000000c0 ble_gap_rx_update_complete
0001c1f8 g     F .text	0000000c ble_phy_access_addr_get
0000d88a g     F .text	00000044 os_mbuf_concat
0002609c g     F .text	00000052 ble_store_write_peer_sec
00010338 g     F .text	00000188 console_handle_char
0000ed90 g     F .text	00000018 smp_transport_init
00029584 g     F .text	0000007e _cbor_value_dup_string
00025dec g     F .text	000000a2 ble_sm_lgcy_confirm_exec
00011988 g     F .text	00000010 mfg_open
20000178 g     O .data	00000008 g_os_run_list
0001a7a4 g     F .text	00000034 ble_ll_rfmgmt_init
00014264 g     F .text	00000100 smp_process_request_packet
0000cb1c g     F .text	00000034 NVIC_Relocate
0002185c g     F .text	00000010 ble_hs_unlock_nested
0000f0e4 g     F .text	00000028 conf_src_register
000284b0 g     F .text	0000000a cbor_encoder_init
0000ca24 g     F .text	00000070 sysinit_app
00023af0 g     F .text	00000034 ble_l2cap_chan_alloc
0001c898 g     F .text	00000004 ble_att_clt_tx_find_info
2000198c g     O .bss	00000004 os_flags
00028270 g     F .text	00000006 cbor_buf_writer_buffer_size
000136e4 g     F .text	0000002e img_mgmt_impl_write_confirmed
0000e554 g     F .text	00000006 os_arch_restore_sr
20005144 g     O .bss	0000000c g_hal_os_tick
00023d24 g     F .text	00000060 ble_l2cap_init
0000ecc0 g     F .text	00000044 smp_tx_rsp
00014c08 g     F .text	0000000a ble_transport_to_ll_cmd_impl
000146a8 g     F .text	0000005c ble_ll_rxpdu_alloc
00019810 g     F .text	00000034 ble_ll_hci_event_send
00011ed0 g     F .text	00000090 log_reboot_pkg_init
00029834 g     F .text	00000052 fcb_offset_last_n
00015c1c g     F .text	00000004 ble_ll_adv_get_peer_rpa
00027294 g     F .text	0000002e ble_hs_util_ensure_addr
2003fe50 g       *ABS*	000001b0 __StackLimit
00010a96 g     F .text	00000026 flash_area_is_empty
20000f40 g     O .bss	00000004 g_os_started
0001bfe0 g     F .text	00000074 ble_phy_rx
0001ebd4 g     F .text	000001c0 ble_gap_rx_conn_complete
0000c18e  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00023ce4 g     F .text	0000003e ble_l2cap_tx
0000c18e  w    F .text	00000002 NFCT_IRQHandler
00019aa4 g     F .text	0000000a ble_ll_hci_acl_rx
20002714 g     O .bss	00000004 g_ble_rng_isr_cb
20002358 g     O .bss	000001a0 g_ble_ll_conn_sm
00028d9a g     F .text	00000050 cbor_value_leave_container
0001f382 g     F .text	00000066 ble_gap_unpair_oldest_except
0002abb4 g     F .text	00000026 put_le64
00014704 g     F .text	00000010 ble_ll_chk_txrx_octets
000260fc g     F .text	0000000c ble_store_write_cccd
000298d6 g     F .text	00000032 fcb_append_to_scratch
00013744 g     F .text	0000002e img_mgmt_impl_write_image_data
0000c300 g     F .text	00000010 SystemCoreClockUpdate
00027988 g     F .text	0000074c tc_aes_encrypt
20002adc g     O .bss	00000021 g_nrf_ccm_data
0000d474 g     F .text	00000020 os_mbuf_free_chain
000271a4 g     F .text	00000028 ble_store_config_delete
000133a8 g     F .text	00000066 img_mgmt_ver_str
000218a0 g     F .text	0000003a ble_hs_wakeup_tx
0000e474 g     F .text	0000003c os_get_uptime
0000dde8 g     F .text	00000034 os_msys_init
00022504 g     F .text	00000024 ble_hs_conn_remove
0001d4b8 g     F .text	00000018 ble_att_svr_find_by_handle
00029bbc g     F .text	00000088 fcb_getnext_nolock
0000d54e g     F .text	00000022 os_mbuf_off
00014860 g     F .text	000000b8 ble_ll_rx_end
000204a8 g     F .text	0000000a ble_gatts_notify
20001ab3 g     O .bss	00000001 g_is_output_nlip
000229b4 g     F .text	00000024 ble_hs_hci_add_avail_pkts
0000e3bc g     F .text	0000000c os_time_get
20001d48 g     O .bss	0000001c modlog_mapping_pool
00026074 g     F .text	0000000e ble_store_read_our_sec
0001dd86 g     F .text	000000b2 ble_att_svr_rx_prep_write
0002ab34 g     F .text	00000064 hal_timer_stop
0000f68e g     F .text	00000036 conf_get_value
00010fb0 g     F .text	00000058 log_append_body
0001a512 g     F .text	00000086 ble_ll_resolv_get_priv_addr
0001a844 g     F .text	00000034 ble_ll_rfmgmt_release
0001c8d0 g     F .text	00000004 ble_att_clt_tx_prep_write
0000d42e g     F .text	00000032 os_mbuf_get_pkthdr
20003980 g     O .bss	000000f0 ble_store_config_our_secs
20001bd0 g     O .bss	00000008 g_log_info
0000f558 g     F .text	000000b0 conf_str_from_value
0001c250 g     F .text	00000008 ble_phy_rfclk_enable
0002d2c8  w    F .text	00000002 .hidden __aeabi_idiv0
00028320 g     F .text	00000058 cbor_mbuf_reader_init
200033d2 g     O .bss	00000002 ble_hs_max_client_configs
0001db42 g     F .text	00000082 ble_att_svr_rx_read_blob
00021354 g     F .text	00000020 ble_gatts_conn_can_alloc
000139cc g     F .text	00000060 log_mgmt_impl_get_level
00029908 g     F .text	000000fa fcb_append
00014364 g     F .text	0000007c ull_to_s
00026aa4 g     F .text	00000074 ble_svc_dis_init
0000f65a g     F .text	00000034 conf_set_value
0001b158 g     F .text	00000008 ble_ll_whitelist_enable
00021848 g     F .text	00000014 ble_hs_lock_nested
0002230c g     F .text	00000010 ble_hs_adv_set_fields
0002dd48 g     O .text	0000002d g_ble_ll_supp_cmds
0000e1d4 g     F .text	000000e4 os_task_init
0000c1d8 g     F .text	00000050 hal_system_clock_start
0002612c g     F .text	0000002a ble_store_key_from_value_sec
0000c182  w    F .text	00000002 BusFault_Handler
00023aa0 g     F .text	0000001c ble_hs_stop_init
0001137c g     F .text	00000060 log_console_init
00024ee6 g     F .text	0000007e ble_sm_ia_ra
00021a58 g     F .text	0000003c ble_hs_enqueue_hci_event
00019bde g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
0000ea52 g     F .text	0000000e strlen
0000d118 g     F .text	00000038 os_dev_create
00022406 g     F .text	0000002c ble_hs_conn_delete_chan
0000dc60 g     F .text	0000001e os_memblock_put_from_cb
0001c244 g     F .text	0000000c ble_phy_resolv_list_disable
000122da g     F .text	00000054 rwlock_acquire_write
20002530 g     O .bss	00000020 g_ble_ll_rnum_buf
0000d1f0 g     F .text	00000010 os_eventq_init
0001c8c0 g     F .text	00000004 ble_att_clt_rx_read_mult
0000e3c8 g     F .text	0000004c os_time_advance
00017ed4 g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
00016494 g     F .text	00000018 ble_ll_conn_get_ce_end_time
0000e184 g     F .text	0000002c os_sched_resort
2000513c g     O .bss	00000004 boot_current_slot
0002651e g     F .text	00000024 ble_uuid_to_mbuf
0001e950 g     F .text	0000002a ble_gap_conn_find
0000da32 g     F .text	00000012 os_mbuf_prepend_pullup
0001c532 g     F .text	0000000e ble_att_conn_chan_find
00029d9e g     F .text	0000002c hal_flash_init
0002abda g     F .text	0000000a get_le16
0000c18e  w    F .text	00000002 MWU_IRQHandler
0001208c g     F .text	00000058 stats_module_init
0001e9d0 g     F .text	00000040 ble_gap_rx_phy_update_complete
0001755c g     F .text	000000ac ble_ll_conn_module_reset
00013fa0 g     F .text	00000016 mgmt_find_handler
000265f6 g     F .text	000000f4 ble_sm_alg_c1
0000c180  w    F .text	00000002 MemoryManagement_Handler
0001f62c g     F .text	000000c8 ble_gap_preempt_done
0000c18e  w    F .text	00000002 QSPI_IRQHandler
00015a50 g     F .text	00000014 ble_ll_adv_read_txpwr
00025c94 g     F .text	00000032 ble_sm_cmd_get
00022b64 g     F .text	0000000c ble_hs_hci_get_hci_version
0001c834 g     F .text	00000064 ble_att_clt_rx_mtu
200022ac g     O .bss	00000080 ble_ll_conn_stats
20001b90 g     O .bss	00000040 id_serial
000218dc g     F .text	00000014 ble_hs_is_enabled
000113dc g     F .text	0000001c log_level_get
0002a894 g     F .text	00000010 nrf52_timer5_irq_handler
00017264 g     F .text	00000096 ble_ll_conn_enqueue_pkt
00015904 g     F .text	00000008 ble_ll_adv_event_rmvd_from_sched
000205d2 g     F .text	0000001a ble_gatts_rx_indicate_rsp
000233ec g     F .text	0000000c ble_hs_log_flat_buf
0002731c g     F .text	00000060 ble_transport_free
000278c2 g     F .text	0000000a boot_set_confirmed
0001898e g     F .text	00000072 ble_ll_ctrl_chk_proc_start
0000c18e  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000242dc g     F .text	00000044 ble_l2cap_sig_reject_tx
0001b4b8 g     F .text	00000038 ble_hw_resolv_list_match
0001dd32 g     F .text	00000040 ble_att_svr_rx_write_no_rsp
0002a020 g     F .text	00000032 hal_flash_isempty_no_buf
0001d45c g     F .text	00000050 ble_att_svr_register
0000d150 g     F .text	0000002c os_dev_initialize_all
0002355c g     F .text	00000022 ble_mqueue_get
0001a810 g     F .text	00000034 ble_ll_rfmgmt_sched_changed
00017608 g     F .text	0000008c ble_ll_conn_module_init
00011638 g     F .text	0000003a modlog_printf
0001f310 g     F .text	0000004e ble_gap_unpair
0001ae64 g     F .text	000000a8 ble_ll_sched_rmv_elem
0000fbb8 g     F .text	00000010 conf_mgmt_register
000234c0 g     F .text	00000030 ble_hs_misc_conn_chan_find
00027602 g     F .text	00000016 boot_write_trailer_flag
000204b2 g     F .text	0000000c ble_gatts_indicate_fail_notconn
00022372 g     F .text	0000001c ble_hs_atomic_first_conn_handle
0000eaf4 g     F .text	00000048 imgmgr_find_best_area_id
0001b7d0 g     F .text	00000004 ble_phy_get_cur_phy
20000180 g     O .data	00000008 g_os_sleep_list
0000ea8c g     F .text	00000050 jrand48
00023654 g     F .text	00000024 ble_hs_pvcy_ensure_started
00018c94 g     F .text	000003ac ble_ll_ctrl_rx_pdu
00029d74 g     F .text	0000000c hal_bsp_init
000205ec g     F .text	0000000c ble_gattc_connection_broken
0000ceb4 g     F .text	0000004c os_pkg_init
0001bc3c g     F .text	0000004c ble_phy_setchan
2000232c g     O .bss	00000004 g_ble_ll_conn_active_list
000178bc g     F .text	000000e4 ble_ll_conn_num_comp_pkts_event_send
0001387c g     F .text	00000014 img_mgmt_impl_log_confirm
0001a008 g     F .text	0000001c ble_ll_rand_start
0001ef90 g     F .text	00000064 ble_gap_rx_disconn_complete
0000f2e4 g     F .text	00000054 conf_init
0000de58 g     F .text	00000010 os_sanity_check_init
0001a634 g     F .text	0000001c ble_ll_resolv_list_reset
00029cf0 g     F .text	00000074 fcb_walk
0001b06c g     F .text	0000002c ble_ll_whitelist_clear
00022484 g     F .text	00000080 ble_hs_conn_alloc
00022a54 g     F .text	00000032 ble_hs_hci_rx_evt
0002ce10 g     F .text	0000005c hal_uart_init
0002957c g     F .text	00000008 cbor_value_to_pretty_advance
00016d88 g     F .text	0000002c ble_ll_conn_event_halt
00012030 g     F .text	00000022 stats_init
0002b748 g     F .text	00000008 vfprintf
2000199c g     O .bss	00000002 g_ble_smp_attr_handle
0002b960 g     F .text	00000032 strpbrk
0001a5c0 g     F .text	00000034 ble_ll_resolv_gen_rpa
20000ef0 g     O .bss	00000050 g_os_main_task
0002afc8 g     F .text	0000002c free
00027618 g     F .text	0000000e boot_write_image_ok



Disassembly of section .text:

0000c020 <__isr_vector>:
    c020:	20040000 	.word	0x20040000
    c024:	0000c121 	.word	0x0000c121
    c028:	0000c17d 	.word	0x0000c17d
    c02c:	0000c17f 	.word	0x0000c17f
    c030:	0000c181 	.word	0x0000c181
    c034:	0000c183 	.word	0x0000c183
    c038:	0000c185 	.word	0x0000c185
	...
    c04c:	0000e8b3 	.word	0x0000e8b3
    c050:	0000c189 	.word	0x0000c189
    c054:	00000000 	.word	0x00000000
    c058:	0000e8f9 	.word	0x0000e8f9
    c05c:	0000e923 	.word	0x0000e923
    c060:	0000c18f 	.word	0x0000c18f
    c064:	0000c18f 	.word	0x0000c18f
    c068:	0000c18f 	.word	0x0000c18f
    c06c:	0000c18f 	.word	0x0000c18f
    c070:	0000c18f 	.word	0x0000c18f
    c074:	0000c18f 	.word	0x0000c18f
    c078:	0000c18f 	.word	0x0000c18f
    c07c:	0000c18f 	.word	0x0000c18f
    c080:	0000c18f 	.word	0x0000c18f
    c084:	0000c18f 	.word	0x0000c18f
    c088:	0000c18f 	.word	0x0000c18f
    c08c:	0000c18f 	.word	0x0000c18f
    c090:	0000c18f 	.word	0x0000c18f
    c094:	0000c18f 	.word	0x0000c18f
    c098:	0000c18f 	.word	0x0000c18f
    c09c:	0000c18f 	.word	0x0000c18f
    c0a0:	0000c18f 	.word	0x0000c18f
    c0a4:	0000c18f 	.word	0x0000c18f
    c0a8:	0000c18f 	.word	0x0000c18f
    c0ac:	0000c18f 	.word	0x0000c18f
    c0b0:	0000c18f 	.word	0x0000c18f
    c0b4:	0000c18f 	.word	0x0000c18f
    c0b8:	0000c18f 	.word	0x0000c18f
    c0bc:	0000c18f 	.word	0x0000c18f
    c0c0:	0000c18f 	.word	0x0000c18f
    c0c4:	0000c18f 	.word	0x0000c18f
    c0c8:	0000c18f 	.word	0x0000c18f
    c0cc:	0000c18f 	.word	0x0000c18f
    c0d0:	0000c18f 	.word	0x0000c18f
    c0d4:	0000c18f 	.word	0x0000c18f
	...
    c0e0:	0000c18f 	.word	0x0000c18f
    c0e4:	0000c18f 	.word	0x0000c18f
    c0e8:	0000c18f 	.word	0x0000c18f
    c0ec:	0000c18f 	.word	0x0000c18f
    c0f0:	0000c18f 	.word	0x0000c18f
    c0f4:	0000c18f 	.word	0x0000c18f
    c0f8:	0000c18f 	.word	0x0000c18f
    c0fc:	0000c18f 	.word	0x0000c18f
    c100:	0000c18f 	.word	0x0000c18f
    c104:	0000c18f 	.word	0x0000c18f
    c108:	0000c18f 	.word	0x0000c18f
    c10c:	00000000 	.word	0x00000000
    c110:	0000c18f 	.word	0x0000c18f
	...
    c11c:	0000c18f 	.word	0x0000c18f

0000c120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    c120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    c124:	4a0c      	ldr	r2, [pc, #48]	; (c158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    c126:	4b0d      	ldr	r3, [pc, #52]	; (c15c <.bss_zero_loop+0x34>)

0000c128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    c128:	429a      	cmp	r2, r3
    itt     lt
    c12a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    c12c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    c130:	e7fa      	blt.n	c128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    c134:	4a0b      	ldr	r2, [pc, #44]	; (c164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    c136:	4b0c      	ldr	r3, [pc, #48]	; (c168 <.bss_zero_loop+0x40>)

    subs    r3, r2
    c138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    c13a:	dd03      	ble.n	c144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    c13c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    c13e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    c140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    c142:	dcfb      	bgt.n	c13c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    c146:	490a      	ldr	r1, [pc, #40]	; (c170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    c148:	f000 fd02 	bl	cb50 <_sbrkInit>

    LDR     R0, =SystemInit
    c14c:	4809      	ldr	r0, [pc, #36]	; (c174 <.bss_zero_loop+0x4c>)
    BLX     R0
    c14e:	4780      	blx	r0

    BL      hal_system_init
    c150:	f000 f81e 	bl	c190 <hal_system_init>

    LDR     R0, =_start
    c154:	4808      	ldr	r0, [pc, #32]	; (c178 <.bss_zero_loop+0x50>)
    BX      R0
    c156:	4700      	bx	r0
    ldr     r2, =__bss_start__
    c158:	20000570 	.word	0x20000570
    ldr     r3, =__bss_end__
    c15c:	200051e4 	.word	0x200051e4
    ldr    r1, =__etext
    c160:	0002eb74 	.word	0x0002eb74
    ldr    r2, =__data_start__
    c164:	20000100 	.word	0x20000100
    ldr    r3, =__data_end__
    c168:	20000548 	.word	0x20000548
    LDR     R0, =__HeapBase
    c16c:	200051e8 	.word	0x200051e8
    LDR     R1, =__HeapLimit
    c170:	2003fe50 	.word	0x2003fe50
    LDR     R0, =SystemInit
    c174:	0000c311 	.word	0x0000c311
    LDR     R0, =_start
    c178:	0000c465 	.word	0x0000c465

0000c17c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    c17c:	e7fe      	b.n	c17c <NMI_Handler>

0000c17e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    c17e:	e7fe      	b.n	c17e <HardFault_Handler>

0000c180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    c180:	e7fe      	b.n	c180 <MemoryManagement_Handler>

0000c182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    c182:	e7fe      	b.n	c182 <BusFault_Handler>

0000c184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    c184:	e7fe      	b.n	c184 <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    c186:	e7fe      	b.n	c186 <UsageFault_Handler+0x2>

0000c188 <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
    c188:	e7fe      	b.n	c188 <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    c18a:	e7fe      	b.n	c18a <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    c18c:	e7fe      	b.n	c18c <DebugMon_Handler+0x4>

0000c18e <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    c18e:	e7fe      	b.n	c18e <Default_Handler>

0000c190 <hal_system_init>:
#if MYNEWT_VAL(MCU_ICACHE_ENABLED)
    NRF_NVMC->ICACHECNF = 1;
#endif

#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    c190:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c194:	2201      	movs	r2, #1
    c196:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    c19a:	4770      	bx	lr

0000c19c <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    c19c:	4b02      	ldr	r3, [pc, #8]	; (c1a8 <hal_debugger_connected+0xc>)
    c19e:	6818      	ldr	r0, [r3, #0]
}
    c1a0:	f000 0001 	and.w	r0, r0, #1
    c1a4:	4770      	bx	lr
    c1a6:	bf00      	nop
    c1a8:	e000edf0 	.word	0xe000edf0

0000c1ac <hal_system_reset>:
{
    c1ac:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    c1ae:	f7ff fff5 	bl	c19c <hal_debugger_connected>
    c1b2:	b100      	cbz	r0, c1b6 <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
    c1b4:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c1b6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c1ba:	4905      	ldr	r1, [pc, #20]	; (c1d0 <hal_system_reset+0x24>)
    c1bc:	68ca      	ldr	r2, [r1, #12]
    c1be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c1c2:	4b04      	ldr	r3, [pc, #16]	; (c1d4 <hal_system_reset+0x28>)
    c1c4:	4313      	orrs	r3, r2
    c1c6:	60cb      	str	r3, [r1, #12]
    c1c8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c1cc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c1ce:	e7fd      	b.n	c1cc <hal_system_reset+0x20>
    c1d0:	e000ed00 	.word	0xe000ed00
    c1d4:	05fa0004 	.word	0x05fa0004

0000c1d8 <hal_system_clock_start>:
#if MYNEWT_VAL_CHOICE(MCU_LFCLK_SOURCE, LFSYNTH)
    /* Must turn on HFLCK for synthesized 32768 crystal */
    nrf52_clock_hfxo_request();
#else
    /* Make sure HFCLK is stopped */
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    c1d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1dc:	2201      	movs	r2, #1
    c1de:	605a      	str	r2, [r3, #4]
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    c1e0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c1e4:	4b0f      	ldr	r3, [pc, #60]	; (c224 <hal_system_clock_start+0x4c>)
    c1e6:	4013      	ands	r3, r2
    c1e8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c1ec:	d018      	beq.n	c220 <hal_system_clock_start+0x48>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    c1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1f2:	2201      	movs	r2, #1
    c1f4:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    c1f6:	2100      	movs	r1, #0
    c1f8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    c1fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    c200:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    c202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c206:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    c20a:	2b00      	cmp	r3, #0
    c20c:	d0f9      	beq.n	c202 <hal_system_clock_start+0x2a>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    c20e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c212:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c216:	4b03      	ldr	r3, [pc, #12]	; (c224 <hal_system_clock_start+0x4c>)
    c218:	4013      	ands	r3, r2
    c21a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c21e:	d1f0      	bne.n	c202 <hal_system_clock_start+0x2a>
                }
            }
        }
    }
#endif
}
    c220:	4770      	bx	lr
    c222:	bf00      	nop
    c224:	00010003 	.word	0x00010003

0000c228 <errata_36>:
#endif

#ifdef NRF52840_XXAA
static bool errata_36(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c228:	4b06      	ldr	r3, [pc, #24]	; (c244 <errata_36+0x1c>)
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	2b08      	cmp	r3, #8
    c22e:	d001      	beq.n	c234 <errata_36+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c230:	2000      	movs	r0, #0
    c232:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c234:	4b04      	ldr	r3, [pc, #16]	; (c248 <errata_36+0x20>)
    c236:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c238:	b10b      	cbz	r3, c23e <errata_36+0x16>
	return false;
    c23a:	2000      	movs	r0, #0
    c23c:	4770      	bx	lr
		return true;
    c23e:	2001      	movs	r0, #1
}
    c240:	4770      	bx	lr
    c242:	bf00      	nop
    c244:	10000130 	.word	0x10000130
    c248:	10000134 	.word	0x10000134

0000c24c <errata_98>:


static bool errata_98(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c24c:	4b06      	ldr	r3, [pc, #24]	; (c268 <errata_98+0x1c>)
    c24e:	681b      	ldr	r3, [r3, #0]
    c250:	2b08      	cmp	r3, #8
    c252:	d001      	beq.n	c258 <errata_98+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c254:	2000      	movs	r0, #0
    c256:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c258:	4b04      	ldr	r3, [pc, #16]	; (c26c <errata_98+0x20>)
    c25a:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c25c:	b10b      	cbz	r3, c262 <errata_98+0x16>
	return false;
    c25e:	2000      	movs	r0, #0
    c260:	4770      	bx	lr
		return true;
    c262:	2001      	movs	r0, #1
}
    c264:	4770      	bx	lr
    c266:	bf00      	nop
    c268:	10000130 	.word	0x10000130
    c26c:	10000134 	.word	0x10000134

0000c270 <errata_103>:


static bool errata_103(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c270:	4b06      	ldr	r3, [pc, #24]	; (c28c <errata_103+0x1c>)
    c272:	681b      	ldr	r3, [r3, #0]
    c274:	2b08      	cmp	r3, #8
    c276:	d001      	beq.n	c27c <errata_103+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c278:	2000      	movs	r0, #0
    c27a:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c27c:	4b04      	ldr	r3, [pc, #16]	; (c290 <errata_103+0x20>)
    c27e:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c280:	b10b      	cbz	r3, c286 <errata_103+0x16>
	return false;
    c282:	2000      	movs	r0, #0
    c284:	4770      	bx	lr
		return true;
    c286:	2001      	movs	r0, #1
}
    c288:	4770      	bx	lr
    c28a:	bf00      	nop
    c28c:	10000130 	.word	0x10000130
    c290:	10000134 	.word	0x10000134

0000c294 <errata_115>:


static bool errata_115(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c294:	4b06      	ldr	r3, [pc, #24]	; (c2b0 <errata_115+0x1c>)
    c296:	681b      	ldr	r3, [r3, #0]
    c298:	2b08      	cmp	r3, #8
    c29a:	d001      	beq.n	c2a0 <errata_115+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c29c:	2000      	movs	r0, #0
    c29e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2a0:	4b04      	ldr	r3, [pc, #16]	; (c2b4 <errata_115+0x20>)
    c2a2:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2a4:	b10b      	cbz	r3, c2aa <errata_115+0x16>
	return false;
    c2a6:	2000      	movs	r0, #0
    c2a8:	4770      	bx	lr
		return true;
    c2aa:	2001      	movs	r0, #1
}
    c2ac:	4770      	bx	lr
    c2ae:	bf00      	nop
    c2b0:	10000130 	.word	0x10000130
    c2b4:	10000134 	.word	0x10000134

0000c2b8 <errata_120>:


static bool errata_120(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2b8:	4b06      	ldr	r3, [pc, #24]	; (c2d4 <errata_120+0x1c>)
    c2ba:	681b      	ldr	r3, [r3, #0]
    c2bc:	2b08      	cmp	r3, #8
    c2be:	d001      	beq.n	c2c4 <errata_120+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2c0:	2000      	movs	r0, #0
    c2c2:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2c4:	4b04      	ldr	r3, [pc, #16]	; (c2d8 <errata_120+0x20>)
    c2c6:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2c8:	b10b      	cbz	r3, c2ce <errata_120+0x16>
	return false;
    c2ca:	2000      	movs	r0, #0
    c2cc:	4770      	bx	lr
		return true;
    c2ce:	2001      	movs	r0, #1
}
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop
    c2d4:	10000130 	.word	0x10000130
    c2d8:	10000134 	.word	0x10000134

0000c2dc <errata_121>:

static bool errata_121(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2dc:	4b06      	ldr	r3, [pc, #24]	; (c2f8 <errata_121+0x1c>)
    c2de:	681b      	ldr	r3, [r3, #0]
    c2e0:	2b08      	cmp	r3, #8
    c2e2:	d001      	beq.n	c2e8 <errata_121+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2e4:	2000      	movs	r0, #0
    c2e6:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2e8:	4b04      	ldr	r3, [pc, #16]	; (c2fc <errata_121+0x20>)
    c2ea:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2ec:	b10b      	cbz	r3, c2f2 <errata_121+0x16>
	return false;
    c2ee:	2000      	movs	r0, #0
    c2f0:	4770      	bx	lr
		return true;
    c2f2:	2001      	movs	r0, #1
}
    c2f4:	4770      	bx	lr
    c2f6:	bf00      	nop
    c2f8:	10000130 	.word	0x10000130
    c2fc:	10000134 	.word	0x10000134

0000c300 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    c300:	4b01      	ldr	r3, [pc, #4]	; (c308 <SystemCoreClockUpdate+0x8>)
    c302:	4a02      	ldr	r2, [pc, #8]	; (c30c <SystemCoreClockUpdate+0xc>)
    c304:	601a      	str	r2, [r3, #0]
}
    c306:	4770      	bx	lr
    c308:	20000100 	.word	0x20000100
    c30c:	03d09000 	.word	0x03d09000

0000c310 <SystemInit>:
{
    c310:	b508      	push	{r3, lr}
        if (errata_36()){
    c312:	f7ff ff89 	bl	c228 <errata_36>
    c316:	b140      	cbz	r0, c32a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    c318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c31c:	2200      	movs	r2, #0
    c31e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    c322:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    c326:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        if (errata_98()){
    c32a:	f7ff ff8f 	bl	c24c <errata_98>
    c32e:	b110      	cbz	r0, c336 <SystemInit+0x26>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    c330:	4b2d      	ldr	r3, [pc, #180]	; (c3e8 <SystemInit+0xd8>)
    c332:	4a2e      	ldr	r2, [pc, #184]	; (c3ec <SystemInit+0xdc>)
    c334:	601a      	str	r2, [r3, #0]
        if (errata_103()){
    c336:	f7ff ff9b 	bl	c270 <errata_103>
    c33a:	b118      	cbz	r0, c344 <SystemInit+0x34>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    c33c:	4b2c      	ldr	r3, [pc, #176]	; (c3f0 <SystemInit+0xe0>)
    c33e:	22fb      	movs	r2, #251	; 0xfb
    c340:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (errata_115()){
    c344:	f7ff ffa6 	bl	c294 <errata_115>
    c348:	b148      	cbz	r0, c35e <SystemInit+0x4e>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    c34a:	492a      	ldr	r1, [pc, #168]	; (c3f4 <SystemInit+0xe4>)
    c34c:	680b      	ldr	r3, [r1, #0]
    c34e:	f023 030f 	bic.w	r3, r3, #15
    c352:	4a29      	ldr	r2, [pc, #164]	; (c3f8 <SystemInit+0xe8>)
    c354:	6812      	ldr	r2, [r2, #0]
    c356:	f002 020f 	and.w	r2, r2, #15
    c35a:	4313      	orrs	r3, r2
    c35c:	600b      	str	r3, [r1, #0]
        if (errata_120()){
    c35e:	f7ff ffab 	bl	c2b8 <errata_120>
    c362:	b118      	cbz	r0, c36c <SystemInit+0x5c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    c364:	4b25      	ldr	r3, [pc, #148]	; (c3fc <SystemInit+0xec>)
    c366:	f44f 7200 	mov.w	r2, #512	; 0x200
    c36a:	601a      	str	r2, [r3, #0]
        if (errata_121()){
    c36c:	f7ff ffb6 	bl	c2dc <errata_121>
    c370:	b110      	cbz	r0, c378 <SystemInit+0x68>
            *(volatile uint32_t *)0x40029600ul = 0x00040400ul;
    c372:	4b23      	ldr	r3, [pc, #140]	; (c400 <SystemInit+0xf0>)
    c374:	4a23      	ldr	r2, [pc, #140]	; (c404 <SystemInit+0xf4>)
    c376:	601a      	str	r2, [r3, #0]
            if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    c378:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c37c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    c380:	f013 0f01 	tst.w	r3, #1
    c384:	d104      	bne.n	c390 <SystemInit+0x80>
    SystemCoreClockUpdate();
    c386:	f7ff ffbb 	bl	c300 <SystemCoreClockUpdate>
    NVIC_Relocate();
    c38a:	f000 fbc7 	bl	cb1c <NVIC_Relocate>
}
    c38e:	bd08      	pop	{r3, pc}
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    c390:	4b1d      	ldr	r3, [pc, #116]	; (c408 <SystemInit+0xf8>)
    c392:	2201      	movs	r2, #1
    c394:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c398:	4b1b      	ldr	r3, [pc, #108]	; (c408 <SystemInit+0xf8>)
    c39a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d0fa      	beq.n	c398 <SystemInit+0x88>
                NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    c3a2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    c3a6:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    c3aa:	f023 0301 	bic.w	r3, r3, #1
    c3ae:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3b2:	4b15      	ldr	r3, [pc, #84]	; (c408 <SystemInit+0xf8>)
    c3b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3b8:	2b00      	cmp	r3, #0
    c3ba:	d0fa      	beq.n	c3b2 <SystemInit+0xa2>
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    c3bc:	4b12      	ldr	r3, [pc, #72]	; (c408 <SystemInit+0xf8>)
    c3be:	2200      	movs	r2, #0
    c3c0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3c4:	4b10      	ldr	r3, [pc, #64]	; (c408 <SystemInit+0xf8>)
    c3c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3ca:	2b00      	cmp	r3, #0
    c3cc:	d0fa      	beq.n	c3c4 <SystemInit+0xb4>
    c3ce:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c3d2:	490e      	ldr	r1, [pc, #56]	; (c40c <SystemInit+0xfc>)
    c3d4:	68ca      	ldr	r2, [r1, #12]
    c3d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c3da:	4b0d      	ldr	r3, [pc, #52]	; (c410 <SystemInit+0x100>)
    c3dc:	4313      	orrs	r3, r2
    c3de:	60cb      	str	r3, [r1, #12]
    c3e0:	f3bf 8f4f 	dsb	sy
    __NOP();
    c3e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c3e6:	e7fd      	b.n	c3e4 <SystemInit+0xd4>
    c3e8:	4000568c 	.word	0x4000568c
    c3ec:	00038148 	.word	0x00038148
    c3f0:	4000f000 	.word	0x4000f000
    c3f4:	40000ee4 	.word	0x40000ee4
    c3f8:	10000258 	.word	0x10000258
    c3fc:	40029640 	.word	0x40029640
    c400:	40029600 	.word	0x40029600
    c404:	00040400 	.word	0x00040400
    c408:	4001e000 	.word	0x4001e000
    c40c:	e000ed00 	.word	0xe000ed00
    c410:	05fa0004 	.word	0x05fa0004

0000c414 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
    c414:	4770      	bx	lr
	...

0000c418 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
    c418:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
    c41a:	4d0e      	ldr	r5, [pc, #56]	; (c454 <__libc_init_array+0x3c>)
    c41c:	4b0e      	ldr	r3, [pc, #56]	; (c458 <__libc_init_array+0x40>)
    c41e:	1aed      	subs	r5, r5, r3
    c420:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    c422:	2400      	movs	r4, #0
    c424:	42ac      	cmp	r4, r5
    c426:	d205      	bcs.n	c434 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
    c428:	4b0b      	ldr	r3, [pc, #44]	; (c458 <__libc_init_array+0x40>)
    c42a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c42e:	4798      	blx	r3
    for (i = 0; i < count; i++)
    c430:	3401      	adds	r4, #1
    c432:	e7f7      	b.n	c424 <__libc_init_array+0xc>

    _init();
    c434:	f7ff ffee 	bl	c414 <_init>

    count = __init_array_end - __init_array_start;
    c438:	4d08      	ldr	r5, [pc, #32]	; (c45c <__libc_init_array+0x44>)
    c43a:	4b09      	ldr	r3, [pc, #36]	; (c460 <__libc_init_array+0x48>)
    c43c:	1aed      	subs	r5, r5, r3
    c43e:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    c440:	2400      	movs	r4, #0
    c442:	e004      	b.n	c44e <__libc_init_array+0x36>
        __init_array_start[i]();
    c444:	4b06      	ldr	r3, [pc, #24]	; (c460 <__libc_init_array+0x48>)
    c446:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c44a:	4798      	blx	r3
    for (i = 0; i < count; i++)
    c44c:	3401      	adds	r4, #1
    c44e:	42ac      	cmp	r4, r5
    c450:	d3f8      	bcc.n	c444 <__libc_init_array+0x2c>
}
    c452:	bd38      	pop	{r3, r4, r5, pc}
    c454:	0002d2cc 	.word	0x0002d2cc
    c458:	0002d2cc 	.word	0x0002d2cc
    c45c:	0002d2cc 	.word	0x0002d2cc
    c460:	0002d2cc 	.word	0x0002d2cc

0000c464 <_start>:
{
    c464:	b508      	push	{r3, lr}
        __libc_init_array();
    c466:	f7ff ffd7 	bl	c418 <__libc_init_array>
    os_init(main);
    c46a:	4803      	ldr	r0, [pc, #12]	; (c478 <_start+0x14>)
    c46c:	f000 fca4 	bl	cdb8 <os_init>
    os_start();
    c470:	f000 fd0e 	bl	ce90 <os_start>
}
    c474:	bd08      	pop	{r3, pc}
    c476:	bf00      	nop
    c478:	0000c801 	.word	0x0000c801

0000c47c <bleprph_on_reset>:
    return 0;
}

static void
bleprph_on_reset(int reason)
{
    c47c:	b508      	push	{r3, lr}
    c47e:	4603      	mov	r3, r0
    MODLOG_DFLT(ERROR, "Resetting state; reason=%d\n", reason);
    c480:	4a02      	ldr	r2, [pc, #8]	; (c48c <bleprph_on_reset+0x10>)
    c482:	2103      	movs	r1, #3
    c484:	2000      	movs	r0, #0
    c486:	f005 f8d7 	bl	11638 <modlog_printf>
}
    c48a:	bd08      	pop	{r3, pc}
    c48c:	0002d2cc 	.word	0x0002d2cc

0000c490 <bleprph_advertise>:
{
    c490:	b500      	push	{lr}
    c492:	b09f      	sub	sp, #124	; 0x7c
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
    c494:	f10d 0173 	add.w	r1, sp, #115	; 0x73
    c498:	2000      	movs	r0, #0
    c49a:	f016 ff61 	bl	23360 <ble_hs_id_infer_auto>
    if (rc != 0) {
    c49e:	2800      	cmp	r0, #0
    c4a0:	d146      	bne.n	c530 <bleprph_advertise+0xa0>
    memset(&fields, 0, sizeof fields);
    c4a2:	2260      	movs	r2, #96	; 0x60
    c4a4:	2100      	movs	r1, #0
    c4a6:	a802      	add	r0, sp, #8
    c4a8:	f002 faab 	bl	ea02 <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
    c4ac:	2306      	movs	r3, #6
    c4ae:	f88d 3008 	strb.w	r3, [sp, #8]
    fields.tx_pwr_lvl_is_present = 1;
    c4b2:	2301      	movs	r3, #1
    c4b4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
    c4b8:	2380      	movs	r3, #128	; 0x80
    c4ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    name = ble_svc_gap_device_name();
    c4be:	f01a fbb3 	bl	26c28 <ble_svc_gap_device_name>
    fields.name = (uint8_t *)name;
    c4c2:	9009      	str	r0, [sp, #36]	; 0x24
    fields.name_len = strlen(name);
    c4c4:	f002 fac5 	bl	ea52 <strlen>
    c4c8:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    fields.name_is_complete = 1;
    c4cc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    c4d0:	f043 0301 	orr.w	r3, r3, #1
    c4d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    fields.uuids16 = (ble_uuid16_t[]){
    c4d8:	4b1f      	ldr	r3, [pc, #124]	; (c558 <bleprph_advertise+0xc8>)
    c4da:	681b      	ldr	r3, [r3, #0]
    c4dc:	931d      	str	r3, [sp, #116]	; 0x74
    c4de:	ab1d      	add	r3, sp, #116	; 0x74
    c4e0:	9303      	str	r3, [sp, #12]
    fields.num_uuids16 = 1;
    c4e2:	2301      	movs	r3, #1
    c4e4:	f88d 3010 	strb.w	r3, [sp, #16]
    fields.uuids16_is_complete = 1;
    c4e8:	f89d 3011 	ldrb.w	r3, [sp, #17]
    c4ec:	f043 0301 	orr.w	r3, r3, #1
    c4f0:	f88d 3011 	strb.w	r3, [sp, #17]
    rc = ble_gap_adv_set_fields(&fields);
    c4f4:	a802      	add	r0, sp, #8
    c4f6:	f012 fb55 	bl	1eba4 <ble_gap_adv_set_fields>
    if (rc != 0) {
    c4fa:	4603      	mov	r3, r0
    c4fc:	b9f8      	cbnz	r0, c53e <bleprph_advertise+0xae>
    memset(&adv_params, 0, sizeof adv_params);
    c4fe:	2100      	movs	r1, #0
    c500:	911a      	str	r1, [sp, #104]	; 0x68
    c502:	911b      	str	r1, [sp, #108]	; 0x6c
    c504:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
    adv_params.conn_mode = BLE_GAP_CONN_MODE_UND;
    c508:	2302      	movs	r3, #2
    c50a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
    c50e:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    rc = ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER,
    c512:	9101      	str	r1, [sp, #4]
    c514:	4b11      	ldr	r3, [pc, #68]	; (c55c <bleprph_advertise+0xcc>)
    c516:	9300      	str	r3, [sp, #0]
    c518:	ab1a      	add	r3, sp, #104	; 0x68
    c51a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    c51e:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
    c522:	f012 fa89 	bl	1ea38 <ble_gap_adv_start>
    if (rc != 0) {
    c526:	4603      	mov	r3, r0
    c528:	b978      	cbnz	r0, c54a <bleprph_advertise+0xba>
}
    c52a:	b01f      	add	sp, #124	; 0x7c
    c52c:	f85d fb04 	ldr.w	pc, [sp], #4
    c530:	4603      	mov	r3, r0
        MODLOG_DFLT(ERROR, "error determining address type; rc=%d\n", rc);
    c532:	4a0b      	ldr	r2, [pc, #44]	; (c560 <bleprph_advertise+0xd0>)
    c534:	2103      	movs	r1, #3
    c536:	2000      	movs	r0, #0
    c538:	f005 f87e 	bl	11638 <modlog_printf>
        return;
    c53c:	e7f5      	b.n	c52a <bleprph_advertise+0x9a>
        MODLOG_DFLT(ERROR, "error setting advertisement data; rc=%d\n", rc);
    c53e:	4a09      	ldr	r2, [pc, #36]	; (c564 <bleprph_advertise+0xd4>)
    c540:	2103      	movs	r1, #3
    c542:	2000      	movs	r0, #0
    c544:	f005 f878 	bl	11638 <modlog_printf>
        return;
    c548:	e7ef      	b.n	c52a <bleprph_advertise+0x9a>
        MODLOG_DFLT(ERROR, "error enabling advertisement; rc=%d\n", rc);
    c54a:	4a07      	ldr	r2, [pc, #28]	; (c568 <bleprph_advertise+0xd8>)
    c54c:	2103      	movs	r1, #3
    c54e:	2000      	movs	r0, #0
    c550:	f005 f872 	bl	11638 <modlog_printf>
        return;
    c554:	e7e9      	b.n	c52a <bleprph_advertise+0x9a>
    c556:	bf00      	nop
    c558:	0002d59c 	.word	0x0002d59c
    c55c:	0000c629 	.word	0x0000c629
    c560:	0002d2e8 	.word	0x0002d2e8
    c564:	0002d310 	.word	0x0002d310
    c568:	0002d33c 	.word	0x0002d33c

0000c56c <bleprph_on_sync>:

static void
bleprph_on_sync(void)
{
    c56c:	b508      	push	{r3, lr}
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
    c56e:	2000      	movs	r0, #0
    c570:	f01a fe90 	bl	27294 <ble_hs_util_ensure_addr>
    assert(rc == 0);
    c574:	b910      	cbnz	r0, c57c <bleprph_on_sync+0x10>

    /* Begin advertising. */
    bleprph_advertise();
    c576:	f7ff ff8b 	bl	c490 <bleprph_advertise>
}
    c57a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    c57c:	f7ff fe0e 	bl	c19c <hal_debugger_connected>
    c580:	b100      	cbz	r0, c584 <bleprph_on_sync+0x18>
    c582:	be01      	bkpt	0x0001
    c584:	2300      	movs	r3, #0
    c586:	461a      	mov	r2, r3
    c588:	4619      	mov	r1, r3
    c58a:	4618      	mov	r0, r3
    c58c:	f000 fb0a 	bl	cba4 <__assert_func>

0000c590 <bleprph_print_conn_desc>:
{
    c590:	b530      	push	{r4, r5, lr}
    c592:	b087      	sub	sp, #28
    c594:	4604      	mov	r4, r0
    MODLOG_DFLT(INFO, "handle=%d our_ota_addr_type=%d our_ota_addr=",
    c596:	7c83      	ldrb	r3, [r0, #18]
    c598:	9300      	str	r3, [sp, #0]
    c59a:	8c03      	ldrh	r3, [r0, #32]
    c59c:	4a1d      	ldr	r2, [pc, #116]	; (c614 <bleprph_print_conn_desc+0x84>)
    c59e:	2101      	movs	r1, #1
    c5a0:	2000      	movs	r0, #0
    c5a2:	f005 f849 	bl	11638 <modlog_printf>
    print_addr(desc->our_ota_addr.val);
    c5a6:	f104 0013 	add.w	r0, r4, #19
    c5aa:	f000 f965 	bl	c878 <print_addr>
    MODLOG_DFLT(INFO, " our_id_addr_type=%d our_id_addr=",
    c5ae:	7923      	ldrb	r3, [r4, #4]
    c5b0:	4a19      	ldr	r2, [pc, #100]	; (c618 <bleprph_print_conn_desc+0x88>)
    c5b2:	2101      	movs	r1, #1
    c5b4:	2000      	movs	r0, #0
    c5b6:	f005 f83f 	bl	11638 <modlog_printf>
    print_addr(desc->our_id_addr.val);
    c5ba:	1d60      	adds	r0, r4, #5
    c5bc:	f000 f95c 	bl	c878 <print_addr>
    MODLOG_DFLT(INFO, " peer_ota_addr_type=%d peer_ota_addr=",
    c5c0:	7e63      	ldrb	r3, [r4, #25]
    c5c2:	4a16      	ldr	r2, [pc, #88]	; (c61c <bleprph_print_conn_desc+0x8c>)
    c5c4:	2101      	movs	r1, #1
    c5c6:	2000      	movs	r0, #0
    c5c8:	f005 f836 	bl	11638 <modlog_printf>
    print_addr(desc->peer_ota_addr.val);
    c5cc:	f104 001a 	add.w	r0, r4, #26
    c5d0:	f000 f952 	bl	c878 <print_addr>
    MODLOG_DFLT(INFO, " peer_id_addr_type=%d peer_id_addr=",
    c5d4:	7ae3      	ldrb	r3, [r4, #11]
    c5d6:	4a12      	ldr	r2, [pc, #72]	; (c620 <bleprph_print_conn_desc+0x90>)
    c5d8:	2101      	movs	r1, #1
    c5da:	2000      	movs	r0, #0
    c5dc:	f005 f82c 	bl	11638 <modlog_printf>
    print_addr(desc->peer_id_addr.val);
    c5e0:	f104 000c 	add.w	r0, r4, #12
    c5e4:	f000 f948 	bl	c878 <print_addr>
    MODLOG_DFLT(INFO, " conn_itvl=%d conn_latency=%d supervision_timeout=%d "
    c5e8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    c5ea:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
    c5ec:	7823      	ldrb	r3, [r4, #0]
    c5ee:	f003 0001 	and.w	r0, r3, #1
    c5f2:	f3c3 0540 	ubfx	r5, r3, #1, #1
    c5f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
    c5fa:	9304      	str	r3, [sp, #16]
    c5fc:	9503      	str	r5, [sp, #12]
    c5fe:	9002      	str	r0, [sp, #8]
    c600:	9101      	str	r1, [sp, #4]
    c602:	9200      	str	r2, [sp, #0]
    c604:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    c606:	4a07      	ldr	r2, [pc, #28]	; (c624 <bleprph_print_conn_desc+0x94>)
    c608:	2101      	movs	r1, #1
    c60a:	2000      	movs	r0, #0
    c60c:	f005 f814 	bl	11638 <modlog_printf>
}
    c610:	b007      	add	sp, #28
    c612:	bd30      	pop	{r4, r5, pc}
    c614:	0002d364 	.word	0x0002d364
    c618:	0002d394 	.word	0x0002d394
    c61c:	0002d3b8 	.word	0x0002d3b8
    c620:	0002d3e0 	.word	0x0002d3e0
    c624:	0002d404 	.word	0x0002d404

0000c628 <bleprph_gap_event>:
{
    c628:	b570      	push	{r4, r5, r6, lr}
    c62a:	b092      	sub	sp, #72	; 0x48
    c62c:	4604      	mov	r4, r0
    switch (event->type) {
    c62e:	7803      	ldrb	r3, [r0, #0]
    c630:	2b11      	cmp	r3, #17
    c632:	f200 80cc 	bhi.w	c7ce <bleprph_gap_event+0x1a6>
    c636:	e8df f003 	tbb	[pc, r3]
    c63a:	3509      	.short	0x3509
    c63c:	caca48ca 	.word	0xcaca48ca
    c640:	67cacaca 	.word	0x67cacaca
    c644:	cacaca71 	.word	0xcacaca71
    c648:	b5caa990 	.word	0xb5caa990
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
    c64c:	6842      	ldr	r2, [r0, #4]
    c64e:	b9ea      	cbnz	r2, c68c <bleprph_gap_event+0x64>
    c650:	4b61      	ldr	r3, [pc, #388]	; (c7d8 <bleprph_gap_event+0x1b0>)
    c652:	9200      	str	r2, [sp, #0]
    c654:	4a61      	ldr	r2, [pc, #388]	; (c7dc <bleprph_gap_event+0x1b4>)
    c656:	2101      	movs	r1, #1
    c658:	2000      	movs	r0, #0
    c65a:	f004 ffed 	bl	11638 <modlog_printf>
        if (event->connect.status == 0) {
    c65e:	6863      	ldr	r3, [r4, #4]
    c660:	b93b      	cbnz	r3, c672 <bleprph_gap_event+0x4a>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    c662:	a907      	add	r1, sp, #28
    c664:	8920      	ldrh	r0, [r4, #8]
    c666:	f012 f973 	bl	1e950 <ble_gap_conn_find>
            assert(rc == 0);
    c66a:	b988      	cbnz	r0, c690 <bleprph_gap_event+0x68>
            bleprph_print_conn_desc(&desc);
    c66c:	a807      	add	r0, sp, #28
    c66e:	f7ff ff8f 	bl	c590 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c672:	4a5b      	ldr	r2, [pc, #364]	; (c7e0 <bleprph_gap_event+0x1b8>)
    c674:	2101      	movs	r1, #1
    c676:	2000      	movs	r0, #0
    c678:	f004 ffde 	bl	11638 <modlog_printf>
        if (event->connect.status != 0) {
    c67c:	6864      	ldr	r4, [r4, #4]
    c67e:	2c00      	cmp	r4, #0
    c680:	f000 80a6 	beq.w	c7d0 <bleprph_gap_event+0x1a8>
            bleprph_advertise();
    c684:	f7ff ff04 	bl	c490 <bleprph_advertise>
        return 0;
    c688:	2400      	movs	r4, #0
    c68a:	e0a1      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
    c68c:	4b55      	ldr	r3, [pc, #340]	; (c7e4 <bleprph_gap_event+0x1bc>)
    c68e:	e7e0      	b.n	c652 <bleprph_gap_event+0x2a>
            assert(rc == 0);
    c690:	f7ff fd84 	bl	c19c <hal_debugger_connected>
    c694:	b100      	cbz	r0, c698 <bleprph_gap_event+0x70>
    c696:	be01      	bkpt	0x0001
    c698:	2300      	movs	r3, #0
    c69a:	461a      	mov	r2, r3
    c69c:	4619      	mov	r1, r3
    c69e:	4618      	mov	r0, r3
    c6a0:	f000 fa80 	bl	cba4 <__assert_func>
        MODLOG_DFLT(INFO, "disconnect; reason=%d ", event->disconnect.reason);
    c6a4:	6843      	ldr	r3, [r0, #4]
    c6a6:	4a50      	ldr	r2, [pc, #320]	; (c7e8 <bleprph_gap_event+0x1c0>)
    c6a8:	2101      	movs	r1, #1
    c6aa:	2000      	movs	r0, #0
    c6ac:	f004 ffc4 	bl	11638 <modlog_printf>
        bleprph_print_conn_desc(&event->disconnect.conn);
    c6b0:	f104 0008 	add.w	r0, r4, #8
    c6b4:	f7ff ff6c 	bl	c590 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c6b8:	4a49      	ldr	r2, [pc, #292]	; (c7e0 <bleprph_gap_event+0x1b8>)
    c6ba:	2101      	movs	r1, #1
    c6bc:	2000      	movs	r0, #0
    c6be:	f004 ffbb 	bl	11638 <modlog_printf>
        bleprph_advertise();
    c6c2:	f7ff fee5 	bl	c490 <bleprph_advertise>
        return 0;
    c6c6:	2400      	movs	r4, #0
    c6c8:	e082      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "connection updated; status=%d ",
    c6ca:	6843      	ldr	r3, [r0, #4]
    c6cc:	4a47      	ldr	r2, [pc, #284]	; (c7ec <bleprph_gap_event+0x1c4>)
    c6ce:	2101      	movs	r1, #1
    c6d0:	2000      	movs	r0, #0
    c6d2:	f004 ffb1 	bl	11638 <modlog_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
    c6d6:	a907      	add	r1, sp, #28
    c6d8:	8920      	ldrh	r0, [r4, #8]
    c6da:	f012 f939 	bl	1e950 <ble_gap_conn_find>
        assert(rc == 0);
    c6de:	4604      	mov	r4, r0
    c6e0:	b940      	cbnz	r0, c6f4 <bleprph_gap_event+0xcc>
        bleprph_print_conn_desc(&desc);
    c6e2:	a807      	add	r0, sp, #28
    c6e4:	f7ff ff54 	bl	c590 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c6e8:	4a3d      	ldr	r2, [pc, #244]	; (c7e0 <bleprph_gap_event+0x1b8>)
    c6ea:	2101      	movs	r1, #1
    c6ec:	2000      	movs	r0, #0
    c6ee:	f004 ffa3 	bl	11638 <modlog_printf>
        return 0;
    c6f2:	e06d      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        assert(rc == 0);
    c6f4:	f7ff fd52 	bl	c19c <hal_debugger_connected>
    c6f8:	b100      	cbz	r0, c6fc <bleprph_gap_event+0xd4>
    c6fa:	be01      	bkpt	0x0001
    c6fc:	2300      	movs	r3, #0
    c6fe:	461a      	mov	r2, r3
    c700:	4619      	mov	r1, r3
    c702:	4618      	mov	r0, r3
    c704:	f000 fa4e 	bl	cba4 <__assert_func>
        MODLOG_DFLT(INFO, "advertise complete; reason=%d",
    c708:	6843      	ldr	r3, [r0, #4]
    c70a:	4a39      	ldr	r2, [pc, #228]	; (c7f0 <bleprph_gap_event+0x1c8>)
    c70c:	2101      	movs	r1, #1
    c70e:	2000      	movs	r0, #0
    c710:	f004 ff92 	bl	11638 <modlog_printf>
        bleprph_advertise();
    c714:	f7ff febc 	bl	c490 <bleprph_advertise>
        return 0;
    c718:	2400      	movs	r4, #0
    c71a:	e059      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "encryption change event; status=%d ",
    c71c:	6843      	ldr	r3, [r0, #4]
    c71e:	4a35      	ldr	r2, [pc, #212]	; (c7f4 <bleprph_gap_event+0x1cc>)
    c720:	2101      	movs	r1, #1
    c722:	2000      	movs	r0, #0
    c724:	f004 ff88 	bl	11638 <modlog_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    c728:	a907      	add	r1, sp, #28
    c72a:	8920      	ldrh	r0, [r4, #8]
    c72c:	f012 f910 	bl	1e950 <ble_gap_conn_find>
        assert(rc == 0);
    c730:	4604      	mov	r4, r0
    c732:	b940      	cbnz	r0, c746 <bleprph_gap_event+0x11e>
        bleprph_print_conn_desc(&desc);
    c734:	a807      	add	r0, sp, #28
    c736:	f7ff ff2b 	bl	c590 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c73a:	4a29      	ldr	r2, [pc, #164]	; (c7e0 <bleprph_gap_event+0x1b8>)
    c73c:	2101      	movs	r1, #1
    c73e:	2000      	movs	r0, #0
    c740:	f004 ff7a 	bl	11638 <modlog_printf>
        return 0;
    c744:	e044      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        assert(rc == 0);
    c746:	f7ff fd29 	bl	c19c <hal_debugger_connected>
    c74a:	b100      	cbz	r0, c74e <bleprph_gap_event+0x126>
    c74c:	be01      	bkpt	0x0001
    c74e:	2300      	movs	r3, #0
    c750:	461a      	mov	r2, r3
    c752:	4619      	mov	r1, r3
    c754:	4618      	mov	r0, r3
    c756:	f000 fa25 	bl	cba4 <__assert_func>
        MODLOG_DFLT(INFO, "subscribe event; conn_handle=%d attr_handle=%d "
    c75a:	88c2      	ldrh	r2, [r0, #6]
    c75c:	7a01      	ldrb	r1, [r0, #8]
    c75e:	7a43      	ldrb	r3, [r0, #9]
    c760:	f003 0001 	and.w	r0, r3, #1
    c764:	f3c3 0540 	ubfx	r5, r3, #1, #1
    c768:	f3c3 0680 	ubfx	r6, r3, #2, #1
    c76c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    c770:	9305      	str	r3, [sp, #20]
    c772:	9604      	str	r6, [sp, #16]
    c774:	9503      	str	r5, [sp, #12]
    c776:	9002      	str	r0, [sp, #8]
    c778:	9101      	str	r1, [sp, #4]
    c77a:	9200      	str	r2, [sp, #0]
    c77c:	88a3      	ldrh	r3, [r4, #4]
    c77e:	4a1e      	ldr	r2, [pc, #120]	; (c7f8 <bleprph_gap_event+0x1d0>)
    c780:	2101      	movs	r1, #1
    c782:	2000      	movs	r0, #0
    c784:	f004 ff58 	bl	11638 <modlog_printf>
        return 0;
    c788:	2400      	movs	r4, #0
    c78a:	e021      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        MODLOG_DFLT(INFO, "mtu update event; conn_handle=%d cid=%d mtu=%d\n",
    c78c:	88c3      	ldrh	r3, [r0, #6]
    c78e:	8902      	ldrh	r2, [r0, #8]
    c790:	9201      	str	r2, [sp, #4]
    c792:	9300      	str	r3, [sp, #0]
    c794:	8883      	ldrh	r3, [r0, #4]
    c796:	4a19      	ldr	r2, [pc, #100]	; (c7fc <bleprph_gap_event+0x1d4>)
    c798:	2101      	movs	r1, #1
    c79a:	2000      	movs	r0, #0
    c79c:	f004 ff4c 	bl	11638 <modlog_printf>
        return 0;
    c7a0:	2400      	movs	r4, #0
    c7a2:	e015      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
    c7a4:	a907      	add	r1, sp, #28
    c7a6:	8880      	ldrh	r0, [r0, #4]
    c7a8:	f012 f8d2 	bl	1e950 <ble_gap_conn_find>
        assert(rc == 0);
    c7ac:	b928      	cbnz	r0, c7ba <bleprph_gap_event+0x192>
        ble_store_util_delete_peer(&desc.peer_id_addr);
    c7ae:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    c7b2:	f019 fd62 	bl	2627a <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
    c7b6:	2401      	movs	r4, #1
    c7b8:	e00a      	b.n	c7d0 <bleprph_gap_event+0x1a8>
        assert(rc == 0);
    c7ba:	f7ff fcef 	bl	c19c <hal_debugger_connected>
    c7be:	b100      	cbz	r0, c7c2 <bleprph_gap_event+0x19a>
    c7c0:	be01      	bkpt	0x0001
    c7c2:	2300      	movs	r3, #0
    c7c4:	461a      	mov	r2, r3
    c7c6:	4619      	mov	r1, r3
    c7c8:	4618      	mov	r0, r3
    c7ca:	f000 f9eb 	bl	cba4 <__assert_func>
    switch (event->type) {
    c7ce:	2400      	movs	r4, #0
}
    c7d0:	4620      	mov	r0, r4
    c7d2:	b012      	add	sp, #72	; 0x48
    c7d4:	bd70      	pop	{r4, r5, r6, pc}
    c7d6:	bf00      	nop
    c7d8:	0002d46c 	.word	0x0002d46c
    c7dc:	0002d478 	.word	0x0002d478
    c7e0:	0002e438 	.word	0x0002e438
    c7e4:	0002d464 	.word	0x0002d464
    c7e8:	0002d494 	.word	0x0002d494
    c7ec:	0002d4ac 	.word	0x0002d4ac
    c7f0:	0002d4cc 	.word	0x0002d4cc
    c7f4:	0002d4ec 	.word	0x0002d4ec
    c7f8:	0002d510 	.word	0x0002d510
    c7fc:	0002d56c 	.word	0x0002d56c

0000c800 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(void)
{
    c800:	b510      	push	{r4, lr}
    c802:	b082      	sub	sp, #8
    static char ver_str[IMGMGR_NMGR_MAX_VER];
#endif
    int rc;

    /* Initialize OS */
    sysinit();
    c804:	f005 fca6 	bl	12154 <sysinit_start>
    c808:	f000 f90c 	bl	ca24 <sysinit_app>
    c80c:	f005 fca8 	bl	12160 <sysinit_end>

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = bleprph_on_reset;
    c810:	4b13      	ldr	r3, [pc, #76]	; (c860 <main+0x60>)
    c812:	4a14      	ldr	r2, [pc, #80]	; (c864 <main+0x64>)
    c814:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = bleprph_on_sync;
    c816:	4a14      	ldr	r2, [pc, #80]	; (c868 <main+0x68>)
    c818:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
    c81a:	4a14      	ldr	r2, [pc, #80]	; (c86c <main+0x6c>)
    c81c:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
    c81e:	4a14      	ldr	r2, [pc, #80]	; (c870 <main+0x70>)
    c820:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
    c822:	f000 f8f3 	bl	ca0c <gatt_svr_init>
    assert(rc == 0);
    c826:	b148      	cbz	r0, c83c <main+0x3c>
    c828:	f7ff fcb8 	bl	c19c <hal_debugger_connected>
    c82c:	b100      	cbz	r0, c830 <main+0x30>
    c82e:	be01      	bkpt	0x0001
    c830:	2300      	movs	r3, #0
    c832:	461a      	mov	r2, r3
    c834:	4619      	mov	r1, r3
    c836:	4618      	mov	r0, r3
    c838:	f000 f9b4 	bl	cba4 <__assert_func>

#if MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0
    /* Set firmware version in DIS */
    imgr_my_version(&ver);
    c83c:	4668      	mov	r0, sp
    c83e:	f002 f94d 	bl	eadc <imgr_my_version>
    imgr_ver_str(&ver, ver_str);
    c842:	4c0c      	ldr	r4, [pc, #48]	; (c874 <main+0x74>)
    c844:	4621      	mov	r1, r4
    c846:	4668      	mov	r0, sp
    c848:	f002 f9bc 	bl	ebc4 <imgr_ver_str>
    ble_svc_dis_firmware_revision_set(ver_str);
    c84c:	4620      	mov	r0, r4
    c84e:	f01a f923 	bl	26a98 <ble_svc_dis_firmware_revision_set>

#if MYNEWT_VAL(BLEPRPH_LE_PHY_SUPPORT)
    phy_init();
#endif

    conf_load();
    c852:	f002 fc61 	bl	f118 <conf_load>

    /*
     * As the last thing, process events from default event queue.
     */
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    c856:	f000 fd91 	bl	d37c <os_eventq_dflt_get>
    c85a:	f000 fd5c 	bl	d316 <os_eventq_run>
    while (1) {
    c85e:	e7fa      	b.n	c856 <main+0x56>
    c860:	200002d8 	.word	0x200002d8
    c864:	0000c47d 	.word	0x0000c47d
    c868:	0000c56d 	.word	0x0000c56d
    c86c:	0000c97d 	.word	0x0000c97d
    c870:	000262e1 	.word	0x000262e1
    c874:	20000570 	.word	0x20000570

0000c878 <print_addr>:
    }
}

void
print_addr(const void *addr)
{
    c878:	b530      	push	{r4, r5, lr}
    c87a:	b087      	sub	sp, #28
    const uint8_t *u8p;

    u8p = addr;
    MODLOG_DFLT(INFO, "%02x:%02x:%02x:%02x:%02x:%02x",
    c87c:	7903      	ldrb	r3, [r0, #4]
    c87e:	78c2      	ldrb	r2, [r0, #3]
    c880:	7881      	ldrb	r1, [r0, #2]
    c882:	7844      	ldrb	r4, [r0, #1]
    c884:	7805      	ldrb	r5, [r0, #0]
    c886:	9504      	str	r5, [sp, #16]
    c888:	9403      	str	r4, [sp, #12]
    c88a:	9102      	str	r1, [sp, #8]
    c88c:	9201      	str	r2, [sp, #4]
    c88e:	9300      	str	r3, [sp, #0]
    c890:	7943      	ldrb	r3, [r0, #5]
    c892:	4a03      	ldr	r2, [pc, #12]	; (c8a0 <print_addr+0x28>)
    c894:	2101      	movs	r1, #1
    c896:	2000      	movs	r0, #0
    c898:	f004 fece 	bl	11638 <modlog_printf>
                u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
}
    c89c:	b007      	add	sp, #28
    c89e:	bd30      	pop	{r4, r5, pc}
    c8a0:	0002d5a0 	.word	0x0002d5a0

0000c8a4 <gatt_svr_chr_write>:
};

static int
gatt_svr_chr_write(struct os_mbuf *om, uint16_t min_len, uint16_t max_len,
                   void *dst, uint16_t *len)
{
    c8a4:	b510      	push	{r4, lr}
    c8a6:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
    c8a8:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
    c8aa:	428b      	cmp	r3, r1
    c8ac:	d307      	bcc.n	c8be <gatt_svr_chr_write+0x1a>
    c8ae:	4293      	cmp	r3, r2
    c8b0:	d807      	bhi.n	c8c2 <gatt_svr_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
    c8b2:	9b02      	ldr	r3, [sp, #8]
    c8b4:	4621      	mov	r1, r4
    c8b6:	f016 fdc3 	bl	23440 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
    c8ba:	b920      	cbnz	r0, c8c6 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
    c8bc:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    c8be:	200d      	movs	r0, #13
    c8c0:	e7fc      	b.n	c8bc <gatt_svr_chr_write+0x18>
    c8c2:	200d      	movs	r0, #13
    c8c4:	e7fa      	b.n	c8bc <gatt_svr_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
    c8c6:	200e      	movs	r0, #14
    c8c8:	e7f8      	b.n	c8bc <gatt_svr_chr_write+0x18>
	...

0000c8cc <gatt_svr_chr_access_sec_test>:

static int
gatt_svr_chr_access_sec_test(uint16_t conn_handle, uint16_t attr_handle,
                             struct ble_gatt_access_ctxt *ctxt,
                             void *arg)
{
    c8cc:	b530      	push	{r4, r5, lr}
    c8ce:	b085      	sub	sp, #20
    c8d0:	4614      	mov	r4, r2
    const ble_uuid_t *uuid;
    int rand_num;
    int rc;

    uuid = ctxt->chr->uuid;
    c8d2:	6893      	ldr	r3, [r2, #8]
    c8d4:	681d      	ldr	r5, [r3, #0]

    /* Determine which characteristic is being accessed by examining its
     * 128-bit UUID.
     */

    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
    c8d6:	4926      	ldr	r1, [pc, #152]	; (c970 <gatt_svr_chr_access_sec_test+0xa4>)
    c8d8:	4628      	mov	r0, r5
    c8da:	f019 fd45 	bl	26368 <ble_uuid_cmp>
    c8de:	b9b8      	cbnz	r0, c910 <gatt_svr_chr_access_sec_test+0x44>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    c8e0:	7823      	ldrb	r3, [r4, #0]
    c8e2:	b95b      	cbnz	r3, c8fc <gatt_svr_chr_access_sec_test+0x30>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
    c8e4:	f002 f83c 	bl	e960 <lrand48>

        /* Respond with a 32-bit random number. */
        rand_num = rand();
    c8e8:	9003      	str	r0, [sp, #12]
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
    c8ea:	2204      	movs	r2, #4
    c8ec:	a903      	add	r1, sp, #12
    c8ee:	6860      	ldr	r0, [r4, #4]
    c8f0:	f000 fdd9 	bl	d4a6 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    c8f4:	b100      	cbz	r0, c8f8 <gatt_svr_chr_access_sec_test+0x2c>
    c8f6:	2011      	movs	r0, #17
    /* Unknown characteristic; the nimble stack should not have called this
     * function.
     */
    assert(0);
    return BLE_ATT_ERR_UNLIKELY;
}
    c8f8:	b005      	add	sp, #20
    c8fa:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    c8fc:	f7ff fc4e 	bl	c19c <hal_debugger_connected>
    c900:	b100      	cbz	r0, c904 <gatt_svr_chr_access_sec_test+0x38>
    c902:	be01      	bkpt	0x0001
    c904:	2300      	movs	r3, #0
    c906:	461a      	mov	r2, r3
    c908:	4619      	mov	r1, r3
    c90a:	4618      	mov	r0, r3
    c90c:	f000 f94a 	bl	cba4 <__assert_func>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0) {
    c910:	4918      	ldr	r1, [pc, #96]	; (c974 <gatt_svr_chr_access_sec_test+0xa8>)
    c912:	4628      	mov	r0, r5
    c914:	f019 fd28 	bl	26368 <ble_uuid_cmp>
    c918:	b9f8      	cbnz	r0, c95a <gatt_svr_chr_access_sec_test+0x8e>
        switch (ctxt->op) {
    c91a:	7823      	ldrb	r3, [r4, #0]
    c91c:	b153      	cbz	r3, c934 <gatt_svr_chr_access_sec_test+0x68>
    c91e:	2b01      	cmp	r3, #1
    c920:	d111      	bne.n	c946 <gatt_svr_chr_access_sec_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,
    c922:	2300      	movs	r3, #0
    c924:	9300      	str	r3, [sp, #0]
    c926:	4b14      	ldr	r3, [pc, #80]	; (c978 <gatt_svr_chr_access_sec_test+0xac>)
    c928:	2201      	movs	r2, #1
    c92a:	4611      	mov	r1, r2
    c92c:	6860      	ldr	r0, [r4, #4]
    c92e:	f7ff ffb9 	bl	c8a4 <gatt_svr_chr_write>
            return rc;
    c932:	e7e1      	b.n	c8f8 <gatt_svr_chr_access_sec_test+0x2c>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
    c934:	2201      	movs	r2, #1
    c936:	4910      	ldr	r1, [pc, #64]	; (c978 <gatt_svr_chr_access_sec_test+0xac>)
    c938:	6860      	ldr	r0, [r4, #4]
    c93a:	f000 fdb4 	bl	d4a6 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    c93e:	2800      	cmp	r0, #0
    c940:	d0da      	beq.n	c8f8 <gatt_svr_chr_access_sec_test+0x2c>
    c942:	2011      	movs	r0, #17
    c944:	e7d8      	b.n	c8f8 <gatt_svr_chr_access_sec_test+0x2c>
            assert(0);
    c946:	f7ff fc29 	bl	c19c <hal_debugger_connected>
    c94a:	b100      	cbz	r0, c94e <gatt_svr_chr_access_sec_test+0x82>
    c94c:	be01      	bkpt	0x0001
    c94e:	2300      	movs	r3, #0
    c950:	461a      	mov	r2, r3
    c952:	4619      	mov	r1, r3
    c954:	4618      	mov	r0, r3
    c956:	f000 f925 	bl	cba4 <__assert_func>
    assert(0);
    c95a:	f7ff fc1f 	bl	c19c <hal_debugger_connected>
    c95e:	b100      	cbz	r0, c962 <gatt_svr_chr_access_sec_test+0x96>
    c960:	be01      	bkpt	0x0001
    c962:	2300      	movs	r3, #0
    c964:	461a      	mov	r2, r3
    c966:	4619      	mov	r1, r3
    c968:	4618      	mov	r0, r3
    c96a:	f000 f91b 	bl	cba4 <__assert_func>
    c96e:	bf00      	nop
    c970:	0002d654 	.word	0x0002d654
    c974:	0002d668 	.word	0x0002d668
    c978:	20000589 	.word	0x20000589

0000c97c <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
    c97c:	b510      	push	{r4, lr}
    c97e:	b08c      	sub	sp, #48	; 0x30
    c980:	4604      	mov	r4, r0
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
    c982:	7803      	ldrb	r3, [r0, #0]
    c984:	2b02      	cmp	r3, #2
    c986:	d01c      	beq.n	c9c2 <gatt_svr_register_cb+0x46>
    c988:	2b03      	cmp	r3, #3
    c98a:	d02a      	beq.n	c9e2 <gatt_svr_register_cb+0x66>
    c98c:	2b01      	cmp	r3, #1
    c98e:	d009      	beq.n	c9a4 <gatt_svr_register_cb+0x28>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
    c990:	f7ff fc04 	bl	c19c <hal_debugger_connected>
    c994:	b100      	cbz	r0, c998 <gatt_svr_register_cb+0x1c>
    c996:	be01      	bkpt	0x0001
    c998:	2300      	movs	r3, #0
    c99a:	461a      	mov	r2, r3
    c99c:	4619      	mov	r1, r3
    c99e:	4618      	mov	r0, r3
    c9a0:	f000 f900 	bl	cba4 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
    c9a4:	6883      	ldr	r3, [r0, #8]
    c9a6:	a902      	add	r1, sp, #8
    c9a8:	6858      	ldr	r0, [r3, #4]
    c9aa:	f019 fcfb 	bl	263a4 <ble_uuid_to_str>
    c9ae:	4603      	mov	r3, r0
    c9b0:	88a2      	ldrh	r2, [r4, #4]
    c9b2:	9200      	str	r2, [sp, #0]
    c9b4:	4a12      	ldr	r2, [pc, #72]	; (ca00 <gatt_svr_register_cb+0x84>)
    c9b6:	2100      	movs	r1, #0
    c9b8:	4608      	mov	r0, r1
    c9ba:	f004 fe3d 	bl	11638 <modlog_printf>
        break;
    }
}
    c9be:	b00c      	add	sp, #48	; 0x30
    c9c0:	bd10      	pop	{r4, pc}
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
    c9c2:	6883      	ldr	r3, [r0, #8]
    c9c4:	a902      	add	r1, sp, #8
    c9c6:	6818      	ldr	r0, [r3, #0]
    c9c8:	f019 fcec 	bl	263a4 <ble_uuid_to_str>
    c9cc:	4603      	mov	r3, r0
    c9ce:	88a2      	ldrh	r2, [r4, #4]
    c9d0:	88e1      	ldrh	r1, [r4, #6]
    c9d2:	9101      	str	r1, [sp, #4]
    c9d4:	9200      	str	r2, [sp, #0]
    c9d6:	4a0b      	ldr	r2, [pc, #44]	; (ca04 <gatt_svr_register_cb+0x88>)
    c9d8:	2100      	movs	r1, #0
    c9da:	4608      	mov	r0, r1
    c9dc:	f004 fe2c 	bl	11638 <modlog_printf>
        break;
    c9e0:	e7ed      	b.n	c9be <gatt_svr_register_cb+0x42>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
    c9e2:	6883      	ldr	r3, [r0, #8]
    c9e4:	a902      	add	r1, sp, #8
    c9e6:	6818      	ldr	r0, [r3, #0]
    c9e8:	f019 fcdc 	bl	263a4 <ble_uuid_to_str>
    c9ec:	4603      	mov	r3, r0
    c9ee:	88a2      	ldrh	r2, [r4, #4]
    c9f0:	9200      	str	r2, [sp, #0]
    c9f2:	4a05      	ldr	r2, [pc, #20]	; (ca08 <gatt_svr_register_cb+0x8c>)
    c9f4:	2100      	movs	r1, #0
    c9f6:	4608      	mov	r0, r1
    c9f8:	f004 fe1e 	bl	11638 <modlog_printf>
        break;
    c9fc:	e7df      	b.n	c9be <gatt_svr_register_cb+0x42>
    c9fe:	bf00      	nop
    ca00:	0002d5c0 	.word	0x0002d5c0
    ca04:	0002d5e8 	.word	0x0002d5e8
    ca08:	0002d628 	.word	0x0002d628

0000ca0c <gatt_svr_init>:

int
gatt_svr_init(void)
{
    ca0c:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
    ca0e:	4804      	ldr	r0, [pc, #16]	; (ca20 <gatt_svr_init+0x14>)
    ca10:	f014 fe52 	bl	216b8 <ble_gatts_count_cfg>
    if (rc != 0) {
    ca14:	b100      	cbz	r0, ca18 <gatt_svr_init+0xc>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    ca16:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
    ca18:	4801      	ldr	r0, [pc, #4]	; (ca20 <gatt_svr_init+0x14>)
    ca1a:	f014 fe29 	bl	21670 <ble_gatts_add_svcs>
    if (rc != 0) {
    ca1e:	e7fa      	b.n	ca16 <gatt_svr_init+0xa>
    ca20:	0002d690 	.word	0x0002d690

0000ca24 <sysinit_app>:
void ble_transport_hs_init(void);
void ble_transport_ll_init(void);

void
sysinit_app(void)
{
    ca24:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    ca26:	f000 fa45 	bl	ceb4 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    ca2a:	f004 f861 	bl	10af0 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
    ca2e:	f005 fb2d 	bl	1208c <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
    ca32:	f003 fd49 	bl	104c8 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
    ca36:	f002 fb11 	bl	f05c <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: modlog_init (sys/log/modlog) */
    modlog_init();
    ca3a:	f004 fe1b 	bl	11674 <modlog_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
    ca3e:	f004 fa63 	bl	10f08 <log_init>
    /* 100.2: mfg_init (sys/mfg) */
    mfg_init();
    ca42:	f004 ff81 	bl	11948 <mfg_init>

    /*** Stage 200 */
    /* 200.0: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
    ca46:	f005 fa43 	bl	11ed0 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
    ca4a:	f002 fb1d 	bl	f088 <config_pkg_init_stage2>

    /*** Stage 250 */
    /* 250.0: ble_transport_init (nimble/transport) */
    ble_transport_init();
    ca4e:	f01a fc95 	bl	2737c <ble_transport_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
    ca52:	f01a f8ed 	bl	26c30 <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
    ca56:	f01a f959 	bl	26d0c <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_dis_init (nimble/host/services/dis) */
    ble_svc_dis_init();
    ca5a:	f01a f823 	bl	26aa4 <ble_svc_dis_init>
    /* 303.1: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
    ca5e:	f019 ffa9 	bl	269b4 <ble_svc_ans_init>

    /*** Stage 500 */
    /* 500.0: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
    ca62:	f002 f899 	bl	eb98 <imgmgr_module_init>
    /* 500.1: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
    ca66:	f01a fbb1 	bl	271cc <ble_store_config_init>
    /* 500.2: split_app_init (boot/split) */
    split_app_init();
    ca6a:	f000 f813 	bl	ca94 <split_app_init>
    /* 500.3: smp_pkg_init (mgmt/smp) */
    smp_pkg_init();
    ca6e:	f002 f99b 	bl	eda8 <smp_pkg_init>
    /* 500.4: id_init (sys/id) */
    id_init();
    ca72:	f004 f945 	bl	10d00 <id_init>

    /*** Stage 501 */
    /* 501.0: img_mgmt_module_init (cmd/img_mgmt/port/mynewt) */
    img_mgmt_module_init();
    ca76:	f006 fecd 	bl	13814 <img_mgmt_module_init>
    /* 501.1: log_mgmt_module_init (cmd/log_mgmt/port/mynewt) */
    log_mgmt_module_init();
    ca7a:	f007 f819 	bl	13ab0 <log_mgmt_module_init>
    /* 501.2: os_mgmt_module_init (cmd/os_mgmt) */
    os_mgmt_module_init();
    ca7e:	f007 f94d 	bl	13d1c <os_mgmt_module_init>
    /* 501.3: stat_mgmt_module_init (cmd/stat_mgmt/port/mynewt) */
    stat_mgmt_module_init();
    ca82:	f007 fa09 	bl	13e98 <stat_mgmt_module_init>
    /* 501.4: smp_ble_pkg_init (mgmt/smp/transport/ble) */
    smp_ble_pkg_init();
    ca86:	f002 fa51 	bl	ef2c <smp_ble_pkg_init>

    /* [$after:ble_transport_init]: ble_transport_hs_init (nimble/transport) */
    /* [$before:ble_transport_ll_init]: ble_transport_hs_init (nimble/transport) */
    ble_transport_hs_init();
    ca8a:	f015 f99f 	bl	21dcc <ble_transport_hs_init>
    /* [$after:ble_transport_hs_init]: ble_transport_ll_init (nimble/transport) */
    ble_transport_ll_init();
    ca8e:	f008 f8c5 	bl	14c1c <ble_transport_ll_init>
}
    ca92:	bd08      	pop	{r3, pc}

0000ca94 <split_app_init>:
    },
};

void
split_app_init(void)
{
    ca94:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ca96:	4b0e      	ldr	r3, [pc, #56]	; (cad0 <split_app_init+0x3c>)
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	b12b      	cbz	r3, caa8 <split_app_init+0x14>

    rc = scfg_register(&split_scfg, "split");
    ca9c:	490d      	ldr	r1, [pc, #52]	; (cad4 <split_app_init+0x40>)
    ca9e:	480e      	ldr	r0, [pc, #56]	; (cad8 <split_app_init+0x44>)
    caa0:	f005 fd2e 	bl	12500 <scfg_register>
    assert(rc == 0);
    caa4:	b950      	cbnz	r0, cabc <split_app_init+0x28>
}
    caa6:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    caa8:	f7ff fb78 	bl	c19c <hal_debugger_connected>
    caac:	b100      	cbz	r0, cab0 <split_app_init+0x1c>
    caae:	be01      	bkpt	0x0001
    cab0:	2300      	movs	r3, #0
    cab2:	461a      	mov	r2, r3
    cab4:	4619      	mov	r1, r3
    cab6:	4618      	mov	r0, r3
    cab8:	f000 f874 	bl	cba4 <__assert_func>
    assert(rc == 0);
    cabc:	f7ff fb6e 	bl	c19c <hal_debugger_connected>
    cac0:	b100      	cbz	r0, cac4 <split_app_init+0x30>
    cac2:	be01      	bkpt	0x0001
    cac4:	2300      	movs	r3, #0
    cac6:	461a      	mov	r2, r3
    cac8:	4619      	mov	r1, r3
    caca:	4618      	mov	r0, r3
    cacc:	f000 f86a 	bl	cba4 <__assert_func>
    cad0:	20001e3c 	.word	0x20001e3c
    cad4:	0002d6b0 	.word	0x0002d6b0
    cad8:	2000014c 	.word	0x2000014c

0000cadc <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
    cadc:	4b01      	ldr	r3, [pc, #4]	; (cae4 <split_app_active_get+0x8>)
    cade:	f993 0000 	ldrsb.w	r0, [r3]
    cae2:	4770      	bx	lr
    cae4:	2000058a 	.word	0x2000058a

0000cae8 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
    cae8:	2803      	cmp	r0, #3
    caea:	d803      	bhi.n	caf4 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
    caec:	4b03      	ldr	r3, [pc, #12]	; (cafc <split_mode_set+0x14>)
    caee:	7018      	strb	r0, [r3, #0]
    return 0;
    caf0:	2000      	movs	r0, #0
    caf2:	4770      	bx	lr
        return SYS_EINVAL;
    caf4:	f06f 0001 	mvn.w	r0, #1
}
    caf8:	4770      	bx	lr
    cafa:	bf00      	nop
    cafc:	2000058b 	.word	0x2000058b

0000cb00 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
    cb00:	b508      	push	{r3, lr}
    int rc;

    rc = split_mode_set(split_mode);
    cb02:	f7ff fff1 	bl	cae8 <split_mode_set>
    if (rc != 0) {
    cb06:	b100      	cbz	r0, cb0a <split_write_split+0xa>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    cb08:	bd08      	pop	{r3, pc}
    rc = scfg_save_val(&split_scfg, &split_mode_cur);
    cb0a:	4902      	ldr	r1, [pc, #8]	; (cb14 <split_write_split+0x14>)
    cb0c:	4802      	ldr	r0, [pc, #8]	; (cb18 <split_write_split+0x18>)
    cb0e:	f005 fce9 	bl	124e4 <scfg_save_val>
    if (rc != 0) {
    cb12:	e7f9      	b.n	cb08 <split_write_split+0x8>
    cb14:	2000058b 	.word	0x2000058b
    cb18:	2000014c 	.word	0x2000014c

0000cb1c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    cb1c:	4a09      	ldr	r2, [pc, #36]	; (cb44 <NVIC_Relocate+0x28>)
    cb1e:	4b0a      	ldr	r3, [pc, #40]	; (cb48 <NVIC_Relocate+0x2c>)
    cb20:	429a      	cmp	r2, r3
    cb22:	d00a      	beq.n	cb3a <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    cb24:	2300      	movs	r3, #0
    cb26:	e006      	b.n	cb36 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    cb28:	4a07      	ldr	r2, [pc, #28]	; (cb48 <NVIC_Relocate+0x2c>)
    cb2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    cb2e:	4a05      	ldr	r2, [pc, #20]	; (cb44 <NVIC_Relocate+0x28>)
    cb30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    cb34:	3301      	adds	r3, #1
    cb36:	2b35      	cmp	r3, #53	; 0x35
    cb38:	ddf6      	ble.n	cb28 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    cb3a:	4a02      	ldr	r2, [pc, #8]	; (cb44 <NVIC_Relocate+0x28>)
    cb3c:	4b03      	ldr	r3, [pc, #12]	; (cb4c <NVIC_Relocate+0x30>)
    cb3e:	609a      	str	r2, [r3, #8]
#endif
}
    cb40:	4770      	bx	lr
    cb42:	bf00      	nop
    cb44:	20000000 	.word	0x20000000
    cb48:	0000c020 	.word	0x0000c020
    cb4c:	e000ed00 	.word	0xe000ed00

0000cb50 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
    cb50:	4b03      	ldr	r3, [pc, #12]	; (cb60 <_sbrkInit+0x10>)
    cb52:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
    cb54:	4b03      	ldr	r3, [pc, #12]	; (cb64 <_sbrkInit+0x14>)
    cb56:	6019      	str	r1, [r3, #0]
    brk = base;
    cb58:	4b03      	ldr	r3, [pc, #12]	; (cb68 <_sbrkInit+0x18>)
    cb5a:	6018      	str	r0, [r3, #0]
}
    cb5c:	4770      	bx	lr
    cb5e:	bf00      	nop
    cb60:	20000590 	.word	0x20000590
    cb64:	20000594 	.word	0x20000594
    cb68:	2000058c 	.word	0x2000058c

0000cb6c <_sbrk>:

void *
_sbrk(int incr)
{
    cb6c:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
    cb6e:	4a0a      	ldr	r2, [pc, #40]	; (cb98 <_sbrk+0x2c>)
    cb70:	6810      	ldr	r0, [r2, #0]
    cb72:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
    cb74:	4a09      	ldr	r2, [pc, #36]	; (cb9c <_sbrk+0x30>)
    cb76:	6812      	ldr	r2, [r2, #0]
    cb78:	429a      	cmp	r2, r3
    cb7a:	d806      	bhi.n	cb8a <_sbrk+0x1e>
    cb7c:	4a08      	ldr	r2, [pc, #32]	; (cba0 <_sbrk+0x34>)
    cb7e:	6812      	ldr	r2, [r2, #0]
    cb80:	429a      	cmp	r2, r3
    cb82:	d305      	bcc.n	cb90 <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
    cb84:	4a04      	ldr	r2, [pc, #16]	; (cb98 <_sbrk+0x2c>)
    cb86:	6013      	str	r3, [r2, #0]
    cb88:	4770      	bx	lr
        prev_brk = (char *)-1;
    cb8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cb8e:	4770      	bx	lr
    cb90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
    cb94:	4770      	bx	lr
    cb96:	bf00      	nop
    cb98:	2000058c 	.word	0x2000058c
    cb9c:	20000590 	.word	0x20000590
    cba0:	20000594 	.word	0x20000594

0000cba4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    cba4:	b508      	push	{r3, lr}
    cba6:	4675      	mov	r5, lr
    cba8:	4604      	mov	r4, r0
    cbaa:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    cbac:	f001 fccc 	bl	e548 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    cbb0:	f003 fbbe 	bl	10330 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    cbb4:	b16c      	cbz	r4, cbd2 <__assert_func+0x2e>
    cbb6:	4633      	mov	r3, r6
    cbb8:	4622      	mov	r2, r4
    cbba:	4629      	mov	r1, r5
    cbbc:	4807      	ldr	r0, [pc, #28]	; (cbdc <__assert_func+0x38>)
    cbbe:	f003 fcd1 	bl	10564 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    cbc2:	4b07      	ldr	r3, [pc, #28]	; (cbe0 <__assert_func+0x3c>)
    cbc4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cbc8:	605a      	str	r2, [r3, #4]
    asm("isb");
    cbca:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    cbce:	f7ff faed 	bl	c1ac <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    cbd2:	4629      	mov	r1, r5
    cbd4:	4803      	ldr	r0, [pc, #12]	; (cbe4 <__assert_func+0x40>)
    cbd6:	f003 fcc5 	bl	10564 <console_printf>
    cbda:	e7f2      	b.n	cbc2 <__assert_func+0x1e>
    cbdc:	0002d6f0 	.word	0x0002d6f0
    cbe0:	e000ed00 	.word	0xe000ed00
    cbe4:	0002d6e0 	.word	0x0002d6e0

0000cbe8 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    cbe8:	b500      	push	{lr}
    cbea:	b083      	sub	sp, #12
    cbec:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    cbee:	f003 fb9f 	bl	10330 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    cbf2:	4d1b      	ldr	r5, [pc, #108]	; (cc60 <os_default_irq+0x78>)
    cbf4:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    cbf6:	6822      	ldr	r2, [r4, #0]
    cbf8:	f3c1 0108 	ubfx	r1, r1, #0, #9
    cbfc:	4819      	ldr	r0, [pc, #100]	; (cc64 <os_default_irq+0x7c>)
    cbfe:	f003 fcb1 	bl	10564 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    cc02:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    cc04:	6883      	ldr	r3, [r0, #8]
    cc06:	6842      	ldr	r2, [r0, #4]
    cc08:	6801      	ldr	r1, [r0, #0]
    cc0a:	68c0      	ldr	r0, [r0, #12]
    cc0c:	9000      	str	r0, [sp, #0]
    cc0e:	4816      	ldr	r0, [pc, #88]	; (cc68 <os_default_irq+0x80>)
    cc10:	f003 fca8 	bl	10564 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    cc14:	6923      	ldr	r3, [r4, #16]
    cc16:	9300      	str	r3, [sp, #0]
    cc18:	68e3      	ldr	r3, [r4, #12]
    cc1a:	68a2      	ldr	r2, [r4, #8]
    cc1c:	6861      	ldr	r1, [r4, #4]
    cc1e:	4813      	ldr	r0, [pc, #76]	; (cc6c <os_default_irq+0x84>)
    cc20:	f003 fca0 	bl	10564 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    cc24:	6a23      	ldr	r3, [r4, #32]
    cc26:	9300      	str	r3, [sp, #0]
    cc28:	69e3      	ldr	r3, [r4, #28]
    cc2a:	69a2      	ldr	r2, [r4, #24]
    cc2c:	6961      	ldr	r1, [r4, #20]
    cc2e:	4810      	ldr	r0, [pc, #64]	; (cc70 <os_default_irq+0x88>)
    cc30:	f003 fc98 	bl	10564 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    cc34:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    cc36:	6983      	ldr	r3, [r0, #24]
    cc38:	6942      	ldr	r2, [r0, #20]
    cc3a:	6901      	ldr	r1, [r0, #16]
    cc3c:	69c0      	ldr	r0, [r0, #28]
    cc3e:	9000      	str	r0, [sp, #0]
    cc40:	480c      	ldr	r0, [pc, #48]	; (cc74 <os_default_irq+0x8c>)
    cc42:	f003 fc8f 	bl	10564 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    cc46:	6869      	ldr	r1, [r5, #4]
    cc48:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    cc4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cc4c:	480a      	ldr	r0, [pc, #40]	; (cc78 <os_default_irq+0x90>)
    cc4e:	f003 fc89 	bl	10564 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    cc52:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    cc54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    cc56:	4809      	ldr	r0, [pc, #36]	; (cc7c <os_default_irq+0x94>)
    cc58:	f003 fc84 	bl	10564 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    cc5c:	f7ff faa6 	bl	c1ac <hal_system_reset>
    cc60:	e000ed00 	.word	0xe000ed00
    cc64:	0002d708 	.word	0x0002d708
    cc68:	0002d73c 	.word	0x0002d73c
    cc6c:	0002d770 	.word	0x0002d770
    cc70:	0002d7a4 	.word	0x0002d7a4
    cc74:	0002d7d8 	.word	0x0002d7d8
    cc78:	0002d80c 	.word	0x0002d80c
    cc7c:	0002d834 	.word	0x0002d834

0000cc80 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    cc82:	f01d fc2f 	bl	2a4e4 <hal_watchdog_tickle>
    sanity_last = 0;
    cc86:	2600      	movs	r6, #0
    cc88:	e00e      	b.n	cca8 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    cc8a:	f001 f8fd 	bl	de88 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    cc8e:	f01d fc29 	bl	2a4e4 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    cc92:	4626      	mov	r6, r4
    cc94:	e014      	b.n	ccc0 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    cc96:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
    cc9a:	e025      	b.n	cce8 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    cc9c:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    cc9e:	f01d fb11 	bl	2a2c4 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    cca2:	4628      	mov	r0, r5
    cca4:	f001 fc56 	bl	e554 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    cca8:	4a15      	ldr	r2, [pc, #84]	; (cd00 <os_idle_task+0x80>)
    ccaa:	6813      	ldr	r3, [r2, #0]
    ccac:	3301      	adds	r3, #1
    ccae:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    ccb0:	f001 fb84 	bl	e3bc <os_time_get>
    ccb4:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    ccb6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    ccba:	1ac3      	subs	r3, r0, r3
    ccbc:	2b00      	cmp	r3, #0
    ccbe:	dae4      	bge.n	cc8a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    ccc0:	f001 fc42 	bl	e548 <os_arch_save_sr>
    ccc4:	4605      	mov	r5, r0
        now = os_time_get();
    ccc6:	f001 fb79 	bl	e3bc <os_time_get>
    ccca:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    cccc:	f001 fa1e 	bl	e10c <os_sched_wakeup_ticks>
    ccd0:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    ccd2:	4638      	mov	r0, r7
    ccd4:	f000 f9ae 	bl	d034 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    ccd8:	4284      	cmp	r4, r0
    ccda:	bf28      	it	cs
    ccdc:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    ccde:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    cce2:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
    cce4:	2800      	cmp	r0, #0
    cce6:	ddd6      	ble.n	cc96 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    cce8:	42a0      	cmp	r0, r4
    ccea:	bf28      	it	cs
    ccec:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    ccee:	280b      	cmp	r0, #11
    ccf0:	d9d4      	bls.n	cc9c <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    ccf2:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    ccf6:	d9d2      	bls.n	cc9e <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    ccf8:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    ccfc:	e7cf      	b.n	cc9e <os_idle_task+0x1e>
    ccfe:	bf00      	nop
    cd00:	200006e8 	.word	0x200006e8

0000cd04 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    cd04:	b508      	push	{r3, lr}
    cd06:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    cd08:	2100      	movs	r1, #0
    cd0a:	4608      	mov	r0, r1
    cd0c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    cd0e:	f7ff fa45 	bl	c19c <hal_debugger_connected>
    cd12:	b100      	cbz	r0, cd16 <os_main+0x12>
    cd14:	be01      	bkpt	0x0001
    cd16:	2300      	movs	r3, #0
    cd18:	461a      	mov	r2, r3
    cd1a:	4619      	mov	r1, r3
    cd1c:	4618      	mov	r0, r3
    cd1e:	f7ff ff41 	bl	cba4 <__assert_func>
	...

0000cd24 <os_started>:
}
    cd24:	4b01      	ldr	r3, [pc, #4]	; (cd2c <os_started+0x8>)
    cd26:	6818      	ldr	r0, [r3, #0]
    cd28:	4770      	bx	lr
    cd2a:	bf00      	nop
    cd2c:	20000f40 	.word	0x20000f40

0000cd30 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    cd30:	b500      	push	{lr}
    cd32:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    cd34:	2340      	movs	r3, #64	; 0x40
    cd36:	9303      	str	r3, [sp, #12]
    cd38:	4b1b      	ldr	r3, [pc, #108]	; (cda8 <os_init_idle_task+0x78>)
    cd3a:	9302      	str	r3, [sp, #8]
    cd3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd40:	9301      	str	r3, [sp, #4]
    cd42:	23ff      	movs	r3, #255	; 0xff
    cd44:	9300      	str	r3, [sp, #0]
    cd46:	2300      	movs	r3, #0
    cd48:	4a18      	ldr	r2, [pc, #96]	; (cdac <os_init_idle_task+0x7c>)
    cd4a:	4919      	ldr	r1, [pc, #100]	; (cdb0 <os_init_idle_task+0x80>)
    cd4c:	4819      	ldr	r0, [pc, #100]	; (cdb4 <os_init_idle_task+0x84>)
    cd4e:	f001 fa41 	bl	e1d4 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    cd52:	b950      	cbnz	r0, cd6a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    cd54:	f001 f8da 	bl	df0c <os_sanity_init>
    assert(rc == 0);
    cd58:	b988      	cbnz	r0, cd7e <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    cd5a:	f247 5030 	movw	r0, #30000	; 0x7530
    cd5e:	f01d fb79 	bl	2a454 <hal_watchdog_init>
    assert(rc == 0);
    cd62:	b9b0      	cbnz	r0, cd92 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    cd64:	b005      	add	sp, #20
    cd66:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    cd6a:	f7ff fa17 	bl	c19c <hal_debugger_connected>
    cd6e:	b100      	cbz	r0, cd72 <os_init_idle_task+0x42>
    cd70:	be01      	bkpt	0x0001
    cd72:	2300      	movs	r3, #0
    cd74:	461a      	mov	r2, r3
    cd76:	4619      	mov	r1, r3
    cd78:	4618      	mov	r0, r3
    cd7a:	f7ff ff13 	bl	cba4 <__assert_func>
    assert(rc == 0);
    cd7e:	f7ff fa0d 	bl	c19c <hal_debugger_connected>
    cd82:	b100      	cbz	r0, cd86 <os_init_idle_task+0x56>
    cd84:	be01      	bkpt	0x0001
    cd86:	2300      	movs	r3, #0
    cd88:	461a      	mov	r2, r3
    cd8a:	4619      	mov	r1, r3
    cd8c:	4618      	mov	r0, r3
    cd8e:	f7ff ff09 	bl	cba4 <__assert_func>
    assert(rc == 0);
    cd92:	f7ff fa03 	bl	c19c <hal_debugger_connected>
    cd96:	b100      	cbz	r0, cd9a <os_init_idle_task+0x6a>
    cd98:	be01      	bkpt	0x0001
    cd9a:	2300      	movs	r3, #0
    cd9c:	461a      	mov	r2, r3
    cd9e:	4619      	mov	r1, r3
    cda0:	4618      	mov	r0, r3
    cda2:	f7ff feff 	bl	cba4 <__assert_func>
    cda6:	bf00      	nop
    cda8:	200005e8 	.word	0x200005e8
    cdac:	0000cc81 	.word	0x0000cc81
    cdb0:	0002d850 	.word	0x0002d850
    cdb4:	20000598 	.word	0x20000598

0000cdb8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    cdb8:	b510      	push	{r4, lr}
    cdba:	b084      	sub	sp, #16
    cdbc:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    cdbe:	4b2e      	ldr	r3, [pc, #184]	; (ce78 <os_init+0xc0>)
    cdc0:	2200      	movs	r2, #0
    cdc2:	601a      	str	r2, [r3, #0]
    cdc4:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    cdc6:	4b2d      	ldr	r3, [pc, #180]	; (ce7c <os_init+0xc4>)
    cdc8:	601a      	str	r2, [r3, #0]
    cdca:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    cdcc:	f000 fad6 	bl	d37c <os_eventq_dflt_get>
    cdd0:	f000 fa0e 	bl	d1f0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    cdd4:	f000 fa04 	bl	d1e0 <os_dev_reset>

    err = os_arch_os_init();
    cdd8:	f001 fbf2 	bl	e5c0 <os_arch_os_init>
    assert(err == OS_OK);
    cddc:	bb18      	cbnz	r0, ce26 <os_init+0x6e>

    if (main_fn) {
    cdde:	b194      	cbz	r4, ce06 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    cde0:	f44f 7300 	mov.w	r3, #512	; 0x200
    cde4:	9303      	str	r3, [sp, #12]
    cde6:	4b26      	ldr	r3, [pc, #152]	; (ce80 <os_init+0xc8>)
    cde8:	9302      	str	r3, [sp, #8]
    cdea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdee:	9301      	str	r3, [sp, #4]
    cdf0:	237f      	movs	r3, #127	; 0x7f
    cdf2:	9300      	str	r3, [sp, #0]
    cdf4:	4623      	mov	r3, r4
    cdf6:	4a23      	ldr	r2, [pc, #140]	; (ce84 <os_init+0xcc>)
    cdf8:	4923      	ldr	r1, [pc, #140]	; (ce88 <os_init+0xd0>)
    cdfa:	4824      	ldr	r0, [pc, #144]	; (ce8c <os_init+0xd4>)
    cdfc:	f001 f9ea 	bl	e1d4 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    ce00:	f010 0fff 	tst.w	r0, #255	; 0xff
    ce04:	d119      	bne.n	ce3a <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    ce06:	f01c ffb5 	bl	29d74 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    ce0a:	2001      	movs	r0, #1
    ce0c:	f000 f9a0 	bl	d150 <os_dev_initialize_all>
    assert(err == OS_OK);
    ce10:	f010 0fff 	tst.w	r0, #255	; 0xff
    ce14:	d11b      	bne.n	ce4e <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    ce16:	2002      	movs	r0, #2
    ce18:	f000 f99a 	bl	d150 <os_dev_initialize_all>
    assert(err == OS_OK);
    ce1c:	f010 0fff 	tst.w	r0, #255	; 0xff
    ce20:	d11f      	bne.n	ce62 <os_init+0xaa>
}
    ce22:	b004      	add	sp, #16
    ce24:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    ce26:	f7ff f9b9 	bl	c19c <hal_debugger_connected>
    ce2a:	b100      	cbz	r0, ce2e <os_init+0x76>
    ce2c:	be01      	bkpt	0x0001
    ce2e:	2300      	movs	r3, #0
    ce30:	461a      	mov	r2, r3
    ce32:	4619      	mov	r1, r3
    ce34:	4618      	mov	r0, r3
    ce36:	f7ff feb5 	bl	cba4 <__assert_func>
        assert(err == 0);
    ce3a:	f7ff f9af 	bl	c19c <hal_debugger_connected>
    ce3e:	b100      	cbz	r0, ce42 <os_init+0x8a>
    ce40:	be01      	bkpt	0x0001
    ce42:	2300      	movs	r3, #0
    ce44:	461a      	mov	r2, r3
    ce46:	4619      	mov	r1, r3
    ce48:	4618      	mov	r0, r3
    ce4a:	f7ff feab 	bl	cba4 <__assert_func>
    assert(err == OS_OK);
    ce4e:	f7ff f9a5 	bl	c19c <hal_debugger_connected>
    ce52:	b100      	cbz	r0, ce56 <os_init+0x9e>
    ce54:	be01      	bkpt	0x0001
    ce56:	2300      	movs	r3, #0
    ce58:	461a      	mov	r2, r3
    ce5a:	4619      	mov	r1, r3
    ce5c:	4618      	mov	r0, r3
    ce5e:	f7ff fea1 	bl	cba4 <__assert_func>
    assert(err == OS_OK);
    ce62:	f7ff f99b 	bl	c19c <hal_debugger_connected>
    ce66:	b100      	cbz	r0, ce6a <os_init+0xb2>
    ce68:	be01      	bkpt	0x0001
    ce6a:	2300      	movs	r3, #0
    ce6c:	461a      	mov	r2, r3
    ce6e:	4619      	mov	r1, r3
    ce70:	4618      	mov	r0, r3
    ce72:	f7ff fe97 	bl	cba4 <__assert_func>
    ce76:	bf00      	nop
    ce78:	20000f44 	.word	0x20000f44
    ce7c:	2000194c 	.word	0x2000194c
    ce80:	200006f0 	.word	0x200006f0
    ce84:	0000cd05 	.word	0x0000cd05
    ce88:	0002d858 	.word	0x0002d858
    ce8c:	20000ef0 	.word	0x20000ef0

0000ce90 <os_start>:

void
os_start(void)
{
    ce90:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    ce92:	f01d fb1f 	bl	2a4d4 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    ce96:	f001 fbf3 	bl	e680 <os_arch_os_start>
    assert(err == OS_OK);
    ce9a:	b900      	cbnz	r0, ce9e <os_start+0xe>
#else
    assert(0);
#endif
}
    ce9c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    ce9e:	f7ff f97d 	bl	c19c <hal_debugger_connected>
    cea2:	b100      	cbz	r0, cea6 <os_start+0x16>
    cea4:	be01      	bkpt	0x0001
    cea6:	2300      	movs	r3, #0
    cea8:	461a      	mov	r2, r3
    ceaa:	4619      	mov	r1, r3
    ceac:	4618      	mov	r0, r3
    ceae:	f7ff fe79 	bl	cba4 <__assert_func>
	...

0000ceb4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    ceb4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ceb6:	4b11      	ldr	r3, [pc, #68]	; (cefc <os_pkg_init+0x48>)
    ceb8:	781b      	ldrb	r3, [r3, #0]
    ceba:	b153      	cbz	r3, ced2 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    cebc:	2003      	movs	r0, #3
    cebe:	f000 f947 	bl	d150 <os_dev_initialize_all>
    assert(err == OS_OK);
    cec2:	f010 0fff 	tst.w	r0, #255	; 0xff
    cec6:	d10e      	bne.n	cee6 <os_pkg_init+0x32>

    os_mempool_module_init();
    cec8:	f000 feee 	bl	dca8 <os_mempool_module_init>
    os_msys_init();
    cecc:	f000 ff8c 	bl	dde8 <os_msys_init>
}
    ced0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    ced2:	f7ff f963 	bl	c19c <hal_debugger_connected>
    ced6:	b100      	cbz	r0, ceda <os_pkg_init+0x26>
    ced8:	be01      	bkpt	0x0001
    ceda:	2300      	movs	r3, #0
    cedc:	461a      	mov	r2, r3
    cede:	4619      	mov	r1, r3
    cee0:	4618      	mov	r0, r3
    cee2:	f7ff fe5f 	bl	cba4 <__assert_func>
    assert(err == OS_OK);
    cee6:	f7ff f959 	bl	c19c <hal_debugger_connected>
    ceea:	b100      	cbz	r0, ceee <os_pkg_init+0x3a>
    ceec:	be01      	bkpt	0x0001
    ceee:	2300      	movs	r3, #0
    cef0:	461a      	mov	r2, r3
    cef2:	4619      	mov	r1, r3
    cef4:	4618      	mov	r0, r3
    cef6:	f7ff fe55 	bl	cba4 <__assert_func>
    cefa:	bf00      	nop
    cefc:	20001e3c 	.word	0x20001e3c

0000cf00 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    cf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf02:	4604      	mov	r4, r0
    cf04:	460d      	mov	r5, r1
    cf06:	4617      	mov	r7, r2
    cf08:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    cf0a:	2220      	movs	r2, #32
    cf0c:	2100      	movs	r1, #0
    cf0e:	f001 fd78 	bl	ea02 <memset>
    c->c_ev.ev_cb = ev_cb;
    cf12:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    cf14:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    cf16:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    cf18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000cf1c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    cf1c:	b538      	push	{r3, r4, r5, lr}
    cf1e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    cf20:	f001 fb12 	bl	e548 <os_arch_save_sr>
    cf24:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    cf26:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    cf28:	b13b      	cbz	r3, cf3a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    cf2a:	69a2      	ldr	r2, [r4, #24]
    cf2c:	b172      	cbz	r2, cf4c <os_callout_stop+0x30>
    cf2e:	61d3      	str	r3, [r2, #28]
    cf30:	69e3      	ldr	r3, [r4, #28]
    cf32:	69a2      	ldr	r2, [r4, #24]
    cf34:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    cf36:	2300      	movs	r3, #0
    cf38:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    cf3a:	6920      	ldr	r0, [r4, #16]
    cf3c:	b110      	cbz	r0, cf44 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    cf3e:	4621      	mov	r1, r4
    cf40:	f000 f9fa 	bl	d338 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    cf44:	4628      	mov	r0, r5
    cf46:	f001 fb05 	bl	e554 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    cf4a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    cf4c:	4a01      	ldr	r2, [pc, #4]	; (cf54 <os_callout_stop+0x38>)
    cf4e:	6053      	str	r3, [r2, #4]
    cf50:	e7ee      	b.n	cf30 <os_callout_stop+0x14>
    cf52:	bf00      	nop
    cf54:	20000f44 	.word	0x20000f44

0000cf58 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    cf58:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    cf5a:	6903      	ldr	r3, [r0, #16]
    cf5c:	b1c3      	cbz	r3, cf90 <os_callout_reset+0x38>
    cf5e:	4604      	mov	r4, r0
    cf60:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    cf62:	2900      	cmp	r1, #0
    cf64:	db34      	blt.n	cfd0 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    cf66:	f001 faef 	bl	e548 <os_arch_save_sr>
    cf6a:	4605      	mov	r5, r0

    os_callout_stop(c);
    cf6c:	4620      	mov	r0, r4
    cf6e:	f7ff ffd5 	bl	cf1c <os_callout_stop>

    if (ticks == 0) {
    cf72:	b906      	cbnz	r6, cf76 <os_callout_reset+0x1e>
        ticks = 1;
    cf74:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
    cf76:	f001 fa21 	bl	e3bc <os_time_get>
    cf7a:	4430      	add	r0, r6
    cf7c:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cf7e:	4b15      	ldr	r3, [pc, #84]	; (cfd4 <os_callout_reset+0x7c>)
    cf80:	681b      	ldr	r3, [r3, #0]
    cf82:	b17b      	cbz	r3, cfa4 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    cf84:	695a      	ldr	r2, [r3, #20]
    cf86:	1a82      	subs	r2, r0, r2
    cf88:	2a00      	cmp	r2, #0
    cf8a:	db0b      	blt.n	cfa4 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cf8c:	699b      	ldr	r3, [r3, #24]
    cf8e:	e7f8      	b.n	cf82 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
    cf90:	f7ff f904 	bl	c19c <hal_debugger_connected>
    cf94:	b100      	cbz	r0, cf98 <os_callout_reset+0x40>
    cf96:	be01      	bkpt	0x0001
    cf98:	2300      	movs	r3, #0
    cf9a:	461a      	mov	r2, r3
    cf9c:	4619      	mov	r1, r3
    cf9e:	4618      	mov	r0, r3
    cfa0:	f7ff fe00 	bl	cba4 <__assert_func>
            break;
        }
    }

    if (entry) {
    cfa4:	b15b      	cbz	r3, cfbe <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    cfa6:	69da      	ldr	r2, [r3, #28]
    cfa8:	61e2      	str	r2, [r4, #28]
    cfaa:	61a3      	str	r3, [r4, #24]
    cfac:	69da      	ldr	r2, [r3, #28]
    cfae:	6014      	str	r4, [r2, #0]
    cfb0:	3418      	adds	r4, #24
    cfb2:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    cfb4:	4628      	mov	r0, r5
    cfb6:	f001 facd 	bl	e554 <os_arch_restore_sr>

    ret = OS_OK;
    cfba:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    cfbc:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    cfbe:	2300      	movs	r3, #0
    cfc0:	61a3      	str	r3, [r4, #24]
    cfc2:	4b04      	ldr	r3, [pc, #16]	; (cfd4 <os_callout_reset+0x7c>)
    cfc4:	685a      	ldr	r2, [r3, #4]
    cfc6:	61e2      	str	r2, [r4, #28]
    cfc8:	6014      	str	r4, [r2, #0]
    cfca:	3418      	adds	r4, #24
    cfcc:	605c      	str	r4, [r3, #4]
    cfce:	e7f1      	b.n	cfb4 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
    cfd0:	2002      	movs	r0, #2
    return ret;
    cfd2:	e7f3      	b.n	cfbc <os_callout_reset+0x64>
    cfd4:	20000f44 	.word	0x20000f44

0000cfd8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    cfd8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    cfda:	f001 f9ef 	bl	e3bc <os_time_get>
    cfde:	4605      	mov	r5, r0
    cfe0:	e00f      	b.n	d002 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    cfe2:	69e2      	ldr	r2, [r4, #28]
    cfe4:	4b12      	ldr	r3, [pc, #72]	; (d030 <os_callout_tick+0x58>)
    cfe6:	605a      	str	r2, [r3, #4]
    cfe8:	69e3      	ldr	r3, [r4, #28]
    cfea:	69a2      	ldr	r2, [r4, #24]
    cfec:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    cfee:	2300      	movs	r3, #0
    cff0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    cff2:	f001 faaf 	bl	e554 <os_arch_restore_sr>

        if (c) {
    cff6:	b1d4      	cbz	r4, d02e <os_callout_tick+0x56>
            if (c->c_evq) {
    cff8:	6920      	ldr	r0, [r4, #16]
    cffa:	b1a0      	cbz	r0, d026 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    cffc:	4621      	mov	r1, r4
    cffe:	f000 f904 	bl	d20a <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    d002:	f001 faa1 	bl	e548 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    d006:	4b0a      	ldr	r3, [pc, #40]	; (d030 <os_callout_tick+0x58>)
    d008:	681c      	ldr	r4, [r3, #0]
        if (c) {
    d00a:	2c00      	cmp	r4, #0
    d00c:	d0f1      	beq.n	cff2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    d00e:	6963      	ldr	r3, [r4, #20]
    d010:	1aeb      	subs	r3, r5, r3
    d012:	2b00      	cmp	r3, #0
    d014:	db05      	blt.n	d022 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    d016:	69a3      	ldr	r3, [r4, #24]
    d018:	2b00      	cmp	r3, #0
    d01a:	d0e2      	beq.n	cfe2 <os_callout_tick+0xa>
    d01c:	69e2      	ldr	r2, [r4, #28]
    d01e:	61da      	str	r2, [r3, #28]
    d020:	e7e2      	b.n	cfe8 <os_callout_tick+0x10>
                c = NULL;
    d022:	2400      	movs	r4, #0
    d024:	e7e5      	b.n	cff2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    d026:	6863      	ldr	r3, [r4, #4]
    d028:	4620      	mov	r0, r4
    d02a:	4798      	blx	r3
    d02c:	e7e9      	b.n	d002 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    d02e:	bd38      	pop	{r3, r4, r5, pc}
    d030:	20000f44 	.word	0x20000f44

0000d034 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    d034:	b510      	push	{r4, lr}
    d036:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    d038:	f001 fa8f 	bl	e55a <os_arch_in_critical>
    d03c:	b130      	cbz	r0, d04c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    d03e:	4b0b      	ldr	r3, [pc, #44]	; (d06c <os_callout_wakeup_ticks+0x38>)
    d040:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    d042:	b17b      	cbz	r3, d064 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    d044:	6958      	ldr	r0, [r3, #20]
    d046:	1b00      	subs	r0, r0, r4
    d048:	d40a      	bmi.n	d060 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    d04a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    d04c:	f7ff f8a6 	bl	c19c <hal_debugger_connected>
    d050:	b100      	cbz	r0, d054 <os_callout_wakeup_ticks+0x20>
    d052:	be01      	bkpt	0x0001
    d054:	2300      	movs	r3, #0
    d056:	461a      	mov	r2, r3
    d058:	4619      	mov	r1, r3
    d05a:	4618      	mov	r0, r3
    d05c:	f7ff fda2 	bl	cba4 <__assert_func>
            rt = 0;     /* callout time is in the past */
    d060:	2000      	movs	r0, #0
    d062:	e7f2      	b.n	d04a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    d064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    d068:	e7ef      	b.n	d04a <os_callout_wakeup_ticks+0x16>
    d06a:	bf00      	nop
    d06c:	20000f44 	.word	0x20000f44

0000d070 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    d070:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    d072:	4b16      	ldr	r3, [pc, #88]	; (d0cc <os_dev_add+0x5c>)
    d074:	681d      	ldr	r5, [r3, #0]
    d076:	b115      	cbz	r5, d07e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    d078:	462b      	mov	r3, r5
    prev_dev = NULL;
    d07a:	2400      	movs	r4, #0
    d07c:	e008      	b.n	d090 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    d07e:	4603      	mov	r3, r0
    d080:	f843 5f20 	str.w	r5, [r3, #32]!
    d084:	4a11      	ldr	r2, [pc, #68]	; (d0cc <os_dev_add+0x5c>)
    d086:	6053      	str	r3, [r2, #4]
    d088:	6010      	str	r0, [r2, #0]
        return (0);
    d08a:	e012      	b.n	d0b2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    d08c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    d08e:	6a1b      	ldr	r3, [r3, #32]
    d090:	b153      	cbz	r3, d0a8 <os_dev_add+0x38>
        if (dev == cur_dev) {
    d092:	4283      	cmp	r3, r0
    d094:	d00d      	beq.n	d0b2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    d096:	7e01      	ldrb	r1, [r0, #24]
    d098:	7e1a      	ldrb	r2, [r3, #24]
    d09a:	4291      	cmp	r1, r2
    d09c:	d304      	bcc.n	d0a8 <os_dev_add+0x38>
    d09e:	d1f5      	bne.n	d08c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    d0a0:	7e41      	ldrb	r1, [r0, #25]
    d0a2:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    d0a4:	4291      	cmp	r1, r2
    d0a6:	d2f1      	bcs.n	d08c <os_dev_add+0x1c>
    }

    if (prev_dev) {
    d0a8:	b15c      	cbz	r4, d0c2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    d0aa:	6a23      	ldr	r3, [r4, #32]
    d0ac:	6203      	str	r3, [r0, #32]
    d0ae:	b11b      	cbz	r3, d0b8 <os_dev_add+0x48>
    d0b0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    d0b2:	2000      	movs	r0, #0
    d0b4:	bc30      	pop	{r4, r5}
    d0b6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    d0b8:	f100 0320 	add.w	r3, r0, #32
    d0bc:	4a03      	ldr	r2, [pc, #12]	; (d0cc <os_dev_add+0x5c>)
    d0be:	6053      	str	r3, [r2, #4]
    d0c0:	e7f6      	b.n	d0b0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    d0c2:	6205      	str	r5, [r0, #32]
    d0c4:	4b01      	ldr	r3, [pc, #4]	; (d0cc <os_dev_add+0x5c>)
    d0c6:	6018      	str	r0, [r3, #0]
    d0c8:	e7f3      	b.n	d0b2 <os_dev_add+0x42>
    d0ca:	bf00      	nop
    d0cc:	20000f4c 	.word	0x20000f4c

0000d0d0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    d0d0:	b510      	push	{r4, lr}
    d0d2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    d0d4:	6903      	ldr	r3, [r0, #16]
    d0d6:	6941      	ldr	r1, [r0, #20]
    d0d8:	4798      	blx	r3
    if (rc != 0) {
    d0da:	b128      	cbz	r0, d0e8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    d0dc:	7ee3      	ldrb	r3, [r4, #27]
    d0de:	f013 0f08 	tst.w	r3, #8
    d0e2:	d105      	bne.n	d0f0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    d0e4:	2000      	movs	r0, #0
    d0e6:	e003      	b.n	d0f0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    d0e8:	7ee3      	ldrb	r3, [r4, #27]
    d0ea:	f043 0301 	orr.w	r3, r3, #1
    d0ee:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    d0f0:	bd10      	pop	{r4, pc}

0000d0f2 <os_dev_init>:
{
    d0f2:	b410      	push	{r4}
    d0f4:	4604      	mov	r4, r0
    dev->od_name = name;
    d0f6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    d0f8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    d0fa:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    d0fc:	2000      	movs	r0, #0
    d0fe:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
    d100:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
    d102:	9b01      	ldr	r3, [sp, #4]
    d104:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
    d106:	9b02      	ldr	r3, [sp, #8]
    d108:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    d10a:	6020      	str	r0, [r4, #0]
    d10c:	6060      	str	r0, [r4, #4]
    d10e:	60a0      	str	r0, [r4, #8]
    d110:	60e0      	str	r0, [r4, #12]
}
    d112:	bc10      	pop	{r4}
    d114:	4770      	bx	lr
	...

0000d118 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    d118:	b530      	push	{r4, r5, lr}
    d11a:	b083      	sub	sp, #12
    d11c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    d11e:	9d07      	ldr	r5, [sp, #28]
    d120:	9501      	str	r5, [sp, #4]
    d122:	9d06      	ldr	r5, [sp, #24]
    d124:	9500      	str	r5, [sp, #0]
    d126:	f7ff ffe4 	bl	d0f2 <os_dev_init>
    if (rc != 0) {
    d12a:	b108      	cbz	r0, d130 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    d12c:	b003      	add	sp, #12
    d12e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    d130:	4620      	mov	r0, r4
    d132:	f7ff ff9d 	bl	d070 <os_dev_add>
    if (rc != 0) {
    d136:	2800      	cmp	r0, #0
    d138:	d1f8      	bne.n	d12c <os_dev_create+0x14>
    if (g_os_started) {
    d13a:	4b04      	ldr	r3, [pc, #16]	; (d14c <os_dev_create+0x34>)
    d13c:	681b      	ldr	r3, [r3, #0]
    d13e:	2b00      	cmp	r3, #0
    d140:	d0f4      	beq.n	d12c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    d142:	4620      	mov	r0, r4
    d144:	f7ff ffc4 	bl	d0d0 <os_dev_initialize>
    return (rc);
    d148:	e7f0      	b.n	d12c <os_dev_create+0x14>
    d14a:	bf00      	nop
    d14c:	20000f40 	.word	0x20000f40

0000d150 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    d150:	b538      	push	{r3, r4, r5, lr}
    d152:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d154:	4b08      	ldr	r3, [pc, #32]	; (d178 <os_dev_initialize_all+0x28>)
    d156:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    d158:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d15a:	e000      	b.n	d15e <os_dev_initialize_all+0xe>
    d15c:	6a24      	ldr	r4, [r4, #32]
    d15e:	b144      	cbz	r4, d172 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    d160:	7e23      	ldrb	r3, [r4, #24]
    d162:	42ab      	cmp	r3, r5
    d164:	d1fa      	bne.n	d15c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    d166:	4620      	mov	r0, r4
    d168:	f7ff ffb2 	bl	d0d0 <os_dev_initialize>
            if (rc) {
    d16c:	4602      	mov	r2, r0
    d16e:	2800      	cmp	r0, #0
    d170:	d0f4      	beq.n	d15c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    d172:	4610      	mov	r0, r2
    d174:	bd38      	pop	{r3, r4, r5, pc}
    d176:	bf00      	nop
    d178:	20000f4c 	.word	0x20000f4c

0000d17c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    d17c:	b538      	push	{r3, r4, r5, lr}
    d17e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d180:	4b05      	ldr	r3, [pc, #20]	; (d198 <os_dev_lookup+0x1c>)
    d182:	681c      	ldr	r4, [r3, #0]
    d184:	b134      	cbz	r4, d194 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
    d186:	4629      	mov	r1, r5
    d188:	69e0      	ldr	r0, [r4, #28]
    d18a:	f001 fc56 	bl	ea3a <strcmp>
    d18e:	b108      	cbz	r0, d194 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d190:	6a24      	ldr	r4, [r4, #32]
    d192:	e7f7      	b.n	d184 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
    d194:	4620      	mov	r0, r4
    d196:	bd38      	pop	{r3, r4, r5, pc}
    d198:	20000f4c 	.word	0x20000f4c

0000d19c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    d19c:	b570      	push	{r4, r5, r6, lr}
    d19e:	460d      	mov	r5, r1
    d1a0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    d1a2:	f7ff ffeb 	bl	d17c <os_dev_lookup>
    if (dev == NULL) {
    d1a6:	4604      	mov	r4, r0
    d1a8:	b1a0      	cbz	r0, d1d4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    d1aa:	7ec3      	ldrb	r3, [r0, #27]
    d1ac:	f013 0f01 	tst.w	r3, #1
    d1b0:	d012      	beq.n	d1d8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    d1b2:	6803      	ldr	r3, [r0, #0]
    d1b4:	b11b      	cbz	r3, d1be <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    d1b6:	4632      	mov	r2, r6
    d1b8:	4629      	mov	r1, r5
    d1ba:	4798      	blx	r3
        if (rc != 0) {
    d1bc:	b970      	cbnz	r0, d1dc <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    d1be:	f001 f9c3 	bl	e548 <os_arch_save_sr>
    ++dev->od_open_ref;
    d1c2:	7ea3      	ldrb	r3, [r4, #26]
    d1c4:	3301      	adds	r3, #1
    d1c6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    d1c8:	7ee3      	ldrb	r3, [r4, #27]
    d1ca:	f043 0302 	orr.w	r3, r3, #2
    d1ce:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    d1d0:	f001 f9c0 	bl	e554 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    d1d4:	4620      	mov	r0, r4
    d1d6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    d1d8:	2400      	movs	r4, #0
    d1da:	e7fb      	b.n	d1d4 <os_dev_open+0x38>
    return (NULL);
    d1dc:	2400      	movs	r4, #0
    d1de:	e7f9      	b.n	d1d4 <os_dev_open+0x38>

0000d1e0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    d1e0:	4b02      	ldr	r3, [pc, #8]	; (d1ec <os_dev_reset+0xc>)
    d1e2:	2200      	movs	r2, #0
    d1e4:	601a      	str	r2, [r3, #0]
    d1e6:	605b      	str	r3, [r3, #4]
}
    d1e8:	4770      	bx	lr
    d1ea:	bf00      	nop
    d1ec:	20000f4c 	.word	0x20000f4c

0000d1f0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    d1f0:	2200      	movs	r2, #0
    d1f2:	6002      	str	r2, [r0, #0]
    d1f4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    d1f6:	4603      	mov	r3, r0
    d1f8:	f843 2f08 	str.w	r2, [r3, #8]!
    d1fc:	60c3      	str	r3, [r0, #12]
}
    d1fe:	4770      	bx	lr

0000d200 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    d200:	68c0      	ldr	r0, [r0, #12]
}
    d202:	3800      	subs	r0, #0
    d204:	bf18      	it	ne
    d206:	2001      	movne	r0, #1
    d208:	4770      	bx	lr

0000d20a <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    d20a:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    d20c:	b1f0      	cbz	r0, d24c <os_eventq_put+0x42>
    d20e:	460c      	mov	r4, r1
    d210:	4606      	mov	r6, r0
    d212:	f7ff fff5 	bl	d200 <os_eventq_inited>
    d216:	b1c8      	cbz	r0, d24c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    d218:	f001 f996 	bl	e548 <os_arch_save_sr>
    d21c:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    d21e:	7823      	ldrb	r3, [r4, #0]
    d220:	b9f3      	cbnz	r3, d260 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    d222:	2301      	movs	r3, #1
    d224:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    d226:	2300      	movs	r3, #0
    d228:	60e3      	str	r3, [r4, #12]
    d22a:	68f3      	ldr	r3, [r6, #12]
    d22c:	601c      	str	r4, [r3, #0]
    d22e:	340c      	adds	r4, #12
    d230:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    d232:	6870      	ldr	r0, [r6, #4]
    d234:	b1d8      	cbz	r0, d26e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    d236:	7b03      	ldrb	r3, [r0, #12]
    d238:	2b02      	cmp	r3, #2
    d23a:	d014      	beq.n	d266 <os_eventq_put+0x5c>
    resched = 0;
    d23c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    d23e:	2300      	movs	r3, #0
    d240:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    d242:	4628      	mov	r0, r5
    d244:	f001 f986 	bl	e554 <os_arch_restore_sr>

    if (resched) {
    d248:	b99c      	cbnz	r4, d272 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    d24a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    d24c:	f7fe ffa6 	bl	c19c <hal_debugger_connected>
    d250:	b100      	cbz	r0, d254 <os_eventq_put+0x4a>
    d252:	be01      	bkpt	0x0001
    d254:	2300      	movs	r3, #0
    d256:	461a      	mov	r2, r3
    d258:	4619      	mov	r1, r3
    d25a:	4618      	mov	r0, r3
    d25c:	f7ff fca2 	bl	cba4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    d260:	f001 f978 	bl	e554 <os_arch_restore_sr>
        return;
    d264:	e7f1      	b.n	d24a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    d266:	f000 feef 	bl	e048 <os_sched_wakeup>
            resched = 1;
    d26a:	2401      	movs	r4, #1
    d26c:	e7e7      	b.n	d23e <os_eventq_put+0x34>
    resched = 0;
    d26e:	2400      	movs	r4, #0
    d270:	e7e7      	b.n	d242 <os_eventq_put+0x38>
        os_sched(NULL);
    d272:	2000      	movs	r0, #0
    d274:	f000 ff74 	bl	e160 <os_sched>
    d278:	e7e7      	b.n	d24a <os_eventq_put+0x40>

0000d27a <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
    d27a:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    d27c:	6880      	ldr	r0, [r0, #8]
    if (ev) {
    d27e:	b120      	cbz	r0, d28a <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d280:	68c2      	ldr	r2, [r0, #12]
    d282:	609a      	str	r2, [r3, #8]
    d284:	b112      	cbz	r2, d28c <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    d286:	2300      	movs	r3, #0
    d288:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    d28a:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d28c:	f103 0208 	add.w	r2, r3, #8
    d290:	60da      	str	r2, [r3, #12]
    d292:	e7f8      	b.n	d286 <os_eventq_get_no_wait+0xc>

0000d294 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d296:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    d298:	f000 fe82 	bl	dfa0 <os_sched_get_current_task>
    d29c:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    d29e:	6833      	ldr	r3, [r6, #0]
    d2a0:	4283      	cmp	r3, r0
    d2a2:	d001      	beq.n	d2a8 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    d2a4:	b9db      	cbnz	r3, d2de <os_eventq_get+0x4a>
            evq->evq_owner = t;
    d2a6:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    d2a8:	f001 f94e 	bl	e548 <os_arch_save_sr>
    d2ac:	4605      	mov	r5, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    d2ae:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
    d2b0:	b9ff      	cbnz	r7, d2f2 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    d2b2:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    d2b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d2b8:	4620      	mov	r0, r4
    d2ba:	f000 fe7d 	bl	dfb8 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    d2be:	7b63      	ldrb	r3, [r4, #13]
    d2c0:	f043 0308 	orr.w	r3, r3, #8
    d2c4:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    d2c6:	4628      	mov	r0, r5
    d2c8:	f001 f944 	bl	e554 <os_arch_restore_sr>

        os_sched(NULL);
    d2cc:	2000      	movs	r0, #0
    d2ce:	f000 ff47 	bl	e160 <os_sched>

        OS_ENTER_CRITICAL(sr);
    d2d2:	f001 f939 	bl	e548 <os_arch_save_sr>
    d2d6:	4605      	mov	r5, r0
        evq->evq_task = NULL;
    d2d8:	2300      	movs	r3, #0
    d2da:	6073      	str	r3, [r6, #4]
        goto pull_one;
    d2dc:	e7e7      	b.n	d2ae <os_eventq_get+0x1a>
            assert(0);
    d2de:	f7fe ff5d 	bl	c19c <hal_debugger_connected>
    d2e2:	b100      	cbz	r0, d2e6 <os_eventq_get+0x52>
    d2e4:	be01      	bkpt	0x0001
    d2e6:	2300      	movs	r3, #0
    d2e8:	461a      	mov	r2, r3
    d2ea:	4619      	mov	r1, r3
    d2ec:	4618      	mov	r0, r3
    d2ee:	f7ff fc59 	bl	cba4 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d2f2:	68fb      	ldr	r3, [r7, #12]
    d2f4:	60b3      	str	r3, [r6, #8]
    d2f6:	b153      	cbz	r3, d30e <os_eventq_get+0x7a>
        ev->ev_queued = 0;
    d2f8:	2300      	movs	r3, #0
    d2fa:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    d2fc:	7b63      	ldrb	r3, [r4, #13]
    d2fe:	f023 0308 	bic.w	r3, r3, #8
    d302:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
    d304:	4628      	mov	r0, r5
    d306:	f001 f925 	bl	e554 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    d30a:	4638      	mov	r0, r7
    d30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d30e:	f106 0308 	add.w	r3, r6, #8
    d312:	60f3      	str	r3, [r6, #12]
    d314:	e7f0      	b.n	d2f8 <os_eventq_get+0x64>

0000d316 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    d316:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    d318:	f7ff ffbc 	bl	d294 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    d31c:	6843      	ldr	r3, [r0, #4]
    d31e:	b10b      	cbz	r3, d324 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    d320:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    d322:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    d324:	f7fe ff3a 	bl	c19c <hal_debugger_connected>
    d328:	b100      	cbz	r0, d32c <os_eventq_run+0x16>
    d32a:	be01      	bkpt	0x0001
    d32c:	2300      	movs	r3, #0
    d32e:	461a      	mov	r2, r3
    d330:	4619      	mov	r1, r3
    d332:	4618      	mov	r0, r3
    d334:	f7ff fc36 	bl	cba4 <__assert_func>

0000d338 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    d338:	b538      	push	{r3, r4, r5, lr}
    d33a:	4605      	mov	r5, r0
    d33c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    d33e:	f001 f903 	bl	e548 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    d342:	7823      	ldrb	r3, [r4, #0]
    d344:	b14b      	cbz	r3, d35a <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d346:	68ab      	ldr	r3, [r5, #8]
    d348:	42a3      	cmp	r3, r4
    d34a:	d00b      	beq.n	d364 <os_eventq_remove+0x2c>
    d34c:	461a      	mov	r2, r3
    d34e:	68db      	ldr	r3, [r3, #12]
    d350:	42a3      	cmp	r3, r4
    d352:	d1fb      	bne.n	d34c <os_eventq_remove+0x14>
    d354:	68db      	ldr	r3, [r3, #12]
    d356:	60d3      	str	r3, [r2, #12]
    d358:	b163      	cbz	r3, d374 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
    d35a:	2300      	movs	r3, #0
    d35c:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    d35e:	f001 f8f9 	bl	e554 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    d362:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d364:	68db      	ldr	r3, [r3, #12]
    d366:	60ab      	str	r3, [r5, #8]
    d368:	2b00      	cmp	r3, #0
    d36a:	d1f6      	bne.n	d35a <os_eventq_remove+0x22>
    d36c:	f105 0308 	add.w	r3, r5, #8
    d370:	60eb      	str	r3, [r5, #12]
    d372:	e7f2      	b.n	d35a <os_eventq_remove+0x22>
    d374:	320c      	adds	r2, #12
    d376:	60ea      	str	r2, [r5, #12]
    d378:	e7ef      	b.n	d35a <os_eventq_remove+0x22>
	...

0000d37c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    d37c:	4800      	ldr	r0, [pc, #0]	; (d380 <os_eventq_dflt_get+0x4>)
    d37e:	4770      	bx	lr
    d380:	20000f54 	.word	0x20000f54

0000d384 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    d384:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    d386:	2000      	movs	r0, #0
    d388:	6018      	str	r0, [r3, #0]
    d38a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    d38c:	6098      	str	r0, [r3, #8]
    d38e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    d390:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    d392:	611a      	str	r2, [r3, #16]

    return (0);
}
    d394:	4770      	bx	lr

0000d396 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    d396:	b538      	push	{r3, r4, r5, lr}
    d398:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    d39a:	f001 f8d5 	bl	e548 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    d39e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    d3a0:	b114      	cbz	r4, d3a8 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    d3a2:	6863      	ldr	r3, [r4, #4]
    d3a4:	602b      	str	r3, [r5, #0]
    d3a6:	b12b      	cbz	r3, d3b4 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    d3a8:	f001 f8d4 	bl	e554 <os_arch_restore_sr>

    if (mp) {
    d3ac:	b104      	cbz	r4, d3b0 <os_mqueue_get+0x1a>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    d3ae:	3c10      	subs	r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    d3b0:	4620      	mov	r0, r4
    d3b2:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    d3b4:	606d      	str	r5, [r5, #4]
    d3b6:	e7f7      	b.n	d3a8 <os_mqueue_get+0x12>

0000d3b8 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    d3ba:	7953      	ldrb	r3, [r2, #5]
    d3bc:	2b07      	cmp	r3, #7
    d3be:	d916      	bls.n	d3ee <os_mqueue_put+0x36>
    d3c0:	4605      	mov	r5, r0
    d3c2:	460e      	mov	r6, r1
    d3c4:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    d3c6:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    d3ca:	f001 f8bd 	bl	e548 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    d3ce:	2300      	movs	r3, #0
    d3d0:	f844 3f14 	str.w	r3, [r4, #20]!
    d3d4:	686b      	ldr	r3, [r5, #4]
    d3d6:	601f      	str	r7, [r3, #0]
    d3d8:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    d3da:	f001 f8bb 	bl	e554 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    d3de:	b146      	cbz	r6, d3f2 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    d3e0:	f105 0108 	add.w	r1, r5, #8
    d3e4:	4630      	mov	r0, r6
    d3e6:	f7ff ff10 	bl	d20a <os_eventq_put>
    }

    return (0);
    d3ea:	2000      	movs	r0, #0
    d3ec:	e000      	b.n	d3f0 <os_mqueue_put+0x38>
err:
    return (rc);
    d3ee:	2002      	movs	r0, #2
}
    d3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    d3f2:	2000      	movs	r0, #0
    d3f4:	e7fc      	b.n	d3f0 <os_mqueue_put+0x38>

0000d3f6 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    d3f6:	3a10      	subs	r2, #16
    d3f8:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    d3fa:	6041      	str	r1, [r0, #4]

    return (0);
}
    d3fc:	2000      	movs	r0, #0
    d3fe:	4770      	bx	lr

0000d400 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    d400:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    d402:	8803      	ldrh	r3, [r0, #0]
    d404:	428b      	cmp	r3, r1
    d406:	d310      	bcc.n	d42a <os_mbuf_get+0x2a>
    d408:	4604      	mov	r4, r0
    d40a:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    d40c:	6840      	ldr	r0, [r0, #4]
    d40e:	f000 fc0e 	bl	dc2e <os_memblock_get>
    if (!om) {
    d412:	b148      	cbz	r0, d428 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    d414:	2300      	movs	r3, #0
    d416:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    d418:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    d41a:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
    d41c:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    d41e:	f100 0110 	add.w	r1, r0, #16
    d422:	440d      	add	r5, r1
    d424:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
    d426:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    d428:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    d42a:	2000      	movs	r0, #0
    return om;
    d42c:	e7fc      	b.n	d428 <os_mbuf_get+0x28>

0000d42e <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    d42e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    d430:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    d434:	8803      	ldrh	r3, [r0, #0]
    d436:	42ab      	cmp	r3, r5
    d438:	d30e      	bcc.n	d458 <os_mbuf_get_pkthdr+0x2a>
    d43a:	2dff      	cmp	r5, #255	; 0xff
    d43c:	d80e      	bhi.n	d45c <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    d43e:	2100      	movs	r1, #0
    d440:	f7ff ffde 	bl	d400 <os_mbuf_get>
    if (om) {
    d444:	b138      	cbz	r0, d456 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
    d446:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    d448:	6803      	ldr	r3, [r0, #0]
    d44a:	441d      	add	r5, r3
    d44c:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    d44e:	2300      	movs	r3, #0
    d450:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
    d452:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    d454:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    d456:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    d458:	2000      	movs	r0, #0
    d45a:	e7fc      	b.n	d456 <os_mbuf_get_pkthdr+0x28>
    d45c:	2000      	movs	r0, #0
    return om;
    d45e:	e7fa      	b.n	d456 <os_mbuf_get_pkthdr+0x28>

0000d460 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    d460:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    d462:	6883      	ldr	r3, [r0, #8]
    d464:	b123      	cbz	r3, d470 <os_mbuf_free+0x10>
    d466:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    d468:	6858      	ldr	r0, [r3, #4]
    d46a:	f000 fc08 	bl	dc7e <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    d46e:	bd08      	pop	{r3, pc}
    rc = 0;
    d470:	2000      	movs	r0, #0
    return (rc);
    d472:	e7fc      	b.n	d46e <os_mbuf_free+0xe>

0000d474 <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    d474:	b158      	cbz	r0, d48e <os_mbuf_free_chain+0x1a>
{
    d476:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    d478:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
    d47a:	f7ff fff1 	bl	d460 <os_mbuf_free>
        if (rc != 0) {
    d47e:	4603      	mov	r3, r0
    d480:	b918      	cbnz	r0, d48a <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
    d482:	4620      	mov	r0, r4
    while (om != NULL) {
    d484:	2c00      	cmp	r4, #0
    d486:	d1f7      	bne.n	d478 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
    d488:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    d48a:	4618      	mov	r0, r3
    d48c:	bd10      	pop	{r4, pc}
    rc = 0;
    d48e:	2300      	movs	r3, #0
}
    d490:	4618      	mov	r0, r3
    d492:	4770      	bx	lr

0000d494 <os_mbuf_len>:
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
}

uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    d494:	4603      	mov	r3, r0
    uint16_t len;

    len = 0;
    d496:	2000      	movs	r0, #0
    while (om != NULL) {
    d498:	b123      	cbz	r3, d4a4 <os_mbuf_len+0x10>
        len += om->om_len;
    d49a:	88da      	ldrh	r2, [r3, #6]
    d49c:	4410      	add	r0, r2
    d49e:	b280      	uxth	r0, r0
        om = SLIST_NEXT(om, om_next);
    d4a0:	68db      	ldr	r3, [r3, #12]
    d4a2:	e7f9      	b.n	d498 <os_mbuf_len+0x4>
    }

    return len;
}
    d4a4:	4770      	bx	lr

0000d4a6 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    d4a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    d4aa:	2800      	cmp	r0, #0
    d4ac:	d04b      	beq.n	d546 <os_mbuf_append+0xa0>
    d4ae:	460f      	mov	r7, r1
    d4b0:	4691      	mov	r9, r2
    d4b2:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    d4b4:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    d4b8:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    d4ba:	461e      	mov	r6, r3
    d4bc:	68db      	ldr	r3, [r3, #12]
    d4be:	2b00      	cmp	r3, #0
    d4c0:	d1fb      	bne.n	d4ba <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    d4c2:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    d4c4:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d4c6:	f106 0410 	add.w	r4, r6, #16
    d4ca:	881b      	ldrh	r3, [r3, #0]
    d4cc:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    d4ce:	6830      	ldr	r0, [r6, #0]
    d4d0:	88f3      	ldrh	r3, [r6, #6]
    d4d2:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d4d4:	1a24      	subs	r4, r4, r0
    d4d6:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    d4d8:	b164      	cbz	r4, d4f4 <os_mbuf_append+0x4e>
        if (space > remainder) {
    d4da:	454c      	cmp	r4, r9
    d4dc:	dd00      	ble.n	d4e0 <os_mbuf_append+0x3a>
            space = remainder;
    d4de:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    d4e0:	4622      	mov	r2, r4
    d4e2:	4639      	mov	r1, r7
    d4e4:	f001 fa68 	bl	e9b8 <memcpy>

        last->om_len += space;
    d4e8:	88f3      	ldrh	r3, [r6, #6]
    d4ea:	4423      	add	r3, r4
    d4ec:	80f3      	strh	r3, [r6, #6]
        data += space;
    d4ee:	4427      	add	r7, r4
        remainder -= space;
    d4f0:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    d4f4:	2d00      	cmp	r5, #0
    d4f6:	dd16      	ble.n	d526 <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
    d4f8:	2100      	movs	r1, #0
    d4fa:	4640      	mov	r0, r8
    d4fc:	f7ff ff80 	bl	d400 <os_mbuf_get>
        if (!new) {
    d500:	4604      	mov	r4, r0
    d502:	b180      	cbz	r0, d526 <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    d504:	f8b8 2000 	ldrh.w	r2, [r8]
    d508:	42aa      	cmp	r2, r5
    d50a:	bfa8      	it	ge
    d50c:	462a      	movge	r2, r5
    d50e:	b292      	uxth	r2, r2
    d510:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    d512:	4639      	mov	r1, r7
    d514:	6800      	ldr	r0, [r0, #0]
    d516:	f001 fa4f 	bl	e9b8 <memcpy>
        data += new->om_len;
    d51a:	88e3      	ldrh	r3, [r4, #6]
    d51c:	441f      	add	r7, r3
        remainder -= new->om_len;
    d51e:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
    d520:	60f4      	str	r4, [r6, #12]
        last = new;
    d522:	4626      	mov	r6, r4
    d524:	e7e6      	b.n	d4f4 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    d526:	f89a 3005 	ldrb.w	r3, [sl, #5]
    d52a:	2b07      	cmp	r3, #7
    d52c:	d907      	bls.n	d53e <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    d52e:	eba9 0905 	sub.w	r9, r9, r5
    d532:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    d536:	fa13 f989 	uxtah	r9, r3, r9
    d53a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    d53e:	b925      	cbnz	r5, d54a <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
    d540:	4628      	mov	r0, r5
    d542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    d546:	2502      	movs	r5, #2
    d548:	e7fa      	b.n	d540 <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
    d54a:	2501      	movs	r5, #1
    d54c:	e7f8      	b.n	d540 <os_mbuf_append+0x9a>

0000d54e <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    d54e:	b170      	cbz	r0, d56e <os_mbuf_off+0x20>
{
    d550:	b410      	push	{r4}
    d552:	e002      	b.n	d55a <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    d554:	1ac9      	subs	r1, r1, r3
        cur = next;
    d556:	4620      	mov	r0, r4
        if (cur == NULL) {
    d558:	b13c      	cbz	r4, d56a <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    d55a:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    d55c:	88c3      	ldrh	r3, [r0, #6]
    d55e:	428b      	cmp	r3, r1
    d560:	dc02      	bgt.n	d568 <os_mbuf_off+0x1a>
    d562:	d1f7      	bne.n	d554 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    d564:	2c00      	cmp	r4, #0
    d566:	d1f5      	bne.n	d554 <os_mbuf_off+0x6>
            *out_off = off;
    d568:	8011      	strh	r1, [r2, #0]
    }
}
    d56a:	bc10      	pop	{r4}
    d56c:	4770      	bx	lr
    d56e:	4770      	bx	lr

0000d570 <os_mbuf_appendfrom>:
{
    d570:	b5f0      	push	{r4, r5, r6, r7, lr}
    d572:	b083      	sub	sp, #12
    d574:	4607      	mov	r7, r0
    d576:	4608      	mov	r0, r1
    d578:	4611      	mov	r1, r2
    d57a:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
    d57c:	f10d 0206 	add.w	r2, sp, #6
    d580:	f7ff ffe5 	bl	d54e <os_mbuf_off>
    d584:	4605      	mov	r5, r0
    while (len > 0) {
    d586:	e005      	b.n	d594 <os_mbuf_appendfrom+0x24>
        len -= chunk_sz;
    d588:	1b34      	subs	r4, r6, r4
    d58a:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    d58c:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    d58e:	2300      	movs	r3, #0
    d590:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
    d594:	b196      	cbz	r6, d5bc <os_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
    d596:	b1ad      	cbz	r5, d5c4 <os_mbuf_appendfrom+0x54>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
    d598:	88ec      	ldrh	r4, [r5, #6]
    d59a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d59e:	1ae4      	subs	r4, r4, r3
    d5a0:	42b4      	cmp	r4, r6
    d5a2:	bfa8      	it	ge
    d5a4:	4634      	movge	r4, r6
    d5a6:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    d5a8:	6829      	ldr	r1, [r5, #0]
    d5aa:	4622      	mov	r2, r4
    d5ac:	4419      	add	r1, r3
    d5ae:	4638      	mov	r0, r7
    d5b0:	f7ff ff79 	bl	d4a6 <os_mbuf_append>
        if (rc != 0) {
    d5b4:	4603      	mov	r3, r0
    d5b6:	2800      	cmp	r0, #0
    d5b8:	d0e6      	beq.n	d588 <os_mbuf_appendfrom+0x18>
    d5ba:	e000      	b.n	d5be <os_mbuf_appendfrom+0x4e>
    return 0;
    d5bc:	2300      	movs	r3, #0
}
    d5be:	4618      	mov	r0, r3
    d5c0:	b003      	add	sp, #12
    d5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
    d5c4:	2302      	movs	r3, #2
    d5c6:	e7fa      	b.n	d5be <os_mbuf_appendfrom+0x4e>

0000d5c8 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5ca:	4604      	mov	r4, r0
    d5cc:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    d5ce:	4616      	mov	r6, r2
    d5d0:	b91a      	cbnz	r2, d5da <os_mbuf_copydata+0x12>
        return 0;
    d5d2:	4610      	mov	r0, r2
    d5d4:	e01e      	b.n	d614 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
    d5d6:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
    d5d8:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
    d5da:	2900      	cmp	r1, #0
    d5dc:	dd13      	ble.n	d606 <os_mbuf_copydata+0x3e>
        if (!m) {
    d5de:	b1ec      	cbz	r4, d61c <os_mbuf_copydata+0x54>
        if (off < m->om_len)
    d5e0:	88e2      	ldrh	r2, [r4, #6]
    d5e2:	428a      	cmp	r2, r1
    d5e4:	ddf7      	ble.n	d5d6 <os_mbuf_copydata+0xe>
    d5e6:	e00e      	b.n	d606 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
    d5e8:	88e5      	ldrh	r5, [r4, #6]
    d5ea:	1a6d      	subs	r5, r5, r1
    d5ec:	42b5      	cmp	r5, r6
    d5ee:	bfa8      	it	ge
    d5f0:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    d5f2:	6823      	ldr	r3, [r4, #0]
    d5f4:	462a      	mov	r2, r5
    d5f6:	4419      	add	r1, r3
    d5f8:	4638      	mov	r0, r7
    d5fa:	f001 f9dd 	bl	e9b8 <memcpy>
        len -= count;
    d5fe:	1b76      	subs	r6, r6, r5
        udst += count;
    d600:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    d602:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    d604:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
    d606:	2e00      	cmp	r6, #0
    d608:	dd01      	ble.n	d60e <os_mbuf_copydata+0x46>
    d60a:	2c00      	cmp	r4, #0
    d60c:	d1ec      	bne.n	d5e8 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
    d60e:	2e00      	cmp	r6, #0
    d610:	dc01      	bgt.n	d616 <os_mbuf_copydata+0x4e>
    d612:	2000      	movs	r0, #0
}
    d614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
    d616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d61a:	e7fb      	b.n	d614 <os_mbuf_copydata+0x4c>
            return (-1);
    d61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d620:	e7f8      	b.n	d614 <os_mbuf_copydata+0x4c>

0000d622 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    d622:	2800      	cmp	r0, #0
    d624:	d04d      	beq.n	d6c2 <os_mbuf_adj+0xa0>
{
    d626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d628:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    d62a:	2900      	cmp	r1, #0
    d62c:	db1b      	blt.n	d666 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
    d62e:	4603      	mov	r3, r0
    int len = req_len;
    d630:	460a      	mov	r2, r1
    d632:	e005      	b.n	d640 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    d634:	1a80      	subs	r0, r0, r2
    d636:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    d638:	6818      	ldr	r0, [r3, #0]
    d63a:	4402      	add	r2, r0
    d63c:	601a      	str	r2, [r3, #0]
                len = 0;
    d63e:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    d640:	b14b      	cbz	r3, d656 <os_mbuf_adj+0x34>
    d642:	2a00      	cmp	r2, #0
    d644:	dd07      	ble.n	d656 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    d646:	88d8      	ldrh	r0, [r3, #6]
    d648:	4290      	cmp	r0, r2
    d64a:	dcf3      	bgt.n	d634 <os_mbuf_adj+0x12>
                len -= m->om_len;
    d64c:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    d64e:	2000      	movs	r0, #0
    d650:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    d652:	68db      	ldr	r3, [r3, #12]
    d654:	e7f4      	b.n	d640 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    d656:	7963      	ldrb	r3, [r4, #5]
    d658:	2b07      	cmp	r3, #7
    d65a:	d903      	bls.n	d664 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    d65c:	1a52      	subs	r2, r2, r1
    d65e:	8a23      	ldrh	r3, [r4, #16]
    d660:	441a      	add	r2, r3
    d662:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
    d666:	424f      	negs	r7, r1
    if ((m = mp) == NULL)
    d668:	4603      	mov	r3, r0
        count = 0;
    d66a:	2200      	movs	r2, #0
            count += m->om_len;
    d66c:	88d8      	ldrh	r0, [r3, #6]
    d66e:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    d670:	461e      	mov	r6, r3
    d672:	68db      	ldr	r3, [r3, #12]
    d674:	2b00      	cmp	r3, #0
    d676:	d1f9      	bne.n	d66c <os_mbuf_adj+0x4a>
        if (m->om_len >= len) {
    d678:	42b8      	cmp	r0, r7
    d67a:	da0d      	bge.n	d698 <os_mbuf_adj+0x76>
        if (count < 0)
    d67c:	188a      	adds	r2, r1, r2
    d67e:	d415      	bmi.n	d6ac <os_mbuf_adj+0x8a>
        if (OS_MBUF_IS_PKTHDR(m))
    d680:	7963      	ldrb	r3, [r4, #5]
    d682:	2b07      	cmp	r3, #7
    d684:	d900      	bls.n	d688 <os_mbuf_adj+0x66>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    d686:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    d688:	2c00      	cmp	r4, #0
    d68a:	d0eb      	beq.n	d664 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
    d68c:	88e3      	ldrh	r3, [r4, #6]
    d68e:	4293      	cmp	r3, r2
    d690:	da0e      	bge.n	d6b0 <os_mbuf_adj+0x8e>
            count -= m->om_len;
    d692:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    d694:	68e4      	ldr	r4, [r4, #12]
    d696:	e7f7      	b.n	d688 <os_mbuf_adj+0x66>
            m->om_len -= len;
    d698:	b2bf      	uxth	r7, r7
    d69a:	1bc0      	subs	r0, r0, r7
    d69c:	80f0      	strh	r0, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    d69e:	7963      	ldrb	r3, [r4, #5]
    d6a0:	2b07      	cmp	r3, #7
    d6a2:	d9df      	bls.n	d664 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    d6a4:	8a23      	ldrh	r3, [r4, #16]
    d6a6:	1bdf      	subs	r7, r3, r7
    d6a8:	8227      	strh	r7, [r4, #16]
            return;
    d6aa:	e7db      	b.n	d664 <os_mbuf_adj+0x42>
            count = 0;
    d6ac:	2200      	movs	r2, #0
    d6ae:	e7e7      	b.n	d680 <os_mbuf_adj+0x5e>
                m->om_len = count;
    d6b0:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    d6b2:	68e0      	ldr	r0, [r4, #12]
    d6b4:	2800      	cmp	r0, #0
    d6b6:	d0d5      	beq.n	d664 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    d6b8:	f7ff fedc 	bl	d474 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    d6bc:	2300      	movs	r3, #0
    d6be:	60e3      	str	r3, [r4, #12]
    d6c0:	e7d0      	b.n	d664 <os_mbuf_adj+0x42>
    d6c2:	4770      	bx	lr

0000d6c4 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6c8:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    d6ca:	1e1e      	subs	r6, r3, #0
    d6cc:	dd2d      	ble.n	d72a <os_mbuf_cmpf+0x66>
    d6ce:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    d6d0:	f10d 0206 	add.w	r2, sp, #6
    d6d4:	f7ff ff3b 	bl	d54e <os_mbuf_off>
    d6d8:	4604      	mov	r4, r0
    data_off = 0;
    d6da:	f04f 0800 	mov.w	r8, #0
    d6de:	e009      	b.n	d6f4 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    d6e0:	4445      	add	r5, r8
    d6e2:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    d6e6:	45b0      	cmp	r8, r6
    d6e8:	d027      	beq.n	d73a <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    d6ea:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    d6ec:	2300      	movs	r3, #0
    d6ee:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    d6f2:	b1bc      	cbz	r4, d724 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    d6f4:	b1f4      	cbz	r4, d734 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    d6f6:	eba6 0208 	sub.w	r2, r6, r8
    d6fa:	88e3      	ldrh	r3, [r4, #6]
    d6fc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    d700:	1a1b      	subs	r3, r3, r0
    d702:	429a      	cmp	r2, r3
    d704:	bfa8      	it	ge
    d706:	461a      	movge	r2, r3
    d708:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    d70a:	2d00      	cmp	r5, #0
    d70c:	d0e8      	beq.n	d6e0 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    d70e:	6823      	ldr	r3, [r4, #0]
    d710:	462a      	mov	r2, r5
    d712:	eb07 0108 	add.w	r1, r7, r8
    d716:	4418      	add	r0, r3
    d718:	f001 f92a 	bl	e970 <memcmp>
            if (rc != 0) {
    d71c:	4603      	mov	r3, r0
    d71e:	2800      	cmp	r0, #0
    d720:	d0de      	beq.n	d6e0 <os_mbuf_cmpf+0x1c>
    d722:	e003      	b.n	d72c <os_mbuf_cmpf+0x68>
            return INT_MAX;
    d724:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d728:	e000      	b.n	d72c <os_mbuf_cmpf+0x68>
        return 0;
    d72a:	2300      	movs	r3, #0
        }
    }
}
    d72c:	4618      	mov	r0, r3
    d72e:	b002      	add	sp, #8
    d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    d734:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d738:	e7f8      	b.n	d72c <os_mbuf_cmpf+0x68>
            return 0;
    d73a:	2300      	movs	r3, #0
    d73c:	e7f6      	b.n	d72c <os_mbuf_cmpf+0x68>

0000d73e <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
    d73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d740:	4604      	mov	r4, r0
    d742:	460e      	mov	r6, r1
    d744:	e019      	b.n	d77a <os_mbuf_prepend+0x3c>
    startoff = 0;
    d746:	2000      	movs	r0, #0
    d748:	e01b      	b.n	d782 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
    d74a:	2100      	movs	r1, #0
    d74c:	68a0      	ldr	r0, [r4, #8]
    d74e:	f7ff fe57 	bl	d400 <os_mbuf_get>
    d752:	4605      	mov	r5, r0
        }
        if (p == NULL) {
    d754:	2d00      	cmp	r5, #0
    d756:	d033      	beq.n	d7c0 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    d758:	7963      	ldrb	r3, [r4, #5]
    d75a:	2b07      	cmp	r3, #7
    d75c:	d836      	bhi.n	d7cc <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
    d75e:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d760:	f105 0310 	add.w	r3, r5, #16
    d764:	8812      	ldrh	r2, [r2, #0]
    d766:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    d768:	6829      	ldr	r1, [r5, #0]
    d76a:	88ea      	ldrh	r2, [r5, #6]
    d76c:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d76e:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
    d770:	fa11 f383 	uxtah	r3, r1, r3
    d774:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
    d776:	60ec      	str	r4, [r5, #12]
        om = p;
    d778:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
    d77a:	7961      	ldrb	r1, [r4, #5]
    d77c:	2907      	cmp	r1, #7
    d77e:	d9e2      	bls.n	d746 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
    d780:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    d782:	4623      	mov	r3, r4
    d784:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    d788:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    d78a:	1ad3      	subs	r3, r2, r3
    return (leadingspace);
    d78c:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
    d78e:	429e      	cmp	r6, r3
    d790:	da00      	bge.n	d794 <os_mbuf_prepend+0x56>
    d792:	4633      	mov	r3, r6
        om->om_data -= leading;
    d794:	1ad2      	subs	r2, r2, r3
    d796:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
    d798:	b298      	uxth	r0, r3
    d79a:	88e2      	ldrh	r2, [r4, #6]
    d79c:	4402      	add	r2, r0
    d79e:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
    d7a0:	2907      	cmp	r1, #7
    d7a2:	d902      	bls.n	d7aa <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
    d7a4:	8a22      	ldrh	r2, [r4, #16]
    d7a6:	4410      	add	r0, r2
    d7a8:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
    d7aa:	1af6      	subs	r6, r6, r3
    d7ac:	d00c      	beq.n	d7c8 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
    d7ae:	2907      	cmp	r1, #7
    d7b0:	d9cb      	bls.n	d74a <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
    d7b2:	3908      	subs	r1, #8
    d7b4:	b2c9      	uxtb	r1, r1
    d7b6:	68a0      	ldr	r0, [r4, #8]
    d7b8:	f7ff fe39 	bl	d42e <os_mbuf_get_pkthdr>
    d7bc:	4605      	mov	r5, r0
    d7be:	e7c9      	b.n	d754 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
    d7c0:	4620      	mov	r0, r4
    d7c2:	f7ff fe57 	bl	d474 <os_mbuf_free_chain>
            om = NULL;
    d7c6:	462c      	mov	r4, r5
    }

    return om;
}
    d7c8:	4620      	mov	r0, r4
    d7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
    d7cc:	88eb      	ldrh	r3, [r5, #6]
    d7ce:	b973      	cbnz	r3, d7ee <os_mbuf_prepend+0xb0>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    d7d0:	f105 0710 	add.w	r7, r5, #16
    d7d4:	7962      	ldrb	r2, [r4, #5]
    d7d6:	f104 0110 	add.w	r1, r4, #16
    d7da:	4638      	mov	r0, r7
    d7dc:	f001 f8ec 	bl	e9b8 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    d7e0:	7963      	ldrb	r3, [r4, #5]
    d7e2:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    d7e4:	441f      	add	r7, r3
    d7e6:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
    d7e8:	2300      	movs	r3, #0
    d7ea:	7163      	strb	r3, [r4, #5]
    d7ec:	e7b7      	b.n	d75e <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
    d7ee:	f7fe fcd5 	bl	c19c <hal_debugger_connected>
    d7f2:	b100      	cbz	r0, d7f6 <os_mbuf_prepend+0xb8>
    d7f4:	be01      	bkpt	0x0001
    d7f6:	2300      	movs	r3, #0
    d7f8:	461a      	mov	r2, r3
    d7fa:	4619      	mov	r1, r3
    d7fc:	4618      	mov	r0, r3
    d7fe:	f7ff f9d1 	bl	cba4 <__assert_func>

0000d802 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    d802:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d806:	b083      	sub	sp, #12
    d808:	4681      	mov	r9, r0
    d80a:	4688      	mov	r8, r1
    d80c:	4617      	mov	r7, r2
    d80e:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    d810:	f10d 0206 	add.w	r2, sp, #6
    d814:	f7ff fe9b 	bl	d54e <os_mbuf_off>
    if (cur == NULL) {
    d818:	4605      	mov	r5, r0
    d81a:	b948      	cbnz	r0, d830 <os_mbuf_copyinto+0x2e>
        return -1;
    d81c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d820:	e02d      	b.n	d87e <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    d822:	b366      	cbz	r6, d87e <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    d824:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    d826:	b1ab      	cbz	r3, d854 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    d828:	2200      	movs	r2, #0
    d82a:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    d82e:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    d830:	88ec      	ldrh	r4, [r5, #6]
    d832:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d836:	1ae4      	subs	r4, r4, r3
    d838:	42b4      	cmp	r4, r6
    d83a:	bfa8      	it	ge
    d83c:	4634      	movge	r4, r6
        if (copylen > 0) {
    d83e:	2c00      	cmp	r4, #0
    d840:	ddef      	ble.n	d822 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    d842:	6828      	ldr	r0, [r5, #0]
    d844:	4622      	mov	r2, r4
    d846:	4639      	mov	r1, r7
    d848:	4418      	add	r0, r3
    d84a:	f001 f8b5 	bl	e9b8 <memcpy>
            sptr += copylen;
    d84e:	4427      	add	r7, r4
            len -= copylen;
    d850:	1b36      	subs	r6, r6, r4
            copylen = 0;
    d852:	e7e6      	b.n	d822 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    d854:	b2b2      	uxth	r2, r6
    d856:	4639      	mov	r1, r7
    d858:	4628      	mov	r0, r5
    d85a:	f7ff fe24 	bl	d4a6 <os_mbuf_append>
    if (rc != 0) {
    d85e:	b968      	cbnz	r0, d87c <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    d860:	f899 2005 	ldrb.w	r2, [r9, #5]
    d864:	2a07      	cmp	r2, #7
    d866:	d90e      	bls.n	d886 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    d868:	4446      	add	r6, r8
    d86a:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    d86e:	4546      	cmp	r6, r8
    d870:	bfb8      	it	lt
    d872:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    d874:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    d878:	4606      	mov	r6, r0
    d87a:	e000      	b.n	d87e <os_mbuf_copyinto+0x7c>
        return rc;
    d87c:	4606      	mov	r6, r0
}
    d87e:	4630      	mov	r0, r6
    d880:	b003      	add	sp, #12
    d882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    d886:	4606      	mov	r6, r0
    d888:	e7f9      	b.n	d87e <os_mbuf_copyinto+0x7c>

0000d88a <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    d88a:	4603      	mov	r3, r0
    while (1) {
        next = SLIST_NEXT(cur, om_next);
    d88c:	461a      	mov	r2, r3
    d88e:	68db      	ldr	r3, [r3, #12]
        if (next == NULL) {
    d890:	2b00      	cmp	r3, #0
    d892:	d1fb      	bne.n	d88c <os_mbuf_concat+0x2>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
    d894:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
    d896:	7943      	ldrb	r3, [r0, #5]
    d898:	2b07      	cmp	r3, #7
    d89a:	d906      	bls.n	d8aa <os_mbuf_concat+0x20>
        if (OS_MBUF_IS_PKTHDR(second)) {
    d89c:	794b      	ldrb	r3, [r1, #5]
    d89e:	2b07      	cmp	r3, #7
    d8a0:	d906      	bls.n	d8b0 <os_mbuf_concat+0x26>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
    d8a2:	8a0b      	ldrh	r3, [r1, #16]
    d8a4:	8a02      	ldrh	r2, [r0, #16]
    d8a6:	4413      	add	r3, r2
    d8a8:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
    d8aa:	2300      	movs	r3, #0
    d8ac:	714b      	strb	r3, [r1, #5]
    d8ae:	4770      	bx	lr
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    d8b0:	460b      	mov	r3, r1
    d8b2:	2900      	cmp	r1, #0
    d8b4:	d0f9      	beq.n	d8aa <os_mbuf_concat+0x20>
{
    d8b6:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
    d8b8:	88da      	ldrh	r2, [r3, #6]
    d8ba:	8a04      	ldrh	r4, [r0, #16]
    d8bc:	4422      	add	r2, r4
    d8be:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    d8c0:	68db      	ldr	r3, [r3, #12]
    d8c2:	2b00      	cmp	r3, #0
    d8c4:	d1f8      	bne.n	d8b8 <os_mbuf_concat+0x2e>
    second->om_pkthdr_len = 0;
    d8c6:	2300      	movs	r3, #0
    d8c8:	714b      	strb	r3, [r1, #5]
}
    d8ca:	bc10      	pop	{r4}
    d8cc:	4770      	bx	lr

0000d8ce <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    d8ce:	b570      	push	{r4, r5, r6, lr}
    d8d0:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    d8d2:	6880      	ldr	r0, [r0, #8]
    d8d4:	8803      	ldrh	r3, [r0, #0]
    d8d6:	428b      	cmp	r3, r1
    d8d8:	d325      	bcc.n	d926 <os_mbuf_extend+0x58>
    d8da:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    d8dc:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
    d8de:	461c      	mov	r4, r3
    d8e0:	68db      	ldr	r3, [r3, #12]
    d8e2:	2b00      	cmp	r3, #0
    d8e4:	d1fb      	bne.n	d8de <os_mbuf_extend+0x10>
    omp = om->om_omp;
    d8e6:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d8e8:	f104 0310 	add.w	r3, r4, #16
    d8ec:	8812      	ldrh	r2, [r2, #0]
    d8ee:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    d8f0:	6822      	ldr	r2, [r4, #0]
    d8f2:	88e1      	ldrh	r1, [r4, #6]
    d8f4:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d8f6:	1a9b      	subs	r3, r3, r2
    d8f8:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    d8fa:	429d      	cmp	r5, r3
    d8fc:	d80b      	bhi.n	d916 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    d8fe:	6820      	ldr	r0, [r4, #0]
    d900:	88e3      	ldrh	r3, [r4, #6]
    d902:	4418      	add	r0, r3
    last->om_len += len;
    d904:	442b      	add	r3, r5
    d906:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    d908:	7973      	ldrb	r3, [r6, #5]
    d90a:	2b07      	cmp	r3, #7
    d90c:	d902      	bls.n	d914 <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    d90e:	8a33      	ldrh	r3, [r6, #16]
    d910:	441d      	add	r5, r3
    d912:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    d914:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    d916:	2100      	movs	r1, #0
    d918:	f7ff fd72 	bl	d400 <os_mbuf_get>
        if (newm == NULL) {
    d91c:	2800      	cmp	r0, #0
    d91e:	d0f9      	beq.n	d914 <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
    d920:	60e0      	str	r0, [r4, #12]
        last = newm;
    d922:	4604      	mov	r4, r0
    d924:	e7eb      	b.n	d8fe <os_mbuf_extend+0x30>
        return NULL;
    d926:	2000      	movs	r0, #0
    d928:	e7f4      	b.n	d914 <os_mbuf_extend+0x46>

0000d92a <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
    d92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d92e:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
    d930:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
    d932:	88e2      	ldrh	r2, [r4, #6]
    d934:	428a      	cmp	r2, r1
    d936:	d27a      	bcs.n	da2e <os_mbuf_pullup+0x104>
    d938:	460d      	mov	r5, r1
    d93a:	f104 0310 	add.w	r3, r4, #16
    d93e:	8806      	ldrh	r6, [r0, #0]
    d940:	4433      	add	r3, r6
      (om->om_data + om->om_len);
    d942:	6821      	ldr	r1, [r4, #0]
    d944:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d946:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    d948:	fa12 f383 	uxtah	r3, r2, r3
    d94c:	4629      	mov	r1, r5
    d94e:	42ab      	cmp	r3, r5
    d950:	db12      	blt.n	d978 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
    d952:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    d954:	b183      	cbz	r3, d978 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
    d956:	1aad      	subs	r5, r5, r2
    d958:	b2ad      	uxth	r5, r5
        om2 = om;
    d95a:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
    d95c:	461c      	mov	r4, r3
    omp = om->om_omp;
    d95e:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d960:	f107 0810 	add.w	r8, r7, #16
    d964:	881b      	ldrh	r3, [r3, #0]
    d966:	4498      	add	r8, r3
      (om->om_data + om->om_len);
    d968:	683b      	ldr	r3, [r7, #0]
    d96a:	88fa      	ldrh	r2, [r7, #6]
    d96c:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d96e:	eba8 0803 	sub.w	r8, r8, r3
    d972:	fa1f f888 	uxth.w	r8, r8
    d976:	e02c      	b.n	d9d2 <os_mbuf_pullup+0xa8>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
    d978:	7963      	ldrb	r3, [r4, #5]
    d97a:	1af6      	subs	r6, r6, r3
    d97c:	42b1      	cmp	r1, r6
    d97e:	dc51      	bgt.n	da24 <os_mbuf_pullup+0xfa>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
    d980:	2100      	movs	r1, #0
    d982:	f7ff fd3d 	bl	d400 <os_mbuf_get>
        if (om2 == NULL) {
    d986:	4607      	mov	r7, r0
    d988:	2800      	cmp	r0, #0
    d98a:	d04b      	beq.n	da24 <os_mbuf_pullup+0xfa>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    d98c:	7963      	ldrb	r3, [r4, #5]
    d98e:	2b07      	cmp	r3, #7
    d990:	d9e5      	bls.n	d95e <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    d992:	88c3      	ldrh	r3, [r0, #6]
    d994:	b963      	cbnz	r3, d9b0 <os_mbuf_pullup+0x86>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    d996:	f100 0610 	add.w	r6, r0, #16
    d99a:	7962      	ldrb	r2, [r4, #5]
    d99c:	f104 0110 	add.w	r1, r4, #16
    d9a0:	4630      	mov	r0, r6
    d9a2:	f001 f809 	bl	e9b8 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    d9a6:	7963      	ldrb	r3, [r4, #5]
    d9a8:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    d9aa:	441e      	add	r6, r3
    d9ac:	603e      	str	r6, [r7, #0]
}
    d9ae:	e7d6      	b.n	d95e <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    d9b0:	f7fe fbf4 	bl	c19c <hal_debugger_connected>
    d9b4:	b100      	cbz	r0, d9b8 <os_mbuf_pullup+0x8e>
    d9b6:	be01      	bkpt	0x0001
    d9b8:	2300      	movs	r3, #0
    d9ba:	461a      	mov	r2, r3
    d9bc:	4619      	mov	r1, r3
    d9be:	4618      	mov	r0, r3
    d9c0:	f7ff f8f0 	bl	cba4 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
    d9c4:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
    d9c6:	4620      	mov	r0, r4
    d9c8:	f7ff fd4a 	bl	d460 <os_mbuf_free>
            om = next;
    d9cc:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
    d9ce:	b30d      	cbz	r5, da14 <os_mbuf_pullup+0xea>
    d9d0:	b304      	cbz	r4, da14 <os_mbuf_pullup+0xea>
        count = min(min(len, space), om->om_len);
    d9d2:	88e6      	ldrh	r6, [r4, #6]
    d9d4:	462b      	mov	r3, r5
    d9d6:	4545      	cmp	r5, r8
    d9d8:	bfa8      	it	ge
    d9da:	4643      	movge	r3, r8
    d9dc:	429e      	cmp	r6, r3
    d9de:	bfa8      	it	ge
    d9e0:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
    d9e2:	6838      	ldr	r0, [r7, #0]
    d9e4:	88fb      	ldrh	r3, [r7, #6]
    d9e6:	4632      	mov	r2, r6
    d9e8:	6821      	ldr	r1, [r4, #0]
    d9ea:	4418      	add	r0, r3
    d9ec:	f000 ffe4 	bl	e9b8 <memcpy>
        len -= count;
    d9f0:	b2b2      	uxth	r2, r6
    d9f2:	1aad      	subs	r5, r5, r2
    d9f4:	b2ad      	uxth	r5, r5
        om2->om_len += count;
    d9f6:	88fb      	ldrh	r3, [r7, #6]
    d9f8:	4413      	add	r3, r2
    d9fa:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
    d9fc:	88e3      	ldrh	r3, [r4, #6]
    d9fe:	1a9b      	subs	r3, r3, r2
    da00:	b29b      	uxth	r3, r3
    da02:	80e3      	strh	r3, [r4, #6]
        space -= count;
    da04:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
    da08:	2b00      	cmp	r3, #0
    da0a:	d0db      	beq.n	d9c4 <os_mbuf_pullup+0x9a>
            om->om_data += count;
    da0c:	6823      	ldr	r3, [r4, #0]
    da0e:	441e      	add	r6, r3
    da10:	6026      	str	r6, [r4, #0]
    da12:	e7dc      	b.n	d9ce <os_mbuf_pullup+0xa4>
    if (len > 0) {
    da14:	b91d      	cbnz	r5, da1e <os_mbuf_pullup+0xf4>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
    da16:	60fc      	str	r4, [r7, #12]
    return (om2);
bad:
    os_mbuf_free_chain(om);
    return (NULL);
}
    da18:	4638      	mov	r0, r7
    da1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free(om2);
    da1e:	4638      	mov	r0, r7
    da20:	f7ff fd1e 	bl	d460 <os_mbuf_free>
    os_mbuf_free_chain(om);
    da24:	4620      	mov	r0, r4
    da26:	f7ff fd25 	bl	d474 <os_mbuf_free_chain>
    return (NULL);
    da2a:	2700      	movs	r7, #0
    da2c:	e7f4      	b.n	da18 <os_mbuf_pullup+0xee>
        return (om);
    da2e:	4627      	mov	r7, r4
    da30:	e7f2      	b.n	da18 <os_mbuf_pullup+0xee>

0000da32 <os_mbuf_prepend_pullup>:
{
    da32:	b510      	push	{r4, lr}
    da34:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
    da36:	f7ff fe82 	bl	d73e <os_mbuf_prepend>
    if (om == NULL) {
    da3a:	b110      	cbz	r0, da42 <os_mbuf_prepend_pullup+0x10>
    om = os_mbuf_pullup(om, len);
    da3c:	4621      	mov	r1, r4
    da3e:	f7ff ff74 	bl	d92a <os_mbuf_pullup>
}
    da42:	bd10      	pop	{r4, pc}

0000da44 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
    da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da46:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    da48:	88c7      	ldrh	r7, [r0, #6]
    da4a:	b9cf      	cbnz	r7, da80 <os_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    da4c:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    da4e:	b144      	cbz	r4, da62 <os_mbuf_trim_front+0x1e>
    da50:	88e3      	ldrh	r3, [r4, #6]
    da52:	b933      	cbnz	r3, da62 <os_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
    da54:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    da56:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
    da58:	4620      	mov	r0, r4
    da5a:	f7ff fd01 	bl	d460 <os_mbuf_free>

        cur = next;
    da5e:	462c      	mov	r4, r5
    da60:	e7f5      	b.n	da4e <os_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
    da62:	b16c      	cbz	r4, da80 <os_mbuf_trim_front+0x3c>
    if (OS_MBUF_IS_PKTHDR(om)) {
    da64:	7963      	ldrb	r3, [r4, #5]
    da66:	2b07      	cmp	r3, #7
    da68:	d900      	bls.n	da6c <os_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
    da6a:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    da6c:	4620      	mov	r0, r4
    da6e:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    da72:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    da74:	1bdf      	subs	r7, r3, r7
    da76:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    da78:	7972      	ldrb	r2, [r6, #5]
    da7a:	b293      	uxth	r3, r2
    da7c:	42bb      	cmp	r3, r7
    da7e:	d901      	bls.n	da84 <os_mbuf_trim_front+0x40>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
    da80:	4630      	mov	r0, r6
    da82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    da84:	7162      	strb	r2, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
    da86:	f106 0110 	add.w	r1, r6, #16
    da8a:	f000 ff95 	bl	e9b8 <memcpy>
        os_mbuf_free(om);
    da8e:	4630      	mov	r0, r6
    da90:	f7ff fce6 	bl	d460 <os_mbuf_free>
        om = cur;
    da94:	4626      	mov	r6, r4
    da96:	e7f3      	b.n	da80 <os_mbuf_trim_front+0x3c>

0000da98 <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
    da98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
    da9c:	4681      	mov	r9, r0
    da9e:	2800      	cmp	r0, #0
    daa0:	d04e      	beq.n	db40 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
    daa2:	b109      	cbz	r1, daa8 <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
    daa4:	f7ff fef1 	bl	d88a <os_mbuf_concat>
{
    daa8:	464d      	mov	r5, r9
    daaa:	e006      	b.n	daba <os_mbuf_pack_chains+0x22>
    startoff = 0;
    daac:	2300      	movs	r3, #0
    daae:	e008      	b.n	dac2 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
    dab0:	4634      	mov	r4, r6
    dab2:	e010      	b.n	dad6 <os_mbuf_pack_chains+0x3e>
                }
            }
        }

        /* If no mbufs are left, we are done */
        if (next == NULL) {
    dab4:	2c00      	cmp	r4, #0
    dab6:	d043      	beq.n	db40 <os_mbuf_pack_chains+0xa8>
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
    dab8:	4625      	mov	r5, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
    daba:	796a      	ldrb	r2, [r5, #5]
    dabc:	2a07      	cmp	r2, #7
    dabe:	d9f5      	bls.n	daac <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
    dac0:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    dac2:	462e      	mov	r6, r5
    dac4:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    dac8:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    daca:	1acb      	subs	r3, r1, r3
    dacc:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
    dace:	b13b      	cbz	r3, dae0 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
    dad0:	2a07      	cmp	r2, #7
    dad2:	d9ed      	bls.n	dab0 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
    dad4:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
    dad6:	88ea      	ldrh	r2, [r5, #6]
    dad8:	4620      	mov	r0, r4
    dada:	f000 ff7a 	bl	e9d2 <memmove>
            cur->om_data = dptr;
    dade:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
    dae0:	682b      	ldr	r3, [r5, #0]
    dae2:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    dae6:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
    dae8:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
    daea:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    daec:	881f      	ldrh	r7, [r3, #0]
    daee:	4437      	add	r7, r6
    daf0:	eba7 0708 	sub.w	r7, r7, r8
    daf4:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
    daf6:	2f00      	cmp	r7, #0
    daf8:	d0dc      	beq.n	dab4 <os_mbuf_pack_chains+0x1c>
    dafa:	2c00      	cmp	r4, #0
    dafc:	d0da      	beq.n	dab4 <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
    dafe:	88e6      	ldrh	r6, [r4, #6]
    db00:	42be      	cmp	r6, r7
    db02:	bf28      	it	cs
    db04:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
    db06:	4632      	mov	r2, r6
    db08:	6821      	ldr	r1, [r4, #0]
    db0a:	4640      	mov	r0, r8
    db0c:	f000 ff54 	bl	e9b8 <memcpy>
            cur->om_len += copylen;
    db10:	88eb      	ldrh	r3, [r5, #6]
    db12:	4433      	add	r3, r6
    db14:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
    db16:	44b0      	add	r8, r6
            rem_len -= copylen;
    db18:	1bbf      	subs	r7, r7, r6
    db1a:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
    db1c:	6823      	ldr	r3, [r4, #0]
    db1e:	4433      	add	r3, r6
    db20:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
    db22:	88e3      	ldrh	r3, [r4, #6]
    db24:	1b9e      	subs	r6, r3, r6
    db26:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
    db28:	88e3      	ldrh	r3, [r4, #6]
    db2a:	2b00      	cmp	r3, #0
    db2c:	d1e3      	bne.n	daf6 <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
    db2e:	68e3      	ldr	r3, [r4, #12]
    db30:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
    db32:	4620      	mov	r0, r4
    db34:	f7ff fc94 	bl	d460 <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
    db38:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
    db3a:	2c00      	cmp	r4, #0
    db3c:	d1f4      	bne.n	db28 <os_mbuf_pack_chains+0x90>
    db3e:	e7da      	b.n	daf6 <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
    db40:	4648      	mov	r0, r9
    db42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000db48 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    db48:	2800      	cmp	r0, #0
    db4a:	d031      	beq.n	dbb0 <os_mempool_init_internal+0x68>
{
    db4c:	b430      	push	{r4, r5}
    db4e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    db50:	2a00      	cmp	r2, #0
    db52:	d02f      	beq.n	dbb4 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    db54:	b1bb      	cbz	r3, db86 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    db56:	b113      	cbz	r3, db5e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    db58:	f013 0f03 	tst.w	r3, #3
    db5c:	d12c      	bne.n	dbb8 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    db5e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    db60:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    db62:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    db64:	f89d 000c 	ldrb.w	r0, [sp, #12]
    db68:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    db6a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    db6c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    db6e:	9802      	ldr	r0, [sp, #8]
    db70:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    db72:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    db74:	b199      	cbz	r1, db9e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    db76:	f012 0f03 	tst.w	r2, #3
    db7a:	d002      	beq.n	db82 <os_mempool_init_internal+0x3a>
    db7c:	f022 0203 	bic.w	r2, r2, #3
    db80:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    db82:	2001      	movs	r0, #1
    db84:	e007      	b.n	db96 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    db86:	2900      	cmp	r1, #0
    db88:	d0e5      	beq.n	db56 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    db8a:	2003      	movs	r0, #3
    db8c:	e00e      	b.n	dbac <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    db8e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    db90:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    db92:	3001      	adds	r0, #1
            block_addr += true_block_size;
    db94:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    db96:	4281      	cmp	r1, r0
    db98:	dcf9      	bgt.n	db8e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    db9a:	2200      	movs	r2, #0
    db9c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    db9e:	2000      	movs	r0, #0
    dba0:	6120      	str	r0, [r4, #16]
    dba2:	4b06      	ldr	r3, [pc, #24]	; (dbbc <os_mempool_init_internal+0x74>)
    dba4:	685a      	ldr	r2, [r3, #4]
    dba6:	6014      	str	r4, [r2, #0]
    dba8:	3410      	adds	r4, #16
    dbaa:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    dbac:	bc30      	pop	{r4, r5}
    dbae:	4770      	bx	lr
        return OS_INVALID_PARM;
    dbb0:	2003      	movs	r0, #3
}
    dbb2:	4770      	bx	lr
        return OS_INVALID_PARM;
    dbb4:	2003      	movs	r0, #3
    dbb6:	e7f9      	b.n	dbac <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    dbb8:	2004      	movs	r0, #4
    dbba:	e7f7      	b.n	dbac <os_mempool_init_internal+0x64>
    dbbc:	20000f64 	.word	0x20000f64

0000dbc0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    dbc0:	b510      	push	{r4, lr}
    dbc2:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    dbc4:	2400      	movs	r4, #0
    dbc6:	9401      	str	r4, [sp, #4]
    dbc8:	9c04      	ldr	r4, [sp, #16]
    dbca:	9400      	str	r4, [sp, #0]
    dbcc:	f7ff ffbc 	bl	db48 <os_mempool_init_internal>
}
    dbd0:	b002      	add	sp, #8
    dbd2:	bd10      	pop	{r4, pc}

0000dbd4 <os_mempool_ext_init>:

os_error_t
os_mempool_ext_init(struct os_mempool_ext *mpe, uint16_t blocks,
                    uint32_t block_size, void *membuf, char *name)
{
    dbd4:	b530      	push	{r4, r5, lr}
    dbd6:	b083      	sub	sp, #12
    dbd8:	4604      	mov	r4, r0
    int rc;

    rc = os_mempool_init_internal(&mpe->mpe_mp, blocks, block_size, membuf,
    dbda:	2501      	movs	r5, #1
    dbdc:	9501      	str	r5, [sp, #4]
    dbde:	9d06      	ldr	r5, [sp, #24]
    dbe0:	9500      	str	r5, [sp, #0]
    dbe2:	f7ff ffb1 	bl	db48 <os_mempool_init_internal>
                                  name, OS_MEMPOOL_F_EXT);
    if (rc != 0) {
    dbe6:	b908      	cbnz	r0, dbec <os_mempool_ext_init+0x18>
        return rc;
    }

    mpe->mpe_put_cb = NULL;
    dbe8:	61e0      	str	r0, [r4, #28]
    mpe->mpe_put_arg = NULL;
    dbea:	6220      	str	r0, [r4, #32]

    return 0;
}
    dbec:	b003      	add	sp, #12
    dbee:	bd30      	pop	{r4, r5, pc}

0000dbf0 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
    dbf0:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    dbf2:	6803      	ldr	r3, [r0, #0]
    dbf4:	f013 0f03 	tst.w	r3, #3
    dbf8:	d002      	beq.n	dc00 <os_memblock_from+0x10>
    dbfa:	f023 0303 	bic.w	r3, r3, #3
    dbfe:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
    dc00:	68c4      	ldr	r4, [r0, #12]
    dc02:	8882      	ldrh	r2, [r0, #4]
    dc04:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
    dc08:	428c      	cmp	r4, r1
    dc0a:	d809      	bhi.n	dc20 <os_memblock_from+0x30>
    dc0c:	4291      	cmp	r1, r2
    dc0e:	d20a      	bcs.n	dc26 <os_memblock_from+0x36>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
    dc10:	1b09      	subs	r1, r1, r4
    dc12:	fbb1 f2f3 	udiv	r2, r1, r3
    dc16:	fb03 1112 	mls	r1, r3, r2, r1
    dc1a:	b931      	cbnz	r1, dc2a <os_memblock_from+0x3a>
        return 0;
    }

    return 1;
    dc1c:	2001      	movs	r0, #1
    dc1e:	e000      	b.n	dc22 <os_memblock_from+0x32>
        return 0;
    dc20:	2000      	movs	r0, #0
}
    dc22:	bc10      	pop	{r4}
    dc24:	4770      	bx	lr
        return 0;
    dc26:	2000      	movs	r0, #0
    dc28:	e7fb      	b.n	dc22 <os_memblock_from+0x32>
        return 0;
    dc2a:	2000      	movs	r0, #0
    dc2c:	e7f9      	b.n	dc22 <os_memblock_from+0x32>

0000dc2e <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
    dc2e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    dc30:	4604      	mov	r4, r0
    dc32:	b198      	cbz	r0, dc5c <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    dc34:	f000 fc88 	bl	e548 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    dc38:	88e3      	ldrh	r3, [r4, #6]
    dc3a:	b153      	cbz	r3, dc52 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    dc3c:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    dc3e:	682a      	ldr	r2, [r5, #0]
    dc40:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    dc42:	3b01      	subs	r3, #1
    dc44:	b29b      	uxth	r3, r3
    dc46:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    dc48:	8922      	ldrh	r2, [r4, #8]
    dc4a:	4293      	cmp	r3, r2
    dc4c:	d202      	bcs.n	dc54 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    dc4e:	8123      	strh	r3, [r4, #8]
    dc50:	e000      	b.n	dc54 <os_memblock_get+0x26>
    block = NULL;
    dc52:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    dc54:	f000 fc7e 	bl	e554 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    dc58:	4628      	mov	r0, r5
    dc5a:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    dc5c:	4605      	mov	r5, r0
    return (void *)block;
    dc5e:	e7fb      	b.n	dc58 <os_memblock_get+0x2a>

0000dc60 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    dc60:	b538      	push	{r3, r4, r5, lr}
    dc62:	4604      	mov	r4, r0
    dc64:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    dc66:	f000 fc6f 	bl	e548 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    dc6a:	6963      	ldr	r3, [r4, #20]
    dc6c:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    dc6e:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    dc70:	88e3      	ldrh	r3, [r4, #6]
    dc72:	3301      	adds	r3, #1
    dc74:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    dc76:	f000 fc6d 	bl	e554 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    dc7a:	2000      	movs	r0, #0
    dc7c:	bd38      	pop	{r3, r4, r5, pc}

0000dc7e <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    dc7e:	b178      	cbz	r0, dca0 <os_memblock_put+0x22>
    dc80:	4603      	mov	r3, r0
    dc82:	b179      	cbz	r1, dca4 <os_memblock_put+0x26>
{
    dc84:	b510      	push	{r4, lr}
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    dc86:	7a82      	ldrb	r2, [r0, #10]
    dc88:	f012 0f01 	tst.w	r2, #1
    dc8c:	d004      	beq.n	dc98 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    dc8e:	69c4      	ldr	r4, [r0, #28]
    dc90:	b114      	cbz	r4, dc98 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    dc92:	6a02      	ldr	r2, [r0, #32]
    dc94:	47a0      	blx	r4
            goto done;
    dc96:	e002      	b.n	dc9e <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
    dc98:	4618      	mov	r0, r3
    dc9a:	f7ff ffe1 	bl	dc60 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    dc9e:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
    dca0:	2003      	movs	r0, #3
    dca2:	4770      	bx	lr
    dca4:	2003      	movs	r0, #3
}
    dca6:	4770      	bx	lr

0000dca8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    dca8:	4b02      	ldr	r3, [pc, #8]	; (dcb4 <os_mempool_module_init+0xc>)
    dcaa:	2200      	movs	r2, #0
    dcac:	601a      	str	r2, [r3, #0]
    dcae:	605b      	str	r3, [r3, #4]
}
    dcb0:	4770      	bx	lr
    dcb2:	bf00      	nop
    dcb4:	20000f64 	.word	0x20000f64

0000dcb8 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    dcb8:	4b02      	ldr	r3, [pc, #8]	; (dcc4 <os_msys_find_biggest_pool+0xc>)
    dcba:	6818      	ldr	r0, [r3, #0]
    dcbc:	b108      	cbz	r0, dcc2 <os_msys_find_biggest_pool+0xa>
    dcbe:	6858      	ldr	r0, [r3, #4]
    dcc0:	3808      	subs	r0, #8
}
    dcc2:	4770      	bx	lr
    dcc4:	20000170 	.word	0x20000170

0000dcc8 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
    dcc8:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcca:	4b09      	ldr	r3, [pc, #36]	; (dcf0 <os_msys_find_pool+0x28>)
    dccc:	6819      	ldr	r1, [r3, #0]
    dcce:	4608      	mov	r0, r1
    dcd0:	b120      	cbz	r0, dcdc <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
    dcd2:	8803      	ldrh	r3, [r0, #0]
    dcd4:	4293      	cmp	r3, r2
    dcd6:	d201      	bcs.n	dcdc <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcd8:	6880      	ldr	r0, [r0, #8]
    dcda:	e7f9      	b.n	dcd0 <os_msys_find_pool+0x8>
            break;
        }
    }

    if (!pool) {
    dcdc:	b100      	cbz	r0, dce0 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    dcde:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    dce0:	b119      	cbz	r1, dcea <os_msys_find_pool+0x22>
    dce2:	4b03      	ldr	r3, [pc, #12]	; (dcf0 <os_msys_find_pool+0x28>)
    dce4:	6858      	ldr	r0, [r3, #4]
    dce6:	3808      	subs	r0, #8
    dce8:	4770      	bx	lr
    dcea:	4608      	mov	r0, r1
    return (pool);
    dcec:	e7f7      	b.n	dcde <os_msys_find_pool+0x16>
    dcee:	bf00      	nop
    dcf0:	20000170 	.word	0x20000170

0000dcf4 <os_msys_register>:
{
    dcf4:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcf6:	4b11      	ldr	r3, [pc, #68]	; (dd3c <os_msys_register+0x48>)
    dcf8:	681d      	ldr	r5, [r3, #0]
    dcfa:	462b      	mov	r3, r5
    prev = NULL;
    dcfc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcfe:	b133      	cbz	r3, dd0e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    dd00:	8801      	ldrh	r1, [r0, #0]
    dd02:	881a      	ldrh	r2, [r3, #0]
    dd04:	4291      	cmp	r1, r2
    dd06:	d302      	bcc.n	dd0e <os_msys_register+0x1a>
        prev = pool;
    dd08:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dd0a:	689b      	ldr	r3, [r3, #8]
    dd0c:	e7f7      	b.n	dcfe <os_msys_register+0xa>
    if (prev) {
    dd0e:	b15c      	cbz	r4, dd28 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    dd10:	68a3      	ldr	r3, [r4, #8]
    dd12:	6083      	str	r3, [r0, #8]
    dd14:	b11b      	cbz	r3, dd1e <os_msys_register+0x2a>
    dd16:	60a0      	str	r0, [r4, #8]
}
    dd18:	2000      	movs	r0, #0
    dd1a:	bc30      	pop	{r4, r5}
    dd1c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    dd1e:	f100 0308 	add.w	r3, r0, #8
    dd22:	4a06      	ldr	r2, [pc, #24]	; (dd3c <os_msys_register+0x48>)
    dd24:	6053      	str	r3, [r2, #4]
    dd26:	e7f6      	b.n	dd16 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    dd28:	6085      	str	r5, [r0, #8]
    dd2a:	b115      	cbz	r5, dd32 <os_msys_register+0x3e>
    dd2c:	4b03      	ldr	r3, [pc, #12]	; (dd3c <os_msys_register+0x48>)
    dd2e:	6018      	str	r0, [r3, #0]
    dd30:	e7f2      	b.n	dd18 <os_msys_register+0x24>
    dd32:	f100 0308 	add.w	r3, r0, #8
    dd36:	4a01      	ldr	r2, [pc, #4]	; (dd3c <os_msys_register+0x48>)
    dd38:	6053      	str	r3, [r2, #4]
    dd3a:	e7f7      	b.n	dd2c <os_msys_register+0x38>
    dd3c:	20000170 	.word	0x20000170

0000dd40 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    dd40:	b530      	push	{r4, r5, lr}
    dd42:	b083      	sub	sp, #12
    dd44:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    dd46:	9d07      	ldr	r5, [sp, #28]
    dd48:	9501      	str	r5, [sp, #4]
    dd4a:	9d06      	ldr	r5, [sp, #24]
    dd4c:	9500      	str	r5, [sp, #0]
    dd4e:	f004 fa0d 	bl	1216c <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd52:	b928      	cbnz	r0, dd60 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    dd54:	4620      	mov	r0, r4
    dd56:	f7ff ffcd 	bl	dcf4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd5a:	b970      	cbnz	r0, dd7a <os_msys_init_once+0x3a>
}
    dd5c:	b003      	add	sp, #12
    dd5e:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd60:	f7fe fa1c 	bl	c19c <hal_debugger_connected>
    dd64:	b100      	cbz	r0, dd68 <os_msys_init_once+0x28>
    dd66:	be01      	bkpt	0x0001
    dd68:	2000      	movs	r0, #0
    dd6a:	9000      	str	r0, [sp, #0]
    dd6c:	4b09      	ldr	r3, [pc, #36]	; (dd94 <os_msys_init_once+0x54>)
    dd6e:	681d      	ldr	r5, [r3, #0]
    dd70:	4603      	mov	r3, r0
    dd72:	4602      	mov	r2, r0
    dd74:	4601      	mov	r1, r0
    dd76:	47a8      	blx	r5
    dd78:	e7ec      	b.n	dd54 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd7a:	f7fe fa0f 	bl	c19c <hal_debugger_connected>
    dd7e:	b100      	cbz	r0, dd82 <os_msys_init_once+0x42>
    dd80:	be01      	bkpt	0x0001
    dd82:	2000      	movs	r0, #0
    dd84:	9000      	str	r0, [sp, #0]
    dd86:	4b03      	ldr	r3, [pc, #12]	; (dd94 <os_msys_init_once+0x54>)
    dd88:	681c      	ldr	r4, [r3, #0]
    dd8a:	4603      	mov	r3, r0
    dd8c:	4602      	mov	r2, r0
    dd8e:	4601      	mov	r1, r0
    dd90:	47a0      	blx	r4
}
    dd92:	e7e3      	b.n	dd5c <os_msys_init_once+0x1c>
    dd94:	2000028c 	.word	0x2000028c

0000dd98 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    dd98:	4b02      	ldr	r3, [pc, #8]	; (dda4 <os_msys_reset+0xc>)
    dd9a:	2200      	movs	r2, #0
    dd9c:	601a      	str	r2, [r3, #0]
    dd9e:	605b      	str	r3, [r3, #4]
}
    dda0:	4770      	bx	lr
    dda2:	bf00      	nop
    dda4:	20000170 	.word	0x20000170

0000dda8 <os_msys_get>:
{
    dda8:	b510      	push	{r4, lr}
    ddaa:	460c      	mov	r4, r1
    if (dsize == 0) {
    ddac:	b930      	cbnz	r0, ddbc <os_msys_get+0x14>
        pool = os_msys_find_biggest_pool();
    ddae:	f7ff ff83 	bl	dcb8 <os_msys_find_biggest_pool>
    if (!pool) {
    ddb2:	b110      	cbz	r0, ddba <os_msys_get+0x12>
    m = os_mbuf_get(pool, leadingspace);
    ddb4:	4621      	mov	r1, r4
    ddb6:	f7ff fb23 	bl	d400 <os_mbuf_get>
}
    ddba:	bd10      	pop	{r4, pc}
        pool = os_msys_find_pool(dsize);
    ddbc:	f7ff ff84 	bl	dcc8 <os_msys_find_pool>
    ddc0:	e7f7      	b.n	ddb2 <os_msys_get+0xa>

0000ddc2 <os_msys_get_pkthdr>:
{
    ddc2:	b510      	push	{r4, lr}
    ddc4:	460c      	mov	r4, r1
    if (dsize == 0) {
    ddc6:	b930      	cbnz	r0, ddd6 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    ddc8:	f7ff ff76 	bl	dcb8 <os_msys_find_biggest_pool>
    if (!pool) {
    ddcc:	b110      	cbz	r0, ddd4 <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    ddce:	b2e1      	uxtb	r1, r4
    ddd0:	f7ff fb2d 	bl	d42e <os_mbuf_get_pkthdr>
}
    ddd4:	bd10      	pop	{r4, pc}
    ddd6:	f101 0308 	add.w	r3, r1, #8
    ddda:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    dddc:	4403      	add	r3, r0
    ddde:	b298      	uxth	r0, r3
    dde0:	f7ff ff72 	bl	dcc8 <os_msys_find_pool>
    dde4:	e7f2      	b.n	ddcc <os_msys_get_pkthdr+0xa>
	...

0000dde8 <os_msys_init>:

void
os_msys_init(void)
{
    dde8:	b500      	push	{lr}
    ddea:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    ddec:	f7ff ffd4 	bl	dd98 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    ddf0:	4b06      	ldr	r3, [pc, #24]	; (de0c <os_msys_init+0x24>)
    ddf2:	9301      	str	r3, [sp, #4]
    ddf4:	2370      	movs	r3, #112	; 0x70
    ddf6:	9300      	str	r3, [sp, #0]
    ddf8:	2316      	movs	r3, #22
    ddfa:	4a05      	ldr	r2, [pc, #20]	; (de10 <os_msys_init+0x28>)
    ddfc:	4905      	ldr	r1, [pc, #20]	; (de14 <os_msys_init+0x2c>)
    ddfe:	4806      	ldr	r0, [pc, #24]	; (de18 <os_msys_init+0x30>)
    de00:	f7ff ff9e 	bl	dd40 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    de04:	b003      	add	sp, #12
    de06:	f85d fb04 	ldr.w	pc, [sp], #4
    de0a:	bf00      	nop
    de0c:	0002d860 	.word	0x0002d860
    de10:	2000190c 	.word	0x2000190c
    de14:	20001918 	.word	0x20001918
    de18:	20000f6c 	.word	0x20000f6c

0000de1c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    de1c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    de1e:	4b05      	ldr	r3, [pc, #20]	; (de34 <os_sanity_check_list_lock+0x18>)
    de20:	6818      	ldr	r0, [r3, #0]
    de22:	b900      	cbnz	r0, de26 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    de24:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    de26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    de2a:	4803      	ldr	r0, [pc, #12]	; (de38 <os_sanity_check_list_lock+0x1c>)
    de2c:	f000 fcc4 	bl	e7b8 <os_mutex_pend>
    if (rc != OS_OK) {
    de30:	e7f8      	b.n	de24 <os_sanity_check_list_lock+0x8>
    de32:	bf00      	nop
    de34:	20000f40 	.word	0x20000f40
    de38:	20001938 	.word	0x20001938

0000de3c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    de3c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    de3e:	4b04      	ldr	r3, [pc, #16]	; (de50 <os_sanity_check_list_unlock+0x14>)
    de40:	6818      	ldr	r0, [r3, #0]
    de42:	b900      	cbnz	r0, de46 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    de44:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    de46:	4803      	ldr	r0, [pc, #12]	; (de54 <os_sanity_check_list_unlock+0x18>)
    de48:	f000 fc56 	bl	e6f8 <os_mutex_release>
    if (rc != 0) {
    de4c:	e7fa      	b.n	de44 <os_sanity_check_list_unlock+0x8>
    de4e:	bf00      	nop
    de50:	20000f40 	.word	0x20000f40
    de54:	20001938 	.word	0x20001938

0000de58 <os_sanity_check_init>:
{
    de58:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    de5a:	2000      	movs	r0, #0
    de5c:	6018      	str	r0, [r3, #0]
    de5e:	6058      	str	r0, [r3, #4]
    de60:	6098      	str	r0, [r3, #8]
    de62:	60d8      	str	r0, [r3, #12]
    de64:	6118      	str	r0, [r3, #16]
}
    de66:	4770      	bx	lr

0000de68 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    de68:	b510      	push	{r4, lr}
    de6a:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    de6c:	f7ff ffd6 	bl	de1c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    de70:	b100      	cbz	r0, de74 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    de72:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    de74:	4b03      	ldr	r3, [pc, #12]	; (de84 <os_sanity_check_register+0x1c>)
    de76:	681a      	ldr	r2, [r3, #0]
    de78:	6122      	str	r2, [r4, #16]
    de7a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    de7c:	f7ff ffde 	bl	de3c <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    de80:	e7f7      	b.n	de72 <os_sanity_check_register+0xa>
    de82:	bf00      	nop
    de84:	20001934 	.word	0x20001934

0000de88 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    de88:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    de8a:	f7ff ffc7 	bl	de1c <os_sanity_check_list_lock>
    if (rc != 0) {
    de8e:	b910      	cbnz	r0, de96 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    de90:	4b1d      	ldr	r3, [pc, #116]	; (df08 <os_sanity_run+0x80>)
    de92:	681c      	ldr	r4, [r3, #0]
    de94:	e012      	b.n	debc <os_sanity_run+0x34>
        assert(0);
    de96:	f7fe f981 	bl	c19c <hal_debugger_connected>
    de9a:	b100      	cbz	r0, de9e <os_sanity_run+0x16>
    de9c:	be01      	bkpt	0x0001
    de9e:	2300      	movs	r3, #0
    dea0:	461a      	mov	r2, r3
    dea2:	4619      	mov	r1, r3
    dea4:	4618      	mov	r0, r3
    dea6:	f7fe fe7d 	bl	cba4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    deaa:	f000 fa87 	bl	e3bc <os_time_get>
    deae:	6823      	ldr	r3, [r4, #0]
    deb0:	6862      	ldr	r2, [r4, #4]
    deb2:	4413      	add	r3, r2
    deb4:	1ac0      	subs	r0, r0, r3
    deb6:	2800      	cmp	r0, #0
    deb8:	dc0d      	bgt.n	ded6 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    deba:	6924      	ldr	r4, [r4, #16]
    debc:	b1ac      	cbz	r4, deea <os_sanity_run+0x62>
        if (sc->sc_func) {
    debe:	68a3      	ldr	r3, [r4, #8]
    dec0:	2b00      	cmp	r3, #0
    dec2:	d0f2      	beq.n	deaa <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    dec4:	68e1      	ldr	r1, [r4, #12]
    dec6:	4620      	mov	r0, r4
    dec8:	4798      	blx	r3
            if (rc == OS_OK) {
    deca:	2800      	cmp	r0, #0
    decc:	d1ed      	bne.n	deaa <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    dece:	f000 fa75 	bl	e3bc <os_time_get>
    ded2:	6020      	str	r0, [r4, #0]
                continue;
    ded4:	e7f1      	b.n	deba <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    ded6:	f7fe f961 	bl	c19c <hal_debugger_connected>
    deda:	b100      	cbz	r0, dede <os_sanity_run+0x56>
    dedc:	be01      	bkpt	0x0001
    dede:	2300      	movs	r3, #0
    dee0:	461a      	mov	r2, r3
    dee2:	4619      	mov	r1, r3
    dee4:	4618      	mov	r0, r3
    dee6:	f7fe fe5d 	bl	cba4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    deea:	f7ff ffa7 	bl	de3c <os_sanity_check_list_unlock>
    if (rc != 0) {
    deee:	b900      	cbnz	r0, def2 <os_sanity_run+0x6a>
        assert(0);
    }
}
    def0:	bd10      	pop	{r4, pc}
        assert(0);
    def2:	f7fe f953 	bl	c19c <hal_debugger_connected>
    def6:	b100      	cbz	r0, defa <os_sanity_run+0x72>
    def8:	be01      	bkpt	0x0001
    defa:	2300      	movs	r3, #0
    defc:	461a      	mov	r2, r3
    defe:	4619      	mov	r1, r3
    df00:	4618      	mov	r0, r3
    df02:	f7fe fe4f 	bl	cba4 <__assert_func>
    df06:	bf00      	nop
    df08:	20001934 	.word	0x20001934

0000df0c <os_sanity_init>:

int
os_sanity_init(void)
{
    df0c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    df0e:	4802      	ldr	r0, [pc, #8]	; (df18 <os_sanity_init+0xc>)
    df10:	f000 fbe8 	bl	e6e4 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    df14:	bd08      	pop	{r3, pc}
    df16:	bf00      	nop
    df18:	20001938 	.word	0x20001938

0000df1c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    df1c:	7b03      	ldrb	r3, [r0, #12]
    df1e:	2b01      	cmp	r3, #1
    df20:	d001      	beq.n	df26 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    df22:	2002      	movs	r0, #2
}
    df24:	4770      	bx	lr
{
    df26:	b510      	push	{r4, lr}
    df28:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    df2a:	f000 fb0d 	bl	e548 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    df2e:	4b0f      	ldr	r3, [pc, #60]	; (df6c <os_sched_insert+0x50>)
    df30:	681b      	ldr	r3, [r3, #0]
    df32:	b12b      	cbz	r3, df40 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    df34:	7ae1      	ldrb	r1, [r4, #11]
    df36:	7ada      	ldrb	r2, [r3, #11]
    df38:	4291      	cmp	r1, r2
    df3a:	d301      	bcc.n	df40 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    df3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    df3e:	e7f8      	b.n	df32 <os_sched_insert+0x16>
    if (entry) {
    df40:	b153      	cbz	r3, df58 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    df42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    df44:	64a2      	str	r2, [r4, #72]	; 0x48
    df46:	6463      	str	r3, [r4, #68]	; 0x44
    df48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    df4a:	6014      	str	r4, [r2, #0]
    df4c:	3444      	adds	r4, #68	; 0x44
    df4e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    df50:	f000 fb00 	bl	e554 <os_arch_restore_sr>
    return (0);
    df54:	2000      	movs	r0, #0
}
    df56:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    df58:	2300      	movs	r3, #0
    df5a:	6463      	str	r3, [r4, #68]	; 0x44
    df5c:	4b03      	ldr	r3, [pc, #12]	; (df6c <os_sched_insert+0x50>)
    df5e:	685a      	ldr	r2, [r3, #4]
    df60:	64a2      	str	r2, [r4, #72]	; 0x48
    df62:	6014      	str	r4, [r2, #0]
    df64:	3444      	adds	r4, #68	; 0x44
    df66:	605c      	str	r4, [r3, #4]
    df68:	e7f2      	b.n	df50 <os_sched_insert+0x34>
    df6a:	bf00      	nop
    df6c:	20000178 	.word	0x20000178

0000df70 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    df70:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    df72:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    df74:	3301      	adds	r3, #1
    df76:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    df78:	4b06      	ldr	r3, [pc, #24]	; (df94 <os_sched_ctx_sw_hook+0x24>)
    df7a:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    df7c:	4b06      	ldr	r3, [pc, #24]	; (df98 <os_sched_ctx_sw_hook+0x28>)
    df7e:	681c      	ldr	r4, [r3, #0]
    df80:	4906      	ldr	r1, [pc, #24]	; (df9c <os_sched_ctx_sw_hook+0x2c>)
    df82:	680b      	ldr	r3, [r1, #0]
    df84:	1ac2      	subs	r2, r0, r3
    df86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    df88:	4413      	add	r3, r2
    df8a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    df8c:	6008      	str	r0, [r1, #0]
}
    df8e:	bc10      	pop	{r4}
    df90:	4770      	bx	lr
    df92:	bf00      	nop
    df94:	20001988 	.word	0x20001988
    df98:	20001944 	.word	0x20001944
    df9c:	20001948 	.word	0x20001948

0000dfa0 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    dfa0:	4b01      	ldr	r3, [pc, #4]	; (dfa8 <os_sched_get_current_task+0x8>)
    dfa2:	6818      	ldr	r0, [r3, #0]
    dfa4:	4770      	bx	lr
    dfa6:	bf00      	nop
    dfa8:	20001944 	.word	0x20001944

0000dfac <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    dfac:	4b01      	ldr	r3, [pc, #4]	; (dfb4 <os_sched_set_current_task+0x8>)
    dfae:	6018      	str	r0, [r3, #0]
}
    dfb0:	4770      	bx	lr
    dfb2:	bf00      	nop
    dfb4:	20001944 	.word	0x20001944

0000dfb8 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    dfb8:	b538      	push	{r3, r4, r5, lr}
    dfba:	4604      	mov	r4, r0
    dfbc:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    dfbe:	6c43      	ldr	r3, [r0, #68]	; 0x44
    dfc0:	b183      	cbz	r3, dfe4 <os_sched_sleep+0x2c>
    dfc2:	6c82      	ldr	r2, [r0, #72]	; 0x48
    dfc4:	649a      	str	r2, [r3, #72]	; 0x48
    dfc6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    dfc8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    dfca:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    dfcc:	2302      	movs	r3, #2
    dfce:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    dfd0:	f000 f9f4 	bl	e3bc <os_time_get>
    dfd4:	4428      	add	r0, r5
    dfd6:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    dfd8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    dfdc:	d006      	beq.n	dfec <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    dfde:	4b18      	ldr	r3, [pc, #96]	; (e040 <os_sched_sleep+0x88>)
    dfe0:	681b      	ldr	r3, [r3, #0]
    dfe2:	e011      	b.n	e008 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    dfe4:	6c82      	ldr	r2, [r0, #72]	; 0x48
    dfe6:	4b17      	ldr	r3, [pc, #92]	; (e044 <os_sched_sleep+0x8c>)
    dfe8:	605a      	str	r2, [r3, #4]
    dfea:	e7ec      	b.n	dfc6 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    dfec:	7b63      	ldrb	r3, [r4, #13]
    dfee:	f043 0301 	orr.w	r3, r3, #1
    dff2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    dff4:	2300      	movs	r3, #0
    dff6:	6463      	str	r3, [r4, #68]	; 0x44
    dff8:	4b11      	ldr	r3, [pc, #68]	; (e040 <os_sched_sleep+0x88>)
    dffa:	685a      	ldr	r2, [r3, #4]
    dffc:	64a2      	str	r2, [r4, #72]	; 0x48
    dffe:	6014      	str	r4, [r2, #0]
    e000:	3444      	adds	r4, #68	; 0x44
    e002:	605c      	str	r4, [r3, #4]
    e004:	e011      	b.n	e02a <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    e006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e008:	b13b      	cbz	r3, e01a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    e00a:	7b5a      	ldrb	r2, [r3, #13]
    e00c:	f012 0f01 	tst.w	r2, #1
    e010:	d103      	bne.n	e01a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    e012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    e014:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    e016:	2a00      	cmp	r2, #0
    e018:	ddf5      	ble.n	e006 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    e01a:	b143      	cbz	r3, e02e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    e01c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e01e:	64a2      	str	r2, [r4, #72]	; 0x48
    e020:	6463      	str	r3, [r4, #68]	; 0x44
    e022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e024:	6014      	str	r4, [r2, #0]
    e026:	3444      	adds	r4, #68	; 0x44
    e028:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    e02a:	2000      	movs	r0, #0
    e02c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    e02e:	2300      	movs	r3, #0
    e030:	6463      	str	r3, [r4, #68]	; 0x44
    e032:	4b03      	ldr	r3, [pc, #12]	; (e040 <os_sched_sleep+0x88>)
    e034:	685a      	ldr	r2, [r3, #4]
    e036:	64a2      	str	r2, [r4, #72]	; 0x48
    e038:	6014      	str	r4, [r2, #0]
    e03a:	3444      	adds	r4, #68	; 0x44
    e03c:	605c      	str	r4, [r3, #4]
    e03e:	e7f4      	b.n	e02a <os_sched_sleep+0x72>
    e040:	20000180 	.word	0x20000180
    e044:	20000178 	.word	0x20000178

0000e048 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    e048:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    e04a:	7b03      	ldrb	r3, [r0, #12]
    e04c:	2b02      	cmp	r3, #2
    e04e:	d121      	bne.n	e094 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    e050:	69c2      	ldr	r2, [r0, #28]
    e052:	b162      	cbz	r2, e06e <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    e054:	6813      	ldr	r3, [r2, #0]
    e056:	b33b      	cbz	r3, e0a8 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    e058:	4283      	cmp	r3, r0
    e05a:	d02f      	beq.n	e0bc <os_sched_wakeup+0x74>
    e05c:	461a      	mov	r2, r3
    e05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e060:	4283      	cmp	r3, r0
    e062:	d1fb      	bne.n	e05c <os_sched_wakeup+0x14>
    e064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e066:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    e068:	2300      	movs	r3, #0
    e06a:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    e06c:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    e06e:	2301      	movs	r3, #1
    e070:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    e072:	2300      	movs	r3, #0
    e074:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    e076:	7b43      	ldrb	r3, [r0, #13]
    e078:	f023 0301 	bic.w	r3, r3, #1
    e07c:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e07e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e080:	b1fb      	cbz	r3, e0c2 <os_sched_wakeup+0x7a>
    e082:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e084:	649a      	str	r2, [r3, #72]	; 0x48
    e086:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e088:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e08a:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    e08c:	f7ff ff46 	bl	df1c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    e090:	2000      	movs	r0, #0
    e092:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    e094:	f7fe f882 	bl	c19c <hal_debugger_connected>
    e098:	b100      	cbz	r0, e09c <os_sched_wakeup+0x54>
    e09a:	be01      	bkpt	0x0001
    e09c:	2300      	movs	r3, #0
    e09e:	461a      	mov	r2, r3
    e0a0:	4619      	mov	r1, r3
    e0a2:	4618      	mov	r0, r3
    e0a4:	f7fe fd7e 	bl	cba4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    e0a8:	f7fe f878 	bl	c19c <hal_debugger_connected>
    e0ac:	b100      	cbz	r0, e0b0 <os_sched_wakeup+0x68>
    e0ae:	be01      	bkpt	0x0001
    e0b0:	2300      	movs	r3, #0
    e0b2:	461a      	mov	r2, r3
    e0b4:	4619      	mov	r1, r3
    e0b6:	4618      	mov	r0, r3
    e0b8:	f7fe fd74 	bl	cba4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    e0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e0be:	6013      	str	r3, [r2, #0]
    e0c0:	e7d2      	b.n	e068 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e0c2:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e0c4:	4b01      	ldr	r3, [pc, #4]	; (e0cc <os_sched_wakeup+0x84>)
    e0c6:	605a      	str	r2, [r3, #4]
    e0c8:	e7dd      	b.n	e086 <os_sched_wakeup+0x3e>
    e0ca:	bf00      	nop
    e0cc:	20000180 	.word	0x20000180

0000e0d0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    e0d0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    e0d2:	f000 f973 	bl	e3bc <os_time_get>
    e0d6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    e0d8:	f000 fa36 	bl	e548 <os_arch_save_sr>
    e0dc:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    e0de:	4b0a      	ldr	r3, [pc, #40]	; (e108 <os_sched_os_timer_exp+0x38>)
    e0e0:	6818      	ldr	r0, [r3, #0]
    while (t) {
    e0e2:	e002      	b.n	e0ea <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    e0e4:	f7ff ffb0 	bl	e048 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    e0e8:	4620      	mov	r0, r4
    while (t) {
    e0ea:	b140      	cbz	r0, e0fe <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    e0ec:	7b43      	ldrb	r3, [r0, #13]
    e0ee:	f013 0f01 	tst.w	r3, #1
    e0f2:	d104      	bne.n	e0fe <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    e0f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    e0f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e0f8:	1aeb      	subs	r3, r5, r3
    e0fa:	2b00      	cmp	r3, #0
    e0fc:	daf2      	bge.n	e0e4 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    e0fe:	4630      	mov	r0, r6
    e100:	f000 fa28 	bl	e554 <os_arch_restore_sr>
}
    e104:	bd70      	pop	{r4, r5, r6, pc}
    e106:	bf00      	nop
    e108:	20000180 	.word	0x20000180

0000e10c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    e10c:	b510      	push	{r4, lr}
    e10e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    e110:	f000 fa23 	bl	e55a <os_arch_in_critical>
    e114:	b150      	cbz	r0, e12c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    e116:	4b0e      	ldr	r3, [pc, #56]	; (e150 <os_sched_wakeup_ticks+0x44>)
    e118:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    e11a:	b19b      	cbz	r3, e144 <os_sched_wakeup_ticks+0x38>
    e11c:	7b5a      	ldrb	r2, [r3, #13]
    e11e:	f012 0f01 	tst.w	r2, #1
    e122:	d112      	bne.n	e14a <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    e124:	6b58      	ldr	r0, [r3, #52]	; 0x34
    e126:	1b00      	subs	r0, r0, r4
    e128:	d40a      	bmi.n	e140 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    e12a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    e12c:	f7fe f836 	bl	c19c <hal_debugger_connected>
    e130:	b100      	cbz	r0, e134 <os_sched_wakeup_ticks+0x28>
    e132:	be01      	bkpt	0x0001
    e134:	2300      	movs	r3, #0
    e136:	461a      	mov	r2, r3
    e138:	4619      	mov	r1, r3
    e13a:	4618      	mov	r0, r3
    e13c:	f7fe fd32 	bl	cba4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    e140:	2000      	movs	r0, #0
    e142:	e7f2      	b.n	e12a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    e144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e148:	e7ef      	b.n	e12a <os_sched_wakeup_ticks+0x1e>
    e14a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    e14e:	e7ec      	b.n	e12a <os_sched_wakeup_ticks+0x1e>
    e150:	20000180 	.word	0x20000180

0000e154 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    e154:	4b01      	ldr	r3, [pc, #4]	; (e15c <os_sched_next_task+0x8>)
    e156:	6818      	ldr	r0, [r3, #0]
    e158:	4770      	bx	lr
    e15a:	bf00      	nop
    e15c:	20000178 	.word	0x20000178

0000e160 <os_sched>:
{
    e160:	b538      	push	{r3, r4, r5, lr}
    e162:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    e164:	f000 f9f0 	bl	e548 <os_arch_save_sr>
    e168:	4605      	mov	r5, r0
    if (!next_t) {
    e16a:	b134      	cbz	r4, e17a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    e16c:	4620      	mov	r0, r4
    e16e:	f000 f9e1 	bl	e534 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    e172:	4628      	mov	r0, r5
    e174:	f000 f9ee 	bl	e554 <os_arch_restore_sr>
}
    e178:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    e17a:	f7ff ffeb 	bl	e154 <os_sched_next_task>
    e17e:	4604      	mov	r4, r0
    e180:	e7f4      	b.n	e16c <os_sched+0xc>
	...

0000e184 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    e184:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    e186:	7b03      	ldrb	r3, [r0, #12]
    e188:	2b01      	cmp	r3, #1
    e18a:	d000      	beq.n	e18e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    e18c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e18e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e190:	b13b      	cbz	r3, e1a2 <os_sched_resort+0x1e>
    e192:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e194:	649a      	str	r2, [r3, #72]	; 0x48
    e196:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e198:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e19a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    e19c:	f7ff febe 	bl	df1c <os_sched_insert>
}
    e1a0:	e7f4      	b.n	e18c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e1a2:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e1a4:	4b01      	ldr	r3, [pc, #4]	; (e1ac <os_sched_resort+0x28>)
    e1a6:	605a      	str	r2, [r3, #4]
    e1a8:	e7f5      	b.n	e196 <os_sched_resort+0x12>
    e1aa:	bf00      	nop
    e1ac:	20000178 	.word	0x20000178

0000e1b0 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    e1b0:	2300      	movs	r3, #0
    e1b2:	428b      	cmp	r3, r1
    e1b4:	da04      	bge.n	e1c0 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
    e1b6:	4a03      	ldr	r2, [pc, #12]	; (e1c4 <_clear_stack+0x14>)
    e1b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    e1bc:	3301      	adds	r3, #1
    e1be:	e7f8      	b.n	e1b2 <_clear_stack+0x2>
    }
}
    e1c0:	4770      	bx	lr
    e1c2:	bf00      	nop
    e1c4:	deadbeef 	.word	0xdeadbeef

0000e1c8 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    e1c8:	6843      	ldr	r3, [r0, #4]
    e1ca:	8900      	ldrh	r0, [r0, #8]
}
    e1cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e1d0:	4770      	bx	lr
	...

0000e1d4 <os_task_init>:
{
    e1d4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    e1d8:	4604      	mov	r4, r0
    e1da:	460d      	mov	r5, r1
    e1dc:	4617      	mov	r7, r2
    e1de:	461e      	mov	r6, r3
    e1e0:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    e1e4:	2250      	movs	r2, #80	; 0x50
    e1e6:	2100      	movs	r1, #0
    e1e8:	f000 fc0b 	bl	ea02 <memset>
    t->t_func = func;
    e1ec:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    e1ee:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    e1f0:	f000 f9aa 	bl	e548 <os_arch_save_sr>
    rc = g_task_id;
    e1f4:	4b2e      	ldr	r3, [pc, #184]	; (e2b0 <os_task_init+0xdc>)
    e1f6:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    e1f8:	1c72      	adds	r2, r6, #1
    e1fa:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    e1fc:	f000 f9aa 	bl	e554 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    e200:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    e202:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e206:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    e208:	2301      	movs	r3, #1
    e20a:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    e20c:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    e20e:	2300      	movs	r3, #0
    e210:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    e212:	f104 0620 	add.w	r6, r4, #32
    e216:	4630      	mov	r0, r6
    e218:	f7ff fe1e 	bl	de58 <os_sanity_check_init>
    if (rc != OS_OK) {
    e21c:	4605      	mov	r5, r0
    e21e:	2800      	cmp	r0, #0
    e220:	d139      	bne.n	e296 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    e222:	9b07      	ldr	r3, [sp, #28]
    e224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e228:	d005      	beq.n	e236 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
    e22a:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    e22c:	4630      	mov	r0, r6
    e22e:	f7ff fe1b 	bl	de68 <os_sanity_check_register>
        if (rc != OS_OK) {
    e232:	4605      	mov	r5, r0
    e234:	bb78      	cbnz	r0, e296 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    e236:	4649      	mov	r1, r9
    e238:	9808      	ldr	r0, [sp, #32]
    e23a:	f7ff ffb9 	bl	e1b0 <_clear_stack>
    t->t_stackbottom = stack_bottom;
    e23e:	9b08      	ldr	r3, [sp, #32]
    e240:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    e242:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    e246:	4620      	mov	r0, r4
    e248:	f7ff ffbe 	bl	e1c8 <os_task_stacktop_get>
    e24c:	4601      	mov	r1, r0
    e24e:	464a      	mov	r2, r9
    e250:	4620      	mov	r0, r4
    e252:	f000 f987 	bl	e564 <os_arch_task_stack_init>
    e256:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    e258:	4b16      	ldr	r3, [pc, #88]	; (e2b4 <os_task_init+0xe0>)
    e25a:	681b      	ldr	r3, [r3, #0]
    e25c:	b17b      	cbz	r3, e27e <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    e25e:	7ae1      	ldrb	r1, [r4, #11]
    e260:	7ada      	ldrb	r2, [r3, #11]
    e262:	4291      	cmp	r1, r2
    e264:	d001      	beq.n	e26a <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    e266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e268:	e7f8      	b.n	e25c <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    e26a:	f7fd ff97 	bl	c19c <hal_debugger_connected>
    e26e:	b100      	cbz	r0, e272 <os_task_init+0x9e>
    e270:	be01      	bkpt	0x0001
    e272:	2300      	movs	r3, #0
    e274:	461a      	mov	r2, r3
    e276:	4619      	mov	r1, r3
    e278:	4618      	mov	r0, r3
    e27a:	f7fe fc93 	bl	cba4 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    e27e:	6423      	str	r3, [r4, #64]	; 0x40
    e280:	4b0c      	ldr	r3, [pc, #48]	; (e2b4 <os_task_init+0xe0>)
    e282:	685a      	ldr	r2, [r3, #4]
    e284:	6014      	str	r4, [r2, #0]
    e286:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e28a:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    e28c:	4620      	mov	r0, r4
    e28e:	f7ff fe45 	bl	df1c <os_sched_insert>
    e292:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    e294:	b110      	cbz	r0, e29c <os_task_init+0xc8>
}
    e296:	4628      	mov	r0, r5
    e298:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    e29c:	f7fe fd42 	bl	cd24 <os_started>
    e2a0:	b908      	cbnz	r0, e2a6 <os_task_init+0xd2>
    return (0);
    e2a2:	4605      	mov	r5, r0
    e2a4:	e7f7      	b.n	e296 <os_task_init+0xc2>
        os_sched(NULL);
    e2a6:	2000      	movs	r0, #0
    e2a8:	f7ff ff5a 	bl	e160 <os_sched>
    e2ac:	e7f3      	b.n	e296 <os_task_init+0xc2>
    e2ae:	bf00      	nop
    e2b0:	20001954 	.word	0x20001954
    e2b4:	2000194c 	.word	0x2000194c

0000e2b8 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
    e2b8:	b570      	push	{r4, r5, r6, lr}
    e2ba:	4606      	mov	r6, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
    e2bc:	7ac3      	ldrb	r3, [r0, #11]
    e2be:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
    e2c0:	7a83      	ldrb	r3, [r0, #10]
    e2c2:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
    e2c4:	7b03      	ldrb	r3, [r0, #12]
    e2c6:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
    e2c8:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
    e2ca:	8905      	ldrh	r5, [r0, #8]
    e2cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    while (bottom < top) {
    e2d0:	42ab      	cmp	r3, r5
    e2d2:	d205      	bcs.n	e2e0 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
    e2d4:	681c      	ldr	r4, [r3, #0]
    e2d6:	4a0e      	ldr	r2, [pc, #56]	; (e310 <os_task_info_get+0x58>)
    e2d8:	4294      	cmp	r4, r2
    e2da:	d101      	bne.n	e2e0 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
    e2dc:	3304      	adds	r3, #4
    e2de:	e7f7      	b.n	e2d0 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
    e2e0:	1aeb      	subs	r3, r5, r3
    e2e2:	f3c3 038f 	ubfx	r3, r3, #2, #16
    e2e6:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
    e2e8:	8933      	ldrh	r3, [r6, #8]
    e2ea:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
    e2ec:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    e2ee:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
    e2f0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e2f2:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
    e2f4:	6a33      	ldr	r3, [r6, #32]
    e2f6:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                            task->t_sanity_check.sc_checkin_itvl;
    e2f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    e2fa:	4413      	add	r3, r2
    e2fc:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
    e2fe:	4608      	mov	r0, r1
    e300:	2300      	movs	r3, #0
    e302:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
    e306:	221f      	movs	r2, #31
    e308:	6931      	ldr	r1, [r6, #16]
    e30a:	f000 fba9 	bl	ea60 <strncat>
}
    e30e:	bd70      	pop	{r4, r5, r6, pc}
    e310:	deadbeef 	.word	0xdeadbeef

0000e314 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    e314:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    e316:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    e318:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    e31c:	e9d1 4500 	ldrd	r4, r5, [r1]
    e320:	18e4      	adds	r4, r4, r3
    e322:	f145 0500 	adc.w	r5, r5, #0
    e326:	e9c2 4500 	strd	r4, r5, [r2]
    e32a:	688b      	ldr	r3, [r1, #8]
    e32c:	f641 6184 	movw	r1, #7812	; 0x1e84
    e330:	fb01 3000 	mla	r0, r1, r0, r3
    e334:	6090      	str	r0, [r2, #8]
    e336:	4b07      	ldr	r3, [pc, #28]	; (e354 <os_deltatime+0x40>)
    e338:	4298      	cmp	r0, r3
    e33a:	dd09      	ble.n	e350 <os_deltatime+0x3c>
    e33c:	1c61      	adds	r1, r4, #1
    e33e:	f145 0300 	adc.w	r3, r5, #0
    e342:	6011      	str	r1, [r2, #0]
    e344:	6053      	str	r3, [r2, #4]
    e346:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    e34a:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    e34e:	6090      	str	r0, [r2, #8]
}
    e350:	bc30      	pop	{r4, r5}
    e352:	4770      	bx	lr
    e354:	000f423f 	.word	0x000f423f

0000e358 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    e358:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    e35a:	1e04      	subs	r4, r0, #0
    e35c:	db0d      	blt.n	e37a <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    e35e:	f000 f8f3 	bl	e548 <os_arch_save_sr>
    e362:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    e364:	4913      	ldr	r1, [pc, #76]	; (e3b4 <os_time_tick+0x5c>)
    e366:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    e368:	18a3      	adds	r3, r4, r2
    e36a:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    e36c:	ea93 0f02 	teq	r3, r2
    e370:	d40d      	bmi.n	e38e <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    e372:	4628      	mov	r0, r5
    e374:	f000 f8ee 	bl	e554 <os_arch_restore_sr>
}
    e378:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    e37a:	f7fd ff0f 	bl	c19c <hal_debugger_connected>
    e37e:	b100      	cbz	r0, e382 <os_time_tick+0x2a>
    e380:	be01      	bkpt	0x0001
    e382:	2300      	movs	r3, #0
    e384:	461a      	mov	r2, r3
    e386:	4619      	mov	r1, r3
    e388:	4618      	mov	r0, r3
    e38a:	f7fe fc0b 	bl	cba4 <__assert_func>
        delta = g_os_time - basetod.ostime;
    e38e:	4e0a      	ldr	r6, [pc, #40]	; (e3b8 <os_time_tick+0x60>)
    e390:	4631      	mov	r1, r6
    e392:	f851 4b08 	ldr.w	r4, [r1], #8
    e396:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    e398:	460a      	mov	r2, r1
    e39a:	4620      	mov	r0, r4
    e39c:	f7ff ffba 	bl	e314 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    e3a0:	f106 0118 	add.w	r1, r6, #24
    e3a4:	460a      	mov	r2, r1
    e3a6:	4620      	mov	r0, r4
    e3a8:	f7ff ffb4 	bl	e314 <os_deltatime>
        basetod.ostime = g_os_time;
    e3ac:	4b01      	ldr	r3, [pc, #4]	; (e3b4 <os_time_tick+0x5c>)
    e3ae:	681b      	ldr	r3, [r3, #0]
    e3b0:	6033      	str	r3, [r6, #0]
    e3b2:	e7de      	b.n	e372 <os_time_tick+0x1a>
    e3b4:	20001988 	.word	0x20001988
    e3b8:	20001958 	.word	0x20001958

0000e3bc <os_time_get>:
}
    e3bc:	4b01      	ldr	r3, [pc, #4]	; (e3c4 <os_time_get+0x8>)
    e3be:	6818      	ldr	r0, [r3, #0]
    e3c0:	4770      	bx	lr
    e3c2:	bf00      	nop
    e3c4:	20001988 	.word	0x20001988

0000e3c8 <os_time_advance>:

void
os_time_advance(int ticks)
{
    e3c8:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    e3ca:	1e04      	subs	r4, r0, #0
    e3cc:	db02      	blt.n	e3d4 <os_time_advance+0xc>

    if (ticks > 0) {
    e3ce:	2c00      	cmp	r4, #0
    e3d0:	dc0a      	bgt.n	e3e8 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    e3d2:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    e3d4:	f7fd fee2 	bl	c19c <hal_debugger_connected>
    e3d8:	b100      	cbz	r0, e3dc <os_time_advance+0x14>
    e3da:	be01      	bkpt	0x0001
    e3dc:	2300      	movs	r3, #0
    e3de:	461a      	mov	r2, r3
    e3e0:	4619      	mov	r1, r3
    e3e2:	4618      	mov	r0, r3
    e3e4:	f7fe fbde 	bl	cba4 <__assert_func>
        if (!os_started()) {
    e3e8:	f7fe fc9c 	bl	cd24 <os_started>
    e3ec:	b920      	cbnz	r0, e3f8 <os_time_advance+0x30>
            g_os_time += ticks;
    e3ee:	4b08      	ldr	r3, [pc, #32]	; (e410 <os_time_advance+0x48>)
    e3f0:	6818      	ldr	r0, [r3, #0]
    e3f2:	4420      	add	r0, r4
    e3f4:	6018      	str	r0, [r3, #0]
    e3f6:	e7ec      	b.n	e3d2 <os_time_advance+0xa>
            os_time_tick(ticks);
    e3f8:	4620      	mov	r0, r4
    e3fa:	f7ff ffad 	bl	e358 <os_time_tick>
            os_callout_tick();
    e3fe:	f7fe fdeb 	bl	cfd8 <os_callout_tick>
            os_sched_os_timer_exp();
    e402:	f7ff fe65 	bl	e0d0 <os_sched_os_timer_exp>
            os_sched(NULL);
    e406:	2000      	movs	r0, #0
    e408:	f7ff feaa 	bl	e160 <os_sched>
}
    e40c:	e7e1      	b.n	e3d2 <os_time_advance+0xa>
    e40e:	bf00      	nop
    e410:	20001988 	.word	0x20001988

0000e414 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    e414:	b900      	cbnz	r0, e418 <os_time_delay+0x4>
    e416:	4770      	bx	lr
{
    e418:	b538      	push	{r3, r4, r5, lr}
    e41a:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    e41c:	f000 f894 	bl	e548 <os_arch_save_sr>
    e420:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    e422:	f7ff fdbd 	bl	dfa0 <os_sched_get_current_task>
    e426:	4621      	mov	r1, r4
    e428:	f7ff fdc6 	bl	dfb8 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    e42c:	4628      	mov	r0, r5
    e42e:	f000 f891 	bl	e554 <os_arch_restore_sr>
        os_sched(NULL);
    e432:	2000      	movs	r0, #0
    e434:	f7ff fe94 	bl	e160 <os_sched>
    }
}
    e438:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e43c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    e43c:	b570      	push	{r4, r5, r6, lr}
    e43e:	4605      	mov	r5, r0
    e440:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    e442:	f000 f881 	bl	e548 <os_arch_save_sr>
    e446:	4606      	mov	r6, r0
    if (tv != NULL) {
    e448:	b145      	cbz	r5, e45c <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    e44a:	f7ff ffb7 	bl	e3bc <os_time_get>
    e44e:	4908      	ldr	r1, [pc, #32]	; (e470 <os_gettimeofday+0x34>)
    e450:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    e454:	462a      	mov	r2, r5
    e456:	1ac0      	subs	r0, r0, r3
    e458:	f7ff ff5c 	bl	e314 <os_deltatime>
    }

    if (tz != NULL) {
    e45c:	b114      	cbz	r4, e464 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    e45e:	4b04      	ldr	r3, [pc, #16]	; (e470 <os_gettimeofday+0x34>)
    e460:	6a98      	ldr	r0, [r3, #40]	; 0x28
    e462:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    e464:	4630      	mov	r0, r6
    e466:	f000 f875 	bl	e554 <os_arch_restore_sr>

    return (0);
}
    e46a:	2000      	movs	r0, #0
    e46c:	bd70      	pop	{r4, r5, r6, pc}
    e46e:	bf00      	nop
    e470:	20001958 	.word	0x20001958

0000e474 <os_get_uptime>:
    return basetod.utctime.tv_sec > 0;
}

void
os_get_uptime(struct os_timeval *tvp)
{
    e474:	b5f0      	push	{r4, r5, r6, r7, lr}
    e476:	b085      	sub	sp, #20
    e478:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    e47a:	f000 f865 	bl	e548 <os_arch_save_sr>
    e47e:	4607      	mov	r7, r0
  tv = basetod.uptime;
    e480:	4d0a      	ldr	r5, [pc, #40]	; (e4ac <os_get_uptime+0x38>)
    e482:	466c      	mov	r4, sp
    e484:	f105 0308 	add.w	r3, r5, #8
    e488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e48a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    e48e:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    e490:	f7ff ff94 	bl	e3bc <os_time_get>
    e494:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    e496:	4638      	mov	r0, r7
    e498:	f000 f85c 	bl	e554 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    e49c:	4632      	mov	r2, r6
    e49e:	4621      	mov	r1, r4
    e4a0:	4628      	mov	r0, r5
    e4a2:	f7ff ff37 	bl	e314 <os_deltatime>
}
    e4a6:	b005      	add	sp, #20
    e4a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4aa:	bf00      	nop
    e4ac:	20001958 	.word	0x20001958

0000e4b0 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4b2:	b085      	sub	sp, #20
  struct os_timeval tv;

  os_get_uptime(&tv);
    e4b4:	4668      	mov	r0, sp
    e4b6:	f7ff ffdd 	bl	e474 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    e4ba:	9900      	ldr	r1, [sp, #0]
    e4bc:	9f01      	ldr	r7, [sp, #4]
    e4be:	0178      	lsls	r0, r7, #5
    e4c0:	014b      	lsls	r3, r1, #5
    e4c2:	ea40 62d1 	orr.w	r2, r0, r1, lsr #27
    e4c6:	1a5b      	subs	r3, r3, r1
    e4c8:	eb62 0207 	sbc.w	r2, r2, r7
    e4cc:	0250      	lsls	r0, r2, #9
    e4ce:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
    e4d2:	025e      	lsls	r6, r3, #9
    e4d4:	4602      	mov	r2, r0
    e4d6:	1873      	adds	r3, r6, r1
    e4d8:	eb47 0202 	adc.w	r2, r7, r2
    e4dc:	0196      	lsls	r6, r2, #6
    e4de:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
    e4e2:	0198      	lsls	r0, r3, #6
    e4e4:	1ac3      	subs	r3, r0, r3
    e4e6:	eb66 0202 	sbc.w	r2, r6, r2
    e4ea:	185c      	adds	r4, r3, r1
    e4ec:	eb42 0507 	adc.w	r5, r2, r7
}
    e4f0:	9802      	ldr	r0, [sp, #8]
    e4f2:	4603      	mov	r3, r0
    e4f4:	1820      	adds	r0, r4, r0
    e4f6:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
    e4fa:	b005      	add	sp, #20
    e4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e4fe <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    e4fe:	b570      	push	{r4, r5, r6, lr}
    e500:	460e      	mov	r6, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    e502:	0e45      	lsrs	r5, r0, #25
    e504:	01c4      	lsls	r4, r0, #7
    e506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e50a:	2300      	movs	r3, #0
    e50c:	4620      	mov	r0, r4
    e50e:	4629      	mov	r1, r5
    e510:	f01e fd4e 	bl	2cfb0 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
    e514:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
    e518:	bf08      	it	eq
    e51a:	2c00      	cmpeq	r4, #0
    e51c:	d202      	bcs.n	e524 <os_time_ms_to_ticks+0x26>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    e51e:	6030      	str	r0, [r6, #0]
    return 0;
    e520:	2000      	movs	r0, #0
}
    e522:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    e524:	2002      	movs	r0, #2
    e526:	e7fc      	b.n	e522 <os_time_ms_to_ticks+0x24>

0000e528 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
    e528:	e7fe      	b.n	e528 <os_arch_task_return_handler>

0000e52a <timer_handler>:
{
    e52a:	b508      	push	{r3, lr}
    os_time_advance(1);
    e52c:	2001      	movs	r0, #1
    e52e:	f7ff ff4b 	bl	e3c8 <os_time_advance>
}
    e532:	bd08      	pop	{r3, pc}

0000e534 <os_arch_ctx_sw>:
{
    e534:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    e536:	f7ff fd1b 	bl	df70 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    e53a:	4b02      	ldr	r3, [pc, #8]	; (e544 <os_arch_ctx_sw+0x10>)
    e53c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    e540:	605a      	str	r2, [r3, #4]
}
    e542:	bd08      	pop	{r3, pc}
    e544:	e000ed00 	.word	0xe000ed00

0000e548 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e548:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    e54c:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    e550:	b672      	cpsid	i
}
    e552:	4770      	bx	lr

0000e554 <os_arch_restore_sr>:
    if (!isr_ctx) {
    e554:	b900      	cbnz	r0, e558 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    e556:	b662      	cpsie	i
}
    e558:	4770      	bx	lr

0000e55a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e55a:	f3ef 8010 	mrs	r0, PRIMASK
}
    e55e:	f000 0001 	and.w	r0, r0, #1
    e562:	4770      	bx	lr

0000e564 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    e564:	b570      	push	{r4, r5, r6, lr}
    e566:	4606      	mov	r6, r0
    e568:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    e56a:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    e56e:	2309      	movs	r3, #9
    e570:	e003      	b.n	e57a <os_arch_task_stack_init+0x16>
        s[i] = 0;
    e572:	2200      	movs	r2, #0
    e574:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    e578:	3301      	adds	r3, #1
    e57a:	2b0c      	cmp	r3, #12
    e57c:	ddf9      	ble.n	e572 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    e57e:	4628      	mov	r0, r5
    e580:	f000 f994 	bl	e8ac <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    e584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    e588:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
    e58c:	6973      	ldr	r3, [r6, #20]
    e58e:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    e592:	69b3      	ldr	r3, [r6, #24]
    e594:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    e598:	4b02      	ldr	r3, [pc, #8]	; (e5a4 <os_arch_task_stack_init+0x40>)
    e59a:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    e59e:	4628      	mov	r0, r5
    e5a0:	bd70      	pop	{r4, r5, r6, pc}
    e5a2:	bf00      	nop
    e5a4:	0000e529 	.word	0x0000e529

0000e5a8 <os_arch_init>:

void
os_arch_init(void)
{
    e5a8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e5aa:	4a04      	ldr	r2, [pc, #16]	; (e5bc <os_arch_init+0x14>)
    e5ac:	6953      	ldr	r3, [r2, #20]
    e5ae:	f043 0310 	orr.w	r3, r3, #16
    e5b2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    e5b4:	f7fe fbbc 	bl	cd30 <os_init_idle_task>
}
    e5b8:	bd08      	pop	{r3, pc}
    e5ba:	bf00      	nop
    e5bc:	e000ed00 	.word	0xe000ed00

0000e5c0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e5c2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    e5c6:	b90c      	cbnz	r4, e5cc <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    e5c8:	2400      	movs	r4, #0
    e5ca:	e009      	b.n	e5e0 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    e5cc:	2007      	movs	r0, #7
    e5ce:	e02e      	b.n	e62e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    e5d0:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    e5d4:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    e5d8:	26ff      	movs	r6, #255	; 0xff
    e5da:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    e5de:	3401      	adds	r4, #1
    e5e0:	2cef      	cmp	r4, #239	; 0xef
    e5e2:	d9f5      	bls.n	e5d0 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    e5e4:	f06f 040d 	mvn.w	r4, #13
    e5e8:	e007      	b.n	e5fa <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    e5ea:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e5ec:	4e12      	ldr	r6, [pc, #72]	; (e638 <os_arch_os_init+0x78>)
    e5ee:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e5f0:	3510      	adds	r5, #16
    e5f2:	4f12      	ldr	r7, [pc, #72]	; (e63c <os_arch_os_init+0x7c>)
    e5f4:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    e5f8:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    e5fa:	2c25      	cmp	r4, #37	; 0x25
    e5fc:	ddf5      	ble.n	e5ea <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e5fe:	4c0e      	ldr	r4, [pc, #56]	; (e638 <os_arch_os_init+0x78>)
    e600:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e602:	4e0f      	ldr	r6, [pc, #60]	; (e640 <os_arch_os_init+0x80>)
    e604:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e606:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e608:	4e0e      	ldr	r6, [pc, #56]	; (e644 <os_arch_os_init+0x84>)
    e60a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e60c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e60e:	4e0e      	ldr	r6, [pc, #56]	; (e648 <os_arch_os_init+0x88>)
    e610:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e612:	25e0      	movs	r5, #224	; 0xe0
    e614:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    e618:	2520      	movs	r5, #32
    e61a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    e61c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    e620:	f014 0f01 	tst.w	r4, #1
    e624:	d004      	beq.n	e630 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    e626:	f8df c024 	ldr.w	ip, [pc, #36]	; e64c <os_arch_os_init+0x8c>
    e62a:	df00      	svc	0
        err = OS_OK;
    e62c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    e62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    e630:	f7ff ffba 	bl	e5a8 <os_arch_init>
        err = OS_OK;
    e634:	2000      	movs	r0, #0
    e636:	e7fa      	b.n	e62e <os_arch_os_init+0x6e>
    e638:	e000ed00 	.word	0xe000ed00
    e63c:	0000e92f 	.word	0x0000e92f
    e640:	0000e8b3 	.word	0x0000e8b3
    e644:	0000e8f9 	.word	0x0000e8f9
    e648:	0000e923 	.word	0x0000e923
    e64c:	0000e5a9 	.word	0x0000e5a9

0000e650 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    e650:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    e652:	f7ff fd7f 	bl	e154 <os_sched_next_task>
    e656:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    e658:	f7ff fca8 	bl	dfac <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    e65c:	6823      	ldr	r3, [r4, #0]
    e65e:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    e660:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    e664:	2106      	movs	r1, #6
    e666:	2080      	movs	r0, #128	; 0x80
    e668:	f01b fe84 	bl	2a374 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    e66c:	4b03      	ldr	r3, [pc, #12]	; (e67c <os_arch_start+0x2c>)
    e66e:	2201      	movs	r2, #1
    e670:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    e672:	4620      	mov	r0, r4
    e674:	f7ff ff5e 	bl	e534 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    e678:	69a0      	ldr	r0, [r4, #24]
    e67a:	bd10      	pop	{r4, pc}
    e67c:	20000f40 	.word	0x20000f40

0000e680 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    e680:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    e682:	4815      	ldr	r0, [pc, #84]	; (e6d8 <os_arch_os_start+0x58>)
    e684:	6800      	ldr	r0, [r0, #0]
    e686:	3804      	subs	r0, #4
    e688:	f000 f906 	bl	e898 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e68c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    e690:	b9ec      	cbnz	r4, e6ce <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    e692:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    e696:	f004 0403 	and.w	r4, r4, #3
    e69a:	2c02      	cmp	r4, #2
    e69c:	d00d      	beq.n	e6ba <os_arch_os_start+0x3a>
    e69e:	d803      	bhi.n	e6a8 <os_arch_os_start+0x28>
    e6a0:	2c01      	cmp	r4, #1
    e6a2:	d80f      	bhi.n	e6c4 <os_arch_os_start+0x44>
    e6a4:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    e6a6:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    e6a8:	2c03      	cmp	r4, #3
    e6aa:	d10b      	bne.n	e6c4 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    e6ac:	4c0b      	ldr	r4, [pc, #44]	; (e6dc <os_arch_os_start+0x5c>)
    e6ae:	6824      	ldr	r4, [r4, #0]
    e6b0:	f014 0f01 	tst.w	r4, #1
    e6b4:	d106      	bne.n	e6c4 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
    e6b6:	2008      	movs	r0, #8
    e6b8:	e7f5      	b.n	e6a6 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    e6ba:	4c08      	ldr	r4, [pc, #32]	; (e6dc <os_arch_os_start+0x5c>)
    e6bc:	6824      	ldr	r4, [r4, #0]
    e6be:	f014 0f01 	tst.w	r4, #1
    e6c2:	d106      	bne.n	e6d2 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
    e6c4:	f8df c018 	ldr.w	ip, [pc, #24]	; e6e0 <os_arch_os_start+0x60>
    e6c8:	df00      	svc	0
}
    e6ca:	2000      	movs	r0, #0
    e6cc:	e7eb      	b.n	e6a6 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
    e6ce:	2007      	movs	r0, #7
    e6d0:	e7e9      	b.n	e6a6 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
    e6d2:	2008      	movs	r0, #8
    e6d4:	e7e7      	b.n	e6a6 <os_arch_os_start+0x26>
    e6d6:	bf00      	nop
    e6d8:	20000598 	.word	0x20000598
    e6dc:	2000198c 	.word	0x2000198c
    e6e0:	0000e651 	.word	0x0000e651

0000e6e4 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    e6e4:	4603      	mov	r3, r0
    e6e6:	b128      	cbz	r0, e6f4 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    e6e8:	2000      	movs	r0, #0
    e6ea:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    e6ec:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    e6ee:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    e6f0:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    e6f2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e6f4:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    e6f6:	4770      	bx	lr

0000e6f8 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    e6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    e6fa:	4b2e      	ldr	r3, [pc, #184]	; (e7b4 <os_mutex_release+0xbc>)
    e6fc:	681b      	ldr	r3, [r3, #0]
    e6fe:	2b00      	cmp	r3, #0
    e700:	d050      	beq.n	e7a4 <os_mutex_release+0xac>
    e702:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    e704:	2800      	cmp	r0, #0
    e706:	d04f      	beq.n	e7a8 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    e708:	f7ff fc4a 	bl	dfa0 <os_sched_get_current_task>
    e70c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    e70e:	88e3      	ldrh	r3, [r4, #6]
    e710:	2b00      	cmp	r3, #0
    e712:	d04b      	beq.n	e7ac <os_mutex_release+0xb4>
    e714:	68a2      	ldr	r2, [r4, #8]
    e716:	4282      	cmp	r2, r0
    e718:	d14a      	bne.n	e7b0 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    e71a:	2b01      	cmp	r3, #1
    e71c:	d003      	beq.n	e726 <os_mutex_release+0x2e>
        --mu->mu_level;
    e71e:	3b01      	subs	r3, #1
    e720:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    e722:	2000      	movs	r0, #0
        goto done;
    e724:	e03f      	b.n	e7a6 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
    e726:	f7ff ff0f 	bl	e548 <os_arch_save_sr>
    e72a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    e72c:	88e3      	ldrh	r3, [r4, #6]
    e72e:	3b01      	subs	r3, #1
    e730:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    e732:	7aea      	ldrb	r2, [r5, #11]
    e734:	7963      	ldrb	r3, [r4, #5]
    e736:	429a      	cmp	r2, r3
    e738:	d11e      	bne.n	e778 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    e73a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    e73c:	b146      	cbz	r6, e750 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    e73e:	69f3      	ldr	r3, [r6, #28]
    e740:	b1fb      	cbz	r3, e782 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    e742:	4630      	mov	r0, r6
    e744:	f7ff fc80 	bl	e048 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    e748:	2301      	movs	r3, #1
    e74a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    e74c:	7af3      	ldrb	r3, [r6, #11]
    e74e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    e750:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    e752:	b116      	cbz	r6, e75a <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    e754:	7bb3      	ldrb	r3, [r6, #14]
    e756:	3301      	adds	r3, #1
    e758:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    e75a:	7bab      	ldrb	r3, [r5, #14]
    e75c:	3b01      	subs	r3, #1
    e75e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    e760:	f7ff fcf8 	bl	e154 <os_sched_next_task>
    e764:	4604      	mov	r4, r0
    if (rdy != current) {
    e766:	4285      	cmp	r5, r0
    e768:	d015      	beq.n	e796 <os_mutex_release+0x9e>
        resched = 1;
    e76a:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    e76c:	4638      	mov	r0, r7
    e76e:	f7ff fef1 	bl	e554 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    e772:	b995      	cbnz	r5, e79a <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
    e774:	2000      	movs	r0, #0
    e776:	e016      	b.n	e7a6 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
    e778:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    e77a:	4628      	mov	r0, r5
    e77c:	f7ff fd02 	bl	e184 <os_sched_resort>
    e780:	e7db      	b.n	e73a <os_mutex_release+0x42>
        assert(rdy->t_obj);
    e782:	f7fd fd0b 	bl	c19c <hal_debugger_connected>
    e786:	b100      	cbz	r0, e78a <os_mutex_release+0x92>
    e788:	be01      	bkpt	0x0001
    e78a:	2300      	movs	r3, #0
    e78c:	461a      	mov	r2, r3
    e78e:	4619      	mov	r1, r3
    e790:	4618      	mov	r0, r3
    e792:	f7fe fa07 	bl	cba4 <__assert_func>
    resched = 0;
    e796:	2500      	movs	r5, #0
    e798:	e7e8      	b.n	e76c <os_mutex_release+0x74>
        os_sched(rdy);
    e79a:	4620      	mov	r0, r4
    e79c:	f7ff fce0 	bl	e160 <os_sched>
    ret = OS_OK;
    e7a0:	2000      	movs	r0, #0
    e7a2:	e000      	b.n	e7a6 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
    e7a4:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    e7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    e7a8:	2003      	movs	r0, #3
    e7aa:	e7fc      	b.n	e7a6 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
    e7ac:	2005      	movs	r0, #5
    e7ae:	e7fa      	b.n	e7a6 <os_mutex_release+0xae>
    e7b0:	2005      	movs	r0, #5
    e7b2:	e7f8      	b.n	e7a6 <os_mutex_release+0xae>
    e7b4:	20000f40 	.word	0x20000f40

0000e7b8 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    e7b8:	4b36      	ldr	r3, [pc, #216]	; (e894 <os_mutex_pend+0xdc>)
    e7ba:	681b      	ldr	r3, [r3, #0]
    e7bc:	2b00      	cmp	r3, #0
    e7be:	d065      	beq.n	e88c <os_mutex_pend+0xd4>
{
    e7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7c4:	4605      	mov	r5, r0
    e7c6:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    e7c8:	2800      	cmp	r0, #0
    e7ca:	d061      	beq.n	e890 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    e7cc:	f7ff febc 	bl	e548 <os_arch_save_sr>
    e7d0:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    e7d2:	f7ff fbe5 	bl	dfa0 <os_sched_get_current_task>
    e7d6:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    e7d8:	88ea      	ldrh	r2, [r5, #6]
    e7da:	b19a      	cbz	r2, e804 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    e7dc:	68ab      	ldr	r3, [r5, #8]
    e7de:	4283      	cmp	r3, r0
    e7e0:	d01d      	beq.n	e81e <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    e7e2:	b31f      	cbz	r7, e82c <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    e7e4:	7ad9      	ldrb	r1, [r3, #11]
    e7e6:	7ac2      	ldrb	r2, [r0, #11]
    e7e8:	4291      	cmp	r1, r2
    e7ea:	d824      	bhi.n	e836 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    e7ec:	6828      	ldr	r0, [r5, #0]
    e7ee:	b360      	cbz	r0, e84a <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e7f0:	4603      	mov	r3, r0
    last = NULL;
    e7f2:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e7f4:	b323      	cbz	r3, e840 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    e7f6:	7ae6      	ldrb	r6, [r4, #11]
    e7f8:	7ada      	ldrb	r2, [r3, #11]
    e7fa:	4296      	cmp	r6, r2
    e7fc:	d320      	bcc.n	e840 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    e7fe:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e802:	e7f7      	b.n	e7f4 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    e804:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    e806:	7ac3      	ldrb	r3, [r0, #11]
    e808:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    e80a:	7b83      	ldrb	r3, [r0, #14]
    e80c:	3301      	adds	r3, #1
    e80e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    e810:	2301      	movs	r3, #1
    e812:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    e814:	4640      	mov	r0, r8
    e816:	f7ff fe9d 	bl	e554 <os_arch_restore_sr>
        ret = OS_OK;
    e81a:	2000      	movs	r0, #0
        goto done;
    e81c:	e032      	b.n	e884 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    e81e:	3201      	adds	r2, #1
    e820:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    e822:	4640      	mov	r0, r8
    e824:	f7ff fe96 	bl	e554 <os_arch_restore_sr>
        ret = OS_OK;
    e828:	2000      	movs	r0, #0
        goto done;
    e82a:	e02b      	b.n	e884 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    e82c:	4640      	mov	r0, r8
    e82e:	f7ff fe91 	bl	e554 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    e832:	2006      	movs	r0, #6
        goto done;
    e834:	e026      	b.n	e884 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    e836:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    e838:	68a8      	ldr	r0, [r5, #8]
    e83a:	f7ff fca3 	bl	e184 <os_sched_resort>
    e83e:	e7d5      	b.n	e7ec <os_mutex_pend+0x34>
        }
    }

    if (last) {
    e840:	b119      	cbz	r1, e84a <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    e842:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    e844:	64e3      	str	r3, [r4, #76]	; 0x4c
    e846:	64cc      	str	r4, [r1, #76]	; 0x4c
    e848:	e001      	b.n	e84e <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    e84a:	64e0      	str	r0, [r4, #76]	; 0x4c
    e84c:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    e84e:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    e850:	7b63      	ldrb	r3, [r4, #13]
    e852:	f043 0304 	orr.w	r3, r3, #4
    e856:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    e858:	4639      	mov	r1, r7
    e85a:	4620      	mov	r0, r4
    e85c:	f7ff fbac 	bl	dfb8 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    e860:	4640      	mov	r0, r8
    e862:	f7ff fe77 	bl	e554 <os_arch_restore_sr>

    os_sched(NULL);
    e866:	2000      	movs	r0, #0
    e868:	f7ff fc7a 	bl	e160 <os_sched>

    OS_ENTER_CRITICAL(sr);
    e86c:	f7ff fe6c 	bl	e548 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    e870:	7b63      	ldrb	r3, [r4, #13]
    e872:	f023 0304 	bic.w	r3, r3, #4
    e876:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    e878:	f7ff fe6c 	bl	e554 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    e87c:	68ab      	ldr	r3, [r5, #8]
    e87e:	42a3      	cmp	r3, r4
    e880:	d002      	beq.n	e888 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    e882:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    e884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
    e888:	2000      	movs	r0, #0
    e88a:	e7fb      	b.n	e884 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    e88c:	2009      	movs	r0, #9
}
    e88e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e890:	2003      	movs	r0, #3
    e892:	e7f7      	b.n	e884 <os_mutex_pend+0xcc>
    e894:	20000f40 	.word	0x20000f40

0000e898 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    e898:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    e89c:	482b      	ldr	r0, [pc, #172]	; (e94c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    e89e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    e8a0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    e8a2:	f380 8814 	msr	CONTROL, r0
        ISB
    e8a6:	f3bf 8f6f 	isb	sy
        BX      LR
    e8aa:	4770      	bx	lr

0000e8ac <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    e8ac:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    e8b0:	4770      	bx	lr

0000e8b2 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    e8b2:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    e8b6:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    e8b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    e8bc:	b951      	cbnz	r1, e8d4 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e8be:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e8c2:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    e8c4:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    e8ca:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    e8ce:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    e8d2:	4770      	bx	lr

0000e8d4 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e8d4:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    e8d6:	4a1e      	ldr	r2, [pc, #120]	; (e950 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    e8d8:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    e8da:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    e8dc:	d809      	bhi.n	e8f2 <SVC_Done>

        LDR     R4,=SVC_Table-4
    e8de:	4c1d      	ldr	r4, [pc, #116]	; (e954 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    e8e0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e8e4:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    e8e8:	47a0      	blx	r4

        MRS     R12,PSP
    e8ea:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    e8ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000e8f2 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    e8f6:	4770      	bx	lr

0000e8f8 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e8f8:	4b17      	ldr	r3, [pc, #92]	; (e958 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    e8fa:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    e8fc:	4b17      	ldr	r3, [pc, #92]	; (e95c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    e8fe:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    e900:	4291      	cmp	r1, r2
        IT      EQ
    e902:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    e904:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    e906:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    e90a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    e90e:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    e912:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    e914:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    e918:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    e91c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    e920:	4770      	bx	lr

0000e922 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e922:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    e924:	f7ff fe01 	bl	e52a <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    e92c:	4770      	bx	lr

0000e92e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    e92e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    e932:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    e934:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    e938:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    e93c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    e940:	4668      	mov	r0, sp
        BL      os_default_irq
    e942:	f7fe f951 	bl	cbe8 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    e946:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    e94a:	4770      	bx	lr
        LDR     R0,=os_flags
    e94c:	2000198c 	.word	0x2000198c
        LDR     R2,=SVC_Count
    e950:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    e954:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e958:	20000178 	.word	0x20000178
        LDR     R3,=g_current_task      /* Get current task */
    e95c:	20001944 	.word	0x20001944

0000e960 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
    e960:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
    e962:	4802      	ldr	r0, [pc, #8]	; (e96c <lrand48+0xc>)
    e964:	f000 f892 	bl	ea8c <jrand48>
}
    e968:	0840      	lsrs	r0, r0, #1
    e96a:	bd08      	pop	{r3, pc}
    e96c:	20001990 	.word	0x20001990

0000e970 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
    e970:	b470      	push	{r4, r5, r6}
    e972:	f04f 0500 	mov.w	r5, #0
    e976:	f022 0603 	bic.w	r6, r2, #3
    e97a:	e005      	b.n	e988 <test1>

0000e97c <loop1>:
    e97c:	5943      	ldr	r3, [r0, r5]
    e97e:	594c      	ldr	r4, [r1, r5]
    e980:	42a3      	cmp	r3, r4
    e982:	d104      	bne.n	e98e <res1>
    e984:	f105 0504 	add.w	r5, r5, #4

0000e988 <test1>:
    e988:	42b5      	cmp	r5, r6
    e98a:	d1f7      	bne.n	e97c <loop1>
    e98c:	e00d      	b.n	e9aa <test2>

0000e98e <res1>:
    e98e:	ba1b      	rev	r3, r3
    e990:	ba24      	rev	r4, r4
    e992:	1b1b      	subs	r3, r3, r4
    e994:	bf8c      	ite	hi
    e996:	2301      	movhi	r3, #1
    e998:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    e99c:	e009      	b.n	e9b2 <done>

0000e99e <loop2>:
    e99e:	5d43      	ldrb	r3, [r0, r5]
    e9a0:	5d4c      	ldrb	r4, [r1, r5]
    e9a2:	1b1b      	subs	r3, r3, r4
    e9a4:	d105      	bne.n	e9b2 <done>
    e9a6:	f105 0501 	add.w	r5, r5, #1

0000e9aa <test2>:
    e9aa:	4295      	cmp	r5, r2
    e9ac:	d1f7      	bne.n	e99e <loop2>
    e9ae:	f04f 0300 	mov.w	r3, #0

0000e9b2 <done>:
    e9b2:	4618      	mov	r0, r3
    e9b4:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    e9b6:	4770      	bx	lr

0000e9b8 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    e9b8:	e001      	b.n	e9be <test1>

0000e9ba <loop1>:
    e9ba:	588b      	ldr	r3, [r1, r2]
    e9bc:	5083      	str	r3, [r0, r2]

0000e9be <test1>:
    e9be:	3a04      	subs	r2, #4
    e9c0:	d5fb      	bpl.n	e9ba <loop1>
    e9c2:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    e9c6:	e001      	b.n	e9cc <test2>

0000e9c8 <loop2>:
    e9c8:	5c8b      	ldrb	r3, [r1, r2]
    e9ca:	5483      	strb	r3, [r0, r2]

0000e9cc <test2>:
    e9cc:	3a01      	subs	r2, #1
    e9ce:	d5fb      	bpl.n	e9c8 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    e9d0:	4770      	bx	lr

0000e9d2 <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
    e9d2:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
    e9d4:	4281      	cmp	r1, r0
    e9d6:	d809      	bhi.n	e9ec <memmove+0x1a>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
    e9d8:	4411      	add	r1, r2
		q += n;
    e9da:	1883      	adds	r3, r0, r2
		while (n--) {
    e9dc:	1e54      	subs	r4, r2, #1
    e9de:	b172      	cbz	r2, e9fe <memmove+0x2c>
			*--q = *--p;
    e9e0:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    e9e4:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
    e9e8:	4622      	mov	r2, r4
    e9ea:	e7f7      	b.n	e9dc <memmove+0xa>
	char *q = dst;
    e9ec:	4603      	mov	r3, r0
		while (n--) {
    e9ee:	1e54      	subs	r4, r2, #1
    e9f0:	b12a      	cbz	r2, e9fe <memmove+0x2c>
			*q++ = *p++;
    e9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
    e9f6:	f803 2b01 	strb.w	r2, [r3], #1
		while (n--) {
    e9fa:	4622      	mov	r2, r4
    e9fc:	e7f7      	b.n	e9ee <memmove+0x1c>
		}
	}
#endif

	return dst;
}
    e9fe:	bc10      	pop	{r4}
    ea00:	4770      	bx	lr

0000ea02 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    ea02:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    ea04:	4605      	mov	r5, r0
    ea06:	b2c9      	uxtb	r1, r1
    ea08:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ea0c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ea10:	18ab      	adds	r3, r5, r2
    ea12:	2403      	movs	r4, #3
    ea14:	4023      	ands	r3, r4
    ea16:	1ad3      	subs	r3, r2, r3
    ea18:	d40b      	bmi.n	ea32 <memset+0x30>
    ea1a:	e001      	b.n	ea20 <memset+0x1e>
    ea1c:	3a01      	subs	r2, #1
    ea1e:	54a9      	strb	r1, [r5, r2]
    ea20:	429a      	cmp	r2, r3
    ea22:	d1fb      	bne.n	ea1c <memset+0x1a>
    ea24:	e000      	b.n	ea28 <memset+0x26>
    ea26:	50a9      	str	r1, [r5, r2]
    ea28:	3a04      	subs	r2, #4
    ea2a:	d5fc      	bpl.n	ea26 <memset+0x24>
    ea2c:	3204      	adds	r2, #4
    ea2e:	e000      	b.n	ea32 <memset+0x30>
    ea30:	54a9      	strb	r1, [r5, r2]
    ea32:	3a01      	subs	r2, #1
    ea34:	d5fc      	bpl.n	ea30 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    ea36:	bc30      	pop	{r4, r5}
    ea38:	4770      	bx	lr

0000ea3a <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    ea3a:	b410      	push	{r4}
    ea3c:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    ea3e:	7822      	ldrb	r2, [r4, #0]
    ea40:	3401      	adds	r4, #1
    ea42:	7808      	ldrb	r0, [r1, #0]
    ea44:	3101      	adds	r1, #1
		if (d || !ch)
    ea46:	1a10      	subs	r0, r2, r0
    ea48:	d101      	bne.n	ea4e <strcmp+0x14>
    ea4a:	2a00      	cmp	r2, #0
    ea4c:	d1f7      	bne.n	ea3e <strcmp+0x4>
			break;
	}

	return d;
}
    ea4e:	bc10      	pop	{r4}
    ea50:	4770      	bx	lr

0000ea52 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    ea52:	4603      	mov	r3, r0
	while (*ss)
    ea54:	781a      	ldrb	r2, [r3, #0]
    ea56:	b10a      	cbz	r2, ea5c <strlen+0xa>
		ss++;
    ea58:	3301      	adds	r3, #1
    ea5a:	e7fb      	b.n	ea54 <strlen+0x2>
	return ss - s;
}
    ea5c:	1a18      	subs	r0, r3, r0
    ea5e:	4770      	bx	lr

0000ea60 <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
    ea60:	b570      	push	{r4, r5, r6, lr}
    ea62:	4606      	mov	r6, r0
    ea64:	460c      	mov	r4, r1
    ea66:	4615      	mov	r5, r2
	char *q = strchr(dst, '\0');
    ea68:	f7ff fff3 	bl	ea52 <strlen>
    ea6c:	4430      	add	r0, r6
	const char *p = src;
	char ch;

	while (n--) {
    ea6e:	462b      	mov	r3, r5
    ea70:	3d01      	subs	r5, #1
    ea72:	b13b      	cbz	r3, ea84 <strncat+0x24>
		*q++ = ch = *p++;
    ea74:	4621      	mov	r1, r4
    ea76:	f811 3b01 	ldrb.w	r3, [r1], #1
    ea7a:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
    ea7e:	b113      	cbz	r3, ea86 <strncat+0x26>
		*q++ = ch = *p++;
    ea80:	460c      	mov	r4, r1
    ea82:	e7f4      	b.n	ea6e <strncat+0xe>
			return dst;
	}
	*q = '\0';
    ea84:	7003      	strb	r3, [r0, #0]

	return dst;
}
    ea86:	4630      	mov	r0, r6
    ea88:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ea8c <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
    ea8c:	b4f0      	push	{r4, r5, r6, r7}
    ea8e:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
    ea90:	8804      	ldrh	r4, [r0, #0]
    ea92:	2500      	movs	r5, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
    ea94:	8846      	ldrh	r6, [r0, #2]
    ea96:	0432      	lsls	r2, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
    ea98:	18a2      	adds	r2, r4, r2
    ea9a:	f04f 0000 	mov.w	r0, #0
    ea9e:	eb45 0000 	adc.w	r0, r5, r0
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
    eaa2:	2300      	movs	r3, #0
    eaa4:	888c      	ldrh	r4, [r1, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
    eaa6:	18d2      	adds	r2, r2, r3
    eaa8:	eb44 0000 	adc.w	r0, r4, r0

	x = (0x5deece66dULL * x) + 0xb;
    eaac:	4c0a      	ldr	r4, [pc, #40]	; (ead8 <jrand48+0x4c>)
    eaae:	2305      	movs	r3, #5
    eab0:	fb03 f302 	mul.w	r3, r3, r2
    eab4:	fb04 3000 	mla	r0, r4, r0, r3
    eab8:	fba2 2304 	umull	r2, r3, r2, r4
    eabc:	4403      	add	r3, r0
    eabe:	f112 000b 	adds.w	r0, r2, #11
    eac2:	f143 0300 	adc.w	r3, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
    eac6:	8008      	strh	r0, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
    eac8:	0c00      	lsrs	r0, r0, #16
    eaca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    eace:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
    ead0:	808b      	strh	r3, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
    ead2:	bcf0      	pop	{r4, r5, r6, r7}
    ead4:	4770      	bx	lr
    ead6:	bf00      	nop
    ead8:	deece66d 	.word	0xdeece66d

0000eadc <imgr_my_version>:
    return 0;
}

int
imgr_my_version(struct image_version *ver)
{
    eadc:	b508      	push	{r3, lr}
    eade:	4601      	mov	r1, r0
    return img_mgmt_read_info(boot_current_slot, ver, NULL, NULL);
    eae0:	2300      	movs	r3, #0
    eae2:	461a      	mov	r2, r3
    eae4:	4802      	ldr	r0, [pc, #8]	; (eaf0 <imgr_my_version+0x14>)
    eae6:	6800      	ldr	r0, [r0, #0]
    eae8:	f004 f856 	bl	12b98 <img_mgmt_read_info>
}
    eaec:	bd08      	pop	{r3, pc}
    eaee:	bf00      	nop
    eaf0:	2000513c 	.word	0x2000513c

0000eaf4 <imgmgr_find_best_area_id>:
    return -1;
}

int
imgmgr_find_best_area_id(void)
{
    eaf4:	b530      	push	{r4, r5, lr}
    eaf6:	b083      	sub	sp, #12
    struct image_version ver;
    int best = -1;
    int i;
    int rc;

    for (i = 0; i < 2; i++) {
    eaf8:	2400      	movs	r4, #0
    int best = -1;
    eafa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
    eafe:	e000      	b.n	eb02 <imgmgr_find_best_area_id+0xe>
    eb00:	3401      	adds	r4, #1
    eb02:	2c01      	cmp	r4, #1
    eb04:	dc10      	bgt.n	eb28 <imgmgr_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
    eb06:	2300      	movs	r3, #0
    eb08:	461a      	mov	r2, r3
    eb0a:	4669      	mov	r1, sp
    eb0c:	4620      	mov	r0, r4
    eb0e:	f004 f843 	bl	12b98 <img_mgmt_read_info>
        if (rc < 0) {
    eb12:	2800      	cmp	r0, #0
    eb14:	dbf4      	blt.n	eb00 <imgmgr_find_best_area_id+0xc>
            continue;
        }
        if (rc == 0) {
    eb16:	b930      	cbnz	r0, eb26 <imgmgr_find_best_area_id+0x32>
            /* Image in slot is ok. */
            if (img_mgmt_slot_in_use(i)) {
    eb18:	4620      	mov	r0, r4
    eb1a:	f004 fad6 	bl	130ca <img_mgmt_slot_in_use>
    eb1e:	2800      	cmp	r0, #0
    eb20:	d1ee      	bne.n	eb00 <imgmgr_find_best_area_id+0xc>
            } else {
                /*
                 * Not active slot, but image is ok. Use it if there are
                 * no better candidates.
                 */
                best = i;
    eb22:	4625      	mov	r5, r4
    eb24:	e7ec      	b.n	eb00 <imgmgr_find_best_area_id+0xc>
            }
            continue;
        }
        best = i;
    eb26:	4625      	mov	r5, r4
        break;
    }
    if (best >= 0) {
    eb28:	2d00      	cmp	r5, #0
    eb2a:	da02      	bge.n	eb32 <imgmgr_find_best_area_id+0x3e>
        best = flash_area_id_from_image_slot(best);
    }
    return best;
}
    eb2c:	4628      	mov	r0, r5
    eb2e:	b003      	add	sp, #12
    eb30:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
    eb32:	4628      	mov	r0, r5
    eb34:	f001 ffc9 	bl	10aca <flash_area_id_from_image_slot>
    eb38:	4605      	mov	r5, r0
    return best;
    eb3a:	e7f7      	b.n	eb2c <imgmgr_find_best_area_id+0x38>

0000eb3c <imgr_erase_state>:

static int
imgr_erase_state(struct mgmt_ctxt *ctxt)
{
    eb3c:	b570      	push	{r4, r5, r6, lr}
    eb3e:	b082      	sub	sp, #8
    eb40:	4604      	mov	r4, r0
    const struct flash_area *fa;
    int area_id;
    int rc;
    CborError g_err = CborNoError;

    area_id = imgmgr_find_best_area_id();
    eb42:	f7ff ffd7 	bl	eaf4 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
    eb46:	2800      	cmp	r0, #0
    eb48:	db1b      	blt.n	eb82 <imgr_erase_state+0x46>
        rc = flash_area_open(area_id, &fa);
    eb4a:	a901      	add	r1, sp, #4
    eb4c:	b2c0      	uxtb	r0, r0
    eb4e:	f001 ff07 	bl	10960 <flash_area_open>
        if (rc) {
    eb52:	b9d0      	cbnz	r0, eb8a <imgr_erase_state+0x4e>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
                                      img_mgmt_err_str_flash_open_failed);
        }

        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
    eb54:	2220      	movs	r2, #32
    eb56:	2100      	movs	r1, #0
    eb58:	9801      	ldr	r0, [sp, #4]
    eb5a:	f001 ff7f 	bl	10a5c <flash_area_erase>
        if (rc) {
    eb5e:	4605      	mov	r5, r0
    eb60:	b9a8      	cbnz	r0, eb8e <imgr_erase_state+0x52>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    eb62:	2202      	movs	r2, #2
    eb64:	490b      	ldr	r1, [pc, #44]	; (eb94 <imgr_erase_state+0x58>)
    eb66:	4620      	mov	r0, r4
    eb68:	f019 fd54 	bl	28614 <cbor_encode_text_string>
    eb6c:	4606      	mov	r6, r0
    } else {
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    }

    g_err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    g_err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    eb6e:	2200      	movs	r2, #0
    eb70:	2300      	movs	r3, #0
    eb72:	4620      	mov	r0, r4
    eb74:	f019 fcd9 	bl	2852a <cbor_encode_int>

    if (g_err) {
    eb78:	ea50 0306 	orrs.w	r3, r0, r6
    eb7c:	d002      	beq.n	eb84 <imgr_erase_state+0x48>
        return MGMT_ERR_ENOMEM;
    eb7e:	2502      	movs	r5, #2
    eb80:	e000      	b.n	eb84 <imgr_erase_state+0x48>
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    eb82:	2502      	movs	r5, #2
    }

    return 0;
}
    eb84:	4628      	mov	r0, r5
    eb86:	b002      	add	sp, #8
    eb88:	bd70      	pop	{r4, r5, r6, pc}
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    eb8a:	2503      	movs	r5, #3
    eb8c:	e7fa      	b.n	eb84 <imgr_erase_state+0x48>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    eb8e:	2503      	movs	r5, #3
    eb90:	e7f8      	b.n	eb84 <imgr_erase_state+0x48>
    eb92:	bf00      	nop
    eb94:	0002d868 	.word	0x0002d868

0000eb98 <imgmgr_module_init>:

void
imgmgr_module_init(void)
{
    eb98:	b508      	push	{r3, lr}
    int rc;
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    eb9a:	4b08      	ldr	r3, [pc, #32]	; (ebbc <imgmgr_module_init+0x24>)
    eb9c:	781b      	ldrb	r3, [r3, #0]
    eb9e:	b11b      	cbz	r3, eba8 <imgmgr_module_init+0x10>

    mgmt_register_group(&imgr_mgmt_group);
    eba0:	4807      	ldr	r0, [pc, #28]	; (ebc0 <imgmgr_module_init+0x28>)
    eba2:	f005 f9ef 	bl	13f84 <mgmt_register_group>
    rc = imgr_cli_register();
    SYSINIT_PANIC_ASSERT(rc == 0);
#else
    (void) rc;
#endif
}
    eba6:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    eba8:	f7fd faf8 	bl	c19c <hal_debugger_connected>
    ebac:	b100      	cbz	r0, ebb0 <imgmgr_module_init+0x18>
    ebae:	be01      	bkpt	0x0001
    ebb0:	2300      	movs	r3, #0
    ebb2:	461a      	mov	r2, r3
    ebb4:	4619      	mov	r1, r3
    ebb6:	4618      	mov	r0, r3
    ebb8:	f7fd fff4 	bl	cba4 <__assert_func>
    ebbc:	20001e3c 	.word	0x20001e3c
    ebc0:	20000188 	.word	0x20000188

0000ebc4 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
    ebc4:	b500      	push	{lr}
    ebc6:	b083      	sub	sp, #12
    ebc8:	4602      	mov	r2, r0
    ebca:	4608      	mov	r0, r1
    if (ver->iv_build_num) {
    ebcc:	6853      	ldr	r3, [r2, #4]
    ebce:	b153      	cbz	r3, ebe6 <imgr_ver_str+0x22>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
    ebd0:	8851      	ldrh	r1, [r2, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
    ebd2:	9301      	str	r3, [sp, #4]
    ebd4:	9100      	str	r1, [sp, #0]
    ebd6:	7853      	ldrb	r3, [r2, #1]
    ebd8:	7812      	ldrb	r2, [r2, #0]
    ebda:	4907      	ldr	r1, [pc, #28]	; (ebf8 <imgr_ver_str+0x34>)
    ebdc:	f01c fa44 	bl	2b068 <sprintf>
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    }
}
    ebe0:	b003      	add	sp, #12
    ebe2:	f85d fb04 	ldr.w	pc, [sp], #4
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    ebe6:	8853      	ldrh	r3, [r2, #2]
        return sprintf(dst, "%u.%u.%u",
    ebe8:	9300      	str	r3, [sp, #0]
    ebea:	7853      	ldrb	r3, [r2, #1]
    ebec:	7812      	ldrb	r2, [r2, #0]
    ebee:	4903      	ldr	r1, [pc, #12]	; (ebfc <imgr_ver_str+0x38>)
    ebf0:	f01c fa3a 	bl	2b068 <sprintf>
    ebf4:	e7f4      	b.n	ebe0 <imgr_ver_str+0x1c>
    ebf6:	bf00      	nop
    ebf8:	0002d8a4 	.word	0x0002d8a4
    ebfc:	0002d8b4 	.word	0x0002d8b4

0000ec00 <smp_free_buf>:
}

static void
smp_free_buf(void *m, void *arg)
{
    if (!m) {
    ec00:	b118      	cbz	r0, ec0a <smp_free_buf+0xa>
{
    ec02:	b508      	push	{r3, lr}
        return;
    }

    os_mbuf_free_chain(m);
    ec04:	f7fe fc36 	bl	d474 <os_mbuf_free_chain>
}
    ec08:	bd08      	pop	{r3, pc}
    ec0a:	4770      	bx	lr

0000ec0c <smp_init_writer>:
smp_init_writer(struct cbor_encoder_writer *writer, void *m,
		void *arg)
{
    struct cbor_mbuf_writer *cmw;
     
    if (!writer) {
    ec0c:	b120      	cbz	r0, ec18 <smp_init_writer+0xc>
{
    ec0e:	b508      	push	{r3, lr}
        return MGMT_ERR_EINVAL;
    }

    cmw = (struct cbor_mbuf_writer *)writer;
    cbor_mbuf_writer_init(cmw, m);
    ec10:	f019 fbc2 	bl	28398 <cbor_mbuf_writer_init>

    return 0;
    ec14:	2000      	movs	r0, #0
}
    ec16:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
    ec18:	2003      	movs	r0, #3
}
    ec1a:	4770      	bx	lr

0000ec1c <smp_init_reader>:
    if (!reader) {
    ec1c:	b128      	cbz	r0, ec2a <smp_init_reader+0xe>
{
    ec1e:	b508      	push	{r3, lr}
    cbor_mbuf_reader_init(cmr, m, 0);
    ec20:	2200      	movs	r2, #0
    ec22:	f019 fb7d 	bl	28320 <cbor_mbuf_reader_init>
    return 0;
    ec26:	2000      	movs	r0, #0
}
    ec28:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
    ec2a:	2003      	movs	r0, #3
}
    ec2c:	4770      	bx	lr

0000ec2e <smp_write_at>:
    if (!writer) {
    ec2e:	b160      	cbz	r0, ec4a <smp_write_at+0x1c>
{
    ec30:	b538      	push	{r3, r4, r5, lr}
    ec32:	4605      	mov	r5, r0
    m = cmw->m;
    ec34:	6884      	ldr	r4, [r0, #8]
    if (offset > OS_MBUF_PKTLEN(m)) {
    ec36:	8a20      	ldrh	r0, [r4, #16]
    ec38:	4288      	cmp	r0, r1
    ec3a:	d308      	bcc.n	ec4e <smp_write_at+0x20>
    rc = os_mbuf_copyinto(m, offset, data, len);
    ec3c:	4620      	mov	r0, r4
    ec3e:	f7fe fde0 	bl	d802 <os_mbuf_copyinto>
    if (rc) {
    ec42:	b930      	cbnz	r0, ec52 <smp_write_at+0x24>
    writer->bytes_written = OS_MBUF_PKTLEN(m);
    ec44:	8a23      	ldrh	r3, [r4, #16]
    ec46:	606b      	str	r3, [r5, #4]
}
    ec48:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_EINVAL;
    ec4a:	2003      	movs	r0, #3
}
    ec4c:	4770      	bx	lr
        return MGMT_ERR_EINVAL;
    ec4e:	2003      	movs	r0, #3
    ec50:	e7fa      	b.n	ec48 <smp_write_at+0x1a>
        return MGMT_ERR_ENOMEM;
    ec52:	2002      	movs	r0, #2
    ec54:	e7f8      	b.n	ec48 <smp_write_at+0x1a>

0000ec56 <smp_reset_buf>:
    if (!m) {
    ec56:	b128      	cbz	r0, ec64 <smp_reset_buf+0xe>
{
    ec58:	b508      	push	{r3, lr}
    os_mbuf_adj(m, -1 * OS_MBUF_PKTLEN((struct os_mbuf *)m));
    ec5a:	8a01      	ldrh	r1, [r0, #16]
    ec5c:	4249      	negs	r1, r1
    ec5e:	f7fe fce0 	bl	d622 <os_mbuf_adj>
}
    ec62:	bd08      	pop	{r3, pc}
    ec64:	4770      	bx	lr

0000ec66 <smp_trim_front>:
{
    ec66:	b508      	push	{r3, lr}
    os_mbuf_adj(m, len);
    ec68:	f7fe fcdb 	bl	d622 <os_mbuf_adj>
}
    ec6c:	bd08      	pop	{r3, pc}

0000ec6e <smp_alloc_rsp>:
{
    ec6e:	b538      	push	{r3, r4, r5, lr}
   if (!req) {
    ec70:	4604      	mov	r4, r0
    ec72:	b180      	cbz	r0, ec96 <smp_alloc_rsp+0x28>
   rsp = os_msys_get_pkthdr(0, OS_MBUF_USRHDR_LEN(m));
    ec74:	7941      	ldrb	r1, [r0, #5]
    ec76:	3908      	subs	r1, #8
    ec78:	b289      	uxth	r1, r1
    ec7a:	2000      	movs	r0, #0
    ec7c:	f7ff f8a1 	bl	ddc2 <os_msys_get_pkthdr>
   if (!rsp) {
    ec80:	4605      	mov	r5, r0
    ec82:	b130      	cbz	r0, ec92 <smp_alloc_rsp+0x24>
   memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(m), OS_MBUF_USRHDR_LEN(m));
    ec84:	7962      	ldrb	r2, [r4, #5]
    ec86:	3a08      	subs	r2, #8
    ec88:	f104 0118 	add.w	r1, r4, #24
    ec8c:	3018      	adds	r0, #24
    ec8e:	f7ff fe93 	bl	e9b8 <memcpy>
}
    ec92:	4628      	mov	r0, r5
    ec94:	bd38      	pop	{r3, r4, r5, pc}
       return NULL;
    ec96:	4605      	mov	r5, r0
    ec98:	e7fb      	b.n	ec92 <smp_alloc_rsp+0x24>

0000ec9a <smp_rsp_frag_alloc>:
/**
 * Allocates an mbuf to costain an outgoing response fragment.
 */
static struct os_mbuf *
smp_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
    ec9a:	b538      	push	{r3, r4, r5, lr}
    ec9c:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
    ec9e:	7949      	ldrb	r1, [r1, #5]
    eca0:	3908      	subs	r1, #8
    eca2:	b289      	uxth	r1, r1
    eca4:	f7ff f88d 	bl	ddc2 <os_msys_get_pkthdr>
    if (frag != NULL) {
    eca8:	4605      	mov	r5, r0
    ecaa:	b130      	cbz	r0, ecba <smp_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragmest mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
    ecac:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
    ecae:	3a08      	subs	r2, #8
    ecb0:	f104 0118 	add.w	r1, r4, #24
    ecb4:	3018      	adds	r0, #24
    ecb6:	f7ff fe7f 	bl	e9b8 <memcpy>
    }

    return frag;
}
    ecba:	4628      	mov	r0, r5
    ecbc:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ecc0 <smp_tx_rsp>:

int
smp_tx_rsp(struct smp_streamer *ns, void *rsp, void *arg)
{
    ecc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecc2:	b083      	sub	sp, #12
    ecc4:	460d      	mov	r5, r1
    ecc6:	4616      	mov	r6, r2
    struct os_mbuf *m;
    uint16_t mtu;
    int rc;

    st = arg;
    m  = rsp;
    ecc8:	9101      	str	r1, [sp, #4]

    mtu = st->st_get_mtu(rsp);
    ecca:	6b13      	ldr	r3, [r2, #48]	; 0x30
    eccc:	4608      	mov	r0, r1
    ecce:	4798      	blx	r3
    if (mtu == 0U) {
    ecd0:	4607      	mov	r7, r0
    ecd2:	b180      	cbz	r0, ecf6 <smp_tx_rsp+0x36>
        /* The transport cannot support a transmission right now. */
        return MGMT_ERR_EUNKNOWN;
    }

    while (m != NULL) {
    ecd4:	9b01      	ldr	r3, [sp, #4]
    ecd6:	b163      	cbz	r3, ecf2 <smp_tx_rsp+0x32>
        frag = mem_split_frag(&m, mtu, smp_rsp_frag_alloc, rsp);
    ecd8:	462b      	mov	r3, r5
    ecda:	4a09      	ldr	r2, [pc, #36]	; (ed00 <smp_tx_rsp+0x40>)
    ecdc:	4639      	mov	r1, r7
    ecde:	a801      	add	r0, sp, #4
    ece0:	f003 fa5c 	bl	1219c <mem_split_frag>
        if (frag == NULL) {
    ece4:	b150      	cbz	r0, ecfc <smp_tx_rsp+0x3c>
            return MGMT_ERR_ENOMEM;
        }

        rc = st->st_output(frag);
    ece6:	6af4      	ldr	r4, [r6, #44]	; 0x2c
    ece8:	47a0      	blx	r4
        if (rc != 0) {
    ecea:	2800      	cmp	r0, #0
    ecec:	d0f2      	beq.n	ecd4 <smp_tx_rsp+0x14>
            return MGMT_ERR_EUNKNOWN;
    ecee:	2001      	movs	r0, #1
    ecf0:	e002      	b.n	ecf8 <smp_tx_rsp+0x38>
        }
    }

    return 0;
    ecf2:	2000      	movs	r0, #0
    ecf4:	e000      	b.n	ecf8 <smp_tx_rsp+0x38>
        return MGMT_ERR_EUNKNOWN;
    ecf6:	2001      	movs	r0, #1
}
    ecf8:	b003      	add	sp, #12
    ecfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return MGMT_ERR_ENOMEM;
    ecfc:	2002      	movs	r0, #2
    ecfe:	e7fb      	b.n	ecf8 <smp_tx_rsp+0x38>
    ed00:	0000ec9b 	.word	0x0000ec9b

0000ed04 <smp_process_packet>:
    struct cbor_mbuf_reader reader;
    struct cbor_mbuf_writer writer;
    struct os_mbuf *m;
    int rc;

    if (!st) {
    ed04:	b1c0      	cbz	r0, ed38 <smp_process_packet+0x34>
{
    ed06:	b510      	push	{r4, lr}
    ed08:	b08c      	sub	sp, #48	; 0x30
    ed0a:	4604      	mov	r4, r0
        return MGMT_ERR_EINVAL;
    }

    st->st_streamer = (struct smp_streamer) {
    ed0c:	4b0e      	ldr	r3, [pc, #56]	; (ed48 <smp_process_packet+0x44>)
    ed0e:	6003      	str	r3, [r0, #0]
    ed10:	6040      	str	r0, [r0, #4]
    ed12:	ab03      	add	r3, sp, #12
    ed14:	6083      	str	r3, [r0, #8]
    ed16:	f8c0 d00c 	str.w	sp, [r0, #12]
    ed1a:	4b0c      	ldr	r3, [pc, #48]	; (ed4c <smp_process_packet+0x48>)
    ed1c:	6103      	str	r3, [r0, #16]
        },
        .tx_rsp_cb = smp_tx_rsp,
    };

    while (1) {
        m = os_mqueue_get(&st->st_imq);
    ed1e:	f104 0014 	add.w	r0, r4, #20
    ed22:	f7fe fb38 	bl	d396 <os_mqueue_get>
        if (!m) {
    ed26:	4601      	mov	r1, r0
    ed28:	b148      	cbz	r0, ed3e <smp_process_packet+0x3a>
            break;
        }

        rc = smp_process_request_packet(&st->st_streamer, m);
    ed2a:	4620      	mov	r0, r4
    ed2c:	f005 fa9a 	bl	14264 <smp_process_request_packet>
        if (rc) {
    ed30:	4603      	mov	r3, r0
    ed32:	2800      	cmp	r0, #0
    ed34:	d0f3      	beq.n	ed1e <smp_process_packet+0x1a>
    ed36:	e003      	b.n	ed40 <smp_process_packet+0x3c>
        return MGMT_ERR_EINVAL;
    ed38:	2303      	movs	r3, #3
            return rc;
        }
    }
    
    return 0;
}
    ed3a:	4618      	mov	r0, r3
    ed3c:	4770      	bx	lr
    return 0;
    ed3e:	2300      	movs	r3, #0
}
    ed40:	4618      	mov	r0, r3
    ed42:	b00c      	add	sp, #48	; 0x30
    ed44:	bd10      	pop	{r4, pc}
    ed46:	bf00      	nop
    ed48:	0002d8c0 	.word	0x0002d8c0
    ed4c:	0000ecc1 	.word	0x0000ecc1

0000ed50 <smp_event_data_in>:
    return rc;
}

static void
smp_event_data_in(struct os_event *ev)
{
    ed50:	b508      	push	{r3, lr}
    smp_process_packet(ev->ev_arg);
    ed52:	6880      	ldr	r0, [r0, #8]
    ed54:	f7ff ffd6 	bl	ed04 <smp_process_packet>
}
    ed58:	bd08      	pop	{r3, pc}
	...

0000ed5c <mgmt_evq_set>:
    g_smp_evq = evq;
    ed5c:	4b01      	ldr	r3, [pc, #4]	; (ed64 <mgmt_evq_set+0x8>)
    ed5e:	6018      	str	r0, [r3, #0]
}
    ed60:	4770      	bx	lr
    ed62:	bf00      	nop
    ed64:	20001998 	.word	0x20001998

0000ed68 <smp_rx_req>:
{
    ed68:	b538      	push	{r3, r4, r5, lr}
    ed6a:	4605      	mov	r5, r0
    ed6c:	460c      	mov	r4, r1
    rc = os_mqueue_put(&st->st_imq, os_eventq_dflt_get(), req);
    ed6e:	f7fe fb05 	bl	d37c <os_eventq_dflt_get>
    ed72:	4601      	mov	r1, r0
    ed74:	4622      	mov	r2, r4
    ed76:	f105 0014 	add.w	r0, r5, #20
    ed7a:	f7fe fb1d 	bl	d3b8 <os_mqueue_put>
    if (rc) {
    ed7e:	4605      	mov	r5, r0
    ed80:	b908      	cbnz	r0, ed86 <smp_rx_req+0x1e>
}
    ed82:	4628      	mov	r0, r5
    ed84:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(req);
    ed86:	4620      	mov	r0, r4
    ed88:	f7fe fb74 	bl	d474 <os_mbuf_free_chain>
    return rc;
    ed8c:	e7f9      	b.n	ed82 <smp_rx_req+0x1a>
	...

0000ed90 <smp_transport_init>:

int
smp_transport_init(struct smp_transport *st,
                   smp_transport_out_func_t output_func,
                   smp_transport_get_mtu_func_t get_mtu_func)
{
    ed90:	b508      	push	{r3, lr}
    int rc;

    st->st_output = output_func;
    ed92:	62c1      	str	r1, [r0, #44]	; 0x2c
    st->st_get_mtu = get_mtu_func;
    ed94:	6302      	str	r2, [r0, #48]	; 0x30

    rc = os_mqueue_init(&st->st_imq, smp_event_data_in, st);
    ed96:	4602      	mov	r2, r0
    ed98:	4902      	ldr	r1, [pc, #8]	; (eda4 <smp_transport_init+0x14>)
    ed9a:	3014      	adds	r0, #20
    ed9c:	f7fe faf2 	bl	d384 <os_mqueue_init>
    }

    return 0;
err:
    return rc;
}
    eda0:	bd08      	pop	{r3, pc}
    eda2:	bf00      	nop
    eda4:	0000ed51 	.word	0x0000ed51

0000eda8 <smp_pkg_init>:

void
smp_pkg_init(void)
{
    eda8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    edaa:	4b09      	ldr	r3, [pc, #36]	; (edd0 <smp_pkg_init+0x28>)
    edac:	781b      	ldrb	r3, [r3, #0]
    edae:	b123      	cbz	r3, edba <smp_pkg_init+0x12>

    mgmt_evq_set(os_eventq_dflt_get());
    edb0:	f7fe fae4 	bl	d37c <os_eventq_dflt_get>
    edb4:	f7ff ffd2 	bl	ed5c <mgmt_evq_set>
}
    edb8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    edba:	f7fd f9ef 	bl	c19c <hal_debugger_connected>
    edbe:	b100      	cbz	r0, edc2 <smp_pkg_init+0x1a>
    edc0:	be01      	bkpt	0x0001
    edc2:	2300      	movs	r3, #0
    edc4:	461a      	mov	r2, r3
    edc6:	4619      	mov	r1, r3
    edc8:	4618      	mov	r0, r3
    edca:	f7fd feeb 	bl	cba4 <__assert_func>
    edce:	bf00      	nop
    edd0:	20001e3c 	.word	0x20001e3c

0000edd4 <smp_ble_get_mtu>:
            return BLE_ATT_ERR_UNLIKELY;
    }
}

uint16_t
smp_ble_get_mtu(struct os_mbuf *req) {
    edd4:	b508      	push	{r3, lr}

    uint16_t conn_handle;
    uint16_t mtu;

    memcpy(&conn_handle, OS_MBUF_USRHDR(req), sizeof (conn_handle));
    mtu = ble_att_mtu(conn_handle);
    edd6:	8b00      	ldrh	r0, [r0, #24]
    edd8:	f00d fcd1 	bl	1c77e <ble_att_mtu>
    if (!mtu) {
    eddc:	4603      	mov	r3, r0
    edde:	b108      	cbz	r0, ede4 <smp_ble_get_mtu+0x10>
        /* No longer connected. */
        return 0;
    }

    /* 3 is the number of bytes for ATT notification base */
    mtu = mtu - 3;
    ede0:	1ec3      	subs	r3, r0, #3
    ede2:	b29b      	uxth	r3, r3

    return (mtu);
}
    ede4:	4618      	mov	r0, r3
    ede6:	bd08      	pop	{r3, pc}

0000ede8 <smp_ble_out>:
    }
}

static int
smp_ble_out(struct os_mbuf *om)
{
    ede8:	b538      	push	{r3, r4, r5, lr}
    edea:	4604      	mov	r4, r0
    int rc;

    rc = os_mqueue_put(&g_smp_ble_mq, os_eventq_dflt_get(), om);
    edec:	f7fe fac6 	bl	d37c <os_eventq_dflt_get>
    edf0:	4601      	mov	r1, r0
    edf2:	4622      	mov	r2, r4
    edf4:	4805      	ldr	r0, [pc, #20]	; (ee0c <smp_ble_out+0x24>)
    edf6:	f7fe fadf 	bl	d3b8 <os_mqueue_put>
    if (rc != 0) {
    edfa:	4605      	mov	r5, r0
    edfc:	b908      	cbnz	r0, ee02 <smp_ble_out+0x1a>

    return 0;
err:
    os_mbuf_free_chain(om);
    return rc;
}
    edfe:	4628      	mov	r0, r5
    ee00:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(om);
    ee02:	4620      	mov	r0, r4
    ee04:	f7fe fb36 	bl	d474 <os_mbuf_free_chain>
    return rc;
    ee08:	e7f9      	b.n	edfe <smp_ble_out+0x16>
    ee0a:	bf00      	nop
    ee0c:	200019a0 	.word	0x200019a0

0000ee10 <smp_ble_event_data_in>:
{
    ee10:	b508      	push	{r3, lr}
    while ((m_resp = os_mqueue_get(&g_smp_ble_mq)) != NULL) {
    ee12:	480d      	ldr	r0, [pc, #52]	; (ee48 <smp_ble_event_data_in+0x38>)
    ee14:	f7fe fabf 	bl	d396 <os_mqueue_get>
    ee18:	4602      	mov	r2, r0
    ee1a:	b198      	cbz	r0, ee44 <smp_ble_event_data_in+0x34>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
    ee1c:	7953      	ldrb	r3, [r2, #5]
    ee1e:	3b08      	subs	r3, #8
    ee20:	2b01      	cmp	r3, #1
    ee22:	d905      	bls.n	ee30 <smp_ble_event_data_in+0x20>
        ble_gattc_notify_custom(conn_handle, g_ble_smp_attr_handle,
    ee24:	4b09      	ldr	r3, [pc, #36]	; (ee4c <smp_ble_event_data_in+0x3c>)
    ee26:	8819      	ldrh	r1, [r3, #0]
    ee28:	8b10      	ldrh	r0, [r2, #24]
    ee2a:	f011 fb39 	bl	204a0 <ble_gattc_notify_custom>
    ee2e:	e7f0      	b.n	ee12 <smp_ble_event_data_in+0x2>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
    ee30:	f7fd f9b4 	bl	c19c <hal_debugger_connected>
    ee34:	b100      	cbz	r0, ee38 <smp_ble_event_data_in+0x28>
    ee36:	be01      	bkpt	0x0001
    ee38:	2300      	movs	r3, #0
    ee3a:	461a      	mov	r2, r3
    ee3c:	4619      	mov	r1, r3
    ee3e:	4618      	mov	r0, r3
    ee40:	f7fd feb0 	bl	cba4 <__assert_func>
}
    ee44:	bd08      	pop	{r3, pc}
    ee46:	bf00      	nop
    ee48:	200019a0 	.word	0x200019a0
    ee4c:	2000199c 	.word	0x2000199c

0000ee50 <gatt_svr_chr_access_smp>:
{
    ee50:	b570      	push	{r4, r5, r6, lr}
    switch (ctxt->op) {
    ee52:	7813      	ldrb	r3, [r2, #0]
    ee54:	2b01      	cmp	r3, #1
    ee56:	d132      	bne.n	eebe <gatt_svr_chr_access_smp+0x6e>
    ee58:	4606      	mov	r6, r0
    ee5a:	4614      	mov	r4, r2
            if (OS_MBUF_USRHDR_LEN(ctxt->om) >= sizeof (conn_handle)) {
    ee5c:	6855      	ldr	r5, [r2, #4]
    ee5e:	796b      	ldrb	r3, [r5, #5]
    ee60:	f1a3 0208 	sub.w	r2, r3, #8
    ee64:	2a01      	cmp	r2, #1
    ee66:	d908      	bls.n	ee7a <gatt_svr_chr_access_smp+0x2a>
                ctxt->om = NULL;
    ee68:	2300      	movs	r3, #0
    ee6a:	6063      	str	r3, [r4, #4]
            memcpy(OS_MBUF_USRHDR(m_req), &conn_handle, sizeof(conn_handle));
    ee6c:	832e      	strh	r6, [r5, #24]
            rc = smp_rx_req(&g_smp_ble_transport, m_req);
    ee6e:	4629      	mov	r1, r5
    ee70:	481a      	ldr	r0, [pc, #104]	; (eedc <gatt_svr_chr_access_smp+0x8c>)
    ee72:	f7ff ff79 	bl	ed68 <smp_rx_req>
            if (rc) {
    ee76:	bb70      	cbnz	r0, eed6 <gatt_svr_chr_access_smp+0x86>
}
    ee78:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
    ee7a:	2b07      	cmp	r3, #7
    ee7c:	d90e      	bls.n	ee9c <gatt_svr_chr_access_smp+0x4c>
        startoff = om->om_pkthdr_len;
    ee7e:	b29b      	uxth	r3, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    ee80:	4629      	mov	r1, r5
    ee82:	f851 2b10 	ldr.w	r2, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    ee86:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    ee88:	1ad3      	subs	r3, r2, r3
    ee8a:	b29b      	uxth	r3, r3
            } else if (OS_MBUF_LEADINGSPACE(ctxt->om) >=
    ee8c:	2b01      	cmp	r3, #1
    ee8e:	d907      	bls.n	eea0 <gatt_svr_chr_access_smp+0x50>
                ctxt->om = NULL;
    ee90:	2300      	movs	r3, #0
    ee92:	6063      	str	r3, [r4, #4]
                m_req->om_pkthdr_len += sizeof (conn_handle);
    ee94:	796b      	ldrb	r3, [r5, #5]
    ee96:	3302      	adds	r3, #2
    ee98:	716b      	strb	r3, [r5, #5]
    ee9a:	e7e7      	b.n	ee6c <gatt_svr_chr_access_smp+0x1c>
    startoff = 0;
    ee9c:	2300      	movs	r3, #0
    ee9e:	e7ef      	b.n	ee80 <gatt_svr_chr_access_smp+0x30>
                m_req = os_msys_get_pkthdr(OS_MBUF_PKTLEN(ctxt->om),
    eea0:	2102      	movs	r1, #2
    eea2:	8a28      	ldrh	r0, [r5, #16]
    eea4:	f7fe ff8d 	bl	ddc2 <os_msys_get_pkthdr>
                if (!m_req) {
    eea8:	4605      	mov	r5, r0
    eeaa:	b190      	cbz	r0, eed2 <gatt_svr_chr_access_smp+0x82>
                rc = os_mbuf_appendfrom(m_req, ctxt->om, 0,
    eeac:	6861      	ldr	r1, [r4, #4]
    eeae:	8a0b      	ldrh	r3, [r1, #16]
    eeb0:	2200      	movs	r2, #0
    eeb2:	f7fe fb5d 	bl	d570 <os_mbuf_appendfrom>
                if (rc) {
    eeb6:	2800      	cmp	r0, #0
    eeb8:	d0d8      	beq.n	ee6c <gatt_svr_chr_access_smp+0x1c>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
    eeba:	2011      	movs	r0, #17
    eebc:	e7dc      	b.n	ee78 <gatt_svr_chr_access_smp+0x28>
            assert(0);
    eebe:	f7fd f96d 	bl	c19c <hal_debugger_connected>
    eec2:	b100      	cbz	r0, eec6 <gatt_svr_chr_access_smp+0x76>
    eec4:	be01      	bkpt	0x0001
    eec6:	2300      	movs	r3, #0
    eec8:	461a      	mov	r2, r3
    eeca:	4619      	mov	r1, r3
    eecc:	4618      	mov	r0, r3
    eece:	f7fd fe69 	bl	cba4 <__assert_func>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
    eed2:	2011      	movs	r0, #17
    eed4:	e7d0      	b.n	ee78 <gatt_svr_chr_access_smp+0x28>
                return BLE_ATT_ERR_UNLIKELY;
    eed6:	200e      	movs	r0, #14
    eed8:	e7ce      	b.n	ee78 <gatt_svr_chr_access_smp+0x28>
    eeda:	bf00      	nop
    eedc:	200019b8 	.word	0x200019b8

0000eee0 <smp_ble_gatt_svr_init>:
 * @param eventq
 * @return 0 on success; non-zero on failure
 */
int
smp_ble_gatt_svr_init(void)
{
    eee0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
    eee2:	480c      	ldr	r0, [pc, #48]	; (ef14 <smp_ble_gatt_svr_init+0x34>)
    eee4:	f012 fbe8 	bl	216b8 <ble_gatts_count_cfg>
    if (rc != 0) {
    eee8:	4603      	mov	r3, r0
    eeea:	b108      	cbz	r0, eef0 <smp_ble_gatt_svr_init+0x10>

    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);

err:
    return rc;
}
    eeec:	4618      	mov	r0, r3
    eeee:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
    eef0:	4808      	ldr	r0, [pc, #32]	; (ef14 <smp_ble_gatt_svr_init+0x34>)
    eef2:	f012 fbbd 	bl	21670 <ble_gatts_add_svcs>
    if (rc != 0) {
    eef6:	4603      	mov	r3, r0
    eef8:	2800      	cmp	r0, #0
    eefa:	d1f7      	bne.n	eeec <smp_ble_gatt_svr_init+0xc>
    os_mqueue_init(&g_smp_ble_mq, &smp_ble_event_data_in, NULL);
    eefc:	2200      	movs	r2, #0
    eefe:	4906      	ldr	r1, [pc, #24]	; (ef18 <smp_ble_gatt_svr_init+0x38>)
    ef00:	4806      	ldr	r0, [pc, #24]	; (ef1c <smp_ble_gatt_svr_init+0x3c>)
    ef02:	f7fe fa3f 	bl	d384 <os_mqueue_init>
    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);
    ef06:	4a06      	ldr	r2, [pc, #24]	; (ef20 <smp_ble_gatt_svr_init+0x40>)
    ef08:	4906      	ldr	r1, [pc, #24]	; (ef24 <smp_ble_gatt_svr_init+0x44>)
    ef0a:	4807      	ldr	r0, [pc, #28]	; (ef28 <smp_ble_gatt_svr_init+0x48>)
    ef0c:	f7ff ff40 	bl	ed90 <smp_transport_init>
    ef10:	4603      	mov	r3, r0
    ef12:	e7eb      	b.n	eeec <smp_ble_gatt_svr_init+0xc>
    ef14:	0002d904 	.word	0x0002d904
    ef18:	0000ee11 	.word	0x0000ee11
    ef1c:	200019a0 	.word	0x200019a0
    ef20:	0000edd5 	.word	0x0000edd5
    ef24:	0000ede9 	.word	0x0000ede9
    ef28:	200019b8 	.word	0x200019b8

0000ef2c <smp_ble_pkg_init>:

void
smp_ble_pkg_init(void)
{
    ef2c:	b510      	push	{r4, lr}
    ef2e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ef30:	4b0f      	ldr	r3, [pc, #60]	; (ef70 <smp_ble_pkg_init+0x44>)
    ef32:	781b      	ldrb	r3, [r3, #0]
    ef34:	b123      	cbz	r3, ef40 <smp_ble_pkg_init+0x14>

    rc = smp_ble_gatt_svr_init();
    ef36:	f7ff ffd3 	bl	eee0 <smp_ble_gatt_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ef3a:	b958      	cbnz	r0, ef54 <smp_ble_pkg_init+0x28>
}
    ef3c:	b002      	add	sp, #8
    ef3e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    ef40:	f7fd f92c 	bl	c19c <hal_debugger_connected>
    ef44:	b100      	cbz	r0, ef48 <smp_ble_pkg_init+0x1c>
    ef46:	be01      	bkpt	0x0001
    ef48:	2300      	movs	r3, #0
    ef4a:	461a      	mov	r2, r3
    ef4c:	4619      	mov	r1, r3
    ef4e:	4618      	mov	r0, r3
    ef50:	f7fd fe28 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ef54:	f7fd f922 	bl	c19c <hal_debugger_connected>
    ef58:	b100      	cbz	r0, ef5c <smp_ble_pkg_init+0x30>
    ef5a:	be01      	bkpt	0x0001
    ef5c:	2000      	movs	r0, #0
    ef5e:	9000      	str	r0, [sp, #0]
    ef60:	4b04      	ldr	r3, [pc, #16]	; (ef74 <smp_ble_pkg_init+0x48>)
    ef62:	681c      	ldr	r4, [r3, #0]
    ef64:	4603      	mov	r3, r0
    ef66:	4602      	mov	r2, r0
    ef68:	4601      	mov	r1, r0
    ef6a:	47a0      	blx	r4
}
    ef6c:	e7e6      	b.n	ef3c <smp_ble_pkg_init+0x10>
    ef6e:	bf00      	nop
    ef70:	20001e3c 	.word	0x20001e3c
    ef74:	2000028c 	.word	0x2000028c

0000ef78 <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
    ef78:	b510      	push	{r4, lr}
    ef7a:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
    ef7c:	2200      	movs	r2, #0
    ef7e:	a903      	add	r1, sp, #12
    ef80:	2011      	movs	r0, #17
    ef82:	f001 fd07 	bl	10994 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ef86:	bb20      	cbnz	r0, efd2 <config_init_fcb+0x5a>
    SYSINIT_PANIC_ASSERT(
    ef88:	9b03      	ldr	r3, [sp, #12]
    ef8a:	2b09      	cmp	r3, #9
    ef8c:	d82e      	bhi.n	efec <config_init_fcb+0x74>
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
    ef8e:	4a30      	ldr	r2, [pc, #192]	; (f050 <config_init_fcb+0xd8>)
    ef90:	a903      	add	r1, sp, #12
    ef92:	2011      	movs	r0, #17
    ef94:	f001 fcfe 	bl	10994 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
    ef98:	482e      	ldr	r0, [pc, #184]	; (f054 <config_init_fcb+0xdc>)
    ef9a:	9b03      	ldr	r3, [sp, #12]
    ef9c:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
    ef9e:	f000 fca3 	bl	f8e8 <conf_fcb_src>
    if (rc) {
    efa2:	4603      	mov	r3, r0
    efa4:	2800      	cmp	r0, #0
    efa6:	d032      	beq.n	f00e <config_init_fcb+0x96>
        for (cnt = 0;
    efa8:	2300      	movs	r3, #0
    efaa:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
    efac:	4b29      	ldr	r3, [pc, #164]	; (f054 <config_init_fcb+0xdc>)
    efae:	7b5a      	ldrb	r2, [r3, #13]
    efb0:	9b03      	ldr	r3, [sp, #12]
        for (cnt = 0;
    efb2:	429a      	cmp	r2, r3
    efb4:	dd27      	ble.n	f006 <config_init_fcb+0x8e>
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
    efb6:	4826      	ldr	r0, [pc, #152]	; (f050 <config_init_fcb+0xd8>)
    efb8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    efbc:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    efc0:	689a      	ldr	r2, [r3, #8]
    efc2:	2100      	movs	r1, #0
    efc4:	4618      	mov	r0, r3
    efc6:	f001 fd49 	bl	10a5c <flash_area_erase>
             cnt++) {
    efca:	9b03      	ldr	r3, [sp, #12]
    efcc:	3301      	adds	r3, #1
    efce:	9303      	str	r3, [sp, #12]
    efd0:	e7ec      	b.n	efac <config_init_fcb+0x34>
    SYSINIT_PANIC_ASSERT(rc == 0);
    efd2:	f7fd f8e3 	bl	c19c <hal_debugger_connected>
    efd6:	b100      	cbz	r0, efda <config_init_fcb+0x62>
    efd8:	be01      	bkpt	0x0001
    efda:	2000      	movs	r0, #0
    efdc:	9000      	str	r0, [sp, #0]
    efde:	4b1e      	ldr	r3, [pc, #120]	; (f058 <config_init_fcb+0xe0>)
    efe0:	681c      	ldr	r4, [r3, #0]
    efe2:	4603      	mov	r3, r0
    efe4:	4602      	mov	r2, r0
    efe6:	4601      	mov	r1, r0
    efe8:	47a0      	blx	r4
    efea:	e7cd      	b.n	ef88 <config_init_fcb+0x10>
    SYSINIT_PANIC_ASSERT(
    efec:	f7fd f8d6 	bl	c19c <hal_debugger_connected>
    eff0:	b100      	cbz	r0, eff4 <config_init_fcb+0x7c>
    eff2:	be01      	bkpt	0x0001
    eff4:	2000      	movs	r0, #0
    eff6:	9000      	str	r0, [sp, #0]
    eff8:	4b17      	ldr	r3, [pc, #92]	; (f058 <config_init_fcb+0xe0>)
    effa:	681c      	ldr	r4, [r3, #0]
    effc:	4603      	mov	r3, r0
    effe:	4602      	mov	r2, r0
    f000:	4601      	mov	r1, r0
    f002:	47a0      	blx	r4
    f004:	e7c3      	b.n	ef8e <config_init_fcb+0x16>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
    f006:	4813      	ldr	r0, [pc, #76]	; (f054 <config_init_fcb+0xdc>)
    f008:	f000 fc6e 	bl	f8e8 <conf_fcb_src>
    f00c:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
    f00e:	b92b      	cbnz	r3, f01c <config_init_fcb+0xa4>
    rc = conf_fcb_dst(&config_init_conf_fcb);
    f010:	4810      	ldr	r0, [pc, #64]	; (f054 <config_init_fcb+0xdc>)
    f012:	f000 fc95 	bl	f940 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f016:	b970      	cbnz	r0, f036 <config_init_fcb+0xbe>
}
    f018:	b004      	add	sp, #16
    f01a:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    f01c:	f7fd f8be 	bl	c19c <hal_debugger_connected>
    f020:	b100      	cbz	r0, f024 <config_init_fcb+0xac>
    f022:	be01      	bkpt	0x0001
    f024:	2000      	movs	r0, #0
    f026:	9000      	str	r0, [sp, #0]
    f028:	4b0b      	ldr	r3, [pc, #44]	; (f058 <config_init_fcb+0xe0>)
    f02a:	681c      	ldr	r4, [r3, #0]
    f02c:	4603      	mov	r3, r0
    f02e:	4602      	mov	r2, r0
    f030:	4601      	mov	r1, r0
    f032:	47a0      	blx	r4
    f034:	e7ec      	b.n	f010 <config_init_fcb+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f036:	f7fd f8b1 	bl	c19c <hal_debugger_connected>
    f03a:	b100      	cbz	r0, f03e <config_init_fcb+0xc6>
    f03c:	be01      	bkpt	0x0001
    f03e:	2000      	movs	r0, #0
    f040:	9000      	str	r0, [sp, #0]
    f042:	4b05      	ldr	r3, [pc, #20]	; (f058 <config_init_fcb+0xe0>)
    f044:	681c      	ldr	r4, [r3, #0]
    f046:	4603      	mov	r3, r0
    f048:	4602      	mov	r2, r0
    f04a:	4601      	mov	r1, r0
    f04c:	47a0      	blx	r4
}
    f04e:	e7e3      	b.n	f018 <config_init_fcb+0xa0>
    f050:	200019ec 	.word	0x200019ec
    f054:	200001c4 	.word	0x200001c4
    f058:	2000028c 	.word	0x2000028c

0000f05c <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
    f05c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f05e:	4b09      	ldr	r3, [pc, #36]	; (f084 <config_pkg_init+0x28>)
    f060:	781b      	ldrb	r3, [r3, #0]
    f062:	b123      	cbz	r3, f06e <config_pkg_init+0x12>

    conf_init();
    f064:	f000 f93e 	bl	f2e4 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
    f068:	f7ff ff86 	bl	ef78 <config_init_fcb>
#elif MYNEWT_VAL(CONFIG_FCB2)
    config_init_fcb2();
#endif
#endif
}
    f06c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    f06e:	f7fd f895 	bl	c19c <hal_debugger_connected>
    f072:	b100      	cbz	r0, f076 <config_pkg_init+0x1a>
    f074:	be01      	bkpt	0x0001
    f076:	2300      	movs	r3, #0
    f078:	461a      	mov	r2, r3
    f07a:	4619      	mov	r1, r3
    f07c:	4618      	mov	r0, r3
    f07e:	f7fd fd91 	bl	cba4 <__assert_func>
    f082:	bf00      	nop
    f084:	20001e3c 	.word	0x20001e3c

0000f088 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
    f088:	4770      	bx	lr

0000f08a <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
    f08a:	b538      	push	{r3, r4, r5, lr}
    f08c:	460d      	mov	r5, r1
    f08e:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
    f090:	6811      	ldr	r1, [r2, #0]
    f092:	f7ff fcd2 	bl	ea3a <strcmp>
    f096:	b9a8      	cbnz	r0, f0c4 <conf_dup_check_cb+0x3a>
        return;
    }
    if (!val) {
    f098:	b145      	cbz	r5, f0ac <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
    f09a:	6861      	ldr	r1, [r4, #4]
    f09c:	b181      	cbz	r1, f0c0 <conf_dup_check_cb+0x36>
    f09e:	4628      	mov	r0, r5
    f0a0:	f7ff fccb 	bl	ea3a <strcmp>
    f0a4:	b960      	cbnz	r0, f0c0 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
    f0a6:	2301      	movs	r3, #1
    f0a8:	60a3      	str	r3, [r4, #8]
    f0aa:	e00b      	b.n	f0c4 <conf_dup_check_cb+0x3a>
        if (!cdca->val || cdca->val[0] == '\0') {
    f0ac:	6863      	ldr	r3, [r4, #4]
    f0ae:	b10b      	cbz	r3, f0b4 <conf_dup_check_cb+0x2a>
    f0b0:	781b      	ldrb	r3, [r3, #0]
    f0b2:	b913      	cbnz	r3, f0ba <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
    f0b4:	2301      	movs	r3, #1
    f0b6:	60a3      	str	r3, [r4, #8]
    f0b8:	e004      	b.n	f0c4 <conf_dup_check_cb+0x3a>
            cdca->is_dup = 0;
    f0ba:	2300      	movs	r3, #0
    f0bc:	60a3      	str	r3, [r4, #8]
    f0be:	e001      	b.n	f0c4 <conf_dup_check_cb+0x3a>
        } else {
            cdca->is_dup = 0;
    f0c0:	2300      	movs	r3, #0
    f0c2:	60a3      	str	r3, [r4, #8]
        }
    }
}
    f0c4:	bd38      	pop	{r3, r4, r5, pc}

0000f0c6 <conf_load_cb>:
{
    f0c6:	b538      	push	{r3, r4, r5, lr}
    f0c8:	4604      	mov	r4, r0
    f0ca:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
    f0cc:	b122      	cbz	r2, f0d8 <conf_load_cb+0x12>
    f0ce:	4610      	mov	r0, r2
    f0d0:	4621      	mov	r1, r4
    f0d2:	f7ff fcb2 	bl	ea3a <strcmp>
    f0d6:	b918      	cbnz	r0, f0e0 <conf_load_cb+0x1a>
        conf_set_value(name, val);
    f0d8:	4629      	mov	r1, r5
    f0da:	4620      	mov	r0, r4
    f0dc:	f000 fabd 	bl	f65a <conf_set_value>
}
    f0e0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000f0e4 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    f0e4:	4b08      	ldr	r3, [pc, #32]	; (f108 <conf_src_register+0x24>)
    f0e6:	6819      	ldr	r1, [r3, #0]
    f0e8:	460b      	mov	r3, r1
    prev = NULL;
    f0ea:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    f0ec:	b113      	cbz	r3, f0f4 <conf_src_register+0x10>
        prev = cur;
    f0ee:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    f0f0:	681b      	ldr	r3, [r3, #0]
    f0f2:	e7fb      	b.n	f0ec <conf_src_register+0x8>
    if (!prev) {
    f0f4:	b11a      	cbz	r2, f0fe <conf_src_register+0x1a>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
    f0f6:	6813      	ldr	r3, [r2, #0]
    f0f8:	6003      	str	r3, [r0, #0]
    f0fa:	6010      	str	r0, [r2, #0]
}
    f0fc:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
    f0fe:	6001      	str	r1, [r0, #0]
    f100:	4b01      	ldr	r3, [pc, #4]	; (f108 <conf_src_register+0x24>)
    f102:	6018      	str	r0, [r3, #0]
    f104:	4770      	bx	lr
    f106:	bf00      	nop
    f108:	20001a58 	.word	0x20001a58

0000f10c <conf_dst_register>:
    conf_save_dst = cs;
    f10c:	4b01      	ldr	r3, [pc, #4]	; (f114 <conf_dst_register+0x8>)
    f10e:	6018      	str	r0, [r3, #0]
}
    f110:	4770      	bx	lr
    f112:	bf00      	nop
    f114:	20001a60 	.word	0x20001a60

0000f118 <conf_load>:
{
    f118:	b510      	push	{r4, lr}
    conf_lock();
    f11a:	f000 f90d 	bl	f338 <conf_lock>
    conf_loaded = true;
    f11e:	2301      	movs	r3, #1
    f120:	4a0e      	ldr	r2, [pc, #56]	; (f15c <conf_load+0x44>)
    f122:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
    f124:	4a0e      	ldr	r2, [pc, #56]	; (f160 <conf_load+0x48>)
    f126:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f128:	4b0e      	ldr	r3, [pc, #56]	; (f164 <conf_load+0x4c>)
    f12a:	681c      	ldr	r4, [r3, #0]
    f12c:	e003      	b.n	f136 <conf_load+0x1e>
            conf_commit(NULL);
    f12e:	2000      	movs	r0, #0
    f130:	f000 fac8 	bl	f6c4 <conf_commit>
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f134:	6824      	ldr	r4, [r4, #0]
    f136:	b14c      	cbz	r4, f14c <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
    f138:	6863      	ldr	r3, [r4, #4]
    f13a:	681b      	ldr	r3, [r3, #0]
    f13c:	2200      	movs	r2, #0
    f13e:	490a      	ldr	r1, [pc, #40]	; (f168 <conf_load+0x50>)
    f140:	4620      	mov	r0, r4
    f142:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
    f144:	6823      	ldr	r3, [r4, #0]
    f146:	2b00      	cmp	r3, #0
    f148:	d1f1      	bne.n	f12e <conf_load+0x16>
    f14a:	e7f3      	b.n	f134 <conf_load+0x1c>
    conf_loading = false;
    f14c:	4b04      	ldr	r3, [pc, #16]	; (f160 <conf_load+0x48>)
    f14e:	701c      	strb	r4, [r3, #0]
    conf_unlock();
    f150:	f000 f8fc 	bl	f34c <conf_unlock>
    return conf_commit(NULL);
    f154:	4620      	mov	r0, r4
    f156:	f000 fab5 	bl	f6c4 <conf_commit>
}
    f15a:	bd10      	pop	{r4, pc}
    f15c:	20001a5c 	.word	0x20001a5c
    f160:	20001a5d 	.word	0x20001a5d
    f164:	20001a58 	.word	0x20001a58
    f168:	0000f0c7 	.word	0x0000f0c7

0000f16c <conf_ensure_loaded>:
{
    f16c:	b508      	push	{r3, lr}
    if (conf_loaded) {
    f16e:	4b04      	ldr	r3, [pc, #16]	; (f180 <conf_ensure_loaded+0x14>)
    f170:	781b      	ldrb	r3, [r3, #0]
    f172:	b10b      	cbz	r3, f178 <conf_ensure_loaded+0xc>
        return 0;
    f174:	2000      	movs	r0, #0
}
    f176:	bd08      	pop	{r3, pc}
    return conf_load();
    f178:	f7ff ffce 	bl	f118 <conf_load>
    f17c:	e7fb      	b.n	f176 <conf_ensure_loaded+0xa>
    f17e:	bf00      	nop
    f180:	20001a5c 	.word	0x20001a5c

0000f184 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
    f184:	b570      	push	{r4, r5, r6, lr}
    f186:	b084      	sub	sp, #16
    f188:	4605      	mov	r5, r0
    f18a:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    f18c:	f000 f8d4 	bl	f338 <conf_lock>
    if (!conf_save_dst) {
    f190:	4b13      	ldr	r3, [pc, #76]	; (f1e0 <conf_save_one+0x5c>)
    f192:	681b      	ldr	r3, [r3, #0]
    f194:	b1fb      	cbz	r3, f1d6 <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    f196:	9501      	str	r5, [sp, #4]
    cdca.val = value;
    f198:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
    f19a:	2300      	movs	r3, #0
    f19c:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f19e:	4b11      	ldr	r3, [pc, #68]	; (f1e4 <conf_save_one+0x60>)
    f1a0:	681c      	ldr	r4, [r3, #0]
    f1a2:	e006      	b.n	f1b2 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
    f1a4:	6863      	ldr	r3, [r4, #4]
    f1a6:	681b      	ldr	r3, [r3, #0]
    f1a8:	aa01      	add	r2, sp, #4
    f1aa:	490f      	ldr	r1, [pc, #60]	; (f1e8 <conf_save_one+0x64>)
    f1ac:	4620      	mov	r0, r4
    f1ae:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f1b0:	6824      	ldr	r4, [r4, #0]
    f1b2:	2c00      	cmp	r4, #0
    f1b4:	d1f6      	bne.n	f1a4 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
    f1b6:	9b03      	ldr	r3, [sp, #12]
    f1b8:	2b01      	cmp	r3, #1
    f1ba:	d00e      	beq.n	f1da <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
    f1bc:	4b08      	ldr	r3, [pc, #32]	; (f1e0 <conf_save_one+0x5c>)
    f1be:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
    f1c0:	6843      	ldr	r3, [r0, #4]
    f1c2:	689b      	ldr	r3, [r3, #8]
    f1c4:	4632      	mov	r2, r6
    f1c6:	4629      	mov	r1, r5
    f1c8:	4798      	blx	r3
    f1ca:	4604      	mov	r4, r0
out:
    conf_unlock();
    f1cc:	f000 f8be 	bl	f34c <conf_unlock>
    return rc;
}
    f1d0:	4620      	mov	r0, r4
    f1d2:	b004      	add	sp, #16
    f1d4:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    f1d6:	240a      	movs	r4, #10
    f1d8:	e7f8      	b.n	f1cc <conf_save_one+0x48>
        rc = 0;
    f1da:	2400      	movs	r4, #0
    f1dc:	e7f6      	b.n	f1cc <conf_save_one+0x48>
    f1de:	bf00      	nop
    f1e0:	20001a60 	.word	0x20001a60
    f1e4:	20001a58 	.word	0x20001a58
    f1e8:	0000f08b 	.word	0x0000f08b

0000f1ec <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    f1ec:	b508      	push	{r3, lr}
    conf_save_one(name, value);
    f1ee:	f7ff ffc9 	bl	f184 <conf_save_one>
}
    f1f2:	bd08      	pop	{r3, pc}

0000f1f4 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
    f1f4:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    f1f6:	f000 f89f 	bl	f338 <conf_lock>
    cs = conf_save_dst;
    f1fa:	4b11      	ldr	r3, [pc, #68]	; (f240 <conf_save+0x4c>)
    f1fc:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
    f1fe:	b1e6      	cbz	r6, f23a <conf_save+0x46>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
    f200:	6873      	ldr	r3, [r6, #4]
    f202:	685b      	ldr	r3, [r3, #4]
    f204:	b10b      	cbz	r3, f20a <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
    f206:	4630      	mov	r0, r6
    f208:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f20a:	4b0e      	ldr	r3, [pc, #56]	; (f244 <conf_save+0x50>)
    f20c:	681c      	ldr	r4, [r3, #0]
    rc = 0;
    f20e:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f210:	e000      	b.n	f214 <conf_save+0x20>
    f212:	6824      	ldr	r4, [r4, #0]
    f214:	b144      	cbz	r4, f228 <conf_save+0x34>
        rc2 = conf_export_cb(ch, conf_store_one, CONF_EXPORT_PERSIST);
    f216:	2200      	movs	r2, #0
    f218:	490b      	ldr	r1, [pc, #44]	; (f248 <conf_save+0x54>)
    f21a:	4620      	mov	r0, r4
    f21c:	f000 fa0a 	bl	f634 <conf_export_cb>
        if (!rc) {
    f220:	2d00      	cmp	r5, #0
    f222:	d1f6      	bne.n	f212 <conf_save+0x1e>
            rc = rc2;
    f224:	4605      	mov	r5, r0
    f226:	e7f4      	b.n	f212 <conf_save+0x1e>
        }
    }
    if (cs->cs_itf->csi_save_end) {
    f228:	6873      	ldr	r3, [r6, #4]
    f22a:	68db      	ldr	r3, [r3, #12]
    f22c:	b10b      	cbz	r3, f232 <conf_save+0x3e>
        cs->cs_itf->csi_save_end(cs);
    f22e:	4630      	mov	r0, r6
    f230:	4798      	blx	r3
    }
out:
    conf_unlock();
    f232:	f000 f88b 	bl	f34c <conf_unlock>
    return rc;
}
    f236:	4628      	mov	r0, r5
    f238:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    f23a:	250a      	movs	r5, #10
    f23c:	e7f9      	b.n	f232 <conf_save+0x3e>
    f23e:	bf00      	nop
    f240:	20001a60 	.word	0x20001a60
    f244:	20001a64 	.word	0x20001a64
    f248:	0000f1ed 	.word	0x0000f1ed

0000f24c <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
    f24c:	2300      	movs	r3, #0
    f24e:	4a02      	ldr	r2, [pc, #8]	; (f258 <conf_store_init+0xc>)
    f250:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
    f252:	4a02      	ldr	r2, [pc, #8]	; (f25c <conf_store_init+0x10>)
    f254:	6013      	str	r3, [r2, #0]
}
    f256:	4770      	bx	lr
    f258:	20001a5c 	.word	0x20001a5c
    f25c:	20001a58 	.word	0x20001a58

0000f260 <conf_get_cb>:
 * Executes a conf_handler's "get" callback and returns the result.
 */
static char *
conf_get_cb(struct conf_handler *ch, int argc, char **argv, char *val,
            int val_len_max)
{
    f260:	b530      	push	{r4, r5, lr}
    f262:	b083      	sub	sp, #12
    f264:	4604      	mov	r4, r0
    f266:	4608      	mov	r0, r1
    f268:	4611      	mov	r1, r2
    f26a:	461a      	mov	r2, r3
    if (ch->ch_ext) {
    f26c:	7a23      	ldrb	r3, [r4, #8]
    f26e:	b13b      	cbz	r3, f280 <conf_get_cb+0x20>
        if (ch->ch_get_ext != NULL) {
    f270:	68e5      	ldr	r5, [r4, #12]
    f272:	b155      	cbz	r5, f28a <conf_get_cb+0x2a>
            return ch->ch_get_ext(argc, argv, val, val_len_max, ch->ch_arg);
    f274:	69e3      	ldr	r3, [r4, #28]
    f276:	9300      	str	r3, [sp, #0]
    f278:	9b06      	ldr	r3, [sp, #24]
    f27a:	47a8      	blx	r5
            return ch->ch_get(argc, argv, val, val_len_max);
        }
    }

    return NULL;
}
    f27c:	b003      	add	sp, #12
    f27e:	bd30      	pop	{r4, r5, pc}
        if (ch->ch_get != NULL) {
    f280:	68e4      	ldr	r4, [r4, #12]
    f282:	b124      	cbz	r4, f28e <conf_get_cb+0x2e>
            return ch->ch_get(argc, argv, val, val_len_max);
    f284:	9b06      	ldr	r3, [sp, #24]
    f286:	47a0      	blx	r4
    f288:	e7f8      	b.n	f27c <conf_get_cb+0x1c>
    return NULL;
    f28a:	2000      	movs	r0, #0
    f28c:	e7f6      	b.n	f27c <conf_get_cb+0x1c>
    f28e:	2000      	movs	r0, #0
    f290:	e7f4      	b.n	f27c <conf_get_cb+0x1c>

0000f292 <conf_set_cb>:
/**
 * Executes a conf_handler's "set" callback and returns the result.
 */
static int
conf_set_cb(struct conf_handler *ch, int argc, char **argv, char *val)
{
    f292:	b538      	push	{r3, r4, r5, lr}
    f294:	4604      	mov	r4, r0
    f296:	4608      	mov	r0, r1
    f298:	4611      	mov	r1, r2
    f29a:	461a      	mov	r2, r3
    if (ch->ch_ext) {
    f29c:	7a23      	ldrb	r3, [r4, #8]
    f29e:	b123      	cbz	r3, f2aa <conf_set_cb+0x18>
        if (ch->ch_set_ext != NULL) {
    f2a0:	6925      	ldr	r5, [r4, #16]
    f2a2:	b135      	cbz	r5, f2b2 <conf_set_cb+0x20>
            return ch->ch_set_ext(argc, argv, val, ch->ch_arg);
    f2a4:	69e3      	ldr	r3, [r4, #28]
    f2a6:	47a8      	blx	r5
            return ch->ch_set(argc, argv, val);
        }
    }

    return OS_ERROR;
}
    f2a8:	bd38      	pop	{r3, r4, r5, pc}
        if (ch->ch_set != NULL) {
    f2aa:	6923      	ldr	r3, [r4, #16]
    f2ac:	b11b      	cbz	r3, f2b6 <conf_set_cb+0x24>
            return ch->ch_set(argc, argv, val);
    f2ae:	4798      	blx	r3
    f2b0:	e7fa      	b.n	f2a8 <conf_set_cb+0x16>
    return OS_ERROR;
    f2b2:	200c      	movs	r0, #12
    f2b4:	e7f8      	b.n	f2a8 <conf_set_cb+0x16>
    f2b6:	200c      	movs	r0, #12
    f2b8:	e7f6      	b.n	f2a8 <conf_set_cb+0x16>

0000f2ba <conf_commit_cb>:
/**
 * Executes a conf_handler's "commit" callback and returns the result.
 */
static int
conf_commit_cb(struct conf_handler *ch)
{
    f2ba:	b508      	push	{r3, lr}
    if (ch->ch_ext) {
    f2bc:	7a03      	ldrb	r3, [r0, #8]
    f2be:	b123      	cbz	r3, f2ca <conf_commit_cb+0x10>
        if (ch->ch_commit_ext != NULL) {
    f2c0:	6943      	ldr	r3, [r0, #20]
    f2c2:	b133      	cbz	r3, f2d2 <conf_commit_cb+0x18>
            return ch->ch_commit_ext(ch->ch_arg);
    f2c4:	69c0      	ldr	r0, [r0, #28]
    f2c6:	4798      	blx	r3
            return ch->ch_commit();
        }
    }

    return 0;
}
    f2c8:	bd08      	pop	{r3, pc}
        if (ch->ch_commit != NULL) {
    f2ca:	6943      	ldr	r3, [r0, #20]
    f2cc:	b11b      	cbz	r3, f2d6 <conf_commit_cb+0x1c>
            return ch->ch_commit();
    f2ce:	4798      	blx	r3
    f2d0:	e7fa      	b.n	f2c8 <conf_commit_cb+0xe>
    return 0;
    f2d2:	2000      	movs	r0, #0
    f2d4:	e7f8      	b.n	f2c8 <conf_commit_cb+0xe>
    f2d6:	2000      	movs	r0, #0
    f2d8:	e7f6      	b.n	f2c8 <conf_commit_cb+0xe>

0000f2da <conf_ev_fn_load>:
{
    f2da:	b508      	push	{r3, lr}
    conf_ensure_loaded();
    f2dc:	f7ff ff46 	bl	f16c <conf_ensure_loaded>
}
    f2e0:	bd08      	pop	{r3, pc}
	...

0000f2e4 <conf_init>:
{
    f2e4:	b510      	push	{r4, lr}
    f2e6:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
    f2e8:	480f      	ldr	r0, [pc, #60]	; (f328 <conf_init+0x44>)
    f2ea:	f7ff f9fb 	bl	e6e4 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
    f2ee:	4b0f      	ldr	r3, [pc, #60]	; (f32c <conf_init+0x48>)
    f2f0:	2200      	movs	r2, #0
    f2f2:	601a      	str	r2, [r3, #0]
    conf_store_init();
    f2f4:	f7ff ffaa 	bl	f24c <conf_store_init>
    rc = conf_mgmt_register();
    f2f8:	f000 fc5e 	bl	fbb8 <conf_mgmt_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f2fc:	b930      	cbnz	r0, f30c <conf_init+0x28>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
    f2fe:	f7fe f83d 	bl	d37c <os_eventq_dflt_get>
    f302:	490b      	ldr	r1, [pc, #44]	; (f330 <conf_init+0x4c>)
    f304:	f7fd ff81 	bl	d20a <os_eventq_put>
}
    f308:	b002      	add	sp, #8
    f30a:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    f30c:	f7fc ff46 	bl	c19c <hal_debugger_connected>
    f310:	b100      	cbz	r0, f314 <conf_init+0x30>
    f312:	be01      	bkpt	0x0001
    f314:	2000      	movs	r0, #0
    f316:	9000      	str	r0, [sp, #0]
    f318:	4b06      	ldr	r3, [pc, #24]	; (f334 <conf_init+0x50>)
    f31a:	681c      	ldr	r4, [r3, #0]
    f31c:	4603      	mov	r3, r0
    f31e:	4602      	mov	r2, r0
    f320:	4601      	mov	r1, r0
    f322:	47a0      	blx	r4
    f324:	e7eb      	b.n	f2fe <conf_init+0x1a>
    f326:	bf00      	nop
    f328:	20001a68 	.word	0x20001a68
    f32c:	20001a64 	.word	0x20001a64
    f330:	200001fc 	.word	0x200001fc
    f334:	2000028c 	.word	0x2000028c

0000f338 <conf_lock>:
{
    f338:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
    f33a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f33e:	4802      	ldr	r0, [pc, #8]	; (f348 <conf_lock+0x10>)
    f340:	f7ff fa3a 	bl	e7b8 <os_mutex_pend>
}
    f344:	bd08      	pop	{r3, pc}
    f346:	bf00      	nop
    f348:	20001a68 	.word	0x20001a68

0000f34c <conf_unlock>:
{
    f34c:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
    f34e:	4802      	ldr	r0, [pc, #8]	; (f358 <conf_unlock+0xc>)
    f350:	f7ff f9d2 	bl	e6f8 <os_mutex_release>
}
    f354:	bd08      	pop	{r3, pc}
    f356:	bf00      	nop
    f358:	20001a68 	.word	0x20001a68

0000f35c <conf_register>:
{
    f35c:	b510      	push	{r4, lr}
    f35e:	4604      	mov	r4, r0
    conf_lock();
    f360:	f7ff ffea 	bl	f338 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
    f364:	4b03      	ldr	r3, [pc, #12]	; (f374 <conf_register+0x18>)
    f366:	681a      	ldr	r2, [r3, #0]
    f368:	6022      	str	r2, [r4, #0]
    f36a:	601c      	str	r4, [r3, #0]
    conf_unlock();
    f36c:	f7ff ffee 	bl	f34c <conf_unlock>
}
    f370:	2000      	movs	r0, #0
    f372:	bd10      	pop	{r4, pc}
    f374:	20001a64 	.word	0x20001a64

0000f378 <conf_handler_lookup>:
{
    f378:	b538      	push	{r3, r4, r5, lr}
    f37a:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f37c:	4b05      	ldr	r3, [pc, #20]	; (f394 <conf_handler_lookup+0x1c>)
    f37e:	681c      	ldr	r4, [r3, #0]
    f380:	b134      	cbz	r4, f390 <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
    f382:	6861      	ldr	r1, [r4, #4]
    f384:	4628      	mov	r0, r5
    f386:	f7ff fb58 	bl	ea3a <strcmp>
    f38a:	b108      	cbz	r0, f390 <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f38c:	6824      	ldr	r4, [r4, #0]
    f38e:	e7f7      	b.n	f380 <conf_handler_lookup+0x8>
}
    f390:	4620      	mov	r0, r4
    f392:	bd38      	pop	{r3, r4, r5, pc}
    f394:	20001a64 	.word	0x20001a64

0000f398 <conf_parse_name>:
{
    f398:	b570      	push	{r4, r5, r6, lr}
    f39a:	b082      	sub	sp, #8
    f39c:	460e      	mov	r6, r1
    f39e:	4615      	mov	r5, r2
    tok = strtok_r(name, sep, &tok_ptr);
    f3a0:	aa01      	add	r2, sp, #4
    f3a2:	4909      	ldr	r1, [pc, #36]	; (f3c8 <conf_parse_name+0x30>)
    f3a4:	f01b fe98 	bl	2b0d8 <strtok_r>
    i = 0;
    f3a8:	2300      	movs	r3, #0
    while (tok) {
    f3aa:	b148      	cbz	r0, f3c0 <conf_parse_name+0x28>
        name_argv[i++] = tok;
    f3ac:	1c5c      	adds	r4, r3, #1
    f3ae:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
    f3b2:	aa01      	add	r2, sp, #4
    f3b4:	4904      	ldr	r1, [pc, #16]	; (f3c8 <conf_parse_name+0x30>)
    f3b6:	2000      	movs	r0, #0
    f3b8:	f01b fe8e 	bl	2b0d8 <strtok_r>
        name_argv[i++] = tok;
    f3bc:	4623      	mov	r3, r4
    f3be:	e7f4      	b.n	f3aa <conf_parse_name+0x12>
    *name_argc = i;
    f3c0:	6033      	str	r3, [r6, #0]
}
    f3c2:	b002      	add	sp, #8
    f3c4:	bd70      	pop	{r4, r5, r6, pc}
    f3c6:	bf00      	nop
    f3c8:	0002d924 	.word	0x0002d924

0000f3cc <conf_parse_and_lookup>:
{
    f3cc:	b510      	push	{r4, lr}
    f3ce:	4614      	mov	r4, r2
    rc = conf_parse_name(name, name_argc, name_argv);
    f3d0:	f7ff ffe2 	bl	f398 <conf_parse_name>
    if (rc) {
    f3d4:	b918      	cbnz	r0, f3de <conf_parse_and_lookup+0x12>
    return conf_handler_lookup(name_argv[0]);
    f3d6:	6820      	ldr	r0, [r4, #0]
    f3d8:	f7ff ffce 	bl	f378 <conf_handler_lookup>
}
    f3dc:	bd10      	pop	{r4, pc}
        return NULL;
    f3de:	2000      	movs	r0, #0
    f3e0:	e7fc      	b.n	f3dc <conf_parse_and_lookup+0x10>

0000f3e2 <conf_value_from_str>:
    if (!val_str) {
    f3e2:	2800      	cmp	r0, #0
    f3e4:	f000 80a0 	beq.w	f528 <conf_value_from_str+0x146>
{
    f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3ec:	b085      	sub	sp, #20
    f3ee:	460c      	mov	r4, r1
    f3f0:	4692      	mov	sl, r2
    f3f2:	461d      	mov	r5, r3
    f3f4:	4683      	mov	fp, r0
    switch (type) {
    f3f6:	1e8b      	subs	r3, r1, #2
    f3f8:	2b0c      	cmp	r3, #12
    f3fa:	f200 8097 	bhi.w	f52c <conf_value_from_str+0x14a>
    f3fe:	e8df f003 	tbb	[pc, r3]
    f402:	0707      	.short	0x0707
    f404:	95830707 	.word	0x95830707
    f408:	55079595 	.word	0x55079595
    f40c:	5555      	.short	0x5555
    f40e:	55          	.byte	0x55
    f40f:	00          	.byte	0x00
        val = strtoll(val_str, &eptr, 0);
    f410:	2200      	movs	r2, #0
    f412:	a903      	add	r1, sp, #12
    f414:	f01b fe70 	bl	2b0f8 <strtoll>
    f418:	4602      	mov	r2, r0
    f41a:	460b      	mov	r3, r1
        if (*eptr != '\0') {
    f41c:	9903      	ldr	r1, [sp, #12]
    f41e:	7809      	ldrb	r1, [r1, #0]
    f420:	2900      	cmp	r1, #0
    f422:	f040 8085 	bne.w	f530 <conf_value_from_str+0x14e>
        if (type == CONF_BOOL) {
    f426:	2c0a      	cmp	r4, #10
    f428:	d009      	beq.n	f43e <conf_value_from_str+0x5c>
        } else if (type == CONF_INT8) {
    f42a:	2c02      	cmp	r4, #2
    f42c:	d013      	beq.n	f456 <conf_value_from_str+0x74>
        } else if (type == CONF_INT16) {
    f42e:	2c03      	cmp	r4, #3
    f430:	d01e      	beq.n	f470 <conf_value_from_str+0x8e>
        } else if (type == CONF_INT32) {
    f432:	2c04      	cmp	r4, #4
    f434:	d02a      	beq.n	f48c <conf_value_from_str+0xaa>
            *(int64_t *)vp = val;
    f436:	e9ca 2300 	strd	r2, r3, [sl]
    return 0;
    f43a:	2000      	movs	r0, #0
    f43c:	e071      	b.n	f522 <conf_value_from_str+0x140>
            if (val < 0 || val > 1) {
    f43e:	2b00      	cmp	r3, #0
    f440:	bf08      	it	eq
    f442:	2a02      	cmpeq	r2, #2
    f444:	d276      	bcs.n	f534 <conf_value_from_str+0x152>
            *(bool *)vp = val;
    f446:	4313      	orrs	r3, r2
    f448:	bf14      	ite	ne
    f44a:	2301      	movne	r3, #1
    f44c:	2300      	moveq	r3, #0
    f44e:	f88a 3000 	strb.w	r3, [sl]
    return 0;
    f452:	2000      	movs	r0, #0
    f454:	e065      	b.n	f522 <conf_value_from_str+0x140>
            if (val < INT8_MIN || val > INT8_MAX) {
    f456:	f112 0680 	adds.w	r6, r2, #128	; 0x80
    f45a:	f143 0700 	adc.w	r7, r3, #0
    f45e:	2f00      	cmp	r7, #0
    f460:	bf08      	it	eq
    f462:	f5b6 7f80 	cmpeq.w	r6, #256	; 0x100
    f466:	d267      	bcs.n	f538 <conf_value_from_str+0x156>
            *(int8_t *)vp = val;
    f468:	f88a 2000 	strb.w	r2, [sl]
    return 0;
    f46c:	2000      	movs	r0, #0
    f46e:	e058      	b.n	f522 <conf_value_from_str+0x140>
            if (val < INT16_MIN || val > INT16_MAX) {
    f470:	f512 4800 	adds.w	r8, r2, #32768	; 0x8000
    f474:	f143 0900 	adc.w	r9, r3, #0
    f478:	f1b9 0f00 	cmp.w	r9, #0
    f47c:	bf08      	it	eq
    f47e:	f5b8 3f80 	cmpeq.w	r8, #65536	; 0x10000
    f482:	d25b      	bcs.n	f53c <conf_value_from_str+0x15a>
            *(int16_t *)vp = val;
    f484:	f8aa 2000 	strh.w	r2, [sl]
    return 0;
    f488:	2000      	movs	r0, #0
    f48a:	e04a      	b.n	f522 <conf_value_from_str+0x140>
            if (val < INT32_MIN || val > INT32_MAX) {
    f48c:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    f490:	9100      	str	r1, [sp, #0]
    f492:	f143 0100 	adc.w	r1, r3, #0
    f496:	9101      	str	r1, [sp, #4]
    f498:	e9dd 0100 	ldrd	r0, r1, [sp]
    f49c:	2901      	cmp	r1, #1
    f49e:	bf08      	it	eq
    f4a0:	2800      	cmpeq	r0, #0
    f4a2:	d24d      	bcs.n	f540 <conf_value_from_str+0x15e>
            *(int32_t *)vp = val;
    f4a4:	f8ca 2000 	str.w	r2, [sl]
    return 0;
    f4a8:	2000      	movs	r0, #0
    f4aa:	e03a      	b.n	f522 <conf_value_from_str+0x140>
        uval = strtoull(val_str, &eptr, 0);
    f4ac:	2200      	movs	r2, #0
    f4ae:	a903      	add	r1, sp, #12
    f4b0:	f01b fe28 	bl	2b104 <strtoull>
    f4b4:	4602      	mov	r2, r0
    f4b6:	460b      	mov	r3, r1
        if (*eptr != '\0') {
    f4b8:	9903      	ldr	r1, [sp, #12]
    f4ba:	7809      	ldrb	r1, [r1, #0]
    f4bc:	2900      	cmp	r1, #0
    f4be:	d141      	bne.n	f544 <conf_value_from_str+0x162>
        if (type == CONF_UINT8) {
    f4c0:	2c0b      	cmp	r4, #11
    f4c2:	d007      	beq.n	f4d4 <conf_value_from_str+0xf2>
        } else if (type == CONF_UINT16) {
    f4c4:	2c0c      	cmp	r4, #12
    f4c6:	d00e      	beq.n	f4e6 <conf_value_from_str+0x104>
        } else if (type == CONF_UINT32) {
    f4c8:	2c0d      	cmp	r4, #13
    f4ca:	d015      	beq.n	f4f8 <conf_value_from_str+0x116>
            *(uint64_t *)vp = uval;
    f4cc:	e9ca 2300 	strd	r2, r3, [sl]
    return 0;
    f4d0:	2000      	movs	r0, #0
    f4d2:	e026      	b.n	f522 <conf_value_from_str+0x140>
            if (uval > UINT8_MAX) {
    f4d4:	2b00      	cmp	r3, #0
    f4d6:	bf08      	it	eq
    f4d8:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
    f4dc:	d234      	bcs.n	f548 <conf_value_from_str+0x166>
            *(uint8_t *)vp = uval;
    f4de:	f88a 2000 	strb.w	r2, [sl]
    return 0;
    f4e2:	2000      	movs	r0, #0
    f4e4:	e01d      	b.n	f522 <conf_value_from_str+0x140>
            if (uval > UINT16_MAX) {
    f4e6:	2b00      	cmp	r3, #0
    f4e8:	bf08      	it	eq
    f4ea:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
    f4ee:	d22d      	bcs.n	f54c <conf_value_from_str+0x16a>
            *(uint16_t *)vp = uval;
    f4f0:	f8aa 2000 	strh.w	r2, [sl]
    return 0;
    f4f4:	2000      	movs	r0, #0
    f4f6:	e014      	b.n	f522 <conf_value_from_str+0x140>
            if (uval > UINT32_MAX) {
    f4f8:	2b01      	cmp	r3, #1
    f4fa:	bf08      	it	eq
    f4fc:	2a00      	cmpeq	r2, #0
    f4fe:	d227      	bcs.n	f550 <conf_value_from_str+0x16e>
            *(uint32_t *)vp = uval;
    f500:	f8ca 2000 	str.w	r2, [sl]
    return 0;
    f504:	2000      	movs	r0, #0
    f506:	e00c      	b.n	f522 <conf_value_from_str+0x140>
        val = strlen(val_str);
    f508:	f7ff faa3 	bl	ea52 <strlen>
    f50c:	2100      	movs	r1, #0
        if (val + 1 > maxlen) {
    f50e:	17eb      	asrs	r3, r5, #31
    f510:	42a8      	cmp	r0, r5
    f512:	eb71 0303 	sbcs.w	r3, r1, r3
    f516:	da1d      	bge.n	f554 <conf_value_from_str+0x172>
        strcpy(vp, val_str);
    f518:	4659      	mov	r1, fp
    f51a:	4650      	mov	r0, sl
    f51c:	f01b fdb4 	bl	2b088 <strcpy>
    return 0;
    f520:	2000      	movs	r0, #0
}
    f522:	b005      	add	sp, #20
    f524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return OS_INVALID_PARM;
    f528:	2003      	movs	r0, #3
}
    f52a:	4770      	bx	lr
    if (!val_str) {
    f52c:	2003      	movs	r0, #3
    f52e:	e7f8      	b.n	f522 <conf_value_from_str+0x140>
    return OS_INVALID_PARM;
    f530:	2003      	movs	r0, #3
    f532:	e7f6      	b.n	f522 <conf_value_from_str+0x140>
    f534:	2003      	movs	r0, #3
    f536:	e7f4      	b.n	f522 <conf_value_from_str+0x140>
    f538:	2003      	movs	r0, #3
    f53a:	e7f2      	b.n	f522 <conf_value_from_str+0x140>
    f53c:	2003      	movs	r0, #3
    f53e:	e7f0      	b.n	f522 <conf_value_from_str+0x140>
    f540:	2003      	movs	r0, #3
    f542:	e7ee      	b.n	f522 <conf_value_from_str+0x140>
    f544:	2003      	movs	r0, #3
    f546:	e7ec      	b.n	f522 <conf_value_from_str+0x140>
    f548:	2003      	movs	r0, #3
    f54a:	e7ea      	b.n	f522 <conf_value_from_str+0x140>
    f54c:	2003      	movs	r0, #3
    f54e:	e7e8      	b.n	f522 <conf_value_from_str+0x140>
    f550:	2003      	movs	r0, #3
    f552:	e7e6      	b.n	f522 <conf_value_from_str+0x140>
    f554:	2003      	movs	r0, #3
    f556:	e7e4      	b.n	f522 <conf_value_from_str+0x140>

0000f558 <conf_str_from_value>:
{
    f558:	b530      	push	{r4, r5, lr}
    f55a:	b083      	sub	sp, #12
    f55c:	460d      	mov	r5, r1
    if (type == CONF_STRING) {
    f55e:	2806      	cmp	r0, #6
    f560:	d046      	beq.n	f5f0 <conf_str_from_value+0x98>
    f562:	4614      	mov	r4, r2
    f564:	4619      	mov	r1, r3
    switch (type) {
    f566:	280a      	cmp	r0, #10
    f568:	d012      	beq.n	f590 <conf_str_from_value+0x38>
    f56a:	d90d      	bls.n	f588 <conf_str_from_value+0x30>
    f56c:	f1a0 020b 	sub.w	r2, r0, #11
    f570:	b2d2      	uxtb	r2, r2
    f572:	2a03      	cmp	r2, #3
    f574:	d841      	bhi.n	f5fa <conf_str_from_value+0xa2>
        if (type == CONF_UINT8) {
    f576:	280b      	cmp	r0, #11
    f578:	d02a      	beq.n	f5d0 <conf_str_from_value+0x78>
        } else if (type == CONF_UINT16) {
    f57a:	280c      	cmp	r0, #12
    f57c:	d032      	beq.n	f5e4 <conf_str_from_value+0x8c>
        } else if (type == CONF_UINT32) {
    f57e:	280d      	cmp	r0, #13
    f580:	d033      	beq.n	f5ea <conf_str_from_value+0x92>
            uval = *(uint64_t *)vp;
    f582:	e9d5 2300 	ldrd	r2, r3, [r5]
    f586:	e025      	b.n	f5d4 <conf_str_from_value+0x7c>
    switch (type) {
    f588:	1e82      	subs	r2, r0, #2
    f58a:	b2d2      	uxtb	r2, r2
    f58c:	2a03      	cmp	r2, #3
    f58e:	d831      	bhi.n	f5f4 <conf_str_from_value+0x9c>
        if (type == CONF_BOOL) {
    f590:	280a      	cmp	r0, #10
    f592:	d008      	beq.n	f5a6 <conf_str_from_value+0x4e>
        } else if (type == CONF_INT8) {
    f594:	2802      	cmp	r0, #2
    f596:	d010      	beq.n	f5ba <conf_str_from_value+0x62>
        } else if (type == CONF_INT16) {
    f598:	2803      	cmp	r0, #3
    f59a:	d012      	beq.n	f5c2 <conf_str_from_value+0x6a>
        } else if (type == CONF_INT32) {
    f59c:	2804      	cmp	r0, #4
    f59e:	d014      	beq.n	f5ca <conf_str_from_value+0x72>
            val = *(int64_t *)vp;
    f5a0:	e9d5 2300 	ldrd	r2, r3, [r5]
    f5a4:	e001      	b.n	f5aa <conf_str_from_value+0x52>
            val = *(bool *)vp;
    f5a6:	782a      	ldrb	r2, [r5, #0]
    f5a8:	2300      	movs	r3, #0
        snprintf(buf, buf_len, "%lld", val);
    f5aa:	e9cd 2300 	strd	r2, r3, [sp]
    f5ae:	4a14      	ldr	r2, [pc, #80]	; (f600 <conf_str_from_value+0xa8>)
    f5b0:	4620      	mov	r0, r4
    f5b2:	f01c f90a 	bl	2b7ca <snprintf>
        return buf;
    f5b6:	4620      	mov	r0, r4
    f5b8:	e01d      	b.n	f5f6 <conf_str_from_value+0x9e>
            val = *(int8_t *)vp;
    f5ba:	f995 2000 	ldrsb.w	r2, [r5]
    f5be:	17d3      	asrs	r3, r2, #31
    f5c0:	e7f3      	b.n	f5aa <conf_str_from_value+0x52>
            val = *(int16_t *)vp;
    f5c2:	f9b5 2000 	ldrsh.w	r2, [r5]
    f5c6:	17d3      	asrs	r3, r2, #31
    f5c8:	e7ef      	b.n	f5aa <conf_str_from_value+0x52>
            val = *(int32_t *)vp;
    f5ca:	682a      	ldr	r2, [r5, #0]
    f5cc:	17d3      	asrs	r3, r2, #31
    f5ce:	e7ec      	b.n	f5aa <conf_str_from_value+0x52>
            uval = *(uint8_t *)vp;
    f5d0:	782a      	ldrb	r2, [r5, #0]
    f5d2:	2300      	movs	r3, #0
        snprintf(buf, buf_len, "%llu", uval);
    f5d4:	e9cd 2300 	strd	r2, r3, [sp]
    f5d8:	4a0a      	ldr	r2, [pc, #40]	; (f604 <conf_str_from_value+0xac>)
    f5da:	4620      	mov	r0, r4
    f5dc:	f01c f8f5 	bl	2b7ca <snprintf>
        return buf;
    f5e0:	4620      	mov	r0, r4
    f5e2:	e008      	b.n	f5f6 <conf_str_from_value+0x9e>
            uval = *(uint16_t *)vp;
    f5e4:	882a      	ldrh	r2, [r5, #0]
    f5e6:	2300      	movs	r3, #0
    f5e8:	e7f4      	b.n	f5d4 <conf_str_from_value+0x7c>
            uval = *(uint32_t *)vp;
    f5ea:	682a      	ldr	r2, [r5, #0]
    f5ec:	2300      	movs	r3, #0
    f5ee:	e7f1      	b.n	f5d4 <conf_str_from_value+0x7c>
        return vp;
    f5f0:	4608      	mov	r0, r1
    f5f2:	e000      	b.n	f5f6 <conf_str_from_value+0x9e>
    switch (type) {
    f5f4:	2000      	movs	r0, #0
}
    f5f6:	b003      	add	sp, #12
    f5f8:	bd30      	pop	{r4, r5, pc}
    switch (type) {
    f5fa:	2000      	movs	r0, #0
    f5fc:	e7fb      	b.n	f5f6 <conf_str_from_value+0x9e>
    f5fe:	bf00      	nop
    f600:	0002d928 	.word	0x0002d928
    f604:	0002d930 	.word	0x0002d930

0000f608 <conf_str_from_bytes>:
{
    f608:	b538      	push	{r3, r4, r5, lr}
    f60a:	4615      	mov	r5, r2
    if (BASE64_ENCODE_SIZE(vp_len) > buf_len) {
    f60c:	1e4a      	subs	r2, r1, #1
    f60e:	4c08      	ldr	r4, [pc, #32]	; (f630 <conf_str_from_bytes+0x28>)
    f610:	fb84 c402 	smull	ip, r4, r4, r2
    f614:	eba4 74e2 	sub.w	r4, r4, r2, asr #31
    f618:	3401      	adds	r4, #1
    f61a:	ebb3 0f84 	cmp.w	r3, r4, lsl #2
    f61e:	db05      	blt.n	f62c <conf_str_from_bytes+0x24>
    base64_encode(vp, vp_len, buf, 1);
    f620:	2301      	movs	r3, #1
    f622:	462a      	mov	r2, r5
    f624:	f018 fd70 	bl	28108 <base64_encode>
    return buf;
    f628:	4628      	mov	r0, r5
}
    f62a:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
    f62c:	2000      	movs	r0, #0
    f62e:	e7fc      	b.n	f62a <conf_str_from_bytes+0x22>
    f630:	55555556 	.word	0x55555556

0000f634 <conf_export_cb>:
 * Executes a conf_handler's "export" callback and returns the result.
 */
int
conf_export_cb(struct conf_handler *ch, conf_export_func_t export_func,
               conf_export_tgt_t tgt)
{
    f634:	b510      	push	{r4, lr}
    f636:	4603      	mov	r3, r0
    f638:	4608      	mov	r0, r1
    f63a:	4611      	mov	r1, r2
    if (ch->ch_ext) {
    f63c:	7a1a      	ldrb	r2, [r3, #8]
    f63e:	b122      	cbz	r2, f64a <conf_export_cb+0x16>
        if (ch->ch_export_ext != NULL) {
    f640:	699c      	ldr	r4, [r3, #24]
    f642:	b134      	cbz	r4, f652 <conf_export_cb+0x1e>
            return ch->ch_export_ext(export_func, tgt, ch->ch_arg);
    f644:	69da      	ldr	r2, [r3, #28]
    f646:	47a0      	blx	r4
            return ch->ch_export(export_func, tgt);
        }
    }

    return 0;
}
    f648:	bd10      	pop	{r4, pc}
        if (ch->ch_export != NULL) {
    f64a:	699b      	ldr	r3, [r3, #24]
    f64c:	b11b      	cbz	r3, f656 <conf_export_cb+0x22>
            return ch->ch_export(export_func, tgt);
    f64e:	4798      	blx	r3
    f650:	e7fa      	b.n	f648 <conf_export_cb+0x14>
    return 0;
    f652:	2000      	movs	r0, #0
    f654:	e7f8      	b.n	f648 <conf_export_cb+0x14>
    f656:	2000      	movs	r0, #0
    f658:	e7f6      	b.n	f648 <conf_export_cb+0x14>

0000f65a <conf_set_value>:

int
conf_set_value(char *name, char *val_str)
{
    f65a:	b530      	push	{r4, r5, lr}
    f65c:	b08b      	sub	sp, #44	; 0x2c
    f65e:	4604      	mov	r4, r0
    f660:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
    f662:	f7ff fe69 	bl	f338 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    f666:	aa01      	add	r2, sp, #4
    f668:	a909      	add	r1, sp, #36	; 0x24
    f66a:	4620      	mov	r0, r4
    f66c:	f7ff feae 	bl	f3cc <conf_parse_and_lookup>
    if (!ch) {
    f670:	b158      	cbz	r0, f68a <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }

    rc = conf_set_cb(ch, name_argc - 1, &name_argv[1], val_str);
    f672:	462b      	mov	r3, r5
    f674:	aa02      	add	r2, sp, #8
    f676:	9909      	ldr	r1, [sp, #36]	; 0x24
    f678:	3901      	subs	r1, #1
    f67a:	f7ff fe0a 	bl	f292 <conf_set_cb>
    f67e:	4604      	mov	r4, r0

out:
    conf_unlock();
    f680:	f7ff fe64 	bl	f34c <conf_unlock>
    return rc;
}
    f684:	4620      	mov	r0, r4
    f686:	b00b      	add	sp, #44	; 0x2c
    f688:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
    f68a:	2403      	movs	r4, #3
    f68c:	e7f8      	b.n	f680 <conf_set_value+0x26>

0000f68e <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
    f68e:	b570      	push	{r4, r5, r6, lr}
    f690:	b08c      	sub	sp, #48	; 0x30
    f692:	4604      	mov	r4, r0
    f694:	460d      	mov	r5, r1
    f696:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
    f698:	f7ff fe4e 	bl	f338 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    f69c:	aa03      	add	r2, sp, #12
    f69e:	a90b      	add	r1, sp, #44	; 0x2c
    f6a0:	4620      	mov	r0, r4
    f6a2:	f7ff fe93 	bl	f3cc <conf_parse_and_lookup>
    if (!ch) {
    f6a6:	4604      	mov	r4, r0
    f6a8:	b138      	cbz	r0, f6ba <conf_get_value+0x2c>
        goto out;
    }

    rval = conf_get_cb(ch, name_argc - 1, &name_argv[1], buf, buf_len);
    f6aa:	9600      	str	r6, [sp, #0]
    f6ac:	462b      	mov	r3, r5
    f6ae:	aa04      	add	r2, sp, #16
    f6b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f6b2:	3901      	subs	r1, #1
    f6b4:	f7ff fdd4 	bl	f260 <conf_get_cb>
    f6b8:	4604      	mov	r4, r0

out:
    conf_unlock();
    f6ba:	f7ff fe47 	bl	f34c <conf_unlock>
    return rval;
}
    f6be:	4620      	mov	r0, r4
    f6c0:	b00c      	add	sp, #48	; 0x30
    f6c2:	bd70      	pop	{r4, r5, r6, pc}

0000f6c4 <conf_commit>:


int
conf_commit(char *name)
{
    f6c4:	b530      	push	{r4, r5, lr}
    f6c6:	b08b      	sub	sp, #44	; 0x2c
    f6c8:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    f6ca:	f7ff fe35 	bl	f338 <conf_lock>
    if (name) {
    f6ce:	b16c      	cbz	r4, f6ec <conf_commit+0x28>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    f6d0:	aa01      	add	r2, sp, #4
    f6d2:	a909      	add	r1, sp, #36	; 0x24
    f6d4:	4620      	mov	r0, r4
    f6d6:	f7ff fe79 	bl	f3cc <conf_parse_and_lookup>
        if (!ch) {
    f6da:	b1c0      	cbz	r0, f70e <conf_commit+0x4a>
            rc = OS_INVALID_PARM;
            goto out;
        }
        rc = conf_commit_cb(ch);
    f6dc:	f7ff fded 	bl	f2ba <conf_commit_cb>
    f6e0:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
    f6e2:	f7ff fe33 	bl	f34c <conf_unlock>
    return rc;
}
    f6e6:	4628      	mov	r0, r5
    f6e8:	b00b      	add	sp, #44	; 0x2c
    f6ea:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f6ec:	4b09      	ldr	r3, [pc, #36]	; (f714 <conf_commit+0x50>)
    f6ee:	681c      	ldr	r4, [r3, #0]
        rc = 0;
    f6f0:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f6f2:	e000      	b.n	f6f6 <conf_commit+0x32>
    f6f4:	6824      	ldr	r4, [r4, #0]
    f6f6:	2c00      	cmp	r4, #0
    f6f8:	d0f3      	beq.n	f6e2 <conf_commit+0x1e>
            if (ch->ch_commit) {
    f6fa:	6963      	ldr	r3, [r4, #20]
    f6fc:	2b00      	cmp	r3, #0
    f6fe:	d0f9      	beq.n	f6f4 <conf_commit+0x30>
                rc2 = conf_commit_cb(ch);
    f700:	4620      	mov	r0, r4
    f702:	f7ff fdda 	bl	f2ba <conf_commit_cb>
                if (!rc) {
    f706:	2d00      	cmp	r5, #0
    f708:	d1f4      	bne.n	f6f4 <conf_commit+0x30>
                    rc = rc2;
    f70a:	4605      	mov	r5, r0
    f70c:	e7f2      	b.n	f6f4 <conf_commit+0x30>
            rc = OS_INVALID_PARM;
    f70e:	2503      	movs	r5, #3
    f710:	e7e7      	b.n	f6e2 <conf_commit+0x1e>
    f712:	bf00      	nop
    f714:	20001a64 	.word	0x20001a64

0000f718 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
    f718:	b500      	push	{lr}
    f71a:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
    f71c:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
    f71e:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
    f720:	466b      	mov	r3, sp
    f722:	4a05      	ldr	r2, [pc, #20]	; (f738 <conf_fcb_load+0x20>)
    f724:	2100      	movs	r1, #0
    f726:	3008      	adds	r0, #8
    f728:	f01a fae2 	bl	29cf0 <fcb_walk>
    if (rc) {
    f72c:	b910      	cbnz	r0, f734 <conf_fcb_load+0x1c>
        return OS_EINVAL;
    }
    return OS_OK;
}
    f72e:	b003      	add	sp, #12
    f730:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
    f734:	2002      	movs	r0, #2
    f736:	e7fa      	b.n	f72e <conf_fcb_load+0x16>
    f738:	0000f73d 	.word	0x0000f73d

0000f73c <conf_fcb_load_cb>:
{
    f73c:	b530      	push	{r4, r5, lr}
    f73e:	b0db      	sub	sp, #364	; 0x16c
    f740:	460d      	mov	r5, r1
    len = loc->fe_data_len;
    f742:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
    f744:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f748:	d301      	bcc.n	f74e <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
    f74a:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
    f74e:	4623      	mov	r3, r4
    f750:	aa02      	add	r2, sp, #8
    f752:	6881      	ldr	r1, [r0, #8]
    f754:	6800      	ldr	r0, [r0, #0]
    f756:	f001 f95b 	bl	10a10 <flash_area_read>
    if (rc) {
    f75a:	b110      	cbz	r0, f762 <conf_fcb_load_cb+0x26>
}
    f75c:	2000      	movs	r0, #0
    f75e:	b05b      	add	sp, #364	; 0x16c
    f760:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
    f762:	a802      	add	r0, sp, #8
    f764:	2300      	movs	r3, #0
    f766:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
    f768:	466a      	mov	r2, sp
    f76a:	a901      	add	r1, sp, #4
    f76c:	f000 f910 	bl	f990 <conf_line_parse>
    if (rc) {
    f770:	2800      	cmp	r0, #0
    f772:	d1f3      	bne.n	f75c <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
    f774:	682b      	ldr	r3, [r5, #0]
    f776:	686a      	ldr	r2, [r5, #4]
    f778:	9900      	ldr	r1, [sp, #0]
    f77a:	9801      	ldr	r0, [sp, #4]
    f77c:	4798      	blx	r3
    return 0;
    f77e:	e7ed      	b.n	f75c <conf_fcb_load_cb+0x20>

0000f780 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
    f780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f782:	4604      	mov	r4, r0
    f784:	460d      	mov	r5, r1
    f786:	4617      	mov	r7, r2
    f788:	461e      	mov	r6, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
    f78a:	8983      	ldrh	r3, [r0, #12]
    f78c:	460a      	mov	r2, r1
    f78e:	6881      	ldr	r1, [r0, #8]
    f790:	6800      	ldr	r0, [r0, #0]
    f792:	f001 f93d 	bl	10a10 <flash_area_read>
    if (rc) {
    f796:	b100      	cbz	r0, f79a <conf_fcb_var_read+0x1a>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
    f798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
    f79a:	89a3      	ldrh	r3, [r4, #12]
    f79c:	2200      	movs	r2, #0
    f79e:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
    f7a0:	4632      	mov	r2, r6
    f7a2:	4639      	mov	r1, r7
    f7a4:	4628      	mov	r0, r5
    f7a6:	f000 f8f3 	bl	f990 <conf_line_parse>
    return rc;
    f7aa:	e7f5      	b.n	f798 <conf_fcb_var_read+0x18>

0000f7ac <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
    f7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7ae:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
    f7b2:	4604      	mov	r4, r0
    f7b4:	460d      	mov	r5, r1
    f7b6:	4616      	mov	r6, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
    f7b8:	f01a f88d 	bl	298d6 <fcb_append_to_scratch>
    if (rc) {
    f7bc:	2800      	cmp	r0, #0
    f7be:	d15d      	bne.n	f87c <conf_fcb_compress_internal+0xd0>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
    f7c0:	2300      	movs	r3, #0
    f7c2:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
    f7c4:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
    f7c6:	a908      	add	r1, sp, #32
    f7c8:	4620      	mov	r0, r4
    f7ca:	f01a fa3b 	bl	29c44 <fcb_getnext>
    f7ce:	2800      	cmp	r0, #0
    f7d0:	d151      	bne.n	f876 <conf_fcb_compress_internal+0xca>
        if (loc1.fe_area != fcb->f_oldest) {
    f7d2:	9a08      	ldr	r2, [sp, #32]
    f7d4:	69a3      	ldr	r3, [r4, #24]
    f7d6:	429a      	cmp	r2, r3
    f7d8:	d14d      	bne.n	f876 <conf_fcb_compress_internal+0xca>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
    f7da:	ab02      	add	r3, sp, #8
    f7dc:	aa03      	add	r2, sp, #12
    f7de:	a964      	add	r1, sp, #400	; 0x190
    f7e0:	a808      	add	r0, sp, #32
    f7e2:	f7ff ffcd 	bl	f780 <conf_fcb_var_read>
        if (rc) {
    f7e6:	2800      	cmp	r0, #0
    f7e8:	d1ed      	bne.n	f7c6 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
    f7ea:	9b02      	ldr	r3, [sp, #8]
    f7ec:	2b00      	cmp	r3, #0
    f7ee:	d0ea      	beq.n	f7c6 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
    f7f0:	af04      	add	r7, sp, #16
    f7f2:	ab08      	add	r3, sp, #32
    f7f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f7f6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
    f7fa:	a904      	add	r1, sp, #16
    f7fc:	4620      	mov	r0, r4
    f7fe:	f01a fa21 	bl	29c44 <fcb_getnext>
    f802:	b978      	cbnz	r0, f824 <conf_fcb_compress_internal+0x78>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
    f804:	466b      	mov	r3, sp
    f806:	aa01      	add	r2, sp, #4
    f808:	a90c      	add	r1, sp, #48	; 0x30
    f80a:	a804      	add	r0, sp, #16
    f80c:	f7ff ffb8 	bl	f780 <conf_fcb_var_read>
            if (rc) {
    f810:	2800      	cmp	r0, #0
    f812:	d1f2      	bne.n	f7fa <conf_fcb_compress_internal+0x4e>
                continue;
            }
            if (!strcmp(name1, name2)) {
    f814:	9901      	ldr	r1, [sp, #4]
    f816:	9803      	ldr	r0, [sp, #12]
    f818:	f7ff f90f 	bl	ea3a <strcmp>
    f81c:	4603      	mov	r3, r0
    f81e:	2800      	cmp	r0, #0
    f820:	d1eb      	bne.n	f7fa <conf_fcb_compress_internal+0x4e>
    f822:	e000      	b.n	f826 <conf_fcb_compress_internal+0x7a>
        copy = 1;
    f824:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
    f826:	2b00      	cmp	r3, #0
    f828:	d0cd      	beq.n	f7c6 <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
    f82a:	b12d      	cbz	r5, f838 <conf_fcb_compress_internal+0x8c>
            if (copy_or_not(name1, val1, cn_arg)) {
    f82c:	4632      	mov	r2, r6
    f82e:	9902      	ldr	r1, [sp, #8]
    f830:	9803      	ldr	r0, [sp, #12]
    f832:	47a8      	blx	r5
    f834:	2800      	cmp	r0, #0
    f836:	d1c6      	bne.n	f7c6 <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
    f838:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    f83c:	aa64      	add	r2, sp, #400	; 0x190
    f83e:	990a      	ldr	r1, [sp, #40]	; 0x28
    f840:	9808      	ldr	r0, [sp, #32]
    f842:	f001 f8e5 	bl	10a10 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
    f846:	2800      	cmp	r0, #0
    f848:	d1bd      	bne.n	f7c6 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
    f84a:	aa04      	add	r2, sp, #16
    f84c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    f850:	4620      	mov	r0, r4
    f852:	f01a f859 	bl	29908 <fcb_append>
        if (rc) {
    f856:	2800      	cmp	r0, #0
    f858:	d1b5      	bne.n	f7c6 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
    f85a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    f85e:	aa64      	add	r2, sp, #400	; 0x190
    f860:	9906      	ldr	r1, [sp, #24]
    f862:	9804      	ldr	r0, [sp, #16]
    f864:	f001 f8e7 	bl	10a36 <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
    f868:	2800      	cmp	r0, #0
    f86a:	d1ac      	bne.n	f7c6 <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
    f86c:	a904      	add	r1, sp, #16
    f86e:	4620      	mov	r0, r4
    f870:	f01a f8c7 	bl	29a02 <fcb_append_finish>
    f874:	e7a7      	b.n	f7c6 <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
    f876:	4620      	mov	r0, r4
    f878:	f01a f9fe 	bl	29c78 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
    f87c:	f50d 7d3d 	add.w	sp, sp, #756	; 0x2f4
    f880:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f882 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
    f882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f886:	b084      	sub	sp, #16
    f888:	4606      	mov	r6, r0
    f88a:	4688      	mov	r8, r1
    f88c:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
    f88e:	2500      	movs	r5, #0
    f890:	e005      	b.n	f89e <conf_fcb_append+0x1c>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
    f892:	2200      	movs	r2, #0
    f894:	4611      	mov	r1, r2
    f896:	4630      	mov	r0, r6
    f898:	f7ff ff88 	bl	f7ac <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
    f89c:	3501      	adds	r5, #1
    f89e:	2d09      	cmp	r5, #9
    f8a0:	dc0d      	bgt.n	f8be <conf_fcb_append+0x3c>
        rc = fcb_append(fcb, len, &loc);
    f8a2:	466a      	mov	r2, sp
    f8a4:	b2b9      	uxth	r1, r7
    f8a6:	4630      	mov	r0, r6
    f8a8:	f01a f82e 	bl	29908 <fcb_append>
    f8ac:	4604      	mov	r4, r0
        if (rc != FCB_ERR_NOSPACE) {
    f8ae:	f110 0f04 	cmn.w	r0, #4
    f8b2:	d104      	bne.n	f8be <conf_fcb_append+0x3c>
        if (fcb->f_scratch_cnt == 0) {
    f8b4:	79b3      	ldrb	r3, [r6, #6]
    f8b6:	2b00      	cmp	r3, #0
    f8b8:	d1eb      	bne.n	f892 <conf_fcb_append+0x10>
            return OS_ENOMEM;
    f8ba:	2401      	movs	r4, #1
    f8bc:	e00c      	b.n	f8d8 <conf_fcb_append+0x56>
    }
    if (rc) {
    f8be:	b97c      	cbnz	r4, f8e0 <conf_fcb_append+0x5e>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
    f8c0:	463b      	mov	r3, r7
    f8c2:	4642      	mov	r2, r8
    f8c4:	9902      	ldr	r1, [sp, #8]
    f8c6:	9800      	ldr	r0, [sp, #0]
    f8c8:	f001 f8b5 	bl	10a36 <flash_area_write>
    if (rc) {
    f8cc:	4604      	mov	r4, r0
    f8ce:	b948      	cbnz	r0, f8e4 <conf_fcb_append+0x62>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
    f8d0:	4669      	mov	r1, sp
    f8d2:	4630      	mov	r0, r6
    f8d4:	f01a f895 	bl	29a02 <fcb_append_finish>
    return OS_OK;
}
    f8d8:	4620      	mov	r0, r4
    f8da:	b004      	add	sp, #16
    f8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return OS_EINVAL;
    f8e0:	2402      	movs	r4, #2
    f8e2:	e7f9      	b.n	f8d8 <conf_fcb_append+0x56>
        return OS_EINVAL;
    f8e4:	2402      	movs	r4, #2
    f8e6:	e7f7      	b.n	f8d8 <conf_fcb_append+0x56>

0000f8e8 <conf_fcb_src>:
{
    f8e8:	b570      	push	{r4, r5, r6, lr}
    f8ea:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
    f8ec:	2301      	movs	r3, #1
    f8ee:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
    f8f0:	7b43      	ldrb	r3, [r0, #13]
    f8f2:	2b01      	cmp	r3, #1
    f8f4:	d902      	bls.n	f8fc <conf_fcb_src+0x14>
        cf->cf_fcb.f_scratch_cnt = 1;
    f8f6:	2301      	movs	r3, #1
    f8f8:	7383      	strb	r3, [r0, #14]
    f8fa:	e007      	b.n	f90c <conf_fcb_src+0x24>
        cf->cf_fcb.f_scratch_cnt = 0;
    f8fc:	2300      	movs	r3, #0
    f8fe:	7383      	strb	r3, [r0, #14]
    f900:	e004      	b.n	f90c <conf_fcb_src+0x24>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
    f902:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f904:	6882      	ldr	r2, [r0, #8]
    f906:	2100      	movs	r1, #0
    f908:	f001 f8a8 	bl	10a5c <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
    f90c:	f104 0508 	add.w	r5, r4, #8
    f910:	4628      	mov	r0, r5
    f912:	f019 fef9 	bl	29708 <fcb_init>
        if (rc) {
    f916:	4606      	mov	r6, r0
    f918:	b968      	cbnz	r0, f936 <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
    f91a:	7ba3      	ldrb	r3, [r4, #14]
    f91c:	b123      	cbz	r3, f928 <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
    f91e:	4628      	mov	r0, r5
    f920:	f019 fe6f 	bl	29602 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
    f924:	2800      	cmp	r0, #0
    f926:	ddec      	ble.n	f902 <conf_fcb_src+0x1a>
    cf->cf_store.cs_itf = &conf_fcb_itf;
    f928:	4b04      	ldr	r3, [pc, #16]	; (f93c <conf_fcb_src+0x54>)
    f92a:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
    f92c:	4620      	mov	r0, r4
    f92e:	f7ff fbd9 	bl	f0e4 <conf_src_register>
}
    f932:	4630      	mov	r0, r6
    f934:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
    f936:	2603      	movs	r6, #3
    f938:	e7fb      	b.n	f932 <conf_fcb_src+0x4a>
    f93a:	bf00      	nop
    f93c:	2000020c 	.word	0x2000020c

0000f940 <conf_fcb_dst>:
{
    f940:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
    f942:	4b03      	ldr	r3, [pc, #12]	; (f950 <conf_fcb_dst+0x10>)
    f944:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
    f946:	f7ff fbe1 	bl	f10c <conf_dst_register>
}
    f94a:	2000      	movs	r0, #0
    f94c:	bd08      	pop	{r3, pc}
    f94e:	bf00      	nop
    f950:	2000020c 	.word	0x2000020c

0000f954 <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
    f954:	b199      	cbz	r1, f97e <conf_fcb_kv_save+0x2a>
{
    f956:	b510      	push	{r4, lr}
    f958:	b0d8      	sub	sp, #352	; 0x160
    f95a:	4604      	mov	r4, r0
    f95c:	4613      	mov	r3, r2
    f95e:	460a      	mov	r2, r1
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
    f960:	f44f 71b0 	mov.w	r1, #352	; 0x160
    f964:	4668      	mov	r0, sp
    f966:	f000 f85f 	bl	fa28 <conf_line_make>
    f96a:	4602      	mov	r2, r0
    if (len < 0 || len + 2 > sizeof(buf)) {
    f96c:	f5b0 7faf 	cmp.w	r0, #350	; 0x15e
    f970:	d807      	bhi.n	f982 <conf_fcb_kv_save+0x2e>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
    f972:	4669      	mov	r1, sp
    f974:	4620      	mov	r0, r4
    f976:	f7ff ff84 	bl	f882 <conf_fcb_append>
}
    f97a:	b058      	add	sp, #352	; 0x160
    f97c:	bd10      	pop	{r4, pc}
        return OS_INVALID_PARM;
    f97e:	2003      	movs	r0, #3
}
    f980:	4770      	bx	lr
        return OS_INVALID_PARM;
    f982:	2003      	movs	r0, #3
    f984:	e7f9      	b.n	f97a <conf_fcb_kv_save+0x26>

0000f986 <conf_fcb_save>:
{
    f986:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
    f988:	3008      	adds	r0, #8
    f98a:	f7ff ffe3 	bl	f954 <conf_fcb_kv_save>
}
    f98e:	bd08      	pop	{r3, pc}

0000f990 <conf_line_parse>:
#include "config/config.h"
#include "config_priv.h"

int
conf_line_parse(char *buf, char **namep, char **valp)
{
    f990:	b410      	push	{r4}
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
    f992:	2400      	movs	r4, #0
    f994:	6014      	str	r4, [r2, #0]
    for (cp = buf; *cp != '\0'; cp++) {
    f996:	e017      	b.n	f9c8 <conf_line_parse+0x38>
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
    f998:	2b20      	cmp	r3, #32
    f99a:	d014      	beq.n	f9c6 <conf_line_parse+0x36>
    f99c:	2b0a      	cmp	r3, #10
    f99e:	d012      	beq.n	f9c6 <conf_line_parse+0x36>
    f9a0:	2b09      	cmp	r3, #9
    f9a2:	d010      	beq.n	f9c6 <conf_line_parse+0x36>
    f9a4:	2b0d      	cmp	r3, #13
    f9a6:	d00e      	beq.n	f9c6 <conf_line_parse+0x36>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
    f9a8:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
    f9aa:	2401      	movs	r4, #1
    f9ac:	e00b      	b.n	f9c6 <conf_line_parse+0x36>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
    f9ae:	2b3d      	cmp	r3, #61	; 0x3d
    f9b0:	d01a      	beq.n	f9e8 <conf_line_parse+0x58>
    f9b2:	2b20      	cmp	r3, #32
    f9b4:	d005      	beq.n	f9c2 <conf_line_parse+0x32>
    f9b6:	2b0a      	cmp	r3, #10
    f9b8:	d003      	beq.n	f9c2 <conf_line_parse+0x32>
    f9ba:	2b09      	cmp	r3, #9
    f9bc:	d001      	beq.n	f9c2 <conf_line_parse+0x32>
    f9be:	2b0d      	cmp	r3, #13
    f9c0:	d101      	bne.n	f9c6 <conf_line_parse+0x36>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
    f9c2:	2300      	movs	r3, #0
    f9c4:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
    f9c6:	3001      	adds	r0, #1
    f9c8:	7803      	ldrb	r3, [r0, #0]
    f9ca:	b313      	cbz	r3, fa12 <conf_line_parse+0x82>
        switch (state) {
    f9cc:	2c03      	cmp	r4, #3
    f9ce:	d8fa      	bhi.n	f9c6 <conf_line_parse+0x36>
    f9d0:	f20f 0c04 	addw	ip, pc, #4
    f9d4:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
    f9d8:	0000f999 	.word	0x0000f999
    f9dc:	0000f9af 	.word	0x0000f9af
    f9e0:	0000f9f1 	.word	0x0000f9f1
    f9e4:	0000fa07 	.word	0x0000fa07
                *cp = '\0';
    f9e8:	2300      	movs	r3, #0
    f9ea:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
    f9ec:	2402      	movs	r4, #2
    f9ee:	e7ea      	b.n	f9c6 <conf_line_parse+0x36>
    f9f0:	2b20      	cmp	r3, #32
    f9f2:	d0e8      	beq.n	f9c6 <conf_line_parse+0x36>
    f9f4:	2b0a      	cmp	r3, #10
    f9f6:	d0e6      	beq.n	f9c6 <conf_line_parse+0x36>
    f9f8:	2b09      	cmp	r3, #9
    f9fa:	d0e4      	beq.n	f9c6 <conf_line_parse+0x36>
    f9fc:	2b0d      	cmp	r3, #13
    f9fe:	d0e2      	beq.n	f9c6 <conf_line_parse+0x36>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
    fa00:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
    fa02:	2403      	movs	r4, #3
    fa04:	e7df      	b.n	f9c6 <conf_line_parse+0x36>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
    fa06:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
    fa08:	2b5e      	cmp	r3, #94	; 0x5e
    fa0a:	d9dc      	bls.n	f9c6 <conf_line_parse+0x36>
                *cp = '\0';
    fa0c:	2300      	movs	r3, #0
    fa0e:	7003      	strb	r3, [r0, #0]
    fa10:	e7d9      	b.n	f9c6 <conf_line_parse+0x36>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
    fa12:	3c02      	subs	r4, #2
    fa14:	b2e4      	uxtb	r4, r4
    fa16:	2c01      	cmp	r4, #1
    fa18:	d802      	bhi.n	fa20 <conf_line_parse+0x90>
        return 0;
    fa1a:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
    fa1c:	bc10      	pop	{r4}
    fa1e:	4770      	bx	lr
        return -1;
    fa20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa24:	e7fa      	b.n	fa1c <conf_line_parse+0x8c>
    fa26:	bf00      	nop

0000fa28 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
    fa28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa2c:	4606      	mov	r6, r0
    fa2e:	4689      	mov	r9, r1
    fa30:	4690      	mov	r8, r2
    fa32:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
    fa34:	4610      	mov	r0, r2
    fa36:	f7ff f80c 	bl	ea52 <strlen>
    fa3a:	4605      	mov	r5, r0
    if (value) {
    fa3c:	b1e7      	cbz	r7, fa78 <conf_line_make+0x50>
        vlen = strlen(value);
    fa3e:	4638      	mov	r0, r7
    fa40:	f7ff f807 	bl	ea52 <strlen>
    fa44:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
    fa46:	1963      	adds	r3, r4, r5
    fa48:	3301      	adds	r3, #1
    fa4a:	454b      	cmp	r3, r9
    fa4c:	da16      	bge.n	fa7c <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
    fa4e:	462a      	mov	r2, r5
    fa50:	4641      	mov	r1, r8
    fa52:	4630      	mov	r0, r6
    fa54:	f7fe ffb0 	bl	e9b8 <memcpy>
    off = nlen;
    dst[off++] = '=';
    fa58:	f105 0801 	add.w	r8, r5, #1
    fa5c:	233d      	movs	r3, #61	; 0x3d
    fa5e:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
    fa60:	4622      	mov	r2, r4
    fa62:	4639      	mov	r1, r7
    fa64:	eb06 0008 	add.w	r0, r6, r8
    fa68:	f7fe ffa6 	bl	e9b8 <memcpy>
    off += vlen;
    fa6c:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
    fa70:	2300      	movs	r3, #0
    fa72:	5433      	strb	r3, [r6, r0]

    return off;
}
    fa74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
    fa78:	2400      	movs	r4, #0
    fa7a:	e7e4      	b.n	fa46 <conf_line_make+0x1e>
        return -1;
    fa7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa80:	e7f8      	b.n	fa74 <conf_line_make+0x4c>
	...

0000fa84 <conf_mgmt_write>:
#endif

#if CONFIG_MGMT_WRITE
static int
conf_mgmt_write(struct mgmt_ctxt *cb)
{
    fa84:	b570      	push	{r4, r5, r6, lr}
    fa86:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    fa8a:	4605      	mov	r5, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
    fa8c:	f10d 06c7 	add.w	r6, sp, #199	; 0xc7
    fa90:	2400      	movs	r4, #0
    fa92:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
    fa96:	22bc      	movs	r2, #188	; 0xbc
    fa98:	4621      	mov	r1, r4
    fa9a:	a801      	add	r0, sp, #4
    fa9c:	f7fe ffb1 	bl	ea02 <memset>
    faa0:	4b23      	ldr	r3, [pc, #140]	; (fb30 <conf_mgmt_write+0xac>)
    faa2:	9300      	str	r3, [sp, #0]
    faa4:	2304      	movs	r3, #4
    faa6:	f88d 3004 	strb.w	r3, [sp, #4]
    faaa:	aa72      	add	r2, sp, #456	; 0x1c8
    faac:	9202      	str	r2, [sp, #8]
    faae:	2240      	movs	r2, #64	; 0x40
    fab0:	920a      	str	r2, [sp, #40]	; 0x28
    fab2:	4a20      	ldr	r2, [pc, #128]	; (fb34 <conf_mgmt_write+0xb0>)
    fab4:	920c      	str	r2, [sp, #48]	; 0x30
    fab6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    faba:	ab32      	add	r3, sp, #200	; 0xc8
    fabc:	930e      	str	r3, [sp, #56]	; 0x38
    fabe:	f44f 7280 	mov.w	r2, #256	; 0x100
    fac2:	9216      	str	r2, [sp, #88]	; 0x58
    fac4:	4a1c      	ldr	r2, [pc, #112]	; (fb38 <conf_mgmt_write+0xb4>)
    fac6:	9218      	str	r2, [sp, #96]	; 0x60
    fac8:	2205      	movs	r2, #5
    faca:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
    face:	961a      	str	r6, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
    fad0:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
    fad4:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
    fad8:	4669      	mov	r1, sp
    fada:	f105 001c 	add.w	r0, r5, #28
    fade:	f003 f812 	bl	12b06 <cbor_read_object>
    if (rc) {
    fae2:	b9f8      	cbnz	r0, fb24 <conf_mgmt_write+0xa0>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
    fae4:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
    fae8:	b13b      	cbz	r3, fafa <conf_mgmt_write+0x76>
        if (val_str[0] != '\0') {
    faea:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
    faee:	b173      	cbz	r3, fb0e <conf_mgmt_write+0x8a>
            rc = conf_set_value(name_str, val_str);
    faf0:	a932      	add	r1, sp, #200	; 0xc8
    faf2:	a872      	add	r0, sp, #456	; 0x1c8
    faf4:	f7ff fdb1 	bl	f65a <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
    faf8:	b9b0      	cbnz	r0, fb28 <conf_mgmt_write+0xa4>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
    fafa:	2000      	movs	r0, #0
    fafc:	f7ff fde2 	bl	f6c4 <conf_commit>
    if (rc) {
    fb00:	b9a0      	cbnz	r0, fb2c <conf_mgmt_write+0xa8>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
    fb02:	f89d 30c7 	ldrb.w	r3, [sp, #199]	; 0xc7
    fb06:	b93b      	cbnz	r3, fb18 <conf_mgmt_write+0x94>
        if (rc) {
            return MGMT_ERR_EINVAL;
        }
    }
    return 0;
}
    fb08:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    fb0c:	bd70      	pop	{r4, r5, r6, pc}
            rc = conf_set_value(name_str, NULL);
    fb0e:	2100      	movs	r1, #0
    fb10:	a872      	add	r0, sp, #456	; 0x1c8
    fb12:	f7ff fda2 	bl	f65a <conf_set_value>
    fb16:	e7ef      	b.n	faf8 <conf_mgmt_write+0x74>
        rc = conf_save();
    fb18:	f7ff fb6c 	bl	f1f4 <conf_save>
        if (rc) {
    fb1c:	2800      	cmp	r0, #0
    fb1e:	d0f3      	beq.n	fb08 <conf_mgmt_write+0x84>
            return MGMT_ERR_EINVAL;
    fb20:	2003      	movs	r0, #3
    fb22:	e7f1      	b.n	fb08 <conf_mgmt_write+0x84>
        return MGMT_ERR_EINVAL;
    fb24:	2003      	movs	r0, #3
    fb26:	e7ef      	b.n	fb08 <conf_mgmt_write+0x84>
            return MGMT_ERR_EINVAL;
    fb28:	2003      	movs	r0, #3
    fb2a:	e7ed      	b.n	fb08 <conf_mgmt_write+0x84>
        return MGMT_ERR_EINVAL;
    fb2c:	2003      	movs	r0, #3
    fb2e:	e7eb      	b.n	fb08 <conf_mgmt_write+0x84>
    fb30:	0002eac0 	.word	0x0002eac0
    fb34:	0002d938 	.word	0x0002d938
    fb38:	0002d93c 	.word	0x0002d93c

0000fb3c <conf_mgmt_read>:
{
    fb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb3e:	b0e9      	sub	sp, #420	; 0x1a4
    fb40:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
    fb42:	225c      	movs	r2, #92	; 0x5c
    fb44:	2100      	movs	r1, #0
    fb46:	a801      	add	r0, sp, #4
    fb48:	f7fe ff5b 	bl	ea02 <memset>
    fb4c:	4b18      	ldr	r3, [pc, #96]	; (fbb0 <conf_mgmt_read+0x74>)
    fb4e:	9300      	str	r3, [sp, #0]
    fb50:	2304      	movs	r3, #4
    fb52:	f88d 3004 	strb.w	r3, [sp, #4]
    fb56:	ab58      	add	r3, sp, #352	; 0x160
    fb58:	9302      	str	r3, [sp, #8]
    fb5a:	2340      	movs	r3, #64	; 0x40
    fb5c:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
    fb5e:	4669      	mov	r1, sp
    fb60:	f104 001c 	add.w	r0, r4, #28
    fb64:	f002 ffcf 	bl	12b06 <cbor_read_object>
    if (rc) {
    fb68:	b9e0      	cbnz	r0, fba4 <conf_mgmt_read+0x68>
    fb6a:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
    fb6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    fb70:	a918      	add	r1, sp, #96	; 0x60
    fb72:	a858      	add	r0, sp, #352	; 0x160
    fb74:	f7ff fd8b 	bl	f68e <conf_get_value>
    if (!val) {
    fb78:	4607      	mov	r7, r0
    fb7a:	b1a8      	cbz	r0, fba8 <conf_mgmt_read+0x6c>
    fb7c:	2203      	movs	r2, #3
    fb7e:	490d      	ldr	r1, [pc, #52]	; (fbb4 <conf_mgmt_read+0x78>)
    fb80:	4620      	mov	r0, r4
    fb82:	f018 fd47 	bl	28614 <cbor_encode_text_string>
    fb86:	4606      	mov	r6, r0
    fb88:	4638      	mov	r0, r7
    fb8a:	f7fe ff62 	bl	ea52 <strlen>
    fb8e:	4602      	mov	r2, r0
    fb90:	4639      	mov	r1, r7
    fb92:	4620      	mov	r0, r4
    fb94:	f018 fd3e 	bl	28614 <cbor_encode_text_string>
    if (g_err) {
    fb98:	ea50 0306 	orrs.w	r3, r0, r6
    fb9c:	d106      	bne.n	fbac <conf_mgmt_read+0x70>
}
    fb9e:	4628      	mov	r0, r5
    fba0:	b069      	add	sp, #420	; 0x1a4
    fba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
    fba4:	2503      	movs	r5, #3
    fba6:	e7fa      	b.n	fb9e <conf_mgmt_read+0x62>
        return MGMT_ERR_EINVAL;
    fba8:	2503      	movs	r5, #3
    fbaa:	e7f8      	b.n	fb9e <conf_mgmt_read+0x62>
        return MGMT_ERR_ENOMEM;
    fbac:	2502      	movs	r5, #2
    fbae:	e7f6      	b.n	fb9e <conf_mgmt_read+0x62>
    fbb0:	0002eac0 	.word	0x0002eac0
    fbb4:	0002d938 	.word	0x0002d938

0000fbb8 <conf_mgmt_register>:
#endif

int
conf_mgmt_register(void)
{
    fbb8:	b508      	push	{r3, lr}
     mgmt_register_group(&conf_mgmt_group);
    fbba:	4802      	ldr	r0, [pc, #8]	; (fbc4 <conf_mgmt_register+0xc>)
    fbbc:	f004 f9e2 	bl	13f84 <mgmt_register_group>
     return 0;
}
    fbc0:	2000      	movs	r0, #0
    fbc2:	bd08      	pop	{r3, pc}
    fbc4:	2000021c 	.word	0x2000021c

0000fbc8 <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
    fbc8:	b470      	push	{r4, r5, r6}
    char *p = str;
    fbca:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
    fbcc:	4b10      	ldr	r3, [pc, #64]	; (fc10 <add_ascii_num_with_char+0x48>)
    fbce:	fba3 5301 	umull	r5, r3, r3, r1
    fbd2:	08db      	lsrs	r3, r3, #3
    fbd4:	461e      	mov	r6, r3
    fbd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fbda:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    fbde:	4625      	mov	r5, r4
    fbe0:	3401      	adds	r4, #1
    fbe2:	3330      	adds	r3, #48	; 0x30
    fbe4:	702b      	strb	r3, [r5, #0]
        num /= 10;
    fbe6:	460b      	mov	r3, r1
    fbe8:	4631      	mov	r1, r6
    } while (num);
    fbea:	2b09      	cmp	r3, #9
    fbec:	d8ee      	bhi.n	fbcc <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
    fbee:	462b      	mov	r3, r5
    fbf0:	e005      	b.n	fbfe <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
    fbf2:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
    fbf4:	781e      	ldrb	r6, [r3, #0]
    fbf6:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
    fbfa:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
    fbfe:	4283      	cmp	r3, r0
    fc00:	d8f7      	bhi.n	fbf2 <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
    fc02:	7022      	strb	r2, [r4, #0]
    *str = '\0';
    fc04:	2300      	movs	r3, #0
    fc06:	7063      	strb	r3, [r4, #1]

    return str;
}
    fc08:	1ca8      	adds	r0, r5, #2
    fc0a:	bc70      	pop	{r4, r5, r6}
    fc0c:	4770      	bx	lr
    fc0e:	bf00      	nop
    fc10:	cccccccd 	.word	0xcccccccd

0000fc14 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
    fc14:	b508      	push	{r3, lr}
    cur = 0;
    fc16:	2300      	movs	r3, #0
    fc18:	4a08      	ldr	r2, [pc, #32]	; (fc3c <console_handle_line+0x28>)
    fc1a:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
    fc1c:	4a08      	ldr	r2, [pc, #32]	; (fc40 <console_handle_line+0x2c>)
    fc1e:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
    fc20:	4b08      	ldr	r3, [pc, #32]	; (fc44 <console_handle_line+0x30>)
    fc22:	6819      	ldr	r1, [r3, #0]
    fc24:	4b08      	ldr	r3, [pc, #32]	; (fc48 <console_handle_line+0x34>)
    fc26:	6818      	ldr	r0, [r3, #0]
    fc28:	f7fd faef 	bl	d20a <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
    fc2c:	4b07      	ldr	r3, [pc, #28]	; (fc4c <console_handle_line+0x38>)
    fc2e:	681b      	ldr	r3, [r3, #0]
    fc30:	b103      	cbz	r3, fc34 <console_handle_line+0x20>
        console_compat_rx_cb();
    fc32:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
    fc34:	4b03      	ldr	r3, [pc, #12]	; (fc44 <console_handle_line+0x30>)
    fc36:	2200      	movs	r2, #0
    fc38:	601a      	str	r2, [r3, #0]
}
    fc3a:	bd08      	pop	{r3, pc}
    fc3c:	20001aa4 	.word	0x20001aa4
    fc40:	20001abe 	.word	0x20001abe
    fc44:	20001aa8 	.word	0x20001aa8
    fc48:	20001ab4 	.word	0x20001ab4
    fc4c:	20001a90 	.word	0x20001a90

0000fc50 <console_filter_out>:
{
    fc50:	b508      	push	{r3, lr}
    if (g_console_silence) {
    fc52:	4b0b      	ldr	r3, [pc, #44]	; (fc80 <console_filter_out+0x30>)
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	b95b      	cbnz	r3, fc70 <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
    fc58:	4b0a      	ldr	r3, [pc, #40]	; (fc84 <console_filter_out+0x34>)
    fc5a:	781b      	ldrb	r3, [r3, #0]
    fc5c:	b94b      	cbnz	r3, fc72 <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
    fc5e:	280a      	cmp	r0, #10
    fc60:	d00c      	beq.n	fc7c <console_filter_out+0x2c>
    fc62:	280d      	cmp	r0, #13
    fc64:	d008      	beq.n	fc78 <console_filter_out+0x28>
    fc66:	2201      	movs	r2, #1
    fc68:	4b07      	ldr	r3, [pc, #28]	; (fc88 <console_filter_out+0x38>)
    fc6a:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
    fc6c:	f000 fd7c 	bl	10768 <console_out_nolock>
}
    fc70:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
    fc72:	f000 fd79 	bl	10768 <console_out_nolock>
    fc76:	e7fb      	b.n	fc70 <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
    fc78:	2200      	movs	r2, #0
    fc7a:	e7f5      	b.n	fc68 <console_filter_out+0x18>
    fc7c:	2200      	movs	r2, #0
    fc7e:	e7f3      	b.n	fc68 <console_filter_out+0x18>
    fc80:	20001ab1 	.word	0x20001ab1
    fc84:	20001ab3 	.word	0x20001ab3
    fc88:	20001a94 	.word	0x20001a94

0000fc8c <console_filter_write>:
{
    fc8c:	b570      	push	{r4, r5, r6, lr}
    fc8e:	4606      	mov	r6, r0
    fc90:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
    fc92:	2400      	movs	r4, #0
    fc94:	42ac      	cmp	r4, r5
    fc96:	da07      	bge.n	fca8 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
    fc98:	5d30      	ldrb	r0, [r6, r4]
    fc9a:	f7ff ffd9 	bl	fc50 <console_filter_out>
    fc9e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fca2:	d001      	beq.n	fca8 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
    fca4:	3401      	adds	r4, #1
    fca6:	e7f5      	b.n	fc94 <console_filter_write+0x8>
}
    fca8:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fcac <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
    fcac:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    fcae:	4b0d      	ldr	r3, [pc, #52]	; (fce4 <console_append_char+0x38>)
    fcb0:	881b      	ldrh	r3, [r3, #0]
    fcb2:	4a0d      	ldr	r2, [pc, #52]	; (fce8 <console_append_char+0x3c>)
    fcb4:	8812      	ldrh	r2, [r2, #0]
    fcb6:	4413      	add	r3, r2
    fcb8:	2bfe      	cmp	r3, #254	; 0xfe
    fcba:	dc0e      	bgt.n	fcda <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
    fcbc:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
    fcbe:	b171      	cbz	r1, fcde <console_append_char+0x32>
        return 1;
    }

    if (echo) {
    fcc0:	4b0a      	ldr	r3, [pc, #40]	; (fcec <console_append_char+0x40>)
    fcc2:	681b      	ldr	r3, [r3, #0]
    fcc4:	b92b      	cbnz	r3, fcd2 <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
    fcc6:	4a07      	ldr	r2, [pc, #28]	; (fce4 <console_append_char+0x38>)
    fcc8:	8813      	ldrh	r3, [r2, #0]
    fcca:	3301      	adds	r3, #1
    fccc:	8013      	strh	r3, [r2, #0]
    return 1;
    fcce:	2001      	movs	r0, #1
}
    fcd0:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
    fcd2:	4608      	mov	r0, r1
    fcd4:	f000 fd48 	bl	10768 <console_out_nolock>
        console_switch_to_logs();
    fcd8:	e7f5      	b.n	fcc6 <console_append_char+0x1a>
        return 0;
    fcda:	2000      	movs	r0, #0
    fcdc:	e7f8      	b.n	fcd0 <console_append_char+0x24>
        return 1;
    fcde:	2001      	movs	r0, #1
    fce0:	e7f6      	b.n	fcd0 <console_append_char+0x24>
    fce2:	bf00      	nop
    fce4:	20001aa4 	.word	0x20001aa4
    fce8:	20001abe 	.word	0x20001abe
    fcec:	20000228 	.word	0x20000228

0000fcf0 <console_write_nolock>:
{
    fcf0:	b570      	push	{r4, r5, r6, lr}
    fcf2:	4606      	mov	r6, r0
    fcf4:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
    fcf6:	2400      	movs	r4, #0
    fcf8:	42ac      	cmp	r4, r5
    fcfa:	da07      	bge.n	fd0c <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
    fcfc:	5d30      	ldrb	r0, [r6, r4]
    fcfe:	f000 fd33 	bl	10768 <console_out_nolock>
    fd02:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd06:	d001      	beq.n	fd0c <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
    fd08:	3401      	adds	r4, #1
    fd0a:	e7f5      	b.n	fcf8 <console_write_nolock+0x8>
}
    fd0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fd10 <handle_end>:
    if (trailing_chars) {
    fd10:	4b11      	ldr	r3, [pc, #68]	; (fd58 <handle_end+0x48>)
    fd12:	8819      	ldrh	r1, [r3, #0]
    fd14:	b901      	cbnz	r1, fd18 <handle_end+0x8>
    fd16:	4770      	bx	lr
{
    fd18:	b510      	push	{r4, lr}
    fd1a:	b084      	sub	sp, #16
    char seq[14] = CSI;
    fd1c:	f645 331b 	movw	r3, #23323	; 0x5b1b
    fd20:	9300      	str	r3, [sp, #0]
    fd22:	2300      	movs	r3, #0
    fd24:	9301      	str	r3, [sp, #4]
    fd26:	9302      	str	r3, [sp, #8]
    fd28:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fd2c:	b949      	cbnz	r1, fd42 <handle_end+0x32>
        cur += trailing_chars;
    fd2e:	490b      	ldr	r1, [pc, #44]	; (fd5c <handle_end+0x4c>)
    fd30:	4a09      	ldr	r2, [pc, #36]	; (fd58 <handle_end+0x48>)
    fd32:	880b      	ldrh	r3, [r1, #0]
    fd34:	8810      	ldrh	r0, [r2, #0]
    fd36:	4403      	add	r3, r0
    fd38:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
    fd3a:	2300      	movs	r3, #0
    fd3c:	8013      	strh	r3, [r2, #0]
}
    fd3e:	b004      	add	sp, #16
    fd40:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
    fd42:	466c      	mov	r4, sp
    fd44:	2243      	movs	r2, #67	; 0x43
    fd46:	f10d 0002 	add.w	r0, sp, #2
    fd4a:	f7ff ff3d 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fd4e:	1b01      	subs	r1, r0, r4
    fd50:	4620      	mov	r0, r4
    fd52:	f7ff ffcd 	bl	fcf0 <console_write_nolock>
    fd56:	e7ea      	b.n	fd2e <handle_end+0x1e>
    fd58:	20001abe 	.word	0x20001abe
    fd5c:	20001aa4 	.word	0x20001aa4

0000fd60 <handle_home>:
    if (cur) {
    fd60:	4b11      	ldr	r3, [pc, #68]	; (fda8 <handle_home+0x48>)
    fd62:	8819      	ldrh	r1, [r3, #0]
    fd64:	b901      	cbnz	r1, fd68 <handle_home+0x8>
    fd66:	4770      	bx	lr
{
    fd68:	b510      	push	{r4, lr}
    fd6a:	b084      	sub	sp, #16
    char seq[14] = CSI;
    fd6c:	f645 331b 	movw	r3, #23323	; 0x5b1b
    fd70:	9300      	str	r3, [sp, #0]
    fd72:	2300      	movs	r3, #0
    fd74:	9301      	str	r3, [sp, #4]
    fd76:	9302      	str	r3, [sp, #8]
    fd78:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fd7c:	b949      	cbnz	r1, fd92 <handle_home+0x32>
        trailing_chars += cur;
    fd7e:	490b      	ldr	r1, [pc, #44]	; (fdac <handle_home+0x4c>)
    fd80:	4a09      	ldr	r2, [pc, #36]	; (fda8 <handle_home+0x48>)
    fd82:	880b      	ldrh	r3, [r1, #0]
    fd84:	8810      	ldrh	r0, [r2, #0]
    fd86:	4403      	add	r3, r0
    fd88:	800b      	strh	r3, [r1, #0]
        cur = 0;
    fd8a:	2300      	movs	r3, #0
    fd8c:	8013      	strh	r3, [r2, #0]
}
    fd8e:	b004      	add	sp, #16
    fd90:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    fd92:	466c      	mov	r4, sp
    fd94:	2244      	movs	r2, #68	; 0x44
    fd96:	f10d 0002 	add.w	r0, sp, #2
    fd9a:	f7ff ff15 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fd9e:	1b01      	subs	r1, r0, r4
    fda0:	4620      	mov	r0, r4
    fda2:	f7ff ffa5 	bl	fcf0 <console_write_nolock>
    fda6:	e7ea      	b.n	fd7e <handle_home+0x1e>
    fda8:	20001aa4 	.word	0x20001aa4
    fdac:	20001abe 	.word	0x20001abe

0000fdb0 <del_char>:
{
    fdb0:	b530      	push	{r4, r5, lr}
    fdb2:	b085      	sub	sp, #20
    fdb4:	4604      	mov	r4, r0
    left = trailing_chars;
    fdb6:	4b17      	ldr	r3, [pc, #92]	; (fe14 <del_char+0x64>)
    fdb8:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
    fdba:	1e5d      	subs	r5, r3, #1
    fdbc:	2b01      	cmp	r3, #1
    fdbe:	dd06      	ble.n	fdce <del_char+0x1e>
        *pos = *(pos + 1);
    fdc0:	7860      	ldrb	r0, [r4, #1]
    fdc2:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
    fdc6:	f000 fccf 	bl	10768 <console_out_nolock>
    while (left-- > 1) {
    fdca:	462b      	mov	r3, r5
    fdcc:	e7f5      	b.n	fdba <del_char+0xa>
    if (trailing_chars) {
    fdce:	4b11      	ldr	r3, [pc, #68]	; (fe14 <del_char+0x64>)
    fdd0:	881b      	ldrh	r3, [r3, #0]
    fdd2:	b90b      	cbnz	r3, fdd8 <del_char+0x28>
}
    fdd4:	b005      	add	sp, #20
    fdd6:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
    fdd8:	2020      	movs	r0, #32
    fdda:	f000 fcc5 	bl	10768 <console_out_nolock>
        cursor_backward(trailing_chars);
    fdde:	4b0d      	ldr	r3, [pc, #52]	; (fe14 <del_char+0x64>)
    fde0:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
    fde2:	f645 331b 	movw	r3, #23323	; 0x5b1b
    fde6:	9300      	str	r3, [sp, #0]
    fde8:	2300      	movs	r3, #0
    fdea:	9301      	str	r3, [sp, #4]
    fdec:	9302      	str	r3, [sp, #8]
    fdee:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fdf2:	b921      	cbnz	r1, fdfe <del_char+0x4e>
        trailing_chars--;
    fdf4:	4a07      	ldr	r2, [pc, #28]	; (fe14 <del_char+0x64>)
    fdf6:	8813      	ldrh	r3, [r2, #0]
    fdf8:	3b01      	subs	r3, #1
    fdfa:	8013      	strh	r3, [r2, #0]
}
    fdfc:	e7ea      	b.n	fdd4 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    fdfe:	466c      	mov	r4, sp
    fe00:	2244      	movs	r2, #68	; 0x44
    fe02:	f10d 0002 	add.w	r0, sp, #2
    fe06:	f7ff fedf 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fe0a:	1b01      	subs	r1, r0, r4
    fe0c:	4620      	mov	r0, r4
    fe0e:	f7ff ff6f 	bl	fcf0 <console_write_nolock>
    fe12:	e7ef      	b.n	fdf4 <del_char+0x44>
    fe14:	20001abe 	.word	0x20001abe

0000fe18 <handle_delete>:
{
    fe18:	b508      	push	{r3, lr}
    if (trailing_chars) {
    fe1a:	4b05      	ldr	r3, [pc, #20]	; (fe30 <handle_delete+0x18>)
    fe1c:	881b      	ldrh	r3, [r3, #0]
    fe1e:	b903      	cbnz	r3, fe22 <handle_delete+0xa>
}
    fe20:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
    fe22:	4b04      	ldr	r3, [pc, #16]	; (fe34 <handle_delete+0x1c>)
    fe24:	881b      	ldrh	r3, [r3, #0]
    fe26:	4418      	add	r0, r3
    fe28:	f7ff ffc2 	bl	fdb0 <del_char>
}
    fe2c:	e7f8      	b.n	fe20 <handle_delete+0x8>
    fe2e:	bf00      	nop
    fe30:	20001abe 	.word	0x20001abe
    fe34:	20001aa4 	.word	0x20001aa4

0000fe38 <handle_ansi>:
{
    fe38:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
    fe3a:	4a5e      	ldr	r2, [pc, #376]	; (ffb4 <handle_ansi+0x17c>)
    fe3c:	6812      	ldr	r2, [r2, #0]
    fe3e:	f012 0f04 	tst.w	r2, #4
    fe42:	d025      	beq.n	fe90 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
    fe44:	f022 0204 	bic.w	r2, r2, #4
    fe48:	485a      	ldr	r0, [pc, #360]	; (ffb4 <handle_ansi+0x17c>)
    fe4a:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
    fe4c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fe50:	2809      	cmp	r0, #9
    fe52:	d912      	bls.n	fe7a <handle_ansi+0x42>
            ansi_val = 1;
    fe54:	4a58      	ldr	r2, [pc, #352]	; (ffb8 <handle_ansi+0x180>)
    fe56:	2001      	movs	r0, #1
    fe58:	6010      	str	r0, [r2, #0]
{
    fe5a:	b510      	push	{r4, lr}
    fe5c:	b084      	sub	sp, #16
    switch (byte) {
    fe5e:	2b48      	cmp	r3, #72	; 0x48
    fe60:	d840      	bhi.n	fee4 <handle_ansi+0xac>
    fe62:	2b43      	cmp	r3, #67	; 0x43
    fe64:	f0c0 8093 	bcc.w	ff8e <handle_ansi+0x156>
    fe68:	3b43      	subs	r3, #67	; 0x43
    fe6a:	2b05      	cmp	r3, #5
    fe6c:	f200 808f 	bhi.w	ff8e <handle_ansi+0x156>
    fe70:	e8df f003 	tbb	[pc, r3]
    fe74:	948d4668 	.word	0x948d4668
    fe78:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
    fe7a:	f042 0208 	orr.w	r2, r2, #8
    fe7e:	494d      	ldr	r1, [pc, #308]	; (ffb4 <handle_ansi+0x17c>)
    fe80:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
    fe82:	3b30      	subs	r3, #48	; 0x30
    fe84:	4a4c      	ldr	r2, [pc, #304]	; (ffb8 <handle_ansi+0x180>)
    fe86:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
    fe88:	4b4c      	ldr	r3, [pc, #304]	; (ffbc <handle_ansi+0x184>)
    fe8a:	2200      	movs	r2, #0
    fe8c:	601a      	str	r2, [r3, #0]
        return;
    fe8e:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
    fe90:	f012 0f08 	tst.w	r2, #8
    fe94:	d0e1      	beq.n	fe5a <handle_ansi+0x22>
        if (isdigit(byte)) {
    fe96:	3830      	subs	r0, #48	; 0x30
    fe98:	2809      	cmp	r0, #9
    fe9a:	d906      	bls.n	feaa <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    fe9c:	2b3b      	cmp	r3, #59	; 0x3b
    fe9e:	d019      	beq.n	fed4 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
    fea0:	f022 0218 	bic.w	r2, r2, #24
    fea4:	4843      	ldr	r0, [pc, #268]	; (ffb4 <handle_ansi+0x17c>)
    fea6:	6002      	str	r2, [r0, #0]
    fea8:	e7d7      	b.n	fe5a <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
    feaa:	f012 0f10 	tst.w	r2, #16
    feae:	d008      	beq.n	fec2 <handle_ansi+0x8a>
                ansi_val_2 *= 10;
    feb0:	4942      	ldr	r1, [pc, #264]	; (ffbc <handle_ansi+0x184>)
    feb2:	680a      	ldr	r2, [r1, #0]
    feb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
    feb8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    febc:	3b30      	subs	r3, #48	; 0x30
    febe:	600b      	str	r3, [r1, #0]
    fec0:	4770      	bx	lr
                ansi_val *= 10;
    fec2:	493d      	ldr	r1, [pc, #244]	; (ffb8 <handle_ansi+0x180>)
    fec4:	680a      	ldr	r2, [r1, #0]
    fec6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
    feca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    fece:	3b30      	subs	r3, #48	; 0x30
    fed0:	600b      	str	r3, [r1, #0]
            return;
    fed2:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    fed4:	f012 0f10 	tst.w	r2, #16
    fed8:	d1e2      	bne.n	fea0 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
    feda:	f042 0210 	orr.w	r2, r2, #16
    fede:	4b35      	ldr	r3, [pc, #212]	; (ffb4 <handle_ansi+0x17c>)
    fee0:	601a      	str	r2, [r3, #0]
            return;
    fee2:	4770      	bx	lr
    switch (byte) {
    fee4:	2b7e      	cmp	r3, #126	; 0x7e
    fee6:	d152      	bne.n	ff8e <handle_ansi+0x156>
        switch (ansi_val) {
    fee8:	4b33      	ldr	r3, [pc, #204]	; (ffb8 <handle_ansi+0x180>)
    feea:	681b      	ldr	r3, [r3, #0]
    feec:	2b03      	cmp	r3, #3
    feee:	d059      	beq.n	ffa4 <handle_ansi+0x16c>
    fef0:	2b04      	cmp	r3, #4
    fef2:	d05b      	beq.n	ffac <handle_ansi+0x174>
    fef4:	2b01      	cmp	r3, #1
    fef6:	d14a      	bne.n	ff8e <handle_ansi+0x156>
            handle_home(line);
    fef8:	4608      	mov	r0, r1
    fefa:	f7ff ff31 	bl	fd60 <handle_home>
            break;
    fefe:	e046      	b.n	ff8e <handle_ansi+0x156>
        if (ansi_val > cur) {
    ff00:	4b2f      	ldr	r3, [pc, #188]	; (ffc0 <handle_ansi+0x188>)
    ff02:	881b      	ldrh	r3, [r3, #0]
    ff04:	4a2c      	ldr	r2, [pc, #176]	; (ffb8 <handle_ansi+0x180>)
    ff06:	6811      	ldr	r1, [r2, #0]
    ff08:	428b      	cmp	r3, r1
    ff0a:	d340      	bcc.n	ff8e <handle_ansi+0x156>
        trailing_chars += ansi_val;
    ff0c:	b28a      	uxth	r2, r1
    ff0e:	4c2d      	ldr	r4, [pc, #180]	; (ffc4 <handle_ansi+0x18c>)
    ff10:	8820      	ldrh	r0, [r4, #0]
    ff12:	4410      	add	r0, r2
    ff14:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
    ff16:	1a9b      	subs	r3, r3, r2
    ff18:	4a29      	ldr	r2, [pc, #164]	; (ffc0 <handle_ansi+0x188>)
    ff1a:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
    ff1c:	f645 331b 	movw	r3, #23323	; 0x5b1b
    ff20:	9300      	str	r3, [sp, #0]
    ff22:	2300      	movs	r3, #0
    ff24:	9301      	str	r3, [sp, #4]
    ff26:	9302      	str	r3, [sp, #8]
    ff28:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    ff2c:	b379      	cbz	r1, ff8e <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    ff2e:	466c      	mov	r4, sp
    ff30:	2244      	movs	r2, #68	; 0x44
    ff32:	f10d 0002 	add.w	r0, sp, #2
    ff36:	f7ff fe47 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    ff3a:	1b01      	subs	r1, r0, r4
    ff3c:	4620      	mov	r0, r4
    ff3e:	f7ff fed7 	bl	fcf0 <console_write_nolock>
}
    ff42:	e024      	b.n	ff8e <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
    ff44:	4b1f      	ldr	r3, [pc, #124]	; (ffc4 <handle_ansi+0x18c>)
    ff46:	881b      	ldrh	r3, [r3, #0]
    ff48:	4a1b      	ldr	r2, [pc, #108]	; (ffb8 <handle_ansi+0x180>)
    ff4a:	6811      	ldr	r1, [r2, #0]
    ff4c:	428b      	cmp	r3, r1
    ff4e:	d31e      	bcc.n	ff8e <handle_ansi+0x156>
        trailing_chars -= ansi_val;
    ff50:	b28a      	uxth	r2, r1
    ff52:	1a9b      	subs	r3, r3, r2
    ff54:	481b      	ldr	r0, [pc, #108]	; (ffc4 <handle_ansi+0x18c>)
    ff56:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
    ff58:	4b19      	ldr	r3, [pc, #100]	; (ffc0 <handle_ansi+0x188>)
    ff5a:	8818      	ldrh	r0, [r3, #0]
    ff5c:	4402      	add	r2, r0
    ff5e:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
    ff60:	f645 331b 	movw	r3, #23323	; 0x5b1b
    ff64:	9300      	str	r3, [sp, #0]
    ff66:	2300      	movs	r3, #0
    ff68:	9301      	str	r3, [sp, #4]
    ff6a:	9302      	str	r3, [sp, #8]
    ff6c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    ff70:	b169      	cbz	r1, ff8e <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
    ff72:	466c      	mov	r4, sp
    ff74:	2243      	movs	r2, #67	; 0x43
    ff76:	f10d 0002 	add.w	r0, sp, #2
    ff7a:	f7ff fe25 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    ff7e:	1b01      	subs	r1, r0, r4
    ff80:	4620      	mov	r0, r4
    ff82:	f7ff feb5 	bl	fcf0 <console_write_nolock>
}
    ff86:	e002      	b.n	ff8e <handle_ansi+0x156>
        handle_home(line);
    ff88:	4608      	mov	r0, r1
    ff8a:	f7ff fee9 	bl	fd60 <handle_home>
    esc_state &= ~ESC_ANSI;
    ff8e:	4a09      	ldr	r2, [pc, #36]	; (ffb4 <handle_ansi+0x17c>)
    ff90:	6813      	ldr	r3, [r2, #0]
    ff92:	f023 0302 	bic.w	r3, r3, #2
    ff96:	6013      	str	r3, [r2, #0]
}
    ff98:	b004      	add	sp, #16
    ff9a:	bd10      	pop	{r4, pc}
        handle_end(line);
    ff9c:	4608      	mov	r0, r1
    ff9e:	f7ff feb7 	bl	fd10 <handle_end>
        break;
    ffa2:	e7f4      	b.n	ff8e <handle_ansi+0x156>
            handle_delete(line);
    ffa4:	4608      	mov	r0, r1
    ffa6:	f7ff ff37 	bl	fe18 <handle_delete>
            break;
    ffaa:	e7f0      	b.n	ff8e <handle_ansi+0x156>
            handle_end(line);
    ffac:	4608      	mov	r0, r1
    ffae:	f7ff feaf 	bl	fd10 <handle_end>
            break;
    ffb2:	e7ec      	b.n	ff8e <handle_ansi+0x156>
    ffb4:	20001aac 	.word	0x20001aac
    ffb8:	20001a74 	.word	0x20001a74
    ffbc:	20001a78 	.word	0x20001a78
    ffc0:	20001aa4 	.word	0x20001aa4
    ffc4:	20001abe 	.word	0x20001abe

0000ffc8 <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
    ffc8:	4b13      	ldr	r3, [pc, #76]	; (10018 <handle_backspace+0x50>)
    ffca:	881b      	ldrh	r3, [r3, #0]
    ffcc:	b903      	cbnz	r3, ffd0 <handle_backspace+0x8>
    ffce:	4770      	bx	lr
{
    ffd0:	b530      	push	{r4, r5, lr}
    ffd2:	b085      	sub	sp, #20
    ffd4:	4604      	mov	r4, r0
    char seq[14] = CSI;
    ffd6:	f645 331b 	movw	r3, #23323	; 0x5b1b
    ffda:	9300      	str	r3, [sp, #0]
    ffdc:	2300      	movs	r3, #0
    ffde:	9301      	str	r3, [sp, #4]
    ffe0:	9302      	str	r3, [sp, #8]
    ffe2:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    ffe6:	466d      	mov	r5, sp
    ffe8:	2244      	movs	r2, #68	; 0x44
    ffea:	2101      	movs	r1, #1
    ffec:	f10d 0002 	add.w	r0, sp, #2
    fff0:	f7ff fdea 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fff4:	1b41      	subs	r1, r0, r5
    fff6:	4628      	mov	r0, r5
    fff8:	f7ff fe7a 	bl	fcf0 <console_write_nolock>
        cursor_backward(1);
        cur--;
    fffc:	4a06      	ldr	r2, [pc, #24]	; (10018 <handle_backspace+0x50>)
    fffe:	8813      	ldrh	r3, [r2, #0]
   10000:	3b01      	subs	r3, #1
   10002:	b29b      	uxth	r3, r3
   10004:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   10006:	4905      	ldr	r1, [pc, #20]	; (1001c <handle_backspace+0x54>)
   10008:	880a      	ldrh	r2, [r1, #0]
   1000a:	3201      	adds	r2, #1
   1000c:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1000e:	18e0      	adds	r0, r4, r3
   10010:	f7ff fece 	bl	fdb0 <del_char>
    }
}
   10014:	b005      	add	sp, #20
   10016:	bd30      	pop	{r4, r5, pc}
   10018:	20001aa4 	.word	0x20001aa4
   1001c:	20001abe 	.word	0x20001abe

00010020 <console_clear_line>:
{
   10020:	b510      	push	{r4, lr}
   10022:	b084      	sub	sp, #16
    if (cur) {
   10024:	4b13      	ldr	r3, [pc, #76]	; (10074 <console_clear_line+0x54>)
   10026:	8819      	ldrh	r1, [r3, #0]
   10028:	b979      	cbnz	r1, 1004a <console_clear_line+0x2a>
    cur = 0;
   1002a:	2300      	movs	r3, #0
   1002c:	4a11      	ldr	r2, [pc, #68]	; (10074 <console_clear_line+0x54>)
   1002e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   10030:	4a11      	ldr	r2, [pc, #68]	; (10078 <console_clear_line+0x58>)
   10032:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   10034:	201b      	movs	r0, #27
   10036:	f000 fb97 	bl	10768 <console_out_nolock>
    console_out_nolock('[');
   1003a:	205b      	movs	r0, #91	; 0x5b
   1003c:	f000 fb94 	bl	10768 <console_out_nolock>
    console_out_nolock('K');
   10040:	204b      	movs	r0, #75	; 0x4b
   10042:	f000 fb91 	bl	10768 <console_out_nolock>
}
   10046:	b004      	add	sp, #16
   10048:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   1004a:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1004e:	9300      	str	r3, [sp, #0]
   10050:	2300      	movs	r3, #0
   10052:	9301      	str	r3, [sp, #4]
   10054:	9302      	str	r3, [sp, #8]
   10056:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1005a:	2900      	cmp	r1, #0
   1005c:	d0e5      	beq.n	1002a <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1005e:	466c      	mov	r4, sp
   10060:	2244      	movs	r2, #68	; 0x44
   10062:	f10d 0002 	add.w	r0, sp, #2
   10066:	f7ff fdaf 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1006a:	1b01      	subs	r1, r0, r4
   1006c:	4620      	mov	r0, r4
   1006e:	f7ff fe3f 	bl	fcf0 <console_write_nolock>
}
   10072:	e7da      	b.n	1002a <console_clear_line+0xa>
   10074:	20001aa4 	.word	0x20001aa4
   10078:	20001abe 	.word	0x20001abe

0001007c <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   1007c:	4b26      	ldr	r3, [pc, #152]	; (10118 <insert_char+0x9c>)
   1007e:	881b      	ldrh	r3, [r3, #0]
   10080:	4a26      	ldr	r2, [pc, #152]	; (1011c <insert_char+0xa0>)
   10082:	8812      	ldrh	r2, [r2, #0]
   10084:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   10086:	2bfe      	cmp	r3, #254	; 0xfe
   10088:	dc44      	bgt.n	10114 <insert_char+0x98>
{
   1008a:	b570      	push	{r4, r5, r6, lr}
   1008c:	b084      	sub	sp, #16
   1008e:	4604      	mov	r4, r0
   10090:	460e      	mov	r6, r1
    if (echo) {
   10092:	4b23      	ldr	r3, [pc, #140]	; (10120 <insert_char+0xa4>)
   10094:	681b      	ldr	r3, [r3, #0]
   10096:	b95b      	cbnz	r3, 100b0 <insert_char+0x34>
    ++cur;
   10098:	4a1f      	ldr	r2, [pc, #124]	; (10118 <insert_char+0x9c>)
   1009a:	8813      	ldrh	r3, [r2, #0]
   1009c:	3301      	adds	r3, #1
   1009e:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   100a0:	4b1e      	ldr	r3, [pc, #120]	; (1011c <insert_char+0xa0>)
   100a2:	881b      	ldrh	r3, [r3, #0]
   100a4:	b903      	cbnz	r3, 100a8 <insert_char+0x2c>
        *pos = c;
   100a6:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   100a8:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   100aa:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   100ae:	e00d      	b.n	100cc <insert_char+0x50>
        console_out_nolock(c);
   100b0:	4608      	mov	r0, r1
   100b2:	f000 fb59 	bl	10768 <console_out_nolock>
   100b6:	e7ef      	b.n	10098 <insert_char+0x1c>
            console_out_nolock(tmp);
   100b8:	4628      	mov	r0, r5
   100ba:	f000 fb55 	bl	10768 <console_out_nolock>
        c = *pos;
   100be:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   100c0:	4620      	mov	r0, r4
   100c2:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   100c6:	4633      	mov	r3, r6
        tmp = c;
   100c8:	4615      	mov	r5, r2
        *(pos++) = tmp;
   100ca:	4604      	mov	r4, r0
    while (end-- > 0) {
   100cc:	1e5e      	subs	r6, r3, #1
   100ce:	2b00      	cmp	r3, #0
   100d0:	dd04      	ble.n	100dc <insert_char+0x60>
        if (echo) {
   100d2:	4b13      	ldr	r3, [pc, #76]	; (10120 <insert_char+0xa4>)
   100d4:	681b      	ldr	r3, [r3, #0]
   100d6:	2b00      	cmp	r3, #0
   100d8:	d0f1      	beq.n	100be <insert_char+0x42>
   100da:	e7ed      	b.n	100b8 <insert_char+0x3c>
    if (echo) {
   100dc:	4b10      	ldr	r3, [pc, #64]	; (10120 <insert_char+0xa4>)
   100de:	681b      	ldr	r3, [r3, #0]
   100e0:	b90b      	cbnz	r3, 100e6 <insert_char+0x6a>
}
   100e2:	b004      	add	sp, #16
   100e4:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   100e6:	4b0d      	ldr	r3, [pc, #52]	; (1011c <insert_char+0xa0>)
   100e8:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   100ea:	f645 331b 	movw	r3, #23323	; 0x5b1b
   100ee:	9300      	str	r3, [sp, #0]
   100f0:	2300      	movs	r3, #0
   100f2:	9301      	str	r3, [sp, #4]
   100f4:	9302      	str	r3, [sp, #8]
   100f6:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   100fa:	2900      	cmp	r1, #0
   100fc:	d0f1      	beq.n	100e2 <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   100fe:	466c      	mov	r4, sp
   10100:	2244      	movs	r2, #68	; 0x44
   10102:	f10d 0002 	add.w	r0, sp, #2
   10106:	f7ff fd5f 	bl	fbc8 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1010a:	1b01      	subs	r1, r0, r4
   1010c:	4620      	mov	r0, r4
   1010e:	f7ff fdef 	bl	fcf0 <console_write_nolock>
}
   10112:	e7e6      	b.n	100e2 <insert_char+0x66>
   10114:	4770      	bx	lr
   10116:	bf00      	nop
   10118:	20001aa4 	.word	0x20001aa4
   1011c:	20001abe 	.word	0x20001abe
   10120:	20000228 	.word	0x20000228

00010124 <console_echo>:
    echo = on;
   10124:	4b01      	ldr	r3, [pc, #4]	; (1012c <console_echo+0x8>)
   10126:	6018      	str	r0, [r3, #0]
}
   10128:	4770      	bx	lr
   1012a:	bf00      	nop
   1012c:	20000228 	.word	0x20000228

00010130 <console_nlip_enable_echo>:
{
   10130:	b508      	push	{r3, lr}
    console_echo(1);
   10132:	2001      	movs	r0, #1
   10134:	f7ff fff6 	bl	10124 <console_echo>
}
   10138:	bd08      	pop	{r3, pc}

0001013a <console_nlip_disable_echo>:
{
   1013a:	b508      	push	{r3, lr}
    console_echo(0);
   1013c:	2000      	movs	r0, #0
   1013e:	f7ff fff1 	bl	10124 <console_echo>
}
   10142:	bd08      	pop	{r3, pc}

00010144 <handle_nlip>:
{
   10144:	b570      	push	{r4, r5, r6, lr}
   10146:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   10148:	4b3b      	ldr	r3, [pc, #236]	; (10238 <handle_nlip+0xf4>)
   1014a:	681b      	ldr	r3, [r3, #0]
   1014c:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   1014e:	4b3b      	ldr	r3, [pc, #236]	; (1023c <handle_nlip+0xf8>)
   10150:	681b      	ldr	r3, [r3, #0]
   10152:	3b04      	subs	r3, #4
   10154:	2b10      	cmp	r3, #16
   10156:	d852      	bhi.n	101fe <handle_nlip+0xba>
   10158:	e8df f003 	tbb	[pc, r3]
   1015c:	511f5138 	.word	0x511f5138
   10160:	51510951 	.word	0x51510951
   10164:	51515151 	.word	0x51515151
   10168:	51515151 	.word	0x51515151
   1016c:	09          	.byte	0x09
   1016d:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   1016e:	4b34      	ldr	r3, [pc, #208]	; (10240 <handle_nlip+0xfc>)
   10170:	8818      	ldrh	r0, [r3, #0]
   10172:	4621      	mov	r1, r4
   10174:	4428      	add	r0, r5
   10176:	f7ff ff81 	bl	1007c <insert_char>
        if (byte == '\n') {
   1017a:	2c0a      	cmp	r4, #10
   1017c:	d001      	beq.n	10182 <handle_nlip+0x3e>
    handled = 1;
   1017e:	2001      	movs	r0, #1
}
   10180:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   10182:	4b2f      	ldr	r3, [pc, #188]	; (10240 <handle_nlip+0xfc>)
   10184:	881b      	ldrh	r3, [r3, #0]
   10186:	2400      	movs	r4, #0
   10188:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   1018a:	f7ff ffd1 	bl	10130 <console_nlip_enable_echo>
            nlip_state = 0;
   1018e:	4b2b      	ldr	r3, [pc, #172]	; (1023c <handle_nlip+0xf8>)
   10190:	601c      	str	r4, [r3, #0]
            console_handle_line();
   10192:	f7ff fd3f 	bl	fc14 <console_handle_line>
    handled = 1;
   10196:	2001      	movs	r0, #1
   10198:	e7f2      	b.n	10180 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   1019a:	2809      	cmp	r0, #9
   1019c:	d005      	beq.n	101aa <handle_nlip+0x66>
            nlip_state = 0;
   1019e:	4b27      	ldr	r3, [pc, #156]	; (1023c <handle_nlip+0xf8>)
   101a0:	2200      	movs	r2, #0
   101a2:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   101a4:	4b27      	ldr	r3, [pc, #156]	; (10244 <handle_nlip+0x100>)
   101a6:	7818      	ldrb	r0, [r3, #0]
   101a8:	e7ea      	b.n	10180 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   101aa:	4b24      	ldr	r3, [pc, #144]	; (1023c <handle_nlip+0xf8>)
   101ac:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   101ae:	f7ff ffc4 	bl	1013a <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   101b2:	4e23      	ldr	r6, [pc, #140]	; (10240 <handle_nlip+0xfc>)
   101b4:	8830      	ldrh	r0, [r6, #0]
   101b6:	2106      	movs	r1, #6
   101b8:	4428      	add	r0, r5
   101ba:	f7ff ff5f 	bl	1007c <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   101be:	8830      	ldrh	r0, [r6, #0]
   101c0:	4621      	mov	r1, r4
   101c2:	4428      	add	r0, r5
   101c4:	f7ff ff5a 	bl	1007c <insert_char>
    handled = 1;
   101c8:	2001      	movs	r0, #1
   101ca:	e7d9      	b.n	10180 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   101cc:	2814      	cmp	r0, #20
   101ce:	d005      	beq.n	101dc <handle_nlip+0x98>
            nlip_state = 0;
   101d0:	4b1a      	ldr	r3, [pc, #104]	; (1023c <handle_nlip+0xf8>)
   101d2:	2200      	movs	r2, #0
   101d4:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   101d6:	4b1b      	ldr	r3, [pc, #108]	; (10244 <handle_nlip+0x100>)
   101d8:	7818      	ldrb	r0, [r3, #0]
   101da:	e7d1      	b.n	10180 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   101dc:	4b17      	ldr	r3, [pc, #92]	; (1023c <handle_nlip+0xf8>)
   101de:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   101e0:	f7ff ffab 	bl	1013a <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   101e4:	4e16      	ldr	r6, [pc, #88]	; (10240 <handle_nlip+0xfc>)
   101e6:	8830      	ldrh	r0, [r6, #0]
   101e8:	2104      	movs	r1, #4
   101ea:	4428      	add	r0, r5
   101ec:	f7ff ff46 	bl	1007c <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   101f0:	8830      	ldrh	r0, [r6, #0]
   101f2:	4621      	mov	r1, r4
   101f4:	4428      	add	r0, r5
   101f6:	f7ff ff41 	bl	1007c <insert_char>
    handled = 1;
   101fa:	2001      	movs	r0, #1
   101fc:	e7c0      	b.n	10180 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   101fe:	2804      	cmp	r0, #4
   10200:	d00a      	beq.n	10218 <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   10202:	2806      	cmp	r0, #6
   10204:	d00d      	beq.n	10222 <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   10206:	4b0f      	ldr	r3, [pc, #60]	; (10244 <handle_nlip+0x100>)
   10208:	781b      	ldrb	r3, [r3, #0]
   1020a:	b18b      	cbz	r3, 10230 <handle_nlip+0xec>
   1020c:	280d      	cmp	r0, #13
   1020e:	d011      	beq.n	10234 <handle_nlip+0xf0>
   10210:	280a      	cmp	r0, #10
   10212:	d00b      	beq.n	1022c <handle_nlip+0xe8>
   10214:	2001      	movs	r0, #1
    return handled;
   10216:	e7b3      	b.n	10180 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   10218:	4b08      	ldr	r3, [pc, #32]	; (1023c <handle_nlip+0xf8>)
   1021a:	2204      	movs	r2, #4
   1021c:	601a      	str	r2, [r3, #0]
    handled = 1;
   1021e:	2001      	movs	r0, #1
   10220:	e7ae      	b.n	10180 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   10222:	4b06      	ldr	r3, [pc, #24]	; (1023c <handle_nlip+0xf8>)
   10224:	2206      	movs	r2, #6
   10226:	601a      	str	r2, [r3, #0]
    handled = 1;
   10228:	2001      	movs	r0, #1
   1022a:	e7a9      	b.n	10180 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1022c:	2000      	movs	r0, #0
   1022e:	e7a7      	b.n	10180 <handle_nlip+0x3c>
   10230:	2000      	movs	r0, #0
   10232:	e7a5      	b.n	10180 <handle_nlip+0x3c>
   10234:	2000      	movs	r0, #0
   10236:	e7a3      	b.n	10180 <handle_nlip+0x3c>
   10238:	20001aa8 	.word	0x20001aa8
   1023c:	20001ab8 	.word	0x20001ab8
   10240:	20001aa4 	.word	0x20001aa4
   10244:	20001ab0 	.word	0x20001ab0

00010248 <console_lock>:
{
   10248:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1024a:	4b0a      	ldr	r3, [pc, #40]	; (10274 <console_lock+0x2c>)
   1024c:	685b      	ldr	r3, [r3, #4]
   1024e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   10252:	b133      	cbz	r3, 10262 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   10254:	4b08      	ldr	r3, [pc, #32]	; (10278 <console_lock+0x30>)
   10256:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   10258:	b90b      	cbnz	r3, 1025e <console_lock+0x16>
    int rc = OS_OK;
   1025a:	2000      	movs	r0, #0
   1025c:	e007      	b.n	1026e <console_lock+0x26>
            rc = OS_EBUSY;
   1025e:	200b      	movs	r0, #11
        goto end;
   10260:	e005      	b.n	1026e <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   10262:	4601      	mov	r1, r0
   10264:	4804      	ldr	r0, [pc, #16]	; (10278 <console_lock+0x30>)
   10266:	f7fe faa7 	bl	e7b8 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   1026a:	2809      	cmp	r0, #9
   1026c:	d000      	beq.n	10270 <console_lock+0x28>
}
   1026e:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   10270:	2000      	movs	r0, #0
    return rc;
   10272:	e7fc      	b.n	1026e <console_lock+0x26>
   10274:	e000ed00 	.word	0xe000ed00
   10278:	20001a98 	.word	0x20001a98

0001027c <console_unlock>:
{
   1027c:	b508      	push	{r3, lr}
   1027e:	4b0c      	ldr	r3, [pc, #48]	; (102b0 <console_unlock+0x34>)
   10280:	685b      	ldr	r3, [r3, #4]
   10282:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   10286:	b10b      	cbz	r3, 1028c <console_unlock+0x10>
    int rc = OS_OK;
   10288:	2000      	movs	r0, #0
}
   1028a:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   1028c:	4809      	ldr	r0, [pc, #36]	; (102b4 <console_unlock+0x38>)
   1028e:	f7fe fa33 	bl	e6f8 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   10292:	2800      	cmp	r0, #0
   10294:	d0f9      	beq.n	1028a <console_unlock+0xe>
   10296:	2809      	cmp	r0, #9
   10298:	d0f7      	beq.n	1028a <console_unlock+0xe>
   1029a:	f7fb ff7f 	bl	c19c <hal_debugger_connected>
   1029e:	b100      	cbz	r0, 102a2 <console_unlock+0x26>
   102a0:	be01      	bkpt	0x0001
   102a2:	2300      	movs	r3, #0
   102a4:	461a      	mov	r2, r3
   102a6:	4619      	mov	r1, r3
   102a8:	4618      	mov	r0, r3
   102aa:	f7fc fc7b 	bl	cba4 <__assert_func>
   102ae:	bf00      	nop
   102b0:	e000ed00 	.word	0xe000ed00
   102b4:	20001a98 	.word	0x20001a98

000102b8 <console_write>:
{
   102b8:	b538      	push	{r3, r4, r5, lr}
   102ba:	4605      	mov	r5, r0
   102bc:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   102be:	2080      	movs	r0, #128	; 0x80
   102c0:	f7ff ffc2 	bl	10248 <console_lock>
   102c4:	b9e0      	cbnz	r0, 10300 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   102c6:	2c01      	cmp	r4, #1
   102c8:	dd02      	ble.n	102d0 <console_write+0x18>
   102ca:	782b      	ldrb	r3, [r5, #0]
   102cc:	2b04      	cmp	r3, #4
   102ce:	d018      	beq.n	10302 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   102d0:	2c02      	cmp	r4, #2
   102d2:	dd02      	ble.n	102da <console_write+0x22>
   102d4:	786b      	ldrb	r3, [r5, #1]
   102d6:	2b06      	cmp	r3, #6
   102d8:	d01a      	beq.n	10310 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   102da:	4b13      	ldr	r3, [pc, #76]	; (10328 <console_write+0x70>)
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	b913      	cbnz	r3, 102e6 <console_write+0x2e>
   102e0:	4b12      	ldr	r3, [pc, #72]	; (1032c <console_write+0x74>)
   102e2:	781b      	ldrb	r3, [r3, #0]
   102e4:	b91b      	cbnz	r3, 102ee <console_write+0x36>
    console_filter_write(str, cnt);
   102e6:	4621      	mov	r1, r4
   102e8:	4628      	mov	r0, r5
   102ea:	f7ff fccf 	bl	fc8c <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   102ee:	2c00      	cmp	r4, #0
   102f0:	dd04      	ble.n	102fc <console_write+0x44>
   102f2:	1928      	adds	r0, r5, r4
   102f4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   102f8:	2b0a      	cmp	r3, #10
   102fa:	d010      	beq.n	1031e <console_write+0x66>
    (void)console_unlock();
   102fc:	f7ff ffbe 	bl	1027c <console_unlock>
}
   10300:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   10302:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   10304:	2b14      	cmp	r3, #20
   10306:	d1e3      	bne.n	102d0 <console_write+0x18>
        g_is_output_nlip = 1;
   10308:	4b07      	ldr	r3, [pc, #28]	; (10328 <console_write+0x70>)
   1030a:	2201      	movs	r2, #1
   1030c:	701a      	strb	r2, [r3, #0]
   1030e:	e7df      	b.n	102d0 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   10310:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   10312:	2b09      	cmp	r3, #9
   10314:	d1e1      	bne.n	102da <console_write+0x22>
        g_is_output_nlip = 1;
   10316:	4b04      	ldr	r3, [pc, #16]	; (10328 <console_write+0x70>)
   10318:	2201      	movs	r2, #1
   1031a:	701a      	strb	r2, [r3, #0]
   1031c:	e7dd      	b.n	102da <console_write+0x22>
        g_is_output_nlip = 0;
   1031e:	4b02      	ldr	r3, [pc, #8]	; (10328 <console_write+0x70>)
   10320:	2200      	movs	r2, #0
   10322:	701a      	strb	r2, [r3, #0]
   10324:	e7ea      	b.n	102fc <console_write+0x44>
   10326:	bf00      	nop
   10328:	20001ab3 	.word	0x20001ab3
   1032c:	20001ab2 	.word	0x20001ab2

00010330 <console_blocking_mode>:
{
   10330:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   10332:	f000 fa03 	bl	1073c <uart_console_blocking_mode>
}
   10336:	bd08      	pop	{r3, pc}

00010338 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   10338:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   1033a:	4b57      	ldr	r3, [pc, #348]	; (10498 <console_handle_char+0x160>)
   1033c:	681b      	ldr	r3, [r3, #0]
   1033e:	2b00      	cmp	r3, #0
   10340:	f000 80a5 	beq.w	1048e <console_handle_char+0x156>
   10344:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   10346:	4b55      	ldr	r3, [pc, #340]	; (1049c <console_handle_char+0x164>)
   10348:	681b      	ldr	r3, [r3, #0]
   1034a:	b14b      	cbz	r3, 10360 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   1034c:	4b53      	ldr	r3, [pc, #332]	; (1049c <console_handle_char+0x164>)
   1034e:	681b      	ldr	r3, [r3, #0]
   10350:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   10352:	4620      	mov	r0, r4
   10354:	f7ff fef6 	bl	10144 <handle_nlip>
   10358:	b178      	cbz	r0, 1037a <console_handle_char+0x42>
        return 0;
   1035a:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   1035c:	4628      	mov	r0, r5
   1035e:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   10360:	484f      	ldr	r0, [pc, #316]	; (104a0 <console_handle_char+0x168>)
   10362:	f7fc ff8a 	bl	d27a <os_eventq_get_no_wait>
   10366:	4b4d      	ldr	r3, [pc, #308]	; (1049c <console_handle_char+0x164>)
   10368:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   1036a:	2800      	cmp	r0, #0
   1036c:	d1ee      	bne.n	1034c <console_handle_char+0x14>
            rx_stalled = true;
   1036e:	4b4d      	ldr	r3, [pc, #308]	; (104a4 <console_handle_char+0x16c>)
   10370:	2201      	movs	r2, #1
   10372:	701a      	strb	r2, [r3, #0]
            return -1;
   10374:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10378:	e7f0      	b.n	1035c <console_handle_char+0x24>
    if (console_lock(1000)) {
   1037a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1037e:	f7ff ff63 	bl	10248 <console_lock>
   10382:	4605      	mov	r5, r0
   10384:	2800      	cmp	r0, #0
   10386:	f040 8084 	bne.w	10492 <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   1038a:	4b47      	ldr	r3, [pc, #284]	; (104a8 <console_handle_char+0x170>)
   1038c:	681b      	ldr	r3, [r3, #0]
   1038e:	f013 0f02 	tst.w	r3, #2
   10392:	d120      	bne.n	103d6 <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   10394:	f013 0f01 	tst.w	r3, #1
   10398:	d122      	bne.n	103e0 <console_handle_char+0xa8>
   1039a:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   1039e:	2b5e      	cmp	r3, #94	; 0x5e
   103a0:	d96c      	bls.n	1047c <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   103a2:	4631      	mov	r1, r6
   103a4:	4620      	mov	r0, r4
   103a6:	f7ff fd47 	bl	fe38 <handle_ansi>
        switch (byte) {
   103aa:	2c1b      	cmp	r4, #27
   103ac:	d828      	bhi.n	10400 <console_handle_char+0xc8>
   103ae:	2c03      	cmp	r4, #3
   103b0:	d332      	bcc.n	10418 <console_handle_char+0xe0>
   103b2:	1ee3      	subs	r3, r4, #3
   103b4:	2b18      	cmp	r3, #24
   103b6:	d82f      	bhi.n	10418 <console_handle_char+0xe0>
   103b8:	e8df f003 	tbb	[pc, r3]
   103bc:	2e2e2e59 	.word	0x2e2e2e59
   103c0:	344f242e 	.word	0x344f242e
   103c4:	2e345c2e 	.word	0x2e345c2e
   103c8:	2e2e2e2e 	.word	0x2e2e2e2e
   103cc:	2e2e2e2e 	.word	0x2e2e2e2e
   103d0:	2e2e2e2e 	.word	0x2e2e2e2e
   103d4:	28          	.byte	0x28
   103d5:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   103d6:	4631      	mov	r1, r6
   103d8:	4620      	mov	r0, r4
   103da:	f7ff fd2d 	bl	fe38 <handle_ansi>
        goto unlock;
   103de:	e053      	b.n	10488 <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   103e0:	f023 0301 	bic.w	r3, r3, #1
   103e4:	4a30      	ldr	r2, [pc, #192]	; (104a8 <console_handle_char+0x170>)
   103e6:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   103e8:	4631      	mov	r1, r6
   103ea:	4620      	mov	r0, r4
   103ec:	f7ff fd24 	bl	fe38 <handle_ansi>
        switch (byte) {
   103f0:	2c5b      	cmp	r4, #91	; 0x5b
   103f2:	d149      	bne.n	10488 <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   103f4:	4a2c      	ldr	r2, [pc, #176]	; (104a8 <console_handle_char+0x170>)
   103f6:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   103f8:	f043 0306 	orr.w	r3, r3, #6
   103fc:	6013      	str	r3, [r2, #0]
        goto unlock;
   103fe:	e043      	b.n	10488 <console_handle_char+0x150>
        switch (byte) {
   10400:	2c7f      	cmp	r4, #127	; 0x7f
   10402:	d109      	bne.n	10418 <console_handle_char+0xe0>
            handle_backspace(input->line);
   10404:	4630      	mov	r0, r6
   10406:	f7ff fddf 	bl	ffc8 <handle_backspace>
            break;
   1040a:	e03d      	b.n	10488 <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   1040c:	4a26      	ldr	r2, [pc, #152]	; (104a8 <console_handle_char+0x170>)
   1040e:	6813      	ldr	r3, [r2, #0]
   10410:	f043 0301 	orr.w	r3, r3, #1
   10414:	6013      	str	r3, [r2, #0]
            break;
   10416:	e037      	b.n	10488 <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   10418:	4b24      	ldr	r3, [pc, #144]	; (104ac <console_handle_char+0x174>)
   1041a:	8818      	ldrh	r0, [r3, #0]
   1041c:	4621      	mov	r1, r4
   1041e:	4430      	add	r0, r6
   10420:	f7ff fe2c 	bl	1007c <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   10424:	2c0a      	cmp	r4, #10
   10426:	d103      	bne.n	10430 <console_handle_char+0xf8>
   10428:	4b21      	ldr	r3, [pc, #132]	; (104b0 <console_handle_char+0x178>)
   1042a:	781b      	ldrb	r3, [r3, #0]
   1042c:	2b0d      	cmp	r3, #13
   1042e:	d011      	beq.n	10454 <console_handle_char+0x11c>
            prev_endl = byte;
   10430:	4b1f      	ldr	r3, [pc, #124]	; (104b0 <console_handle_char+0x178>)
   10432:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   10434:	4b1d      	ldr	r3, [pc, #116]	; (104ac <console_handle_char+0x174>)
   10436:	881b      	ldrh	r3, [r3, #0]
   10438:	4a1e      	ldr	r2, [pc, #120]	; (104b4 <console_handle_char+0x17c>)
   1043a:	8812      	ldrh	r2, [r2, #0]
   1043c:	4413      	add	r3, r2
   1043e:	2200      	movs	r2, #0
   10440:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   10442:	200d      	movs	r0, #13
   10444:	f7ff fc04 	bl	fc50 <console_filter_out>
                console_filter_out('\n');
   10448:	200a      	movs	r0, #10
   1044a:	f7ff fc01 	bl	fc50 <console_filter_out>
            console_handle_line();
   1044e:	f7ff fbe1 	bl	fc14 <console_handle_line>
            break;
   10452:	e019      	b.n	10488 <console_handle_char+0x150>
                prev_endl = byte;
   10454:	4b16      	ldr	r3, [pc, #88]	; (104b0 <console_handle_char+0x178>)
   10456:	701c      	strb	r4, [r3, #0]
                break;
   10458:	e016      	b.n	10488 <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   1045a:	4b17      	ldr	r3, [pc, #92]	; (104b8 <console_handle_char+0x180>)
   1045c:	681b      	ldr	r3, [r3, #0]
   1045e:	b19b      	cbz	r3, 10488 <console_handle_char+0x150>
   10460:	4a14      	ldr	r2, [pc, #80]	; (104b4 <console_handle_char+0x17c>)
   10462:	8812      	ldrh	r2, [r2, #0]
   10464:	b982      	cbnz	r2, 10488 <console_handle_char+0x150>
                completion(input->line, console_append_char);
   10466:	4915      	ldr	r1, [pc, #84]	; (104bc <console_handle_char+0x184>)
   10468:	4630      	mov	r0, r6
   1046a:	4798      	blx	r3
                console_switch_to_prompt();
   1046c:	e00c      	b.n	10488 <console_handle_char+0x150>
            console_clear_line();
   1046e:	f7ff fdd7 	bl	10020 <console_clear_line>
            break;
   10472:	e009      	b.n	10488 <console_handle_char+0x150>
                console_out_nolock(VT);
   10474:	200c      	movs	r0, #12
   10476:	f000 f977 	bl	10768 <console_out_nolock>
            break;
   1047a:	e005      	b.n	10488 <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   1047c:	4b0b      	ldr	r3, [pc, #44]	; (104ac <console_handle_char+0x174>)
   1047e:	8818      	ldrh	r0, [r3, #0]
   10480:	4621      	mov	r1, r4
   10482:	4430      	add	r0, r6
   10484:	f7ff fdfa 	bl	1007c <insert_char>
    (void)console_unlock();
   10488:	f7ff fef8 	bl	1027c <console_unlock>
    return 0;
   1048c:	e766      	b.n	1035c <console_handle_char+0x24>
        return 0;
   1048e:	2500      	movs	r5, #0
   10490:	e764      	b.n	1035c <console_handle_char+0x24>
        return -1;
   10492:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10496:	e761      	b.n	1035c <console_handle_char+0x24>
   10498:	20001ab4 	.word	0x20001ab4
   1049c:	20001aa8 	.word	0x20001aa8
   104a0:	20001a7c 	.word	0x20001a7c
   104a4:	20001abd 	.word	0x20001abd
   104a8:	20001aac 	.word	0x20001aac
   104ac:	20001aa4 	.word	0x20001aa4
   104b0:	20001abc 	.word	0x20001abc
   104b4:	20001abe 	.word	0x20001abe
   104b8:	20001a8c 	.word	0x20001a8c
   104bc:	0000fcad 	.word	0x0000fcad

000104c0 <console_is_init>:

int
console_is_init(void)
{
   104c0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   104c2:	f000 f96d 	bl	107a0 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   104c6:	bd08      	pop	{r3, pc}

000104c8 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   104c8:	b510      	push	{r4, lr}
   104ca:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   104cc:	4b12      	ldr	r3, [pc, #72]	; (10518 <console_pkg_init+0x50>)
   104ce:	781b      	ldrb	r3, [r3, #0]
   104d0:	b153      	cbz	r3, 104e8 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   104d2:	4812      	ldr	r0, [pc, #72]	; (1051c <console_pkg_init+0x54>)
   104d4:	f7fc fe8c 	bl	d1f0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   104d8:	4811      	ldr	r0, [pc, #68]	; (10520 <console_pkg_init+0x58>)
   104da:	f7fe f903 	bl	e6e4 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   104de:	f000 f967 	bl	107b0 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   104e2:	b958      	cbnz	r0, 104fc <console_pkg_init+0x34>
}
   104e4:	b002      	add	sp, #8
   104e6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   104e8:	f7fb fe58 	bl	c19c <hal_debugger_connected>
   104ec:	b100      	cbz	r0, 104f0 <console_pkg_init+0x28>
   104ee:	be01      	bkpt	0x0001
   104f0:	2300      	movs	r3, #0
   104f2:	461a      	mov	r2, r3
   104f4:	4619      	mov	r1, r3
   104f6:	4618      	mov	r0, r3
   104f8:	f7fc fb54 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   104fc:	f7fb fe4e 	bl	c19c <hal_debugger_connected>
   10500:	b100      	cbz	r0, 10504 <console_pkg_init+0x3c>
   10502:	be01      	bkpt	0x0001
   10504:	2000      	movs	r0, #0
   10506:	9000      	str	r0, [sp, #0]
   10508:	4b06      	ldr	r3, [pc, #24]	; (10524 <console_pkg_init+0x5c>)
   1050a:	681c      	ldr	r4, [r3, #0]
   1050c:	4603      	mov	r3, r0
   1050e:	4602      	mov	r2, r0
   10510:	4601      	mov	r1, r0
   10512:	47a0      	blx	r4
}
   10514:	e7e6      	b.n	104e4 <console_pkg_init+0x1c>
   10516:	bf00      	nop
   10518:	20001e3c 	.word	0x20001e3c
   1051c:	20001a7c 	.word	0x20001a7c
   10520:	20001a98 	.word	0x20001a98
   10524:	2000028c 	.word	0x2000028c

00010528 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   10528:	b570      	push	{r4, r5, r6, lr}
   1052a:	4604      	mov	r4, r0
   1052c:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1052e:	f000 f827 	bl	10580 <console_get_ticks>
   10532:	b160      	cbz	r0, 1054e <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   10534:	4b09      	ldr	r3, [pc, #36]	; (1055c <console_vprintf+0x34>)
   10536:	681b      	ldr	r3, [r3, #0]
   10538:	b10b      	cbz	r3, 1053e <console_vprintf+0x16>
    num_chars = 0;
   1053a:	2600      	movs	r6, #0
   1053c:	e008      	b.n	10550 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1053e:	f7fd ff3d 	bl	e3bc <os_time_get>
   10542:	4601      	mov	r1, r0
   10544:	4806      	ldr	r0, [pc, #24]	; (10560 <console_vprintf+0x38>)
   10546:	f01b f911 	bl	2b76c <printf>
   1054a:	4606      	mov	r6, r0
   1054c:	e000      	b.n	10550 <console_vprintf+0x28>
    num_chars = 0;
   1054e:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   10550:	4629      	mov	r1, r5
   10552:	4620      	mov	r0, r4
   10554:	f01b f948 	bl	2b7e8 <vprintf>

    return num_chars;
}
   10558:	4430      	add	r0, r6
   1055a:	bd70      	pop	{r4, r5, r6, pc}
   1055c:	20001a94 	.word	0x20001a94
   10560:	0002d94c 	.word	0x0002d94c

00010564 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   10564:	b40f      	push	{r0, r1, r2, r3}
   10566:	b500      	push	{lr}
   10568:	b083      	sub	sp, #12
   1056a:	a904      	add	r1, sp, #16
   1056c:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   10570:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   10572:	f7ff ffd9 	bl	10528 <console_vprintf>
    va_end(args);

    return num_chars;
}
   10576:	b003      	add	sp, #12
   10578:	f85d eb04 	ldr.w	lr, [sp], #4
   1057c:	b004      	add	sp, #16
   1057e:	4770      	bx	lr

00010580 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   10580:	4b01      	ldr	r3, [pc, #4]	; (10588 <console_get_ticks+0x8>)
   10582:	7818      	ldrb	r0, [r3, #0]
   10584:	4770      	bx	lr
   10586:	bf00      	nop
   10588:	2000022c 	.word	0x2000022c

0001058c <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   1058c:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1058e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   10590:	4798      	blx	r3
}
   10592:	bd08      	pop	{r3, pc}

00010594 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   10594:	6842      	ldr	r2, [r0, #4]
   10596:	7803      	ldrb	r3, [r0, #0]
   10598:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   1059a:	7803      	ldrb	r3, [r0, #0]
   1059c:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1059e:	3301      	adds	r3, #1
   105a0:	3a01      	subs	r2, #1
   105a2:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   105a4:	7003      	strb	r3, [r0, #0]
}
   105a6:	4770      	bx	lr

000105a8 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   105a8:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   105aa:	6841      	ldr	r1, [r0, #4]
   105ac:	7842      	ldrb	r2, [r0, #1]
   105ae:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   105b0:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   105b2:	3201      	adds	r2, #1
   105b4:	3901      	subs	r1, #1
   105b6:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   105b8:	705a      	strb	r2, [r3, #1]
    return ch;
}
   105ba:	4770      	bx	lr

000105bc <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   105bc:	7803      	ldrb	r3, [r0, #0]
   105be:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   105c0:	3301      	adds	r3, #1
   105c2:	3a01      	subs	r2, #1
   105c4:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   105c6:	7840      	ldrb	r0, [r0, #1]
}
   105c8:	4298      	cmp	r0, r3
   105ca:	bf14      	ite	ne
   105cc:	2000      	movne	r0, #0
   105ce:	2001      	moveq	r0, #1
   105d0:	4770      	bx	lr

000105d2 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   105d2:	7802      	ldrb	r2, [r0, #0]
   105d4:	7840      	ldrb	r0, [r0, #1]
}
   105d6:	4282      	cmp	r2, r0
   105d8:	bf14      	ite	ne
   105da:	2000      	movne	r0, #0
   105dc:	2001      	moveq	r0, #1
   105de:	4770      	bx	lr

000105e0 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   105e0:	b538      	push	{r3, r4, r5, lr}
   105e2:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   105e4:	2400      	movs	r4, #0
   105e6:	42ac      	cmp	r4, r5
   105e8:	da0d      	bge.n	10606 <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   105ea:	4807      	ldr	r0, [pc, #28]	; (10608 <uart_console_tx_flush+0x28>)
   105ec:	f7ff fff1 	bl	105d2 <uart_console_ring_is_empty>
   105f0:	b948      	cbnz	r0, 10606 <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   105f2:	4805      	ldr	r0, [pc, #20]	; (10608 <uart_console_tx_flush+0x28>)
   105f4:	f7ff ffd8 	bl	105a8 <uart_console_ring_pull_char>
   105f8:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   105fa:	4b04      	ldr	r3, [pc, #16]	; (1060c <uart_console_tx_flush+0x2c>)
   105fc:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   105fe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   10600:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   10602:	3401      	adds	r4, #1
   10604:	e7ef      	b.n	105e6 <uart_console_tx_flush+0x6>
    }
}
   10606:	bd38      	pop	{r3, r4, r5, pc}
   10608:	20001ae8 	.word	0x20001ae8
   1060c:	20001b24 	.word	0x20001b24

00010610 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   10610:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   10612:	4805      	ldr	r0, [pc, #20]	; (10628 <uart_console_tx_char+0x18>)
   10614:	f7ff ffdd 	bl	105d2 <uart_console_ring_is_empty>
   10618:	b918      	cbnz	r0, 10622 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   1061a:	4803      	ldr	r0, [pc, #12]	; (10628 <uart_console_tx_char+0x18>)
   1061c:	f7ff ffc4 	bl	105a8 <uart_console_ring_pull_char>
}
   10620:	bd08      	pop	{r3, pc}
        return -1;
   10622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10626:	e7fb      	b.n	10620 <uart_console_tx_char+0x10>
   10628:	20001ae8 	.word	0x20001ae8

0001062c <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   1062c:	7ec3      	ldrb	r3, [r0, #27]
   1062e:	f003 0306 	and.w	r3, r3, #6
   10632:	2b02      	cmp	r3, #2
   10634:	d000      	beq.n	10638 <uart_console_queue_char+0xc>
   10636:	4770      	bx	lr
{
   10638:	b570      	push	{r4, r5, r6, lr}
   1063a:	4605      	mov	r5, r0
   1063c:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   1063e:	f7fd ff83 	bl	e548 <os_arch_save_sr>
   10642:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   10644:	e005      	b.n	10652 <uart_console_queue_char+0x26>
            os_time_delay(1);
   10646:	2001      	movs	r0, #1
   10648:	f7fd fee4 	bl	e414 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   1064c:	f7fd ff7c 	bl	e548 <os_arch_save_sr>
   10650:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   10652:	480b      	ldr	r0, [pc, #44]	; (10680 <uart_console_queue_char+0x54>)
   10654:	f7ff ffb2 	bl	105bc <uart_console_ring_is_full>
   10658:	b150      	cbz	r0, 10670 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   1065a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1065c:	4628      	mov	r0, r5
   1065e:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   10660:	4620      	mov	r0, r4
   10662:	f7fd ff77 	bl	e554 <os_arch_restore_sr>
        if (os_started()) {
   10666:	f7fc fb5d 	bl	cd24 <os_started>
   1066a:	2800      	cmp	r0, #0
   1066c:	d0ee      	beq.n	1064c <uart_console_queue_char+0x20>
   1066e:	e7ea      	b.n	10646 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   10670:	4631      	mov	r1, r6
   10672:	4803      	ldr	r0, [pc, #12]	; (10680 <uart_console_queue_char+0x54>)
   10674:	f7ff ff8e 	bl	10594 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   10678:	4620      	mov	r0, r4
   1067a:	f7fd ff6b 	bl	e554 <os_arch_restore_sr>
}
   1067e:	bd70      	pop	{r4, r5, r6, pc}
   10680:	20001ae8 	.word	0x20001ae8

00010684 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   10684:	b510      	push	{r4, lr}
   10686:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   10688:	480c      	ldr	r0, [pc, #48]	; (106bc <uart_console_rx_char+0x38>)
   1068a:	f7ff ff97 	bl	105bc <uart_console_ring_is_full>
   1068e:	b940      	cbnz	r0, 106a2 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   10690:	4621      	mov	r1, r4
   10692:	480a      	ldr	r0, [pc, #40]	; (106bc <uart_console_rx_char+0x38>)
   10694:	f7ff ff7e 	bl	10594 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   10698:	4b09      	ldr	r3, [pc, #36]	; (106c0 <uart_console_rx_char+0x3c>)
   1069a:	781b      	ldrb	r3, [r3, #0]
   1069c:	b13b      	cbz	r3, 106ae <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   1069e:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   106a0:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   106a2:	4b08      	ldr	r3, [pc, #32]	; (106c4 <uart_console_rx_char+0x40>)
   106a4:	2201      	movs	r2, #1
   106a6:	701a      	strb	r2, [r3, #0]
        return -1;
   106a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106ac:	e7f8      	b.n	106a0 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   106ae:	f7fc fe65 	bl	d37c <os_eventq_dflt_get>
   106b2:	4903      	ldr	r1, [pc, #12]	; (106c0 <uart_console_rx_char+0x3c>)
   106b4:	f7fc fda9 	bl	d20a <os_eventq_put>
    return 0;
   106b8:	2000      	movs	r0, #0
   106ba:	e7f1      	b.n	106a0 <uart_console_rx_char+0x1c>
   106bc:	20001ac0 	.word	0x20001ac0
   106c0:	20001b10 	.word	0x20001b10
   106c4:	20001b20 	.word	0x20001b20

000106c8 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   106c8:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   106ca:	4b18      	ldr	r3, [pc, #96]	; (1072c <uart_console_rx_char_event+0x64>)
   106cc:	6818      	ldr	r0, [r3, #0]
   106ce:	2800      	cmp	r0, #0
   106d0:	db0b      	blt.n	106ea <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   106d2:	b2c0      	uxtb	r0, r0
   106d4:	f7ff fe30 	bl	10338 <console_handle_char>
        if (ret < 0) {
   106d8:	2800      	cmp	r0, #0
   106da:	da06      	bge.n	106ea <uart_console_rx_char_event+0x22>
   106dc:	e024      	b.n	10728 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   106de:	4b13      	ldr	r3, [pc, #76]	; (1072c <uart_console_rx_char_event+0x64>)
   106e0:	7818      	ldrb	r0, [r3, #0]
   106e2:	f7ff fe29 	bl	10338 <console_handle_char>
        if (ret < 0) {
   106e6:	2800      	cmp	r0, #0
   106e8:	db1e      	blt.n	10728 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   106ea:	4811      	ldr	r0, [pc, #68]	; (10730 <uart_console_rx_char_event+0x68>)
   106ec:	f7ff ff71 	bl	105d2 <uart_console_ring_is_empty>
   106f0:	b9b0      	cbnz	r0, 10720 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   106f2:	f7fd ff29 	bl	e548 <os_arch_save_sr>
   106f6:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   106f8:	480d      	ldr	r0, [pc, #52]	; (10730 <uart_console_rx_char_event+0x68>)
   106fa:	f7ff ff55 	bl	105a8 <uart_console_ring_pull_char>
   106fe:	4b0b      	ldr	r3, [pc, #44]	; (1072c <uart_console_rx_char_event+0x64>)
   10700:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   10702:	4620      	mov	r0, r4
   10704:	f7fd ff26 	bl	e554 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   10708:	4b0a      	ldr	r3, [pc, #40]	; (10734 <uart_console_rx_char_event+0x6c>)
   1070a:	781b      	ldrb	r3, [r3, #0]
   1070c:	2b00      	cmp	r3, #0
   1070e:	d0e6      	beq.n	106de <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   10710:	4b08      	ldr	r3, [pc, #32]	; (10734 <uart_console_rx_char_event+0x6c>)
   10712:	2200      	movs	r2, #0
   10714:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   10716:	4b08      	ldr	r3, [pc, #32]	; (10738 <uart_console_rx_char_event+0x70>)
   10718:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   1071a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1071c:	4798      	blx	r3
}
   1071e:	e7de      	b.n	106de <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   10720:	4b02      	ldr	r3, [pc, #8]	; (1072c <uart_console_rx_char_event+0x64>)
   10722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10726:	601a      	str	r2, [r3, #0]
}
   10728:	bd10      	pop	{r4, pc}
   1072a:	bf00      	nop
   1072c:	20000230 	.word	0x20000230
   10730:	20001ac0 	.word	0x20001ac0
   10734:	20001b20 	.word	0x20001b20
   10738:	20001b24 	.word	0x20001b24

0001073c <uart_console_blocking_mode>:
{
   1073c:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1073e:	f7fd ff03 	bl	e548 <os_arch_save_sr>
   10742:	4604      	mov	r4, r0
    if (write_char_cb) {
   10744:	4b06      	ldr	r3, [pc, #24]	; (10760 <uart_console_blocking_mode+0x24>)
   10746:	681b      	ldr	r3, [r3, #0]
   10748:	b12b      	cbz	r3, 10756 <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   1074a:	4b05      	ldr	r3, [pc, #20]	; (10760 <uart_console_blocking_mode+0x24>)
   1074c:	4a05      	ldr	r2, [pc, #20]	; (10764 <uart_console_blocking_mode+0x28>)
   1074e:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   10750:	2020      	movs	r0, #32
   10752:	f7ff ff45 	bl	105e0 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   10756:	4620      	mov	r0, r4
   10758:	f7fd fefc 	bl	e554 <os_arch_restore_sr>
}
   1075c:	bd10      	pop	{r4, pc}
   1075e:	bf00      	nop
   10760:	20001b28 	.word	0x20001b28
   10764:	0001058d 	.word	0x0001058d

00010768 <console_out_nolock>:
{
   10768:	b538      	push	{r3, r4, r5, lr}
   1076a:	4604      	mov	r4, r0
    if (!write_char_cb) {
   1076c:	4b0a      	ldr	r3, [pc, #40]	; (10798 <console_out_nolock+0x30>)
   1076e:	681b      	ldr	r3, [r3, #0]
   10770:	b153      	cbz	r3, 10788 <console_out_nolock+0x20>
    if ('\n' == c) {
   10772:	280a      	cmp	r0, #10
   10774:	d00a      	beq.n	1078c <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   10776:	4d09      	ldr	r5, [pc, #36]	; (1079c <console_out_nolock+0x34>)
   10778:	4b07      	ldr	r3, [pc, #28]	; (10798 <console_out_nolock+0x30>)
   1077a:	681b      	ldr	r3, [r3, #0]
   1077c:	b2e1      	uxtb	r1, r4
   1077e:	6828      	ldr	r0, [r5, #0]
   10780:	4798      	blx	r3
    uart_start_tx(uart_dev);
   10782:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   10784:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10786:	4798      	blx	r3
}
   10788:	4620      	mov	r0, r4
   1078a:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   1078c:	210d      	movs	r1, #13
   1078e:	4a03      	ldr	r2, [pc, #12]	; (1079c <console_out_nolock+0x34>)
   10790:	6810      	ldr	r0, [r2, #0]
   10792:	4798      	blx	r3
   10794:	e7ef      	b.n	10776 <console_out_nolock+0xe>
   10796:	bf00      	nop
   10798:	20001b28 	.word	0x20001b28
   1079c:	20001b24 	.word	0x20001b24

000107a0 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   107a0:	4b02      	ldr	r3, [pc, #8]	; (107ac <uart_console_is_init+0xc>)
   107a2:	6818      	ldr	r0, [r3, #0]
}
   107a4:	3800      	subs	r0, #0
   107a6:	bf18      	it	ne
   107a8:	2001      	movne	r0, #1
   107aa:	4770      	bx	lr
   107ac:	20001b24 	.word	0x20001b24

000107b0 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   107b0:	b500      	push	{lr}
   107b2:	b087      	sub	sp, #28
    struct uart_conf uc = {
   107b4:	2300      	movs	r3, #0
   107b6:	9301      	str	r3, [sp, #4]
   107b8:	9304      	str	r3, [sp, #16]
   107ba:	9305      	str	r3, [sp, #20]
   107bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   107c0:	9300      	str	r3, [sp, #0]
   107c2:	2308      	movs	r3, #8
   107c4:	f88d 3004 	strb.w	r3, [sp, #4]
   107c8:	2301      	movs	r3, #1
   107ca:	f88d 3005 	strb.w	r3, [sp, #5]
   107ce:	4b14      	ldr	r3, [pc, #80]	; (10820 <uart_console_init+0x70>)
   107d0:	9302      	str	r3, [sp, #8]
   107d2:	4b14      	ldr	r3, [pc, #80]	; (10824 <uart_console_init+0x74>)
   107d4:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   107d6:	4b14      	ldr	r3, [pc, #80]	; (10828 <uart_console_init+0x78>)
   107d8:	2220      	movs	r2, #32
   107da:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   107dc:	4913      	ldr	r1, [pc, #76]	; (1082c <uart_console_init+0x7c>)
   107de:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   107e0:	4b13      	ldr	r3, [pc, #76]	; (10830 <uart_console_init+0x80>)
   107e2:	4914      	ldr	r1, [pc, #80]	; (10834 <uart_console_init+0x84>)
   107e4:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   107e6:	4b14      	ldr	r3, [pc, #80]	; (10838 <uart_console_init+0x88>)
   107e8:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   107ea:	4a14      	ldr	r2, [pc, #80]	; (1083c <uart_console_init+0x8c>)
   107ec:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   107ee:	4b14      	ldr	r3, [pc, #80]	; (10840 <uart_console_init+0x90>)
   107f0:	4a14      	ldr	r2, [pc, #80]	; (10844 <uart_console_init+0x94>)
   107f2:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   107f4:	4b14      	ldr	r3, [pc, #80]	; (10848 <uart_console_init+0x98>)
   107f6:	681b      	ldr	r3, [r3, #0]
   107f8:	b11b      	cbz	r3, 10802 <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   107fa:	2000      	movs	r0, #0
}
   107fc:	b007      	add	sp, #28
   107fe:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   10802:	466a      	mov	r2, sp
   10804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10808:	4810      	ldr	r0, [pc, #64]	; (1084c <uart_console_init+0x9c>)
   1080a:	f7fc fcc7 	bl	d19c <os_dev_open>
   1080e:	4b0e      	ldr	r3, [pc, #56]	; (10848 <uart_console_init+0x98>)
   10810:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   10812:	b108      	cbz	r0, 10818 <uart_console_init+0x68>
    return 0;
   10814:	2000      	movs	r0, #0
   10816:	e7f1      	b.n	107fc <uart_console_init+0x4c>
            return -1;
   10818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1081c:	e7ee      	b.n	107fc <uart_console_init+0x4c>
   1081e:	bf00      	nop
   10820:	00010611 	.word	0x00010611
   10824:	00010685 	.word	0x00010685
   10828:	20001ae8 	.word	0x20001ae8
   1082c:	20001af0 	.word	0x20001af0
   10830:	20001b28 	.word	0x20001b28
   10834:	0001062d 	.word	0x0001062d
   10838:	20001ac0 	.word	0x20001ac0
   1083c:	20001ac8 	.word	0x20001ac8
   10840:	20001b10 	.word	0x20001b10
   10844:	000106c9 	.word	0x000106c9
   10848:	20001b24 	.word	0x20001b24
   1084c:	0002d954 	.word	0x0002d954

00010850 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   10850:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   10852:	4b0b      	ldr	r3, [pc, #44]	; (10880 <flash_area_find_idx+0x30>)
   10854:	6819      	ldr	r1, [r3, #0]
   10856:	b179      	cbz	r1, 10878 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   10858:	2000      	movs	r0, #0
   1085a:	4b0a      	ldr	r3, [pc, #40]	; (10884 <flash_area_find_idx+0x34>)
   1085c:	681b      	ldr	r3, [r3, #0]
   1085e:	4283      	cmp	r3, r0
   10860:	dd07      	ble.n	10872 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   10862:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10866:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   1086a:	4293      	cmp	r3, r2
   1086c:	d006      	beq.n	1087c <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   1086e:	3001      	adds	r0, #1
   10870:	e7f3      	b.n	1085a <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   10872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10876:	4770      	bx	lr
        return -1;
   10878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1087c:	4770      	bx	lr
   1087e:	bf00      	nop
   10880:	20001b2c 	.word	0x20001b2c
   10884:	20001b30 	.word	0x20001b30

00010888 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   10888:	2300      	movs	r3, #0
   1088a:	4a13      	ldr	r2, [pc, #76]	; (108d8 <flash_map_area_overlaps+0x50>)
   1088c:	6812      	ldr	r2, [r2, #0]
   1088e:	429a      	cmp	r2, r3
   10890:	dd1f      	ble.n	108d2 <flash_map_area_overlaps+0x4a>
{
   10892:	b430      	push	{r4, r5}
   10894:	e004      	b.n	108a0 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   10896:	3301      	adds	r3, #1
   10898:	4a0f      	ldr	r2, [pc, #60]	; (108d8 <flash_map_area_overlaps+0x50>)
   1089a:	6812      	ldr	r2, [r2, #0]
   1089c:	429a      	cmp	r2, r3
   1089e:	dd15      	ble.n	108cc <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   108a0:	4a0e      	ldr	r2, [pc, #56]	; (108dc <flash_map_area_overlaps+0x54>)
   108a2:	6812      	ldr	r2, [r2, #0]
   108a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   108a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   108ac:	7844      	ldrb	r4, [r0, #1]
   108ae:	7851      	ldrb	r1, [r2, #1]
   108b0:	428c      	cmp	r4, r1
   108b2:	d1f0      	bne.n	10896 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   108b4:	6845      	ldr	r5, [r0, #4]
   108b6:	6881      	ldr	r1, [r0, #8]
   108b8:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   108ba:	6854      	ldr	r4, [r2, #4]
   108bc:	6892      	ldr	r2, [r2, #8]
   108be:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   108c0:	428c      	cmp	r4, r1
   108c2:	d2e8      	bcs.n	10896 <flash_map_area_overlaps+0xe>
   108c4:	4295      	cmp	r5, r2
   108c6:	d2e6      	bcs.n	10896 <flash_map_area_overlaps+0xe>
                return true;
   108c8:	2001      	movs	r0, #1
   108ca:	e000      	b.n	108ce <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   108cc:	2000      	movs	r0, #0
}
   108ce:	bc30      	pop	{r4, r5}
   108d0:	4770      	bx	lr
    return false;
   108d2:	2000      	movs	r0, #0
}
   108d4:	4770      	bx	lr
   108d6:	bf00      	nop
   108d8:	20001b30 	.word	0x20001b30
   108dc:	20001b2c 	.word	0x20001b2c

000108e0 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   108e0:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   108e2:	2400      	movs	r4, #0
   108e4:	e00a      	b.n	108fc <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   108e6:	f7fb fc59 	bl	c19c <hal_debugger_connected>
   108ea:	b100      	cbz	r0, 108ee <flash_map_add_new_dflt_areas+0xe>
   108ec:	be01      	bkpt	0x0001
   108ee:	2300      	movs	r3, #0
   108f0:	461a      	mov	r2, r3
   108f2:	4619      	mov	r1, r3
   108f4:	4618      	mov	r0, r3
   108f6:	f7fc f955 	bl	cba4 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   108fa:	3401      	adds	r4, #1
   108fc:	2c05      	cmp	r4, #5
   108fe:	dc28      	bgt.n	10952 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   10900:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   10904:	4a13      	ldr	r2, [pc, #76]	; (10954 <flash_map_add_new_dflt_areas+0x74>)
   10906:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1090a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1090e:	f7ff ff9f 	bl	10850 <flash_area_find_idx>
   10912:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10916:	d1f0      	bne.n	108fa <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   10918:	4b0f      	ldr	r3, [pc, #60]	; (10958 <flash_map_add_new_dflt_areas+0x78>)
   1091a:	681d      	ldr	r5, [r3, #0]
   1091c:	2d09      	cmp	r5, #9
   1091e:	dce2      	bgt.n	108e6 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   10920:	4630      	mov	r0, r6
   10922:	f7ff ffb1 	bl	10888 <flash_map_area_overlaps>
   10926:	2800      	cmp	r0, #0
   10928:	d1e7      	bne.n	108fa <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1092a:	4b0c      	ldr	r3, [pc, #48]	; (1095c <flash_map_add_new_dflt_areas+0x7c>)
   1092c:	681b      	ldr	r3, [r3, #0]
   1092e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10932:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   10936:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1093a:	4a06      	ldr	r2, [pc, #24]	; (10954 <flash_map_add_new_dflt_areas+0x74>)
   1093c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10940:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   10944:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   10948:	4a03      	ldr	r2, [pc, #12]	; (10958 <flash_map_add_new_dflt_areas+0x78>)
   1094a:	6813      	ldr	r3, [r2, #0]
   1094c:	3301      	adds	r3, #1
   1094e:	6013      	str	r3, [r2, #0]
   10950:	e7d3      	b.n	108fa <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   10952:	bd70      	pop	{r4, r5, r6, pc}
   10954:	0002e790 	.word	0x0002e790
   10958:	20001b30 	.word	0x20001b30
   1095c:	20001b2c 	.word	0x20001b2c

00010960 <flash_area_open>:
{
   10960:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
   10962:	4b0b      	ldr	r3, [pc, #44]	; (10990 <flash_area_open+0x30>)
   10964:	681c      	ldr	r4, [r3, #0]
   10966:	b164      	cbz	r4, 10982 <flash_area_open+0x22>
   10968:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
   1096a:	f7ff ff71 	bl	10850 <flash_area_find_idx>
    if (idx == -1) {
   1096e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10972:	d009      	beq.n	10988 <flash_area_open+0x28>
    *fap = &flash_map[idx];
   10974:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10978:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1097c:	6028      	str	r0, [r5, #0]
    return 0;
   1097e:	2000      	movs	r0, #0
}
   10980:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
   10982:	f06f 0006 	mvn.w	r0, #6
   10986:	e7fb      	b.n	10980 <flash_area_open+0x20>
        return SYS_ENOENT;
   10988:	f06f 0003 	mvn.w	r0, #3
   1098c:	e7f8      	b.n	10980 <flash_area_open+0x20>
   1098e:	bf00      	nop
   10990:	20001b2c 	.word	0x20001b2c

00010994 <flash_area_to_sectors>:
{
   10994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10998:	b084      	sub	sp, #16
   1099a:	460f      	mov	r7, r1
   1099c:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   1099e:	fa5f f880 	uxtb.w	r8, r0
   109a2:	a903      	add	r1, sp, #12
   109a4:	4640      	mov	r0, r8
   109a6:	f7ff ffdb 	bl	10960 <flash_area_open>
    if (rc != 0) {
   109aa:	4681      	mov	r9, r0
   109ac:	b118      	cbz	r0, 109b6 <flash_area_to_sectors+0x22>
}
   109ae:	4648      	mov	r0, r9
   109b0:	b004      	add	sp, #16
   109b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   109b6:	2300      	movs	r3, #0
   109b8:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   109ba:	9b03      	ldr	r3, [sp, #12]
   109bc:	7858      	ldrb	r0, [r3, #1]
   109be:	f019 f9d1 	bl	29d64 <hal_bsp_flash_dev>
   109c2:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   109c4:	464c      	mov	r4, r9
   109c6:	e003      	b.n	109d0 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   109c8:	683b      	ldr	r3, [r7, #0]
   109ca:	3301      	adds	r3, #1
   109cc:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   109ce:	3401      	adds	r4, #1
   109d0:	68eb      	ldr	r3, [r5, #12]
   109d2:	42a3      	cmp	r3, r4
   109d4:	ddeb      	ble.n	109ae <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   109d6:	682b      	ldr	r3, [r5, #0]
   109d8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   109dc:	ab01      	add	r3, sp, #4
   109de:	aa02      	add	r2, sp, #8
   109e0:	4621      	mov	r1, r4
   109e2:	4628      	mov	r0, r5
   109e4:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   109e6:	9903      	ldr	r1, [sp, #12]
   109e8:	684b      	ldr	r3, [r1, #4]
   109ea:	9a02      	ldr	r2, [sp, #8]
   109ec:	4293      	cmp	r3, r2
   109ee:	d8ee      	bhi.n	109ce <flash_area_to_sectors+0x3a>
   109f0:	6889      	ldr	r1, [r1, #8]
   109f2:	440b      	add	r3, r1
   109f4:	429a      	cmp	r2, r3
   109f6:	d2ea      	bcs.n	109ce <flash_area_to_sectors+0x3a>
            if (ret) {
   109f8:	2e00      	cmp	r6, #0
   109fa:	d0e5      	beq.n	109c8 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   109fc:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
   10a00:	9b03      	ldr	r3, [sp, #12]
   10a02:	785b      	ldrb	r3, [r3, #1]
   10a04:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   10a06:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   10a08:	9b01      	ldr	r3, [sp, #4]
   10a0a:	60b3      	str	r3, [r6, #8]
                ret++;
   10a0c:	360c      	adds	r6, #12
   10a0e:	e7db      	b.n	109c8 <flash_area_to_sectors+0x34>

00010a10 <flash_area_read>:
{
   10a10:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10a12:	6884      	ldr	r4, [r0, #8]
   10a14:	428c      	cmp	r4, r1
   10a16:	d308      	bcc.n	10a2a <flash_area_read+0x1a>
   10a18:	18cd      	adds	r5, r1, r3
   10a1a:	42ac      	cmp	r4, r5
   10a1c:	d308      	bcc.n	10a30 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   10a1e:	6844      	ldr	r4, [r0, #4]
   10a20:	4421      	add	r1, r4
   10a22:	7840      	ldrb	r0, [r0, #1]
   10a24:	f019 f9e1 	bl	29dea <hal_flash_read>
}
   10a28:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   10a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a2e:	e7fb      	b.n	10a28 <flash_area_read+0x18>
   10a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a34:	e7f8      	b.n	10a28 <flash_area_read+0x18>

00010a36 <flash_area_write>:
{
   10a36:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10a38:	6884      	ldr	r4, [r0, #8]
   10a3a:	428c      	cmp	r4, r1
   10a3c:	d308      	bcc.n	10a50 <flash_area_write+0x1a>
   10a3e:	18cd      	adds	r5, r1, r3
   10a40:	42ac      	cmp	r4, r5
   10a42:	d308      	bcc.n	10a56 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   10a44:	6844      	ldr	r4, [r0, #4]
   10a46:	4421      	add	r1, r4
   10a48:	7840      	ldrb	r0, [r0, #1]
   10a4a:	f019 f9f7 	bl	29e3c <hal_flash_write>
}
   10a4e:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   10a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a54:	e7fb      	b.n	10a4e <flash_area_write+0x18>
   10a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a5a:	e7f8      	b.n	10a4e <flash_area_write+0x18>

00010a5c <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10a5c:	6883      	ldr	r3, [r0, #8]
   10a5e:	428b      	cmp	r3, r1
   10a60:	d309      	bcc.n	10a76 <flash_area_erase+0x1a>
{
   10a62:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10a64:	188c      	adds	r4, r1, r2
   10a66:	42a3      	cmp	r3, r4
   10a68:	d308      	bcc.n	10a7c <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   10a6a:	6843      	ldr	r3, [r0, #4]
   10a6c:	4419      	add	r1, r3
   10a6e:	7840      	ldrb	r0, [r0, #1]
   10a70:	f019 fa1c 	bl	29eac <hal_flash_erase>
}
   10a74:	bd10      	pop	{r4, pc}
        return -1;
   10a76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10a7a:	4770      	bx	lr
        return -1;
   10a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a80:	e7f8      	b.n	10a74 <flash_area_erase+0x18>

00010a82 <flash_area_align>:
{
   10a82:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   10a84:	7840      	ldrb	r0, [r0, #1]
   10a86:	f019 f9a0 	bl	29dca <hal_flash_align>
}
   10a8a:	bd08      	pop	{r3, pc}

00010a8c <flash_area_erased_val>:
{
   10a8c:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   10a8e:	7840      	ldrb	r0, [r0, #1]
   10a90:	f019 f9a3 	bl	29dda <hal_flash_erased_val>
}
   10a94:	bd08      	pop	{r3, pc}

00010a96 <flash_area_is_empty>:
{
   10a96:	b510      	push	{r4, lr}
   10a98:	460c      	mov	r4, r1
    *empty = false;
   10a9a:	2300      	movs	r3, #0
   10a9c:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   10a9e:	6882      	ldr	r2, [r0, #8]
   10aa0:	6841      	ldr	r1, [r0, #4]
   10aa2:	7840      	ldrb	r0, [r0, #1]
   10aa4:	f019 fabc 	bl	2a020 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   10aa8:	2800      	cmp	r0, #0
   10aaa:	db02      	blt.n	10ab2 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   10aac:	2801      	cmp	r0, #1
   10aae:	d001      	beq.n	10ab4 <flash_area_is_empty+0x1e>
    return 0;
   10ab0:	2000      	movs	r0, #0
}
   10ab2:	bd10      	pop	{r4, pc}
        *empty = true;
   10ab4:	2301      	movs	r3, #1
   10ab6:	7023      	strb	r3, [r4, #0]
    return 0;
   10ab8:	2000      	movs	r0, #0
   10aba:	e7fa      	b.n	10ab2 <flash_area_is_empty+0x1c>

00010abc <flash_area_read_is_empty>:
{
   10abc:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   10abe:	6844      	ldr	r4, [r0, #4]
   10ac0:	4421      	add	r1, r4
   10ac2:	7840      	ldrb	r0, [r0, #1]
   10ac4:	f019 fa7b 	bl	29fbe <hal_flash_isempty>
}
   10ac8:	bd10      	pop	{r4, pc}

00010aca <flash_area_id_from_image_slot>:
    switch (slot) {
   10aca:	b170      	cbz	r0, 10aea <flash_area_id_from_image_slot+0x20>
{
   10acc:	b508      	push	{r3, lr}
    switch (slot) {
   10ace:	2801      	cmp	r0, #1
   10ad0:	d101      	bne.n	10ad6 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   10ad2:	2002      	movs	r0, #2
}
   10ad4:	bd08      	pop	{r3, pc}
        assert(0);
   10ad6:	f7fb fb61 	bl	c19c <hal_debugger_connected>
   10ada:	b100      	cbz	r0, 10ade <flash_area_id_from_image_slot+0x14>
   10adc:	be01      	bkpt	0x0001
   10ade:	2300      	movs	r3, #0
   10ae0:	461a      	mov	r2, r3
   10ae2:	4619      	mov	r1, r3
   10ae4:	4618      	mov	r0, r3
   10ae6:	f7fc f85d 	bl	cba4 <__assert_func>
    switch (slot) {
   10aea:	2001      	movs	r0, #1
}
   10aec:	4770      	bx	lr
	...

00010af0 <flash_map_init>:

void
flash_map_init(void)
{
   10af0:	b510      	push	{r4, lr}
   10af2:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10af4:	4b13      	ldr	r3, [pc, #76]	; (10b44 <flash_map_init+0x54>)
   10af6:	781b      	ldrb	r3, [r3, #0]
   10af8:	b163      	cbz	r3, 10b14 <flash_map_init+0x24>

    rc = hal_flash_init();
   10afa:	f019 f950 	bl	29d9e <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10afe:	b998      	cbnz	r0, 10b28 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   10b00:	4b11      	ldr	r3, [pc, #68]	; (10b48 <flash_map_init+0x58>)
   10b02:	4a12      	ldr	r2, [pc, #72]	; (10b4c <flash_map_init+0x5c>)
   10b04:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   10b06:	4b12      	ldr	r3, [pc, #72]	; (10b50 <flash_map_init+0x60>)
   10b08:	2206      	movs	r2, #6
   10b0a:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   10b0c:	f7ff fee8 	bl	108e0 <flash_map_add_new_dflt_areas>
}
   10b10:	b002      	add	sp, #8
   10b12:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   10b14:	f7fb fb42 	bl	c19c <hal_debugger_connected>
   10b18:	b100      	cbz	r0, 10b1c <flash_map_init+0x2c>
   10b1a:	be01      	bkpt	0x0001
   10b1c:	2300      	movs	r3, #0
   10b1e:	461a      	mov	r2, r3
   10b20:	4619      	mov	r1, r3
   10b22:	4618      	mov	r0, r3
   10b24:	f7fc f83e 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10b28:	f7fb fb38 	bl	c19c <hal_debugger_connected>
   10b2c:	b100      	cbz	r0, 10b30 <flash_map_init+0x40>
   10b2e:	be01      	bkpt	0x0001
   10b30:	2000      	movs	r0, #0
   10b32:	9000      	str	r0, [sp, #0]
   10b34:	4b07      	ldr	r3, [pc, #28]	; (10b54 <flash_map_init+0x64>)
   10b36:	681c      	ldr	r4, [r3, #0]
   10b38:	4603      	mov	r3, r0
   10b3a:	4602      	mov	r2, r0
   10b3c:	4601      	mov	r1, r0
   10b3e:	47a0      	blx	r4
   10b40:	e7de      	b.n	10b00 <flash_map_init+0x10>
   10b42:	bf00      	nop
   10b44:	20001e3c 	.word	0x20001e3c
   10b48:	20001b2c 	.word	0x20001b2c
   10b4c:	0002e790 	.word	0x0002e790
   10b50:	20001b30 	.word	0x20001b30
   10b54:	2000028c 	.word	0x2000028c

00010b58 <id_conf_export>:
}

static int
id_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   10b58:	b510      	push	{r4, lr}
   10b5a:	b098      	sub	sp, #96	; 0x60
   10b5c:	4604      	mov	r4, r0
    uint8_t src_buf[HAL_BSP_MAX_ID_LEN];
    char str[sizeof(src_buf) * 2];
    int len;

    if (tgt == CONF_EXPORT_SHOW) {
   10b5e:	2901      	cmp	r1, #1
   10b60:	d005      	beq.n	10b6e <id_conf_export+0x16>
#if MYNEWT_VAL(ID_TARGET_PRESENT)
        export_func("id/target", MYNEWT_VAL(TARGET_NAME));
#endif
    }
#if MYNEWT_VAL(ID_SERIAL_PRESENT)
    export_func("id/serial", id_serial);
   10b62:	4911      	ldr	r1, [pc, #68]	; (10ba8 <id_conf_export+0x50>)
   10b64:	4811      	ldr	r0, [pc, #68]	; (10bac <id_conf_export+0x54>)
   10b66:	47a0      	blx	r4
        export_func("id/model", (char *)id_model);
    }
#endif /* ID_MODEL_LOCAL */
#endif /* ID_MODEL_PRESENT */
    return 0;
}
   10b68:	2000      	movs	r0, #0
   10b6a:	b018      	add	sp, #96	; 0x60
   10b6c:	bd10      	pop	{r4, pc}
        len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   10b6e:	2120      	movs	r1, #32
   10b70:	a810      	add	r0, sp, #64	; 0x40
   10b72:	f019 fd1b 	bl	2a5ac <hal_bsp_hw_id>
        if (len > 0) {
   10b76:	1e01      	subs	r1, r0, #0
   10b78:	dc0e      	bgt.n	10b98 <id_conf_export+0x40>
        export_func("id/hwid", str);
   10b7a:	4669      	mov	r1, sp
   10b7c:	480c      	ldr	r0, [pc, #48]	; (10bb0 <id_conf_export+0x58>)
   10b7e:	47a0      	blx	r4
        export_func("id/bsp", (char *)id_bsp_str);
   10b80:	4b0c      	ldr	r3, [pc, #48]	; (10bb4 <id_conf_export+0x5c>)
   10b82:	6819      	ldr	r1, [r3, #0]
   10b84:	480c      	ldr	r0, [pc, #48]	; (10bb8 <id_conf_export+0x60>)
   10b86:	47a0      	blx	r4
        export_func("id/app", (char *)id_app_str);
   10b88:	4b0c      	ldr	r3, [pc, #48]	; (10bbc <id_conf_export+0x64>)
   10b8a:	6819      	ldr	r1, [r3, #0]
   10b8c:	480c      	ldr	r0, [pc, #48]	; (10bc0 <id_conf_export+0x68>)
   10b8e:	47a0      	blx	r4
        export_func("id/mfghash", (char *)id_mfghash);
   10b90:	490c      	ldr	r1, [pc, #48]	; (10bc4 <id_conf_export+0x6c>)
   10b92:	480d      	ldr	r0, [pc, #52]	; (10bc8 <id_conf_export+0x70>)
   10b94:	47a0      	blx	r4
   10b96:	e7e4      	b.n	10b62 <id_conf_export+0xa>
            conf_str_from_bytes(src_buf, len, str, sizeof(str));
   10b98:	2340      	movs	r3, #64	; 0x40
   10b9a:	466a      	mov	r2, sp
   10b9c:	eb0d 0003 	add.w	r0, sp, r3
   10ba0:	f7fe fd32 	bl	f608 <conf_str_from_bytes>
   10ba4:	e7e9      	b.n	10b7a <id_conf_export+0x22>
   10ba6:	bf00      	nop
   10ba8:	20001b90 	.word	0x20001b90
   10bac:	0002d980 	.word	0x0002d980
   10bb0:	0002d95c 	.word	0x0002d95c
   10bb4:	20000238 	.word	0x20000238
   10bb8:	0002d964 	.word	0x0002d964
   10bbc:	20000234 	.word	0x20000234
   10bc0:	0002d96c 	.word	0x0002d96c
   10bc4:	20001b34 	.word	0x20001b34
   10bc8:	0002d974 	.word	0x0002d974

00010bcc <id_conf_get>:
    if (argc == 1) {
   10bcc:	2801      	cmp	r0, #1
   10bce:	d136      	bne.n	10c3e <id_conf_get+0x72>
{
   10bd0:	b570      	push	{r4, r5, r6, lr}
   10bd2:	b088      	sub	sp, #32
   10bd4:	4616      	mov	r6, r2
   10bd6:	461c      	mov	r4, r3
        if (!strcmp(argv[0], "hwid")) {
   10bd8:	680d      	ldr	r5, [r1, #0]
   10bda:	491b      	ldr	r1, [pc, #108]	; (10c48 <id_conf_get+0x7c>)
   10bdc:	4628      	mov	r0, r5
   10bde:	f7fd ff2c 	bl	ea3a <strcmp>
   10be2:	b1a8      	cbz	r0, 10c10 <id_conf_get+0x44>
        } else if (!strcmp(argv[0], "bsp")) {
   10be4:	4919      	ldr	r1, [pc, #100]	; (10c4c <id_conf_get+0x80>)
   10be6:	4628      	mov	r0, r5
   10be8:	f7fd ff27 	bl	ea3a <strcmp>
   10bec:	b1f0      	cbz	r0, 10c2c <id_conf_get+0x60>
        } else if (!strcmp(argv[0], "app")) {
   10bee:	4918      	ldr	r1, [pc, #96]	; (10c50 <id_conf_get+0x84>)
   10bf0:	4628      	mov	r0, r5
   10bf2:	f7fd ff22 	bl	ea3a <strcmp>
   10bf6:	b1e8      	cbz	r0, 10c34 <id_conf_get+0x68>
        } else if (!strcmp(argv[0], "serial")) {
   10bf8:	4916      	ldr	r1, [pc, #88]	; (10c54 <id_conf_get+0x88>)
   10bfa:	4628      	mov	r0, r5
   10bfc:	f7fd ff1d 	bl	ea3a <strcmp>
   10c00:	b1f8      	cbz	r0, 10c42 <id_conf_get+0x76>
        } else if (!strcmp(argv[0], "mfghash")) {
   10c02:	4915      	ldr	r1, [pc, #84]	; (10c58 <id_conf_get+0x8c>)
   10c04:	4628      	mov	r0, r5
   10c06:	f7fd ff18 	bl	ea3a <strcmp>
   10c0a:	b9b0      	cbnz	r0, 10c3a <id_conf_get+0x6e>
            return id_mfghash;
   10c0c:	4813      	ldr	r0, [pc, #76]	; (10c5c <id_conf_get+0x90>)
   10c0e:	e00f      	b.n	10c30 <id_conf_get+0x64>
            len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   10c10:	2120      	movs	r1, #32
   10c12:	4668      	mov	r0, sp
   10c14:	f019 fcca 	bl	2a5ac <hal_bsp_hw_id>
            if (len > 0) {
   10c18:	1e01      	subs	r1, r0, #0
   10c1a:	dc01      	bgt.n	10c20 <id_conf_get+0x54>
    return NULL;
   10c1c:	2000      	movs	r0, #0
   10c1e:	e007      	b.n	10c30 <id_conf_get+0x64>
                return conf_str_from_bytes(src_buf, len, val, val_len_max);
   10c20:	4623      	mov	r3, r4
   10c22:	4632      	mov	r2, r6
   10c24:	4668      	mov	r0, sp
   10c26:	f7fe fcef 	bl	f608 <conf_str_from_bytes>
   10c2a:	e001      	b.n	10c30 <id_conf_get+0x64>
            return (char *)id_bsp_str;
   10c2c:	4b0c      	ldr	r3, [pc, #48]	; (10c60 <id_conf_get+0x94>)
   10c2e:	6818      	ldr	r0, [r3, #0]
}
   10c30:	b008      	add	sp, #32
   10c32:	bd70      	pop	{r4, r5, r6, pc}
            return (char *)id_app_str;
   10c34:	4b0b      	ldr	r3, [pc, #44]	; (10c64 <id_conf_get+0x98>)
   10c36:	6818      	ldr	r0, [r3, #0]
   10c38:	e7fa      	b.n	10c30 <id_conf_get+0x64>
    return NULL;
   10c3a:	2000      	movs	r0, #0
   10c3c:	e7f8      	b.n	10c30 <id_conf_get+0x64>
   10c3e:	2000      	movs	r0, #0
}
   10c40:	4770      	bx	lr
            return (char *)id_serial;
   10c42:	4809      	ldr	r0, [pc, #36]	; (10c68 <id_conf_get+0x9c>)
   10c44:	e7f4      	b.n	10c30 <id_conf_get+0x64>
   10c46:	bf00      	nop
   10c48:	0002d98c 	.word	0x0002d98c
   10c4c:	0002d994 	.word	0x0002d994
   10c50:	0002d998 	.word	0x0002d998
   10c54:	0002d99c 	.word	0x0002d99c
   10c58:	0002d9a4 	.word	0x0002d9a4
   10c5c:	20001b34 	.word	0x20001b34
   10c60:	20000238 	.word	0x20000238
   10c64:	20000234 	.word	0x20000234
   10c68:	20001b90 	.word	0x20001b90

00010c6c <id_conf_set>:
    if (argc == 1) {
   10c6c:	2801      	cmp	r0, #1
   10c6e:	d001      	beq.n	10c74 <id_conf_set+0x8>
    return OS_ENOENT;
   10c70:	200a      	movs	r0, #10
}
   10c72:	4770      	bx	lr
{
   10c74:	b510      	push	{r4, lr}
   10c76:	460b      	mov	r3, r1
   10c78:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "serial")) {
   10c7a:	4907      	ldr	r1, [pc, #28]	; (10c98 <id_conf_set+0x2c>)
   10c7c:	6818      	ldr	r0, [r3, #0]
   10c7e:	f7fd fedc 	bl	ea3a <strcmp>
   10c82:	b108      	cbz	r0, 10c88 <id_conf_set+0x1c>
    return OS_ENOENT;
   10c84:	200a      	movs	r0, #10
}
   10c86:	bd10      	pop	{r4, pc}
            return CONF_VALUE_SET(val, CONF_STRING, id_serial);
   10c88:	2340      	movs	r3, #64	; 0x40
   10c8a:	4a04      	ldr	r2, [pc, #16]	; (10c9c <id_conf_set+0x30>)
   10c8c:	2106      	movs	r1, #6
   10c8e:	4620      	mov	r0, r4
   10c90:	f7fe fba7 	bl	f3e2 <conf_value_from_str>
   10c94:	e7f7      	b.n	10c86 <id_conf_set+0x1a>
   10c96:	bf00      	nop
   10c98:	0002d99c 	.word	0x0002d99c
   10c9c:	20001b90 	.word	0x20001b90

00010ca0 <id_read_mfghash>:

static void
id_read_mfghash(void)
{
   10ca0:	b530      	push	{r4, r5, lr}
   10ca2:	b08b      	sub	sp, #44	; 0x2c
    uint8_t raw_hash[MFG_HASH_SZ];
    struct mfg_reader reader;
    int str_off;
    int rc;

    memset(id_mfghash, 0, sizeof id_mfghash);
   10ca4:	225a      	movs	r2, #90	; 0x5a
   10ca6:	2100      	movs	r1, #0
   10ca8:	4814      	ldr	r0, [pc, #80]	; (10cfc <id_read_mfghash+0x5c>)
   10caa:	f7fd feaa 	bl	ea02 <memset>

    mfg_open(&reader);
   10cae:	4668      	mov	r0, sp
   10cb0:	f000 fe6a 	bl	11988 <mfg_open>

    str_off = 0;
   10cb4:	2400      	movs	r4, #0
   10cb6:	e009      	b.n	10ccc <id_read_mfghash+0x2c>
            id_mfghash[str_off] = ':';
            str_off++;
        }

        /* Append the SHA256 hash as a base64-encoded string. */
        base64_encode(raw_hash, sizeof raw_hash, &id_mfghash[str_off], 1);
   10cb8:	4d10      	ldr	r5, [pc, #64]	; (10cfc <id_read_mfghash+0x5c>)
   10cba:	2301      	movs	r3, #1
   10cbc:	192a      	adds	r2, r5, r4
   10cbe:	2120      	movs	r1, #32
   10cc0:	a802      	add	r0, sp, #8
   10cc2:	f017 fa21 	bl	28108 <base64_encode>
        str_off += ID_BASE64_MFG_HASH_SZ;
   10cc6:	342c      	adds	r4, #44	; 0x2c

        id_mfghash[str_off] = '\0';
   10cc8:	2300      	movs	r3, #0
   10cca:	552b      	strb	r3, [r5, r4]
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_HASH);
   10ccc:	2101      	movs	r1, #1
   10cce:	4668      	mov	r0, sp
   10cd0:	f000 fe22 	bl	11918 <mfg_seek_next_with_type>
        if (rc != 0) {
   10cd4:	b978      	cbnz	r0, 10cf6 <id_read_mfghash+0x56>
        if (str_off + ID_BASE64_MFG_HASH_SZ + 1 > sizeof id_mfghash) {
   10cd6:	f104 032d 	add.w	r3, r4, #45	; 0x2d
   10cda:	2b5a      	cmp	r3, #90	; 0x5a
   10cdc:	d80b      	bhi.n	10cf6 <id_read_mfghash+0x56>
        rc = mfg_read_tlv_hash(&reader, raw_hash);
   10cde:	a902      	add	r1, sp, #8
   10ce0:	4668      	mov	r0, sp
   10ce2:	f000 fe2b 	bl	1193c <mfg_read_tlv_hash>
        if (rc != 0) {
   10ce6:	b930      	cbnz	r0, 10cf6 <id_read_mfghash+0x56>
        if (str_off != 0) {
   10ce8:	2c00      	cmp	r4, #0
   10cea:	d0e5      	beq.n	10cb8 <id_read_mfghash+0x18>
            id_mfghash[str_off] = ':';
   10cec:	4b03      	ldr	r3, [pc, #12]	; (10cfc <id_read_mfghash+0x5c>)
   10cee:	223a      	movs	r2, #58	; 0x3a
   10cf0:	551a      	strb	r2, [r3, r4]
            str_off++;
   10cf2:	3401      	adds	r4, #1
   10cf4:	e7e0      	b.n	10cb8 <id_read_mfghash+0x18>
    }
}
   10cf6:	b00b      	add	sp, #44	; 0x2c
   10cf8:	bd30      	pop	{r4, r5, pc}
   10cfa:	bf00      	nop
   10cfc:	20001b34 	.word	0x20001b34

00010d00 <id_init>:

void
id_init(void)
{
   10d00:	b510      	push	{r4, lr}
   10d02:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10d04:	4b10      	ldr	r3, [pc, #64]	; (10d48 <id_init+0x48>)
   10d06:	781b      	ldrb	r3, [r3, #0]
   10d08:	b13b      	cbz	r3, 10d1a <id_init+0x1a>

    rc = conf_register(&id_conf);
   10d0a:	4810      	ldr	r0, [pc, #64]	; (10d4c <id_init+0x4c>)
   10d0c:	f7fe fb26 	bl	f35c <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10d10:	b968      	cbnz	r0, 10d2e <id_init+0x2e>

    /* Attempt to read the manufacturing image hash from the meta region. */
    id_read_mfghash();
   10d12:	f7ff ffc5 	bl	10ca0 <id_read_mfghash>
}
   10d16:	b002      	add	sp, #8
   10d18:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   10d1a:	f7fb fa3f 	bl	c19c <hal_debugger_connected>
   10d1e:	b100      	cbz	r0, 10d22 <id_init+0x22>
   10d20:	be01      	bkpt	0x0001
   10d22:	2300      	movs	r3, #0
   10d24:	461a      	mov	r2, r3
   10d26:	4619      	mov	r1, r3
   10d28:	4618      	mov	r0, r3
   10d2a:	f7fb ff3b 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10d2e:	f7fb fa35 	bl	c19c <hal_debugger_connected>
   10d32:	b100      	cbz	r0, 10d36 <id_init+0x36>
   10d34:	be01      	bkpt	0x0001
   10d36:	2000      	movs	r0, #0
   10d38:	9000      	str	r0, [sp, #0]
   10d3a:	4b05      	ldr	r3, [pc, #20]	; (10d50 <id_init+0x50>)
   10d3c:	681c      	ldr	r4, [r3, #0]
   10d3e:	4603      	mov	r3, r0
   10d40:	4602      	mov	r2, r0
   10d42:	4601      	mov	r1, r0
   10d44:	47a0      	blx	r4
   10d46:	e7e4      	b.n	10d12 <id_init+0x12>
   10d48:	20001e3c 	.word	0x20001e3c
   10d4c:	2000023c 	.word	0x2000023c
   10d50:	2000028c 	.word	0x2000028c

00010d54 <log_module_find_idx>:
    return (next);
}

static int
log_module_find_idx(uint8_t id)
{
   10d54:	4602      	mov	r2, r0
    const struct log_module_entry *entry;
    int i;

    for (i = 0; i < g_log_module_count; i++) {
   10d56:	2000      	movs	r0, #0
   10d58:	4b06      	ldr	r3, [pc, #24]	; (10d74 <log_module_find_idx+0x20>)
   10d5a:	681b      	ldr	r3, [r3, #0]
   10d5c:	4283      	cmp	r3, r0
   10d5e:	dd06      	ble.n	10d6e <log_module_find_idx+0x1a>
        entry = &g_log_module_list[i];
        if (entry->id == id) {
   10d60:	4b05      	ldr	r3, [pc, #20]	; (10d78 <log_module_find_idx+0x24>)
   10d62:	f933 3030 	ldrsh.w	r3, [r3, r0, lsl #3]
   10d66:	4293      	cmp	r3, r2
   10d68:	d003      	beq.n	10d72 <log_module_find_idx+0x1e>
    for (i = 0; i < g_log_module_count; i++) {
   10d6a:	3001      	adds	r0, #1
   10d6c:	e7f4      	b.n	10d58 <log_module_find_idx+0x4>
            return i;
        }
    }

    return -1;
   10d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10d72:	4770      	bx	lr
   10d74:	20001bd8 	.word	0x20001bd8
   10d78:	20001bdc 	.word	0x20001bdc

00010d7c <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   10d7c:	4b05      	ldr	r3, [pc, #20]	; (10d94 <log_registered+0x18>)
   10d7e:	681b      	ldr	r3, [r3, #0]
   10d80:	b11b      	cbz	r3, 10d8a <log_registered+0xe>
        if (cur == log) {
   10d82:	4283      	cmp	r3, r0
   10d84:	d003      	beq.n	10d8e <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   10d86:	68db      	ldr	r3, [r3, #12]
   10d88:	e7fa      	b.n	10d80 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   10d8a:	2000      	movs	r0, #0
   10d8c:	4770      	bx	lr
            return 1;
   10d8e:	2001      	movs	r0, #1
}
   10d90:	4770      	bx	lr
   10d92:	bf00      	nop
   10d94:	2000025c 	.word	0x2000025c

00010d98 <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   10d98:	2802      	cmp	r0, #2
   10d9a:	d801      	bhi.n	10da0 <log_chk_type+0x8>
    rc = OS_OK;
   10d9c:	2000      	movs	r0, #0
   10d9e:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   10da0:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   10da2:	4770      	bx	lr

00010da4 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   10da4:	8b43      	ldrh	r3, [r0, #26]
   10da6:	b11b      	cbz	r3, 10db0 <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   10da8:	428b      	cmp	r3, r1
   10daa:	d303      	bcc.n	10db4 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   10dac:	2000      	movs	r0, #0
   10dae:	4770      	bx	lr
   10db0:	2000      	movs	r0, #0
   10db2:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   10db4:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   10db6:	4770      	bx	lr

00010db8 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   10db8:	b500      	push	{lr}
   10dba:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   10dbc:	6903      	ldr	r3, [r0, #16]
   10dbe:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   10dc0:	9b01      	ldr	r3, [sp, #4]
   10dc2:	b10b      	cbz	r3, 10dc8 <log_call_append_cb+0x10>
        cb(log, idx);
   10dc4:	9b01      	ldr	r3, [sp, #4]
   10dc6:	4798      	blx	r3
    }
}
   10dc8:	b003      	add	sp, #12
   10dca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00010dd0 <log_append_prepare>:
{
   10dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dd4:	b085      	sub	sp, #20
   10dd6:	4606      	mov	r6, r0
   10dd8:	468a      	mov	sl, r1
   10dda:	4615      	mov	r5, r2
   10ddc:	461f      	mov	r7, r3
   10dde:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    rc = log_chk_type(etype);
   10de0:	4618      	mov	r0, r3
   10de2:	f7ff ffd9 	bl	10d98 <log_chk_type>
    assert(rc == OS_OK);
   10de6:	2800      	cmp	r0, #0
   10de8:	d13e      	bne.n	10e68 <log_append_prepare+0x98>
    if (log->l_name == NULL || log->l_log == NULL) {
   10dea:	6833      	ldr	r3, [r6, #0]
   10dec:	2b00      	cmp	r3, #0
   10dee:	d074      	beq.n	10eda <log_append_prepare+0x10a>
   10df0:	6873      	ldr	r3, [r6, #4]
   10df2:	2b00      	cmp	r3, #0
   10df4:	d074      	beq.n	10ee0 <log_append_prepare+0x110>
    if (level > LOG_LEVEL_MAX) {
   10df6:	2d0f      	cmp	r5, #15
   10df8:	d900      	bls.n	10dfc <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   10dfa:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   10dfc:	681b      	ldr	r3, [r3, #0]
   10dfe:	2b02      	cmp	r3, #2
   10e00:	d03c      	beq.n	10e7c <log_append_prepare+0xac>
    if (level < log->l_level) {
   10e02:	7e33      	ldrb	r3, [r6, #24]
   10e04:	42ab      	cmp	r3, r5
   10e06:	d86e      	bhi.n	10ee6 <log_append_prepare+0x116>
    if (level < log_level_get(module)) {
   10e08:	4650      	mov	r0, sl
   10e0a:	f000 fae7 	bl	113dc <log_level_get>
   10e0e:	42a8      	cmp	r0, r5
   10e10:	d86c      	bhi.n	10eec <log_append_prepare+0x11c>
    OS_ENTER_CRITICAL(sr);
   10e12:	f7fd fb99 	bl	e548 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   10e16:	4b3a      	ldr	r3, [pc, #232]	; (10f00 <log_append_prepare+0x130>)
   10e18:	f8d3 b000 	ldr.w	fp, [r3]
   10e1c:	f10b 0201 	add.w	r2, fp, #1
   10e20:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   10e22:	f7fd fb97 	bl	e554 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   10e26:	2100      	movs	r1, #0
   10e28:	4668      	mov	r0, sp
   10e2a:	f7fd fb07 	bl	e43c <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   10e2e:	4606      	mov	r6, r0
   10e30:	b938      	cbnz	r0, 10e42 <log_append_prepare+0x72>
   10e32:	e9dd 0100 	ldrd	r0, r1, [sp]
   10e36:	a330      	add	r3, pc, #192	; (adr r3, 10ef8 <log_append_prepare+0x128>)
   10e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e3c:	4282      	cmp	r2, r0
   10e3e:	418b      	sbcs	r3, r1
   10e40:	db20      	blt.n	10e84 <log_append_prepare+0xb4>
        ue->ue_ts = os_get_uptime_usec();
   10e42:	f7fd fb35 	bl	e4b0 <os_get_uptime_usec>
   10e46:	6020      	str	r0, [r4, #0]
   10e48:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   10e4a:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   10e4c:	f884 a00c 	strb.w	sl, [r4, #12]
    ue->ue_index = idx;
   10e50:	f8c4 b008 	str.w	fp, [r4, #8]
    ue->ue_etype = etype;
   10e54:	7ba3      	ldrb	r3, [r4, #14]
   10e56:	f367 0303 	bfi	r3, r7, #0, #4
    ue->ue_flags = 0;
   10e5a:	f36f 1307 	bfc	r3, #4, #4
   10e5e:	73a3      	strb	r3, [r4, #14]
}
   10e60:	4630      	mov	r0, r6
   10e62:	b005      	add	sp, #20
   10e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   10e68:	f7fb f998 	bl	c19c <hal_debugger_connected>
   10e6c:	b100      	cbz	r0, 10e70 <log_append_prepare+0xa0>
   10e6e:	be01      	bkpt	0x0001
   10e70:	2300      	movs	r3, #0
   10e72:	461a      	mov	r2, r3
   10e74:	4619      	mov	r1, r3
   10e76:	4618      	mov	r0, r3
   10e78:	f7fb fe94 	bl	cba4 <__assert_func>
        log_written = 1;
   10e7c:	4b21      	ldr	r3, [pc, #132]	; (10f04 <log_append_prepare+0x134>)
   10e7e:	2201      	movs	r2, #1
   10e80:	701a      	strb	r2, [r3, #0]
   10e82:	e7be      	b.n	10e02 <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   10e84:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   10e88:	0143      	lsls	r3, r0, #5
   10e8a:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   10e8e:	1a1b      	subs	r3, r3, r0
   10e90:	eb62 0201 	sbc.w	r2, r2, r1
   10e94:	ea4f 2c42 	mov.w	ip, r2, lsl #9
   10e98:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
   10e9c:	ea4f 2e43 	mov.w	lr, r3, lsl #9
   10ea0:	4662      	mov	r2, ip
   10ea2:	eb1e 0300 	adds.w	r3, lr, r0
   10ea6:	eb41 0202 	adc.w	r2, r1, r2
   10eaa:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   10eae:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
   10eb2:	ea4f 1e83 	mov.w	lr, r3, lsl #6
   10eb6:	ebbe 0303 	subs.w	r3, lr, r3
   10eba:	eb6c 0202 	sbc.w	r2, ip, r2
   10ebe:	eb13 0800 	adds.w	r8, r3, r0
   10ec2:	eb42 0901 	adc.w	r9, r2, r1
   10ec6:	9b02      	ldr	r3, [sp, #8]
   10ec8:	eb18 0803 	adds.w	r8, r8, r3
   10ecc:	eb49 79e3 	adc.w	r9, r9, r3, asr #31
   10ed0:	f8c4 8000 	str.w	r8, [r4]
   10ed4:	f8c4 9004 	str.w	r9, [r4, #4]
   10ed8:	e7b7      	b.n	10e4a <log_append_prepare+0x7a>
        rc = -1;
   10eda:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10ede:	e7bf      	b.n	10e60 <log_append_prepare+0x90>
   10ee0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10ee4:	e7bc      	b.n	10e60 <log_append_prepare+0x90>
        rc = -1;
   10ee6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10eea:	e7b9      	b.n	10e60 <log_append_prepare+0x90>
        rc = -1;
   10eec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return (rc);
   10ef0:	e7b6      	b.n	10e60 <log_append_prepare+0x90>
   10ef2:	bf00      	nop
   10ef4:	f3af 8000 	nop.w
   10ef8:	5685c17f 	.word	0x5685c17f
   10efc:	00000000 	.word	0x00000000
   10f00:	20001bd0 	.word	0x20001bd0
   10f04:	20001be4 	.word	0x20001be4

00010f08 <log_init>:
{
   10f08:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   10f0a:	4b0d      	ldr	r3, [pc, #52]	; (10f40 <log_init+0x38>)
   10f0c:	781b      	ldrb	r3, [r3, #0]
   10f0e:	b163      	cbz	r3, 10f2a <log_init+0x22>
    log_written = 0;
   10f10:	2300      	movs	r3, #0
   10f12:	4a0c      	ldr	r2, [pc, #48]	; (10f44 <log_init+0x3c>)
   10f14:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   10f16:	4a0c      	ldr	r2, [pc, #48]	; (10f48 <log_init+0x40>)
   10f18:	6013      	str	r3, [r2, #0]
   10f1a:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   10f1c:	4a0b      	ldr	r2, [pc, #44]	; (10f4c <log_init+0x44>)
   10f1e:	2103      	movs	r1, #3
   10f20:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   10f22:	6013      	str	r3, [r2, #0]
    log_console_init();
   10f24:	f000 fa2a 	bl	1137c <log_console_init>
}
   10f28:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   10f2a:	f7fb f937 	bl	c19c <hal_debugger_connected>
   10f2e:	b100      	cbz	r0, 10f32 <log_init+0x2a>
   10f30:	be01      	bkpt	0x0001
   10f32:	2300      	movs	r3, #0
   10f34:	461a      	mov	r2, r3
   10f36:	4619      	mov	r1, r3
   10f38:	4618      	mov	r0, r3
   10f3a:	f7fb fe33 	bl	cba4 <__assert_func>
   10f3e:	bf00      	nop
   10f40:	20001e3c 	.word	0x20001e3c
   10f44:	20001be4 	.word	0x20001be4
   10f48:	2000025c 	.word	0x2000025c
   10f4c:	20001bd0 	.word	0x20001bd0

00010f50 <log_list_get_next>:
    if (log == NULL) {
   10f50:	b108      	cbz	r0, 10f56 <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   10f52:	68c0      	ldr	r0, [r0, #12]
}
   10f54:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   10f56:	4b01      	ldr	r3, [pc, #4]	; (10f5c <log_list_get_next+0xc>)
   10f58:	6818      	ldr	r0, [r3, #0]
   10f5a:	4770      	bx	lr
   10f5c:	2000025c 	.word	0x2000025c

00010f60 <log_module_get_name>:
    switch (module) {
   10f60:	2804      	cmp	r0, #4
   10f62:	d00d      	beq.n	10f80 <log_module_get_name+0x20>
   10f64:	2806      	cmp	r0, #6
   10f66:	d00d      	beq.n	10f84 <log_module_get_name+0x24>
   10f68:	b170      	cbz	r0, 10f88 <log_module_get_name+0x28>
{
   10f6a:	b508      	push	{r3, lr}
        idx = log_module_find_idx(module);
   10f6c:	f7ff fef2 	bl	10d54 <log_module_find_idx>
        if (idx != -1) {
   10f70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10f74:	d00a      	beq.n	10f8c <log_module_get_name+0x2c>
            return g_log_module_list[idx].name;
   10f76:	4b06      	ldr	r3, [pc, #24]	; (10f90 <log_module_get_name+0x30>)
   10f78:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   10f7c:	6840      	ldr	r0, [r0, #4]
}
   10f7e:	bd08      	pop	{r3, pc}
        return "NIMBLE_HOST";
   10f80:	4804      	ldr	r0, [pc, #16]	; (10f94 <log_module_get_name+0x34>)
   10f82:	4770      	bx	lr
        return "REBOOT";
   10f84:	4804      	ldr	r0, [pc, #16]	; (10f98 <log_module_get_name+0x38>)
   10f86:	4770      	bx	lr
    switch (module) {
   10f88:	4804      	ldr	r0, [pc, #16]	; (10f9c <log_module_get_name+0x3c>)
}
   10f8a:	4770      	bx	lr
    return NULL;
   10f8c:	2000      	movs	r0, #0
   10f8e:	e7f6      	b.n	10f7e <log_module_get_name+0x1e>
   10f90:	20001bdc 	.word	0x20001bdc
   10f94:	0002d9d8 	.word	0x0002d9d8
   10f98:	0002d9c8 	.word	0x0002d9c8
   10f9c:	0002d9d0 	.word	0x0002d9d0

00010fa0 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   10fa0:	7b83      	ldrb	r3, [r0, #14]
   10fa2:	f013 0f10 	tst.w	r3, #16
   10fa6:	d101      	bne.n	10fac <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   10fa8:	200f      	movs	r0, #15
   10faa:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   10fac:	2013      	movs	r0, #19
}
   10fae:	4770      	bx	lr

00010fb0 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   10fb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10fb4:	b089      	sub	sp, #36	; 0x24
   10fb6:	4604      	mov	r4, r0
   10fb8:	460d      	mov	r5, r1
   10fba:	4691      	mov	r9, r2
   10fbc:	461e      	mov	r6, r3
   10fbe:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   10fc2:	4641      	mov	r1, r8
   10fc4:	f7ff feee 	bl	10da4 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   10fc8:	4607      	mov	r7, r0
   10fca:	b118      	cbz	r0, 10fd4 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   10fcc:	4638      	mov	r0, r7
   10fce:	b009      	add	sp, #36	; 0x24
   10fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   10fd4:	ab03      	add	r3, sp, #12
   10fd6:	9300      	str	r3, [sp, #0]
   10fd8:	4633      	mov	r3, r6
   10fda:	464a      	mov	r2, r9
   10fdc:	4629      	mov	r1, r5
   10fde:	4620      	mov	r0, r4
   10fe0:	f7ff fef6 	bl	10dd0 <log_append_prepare>
    if (rc != 0) {
   10fe4:	4607      	mov	r7, r0
   10fe6:	2800      	cmp	r0, #0
   10fe8:	d1f0      	bne.n	10fcc <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   10fea:	6863      	ldr	r3, [r4, #4]
   10fec:	691d      	ldr	r5, [r3, #16]
   10fee:	4643      	mov	r3, r8
   10ff0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10ff2:	a903      	add	r1, sp, #12
   10ff4:	4620      	mov	r0, r4
   10ff6:	47a8      	blx	r5
    if (rc != 0) {
   10ff8:	4607      	mov	r7, r0
   10ffa:	2800      	cmp	r0, #0
   10ffc:	d1e6      	bne.n	10fcc <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   10ffe:	9905      	ldr	r1, [sp, #20]
   11000:	4620      	mov	r0, r4
   11002:	f7ff fed9 	bl	10db8 <log_call_append_cb>
    return 0;
   11006:	e7e1      	b.n	10fcc <log_append_body+0x1c>

00011008 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   11008:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   1100a:	6843      	ldr	r3, [r0, #4]
   1100c:	69db      	ldr	r3, [r3, #28]
   1100e:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   11010:	bd08      	pop	{r3, pc}
	...

00011014 <log_read_last_hdr>:
{
   11014:	b530      	push	{r4, r5, lr}
   11016:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   11018:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   1101a:	2300      	movs	r3, #0
   1101c:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   1101e:	aa06      	add	r2, sp, #24
   11020:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   11022:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11026:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1102a:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   1102e:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   11030:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   11032:	466a      	mov	r2, sp
   11034:	4905      	ldr	r1, [pc, #20]	; (1104c <log_read_last_hdr+0x38>)
   11036:	f7ff ffe7 	bl	11008 <log_walk>
    if (!arg.read_success) {
   1103a:	9b07      	ldr	r3, [sp, #28]
   1103c:	b113      	cbz	r3, 11044 <log_read_last_hdr+0x30>
    return 0;
   1103e:	2000      	movs	r0, #0
}
   11040:	b009      	add	sp, #36	; 0x24
   11042:	bd30      	pop	{r4, r5, pc}
        return -1;
   11044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11048:	e7fa      	b.n	11040 <log_read_last_hdr+0x2c>
   1104a:	bf00      	nop
   1104c:	0001123b 	.word	0x0001123b

00011050 <log_register>:
{
   11050:	b530      	push	{r4, r5, lr}
   11052:	b087      	sub	sp, #28
   11054:	460c      	mov	r4, r1
   11056:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   1105a:	4d2f      	ldr	r5, [pc, #188]	; (11118 <log_register+0xc8>)
   1105c:	782d      	ldrb	r5, [r5, #0]
   1105e:	bb25      	cbnz	r5, 110aa <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   11060:	290f      	cmp	r1, #15
   11062:	d900      	bls.n	11066 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   11064:	210f      	movs	r1, #15
    log->l_name = name;
   11066:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   11068:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   1106a:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   1106c:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   1106e:	2300      	movs	r3, #0
   11070:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   11072:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   11074:	4620      	mov	r0, r4
   11076:	f7ff fe81 	bl	10d7c <log_registered>
   1107a:	b938      	cbnz	r0, 1108c <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   1107c:	2300      	movs	r3, #0
   1107e:	60e3      	str	r3, [r4, #12]
   11080:	4b26      	ldr	r3, [pc, #152]	; (1111c <log_register+0xcc>)
   11082:	685a      	ldr	r2, [r3, #4]
   11084:	6014      	str	r4, [r2, #0]
   11086:	f104 020c 	add.w	r2, r4, #12
   1108a:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   1108c:	6863      	ldr	r3, [r4, #4]
   1108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11090:	b11b      	cbz	r3, 1109a <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   11092:	4620      	mov	r0, r4
   11094:	4798      	blx	r3
        if (rc) {
   11096:	4605      	mov	r5, r0
   11098:	b988      	cbnz	r0, 110be <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   1109a:	6863      	ldr	r3, [r4, #4]
   1109c:	681b      	ldr	r3, [r3, #0]
   1109e:	2b02      	cmp	r3, #2
   110a0:	d024      	beq.n	110ec <log_register+0x9c>
    return (0);
   110a2:	2500      	movs	r5, #0
}
   110a4:	4628      	mov	r0, r5
   110a6:	b007      	add	sp, #28
   110a8:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   110aa:	f7fb f877 	bl	c19c <hal_debugger_connected>
   110ae:	b100      	cbz	r0, 110b2 <log_register+0x62>
   110b0:	be01      	bkpt	0x0001
   110b2:	2300      	movs	r3, #0
   110b4:	461a      	mov	r2, r3
   110b6:	4619      	mov	r1, r3
   110b8:	4618      	mov	r0, r3
   110ba:	f7fb fd73 	bl	cba4 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   110be:	4b17      	ldr	r3, [pc, #92]	; (1111c <log_register+0xcc>)
   110c0:	681b      	ldr	r3, [r3, #0]
   110c2:	42a3      	cmp	r3, r4
   110c4:	d00b      	beq.n	110de <log_register+0x8e>
   110c6:	461a      	mov	r2, r3
   110c8:	68db      	ldr	r3, [r3, #12]
   110ca:	42a3      	cmp	r3, r4
   110cc:	d1fb      	bne.n	110c6 <log_register+0x76>
   110ce:	68db      	ldr	r3, [r3, #12]
   110d0:	60d3      	str	r3, [r2, #12]
   110d2:	2b00      	cmp	r3, #0
   110d4:	d1e6      	bne.n	110a4 <log_register+0x54>
   110d6:	320c      	adds	r2, #12
   110d8:	4b10      	ldr	r3, [pc, #64]	; (1111c <log_register+0xcc>)
   110da:	605a      	str	r2, [r3, #4]
            return rc;
   110dc:	e7e2      	b.n	110a4 <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   110de:	68db      	ldr	r3, [r3, #12]
   110e0:	4a0e      	ldr	r2, [pc, #56]	; (1111c <log_register+0xcc>)
   110e2:	6013      	str	r3, [r2, #0]
   110e4:	2b00      	cmp	r3, #0
   110e6:	d1dd      	bne.n	110a4 <log_register+0x54>
   110e8:	6052      	str	r2, [r2, #4]
   110ea:	e7db      	b.n	110a4 <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   110ec:	a901      	add	r1, sp, #4
   110ee:	4620      	mov	r0, r4
   110f0:	f7ff ff90 	bl	11014 <log_read_last_hdr>
        if (rc == 0) {
   110f4:	4605      	mov	r5, r0
   110f6:	b108      	cbz	r0, 110fc <log_register+0xac>
    return (0);
   110f8:	2500      	movs	r5, #0
   110fa:	e7d3      	b.n	110a4 <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   110fc:	f7fd fa24 	bl	e548 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   11100:	9b03      	ldr	r3, [sp, #12]
   11102:	4a07      	ldr	r2, [pc, #28]	; (11120 <log_register+0xd0>)
   11104:	6812      	ldr	r2, [r2, #0]
   11106:	4293      	cmp	r3, r2
   11108:	d302      	bcc.n	11110 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   1110a:	3301      	adds	r3, #1
   1110c:	4a04      	ldr	r2, [pc, #16]	; (11120 <log_register+0xd0>)
   1110e:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   11110:	f7fd fa20 	bl	e554 <os_arch_restore_sr>
   11114:	e7c6      	b.n	110a4 <log_register+0x54>
   11116:	bf00      	nop
   11118:	20001be4 	.word	0x20001be4
   1111c:	2000025c 	.word	0x2000025c
   11120:	20001bd0 	.word	0x20001bd0

00011124 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   11124:	b510      	push	{r4, lr}
   11126:	b082      	sub	sp, #8
   11128:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   1112a:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   1112c:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   1112e:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   11130:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   11134:	6843      	ldr	r3, [r0, #4]
   11136:	69db      	ldr	r3, [r3, #28]
   11138:	4902      	ldr	r1, [pc, #8]	; (11144 <log_walk_body+0x20>)
   1113a:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   1113c:	9b01      	ldr	r3, [sp, #4]
   1113e:	6123      	str	r3, [r4, #16]

    return rc;
}
   11140:	b002      	add	sp, #8
   11142:	bd10      	pop	{r4, pc}
   11144:	000111a7 	.word	0x000111a7

00011148 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   11148:	b530      	push	{r4, r5, lr}
   1114a:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   1114c:	6844      	ldr	r4, [r0, #4]
   1114e:	6864      	ldr	r4, [r4, #4]
   11150:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   11154:	9500      	str	r5, [sp, #0]
   11156:	47a0      	blx	r4

    return (rc);
}
   11158:	b003      	add	sp, #12
   1115a:	bd30      	pop	{r4, r5, pc}

0001115c <log_read_hdr>:

int
log_read_hdr(struct log *log, const void *dptr, struct log_entry_hdr *hdr)
{
   1115c:	b570      	push	{r4, r5, r6, lr}
   1115e:	b082      	sub	sp, #8
   11160:	4606      	mov	r6, r0
   11162:	460d      	mov	r5, r1
   11164:	4614      	mov	r4, r2
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   11166:	230f      	movs	r3, #15
   11168:	9300      	str	r3, [sp, #0]
   1116a:	2300      	movs	r3, #0
   1116c:	f7ff ffec 	bl	11148 <log_read>
    if (bytes_read != LOG_BASE_ENTRY_HDR_SIZE) {
   11170:	280f      	cmp	r0, #15
   11172:	d112      	bne.n	1119a <log_read_hdr+0x3e>
        return SYS_EIO;
    }

    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   11174:	7ba3      	ldrb	r3, [r4, #14]
   11176:	f013 0f10 	tst.w	r3, #16
   1117a:	d102      	bne.n	11182 <log_read_hdr+0x26>
        if (bytes_read != LOG_IMG_HASHLEN) {
            return SYS_EIO;
        }
    }

    return 0;
   1117c:	2000      	movs	r0, #0
}
   1117e:	b002      	add	sp, #8
   11180:	bd70      	pop	{r4, r5, r6, pc}
        bytes_read = log_read(log, dptr, hdr->ue_imghash,
   11182:	2304      	movs	r3, #4
   11184:	9300      	str	r3, [sp, #0]
   11186:	230f      	movs	r3, #15
   11188:	18e2      	adds	r2, r4, r3
   1118a:	4629      	mov	r1, r5
   1118c:	4630      	mov	r0, r6
   1118e:	f7ff ffdb 	bl	11148 <log_read>
        if (bytes_read != LOG_IMG_HASHLEN) {
   11192:	2804      	cmp	r0, #4
   11194:	d104      	bne.n	111a0 <log_read_hdr+0x44>
    return 0;
   11196:	2000      	movs	r0, #0
   11198:	e7f1      	b.n	1117e <log_read_hdr+0x22>
        return SYS_EIO;
   1119a:	f06f 0004 	mvn.w	r0, #4
   1119e:	e7ee      	b.n	1117e <log_read_hdr+0x22>
            return SYS_EIO;
   111a0:	f06f 0004 	mvn.w	r0, #4
   111a4:	e7eb      	b.n	1117e <log_read_hdr+0x22>

000111a6 <log_walk_body_fn>:
{
   111a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111aa:	b088      	sub	sp, #32
   111ac:	4607      	mov	r7, r0
   111ae:	460c      	mov	r4, r1
   111b0:	4615      	mov	r5, r2
   111b2:	4698      	mov	r8, r3
    lwba = log_offset->lo_arg;
   111b4:	690e      	ldr	r6, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   111b6:	aa03      	add	r2, sp, #12
   111b8:	4629      	mov	r1, r5
   111ba:	f7ff ffcf 	bl	1115c <log_read_hdr>
    if (rc != 0) {
   111be:	b9a0      	cbnz	r0, 111ea <log_walk_body_fn+0x44>
    if (log_offset->lo_index <= ueh.ue_index) {
   111c0:	68a2      	ldr	r2, [r4, #8]
   111c2:	9b05      	ldr	r3, [sp, #20]
   111c4:	429a      	cmp	r2, r3
   111c6:	d810      	bhi.n	111ea <log_walk_body_fn+0x44>
        len -= log_hdr_len(&ueh);
   111c8:	a803      	add	r0, sp, #12
   111ca:	f7ff fee9 	bl	10fa0 <log_hdr_len>
   111ce:	eba8 0300 	sub.w	r3, r8, r0
   111d2:	b29b      	uxth	r3, r3
        log_offset->lo_arg = lwba->arg;
   111d4:	6872      	ldr	r2, [r6, #4]
   111d6:	6122      	str	r2, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   111d8:	f8d6 8000 	ldr.w	r8, [r6]
   111dc:	9300      	str	r3, [sp, #0]
   111de:	462b      	mov	r3, r5
   111e0:	aa03      	add	r2, sp, #12
   111e2:	4621      	mov	r1, r4
   111e4:	4638      	mov	r0, r7
   111e6:	47c0      	blx	r8
        log_offset->lo_arg = lwba;
   111e8:	6126      	str	r6, [r4, #16]
}
   111ea:	b008      	add	sp, #32
   111ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000111f0 <log_read_body>:

int
log_read_body(struct log *log, const void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   111f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111f2:	b089      	sub	sp, #36	; 0x24
   111f4:	4604      	mov	r4, r0
   111f6:	460f      	mov	r7, r1
   111f8:	4616      	mov	r6, r2
   111fa:	461d      	mov	r5, r3
    int rc;
    struct log_entry_hdr hdr;

    rc = log_read_hdr(log, dptr, &hdr);
   111fc:	aa03      	add	r2, sp, #12
   111fe:	f7ff ffad 	bl	1115c <log_read_hdr>
    if (rc) {
   11202:	b108      	cbz	r0, 11208 <log_read_body+0x18>
        return rc;
    }

    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
}
   11204:	b009      	add	sp, #36	; 0x24
   11206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
   11208:	a803      	add	r0, sp, #12
   1120a:	f7ff fec9 	bl	10fa0 <log_hdr_len>
   1120e:	1943      	adds	r3, r0, r5
   11210:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   11214:	9200      	str	r2, [sp, #0]
   11216:	b29b      	uxth	r3, r3
   11218:	4632      	mov	r2, r6
   1121a:	4639      	mov	r1, r7
   1121c:	4620      	mov	r0, r4
   1121e:	f7ff ff93 	bl	11148 <log_read>
   11222:	e7ef      	b.n	11204 <log_read_body+0x14>

00011224 <log_flush>:
    return log_read_mbuf(log, dptr, om, log_hdr_len(&hdr) + off, len);
}

int
log_flush(struct log *log)
{
   11224:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   11226:	6843      	ldr	r3, [r0, #4]
   11228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1122a:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   1122c:	bd08      	pop	{r3, pc}

0001122e <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   1122e:	2300      	movs	r3, #0
   11230:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   11234:	f06f 000b 	mvn.w	r0, #11
   11238:	4770      	bx	lr

0001123a <log_read_hdr_walk>:
{
   1123a:	b510      	push	{r4, lr}
   1123c:	b082      	sub	sp, #8
   1123e:	460b      	mov	r3, r1
   11240:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   11242:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   11244:	6822      	ldr	r2, [r4, #0]
   11246:	230f      	movs	r3, #15
   11248:	9300      	str	r3, [sp, #0]
   1124a:	2300      	movs	r3, #0
   1124c:	f7ff ff7c 	bl	11148 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   11250:	280e      	cmp	r0, #14
   11252:	dd01      	ble.n	11258 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   11254:	2301      	movs	r3, #1
   11256:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   11258:	6820      	ldr	r0, [r4, #0]
   1125a:	7b83      	ldrb	r3, [r0, #14]
   1125c:	f013 0f10 	tst.w	r3, #16
   11260:	d102      	bne.n	11268 <log_read_hdr_walk+0x2e>
}
   11262:	2001      	movs	r0, #1
   11264:	b002      	add	sp, #8
   11266:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   11268:	f7ff ffe1 	bl	1122e <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   1126c:	b110      	cbz	r0, 11274 <log_read_hdr_walk+0x3a>
   1126e:	f110 0f0c 	cmn.w	r0, #12
   11272:	d1f6      	bne.n	11262 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   11274:	2301      	movs	r3, #1
   11276:	6063      	str	r3, [r4, #4]
   11278:	e7f3      	b.n	11262 <log_read_hdr_walk+0x28>

0001127a <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   1127a:	2002      	movs	r0, #2
   1127c:	4770      	bx	lr

0001127e <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1127e:	2002      	movs	r0, #2
   11280:	4770      	bx	lr

00011282 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   11282:	2002      	movs	r0, #2
   11284:	4770      	bx	lr
	...

00011288 <log_console_print_hdr>:
{
   11288:	b510      	push	{r4, lr}
   1128a:	b082      	sub	sp, #8
   1128c:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1128e:	7b03      	ldrb	r3, [r0, #12]
   11290:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   11292:	9201      	str	r2, [sp, #4]
   11294:	9300      	str	r3, [sp, #0]
   11296:	6802      	ldr	r2, [r0, #0]
   11298:	6843      	ldr	r3, [r0, #4]
   1129a:	480a      	ldr	r0, [pc, #40]	; (112c4 <log_console_print_hdr+0x3c>)
   1129c:	f7ff f962 	bl	10564 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   112a0:	7ba3      	ldrb	r3, [r4, #14]
   112a2:	f013 0f10 	tst.w	r3, #16
   112a6:	d104      	bne.n	112b2 <log_console_print_hdr+0x2a>
    console_printf("]");
   112a8:	4807      	ldr	r0, [pc, #28]	; (112c8 <log_console_print_hdr+0x40>)
   112aa:	f7ff f95b 	bl	10564 <console_printf>
}
   112ae:	b002      	add	sp, #8
   112b0:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   112b2:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   112b4:	9300      	str	r3, [sp, #0]
   112b6:	7c63      	ldrb	r3, [r4, #17]
   112b8:	7c22      	ldrb	r2, [r4, #16]
   112ba:	7be1      	ldrb	r1, [r4, #15]
   112bc:	4803      	ldr	r0, [pc, #12]	; (112cc <log_console_print_hdr+0x44>)
   112be:	f7ff f951 	bl	10564 <console_printf>
   112c2:	e7f1      	b.n	112a8 <log_console_print_hdr+0x20>
   112c4:	0002d9e4 	.word	0x0002d9e4
   112c8:	0002da14 	.word	0x0002da14
   112cc:	0002da04 	.word	0x0002da04

000112d0 <log_console_dump_cbor_entry>:
{
   112d0:	b530      	push	{r4, r5, lr}
   112d2:	b095      	sub	sp, #84	; 0x54
   112d4:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   112d6:	4601      	mov	r1, r0
   112d8:	a805      	add	r0, sp, #20
   112da:	f016 ff8d 	bl	281f8 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   112de:	ad0d      	add	r5, sp, #52	; 0x34
   112e0:	462b      	mov	r3, r5
   112e2:	aa11      	add	r2, sp, #68	; 0x44
   112e4:	2100      	movs	r1, #0
   112e6:	a805      	add	r0, sp, #20
   112e8:	f017 fc7b 	bl	28be2 <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   112ec:	ac01      	add	r4, sp, #4
   112ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   112f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   112f6:	4621      	mov	r1, r4
   112f8:	4b05      	ldr	r3, [pc, #20]	; (11310 <log_console_dump_cbor_entry+0x40>)
   112fa:	6818      	ldr	r0, [r3, #0]
   112fc:	f018 f93e 	bl	2957c <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   11300:	2101      	movs	r1, #1
   11302:	4804      	ldr	r0, [pc, #16]	; (11314 <log_console_dump_cbor_entry+0x44>)
   11304:	f7fe ffd8 	bl	102b8 <console_write>
}
   11308:	2000      	movs	r0, #0
   1130a:	b015      	add	sp, #84	; 0x54
   1130c:	bd30      	pop	{r4, r5, pc}
   1130e:	bf00      	nop
   11310:	0002ea50 	.word	0x0002ea50
   11314:	0002e438 	.word	0x0002e438

00011318 <log_console_append_body>:
{
   11318:	b570      	push	{r4, r5, r6, lr}
   1131a:	460c      	mov	r4, r1
   1131c:	4616      	mov	r6, r2
   1131e:	461d      	mov	r5, r3
    if (!console_is_init()) {
   11320:	f7ff f8ce 	bl	104c0 <console_is_init>
   11324:	b158      	cbz	r0, 1133e <log_console_append_body+0x26>
    if (!console_is_midline) {
   11326:	4b0b      	ldr	r3, [pc, #44]	; (11354 <log_console_append_body+0x3c>)
   11328:	681b      	ldr	r3, [r3, #0]
   1132a:	b153      	cbz	r3, 11342 <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   1132c:	7ba3      	ldrb	r3, [r4, #14]
   1132e:	f003 030f 	and.w	r3, r3, #15
   11332:	2b01      	cmp	r3, #1
   11334:	d009      	beq.n	1134a <log_console_append_body+0x32>
        console_write(body, body_len);
   11336:	4629      	mov	r1, r5
   11338:	4630      	mov	r0, r6
   1133a:	f7fe ffbd 	bl	102b8 <console_write>
}
   1133e:	2000      	movs	r0, #0
   11340:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   11342:	4620      	mov	r0, r4
   11344:	f7ff ffa0 	bl	11288 <log_console_print_hdr>
   11348:	e7f0      	b.n	1132c <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   1134a:	b2a9      	uxth	r1, r5
   1134c:	4630      	mov	r0, r6
   1134e:	f7ff ffbf 	bl	112d0 <log_console_dump_cbor_entry>
   11352:	e7f4      	b.n	1133e <log_console_append_body+0x26>
   11354:	20001a94 	.word	0x20001a94

00011358 <log_console_append>:
{
   11358:	b570      	push	{r4, r5, r6, lr}
   1135a:	4605      	mov	r5, r0
   1135c:	460c      	mov	r4, r1
   1135e:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   11360:	4608      	mov	r0, r1
   11362:	f7ff fe1d 	bl	10fa0 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   11366:	1a33      	subs	r3, r6, r0
   11368:	1822      	adds	r2, r4, r0
   1136a:	4621      	mov	r1, r4
   1136c:	4628      	mov	r0, r5
   1136e:	f7ff ffd3 	bl	11318 <log_console_append_body>
}
   11372:	bd70      	pop	{r4, r5, r6, pc}

00011374 <log_console_get>:
}
   11374:	4800      	ldr	r0, [pc, #0]	; (11378 <log_console_get+0x4>)
   11376:	4770      	bx	lr
   11378:	20001be8 	.word	0x20001be8

0001137c <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   1137c:	b510      	push	{r4, lr}
   1137e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   11380:	4b11      	ldr	r3, [pc, #68]	; (113c8 <log_console_init+0x4c>)
   11382:	781b      	ldrb	r3, [r3, #0]
   11384:	b14b      	cbz	r3, 1139a <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   11386:	2300      	movs	r3, #0
   11388:	9300      	str	r3, [sp, #0]
   1138a:	4a10      	ldr	r2, [pc, #64]	; (113cc <log_console_init+0x50>)
   1138c:	4910      	ldr	r1, [pc, #64]	; (113d0 <log_console_init+0x54>)
   1138e:	4811      	ldr	r0, [pc, #68]	; (113d4 <log_console_init+0x58>)
   11390:	f7ff fe5e 	bl	11050 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   11394:	b958      	cbnz	r0, 113ae <log_console_init+0x32>
}
   11396:	b002      	add	sp, #8
   11398:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1139a:	f7fa feff 	bl	c19c <hal_debugger_connected>
   1139e:	b100      	cbz	r0, 113a2 <log_console_init+0x26>
   113a0:	be01      	bkpt	0x0001
   113a2:	2300      	movs	r3, #0
   113a4:	461a      	mov	r2, r3
   113a6:	4619      	mov	r1, r3
   113a8:	4618      	mov	r0, r3
   113aa:	f7fb fbfb 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   113ae:	f7fa fef5 	bl	c19c <hal_debugger_connected>
   113b2:	b100      	cbz	r0, 113b6 <log_console_init+0x3a>
   113b4:	be01      	bkpt	0x0001
   113b6:	2000      	movs	r0, #0
   113b8:	9000      	str	r0, [sp, #0]
   113ba:	4b07      	ldr	r3, [pc, #28]	; (113d8 <log_console_init+0x5c>)
   113bc:	681c      	ldr	r4, [r3, #0]
   113be:	4603      	mov	r3, r0
   113c0:	4602      	mov	r2, r0
   113c2:	4601      	mov	r1, r0
   113c4:	47a0      	blx	r4
}
   113c6:	e7e6      	b.n	11396 <log_console_init+0x1a>
   113c8:	20001e3c 	.word	0x20001e3c
   113cc:	0002da20 	.word	0x0002da20
   113d0:	20001be8 	.word	0x20001be8
   113d4:	0002da18 	.word	0x0002da18
   113d8:	2000028c 	.word	0x2000028c

000113dc <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   113dc:	0843      	lsrs	r3, r0, #1
   113de:	4a05      	ldr	r2, [pc, #20]	; (113f4 <log_level_get+0x18>)
   113e0:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   113e2:	f010 0f01 	tst.w	r0, #1
   113e6:	d102      	bne.n	113ee <log_level_get+0x12>
        return byte & 0x0f;
   113e8:	f003 000f 	and.w	r0, r3, #15
   113ec:	4770      	bx	lr
    } else {
        return byte >> 4;
   113ee:	0918      	lsrs	r0, r3, #4
    }
}
   113f0:	4770      	bx	lr
   113f2:	bf00      	nop
   113f4:	20001c04 	.word	0x20001c04

000113f8 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   113f8:	b410      	push	{r4}
   113fa:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   113fc:	4b07      	ldr	r3, [pc, #28]	; (1141c <modlog_find_by_module+0x24>)
   113fe:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   11400:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   11402:	e001      	b.n	11408 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   11404:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   11406:	6800      	ldr	r0, [r0, #0]
   11408:	b120      	cbz	r0, 11414 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   1140a:	7a43      	ldrb	r3, [r0, #9]
   1140c:	4293      	cmp	r3, r2
   1140e:	d001      	beq.n	11414 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   11410:	d9f8      	bls.n	11404 <modlog_find_by_module+0xc>
            cur = NULL;
   11412:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   11414:	b101      	cbz	r1, 11418 <modlog_find_by_module+0x20>
        *out_prev = prev;
   11416:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   11418:	bc10      	pop	{r4}
   1141a:	4770      	bx	lr
   1141c:	20001d64 	.word	0x20001d64

00011420 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   11420:	b510      	push	{r4, lr}
   11422:	b082      	sub	sp, #8
   11424:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   11426:	a901      	add	r1, sp, #4
   11428:	7a40      	ldrb	r0, [r0, #9]
   1142a:	f7ff ffe5 	bl	113f8 <modlog_find_by_module>
    if (prev == NULL) {
   1142e:	9b01      	ldr	r3, [sp, #4]
   11430:	b143      	cbz	r3, 11444 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   11432:	681b      	ldr	r3, [r3, #0]
   11434:	6023      	str	r3, [r4, #0]
   11436:	9b01      	ldr	r3, [sp, #4]
   11438:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   1143a:	7a63      	ldrb	r3, [r4, #9]
   1143c:	2bff      	cmp	r3, #255	; 0xff
   1143e:	d006      	beq.n	1144e <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   11440:	b002      	add	sp, #8
   11442:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   11444:	4b03      	ldr	r3, [pc, #12]	; (11454 <modlog_insert+0x34>)
   11446:	681a      	ldr	r2, [r3, #0]
   11448:	6022      	str	r2, [r4, #0]
   1144a:	601c      	str	r4, [r3, #0]
   1144c:	e7f5      	b.n	1143a <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   1144e:	4b02      	ldr	r3, [pc, #8]	; (11458 <modlog_insert+0x38>)
   11450:	601c      	str	r4, [r3, #0]
}
   11452:	e7f5      	b.n	11440 <modlog_insert+0x20>
   11454:	20001d64 	.word	0x20001d64
   11458:	20001c84 	.word	0x20001c84

0001145c <modlog_alloc>:
{
   1145c:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1145e:	4805      	ldr	r0, [pc, #20]	; (11474 <modlog_alloc+0x18>)
   11460:	f7fc fbe5 	bl	dc2e <os_memblock_get>
    if (mm != NULL) {
   11464:	4603      	mov	r3, r0
   11466:	b118      	cbz	r0, 11470 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   11468:	2200      	movs	r2, #0
   1146a:	6002      	str	r2, [r0, #0]
   1146c:	6042      	str	r2, [r0, #4]
   1146e:	6082      	str	r2, [r0, #8]
}
   11470:	4618      	mov	r0, r3
   11472:	bd08      	pop	{r3, pc}
   11474:	20001d48 	.word	0x20001d48

00011478 <modlog_infer_handle>:
{
   11478:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   1147a:	4a13      	ldr	r2, [pc, #76]	; (114c8 <modlog_infer_handle+0x50>)
   1147c:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   1147e:	4813      	ldr	r0, [pc, #76]	; (114cc <modlog_infer_handle+0x54>)
   11480:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   11484:	2abf      	cmp	r2, #191	; 0xbf
   11486:	d80b      	bhi.n	114a0 <modlog_infer_handle+0x28>
   11488:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   1148a:	4b10      	ldr	r3, [pc, #64]	; (114cc <modlog_infer_handle+0x54>)
   1148c:	fba3 1302 	umull	r1, r3, r3, r2
   11490:	08db      	lsrs	r3, r3, #3
   11492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11496:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   1149a:	d10b      	bne.n	114b4 <modlog_infer_handle+0x3c>
}
   1149c:	b2c0      	uxtb	r0, r0
   1149e:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   114a0:	f7fa fe7c 	bl	c19c <hal_debugger_connected>
   114a4:	b100      	cbz	r0, 114a8 <modlog_infer_handle+0x30>
   114a6:	be01      	bkpt	0x0001
   114a8:	2300      	movs	r3, #0
   114aa:	461a      	mov	r2, r3
   114ac:	4619      	mov	r1, r3
   114ae:	4618      	mov	r0, r3
   114b0:	f7fb fb78 	bl	cba4 <__assert_func>
    assert(off % elem_sz == 0);
   114b4:	f7fa fe72 	bl	c19c <hal_debugger_connected>
   114b8:	b100      	cbz	r0, 114bc <modlog_infer_handle+0x44>
   114ba:	be01      	bkpt	0x0001
   114bc:	2300      	movs	r3, #0
   114be:	461a      	mov	r2, r3
   114c0:	4619      	mov	r1, r3
   114c2:	4618      	mov	r0, r3
   114c4:	f7fb fb6e 	bl	cba4 <__assert_func>
   114c8:	20001c88 	.word	0x20001c88
   114cc:	aaaaaaab 	.word	0xaaaaaaab

000114d0 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   114d0:	b1c9      	cbz	r1, 11506 <modlog_register_no_lock+0x36>
{
   114d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114d6:	4607      	mov	r7, r0
   114d8:	4616      	mov	r6, r2
   114da:	461d      	mov	r5, r3
   114dc:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   114de:	f7ff ffbd 	bl	1145c <modlog_alloc>
    if (mm == NULL) {
   114e2:	4604      	mov	r4, r0
   114e4:	b190      	cbz	r0, 1150c <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   114e6:	f7ff ffc7 	bl	11478 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   114ea:	f8c4 8004 	str.w	r8, [r4, #4]
   114ee:	7220      	strb	r0, [r4, #8]
   114f0:	7267      	strb	r7, [r4, #9]
   114f2:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   114f4:	4620      	mov	r0, r4
   114f6:	f7ff ff93 	bl	11420 <modlog_insert>

    if (out_handle != NULL) {
   114fa:	b155      	cbz	r5, 11512 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   114fc:	7a23      	ldrb	r3, [r4, #8]
   114fe:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   11500:	2000      	movs	r0, #0
}
   11502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   11506:	f06f 0001 	mvn.w	r0, #1
}
   1150a:	4770      	bx	lr
        return SYS_ENOMEM;
   1150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11510:	e7f7      	b.n	11502 <modlog_register_no_lock+0x32>
    return 0;
   11512:	2000      	movs	r0, #0
   11514:	e7f5      	b.n	11502 <modlog_register_no_lock+0x32>

00011516 <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   11516:	b510      	push	{r4, lr}
   11518:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   1151a:	7a84      	ldrb	r4, [r0, #10]
   1151c:	4294      	cmp	r4, r2
   1151e:	d902      	bls.n	11526 <modlog_append_one+0x10>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   11520:	2000      	movs	r0, #0
}
   11522:	b002      	add	sp, #8
   11524:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   11526:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   1152a:	9401      	str	r4, [sp, #4]
   1152c:	9c04      	ldr	r4, [sp, #16]
   1152e:	9400      	str	r4, [sp, #0]
   11530:	6840      	ldr	r0, [r0, #4]
   11532:	f7ff fd3d 	bl	10fb0 <log_append_body>
        if (rc != 0) {
   11536:	2800      	cmp	r0, #0
   11538:	d0f3      	beq.n	11522 <modlog_append_one+0xc>
            return SYS_EIO;
   1153a:	f06f 0004 	mvn.w	r0, #4
   1153e:	e7f0      	b.n	11522 <modlog_append_one+0xc>

00011540 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   11540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11544:	b083      	sub	sp, #12
   11546:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   1154a:	28ff      	cmp	r0, #255	; 0xff
   1154c:	d030      	beq.n	115b0 <modlog_append_no_lock+0x70>
   1154e:	4605      	mov	r5, r0
   11550:	460e      	mov	r6, r1
   11552:	4617      	mov	r7, r2
   11554:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   11556:	2100      	movs	r1, #0
   11558:	f7ff ff4e 	bl	113f8 <modlog_find_by_module>
    if (mm != NULL) {
   1155c:	4604      	mov	r4, r0
   1155e:	b988      	cbnz	r0, 11584 <modlog_append_no_lock+0x44>
        }
        return 0;
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   11560:	4b17      	ldr	r3, [pc, #92]	; (115c0 <modlog_append_no_lock+0x80>)
   11562:	681c      	ldr	r4, [r3, #0]
   11564:	b314      	cbz	r4, 115ac <modlog_append_no_lock+0x6c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {

        rc = modlog_append_one(mm, module, level, etype, data, len);
   11566:	f8cd 9004 	str.w	r9, [sp, #4]
   1156a:	f8cd 8000 	str.w	r8, [sp]
   1156e:	463b      	mov	r3, r7
   11570:	4632      	mov	r2, r6
   11572:	4629      	mov	r1, r5
   11574:	4620      	mov	r0, r4
   11576:	f7ff ffce 	bl	11516 <modlog_append_one>
        if (rc != 0) {
   1157a:	4603      	mov	r3, r0
   1157c:	b9e0      	cbnz	r0, 115b8 <modlog_append_no_lock+0x78>
         mm = SLIST_NEXT(mm, next)) {
   1157e:	6824      	ldr	r4, [r4, #0]
   11580:	e7f0      	b.n	11564 <modlog_append_no_lock+0x24>
            mm = SLIST_NEXT(mm, next);
   11582:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   11584:	b1bc      	cbz	r4, 115b6 <modlog_append_no_lock+0x76>
   11586:	7a60      	ldrb	r0, [r4, #9]
   11588:	42a8      	cmp	r0, r5
   1158a:	d10d      	bne.n	115a8 <modlog_append_no_lock+0x68>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   1158c:	f8cd 9004 	str.w	r9, [sp, #4]
   11590:	f8cd 8000 	str.w	r8, [sp]
   11594:	463b      	mov	r3, r7
   11596:	4632      	mov	r2, r6
   11598:	4629      	mov	r1, r5
   1159a:	4620      	mov	r0, r4
   1159c:	f7ff ffbb 	bl	11516 <modlog_append_one>
            if (rc != 0) {
   115a0:	4603      	mov	r3, r0
   115a2:	2800      	cmp	r0, #0
   115a4:	d0ed      	beq.n	11582 <modlog_append_no_lock+0x42>
   115a6:	e007      	b.n	115b8 <modlog_append_no_lock+0x78>
        return 0;
   115a8:	2300      	movs	r3, #0
   115aa:	e005      	b.n	115b8 <modlog_append_no_lock+0x78>
            return rc;
        }
    }

    return 0;
   115ac:	2300      	movs	r3, #0
   115ae:	e003      	b.n	115b8 <modlog_append_no_lock+0x78>
        return SYS_EINVAL;
   115b0:	f06f 0301 	mvn.w	r3, #1
   115b4:	e000      	b.n	115b8 <modlog_append_no_lock+0x78>
        return 0;
   115b6:	2300      	movs	r3, #0
}
   115b8:	4618      	mov	r0, r3
   115ba:	b003      	add	sp, #12
   115bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   115c0:	20001c84 	.word	0x20001c84

000115c4 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   115c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115c8:	4604      	mov	r4, r0
   115ca:	460d      	mov	r5, r1
   115cc:	4616      	mov	r6, r2
   115ce:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   115d0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 115f4 <modlog_register+0x30>
   115d4:	4640      	mov	r0, r8
   115d6:	f000 fe80 	bl	122da <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   115da:	463b      	mov	r3, r7
   115dc:	4632      	mov	r2, r6
   115de:	4629      	mov	r1, r5
   115e0:	4620      	mov	r0, r4
   115e2:	f7ff ff75 	bl	114d0 <modlog_register_no_lock>
   115e6:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   115e8:	4640      	mov	r0, r8
   115ea:	f000 fea0 	bl	1232e <rwlock_release_write>

    return rc;
}
   115ee:	4620      	mov	r0, r4
   115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115f4:	20001d68 	.word	0x20001d68

000115f8 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   115f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115fc:	b082      	sub	sp, #8
   115fe:	4604      	mov	r4, r0
   11600:	460d      	mov	r5, r1
   11602:	4616      	mov	r6, r2
   11604:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   11606:	f8df 802c 	ldr.w	r8, [pc, #44]	; 11634 <modlog_append+0x3c>
   1160a:	4640      	mov	r0, r8
   1160c:	f000 fe25 	bl	1225a <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   11610:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   11614:	9300      	str	r3, [sp, #0]
   11616:	463b      	mov	r3, r7
   11618:	4632      	mov	r2, r6
   1161a:	4629      	mov	r1, r5
   1161c:	4620      	mov	r0, r4
   1161e:	f7ff ff8f 	bl	11540 <modlog_append_no_lock>
   11622:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   11624:	4640      	mov	r0, r8
   11626:	f000 fe45 	bl	122b4 <rwlock_release_read>

    return rc;
}
   1162a:	4620      	mov	r0, r4
   1162c:	b002      	add	sp, #8
   1162e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11632:	bf00      	nop
   11634:	20001d68 	.word	0x20001d68

00011638 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   11638:	b40c      	push	{r2, r3}
   1163a:	b530      	push	{r4, r5, lr}
   1163c:	b0a5      	sub	sp, #148	; 0x94
   1163e:	4604      	mov	r4, r0
   11640:	460d      	mov	r5, r1
   11642:	ab28      	add	r3, sp, #160	; 0xa0
   11644:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   11648:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   1164a:	2180      	movs	r1, #128	; 0x80
   1164c:	a803      	add	r0, sp, #12
   1164e:	f01a f89f 	bl	2b790 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   11652:	287f      	cmp	r0, #127	; 0x7f
   11654:	dd00      	ble.n	11658 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   11656:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   11658:	b280      	uxth	r0, r0
   1165a:	9000      	str	r0, [sp, #0]
   1165c:	ab03      	add	r3, sp, #12
   1165e:	2200      	movs	r2, #0
   11660:	4629      	mov	r1, r5
   11662:	4620      	mov	r0, r4
   11664:	f7ff ffc8 	bl	115f8 <modlog_append>
}
   11668:	b025      	add	sp, #148	; 0x94
   1166a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1166e:	b002      	add	sp, #8
   11670:	4770      	bx	lr
	...

00011674 <modlog_init>:

void
modlog_init(void)
{
   11674:	b510      	push	{r4, lr}
   11676:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   11678:	4b28      	ldr	r3, [pc, #160]	; (1171c <modlog_init+0xa8>)
   1167a:	781b      	ldrb	r3, [r3, #0]
   1167c:	b1e3      	cbz	r3, 116b8 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   1167e:	4b28      	ldr	r3, [pc, #160]	; (11720 <modlog_init+0xac>)
   11680:	9300      	str	r3, [sp, #0]
   11682:	4b28      	ldr	r3, [pc, #160]	; (11724 <modlog_init+0xb0>)
   11684:	220c      	movs	r2, #12
   11686:	2110      	movs	r1, #16
   11688:	4827      	ldr	r0, [pc, #156]	; (11728 <modlog_init+0xb4>)
   1168a:	f7fc fa99 	bl	dbc0 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1168e:	b9e8      	cbnz	r0, 116cc <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   11690:	2300      	movs	r3, #0
   11692:	4a26      	ldr	r2, [pc, #152]	; (1172c <modlog_init+0xb8>)
   11694:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   11696:	4a26      	ldr	r2, [pc, #152]	; (11730 <modlog_init+0xbc>)
   11698:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   1169a:	4826      	ldr	r0, [pc, #152]	; (11734 <modlog_init+0xc0>)
   1169c:	f000 fe56 	bl	1234c <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   116a0:	bb08      	cbnz	r0, 116e6 <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   116a2:	f7ff fe67 	bl	11374 <log_console_get>
   116a6:	4601      	mov	r1, r0
   116a8:	2300      	movs	r3, #0
   116aa:	461a      	mov	r2, r3
   116ac:	20ff      	movs	r0, #255	; 0xff
   116ae:	f7ff ff89 	bl	115c4 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   116b2:	bb28      	cbnz	r0, 11700 <modlog_init+0x8c>
#endif
}
   116b4:	b002      	add	sp, #8
   116b6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   116b8:	f7fa fd70 	bl	c19c <hal_debugger_connected>
   116bc:	b100      	cbz	r0, 116c0 <modlog_init+0x4c>
   116be:	be01      	bkpt	0x0001
   116c0:	2300      	movs	r3, #0
   116c2:	461a      	mov	r2, r3
   116c4:	4619      	mov	r1, r3
   116c6:	4618      	mov	r0, r3
   116c8:	f7fb fa6c 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   116cc:	f7fa fd66 	bl	c19c <hal_debugger_connected>
   116d0:	b100      	cbz	r0, 116d4 <modlog_init+0x60>
   116d2:	be01      	bkpt	0x0001
   116d4:	2000      	movs	r0, #0
   116d6:	9000      	str	r0, [sp, #0]
   116d8:	4b17      	ldr	r3, [pc, #92]	; (11738 <modlog_init+0xc4>)
   116da:	681c      	ldr	r4, [r3, #0]
   116dc:	4603      	mov	r3, r0
   116de:	4602      	mov	r2, r0
   116e0:	4601      	mov	r1, r0
   116e2:	47a0      	blx	r4
   116e4:	e7d4      	b.n	11690 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   116e6:	f7fa fd59 	bl	c19c <hal_debugger_connected>
   116ea:	b100      	cbz	r0, 116ee <modlog_init+0x7a>
   116ec:	be01      	bkpt	0x0001
   116ee:	2000      	movs	r0, #0
   116f0:	9000      	str	r0, [sp, #0]
   116f2:	4b11      	ldr	r3, [pc, #68]	; (11738 <modlog_init+0xc4>)
   116f4:	681c      	ldr	r4, [r3, #0]
   116f6:	4603      	mov	r3, r0
   116f8:	4602      	mov	r2, r0
   116fa:	4601      	mov	r1, r0
   116fc:	47a0      	blx	r4
   116fe:	e7d0      	b.n	116a2 <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11700:	f7fa fd4c 	bl	c19c <hal_debugger_connected>
   11704:	b100      	cbz	r0, 11708 <modlog_init+0x94>
   11706:	be01      	bkpt	0x0001
   11708:	2000      	movs	r0, #0
   1170a:	9000      	str	r0, [sp, #0]
   1170c:	4b0a      	ldr	r3, [pc, #40]	; (11738 <modlog_init+0xc4>)
   1170e:	681c      	ldr	r4, [r3, #0]
   11710:	4603      	mov	r3, r0
   11712:	4602      	mov	r2, r0
   11714:	4601      	mov	r1, r0
   11716:	47a0      	blx	r4
}
   11718:	e7cc      	b.n	116b4 <modlog_init+0x40>
   1171a:	bf00      	nop
   1171c:	20001e3c 	.word	0x20001e3c
   11720:	0002da4c 	.word	0x0002da4c
   11724:	20001c88 	.word	0x20001c88
   11728:	20001d48 	.word	0x20001d48
   1172c:	20001d64 	.word	0x20001d64
   11730:	20001c84 	.word	0x20001c84
   11734:	20001d68 	.word	0x20001d68
   11738:	2000028c 	.word	0x2000028c

0001173c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1173c:	b530      	push	{r4, r5, lr}
   1173e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   11740:	7885      	ldrb	r5, [r0, #2]
   11742:	4b20      	ldr	r3, [pc, #128]	; (117c4 <mfg_seek_next_aux+0x88>)
   11744:	681b      	ldr	r3, [r3, #0]
   11746:	429d      	cmp	r5, r3
   11748:	da33      	bge.n	117b2 <mfg_seek_next_aux+0x76>
   1174a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1174c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   11750:	a901      	add	r1, sp, #4
   11752:	4a1d      	ldr	r2, [pc, #116]	; (117c8 <mfg_seek_next_aux+0x8c>)
   11754:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   11758:	f7ff f902 	bl	10960 <flash_area_open>
    if (rc != 0) {
   1175c:	bb60      	cbnz	r0, 117b8 <mfg_seek_next_aux+0x7c>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1175e:	6862      	ldr	r2, [r4, #4]
   11760:	b9c2      	cbnz	r2, 11794 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   11762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   11766:	4b18      	ldr	r3, [pc, #96]	; (117c8 <mfg_seek_next_aux+0x8c>)
   11768:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   1176c:	686b      	ldr	r3, [r5, #4]
   1176e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   11770:	6861      	ldr	r1, [r4, #4]
   11772:	9801      	ldr	r0, [sp, #4]
   11774:	6883      	ldr	r3, [r0, #8]
   11776:	3b08      	subs	r3, #8
   11778:	4299      	cmp	r1, r3
   1177a:	d313      	bcc.n	117a4 <mfg_seek_next_aux+0x68>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1177c:	78a3      	ldrb	r3, [r4, #2]
   1177e:	1c59      	adds	r1, r3, #1
   11780:	4a10      	ldr	r2, [pc, #64]	; (117c4 <mfg_seek_next_aux+0x88>)
   11782:	6812      	ldr	r2, [r2, #0]
   11784:	4291      	cmp	r1, r2
   11786:	da0a      	bge.n	1179e <mfg_seek_next_aux+0x62>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   11788:	2200      	movs	r2, #0
   1178a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1178c:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1178e:	f06f 0005 	mvn.w	r0, #5
   11792:	e00c      	b.n	117ae <mfg_seek_next_aux+0x72>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   11794:	7863      	ldrb	r3, [r4, #1]
   11796:	4413      	add	r3, r2
   11798:	3302      	adds	r3, #2
   1179a:	6063      	str	r3, [r4, #4]
   1179c:	e7e8      	b.n	11770 <mfg_seek_next_aux+0x34>
            rc = SYS_EDONE;
   1179e:	f06f 000e 	mvn.w	r0, #14
        }
        goto done;
   117a2:	e004      	b.n	117ae <mfg_seek_next_aux+0x72>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   117a4:	2302      	movs	r3, #2
   117a6:	4622      	mov	r2, r4
   117a8:	f7ff f932 	bl	10a10 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   117ac:	b938      	cbnz	r0, 117be <mfg_seek_next_aux+0x82>
    }

done:
    flash_area_close(fap);
    return rc;
}
   117ae:	b003      	add	sp, #12
   117b0:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   117b2:	f06f 0001 	mvn.w	r0, #1
   117b6:	e7fa      	b.n	117ae <mfg_seek_next_aux+0x72>
        return SYS_EIO;
   117b8:	f06f 0004 	mvn.w	r0, #4
   117bc:	e7f7      	b.n	117ae <mfg_seek_next_aux+0x72>
        rc = SYS_EIO;
   117be:	f06f 0004 	mvn.w	r0, #4
   117c2:	e7f4      	b.n	117ae <mfg_seek_next_aux+0x72>
   117c4:	20001da8 	.word	0x20001da8
   117c8:	20001d90 	.word	0x20001d90

000117cc <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   117cc:	b530      	push	{r4, r5, lr}
   117ce:	b085      	sub	sp, #20
   117d0:	4605      	mov	r5, r0
   117d2:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   117d4:	a903      	add	r1, sp, #12
   117d6:	f7ff f8c3 	bl	10960 <flash_area_open>
    if (rc != 0) {
   117da:	b9d8      	cbnz	r0, 11814 <mfg_read_mmr+0x48>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   117dc:	9803      	ldr	r0, [sp, #12]
   117de:	6881      	ldr	r1, [r0, #8]
   117e0:	2308      	movs	r3, #8
   117e2:	aa01      	add	r2, sp, #4
   117e4:	3908      	subs	r1, #8
   117e6:	f7ff f913 	bl	10a10 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   117ea:	b9b0      	cbnz	r0, 1181a <mfg_read_mmr+0x4e>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   117ec:	9a02      	ldr	r2, [sp, #8]
   117ee:	4b11      	ldr	r3, [pc, #68]	; (11834 <mfg_read_mmr+0x68>)
   117f0:	429a      	cmp	r2, r3
   117f2:	d115      	bne.n	11820 <mfg_read_mmr+0x54>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   117f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   117f8:	2b02      	cmp	r3, #2
   117fa:	d114      	bne.n	11826 <mfg_read_mmr+0x5a>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   117fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   11800:	9b03      	ldr	r3, [sp, #12]
   11802:	689b      	ldr	r3, [r3, #8]
   11804:	429a      	cmp	r2, r3
   11806:	d811      	bhi.n	1182c <mfg_read_mmr+0x60>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   11808:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1180a:	7025      	strb	r5, [r4, #0]
   1180c:	6063      	str	r3, [r4, #4]
   1180e:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   11810:	b005      	add	sp, #20
   11812:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   11814:	f06f 0004 	mvn.w	r0, #4
   11818:	e7fa      	b.n	11810 <mfg_read_mmr+0x44>
        return SYS_EIO;
   1181a:	f06f 0004 	mvn.w	r0, #4
   1181e:	e7f7      	b.n	11810 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   11820:	f06f 0008 	mvn.w	r0, #8
   11824:	e7f4      	b.n	11810 <mfg_read_mmr+0x44>
        return SYS_ENOTSUP;
   11826:	f06f 000b 	mvn.w	r0, #11
   1182a:	e7f1      	b.n	11810 <mfg_read_mmr+0x44>
        return SYS_ENODEV;
   1182c:	f06f 0008 	mvn.w	r0, #8
   11830:	e7ee      	b.n	11810 <mfg_read_mmr+0x44>
   11832:	bf00      	nop
   11834:	3bb2a269 	.word	0x3bb2a269

00011838 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   11838:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1183a:	2300      	movs	r3, #0
   1183c:	4a10      	ldr	r2, [pc, #64]	; (11880 <mfg_read_next_mmr+0x48>)
   1183e:	6811      	ldr	r1, [r2, #0]
   11840:	4299      	cmp	r1, r3
   11842:	dd08      	ble.n	11856 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   11844:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   11848:	490e      	ldr	r1, [pc, #56]	; (11884 <mfg_read_next_mmr+0x4c>)
   1184a:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
   1184e:	4282      	cmp	r2, r0
   11850:	d010      	beq.n	11874 <mfg_read_next_mmr+0x3c>
    for (i = 0; i < mfg_num_mmrs; i++) {
   11852:	3301      	adds	r3, #1
   11854:	e7f2      	b.n	1183c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   11856:	2901      	cmp	r1, #1
   11858:	dc0f      	bgt.n	1187a <mfg_read_next_mmr+0x42>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1185a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1185e:	4b09      	ldr	r3, [pc, #36]	; (11884 <mfg_read_next_mmr+0x4c>)
   11860:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11864:	f7ff ffb2 	bl	117cc <mfg_read_mmr>
    if (rc != 0) {
   11868:	b930      	cbnz	r0, 11878 <mfg_read_next_mmr+0x40>
        return rc;
    }

    mfg_num_mmrs++;
   1186a:	4a05      	ldr	r2, [pc, #20]	; (11880 <mfg_read_next_mmr+0x48>)
   1186c:	6813      	ldr	r3, [r2, #0]
   1186e:	3301      	adds	r3, #1
   11870:	6013      	str	r3, [r2, #0]
    return 0;
   11872:	e001      	b.n	11878 <mfg_read_next_mmr+0x40>
            return SYS_EALREADY;
   11874:	f06f 000a 	mvn.w	r0, #10
}
   11878:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1187a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1187e:	e7fb      	b.n	11878 <mfg_read_next_mmr+0x40>
   11880:	20001da8 	.word	0x20001da8
   11884:	20001d90 	.word	0x20001d90

00011888 <mfg_open_flash_area>:
{
   11888:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1188a:	7883      	ldrb	r3, [r0, #2]
   1188c:	4a0c      	ldr	r2, [pc, #48]	; (118c0 <mfg_open_flash_area+0x38>)
   1188e:	6812      	ldr	r2, [r2, #0]
   11890:	4293      	cmp	r3, r2
   11892:	da08      	bge.n	118a6 <mfg_open_flash_area+0x1e>
    rc = flash_area_open(mmr->area_id, fap);
   11894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11898:	4a0a      	ldr	r2, [pc, #40]	; (118c4 <mfg_open_flash_area+0x3c>)
   1189a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1189e:	f7ff f85f 	bl	10960 <flash_area_open>
    if (rc != 0) {
   118a2:	b950      	cbnz	r0, 118ba <mfg_open_flash_area+0x32>
}
   118a4:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   118a6:	f7fa fc79 	bl	c19c <hal_debugger_connected>
   118aa:	b100      	cbz	r0, 118ae <mfg_open_flash_area+0x26>
   118ac:	be01      	bkpt	0x0001
   118ae:	2300      	movs	r3, #0
   118b0:	461a      	mov	r2, r3
   118b2:	4619      	mov	r1, r3
   118b4:	4618      	mov	r0, r3
   118b6:	f7fb f975 	bl	cba4 <__assert_func>
        return SYS_EIO;
   118ba:	f06f 0004 	mvn.w	r0, #4
   118be:	e7f1      	b.n	118a4 <mfg_open_flash_area+0x1c>
   118c0:	20001da8 	.word	0x20001da8
   118c4:	20001d90 	.word	0x20001d90

000118c8 <mfg_read_tlv_body>:
{
   118c8:	b570      	push	{r4, r5, r6, lr}
   118ca:	b082      	sub	sp, #8
   118cc:	4606      	mov	r6, r0
   118ce:	460c      	mov	r4, r1
   118d0:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   118d2:	a901      	add	r1, sp, #4
   118d4:	f7ff ffd8 	bl	11888 <mfg_open_flash_area>
    if (rc != 0) {
   118d8:	b108      	cbz	r0, 118de <mfg_read_tlv_body+0x16>
}
   118da:	b002      	add	sp, #8
   118dc:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   118de:	462a      	mov	r2, r5
   118e0:	2100      	movs	r1, #0
   118e2:	4620      	mov	r0, r4
   118e4:	f7fd f88d 	bl	ea02 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   118e8:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   118ea:	6871      	ldr	r1, [r6, #4]
   118ec:	42ab      	cmp	r3, r5
   118ee:	bfa8      	it	ge
   118f0:	462b      	movge	r3, r5
   118f2:	4622      	mov	r2, r4
   118f4:	3102      	adds	r1, #2
   118f6:	9801      	ldr	r0, [sp, #4]
   118f8:	f7ff f88a 	bl	10a10 <flash_area_read>
    if (rc != 0) {
   118fc:	2800      	cmp	r0, #0
   118fe:	d0ec      	beq.n	118da <mfg_read_tlv_body+0x12>
        return SYS_EIO;
   11900:	f06f 0004 	mvn.w	r0, #4
   11904:	e7e9      	b.n	118da <mfg_read_tlv_body+0x12>

00011906 <mfg_seek_next>:
{
   11906:	b510      	push	{r4, lr}
   11908:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1190a:	4620      	mov	r0, r4
   1190c:	f7ff ff16 	bl	1173c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   11910:	f110 0f06 	cmn.w	r0, #6
   11914:	d0f9      	beq.n	1190a <mfg_seek_next+0x4>
}
   11916:	bd10      	pop	{r4, pc}

00011918 <mfg_seek_next_with_type>:
{
   11918:	b538      	push	{r3, r4, r5, lr}
   1191a:	4604      	mov	r4, r0
   1191c:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1191e:	4620      	mov	r0, r4
   11920:	f7ff fff1 	bl	11906 <mfg_seek_next>
        if (rc != 0) {
   11924:	4602      	mov	r2, r0
   11926:	b910      	cbnz	r0, 1192e <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   11928:	7823      	ldrb	r3, [r4, #0]
   1192a:	42ab      	cmp	r3, r5
   1192c:	d1f7      	bne.n	1191e <mfg_seek_next_with_type+0x6>
}
   1192e:	4610      	mov	r0, r2
   11930:	bd38      	pop	{r3, r4, r5, pc}

00011932 <mfg_read_tlv_mmr_ref>:
{
   11932:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   11934:	2201      	movs	r2, #1
   11936:	f7ff ffc7 	bl	118c8 <mfg_read_tlv_body>
}
   1193a:	bd08      	pop	{r3, pc}

0001193c <mfg_read_tlv_hash>:
{
   1193c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_hash, MFG_HASH_SZ);
   1193e:	2220      	movs	r2, #32
   11940:	f7ff ffc2 	bl	118c8 <mfg_read_tlv_body>
}
   11944:	bd08      	pop	{r3, pc}
	...

00011948 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   11948:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1194a:	4b0d      	ldr	r3, [pc, #52]	; (11980 <mfg_init+0x38>)
   1194c:	781b      	ldrb	r3, [r3, #0]
   1194e:	b94b      	cbnz	r3, 11964 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   11950:	4b0b      	ldr	r3, [pc, #44]	; (11980 <mfg_init+0x38>)
   11952:	2201      	movs	r2, #1
   11954:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   11956:	4b0b      	ldr	r3, [pc, #44]	; (11984 <mfg_init+0x3c>)
   11958:	781b      	ldrb	r3, [r3, #0]
   1195a:	b123      	cbz	r3, 11966 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1195c:	2000      	movs	r0, #0
   1195e:	f7ff ff6b 	bl	11838 <mfg_read_next_mmr>
    if (rc != 0) {
   11962:	b150      	cbz	r0, 1197a <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
   11964:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   11966:	f7fa fc19 	bl	c19c <hal_debugger_connected>
   1196a:	b100      	cbz	r0, 1196e <mfg_init+0x26>
   1196c:	be01      	bkpt	0x0001
   1196e:	2300      	movs	r3, #0
   11970:	461a      	mov	r2, r3
   11972:	4619      	mov	r1, r3
   11974:	4618      	mov	r0, r3
   11976:	f7fb f915 	bl	cba4 <__assert_func>
    rc = mfg_read_mmr_refs();
   1197a:	f000 f80d 	bl	11998 <mfg_read_mmr_refs>
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
   1197e:	e7f1      	b.n	11964 <mfg_init+0x1c>
   11980:	20001d8c 	.word	0x20001d8c
   11984:	20001e3c 	.word	0x20001e3c

00011988 <mfg_open>:
{
   11988:	b510      	push	{r4, lr}
   1198a:	4604      	mov	r4, r0
    mfg_init();
   1198c:	f7ff ffdc 	bl	11948 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   11990:	2300      	movs	r3, #0
   11992:	6023      	str	r3, [r4, #0]
   11994:	6063      	str	r3, [r4, #4]
}
   11996:	bd10      	pop	{r4, pc}

00011998 <mfg_read_mmr_refs>:
{
   11998:	b500      	push	{lr}
   1199a:	b085      	sub	sp, #20
    mfg_open(&reader);
   1199c:	a801      	add	r0, sp, #4
   1199e:	f7ff fff3 	bl	11988 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   119a2:	2104      	movs	r1, #4
   119a4:	eb0d 0001 	add.w	r0, sp, r1
   119a8:	f7ff ffb6 	bl	11918 <mfg_seek_next_with_type>
        switch (rc) {
   119ac:	f110 0f0f 	cmn.w	r0, #15
   119b0:	d00f      	beq.n	119d2 <mfg_read_mmr_refs+0x3a>
   119b2:	b978      	cbnz	r0, 119d4 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   119b4:	a903      	add	r1, sp, #12
   119b6:	a801      	add	r0, sp, #4
   119b8:	f7ff ffbb 	bl	11932 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   119bc:	b950      	cbnz	r0, 119d4 <mfg_read_mmr_refs+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   119be:	f89d 000c 	ldrb.w	r0, [sp, #12]
   119c2:	f7ff ff39 	bl	11838 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   119c6:	2800      	cmp	r0, #0
   119c8:	d0eb      	beq.n	119a2 <mfg_read_mmr_refs+0xa>
   119ca:	f110 0f0b 	cmn.w	r0, #11
   119ce:	d0e8      	beq.n	119a2 <mfg_read_mmr_refs+0xa>
   119d0:	e000      	b.n	119d4 <mfg_read_mmr_refs+0x3c>
        switch (rc) {
   119d2:	2000      	movs	r0, #0
}
   119d4:	b005      	add	sp, #20
   119d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000119dc <reboot_conf_export>:
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    char str[12];

    if (tgt == CONF_EXPORT_SHOW) {
   119dc:	2901      	cmp	r1, #1
   119de:	d001      	beq.n	119e4 <reboot_conf_export+0x8>
        func("reboot/written",
             conf_str_from_value(CONF_BOOL, &log_reboot_written, str,
                                 sizeof str));
    }
    return 0;
}
   119e0:	2000      	movs	r0, #0
   119e2:	4770      	bx	lr
{
   119e4:	b510      	push	{r4, lr}
   119e6:	b084      	sub	sp, #16
   119e8:	4604      	mov	r4, r0
        func("reboot/reboot_cnt",
   119ea:	230c      	movs	r3, #12
   119ec:	aa01      	add	r2, sp, #4
   119ee:	4909      	ldr	r1, [pc, #36]	; (11a14 <reboot_conf_export+0x38>)
   119f0:	2003      	movs	r0, #3
   119f2:	f7fd fdb1 	bl	f558 <conf_str_from_value>
   119f6:	4601      	mov	r1, r0
   119f8:	4807      	ldr	r0, [pc, #28]	; (11a18 <reboot_conf_export+0x3c>)
   119fa:	47a0      	blx	r4
        func("reboot/written",
   119fc:	230c      	movs	r3, #12
   119fe:	aa01      	add	r2, sp, #4
   11a00:	4906      	ldr	r1, [pc, #24]	; (11a1c <reboot_conf_export+0x40>)
   11a02:	200a      	movs	r0, #10
   11a04:	f7fd fda8 	bl	f558 <conf_str_from_value>
   11a08:	4601      	mov	r1, r0
   11a0a:	4805      	ldr	r0, [pc, #20]	; (11a20 <reboot_conf_export+0x44>)
   11a0c:	47a0      	blx	r4
}
   11a0e:	2000      	movs	r0, #0
   11a10:	b004      	add	sp, #16
   11a12:	bd10      	pop	{r4, pc}
   11a14:	20001dae 	.word	0x20001dae
   11a18:	0002da60 	.word	0x0002da60
   11a1c:	20001dac 	.word	0x20001dac
   11a20:	0002da74 	.word	0x0002da74

00011a24 <reboot_conf_get>:
    if (argc == 1) {
   11a24:	2801      	cmp	r0, #1
   11a26:	d11d      	bne.n	11a64 <reboot_conf_get+0x40>
{
   11a28:	b570      	push	{r4, r5, r6, lr}
   11a2a:	4614      	mov	r4, r2
   11a2c:	461d      	mov	r5, r3
        if (!strcmp(argv[0], "reboot_cnt")) {
   11a2e:	680e      	ldr	r6, [r1, #0]
   11a30:	490d      	ldr	r1, [pc, #52]	; (11a68 <reboot_conf_get+0x44>)
   11a32:	4630      	mov	r0, r6
   11a34:	f7fd f801 	bl	ea3a <strcmp>
   11a38:	b130      	cbz	r0, 11a48 <reboot_conf_get+0x24>
        } else if (!strcmp(argv[0], "written")) {
   11a3a:	490c      	ldr	r1, [pc, #48]	; (11a6c <reboot_conf_get+0x48>)
   11a3c:	4630      	mov	r0, r6
   11a3e:	f7fc fffc 	bl	ea3a <strcmp>
   11a42:	b140      	cbz	r0, 11a56 <reboot_conf_get+0x32>
    return NULL;
   11a44:	2000      	movs	r0, #0
}
   11a46:	bd70      	pop	{r4, r5, r6, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt, buf, max_len);
   11a48:	462b      	mov	r3, r5
   11a4a:	4622      	mov	r2, r4
   11a4c:	4908      	ldr	r1, [pc, #32]	; (11a70 <reboot_conf_get+0x4c>)
   11a4e:	2003      	movs	r0, #3
   11a50:	f7fd fd82 	bl	f558 <conf_str_from_value>
   11a54:	e7f7      	b.n	11a46 <reboot_conf_get+0x22>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   11a56:	462b      	mov	r3, r5
   11a58:	4622      	mov	r2, r4
   11a5a:	4906      	ldr	r1, [pc, #24]	; (11a74 <reboot_conf_get+0x50>)
   11a5c:	200a      	movs	r0, #10
   11a5e:	f7fd fd7b 	bl	f558 <conf_str_from_value>
   11a62:	e7f0      	b.n	11a46 <reboot_conf_get+0x22>
    return NULL;
   11a64:	2000      	movs	r0, #0
}
   11a66:	4770      	bx	lr
   11a68:	0002da84 	.word	0x0002da84
   11a6c:	0002da90 	.word	0x0002da90
   11a70:	20001dae 	.word	0x20001dae
   11a74:	20001dac 	.word	0x20001dac

00011a78 <reboot_conf_set>:
    if (argc == 1) {
   11a78:	2801      	cmp	r0, #1
   11a7a:	d001      	beq.n	11a80 <reboot_conf_set+0x8>
    return OS_ENOENT;
   11a7c:	200a      	movs	r0, #10
}
   11a7e:	4770      	bx	lr
{
   11a80:	b538      	push	{r3, r4, r5, lr}
   11a82:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   11a84:	680d      	ldr	r5, [r1, #0]
   11a86:	490d      	ldr	r1, [pc, #52]	; (11abc <reboot_conf_set+0x44>)
   11a88:	4628      	mov	r0, r5
   11a8a:	f7fc ffd6 	bl	ea3a <strcmp>
   11a8e:	b130      	cbz	r0, 11a9e <reboot_conf_set+0x26>
        } else if (!strcmp(argv[0], "written")) {
   11a90:	490b      	ldr	r1, [pc, #44]	; (11ac0 <reboot_conf_set+0x48>)
   11a92:	4628      	mov	r0, r5
   11a94:	f7fc ffd1 	bl	ea3a <strcmp>
   11a98:	b140      	cbz	r0, 11aac <reboot_conf_set+0x34>
    return OS_ENOENT;
   11a9a:	200a      	movs	r0, #10
}
   11a9c:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   11a9e:	2302      	movs	r3, #2
   11aa0:	4a08      	ldr	r2, [pc, #32]	; (11ac4 <reboot_conf_set+0x4c>)
   11aa2:	2103      	movs	r1, #3
   11aa4:	4620      	mov	r0, r4
   11aa6:	f7fd fc9c 	bl	f3e2 <conf_value_from_str>
   11aaa:	e7f7      	b.n	11a9c <reboot_conf_set+0x24>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   11aac:	2301      	movs	r3, #1
   11aae:	4a06      	ldr	r2, [pc, #24]	; (11ac8 <reboot_conf_set+0x50>)
   11ab0:	2103      	movs	r1, #3
   11ab2:	4620      	mov	r0, r4
   11ab4:	f7fd fc95 	bl	f3e2 <conf_value_from_str>
   11ab8:	e7f0      	b.n	11a9c <reboot_conf_set+0x24>
   11aba:	bf00      	nop
   11abc:	0002da84 	.word	0x0002da84
   11ac0:	0002da90 	.word	0x0002da90
   11ac4:	20001dae 	.word	0x20001dae
   11ac8:	20001dac 	.word	0x20001dac

00011acc <log_reboot_init_fcb>:
{
   11acc:	b510      	push	{r4, lr}
   11ace:	b084      	sub	sp, #16
    if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   11ad0:	a903      	add	r1, sp, #12
   11ad2:	2010      	movs	r0, #16
   11ad4:	f7fe ff44 	bl	10960 <flash_area_open>
   11ad8:	2800      	cmp	r0, #0
   11ada:	d133      	bne.n	11b44 <log_reboot_init_fcb+0x78>
    reboot_log_fcb.fl_entries = MYNEWT_VAL(REBOOT_LOG_ENTRY_COUNT);
   11adc:	4b1b      	ldr	r3, [pc, #108]	; (11b4c <log_reboot_init_fcb+0x80>)
   11ade:	220a      	movs	r2, #10
   11ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    reboot_sector = *ptr;
   11ae4:	9a03      	ldr	r2, [sp, #12]
   11ae6:	4c1a      	ldr	r4, [pc, #104]	; (11b50 <log_reboot_init_fcb+0x84>)
   11ae8:	ca07      	ldmia	r2, {r0, r1, r2}
   11aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fcbp->f_magic = 0x7EADBADF;
   11aee:	4a19      	ldr	r2, [pc, #100]	; (11b54 <log_reboot_init_fcb+0x88>)
   11af0:	601a      	str	r2, [r3, #0]
    fcbp->f_version = g_log_info.li_version;
   11af2:	4a19      	ldr	r2, [pc, #100]	; (11b58 <log_reboot_init_fcb+0x8c>)
   11af4:	7912      	ldrb	r2, [r2, #4]
   11af6:	711a      	strb	r2, [r3, #4]
    fcbp->f_sector_cnt = 1;
   11af8:	2201      	movs	r2, #1
   11afa:	715a      	strb	r2, [r3, #5]
    fcbp->f_sectors = &reboot_sector;
   11afc:	609c      	str	r4, [r3, #8]
    rc = fcb_init(fcbp);
   11afe:	4618      	mov	r0, r3
   11b00:	f017 fe02 	bl	29708 <fcb_init>
    if (rc) {
   11b04:	b148      	cbz	r0, 11b1a <log_reboot_init_fcb+0x4e>
        flash_area_erase(ptr, 0, ptr->fa_size);
   11b06:	9803      	ldr	r0, [sp, #12]
   11b08:	6882      	ldr	r2, [r0, #8]
   11b0a:	2100      	movs	r1, #0
   11b0c:	f7fe ffa6 	bl	10a5c <flash_area_erase>
        rc = fcb_init(fcbp);
   11b10:	480e      	ldr	r0, [pc, #56]	; (11b4c <log_reboot_init_fcb+0x80>)
   11b12:	f017 fdf9 	bl	29708 <fcb_init>
        if (rc) {
   11b16:	4603      	mov	r3, r0
   11b18:	b948      	cbnz	r0, 11b2e <log_reboot_init_fcb+0x62>
    rc = log_register("reboot_log", &reboot_log, &log_fcb_handler,
   11b1a:	2300      	movs	r3, #0
   11b1c:	9300      	str	r3, [sp, #0]
   11b1e:	4b0b      	ldr	r3, [pc, #44]	; (11b4c <log_reboot_init_fcb+0x80>)
   11b20:	4a0e      	ldr	r2, [pc, #56]	; (11b5c <log_reboot_init_fcb+0x90>)
   11b22:	490f      	ldr	r1, [pc, #60]	; (11b60 <log_reboot_init_fcb+0x94>)
   11b24:	480f      	ldr	r0, [pc, #60]	; (11b64 <log_reboot_init_fcb+0x98>)
   11b26:	f7ff fa93 	bl	11050 <log_register>
    if (rc != 0) {
   11b2a:	4603      	mov	r3, r0
   11b2c:	b110      	cbz	r0, 11b34 <log_reboot_init_fcb+0x68>
}
   11b2e:	4618      	mov	r0, r3
   11b30:	b004      	add	sp, #16
   11b32:	bd10      	pop	{r4, pc}
    rc = modlog_register(LOG_MODULE_REBOOT, &reboot_log, LOG_SYSLEVEL,
   11b34:	2300      	movs	r3, #0
   11b36:	461a      	mov	r2, r3
   11b38:	4909      	ldr	r1, [pc, #36]	; (11b60 <log_reboot_init_fcb+0x94>)
   11b3a:	2006      	movs	r0, #6
   11b3c:	f7ff fd42 	bl	115c4 <modlog_register>
   11b40:	4603      	mov	r3, r0
    if (rc != 0) {
   11b42:	e7f4      	b.n	11b2e <log_reboot_init_fcb+0x62>
        return SYS_EUNKNOWN;
   11b44:	f06f 030c 	mvn.w	r3, #12
   11b48:	e7f1      	b.n	11b2e <log_reboot_init_fcb+0x62>
   11b4a:	bf00      	nop
   11b4c:	20001dcc 	.word	0x20001dcc
   11b50:	20001e00 	.word	0x20001e00
   11b54:	7eadbadf 	.word	0x7eadbadf
   11b58:	20001bd0 	.word	0x20001bd0
   11b5c:	0002ea5c 	.word	0x0002ea5c
   11b60:	20001db0 	.word	0x20001db0
   11b64:	0002da98 	.word	0x0002da98

00011b68 <log_reboot_init_console>:
{
   11b68:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   11b6a:	f7ff fc03 	bl	11374 <log_console_get>
   11b6e:	4601      	mov	r1, r0
   11b70:	2300      	movs	r3, #0
   11b72:	461a      	mov	r2, r3
   11b74:	2006      	movs	r0, #6
   11b76:	f7ff fd25 	bl	115c4 <modlog_register>
}
   11b7a:	bd08      	pop	{r3, pc}

00011b7c <log_reboot_reason_str>:

const char *
log_reboot_reason_str(enum hal_reset_reason reason)
{
   11b7c:	b510      	push	{r4, lr}
    static char str_reason[MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE)];

    if (reason >= HAL_RESET_OTHER) {
   11b7e:	28ff      	cmp	r0, #255	; 0xff
   11b80:	d808      	bhi.n	11b94 <log_reboot_reason_str+0x18>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
        return str_reason;
    }

    switch (reason) {
   11b82:	1e43      	subs	r3, r0, #1
   11b84:	2b07      	cmp	r3, #7
   11b86:	d81d      	bhi.n	11bc4 <log_reboot_reason_str+0x48>
   11b88:	e8df f003 	tbb	[pc, r3]
   11b8c:	1210250e 	.word	0x1210250e
   11b90:	1a181614 	.word	0x1a181614
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
   11b94:	4c11      	ldr	r4, [pc, #68]	; (11bdc <log_reboot_reason_str+0x60>)
   11b96:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   11b9a:	4a11      	ldr	r2, [pc, #68]	; (11be0 <log_reboot_reason_str+0x64>)
   11b9c:	2120      	movs	r1, #32
   11b9e:	4620      	mov	r0, r4
   11ba0:	f019 fe13 	bl	2b7ca <snprintf>
        return str_reason;
   11ba4:	4620      	mov	r0, r4
    default:
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
        return str_reason;
        break;
    }
}
   11ba6:	bd10      	pop	{r4, pc}
    switch (reason) {
   11ba8:	480e      	ldr	r0, [pc, #56]	; (11be4 <log_reboot_reason_str+0x68>)
   11baa:	e7fc      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "WDOG";
   11bac:	480e      	ldr	r0, [pc, #56]	; (11be8 <log_reboot_reason_str+0x6c>)
   11bae:	e7fa      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "SOFT";
   11bb0:	480e      	ldr	r0, [pc, #56]	; (11bec <log_reboot_reason_str+0x70>)
   11bb2:	e7f8      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "BROWNOUT";
   11bb4:	480e      	ldr	r0, [pc, #56]	; (11bf0 <log_reboot_reason_str+0x74>)
   11bb6:	e7f6      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "REQUESTED";
   11bb8:	480e      	ldr	r0, [pc, #56]	; (11bf4 <log_reboot_reason_str+0x78>)
   11bba:	e7f4      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "SYSTEM_OFF_INT";
   11bbc:	480e      	ldr	r0, [pc, #56]	; (11bf8 <log_reboot_reason_str+0x7c>)
   11bbe:	e7f2      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "DFU";
   11bc0:	480e      	ldr	r0, [pc, #56]	; (11bfc <log_reboot_reason_str+0x80>)
   11bc2:	e7f0      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
   11bc4:	4c05      	ldr	r4, [pc, #20]	; (11bdc <log_reboot_reason_str+0x60>)
   11bc6:	4603      	mov	r3, r0
   11bc8:	4a0d      	ldr	r2, [pc, #52]	; (11c00 <log_reboot_reason_str+0x84>)
   11bca:	2120      	movs	r1, #32
   11bcc:	4620      	mov	r0, r4
   11bce:	f019 fdfc 	bl	2b7ca <snprintf>
        return str_reason;
   11bd2:	4620      	mov	r0, r4
   11bd4:	e7e7      	b.n	11ba6 <log_reboot_reason_str+0x2a>
        return "RESET_PIN";
   11bd6:	480b      	ldr	r0, [pc, #44]	; (11c04 <log_reboot_reason_str+0x88>)
        break;
   11bd8:	e7e5      	b.n	11ba6 <log_reboot_reason_str+0x2a>
   11bda:	bf00      	nop
   11bdc:	20001e0c 	.word	0x20001e0c
   11be0:	0002daf4 	.word	0x0002daf4
   11be4:	0002daec 	.word	0x0002daec
   11be8:	0002dab0 	.word	0x0002dab0
   11bec:	0002dab8 	.word	0x0002dab8
   11bf0:	0002dac0 	.word	0x0002dac0
   11bf4:	0002dacc 	.word	0x0002dacc
   11bf8:	0002dad8 	.word	0x0002dad8
   11bfc:	0002dae8 	.word	0x0002dae8
   11c00:	0002db00 	.word	0x0002db00
   11c04:	0002daa4 	.word	0x0002daa4

00011c08 <log_reboot_write>:
{
   11c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c0a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   11c0e:	4607      	mov	r7, r0
        if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   11c10:	a904      	add	r1, sp, #16
   11c12:	2010      	movs	r0, #16
   11c14:	f7fe fea4 	bl	10960 <flash_area_open>
   11c18:	b120      	cbz	r0, 11c24 <log_reboot_write+0x1c>
            return 0;
   11c1a:	2600      	movs	r6, #0
}
   11c1c:	4630      	mov	r0, r6
   11c1e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   11c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_read_info(boot_current_slot, &ver, hash, &flags);
   11c24:	ab05      	add	r3, sp, #20
   11c26:	aa92      	add	r2, sp, #584	; 0x248
   11c28:	a99a      	add	r1, sp, #616	; 0x268
   11c2a:	4887      	ldr	r0, [pc, #540]	; (11e48 <log_reboot_write+0x240>)
   11c2c:	6800      	ldr	r0, [r0, #0]
   11c2e:	f000 ffb3 	bl	12b98 <img_mgmt_read_info>
    if (rc != 0) {
   11c32:	4606      	mov	r6, r0
   11c34:	2800      	cmp	r0, #0
   11c36:	d1f1      	bne.n	11c1c <log_reboot_write+0x14>
    memset(cbor_enc_buf, 0, sizeof cbor_enc_buf);
   11c38:	f44f 7480 	mov.w	r4, #256	; 0x100
   11c3c:	4622      	mov	r2, r4
   11c3e:	2100      	movs	r1, #0
   11c40:	a812      	add	r0, sp, #72	; 0x48
   11c42:	f7fc fede 	bl	ea02 <memset>
    cbor_buf_writer_init(&writer, cbor_enc_buf, sizeof cbor_enc_buf);
   11c46:	4622      	mov	r2, r4
   11c48:	a912      	add	r1, sp, #72	; 0x48
   11c4a:	a80e      	add	r0, sp, #56	; 0x38
   11c4c:	f016 fb06 	bl	2825c <cbor_buf_writer_init>
    cbor_encoder_init(&enc, &writer.enc, 0);
   11c50:	2200      	movs	r2, #0
   11c52:	a90e      	add	r1, sp, #56	; 0x38
   11c54:	a80a      	add	r0, sp, #40	; 0x28
   11c56:	f016 fc2b 	bl	284b0 <cbor_encoder_init>
    rc = cbor_encoder_create_map(&enc, &map, CborIndefiniteLength);
   11c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11c5e:	a906      	add	r1, sp, #24
   11c60:	a80a      	add	r0, sp, #40	; 0x28
   11c62:	f016 fce3 	bl	2862c <cbor_encoder_create_map>
    if (rc != 0) {
   11c66:	4606      	mov	r6, r0
   11c68:	2800      	cmp	r0, #0
   11c6a:	d1d7      	bne.n	11c1c <log_reboot_write+0x14>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11c6c:	2203      	movs	r2, #3
   11c6e:	4977      	ldr	r1, [pc, #476]	; (11e4c <log_reboot_write+0x244>)
   11c70:	a806      	add	r0, sp, #24
   11c72:	f016 fccf 	bl	28614 <cbor_encode_text_string>
    cbor_encode_text_stringz(&map,log_reboot_reason_str(info->reason));
   11c76:	8838      	ldrh	r0, [r7, #0]
   11c78:	f7ff ff80 	bl	11b7c <log_reboot_reason_str>
   11c7c:	4604      	mov	r4, r0
   11c7e:	f7fc fee8 	bl	ea52 <strlen>
   11c82:	4602      	mov	r2, r0
   11c84:	4621      	mov	r1, r4
   11c86:	a806      	add	r0, sp, #24
   11c88:	f016 fcc4 	bl	28614 <cbor_encode_text_string>
   11c8c:	2203      	movs	r2, #3
   11c8e:	4970      	ldr	r1, [pc, #448]	; (11e50 <log_reboot_write+0x248>)
   11c90:	a806      	add	r0, sp, #24
   11c92:	f016 fcbf 	bl	28614 <cbor_encode_text_string>
    cbor_encode_int(&map, reboot_cnt);
   11c96:	4b6f      	ldr	r3, [pc, #444]	; (11e54 <log_reboot_write+0x24c>)
   11c98:	881a      	ldrh	r2, [r3, #0]
   11c9a:	2300      	movs	r3, #0
   11c9c:	a806      	add	r0, sp, #24
   11c9e:	f016 fc44 	bl	2852a <cbor_encode_int>
   11ca2:	2203      	movs	r2, #3
   11ca4:	496c      	ldr	r1, [pc, #432]	; (11e58 <log_reboot_write+0x250>)
   11ca6:	a806      	add	r0, sp, #24
   11ca8:	f016 fcb4 	bl	28614 <cbor_encode_text_string>
                  ver.iv_major, ver.iv_minor, ver.iv_revision,
   11cac:	f89d 3269 	ldrb.w	r3, [sp, #617]	; 0x269
   11cb0:	f8bd 226a 	ldrh.w	r2, [sp, #618]	; 0x26a
    snprintf(buf, sizeof buf, "%u.%u.%u.%u",
   11cb4:	999b      	ldr	r1, [sp, #620]	; 0x26c
   11cb6:	9102      	str	r1, [sp, #8]
   11cb8:	9201      	str	r2, [sp, #4]
   11cba:	9300      	str	r3, [sp, #0]
   11cbc:	f89d 3268 	ldrb.w	r3, [sp, #616]	; 0x268
   11cc0:	4a66      	ldr	r2, [pc, #408]	; (11e5c <log_reboot_write+0x254>)
   11cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
   11cc6:	a852      	add	r0, sp, #328	; 0x148
   11cc8:	f019 fd7f 	bl	2b7ca <snprintf>
   11ccc:	a852      	add	r0, sp, #328	; 0x148
   11cce:	f7fc fec0 	bl	ea52 <strlen>
   11cd2:	4602      	mov	r2, r0
   11cd4:	a952      	add	r1, sp, #328	; 0x148
   11cd6:	a806      	add	r0, sp, #24
   11cd8:	f016 fc9c 	bl	28614 <cbor_encode_text_string>
   11cdc:	2204      	movs	r2, #4
   11cde:	4960      	ldr	r1, [pc, #384]	; (11e60 <log_reboot_write+0x258>)
   11ce0:	a806      	add	r0, sp, #24
   11ce2:	f016 fc97 	bl	28614 <cbor_encode_text_string>
    for (i = 0; i < sizeof hash; i++) {
   11ce6:	4634      	mov	r4, r6
    off = 0;
   11ce8:	4635      	mov	r5, r6
    for (i = 0; i < sizeof hash; i++) {
   11cea:	2c1f      	cmp	r4, #31
   11cec:	d80d      	bhi.n	11d0a <log_reboot_write+0x102>
                        (unsigned int)hash[i]);
   11cee:	ab9c      	add	r3, sp, #624	; 0x270
   11cf0:	4423      	add	r3, r4
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   11cf2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   11cf6:	4a5b      	ldr	r2, [pc, #364]	; (11e64 <log_reboot_write+0x25c>)
   11cf8:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   11cfc:	a852      	add	r0, sp, #328	; 0x148
   11cfe:	4428      	add	r0, r5
   11d00:	f019 fd63 	bl	2b7ca <snprintf>
   11d04:	4405      	add	r5, r0
    for (i = 0; i < sizeof hash; i++) {
   11d06:	3401      	adds	r4, #1
   11d08:	e7ef      	b.n	11cea <log_reboot_write+0xe2>
   11d0a:	a852      	add	r0, sp, #328	; 0x148
   11d0c:	f7fc fea1 	bl	ea52 <strlen>
   11d10:	4602      	mov	r2, r0
   11d12:	a952      	add	r1, sp, #328	; 0x148
   11d14:	a806      	add	r0, sp, #24
   11d16:	f016 fc7d 	bl	28614 <cbor_encode_text_string>
    if (info->file != NULL) {
   11d1a:	687b      	ldr	r3, [r7, #4]
   11d1c:	b1eb      	cbz	r3, 11d5a <log_reboot_write+0x152>
   11d1e:	2203      	movs	r2, #3
   11d20:	4951      	ldr	r1, [pc, #324]	; (11e68 <log_reboot_write+0x260>)
   11d22:	a806      	add	r0, sp, #24
   11d24:	f016 fc76 	bl	28614 <cbor_encode_text_string>
        if (strlen(info->file) > ((sizeof buf) / 3)) {
   11d28:	687c      	ldr	r4, [r7, #4]
   11d2a:	4620      	mov	r0, r4
   11d2c:	f7fc fe91 	bl	ea52 <strlen>
   11d30:	2855      	cmp	r0, #85	; 0x55
   11d32:	d952      	bls.n	11dda <log_reboot_write+0x1d2>
            off = strlen(info->file) - ((sizeof buf) / 3);
   11d34:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
        snprintf(buf, sizeof buf, "%s:%d",
   11d38:	68ba      	ldr	r2, [r7, #8]
   11d3a:	9200      	str	r2, [sp, #0]
   11d3c:	4423      	add	r3, r4
   11d3e:	4a4b      	ldr	r2, [pc, #300]	; (11e6c <log_reboot_write+0x264>)
   11d40:	f44f 7180 	mov.w	r1, #256	; 0x100
   11d44:	a852      	add	r0, sp, #328	; 0x148
   11d46:	f019 fd40 	bl	2b7ca <snprintf>
   11d4a:	a852      	add	r0, sp, #328	; 0x148
   11d4c:	f7fc fe81 	bl	ea52 <strlen>
   11d50:	4602      	mov	r2, r0
   11d52:	a952      	add	r1, sp, #328	; 0x148
   11d54:	a806      	add	r0, sp, #24
   11d56:	f016 fc5d 	bl	28614 <cbor_encode_text_string>
    if (info->pc != 0) {
   11d5a:	68fb      	ldr	r3, [r7, #12]
   11d5c:	2b00      	cmp	r3, #0
   11d5e:	d13e      	bne.n	11dde <log_reboot_write+0x1d6>
    state_flags = img_mgmt_state_flags(boot_current_slot);
   11d60:	4b39      	ldr	r3, [pc, #228]	; (11e48 <log_reboot_write+0x240>)
   11d62:	6818      	ldr	r0, [r3, #0]
   11d64:	f001 f968 	bl	13038 <img_mgmt_state_flags>
   11d68:	4605      	mov	r5, r0
   11d6a:	2205      	movs	r2, #5
   11d6c:	4940      	ldr	r1, [pc, #256]	; (11e70 <log_reboot_write+0x268>)
   11d6e:	a806      	add	r0, sp, #24
   11d70:	f016 fc50 	bl	28614 <cbor_encode_text_string>
    buf[0] = '\0';
   11d74:	2300      	movs	r3, #0
   11d76:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
    if (state_flags & IMG_MGMT_STATE_F_ACTIVE) {
   11d7a:	f015 0f04 	tst.w	r5, #4
   11d7e:	d139      	bne.n	11df4 <log_reboot_write+0x1ec>
    off = 0;
   11d80:	4634      	mov	r4, r6
    if (!(flags & IMAGE_F_NON_BOOTABLE)) {
   11d82:	9b05      	ldr	r3, [sp, #20]
   11d84:	f013 0f10 	tst.w	r3, #16
   11d88:	d03d      	beq.n	11e06 <log_reboot_write+0x1fe>
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED) {
   11d8a:	f015 0f02 	tst.w	r5, #2
   11d8e:	d144      	bne.n	11e1a <log_reboot_write+0x212>
    if (state_flags & IMG_MGMT_STATE_F_PENDING) {
   11d90:	f015 0f01 	tst.w	r5, #1
   11d94:	d14b      	bne.n	11e2e <log_reboot_write+0x226>
    if (off > 1) {
   11d96:	2c01      	cmp	r4, #1
   11d98:	dd03      	ble.n	11da2 <log_reboot_write+0x19a>
        buf[off - 1] = '\0';
   11d9a:	3c01      	subs	r4, #1
   11d9c:	ab52      	add	r3, sp, #328	; 0x148
   11d9e:	2200      	movs	r2, #0
   11da0:	551a      	strb	r2, [r3, r4]
   11da2:	a852      	add	r0, sp, #328	; 0x148
   11da4:	f7fc fe55 	bl	ea52 <strlen>
   11da8:	4602      	mov	r2, r0
   11daa:	a952      	add	r1, sp, #328	; 0x148
   11dac:	a806      	add	r0, sp, #24
   11dae:	f016 fc31 	bl	28614 <cbor_encode_text_string>
    cbor_buf_len = cbor_buf_writer_buffer_size(&writer, cbor_enc_buf) + 1;
   11db2:	a912      	add	r1, sp, #72	; 0x48
   11db4:	a80e      	add	r0, sp, #56	; 0x38
   11db6:	f016 fa5b 	bl	28270 <cbor_buf_writer_buffer_size>
   11dba:	1c44      	adds	r4, r0, #1
    rc = cbor_encoder_close_container(&enc, &map);
   11dbc:	a906      	add	r1, sp, #24
   11dbe:	a80a      	add	r0, sp, #40	; 0x28
   11dc0:	f016 fc49 	bl	28656 <cbor_encoder_close_container>
    if (rc != 0) {
   11dc4:	2800      	cmp	r0, #0
   11dc6:	d13c      	bne.n	11e42 <log_reboot_write+0x23a>
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_CBOR,
   11dc8:	b2a4      	uxth	r4, r4
   11dca:	9400      	str	r4, [sp, #0]
   11dcc:	ab12      	add	r3, sp, #72	; 0x48
   11dce:	2201      	movs	r2, #1
   11dd0:	2104      	movs	r1, #4
   11dd2:	2006      	movs	r0, #6
   11dd4:	f7ff fc10 	bl	115f8 <modlog_append>
    return 0;
   11dd8:	e720      	b.n	11c1c <log_reboot_write+0x14>
        off  = 0;
   11dda:	4633      	mov	r3, r6
   11ddc:	e7ac      	b.n	11d38 <log_reboot_write+0x130>
   11dde:	2202      	movs	r2, #2
   11de0:	4924      	ldr	r1, [pc, #144]	; (11e74 <log_reboot_write+0x26c>)
   11de2:	a806      	add	r0, sp, #24
   11de4:	f016 fc16 	bl	28614 <cbor_encode_text_string>
        cbor_encode_int(&map, info->pc);
   11de8:	68fa      	ldr	r2, [r7, #12]
   11dea:	2300      	movs	r3, #0
   11dec:	a806      	add	r0, sp, #24
   11dee:	f016 fb9c 	bl	2852a <cbor_encode_int>
   11df2:	e7b5      	b.n	11d60 <log_reboot_write+0x158>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "active");
   11df4:	4b20      	ldr	r3, [pc, #128]	; (11e78 <log_reboot_write+0x270>)
   11df6:	4a21      	ldr	r2, [pc, #132]	; (11e7c <log_reboot_write+0x274>)
   11df8:	f44f 7180 	mov.w	r1, #256	; 0x100
   11dfc:	a852      	add	r0, sp, #328	; 0x148
   11dfe:	f019 fce4 	bl	2b7ca <snprintf>
   11e02:	2407      	movs	r4, #7
   11e04:	e7bd      	b.n	11d82 <log_reboot_write+0x17a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "bootable");
   11e06:	4b1e      	ldr	r3, [pc, #120]	; (11e80 <log_reboot_write+0x278>)
   11e08:	4a1c      	ldr	r2, [pc, #112]	; (11e7c <log_reboot_write+0x274>)
   11e0a:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   11e0e:	a852      	add	r0, sp, #328	; 0x148
   11e10:	4420      	add	r0, r4
   11e12:	f019 fcda 	bl	2b7ca <snprintf>
   11e16:	4404      	add	r4, r0
   11e18:	e7b7      	b.n	11d8a <log_reboot_write+0x182>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "confirmed");
   11e1a:	4b1a      	ldr	r3, [pc, #104]	; (11e84 <log_reboot_write+0x27c>)
   11e1c:	4a17      	ldr	r2, [pc, #92]	; (11e7c <log_reboot_write+0x274>)
   11e1e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   11e22:	a852      	add	r0, sp, #328	; 0x148
   11e24:	4420      	add	r0, r4
   11e26:	f019 fcd0 	bl	2b7ca <snprintf>
   11e2a:	4404      	add	r4, r0
   11e2c:	e7b0      	b.n	11d90 <log_reboot_write+0x188>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "pending");
   11e2e:	4b16      	ldr	r3, [pc, #88]	; (11e88 <log_reboot_write+0x280>)
   11e30:	4a12      	ldr	r2, [pc, #72]	; (11e7c <log_reboot_write+0x274>)
   11e32:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   11e36:	a852      	add	r0, sp, #328	; 0x148
   11e38:	4420      	add	r0, r4
   11e3a:	f019 fcc6 	bl	2b7ca <snprintf>
   11e3e:	4404      	add	r4, r0
   11e40:	e7a9      	b.n	11d96 <log_reboot_write+0x18e>
        return SYS_ENOMEM;
   11e42:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11e46:	e6e9      	b.n	11c1c <log_reboot_write+0x14>
   11e48:	2000513c 	.word	0x2000513c
   11e4c:	0002db0c 	.word	0x0002db0c
   11e50:	0002db10 	.word	0x0002db10
   11e54:	20001dae 	.word	0x20001dae
   11e58:	0002db14 	.word	0x0002db14
   11e5c:	0002db18 	.word	0x0002db18
   11e60:	0002db24 	.word	0x0002db24
   11e64:	0002e668 	.word	0x0002e668
   11e68:	0002db2c 	.word	0x0002db2c
   11e6c:	0002db30 	.word	0x0002db30
   11e70:	0002db3c 	.word	0x0002db3c
   11e74:	0002db38 	.word	0x0002db38
   11e78:	0002db44 	.word	0x0002db44
   11e7c:	0002db4c 	.word	0x0002db4c
   11e80:	0002db50 	.word	0x0002db50
   11e84:	0002db5c 	.word	0x0002db5c
   11e88:	0002db68 	.word	0x0002db68

00011e8c <log_reboot>:
{
   11e8c:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   11e8e:	4b0d      	ldr	r3, [pc, #52]	; (11ec4 <log_reboot+0x38>)
   11e90:	f993 3000 	ldrsb.w	r3, [r3]
   11e94:	b113      	cbz	r3, 11e9c <log_reboot+0x10>
        return 0;
   11e96:	2500      	movs	r5, #0
}
   11e98:	4628      	mov	r0, r5
   11e9a:	bd38      	pop	{r3, r4, r5, pc}
   11e9c:	4604      	mov	r4, r0
    rc = log_reboot_write(info);
   11e9e:	f7ff feb3 	bl	11c08 <log_reboot_write>
    if (rc != 0) {
   11ea2:	4605      	mov	r5, r0
   11ea4:	2800      	cmp	r0, #0
   11ea6:	d1f7      	bne.n	11e98 <log_reboot+0xc>
    if (info->reason != HAL_RESET_REQUESTED &&
   11ea8:	8823      	ldrh	r3, [r4, #0]
   11eaa:	2b06      	cmp	r3, #6
   11eac:	d0f4      	beq.n	11e98 <log_reboot+0xc>
   11eae:	2b08      	cmp	r3, #8
   11eb0:	d0f2      	beq.n	11e98 <log_reboot+0xc>
        log_reboot_written = 1;
   11eb2:	4b04      	ldr	r3, [pc, #16]	; (11ec4 <log_reboot+0x38>)
   11eb4:	2201      	movs	r2, #1
   11eb6:	701a      	strb	r2, [r3, #0]
        conf_save_one("reboot/written", "1");
   11eb8:	4903      	ldr	r1, [pc, #12]	; (11ec8 <log_reboot+0x3c>)
   11eba:	4804      	ldr	r0, [pc, #16]	; (11ecc <log_reboot+0x40>)
   11ebc:	f7fd f962 	bl	f184 <conf_save_one>
   11ec0:	e7ea      	b.n	11e98 <log_reboot+0xc>
   11ec2:	bf00      	nop
   11ec4:	20001dac 	.word	0x20001dac
   11ec8:	0002db70 	.word	0x0002db70
   11ecc:	0002da74 	.word	0x0002da74

00011ed0 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   11ed0:	b510      	push	{r4, lr}
   11ed2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   11ed4:	4b1f      	ldr	r3, [pc, #124]	; (11f54 <log_reboot_pkg_init+0x84>)
   11ed6:	781b      	ldrb	r3, [r3, #0]
   11ed8:	b15b      	cbz	r3, 11ef2 <log_reboot_pkg_init+0x22>

    rc = conf_register(&reboot_conf_handler);
   11eda:	481f      	ldr	r0, [pc, #124]	; (11f58 <log_reboot_pkg_init+0x88>)
   11edc:	f7fd fa3e 	bl	f35c <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11ee0:	b988      	cbnz	r0, 11f06 <log_reboot_pkg_init+0x36>

#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
   11ee2:	f7ff fdf3 	bl	11acc <log_reboot_init_fcb>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11ee6:	b9d8      	cbnz	r0, 11f20 <log_reboot_pkg_init+0x50>
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   11ee8:	f7ff fe3e 	bl	11b68 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11eec:	bb28      	cbnz	r0, 11f3a <log_reboot_pkg_init+0x6a>
#endif
}
   11eee:	b002      	add	sp, #8
   11ef0:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11ef2:	f7fa f953 	bl	c19c <hal_debugger_connected>
   11ef6:	b100      	cbz	r0, 11efa <log_reboot_pkg_init+0x2a>
   11ef8:	be01      	bkpt	0x0001
   11efa:	2300      	movs	r3, #0
   11efc:	461a      	mov	r2, r3
   11efe:	4619      	mov	r1, r3
   11f00:	4618      	mov	r0, r3
   11f02:	f7fa fe4f 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f06:	f7fa f949 	bl	c19c <hal_debugger_connected>
   11f0a:	b100      	cbz	r0, 11f0e <log_reboot_pkg_init+0x3e>
   11f0c:	be01      	bkpt	0x0001
   11f0e:	2000      	movs	r0, #0
   11f10:	9000      	str	r0, [sp, #0]
   11f12:	4b12      	ldr	r3, [pc, #72]	; (11f5c <log_reboot_pkg_init+0x8c>)
   11f14:	681c      	ldr	r4, [r3, #0]
   11f16:	4603      	mov	r3, r0
   11f18:	4602      	mov	r2, r0
   11f1a:	4601      	mov	r1, r0
   11f1c:	47a0      	blx	r4
   11f1e:	e7e0      	b.n	11ee2 <log_reboot_pkg_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f20:	f7fa f93c 	bl	c19c <hal_debugger_connected>
   11f24:	b100      	cbz	r0, 11f28 <log_reboot_pkg_init+0x58>
   11f26:	be01      	bkpt	0x0001
   11f28:	2000      	movs	r0, #0
   11f2a:	9000      	str	r0, [sp, #0]
   11f2c:	4b0b      	ldr	r3, [pc, #44]	; (11f5c <log_reboot_pkg_init+0x8c>)
   11f2e:	681c      	ldr	r4, [r3, #0]
   11f30:	4603      	mov	r3, r0
   11f32:	4602      	mov	r2, r0
   11f34:	4601      	mov	r1, r0
   11f36:	47a0      	blx	r4
   11f38:	e7d6      	b.n	11ee8 <log_reboot_pkg_init+0x18>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f3a:	f7fa f92f 	bl	c19c <hal_debugger_connected>
   11f3e:	b100      	cbz	r0, 11f42 <log_reboot_pkg_init+0x72>
   11f40:	be01      	bkpt	0x0001
   11f42:	2000      	movs	r0, #0
   11f44:	9000      	str	r0, [sp, #0]
   11f46:	4b05      	ldr	r3, [pc, #20]	; (11f5c <log_reboot_pkg_init+0x8c>)
   11f48:	681c      	ldr	r4, [r3, #0]
   11f4a:	4603      	mov	r3, r0
   11f4c:	4602      	mov	r2, r0
   11f4e:	4601      	mov	r1, r0
   11f50:	47a0      	blx	r4
}
   11f52:	e7cc      	b.n	11eee <log_reboot_pkg_init+0x1e>
   11f54:	20001e3c 	.word	0x20001e3c
   11f58:	20000264 	.word	0x20000264
   11f5c:	2000028c 	.word	0x2000028c

00011f60 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   11f60:	88c3      	ldrh	r3, [r0, #6]
   11f62:	f013 0f01 	tst.w	r3, #1
   11f66:	d001      	beq.n	11f6c <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   11f68:	2030      	movs	r0, #48	; 0x30
   11f6a:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   11f6c:	200c      	movs	r0, #12
    }
}
   11f6e:	4770      	bx	lr

00011f70 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   11f70:	b570      	push	{r4, r5, r6, lr}
   11f72:	4606      	mov	r6, r0
   11f74:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   11f76:	4b0f      	ldr	r3, [pc, #60]	; (11fb4 <stats_register_internal+0x44>)
   11f78:	681c      	ldr	r4, [r3, #0]
   11f7a:	e000      	b.n	11f7e <stats_register_internal+0xe>
   11f7c:	68a4      	ldr	r4, [r4, #8]
   11f7e:	b14c      	cbz	r4, 11f94 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   11f80:	4631      	mov	r1, r6
   11f82:	6820      	ldr	r0, [r4, #0]
   11f84:	f7fc fd59 	bl	ea3a <strcmp>
   11f88:	b188      	cbz	r0, 11fae <stats_register_internal+0x3e>
   11f8a:	42ac      	cmp	r4, r5
   11f8c:	d1f6      	bne.n	11f7c <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   11f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11f92:	e00b      	b.n	11fac <stats_register_internal+0x3c>
    shdr->s_name = name;
   11f94:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   11f96:	2000      	movs	r0, #0
   11f98:	60a8      	str	r0, [r5, #8]
   11f9a:	4b06      	ldr	r3, [pc, #24]	; (11fb4 <stats_register_internal+0x44>)
   11f9c:	685a      	ldr	r2, [r3, #4]
   11f9e:	6015      	str	r5, [r2, #0]
   11fa0:	3508      	adds	r5, #8
   11fa2:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   11fa4:	4a04      	ldr	r2, [pc, #16]	; (11fb8 <stats_register_internal+0x48>)
   11fa6:	68d3      	ldr	r3, [r2, #12]
   11fa8:	3301      	adds	r3, #1
   11faa:	60d3      	str	r3, [r2, #12]
}
   11fac:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   11fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11fb2:	e7fb      	b.n	11fac <stats_register_internal+0x3c>
   11fb4:	20000284 	.word	0x20000284
   11fb8:	20001e2c 	.word	0x20001e2c

00011fbc <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   11fbc:	7943      	ldrb	r3, [r0, #5]
   11fbe:	7900      	ldrb	r0, [r0, #4]
}
   11fc0:	fb00 f003 	mul.w	r0, r0, r3
   11fc4:	4770      	bx	lr
	...

00011fc8 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   11fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11fcc:	b085      	sub	sp, #20
   11fce:	4605      	mov	r5, r0
   11fd0:	460f      	mov	r7, r1
   11fd2:	4690      	mov	r8, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   11fd4:	f7ff ffc4 	bl	11f60 <stats_offset>
   11fd8:	4681      	mov	r9, r0
   11fda:	b284      	uxth	r4, r0
    cur = start;
    end = start + stats_size(hdr);
   11fdc:	4628      	mov	r0, r5
   11fde:	f7ff ffed 	bl	11fbc <stats_size>
   11fe2:	fa14 f680 	uxtah	r6, r4, r0
   11fe6:	b2b6      	uxth	r6, r6

    while (cur < end) {
   11fe8:	42b4      	cmp	r4, r6
   11fea:	d21a      	bcs.n	12022 <stats_walk+0x5a>
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
            ent_n = (cur - start) / hdr->s_size;
   11fec:	fa1f f389 	uxth.w	r3, r9
   11ff0:	1ae3      	subs	r3, r4, r3
   11ff2:	792a      	ldrb	r2, [r5, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   11ff4:	fb93 f3f2 	sdiv	r3, r3, r2
   11ff8:	4a0c      	ldr	r2, [pc, #48]	; (1202c <stats_walk+0x64>)
   11ffa:	210c      	movs	r1, #12
   11ffc:	a801      	add	r0, sp, #4
   11ffe:	f019 fbe4 	bl	2b7ca <snprintf>
            name_buf[len] = '\0';
   12002:	ab04      	add	r3, sp, #16
   12004:	4418      	add	r0, r3
   12006:	2300      	movs	r3, #0
   12008:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   1200c:	4623      	mov	r3, r4
   1200e:	aa01      	add	r2, sp, #4
   12010:	4641      	mov	r1, r8
   12012:	4628      	mov	r0, r5
   12014:	47b8      	blx	r7
        if (rc != 0) {
   12016:	4603      	mov	r3, r0
   12018:	b920      	cbnz	r0, 12024 <stats_walk+0x5c>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   1201a:	792b      	ldrb	r3, [r5, #4]
   1201c:	441c      	add	r4, r3
   1201e:	b2a4      	uxth	r4, r4
   12020:	e7e2      	b.n	11fe8 <stats_walk+0x20>
    }

    return (0);
   12022:	2300      	movs	r3, #0
err:
    return (rc);
}
   12024:	4618      	mov	r0, r3
   12026:	b005      	add	sp, #20
   12028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1202c:	0002db7c 	.word	0x0002db7c

00012030 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   12030:	b570      	push	{r4, r5, r6, lr}
   12032:	4604      	mov	r4, r0
   12034:	460e      	mov	r6, r1
   12036:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   12038:	f7ff ff92 	bl	11f60 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   1203c:	fb05 f206 	mul.w	r2, r5, r6
   12040:	2100      	movs	r1, #0
   12042:	4420      	add	r0, r4
   12044:	f7fc fcdd 	bl	ea02 <memset>

    shdr->s_size = size;
   12048:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   1204a:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   1204c:	2000      	movs	r0, #0
   1204e:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   12050:	bd70      	pop	{r4, r5, r6, pc}
	...

00012054 <stats_module_init_internal>:
{
   12054:	b500      	push	{lr}
   12056:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   12058:	4a09      	ldr	r2, [pc, #36]	; (12080 <stats_module_init_internal+0x2c>)
   1205a:	2300      	movs	r3, #0
   1205c:	6013      	str	r3, [r2, #0]
   1205e:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   12060:	9300      	str	r3, [sp, #0]
   12062:	2201      	movs	r2, #1
   12064:	2104      	movs	r1, #4
   12066:	4807      	ldr	r0, [pc, #28]	; (12084 <stats_module_init_internal+0x30>)
   12068:	f7ff ffe2 	bl	12030 <stats_init>
    if (rc) {
   1206c:	b110      	cbz	r0, 12074 <stats_module_init_internal+0x20>
}
   1206e:	b003      	add	sp, #12
   12070:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   12074:	4903      	ldr	r1, [pc, #12]	; (12084 <stats_module_init_internal+0x30>)
   12076:	4804      	ldr	r0, [pc, #16]	; (12088 <stats_module_init_internal+0x34>)
   12078:	f7ff ff7a 	bl	11f70 <stats_register_internal>
    if (rc) {
   1207c:	e7f7      	b.n	1206e <stats_module_init_internal+0x1a>
   1207e:	bf00      	nop
   12080:	20000284 	.word	0x20000284
   12084:	20001e2c 	.word	0x20001e2c
   12088:	0002db80 	.word	0x0002db80

0001208c <stats_module_init>:
{
   1208c:	b510      	push	{r4, lr}
   1208e:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   12090:	4b11      	ldr	r3, [pc, #68]	; (120d8 <stats_module_init+0x4c>)
   12092:	781b      	ldrb	r3, [r3, #0]
   12094:	b123      	cbz	r3, 120a0 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   12096:	4b11      	ldr	r3, [pc, #68]	; (120dc <stats_module_init+0x50>)
   12098:	68db      	ldr	r3, [r3, #12]
   1209a:	b15b      	cbz	r3, 120b4 <stats_module_init+0x28>
}
   1209c:	b002      	add	sp, #8
   1209e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   120a0:	f7fa f87c 	bl	c19c <hal_debugger_connected>
   120a4:	b100      	cbz	r0, 120a8 <stats_module_init+0x1c>
   120a6:	be01      	bkpt	0x0001
   120a8:	2300      	movs	r3, #0
   120aa:	461a      	mov	r2, r3
   120ac:	4619      	mov	r1, r3
   120ae:	4618      	mov	r0, r3
   120b0:	f7fa fd78 	bl	cba4 <__assert_func>
    rc = stats_module_init_internal();
   120b4:	f7ff ffce 	bl	12054 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   120b8:	2800      	cmp	r0, #0
   120ba:	d0ef      	beq.n	1209c <stats_module_init+0x10>
   120bc:	f7fa f86e 	bl	c19c <hal_debugger_connected>
   120c0:	b100      	cbz	r0, 120c4 <stats_module_init+0x38>
   120c2:	be01      	bkpt	0x0001
   120c4:	2000      	movs	r0, #0
   120c6:	9000      	str	r0, [sp, #0]
   120c8:	4b05      	ldr	r3, [pc, #20]	; (120e0 <stats_module_init+0x54>)
   120ca:	681c      	ldr	r4, [r3, #0]
   120cc:	4603      	mov	r3, r0
   120ce:	4602      	mov	r2, r0
   120d0:	4601      	mov	r1, r0
   120d2:	47a0      	blx	r4
   120d4:	e7e2      	b.n	1209c <stats_module_init+0x10>
   120d6:	bf00      	nop
   120d8:	20001e3c 	.word	0x20001e3c
   120dc:	20001e2c 	.word	0x20001e2c
   120e0:	2000028c 	.word	0x2000028c

000120e4 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   120e4:	b538      	push	{r3, r4, r5, lr}
   120e6:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   120e8:	4b05      	ldr	r3, [pc, #20]	; (12100 <stats_group_find+0x1c>)
   120ea:	681c      	ldr	r4, [r3, #0]
   120ec:	b134      	cbz	r4, 120fc <stats_group_find+0x18>
        if (!strcmp(cur->s_name, name)) {
   120ee:	4629      	mov	r1, r5
   120f0:	6820      	ldr	r0, [r4, #0]
   120f2:	f7fc fca2 	bl	ea3a <strcmp>
   120f6:	b108      	cbz	r0, 120fc <stats_group_find+0x18>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   120f8:	68a4      	ldr	r4, [r4, #8]
   120fa:	e7f7      	b.n	120ec <stats_group_find+0x8>
            break;
        }
    }

    return (cur);
}
   120fc:	4620      	mov	r0, r4
   120fe:	bd38      	pop	{r3, r4, r5, pc}
   12100:	20000284 	.word	0x20000284

00012104 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   12104:	b538      	push	{r3, r4, r5, lr}
   12106:	4604      	mov	r4, r0
   12108:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1210a:	4b07      	ldr	r3, [pc, #28]	; (12128 <stats_register+0x24>)
   1210c:	68db      	ldr	r3, [r3, #12]
   1210e:	b913      	cbnz	r3, 12116 <stats_register+0x12>
        if (stats_module_init_internal()) {
   12110:	f7ff ffa0 	bl	12054 <stats_module_init_internal>
   12114:	b920      	cbnz	r0, 12120 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   12116:	4629      	mov	r1, r5
   12118:	4620      	mov	r0, r4
   1211a:	f7ff ff29 	bl	11f70 <stats_register_internal>
}
   1211e:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   12120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12124:	e7fb      	b.n	1211e <stats_register+0x1a>
   12126:	bf00      	nop
   12128:	20001e2c 	.word	0x20001e2c

0001212c <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   1212c:	b530      	push	{r4, r5, lr}
   1212e:	b083      	sub	sp, #12
   12130:	4604      	mov	r4, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   12132:	f89d 5018 	ldrb.w	r5, [sp, #24]
   12136:	9500      	str	r5, [sp, #0]
   12138:	f7ff ff7a 	bl	12030 <stats_init>
    if (rc != 0) {
   1213c:	b108      	cbz	r0, 12142 <stats_init_and_reg+0x16>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   1213e:	b003      	add	sp, #12
   12140:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   12142:	4621      	mov	r1, r4
   12144:	9807      	ldr	r0, [sp, #28]
   12146:	f7ff ffdd 	bl	12104 <stats_register>
    if (rc != 0) {
   1214a:	e7f8      	b.n	1213e <stats_init_and_reg+0x12>

0001214c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1214c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1214e:	f7fa fd29 	bl	cba4 <__assert_func>
	...

00012154 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   12154:	4b01      	ldr	r3, [pc, #4]	; (1215c <sysinit_start+0x8>)
   12156:	2201      	movs	r2, #1
   12158:	701a      	strb	r2, [r3, #0]
}
   1215a:	4770      	bx	lr
   1215c:	20001e3c 	.word	0x20001e3c

00012160 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   12160:	4b01      	ldr	r3, [pc, #4]	; (12168 <sysinit_end+0x8>)
   12162:	2200      	movs	r2, #0
   12164:	701a      	strb	r2, [r3, #0]
}
   12166:	4770      	bx	lr
   12168:	20001e3c 	.word	0x20001e3c

0001216c <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1216c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1216e:	b083      	sub	sp, #12
   12170:	460d      	mov	r5, r1
   12172:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   12174:	b29e      	uxth	r6, r3
   12176:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12178:	9300      	str	r3, [sp, #0]
   1217a:	4603      	mov	r3, r0
   1217c:	9a08      	ldr	r2, [sp, #32]
   1217e:	4631      	mov	r1, r6
   12180:	4628      	mov	r0, r5
   12182:	f7fb fd1d 	bl	dbc0 <os_mempool_init>
    if (rc != 0) {
   12186:	b108      	cbz	r0, 1218c <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12188:	b003      	add	sp, #12
   1218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1218c:	4633      	mov	r3, r6
   1218e:	9a08      	ldr	r2, [sp, #32]
   12190:	b292      	uxth	r2, r2
   12192:	4629      	mov	r1, r5
   12194:	4638      	mov	r0, r7
   12196:	f7fb f92e 	bl	d3f6 <os_mbuf_pool_init>
    if (rc != 0) {
   1219a:	e7f5      	b.n	12188 <mem_init_mbuf_pool+0x1c>

0001219c <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1219c:	b570      	push	{r4, r5, r6, lr}
   1219e:	4604      	mov	r4, r0
   121a0:	460d      	mov	r5, r1
   121a2:	4619      	mov	r1, r3
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   121a4:	6806      	ldr	r6, [r0, #0]
   121a6:	8a33      	ldrh	r3, [r6, #16]
   121a8:	42ab      	cmp	r3, r5
   121aa:	d913      	bls.n	121d4 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   121ac:	4628      	mov	r0, r5
   121ae:	4790      	blx	r2
    if (frag == NULL) {
   121b0:	4606      	mov	r6, r0
   121b2:	b190      	cbz	r0, 121da <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   121b4:	462b      	mov	r3, r5
   121b6:	2200      	movs	r2, #0
   121b8:	6821      	ldr	r1, [r4, #0]
   121ba:	f7fb f9d9 	bl	d570 <os_mbuf_appendfrom>
    if (rc != 0) {
   121be:	b960      	cbnz	r0, 121da <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   121c0:	4629      	mov	r1, r5
   121c2:	6820      	ldr	r0, [r4, #0]
   121c4:	f7fb fa2d 	bl	d622 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   121c8:	6820      	ldr	r0, [r4, #0]
   121ca:	f7fb fc3b 	bl	da44 <os_mbuf_trim_front>
   121ce:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   121d0:	4630      	mov	r0, r6
   121d2:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   121d4:	2300      	movs	r3, #0
   121d6:	6003      	str	r3, [r0, #0]
        return frag;
   121d8:	e7fa      	b.n	121d0 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   121da:	4630      	mov	r0, r6
   121dc:	f7fb f94a 	bl	d474 <os_mbuf_free_chain>
    return NULL;
   121e0:	2600      	movs	r6, #0
   121e2:	e7f5      	b.n	121d0 <mem_split_frag+0x34>

000121e4 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   121e4:	f890 3020 	ldrb.w	r3, [r0, #32]
   121e8:	3b01      	subs	r3, #1
   121ea:	f880 3020 	strb.w	r3, [r0, #32]
}
   121ee:	4770      	bx	lr

000121f0 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   121f0:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   121f2:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   121f6:	d104      	bne.n	12202 <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   121f8:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   121fc:	b11b      	cbz	r3, 12206 <rwlock_read_must_block+0x16>
   121fe:	2001      	movs	r0, #1
   12200:	4770      	bx	lr
   12202:	2001      	movs	r0, #1
   12204:	4770      	bx	lr
   12206:	2000      	movs	r0, #0
}
   12208:	4770      	bx	lr

0001220a <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   1220a:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   1220c:	b923      	cbnz	r3, 12218 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   1220e:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   12212:	b11b      	cbz	r3, 1221c <rwlock_write_must_block+0x12>
   12214:	2001      	movs	r0, #1
   12216:	4770      	bx	lr
   12218:	2001      	movs	r0, #1
   1221a:	4770      	bx	lr
   1221c:	2000      	movs	r0, #0
}
   1221e:	4770      	bx	lr

00012220 <rwlock_unblock>:
{
   12220:	b510      	push	{r4, lr}
   12222:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   12224:	7fc3      	ldrb	r3, [r0, #31]
   12226:	b91b      	cbnz	r3, 12230 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   12228:	7f83      	ldrb	r3, [r0, #30]
   1222a:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   1222e:	e010      	b.n	12252 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   12230:	2301      	movs	r3, #1
   12232:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   12236:	3014      	adds	r0, #20
   12238:	f018 fd82 	bl	2ad40 <os_sem_release>
        lock->pending_writers--;
   1223c:	7fe3      	ldrb	r3, [r4, #31]
   1223e:	3b01      	subs	r3, #1
   12240:	77e3      	strb	r3, [r4, #31]
   12242:	e009      	b.n	12258 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   12244:	f104 000c 	add.w	r0, r4, #12
   12248:	f018 fd7a 	bl	2ad40 <os_sem_release>
            lock->pending_readers--;
   1224c:	7fa3      	ldrb	r3, [r4, #30]
   1224e:	3b01      	subs	r3, #1
   12250:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   12252:	7fa3      	ldrb	r3, [r4, #30]
   12254:	2b00      	cmp	r3, #0
   12256:	d1f5      	bne.n	12244 <rwlock_unblock+0x24>
}
   12258:	bd10      	pop	{r4, pc}

0001225a <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1225a:	b538      	push	{r3, r4, r5, lr}
   1225c:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1225e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12262:	f7fc faa9 	bl	e7b8 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   12266:	4620      	mov	r0, r4
   12268:	f7ff ffc2 	bl	121f0 <rwlock_read_must_block>
   1226c:	b140      	cbz	r0, 12280 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   1226e:	7fa3      	ldrb	r3, [r4, #30]
   12270:	3301      	adds	r3, #1
   12272:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   12274:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   12276:	4620      	mov	r0, r4
   12278:	f7fc fa3e 	bl	e6f8 <os_mutex_release>

    if (acquired) {
   1227c:	b12d      	cbz	r5, 1228a <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   1227e:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   12280:	7f23      	ldrb	r3, [r4, #28]
   12282:	3301      	adds	r3, #1
   12284:	7723      	strb	r3, [r4, #28]
        acquired = true;
   12286:	2501      	movs	r5, #1
   12288:	e7f5      	b.n	12276 <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1228a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1228e:	f104 000c 	add.w	r0, r4, #12
   12292:	f018 fd87 	bl	2ada4 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   12296:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1229a:	4620      	mov	r0, r4
   1229c:	f7fc fa8c 	bl	e7b8 <os_mutex_pend>
    lock->num_readers++;
   122a0:	7f23      	ldrb	r3, [r4, #28]
   122a2:	3301      	adds	r3, #1
   122a4:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   122a6:	4620      	mov	r0, r4
   122a8:	f7ff ff9c 	bl	121e4 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   122ac:	4620      	mov	r0, r4
   122ae:	f7fc fa23 	bl	e6f8 <os_mutex_release>
   122b2:	e7e4      	b.n	1227e <rwlock_acquire_read+0x24>

000122b4 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   122b4:	b510      	push	{r4, lr}
   122b6:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   122b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   122bc:	f7fc fa7c 	bl	e7b8 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   122c0:	7f23      	ldrb	r3, [r4, #28]
   122c2:	3b01      	subs	r3, #1
   122c4:	b2db      	uxtb	r3, r3
   122c6:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   122c8:	b11b      	cbz	r3, 122d2 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   122ca:	4620      	mov	r0, r4
   122cc:	f7fc fa14 	bl	e6f8 <os_mutex_release>
}
   122d0:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   122d2:	4620      	mov	r0, r4
   122d4:	f7ff ffa4 	bl	12220 <rwlock_unblock>
   122d8:	e7f7      	b.n	122ca <rwlock_release_read+0x16>

000122da <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   122da:	b538      	push	{r3, r4, r5, lr}
   122dc:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   122de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   122e2:	f7fc fa69 	bl	e7b8 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   122e6:	4620      	mov	r0, r4
   122e8:	f7ff ff8f 	bl	1220a <rwlock_write_must_block>
   122ec:	b140      	cbz	r0, 12300 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   122ee:	7fe3      	ldrb	r3, [r4, #31]
   122f0:	3301      	adds	r3, #1
   122f2:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   122f4:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   122f6:	4620      	mov	r0, r4
   122f8:	f7fc f9fe 	bl	e6f8 <os_mutex_release>

    if (acquired) {
   122fc:	b11d      	cbz	r5, 12306 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   122fe:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   12300:	2501      	movs	r5, #1
   12302:	7765      	strb	r5, [r4, #29]
        acquired = true;
   12304:	e7f7      	b.n	122f6 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   12306:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1230a:	f104 0014 	add.w	r0, r4, #20
   1230e:	f018 fd49 	bl	2ada4 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   12312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12316:	4620      	mov	r0, r4
   12318:	f7fc fa4e 	bl	e7b8 <os_mutex_pend>
    lock->active_writer = true;
   1231c:	2301      	movs	r3, #1
   1231e:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   12320:	4620      	mov	r0, r4
   12322:	f7ff ff5f 	bl	121e4 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   12326:	4620      	mov	r0, r4
   12328:	f7fc f9e6 	bl	e6f8 <os_mutex_release>
   1232c:	e7e7      	b.n	122fe <rwlock_acquire_write+0x24>

0001232e <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   1232e:	b510      	push	{r4, lr}
   12330:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   12332:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12336:	f7fc fa3f 	bl	e7b8 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   1233a:	2300      	movs	r3, #0
   1233c:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   1233e:	4620      	mov	r0, r4
   12340:	f7ff ff6e 	bl	12220 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   12344:	4620      	mov	r0, r4
   12346:	f7fc f9d7 	bl	e6f8 <os_mutex_release>
}
   1234a:	bd10      	pop	{r4, pc}

0001234c <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   1234c:	b510      	push	{r4, lr}
   1234e:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   12350:	2224      	movs	r2, #36	; 0x24
   12352:	2100      	movs	r1, #0
   12354:	f7fc fb55 	bl	ea02 <memset>

    rc = os_mutex_init(&lock->mtx);
   12358:	4620      	mov	r0, r4
   1235a:	f7fc f9c3 	bl	e6e4 <os_mutex_init>
    if (rc != 0) {
   1235e:	b100      	cbz	r0, 12362 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12360:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   12362:	2100      	movs	r1, #0
   12364:	f104 000c 	add.w	r0, r4, #12
   12368:	f018 fce2 	bl	2ad30 <os_sem_init>
    if (rc != 0) {
   1236c:	2800      	cmp	r0, #0
   1236e:	d1f7      	bne.n	12360 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   12370:	2100      	movs	r1, #0
   12372:	f104 0014 	add.w	r0, r4, #20
   12376:	f018 fcdb 	bl	2ad30 <os_sem_init>
    if (rc != 0) {
   1237a:	e7f1      	b.n	12360 <rwlock_init+0x14>

0001237c <scfg_find_setting_by_val>:
static struct scfg_setting *
scfg_find_setting_by_val(const struct scfg_group *group, const void *val)
{
    const struct scfg_setting *setting;

    SCFG_FOREACH_SETTING(group, setting) {
   1237c:	6803      	ldr	r3, [r0, #0]
   1237e:	6818      	ldr	r0, [r3, #0]
   12380:	b120      	cbz	r0, 1238c <scfg_find_setting_by_val+0x10>
        if (setting->val == val) {
   12382:	685a      	ldr	r2, [r3, #4]
   12384:	428a      	cmp	r2, r1
   12386:	d002      	beq.n	1238e <scfg_find_setting_by_val+0x12>
    SCFG_FOREACH_SETTING(group, setting) {
   12388:	3310      	adds	r3, #16
   1238a:	e7f8      	b.n	1237e <scfg_find_setting_by_val+0x2>
   1238c:	4770      	bx	lr
            /* Cast away const. */
            return (struct scfg_setting *)setting;
   1238e:	4618      	mov	r0, r3
        }
    }

    return NULL;
}
   12390:	4770      	bx	lr

00012392 <scfg_setting_id>:
{
   12392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12396:	4680      	mov	r8, r0
   12398:	460e      	mov	r6, r1
   1239a:	4614      	mov	r4, r2
    group_len = strlen(group_name);
   1239c:	f7fc fb59 	bl	ea52 <strlen>
   123a0:	4605      	mov	r5, r0
    setting_len = strlen(setting_name);
   123a2:	4630      	mov	r0, r6
   123a4:	f7fc fb55 	bl	ea52 <strlen>
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   123a8:	f105 0a01 	add.w	sl, r5, #1
   123ac:	eb0a 0900 	add.w	r9, sl, r0
   123b0:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   123b4:	dc12      	bgt.n	123dc <scfg_setting_id+0x4a>
   123b6:	4607      	mov	r7, r0
    memcpy(&buf[off], group_name, group_len);
   123b8:	462a      	mov	r2, r5
   123ba:	4641      	mov	r1, r8
   123bc:	4620      	mov	r0, r4
   123be:	f7fc fafb 	bl	e9b8 <memcpy>
    buf[off] = '/';
   123c2:	232f      	movs	r3, #47	; 0x2f
   123c4:	5563      	strb	r3, [r4, r5]
    memcpy(&buf[off], setting_name, setting_len);
   123c6:	463a      	mov	r2, r7
   123c8:	4631      	mov	r1, r6
   123ca:	eb04 000a 	add.w	r0, r4, sl
   123ce:	f7fc faf3 	bl	e9b8 <memcpy>
    buf[off] = '\0';
   123d2:	2300      	movs	r3, #0
   123d4:	f804 3009 	strb.w	r3, [r4, r9]
}
   123d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   123dc:	f7f9 fede 	bl	c19c <hal_debugger_connected>
   123e0:	b100      	cbz	r0, 123e4 <scfg_setting_id+0x52>
   123e2:	be01      	bkpt	0x0001
   123e4:	2300      	movs	r3, #0
   123e6:	461a      	mov	r2, r3
   123e8:	4619      	mov	r1, r3
   123ea:	4618      	mov	r0, r3
   123ec:	f7fa fbda 	bl	cba4 <__assert_func>

000123f0 <scfg_handler_export>:
}

static int
scfg_handler_export(void (*func)(char *name, char *val),
                    enum conf_export_tgt tgt, void *arg)
{
   123f0:	b570      	push	{r4, r5, r6, lr}
   123f2:	b098      	sub	sp, #96	; 0x60
   123f4:	4606      	mov	r6, r0
   123f6:	4615      	mov	r5, r2
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;

    group = arg;

    SCFG_FOREACH_SETTING(group, setting) {
   123f8:	6814      	ldr	r4, [r2, #0]
   123fa:	e009      	b.n	12410 <scfg_handler_export+0x20>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
        if (setting->private) {
            val = "<set>";
        } else {
            val = conf_str_from_value(setting->type, setting->val,
   123fc:	2315      	movs	r3, #21
   123fe:	aa01      	add	r2, sp, #4
   12400:	6861      	ldr	r1, [r4, #4]
   12402:	7b20      	ldrb	r0, [r4, #12]
   12404:	f7fd f8a8 	bl	f558 <conf_str_from_value>
   12408:	4601      	mov	r1, r0
                                      val_buf, sizeof val_buf);
        }
        func(id_buf, val);
   1240a:	a807      	add	r0, sp, #28
   1240c:	47b0      	blx	r6
    SCFG_FOREACH_SETTING(group, setting) {
   1240e:	3410      	adds	r4, #16
   12410:	6821      	ldr	r1, [r4, #0]
   12412:	b141      	cbz	r1, 12426 <scfg_handler_export+0x36>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   12414:	aa07      	add	r2, sp, #28
   12416:	68a8      	ldr	r0, [r5, #8]
   12418:	f7ff ffbb 	bl	12392 <scfg_setting_id>
        if (setting->private) {
   1241c:	7b63      	ldrb	r3, [r4, #13]
   1241e:	2b00      	cmp	r3, #0
   12420:	d0ec      	beq.n	123fc <scfg_handler_export+0xc>
            val = "<set>";
   12422:	4902      	ldr	r1, [pc, #8]	; (1242c <scfg_handler_export+0x3c>)
   12424:	e7f1      	b.n	1240a <scfg_handler_export+0x1a>
    }

    return 0;
}
   12426:	2000      	movs	r0, #0
   12428:	b018      	add	sp, #96	; 0x60
   1242a:	bd70      	pop	{r4, r5, r6, pc}
   1242c:	0002db88 	.word	0x0002db88

00012430 <scfg_find_setting_by_name>:
{
   12430:	b538      	push	{r3, r4, r5, lr}
   12432:	460d      	mov	r5, r1
    SCFG_FOREACH_SETTING(group, setting) {
   12434:	6804      	ldr	r4, [r0, #0]
   12436:	6820      	ldr	r0, [r4, #0]
   12438:	b130      	cbz	r0, 12448 <scfg_find_setting_by_name+0x18>
        if (strcmp(setting->name, setting_name) == 0) {
   1243a:	4629      	mov	r1, r5
   1243c:	f7fc fafd 	bl	ea3a <strcmp>
   12440:	b108      	cbz	r0, 12446 <scfg_find_setting_by_name+0x16>
    SCFG_FOREACH_SETTING(group, setting) {
   12442:	3410      	adds	r4, #16
   12444:	e7f7      	b.n	12436 <scfg_find_setting_by_name+0x6>
            return (struct scfg_setting *)setting;
   12446:	4620      	mov	r0, r4
}
   12448:	bd38      	pop	{r3, r4, r5, pc}

0001244a <scfg_handler_get>:
    if (argc < 1) {
   1244a:	2800      	cmp	r0, #0
   1244c:	dd0e      	ble.n	1246c <scfg_handler_get+0x22>
{
   1244e:	b538      	push	{r3, r4, r5, lr}
   12450:	4614      	mov	r4, r2
   12452:	461d      	mov	r5, r3
    setting = scfg_find_setting_by_name(group, argv[0]);
   12454:	6809      	ldr	r1, [r1, #0]
   12456:	9804      	ldr	r0, [sp, #16]
   12458:	f7ff ffea 	bl	12430 <scfg_find_setting_by_name>
    if (setting == NULL) {
   1245c:	b128      	cbz	r0, 1246a <scfg_handler_get+0x20>
    return conf_str_from_value(setting->type, setting->val, buf, max_len);
   1245e:	462b      	mov	r3, r5
   12460:	4622      	mov	r2, r4
   12462:	6841      	ldr	r1, [r0, #4]
   12464:	7b00      	ldrb	r0, [r0, #12]
   12466:	f7fd f877 	bl	f558 <conf_str_from_value>
}
   1246a:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1246c:	2000      	movs	r0, #0
}
   1246e:	4770      	bx	lr

00012470 <scfg_handler_set>:
    if (argc < 1) {
   12470:	2800      	cmp	r0, #0
   12472:	dd12      	ble.n	1249a <scfg_handler_set+0x2a>
{
   12474:	b510      	push	{r4, lr}
   12476:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   12478:	6809      	ldr	r1, [r1, #0]
   1247a:	4618      	mov	r0, r3
   1247c:	f7ff ffd8 	bl	12430 <scfg_find_setting_by_name>
    if (setting == NULL) {
   12480:	b170      	cbz	r0, 124a0 <scfg_handler_set+0x30>
    rc = conf_value_from_str(val, setting->type, setting->val,
   12482:	6883      	ldr	r3, [r0, #8]
   12484:	6842      	ldr	r2, [r0, #4]
   12486:	7b01      	ldrb	r1, [r0, #12]
   12488:	4620      	mov	r0, r4
   1248a:	f7fc ffaa 	bl	f3e2 <conf_value_from_str>
    if (rc != 0) {
   1248e:	b900      	cbnz	r0, 12492 <scfg_handler_set+0x22>
}
   12490:	bd10      	pop	{r4, pc}
        return os_error_to_sys(rc);
   12492:	b2c0      	uxtb	r0, r0
   12494:	f018 fc2b 	bl	2acee <os_error_to_sys>
   12498:	e7fa      	b.n	12490 <scfg_handler_set+0x20>
        return SYS_EINVAL;
   1249a:	f06f 0001 	mvn.w	r0, #1
}
   1249e:	4770      	bx	lr
        return SYS_ENOENT;
   124a0:	f06f 0003 	mvn.w	r0, #3
   124a4:	e7f4      	b.n	12490 <scfg_handler_set+0x20>

000124a6 <scfg_save_setting>:

int
scfg_save_setting(const struct scfg_group *group,
                  const struct scfg_setting *setting)
{
   124a6:	b570      	push	{r4, r5, r6, lr}
   124a8:	b098      	sub	sp, #96	; 0x60
   124aa:	4605      	mov	r5, r0
   124ac:	460c      	mov	r4, r1
    char id_buf[SCFG_SETTING_ID_BUF_SIZE];
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;
    int rc;

    val = conf_str_from_value(setting->type, setting->val,
   124ae:	2315      	movs	r3, #21
   124b0:	aa01      	add	r2, sp, #4
   124b2:	6849      	ldr	r1, [r1, #4]
   124b4:	7b20      	ldrb	r0, [r4, #12]
   124b6:	f7fd f84f 	bl	f558 <conf_str_from_value>
                              val_buf, sizeof val_buf);
    if (val == NULL) {
   124ba:	b180      	cbz	r0, 124de <scfg_save_setting+0x38>
   124bc:	4606      	mov	r6, r0
        return SYS_EUNKNOWN;
    }

    scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   124be:	aa07      	add	r2, sp, #28
   124c0:	6821      	ldr	r1, [r4, #0]
   124c2:	68a8      	ldr	r0, [r5, #8]
   124c4:	f7ff ff65 	bl	12392 <scfg_setting_id>

    rc = conf_save_one(id_buf, val);
   124c8:	4631      	mov	r1, r6
   124ca:	a807      	add	r0, sp, #28
   124cc:	f7fc fe5a 	bl	f184 <conf_save_one>
    if (rc != 0) {
   124d0:	b908      	cbnz	r0, 124d6 <scfg_save_setting+0x30>
        return os_error_to_sys(rc);
    }

    return 0;
}
   124d2:	b018      	add	sp, #96	; 0x60
   124d4:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   124d6:	b2c0      	uxtb	r0, r0
   124d8:	f018 fc09 	bl	2acee <os_error_to_sys>
   124dc:	e7f9      	b.n	124d2 <scfg_save_setting+0x2c>
        return SYS_EUNKNOWN;
   124de:	f06f 000c 	mvn.w	r0, #12
   124e2:	e7f6      	b.n	124d2 <scfg_save_setting+0x2c>

000124e4 <scfg_save_val>:
    return scfg_save_setting(group, setting);
}

int
scfg_save_val(const struct scfg_group *group, const void *val)
{
   124e4:	b510      	push	{r4, lr}
   124e6:	4604      	mov	r4, r0
    const struct scfg_setting *setting;

    setting = scfg_find_setting_by_val(group, val);
   124e8:	f7ff ff48 	bl	1237c <scfg_find_setting_by_val>
    if (setting == NULL) {
   124ec:	b120      	cbz	r0, 124f8 <scfg_save_val+0x14>
   124ee:	4601      	mov	r1, r0
        return SYS_ENOENT;
    }

    return scfg_save_setting(group, setting);
   124f0:	4620      	mov	r0, r4
   124f2:	f7ff ffd8 	bl	124a6 <scfg_save_setting>
}
   124f6:	bd10      	pop	{r4, pc}
        return SYS_ENOENT;
   124f8:	f06f 0003 	mvn.w	r0, #3
   124fc:	e7fb      	b.n	124f6 <scfg_save_val+0x12>
	...

00012500 <scfg_register>:

int
scfg_register(struct scfg_group *group, char *name)
{
   12500:	b570      	push	{r4, r5, r6, lr}
   12502:	4604      	mov	r4, r0
   12504:	460d      	mov	r5, r1
    const struct scfg_setting *setting;
    int rc;

    SCFG_FOREACH_SETTING(group, setting) {
   12506:	6802      	ldr	r2, [r0, #0]
   12508:	e004      	b.n	12514 <scfg_register+0x14>
        switch (setting->type) {
   1250a:	3b0a      	subs	r3, #10
   1250c:	b2db      	uxtb	r3, r3
   1250e:	2b04      	cmp	r3, #4
   12510:	d823      	bhi.n	1255a <scfg_register+0x5a>
    SCFG_FOREACH_SETTING(group, setting) {
   12512:	3210      	adds	r2, #16
   12514:	6813      	ldr	r3, [r2, #0]
   12516:	b13b      	cbz	r3, 12528 <scfg_register+0x28>
        switch (setting->type) {
   12518:	7b13      	ldrb	r3, [r2, #12]
   1251a:	2b06      	cmp	r3, #6
   1251c:	d8f5      	bhi.n	1250a <scfg_register+0xa>
   1251e:	2b02      	cmp	r3, #2
   12520:	d2f7      	bcs.n	12512 <scfg_register+0x12>
   12522:	f06f 0001 	mvn.w	r0, #1
    if (rc != 0) {
        return os_error_to_sys(rc);
    }

    return 0;
}
   12526:	bd70      	pop	{r4, r5, r6, pc}
    group->handler = (struct conf_handler) {
   12528:	1d26      	adds	r6, r4, #4
   1252a:	2220      	movs	r2, #32
   1252c:	2100      	movs	r1, #0
   1252e:	4630      	mov	r0, r6
   12530:	f7fc fa67 	bl	ea02 <memset>
   12534:	60a5      	str	r5, [r4, #8]
   12536:	2301      	movs	r3, #1
   12538:	7323      	strb	r3, [r4, #12]
   1253a:	4b09      	ldr	r3, [pc, #36]	; (12560 <scfg_register+0x60>)
   1253c:	6123      	str	r3, [r4, #16]
   1253e:	4b09      	ldr	r3, [pc, #36]	; (12564 <scfg_register+0x64>)
   12540:	6163      	str	r3, [r4, #20]
   12542:	4b09      	ldr	r3, [pc, #36]	; (12568 <scfg_register+0x68>)
   12544:	61e3      	str	r3, [r4, #28]
   12546:	6224      	str	r4, [r4, #32]
    rc = conf_register(&group->handler);
   12548:	4630      	mov	r0, r6
   1254a:	f7fc ff07 	bl	f35c <conf_register>
    if (rc != 0) {
   1254e:	2800      	cmp	r0, #0
   12550:	d0e9      	beq.n	12526 <scfg_register+0x26>
        return os_error_to_sys(rc);
   12552:	b2c0      	uxtb	r0, r0
   12554:	f018 fbcb 	bl	2acee <os_error_to_sys>
   12558:	e7e5      	b.n	12526 <scfg_register+0x26>
        switch (setting->type) {
   1255a:	f06f 0001 	mvn.w	r0, #1
   1255e:	e7e2      	b.n	12526 <scfg_register+0x26>
   12560:	0001244b 	.word	0x0001244b
   12564:	00012471 	.word	0x00012471
   12568:	000123f1 	.word	0x000123f1

0001256c <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   1256c:	3901      	subs	r1, #1
   1256e:	290b      	cmp	r1, #11
   12570:	d822      	bhi.n	125b8 <valid_attr_type+0x4c>
   12572:	e8df f001 	tbb	[pc, r1]
   12576:	0606      	.short	0x0606
   12578:	21110d09 	.word	0x21110d09
   1257c:	19152121 	.word	0x19152121
   12580:	1d21      	.short	0x1d21
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   12582:	b1d8      	cbz	r0, 125bc <valid_attr_type+0x50>
        }
        break;
    default:
        break;
    }
    return 0;
   12584:	2000      	movs	r0, #0
   12586:	4770      	bx	lr
        if (ct == CborByteStringType) {
   12588:	2840      	cmp	r0, #64	; 0x40
   1258a:	d019      	beq.n	125c0 <valid_attr_type+0x54>
    return 0;
   1258c:	2000      	movs	r0, #0
   1258e:	4770      	bx	lr
        if (ct == CborTextStringType) {
   12590:	2860      	cmp	r0, #96	; 0x60
   12592:	d017      	beq.n	125c4 <valid_attr_type+0x58>
    return 0;
   12594:	2000      	movs	r0, #0
   12596:	4770      	bx	lr
        if (ct == CborBooleanType) {
   12598:	28f5      	cmp	r0, #245	; 0xf5
   1259a:	d015      	beq.n	125c8 <valid_attr_type+0x5c>
    return 0;
   1259c:	2000      	movs	r0, #0
   1259e:	4770      	bx	lr
        if (ct == CborArrayType) {
   125a0:	2880      	cmp	r0, #128	; 0x80
   125a2:	d013      	beq.n	125cc <valid_attr_type+0x60>
    return 0;
   125a4:	2000      	movs	r0, #0
   125a6:	4770      	bx	lr
        if (ct == CborMapType) {
   125a8:	28a0      	cmp	r0, #160	; 0xa0
   125aa:	d011      	beq.n	125d0 <valid_attr_type+0x64>
    return 0;
   125ac:	2000      	movs	r0, #0
   125ae:	4770      	bx	lr
        if (ct == CborNullType) {
   125b0:	28f6      	cmp	r0, #246	; 0xf6
   125b2:	d00f      	beq.n	125d4 <valid_attr_type+0x68>
    return 0;
   125b4:	2000      	movs	r0, #0
   125b6:	4770      	bx	lr
   125b8:	2000      	movs	r0, #0
   125ba:	4770      	bx	lr
            return 1;
   125bc:	2001      	movs	r0, #1
   125be:	4770      	bx	lr
            return 1;
   125c0:	2001      	movs	r0, #1
   125c2:	4770      	bx	lr
            return 1;
   125c4:	2001      	movs	r0, #1
   125c6:	4770      	bx	lr
            return 1;
   125c8:	2001      	movs	r0, #1
   125ca:	4770      	bx	lr
            return 1;
   125cc:	2001      	movs	r0, #1
   125ce:	4770      	bx	lr
            return 1;
   125d0:	2001      	movs	r0, #1
   125d2:	4770      	bx	lr
            return 1;
   125d4:	2001      	movs	r0, #1
}
   125d6:	4770      	bx	lr

000125d8 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   125d8:	460b      	mov	r3, r1
   125da:	b111      	cbz	r1, 125e2 <cbor_target_address+0xa>
   125dc:	7809      	ldrb	r1, [r1, #0]
   125de:	290b      	cmp	r1, #11
   125e0:	d017      	beq.n	12612 <cbor_target_address+0x3a>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   125e2:	7903      	ldrb	r3, [r0, #4]
   125e4:	3b01      	subs	r3, #1
   125e6:	2b04      	cmp	r3, #4
   125e8:	d81a      	bhi.n	12620 <cbor_target_address+0x48>
   125ea:	e8df f003 	tbb	[pc, r3]
   125ee:	0703      	.short	0x0703
   125f0:	0d0b      	.short	0x0d0b
   125f2:	0f          	.byte	0x0f
   125f3:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   125f4:	6880      	ldr	r0, [r0, #8]
   125f6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   125fa:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   125fc:	6880      	ldr	r0, [r0, #8]
   125fe:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   12602:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
            break;
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   12604:	6880      	ldr	r0, [r0, #8]
            break;
   12606:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   12608:	6880      	ldr	r0, [r0, #8]
            break;
   1260a:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   1260c:	6880      	ldr	r0, [r0, #8]
   1260e:	4410      	add	r0, r2
            break;
   12610:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   12612:	6899      	ldr	r1, [r3, #8]
   12614:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   12616:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   12618:	fb03 0202 	mla	r2, r3, r2, r0
        targetaddr =
   1261c:	1888      	adds	r0, r1, r2
   1261e:	4770      	bx	lr
        switch (cursor->type) {
   12620:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   12622:	4770      	bx	lr

00012624 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   12624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12628:	b08b      	sub	sp, #44	; 0x2c
   1262a:	9003      	str	r0, [sp, #12]
   1262c:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   1262e:	a906      	add	r1, sp, #24
   12630:	f016 fb0c 	bl	28c4c <cbor_value_enter_container>
    if (err) {
   12634:	4605      	mov	r5, r0
   12636:	2800      	cmp	r0, #0
   12638:	f040 80ec 	bne.w	12814 <cbor_read_array+0x1f0>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   1263c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    arrcount = 0;
   12640:	2700      	movs	r7, #0
    for (off = 0; off < arr->maxlen; off++) {
   12642:	463e      	mov	r6, r7
   12644:	e0ac      	b.n	127a0 <cbor_read_array+0x17c>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   12646:	6862      	ldr	r2, [r4, #4]
{ return value->type == CborBooleanType; }
   12648:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_boolean(value));
   1264c:	2bf5      	cmp	r3, #245	; 0xf5
   1264e:	d106      	bne.n	1265e <cbor_read_array+0x3a>
    *result = !!value->extra;
   12650:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12654:	3b00      	subs	r3, #0
   12656:	bf18      	it	ne
   12658:	2301      	movne	r3, #1
   1265a:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   1265c:	e095      	b.n	1278a <cbor_read_array+0x166>
    assert(cbor_value_is_boolean(value));
   1265e:	f7f9 fd9d 	bl	c19c <hal_debugger_connected>
   12662:	b100      	cbz	r0, 12666 <cbor_read_array+0x42>
   12664:	be01      	bkpt	0x0001
   12666:	2300      	movs	r3, #0
   12668:	461a      	mov	r2, r3
   1266a:	4619      	mov	r1, r3
   1266c:	4618      	mov	r0, r3
   1266e:	f7fa fa99 	bl	cba4 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   12672:	f8d4 9004 	ldr.w	r9, [r4, #4]
   12676:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
   1267a:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
{ return value->type == CborIntegerType; }
   1267e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_integer(value));
   12682:	b9eb      	cbnz	r3, 126c0 <cbor_read_array+0x9c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12684:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   12688:	f013 0f01 	tst.w	r3, #1
   1268c:	d122      	bne.n	126d4 <cbor_read_array+0xb0>
   1268e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   12692:	2300      	movs	r3, #0
   12694:	e9cd 2300 	strd	r2, r3, [sp]
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12698:	e9dd 0100 	ldrd	r0, r1, [sp]
   1269c:	f849 000b 	str.w	r0, [r9, fp]
   126a0:	f8ca 1004 	str.w	r1, [sl, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   126a4:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   126a8:	f011 0f02 	tst.w	r1, #2
   126ac:	d06d      	beq.n	1278a <cbor_read_array+0x166>
        *result = -*result - 1;
   126ae:	e9dd 0100 	ldrd	r0, r1, [sp]
   126b2:	43c2      	mvns	r2, r0
   126b4:	43cb      	mvns	r3, r1
   126b6:	f849 200b 	str.w	r2, [r9, fp]
   126ba:	f8ca 3004 	str.w	r3, [sl, #4]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   126be:	e064      	b.n	1278a <cbor_read_array+0x166>
    assert(cbor_value_is_integer(value));
   126c0:	f7f9 fd6c 	bl	c19c <hal_debugger_connected>
   126c4:	b100      	cbz	r0, 126c8 <cbor_read_array+0xa4>
   126c6:	be01      	bkpt	0x0001
   126c8:	2300      	movs	r3, #0
   126ca:	461a      	mov	r2, r3
   126cc:	4619      	mov	r1, r3
   126ce:	4618      	mov	r0, r3
   126d0:	f7fa fa68 	bl	cba4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   126d4:	a806      	add	r0, sp, #24
   126d6:	f016 fa3c 	bl	28b52 <_cbor_value_decode_int64_internal>
   126da:	9000      	str	r0, [sp, #0]
   126dc:	9101      	str	r1, [sp, #4]
   126de:	e7db      	b.n	12698 <cbor_read_array+0x74>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   126e0:	6863      	ldr	r3, [r4, #4]
   126e2:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   126e6:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   126ea:	b933      	cbnz	r3, 126fa <cbor_read_array+0xd6>
   126ec:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   126f0:	f013 0f02 	tst.w	r3, #2
   126f4:	d00e      	beq.n	12714 <cbor_read_array+0xf0>
   126f6:	2300      	movs	r3, #0
   126f8:	e000      	b.n	126fc <cbor_read_array+0xd8>
   126fa:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   126fc:	b163      	cbz	r3, 12718 <cbor_read_array+0xf4>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   126fe:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
                _cbor_value_decode_int64_internal(value) : value->extra;
   12702:	f013 0f01 	tst.w	r3, #1
   12706:	d111      	bne.n	1272c <cbor_read_array+0x108>
   12708:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1270c:	2300      	movs	r3, #0
    *result = _cbor_value_extract_int64_helper(value);
   1270e:	e9c9 2300 	strd	r2, r3, [r9]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   12712:	e03a      	b.n	1278a <cbor_read_array+0x166>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12714:	2301      	movs	r3, #1
   12716:	e7f1      	b.n	126fc <cbor_read_array+0xd8>
    assert(cbor_value_is_unsigned_integer(value));
   12718:	f7f9 fd40 	bl	c19c <hal_debugger_connected>
   1271c:	b100      	cbz	r0, 12720 <cbor_read_array+0xfc>
   1271e:	be01      	bkpt	0x0001
   12720:	2300      	movs	r3, #0
   12722:	461a      	mov	r2, r3
   12724:	4619      	mov	r1, r3
   12726:	4618      	mov	r0, r3
   12728:	f7fa fa3c 	bl	cba4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   1272c:	a806      	add	r0, sp, #24
   1272e:	f016 fa10 	bl	28b52 <_cbor_value_decode_int64_internal>
   12732:	4602      	mov	r2, r0
   12734:	460b      	mov	r3, r1
   12736:	e7ea      	b.n	1270e <cbor_read_array+0xea>
            lptr = &arr->arr.reals.store[off];
            err |= cbor_value_get_double(&elem, lptr);
            break;
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   12738:	68e3      	ldr	r3, [r4, #12]
   1273a:	68a2      	ldr	r2, [r4, #8]
   1273c:	eba8 0202 	sub.w	r2, r8, r2
   12740:	1a9b      	subs	r3, r3, r2
   12742:	9305      	str	r3, [sp, #20]
{ return value->type == CborTextStringType; }
   12744:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    assert(cbor_value_is_text_string(value));
   12748:	2b60      	cmp	r3, #96	; 0x60
   1274a:	d10d      	bne.n	12768 <cbor_read_array+0x144>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   1274c:	2300      	movs	r3, #0
   1274e:	aa05      	add	r2, sp, #20
   12750:	4641      	mov	r1, r8
   12752:	a806      	add	r0, sp, #24
   12754:	f016 fb4a 	bl	28dec <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   12758:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   1275a:	6863      	ldr	r3, [r4, #4]
   1275c:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
            tp += len + 1;
   12760:	9b05      	ldr	r3, [sp, #20]
   12762:	3301      	adds	r3, #1
   12764:	4498      	add	r8, r3
            break;
   12766:	e010      	b.n	1278a <cbor_read_array+0x166>
    assert(cbor_value_is_text_string(value));
   12768:	f7f9 fd18 	bl	c19c <hal_debugger_connected>
   1276c:	b100      	cbz	r0, 12770 <cbor_read_array+0x14c>
   1276e:	be01      	bkpt	0x0001
   12770:	2300      	movs	r3, #0
   12772:	461a      	mov	r2, r3
   12774:	4619      	mov	r1, r3
   12776:	4618      	mov	r0, r3
   12778:	f7fa fa14 	bl	cba4 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   1277c:	4633      	mov	r3, r6
   1277e:	4622      	mov	r2, r4
   12780:	6861      	ldr	r1, [r4, #4]
   12782:	a806      	add	r0, sp, #24
   12784:	f000 f84a 	bl	1281c <cbor_internal_read_object>
   12788:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   1278a:	3701      	adds	r7, #1
        if (arr->element_type != CborAttrStructObjectType) {
   1278c:	7823      	ldrb	r3, [r4, #0]
   1278e:	2b0b      	cmp	r3, #11
   12790:	d129      	bne.n	127e6 <cbor_read_array+0x1c2>
{ return value && value->type != CborInvalidType; }
   12792:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   12796:	2bff      	cmp	r3, #255	; 0xff
   12798:	d02a      	beq.n	127f0 <cbor_read_array+0x1cc>
   1279a:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   1279c:	b353      	cbz	r3, 127f4 <cbor_read_array+0x1d0>
    for (off = 0; off < arr->maxlen; off++) {
   1279e:	3601      	adds	r6, #1
   127a0:	6963      	ldr	r3, [r4, #20]
   127a2:	42b3      	cmp	r3, r6
   127a4:	dd26      	ble.n	127f4 <cbor_read_array+0x1d0>
        switch (arr->element_type) {
   127a6:	7823      	ldrb	r3, [r4, #0]
   127a8:	3b01      	subs	r3, #1
   127aa:	2b0a      	cmp	r3, #10
   127ac:	d818      	bhi.n	127e0 <cbor_read_array+0x1bc>
   127ae:	a201      	add	r2, pc, #4	; (adr r2, 127b4 <cbor_read_array+0x190>)
   127b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   127b4:	00012673 	.word	0x00012673
   127b8:	000126e1 	.word	0x000126e1
   127bc:	000127e1 	.word	0x000127e1
   127c0:	00012739 	.word	0x00012739
   127c4:	00012647 	.word	0x00012647
   127c8:	000127e1 	.word	0x000127e1
   127cc:	000127e1 	.word	0x000127e1
   127d0:	000127e1 	.word	0x000127e1
   127d4:	000127e1 	.word	0x000127e1
   127d8:	000127e1 	.word	0x000127e1
   127dc:	0001277d 	.word	0x0001277d
            err |= CborErrorIllegalType;
   127e0:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   127e4:	e7d1      	b.n	1278a <cbor_read_array+0x166>
            err |= cbor_value_advance(&elem);
   127e6:	a806      	add	r0, sp, #24
   127e8:	f016 fb5d 	bl	28ea6 <cbor_value_advance>
   127ec:	4305      	orrs	r5, r0
   127ee:	e7d0      	b.n	12792 <cbor_read_array+0x16e>
   127f0:	2300      	movs	r3, #0
   127f2:	e7d3      	b.n	1279c <cbor_read_array+0x178>
            break;
        }
    }
    if (arr->count) {
   127f4:	6923      	ldr	r3, [r4, #16]
   127f6:	b103      	cbz	r3, 127fa <cbor_read_array+0x1d6>
        *arr->count = arrcount;
   127f8:	601f      	str	r7, [r3, #0]
{ return it->remaining == 0; }
   127fa:	9b08      	ldr	r3, [sp, #32]
    }
    while (!cbor_value_at_end(&elem)) {
   127fc:	b12b      	cbz	r3, 1280a <cbor_read_array+0x1e6>
        err |= CborErrorDataTooLarge;
   127fe:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   12802:	a806      	add	r0, sp, #24
   12804:	f016 fb4f 	bl	28ea6 <cbor_value_advance>
   12808:	e7f7      	b.n	127fa <cbor_read_array+0x1d6>
    }
    err |= cbor_value_leave_container(value, &elem);
   1280a:	a906      	add	r1, sp, #24
   1280c:	9803      	ldr	r0, [sp, #12]
   1280e:	f016 fac4 	bl	28d9a <cbor_value_leave_container>
   12812:	4328      	orrs	r0, r5
    return err;
}
   12814:	b00b      	add	sp, #44	; 0x2c
   12816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1281a:	bf00      	nop

0001281c <cbor_internal_read_object>:
{
   1281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12820:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   12824:	9001      	str	r0, [sp, #4]
   12826:	9100      	str	r1, [sp, #0]
   12828:	4691      	mov	r9, r2
   1282a:	469a      	mov	sl, r3
    size_t len = 0;
   1282c:	2300      	movs	r3, #0
   1282e:	9304      	str	r3, [sp, #16]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12830:	460c      	mov	r4, r1
   12832:	e006      	b.n	12842 <cbor_internal_read_object+0x26>
                    memcpy(lptr, &cursor->dflt.integer,
   12834:	4623      	mov	r3, r4
   12836:	f853 1f20 	ldr.w	r1, [r3, #32]!
   1283a:	685b      	ldr	r3, [r3, #4]
   1283c:	6001      	str	r1, [r0, #0]
   1283e:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12840:	3430      	adds	r4, #48	; 0x30
   12842:	6827      	ldr	r7, [r4, #0]
   12844:	b1e7      	cbz	r7, 12880 <cbor_internal_read_object+0x64>
        if (!cursor->nodefault) {
   12846:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1284a:	2b00      	cmp	r3, #0
   1284c:	d1f8      	bne.n	12840 <cbor_internal_read_object+0x24>
            lptr = cbor_target_address(cursor, parent, offset);
   1284e:	4652      	mov	r2, sl
   12850:	4649      	mov	r1, r9
   12852:	4620      	mov	r0, r4
   12854:	f7ff fec0 	bl	125d8 <cbor_target_address>
            if (lptr != NULL) {
   12858:	2800      	cmp	r0, #0
   1285a:	d0f1      	beq.n	12840 <cbor_internal_read_object+0x24>
                switch (cursor->type) {
   1285c:	7923      	ldrb	r3, [r4, #4]
   1285e:	2b02      	cmp	r3, #2
   12860:	d0e8      	beq.n	12834 <cbor_internal_read_object+0x18>
   12862:	2b05      	cmp	r3, #5
   12864:	d008      	beq.n	12878 <cbor_internal_read_object+0x5c>
   12866:	2b01      	cmp	r3, #1
   12868:	d1ea      	bne.n	12840 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   1286a:	4623      	mov	r3, r4
   1286c:	f853 1f20 	ldr.w	r1, [r3, #32]!
   12870:	685b      	ldr	r3, [r3, #4]
   12872:	6001      	str	r1, [r0, #0]
   12874:	6043      	str	r3, [r0, #4]
                    break;
   12876:	e7e3      	b.n	12840 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   12878:	f894 3020 	ldrb.w	r3, [r4, #32]
   1287c:	7003      	strb	r3, [r0, #0]
                    break;
   1287e:	e7df      	b.n	12840 <cbor_internal_read_object+0x24>
{ return value->type == CborMapType; }
   12880:	9801      	ldr	r0, [sp, #4]
   12882:	7b83      	ldrb	r3, [r0, #14]
    if (cbor_value_is_map(root_value)) {
   12884:	2ba0      	cmp	r3, #160	; 0xa0
   12886:	d005      	beq.n	12894 <cbor_internal_read_object+0x78>
        return err;
   12888:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   1288c:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   12890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   12894:	a905      	add	r1, sp, #20
   12896:	f016 f9d9 	bl	28c4c <cbor_value_enter_container>
   1289a:	4680      	mov	r8, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   1289c:	e07a      	b.n	12994 <cbor_internal_read_object+0x178>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   1289e:	a904      	add	r1, sp, #16
   128a0:	a805      	add	r0, sp, #20
   128a2:	f016 fb16 	bl	28ed2 <cbor_value_calculate_string_length>
   128a6:	b978      	cbnz	r0, 128c8 <cbor_internal_read_object+0xac>
                if (len > CBORATTR_MAX_SIZE) {
   128a8:	9b04      	ldr	r3, [sp, #16]
   128aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   128ae:	d81f      	bhi.n	128f0 <cbor_internal_read_object+0xd4>
{ return value->type == CborTextStringType; }
   128b0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   128b4:	2b60      	cmp	r3, #96	; 0x60
   128b6:	d11e      	bne.n	128f6 <cbor_internal_read_object+0xda>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   128b8:	2300      	movs	r3, #0
   128ba:	aa04      	add	r2, sp, #16
   128bc:	a909      	add	r1, sp, #36	; 0x24
   128be:	a805      	add	r0, sp, #20
   128c0:	f016 fa94 	bl	28dec <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   128c4:	ea48 0800 	orr.w	r8, r8, r0
            err |= cbor_value_advance(&cur_value);
   128c8:	a805      	add	r0, sp, #20
   128ca:	f016 faec 	bl	28ea6 <cbor_value_advance>
   128ce:	ea48 0800 	orr.w	r8, r8, r0
{ return value && value->type != CborInvalidType; }
   128d2:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   128d6:	2eff      	cmp	r6, #255	; 0xff
   128d8:	d017      	beq.n	1290a <cbor_internal_read_object+0xee>
   128da:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   128dc:	2b00      	cmp	r3, #0
   128de:	d16a      	bne.n	129b6 <cbor_internal_read_object+0x19a>
                err |= CborErrorIllegalType;
   128e0:	f448 7882 	orr.w	r8, r8, #260	; 0x104
    if (!err) {
   128e4:	f1b8 0f00 	cmp.w	r8, #0
   128e8:	f000 8106 	beq.w	12af8 <cbor_internal_read_object+0x2dc>
    return err;
   128ec:	4640      	mov	r0, r8
   128ee:	e7cd      	b.n	1288c <cbor_internal_read_object+0x70>
                    err |= CborErrorDataTooLarge;
   128f0:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
                    break;
   128f4:	e7f6      	b.n	128e4 <cbor_internal_read_object+0xc8>
    assert(cbor_value_is_text_string(value));
   128f6:	f7f9 fc51 	bl	c19c <hal_debugger_connected>
   128fa:	b100      	cbz	r0, 128fe <cbor_internal_read_object+0xe2>
   128fc:	be01      	bkpt	0x0001
   128fe:	2300      	movs	r3, #0
   12900:	461a      	mov	r2, r3
   12902:	4619      	mov	r1, r3
   12904:	4618      	mov	r0, r3
   12906:	f7fa f94d 	bl	cba4 <__assert_func>
{ return value && value->type != CborInvalidType; }
   1290a:	2300      	movs	r3, #0
   1290c:	e7e6      	b.n	128dc <cbor_internal_read_object+0xc0>
                    attrbuf[0] == '\0') {
   1290e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12912:	b963      	cbnz	r3, 1292e <cbor_internal_read_object+0x112>
                    best_match = cursor;
   12914:	46a3      	mov	fp, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12916:	3430      	adds	r4, #48	; 0x30
   12918:	6825      	ldr	r5, [r4, #0]
   1291a:	b1a5      	cbz	r5, 12946 <cbor_internal_read_object+0x12a>
            if (valid_attr_type(type, cursor->type)) {
   1291c:	7921      	ldrb	r1, [r4, #4]
   1291e:	4630      	mov	r0, r6
   12920:	f7ff fe24 	bl	1256c <valid_attr_type>
   12924:	2800      	cmp	r0, #0
   12926:	d0f6      	beq.n	12916 <cbor_internal_read_object+0xfa>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   12928:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1292c:	d0ef      	beq.n	1290e <cbor_internal_read_object+0xf2>
                } else if (strlen(cursor->attribute) == len &&
   1292e:	4628      	mov	r0, r5
   12930:	f7fc f88f 	bl	ea52 <strlen>
   12934:	9a04      	ldr	r2, [sp, #16]
   12936:	4290      	cmp	r0, r2
   12938:	d1ed      	bne.n	12916 <cbor_internal_read_object+0xfa>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   1293a:	a909      	add	r1, sp, #36	; 0x24
   1293c:	4628      	mov	r0, r5
   1293e:	f7fc f817 	bl	e970 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   12942:	2800      	cmp	r0, #0
   12944:	d1e7      	bne.n	12916 <cbor_internal_read_object+0xfa>
        if (!cursor->attribute && best_match) {
   12946:	b195      	cbz	r5, 1296e <cbor_internal_read_object+0x152>
        if (cursor->attribute != NULL) {
   12948:	6823      	ldr	r3, [r4, #0]
   1294a:	b1fb      	cbz	r3, 1298c <cbor_internal_read_object+0x170>
            lptr = cbor_target_address(cursor, parent, offset);
   1294c:	4652      	mov	r2, sl
   1294e:	4649      	mov	r1, r9
   12950:	4620      	mov	r0, r4
   12952:	f7ff fe41 	bl	125d8 <cbor_target_address>
   12956:	4605      	mov	r5, r0
            switch (cursor->type) {
   12958:	7923      	ldrb	r3, [r4, #4]
   1295a:	3b01      	subs	r3, #1
   1295c:	2b09      	cmp	r3, #9
   1295e:	d815      	bhi.n	1298c <cbor_internal_read_object+0x170>
   12960:	e8df f003 	tbb	[pc, r3]
   12964:	a0865d36 	.word	0xa0865d36
   12968:	1414140a 	.word	0x1414140a
   1296c:	bfb7      	.short	0xbfb7
        if (!cursor->attribute && best_match) {
   1296e:	f1bb 0f00 	cmp.w	fp, #0
   12972:	d0e9      	beq.n	12948 <cbor_internal_read_object+0x12c>
            cursor = best_match;
   12974:	465c      	mov	r4, fp
   12976:	e7e7      	b.n	12948 <cbor_internal_read_object+0x12c>
{ return value->type == CborBooleanType; }
   12978:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   1297c:	2bf5      	cmp	r3, #245	; 0xf5
   1297e:	d11d      	bne.n	129bc <cbor_internal_read_object+0x1a0>
    *result = !!value->extra;
   12980:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12984:	3b00      	subs	r3, #0
   12986:	bf18      	it	ne
   12988:	2301      	movne	r3, #1
   1298a:	7003      	strb	r3, [r0, #0]
        err = cbor_value_advance(&cur_value);
   1298c:	a805      	add	r0, sp, #20
   1298e:	f016 fa8a 	bl	28ea6 <cbor_value_advance>
   12992:	4680      	mov	r8, r0
{ return value && value->type != CborInvalidType; }
   12994:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   12998:	2eff      	cmp	r6, #255	; 0xff
   1299a:	f000 80ab 	beq.w	12af4 <cbor_internal_read_object+0x2d8>
   1299e:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   129a0:	2b00      	cmp	r3, #0
   129a2:	d09f      	beq.n	128e4 <cbor_internal_read_object+0xc8>
   129a4:	f1b8 0f00 	cmp.w	r8, #0
   129a8:	d19c      	bne.n	128e4 <cbor_internal_read_object+0xc8>
        if (cbor_value_is_text_string(&cur_value)) {
   129aa:	2e60      	cmp	r6, #96	; 0x60
   129ac:	f43f af77 	beq.w	1289e <cbor_internal_read_object+0x82>
            attrbuf[0] = '\0';
   129b0:	2300      	movs	r3, #0
   129b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        best_match = NULL;
   129b6:	46bb      	mov	fp, r7
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   129b8:	9c00      	ldr	r4, [sp, #0]
   129ba:	e7ad      	b.n	12918 <cbor_internal_read_object+0xfc>
    assert(cbor_value_is_boolean(value));
   129bc:	f7f9 fbee 	bl	c19c <hal_debugger_connected>
   129c0:	b100      	cbz	r0, 129c4 <cbor_internal_read_object+0x1a8>
   129c2:	be01      	bkpt	0x0001
   129c4:	2300      	movs	r3, #0
   129c6:	461a      	mov	r2, r3
   129c8:	4619      	mov	r1, r3
   129ca:	4618      	mov	r0, r3
   129cc:	f7fa f8ea 	bl	cba4 <__assert_func>
{ return value->type == CborIntegerType; }
   129d0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   129d4:	b99b      	cbnz	r3, 129fe <cbor_internal_read_object+0x1e2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   129d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   129da:	f013 0f01 	tst.w	r3, #1
   129de:	d118      	bne.n	12a12 <cbor_internal_read_object+0x1f6>
   129e0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   129e4:	2400      	movs	r4, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   129e6:	602b      	str	r3, [r5, #0]
   129e8:	606c      	str	r4, [r5, #4]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   129ea:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   129ee:	f011 0f02 	tst.w	r1, #2
   129f2:	d0cb      	beq.n	1298c <cbor_internal_read_object+0x170>
        *result = -*result - 1;
   129f4:	43da      	mvns	r2, r3
   129f6:	43e3      	mvns	r3, r4
   129f8:	602a      	str	r2, [r5, #0]
   129fa:	606b      	str	r3, [r5, #4]
    return CborNoError;
   129fc:	e7c6      	b.n	1298c <cbor_internal_read_object+0x170>
    assert(cbor_value_is_integer(value));
   129fe:	f7f9 fbcd 	bl	c19c <hal_debugger_connected>
   12a02:	b100      	cbz	r0, 12a06 <cbor_internal_read_object+0x1ea>
   12a04:	be01      	bkpt	0x0001
   12a06:	2300      	movs	r3, #0
   12a08:	461a      	mov	r2, r3
   12a0a:	4619      	mov	r1, r3
   12a0c:	4618      	mov	r0, r3
   12a0e:	f7fa f8c9 	bl	cba4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12a12:	a805      	add	r0, sp, #20
   12a14:	f016 f89d 	bl	28b52 <_cbor_value_decode_int64_internal>
   12a18:	4603      	mov	r3, r0
   12a1a:	460c      	mov	r4, r1
   12a1c:	e7e3      	b.n	129e6 <cbor_internal_read_object+0x1ca>
{ return value->type == CborIntegerType; }
   12a1e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12a22:	b933      	cbnz	r3, 12a32 <cbor_internal_read_object+0x216>
   12a24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12a28:	f013 0f02 	tst.w	r3, #2
   12a2c:	d00e      	beq.n	12a4c <cbor_internal_read_object+0x230>
   12a2e:	2300      	movs	r3, #0
   12a30:	e000      	b.n	12a34 <cbor_internal_read_object+0x218>
   12a32:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   12a34:	b163      	cbz	r3, 12a50 <cbor_internal_read_object+0x234>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12a36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12a3a:	f013 0f01 	tst.w	r3, #1
   12a3e:	d111      	bne.n	12a64 <cbor_internal_read_object+0x248>
   12a40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   12a44:	2300      	movs	r3, #0
    *result = _cbor_value_extract_int64_helper(value);
   12a46:	e9c5 2300 	strd	r2, r3, [r5]
    return CborNoError;
   12a4a:	e79f      	b.n	1298c <cbor_internal_read_object+0x170>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12a4c:	2301      	movs	r3, #1
   12a4e:	e7f1      	b.n	12a34 <cbor_internal_read_object+0x218>
    assert(cbor_value_is_unsigned_integer(value));
   12a50:	f7f9 fba4 	bl	c19c <hal_debugger_connected>
   12a54:	b100      	cbz	r0, 12a58 <cbor_internal_read_object+0x23c>
   12a56:	be01      	bkpt	0x0001
   12a58:	2300      	movs	r3, #0
   12a5a:	461a      	mov	r2, r3
   12a5c:	4619      	mov	r1, r3
   12a5e:	4618      	mov	r0, r3
   12a60:	f7fa f8a0 	bl	cba4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12a64:	a805      	add	r0, sp, #20
   12a66:	f016 f874 	bl	28b52 <_cbor_value_decode_int64_internal>
   12a6a:	4602      	mov	r2, r0
   12a6c:	460b      	mov	r3, r1
   12a6e:	e7ea      	b.n	12a46 <cbor_internal_read_object+0x22a>
                size_t len = cursor->len;
   12a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12a72:	9303      	str	r3, [sp, #12]
{ return value->type == CborByteStringType; }
   12a74:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   12a78:	2b40      	cmp	r3, #64	; 0x40
   12a7a:	d109      	bne.n	12a90 <cbor_internal_read_object+0x274>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12a7c:	2300      	movs	r3, #0
   12a7e:	aa03      	add	r2, sp, #12
   12a80:	4601      	mov	r1, r0
   12a82:	a805      	add	r0, sp, #20
   12a84:	f016 f9b2 	bl	28dec <_cbor_value_copy_string>
                *cursor->addr.bytestring.len = len;
   12a88:	68e3      	ldr	r3, [r4, #12]
   12a8a:	9a03      	ldr	r2, [sp, #12]
   12a8c:	601a      	str	r2, [r3, #0]
                break;
   12a8e:	e77d      	b.n	1298c <cbor_internal_read_object+0x170>
    assert(cbor_value_is_byte_string(value));
   12a90:	f7f9 fb84 	bl	c19c <hal_debugger_connected>
   12a94:	b100      	cbz	r0, 12a98 <cbor_internal_read_object+0x27c>
   12a96:	be01      	bkpt	0x0001
   12a98:	2300      	movs	r3, #0
   12a9a:	461a      	mov	r2, r3
   12a9c:	4619      	mov	r1, r3
   12a9e:	4618      	mov	r0, r3
   12aa0:	f7fa f880 	bl	cba4 <__assert_func>
                size_t len = cursor->len;
   12aa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12aa6:	9303      	str	r3, [sp, #12]
{ return value->type == CborTextStringType; }
   12aa8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12aac:	2b60      	cmp	r3, #96	; 0x60
   12aae:	d106      	bne.n	12abe <cbor_internal_read_object+0x2a2>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12ab0:	2300      	movs	r3, #0
   12ab2:	aa03      	add	r2, sp, #12
   12ab4:	4601      	mov	r1, r0
   12ab6:	a805      	add	r0, sp, #20
   12ab8:	f016 f998 	bl	28dec <_cbor_value_copy_string>
                break;
   12abc:	e766      	b.n	1298c <cbor_internal_read_object+0x170>
    assert(cbor_value_is_text_string(value));
   12abe:	f7f9 fb6d 	bl	c19c <hal_debugger_connected>
   12ac2:	b100      	cbz	r0, 12ac6 <cbor_internal_read_object+0x2aa>
   12ac4:	be01      	bkpt	0x0001
   12ac6:	2300      	movs	r3, #0
   12ac8:	461a      	mov	r2, r3
   12aca:	4619      	mov	r1, r3
   12acc:	4618      	mov	r0, r3
   12ace:	f7fa f869 	bl	cba4 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   12ad2:	f104 0108 	add.w	r1, r4, #8
   12ad6:	a805      	add	r0, sp, #20
   12ad8:	f7ff fda4 	bl	12624 <cbor_read_array>
   12adc:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   12ae0:	e758      	b.n	12994 <cbor_internal_read_object+0x178>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   12ae2:	2300      	movs	r3, #0
   12ae4:	461a      	mov	r2, r3
   12ae6:	68a1      	ldr	r1, [r4, #8]
   12ae8:	a805      	add	r0, sp, #20
   12aea:	f7ff fe97 	bl	1281c <cbor_internal_read_object>
   12aee:	ea48 0800 	orr.w	r8, r8, r0
                continue;
   12af2:	e74f      	b.n	12994 <cbor_internal_read_object+0x178>
{ return value && value->type != CborInvalidType; }
   12af4:	2300      	movs	r3, #0
   12af6:	e753      	b.n	129a0 <cbor_internal_read_object+0x184>
        err |= cbor_value_leave_container(root_value, &cur_value);
   12af8:	a905      	add	r1, sp, #20
   12afa:	9801      	ldr	r0, [sp, #4]
   12afc:	f016 f94d 	bl	28d9a <cbor_value_leave_container>
   12b00:	ea48 0800 	orr.w	r8, r8, r0
   12b04:	e6f2      	b.n	128ec <cbor_internal_read_object+0xd0>

00012b06 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   12b06:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   12b08:	2300      	movs	r3, #0
   12b0a:	461a      	mov	r2, r3
   12b0c:	f7ff fe86 	bl	1281c <cbor_internal_read_object>
    return st;
}
   12b10:	bd08      	pop	{r3, pc}

00012b12 <img_mgmt_find_tlvs>:
 * Finds the TLVs in the specified image slot, if any.
 */
static int
img_mgmt_find_tlvs(int slot, size_t *start_off, size_t *end_off,
                   uint16_t magic)
{
   12b12:	b570      	push	{r4, r5, r6, lr}
   12b14:	b082      	sub	sp, #8
   12b16:	460c      	mov	r4, r1
   12b18:	4616      	mov	r6, r2
   12b1a:	461d      	mov	r5, r3
    struct image_tlv_info tlv_info;
    int rc;

    rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof tlv_info);
   12b1c:	2304      	movs	r3, #4
   12b1e:	eb0d 0203 	add.w	r2, sp, r3
   12b22:	6809      	ldr	r1, [r1, #0]
   12b24:	f000 fdf5 	bl	13712 <img_mgmt_impl_read>
    if (rc != 0) {
   12b28:	b960      	cbnz	r0, 12b44 <img_mgmt_find_tlvs+0x32>
        /* Read error. */
        return MGMT_ERR_EUNKNOWN;
    }

    if (tlv_info.it_magic != magic) {
   12b2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   12b2e:	42ab      	cmp	r3, r5
   12b30:	d10a      	bne.n	12b48 <img_mgmt_find_tlvs+0x36>
        /* No TLVs. */
        return MGMT_ERR_ENOENT;
    }

    *start_off += sizeof tlv_info;
   12b32:	6823      	ldr	r3, [r4, #0]
   12b34:	3304      	adds	r3, #4
   12b36:	6023      	str	r3, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   12b38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   12b3c:	4413      	add	r3, r2
   12b3e:	6033      	str	r3, [r6, #0]

    return 0;
}
   12b40:	b002      	add	sp, #8
   12b42:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EUNKNOWN;
   12b44:	2001      	movs	r0, #1
   12b46:	e7fb      	b.n	12b40 <img_mgmt_find_tlvs+0x2e>
        return MGMT_ERR_ENOENT;
   12b48:	2005      	movs	r0, #5
   12b4a:	e7f9      	b.n	12b40 <img_mgmt_find_tlvs+0x2e>

00012b4c <img_mgmt_upload_good_rsp>:
    return 0;
}

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   12b4c:	b538      	push	{r3, r4, r5, lr}
   12b4e:	4605      	mov	r5, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   12b50:	2202      	movs	r2, #2
   12b52:	490e      	ldr	r1, [pc, #56]	; (12b8c <img_mgmt_upload_good_rsp+0x40>)
   12b54:	f015 fd5e 	bl	28614 <cbor_encode_text_string>
   12b58:	4604      	mov	r4, r0
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   12b5a:	2200      	movs	r2, #0
   12b5c:	2300      	movs	r3, #0
   12b5e:	4628      	mov	r0, r5
   12b60:	f015 fce3 	bl	2852a <cbor_encode_int>
   12b64:	4304      	orrs	r4, r0
   12b66:	2203      	movs	r2, #3
   12b68:	4909      	ldr	r1, [pc, #36]	; (12b90 <img_mgmt_upload_good_rsp+0x44>)
   12b6a:	4628      	mov	r0, r5
   12b6c:	f015 fd52 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   12b70:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   12b72:	4b08      	ldr	r3, [pc, #32]	; (12b94 <img_mgmt_upload_good_rsp+0x48>)
   12b74:	685a      	ldr	r2, [r3, #4]
   12b76:	2300      	movs	r3, #0
   12b78:	4628      	mov	r0, r5
   12b7a:	f015 fcd6 	bl	2852a <cbor_encode_int>

    if (err != 0) {
   12b7e:	ea54 0300 	orrs.w	r3, r4, r0
   12b82:	d101      	bne.n	12b88 <img_mgmt_upload_good_rsp+0x3c>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   12b84:	2000      	movs	r0, #0
}
   12b86:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   12b88:	2002      	movs	r0, #2
   12b8a:	e7fc      	b.n	12b86 <img_mgmt_upload_good_rsp+0x3a>
   12b8c:	0002d868 	.word	0x0002d868
   12b90:	0002db90 	.word	0x0002db90
   12b94:	20001e40 	.word	0x20001e40

00012b98 <img_mgmt_read_info>:
{
   12b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b9a:	b08d      	sub	sp, #52	; 0x34
   12b9c:	4604      	mov	r4, r0
   12b9e:	460d      	mov	r5, r1
   12ba0:	4616      	mov	r6, r2
   12ba2:	461f      	mov	r7, r3
    rc = img_mgmt_impl_erased_val(image_slot, &erased_val);
   12ba4:	f10d 0103 	add.w	r1, sp, #3
   12ba8:	f000 fe20 	bl	137ec <img_mgmt_impl_erased_val>
    if (rc != 0) {
   12bac:	b118      	cbz	r0, 12bb6 <img_mgmt_read_info+0x1e>
        return MGMT_ERR_EUNKNOWN;
   12bae:	2501      	movs	r5, #1
}
   12bb0:	4628      	mov	r0, r5
   12bb2:	b00d      	add	sp, #52	; 0x34
   12bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof hdr);
   12bb6:	2320      	movs	r3, #32
   12bb8:	aa04      	add	r2, sp, #16
   12bba:	2100      	movs	r1, #0
   12bbc:	4620      	mov	r0, r4
   12bbe:	f000 fda8 	bl	13712 <img_mgmt_impl_read>
    if (rc != 0) {
   12bc2:	2800      	cmp	r0, #0
   12bc4:	d178      	bne.n	12cb8 <img_mgmt_read_info+0x120>
    if (ver != NULL) {
   12bc6:	b12d      	cbz	r5, 12bd4 <img_mgmt_read_info+0x3c>
        memset(ver, erased_val, sizeof(*ver));
   12bc8:	2208      	movs	r2, #8
   12bca:	f89d 1003 	ldrb.w	r1, [sp, #3]
   12bce:	4628      	mov	r0, r5
   12bd0:	f7fb ff17 	bl	ea02 <memset>
    erased_val_32 = ERASED_VAL_32(erased_val);
   12bd4:	f89d 2003 	ldrb.w	r2, [sp, #3]
   12bd8:	0413      	lsls	r3, r2, #16
   12bda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   12bde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   12be2:	431a      	orrs	r2, r3
    if (hdr.ih_magic == IMAGE_MAGIC) {
   12be4:	9b04      	ldr	r3, [sp, #16]
   12be6:	493a      	ldr	r1, [pc, #232]	; (12cd0 <img_mgmt_read_info+0x138>)
   12be8:	428b      	cmp	r3, r1
   12bea:	d003      	beq.n	12bf4 <img_mgmt_read_info+0x5c>
    } else if (hdr.ih_magic == erased_val_32) {
   12bec:	4293      	cmp	r3, r2
   12bee:	d025      	beq.n	12c3c <img_mgmt_read_info+0xa4>
        return MGMT_ERR_EUNKNOWN;
   12bf0:	2501      	movs	r5, #1
   12bf2:	e7dd      	b.n	12bb0 <img_mgmt_read_info+0x18>
        if (ver != NULL) {
   12bf4:	b11d      	cbz	r5, 12bfe <img_mgmt_read_info+0x66>
            memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   12bf6:	ab09      	add	r3, sp, #36	; 0x24
   12bf8:	cb03      	ldmia	r3!, {r0, r1}
   12bfa:	6028      	str	r0, [r5, #0]
   12bfc:	6069      	str	r1, [r5, #4]
    if (flags != NULL) {
   12bfe:	b10f      	cbz	r7, 12c04 <img_mgmt_read_info+0x6c>
        *flags = hdr.ih_flags;
   12c00:	9b08      	ldr	r3, [sp, #32]
   12c02:	603b      	str	r3, [r7, #0]
    data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   12c04:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   12c08:	9a07      	ldr	r2, [sp, #28]
   12c0a:	4413      	add	r3, r2
   12c0c:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_PROT_INFO_MAGIC);
   12c0e:	f646 1308 	movw	r3, #26888	; 0x6908
   12c12:	aa01      	add	r2, sp, #4
   12c14:	a902      	add	r1, sp, #8
   12c16:	4620      	mov	r0, r4
   12c18:	f7ff ff7b 	bl	12b12 <img_mgmt_find_tlvs>
    if (!rc) {
   12c1c:	b910      	cbnz	r0, 12c24 <img_mgmt_read_info+0x8c>
        data_off = data_end - sizeof(struct image_tlv_info);
   12c1e:	9b01      	ldr	r3, [sp, #4]
   12c20:	3b04      	subs	r3, #4
   12c22:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_INFO_MAGIC);
   12c24:	f646 1307 	movw	r3, #26887	; 0x6907
   12c28:	aa01      	add	r2, sp, #4
   12c2a:	a902      	add	r1, sp, #8
   12c2c:	4620      	mov	r0, r4
   12c2e:	f7ff ff70 	bl	12b12 <img_mgmt_find_tlvs>
    if (rc != 0) {
   12c32:	4605      	mov	r5, r0
   12c34:	2800      	cmp	r0, #0
   12c36:	d141      	bne.n	12cbc <img_mgmt_read_info+0x124>
    hash_found = false;
   12c38:	2700      	movs	r7, #0
   12c3a:	e00f      	b.n	12c5c <img_mgmt_read_info+0xc4>
        return MGMT_ERR_ENOENT;
   12c3c:	2505      	movs	r5, #5
   12c3e:	e7b7      	b.n	12bb0 <img_mgmt_read_info+0x18>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   12c40:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   12c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12c48:	4291      	cmp	r1, r2
   12c4a:	d116      	bne.n	12c7a <img_mgmt_read_info+0xe2>
            return MGMT_ERR_EUNKNOWN;
   12c4c:	2501      	movs	r5, #1
   12c4e:	e7af      	b.n	12bb0 <img_mgmt_read_info+0x18>
            data_off += sizeof tlv + tlv.it_len;
   12c50:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12c54:	9a02      	ldr	r2, [sp, #8]
   12c56:	4413      	add	r3, r2
   12c58:	3304      	adds	r3, #4
   12c5a:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof tlv <= data_end) {
   12c5c:	9902      	ldr	r1, [sp, #8]
   12c5e:	1d0a      	adds	r2, r1, #4
   12c60:	9b01      	ldr	r3, [sp, #4]
   12c62:	429a      	cmp	r2, r3
   12c64:	d823      	bhi.n	12cae <img_mgmt_read_info+0x116>
        rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof tlv);
   12c66:	2304      	movs	r3, #4
   12c68:	aa03      	add	r2, sp, #12
   12c6a:	4620      	mov	r0, r4
   12c6c:	f000 fd51 	bl	13712 <img_mgmt_impl_read>
        if (rc != 0) {
   12c70:	bb30      	cbnz	r0, 12cc0 <img_mgmt_read_info+0x128>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   12c72:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12c76:	2bff      	cmp	r3, #255	; 0xff
   12c78:	d0e2      	beq.n	12c40 <img_mgmt_read_info+0xa8>
        if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   12c7a:	2b10      	cmp	r3, #16
   12c7c:	d1e8      	bne.n	12c50 <img_mgmt_read_info+0xb8>
   12c7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12c82:	2b20      	cmp	r3, #32
   12c84:	d1e4      	bne.n	12c50 <img_mgmt_read_info+0xb8>
        if (hash_found) {
   12c86:	b9ef      	cbnz	r7, 12cc4 <img_mgmt_read_info+0x12c>
        data_off += sizeof tlv;
   12c88:	9902      	ldr	r1, [sp, #8]
   12c8a:	3104      	adds	r1, #4
   12c8c:	9102      	str	r1, [sp, #8]
        if (hash != NULL) {
   12c8e:	b166      	cbz	r6, 12caa <img_mgmt_read_info+0x112>
            if (data_off + IMAGE_HASH_LEN > data_end) {
   12c90:	f101 0320 	add.w	r3, r1, #32
   12c94:	9a01      	ldr	r2, [sp, #4]
   12c96:	4293      	cmp	r3, r2
   12c98:	d816      	bhi.n	12cc8 <img_mgmt_read_info+0x130>
            rc = img_mgmt_impl_read(image_slot, data_off, hash,
   12c9a:	2320      	movs	r3, #32
   12c9c:	4632      	mov	r2, r6
   12c9e:	4620      	mov	r0, r4
   12ca0:	f000 fd37 	bl	13712 <img_mgmt_impl_read>
            if (rc != 0) {
   12ca4:	b990      	cbnz	r0, 12ccc <img_mgmt_read_info+0x134>
        hash_found = true;
   12ca6:	2701      	movs	r7, #1
   12ca8:	e7d8      	b.n	12c5c <img_mgmt_read_info+0xc4>
   12caa:	2701      	movs	r7, #1
   12cac:	e7d6      	b.n	12c5c <img_mgmt_read_info+0xc4>
    if (!hash_found) {
   12cae:	2f00      	cmp	r7, #0
   12cb0:	f47f af7e 	bne.w	12bb0 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   12cb4:	2501      	movs	r5, #1
   12cb6:	e77b      	b.n	12bb0 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   12cb8:	2501      	movs	r5, #1
   12cba:	e779      	b.n	12bb0 <img_mgmt_read_info+0x18>
        return MGMT_ERR_EUNKNOWN;
   12cbc:	2501      	movs	r5, #1
   12cbe:	e777      	b.n	12bb0 <img_mgmt_read_info+0x18>
            return MGMT_ERR_EUNKNOWN;
   12cc0:	2501      	movs	r5, #1
   12cc2:	e775      	b.n	12bb0 <img_mgmt_read_info+0x18>
            return MGMT_ERR_EUNKNOWN;
   12cc4:	2501      	movs	r5, #1
   12cc6:	e773      	b.n	12bb0 <img_mgmt_read_info+0x18>
                return MGMT_ERR_EUNKNOWN;
   12cc8:	2501      	movs	r5, #1
   12cca:	e771      	b.n	12bb0 <img_mgmt_read_info+0x18>
                return MGMT_ERR_EUNKNOWN;
   12ccc:	2501      	movs	r5, #1
   12cce:	e76f      	b.n	12bb0 <img_mgmt_read_info+0x18>
   12cd0:	96f3b83d 	.word	0x96f3b83d

00012cd4 <img_mgmt_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
img_mgmt_upload_log(bool is_first, bool is_last, int status)
{
   12cd4:	b510      	push	{r4, lr}
   12cd6:	b088      	sub	sp, #32
   12cd8:	4614      	mov	r4, r2
    uint8_t hash[IMAGE_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   12cda:	b920      	cbnz	r0, 12ce6 <img_mgmt_upload_log+0x12>
        return img_mgmt_impl_log_upload_start(status);
    }

    if (is_last || status != 0) {
   12cdc:	b939      	cbnz	r1, 12cee <img_mgmt_upload_log+0x1a>
   12cde:	b932      	cbnz	r2, 12cee <img_mgmt_upload_log+0x1a>

        return img_mgmt_impl_log_upload_done(status, hashp);
    }

    /* Nothing to log. */
    return 0;
   12ce0:	4610      	mov	r0, r2
}
   12ce2:	b008      	add	sp, #32
   12ce4:	bd10      	pop	{r4, pc}
        return img_mgmt_impl_log_upload_start(status);
   12ce6:	4610      	mov	r0, r2
   12ce8:	f000 fdaa 	bl	13840 <img_mgmt_impl_log_upload_start>
   12cec:	e7f9      	b.n	12ce2 <img_mgmt_upload_log+0xe>
        rc = img_mgmt_read_info(1, NULL, hash, NULL);
   12cee:	2300      	movs	r3, #0
   12cf0:	466a      	mov	r2, sp
   12cf2:	4619      	mov	r1, r3
   12cf4:	2001      	movs	r0, #1
   12cf6:	f7ff ff4f 	bl	12b98 <img_mgmt_read_info>
        if (rc != 0) {
   12cfa:	b120      	cbz	r0, 12d06 <img_mgmt_upload_log+0x32>
            hashp = NULL;
   12cfc:	2100      	movs	r1, #0
        return img_mgmt_impl_log_upload_done(status, hashp);
   12cfe:	4620      	mov	r0, r4
   12d00:	f000 fda8 	bl	13854 <img_mgmt_impl_log_upload_done>
   12d04:	e7ed      	b.n	12ce2 <img_mgmt_upload_log+0xe>
            hashp = hash;
   12d06:	4669      	mov	r1, sp
   12d08:	e7f9      	b.n	12cfe <img_mgmt_upload_log+0x2a>

00012d0a <img_mgmt_find_by_hash>:
{
   12d0a:	b570      	push	{r4, r5, r6, lr}
   12d0c:	b088      	sub	sp, #32
   12d0e:	4606      	mov	r6, r0
   12d10:	460d      	mov	r5, r1
    for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   12d12:	2400      	movs	r4, #0
   12d14:	e000      	b.n	12d18 <img_mgmt_find_by_hash+0xe>
   12d16:	3401      	adds	r4, #1
   12d18:	2c01      	cmp	r4, #1
   12d1a:	dc0f      	bgt.n	12d3c <img_mgmt_find_by_hash+0x32>
        if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   12d1c:	2300      	movs	r3, #0
   12d1e:	466a      	mov	r2, sp
   12d20:	4629      	mov	r1, r5
   12d22:	4620      	mov	r0, r4
   12d24:	f7ff ff38 	bl	12b98 <img_mgmt_read_info>
   12d28:	2800      	cmp	r0, #0
   12d2a:	d1f4      	bne.n	12d16 <img_mgmt_find_by_hash+0xc>
        if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   12d2c:	2220      	movs	r2, #32
   12d2e:	4631      	mov	r1, r6
   12d30:	4668      	mov	r0, sp
   12d32:	f7fb fe1d 	bl	e970 <memcmp>
   12d36:	2800      	cmp	r0, #0
   12d38:	d1ed      	bne.n	12d16 <img_mgmt_find_by_hash+0xc>
   12d3a:	e001      	b.n	12d40 <img_mgmt_find_by_hash+0x36>
    return -1;
   12d3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   12d40:	4620      	mov	r0, r4
   12d42:	b008      	add	sp, #32
   12d44:	bd70      	pop	{r4, r5, r6, pc}
	...

00012d48 <img_mgmt_dfu_stopped>:
    return img_mgmt_upload_good_rsp(ctxt);
}

void
img_mgmt_dfu_stopped(void)
{
   12d48:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   12d4a:	4b03      	ldr	r3, [pc, #12]	; (12d58 <img_mgmt_dfu_stopped+0x10>)
   12d4c:	681b      	ldr	r3, [r3, #0]
   12d4e:	b113      	cbz	r3, 12d56 <img_mgmt_dfu_stopped+0xe>
   12d50:	685b      	ldr	r3, [r3, #4]
   12d52:	b103      	cbz	r3, 12d56 <img_mgmt_dfu_stopped+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   12d54:	4798      	blx	r3
    }
}
   12d56:	bd08      	pop	{r3, pc}
   12d58:	20001e70 	.word	0x20001e70

00012d5c <img_mgmt_erase>:
{
   12d5c:	b570      	push	{r4, r5, r6, lr}
   12d5e:	b082      	sub	sp, #8
   12d60:	4604      	mov	r4, r0
    rc = img_mgmt_read_info(1, &ver, NULL, NULL);
   12d62:	2300      	movs	r3, #0
   12d64:	461a      	mov	r2, r3
   12d66:	4669      	mov	r1, sp
   12d68:	2001      	movs	r0, #1
   12d6a:	f7ff ff15 	bl	12b98 <img_mgmt_read_info>
    if (rc == 0) {
   12d6e:	b918      	cbnz	r0, 12d78 <img_mgmt_erase+0x1c>
        if (img_mgmt_slot_in_use(1)) {
   12d70:	2001      	movs	r0, #1
   12d72:	f000 f9aa 	bl	130ca <img_mgmt_slot_in_use>
   12d76:	b9b8      	cbnz	r0, 12da8 <img_mgmt_erase+0x4c>
    rc = img_mgmt_impl_erase_slot();
   12d78:	f000 fc56 	bl	13628 <img_mgmt_impl_erase_slot>
    if (!rc) {
   12d7c:	4606      	mov	r6, r0
   12d7e:	b180      	cbz	r0, 12da2 <img_mgmt_erase+0x46>
   12d80:	2202      	movs	r2, #2
   12d82:	490b      	ldr	r1, [pc, #44]	; (12db0 <img_mgmt_erase+0x54>)
   12d84:	4620      	mov	r0, r4
   12d86:	f015 fc45 	bl	28614 <cbor_encode_text_string>
   12d8a:	4605      	mov	r5, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   12d8c:	4632      	mov	r2, r6
   12d8e:	17f3      	asrs	r3, r6, #31
   12d90:	4620      	mov	r0, r4
   12d92:	f015 fbca 	bl	2852a <cbor_encode_int>
    if (err != 0) {
   12d96:	ea50 0305 	orrs.w	r3, r0, r5
   12d9a:	d107      	bne.n	12dac <img_mgmt_erase+0x50>
    return 0;
   12d9c:	2000      	movs	r0, #0
}
   12d9e:	b002      	add	sp, #8
   12da0:	bd70      	pop	{r4, r5, r6, pc}
        img_mgmt_dfu_stopped();
   12da2:	f7ff ffd1 	bl	12d48 <img_mgmt_dfu_stopped>
   12da6:	e7eb      	b.n	12d80 <img_mgmt_erase+0x24>
            return MGMT_ERR_EBADSTATE;
   12da8:	2006      	movs	r0, #6
   12daa:	e7f8      	b.n	12d9e <img_mgmt_erase+0x42>
        return MGMT_ERR_ENOMEM;
   12dac:	2002      	movs	r0, #2
   12dae:	e7f6      	b.n	12d9e <img_mgmt_erase+0x42>
   12db0:	0002d868 	.word	0x0002d868

00012db4 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
   12db4:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   12db6:	4b03      	ldr	r3, [pc, #12]	; (12dc4 <img_mgmt_dfu_started+0x10>)
   12db8:	681b      	ldr	r3, [r3, #0]
   12dba:	b113      	cbz	r3, 12dc2 <img_mgmt_dfu_started+0xe>
   12dbc:	681b      	ldr	r3, [r3, #0]
   12dbe:	b103      	cbz	r3, 12dc2 <img_mgmt_dfu_started+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   12dc0:	4798      	blx	r3
    }
}
   12dc2:	bd08      	pop	{r3, pc}
   12dc4:	20001e70 	.word	0x20001e70

00012dc8 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
   12dc8:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   12dca:	4b03      	ldr	r3, [pc, #12]	; (12dd8 <img_mgmt_dfu_pending+0x10>)
   12dcc:	681b      	ldr	r3, [r3, #0]
   12dce:	b113      	cbz	r3, 12dd6 <img_mgmt_dfu_pending+0xe>
   12dd0:	689b      	ldr	r3, [r3, #8]
   12dd2:	b103      	cbz	r3, 12dd6 <img_mgmt_dfu_pending+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   12dd4:	4798      	blx	r3
    }
}
   12dd6:	bd08      	pop	{r3, pc}
   12dd8:	20001e70 	.word	0x20001e70

00012ddc <img_mgmt_upload>:
{
   12ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12de0:	f5ad 7d71 	sub.w	sp, sp, #964	; 0x3c4
   12de4:	4605      	mov	r5, r0
    struct img_mgmt_upload_req req = {
   12de6:	ac5c      	add	r4, sp, #368	; 0x170
   12de8:	f44f 7212 	mov.w	r2, #584	; 0x248
   12dec:	2100      	movs	r1, #0
   12dee:	4620      	mov	r0, r4
   12df0:	f7fb fe07 	bl	ea02 <memset>
   12df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12dfc:	e9c4 2302 	strd	r2, r3, [r4, #8]
   12e00:	e9c4 2304 	strd	r2, r3, [r4, #16]
    const struct cbor_attr_t off_attr[] = {
   12e04:	f44f 72a8 	mov.w	r2, #336	; 0x150
   12e08:	2100      	movs	r1, #0
   12e0a:	a808      	add	r0, sp, #32
   12e0c:	f7fb fdf9 	bl	ea02 <memset>
   12e10:	4b71      	ldr	r3, [pc, #452]	; (12fd8 <img_mgmt_upload+0x1fc>)
   12e12:	9308      	str	r3, [sp, #32]
   12e14:	2202      	movs	r2, #2
   12e16:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   12e1a:	940a      	str	r4, [sp, #40]	; 0x28
   12e1c:	2301      	movs	r3, #1
   12e1e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   12e22:	496e      	ldr	r1, [pc, #440]	; (12fdc <img_mgmt_upload+0x200>)
   12e24:	9114      	str	r1, [sp, #80]	; 0x50
   12e26:	2103      	movs	r1, #3
   12e28:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   12e2c:	a864      	add	r0, sp, #400	; 0x190
   12e2e:	9016      	str	r0, [sp, #88]	; 0x58
   12e30:	a862      	add	r0, sp, #392	; 0x188
   12e32:	9017      	str	r0, [sp, #92]	; 0x5c
   12e34:	f44f 7000 	mov.w	r0, #512	; 0x200
   12e38:	901e      	str	r0, [sp, #120]	; 0x78
   12e3a:	4869      	ldr	r0, [pc, #420]	; (12fe0 <img_mgmt_upload+0x204>)
   12e3c:	9020      	str	r0, [sp, #128]	; 0x80
   12e3e:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   12e42:	a860      	add	r0, sp, #384	; 0x180
   12e44:	9022      	str	r0, [sp, #136]	; 0x88
   12e46:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   12e4a:	4866      	ldr	r0, [pc, #408]	; (12fe4 <img_mgmt_upload+0x208>)
   12e4c:	902c      	str	r0, [sp, #176]	; 0xb0
   12e4e:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
   12e52:	aa5e      	add	r2, sp, #376	; 0x178
   12e54:	922e      	str	r2, [sp, #184]	; 0xb8
   12e56:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   12e5a:	4b63      	ldr	r3, [pc, #396]	; (12fe8 <img_mgmt_upload+0x20c>)
   12e5c:	9338      	str	r3, [sp, #224]	; 0xe0
   12e5e:	f88d 10e4 	strb.w	r1, [sp, #228]	; 0xe4
   12e62:	abe4      	add	r3, sp, #912	; 0x390
   12e64:	933a      	str	r3, [sp, #232]	; 0xe8
   12e66:	ab63      	add	r3, sp, #396	; 0x18c
   12e68:	933b      	str	r3, [sp, #236]	; 0xec
   12e6a:	2320      	movs	r3, #32
   12e6c:	9342      	str	r3, [sp, #264]	; 0x108
   12e6e:	4b5f      	ldr	r3, [pc, #380]	; (12fec <img_mgmt_upload+0x210>)
   12e70:	9344      	str	r3, [sp, #272]	; 0x110
   12e72:	2305      	movs	r3, #5
   12e74:	f88d 3114 	strb.w	r3, [sp, #276]	; 0x114
   12e78:	abec      	add	r3, sp, #944	; 0x3b0
   12e7a:	9346      	str	r3, [sp, #280]	; 0x118
    const char *errstr = NULL;
   12e7c:	2300      	movs	r3, #0
   12e7e:	9307      	str	r3, [sp, #28]
    rc = cbor_read_object(&ctxt->it, off_attr);
   12e80:	a908      	add	r1, sp, #32
   12e82:	f105 001c 	add.w	r0, r5, #28
   12e86:	f7ff fe3e 	bl	12b06 <cbor_read_object>
    if (rc != 0) {
   12e8a:	2800      	cmp	r0, #0
   12e8c:	f040 809d 	bne.w	12fca <img_mgmt_upload+0x1ee>
    rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   12e90:	aa07      	add	r2, sp, #28
   12e92:	4669      	mov	r1, sp
   12e94:	a85c      	add	r0, sp, #368	; 0x170
   12e96:	f000 faff 	bl	13498 <img_mgmt_impl_upload_inspect>
    if (rc != 0) {
   12e9a:	4604      	mov	r4, r0
   12e9c:	2800      	cmp	r0, #0
   12e9e:	d13c      	bne.n	12f1a <img_mgmt_upload+0x13e>
    if (!action.proceed) {
   12ea0:	f89d 6010 	ldrb.w	r6, [sp, #16]
   12ea4:	2e00      	cmp	r6, #0
   12ea6:	d03b      	beq.n	12f20 <img_mgmt_upload+0x144>
    if (img_mgmt_upload_cb != NULL) {
   12ea8:	4b51      	ldr	r3, [pc, #324]	; (12ff0 <img_mgmt_upload+0x214>)
   12eaa:	681b      	ldr	r3, [r3, #0]
   12eac:	b13b      	cbz	r3, 12ebe <img_mgmt_upload+0xe2>
        rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   12eae:	4a51      	ldr	r2, [pc, #324]	; (12ff4 <img_mgmt_upload+0x218>)
   12eb0:	6812      	ldr	r2, [r2, #0]
   12eb2:	9900      	ldr	r1, [sp, #0]
   12eb4:	985e      	ldr	r0, [sp, #376]	; 0x178
   12eb6:	4798      	blx	r3
        if (rc != 0) {
   12eb8:	4604      	mov	r4, r0
   12eba:	2800      	cmp	r0, #0
   12ebc:	d135      	bne.n	12f2a <img_mgmt_upload+0x14e>
    g_img_mgmt_state.area_id = action.area_id;
   12ebe:	9a03      	ldr	r2, [sp, #12]
   12ec0:	4b4d      	ldr	r3, [pc, #308]	; (12ff8 <img_mgmt_upload+0x21c>)
   12ec2:	601a      	str	r2, [r3, #0]
    g_img_mgmt_state.size = action.size;
   12ec4:	9a00      	ldr	r2, [sp, #0]
   12ec6:	609a      	str	r2, [r3, #8]
    if (req.off == 0) {
   12ec8:	e9dd 235e 	ldrd	r2, r3, [sp, #376]	; 0x178
   12ecc:	4313      	orrs	r3, r2
   12ece:	d04a      	beq.n	12f66 <img_mgmt_upload+0x18a>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   12ed0:	2301      	movs	r3, #1
   12ed2:	93ef      	str	r3, [sp, #956]	; 0x3bc
    if (req.data_len != 0) {
   12ed4:	9b62      	ldr	r3, [sp, #392]	; 0x188
   12ed6:	b353      	cbz	r3, 12f2e <img_mgmt_upload+0x152>
        if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   12ed8:	4a47      	ldr	r2, [pc, #284]	; (12ff8 <img_mgmt_upload+0x21c>)
   12eda:	6851      	ldr	r1, [r2, #4]
   12edc:	440b      	add	r3, r1
   12ede:	6892      	ldr	r2, [r2, #8]
   12ee0:	4293      	cmp	r3, r2
   12ee2:	d000      	beq.n	12ee6 <img_mgmt_upload+0x10a>
    bool last = false;
   12ee4:	2600      	movs	r6, #0
        rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes, last);
   12ee6:	4633      	mov	r3, r6
   12ee8:	9a02      	ldr	r2, [sp, #8]
   12eea:	a964      	add	r1, sp, #400	; 0x190
   12eec:	985e      	ldr	r0, [sp, #376]	; 0x178
   12eee:	f000 fc29 	bl	13744 <img_mgmt_impl_write_image_data>
        if (rc != 0) {
   12ef2:	4604      	mov	r4, r0
   12ef4:	2800      	cmp	r0, #0
   12ef6:	d161      	bne.n	12fbc <img_mgmt_upload+0x1e0>
            g_img_mgmt_state.off += action.write_bytes;
   12ef8:	9b02      	ldr	r3, [sp, #8]
   12efa:	4a3f      	ldr	r2, [pc, #252]	; (12ff8 <img_mgmt_upload+0x21c>)
   12efc:	6851      	ldr	r1, [r2, #4]
   12efe:	440b      	add	r3, r1
   12f00:	6053      	str	r3, [r2, #4]
            if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   12f02:	6892      	ldr	r2, [r2, #8]
   12f04:	4293      	cmp	r3, r2
   12f06:	d112      	bne.n	12f2e <img_mgmt_upload+0x152>
                img_mgmt_dfu_pending();
   12f08:	f7ff ff5e 	bl	12dc8 <img_mgmt_dfu_pending>
                cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_COMPLETE;
   12f0c:	2302      	movs	r3, #2
   12f0e:	93ef      	str	r3, [sp, #956]	; 0x3bc
                g_img_mgmt_state.area_id = -1;
   12f10:	4b39      	ldr	r3, [pc, #228]	; (12ff8 <img_mgmt_upload+0x21c>)
   12f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12f16:	601a      	str	r2, [r3, #0]
   12f18:	e009      	b.n	12f2e <img_mgmt_upload+0x152>
        img_mgmt_dfu_stopped();
   12f1a:	f7ff ff15 	bl	12d48 <img_mgmt_dfu_stopped>
        return rc;
   12f1e:	e055      	b.n	12fcc <img_mgmt_upload+0x1f0>
        return img_mgmt_upload_good_rsp(ctxt);
   12f20:	4628      	mov	r0, r5
   12f22:	f7ff fe13 	bl	12b4c <img_mgmt_upload_good_rsp>
   12f26:	4604      	mov	r4, r0
   12f28:	e050      	b.n	12fcc <img_mgmt_upload+0x1f0>
            errstr = img_mgmt_err_str_app_reject;
   12f2a:	2300      	movs	r3, #0
   12f2c:	9307      	str	r3, [sp, #28]
    img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   12f2e:	985e      	ldr	r0, [sp, #376]	; 0x178
   12f30:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
   12f32:	4b31      	ldr	r3, [pc, #196]	; (12ff8 <img_mgmt_upload+0x21c>)
   12f34:	6859      	ldr	r1, [r3, #4]
   12f36:	689b      	ldr	r3, [r3, #8]
   12f38:	4302      	orrs	r2, r0
   12f3a:	bf0c      	ite	eq
   12f3c:	2001      	moveq	r0, #1
   12f3e:	2000      	movne	r0, #0
   12f40:	4622      	mov	r2, r4
   12f42:	4299      	cmp	r1, r3
   12f44:	bf14      	ite	ne
   12f46:	2100      	movne	r1, #0
   12f48:	2101      	moveq	r1, #1
   12f4a:	f7ff fec3 	bl	12cd4 <img_mgmt_upload_log>
    mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   12f4e:	abef      	add	r3, sp, #956	; 0x3bc
   12f50:	2201      	movs	r2, #1
   12f52:	4611      	mov	r1, r2
   12f54:	2002      	movs	r0, #2
   12f56:	f001 f879 	bl	1404c <mgmt_evt>
    if (rc != 0) {
   12f5a:	bb9c      	cbnz	r4, 12fc4 <img_mgmt_upload+0x1e8>
    return img_mgmt_upload_good_rsp(ctxt);
   12f5c:	4628      	mov	r0, r5
   12f5e:	f7ff fdf5 	bl	12b4c <img_mgmt_upload_good_rsp>
   12f62:	4604      	mov	r4, r0
   12f64:	e032      	b.n	12fcc <img_mgmt_upload+0x1f0>
        g_img_mgmt_state.off = 0;
   12f66:	4f24      	ldr	r7, [pc, #144]	; (12ff8 <img_mgmt_upload+0x21c>)
   12f68:	f04f 0900 	mov.w	r9, #0
   12f6c:	f8c7 9004 	str.w	r9, [r7, #4]
        img_mgmt_dfu_started();
   12f70:	f7ff ff20 	bl	12db4 <img_mgmt_dfu_started>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   12f74:	f8cd 93bc 	str.w	r9, [sp, #956]	; 0x3bc
        g_img_mgmt_state.data_sha_len = req.data_sha_len;
   12f78:	f8dd 818c 	ldr.w	r8, [sp, #396]	; 0x18c
   12f7c:	f887 800c 	strb.w	r8, [r7, #12]
        memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   12f80:	4642      	mov	r2, r8
   12f82:	a9e4      	add	r1, sp, #912	; 0x390
   12f84:	f107 000d 	add.w	r0, r7, #13
   12f88:	f7fb fd16 	bl	e9b8 <memcpy>
        memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   12f8c:	f108 0008 	add.w	r0, r8, #8
   12f90:	4438      	add	r0, r7
   12f92:	f1c8 0220 	rsb	r2, r8, #32
   12f96:	4649      	mov	r1, r9
   12f98:	3005      	adds	r0, #5
   12f9a:	f7fb fd32 	bl	ea02 <memset>
        if (action.erase) {
   12f9e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12fa2:	2b00      	cmp	r3, #0
   12fa4:	d096      	beq.n	12ed4 <img_mgmt_upload+0xf8>
            rc = img_mgmt_impl_erase_image_data(0, req.size);
   12fa6:	9960      	ldr	r1, [sp, #384]	; 0x180
   12fa8:	4648      	mov	r0, r9
   12faa:	f000 fbe2 	bl	13772 <img_mgmt_impl_erase_image_data>
            if (rc != 0) {
   12fae:	4604      	mov	r4, r0
   12fb0:	2800      	cmp	r0, #0
   12fb2:	d08f      	beq.n	12ed4 <img_mgmt_upload+0xf8>
                errstr = img_mgmt_err_str_flash_erase_failed;
   12fb4:	f8cd 901c 	str.w	r9, [sp, #28]
                rc = MGMT_ERR_EUNKNOWN;
   12fb8:	2401      	movs	r4, #1
                goto end;
   12fba:	e7b8      	b.n	12f2e <img_mgmt_upload+0x152>
            errstr = img_mgmt_err_str_flash_write_failed;
   12fbc:	2300      	movs	r3, #0
   12fbe:	9307      	str	r3, [sp, #28]
            rc = MGMT_ERR_EUNKNOWN;
   12fc0:	2401      	movs	r4, #1
            goto end;
   12fc2:	e7b4      	b.n	12f2e <img_mgmt_upload+0x152>
        img_mgmt_dfu_stopped();
   12fc4:	f7ff fec0 	bl	12d48 <img_mgmt_dfu_stopped>
        return img_mgmt_error_rsp(ctxt, rc, errstr);
   12fc8:	e000      	b.n	12fcc <img_mgmt_upload+0x1f0>
        return MGMT_ERR_EINVAL;
   12fca:	2403      	movs	r4, #3
}
   12fcc:	4620      	mov	r0, r4
   12fce:	f50d 7d71 	add.w	sp, sp, #964	; 0x3c4
   12fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12fd6:	bf00      	nop
   12fd8:	0002db94 	.word	0x0002db94
   12fdc:	0002db9c 	.word	0x0002db9c
   12fe0:	0002dba4 	.word	0x0002dba4
   12fe4:	0002db90 	.word	0x0002db90
   12fe8:	0002dba8 	.word	0x0002dba8
   12fec:	0002dbac 	.word	0x0002dbac
   12ff0:	20001e78 	.word	0x20001e78
   12ff4:	20001e74 	.word	0x20001e74
   12ff8:	20001e40 	.word	0x20001e40

00012ffc <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
   12ffc:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   12ffe:	4b03      	ldr	r3, [pc, #12]	; (1300c <img_mgmt_dfu_confirmed+0x10>)
   13000:	681b      	ldr	r3, [r3, #0]
   13002:	b113      	cbz	r3, 1300a <img_mgmt_dfu_confirmed+0xe>
   13004:	68db      	ldr	r3, [r3, #12]
   13006:	b103      	cbz	r3, 1300a <img_mgmt_dfu_confirmed+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   13008:	4798      	blx	r3
    }
}
   1300a:	bd08      	pop	{r3, pc}
   1300c:	20001e70 	.word	0x20001e70

00013010 <img_mgmt_my_version>:
}


int
img_mgmt_my_version(struct image_version *ver)
{
   13010:	b508      	push	{r3, lr}
   13012:	4601      	mov	r1, r0
    return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   13014:	2300      	movs	r3, #0
   13016:	461a      	mov	r2, r3
   13018:	4802      	ldr	r0, [pc, #8]	; (13024 <img_mgmt_my_version+0x14>)
   1301a:	6800      	ldr	r0, [r0, #0]
   1301c:	f7ff fdbc 	bl	12b98 <img_mgmt_read_info>
}
   13020:	bd08      	pop	{r3, pc}
   13022:	bf00      	nop
   13024:	2000513c 	.word	0x2000513c

00013028 <img_mgmt_register_group>:

void
img_mgmt_register_group(void)
{
   13028:	b508      	push	{r3, lr}
    mgmt_register_group(&img_mgmt_group);
   1302a:	4802      	ldr	r0, [pc, #8]	; (13034 <img_mgmt_register_group+0xc>)
   1302c:	f000 ffaa 	bl	13f84 <mgmt_register_group>
}
   13030:	bd08      	pop	{r3, pc}
   13032:	bf00      	nop
   13034:	20000290 	.word	0x20000290

00013038 <img_mgmt_state_flags>:
/**
 * Collects information about the specified image slot.
 */
uint8_t
img_mgmt_state_flags(int query_slot)
{
   13038:	b510      	push	{r4, lr}
   1303a:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = img_mgmt_impl_swap_type(query_slot);
   1303c:	f000 fbae 	bl	1379c <img_mgmt_impl_swap_type>
    switch (swap_type) {
   13040:	2803      	cmp	r0, #3
   13042:	d825      	bhi.n	13090 <img_mgmt_state_flags+0x58>
   13044:	e8df f000 	tbb	[pc, r0]
   13048:	1c140c02 	.word	0x1c140c02
    case IMG_MGMT_SWAP_TYPE_NONE:
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   1304c:	4b14      	ldr	r3, [pc, #80]	; (130a0 <img_mgmt_state_flags+0x68>)
   1304e:	681b      	ldr	r3, [r3, #0]
   13050:	42a3      	cmp	r3, r4
   13052:	d01f      	beq.n	13094 <img_mgmt_state_flags+0x5c>
    flags = 0;
   13054:	2000      	movs	r0, #0
        break;
    }

    /* Slot 0 is always active. */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   13056:	4b12      	ldr	r3, [pc, #72]	; (130a0 <img_mgmt_state_flags+0x68>)
   13058:	681b      	ldr	r3, [r3, #0]
   1305a:	42a3      	cmp	r3, r4
   1305c:	d01c      	beq.n	13098 <img_mgmt_state_flags+0x60>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
    }

    return flags;
}
   1305e:	bd10      	pop	{r4, pc}
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   13060:	4b0f      	ldr	r3, [pc, #60]	; (130a0 <img_mgmt_state_flags+0x68>)
   13062:	681b      	ldr	r3, [r3, #0]
   13064:	42a3      	cmp	r3, r4
   13066:	d001      	beq.n	1306c <img_mgmt_state_flags+0x34>
            flags |= IMG_MGMT_STATE_F_PENDING;
   13068:	2001      	movs	r0, #1
   1306a:	e7f4      	b.n	13056 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1306c:	2002      	movs	r0, #2
   1306e:	e7f2      	b.n	13056 <img_mgmt_state_flags+0x1e>
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   13070:	4b0b      	ldr	r3, [pc, #44]	; (130a0 <img_mgmt_state_flags+0x68>)
   13072:	681b      	ldr	r3, [r3, #0]
   13074:	42a3      	cmp	r3, r4
   13076:	d001      	beq.n	1307c <img_mgmt_state_flags+0x44>
            flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   13078:	2009      	movs	r0, #9
   1307a:	e7ec      	b.n	13056 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   1307c:	2002      	movs	r0, #2
   1307e:	e7ea      	b.n	13056 <img_mgmt_state_flags+0x1e>
        if (query_slot == IMG_MGMT_BOOT_CURR_SLOT) {
   13080:	4b07      	ldr	r3, [pc, #28]	; (130a0 <img_mgmt_state_flags+0x68>)
   13082:	681b      	ldr	r3, [r3, #0]
   13084:	42a3      	cmp	r3, r4
   13086:	d001      	beq.n	1308c <img_mgmt_state_flags+0x54>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   13088:	2002      	movs	r0, #2
   1308a:	e7e4      	b.n	13056 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   1308c:	2004      	movs	r0, #4
   1308e:	e7e2      	b.n	13056 <img_mgmt_state_flags+0x1e>
    swap_type = img_mgmt_impl_swap_type(query_slot);
   13090:	2000      	movs	r0, #0
   13092:	e7e0      	b.n	13056 <img_mgmt_state_flags+0x1e>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   13094:	2006      	movs	r0, #6
   13096:	e7de      	b.n	13056 <img_mgmt_state_flags+0x1e>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
   13098:	f040 0004 	orr.w	r0, r0, #4
   1309c:	e7df      	b.n	1305e <img_mgmt_state_flags+0x26>
   1309e:	bf00      	nop
   130a0:	2000513c 	.word	0x2000513c

000130a4 <img_mgmt_state_any_pending>:
 * Indicates whether any image slot is pending (i.e., whether a test swap will
 * happen on the next reboot.
 */
int
img_mgmt_state_any_pending(void)
{
   130a4:	b508      	push	{r3, lr}
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   130a6:	2000      	movs	r0, #0
   130a8:	f7ff ffc6 	bl	13038 <img_mgmt_state_flags>
   130ac:	f010 0f01 	tst.w	r0, #1
   130b0:	d001      	beq.n	130b6 <img_mgmt_state_any_pending+0x12>
   130b2:	2001      	movs	r0, #1
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
}
   130b4:	bd08      	pop	{r3, pc}
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   130b6:	2001      	movs	r0, #1
   130b8:	f7ff ffbe 	bl	13038 <img_mgmt_state_flags>
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   130bc:	f010 0f01 	tst.w	r0, #1
   130c0:	d101      	bne.n	130c6 <img_mgmt_state_any_pending+0x22>
   130c2:	2000      	movs	r0, #0
   130c4:	e7f6      	b.n	130b4 <img_mgmt_state_any_pending+0x10>
   130c6:	2001      	movs	r0, #1
   130c8:	e7f4      	b.n	130b4 <img_mgmt_state_any_pending+0x10>

000130ca <img_mgmt_slot_in_use>:
 * Indicates whether the specified slot has any flags.  If no flags are set,
 * the slot can be freely erased.
 */
int
img_mgmt_slot_in_use(int slot)
{
   130ca:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = img_mgmt_state_flags(slot);
   130cc:	f7ff ffb4 	bl	13038 <img_mgmt_state_flags>
    return state_flags & IMG_MGMT_STATE_F_ACTIVE       ||
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   130d0:	f010 0f06 	tst.w	r0, #6
   130d4:	d104      	bne.n	130e0 <img_mgmt_slot_in_use+0x16>
   130d6:	f010 0f01 	tst.w	r0, #1
   130da:	d003      	beq.n	130e4 <img_mgmt_slot_in_use+0x1a>
   130dc:	2001      	movs	r0, #1
   130de:	e000      	b.n	130e2 <img_mgmt_slot_in_use+0x18>
   130e0:	2001      	movs	r0, #1
           state_flags & IMG_MGMT_STATE_F_PENDING;
}
   130e2:	bd08      	pop	{r3, pc}
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   130e4:	2000      	movs	r0, #0
   130e6:	e7fc      	b.n	130e2 <img_mgmt_slot_in_use+0x18>

000130e8 <img_mgmt_state_set_pending>:
 * argument is specified, the system doesn't require a confirm after the swap
 * occurs.
 */
int
img_mgmt_state_set_pending(int slot, int permanent)
{
   130e8:	b570      	push	{r4, r5, r6, lr}
   130ea:	b088      	sub	sp, #32
   130ec:	4604      	mov	r4, r0
   130ee:	460d      	mov	r5, r1
    uint8_t hash[IMAGE_HASH_LEN];
    uint8_t state_flags;
    const uint8_t *hashp;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   130f0:	f7ff ffa2 	bl	13038 <img_mgmt_state_flags>

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   130f4:	f010 0f02 	tst.w	r0, #2
   130f8:	d000      	beq.n	130fc <img_mgmt_state_set_pending+0x14>
   130fa:	b9b4      	cbnz	r4, 1312a <img_mgmt_state_set_pending+0x42>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = img_mgmt_impl_write_pending(slot, permanent);
   130fc:	1e29      	subs	r1, r5, #0
   130fe:	bf18      	it	ne
   13100:	2101      	movne	r1, #1
   13102:	4620      	mov	r0, r4
   13104:	f000 fab0 	bl	13668 <img_mgmt_impl_write_pending>
    if (rc != 0) {
   13108:	4606      	mov	r6, r0
   1310a:	b980      	cbnz	r0, 1312e <img_mgmt_state_set_pending+0x46>
        rc = MGMT_ERR_EUNKNOWN;
    }

done:
    /* Log the image hash if we know it. */
    if (img_mgmt_read_info(slot, NULL, hash, NULL)) {
   1310c:	2300      	movs	r3, #0
   1310e:	466a      	mov	r2, sp
   13110:	4619      	mov	r1, r3
   13112:	4620      	mov	r0, r4
   13114:	f7ff fd40 	bl	12b98 <img_mgmt_read_info>
   13118:	b158      	cbz	r0, 13132 <img_mgmt_state_set_pending+0x4a>
        hashp = NULL;
   1311a:	2100      	movs	r1, #0
    } else {
        hashp = hash;
    }

    if (permanent) {
   1311c:	b15d      	cbz	r5, 13136 <img_mgmt_state_set_pending+0x4e>
        (void) img_mgmt_impl_log_confirm(rc, hashp);
   1311e:	4630      	mov	r0, r6
   13120:	f000 fbac 	bl	1387c <img_mgmt_impl_log_confirm>
    } else {
        (void) img_mgmt_impl_log_pending(rc, hashp);
    }

    return rc;
}
   13124:	4630      	mov	r0, r6
   13126:	b008      	add	sp, #32
   13128:	bd70      	pop	{r4, r5, r6, pc}
        rc = MGMT_ERR_EBADSTATE;
   1312a:	2606      	movs	r6, #6
   1312c:	e7ee      	b.n	1310c <img_mgmt_state_set_pending+0x24>
        rc = MGMT_ERR_EUNKNOWN;
   1312e:	2601      	movs	r6, #1
   13130:	e7ec      	b.n	1310c <img_mgmt_state_set_pending+0x24>
        hashp = hash;
   13132:	4669      	mov	r1, sp
   13134:	e7f2      	b.n	1311c <img_mgmt_state_set_pending+0x34>
        (void) img_mgmt_impl_log_pending(rc, hashp);
   13136:	4630      	mov	r0, r6
   13138:	f000 fb96 	bl	13868 <img_mgmt_impl_log_pending>
    return rc;
   1313c:	e7f2      	b.n	13124 <img_mgmt_state_set_pending+0x3c>

0001313e <img_mgmt_state_confirm>:
 * Confirms the current image state.  Prevents a fallback from occurring on the
 * next reboot if the active image is currently being tested.
 */
int
img_mgmt_state_confirm(void)
{
   1313e:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (img_mgmt_state_any_pending()) {
   13140:	f7ff ffb0 	bl	130a4 <img_mgmt_state_any_pending>
   13144:	b128      	cbz	r0, 13152 <img_mgmt_state_confirm+0x14>
        rc = MGMT_ERR_EBADSTATE;
   13146:	2406      	movs	r4, #6
        rc = MGMT_ERR_EUNKNOWN;
    }

     img_mgmt_dfu_confirmed();
err:
    return img_mgmt_impl_log_confirm(rc, NULL);
   13148:	2100      	movs	r1, #0
   1314a:	4620      	mov	r0, r4
   1314c:	f000 fb96 	bl	1387c <img_mgmt_impl_log_confirm>
}
   13150:	bd10      	pop	{r4, pc}
    rc = img_mgmt_impl_write_confirmed();
   13152:	f000 fac7 	bl	136e4 <img_mgmt_impl_write_confirmed>
    if (rc != 0) {
   13156:	4604      	mov	r4, r0
   13158:	b100      	cbz	r0, 1315c <img_mgmt_state_confirm+0x1e>
        rc = MGMT_ERR_EUNKNOWN;
   1315a:	2401      	movs	r4, #1
     img_mgmt_dfu_confirmed();
   1315c:	f7ff ff4e 	bl	12ffc <img_mgmt_dfu_confirmed>
   13160:	e7f2      	b.n	13148 <img_mgmt_state_confirm+0xa>
	...

00013164 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   13164:	b5f0      	push	{r4, r5, r6, r7, lr}
   13166:	b09b      	sub	sp, #108	; 0x6c
   13168:	4607      	mov	r7, r0
   1316a:	2206      	movs	r2, #6
   1316c:	495b      	ldr	r1, [pc, #364]	; (132dc <img_mgmt_state_read+0x178>)
   1316e:	f015 fa51 	bl	28614 <cbor_encode_text_string>
   13172:	4604      	mov	r4, r0
    int i;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "images");

    err |= cbor_encoder_create_array(&ctxt->encoder, &images,
   13174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13178:	a905      	add	r1, sp, #20
   1317a:	4638      	mov	r0, r7
   1317c:	f015 fa51 	bl	28622 <cbor_encoder_create_array>
   13180:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);

    for (i = 0; i < 2 * IMG_MGMT_UPDATABLE_IMAGE_NUMBER; i++) {
   13182:	2500      	movs	r5, #0
   13184:	e000      	b.n	13188 <img_mgmt_state_read+0x24>
   13186:	3501      	adds	r5, #1
   13188:	2d01      	cmp	r5, #1
   1318a:	f300 808e 	bgt.w	132aa <img_mgmt_state_read+0x146>
        rc = img_mgmt_read_info(i, &ver, hash, &flags);
   1318e:	466b      	mov	r3, sp
   13190:	aa0b      	add	r2, sp, #44	; 0x2c
   13192:	a909      	add	r1, sp, #36	; 0x24
   13194:	4628      	mov	r0, r5
   13196:	f7ff fcff 	bl	12b98 <img_mgmt_read_info>
        if (rc != 0) {
   1319a:	2800      	cmp	r0, #0
   1319c:	d1f3      	bne.n	13186 <img_mgmt_state_read+0x22>
            continue;
        }

        state_flags = img_mgmt_state_flags(i);
   1319e:	4628      	mov	r0, r5
   131a0:	f7ff ff4a 	bl	13038 <img_mgmt_state_flags>
   131a4:	4606      	mov	r6, r0

        err |= cbor_encoder_create_map(&images, &image,
   131a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131aa:	a901      	add	r1, sp, #4
   131ac:	a805      	add	r0, sp, #20
   131ae:	f015 fa3d 	bl	2862c <cbor_encoder_create_map>
   131b2:	4304      	orrs	r4, r0
   131b4:	2204      	movs	r2, #4
   131b6:	494a      	ldr	r1, [pc, #296]	; (132e0 <img_mgmt_state_read+0x17c>)
   131b8:	eb0d 0002 	add.w	r0, sp, r2
   131bc:	f015 fa2a 	bl	28614 <cbor_encode_text_string>

#if IMG_MGMT_UPDATABLE_IMAGE_NUMBER > 1
        err |= cbor_encode_text_stringz(&image, "image");
        err |= cbor_encode_int(&image, i >> 1);
#endif
        err |= cbor_encode_text_stringz(&image, "slot");
   131c0:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&image, i % 2);
   131c2:	2d00      	cmp	r5, #0
   131c4:	f005 0201 	and.w	r2, r5, #1
   131c8:	bfb8      	it	lt
   131ca:	4252      	neglt	r2, r2
   131cc:	17d3      	asrs	r3, r2, #31
   131ce:	a801      	add	r0, sp, #4
   131d0:	f015 f9ab 	bl	2852a <cbor_encode_int>
   131d4:	4304      	orrs	r4, r0
   131d6:	2207      	movs	r2, #7
   131d8:	4942      	ldr	r1, [pc, #264]	; (132e4 <img_mgmt_state_read+0x180>)
   131da:	a801      	add	r0, sp, #4
   131dc:	f015 fa1a 	bl	28614 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "version");
   131e0:	4304      	orrs	r4, r0
        img_mgmt_ver_str(&ver, vers_str);
   131e2:	a913      	add	r1, sp, #76	; 0x4c
   131e4:	a809      	add	r0, sp, #36	; 0x24
   131e6:	f000 f8df 	bl	133a8 <img_mgmt_ver_str>
   131ea:	a813      	add	r0, sp, #76	; 0x4c
   131ec:	f7fb fc31 	bl	ea52 <strlen>
   131f0:	4602      	mov	r2, r0
   131f2:	a913      	add	r1, sp, #76	; 0x4c
   131f4:	a801      	add	r0, sp, #4
   131f6:	f015 fa0d 	bl	28614 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&image, vers_str);
   131fa:	4304      	orrs	r4, r0
   131fc:	2204      	movs	r2, #4
   131fe:	493a      	ldr	r1, [pc, #232]	; (132e8 <img_mgmt_state_read+0x184>)
   13200:	eb0d 0002 	add.w	r0, sp, r2
   13204:	f015 fa06 	bl	28614 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "hash");
   13208:	4304      	orrs	r4, r0
        err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   1320a:	2220      	movs	r2, #32
   1320c:	a90b      	add	r1, sp, #44	; 0x2c
   1320e:	a801      	add	r0, sp, #4
   13210:	f015 f9f9 	bl	28606 <cbor_encode_byte_string>
   13214:	4304      	orrs	r4, r0
   13216:	2208      	movs	r2, #8
   13218:	4934      	ldr	r1, [pc, #208]	; (132ec <img_mgmt_state_read+0x188>)
   1321a:	a801      	add	r0, sp, #4
   1321c:	f015 f9fa 	bl	28614 <cbor_encode_text_string>

        if (!IMG_MGMT_FRUGAL_LIST || !(flags & IMAGE_F_NON_BOOTABLE)) {
            err |= cbor_encode_text_stringz(&image, "bootable");
   13220:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   13222:	9b00      	ldr	r3, [sp, #0]
   13224:	f013 0f10 	tst.w	r3, #16
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   13228:	bf14      	ite	ne
   1322a:	2114      	movne	r1, #20
   1322c:	2115      	moveq	r1, #21
   1322e:	a801      	add	r0, sp, #4
   13230:	f015 f9ba 	bl	285a8 <cbor_encode_simple_value>
   13234:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   13236:	2207      	movs	r2, #7
   13238:	492d      	ldr	r1, [pc, #180]	; (132f0 <img_mgmt_state_read+0x18c>)
   1323a:	a801      	add	r0, sp, #4
   1323c:	f015 f9ea 	bl	28614 <cbor_encode_text_string>
        }

        if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_PENDING)) {
            err |= cbor_encode_text_stringz(&image, "pending");
   13240:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   13242:	f006 0101 	and.w	r1, r6, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   13246:	3114      	adds	r1, #20
   13248:	a801      	add	r0, sp, #4
   1324a:	f015 f9ad 	bl	285a8 <cbor_encode_simple_value>
   1324e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   13250:	2209      	movs	r2, #9
   13252:	4928      	ldr	r1, [pc, #160]	; (132f4 <img_mgmt_state_read+0x190>)
   13254:	a801      	add	r0, sp, #4
   13256:	f015 f9dd 	bl	28614 <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_PENDING);
        }

        if (!IMG_MGMT_FRUGAL_LIST ||
            (state_flags & IMG_MGMT_STATE_F_CONFIRMED)) {
            err |= cbor_encode_text_stringz(&image, "confirmed");
   1325a:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   1325c:	f3c6 0140 	ubfx	r1, r6, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   13260:	3114      	adds	r1, #20
   13262:	a801      	add	r0, sp, #4
   13264:	f015 f9a0 	bl	285a8 <cbor_encode_simple_value>
   13268:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1326a:	2206      	movs	r2, #6
   1326c:	4922      	ldr	r1, [pc, #136]	; (132f8 <img_mgmt_state_read+0x194>)
   1326e:	a801      	add	r0, sp, #4
   13270:	f015 f9d0 	bl	28614 <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_CONFIRMED);
        }

        if (!IMG_MGMT_FRUGAL_LIST || (state_flags & IMG_MGMT_STATE_F_ACTIVE)) {
            err |= cbor_encode_text_stringz(&image, "active");
   13274:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   13276:	f3c6 0180 	ubfx	r1, r6, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1327a:	3114      	adds	r1, #20
   1327c:	a801      	add	r0, sp, #4
   1327e:	f015 f993 	bl	285a8 <cbor_encode_simple_value>
   13282:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   13284:	2209      	movs	r2, #9
   13286:	491d      	ldr	r1, [pc, #116]	; (132fc <img_mgmt_state_read+0x198>)
   13288:	a801      	add	r0, sp, #4
   1328a:	f015 f9c3 	bl	28614 <cbor_encode_text_string>
                                    state_flags & IMG_MGMT_STATE_F_ACTIVE);
        }

        if (!IMG_MGMT_FRUGAL_LIST ||
            (state_flags & IMG_MGMT_STATE_F_PERMANENT)) {
            err |= cbor_encode_text_stringz(&image, "permanent");
   1328e:	4304      	orrs	r4, r0
            err |= cbor_encode_boolean(&image,
   13290:	f3c6 01c0 	ubfx	r1, r6, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   13294:	3114      	adds	r1, #20
   13296:	a801      	add	r0, sp, #4
   13298:	f015 f986 	bl	285a8 <cbor_encode_simple_value>
   1329c:	4304      	orrs	r4, r0
                                    state_flags & IMG_MGMT_STATE_F_PERMANENT);
        }

        err |= cbor_encoder_close_container(&images, &image);
   1329e:	a901      	add	r1, sp, #4
   132a0:	a805      	add	r0, sp, #20
   132a2:	f015 f9d8 	bl	28656 <cbor_encoder_close_container>
   132a6:	4304      	orrs	r4, r0
   132a8:	e76d      	b.n	13186 <img_mgmt_state_read+0x22>
    }

    err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   132aa:	a905      	add	r1, sp, #20
   132ac:	4638      	mov	r0, r7
   132ae:	f015 f9d2 	bl	28656 <cbor_encoder_close_container>
   132b2:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   132b4:	220b      	movs	r2, #11
   132b6:	4912      	ldr	r1, [pc, #72]	; (13300 <img_mgmt_state_read+0x19c>)
   132b8:	4638      	mov	r0, r7
   132ba:	f015 f9ab 	bl	28614 <cbor_encode_text_string>

    /* splitStatus is always 0 so in frugal list it is not present at all */
    if (!IMG_MGMT_FRUGAL_LIST) {
        err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   132be:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&ctxt->encoder, 0);
   132c0:	2200      	movs	r2, #0
   132c2:	2300      	movs	r3, #0
   132c4:	4638      	mov	r0, r7
   132c6:	f015 f930 	bl	2852a <cbor_encode_int>
    }

    if (err != 0) {
   132ca:	ea54 0300 	orrs.w	r3, r4, r0
   132ce:	d102      	bne.n	132d6 <img_mgmt_state_read+0x172>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   132d0:	2000      	movs	r0, #0
}
   132d2:	b01b      	add	sp, #108	; 0x6c
   132d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   132d6:	2002      	movs	r0, #2
   132d8:	e7fb      	b.n	132d2 <img_mgmt_state_read+0x16e>
   132da:	bf00      	nop
   132dc:	0002dbe4 	.word	0x0002dbe4
   132e0:	0002dbec 	.word	0x0002dbec
   132e4:	0002dbf4 	.word	0x0002dbf4
   132e8:	0002db24 	.word	0x0002db24
   132ec:	0002db50 	.word	0x0002db50
   132f0:	0002db68 	.word	0x0002db68
   132f4:	0002db5c 	.word	0x0002db5c
   132f8:	0002db44 	.word	0x0002db44
   132fc:	0002dbfc 	.word	0x0002dbfc
   13300:	0002dc08 	.word	0x0002dc08

00013304 <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   13304:	b510      	push	{r4, lr}
   13306:	b0b0      	sub	sp, #192	; 0xc0
   13308:	4604      	mov	r4, r0
    size_t hash_len;
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   1330a:	228c      	movs	r2, #140	; 0x8c
   1330c:	2100      	movs	r1, #0
   1330e:	a801      	add	r0, sp, #4
   13310:	f7fb fb77 	bl	ea02 <memset>
   13314:	4b21      	ldr	r3, [pc, #132]	; (1339c <img_mgmt_state_write+0x98>)
   13316:	9300      	str	r3, [sp, #0]
   13318:	2303      	movs	r3, #3
   1331a:	f88d 3004 	strb.w	r3, [sp, #4]
   1331e:	ab27      	add	r3, sp, #156	; 0x9c
   13320:	9302      	str	r3, [sp, #8]
   13322:	ab26      	add	r3, sp, #152	; 0x98
   13324:	9303      	str	r3, [sp, #12]
   13326:	2321      	movs	r3, #33	; 0x21
   13328:	930a      	str	r3, [sp, #40]	; 0x28
   1332a:	4b1d      	ldr	r3, [pc, #116]	; (133a0 <img_mgmt_state_write+0x9c>)
   1332c:	930c      	str	r3, [sp, #48]	; 0x30
   1332e:	2305      	movs	r3, #5
   13330:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   13334:	f10d 0397 	add.w	r3, sp, #151	; 0x97
   13338:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    hash_len = 0;
   1333a:	2300      	movs	r3, #0
   1333c:	9326      	str	r3, [sp, #152]	; 0x98
    rc = cbor_read_object(&ctxt->it, write_attr);
   1333e:	4669      	mov	r1, sp
   13340:	f104 001c 	add.w	r0, r4, #28
   13344:	f7ff fbdf 	bl	12b06 <cbor_read_object>
    if (rc != 0) {
   13348:	bb18      	cbnz	r0, 13392 <img_mgmt_state_write+0x8e>
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   1334a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1334c:	b993      	cbnz	r3, 13374 <img_mgmt_state_write+0x70>
        if (confirm) {
   1334e:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   13352:	b303      	cbz	r3, 13396 <img_mgmt_state_write+0x92>
            slot = IMG_MGMT_BOOT_CURR_SLOT;
   13354:	4b13      	ldr	r3, [pc, #76]	; (133a4 <img_mgmt_state_write+0xa0>)
   13356:	6818      	ldr	r0, [r3, #0]
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == IMG_MGMT_BOOT_CURR_SLOT && confirm) {
   13358:	4b12      	ldr	r3, [pc, #72]	; (133a4 <img_mgmt_state_write+0xa0>)
   1335a:	681b      	ldr	r3, [r3, #0]
   1335c:	4283      	cmp	r3, r0
   1335e:	d102      	bne.n	13366 <img_mgmt_state_write+0x62>
   13360:	f89d 3097 	ldrb.w	r3, [sp, #151]	; 0x97
   13364:	b973      	cbnz	r3, 13384 <img_mgmt_state_write+0x80>
        /* Confirm current setup. */
        rc = img_mgmt_state_confirm();
    } else {
        rc = img_mgmt_state_set_pending(slot, confirm);
   13366:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   1336a:	f7ff febd 	bl	130e8 <img_mgmt_state_set_pending>
    }
    if (rc != 0) {
   1336e:	b160      	cbz	r0, 1338a <img_mgmt_state_write+0x86>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   13370:	b030      	add	sp, #192	; 0xc0
   13372:	bd10      	pop	{r4, pc}
        slot = img_mgmt_find_by_hash(hash, NULL);
   13374:	2100      	movs	r1, #0
   13376:	a827      	add	r0, sp, #156	; 0x9c
   13378:	f7ff fcc7 	bl	12d0a <img_mgmt_find_by_hash>
        if (slot < 0) {
   1337c:	2800      	cmp	r0, #0
   1337e:	daeb      	bge.n	13358 <img_mgmt_state_write+0x54>
            return MGMT_ERR_EINVAL;
   13380:	2003      	movs	r0, #3
   13382:	e7f5      	b.n	13370 <img_mgmt_state_write+0x6c>
        rc = img_mgmt_state_confirm();
   13384:	f7ff fedb 	bl	1313e <img_mgmt_state_confirm>
   13388:	e7f1      	b.n	1336e <img_mgmt_state_write+0x6a>
    rc = img_mgmt_state_read(ctxt);
   1338a:	4620      	mov	r0, r4
   1338c:	f7ff feea 	bl	13164 <img_mgmt_state_read>
    if (rc != 0) {
   13390:	e7ee      	b.n	13370 <img_mgmt_state_write+0x6c>
        return MGMT_ERR_EINVAL;
   13392:	2003      	movs	r0, #3
   13394:	e7ec      	b.n	13370 <img_mgmt_state_write+0x6c>
            return MGMT_ERR_EINVAL;
   13396:	2003      	movs	r0, #3
   13398:	e7ea      	b.n	13370 <img_mgmt_state_write+0x6c>
   1339a:	bf00      	nop
   1339c:	0002db24 	.word	0x0002db24
   133a0:	0002dc14 	.word	0x0002dc14
   133a4:	2000513c 	.word	0x2000513c

000133a8 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133ac:	4605      	mov	r5, r0
   133ae:	460c      	mov	r4, r1
    int off;

    off = 0;

    off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   133b0:	460b      	mov	r3, r1
   133b2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   133b6:	7828      	ldrb	r0, [r5, #0]
   133b8:	2100      	movs	r1, #0
   133ba:	f000 ffd3 	bl	14364 <ull_to_s>

    dst[off++] = '.';
   133be:	1c46      	adds	r6, r0, #1
   133c0:	f04f 082e 	mov.w	r8, #46	; 0x2e
   133c4:	f804 8000 	strb.w	r8, [r4, r0]
    off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   133c8:	19a3      	adds	r3, r4, r6
   133ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   133ce:	7868      	ldrb	r0, [r5, #1]
   133d0:	2100      	movs	r1, #0
   133d2:	f000 ffc7 	bl	14364 <ull_to_s>
   133d6:	4406      	add	r6, r0

    dst[off++] = '.';
   133d8:	1c77      	adds	r7, r6, #1
   133da:	f804 8006 	strb.w	r8, [r4, r6]
    off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   133de:	19e3      	adds	r3, r4, r7
   133e0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   133e4:	8868      	ldrh	r0, [r5, #2]
   133e6:	2100      	movs	r1, #0
   133e8:	f000 ffbc 	bl	14364 <ull_to_s>
   133ec:	4407      	add	r7, r0

    if (ver->iv_build_num != 0) {
   133ee:	686b      	ldr	r3, [r5, #4]
   133f0:	b913      	cbnz	r3, 133f8 <img_mgmt_ver_str+0x50>
        dst[off++] = '.';
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
    }

    return 0;
}
   133f2:	2000      	movs	r0, #0
   133f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        dst[off++] = '.';
   133f8:	1c7b      	adds	r3, r7, #1
   133fa:	f804 8007 	strb.w	r8, [r4, r7]
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   133fe:	4423      	add	r3, r4
   13400:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13404:	6868      	ldr	r0, [r5, #4]
   13406:	2100      	movs	r1, #0
   13408:	f000 ffac 	bl	14364 <ull_to_s>
   1340c:	e7f1      	b.n	133f2 <img_mgmt_ver_str+0x4a>

0001340e <img_mgmt_vercmp>:
 * @return                       1 if a > b
 */
static int
img_mgmt_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1340e:	7802      	ldrb	r2, [r0, #0]
   13410:	780b      	ldrb	r3, [r1, #0]
   13412:	429a      	cmp	r2, r3
   13414:	d30c      	bcc.n	13430 <img_mgmt_vercmp+0x22>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   13416:	d80e      	bhi.n	13436 <img_mgmt_vercmp+0x28>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   13418:	7842      	ldrb	r2, [r0, #1]
   1341a:	784b      	ldrb	r3, [r1, #1]
   1341c:	429a      	cmp	r2, r3
   1341e:	d30c      	bcc.n	1343a <img_mgmt_vercmp+0x2c>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   13420:	d80e      	bhi.n	13440 <img_mgmt_vercmp+0x32>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   13422:	8842      	ldrh	r2, [r0, #2]
   13424:	884b      	ldrh	r3, [r1, #2]
   13426:	429a      	cmp	r2, r3
   13428:	d30c      	bcc.n	13444 <img_mgmt_vercmp+0x36>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1342a:	d80e      	bhi.n	1344a <img_mgmt_vercmp+0x3c>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   1342c:	2000      	movs	r0, #0
   1342e:	4770      	bx	lr
        return -1;
   13430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13434:	4770      	bx	lr
        return 1;
   13436:	2001      	movs	r0, #1
   13438:	4770      	bx	lr
        return -1;
   1343a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1343e:	4770      	bx	lr
        return 1;
   13440:	2001      	movs	r0, #1
   13442:	4770      	bx	lr
        return -1;
   13444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13448:	4770      	bx	lr
        return 1;
   1344a:	2001      	movs	r0, #1
}
   1344c:	4770      	bx	lr

0001344e <img_mgmt_find_best_area_id>:
{
   1344e:	b530      	push	{r4, r5, lr}
   13450:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   13452:	2400      	movs	r4, #0
    int best = -1;
   13454:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   13458:	e000      	b.n	1345c <img_mgmt_find_best_area_id+0xe>
   1345a:	3401      	adds	r4, #1
   1345c:	2c01      	cmp	r4, #1
   1345e:	dc10      	bgt.n	13482 <img_mgmt_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   13460:	2300      	movs	r3, #0
   13462:	461a      	mov	r2, r3
   13464:	4669      	mov	r1, sp
   13466:	4620      	mov	r0, r4
   13468:	f7ff fb96 	bl	12b98 <img_mgmt_read_info>
        if (rc < 0) {
   1346c:	2800      	cmp	r0, #0
   1346e:	dbf4      	blt.n	1345a <img_mgmt_find_best_area_id+0xc>
        if (rc == 0) {
   13470:	b930      	cbnz	r0, 13480 <img_mgmt_find_best_area_id+0x32>
            if (img_mgmt_slot_in_use(i)) {
   13472:	4620      	mov	r0, r4
   13474:	f7ff fe29 	bl	130ca <img_mgmt_slot_in_use>
   13478:	2800      	cmp	r0, #0
   1347a:	d1ee      	bne.n	1345a <img_mgmt_find_best_area_id+0xc>
                best = i;
   1347c:	4625      	mov	r5, r4
   1347e:	e7ec      	b.n	1345a <img_mgmt_find_best_area_id+0xc>
        best = i;
   13480:	4625      	mov	r5, r4
    if (best >= 0) {
   13482:	2d00      	cmp	r5, #0
   13484:	da02      	bge.n	1348c <img_mgmt_find_best_area_id+0x3e>
}
   13486:	4628      	mov	r0, r5
   13488:	b003      	add	sp, #12
   1348a:	bd30      	pop	{r4, r5, pc}
        best = flash_area_id_from_image_slot(best);
   1348c:	4628      	mov	r0, r5
   1348e:	f7fd fb1c 	bl	10aca <flash_area_id_from_image_slot>
   13492:	4605      	mov	r5, r0
    return best;
   13494:	e7f7      	b.n	13486 <img_mgmt_find_best_area_id+0x38>
	...

00013498 <img_mgmt_impl_upload_inspect>:
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
                             struct img_mgmt_upload_action *action,
                             const char **errstr)
{
   13498:	b570      	push	{r4, r5, r6, lr}
   1349a:	b084      	sub	sp, #16
   1349c:	4605      	mov	r5, r0
   1349e:	460c      	mov	r4, r1
   134a0:	4616      	mov	r6, r2
    struct image_version cur_ver;
    uint8_t rem_bytes;
    bool empty;
    int rc;

    memset(action, 0, sizeof *action);
   134a2:	2300      	movs	r3, #0
   134a4:	600b      	str	r3, [r1, #0]
   134a6:	604b      	str	r3, [r1, #4]
   134a8:	608b      	str	r3, [r1, #8]
   134aa:	60cb      	str	r3, [r1, #12]
   134ac:	610b      	str	r3, [r1, #16]
   134ae:	614b      	str	r3, [r1, #20]

    if (req->off == -1) {
   134b0:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   134b4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   134b8:	bf08      	it	eq
   134ba:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   134be:	d03e      	beq.n	1353e <img_mgmt_impl_upload_inspect+0xa6>
        /* Request did not include an `off` field. */
        *errstr = img_mgmt_err_str_hdr_malformed;
        return MGMT_ERR_EINVAL;
    }

    if (req->off == 0) {
   134c0:	ea50 0301 	orrs.w	r3, r0, r1
   134c4:	d167      	bne.n	13596 <img_mgmt_impl_upload_inspect+0xfe>
        /* First upload chunk. */
        if (req->data_len < sizeof(struct image_header)) {
   134c6:	69ab      	ldr	r3, [r5, #24]
   134c8:	2b1f      	cmp	r3, #31
   134ca:	d93b      	bls.n	13544 <img_mgmt_impl_upload_inspect+0xac>
             */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }

        if (req->size == -1) {
   134cc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   134d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   134d4:	bf08      	it	eq
   134d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   134da:	d037      	beq.n	1354c <img_mgmt_impl_upload_inspect+0xb4>
            /* Request did not include a `len` field. */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }
        action->size = req->size;
   134dc:	e9c4 2300 	strd	r2, r3, [r4]

        hdr = (struct image_header *)req->img_data;
        if (hdr->ih_magic != IMAGE_MAGIC) {
   134e0:	6a2a      	ldr	r2, [r5, #32]
   134e2:	4b4e      	ldr	r3, [pc, #312]	; (1361c <img_mgmt_impl_upload_inspect+0x184>)
   134e4:	429a      	cmp	r2, r3
   134e6:	d135      	bne.n	13554 <img_mgmt_impl_upload_inspect+0xbc>
            *errstr = img_mgmt_err_str_magic_mismatch;
            return MGMT_ERR_EINVAL;
        }

        if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   134e8:	69ea      	ldr	r2, [r5, #28]
   134ea:	2a20      	cmp	r2, #32
   134ec:	f200 808d 	bhi.w	1360a <img_mgmt_impl_upload_inspect+0x172>
         * If request includes proper data hash we can check whether there is
         * upload in progress (interrupted due to e.g. link disconnection) with
         * the same data hash so we can just resume it by simply including
         * current upload offset in response.
         */
        if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   134f0:	b142      	cbz	r2, 13504 <img_mgmt_impl_upload_inspect+0x6c>
   134f2:	4b4b      	ldr	r3, [pc, #300]	; (13620 <img_mgmt_impl_upload_inspect+0x188>)
   134f4:	681b      	ldr	r3, [r3, #0]
   134f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   134fa:	d003      	beq.n	13504 <img_mgmt_impl_upload_inspect+0x6c>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   134fc:	4b48      	ldr	r3, [pc, #288]	; (13620 <img_mgmt_impl_upload_inspect+0x188>)
   134fe:	7b1b      	ldrb	r3, [r3, #12]
   13500:	429a      	cmp	r2, r3
   13502:	d02b      	beq.n	1355c <img_mgmt_impl_upload_inspect+0xc4>
                                                        req->data_sha_len)) {
                return 0;
            }
        }

        action->area_id = img_mgmt_find_best_area_id();
   13504:	f7ff ffa3 	bl	1344e <img_mgmt_find_best_area_id>
   13508:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1350a:	2800      	cmp	r0, #0
   1350c:	db2e      	blt.n	1356c <img_mgmt_impl_upload_inspect+0xd4>
            /* No slot where to upload! */
            *errstr = img_mgmt_err_str_no_slot;
            return MGMT_ERR_ENOMEM;
        }

        if (req->upgrade) {
   1350e:	f895 3240 	ldrb.w	r3, [r5, #576]	; 0x240
   13512:	b15b      	cbz	r3, 1352c <img_mgmt_impl_upload_inspect+0x94>
            /* User specified upgrade-only.  Make sure new image version is
             * greater than that of the currently running image.
             */
            rc = img_mgmt_my_version(&cur_ver);
   13514:	a801      	add	r0, sp, #4
   13516:	f7ff fd7b 	bl	13010 <img_mgmt_my_version>
            if (rc != 0) {
   1351a:	2800      	cmp	r0, #0
   1351c:	d177      	bne.n	1360e <img_mgmt_impl_upload_inspect+0x176>
                return MGMT_ERR_EUNKNOWN;
            }

            if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1351e:	f105 0134 	add.w	r1, r5, #52	; 0x34
   13522:	a801      	add	r0, sp, #4
   13524:	f7ff ff73 	bl	1340e <img_mgmt_vercmp>
   13528:	2800      	cmp	r0, #0
   1352a:	da23      	bge.n	13574 <img_mgmt_impl_upload_inspect+0xdc>
        }

#if MYNEWT_VAL(IMG_MGMT_LAZY_ERASE)
        (void) empty;
#else
        rc = flash_area_open(action->area_id, &fa);
   1352c:	a903      	add	r1, sp, #12
   1352e:	7b20      	ldrb	r0, [r4, #12]
   13530:	f7fd fa16 	bl	10960 <flash_area_open>
        if (rc) {
   13534:	b310      	cbz	r0, 1357c <img_mgmt_impl_upload_inspect+0xe4>
            *errstr = img_mgmt_err_str_flash_open_failed;
   13536:	2300      	movs	r3, #0
   13538:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   1353a:	2001      	movs	r0, #1
   1353c:	e06c      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
        *errstr = img_mgmt_err_str_hdr_malformed;
   1353e:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   13540:	2003      	movs	r0, #3
   13542:	e069      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_hdr_malformed;
   13544:	2300      	movs	r3, #0
   13546:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   13548:	2003      	movs	r0, #3
   1354a:	e065      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_hdr_malformed;
   1354c:	2300      	movs	r3, #0
   1354e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   13550:	2003      	movs	r0, #3
   13552:	e061      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_magic_mismatch;
   13554:	2300      	movs	r3, #0
   13556:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EINVAL;
   13558:	2003      	movs	r0, #3
   1355a:	e05d      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
                            !memcmp(g_img_mgmt_state.data_sha, req->data_sha,
   1355c:	f505 7108 	add.w	r1, r5, #544	; 0x220
   13560:	4830      	ldr	r0, [pc, #192]	; (13624 <img_mgmt_impl_upload_inspect+0x18c>)
   13562:	f7fb fa05 	bl	e970 <memcmp>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   13566:	2800      	cmp	r0, #0
   13568:	d1cc      	bne.n	13504 <img_mgmt_impl_upload_inspect+0x6c>
   1356a:	e055      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
            *errstr = img_mgmt_err_str_no_slot;
   1356c:	2300      	movs	r3, #0
   1356e:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_ENOMEM;
   13570:	2002      	movs	r0, #2
   13572:	e051      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
                *errstr = img_mgmt_err_str_downgrade;
   13574:	2300      	movs	r3, #0
   13576:	6033      	str	r3, [r6, #0]
                return MGMT_ERR_EBADSTATE;
   13578:	2006      	movs	r0, #6
   1357a:	e04d      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
        }

        rc = flash_area_is_empty(fa, &empty);
   1357c:	f10d 0103 	add.w	r1, sp, #3
   13580:	9803      	ldr	r0, [sp, #12]
   13582:	f7fd fa88 	bl	10a96 <flash_area_is_empty>
        flash_area_close(fa);
        if (rc) {
   13586:	2800      	cmp	r0, #0
   13588:	d143      	bne.n	13612 <img_mgmt_impl_upload_inspect+0x17a>
            return MGMT_ERR_EUNKNOWN;
        }

        action->erase = !empty;
   1358a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1358e:	f083 0301 	eor.w	r3, r3, #1
   13592:	7463      	strb	r3, [r4, #17]
   13594:	e00e      	b.n	135b4 <img_mgmt_impl_upload_inspect+0x11c>
#endif
    } else {
        /* Continuation of upload. */
        action->area_id = g_img_mgmt_state.area_id;
   13596:	4922      	ldr	r1, [pc, #136]	; (13620 <img_mgmt_impl_upload_inspect+0x188>)
   13598:	680b      	ldr	r3, [r1, #0]
   1359a:	60e3      	str	r3, [r4, #12]
        action->size = g_img_mgmt_state.size;
   1359c:	688b      	ldr	r3, [r1, #8]
   1359e:	6023      	str	r3, [r4, #0]
   135a0:	2300      	movs	r3, #0
   135a2:	6063      	str	r3, [r4, #4]

        if (req->off != g_img_mgmt_state.off) {
   135a4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   135a8:	6848      	ldr	r0, [r1, #4]
   135aa:	2100      	movs	r1, #0
   135ac:	428b      	cmp	r3, r1
   135ae:	bf08      	it	eq
   135b0:	4282      	cmpeq	r2, r0
   135b2:	d130      	bne.n	13616 <img_mgmt_impl_upload_inspect+0x17e>
            return 0;
        }
    }

    /* Calculate size of flash write. */
    action->write_bytes = req->data_len;
   135b4:	69ab      	ldr	r3, [r5, #24]
   135b6:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   135b8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   135bc:	69a9      	ldr	r1, [r5, #24]
   135be:	1852      	adds	r2, r2, r1
   135c0:	f143 0300 	adc.w	r3, r3, #0
   135c4:	e9d4 0100 	ldrd	r0, r1, [r4]
   135c8:	428b      	cmp	r3, r1
   135ca:	bf08      	it	eq
   135cc:	4282      	cmpeq	r2, r0
   135ce:	d303      	bcc.n	135d8 <img_mgmt_impl_upload_inspect+0x140>
        if (rem_bytes) {
            action->write_bytes -= rem_bytes;
        }
    }

    action->proceed = true;
   135d0:	2301      	movs	r3, #1
   135d2:	7423      	strb	r3, [r4, #16]
    return 0;
   135d4:	2000      	movs	r0, #0
   135d6:	e01f      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
        rc = flash_area_open(action->area_id, &fa);
   135d8:	a903      	add	r1, sp, #12
   135da:	7b20      	ldrb	r0, [r4, #12]
   135dc:	f7fd f9c0 	bl	10960 <flash_area_open>
        if (rc) {
   135e0:	b118      	cbz	r0, 135ea <img_mgmt_impl_upload_inspect+0x152>
            *errstr = img_mgmt_err_str_flash_open_failed;
   135e2:	2300      	movs	r3, #0
   135e4:	6033      	str	r3, [r6, #0]
            return MGMT_ERR_EUNKNOWN;
   135e6:	2001      	movs	r0, #1
   135e8:	e016      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
        rem_bytes = req->data_len % flash_area_align(fa);
   135ea:	69ad      	ldr	r5, [r5, #24]
   135ec:	9803      	ldr	r0, [sp, #12]
   135ee:	f7fd fa48 	bl	10a82 <flash_area_align>
   135f2:	fbb5 f3f0 	udiv	r3, r5, r0
   135f6:	fb00 5313 	mls	r3, r0, r3, r5
        if (rem_bytes) {
   135fa:	f013 0fff 	tst.w	r3, #255	; 0xff
   135fe:	d0e7      	beq.n	135d0 <img_mgmt_impl_upload_inspect+0x138>
            action->write_bytes -= rem_bytes;
   13600:	b2db      	uxtb	r3, r3
   13602:	68a2      	ldr	r2, [r4, #8]
   13604:	1ad3      	subs	r3, r2, r3
   13606:	60a3      	str	r3, [r4, #8]
   13608:	e7e2      	b.n	135d0 <img_mgmt_impl_upload_inspect+0x138>
            return MGMT_ERR_EINVAL;
   1360a:	2003      	movs	r0, #3
   1360c:	e004      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
                return MGMT_ERR_EUNKNOWN;
   1360e:	2001      	movs	r0, #1
   13610:	e002      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
            return MGMT_ERR_EUNKNOWN;
   13612:	2001      	movs	r0, #1
   13614:	e000      	b.n	13618 <img_mgmt_impl_upload_inspect+0x180>
            return 0;
   13616:	2000      	movs	r0, #0
}
   13618:	b004      	add	sp, #16
   1361a:	bd70      	pop	{r4, r5, r6, pc}
   1361c:	96f3b83d 	.word	0x96f3b83d
   13620:	20001e40 	.word	0x20001e40
   13624:	20001e4d 	.word	0x20001e4d

00013628 <img_mgmt_impl_erase_slot>:

int
img_mgmt_impl_erase_slot(void)
{
   13628:	b500      	push	{lr}
   1362a:	b083      	sub	sp, #12
    const struct flash_area *fa;
    bool empty;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1362c:	a901      	add	r1, sp, #4
   1362e:	2002      	movs	r0, #2
   13630:	f7fd f996 	bl	10960 <flash_area_open>
    if (rc != 0) {
   13634:	b118      	cbz	r0, 1363e <img_mgmt_impl_erase_slot+0x16>
        return MGMT_ERR_EUNKNOWN;
   13636:	2001      	movs	r0, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   13638:	b003      	add	sp, #12
   1363a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = flash_area_is_empty(fa, &empty);
   1363e:	f10d 0103 	add.w	r1, sp, #3
   13642:	9801      	ldr	r0, [sp, #4]
   13644:	f7fd fa27 	bl	10a96 <flash_area_is_empty>
    if (rc != 0) {
   13648:	b960      	cbnz	r0, 13664 <img_mgmt_impl_erase_slot+0x3c>
    if (!empty) {
   1364a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1364e:	2b00      	cmp	r3, #0
   13650:	d1f2      	bne.n	13638 <img_mgmt_impl_erase_slot+0x10>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   13652:	9801      	ldr	r0, [sp, #4]
   13654:	6882      	ldr	r2, [r0, #8]
   13656:	2100      	movs	r1, #0
   13658:	f7fd fa00 	bl	10a5c <flash_area_erase>
        if (rc != 0) {
   1365c:	2800      	cmp	r0, #0
   1365e:	d0eb      	beq.n	13638 <img_mgmt_impl_erase_slot+0x10>
            return MGMT_ERR_EUNKNOWN;
   13660:	2001      	movs	r0, #1
   13662:	e7e9      	b.n	13638 <img_mgmt_impl_erase_slot+0x10>
        return MGMT_ERR_EUNKNOWN;
   13664:	2001      	movs	r0, #1
   13666:	e7e7      	b.n	13638 <img_mgmt_impl_erase_slot+0x10>

00013668 <img_mgmt_impl_write_pending>:

int
img_mgmt_impl_write_pending(int slot, bool permanent)
{
   13668:	b5f0      	push	{r4, r5, r6, r7, lr}
   1366a:	b083      	sub	sp, #12
   1366c:	4604      	mov	r4, r0
   1366e:	460f      	mov	r7, r1
    uint32_t image_flags;
    uint8_t state_flags;
    int split_app_active;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   13670:	f7ff fce2 	bl	13038 <img_mgmt_state_flags>
   13674:	4605      	mov	r5, r0
    split_app_active = split_app_active_get();
   13676:	f7f9 fa31 	bl	cadc <split_app_active_get>
   1367a:	4606      	mov	r6, r0

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED &&
   1367c:	f015 0f02 	tst.w	r5, #2
   13680:	d001      	beq.n	13686 <img_mgmt_impl_write_pending+0x1e>
   13682:	bb44      	cbnz	r4, 136d6 <img_mgmt_impl_write_pending+0x6e>
        (slot != 0 || !split_app_active)) {
   13684:	b348      	cbz	r0, 136da <img_mgmt_impl_write_pending+0x72>

        return MGMT_ERR_EBADSTATE;
    }

    rc = img_mgmt_read_info(slot, NULL, NULL, &image_flags);
   13686:	ab01      	add	r3, sp, #4
   13688:	2200      	movs	r2, #0
   1368a:	4611      	mov	r1, r2
   1368c:	4620      	mov	r0, r4
   1368e:	f7ff fa83 	bl	12b98 <img_mgmt_read_info>
    if (rc != 0) {
   13692:	bb20      	cbnz	r0, 136de <img_mgmt_impl_write_pending+0x76>
        return MGMT_ERR_EUNKNOWN;
    }

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   13694:	9b01      	ldr	r3, [sp, #4]
   13696:	f013 0f10 	tst.w	r3, #16
   1369a:	d111      	bne.n	136c0 <img_mgmt_impl_write_pending+0x58>
        /* Unified image or loader. */
        if (!split_app_active) {
   1369c:	b136      	cbz	r6, 136ac <img_mgmt_impl_write_pending+0x44>
            if (rc != 0) {
                return MGMT_ERR_EUNKNOWN;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1369e:	b15f      	cbz	r7, 136b8 <img_mgmt_impl_write_pending+0x50>
                rc = split_write_split(SPLIT_MODE_LOADER);
   136a0:	2000      	movs	r0, #0
   136a2:	f7f9 fa2d 	bl	cb00 <split_write_split>
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   136a6:	b1d8      	cbz	r0, 136e0 <img_mgmt_impl_write_pending+0x78>
                return MGMT_ERR_EUNKNOWN;
   136a8:	2001      	movs	r0, #1
   136aa:	e019      	b.n	136e0 <img_mgmt_impl_write_pending+0x78>
            rc = boot_set_pending(permanent);
   136ac:	4638      	mov	r0, r7
   136ae:	f014 f8e2 	bl	27876 <boot_set_pending>
            if (rc != 0) {
   136b2:	b1a8      	cbz	r0, 136e0 <img_mgmt_impl_write_pending+0x78>
                return MGMT_ERR_EUNKNOWN;
   136b4:	2001      	movs	r0, #1
   136b6:	e013      	b.n	136e0 <img_mgmt_impl_write_pending+0x78>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   136b8:	2003      	movs	r0, #3
   136ba:	f7f9 fa21 	bl	cb00 <split_write_split>
   136be:	e7f2      	b.n	136a6 <img_mgmt_impl_write_pending+0x3e>
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   136c0:	b12f      	cbz	r7, 136ce <img_mgmt_impl_write_pending+0x66>
            rc = split_write_split(SPLIT_MODE_APP);
   136c2:	2002      	movs	r0, #2
   136c4:	f7f9 fa1c 	bl	cb00 <split_write_split>
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   136c8:	b150      	cbz	r0, 136e0 <img_mgmt_impl_write_pending+0x78>
            return MGMT_ERR_EUNKNOWN;
   136ca:	2001      	movs	r0, #1
   136cc:	e008      	b.n	136e0 <img_mgmt_impl_write_pending+0x78>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   136ce:	2001      	movs	r0, #1
   136d0:	f7f9 fa16 	bl	cb00 <split_write_split>
   136d4:	e7f8      	b.n	136c8 <img_mgmt_impl_write_pending+0x60>
        return MGMT_ERR_EBADSTATE;
   136d6:	2006      	movs	r0, #6
   136d8:	e002      	b.n	136e0 <img_mgmt_impl_write_pending+0x78>
   136da:	2006      	movs	r0, #6
   136dc:	e000      	b.n	136e0 <img_mgmt_impl_write_pending+0x78>
        return MGMT_ERR_EUNKNOWN;
   136de:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   136e0:	b003      	add	sp, #12
   136e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000136e4 <img_mgmt_impl_write_confirmed>:

int
img_mgmt_impl_write_confirmed(void)
{
   136e4:	b508      	push	{r3, lr}
    int rc;

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   136e6:	f014 f8ec 	bl	278c2 <boot_set_confirmed>
    if (rc != 0) {
   136ea:	b108      	cbz	r0, 136f0 <img_mgmt_impl_write_confirmed+0xc>
        return MGMT_ERR_EUNKNOWN;
   136ec:	2001      	movs	r0, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   136ee:	bd08      	pop	{r3, pc}
    if (split_app_active_get()) {
   136f0:	f7f9 f9f4 	bl	cadc <split_app_active_get>
   136f4:	b130      	cbz	r0, 13704 <img_mgmt_impl_write_confirmed+0x20>
        rc = split_write_split(SPLIT_MODE_APP);
   136f6:	2002      	movs	r0, #2
   136f8:	f7f9 fa02 	bl	cb00 <split_write_split>
        if (rc != 0) {
   136fc:	2800      	cmp	r0, #0
   136fe:	d0f6      	beq.n	136ee <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   13700:	2001      	movs	r0, #1
   13702:	e7f4      	b.n	136ee <img_mgmt_impl_write_confirmed+0xa>
        rc = split_write_split(SPLIT_MODE_LOADER);
   13704:	2000      	movs	r0, #0
   13706:	f7f9 f9fb 	bl	cb00 <split_write_split>
        if (rc != 0) {
   1370a:	2800      	cmp	r0, #0
   1370c:	d0ef      	beq.n	136ee <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1370e:	2001      	movs	r0, #1
   13710:	e7ed      	b.n	136ee <img_mgmt_impl_write_confirmed+0xa>

00013712 <img_mgmt_impl_read>:

int
img_mgmt_impl_read(int slot, unsigned int offset, void *dst,
                   unsigned int num_bytes)
{
   13712:	b570      	push	{r4, r5, r6, lr}
   13714:	b082      	sub	sp, #8
   13716:	460c      	mov	r4, r1
   13718:	4615      	mov	r5, r2
   1371a:	461e      	mov	r6, r3
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
   1371c:	f7fd f9d5 	bl	10aca <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fa);
   13720:	a901      	add	r1, sp, #4
   13722:	b2c0      	uxtb	r0, r0
   13724:	f7fd f91c 	bl	10960 <flash_area_open>
    if (rc != 0) {
   13728:	b110      	cbz	r0, 13730 <img_mgmt_impl_read+0x1e>
        return MGMT_ERR_EUNKNOWN;
   1372a:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1372c:	b002      	add	sp, #8
   1372e:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fa, offset, dst, num_bytes);
   13730:	4633      	mov	r3, r6
   13732:	462a      	mov	r2, r5
   13734:	4621      	mov	r1, r4
   13736:	9801      	ldr	r0, [sp, #4]
   13738:	f7fd f96a 	bl	10a10 <flash_area_read>
    if (rc != 0) {
   1373c:	2800      	cmp	r0, #0
   1373e:	d0f5      	beq.n	1372c <img_mgmt_impl_read+0x1a>
        return MGMT_ERR_EUNKNOWN;
   13740:	2001      	movs	r0, #1
   13742:	e7f3      	b.n	1372c <img_mgmt_impl_read+0x1a>

00013744 <img_mgmt_impl_write_image_data>:

#else
int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data,
                               unsigned int num_bytes, bool last)
{
   13744:	b570      	push	{r4, r5, r6, lr}
   13746:	b082      	sub	sp, #8
   13748:	4604      	mov	r4, r0
   1374a:	460d      	mov	r5, r1
   1374c:	4616      	mov	r6, r2
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1374e:	a901      	add	r1, sp, #4
   13750:	2002      	movs	r0, #2
   13752:	f7fd f905 	bl	10960 <flash_area_open>
    if (rc != 0) {
   13756:	b110      	cbz	r0, 1375e <img_mgmt_impl_write_image_data+0x1a>
        return MGMT_ERR_EUNKNOWN;
   13758:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1375a:	b002      	add	sp, #8
   1375c:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_write(fa, offset, data, num_bytes);
   1375e:	4633      	mov	r3, r6
   13760:	462a      	mov	r2, r5
   13762:	4621      	mov	r1, r4
   13764:	9801      	ldr	r0, [sp, #4]
   13766:	f7fd f966 	bl	10a36 <flash_area_write>
    if (rc != 0) {
   1376a:	2800      	cmp	r0, #0
   1376c:	d0f5      	beq.n	1375a <img_mgmt_impl_write_image_data+0x16>
        return MGMT_ERR_EUNKNOWN;
   1376e:	2001      	movs	r0, #1
   13770:	e7f3      	b.n	1375a <img_mgmt_impl_write_image_data+0x16>

00013772 <img_mgmt_impl_erase_image_data>:
#endif

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   13772:	b530      	push	{r4, r5, lr}
   13774:	b083      	sub	sp, #12
   13776:	4604      	mov	r4, r0
   13778:	460d      	mov	r5, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1377a:	a901      	add	r1, sp, #4
   1377c:	2002      	movs	r0, #2
   1377e:	f7fd f8ef 	bl	10960 <flash_area_open>
    if (rc != 0) {
   13782:	b110      	cbz	r0, 1378a <img_mgmt_impl_erase_image_data+0x18>
        return MGMT_ERR_EUNKNOWN;
   13784:	2001      	movs	r0, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   13786:	b003      	add	sp, #12
   13788:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_erase(fa, off, num_bytes);
   1378a:	462a      	mov	r2, r5
   1378c:	4621      	mov	r1, r4
   1378e:	9801      	ldr	r0, [sp, #4]
   13790:	f7fd f964 	bl	10a5c <flash_area_erase>
    if (rc != 0) {
   13794:	2800      	cmp	r0, #0
   13796:	d0f6      	beq.n	13786 <img_mgmt_impl_erase_image_data+0x14>
        return MGMT_ERR_EUNKNOWN;
   13798:	2001      	movs	r0, #1
   1379a:	e7f4      	b.n	13786 <img_mgmt_impl_erase_image_data+0x14>

0001379c <img_mgmt_impl_swap_type>:
}
#endif

int
img_mgmt_impl_swap_type(int slot)
{
   1379c:	b508      	push	{r3, lr}
    assert(slot == 0 || slot == 1);
   1379e:	2801      	cmp	r0, #1
   137a0:	d808      	bhi.n	137b4 <img_mgmt_impl_swap_type+0x18>

    switch (boot_swap_type()) {
   137a2:	f014 f81b 	bl	277dc <boot_swap_type>
   137a6:	3801      	subs	r0, #1
   137a8:	2803      	cmp	r0, #3
   137aa:	d811      	bhi.n	137d0 <img_mgmt_impl_swap_type+0x34>
   137ac:	e8df f000 	tbb	[pc, r0]
   137b0:	0e0c1c1a 	.word	0x0e0c1c1a
    assert(slot == 0 || slot == 1);
   137b4:	f7f8 fcf2 	bl	c19c <hal_debugger_connected>
   137b8:	b100      	cbz	r0, 137bc <img_mgmt_impl_swap_type+0x20>
   137ba:	be01      	bkpt	0x0001
   137bc:	2300      	movs	r3, #0
   137be:	461a      	mov	r2, r3
   137c0:	4619      	mov	r1, r3
   137c2:	4618      	mov	r0, r3
   137c4:	f7f9 f9ee 	bl	cba4 <__assert_func>
    case BOOT_SWAP_TYPE_NONE:
        return IMG_MGMT_SWAP_TYPE_NONE;
    case BOOT_SWAP_TYPE_TEST:
        return IMG_MGMT_SWAP_TYPE_TEST;
    case BOOT_SWAP_TYPE_PERM:
        return IMG_MGMT_SWAP_TYPE_PERM;
   137c8:	2002      	movs	r0, #2
   137ca:	e00c      	b.n	137e6 <img_mgmt_impl_swap_type+0x4a>
    case BOOT_SWAP_TYPE_REVERT:
        return IMG_MGMT_SWAP_TYPE_REVERT;
   137cc:	2003      	movs	r0, #3
   137ce:	e00a      	b.n	137e6 <img_mgmt_impl_swap_type+0x4a>
    default:
        assert(0);
   137d0:	f7f8 fce4 	bl	c19c <hal_debugger_connected>
   137d4:	b100      	cbz	r0, 137d8 <img_mgmt_impl_swap_type+0x3c>
   137d6:	be01      	bkpt	0x0001
   137d8:	2300      	movs	r3, #0
   137da:	461a      	mov	r2, r3
   137dc:	4619      	mov	r1, r3
   137de:	4618      	mov	r0, r3
   137e0:	f7f9 f9e0 	bl	cba4 <__assert_func>
    switch (boot_swap_type()) {
   137e4:	2000      	movs	r0, #0
        return IMG_MGMT_SWAP_TYPE_NONE;
    }
}
   137e6:	bd08      	pop	{r3, pc}
        return IMG_MGMT_SWAP_TYPE_TEST;
   137e8:	2001      	movs	r0, #1
   137ea:	e7fc      	b.n	137e6 <img_mgmt_impl_swap_type+0x4a>

000137ec <img_mgmt_impl_erased_val>:

int
img_mgmt_impl_erased_val(int slot, uint8_t *erased_val)
{
   137ec:	b530      	push	{r4, r5, lr}
   137ee:	b083      	sub	sp, #12
   137f0:	460c      	mov	r4, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(flash_area_id_from_image_slot(slot), &fa);
   137f2:	f7fd f96a 	bl	10aca <flash_area_id_from_image_slot>
   137f6:	a901      	add	r1, sp, #4
   137f8:	b2c0      	uxtb	r0, r0
   137fa:	f7fd f8b1 	bl	10960 <flash_area_open>
    if (rc != 0) {
   137fe:	b118      	cbz	r0, 13808 <img_mgmt_impl_erased_val+0x1c>
      return MGMT_ERR_EUNKNOWN;
   13800:	2501      	movs	r5, #1

    *erased_val = flash_area_erased_val(fa);
    flash_area_close(fa);

    return 0;
}
   13802:	4628      	mov	r0, r5
   13804:	b003      	add	sp, #12
   13806:	bd30      	pop	{r4, r5, pc}
   13808:	4605      	mov	r5, r0
    *erased_val = flash_area_erased_val(fa);
   1380a:	9801      	ldr	r0, [sp, #4]
   1380c:	f7fd f93e 	bl	10a8c <flash_area_erased_val>
   13810:	7020      	strb	r0, [r4, #0]
    return 0;
   13812:	e7f6      	b.n	13802 <img_mgmt_impl_erased_val+0x16>

00013814 <img_mgmt_module_init>:

void
img_mgmt_module_init(void)
{
   13814:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13816:	4b08      	ldr	r3, [pc, #32]	; (13838 <img_mgmt_module_init+0x24>)
   13818:	781b      	ldrb	r3, [r3, #0]
   1381a:	b113      	cbz	r3, 13822 <img_mgmt_module_init+0xe>

    img_mgmt_register_group();
   1381c:	f7ff fc04 	bl	13028 <img_mgmt_register_group>
}
   13820:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   13822:	f7f8 fcbb 	bl	c19c <hal_debugger_connected>
   13826:	b100      	cbz	r0, 1382a <img_mgmt_module_init+0x16>
   13828:	be01      	bkpt	0x0001
   1382a:	2300      	movs	r3, #0
   1382c:	461a      	mov	r2, r3
   1382e:	4619      	mov	r1, r3
   13830:	4618      	mov	r0, r3
   13832:	f7f9 f9b7 	bl	cba4 <__assert_func>
   13836:	bf00      	nop
   13838:	20001e3c 	.word	0x20001e3c

0001383c <img_mgmt_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMG_MGMT_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   1383c:	2000      	movs	r0, #0
   1383e:	4770      	bx	lr

00013840 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
   13840:	b508      	push	{r3, lr}
   13842:	4601      	mov	r1, r0
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPSTART, status, NULL);
   13844:	2200      	movs	r2, #0
   13846:	4802      	ldr	r0, [pc, #8]	; (13850 <img_mgmt_impl_log_upload_start+0x10>)
   13848:	f7ff fff8 	bl	1383c <img_mgmt_log_gen>
}
   1384c:	bd08      	pop	{r3, pc}
   1384e:	bf00      	nop
   13850:	0002dc1c 	.word	0x0002dc1c

00013854 <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
   13854:	b508      	push	{r3, lr}
   13856:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPDONE, 0, hash);
   13858:	2100      	movs	r1, #0
   1385a:	4802      	ldr	r0, [pc, #8]	; (13864 <img_mgmt_impl_log_upload_done+0x10>)
   1385c:	f7ff ffee 	bl	1383c <img_mgmt_log_gen>
}
   13860:	bd08      	pop	{r3, pc}
   13862:	bf00      	nop
   13864:	0002dc24 	.word	0x0002dc24

00013868 <img_mgmt_impl_log_pending>:

int
img_mgmt_impl_log_pending(int status, const uint8_t *hash)
{
   13868:	b508      	push	{r3, lr}
   1386a:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_PEND, status, hash);
   1386c:	4601      	mov	r1, r0
   1386e:	4802      	ldr	r0, [pc, #8]	; (13878 <img_mgmt_impl_log_pending+0x10>)
   13870:	f7ff ffe4 	bl	1383c <img_mgmt_log_gen>
}
   13874:	bd08      	pop	{r3, pc}
   13876:	bf00      	nop
   13878:	0002dc2c 	.word	0x0002dc2c

0001387c <img_mgmt_impl_log_confirm>:

int
img_mgmt_impl_log_confirm(int status, const uint8_t *hash)
{
   1387c:	b508      	push	{r3, lr}
   1387e:	460a      	mov	r2, r1
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_CONF, status, hash);
   13880:	4601      	mov	r1, r0
   13882:	4802      	ldr	r0, [pc, #8]	; (1388c <img_mgmt_impl_log_confirm+0x10>)
   13884:	f7ff ffda 	bl	1383c <img_mgmt_log_gen>
}
   13888:	bd08      	pop	{r3, pc}
   1388a:	bf00      	nop
   1388c:	0002dc34 	.word	0x0002dc34

00013890 <mynewt_log_mgmt_find_log>:
    void *arg;
};

static struct log *
mynewt_log_mgmt_find_log(const char *log_name)
{
   13890:	b538      	push	{r3, r4, r5, lr}
   13892:	4605      	mov	r5, r0
    struct log *log;

    log = NULL;
   13894:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   13896:	4620      	mov	r0, r4
   13898:	f7fd fb5a 	bl	10f50 <log_list_get_next>
        if (log == NULL) {
   1389c:	4604      	mov	r4, r0
   1389e:	b128      	cbz	r0, 138ac <mynewt_log_mgmt_find_log+0x1c>
            return NULL;
        }

        if (strcmp(log->l_name, log_name) == 0) {
   138a0:	4629      	mov	r1, r5
   138a2:	6800      	ldr	r0, [r0, #0]
   138a4:	f7fb f8c9 	bl	ea3a <strcmp>
   138a8:	2800      	cmp	r0, #0
   138aa:	d1f4      	bne.n	13896 <mynewt_log_mgmt_find_log+0x6>
            return log;
        }
    }
}
   138ac:	4620      	mov	r0, r4
   138ae:	bd38      	pop	{r3, r4, r5, pc}

000138b0 <mynewt_log_mgmt_walk_cb>:

static int
mynewt_log_mgmt_walk_cb(struct log *log, struct log_offset *log_offset,
                        const struct log_entry_hdr *leh,
                        const void *dptr, uint16_t len)
{
   138b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138b4:	b08d      	sub	sp, #52	; 0x34
   138b6:	4607      	mov	r7, r0
   138b8:	460c      	mov	r4, r1
   138ba:	4698      	mov	r8, r3
   138bc:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
    int read_len;
    int offset;
    int rc;

    rc = 0;
    mynewt_log_mgmt_walk_arg = log_offset->lo_arg;
   138c0:	690e      	ldr	r6, [r1, #16]
     * If specified timestamp == 0: encode entries whose index >=
     *     specified index.
     * Else: encode entries whose timestamp >= specified timestamp and whose
     *      index >= specified index
     */
    if (log_offset->lo_ts == 0) {
   138c2:	e9d1 0100 	ldrd	r0, r1, [r1]
   138c6:	ea50 0301 	orrs.w	r3, r0, r1
   138ca:	d126      	bne.n	1391a <mynewt_log_mgmt_walk_cb+0x6a>
        if (log_offset->lo_index > leh->ue_index) {
   138cc:	68a1      	ldr	r1, [r4, #8]
   138ce:	6893      	ldr	r3, [r2, #8]
   138d0:	4299      	cmp	r1, r3
   138d2:	d851      	bhi.n	13978 <mynewt_log_mgmt_walk_cb+0xc8>
               (leh->ue_ts == log_offset->lo_ts &&
                leh->ue_index < log_offset->lo_index)) {
        return 0;
    }

    entry.ts = leh->ue_ts;
   138d4:	6811      	ldr	r1, [r2, #0]
   138d6:	6853      	ldr	r3, [r2, #4]
   138d8:	9102      	str	r1, [sp, #8]
   138da:	9303      	str	r3, [sp, #12]
    entry.index = leh->ue_index;
   138dc:	6893      	ldr	r3, [r2, #8]
   138de:	9304      	str	r3, [sp, #16]
    entry.module = leh->ue_module;
   138e0:	7b13      	ldrb	r3, [r2, #12]
   138e2:	f88d 301c 	strb.w	r3, [sp, #28]
    entry.level = leh->ue_level;
   138e6:	7b53      	ldrb	r3, [r2, #13]
   138e8:	f88d 301d 	strb.w	r3, [sp, #29]

    entry.type = leh->ue_etype;
   138ec:	7b93      	ldrb	r3, [r2, #14]
   138ee:	f89d 101e 	ldrb.w	r1, [sp, #30]
   138f2:	f363 0103 	bfi	r1, r3, #0, #4
    entry.flags = leh->ue_flags;
   138f6:	091b      	lsrs	r3, r3, #4
   138f8:	f363 1107 	bfi	r1, r3, #4, #4
   138fc:	f88d 101e 	strb.w	r1, [sp, #30]
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
        leh->ue_imghash : NULL;
   13900:	f013 0f01 	tst.w	r3, #1
   13904:	d01b      	beq.n	1393e <mynewt_log_mgmt_walk_cb+0x8e>
   13906:	320f      	adds	r2, #15
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
   13908:	9208      	str	r2, [sp, #32]
    entry.len = len;
   1390a:	9506      	str	r5, [sp, #24]
    entry.data = mynewt_log_mgmt_walk_arg->chunk;
   1390c:	f106 0904 	add.w	r9, r6, #4
   13910:	f8cd 9014 	str.w	r9, [sp, #20]
    rc = 0;
   13914:	2300      	movs	r3, #0

    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   13916:	461c      	mov	r4, r3
   13918:	e027      	b.n	1396a <mynewt_log_mgmt_walk_cb+0xba>
    } else if (leh->ue_ts < log_offset->lo_ts   ||
   1391a:	f8d2 a000 	ldr.w	sl, [r2]
   1391e:	f8d2 b004 	ldr.w	fp, [r2, #4]
   13922:	4582      	cmp	sl, r0
   13924:	eb7b 0301 	sbcs.w	r3, fp, r1
   13928:	db28      	blt.n	1397c <mynewt_log_mgmt_walk_cb+0xcc>
   1392a:	4559      	cmp	r1, fp
   1392c:	bf08      	it	eq
   1392e:	4550      	cmpeq	r0, sl
   13930:	d1d0      	bne.n	138d4 <mynewt_log_mgmt_walk_cb+0x24>
                leh->ue_index < log_offset->lo_index)) {
   13932:	6891      	ldr	r1, [r2, #8]
   13934:	68a3      	ldr	r3, [r4, #8]
               (leh->ue_ts == log_offset->lo_ts &&
   13936:	4299      	cmp	r1, r3
   13938:	d2cc      	bcs.n	138d4 <mynewt_log_mgmt_walk_cb+0x24>
        return 0;
   1393a:	2300      	movs	r3, #0
   1393c:	e021      	b.n	13982 <mynewt_log_mgmt_walk_cb+0xd2>
        leh->ue_imghash : NULL;
   1393e:	2200      	movs	r2, #0
   13940:	e7e2      	b.n	13908 <mynewt_log_mgmt_walk_cb+0x58>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
            read_len = len - offset;
        } else {
            read_len = LOG_MGMT_CHUNK_LEN;
        }
        entry.offset = offset;
   13942:	9409      	str	r4, [sp, #36]	; 0x24
        entry.chunklen = read_len;
   13944:	920a      	str	r2, [sp, #40]	; 0x28

        rc = log_read_body(log, dptr, mynewt_log_mgmt_walk_arg->chunk, offset,
   13946:	b292      	uxth	r2, r2
   13948:	9200      	str	r2, [sp, #0]
   1394a:	b2a3      	uxth	r3, r4
   1394c:	464a      	mov	r2, r9
   1394e:	4641      	mov	r1, r8
   13950:	4638      	mov	r0, r7
   13952:	f7fd fc4d 	bl	111f0 <log_read_body>
                           read_len);
        if (rc < 0) {
   13956:	2800      	cmp	r0, #0
   13958:	db12      	blt.n	13980 <mynewt_log_mgmt_walk_cb+0xd0>
            return LOG_MGMT_ERR_EUNKNOWN;
        }
        rc = mynewt_log_mgmt_walk_arg->cb(&entry, mynewt_log_mgmt_walk_arg->arg);
   1395a:	6833      	ldr	r3, [r6, #0]
   1395c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
   13960:	a802      	add	r0, sp, #8
   13962:	4798      	blx	r3
        if (rc) {
   13964:	4603      	mov	r3, r0
   13966:	b960      	cbnz	r0, 13982 <mynewt_log_mgmt_walk_cb+0xd2>
    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   13968:	3480      	adds	r4, #128	; 0x80
   1396a:	42a5      	cmp	r5, r4
   1396c:	dd09      	ble.n	13982 <mynewt_log_mgmt_walk_cb+0xd2>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
   1396e:	1b2a      	subs	r2, r5, r4
   13970:	2a7f      	cmp	r2, #127	; 0x7f
   13972:	dde6      	ble.n	13942 <mynewt_log_mgmt_walk_cb+0x92>
            read_len = LOG_MGMT_CHUNK_LEN;
   13974:	2280      	movs	r2, #128	; 0x80
   13976:	e7e4      	b.n	13942 <mynewt_log_mgmt_walk_cb+0x92>
            return 0;
   13978:	2300      	movs	r3, #0
   1397a:	e002      	b.n	13982 <mynewt_log_mgmt_walk_cb+0xd2>
        return 0;
   1397c:	2300      	movs	r3, #0
   1397e:	e000      	b.n	13982 <mynewt_log_mgmt_walk_cb+0xd2>
            return LOG_MGMT_ERR_EUNKNOWN;
   13980:	2301      	movs	r3, #1
            break;
        }
    }

    return rc;
}
   13982:	4618      	mov	r0, r3
   13984:	b00d      	add	sp, #52	; 0x34
   13986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001398a <log_mgmt_impl_get_log>:
{
   1398a:	b570      	push	{r4, r5, r6, lr}
   1398c:	4605      	mov	r5, r0
   1398e:	460e      	mov	r6, r1
    for (i = 0; i <= idx; i++) {
   13990:	2400      	movs	r4, #0
    log = NULL;
   13992:	4620      	mov	r0, r4
    for (i = 0; i <= idx; i++) {
   13994:	42ac      	cmp	r4, r5
   13996:	dc04      	bgt.n	139a2 <log_mgmt_impl_get_log+0x18>
        log = log_list_get_next(log);
   13998:	f7fd fada 	bl	10f50 <log_list_get_next>
        if (log == NULL) {
   1399c:	b140      	cbz	r0, 139b0 <log_mgmt_impl_get_log+0x26>
    for (i = 0; i <= idx; i++) {
   1399e:	3401      	adds	r4, #1
   139a0:	e7f8      	b.n	13994 <log_mgmt_impl_get_log+0xa>
    out_log->name = log->l_name;
   139a2:	6803      	ldr	r3, [r0, #0]
   139a4:	6033      	str	r3, [r6, #0]
    out_log->type = log->l_log->log_type;
   139a6:	6843      	ldr	r3, [r0, #4]
   139a8:	681b      	ldr	r3, [r3, #0]
   139aa:	6073      	str	r3, [r6, #4]
    return 0;
   139ac:	2000      	movs	r0, #0
}
   139ae:	bd70      	pop	{r4, r5, r6, pc}
            return LOG_MGMT_ERR_ENOENT;
   139b0:	2005      	movs	r0, #5
   139b2:	e7fc      	b.n	139ae <log_mgmt_impl_get_log+0x24>

000139b4 <log_mgmt_impl_get_module>:
{
   139b4:	b510      	push	{r4, lr}
   139b6:	460c      	mov	r4, r1
    name = LOG_MODULE_STR(idx);
   139b8:	b2c0      	uxtb	r0, r0
   139ba:	f7fd fad1 	bl	10f60 <log_module_get_name>
    if (name == NULL) {
   139be:	b110      	cbz	r0, 139c6 <log_mgmt_impl_get_module+0x12>
        *out_module_name = name;
   139c0:	6020      	str	r0, [r4, #0]
        return 0;
   139c2:	2000      	movs	r0, #0
}
   139c4:	bd10      	pop	{r4, pc}
        return LOG_MGMT_ERR_ENOENT;
   139c6:	2005      	movs	r0, #5
   139c8:	e7fc      	b.n	139c4 <log_mgmt_impl_get_module+0x10>
	...

000139cc <log_mgmt_impl_get_level>:
    if (idx >= LOG_LEVEL_MAX) {
   139cc:	280e      	cmp	r0, #14
   139ce:	dc1d      	bgt.n	13a0c <log_mgmt_impl_get_level+0x40>
{
   139d0:	b538      	push	{r3, r4, r5, lr}
   139d2:	460c      	mov	r4, r1
    name = LOG_LEVEL_STR(idx);
   139d4:	b158      	cbz	r0, 139ee <log_mgmt_impl_get_level+0x22>
   139d6:	2801      	cmp	r0, #1
   139d8:	d012      	beq.n	13a00 <log_mgmt_impl_get_level+0x34>
   139da:	2802      	cmp	r0, #2
   139dc:	d012      	beq.n	13a04 <log_mgmt_impl_get_level+0x38>
   139de:	2803      	cmp	r0, #3
   139e0:	d012      	beq.n	13a08 <log_mgmt_impl_get_level+0x3c>
   139e2:	2804      	cmp	r0, #4
   139e4:	d001      	beq.n	139ea <log_mgmt_impl_get_level+0x1e>
   139e6:	4d0b      	ldr	r5, [pc, #44]	; (13a14 <log_mgmt_impl_get_level+0x48>)
   139e8:	e002      	b.n	139f0 <log_mgmt_impl_get_level+0x24>
   139ea:	4d0b      	ldr	r5, [pc, #44]	; (13a18 <log_mgmt_impl_get_level+0x4c>)
   139ec:	e000      	b.n	139f0 <log_mgmt_impl_get_level+0x24>
   139ee:	4d0b      	ldr	r5, [pc, #44]	; (13a1c <log_mgmt_impl_get_level+0x50>)
    if (!strcmp(name, "UNKNOWN")) {
   139f0:	4908      	ldr	r1, [pc, #32]	; (13a14 <log_mgmt_impl_get_level+0x48>)
   139f2:	4628      	mov	r0, r5
   139f4:	f7fb f821 	bl	ea3a <strcmp>
   139f8:	b150      	cbz	r0, 13a10 <log_mgmt_impl_get_level+0x44>
        *out_level_name = name;
   139fa:	6025      	str	r5, [r4, #0]
        return 0;
   139fc:	2000      	movs	r0, #0
}
   139fe:	bd38      	pop	{r3, r4, r5, pc}
    name = LOG_LEVEL_STR(idx);
   13a00:	4d07      	ldr	r5, [pc, #28]	; (13a20 <log_mgmt_impl_get_level+0x54>)
   13a02:	e7f5      	b.n	139f0 <log_mgmt_impl_get_level+0x24>
   13a04:	4d07      	ldr	r5, [pc, #28]	; (13a24 <log_mgmt_impl_get_level+0x58>)
   13a06:	e7f3      	b.n	139f0 <log_mgmt_impl_get_level+0x24>
   13a08:	4d07      	ldr	r5, [pc, #28]	; (13a28 <log_mgmt_impl_get_level+0x5c>)
   13a0a:	e7f1      	b.n	139f0 <log_mgmt_impl_get_level+0x24>
        return LOG_MGMT_ERR_ENOENT;
   13a0c:	2005      	movs	r0, #5
}
   13a0e:	4770      	bx	lr
        return LOG_MGMT_ERR_ENOENT;
   13a10:	2005      	movs	r0, #5
   13a12:	e7f4      	b.n	139fe <log_mgmt_impl_get_level+0x32>
   13a14:	0002dc5c 	.word	0x0002dc5c
   13a18:	0002dc64 	.word	0x0002dc64
   13a1c:	0002dc3c 	.word	0x0002dc3c
   13a20:	0002dc4c 	.word	0x0002dc4c
   13a24:	0002dc54 	.word	0x0002dc54
   13a28:	0002dc44 	.word	0x0002dc44

00013a2c <log_mgmt_impl_get_next_idx>:
    *out_idx = g_log_info.li_next_index;
   13a2c:	4b02      	ldr	r3, [pc, #8]	; (13a38 <log_mgmt_impl_get_next_idx+0xc>)
   13a2e:	681b      	ldr	r3, [r3, #0]
   13a30:	6003      	str	r3, [r0, #0]
}
   13a32:	2000      	movs	r0, #0
   13a34:	4770      	bx	lr
   13a36:	bf00      	nop
   13a38:	20001bd0 	.word	0x20001bd0

00013a3c <log_mgmt_impl_foreach_entry>:

int
log_mgmt_impl_foreach_entry(const char *log_name,
                            const struct log_mgmt_filter *filter,
                            log_mgmt_foreach_entry_fn *cb, void *arg)
{
   13a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a3e:	b0a9      	sub	sp, #164	; 0xa4
   13a40:	4604      	mov	r4, r0
   13a42:	460f      	mov	r7, r1
   13a44:	4616      	mov	r6, r2
   13a46:	461d      	mov	r5, r3
    struct mynewt_log_mgmt_walk_arg walk_arg;
    struct log_offset offset;
    struct log *log;

    walk_arg = (struct mynewt_log_mgmt_walk_arg) {
   13a48:	2280      	movs	r2, #128	; 0x80
   13a4a:	2100      	movs	r1, #0
   13a4c:	a807      	add	r0, sp, #28
   13a4e:	f7fa ffd8 	bl	ea02 <memset>
   13a52:	9606      	str	r6, [sp, #24]
   13a54:	9527      	str	r5, [sp, #156]	; 0x9c
        .cb = cb,
        .arg = arg,
    };

    log = mynewt_log_mgmt_find_log(log_name);
   13a56:	4620      	mov	r0, r4
   13a58:	f7ff ff1a 	bl	13890 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   13a5c:	b1c0      	cbz	r0, 13a90 <log_mgmt_impl_foreach_entry+0x54>
   13a5e:	4605      	mov	r5, r0
        return LOG_MGMT_ERR_ENOENT;
    }

    if (strcmp(log->l_name, log_name) == 0) {
   13a60:	4621      	mov	r1, r4
   13a62:	6800      	ldr	r0, [r0, #0]
   13a64:	f7fa ffe9 	bl	ea3a <strcmp>
   13a68:	b110      	cbz	r0, 13a70 <log_mgmt_impl_foreach_entry+0x34>
        offset.lo_data_len = 0;

        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
    }

    return LOG_MGMT_ERR_ENOENT;
   13a6a:	2005      	movs	r0, #5
}
   13a6c:	b029      	add	sp, #164	; 0xa4
   13a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        offset.lo_arg = &walk_arg;
   13a70:	ab06      	add	r3, sp, #24
   13a72:	9304      	str	r3, [sp, #16]
        offset.lo_ts = filter->min_timestamp;
   13a74:	e9d7 2300 	ldrd	r2, r3, [r7]
   13a78:	e9cd 2300 	strd	r2, r3, [sp]
        offset.lo_index = filter->min_index;
   13a7c:	68bb      	ldr	r3, [r7, #8]
   13a7e:	9302      	str	r3, [sp, #8]
        offset.lo_data_len = 0;
   13a80:	2300      	movs	r3, #0
   13a82:	9303      	str	r3, [sp, #12]
        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
   13a84:	466a      	mov	r2, sp
   13a86:	4903      	ldr	r1, [pc, #12]	; (13a94 <log_mgmt_impl_foreach_entry+0x58>)
   13a88:	4628      	mov	r0, r5
   13a8a:	f7fd fb4b 	bl	11124 <log_walk_body>
   13a8e:	e7ed      	b.n	13a6c <log_mgmt_impl_foreach_entry+0x30>
        return LOG_MGMT_ERR_ENOENT;
   13a90:	2005      	movs	r0, #5
   13a92:	e7eb      	b.n	13a6c <log_mgmt_impl_foreach_entry+0x30>
   13a94:	000138b1 	.word	0x000138b1

00013a98 <log_mgmt_impl_clear>:

int
log_mgmt_impl_clear(const char *log_name)
{
   13a98:	b508      	push	{r3, lr}
    struct log *log;
    int rc;

    log = mynewt_log_mgmt_find_log(log_name);
   13a9a:	f7ff fef9 	bl	13890 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   13a9e:	b118      	cbz	r0, 13aa8 <log_mgmt_impl_clear+0x10>
        return LOG_MGMT_ERR_ENOENT;
    }

    rc = log_flush(log);
   13aa0:	f7fd fbc0 	bl	11224 <log_flush>
    if (rc != 0) {
   13aa4:	b910      	cbnz	r0, 13aac <log_mgmt_impl_clear+0x14>
        return LOG_MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   13aa6:	bd08      	pop	{r3, pc}
        return LOG_MGMT_ERR_ENOENT;
   13aa8:	2005      	movs	r0, #5
   13aaa:	e7fc      	b.n	13aa6 <log_mgmt_impl_clear+0xe>
        return LOG_MGMT_ERR_EUNKNOWN;
   13aac:	2001      	movs	r0, #1
   13aae:	e7fa      	b.n	13aa6 <log_mgmt_impl_clear+0xe>

00013ab0 <log_mgmt_module_init>:

void
log_mgmt_module_init(void)
{
   13ab0:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13ab2:	4b08      	ldr	r3, [pc, #32]	; (13ad4 <log_mgmt_module_init+0x24>)
   13ab4:	781b      	ldrb	r3, [r3, #0]
   13ab6:	b113      	cbz	r3, 13abe <log_mgmt_module_init+0xe>

    log_mgmt_register_group();
   13ab8:	f018 fe76 	bl	2c7a8 <log_mgmt_register_group>
}
   13abc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   13abe:	f7f8 fb6d 	bl	c19c <hal_debugger_connected>
   13ac2:	b100      	cbz	r0, 13ac6 <log_mgmt_module_init+0x16>
   13ac4:	be01      	bkpt	0x0001
   13ac6:	2300      	movs	r3, #0
   13ac8:	461a      	mov	r2, r3
   13aca:	4619      	mov	r1, r3
   13acc:	4618      	mov	r0, r3
   13ace:	f7f9 f869 	bl	cba4 <__assert_func>
   13ad2:	bf00      	nop
   13ad4:	20001e3c 	.word	0x20001e3c

00013ad8 <os_mgmt_reset>:
/**
 * Command handler: os reset
 */
static int
os_mgmt_reset(struct mgmt_ctxt *ctxt)
{
   13ad8:	b508      	push	{r3, lr}
    return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   13ada:	20fa      	movs	r0, #250	; 0xfa
   13adc:	f000 f966 	bl	13dac <os_mgmt_impl_reset>
}
   13ae0:	bd08      	pop	{r3, pc}
	...

00013ae4 <os_mgmt_taskstat_encode_one>:
{
   13ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ae6:	b085      	sub	sp, #20
   13ae8:	4606      	mov	r6, r0
   13aea:	460d      	mov	r5, r1
    err |= cbor_encode_text_stringz(encoder, task_info->oti_name);
   13aec:	f101 0418 	add.w	r4, r1, #24
   13af0:	4620      	mov	r0, r4
   13af2:	f7fa ffae 	bl	ea52 <strlen>
   13af6:	4602      	mov	r2, r0
   13af8:	4621      	mov	r1, r4
   13afa:	4630      	mov	r0, r6
   13afc:	f014 fd8a 	bl	28614 <cbor_encode_text_string>
   13b00:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(encoder, &task_map, CborIndefiniteLength);
   13b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b06:	4669      	mov	r1, sp
   13b08:	4630      	mov	r0, r6
   13b0a:	f014 fd8f 	bl	2862c <cbor_encoder_create_map>
   13b0e:	4304      	orrs	r4, r0
   13b10:	2204      	movs	r2, #4
   13b12:	493c      	ldr	r1, [pc, #240]	; (13c04 <os_mgmt_taskstat_encode_one+0x120>)
   13b14:	4668      	mov	r0, sp
   13b16:	f014 fd7d 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "prio");
   13b1a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_prio);
   13b1c:	782a      	ldrb	r2, [r5, #0]
   13b1e:	2300      	movs	r3, #0
   13b20:	4668      	mov	r0, sp
   13b22:	f014 fcca 	bl	284ba <cbor_encode_uint>
   13b26:	4304      	orrs	r4, r0
   13b28:	2203      	movs	r2, #3
   13b2a:	4937      	ldr	r1, [pc, #220]	; (13c08 <os_mgmt_taskstat_encode_one+0x124>)
   13b2c:	4668      	mov	r0, sp
   13b2e:	f014 fd71 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "tid");
   13b32:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_taskid);
   13b34:	786a      	ldrb	r2, [r5, #1]
   13b36:	2300      	movs	r3, #0
   13b38:	4668      	mov	r0, sp
   13b3a:	f014 fcbe 	bl	284ba <cbor_encode_uint>
   13b3e:	4304      	orrs	r4, r0
   13b40:	2205      	movs	r2, #5
   13b42:	4932      	ldr	r1, [pc, #200]	; (13c0c <os_mgmt_taskstat_encode_one+0x128>)
   13b44:	4668      	mov	r0, sp
   13b46:	f014 fd65 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "state");
   13b4a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_state);
   13b4c:	78aa      	ldrb	r2, [r5, #2]
   13b4e:	2300      	movs	r3, #0
   13b50:	4668      	mov	r0, sp
   13b52:	f014 fcb2 	bl	284ba <cbor_encode_uint>
   13b56:	4304      	orrs	r4, r0
   13b58:	2206      	movs	r2, #6
   13b5a:	492d      	ldr	r1, [pc, #180]	; (13c10 <os_mgmt_taskstat_encode_one+0x12c>)
   13b5c:	4668      	mov	r0, sp
   13b5e:	f014 fd59 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stkuse");
   13b62:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stkusage);
   13b64:	88aa      	ldrh	r2, [r5, #4]
   13b66:	2300      	movs	r3, #0
   13b68:	4668      	mov	r0, sp
   13b6a:	f014 fca6 	bl	284ba <cbor_encode_uint>
   13b6e:	4304      	orrs	r4, r0
   13b70:	2206      	movs	r2, #6
   13b72:	4928      	ldr	r1, [pc, #160]	; (13c14 <os_mgmt_taskstat_encode_one+0x130>)
   13b74:	4668      	mov	r0, sp
   13b76:	f014 fd4d 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stksiz");
   13b7a:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stksize);
   13b7c:	88ea      	ldrh	r2, [r5, #6]
   13b7e:	2300      	movs	r3, #0
   13b80:	4668      	mov	r0, sp
   13b82:	f014 fc9a 	bl	284ba <cbor_encode_uint>
   13b86:	4304      	orrs	r4, r0
   13b88:	2206      	movs	r2, #6
   13b8a:	4923      	ldr	r1, [pc, #140]	; (13c18 <os_mgmt_taskstat_encode_one+0x134>)
   13b8c:	4668      	mov	r0, sp
   13b8e:	f014 fd41 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "cswcnt");
   13b92:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_cswcnt);
   13b94:	2700      	movs	r7, #0
   13b96:	68aa      	ldr	r2, [r5, #8]
   13b98:	463b      	mov	r3, r7
   13b9a:	4668      	mov	r0, sp
   13b9c:	f014 fc8d 	bl	284ba <cbor_encode_uint>
   13ba0:	4304      	orrs	r4, r0
   13ba2:	2207      	movs	r2, #7
   13ba4:	491d      	ldr	r1, [pc, #116]	; (13c1c <os_mgmt_taskstat_encode_one+0x138>)
   13ba6:	4668      	mov	r0, sp
   13ba8:	f014 fd34 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "runtime");
   13bac:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_runtime);
   13bae:	68ea      	ldr	r2, [r5, #12]
   13bb0:	463b      	mov	r3, r7
   13bb2:	4668      	mov	r0, sp
   13bb4:	f014 fc81 	bl	284ba <cbor_encode_uint>
   13bb8:	4304      	orrs	r4, r0
   13bba:	220c      	movs	r2, #12
   13bbc:	4918      	ldr	r1, [pc, #96]	; (13c20 <os_mgmt_taskstat_encode_one+0x13c>)
   13bbe:	4668      	mov	r0, sp
   13bc0:	f014 fd28 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "last_checkin");
   13bc4:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_last_checkin);
   13bc6:	692a      	ldr	r2, [r5, #16]
   13bc8:	463b      	mov	r3, r7
   13bca:	4668      	mov	r0, sp
   13bcc:	f014 fc75 	bl	284ba <cbor_encode_uint>
   13bd0:	4304      	orrs	r4, r0
   13bd2:	220c      	movs	r2, #12
   13bd4:	4913      	ldr	r1, [pc, #76]	; (13c24 <os_mgmt_taskstat_encode_one+0x140>)
   13bd6:	4668      	mov	r0, sp
   13bd8:	f014 fd1c 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "next_checkin");
   13bdc:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_next_checkin);
   13bde:	696a      	ldr	r2, [r5, #20]
   13be0:	463b      	mov	r3, r7
   13be2:	4668      	mov	r0, sp
   13be4:	f014 fc69 	bl	284ba <cbor_encode_uint>
   13be8:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(encoder, &task_map);
   13bea:	4669      	mov	r1, sp
   13bec:	4630      	mov	r0, r6
   13bee:	f014 fd32 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   13bf2:	ea54 0300 	orrs.w	r3, r4, r0
   13bf6:	d102      	bne.n	13bfe <os_mgmt_taskstat_encode_one+0x11a>
    return 0;
   13bf8:	4638      	mov	r0, r7
}
   13bfa:	b005      	add	sp, #20
   13bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   13bfe:	2002      	movs	r0, #2
   13c00:	e7fb      	b.n	13bfa <os_mgmt_taskstat_encode_one+0x116>
   13c02:	bf00      	nop
   13c04:	0002dc70 	.word	0x0002dc70
   13c08:	0002dc78 	.word	0x0002dc78
   13c0c:	0002dc7c 	.word	0x0002dc7c
   13c10:	0002dc84 	.word	0x0002dc84
   13c14:	0002dc8c 	.word	0x0002dc8c
   13c18:	0002dc94 	.word	0x0002dc94
   13c1c:	0002dc9c 	.word	0x0002dc9c
   13c20:	0002dca4 	.word	0x0002dca4
   13c24:	0002dcb4 	.word	0x0002dcb4

00013c28 <os_mgmt_taskstat_read>:
{
   13c28:	b570      	push	{r4, r5, r6, lr}
   13c2a:	b092      	sub	sp, #72	; 0x48
   13c2c:	4606      	mov	r6, r0
   13c2e:	2205      	movs	r2, #5
   13c30:	4918      	ldr	r1, [pc, #96]	; (13c94 <os_mgmt_taskstat_read+0x6c>)
   13c32:	f014 fcef 	bl	28614 <cbor_encode_text_string>
   13c36:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &tasks_map,
   13c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c3c:	4669      	mov	r1, sp
   13c3e:	4630      	mov	r0, r6
   13c40:	f014 fcf4 	bl	2862c <cbor_encoder_create_map>
    if (err != 0) {
   13c44:	ea50 0304 	orrs.w	r3, r0, r4
   13c48:	d11f      	bne.n	13c8a <os_mgmt_taskstat_read+0x62>
    for (task_idx = 0; ; task_idx++) {
   13c4a:	2500      	movs	r5, #0
   13c4c:	e000      	b.n	13c50 <os_mgmt_taskstat_read+0x28>
   13c4e:	3501      	adds	r5, #1
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   13c50:	a904      	add	r1, sp, #16
   13c52:	4628      	mov	r0, r5
   13c54:	f000 f883 	bl	13d5e <os_mgmt_impl_task_info>
   13c58:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   13c5a:	2805      	cmp	r0, #5
   13c5c:	d00e      	beq.n	13c7c <os_mgmt_taskstat_read+0x54>
        } else if (rc != 0) {
   13c5e:	b950      	cbnz	r0, 13c76 <os_mgmt_taskstat_read+0x4e>
        rc = os_mgmt_taskstat_encode_one(&tasks_map, &task_info);
   13c60:	a904      	add	r1, sp, #16
   13c62:	4668      	mov	r0, sp
   13c64:	f7ff ff3e 	bl	13ae4 <os_mgmt_taskstat_encode_one>
        if (rc != 0) {
   13c68:	4604      	mov	r4, r0
   13c6a:	2800      	cmp	r0, #0
   13c6c:	d0ef      	beq.n	13c4e <os_mgmt_taskstat_read+0x26>
            cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   13c6e:	4669      	mov	r1, sp
   13c70:	4630      	mov	r0, r6
   13c72:	f014 fcf0 	bl	28656 <cbor_encoder_close_container>
}
   13c76:	4620      	mov	r0, r4
   13c78:	b012      	add	sp, #72	; 0x48
   13c7a:	bd70      	pop	{r4, r5, r6, pc}
    err = cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   13c7c:	4669      	mov	r1, sp
   13c7e:	4630      	mov	r0, r6
   13c80:	f014 fce9 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   13c84:	b918      	cbnz	r0, 13c8e <os_mgmt_taskstat_read+0x66>
    return 0;
   13c86:	2400      	movs	r4, #0
   13c88:	e7f5      	b.n	13c76 <os_mgmt_taskstat_read+0x4e>
        return MGMT_ERR_ENOMEM;
   13c8a:	2402      	movs	r4, #2
   13c8c:	e7f3      	b.n	13c76 <os_mgmt_taskstat_read+0x4e>
        return MGMT_ERR_ENOMEM;
   13c8e:	2402      	movs	r4, #2
   13c90:	e7f1      	b.n	13c76 <os_mgmt_taskstat_read+0x4e>
   13c92:	bf00      	nop
   13c94:	0002dcc4 	.word	0x0002dcc4

00013c98 <os_mgmt_echo>:
{
   13c98:	b530      	push	{r4, r5, lr}
   13c9a:	b0b9      	sub	sp, #228	; 0xe4
   13c9c:	4604      	mov	r4, r0
    const struct cbor_attr_t attrs[2] = {
   13c9e:	225c      	movs	r2, #92	; 0x5c
   13ca0:	2100      	movs	r1, #0
   13ca2:	a801      	add	r0, sp, #4
   13ca4:	f7fa fead 	bl	ea02 <memset>
   13ca8:	4b16      	ldr	r3, [pc, #88]	; (13d04 <os_mgmt_echo+0x6c>)
   13caa:	9300      	str	r3, [sp, #0]
   13cac:	2304      	movs	r3, #4
   13cae:	f88d 3004 	strb.w	r3, [sp, #4]
   13cb2:	ab18      	add	r3, sp, #96	; 0x60
   13cb4:	9302      	str	r3, [sp, #8]
   13cb6:	2380      	movs	r3, #128	; 0x80
   13cb8:	930a      	str	r3, [sp, #40]	; 0x28
   13cba:	2301      	movs	r3, #1
   13cbc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    echo_buf[0] = '\0';
   13cc0:	2300      	movs	r3, #0
   13cc2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    err = cbor_read_object(&ctxt->it, attrs);
   13cc6:	4669      	mov	r1, sp
   13cc8:	f104 001c 	add.w	r0, r4, #28
   13ccc:	f7fe ff1b 	bl	12b06 <cbor_read_object>
    if (err != 0) {
   13cd0:	b9a0      	cbnz	r0, 13cfc <os_mgmt_echo+0x64>
   13cd2:	4605      	mov	r5, r0
   13cd4:	2201      	movs	r2, #1
   13cd6:	490c      	ldr	r1, [pc, #48]	; (13d08 <os_mgmt_echo+0x70>)
   13cd8:	4620      	mov	r0, r4
   13cda:	f014 fc9b 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
   13cde:	4305      	orrs	r5, r0
    err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   13ce0:	a818      	add	r0, sp, #96	; 0x60
   13ce2:	f7fa feb6 	bl	ea52 <strlen>
   13ce6:	4602      	mov	r2, r0
   13ce8:	a918      	add	r1, sp, #96	; 0x60
   13cea:	4620      	mov	r0, r4
   13cec:	f014 fc92 	bl	28614 <cbor_encode_text_string>
    if (err != 0) {
   13cf0:	ea55 0300 	orrs.w	r3, r5, r0
   13cf4:	d104      	bne.n	13d00 <os_mgmt_echo+0x68>
    return 0;
   13cf6:	2000      	movs	r0, #0
}
   13cf8:	b039      	add	sp, #228	; 0xe4
   13cfa:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_EINVAL;
   13cfc:	2003      	movs	r0, #3
   13cfe:	e7fb      	b.n	13cf8 <os_mgmt_echo+0x60>
        return MGMT_ERR_ENOMEM;
   13d00:	2002      	movs	r0, #2
   13d02:	e7f9      	b.n	13cf8 <os_mgmt_echo+0x60>
   13d04:	0002db34 	.word	0x0002db34
   13d08:	0002dccc 	.word	0x0002dccc

00013d0c <os_mgmt_register_group>:

void
os_mgmt_register_group(void)
{
   13d0c:	b508      	push	{r3, lr}
    mgmt_register_group(&os_mgmt_group);
   13d0e:	4802      	ldr	r0, [pc, #8]	; (13d18 <os_mgmt_register_group+0xc>)
   13d10:	f000 f938 	bl	13f84 <mgmt_register_group>
}
   13d14:	bd08      	pop	{r3, pc}
   13d16:	bf00      	nop
   13d18:	2000029c 	.word	0x2000029c

00013d1c <os_mgmt_module_init>:

void
os_mgmt_module_init(void)
{
   13d1c:	b508      	push	{r3, lr}
    os_mgmt_register_group();
   13d1e:	f7ff fff5 	bl	13d0c <os_mgmt_register_group>
}
   13d22:	bd08      	pop	{r3, pc}

00013d24 <mynewt_os_mgmt_task_at>:
    return oti.oti_stkusage;
}

static const struct os_task *
mynewt_os_mgmt_task_at(int idx)
{
   13d24:	4602      	mov	r2, r0
    const struct os_task *task;
    int i;

    task = STAILQ_FIRST(&g_os_task_list);
   13d26:	4b05      	ldr	r3, [pc, #20]	; (13d3c <mynewt_os_mgmt_task_at+0x18>)
   13d28:	6818      	ldr	r0, [r3, #0]
    for (i = 0; i < idx; i++) {
   13d2a:	2300      	movs	r3, #0
   13d2c:	4293      	cmp	r3, r2
   13d2e:	da03      	bge.n	13d38 <mynewt_os_mgmt_task_at+0x14>
        if (task == NULL) {
   13d30:	b110      	cbz	r0, 13d38 <mynewt_os_mgmt_task_at+0x14>
            break;
        }

        task = STAILQ_NEXT(task, t_os_task_list);
   13d32:	6c00      	ldr	r0, [r0, #64]	; 0x40
    for (i = 0; i < idx; i++) {
   13d34:	3301      	adds	r3, #1
   13d36:	e7f9      	b.n	13d2c <mynewt_os_mgmt_task_at+0x8>
    }

    return task;
}
   13d38:	4770      	bx	lr
   13d3a:	bf00      	nop
   13d3c:	2000194c 	.word	0x2000194c

00013d40 <mynewt_os_mgmt_stack_usage>:
{
   13d40:	b500      	push	{lr}
   13d42:	b08f      	sub	sp, #60	; 0x3c
    os_task_info_get(task, &oti);
   13d44:	4669      	mov	r1, sp
   13d46:	f7fa fab7 	bl	e2b8 <os_task_info_get>
}
   13d4a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   13d4e:	b00f      	add	sp, #60	; 0x3c
   13d50:	f85d fb04 	ldr.w	pc, [sp], #4

00013d54 <mynewt_os_mgmt_reset_tmo>:
{
   13d54:	b508      	push	{r3, lr}
    hal_watchdog_tickle();
   13d56:	f016 fbc5 	bl	2a4e4 <hal_watchdog_tickle>
    hal_system_reset();
   13d5a:	f7f8 fa27 	bl	c1ac <hal_system_reset>

00013d5e <os_mgmt_impl_task_info>:

int
os_mgmt_impl_task_info(int idx, struct os_mgmt_task_info *out_info)
{
   13d5e:	b538      	push	{r3, r4, r5, lr}
   13d60:	460c      	mov	r4, r1
    const struct os_task *task;

    task = mynewt_os_mgmt_task_at(idx);
   13d62:	f7ff ffdf 	bl	13d24 <mynewt_os_mgmt_task_at>
    if (task == NULL) {
   13d66:	b1f0      	cbz	r0, 13da6 <os_mgmt_impl_task_info+0x48>
   13d68:	4605      	mov	r5, r0
        return MGMT_ERR_ENOENT;
    }

    out_info->oti_prio = task->t_prio;
   13d6a:	7ac3      	ldrb	r3, [r0, #11]
   13d6c:	7023      	strb	r3, [r4, #0]
    out_info->oti_taskid = task->t_taskid;
   13d6e:	7a83      	ldrb	r3, [r0, #10]
   13d70:	7063      	strb	r3, [r4, #1]
    out_info->oti_state = task->t_state;
   13d72:	7b03      	ldrb	r3, [r0, #12]
   13d74:	70a3      	strb	r3, [r4, #2]
    out_info->oti_stkusage = mynewt_os_mgmt_stack_usage(task);
   13d76:	f7ff ffe3 	bl	13d40 <mynewt_os_mgmt_stack_usage>
   13d7a:	80a0      	strh	r0, [r4, #4]
    out_info->oti_stksize = task->t_stacksize;
   13d7c:	892b      	ldrh	r3, [r5, #8]
   13d7e:	80e3      	strh	r3, [r4, #6]
    out_info->oti_cswcnt = task->t_ctx_sw_cnt;
   13d80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   13d82:	60a3      	str	r3, [r4, #8]
    out_info->oti_runtime = task->t_run_time;
   13d84:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13d86:	60e3      	str	r3, [r4, #12]
    out_info->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   13d88:	6a2b      	ldr	r3, [r5, #32]
   13d8a:	6123      	str	r3, [r4, #16]
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                                 task->t_sanity_check.sc_checkin_itvl;
   13d8c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   13d8e:	4413      	add	r3, r2
   13d90:	6163      	str	r3, [r4, #20]
    strncpy(out_info->oti_name, task->t_name, sizeof out_info->oti_name - 1);
   13d92:	221f      	movs	r2, #31
   13d94:	6929      	ldr	r1, [r5, #16]
   13d96:	f104 0018 	add.w	r0, r4, #24
   13d9a:	f017 f97f 	bl	2b09c <strncpy>
    out_info->oti_name[sizeof out_info->oti_name - 1] = '\0';
   13d9e:	2000      	movs	r0, #0
   13da0:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

    return 0;
}
   13da4:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOENT;
   13da6:	2005      	movs	r0, #5
   13da8:	e7fc      	b.n	13da4 <os_mgmt_impl_task_info+0x46>
	...

00013dac <os_mgmt_impl_reset>:

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   13dac:	b530      	push	{r4, r5, lr}
   13dae:	b085      	sub	sp, #20
   13db0:	4604      	mov	r4, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info = {
   13db2:	2306      	movs	r3, #6
   13db4:	f8ad 3000 	strh.w	r3, [sp]
   13db8:	2300      	movs	r3, #0
   13dba:	9301      	str	r3, [sp, #4]
   13dbc:	9302      	str	r3, [sp, #8]
   13dbe:	9303      	str	r3, [sp, #12]
        .file = NULL,
        .line = 0,
        .pc = 0,
    };

    if (img_mgmt_state_any_pending()) {
   13dc0:	f7ff f970 	bl	130a4 <img_mgmt_state_any_pending>
   13dc4:	b110      	cbz	r0, 13dcc <os_mgmt_impl_reset+0x20>
        info.reason = HAL_RESET_DFU;
   13dc6:	2308      	movs	r3, #8
   13dc8:	f8ad 3000 	strh.w	r3, [sp]
    }
#endif
    os_callout_init(&mynewt_os_mgmt_reset_callout, os_eventq_dflt_get(),
   13dcc:	f7f9 fad6 	bl	d37c <os_eventq_dflt_get>
   13dd0:	4601      	mov	r1, r0
   13dd2:	4d0a      	ldr	r5, [pc, #40]	; (13dfc <os_mgmt_impl_reset+0x50>)
   13dd4:	2300      	movs	r3, #0
   13dd6:	4a0a      	ldr	r2, [pc, #40]	; (13e00 <os_mgmt_impl_reset+0x54>)
   13dd8:	4628      	mov	r0, r5
   13dda:	f7f9 f891 	bl	cf00 <os_callout_init>
                    mynewt_os_mgmt_reset_tmo, NULL);

#if MYNEWT_VAL(LOG_SOFT_RESET)
    log_reboot(&info);
   13dde:	4668      	mov	r0, sp
   13de0:	f7fe f854 	bl	11e8c <log_reboot>
#endif
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
                     delay_ms * OS_TICKS_PER_SEC / 1000);
   13de4:	01e4      	lsls	r4, r4, #7
   13de6:	4907      	ldr	r1, [pc, #28]	; (13e04 <os_mgmt_impl_reset+0x58>)
   13de8:	fba1 3104 	umull	r3, r1, r1, r4
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
   13dec:	0989      	lsrs	r1, r1, #6
   13dee:	4628      	mov	r0, r5
   13df0:	f7f9 f8b2 	bl	cf58 <os_callout_reset>

    return 0;
}
   13df4:	2000      	movs	r0, #0
   13df6:	b005      	add	sp, #20
   13df8:	bd30      	pop	{r4, r5, pc}
   13dfa:	bf00      	nop
   13dfc:	20001e7c 	.word	0x20001e7c
   13e00:	00013d55 	.word	0x00013d55
   13e04:	10624dd3 	.word	0x10624dd3

00013e08 <mynewt_stat_mgmt_walk_cb>:
}

static int
mynewt_stat_mgmt_walk_cb(struct stats_hdr *hdr, void *arg,
                         char *name, uint16_t off)
{
   13e08:	b530      	push	{r4, r5, lr}
   13e0a:	b085      	sub	sp, #20
    struct stat_mgmt_entry entry;
    void *stat_val;

    walk_arg = arg;

    stat_val = (uint8_t *)hdr + off;
   13e0c:	18c5      	adds	r5, r0, r3
    switch (hdr->s_size) {
   13e0e:	7904      	ldrb	r4, [r0, #4]
   13e10:	2c04      	cmp	r4, #4
   13e12:	d010      	beq.n	13e36 <mynewt_stat_mgmt_walk_cb+0x2e>
   13e14:	2c08      	cmp	r4, #8
   13e16:	d013      	beq.n	13e40 <mynewt_stat_mgmt_walk_cb+0x38>
   13e18:	2c02      	cmp	r4, #2
   13e1a:	d001      	beq.n	13e20 <mynewt_stat_mgmt_walk_cb+0x18>
   13e1c:	2001      	movs	r0, #1
   13e1e:	e008      	b.n	13e32 <mynewt_stat_mgmt_walk_cb+0x2a>
    case sizeof (uint16_t):
        entry.value = *(uint16_t *) stat_val;
   13e20:	5ac4      	ldrh	r4, [r0, r3]
   13e22:	2500      	movs	r5, #0
   13e24:	e9cd 4502 	strd	r4, r5, [sp, #8]
        entry.value = *(uint64_t *) stat_val;
        break;
    default:
        return MGMT_ERR_EUNKNOWN;
    }
    entry.name = name;
   13e28:	9200      	str	r2, [sp, #0]

    return walk_arg->cb(&entry, walk_arg->arg);
   13e2a:	680b      	ldr	r3, [r1, #0]
   13e2c:	6849      	ldr	r1, [r1, #4]
   13e2e:	4668      	mov	r0, sp
   13e30:	4798      	blx	r3
}
   13e32:	b005      	add	sp, #20
   13e34:	bd30      	pop	{r4, r5, pc}
        entry.value = *(uint32_t *) stat_val;
   13e36:	58c3      	ldr	r3, [r0, r3]
   13e38:	9302      	str	r3, [sp, #8]
   13e3a:	2300      	movs	r3, #0
   13e3c:	9303      	str	r3, [sp, #12]
        break;
   13e3e:	e7f3      	b.n	13e28 <mynewt_stat_mgmt_walk_cb+0x20>
        entry.value = *(uint64_t *) stat_val;
   13e40:	e9d5 4500 	ldrd	r4, r5, [r5]
   13e44:	e9cd 4502 	strd	r4, r5, [sp, #8]
        break;
   13e48:	e7ee      	b.n	13e28 <mynewt_stat_mgmt_walk_cb+0x20>
	...

00013e4c <stat_mgmt_impl_get_group>:
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13e4c:	4b07      	ldr	r3, [pc, #28]	; (13e6c <stat_mgmt_impl_get_group+0x20>)
   13e4e:	681b      	ldr	r3, [r3, #0]
    i = 0;
   13e50:	2200      	movs	r2, #0
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13e52:	b123      	cbz	r3, 13e5e <stat_mgmt_impl_get_group+0x12>
        if (i == idx) {
   13e54:	4282      	cmp	r2, r0
   13e56:	d007      	beq.n	13e68 <stat_mgmt_impl_get_group+0x1c>
        i++;
   13e58:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13e5a:	689b      	ldr	r3, [r3, #8]
   13e5c:	e7f9      	b.n	13e52 <stat_mgmt_impl_get_group+0x6>
    rc = MGMT_ERR_ENOENT;
   13e5e:	2005      	movs	r0, #5
    if (!rc) {
   13e60:	b908      	cbnz	r0, 13e66 <stat_mgmt_impl_get_group+0x1a>
        *out_name = cur->s_name;
   13e62:	681b      	ldr	r3, [r3, #0]
   13e64:	600b      	str	r3, [r1, #0]
}
   13e66:	4770      	bx	lr
            rc = 0;
   13e68:	2000      	movs	r0, #0
   13e6a:	e7f9      	b.n	13e60 <stat_mgmt_impl_get_group+0x14>
   13e6c:	20000284 	.word	0x20000284

00013e70 <stat_mgmt_impl_foreach_entry>:

int
stat_mgmt_impl_foreach_entry(const char *group_name,
                             stat_mgmt_foreach_entry_fn *cb,
                             void *arg)
{
   13e70:	b530      	push	{r4, r5, lr}
   13e72:	b083      	sub	sp, #12
   13e74:	460d      	mov	r5, r1
   13e76:	4614      	mov	r4, r2
    struct mynewt_stat_mgmt_walk_arg walk_arg;
    struct stats_hdr *hdr;

    hdr = stats_group_find(group_name);
   13e78:	f7fe f934 	bl	120e4 <stats_group_find>
    if (hdr == NULL) {
   13e7c:	b138      	cbz	r0, 13e8e <stat_mgmt_impl_foreach_entry+0x1e>
        return MGMT_ERR_ENOENT;
    }

    walk_arg = (struct mynewt_stat_mgmt_walk_arg) {
   13e7e:	9500      	str	r5, [sp, #0]
   13e80:	9401      	str	r4, [sp, #4]
        .cb = cb,
        .arg = arg,
    };

    return stats_walk(hdr, mynewt_stat_mgmt_walk_cb, &walk_arg);
   13e82:	466a      	mov	r2, sp
   13e84:	4903      	ldr	r1, [pc, #12]	; (13e94 <stat_mgmt_impl_foreach_entry+0x24>)
   13e86:	f7fe f89f 	bl	11fc8 <stats_walk>
}
   13e8a:	b003      	add	sp, #12
   13e8c:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOENT;
   13e8e:	2005      	movs	r0, #5
   13e90:	e7fb      	b.n	13e8a <stat_mgmt_impl_foreach_entry+0x1a>
   13e92:	bf00      	nop
   13e94:	00013e09 	.word	0x00013e09

00013e98 <stat_mgmt_module_init>:

void
stat_mgmt_module_init(void)
{
   13e98:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13e9a:	4b08      	ldr	r3, [pc, #32]	; (13ebc <stat_mgmt_module_init+0x24>)
   13e9c:	781b      	ldrb	r3, [r3, #0]
   13e9e:	b113      	cbz	r3, 13ea6 <stat_mgmt_module_init+0xe>

    stat_mgmt_register_group();
   13ea0:	f018 fd48 	bl	2c934 <stat_mgmt_register_group>
}
   13ea4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   13ea6:	f7f8 f979 	bl	c19c <hal_debugger_connected>
   13eaa:	b100      	cbz	r0, 13eae <stat_mgmt_module_init+0x16>
   13eac:	be01      	bkpt	0x0001
   13eae:	2300      	movs	r3, #0
   13eb0:	461a      	mov	r2, r3
   13eb2:	4619      	mov	r1, r3
   13eb4:	4618      	mov	r0, r3
   13eb6:	f7f8 fe75 	bl	cba4 <__assert_func>
   13eba:	bf00      	nop
   13ebc:	20001e3c 	.word	0x20001e3c

00013ec0 <mgmt_find_group>:
    }
}

static struct mgmt_group *
mgmt_find_group(uint16_t group_id, uint16_t command_id)
{
   13ec0:	4602      	mov	r2, r0
     * Find the group with the specified group id, if one exists
     * check the handler for the command id and make sure
     * that is not NULL. If that is not set, look for the group
     * with a command id that is set
     */
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   13ec2:	4b12      	ldr	r3, [pc, #72]	; (13f0c <mgmt_find_group+0x4c>)
   13ec4:	6818      	ldr	r0, [r3, #0]
   13ec6:	b1f0      	cbz	r0, 13f06 <mgmt_find_group+0x46>
        if (group->mg_group_id == group_id) {
   13ec8:	8943      	ldrh	r3, [r0, #10]
   13eca:	4293      	cmp	r3, r2
   13ecc:	d016      	beq.n	13efc <mgmt_find_group+0x3c>
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   13ece:	6800      	ldr	r0, [r0, #0]
   13ed0:	e7f9      	b.n	13ec6 <mgmt_find_group+0x6>
   13ed2:	6800      	ldr	r0, [r0, #0]
   13ed4:	b170      	cbz	r0, 13ef4 <mgmt_find_group+0x34>
        if (group->mg_group_id == group_id) {
   13ed6:	8943      	ldrh	r3, [r0, #10]
   13ed8:	4293      	cmp	r3, r2
   13eda:	d1fa      	bne.n	13ed2 <mgmt_find_group+0x12>
            if (command_id >= group->mg_handlers_count) {
   13edc:	8903      	ldrh	r3, [r0, #8]
   13ede:	428b      	cmp	r3, r1
   13ee0:	d90a      	bls.n	13ef8 <mgmt_find_group+0x38>
                return NULL;
            }

            if (!group->mg_handlers[command_id].mh_read &&
   13ee2:	6843      	ldr	r3, [r0, #4]
   13ee4:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
   13ee8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   13eec:	b913      	cbnz	r3, 13ef4 <mgmt_find_group+0x34>
                !group->mg_handlers[command_id].mh_write) {
   13eee:	6863      	ldr	r3, [r4, #4]
            if (!group->mg_handlers[command_id].mh_read &&
   13ef0:	2b00      	cmp	r3, #0
   13ef2:	d0ee      	beq.n	13ed2 <mgmt_find_group+0x12>
            break;
        }
    }

    return group;
}
   13ef4:	bc10      	pop	{r4}
   13ef6:	4770      	bx	lr
                return NULL;
   13ef8:	2000      	movs	r0, #0
   13efa:	e7fb      	b.n	13ef4 <mgmt_find_group+0x34>
            if (command_id >= group->mg_handlers_count) {
   13efc:	8903      	ldrh	r3, [r0, #8]
   13efe:	428b      	cmp	r3, r1
   13f00:	d902      	bls.n	13f08 <mgmt_find_group+0x48>
{
   13f02:	b410      	push	{r4}
   13f04:	e7ed      	b.n	13ee2 <mgmt_find_group+0x22>
   13f06:	4770      	bx	lr
                return NULL;
   13f08:	2000      	movs	r0, #0
}
   13f0a:	4770      	bx	lr
   13f0c:	20001ea0 	.word	0x20001ea0

00013f10 <mgmt_streamer_alloc_rsp>:
{
   13f10:	b508      	push	{r3, lr}
   13f12:	4603      	mov	r3, r0
   13f14:	4608      	mov	r0, r1
    return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   13f16:	681a      	ldr	r2, [r3, #0]
   13f18:	6812      	ldr	r2, [r2, #0]
   13f1a:	6859      	ldr	r1, [r3, #4]
   13f1c:	4790      	blx	r2
}
   13f1e:	bd08      	pop	{r3, pc}

00013f20 <mgmt_streamer_trim_front>:
{
   13f20:	b510      	push	{r4, lr}
   13f22:	4603      	mov	r3, r0
   13f24:	4608      	mov	r0, r1
   13f26:	4611      	mov	r1, r2
    streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   13f28:	681a      	ldr	r2, [r3, #0]
   13f2a:	6854      	ldr	r4, [r2, #4]
   13f2c:	685a      	ldr	r2, [r3, #4]
   13f2e:	47a0      	blx	r4
}
   13f30:	bd10      	pop	{r4, pc}

00013f32 <mgmt_streamer_reset_buf>:
{
   13f32:	b508      	push	{r3, lr}
   13f34:	4603      	mov	r3, r0
   13f36:	4608      	mov	r0, r1
    streamer->cfg->reset_buf(buf, streamer->cb_arg);
   13f38:	681a      	ldr	r2, [r3, #0]
   13f3a:	6892      	ldr	r2, [r2, #8]
   13f3c:	6859      	ldr	r1, [r3, #4]
   13f3e:	4790      	blx	r2
}
   13f40:	bd08      	pop	{r3, pc}

00013f42 <mgmt_streamer_write_at>:
{
   13f42:	b530      	push	{r4, r5, lr}
   13f44:	b083      	sub	sp, #12
    return streamer->cfg->write_at(streamer->writer, offset, data, len,
   13f46:	6804      	ldr	r4, [r0, #0]
   13f48:	68e4      	ldr	r4, [r4, #12]
   13f4a:	6845      	ldr	r5, [r0, #4]
   13f4c:	9500      	str	r5, [sp, #0]
   13f4e:	68c0      	ldr	r0, [r0, #12]
   13f50:	47a0      	blx	r4
}
   13f52:	b003      	add	sp, #12
   13f54:	bd30      	pop	{r4, r5, pc}

00013f56 <mgmt_streamer_init_reader>:
{
   13f56:	b508      	push	{r3, lr}
    return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
   13f58:	6803      	ldr	r3, [r0, #0]
   13f5a:	691b      	ldr	r3, [r3, #16]
   13f5c:	6842      	ldr	r2, [r0, #4]
   13f5e:	6880      	ldr	r0, [r0, #8]
   13f60:	4798      	blx	r3
}
   13f62:	bd08      	pop	{r3, pc}

00013f64 <mgmt_streamer_init_writer>:
{
   13f64:	b508      	push	{r3, lr}
    return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
   13f66:	6803      	ldr	r3, [r0, #0]
   13f68:	695b      	ldr	r3, [r3, #20]
   13f6a:	6842      	ldr	r2, [r0, #4]
   13f6c:	68c0      	ldr	r0, [r0, #12]
   13f6e:	4798      	blx	r3
}
   13f70:	bd08      	pop	{r3, pc}

00013f72 <mgmt_streamer_free_buf>:
{
   13f72:	b508      	push	{r3, lr}
   13f74:	4603      	mov	r3, r0
   13f76:	4608      	mov	r0, r1
    streamer->cfg->free_buf(buf, streamer->cb_arg);
   13f78:	681a      	ldr	r2, [r3, #0]
   13f7a:	6992      	ldr	r2, [r2, #24]
   13f7c:	6859      	ldr	r1, [r3, #4]
   13f7e:	4790      	blx	r2
}
   13f80:	bd08      	pop	{r3, pc}
	...

00013f84 <mgmt_register_group>:

void
mgmt_register_group(struct mgmt_group *group)
{
    if (mgmt_group_list_end == NULL) {
   13f84:	4b04      	ldr	r3, [pc, #16]	; (13f98 <mgmt_register_group+0x14>)
   13f86:	681b      	ldr	r3, [r3, #0]
   13f88:	b11b      	cbz	r3, 13f92 <mgmt_register_group+0xe>
        mgmt_group_list = group;
    } else {
        mgmt_group_list_end->mg_next = group;
   13f8a:	6018      	str	r0, [r3, #0]
    }
    mgmt_group_list_end = group;
   13f8c:	4b02      	ldr	r3, [pc, #8]	; (13f98 <mgmt_register_group+0x14>)
   13f8e:	6018      	str	r0, [r3, #0]
}
   13f90:	4770      	bx	lr
        mgmt_group_list = group;
   13f92:	4b02      	ldr	r3, [pc, #8]	; (13f9c <mgmt_register_group+0x18>)
   13f94:	6018      	str	r0, [r3, #0]
   13f96:	e7f9      	b.n	13f8c <mgmt_register_group+0x8>
   13f98:	20001ea4 	.word	0x20001ea4
   13f9c:	20001ea0 	.word	0x20001ea0

00013fa0 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   13fa0:	b510      	push	{r4, lr}
   13fa2:	460c      	mov	r4, r1
    const struct mgmt_group *group;

    group = mgmt_find_group(group_id, command_id);
   13fa4:	f7ff ff8c 	bl	13ec0 <mgmt_find_group>
    if (!group) {
   13fa8:	4603      	mov	r3, r0
   13faa:	b110      	cbz	r0, 13fb2 <mgmt_find_handler+0x12>
        return NULL;
    }

    return &group->mg_handlers[command_id];
   13fac:	6843      	ldr	r3, [r0, #4]
   13fae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
}
   13fb2:	4618      	mov	r0, r3
   13fb4:	bd10      	pop	{r4, pc}
	...

00013fb8 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   13fb8:	b538      	push	{r3, r4, r5, lr}
   13fba:	4604      	mov	r4, r0
   13fbc:	460d      	mov	r5, r1
   13fbe:	2202      	movs	r2, #2
   13fc0:	4905      	ldr	r1, [pc, #20]	; (13fd8 <mgmt_write_rsp_status+0x20>)
   13fc2:	f014 fb27 	bl	28614 <cbor_encode_text_string>
    int rc;

    rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
    if (rc != 0) {
   13fc6:	b100      	cbz	r0, 13fca <mgmt_write_rsp_status+0x12>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   13fc8:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&ctxt->encoder, errcode);
   13fca:	462a      	mov	r2, r5
   13fcc:	17eb      	asrs	r3, r5, #31
   13fce:	4620      	mov	r0, r4
   13fd0:	f014 faab 	bl	2852a <cbor_encode_int>
    if (rc != 0) {
   13fd4:	e7f8      	b.n	13fc8 <mgmt_write_rsp_status+0x10>
   13fd6:	bf00      	nop
   13fd8:	0002d868 	.word	0x0002d868

00013fdc <mgmt_err_from_cbor>:

int
mgmt_err_from_cbor(int cbor_status)
{
    switch (cbor_status) {
   13fdc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   13fe0:	d001      	beq.n	13fe6 <mgmt_err_from_cbor+0xa>
   13fe2:	b910      	cbnz	r0, 13fea <mgmt_err_from_cbor+0xe>
   13fe4:	4770      	bx	lr
        case CborNoError:           return MGMT_ERR_EOK;
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
   13fe6:	2002      	movs	r0, #2
   13fe8:	4770      	bx	lr
        default:                    return MGMT_ERR_EUNKNOWN;
   13fea:	2001      	movs	r0, #1
    }
}
   13fec:	4770      	bx	lr

00013fee <mgmt_ctxt_init>:

int
mgmt_ctxt_init(struct mgmt_ctxt *ctxt, struct mgmt_streamer *streamer)
{
   13fee:	b570      	push	{r4, r5, r6, lr}
   13ff0:	4604      	mov	r4, r0
   13ff2:	460d      	mov	r5, r1
    int rc;

    rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   13ff4:	f100 031c 	add.w	r3, r0, #28
   13ff8:	f100 0210 	add.w	r2, r0, #16
   13ffc:	2100      	movs	r1, #0
   13ffe:	68a8      	ldr	r0, [r5, #8]
   14000:	f014 fdef 	bl	28be2 <cbor_parser_init>
    if (rc != CborNoError) {
   14004:	4606      	mov	r6, r0
   14006:	b120      	cbz	r0, 14012 <mgmt_ctxt_init+0x24>
        return mgmt_err_from_cbor(rc);
   14008:	f7ff ffe8 	bl	13fdc <mgmt_err_from_cbor>
   1400c:	4606      	mov	r6, r0
    }

    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);

    return 0;
}
   1400e:	4630      	mov	r0, r6
   14010:	bd70      	pop	{r4, r5, r6, pc}
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   14012:	2200      	movs	r2, #0
   14014:	68e9      	ldr	r1, [r5, #12]
   14016:	4620      	mov	r0, r4
   14018:	f014 fa4a 	bl	284b0 <cbor_encoder_init>
    return 0;
   1401c:	e7f7      	b.n	1400e <mgmt_ctxt_init+0x20>

0001401e <mgmt_ntoh_hdr>:

void
mgmt_ntoh_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = ntohs(hdr->nh_len);
   1401e:	8842      	ldrh	r2, [r0, #2]
   14020:	0213      	lsls	r3, r2, #8
   14022:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   14026:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = ntohs(hdr->nh_group);
   14028:	8882      	ldrh	r2, [r0, #4]
   1402a:	0213      	lsls	r3, r2, #8
   1402c:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   14030:	8083      	strh	r3, [r0, #4]
}
   14032:	4770      	bx	lr

00014034 <mgmt_hton_hdr>:

void
mgmt_hton_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = htons(hdr->nh_len);
   14034:	8842      	ldrh	r2, [r0, #2]
   14036:	0213      	lsls	r3, r2, #8
   14038:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1403c:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(hdr->nh_group);
   1403e:	8882      	ldrh	r2, [r0, #4]
   14040:	0213      	lsls	r3, r2, #8
   14042:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   14046:	8083      	strh	r3, [r0, #4]
}
   14048:	4770      	bx	lr
	...

0001404c <mgmt_evt>:
    evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   1404c:	b510      	push	{r4, lr}
    if (evt_cb) {
   1404e:	4c02      	ldr	r4, [pc, #8]	; (14058 <mgmt_evt+0xc>)
   14050:	6824      	ldr	r4, [r4, #0]
   14052:	b104      	cbz	r4, 14056 <mgmt_evt+0xa>
        evt_cb(opcode, group, id, arg);
   14054:	47a0      	blx	r4
    }
}
   14056:	bd10      	pop	{r4, pc}
   14058:	20001e9c 	.word	0x20001e9c

0001405c <smp_align4>:
static int
smp_align4(int x)
{
    int rem;

    rem = x % 4;
   1405c:	4243      	negs	r3, r0
   1405e:	f000 0203 	and.w	r2, r0, #3
   14062:	f003 0303 	and.w	r3, r3, #3
   14066:	bf58      	it	pl
   14068:	425a      	negpl	r2, r3
    if (rem == 0) {
   1406a:	f010 0f03 	tst.w	r0, #3
   1406e:	d001      	beq.n	14074 <smp_align4+0x18>
        return x;
    } else {
        return x - rem + 4;
   14070:	1a80      	subs	r0, r0, r2
   14072:	3004      	adds	r0, #4
    }
}
   14074:	4770      	bx	lr

00014076 <smp_rsp_op>:
 * Converts a request opcode to its corresponding response opcode.
 */
static uint8_t
smp_rsp_op(uint8_t req_op)
{
    if (req_op == MGMT_OP_READ) {
   14076:	b908      	cbnz	r0, 1407c <smp_rsp_op+0x6>
        return MGMT_OP_READ_RSP;
   14078:	2001      	movs	r0, #1
   1407a:	4770      	bx	lr
    } else {
        return MGMT_OP_WRITE_RSP;
   1407c:	2003      	movs	r0, #3
    }
}
   1407e:	4770      	bx	lr

00014080 <smp_init_rsp_hdr>:

static void
smp_init_rsp_hdr(const struct mgmt_hdr *req_hdr, struct mgmt_hdr *rsp_hdr)
{
   14080:	b570      	push	{r4, r5, r6, lr}
   14082:	4605      	mov	r5, r0
   14084:	460c      	mov	r4, r1
    *rsp_hdr = (struct mgmt_hdr) {
        .nh_len = 0,
        .nh_flags = 0,
        .nh_op = smp_rsp_op(req_hdr->nh_op),
   14086:	7800      	ldrb	r0, [r0, #0]
   14088:	f000 0007 	and.w	r0, r0, #7
   1408c:	f7ff fff3 	bl	14076 <smp_rsp_op>
        .nh_group = req_hdr->nh_group,
   14090:	88ae      	ldrh	r6, [r5, #4]
        .nh_seq = req_hdr->nh_seq,
   14092:	79a9      	ldrb	r1, [r5, #6]
        .nh_id = req_hdr->nh_id,
   14094:	79ea      	ldrb	r2, [r5, #7]
    *rsp_hdr = (struct mgmt_hdr) {
   14096:	2300      	movs	r3, #0
   14098:	6023      	str	r3, [r4, #0]
   1409a:	7823      	ldrb	r3, [r4, #0]
   1409c:	f360 0302 	bfi	r3, r0, #0, #3
   140a0:	7023      	strb	r3, [r4, #0]
   140a2:	80a6      	strh	r6, [r4, #4]
   140a4:	71a1      	strb	r1, [r4, #6]
   140a6:	71e2      	strb	r2, [r4, #7]
    };
}
   140a8:	bd70      	pop	{r4, r5, r6, pc}

000140aa <smp_read_hdr>:
static int
smp_read_hdr(struct smp_streamer *streamer, struct mgmt_hdr *dst_hdr)
{
    struct cbor_decoder_reader *reader;

    reader = streamer->mgmt_stmr.reader;
   140aa:	6880      	ldr	r0, [r0, #8]

    if (reader->message_size < sizeof *dst_hdr) {
   140ac:	6983      	ldr	r3, [r0, #24]
   140ae:	2b07      	cmp	r3, #7
   140b0:	d906      	bls.n	140c0 <smp_read_hdr+0x16>
{
   140b2:	b510      	push	{r4, lr}
        return MGMT_ERR_EINVAL;
    }

    reader->cpy(reader, (char *)dst_hdr, 0, sizeof *dst_hdr);
   140b4:	6944      	ldr	r4, [r0, #20]
   140b6:	2308      	movs	r3, #8
   140b8:	2200      	movs	r2, #0
   140ba:	47a0      	blx	r4
    return 0;
   140bc:	2000      	movs	r0, #0
}
   140be:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   140c0:	2003      	movs	r0, #3
}
   140c2:	4770      	bx	lr

000140c4 <smp_handle_single_payload>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_payload(struct mgmt_ctxt *cbuf,
                          const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   140c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140c6:	b085      	sub	sp, #20
   140c8:	4605      	mov	r5, r0
   140ca:	460c      	mov	r4, r1
   140cc:	4616      	mov	r6, r2
    const struct mgmt_handler *handler;
    mgmt_handler_fn *handler_fn;
    struct CborEncoder payload_encoder;
    int rc;

    handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   140ce:	79c9      	ldrb	r1, [r1, #7]
   140d0:	88a0      	ldrh	r0, [r4, #4]
   140d2:	f7ff ff65 	bl	13fa0 <mgmt_find_handler>
    if (handler == NULL) {
   140d6:	b370      	cbz	r0, 14136 <smp_handle_single_payload+0x72>
   140d8:	4607      	mov	r7, r0
    }

    /* Begin response payload.  Response fields are inserted into the root
     * map as key value pairs.
     */
    rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   140da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140de:	4669      	mov	r1, sp
   140e0:	4628      	mov	r0, r5
   140e2:	f014 faa3 	bl	2862c <cbor_encoder_create_map>
                                 CborIndefiniteLength);
    rc = mgmt_err_from_cbor(rc);
   140e6:	f7ff ff79 	bl	13fdc <mgmt_err_from_cbor>
    if (rc != 0) {
   140ea:	4603      	mov	r3, r0
   140ec:	b930      	cbnz	r0, 140fc <smp_handle_single_payload+0x38>
        return rc;
    }

    switch (req_hdr->nh_op) {
   140ee:	7823      	ldrb	r3, [r4, #0]
   140f0:	f013 0307 	ands.w	r3, r3, #7
   140f4:	d005      	beq.n	14102 <smp_handle_single_payload+0x3e>
   140f6:	2b02      	cmp	r3, #2
   140f8:	d019      	beq.n	1412e <smp_handle_single_payload+0x6a>
   140fa:	2303      	movs	r3, #3
    }

    /* End response payload. */
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
    return mgmt_err_from_cbor(rc);
}
   140fc:	4618      	mov	r0, r3
   140fe:	b005      	add	sp, #20
   14100:	bdf0      	pop	{r4, r5, r6, r7, pc}
        handler_fn = handler->mh_read;
   14102:	683f      	ldr	r7, [r7, #0]
    if (handler_fn) {
   14104:	b1af      	cbz	r7, 14132 <smp_handle_single_payload+0x6e>
        *handler_found = true;
   14106:	2001      	movs	r0, #1
   14108:	7030      	strb	r0, [r6, #0]
        mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   1410a:	2300      	movs	r3, #0
   1410c:	79e2      	ldrb	r2, [r4, #7]
   1410e:	88a1      	ldrh	r1, [r4, #4]
   14110:	f7ff ff9c 	bl	1404c <mgmt_evt>
        rc = handler_fn(cbuf);
   14114:	4628      	mov	r0, r5
   14116:	47b8      	blx	r7
    if (rc != 0) {
   14118:	4603      	mov	r3, r0
   1411a:	2800      	cmp	r0, #0
   1411c:	d1ee      	bne.n	140fc <smp_handle_single_payload+0x38>
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   1411e:	4669      	mov	r1, sp
   14120:	4628      	mov	r0, r5
   14122:	f014 fa98 	bl	28656 <cbor_encoder_close_container>
    return mgmt_err_from_cbor(rc);
   14126:	f7ff ff59 	bl	13fdc <mgmt_err_from_cbor>
   1412a:	4603      	mov	r3, r0
   1412c:	e7e6      	b.n	140fc <smp_handle_single_payload+0x38>
        handler_fn = handler->mh_write;
   1412e:	687f      	ldr	r7, [r7, #4]
        break;
   14130:	e7e8      	b.n	14104 <smp_handle_single_payload+0x40>
        rc = MGMT_ERR_ENOTSUP;
   14132:	2308      	movs	r3, #8
        return rc;
   14134:	e7e2      	b.n	140fc <smp_handle_single_payload+0x38>
        return MGMT_ERR_ENOTSUP;
   14136:	2308      	movs	r3, #8
   14138:	e7e0      	b.n	140fc <smp_handle_single_payload+0x38>

0001413a <smp_write_hdr>:
{
   1413a:	b508      	push	{r3, lr}
   1413c:	460a      	mov	r2, r1
    rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr,
   1413e:	2308      	movs	r3, #8
   14140:	2100      	movs	r1, #0
   14142:	f7ff fefe 	bl	13f42 <mgmt_streamer_write_at>
    return mgmt_err_from_cbor(rc);
   14146:	f7ff ff49 	bl	13fdc <mgmt_err_from_cbor>
}
   1414a:	bd08      	pop	{r3, pc}

0001414c <smp_handle_single_req>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_req(struct smp_streamer *streamer,
                      const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   1414c:	b570      	push	{r4, r5, r6, lr}
   1414e:	b08e      	sub	sp, #56	; 0x38
   14150:	4604      	mov	r4, r0
   14152:	460d      	mov	r5, r1
   14154:	4616      	mov	r6, r2
    struct mgmt_ctxt cbuf;
    struct mgmt_hdr rsp_hdr;
    int rc;

    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   14156:	4601      	mov	r1, r0
   14158:	a803      	add	r0, sp, #12
   1415a:	f7ff ff48 	bl	13fee <mgmt_ctxt_init>
    if (rc != 0) {
   1415e:	4603      	mov	r3, r0
   14160:	b110      	cbz	r0, 14168 <smp_handle_single_req+0x1c>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   14162:	4618      	mov	r0, r3
   14164:	b00e      	add	sp, #56	; 0x38
   14166:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   14168:	a901      	add	r1, sp, #4
   1416a:	4628      	mov	r0, r5
   1416c:	f7ff ff88 	bl	14080 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   14170:	a901      	add	r1, sp, #4
   14172:	4620      	mov	r0, r4
   14174:	f7ff ffe1 	bl	1413a <smp_write_hdr>
    if (rc != 0) {
   14178:	4603      	mov	r3, r0
   1417a:	2800      	cmp	r0, #0
   1417c:	d1f1      	bne.n	14162 <smp_handle_single_req+0x16>
    rc = smp_handle_single_payload(&cbuf, req_hdr, handler_found);
   1417e:	4632      	mov	r2, r6
   14180:	4629      	mov	r1, r5
   14182:	a803      	add	r0, sp, #12
   14184:	f7ff ff9e 	bl	140c4 <smp_handle_single_payload>
    if (rc != 0) {
   14188:	4603      	mov	r3, r0
   1418a:	2800      	cmp	r0, #0
   1418c:	d1e9      	bne.n	14162 <smp_handle_single_req+0x16>
{   return encoder->writer->bytes_written; }
   1418e:	9b03      	ldr	r3, [sp, #12]
   14190:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   14192:	3b08      	subs	r3, #8
   14194:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   14198:	a801      	add	r0, sp, #4
   1419a:	f7ff ff4b 	bl	14034 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1419e:	a901      	add	r1, sp, #4
   141a0:	4620      	mov	r0, r4
   141a2:	f7ff ffca 	bl	1413a <smp_write_hdr>
   141a6:	4603      	mov	r3, r0
    if (rc != 0) {
   141a8:	e7db      	b.n	14162 <smp_handle_single_req+0x16>

000141aa <smp_build_err_rsp>:
{
   141aa:	b570      	push	{r4, r5, r6, lr}
   141ac:	b092      	sub	sp, #72	; 0x48
   141ae:	4604      	mov	r4, r0
   141b0:	460d      	mov	r5, r1
   141b2:	4616      	mov	r6, r2
    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   141b4:	4601      	mov	r1, r0
   141b6:	a803      	add	r0, sp, #12
   141b8:	f7ff ff19 	bl	13fee <mgmt_ctxt_init>
    if (rc != 0) {
   141bc:	b108      	cbz	r0, 141c2 <smp_build_err_rsp+0x18>
}
   141be:	b012      	add	sp, #72	; 0x48
   141c0:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   141c2:	a901      	add	r1, sp, #4
   141c4:	4628      	mov	r0, r5
   141c6:	f7ff ff5b 	bl	14080 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   141ca:	a901      	add	r1, sp, #4
   141cc:	4620      	mov	r0, r4
   141ce:	f7ff ffb4 	bl	1413a <smp_write_hdr>
    if (rc != 0) {
   141d2:	2800      	cmp	r0, #0
   141d4:	d1f3      	bne.n	141be <smp_build_err_rsp+0x14>
    rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   141d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   141da:	a90e      	add	r1, sp, #56	; 0x38
   141dc:	a803      	add	r0, sp, #12
   141de:	f014 fa25 	bl	2862c <cbor_encoder_create_map>
    if (rc != 0) {
   141e2:	2800      	cmp	r0, #0
   141e4:	d1eb      	bne.n	141be <smp_build_err_rsp+0x14>
    rc = mgmt_write_rsp_status(&cbuf, status);
   141e6:	4631      	mov	r1, r6
   141e8:	a803      	add	r0, sp, #12
   141ea:	f7ff fee5 	bl	13fb8 <mgmt_write_rsp_status>
    if (rc != 0) {
   141ee:	2800      	cmp	r0, #0
   141f0:	d1e5      	bne.n	141be <smp_build_err_rsp+0x14>
    rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   141f2:	a90e      	add	r1, sp, #56	; 0x38
   141f4:	a803      	add	r0, sp, #12
   141f6:	f014 fa2e 	bl	28656 <cbor_encoder_close_container>
    if (rc != 0) {
   141fa:	2800      	cmp	r0, #0
   141fc:	d1df      	bne.n	141be <smp_build_err_rsp+0x14>
   141fe:	9b03      	ldr	r3, [sp, #12]
   14200:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   14202:	3b08      	subs	r3, #8
   14204:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   14208:	a801      	add	r0, sp, #4
   1420a:	f7ff ff13 	bl	14034 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1420e:	a901      	add	r1, sp, #4
   14210:	4620      	mov	r0, r4
   14212:	f7ff ff92 	bl	1413a <smp_write_hdr>
    if (rc != 0) {
   14216:	e7d2      	b.n	141be <smp_build_err_rsp+0x14>

00014218 <smp_on_err>:
 * @param status                The status to indicate in the error response.
 */
static void
smp_on_err(struct smp_streamer *streamer, const struct mgmt_hdr *req_hdr,
           void *req, void *rsp, int status)
{
   14218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1421a:	4604      	mov	r4, r0
   1421c:	460f      	mov	r7, r1
   1421e:	4616      	mov	r6, r2
    int rc;

    /* Prefer the response buffer for holding the error response.  If no
     * response buffer was allocated, use the request buffer instead.
     */
    if (rsp == NULL) {
   14220:	461d      	mov	r5, r3
   14222:	b1e3      	cbz	r3, 1425e <smp_on_err+0x46>
        rsp = req;
        req = NULL;
    }

    /* Clear the partial response from the buffer, if any. */
    mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   14224:	4629      	mov	r1, r5
   14226:	4620      	mov	r0, r4
   14228:	f7ff fe83 	bl	13f32 <mgmt_streamer_reset_buf>
    mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   1422c:	4629      	mov	r1, r5
   1422e:	4620      	mov	r0, r4
   14230:	f7ff fe98 	bl	13f64 <mgmt_streamer_init_writer>

    /* Build and transmit the error response. */
    rc = smp_build_err_rsp(streamer, req_hdr, status);
   14234:	9a06      	ldr	r2, [sp, #24]
   14236:	4639      	mov	r1, r7
   14238:	4620      	mov	r0, r4
   1423a:	f7ff ffb6 	bl	141aa <smp_build_err_rsp>
    if (rc == 0) {
   1423e:	b928      	cbnz	r0, 1424c <smp_on_err+0x34>
        streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   14240:	6923      	ldr	r3, [r4, #16]
   14242:	6862      	ldr	r2, [r4, #4]
   14244:	4629      	mov	r1, r5
   14246:	4620      	mov	r0, r4
   14248:	4798      	blx	r3
        rsp = NULL;
   1424a:	2500      	movs	r5, #0
    }

    /* Free any extra buffers. */
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1424c:	4631      	mov	r1, r6
   1424e:	4620      	mov	r0, r4
   14250:	f7ff fe8f 	bl	13f72 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   14254:	4629      	mov	r1, r5
   14256:	4620      	mov	r0, r4
   14258:	f7ff fe8b 	bl	13f72 <mgmt_streamer_free_buf>
}
   1425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        req = NULL;
   1425e:	462e      	mov	r6, r5
        rsp = req;
   14260:	4615      	mov	r5, r2
   14262:	e7df      	b.n	14224 <smp_on_err+0xc>

00014264 <smp_process_request_packet>:
 *
 * @return                      0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   14264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14268:	b086      	sub	sp, #24
   1426a:	4604      	mov	r4, r0
   1426c:	460e      	mov	r6, r1
    void *rsp;
    bool valid_hdr, handler_found;
    int rc;

    rsp = NULL;
    valid_hdr = true;
   1426e:	e012      	b.n	14296 <smp_process_request_packet+0x32>
            break;
        }

        /* Trim processed request to free up space for subsequent responses. */
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
                                 smp_align4(req_hdr.nh_len));
   14270:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14274:	f7ff fef2 	bl	1405c <smp_align4>
   14278:	4602      	mov	r2, r0
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
   1427a:	4631      	mov	r1, r6
   1427c:	4620      	mov	r0, r4
   1427e:	f7ff fe4f 	bl	13f20 <mgmt_streamer_trim_front>

        cmd_done_arg.err = MGMT_ERR_EOK;
   14282:	2300      	movs	r3, #0
   14284:	9303      	str	r3, [sp, #12]
        mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   14286:	ab03      	add	r3, sp, #12
   14288:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1428c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   14290:	2003      	movs	r0, #3
   14292:	f7ff fedb 	bl	1404c <mgmt_evt>
        handler_found = false;
   14296:	2300      	movs	r3, #0
   14298:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   1429c:	46a0      	mov	r8, r4
   1429e:	4631      	mov	r1, r6
   142a0:	4620      	mov	r0, r4
   142a2:	f7ff fe58 	bl	13f56 <mgmt_streamer_init_reader>
        if (rc != 0) {
   142a6:	4605      	mov	r5, r0
   142a8:	bb60      	cbnz	r0, 14304 <smp_process_request_packet+0xa0>
        rc = smp_read_hdr(streamer, &req_hdr);
   142aa:	a904      	add	r1, sp, #16
   142ac:	4620      	mov	r0, r4
   142ae:	f7ff fefc 	bl	140aa <smp_read_hdr>
        if (rc != 0) {
   142b2:	4605      	mov	r5, r0
   142b4:	bbb8      	cbnz	r0, 14326 <smp_process_request_packet+0xc2>
        mgmt_ntoh_hdr(&req_hdr);
   142b6:	a804      	add	r0, sp, #16
   142b8:	f7ff feb1 	bl	1401e <mgmt_ntoh_hdr>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   142bc:	2208      	movs	r2, #8
   142be:	4631      	mov	r1, r6
   142c0:	4620      	mov	r0, r4
   142c2:	f7ff fe2d 	bl	13f20 <mgmt_streamer_trim_front>
        rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   142c6:	4631      	mov	r1, r6
   142c8:	4620      	mov	r0, r4
   142ca:	f7ff fe21 	bl	13f10 <mgmt_streamer_alloc_rsp>
        if (rsp == NULL) {
   142ce:	4607      	mov	r7, r0
   142d0:	b360      	cbz	r0, 1432c <smp_process_request_packet+0xc8>
        rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   142d2:	4601      	mov	r1, r0
   142d4:	4620      	mov	r0, r4
   142d6:	f7ff fe45 	bl	13f64 <mgmt_streamer_init_writer>
        if (rc != 0) {
   142da:	4605      	mov	r5, r0
   142dc:	bb48      	cbnz	r0, 14332 <smp_process_request_packet+0xce>
        rc = smp_handle_single_req(streamer, &req_hdr, &handler_found);
   142de:	f10d 020b 	add.w	r2, sp, #11
   142e2:	a904      	add	r1, sp, #16
   142e4:	4620      	mov	r0, r4
   142e6:	f7ff ff31 	bl	1414c <smp_handle_single_req>
        if (rc != 0) {
   142ea:	4605      	mov	r5, r0
   142ec:	bb18      	cbnz	r0, 14336 <smp_process_request_packet+0xd2>
        rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   142ee:	6923      	ldr	r3, [r4, #16]
   142f0:	6862      	ldr	r2, [r4, #4]
   142f2:	4639      	mov	r1, r7
   142f4:	4620      	mov	r0, r4
   142f6:	4798      	blx	r3
        if (rc != 0) {
   142f8:	4605      	mov	r5, r0
   142fa:	2800      	cmp	r0, #0
   142fc:	d0b8      	beq.n	14270 <smp_process_request_packet+0xc>
    valid_hdr = true;
   142fe:	2301      	movs	r3, #1
        rsp = NULL;
   14300:	2700      	movs	r7, #0
   14302:	e001      	b.n	14308 <smp_process_request_packet+0xa4>
            valid_hdr = false;
   14304:	2300      	movs	r3, #0
   14306:	461f      	mov	r7, r3
                 &cmd_done_arg);
    }

    if (rc != 0 && valid_hdr) {
   14308:	b105      	cbz	r5, 1430c <smp_process_request_packet+0xa8>
   1430a:	b9b3      	cbnz	r3, 1433a <smp_process_request_packet+0xd6>
        }

        return rc;
    }

    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1430c:	4631      	mov	r1, r6
   1430e:	4640      	mov	r0, r8
   14310:	f7ff fe2f 	bl	13f72 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   14314:	4639      	mov	r1, r7
   14316:	4640      	mov	r0, r8
   14318:	f7ff fe2b 	bl	13f72 <mgmt_streamer_free_buf>
    return 0;
   1431c:	2500      	movs	r5, #0
}
   1431e:	4628      	mov	r0, r5
   14320:	b006      	add	sp, #24
   14322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            valid_hdr = false;
   14326:	2300      	movs	r3, #0
   14328:	461f      	mov	r7, r3
   1432a:	e7ed      	b.n	14308 <smp_process_request_packet+0xa4>
            rc = MGMT_ERR_ENOMEM;
   1432c:	2502      	movs	r5, #2
    valid_hdr = true;
   1432e:	2301      	movs	r3, #1
   14330:	e7ea      	b.n	14308 <smp_process_request_packet+0xa4>
   14332:	2301      	movs	r3, #1
   14334:	e7e8      	b.n	14308 <smp_process_request_packet+0xa4>
   14336:	2301      	movs	r3, #1
   14338:	e7e6      	b.n	14308 <smp_process_request_packet+0xa4>
        smp_on_err(streamer, &req_hdr, req, rsp, rc);
   1433a:	9500      	str	r5, [sp, #0]
   1433c:	463b      	mov	r3, r7
   1433e:	4632      	mov	r2, r6
   14340:	a904      	add	r1, sp, #16
   14342:	4620      	mov	r0, r4
   14344:	f7ff ff68 	bl	14218 <smp_on_err>
        if (handler_found) {
   14348:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1434c:	2b00      	cmp	r3, #0
   1434e:	d0e6      	beq.n	1431e <smp_process_request_packet+0xba>
            cmd_done_arg.err = rc;
   14350:	9503      	str	r5, [sp, #12]
            mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   14352:	ab03      	add	r3, sp, #12
   14354:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14358:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1435c:	2003      	movs	r0, #3
   1435e:	f7ff fe75 	bl	1404c <mgmt_evt>
        return rc;
   14362:	e7dc      	b.n	1431e <smp_process_request_packet+0xba>

00014364 <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   14364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14368:	4604      	mov	r4, r0
   1436a:	460d      	mov	r5, r1
   1436c:	4699      	mov	r9, r3
    int digit;
    int off;
    int len;

    /* First, calculate the length of the resulting string. */
    copy = val;
   1436e:	4601      	mov	r1, r0
    for (len = 0; copy != 0; len++) {
   14370:	f04f 0800 	mov.w	r8, #0
   14374:	b131      	cbz	r1, 14384 <ull_to_s+0x20>
        copy /= 10;
   14376:	4b19      	ldr	r3, [pc, #100]	; (143dc <ull_to_s+0x78>)
   14378:	fba3 3101 	umull	r3, r1, r3, r1
   1437c:	08c9      	lsrs	r1, r1, #3
    for (len = 0; copy != 0; len++) {
   1437e:	f108 0801 	add.w	r8, r8, #1
   14382:	e7f7      	b.n	14374 <ull_to_s+0x10>
    }

    /* A value of 0 still requires one character ("0"). */
    if (len == 0) {
   14384:	f1b8 0f00 	cmp.w	r8, #0
   14388:	d101      	bne.n	1438e <ull_to_s+0x2a>
        len = 1;
   1438a:	f04f 0801 	mov.w	r8, #1
    }

    /* Ensure the buffer can accommodate the string and terminator. */
    if (len >= dst_max_len - 1) {
   1438e:	3a01      	subs	r2, #1
   14390:	4542      	cmp	r2, r8
   14392:	dd20      	ble.n	143d6 <ull_to_s+0x72>
        return -1;
    }

    /* Encode the string from right to left. */
    off = len;
    dst[off--] = '\0';
   14394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   14398:	2300      	movs	r3, #0
   1439a:	f809 3008 	strb.w	r3, [r9, r8]
    do {
        digit = val % 10;
   1439e:	220a      	movs	r2, #10
   143a0:	2300      	movs	r3, #0
   143a2:	4620      	mov	r0, r4
   143a4:	4629      	mov	r1, r5
   143a6:	f018 fe03 	bl	2cfb0 <__aeabi_uldivmod>
        dst[off--] = '0' + digit;
   143aa:	3230      	adds	r2, #48	; 0x30
   143ac:	f809 200a 	strb.w	r2, [r9, sl]
   143b0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff

        val /= 10;
   143b4:	4626      	mov	r6, r4
   143b6:	462f      	mov	r7, r5
   143b8:	220a      	movs	r2, #10
   143ba:	2300      	movs	r3, #0
   143bc:	4620      	mov	r0, r4
   143be:	4629      	mov	r1, r5
   143c0:	f018 fdf6 	bl	2cfb0 <__aeabi_uldivmod>
   143c4:	4604      	mov	r4, r0
   143c6:	460d      	mov	r5, r1
    } while (val > 0);
   143c8:	2f00      	cmp	r7, #0
   143ca:	bf08      	it	eq
   143cc:	2e0a      	cmpeq	r6, #10
   143ce:	d2e6      	bcs.n	1439e <ull_to_s+0x3a>

    return len;
}
   143d0:	4640      	mov	r0, r8
   143d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -1;
   143d6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   143da:	e7f9      	b.n	143d0 <ull_to_s+0x6c>
   143dc:	cccccccd 	.word	0xcccccccd

000143e0 <ble_ll_count_rx_adv_pdus>:
 */
static void
ble_ll_count_rx_adv_pdus(uint8_t pdu_type)
{
    /* Count received packet types  */
    switch (pdu_type) {
   143e0:	2808      	cmp	r0, #8
   143e2:	d832      	bhi.n	1444a <ble_ll_count_rx_adv_pdus+0x6a>
   143e4:	e8df f000 	tbb	[pc, r0]
   143e8:	19140f0a 	.word	0x19140f0a
   143ec:	052d231e 	.word	0x052d231e
   143f0:	28          	.byte	0x28
   143f1:	00          	.byte	0x00
    case BLE_ADV_PDU_TYPE_ADV_EXT_IND:
        STATS_INC(ble_ll_stats, rx_adv_ext_ind);
   143f2:	4a16      	ldr	r2, [pc, #88]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   143f4:	6d53      	ldr	r3, [r2, #84]	; 0x54
   143f6:	3301      	adds	r3, #1
   143f8:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   143fa:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_IND:
        STATS_INC(ble_ll_stats, rx_adv_ind);
   143fc:	4a13      	ldr	r2, [pc, #76]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   143fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
   14400:	3301      	adds	r3, #1
   14402:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   14404:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_DIRECT_IND:
        STATS_INC(ble_ll_stats, rx_adv_direct_ind);
   14406:	4a11      	ldr	r2, [pc, #68]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   14408:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1440a:	3301      	adds	r3, #1
   1440c:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1440e:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_NONCONN_IND:
        STATS_INC(ble_ll_stats, rx_adv_nonconn_ind);
   14410:	4a0e      	ldr	r2, [pc, #56]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   14412:	6d13      	ldr	r3, [r2, #80]	; 0x50
   14414:	3301      	adds	r3, #1
   14416:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   14418:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_REQ:
        STATS_INC(ble_ll_stats, rx_scan_reqs);
   1441a:	4a0c      	ldr	r2, [pc, #48]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   1441c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1441e:	3301      	adds	r3, #1
   14420:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   14422:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_RSP:
        STATS_INC(ble_ll_stats, rx_scan_rsps);
   14424:	4a09      	ldr	r2, [pc, #36]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   14426:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   14428:	3301      	adds	r3, #1
   1442a:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1442c:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_CONNECT_IND:
        STATS_INC(ble_ll_stats, rx_connect_reqs);
   1442e:	4a07      	ldr	r2, [pc, #28]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   14430:	6e13      	ldr	r3, [r2, #96]	; 0x60
   14432:	3301      	adds	r3, #1
   14434:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   14436:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_AUX_CONNECT_RSP:
        STATS_INC(ble_ll_stats, rx_aux_connect_rsp);
   14438:	4a04      	ldr	r2, [pc, #16]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   1443a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1443c:	3301      	adds	r3, #1
   1443e:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   14440:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_SCAN_IND:
        STATS_INC(ble_ll_stats, rx_scan_ind);
   14442:	4a02      	ldr	r2, [pc, #8]	; (1444c <ble_ll_count_rx_adv_pdus+0x6c>)
   14444:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14446:	3301      	adds	r3, #1
   14448:	6653      	str	r3, [r2, #100]	; 0x64
        break;
    default:
        break;
    }
}
   1444a:	4770      	bx	lr
   1444c:	20001ea8 	.word	0x20001ea8

00014450 <ble_ll_is_valid_addr>:
static int
ble_ll_is_valid_addr(const uint8_t *addr)
{
    int i;

    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   14450:	2300      	movs	r3, #0
   14452:	2b05      	cmp	r3, #5
   14454:	dc03      	bgt.n	1445e <ble_ll_is_valid_addr+0xe>
        if (addr[i]) {
   14456:	5cc2      	ldrb	r2, [r0, r3]
   14458:	b91a      	cbnz	r2, 14462 <ble_ll_is_valid_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1445a:	3301      	adds	r3, #1
   1445c:	e7f9      	b.n	14452 <ble_ll_is_valid_addr+0x2>
            return 1;
        }
    }

    return 0;
   1445e:	2000      	movs	r0, #0
   14460:	4770      	bx	lr
            return 1;
   14462:	2001      	movs	r0, #1
}
   14464:	4770      	bx	lr
	...

00014468 <ble_ll_count_rx_stats>:
 * @param hdr
 * @param len
 */
static void
ble_ll_count_rx_stats(struct ble_mbuf_hdr *hdr, uint16_t len, uint8_t pdu_type)
{
   14468:	b508      	push	{r3, lr}
    uint8_t crcok;
    bool connection_data;

    crcok = BLE_MBUF_HDR_CRC_OK(hdr);
   1446a:	8803      	ldrh	r3, [r0, #0]

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_CONNECTION);
   1446c:	f003 0007 	and.w	r0, r3, #7
    if (!connection_data) {
        connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_DTM);
    }
#endif

    if (crcok) {
   14470:	f013 0f80 	tst.w	r3, #128	; 0x80
   14474:	d014      	beq.n	144a0 <ble_ll_count_rx_stats+0x38>
        if (connection_data) {
   14476:	2804      	cmp	r0, #4
   14478:	d107      	bne.n	1448a <ble_ll_count_rx_stats+0x22>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_ok);
   1447a:	4b12      	ldr	r3, [pc, #72]	; (144c4 <ble_ll_count_rx_stats+0x5c>)
   1447c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1447e:	3201      	adds	r2, #1
   14480:	635a      	str	r2, [r3, #52]	; 0x34
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_ok, len);
   14482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   14484:	4411      	add	r1, r2
   14486:	63d9      	str	r1, [r3, #60]	; 0x3c
   14488:	e013      	b.n	144b2 <ble_ll_count_rx_stats+0x4a>
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_ok);
   1448a:	4b0e      	ldr	r3, [pc, #56]	; (144c4 <ble_ll_count_rx_stats+0x5c>)
   1448c:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1448e:	3001      	adds	r0, #1
   14490:	6258      	str	r0, [r3, #36]	; 0x24
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_ok, len);
   14492:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   14494:	4401      	add	r1, r0
   14496:	62d9      	str	r1, [r3, #44]	; 0x2c
            ble_ll_count_rx_adv_pdus(pdu_type);
   14498:	4610      	mov	r0, r2
   1449a:	f7ff ffa1 	bl	143e0 <ble_ll_count_rx_adv_pdus>
   1449e:	e008      	b.n	144b2 <ble_ll_count_rx_stats+0x4a>
        }
    } else {
        if (connection_data) {
   144a0:	2804      	cmp	r0, #4
   144a2:	d007      	beq.n	144b4 <ble_ll_count_rx_stats+0x4c>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_err);
   144a4:	4b07      	ldr	r3, [pc, #28]	; (144c4 <ble_ll_count_rx_stats+0x5c>)
   144a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   144a8:	3201      	adds	r2, #1
   144aa:	629a      	str	r2, [r3, #40]	; 0x28
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_err, len);
   144ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   144ae:	4411      	add	r1, r2
   144b0:	6319      	str	r1, [r3, #48]	; 0x30
        }
    }
}
   144b2:	bd08      	pop	{r3, pc}
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
   144b4:	4b03      	ldr	r3, [pc, #12]	; (144c4 <ble_ll_count_rx_stats+0x5c>)
   144b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   144b8:	3201      	adds	r2, #1
   144ba:	639a      	str	r2, [r3, #56]	; 0x38
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
   144bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   144be:	4411      	add	r1, r2
   144c0:	6419      	str	r1, [r3, #64]	; 0x40
   144c2:	e7f6      	b.n	144b2 <ble_ll_count_rx_stats+0x4a>
   144c4:	20001ea8 	.word	0x20001ea8

000144c8 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   144c8:	b510      	push	{r4, lr}
   144ca:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   144cc:	e002      	b.n	144d4 <ble_ll_flush_pkt_queue+0xc>
        /* Get mbuf pointer from packet header pointer */
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   144ce:	6064      	str	r4, [r4, #4]
        os_mbuf_free_chain(om);
   144d0:	f7f8 ffd0 	bl	d474 <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   144d4:	6823      	ldr	r3, [r4, #0]
   144d6:	b133      	cbz	r3, 144e6 <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   144d8:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   144dc:	685b      	ldr	r3, [r3, #4]
   144de:	6023      	str	r3, [r4, #0]
   144e0:	2b00      	cmp	r3, #0
   144e2:	d1f5      	bne.n	144d0 <ble_ll_flush_pkt_queue+0x8>
   144e4:	e7f3      	b.n	144ce <ble_ll_flush_pkt_queue+0x6>
    }
}
   144e6:	bd10      	pop	{r4, pc}

000144e8 <ble_ll_task>:
{
   144e8:	b508      	push	{r3, lr}
    ble_phy_init();
   144ea:	f007 fa61 	bl	1b9b0 <ble_phy_init>
    ble_phy_txpwr_set(g_ble_ll_tx_power);
   144ee:	4b0c      	ldr	r3, [pc, #48]	; (14520 <ble_ll_task+0x38>)
   144f0:	f993 0000 	ldrsb.w	r0, [r3]
   144f4:	f007 fb8e 	bl	1bc14 <ble_phy_txpwr_set>
    ble_ll_hci_send_noop();
   144f8:	f005 fa48 	bl	1998c <ble_ll_hci_send_noop>
ble_npl_eventq_get(struct ble_npl_eventq *evq, ble_npl_time_t tmo)
{
    struct os_event *ev;

    if (tmo == BLE_NPL_TIME_FOREVER) {
        ev = os_eventq_get(&evq->evq);
   144fc:	4809      	ldr	r0, [pc, #36]	; (14524 <ble_ll_task+0x3c>)
   144fe:	f7f8 fec9 	bl	d294 <os_eventq_get>
        BLE_LL_ASSERT(ev);
   14502:	b110      	cbz	r0, 1450a <ble_ll_task+0x22>
}

static inline void
ble_npl_event_run(struct ble_npl_event *ev)
{
    ev->ev.ev_cb(&ev->ev);
   14504:	6842      	ldr	r2, [r0, #4]
   14506:	4790      	blx	r2
}
   14508:	e7f8      	b.n	144fc <ble_ll_task+0x14>
   1450a:	f7f7 fe47 	bl	c19c <hal_debugger_connected>
   1450e:	b100      	cbz	r0, 14512 <ble_ll_task+0x2a>
   14510:	be01      	bkpt	0x0001
   14512:	2300      	movs	r3, #0
   14514:	461a      	mov	r2, r3
   14516:	4619      	mov	r1, r3
   14518:	4618      	mov	r0, r3
   1451a:	f7f8 fb43 	bl	cba4 <__assert_func>
   1451e:	bf00      	nop
   14520:	20002218 	.word	0x20002218
   14524:	20001fc8 	.word	0x20001fc8

00014528 <ble_ll_validate_task>:
    ble_hdr->txinfo.hdr_byte = hdr;
}

static void
ble_ll_validate_task(void)
{
   14528:	b500      	push	{lr}
   1452a:	b08f      	sub	sp, #60	; 0x3c
#ifdef MYNEWT
#ifndef NDEBUG
    struct os_task_info oti;

    os_task_info_get(&g_ble_ll_task, &oti);
   1452c:	4669      	mov	r1, sp
   1452e:	480b      	ldr	r0, [pc, #44]	; (1455c <ble_ll_validate_task+0x34>)
   14530:	f7f9 fec2 	bl	e2b8 <os_task_info_get>

    BLE_LL_ASSERT(oti.oti_stkusage < oti.oti_stksize);
   14534:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   14538:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1453c:	429a      	cmp	r2, r3
   1453e:	d202      	bcs.n	14546 <ble_ll_validate_task+0x1e>
#endif
#endif
}
   14540:	b00f      	add	sp, #60	; 0x3c
   14542:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(oti.oti_stkusage < oti.oti_stksize);
   14546:	f7f7 fe29 	bl	c19c <hal_debugger_connected>
   1454a:	b100      	cbz	r0, 1454e <ble_ll_validate_task+0x26>
   1454c:	be01      	bkpt	0x0001
   1454e:	2300      	movs	r3, #0
   14550:	461a      	mov	r2, r3
   14552:	4619      	mov	r1, r3
   14554:	4618      	mov	r0, r3
   14556:	f7f8 fb25 	bl	cba4 <__assert_func>
   1455a:	bf00      	nop
   1455c:	200021c8 	.word	0x200021c8

00014560 <ble_ll_hw_err_timer_cb>:
{
   14560:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   14562:	2001      	movs	r0, #1
   14564:	f005 fbe3 	bl	19d2e <ble_ll_hci_ev_hw_err>
   14568:	b900      	cbnz	r0, 1456c <ble_ll_hw_err_timer_cb+0xc>
}
   1456a:	bd08      	pop	{r3, pc}
}

static inline ble_npl_error_t
ble_npl_callout_reset(struct ble_npl_callout *co, ble_npl_time_t ticks)
{
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1456c:	2106      	movs	r1, #6
   1456e:	4802      	ldr	r0, [pc, #8]	; (14578 <ble_ll_hw_err_timer_cb+0x18>)
   14570:	f7f8 fcf2 	bl	cf58 <os_callout_reset>
   14574:	e7f9      	b.n	1456a <ble_ll_hw_err_timer_cb+0xa>
   14576:	bf00      	nop
   14578:	20002028 	.word	0x20002028

0001457c <ble_ll_event_comp_pkts>:
{
   1457c:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1457e:	2000      	movs	r0, #0
   14580:	f003 f99c 	bl	178bc <ble_ll_conn_num_comp_pkts_event_send>
}
   14584:	bd08      	pop	{r3, pc}

00014586 <ble_ll_event_dbuf_overflow>:
{
   14586:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   14588:	f005 fbe9 	bl	19d5e <ble_ll_hci_ev_databuf_overflow>
}
   1458c:	bd08      	pop	{r3, pc}
	...

00014590 <ble_ll_tx_pkt_in>:
{
   14590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   14592:	e00a      	b.n	145aa <ble_ll_tx_pkt_in+0x1a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   14594:	4613      	mov	r3, r2
   14596:	3248      	adds	r2, #72	; 0x48
   14598:	64da      	str	r2, [r3, #76]	; 0x4c
   1459a:	e013      	b.n	145c4 <ble_ll_tx_pkt_in+0x34>
            STATS_INC(ble_ll_stats, bad_acl_hdr);
   1459c:	4a1a      	ldr	r2, [pc, #104]	; (14608 <ble_ll_tx_pkt_in+0x78>)
   1459e:	69d3      	ldr	r3, [r2, #28]
   145a0:	3301      	adds	r3, #1
   145a2:	61d3      	str	r3, [r2, #28]
            os_mbuf_free_chain(om);
   145a4:	4638      	mov	r0, r7
   145a6:	f7f8 ff65 	bl	d474 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   145aa:	4b18      	ldr	r3, [pc, #96]	; (1460c <ble_ll_tx_pkt_in+0x7c>)
   145ac:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   145ae:	b354      	cbz	r4, 14606 <ble_ll_tx_pkt_in+0x76>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   145b0:	f1a4 0710 	sub.w	r7, r4, #16
        OS_ENTER_CRITICAL(sr);
   145b4:	f7f9 ffc8 	bl	e548 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   145b8:	4a14      	ldr	r2, [pc, #80]	; (1460c <ble_ll_tx_pkt_in+0x7c>)
   145ba:	6c93      	ldr	r3, [r2, #72]	; 0x48
   145bc:	685b      	ldr	r3, [r3, #4]
   145be:	6493      	str	r3, [r2, #72]	; 0x48
   145c0:	2b00      	cmp	r3, #0
   145c2:	d0e7      	beq.n	14594 <ble_ll_tx_pkt_in+0x4>
        OS_EXIT_CRITICAL(sr);
   145c4:	f7f9 ffc6 	bl	e554 <os_arch_restore_sr>
        handle = get_le16(om->om_data);
   145c8:	f854 0c10 	ldr.w	r0, [r4, #-16]
   145cc:	f016 fb05 	bl	2abda <get_le16>
   145d0:	4606      	mov	r6, r0
        length = get_le16(om->om_data + 2);
   145d2:	f854 0c10 	ldr.w	r0, [r4, #-16]
   145d6:	3002      	adds	r0, #2
   145d8:	f016 faff 	bl	2abda <get_le16>
   145dc:	4605      	mov	r5, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   145de:	2104      	movs	r1, #4
   145e0:	4638      	mov	r0, r7
   145e2:	f7f9 f81e 	bl	d622 <os_mbuf_adj>
        pb = handle & 0x3000;
   145e6:	f406 5240 	and.w	r2, r6, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   145ea:	8823      	ldrh	r3, [r4, #0]
   145ec:	42ab      	cmp	r3, r5
   145ee:	d1d5      	bne.n	1459c <ble_ll_tx_pkt_in+0xc>
   145f0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   145f4:	d8d2      	bhi.n	1459c <ble_ll_tx_pkt_in+0xc>
   145f6:	2d00      	cmp	r5, #0
   145f8:	d0d0      	beq.n	1459c <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   145fa:	462a      	mov	r2, r5
   145fc:	4631      	mov	r1, r6
   145fe:	4638      	mov	r0, r7
   14600:	f002 fe7c 	bl	172fc <ble_ll_conn_tx_pkt_in>
   14604:	e7d1      	b.n	145aa <ble_ll_tx_pkt_in+0x1a>
}
   14606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14608:	20001ea8 	.word	0x20001ea8
   1460c:	20001fb8 	.word	0x20001fb8

00014610 <ble_ll_event_tx_pkt>:
{
   14610:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   14612:	f7ff ffbd 	bl	14590 <ble_ll_tx_pkt_in>
}
   14616:	bd08      	pop	{r3, pc}

00014618 <ble_ll_rx_pkt_in>:
{
   14618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1461c:	e00c      	b.n	14638 <ble_ll_rx_pkt_in+0x20>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1461e:	4613      	mov	r3, r2
   14620:	3230      	adds	r2, #48	; 0x30
   14622:	635a      	str	r2, [r3, #52]	; 0x34
   14624:	e015      	b.n	14652 <ble_ll_rx_pkt_in+0x3a>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   14626:	463a      	mov	r2, r7
   14628:	4641      	mov	r1, r8
   1462a:	4628      	mov	r0, r5
   1462c:	f001 fa6e 	bl	15b0c <ble_ll_adv_rx_pkt_in>
        if (m) {
   14630:	b116      	cbz	r6, 14638 <ble_ll_rx_pkt_in+0x20>
            os_mbuf_free_chain(m);
   14632:	4630      	mov	r0, r6
   14634:	f7f8 ff1e 	bl	d474 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   14638:	4b17      	ldr	r3, [pc, #92]	; (14698 <ble_ll_rx_pkt_in+0x80>)
   1463a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1463c:	b34c      	cbz	r4, 14692 <ble_ll_rx_pkt_in+0x7a>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1463e:	f1a4 0610 	sub.w	r6, r4, #16
        OS_ENTER_CRITICAL(sr);
   14642:	f7f9 ff81 	bl	e548 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   14646:	4a14      	ldr	r2, [pc, #80]	; (14698 <ble_ll_rx_pkt_in+0x80>)
   14648:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1464a:	685b      	ldr	r3, [r3, #4]
   1464c:	6313      	str	r3, [r2, #48]	; 0x30
   1464e:	2b00      	cmp	r3, #0
   14650:	d0e5      	beq.n	1461e <ble_ll_rx_pkt_in+0x6>
        OS_EXIT_CRITICAL(sr);
   14652:	f7f9 ff7f 	bl	e554 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   14656:	f104 0708 	add.w	r7, r4, #8
        rxbuf = m->om_data;
   1465a:	f854 8c10 	ldr.w	r8, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1465e:	f898 5000 	ldrb.w	r5, [r8]
   14662:	f005 050f 	and.w	r5, r5, #15
        ble_ll_count_rx_stats(ble_hdr, pkthdr->omp_len, pdu_type);
   14666:	462a      	mov	r2, r5
   14668:	8821      	ldrh	r1, [r4, #0]
   1466a:	4638      	mov	r0, r7
   1466c:	f7ff fefc 	bl	14468 <ble_ll_count_rx_stats>
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   14670:	7a23      	ldrb	r3, [r4, #8]
   14672:	f003 0307 	and.w	r3, r3, #7
   14676:	2b01      	cmp	r3, #1
   14678:	d0d5      	beq.n	14626 <ble_ll_rx_pkt_in+0xe>
   1467a:	2b04      	cmp	r3, #4
   1467c:	d104      	bne.n	14688 <ble_ll_rx_pkt_in+0x70>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1467e:	4639      	mov	r1, r7
   14680:	4630      	mov	r0, r6
   14682:	f002 fbe7 	bl	16e54 <ble_ll_conn_rx_data_pdu>
        if (m) {
   14686:	e7d7      	b.n	14638 <ble_ll_rx_pkt_in+0x20>
            STATS_INC(ble_ll_stats, bad_ll_state);
   14688:	4a04      	ldr	r2, [pc, #16]	; (1469c <ble_ll_rx_pkt_in+0x84>)
   1468a:	6993      	ldr	r3, [r2, #24]
   1468c:	3301      	adds	r3, #1
   1468e:	6193      	str	r3, [r2, #24]
            break;
   14690:	e7ce      	b.n	14630 <ble_ll_rx_pkt_in+0x18>
}
   14692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14696:	bf00      	nop
   14698:	20001fb8 	.word	0x20001fb8
   1469c:	20001ea8 	.word	0x20001ea8

000146a0 <ble_ll_event_rx_pkt>:
{
   146a0:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   146a2:	f7ff ffb9 	bl	14618 <ble_ll_rx_pkt_in>
}
   146a6:	bd08      	pop	{r3, pc}

000146a8 <ble_ll_rxpdu_alloc>:
{
   146a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146aa:	4604      	mov	r4, r0
    om_ret = os_msys_get_pkthdr(len, sizeof(struct ble_mbuf_hdr));
   146ac:	2110      	movs	r1, #16
   146ae:	f7f9 fb88 	bl	ddc2 <os_msys_get_pkthdr>
    if (!om_ret) {
   146b2:	b1e8      	cbz	r0, 146f0 <ble_ll_rxpdu_alloc+0x48>
   146b4:	4607      	mov	r7, r0
    pkthdr->omp_len = len;
   146b6:	8204      	strh	r4, [r0, #16]
    databuf_len = om_ret->om_omp->omp_databuf_len & ~3;
   146b8:	6883      	ldr	r3, [r0, #8]
   146ba:	881b      	ldrh	r3, [r3, #0]
   146bc:	f023 0303 	bic.w	r3, r3, #3
   146c0:	b29b      	uxth	r3, r3
    om_ret->om_data += 4;
   146c2:	6802      	ldr	r2, [r0, #0]
   146c4:	3204      	adds	r2, #4
   146c6:	6002      	str	r2, [r0, #0]
    rem_len -= databuf_len - om_ret->om_pkthdr_len - 4;
   146c8:	461e      	mov	r6, r3
   146ca:	7942      	ldrb	r2, [r0, #5]
   146cc:	1a9b      	subs	r3, r3, r2
   146ce:	3b04      	subs	r3, #4
   146d0:	1ae4      	subs	r4, r4, r3
    om = om_ret;
   146d2:	4605      	mov	r5, r0
    while (rem_len > 0) {
   146d4:	2c00      	cmp	r4, #0
   146d6:	dd10      	ble.n	146fa <ble_ll_rxpdu_alloc+0x52>
        om_next = os_msys_get(rem_len, 0);
   146d8:	2100      	movs	r1, #0
   146da:	b2a0      	uxth	r0, r4
   146dc:	f7f9 fb64 	bl	dda8 <os_msys_get>
        if (!om_next) {
   146e0:	b118      	cbz	r0, 146ea <ble_ll_rxpdu_alloc+0x42>
        SLIST_NEXT(om, om_next) = om_next;
   146e2:	60e8      	str	r0, [r5, #12]
        rem_len -= databuf_len;
   146e4:	1ba4      	subs	r4, r4, r6
        om = om_next;
   146e6:	4605      	mov	r5, r0
   146e8:	e7f4      	b.n	146d4 <ble_ll_rxpdu_alloc+0x2c>
            os_mbuf_free_chain(om_ret);
   146ea:	4638      	mov	r0, r7
   146ec:	f7f8 fec2 	bl	d474 <os_mbuf_free_chain>
    STATS_INC(ble_ll_stats, no_bufs);
   146f0:	4a03      	ldr	r2, [pc, #12]	; (14700 <ble_ll_rxpdu_alloc+0x58>)
   146f2:	6a13      	ldr	r3, [r2, #32]
   146f4:	3301      	adds	r3, #1
   146f6:	6213      	str	r3, [r2, #32]
    return NULL;
   146f8:	2700      	movs	r7, #0
}
   146fa:	4638      	mov	r0, r7
   146fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   146fe:	bf00      	nop
   14700:	20001ea8 	.word	0x20001ea8

00014704 <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   14704:	381b      	subs	r0, #27
   14706:	b280      	uxth	r0, r0
   14708:	28e0      	cmp	r0, #224	; 0xe0
   1470a:	d901      	bls.n	14710 <ble_ll_chk_txrx_octets+0xc>
        rc = 0;
   1470c:	2000      	movs	r0, #0
   1470e:	4770      	bx	lr
        rc = 1;
   14710:	2001      	movs	r0, #1
}
   14712:	4770      	bx	lr

00014714 <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   14714:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   14718:	b280      	uxth	r0, r0
   1471a:	f244 1348 	movw	r3, #16712	; 0x4148
   1471e:	4298      	cmp	r0, r3
   14720:	d901      	bls.n	14726 <ble_ll_chk_txrx_time+0x12>
        rc = 0;
   14722:	2000      	movs	r0, #0
   14724:	4770      	bx	lr
        rc = 1;
   14726:	2001      	movs	r0, #1
}
   14728:	4770      	bx	lr

0001472a <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1472a:	b131      	cbz	r1, 1473a <ble_ll_is_rpa+0x10>
   1472c:	7943      	ldrb	r3, [r0, #5]
   1472e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14732:	2b40      	cmp	r3, #64	; 0x40
   14734:	d003      	beq.n	1473e <ble_ll_is_rpa+0x14>
        rc = 0;
   14736:	2000      	movs	r0, #0
   14738:	4770      	bx	lr
   1473a:	2000      	movs	r0, #0
   1473c:	4770      	bx	lr
        rc = 1;
   1473e:	2001      	movs	r0, #1
}
   14740:	4770      	bx	lr
	...

00014744 <ble_ll_is_valid_own_addr_type>:
{
   14744:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   14746:	2803      	cmp	r0, #3
   14748:	d80b      	bhi.n	14762 <ble_ll_is_valid_own_addr_type+0x1e>
   1474a:	e8df f000 	tbb	[pc, r0]
   1474e:	0602      	.short	0x0602
   14750:	0602      	.short	0x0602
        rc = ble_ll_is_valid_addr(g_dev_addr);
   14752:	4805      	ldr	r0, [pc, #20]	; (14768 <ble_ll_is_valid_own_addr_type+0x24>)
   14754:	f7ff fe7c 	bl	14450 <ble_ll_is_valid_addr>
}
   14758:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_addr(random_addr);
   1475a:	4608      	mov	r0, r1
   1475c:	f7ff fe78 	bl	14450 <ble_ll_is_valid_addr>
        break;
   14760:	e7fa      	b.n	14758 <ble_ll_is_valid_own_addr_type+0x14>
{
   14762:	2000      	movs	r0, #0
    return rc;
   14764:	e7f8      	b.n	14758 <ble_ll_is_valid_own_addr_type+0x14>
   14766:	bf00      	nop
   14768:	2000221c 	.word	0x2000221c

0001476c <ble_ll_set_random_addr>:
    if (len < sizeof(*cmd)) {
   1476c:	2905      	cmp	r1, #5
   1476e:	d90f      	bls.n	14790 <ble_ll_set_random_addr+0x24>
{
   14770:	b510      	push	{r4, lr}
   14772:	4604      	mov	r4, r0
    if (!hci_adv_ext && ble_ll_adv_enabled()) {
   14774:	b132      	cbz	r2, 14784 <ble_ll_set_random_addr+0x18>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   14776:	4b07      	ldr	r3, [pc, #28]	; (14794 <ble_ll_set_random_addr+0x28>)
   14778:	6820      	ldr	r0, [r4, #0]
   1477a:	6018      	str	r0, [r3, #0]
   1477c:	88a2      	ldrh	r2, [r4, #4]
   1477e:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   14780:	2000      	movs	r0, #0
}
   14782:	bd10      	pop	{r4, pc}
    if (!hci_adv_ext && ble_ll_adv_enabled()) {
   14784:	f001 fa70 	bl	15c68 <ble_ll_adv_enabled>
   14788:	2800      	cmp	r0, #0
   1478a:	d0f4      	beq.n	14776 <ble_ll_set_random_addr+0xa>
        return BLE_ERR_CMD_DISALLOWED;
   1478c:	200c      	movs	r0, #12
   1478e:	e7f8      	b.n	14782 <ble_ll_set_random_addr+0x16>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14790:	2012      	movs	r0, #18
}
   14792:	4770      	bx	lr
   14794:	20002224 	.word	0x20002224

00014798 <ble_ll_wfr_timer_exp>:
{
   14798:	b538      	push	{r3, r4, r5, lr}
    rx_start = ble_phy_rx_started();
   1479a:	f007 fd33 	bl	1c204 <ble_phy_rx_started>
   1479e:	4604      	mov	r4, r0
    lls = g_ble_ll_data.ll_state;
   147a0:	4b07      	ldr	r3, [pc, #28]	; (147c0 <ble_ll_wfr_timer_exp+0x28>)
   147a2:	7a1d      	ldrb	r5, [r3, #8]
    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_WFR_EXP, lls, ble_phy_xcvr_state_get(),
   147a4:	f007 fd34 	bl	1c210 <ble_phy_xcvr_state_get>
    if (!rx_start) {
   147a8:	b91c      	cbnz	r4, 147b2 <ble_ll_wfr_timer_exp+0x1a>
        switch (lls) {
   147aa:	2d01      	cmp	r5, #1
   147ac:	d002      	beq.n	147b4 <ble_ll_wfr_timer_exp+0x1c>
   147ae:	2d04      	cmp	r5, #4
   147b0:	d003      	beq.n	147ba <ble_ll_wfr_timer_exp+0x22>
}
   147b2:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_adv_wfr_timer_exp();
   147b4:	f001 fa34 	bl	15c20 <ble_ll_adv_wfr_timer_exp>
            break;
   147b8:	e7fb      	b.n	147b2 <ble_ll_wfr_timer_exp+0x1a>
            ble_ll_conn_wfr_timer_exp();
   147ba:	f002 f8d7 	bl	1696c <ble_ll_conn_wfr_timer_exp>
}
   147be:	e7f8      	b.n	147b2 <ble_ll_wfr_timer_exp+0x1a>
   147c0:	20001fb8 	.word	0x20001fb8

000147c4 <ble_ll_rx_pdu_in>:
{
   147c4:	b508      	push	{r3, lr}
    pkthdr = OS_MBUF_PKTHDR(rxpdu);
   147c6:	f100 0110 	add.w	r1, r0, #16
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_rx_pkt_q, pkthdr, omp_next);
   147ca:	2300      	movs	r3, #0
   147cc:	f840 3f14 	str.w	r3, [r0, #20]!
   147d0:	4b05      	ldr	r3, [pc, #20]	; (147e8 <ble_ll_rx_pdu_in+0x24>)
   147d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   147d4:	6011      	str	r1, [r2, #0]
   147d6:	6358      	str	r0, [r3, #52]	; 0x34
    os_eventq_put(&evq->evq, &ev->ev);
   147d8:	f103 0120 	add.w	r1, r3, #32
   147dc:	f103 0010 	add.w	r0, r3, #16
   147e0:	f7f8 fd13 	bl	d20a <os_eventq_put>
}
   147e4:	bd08      	pop	{r3, pc}
   147e6:	bf00      	nop
   147e8:	20001fb8 	.word	0x20001fb8

000147ec <ble_ll_acl_data_in>:
{
   147ec:	b538      	push	{r3, r4, r5, lr}
   147ee:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   147f0:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   147f4:	f7f9 fea8 	bl	e548 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   147f8:	4623      	mov	r3, r4
   147fa:	2200      	movs	r2, #0
   147fc:	f843 2f14 	str.w	r2, [r3, #20]!
   14800:	4c06      	ldr	r4, [pc, #24]	; (1481c <ble_ll_acl_data_in+0x30>)
   14802:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   14804:	6015      	str	r5, [r2, #0]
   14806:	64e3      	str	r3, [r4, #76]	; 0x4c
    OS_EXIT_CRITICAL(sr);
   14808:	f7f9 fea4 	bl	e554 <os_arch_restore_sr>
   1480c:	f104 0138 	add.w	r1, r4, #56	; 0x38
   14810:	f104 0010 	add.w	r0, r4, #16
   14814:	f7f8 fcf9 	bl	d20a <os_eventq_put>
}
   14818:	bd38      	pop	{r3, r4, r5, pc}
   1481a:	bf00      	nop
   1481c:	20001fb8 	.word	0x20001fb8

00014820 <ble_ll_rx_start>:
{
   14820:	b510      	push	{r4, lr}
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   14822:	7800      	ldrb	r0, [r0, #0]
    ble_ll_trace_u32x2(BLE_LL_TRACE_ID_RX_START, g_ble_ll_data.ll_state,
   14824:	4b0c      	ldr	r3, [pc, #48]	; (14858 <ble_ll_rx_start+0x38>)
   14826:	7a1b      	ldrb	r3, [r3, #8]
    switch (g_ble_ll_data.ll_state) {
   14828:	2b01      	cmp	r3, #1
   1482a:	d009      	beq.n	14840 <ble_ll_rx_start+0x20>
   1482c:	4614      	mov	r4, r2
   1482e:	2b04      	cmp	r3, #4
   14830:	d10b      	bne.n	1484a <ble_ll_rx_start+0x2a>
        rc = ble_ll_conn_rx_isr_start(rxhdr, ble_phy_access_addr_get());
   14832:	f007 fce1 	bl	1c1f8 <ble_phy_access_addr_get>
   14836:	4601      	mov	r1, r0
   14838:	4620      	mov	r0, r4
   1483a:	f002 fad3 	bl	16de4 <ble_ll_conn_rx_isr_start>
}
   1483e:	bd10      	pop	{r4, pc}
   14840:	f000 000f 	and.w	r0, r0, #15
        rc = ble_ll_adv_rx_isr_start(pdu_type);
   14844:	f001 f984 	bl	15b50 <ble_ll_adv_rx_isr_start>
        break;
   14848:	e7f9      	b.n	1483e <ble_ll_rx_start+0x1e>
        STATS_INC(ble_ll_stats, bad_ll_state);
   1484a:	4a04      	ldr	r2, [pc, #16]	; (1485c <ble_ll_rx_start+0x3c>)
   1484c:	6993      	ldr	r3, [r2, #24]
   1484e:	3301      	adds	r3, #1
   14850:	6193      	str	r3, [r2, #24]
        rc = -1;
   14852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   14856:	e7f2      	b.n	1483e <ble_ll_rx_start+0x1e>
   14858:	20001fb8 	.word	0x20001fb8
   1485c:	20001ea8 	.word	0x20001ea8

00014860 <ble_ll_rx_end>:
{
   14860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14862:	4605      	mov	r5, r0
    crcok = BLE_MBUF_HDR_CRC_OK(rxhdr);
   14864:	880b      	ldrh	r3, [r1, #0]
   14866:	f003 0280 	and.w	r2, r3, #128	; 0x80
   1486a:	f3c3 16c0 	ubfx	r6, r3, #7, #1
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1486e:	7804      	ldrb	r4, [r0, #0]
    len = rxbuf[1];
   14870:	7840      	ldrb	r0, [r0, #1]
    if (BLE_MBUF_HDR_RX_STATE(rxhdr) == BLE_LL_STATE_CONNECTION) {
   14872:	f003 0307 	and.w	r3, r3, #7
   14876:	2b04      	cmp	r3, #4
   14878:	d00b      	beq.n	14892 <ble_ll_rx_end+0x32>
   1487a:	f004 040f 	and.w	r4, r4, #15
    if (crcok) {
   1487e:	b30a      	cbz	r2, 148c4 <ble_ll_rx_end+0x64>
        switch (pdu_type) {
   14880:	2c08      	cmp	r4, #8
   14882:	d80d      	bhi.n	148a0 <ble_ll_rx_end+0x40>
   14884:	e8df f004 	tbb	[pc, r4]
   14888:	0a140a14 	.word	0x0a140a14
   1488c:	32141a14 	.word	0x32141a14
   14890:	32          	.byte	0x32
   14891:	00          	.byte	0x00
        rc = ble_ll_conn_rx_isr_end(rxbuf, rxhdr);
   14892:	4628      	mov	r0, r5
   14894:	f002 fbae 	bl	16ff4 <ble_ll_conn_rx_isr_end>
   14898:	4604      	mov	r4, r0
        return rc;
   1489a:	e025      	b.n	148e8 <ble_ll_rx_end+0x88>
            if (len != BLE_SCAN_REQ_LEN) {
   1489c:	280c      	cmp	r0, #12
   1489e:	d005      	beq.n	148ac <ble_ll_rx_end+0x4c>
            STATS_INC(ble_ll_stats, rx_adv_malformed_pkts);
   148a0:	4a1c      	ldr	r2, [pc, #112]	; (14914 <ble_ll_rx_end+0xb4>)
   148a2:	6c53      	ldr	r3, [r2, #68]	; 0x44
   148a4:	3301      	adds	r3, #1
   148a6:	6453      	str	r3, [r2, #68]	; 0x44
   148a8:	2201      	movs	r2, #1
   148aa:	e00c      	b.n	148c6 <ble_ll_rx_end+0x66>
    badpkt = 0;
   148ac:	2200      	movs	r2, #0
   148ae:	e00a      	b.n	148c6 <ble_ll_rx_end+0x66>
            if ((len < BLE_DEV_ADDR_LEN) || (len > BLE_ADV_SCAN_IND_MAX_LEN)) {
   148b0:	1f83      	subs	r3, r0, #6
   148b2:	b2db      	uxtb	r3, r3
   148b4:	2b1f      	cmp	r3, #31
   148b6:	d8f3      	bhi.n	148a0 <ble_ll_rx_end+0x40>
    badpkt = 0;
   148b8:	2200      	movs	r2, #0
   148ba:	e004      	b.n	148c6 <ble_ll_rx_end+0x66>
            if (len != BLE_CONNECT_REQ_LEN) {
   148bc:	2822      	cmp	r0, #34	; 0x22
   148be:	d1ef      	bne.n	148a0 <ble_ll_rx_end+0x40>
    badpkt = 0;
   148c0:	2200      	movs	r2, #0
   148c2:	e000      	b.n	148c6 <ble_ll_rx_end+0x66>
   148c4:	2200      	movs	r2, #0
    switch (BLE_MBUF_HDR_RX_STATE(rxhdr)) {
   148c6:	780b      	ldrb	r3, [r1, #0]
   148c8:	f003 0307 	and.w	r3, r3, #7
   148cc:	2b01      	cmp	r3, #1
   148ce:	d11a      	bne.n	14906 <ble_ll_rx_end+0xa6>
        if (!badpkt) {
   148d0:	b172      	cbz	r2, 148f0 <ble_ll_rx_end+0x90>
    rxpdu = NULL;
   148d2:	2700      	movs	r7, #0
        rc = ble_ll_adv_rx_isr_end(pdu_type, rxpdu, crcok);
   148d4:	4632      	mov	r2, r6
   148d6:	4639      	mov	r1, r7
   148d8:	4620      	mov	r0, r4
   148da:	f001 f8f1 	bl	15ac0 <ble_ll_adv_rx_isr_end>
   148de:	4604      	mov	r4, r0
    if (rxpdu) {
   148e0:	b117      	cbz	r7, 148e8 <ble_ll_rx_end+0x88>
        ble_ll_rx_pdu_in(rxpdu);
   148e2:	4638      	mov	r0, r7
   148e4:	f7ff ff6e 	bl	147c4 <ble_ll_rx_pdu_in>
}
   148e8:	4620      	mov	r0, r4
   148ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (crcok) {
   148ec:	2200      	movs	r2, #0
   148ee:	e7ea      	b.n	148c6 <ble_ll_rx_end+0x66>
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   148f0:	3002      	adds	r0, #2
   148f2:	f7ff fed9 	bl	146a8 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   148f6:	4607      	mov	r7, r0
   148f8:	2800      	cmp	r0, #0
   148fa:	d0eb      	beq.n	148d4 <ble_ll_rx_end+0x74>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   148fc:	4601      	mov	r1, r0
   148fe:	4628      	mov	r0, r5
   14900:	f006 ff68 	bl	1b7d4 <ble_phy_rxpdu_copy>
   14904:	e7e6      	b.n	148d4 <ble_ll_rx_end+0x74>
        STATS_INC(ble_ll_stats, bad_ll_state);
   14906:	4a03      	ldr	r2, [pc, #12]	; (14914 <ble_ll_rx_end+0xb4>)
   14908:	6993      	ldr	r3, [r2, #24]
   1490a:	3301      	adds	r3, #1
   1490c:	6193      	str	r3, [r2, #24]
        rc = -1;
   1490e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14912:	e7e9      	b.n	148e8 <ble_ll_rx_end+0x88>
   14914:	20001ea8 	.word	0x20001ea8

00014918 <ble_ll_tx_mbuf_pducb>:
{
   14918:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   1491a:	b159      	cbz	r1, 14934 <ble_ll_tx_mbuf_pducb+0x1c>
   1491c:	4603      	mov	r3, r0
   1491e:	4615      	mov	r5, r2
   14920:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   14922:	8b8a      	ldrh	r2, [r1, #28]
   14924:	8b49      	ldrh	r1, [r1, #26]
   14926:	4620      	mov	r0, r4
   14928:	f7f8 fe4e 	bl	d5c8 <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   1492c:	7e63      	ldrb	r3, [r4, #25]
   1492e:	702b      	strb	r3, [r5, #0]
}
   14930:	7f20      	ldrb	r0, [r4, #28]
   14932:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   14934:	f7f7 fc32 	bl	c19c <hal_debugger_connected>
   14938:	b100      	cbz	r0, 1493c <ble_ll_tx_mbuf_pducb+0x24>
   1493a:	be01      	bkpt	0x0001
   1493c:	2300      	movs	r3, #0
   1493e:	461a      	mov	r2, r3
   14940:	4619      	mov	r1, r3
   14942:	4618      	mov	r0, r3
   14944:	f7f8 f92e 	bl	cba4 <__assert_func>

00014948 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   14948:	4b01      	ldr	r3, [pc, #4]	; (14950 <ble_ll_state_set+0x8>)
   1494a:	7218      	strb	r0, [r3, #8]
}
   1494c:	4770      	bx	lr
   1494e:	bf00      	nop
   14950:	20001fb8 	.word	0x20001fb8

00014954 <ble_ll_state_get>:
}
   14954:	4b01      	ldr	r3, [pc, #4]	; (1495c <ble_ll_state_get+0x8>)
   14956:	7a18      	ldrb	r0, [r3, #8]
   14958:	4770      	bx	lr
   1495a:	bf00      	nop
   1495c:	20001fb8 	.word	0x20001fb8

00014960 <ble_ll_event_send>:
{
   14960:	b508      	push	{r3, lr}
   14962:	4601      	mov	r1, r0
   14964:	4801      	ldr	r0, [pc, #4]	; (1496c <ble_ll_event_send+0xc>)
   14966:	f7f8 fc50 	bl	d20a <os_eventq_put>
}
   1496a:	bd08      	pop	{r3, pc}
   1496c:	20001fc8 	.word	0x20001fc8

00014970 <ble_ll_read_supp_states>:
}
   14970:	a101      	add	r1, pc, #4	; (adr r1, 14978 <ble_ll_read_supp_states+0x8>)
   14972:	e9d1 0100 	ldrd	r0, r1, [r1]
   14976:	4770      	bx	lr
   14978:	2030008f 	.word	0x2030008f
   1497c:	000001c0 	.word	0x000001c0

00014980 <ble_ll_read_supp_features>:
}
   14980:	4b01      	ldr	r3, [pc, #4]	; (14988 <ble_ll_read_supp_features+0x8>)
   14982:	e9d3 0100 	ldrd	r0, r1, [r3]
   14986:	4770      	bx	lr
   14988:	20001fb8 	.word	0x20001fb8

0001498c <ble_ll_reset>:
 * @return int The ble error code to place in the command complete event that
 * is returned when this command is issued.
 */
int
ble_ll_reset(void)
{
   1498c:	b510      	push	{r4, lr}
    uint8_t phy_mask;
    int rc;
    os_sr_t sr;

    /* do sanity check on LL task stack */
    ble_ll_validate_task();
   1498e:	f7ff fdcb 	bl	14528 <ble_ll_validate_task>

    OS_ENTER_CRITICAL(sr);
   14992:	f7f9 fdd9 	bl	e548 <os_arch_save_sr>
   14996:	4604      	mov	r4, r0
    ble_phy_disable();
   14998:	f007 f976 	bl	1bc88 <ble_phy_disable>
    ble_ll_sched_stop();
   1499c:	f006 fac8 	bl	1af30 <ble_ll_sched_stop>
#if MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    ble_ll_scan_reset();
#endif
    ble_ll_rfmgmt_reset();
   149a0:	f005 ff1a 	bl	1a7d8 <ble_ll_rfmgmt_reset>
    OS_EXIT_CRITICAL(sr);
   149a4:	4620      	mov	r0, r4
   149a6:	f7f9 fdd5 	bl	e554 <os_arch_restore_sr>

#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    /* Stop any advertising */
    ble_ll_adv_reset();
   149aa:	f001 f943 	bl	15c34 <ble_ll_adv_reset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PERIODIC_ADV) && MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
    ble_ll_sync_reset();
#endif

    /* FLush all packets from Link layer queues */
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   149ae:	4c13      	ldr	r4, [pc, #76]	; (149fc <ble_ll_reset+0x70>)
   149b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   149b4:	f7ff fd88 	bl	144c8 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   149b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   149bc:	f7ff fd84 	bl	144c8 <ble_ll_flush_pkt_queue>

    /* Reset LL stats */
    STATS_RESET(ble_ll_stats);
   149c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   149c4:	2100      	movs	r1, #0
   149c6:	480e      	ldr	r0, [pc, #56]	; (14a00 <ble_ll_reset+0x74>)
   149c8:	f7fa f81b 	bl	ea02 <memset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    phy_mask |= BLE_PHY_MASK_CODED;
#endif
    phy_mask &= MYNEWT_VAL(BLE_LL_CONN_PHY_DEFAULT_PREF_MASK);
    BLE_LL_ASSERT(phy_mask);
    g_ble_ll_data.ll_pref_tx_phys = phy_mask;
   149cc:	2301      	movs	r3, #1
   149ce:	7323      	strb	r3, [r4, #12]
    g_ble_ll_data.ll_pref_rx_phys = phy_mask;
   149d0:	7363      	strb	r3, [r4, #13]

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    /* Reset connection module */
    ble_ll_conn_module_reset();
   149d2:	f002 fdc3 	bl	1755c <ble_ll_conn_module_reset>
#endif

    /* All this does is re-initialize the event masks so call the hci init */
    ble_ll_hci_init();
   149d6:	f005 f86b 	bl	19ab0 <ble_ll_hci_init>

    /* Reset scheduler */
    ble_ll_sched_init();
   149da:	f006 fab1 	bl	1af40 <ble_ll_sched_init>

    /* Set state to standby */
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   149de:	2000      	movs	r0, #0
   149e0:	f7ff ffb2 	bl	14948 <ble_ll_state_set>

    /* Reset our random address */
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   149e4:	4b07      	ldr	r3, [pc, #28]	; (14a04 <ble_ll_reset+0x78>)
   149e6:	2200      	movs	r2, #0
   149e8:	601a      	str	r2, [r3, #0]
   149ea:	809a      	strh	r2, [r3, #4]

    /* Clear the whitelist */
    ble_ll_whitelist_clear();
   149ec:	f006 fb3e 	bl	1b06c <ble_ll_whitelist_clear>

    /* Reset resolving list */
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    ble_ll_resolv_list_reset();
   149f0:	f005 fe20 	bl	1a634 <ble_ll_resolv_list_reset>
#if MYNEWT_VAL(BLE_LL_LNA)
    ble_ll_plna_lna_init();
#endif

    /* Re-initialize the PHY */
    rc = ble_phy_init();
   149f4:	f006 ffdc 	bl	1b9b0 <ble_phy_init>

    return rc;
}
   149f8:	bd10      	pop	{r4, pc}
   149fa:	bf00      	nop
   149fc:	20001fb8 	.word	0x20001fb8
   14a00:	20001eb4 	.word	0x20001eb4
   14a04:	20002224 	.word	0x20002224

00014a08 <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   14a08:	300a      	adds	r0, #10
#endif

    return usecs;
}
   14a0a:	00c0      	lsls	r0, r0, #3
   14a0c:	4770      	bx	lr
	...

00014a10 <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   14a10:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets = 0;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   14a12:	2903      	cmp	r1, #3
   14a14:	dc0f      	bgt.n	14a36 <ble_ll_pdu_max_tx_octets_get+0x26>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   14a16:	4b19      	ldr	r3, [pc, #100]	; (14a7c <ble_ll_pdu_max_tx_octets_get+0x6c>)
   14a18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   14a1c:	4283      	cmp	r3, r0
   14a1e:	d82a      	bhi.n	14a76 <ble_ll_pdu_max_tx_octets_get+0x66>
        return 27;
    }

    usecs -= header_tx_time;
   14a20:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   14a22:	2901      	cmp	r1, #1
   14a24:	d011      	beq.n	14a4a <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   14a26:	2902      	cmp	r1, #2
   14a28:	d015      	beq.n	14a56 <ble_ll_pdu_max_tx_octets_get+0x46>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   14a2a:	2903      	cmp	r1, #3
   14a2c:	d016      	beq.n	14a5c <ble_ll_pdu_max_tx_octets_get+0x4c>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   14a2e:	b9c1      	cbnz	r1, 14a62 <ble_ll_pdu_max_tx_octets_get+0x52>
        /* S=2 => 2 * 8 = 16 usecs per byte */
        octets = usecs >> 4;
   14a30:	f3c0 100f 	ubfx	r0, r0, #4, #16
   14a34:	e00b      	b.n	14a4e <ble_ll_pdu_max_tx_octets_get+0x3e>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   14a36:	f7f7 fbb1 	bl	c19c <hal_debugger_connected>
   14a3a:	b100      	cbz	r0, 14a3e <ble_ll_pdu_max_tx_octets_get+0x2e>
   14a3c:	be01      	bkpt	0x0001
   14a3e:	2300      	movs	r3, #0
   14a40:	461a      	mov	r2, r3
   14a42:	4619      	mov	r1, r3
   14a44:	4618      	mov	r0, r3
   14a46:	f7f8 f8ad 	bl	cba4 <__assert_func>
        octets = usecs >> 3;
   14a4a:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   14a4e:	281b      	cmp	r0, #27
   14a50:	bf38      	it	cc
   14a52:	201b      	movcc	r0, #27
}
   14a54:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   14a56:	f3c0 008f 	ubfx	r0, r0, #2, #16
   14a5a:	e7f8      	b.n	14a4e <ble_ll_pdu_max_tx_octets_get+0x3e>
        octets = usecs >> 6;
   14a5c:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14a60:	e7f5      	b.n	14a4e <ble_ll_pdu_max_tx_octets_get+0x3e>
        BLE_LL_ASSERT(0);
   14a62:	f7f7 fb9b 	bl	c19c <hal_debugger_connected>
   14a66:	b100      	cbz	r0, 14a6a <ble_ll_pdu_max_tx_octets_get+0x5a>
   14a68:	be01      	bkpt	0x0001
   14a6a:	2300      	movs	r3, #0
   14a6c:	461a      	mov	r2, r3
   14a6e:	4619      	mov	r1, r3
   14a70:	4618      	mov	r0, r3
   14a72:	f7f8 f897 	bl	cba4 <__assert_func>
        return 27;
   14a76:	201b      	movs	r0, #27
   14a78:	e7ec      	b.n	14a54 <ble_ll_pdu_max_tx_octets_get+0x44>
   14a7a:	bf00      	nop
   14a7c:	0002dd08 	.word	0x0002dd08

00014a80 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   14a80:	b570      	push	{r4, r5, r6, lr}
   14a82:	b08a      	sub	sp, #40	; 0x28
#endif
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14a84:	4b52      	ldr	r3, [pc, #328]	; (14bd0 <ble_ll_init+0x150>)
   14a86:	781b      	ldrb	r3, [r3, #0]
   14a88:	2b00      	cmp	r3, #0
   14a8a:	d07c      	beq.n	14b86 <ble_ll_init+0x106>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   14a8c:	2300      	movs	r3, #0
   14a8e:	9306      	str	r3, [sp, #24]
   14a90:	f8cd 301b 	str.w	r3, [sp, #27]
   14a94:	2206      	movs	r2, #6
   14a96:	a906      	add	r1, sp, #24
   14a98:	484e      	ldr	r0, [pc, #312]	; (14bd4 <ble_ll_init+0x154>)
   14a9a:	f7f9 ff69 	bl	e970 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   14a9e:	b960      	cbnz	r0, 14aba <ble_ll_init+0x3a>
        for (i = 0; i < BLE_DEV_ADDR_LEN; i++) {
            g_dev_addr[i] = pub_dev_addr & 0xff;
            pub_dev_addr >>= 8;
        }
#else
        memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   14aa0:	484c      	ldr	r0, [pc, #304]	; (14bd4 <ble_ll_init+0x154>)
   14aa2:	2300      	movs	r3, #0
   14aa4:	6003      	str	r3, [r0, #0]
   14aa6:	8083      	strh	r3, [r0, #4]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   14aa8:	9308      	str	r3, [sp, #32]
   14aaa:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   14aae:	2206      	movs	r2, #6
   14ab0:	a908      	add	r1, sp, #32
   14ab2:	f7f9 ff5d 	bl	e970 <memcmp>
#endif
        if (ble_ll_is_addr_empty(g_dev_addr)) {
   14ab6:	2800      	cmp	r0, #0
   14ab8:	d06f      	beq.n	14b9a <ble_ll_init+0x11a>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   14aba:	f005 fe73 	bl	1a7a4 <ble_ll_rfmgmt_init>
    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_TRANSPORT_ACL_FROM_HS_COUNT);
   14abe:	4c46      	ldr	r4, [pc, #280]	; (14bd8 <ble_ll_init+0x158>)
   14ac0:	230a      	movs	r3, #10
   14ac2:	7263      	strb	r3, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_TRANSPORT_ACL_SIZE);
   14ac4:	23ff      	movs	r3, #255	; 0xff
   14ac6:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   14ac8:	f104 0610 	add.w	r6, r4, #16
   14acc:	4630      	mov	r0, r6
   14ace:	f7f8 fb8f 	bl	d1f0 <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   14ad2:	2500      	movs	r5, #0
   14ad4:	4623      	mov	r3, r4
   14ad6:	f843 5f48 	str.w	r5, [r3, #72]!
   14ada:	64e3      	str	r3, [r4, #76]	; 0x4c
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   14adc:	4623      	mov	r3, r4
   14ade:	f843 5f30 	str.w	r5, [r3, #48]!
   14ae2:	6363      	str	r3, [r4, #52]	; 0x34
    memset(ev, 0, sizeof(*ev));
   14ae4:	6225      	str	r5, [r4, #32]
   14ae6:	62e5      	str	r5, [r4, #44]	; 0x2c
    ev->ev.ev_queued = 0;
   14ae8:	f884 5020 	strb.w	r5, [r4, #32]
    ev->ev.ev_cb = (os_event_fn *)fn;
   14aec:	4b3b      	ldr	r3, [pc, #236]	; (14bdc <ble_ll_init+0x15c>)
   14aee:	6263      	str	r3, [r4, #36]	; 0x24
    ev->ev.ev_arg = arg;
   14af0:	62a5      	str	r5, [r4, #40]	; 0x28
    memset(ev, 0, sizeof(*ev));
   14af2:	63a5      	str	r5, [r4, #56]	; 0x38
   14af4:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_queued = 0;
   14af6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    ev->ev.ev_cb = (os_event_fn *)fn;
   14afa:	4b39      	ldr	r3, [pc, #228]	; (14be0 <ble_ll_init+0x160>)
   14afc:	63e3      	str	r3, [r4, #60]	; 0x3c
    ev->ev.ev_arg = arg;
   14afe:	6425      	str	r5, [r4, #64]	; 0x40
    memset(ev, 0, sizeof(*ev));
   14b00:	6525      	str	r5, [r4, #80]	; 0x50
   14b02:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_queued = 0;
   14b04:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   14b08:	4b36      	ldr	r3, [pc, #216]	; (14be4 <ble_ll_init+0x164>)
   14b0a:	6563      	str	r3, [r4, #84]	; 0x54
    ev->ev.ev_arg = arg;
   14b0c:	65a5      	str	r5, [r4, #88]	; 0x58
    memset(ev, 0, sizeof(*ev));
   14b0e:	6625      	str	r5, [r4, #96]	; 0x60
   14b10:	66e5      	str	r5, [r4, #108]	; 0x6c
    ev->ev.ev_queued = 0;
   14b12:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   14b16:	4b34      	ldr	r3, [pc, #208]	; (14be8 <ble_ll_init+0x168>)
   14b18:	6663      	str	r3, [r4, #100]	; 0x64
    ev->ev.ev_arg = arg;
   14b1a:	66a5      	str	r5, [r4, #104]	; 0x68
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   14b1c:	462b      	mov	r3, r5
   14b1e:	4a33      	ldr	r2, [pc, #204]	; (14bec <ble_ll_init+0x16c>)
   14b20:	4631      	mov	r1, r6
   14b22:	f104 0070 	add.w	r0, r4, #112	; 0x70
   14b26:	f7f8 f9eb 	bl	cf00 <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   14b2a:	f004 ffc1 	bl	19ab0 <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   14b2e:	f006 fa07 	bl	1af40 <ble_ll_sched_init>

#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    /* Initialize advertiser */
    ble_ll_adv_init();
   14b32:	f001 f8ab 	bl	15c8c <ble_ll_adv_init>
    ble_ll_scan_init();
#endif

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    /* Initialize the connection module */
    ble_ll_conn_module_init();
   14b36:	f002 fd67 	bl	17608 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   14b3a:	f005 fd61 	bl	1a600 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_CIS_PERIPH;
    features |= BLE_LL_FEAT_ISO_BROADCASTER;
    features |= BLE_LL_FEAT_ISO_HOST_SUPPORT;
#endif

    lldata->ll_supp_features = features;
   14b3e:	22ff      	movs	r2, #255	; 0xff
   14b40:	2300      	movs	r3, #0
   14b42:	e9c4 2300 	strd	r2, r3, [r4]

    /* Initialize random number generation */
    ble_ll_rand_init();
   14b46:	f005 fa6d 	bl	1a024 <ble_ll_rand_init>
    /* Start the random number generator */
    ble_ll_rand_start();
   14b4a:	f005 fa5d 	bl	1a008 <ble_ll_rand_start>

    rc = stats_init_and_reg(STATS_HDR(ble_ll_stats),
   14b4e:	4b28      	ldr	r3, [pc, #160]	; (14bf0 <ble_ll_init+0x170>)
   14b50:	9301      	str	r3, [sp, #4]
   14b52:	9500      	str	r5, [sp, #0]
   14b54:	462b      	mov	r3, r5
   14b56:	2240      	movs	r2, #64	; 0x40
   14b58:	2104      	movs	r1, #4
   14b5a:	4826      	ldr	r0, [pc, #152]	; (14bf4 <ble_ll_init+0x174>)
   14b5c:	f7fd fae6 	bl	1212c <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_stats),
                            "ble_ll");
    SYSINIT_PANIC_ASSERT(rc == 0);
   14b60:	bb40      	cbnz	r0, 14bb4 <ble_ll_init+0x134>
#if MYNEWT_VAL(BLE_LL_DTM)
    ble_ll_dtm_init();
#endif

#if MYNEWT_VAL(BLE_LL_HCI_VS)
    ble_ll_hci_vs_init();
   14b62:	f005 f9b1 	bl	19ec8 <ble_ll_hci_vs_init>
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   14b66:	235a      	movs	r3, #90	; 0x5a
   14b68:	9303      	str	r3, [sp, #12]
   14b6a:	4b23      	ldr	r3, [pc, #140]	; (14bf8 <ble_ll_init+0x178>)
   14b6c:	9302      	str	r3, [sp, #8]
   14b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14b72:	9301      	str	r3, [sp, #4]
   14b74:	2300      	movs	r3, #0
   14b76:	9300      	str	r3, [sp, #0]
   14b78:	4a20      	ldr	r2, [pc, #128]	; (14bfc <ble_ll_init+0x17c>)
   14b7a:	491d      	ldr	r1, [pc, #116]	; (14bf0 <ble_ll_init+0x170>)
   14b7c:	4820      	ldr	r0, [pc, #128]	; (14c00 <ble_ll_init+0x180>)
   14b7e:	f7f9 fb29 	bl	e1d4 <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   14b82:	b00a      	add	sp, #40	; 0x28
   14b84:	bd70      	pop	{r4, r5, r6, pc}
    SYSINIT_ASSERT_ACTIVE();
   14b86:	f7f7 fb09 	bl	c19c <hal_debugger_connected>
   14b8a:	b100      	cbz	r0, 14b8e <ble_ll_init+0x10e>
   14b8c:	be01      	bkpt	0x0001
   14b8e:	2300      	movs	r3, #0
   14b90:	461a      	mov	r2, r3
   14b92:	4619      	mov	r1, r3
   14b94:	4618      	mov	r0, r3
   14b96:	f7f8 f805 	bl	cba4 <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   14b9a:	a804      	add	r0, sp, #16
   14b9c:	f006 fb04 	bl	1b1a8 <ble_hw_get_public_addr>
            if (!rc) {
   14ba0:	2800      	cmp	r0, #0
   14ba2:	d18a      	bne.n	14aba <ble_ll_init+0x3a>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   14ba4:	4b0b      	ldr	r3, [pc, #44]	; (14bd4 <ble_ll_init+0x154>)
   14ba6:	f8dd 0011 	ldr.w	r0, [sp, #17]
   14baa:	6018      	str	r0, [r3, #0]
   14bac:	f8bd 2015 	ldrh.w	r2, [sp, #21]
   14bb0:	809a      	strh	r2, [r3, #4]
   14bb2:	e782      	b.n	14aba <ble_ll_init+0x3a>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14bb4:	f7f7 faf2 	bl	c19c <hal_debugger_connected>
   14bb8:	b100      	cbz	r0, 14bbc <ble_ll_init+0x13c>
   14bba:	be01      	bkpt	0x0001
   14bbc:	2000      	movs	r0, #0
   14bbe:	9000      	str	r0, [sp, #0]
   14bc0:	4b10      	ldr	r3, [pc, #64]	; (14c04 <ble_ll_init+0x184>)
   14bc2:	681c      	ldr	r4, [r3, #0]
   14bc4:	4603      	mov	r3, r0
   14bc6:	4602      	mov	r2, r0
   14bc8:	4601      	mov	r1, r0
   14bca:	47a0      	blx	r4
   14bcc:	e7c9      	b.n	14b62 <ble_ll_init+0xe2>
   14bce:	bf00      	nop
   14bd0:	20001e3c 	.word	0x20001e3c
   14bd4:	2000221c 	.word	0x2000221c
   14bd8:	20001fb8 	.word	0x20001fb8
   14bdc:	000146a1 	.word	0x000146a1
   14be0:	00014611 	.word	0x00014611
   14be4:	00014587 	.word	0x00014587
   14be8:	0001457d 	.word	0x0001457d
   14bec:	00014561 	.word	0x00014561
   14bf0:	0002dd00 	.word	0x0002dd00
   14bf4:	20001ea8 	.word	0x20001ea8
   14bf8:	20002048 	.word	0x20002048
   14bfc:	000144e9 	.word	0x000144e9
   14c00:	200021c8 	.word	0x200021c8
   14c04:	2000028c 	.word	0x2000028c

00014c08 <ble_transport_to_ll_cmd_impl>:

/* Transport APIs for LL side */

int
ble_transport_to_ll_cmd_impl(void *buf)
{
   14c08:	b508      	push	{r3, lr}
    return ble_ll_hci_cmd_rx(buf, NULL);
   14c0a:	2100      	movs	r1, #0
   14c0c:	f004 ff2c 	bl	19a68 <ble_ll_hci_cmd_rx>
}
   14c10:	bd08      	pop	{r3, pc}

00014c12 <ble_transport_to_ll_acl_impl>:

int
ble_transport_to_ll_acl_impl(struct os_mbuf *om)
{
   14c12:	b508      	push	{r3, lr}
    return ble_ll_hci_acl_rx(om, NULL);
   14c14:	2100      	movs	r1, #0
   14c16:	f004 ff45 	bl	19aa4 <ble_ll_hci_acl_rx>
}
   14c1a:	bd08      	pop	{r3, pc}

00014c1c <ble_transport_ll_init>:

void
ble_transport_ll_init(void)
{
   14c1c:	b508      	push	{r3, lr}
    ble_ll_init();
   14c1e:	f7ff ff2f 	bl	14a80 <ble_ll_init>
}
   14c22:	bd08      	pop	{r3, pc}

00014c24 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   14c24:	7883      	ldrb	r3, [r0, #2]
   14c26:	f013 0f01 	tst.w	r3, #1
   14c2a:	d104      	bne.n	14c36 <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   14c2c:	f013 0f02 	tst.w	r3, #2
   14c30:	d003      	beq.n	14c3a <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   14c32:	2026      	movs	r0, #38	; 0x26
   14c34:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   14c36:	2025      	movs	r0, #37	; 0x25
   14c38:	4770      	bx	lr
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   14c3a:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   14c3c:	4770      	bx	lr

00014c3e <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   14c3e:	7883      	ldrb	r3, [r0, #2]
   14c40:	f013 0f04 	tst.w	r3, #4
   14c44:	d104      	bne.n	14c50 <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   14c46:	f013 0f02 	tst.w	r3, #2
   14c4a:	d003      	beq.n	14c54 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   14c4c:	2026      	movs	r0, #38	; 0x26
   14c4e:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   14c50:	2027      	movs	r0, #39	; 0x27
   14c52:	4770      	bx	lr
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   14c54:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   14c56:	4770      	bx	lr

00014c58 <ble_ll_adv_flags_set>:
{
   14c58:	b538      	push	{r3, r4, r5, lr}
   14c5a:	4605      	mov	r5, r0
   14c5c:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   14c5e:	f7f9 fc73 	bl	e548 <os_arch_save_sr>
    advsm->flags |= flags;
   14c62:	8969      	ldrh	r1, [r5, #10]
   14c64:	430c      	orrs	r4, r1
   14c66:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   14c68:	f7f9 fc74 	bl	e554 <os_arch_restore_sr>
}
   14c6c:	bd38      	pop	{r3, r4, r5, pc}

00014c6e <ble_ll_adv_flags_clear>:
{
   14c6e:	b538      	push	{r3, r4, r5, lr}
   14c70:	4604      	mov	r4, r0
   14c72:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   14c74:	f7f9 fc68 	bl	e548 <os_arch_save_sr>
    advsm->flags &= ~flags;
   14c78:	8963      	ldrh	r3, [r4, #10]
   14c7a:	ea23 0105 	bic.w	r1, r3, r5
   14c7e:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   14c80:	f7f9 fc68 	bl	e554 <os_arch_restore_sr>
}
   14c84:	bd38      	pop	{r3, r4, r5, pc}

00014c86 <ble_ll_adv_rpa_update>:
{
   14c86:	b538      	push	{r3, r4, r5, lr}
   14c88:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   14c8a:	f100 0530 	add.w	r5, r0, #48	; 0x30
   14c8e:	2301      	movs	r3, #1
   14c90:	f100 0224 	add.w	r2, r0, #36	; 0x24
   14c94:	7941      	ldrb	r1, [r0, #5]
   14c96:	4628      	mov	r0, r5
   14c98:	f005 fc92 	bl	1a5c0 <ble_ll_resolv_gen_rpa>
   14c9c:	b960      	cbnz	r0, 14cb8 <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   14c9e:	7923      	ldrb	r3, [r4, #4]
   14ca0:	f013 0f01 	tst.w	r3, #1
   14ca4:	d00d      	beq.n	14cc2 <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   14ca6:	2101      	movs	r1, #1
   14ca8:	4620      	mov	r0, r4
   14caa:	f7ff ffd5 	bl	14c58 <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   14cae:	89a3      	ldrh	r3, [r4, #12]
   14cb0:	f013 0f04 	tst.w	r3, #4
   14cb4:	d10a      	bne.n	14ccc <ble_ll_adv_rpa_update+0x46>
}
   14cb6:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   14cb8:	2101      	movs	r1, #1
   14cba:	4620      	mov	r0, r4
   14cbc:	f7ff ffcc 	bl	14c58 <ble_ll_adv_flags_set>
   14cc0:	e7f5      	b.n	14cae <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   14cc2:	2101      	movs	r1, #1
   14cc4:	4620      	mov	r0, r4
   14cc6:	f7ff ffd2 	bl	14c6e <ble_ll_adv_flags_clear>
   14cca:	e7f0      	b.n	14cae <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   14ccc:	2300      	movs	r3, #0
   14cce:	f104 0236 	add.w	r2, r4, #54	; 0x36
   14cd2:	7961      	ldrb	r1, [r4, #5]
   14cd4:	4628      	mov	r0, r5
   14cd6:	f005 fc73 	bl	1a5c0 <ble_ll_resolv_gen_rpa>
   14cda:	b940      	cbnz	r0, 14cee <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   14cdc:	7963      	ldrb	r3, [r4, #5]
   14cde:	f013 0f01 	tst.w	r3, #1
   14ce2:	d009      	beq.n	14cf8 <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   14ce4:	2102      	movs	r1, #2
   14ce6:	4620      	mov	r0, r4
   14ce8:	f7ff ffb6 	bl	14c58 <ble_ll_adv_flags_set>
   14cec:	e7e3      	b.n	14cb6 <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   14cee:	2102      	movs	r1, #2
   14cf0:	4620      	mov	r0, r4
   14cf2:	f7ff ffb1 	bl	14c58 <ble_ll_adv_flags_set>
   14cf6:	e7de      	b.n	14cb6 <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   14cf8:	2102      	movs	r1, #2
   14cfa:	4620      	mov	r0, r4
   14cfc:	f7ff ffb7 	bl	14c6e <ble_ll_adv_flags_clear>
}
   14d00:	e7d9      	b.n	14cb6 <ble_ll_adv_rpa_update+0x30>

00014d02 <ble_ll_adv_active_chanset_clear>:
{
   14d02:	b510      	push	{r4, lr}
   14d04:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   14d06:	f7f9 fc1f 	bl	e548 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   14d0a:	8963      	ldrh	r3, [r4, #10]
   14d0c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   14d10:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   14d12:	f7f9 fc1f 	bl	e554 <os_arch_restore_sr>
}
   14d16:	bd10      	pop	{r4, pc}

00014d18 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   14d18:	b510      	push	{r4, lr}
   14d1a:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);
   14d1c:	4a08      	ldr	r2, [pc, #32]	; (14d40 <ble_ll_adv_drop_event+0x28>)
   14d1e:	6f93      	ldr	r3, [r2, #120]	; 0x78
   14d20:	3301      	adds	r3, #1
   14d22:	6793      	str	r3, [r2, #120]	; 0x78

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   14d24:	3060      	adds	r0, #96	; 0x60
   14d26:	f006 f89d 	bl	1ae64 <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   14d2a:	4620      	mov	r0, r4
   14d2c:	f7ff ff87 	bl	14c3e <ble_ll_adv_final_chan>
   14d30:	71a0      	strb	r0, [r4, #6]
    os_eventq_put(&evq->evq, &ev->ev);
   14d32:	f104 0150 	add.w	r1, r4, #80	; 0x50
   14d36:	4803      	ldr	r0, [pc, #12]	; (14d44 <ble_ll_adv_drop_event+0x2c>)
   14d38:	f7f8 fa67 	bl	d20a <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   14d3c:	bd10      	pop	{r4, pc}
   14d3e:	bf00      	nop
   14d40:	20001ea8 	.word	0x20001ea8
   14d44:	20001fc8 	.word	0x20001fc8

00014d48 <ble_ll_adv_tx_done>:
{
   14d48:	b510      	push	{r4, lr}
   14d4a:	4604      	mov	r4, r0
    ble_phy_txpwr_set(g_ble_ll_tx_power);
   14d4c:	4b09      	ldr	r3, [pc, #36]	; (14d74 <ble_ll_adv_tx_done+0x2c>)
   14d4e:	f993 0000 	ldrsb.w	r0, [r3]
   14d52:	f006 ff5f 	bl	1bc14 <ble_phy_txpwr_set>
   14d56:	f104 0150 	add.w	r1, r4, #80	; 0x50
   14d5a:	4807      	ldr	r0, [pc, #28]	; (14d78 <ble_ll_adv_tx_done+0x30>)
   14d5c:	f7f8 fa55 	bl	d20a <os_eventq_put>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   14d60:	2000      	movs	r0, #0
   14d62:	f7ff fdf1 	bl	14948 <ble_ll_state_set>
    ble_ll_adv_active_chanset_clear(advsm);
   14d66:	4620      	mov	r0, r4
   14d68:	f7ff ffcb 	bl	14d02 <ble_ll_adv_active_chanset_clear>
    g_ble_ll_cur_adv_sm = NULL;
   14d6c:	4b03      	ldr	r3, [pc, #12]	; (14d7c <ble_ll_adv_tx_done+0x34>)
   14d6e:	2200      	movs	r2, #0
   14d70:	601a      	str	r2, [r3, #0]
}
   14d72:	bd10      	pop	{r4, pc}
   14d74:	20002218 	.word	0x20002218
   14d78:	20001fc8 	.word	0x20001fc8
   14d7c:	200022a8 	.word	0x200022a8

00014d80 <ble_ll_adv_sm_find_configured>:
{
   14d80:	b510      	push	{r4, lr}
   14d82:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   14d84:	f004 fd41 	bl	1980a <ble_ll_hci_adv_mode_ext>
   14d88:	b9d0      	cbnz	r0, 14dc0 <ble_ll_adv_sm_find_configured+0x40>
        BLE_LL_ASSERT(instance == 0);
   14d8a:	b90c      	cbnz	r4, 14d90 <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   14d8c:	480f      	ldr	r0, [pc, #60]	; (14dcc <ble_ll_adv_sm_find_configured+0x4c>)
}
   14d8e:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   14d90:	f7f7 fa04 	bl	c19c <hal_debugger_connected>
   14d94:	b100      	cbz	r0, 14d98 <ble_ll_adv_sm_find_configured+0x18>
   14d96:	be01      	bkpt	0x0001
   14d98:	2300      	movs	r3, #0
   14d9a:	461a      	mov	r2, r3
   14d9c:	4619      	mov	r1, r3
   14d9e:	4618      	mov	r0, r3
   14da0:	f7f7 ff00 	bl	cba4 <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   14da4:	ebc2 1042 	rsb	r0, r2, r2, lsl #5
   14da8:	4b08      	ldr	r3, [pc, #32]	; (14dcc <ble_ll_adv_sm_find_configured+0x4c>)
   14daa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   14dae:	8943      	ldrh	r3, [r0, #10]
   14db0:	f013 0f80 	tst.w	r3, #128	; 0x80
   14db4:	d002      	beq.n	14dbc <ble_ll_adv_sm_find_configured+0x3c>
                (advsm->adv_instance == instance)) {
   14db6:	7843      	ldrb	r3, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   14db8:	42a3      	cmp	r3, r4
   14dba:	d0e8      	beq.n	14d8e <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   14dbc:	3201      	adds	r2, #1
   14dbe:	e000      	b.n	14dc2 <ble_ll_adv_sm_find_configured+0x42>
   14dc0:	2200      	movs	r2, #0
   14dc2:	2a00      	cmp	r2, #0
   14dc4:	d0ee      	beq.n	14da4 <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   14dc6:	2000      	movs	r0, #0
   14dc8:	e7e1      	b.n	14d8e <ble_ll_adv_sm_find_configured+0xe>
   14dca:	bf00      	nop
   14dcc:	2000222c 	.word	0x2000222c

00014dd0 <ble_ll_adv_active_chanset_set_pri>:
{
   14dd0:	b510      	push	{r4, lr}
   14dd2:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   14dd4:	f7f9 fbb8 	bl	e548 <os_arch_save_sr>
    BLE_LL_ASSERT((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   14dd8:	8963      	ldrh	r3, [r4, #10]
   14dda:	f013 0f30 	tst.w	r3, #48	; 0x30
   14dde:	d107      	bne.n	14df0 <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   14de0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   14de4:	f043 0310 	orr.w	r3, r3, #16
   14de8:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   14dea:	f7f9 fbb3 	bl	e554 <os_arch_restore_sr>
}
   14dee:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   14df0:	f7f7 f9d4 	bl	c19c <hal_debugger_connected>
   14df4:	b100      	cbz	r0, 14df8 <ble_ll_adv_active_chanset_set_pri+0x28>
   14df6:	be01      	bkpt	0x0001
   14df8:	2300      	movs	r3, #0
   14dfa:	461a      	mov	r2, r3
   14dfc:	4619      	mov	r1, r3
   14dfe:	4618      	mov	r0, r3
   14e00:	f7f7 fed0 	bl	cba4 <__assert_func>

00014e04 <ble_ll_adv_scheduled>:
{
   14e04:	b538      	push	{r3, r4, r5, lr}
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   14e06:	4b08      	ldr	r3, [pc, #32]	; (14e28 <ble_ll_adv_scheduled+0x24>)
   14e08:	781d      	ldrb	r5, [r3, #0]
   14e0a:	440d      	add	r5, r1
   14e0c:	6185      	str	r5, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   14e0e:	61c5      	str	r5, [r0, #28]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   14e10:	8983      	ldrh	r3, [r0, #12]
   14e12:	f013 0f08 	tst.w	r3, #8
   14e16:	d100      	bne.n	14e1a <ble_ll_adv_scheduled+0x16>
}
   14e18:	bd38      	pop	{r3, r4, r5, pc}
   14e1a:	4604      	mov	r4, r0
    if (usecs <= 31249) {
        return (usecs * 137439) / 4194304;
    }
#endif

    return os_cputime_usecs_to_ticks(usecs);
   14e1c:	4803      	ldr	r0, [pc, #12]	; (14e2c <ble_ll_adv_scheduled+0x28>)
   14e1e:	f015 ff53 	bl	2acc8 <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   14e22:	4405      	add	r5, r0
   14e24:	6225      	str	r5, [r4, #32]
}
   14e26:	e7f7      	b.n	14e18 <ble_ll_adv_scheduled+0x14>
   14e28:	200026a8 	.word	0x200026a8
   14e2c:	00138800 	.word	0x00138800

00014e30 <ble_ll_adv_set_sched>:
{
   14e30:	b538      	push	{r3, r4, r5, lr}
   14e32:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   14e34:	66c0      	str	r0, [r0, #108]	; 0x6c
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   14e36:	4b15      	ldr	r3, [pc, #84]	; (14e8c <ble_ll_adv_set_sched+0x5c>)
   14e38:	6703      	str	r3, [r0, #112]	; 0x70
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   14e3a:	2101      	movs	r1, #1
   14e3c:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   14e40:	79c0      	ldrb	r0, [r0, #7]
   14e42:	f7ff fde1 	bl	14a08 <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   14e46:	89a3      	ldrh	r3, [r4, #12]
   14e48:	f013 0f04 	tst.w	r3, #4
   14e4c:	d015      	beq.n	14e7a <ble_ll_adv_set_sched+0x4a>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   14e4e:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   14e52:	69e5      	ldr	r5, [r4, #28]
   14e54:	4b0e      	ldr	r3, [pc, #56]	; (14e90 <ble_ll_adv_set_sched+0x60>)
   14e56:	781b      	ldrb	r3, [r3, #0]
   14e58:	1aeb      	subs	r3, r5, r3
   14e5a:	6663      	str	r3, [r4, #100]	; 0x64
    sch->remainder = 0;
   14e5c:	2300      	movs	r3, #0
   14e5e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}

static inline uint32_t
ble_ll_tmr_u2t_up(uint32_t usecs)
{
    return ble_ll_tmr_u2t(usecs + (USECS_PER_TICK - 1));
   14e62:	301e      	adds	r0, #30
    if (usecs <= 31249) {
   14e64:	f647 2311 	movw	r3, #31249	; 0x7a11
   14e68:	4298      	cmp	r0, r3
   14e6a:	d80c      	bhi.n	14e86 <ble_ll_adv_set_sched+0x56>
        return (usecs * 137439) / 4194304;
   14e6c:	4b09      	ldr	r3, [pc, #36]	; (14e94 <ble_ll_adv_set_sched+0x64>)
   14e6e:	fb03 f000 	mul.w	r0, r3, r0
   14e72:	0d80      	lsrs	r0, r0, #22
    sch->end_time = advsm->adv_pdu_start_time + ble_ll_tmr_u2t_up(max_usecs);
   14e74:	4428      	add	r0, r5
   14e76:	66a0      	str	r0, [r4, #104]	; 0x68
}
   14e78:	bd38      	pop	{r3, r4, r5, pc}
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   14e7a:	f013 0f01 	tst.w	r3, #1
   14e7e:	d0e8      	beq.n	14e52 <ble_ll_adv_set_sched+0x22>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   14e80:	f500 7055 	add.w	r0, r0, #852	; 0x354
   14e84:	e7e5      	b.n	14e52 <ble_ll_adv_set_sched+0x22>
    return os_cputime_usecs_to_ticks(usecs);
   14e86:	f015 ff1f 	bl	2acc8 <os_cputime_usecs_to_ticks>
   14e8a:	e7f3      	b.n	14e74 <ble_ll_adv_set_sched+0x44>
   14e8c:	00014fc5 	.word	0x00014fc5
   14e90:	200026a8 	.word	0x200026a8
   14e94:	000218df 	.word	0x000218df

00014e98 <ble_ll_adv_sm_start>:
{
   14e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e9a:	4604      	mov	r4, r0
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   14e9c:	210b      	movs	r1, #11
   14e9e:	f7ff fee6 	bl	14c6e <ble_ll_adv_flags_clear>
    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   14ea2:	4943      	ldr	r1, [pc, #268]	; (14fb0 <ble_ll_adv_sm_start+0x118>)
   14ea4:	7920      	ldrb	r0, [r4, #4]
   14ea6:	f7ff fc4d 	bl	14744 <ble_ll_is_valid_own_addr_type>
   14eaa:	2800      	cmp	r0, #0
   14eac:	d07e      	beq.n	14fac <ble_ll_adv_sm_start+0x114>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   14eae:	89a3      	ldrh	r3, [r4, #12]
   14eb0:	f013 0f01 	tst.w	r3, #1
   14eb4:	d001      	beq.n	14eba <ble_ll_adv_sm_start+0x22>
        if (advsm->conn_comp_ev == NULL) {
   14eb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14eb8:	b14b      	cbz	r3, 14ece <ble_ll_adv_sm_start+0x36>
    if ((advsm->own_addr_type & 1) == 0) {
   14eba:	7923      	ldrb	r3, [r4, #4]
   14ebc:	f013 0f01 	tst.w	r3, #1
   14ec0:	d00d      	beq.n	14ede <ble_ll_adv_sm_start+0x46>
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   14ec2:	8962      	ldrh	r2, [r4, #10]
   14ec4:	f042 0201 	orr.w	r2, r2, #1
   14ec8:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   14eca:	4a39      	ldr	r2, [pc, #228]	; (14fb0 <ble_ll_adv_sm_start+0x118>)
   14ecc:	e008      	b.n	14ee0 <ble_ll_adv_sm_start+0x48>
            advsm->conn_comp_ev = ble_transport_alloc_evt(0);
   14ece:	2000      	movs	r0, #0
   14ed0:	f012 fa10 	bl	272f4 <ble_transport_alloc_evt>
   14ed4:	64e0      	str	r0, [r4, #76]	; 0x4c
            if (!advsm->conn_comp_ev) {
   14ed6:	2800      	cmp	r0, #0
   14ed8:	d1ef      	bne.n	14eba <ble_ll_adv_sm_start+0x22>
                return BLE_ERR_MEM_CAPACITY;
   14eda:	2007      	movs	r0, #7
   14edc:	e03f      	b.n	14f5e <ble_ll_adv_sm_start+0xc6>
        addr = g_dev_addr;
   14ede:	4a35      	ldr	r2, [pc, #212]	; (14fb4 <ble_ll_adv_sm_start+0x11c>)
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   14ee0:	6811      	ldr	r1, [r2, #0]
   14ee2:	6261      	str	r1, [r4, #36]	; 0x24
   14ee4:	8892      	ldrh	r2, [r2, #4]
   14ee6:	8522      	strh	r2, [r4, #40]	; 0x28
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   14ee8:	89a2      	ldrh	r2, [r4, #12]
   14eea:	f012 0f04 	tst.w	r2, #4
   14eee:	d137      	bne.n	14f60 <ble_ll_adv_sm_start+0xc8>
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   14ef0:	2b01      	cmp	r3, #1
   14ef2:	d845      	bhi.n	14f80 <ble_ll_adv_sm_start+0xe8>
    advsm->adv_enabled = 1;
   14ef4:	2301      	movs	r3, #1
   14ef6:	7023      	strb	r3, [r4, #0]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   14ef8:	89a3      	ldrh	r3, [r4, #12]
   14efa:	f013 0f08 	tst.w	r3, #8
   14efe:	d043      	beq.n	14f88 <ble_ll_adv_sm_start+0xf0>
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   14f00:	f640 63a6 	movw	r3, #3750	; 0xea6
   14f04:	6163      	str	r3, [r4, #20]
    adv_chan = ble_ll_adv_first_chan(advsm);
   14f06:	4620      	mov	r0, r4
   14f08:	f7ff fe8c 	bl	14c24 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   14f0c:	71a0      	strb	r0, [r4, #6]
    earliest_start_time = ble_ll_rfmgmt_enable_now();
   14f0e:	f005 fcb3 	bl	1a878 <ble_ll_rfmgmt_enable_now>
   14f12:	4606      	mov	r6, r0
    start_delay_us = ble_ll_rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   14f14:	f005 f84e 	bl	19fb4 <ble_ll_rand>
   14f18:	4d27      	ldr	r5, [pc, #156]	; (14fb8 <ble_ll_adv_sm_start+0x120>)
   14f1a:	fba5 3500 	umull	r3, r5, r5, r0
   14f1e:	0b6d      	lsrs	r5, r5, #13
   14f20:	f242 7310 	movw	r3, #10000	; 0x2710
   14f24:	fb03 0515 	mls	r5, r3, r5, r0
    return os_cputime_get32();
   14f28:	f015 fec9 	bl	2acbe <os_cputime_get32>
   14f2c:	4607      	mov	r7, r0
    if (usecs <= 31249) {
   14f2e:	f647 2311 	movw	r3, #31249	; 0x7a11
   14f32:	429d      	cmp	r5, r3
   14f34:	d82f      	bhi.n	14f96 <ble_ll_adv_sm_start+0xfe>
        return (usecs * 137439) / 4194304;
   14f36:	4b21      	ldr	r3, [pc, #132]	; (14fbc <ble_ll_adv_sm_start+0x124>)
   14f38:	fb03 f505 	mul.w	r5, r3, r5
   14f3c:	0dad      	lsrs	r5, r5, #22
    advsm->adv_pdu_start_time = ble_ll_tmr_get() +
   14f3e:	443d      	add	r5, r7
   14f40:	61e5      	str	r5, [r4, #28]
    ble_ll_adv_set_sched(advsm);
   14f42:	4620      	mov	r0, r4
   14f44:	f7ff ff74 	bl	14e30 <ble_ll_adv_set_sched>
    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   14f48:	6e60      	ldr	r0, [r4, #100]	; 0x64
   14f4a:	1b83      	subs	r3, r0, r6
    if (delta < 0) {
   14f4c:	2b00      	cmp	r3, #0
   14f4e:	db27      	blt.n	14fa0 <ble_ll_adv_sm_start+0x108>
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   14f50:	2200      	movs	r2, #0
   14f52:	491b      	ldr	r1, [pc, #108]	; (14fc0 <ble_ll_adv_sm_start+0x128>)
   14f54:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14f58:	f005 fec2 	bl	1ace0 <ble_ll_sched_adv_new>
    return BLE_ERR_SUCCESS;
   14f5c:	2000      	movs	r0, #0
}
   14f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   14f60:	4622      	mov	r2, r4
   14f62:	f852 1f30 	ldr.w	r1, [r2, #48]!
   14f66:	f8c4 1036 	str.w	r1, [r4, #54]	; 0x36
   14f6a:	8892      	ldrh	r2, [r2, #4]
   14f6c:	8762      	strh	r2, [r4, #58]	; 0x3a
        if (advsm->peer_addr_type & 1) {
   14f6e:	7962      	ldrb	r2, [r4, #5]
   14f70:	f012 0f01 	tst.w	r2, #1
   14f74:	d0bc      	beq.n	14ef0 <ble_ll_adv_sm_start+0x58>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   14f76:	8962      	ldrh	r2, [r4, #10]
   14f78:	f042 0202 	orr.w	r2, r2, #2
   14f7c:	8162      	strh	r2, [r4, #10]
   14f7e:	e7b7      	b.n	14ef0 <ble_ll_adv_sm_start+0x58>
        ble_ll_adv_rpa_update(advsm);
   14f80:	4620      	mov	r0, r4
   14f82:	f7ff fe80 	bl	14c86 <ble_ll_adv_rpa_update>
   14f86:	e7b5      	b.n	14ef4 <ble_ll_adv_sm_start+0x5c>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   14f88:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   14f8a:	f240 2371 	movw	r3, #625	; 0x271
   14f8e:	fb03 f302 	mul.w	r3, r3, r2
   14f92:	6163      	str	r3, [r4, #20]
   14f94:	e7b7      	b.n	14f06 <ble_ll_adv_sm_start+0x6e>
    return os_cputime_usecs_to_ticks(usecs);
   14f96:	4628      	mov	r0, r5
   14f98:	f015 fe96 	bl	2acc8 <os_cputime_usecs_to_ticks>
   14f9c:	4605      	mov	r5, r0
   14f9e:	e7ce      	b.n	14f3e <ble_ll_adv_sm_start+0xa6>
        advsm->adv_sch.start_time -= delta;
   14fa0:	6666      	str	r6, [r4, #100]	; 0x64
        advsm->adv_sch.end_time -= delta;
   14fa2:	1a36      	subs	r6, r6, r0
   14fa4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   14fa6:	4406      	add	r6, r0
   14fa8:	66a6      	str	r6, [r4, #104]	; 0x68
   14faa:	e7d1      	b.n	14f50 <ble_ll_adv_sm_start+0xb8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14fac:	2012      	movs	r0, #18
   14fae:	e7d6      	b.n	14f5e <ble_ll_adv_sm_start+0xc6>
   14fb0:	20002224 	.word	0x20002224
   14fb4:	2000221c 	.word	0x2000221c
   14fb8:	d1b71759 	.word	0xd1b71759
   14fbc:	000218df 	.word	0x000218df
   14fc0:	00014e05 	.word	0x00014e05

00014fc4 <ble_ll_adv_tx_start_cb>:
{
   14fc4:	b538      	push	{r3, r4, r5, lr}
   14fc6:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   14fc8:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   14fca:	4b32      	ldr	r3, [pc, #200]	; (15094 <ble_ll_adv_tx_start_cb+0xd0>)
   14fcc:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   14fce:	4620      	mov	r0, r4
   14fd0:	f7ff fefe 	bl	14dd0 <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   14fd4:	8963      	ldrh	r3, [r4, #10]
   14fd6:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   14fda:	d005      	beq.n	14fe8 <ble_ll_adv_tx_start_cb+0x24>
    ble_ll_adv_tx_done(advsm);
   14fdc:	4620      	mov	r0, r4
   14fde:	f7ff feb3 	bl	14d48 <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   14fe2:	2501      	movs	r5, #1
}
   14fe4:	4628      	mov	r0, r5
   14fe6:	bd38      	pop	{r3, r4, r5, pc}
    ble_phy_txpwr_set(advsm->adv_txpwr);
   14fe8:	f994 0009 	ldrsb.w	r0, [r4, #9]
   14fec:	f006 fe12 	bl	1bc14 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   14ff0:	4a29      	ldr	r2, [pc, #164]	; (15098 <ble_ll_adv_tx_start_cb+0xd4>)
   14ff2:	492a      	ldr	r1, [pc, #168]	; (1509c <ble_ll_adv_tx_start_cb+0xd8>)
   14ff4:	79a0      	ldrb	r0, [r4, #6]
   14ff6:	f006 fe21 	bl	1bc3c <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   14ffa:	b960      	cbnz	r0, 15016 <ble_ll_adv_tx_start_cb+0x52>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   14ffc:	6868      	ldr	r0, [r5, #4]
   14ffe:	4b28      	ldr	r3, [pc, #160]	; (150a0 <ble_ll_adv_tx_start_cb+0xdc>)
   15000:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   15002:	78a9      	ldrb	r1, [r5, #2]
   15004:	4418      	add	r0, r3
   15006:	f007 f849 	bl	1c09c <ble_phy_tx_set_start_time>
    if (rc) {
   1500a:	b170      	cbz	r0, 1502a <ble_ll_adv_tx_start_cb+0x66>
        STATS_INC(ble_ll_stats, adv_late_starts);
   1500c:	4a25      	ldr	r2, [pc, #148]	; (150a4 <ble_ll_adv_tx_start_cb+0xe0>)
   1500e:	6f13      	ldr	r3, [r2, #112]	; 0x70
   15010:	3301      	adds	r3, #1
   15012:	6713      	str	r3, [r2, #112]	; 0x70
        goto adv_tx_done;
   15014:	e7e2      	b.n	14fdc <ble_ll_adv_tx_start_cb+0x18>
    BLE_LL_ASSERT(rc == 0);
   15016:	f7f7 f8c1 	bl	c19c <hal_debugger_connected>
   1501a:	b100      	cbz	r0, 1501e <ble_ll_adv_tx_start_cb+0x5a>
   1501c:	be01      	bkpt	0x0001
   1501e:	2300      	movs	r3, #0
   15020:	461a      	mov	r2, r3
   15022:	4619      	mov	r1, r3
   15024:	4618      	mov	r0, r3
   15026:	f7f7 fdbd 	bl	cba4 <__assert_func>
    ble_phy_encrypt_disable();
   1502a:	f006 fdab 	bl	1bb84 <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1502e:	23ff      	movs	r3, #255	; 0xff
   15030:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   15032:	f005 fadf 	bl	1a5f4 <ble_ll_resolv_enabled>
   15036:	b300      	cbz	r0, 1507a <ble_ll_adv_tx_start_cb+0xb6>
        ble_phy_resolv_list_enable();
   15038:	f007 f8f4 	bl	1c224 <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1503c:	89a3      	ldrh	r3, [r4, #12]
   1503e:	f013 0f10 	tst.w	r3, #16
   15042:	d002      	beq.n	1504a <ble_ll_adv_tx_start_cb+0x86>
   15044:	f013 0f03 	tst.w	r3, #3
   15048:	d11a      	bne.n	15080 <ble_ll_adv_tx_start_cb+0xbc>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1504a:	4621      	mov	r1, r4
   1504c:	4816      	ldr	r0, [pc, #88]	; (150a8 <ble_ll_adv_tx_start_cb+0xe4>)
   1504e:	f006 fdb3 	bl	1bbb8 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   15052:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   15054:	4621      	mov	r1, r4
   15056:	4815      	ldr	r0, [pc, #84]	; (150ac <ble_ll_adv_tx_start_cb+0xe8>)
   15058:	f007 f83c 	bl	1c0d4 <ble_phy_tx>
    if (rc) {
   1505c:	4605      	mov	r5, r0
   1505e:	2800      	cmp	r0, #0
   15060:	d1bc      	bne.n	14fdc <ble_ll_adv_tx_start_cb+0x18>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   15062:	78e3      	ldrb	r3, [r4, #3]
   15064:	b193      	cbz	r3, 1508c <ble_ll_adv_tx_start_cb+0xc8>
        ble_ll_whitelist_enable();
   15066:	f006 f877 	bl	1b158 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   1506a:	2001      	movs	r0, #1
   1506c:	f7ff fc6c 	bl	14948 <ble_ll_state_set>
    STATS_INC(ble_ll_stats, adv_txg);
   15070:	4a0c      	ldr	r2, [pc, #48]	; (150a4 <ble_ll_adv_tx_start_cb+0xe0>)
   15072:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   15074:	3301      	adds	r3, #1
   15076:	66d3      	str	r3, [r2, #108]	; 0x6c
    return BLE_LL_SCHED_STATE_RUNNING;
   15078:	e7b4      	b.n	14fe4 <ble_ll_adv_tx_start_cb+0x20>
        ble_phy_resolv_list_disable();
   1507a:	f007 f8e3 	bl	1c244 <ble_phy_resolv_list_disable>
   1507e:	e7dd      	b.n	1503c <ble_ll_adv_tx_start_cb+0x78>
        ble_phy_set_txend_cb(NULL, NULL);
   15080:	2100      	movs	r1, #0
   15082:	4608      	mov	r0, r1
   15084:	f006 fd98 	bl	1bbb8 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   15088:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   1508a:	e7e3      	b.n	15054 <ble_ll_adv_tx_start_cb+0x90>
        ble_ll_whitelist_disable();
   1508c:	f006 f868 	bl	1b160 <ble_ll_whitelist_disable>
   15090:	e7eb      	b.n	1506a <ble_ll_adv_tx_start_cb+0xa6>
   15092:	bf00      	nop
   15094:	200022a8 	.word	0x200022a8
   15098:	00555555 	.word	0x00555555
   1509c:	8e89bed6 	.word	0x8e89bed6
   150a0:	200026a8 	.word	0x200026a8
   150a4:	20001ea8 	.word	0x20001ea8
   150a8:	00014d49 	.word	0x00014d49
   150ac:	000150b1 	.word	0x000150b1

000150b0 <ble_ll_adv_legacy_pdu_make>:
{
   150b0:	b570      	push	{r4, r5, r6, lr}
   150b2:	460c      	mov	r4, r1
   150b4:	4613      	mov	r3, r2
    adv_data_len = ADV_DATA_LEN(advsm);
   150b6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   150b8:	b332      	cbz	r2, 15108 <ble_ll_adv_legacy_pdu_make+0x58>
   150ba:	7c12      	ldrb	r2, [r2, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   150bc:	1d95      	adds	r5, r2, #6
   150be:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   150c0:	89a1      	ldrh	r1, [r4, #12]
   150c2:	f011 0f04 	tst.w	r1, #4
   150c6:	d021      	beq.n	1510c <ble_ll_adv_legacy_pdu_make+0x5c>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   150c8:	8962      	ldrh	r2, [r4, #10]
   150ca:	f012 0f02 	tst.w	r2, #2
   150ce:	d125      	bne.n	1511c <ble_ll_adv_legacy_pdu_make+0x6c>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   150d0:	2101      	movs	r1, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   150d2:	250c      	movs	r5, #12
        adv_data_len = 0;
   150d4:	2200      	movs	r2, #0
    BLE_LL_ASSERT(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   150d6:	2a1f      	cmp	r2, #31
   150d8:	d828      	bhi.n	1512c <ble_ll_adv_legacy_pdu_make+0x7c>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   150da:	1cae      	adds	r6, r5, #2
   150dc:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   150de:	8966      	ldrh	r6, [r4, #10]
   150e0:	f016 0f01 	tst.w	r6, #1
   150e4:	d001      	beq.n	150ea <ble_ll_adv_legacy_pdu_make+0x3a>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   150e6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    *hdr_byte = pdu_type;
   150ea:	7019      	strb	r1, [r3, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   150ec:	4623      	mov	r3, r4
   150ee:	f853 1f24 	ldr.w	r1, [r3, #36]!
   150f2:	6001      	str	r1, [r0, #0]
   150f4:	889b      	ldrh	r3, [r3, #4]
   150f6:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   150f8:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   150fa:	89a1      	ldrh	r1, [r4, #12]
   150fc:	f011 0f04 	tst.w	r1, #4
   15100:	d11e      	bne.n	15140 <ble_ll_adv_legacy_pdu_make+0x90>
    if (adv_data_len != 0) {
   15102:	bb2a      	cbnz	r2, 15150 <ble_ll_adv_legacy_pdu_make+0xa0>
}
   15104:	4628      	mov	r0, r5
   15106:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   15108:	2200      	movs	r2, #0
   1510a:	e7d7      	b.n	150bc <ble_ll_adv_legacy_pdu_make+0xc>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1510c:	f011 0f01 	tst.w	r1, #1
   15110:	d108      	bne.n	15124 <ble_ll_adv_legacy_pdu_make+0x74>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   15112:	f011 0f02 	tst.w	r1, #2
   15116:	d007      	beq.n	15128 <ble_ll_adv_legacy_pdu_make+0x78>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   15118:	2106      	movs	r1, #6
   1511a:	e7dc      	b.n	150d6 <ble_ll_adv_legacy_pdu_make+0x26>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1511c:	2181      	movs	r1, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1511e:	250c      	movs	r5, #12
        adv_data_len = 0;
   15120:	2200      	movs	r2, #0
   15122:	e7d8      	b.n	150d6 <ble_ll_adv_legacy_pdu_make+0x26>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   15124:	2100      	movs	r1, #0
   15126:	e7d6      	b.n	150d6 <ble_ll_adv_legacy_pdu_make+0x26>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   15128:	2102      	movs	r1, #2
   1512a:	e7d4      	b.n	150d6 <ble_ll_adv_legacy_pdu_make+0x26>
    BLE_LL_ASSERT(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1512c:	f7f7 f836 	bl	c19c <hal_debugger_connected>
   15130:	b100      	cbz	r0, 15134 <ble_ll_adv_legacy_pdu_make+0x84>
   15132:	be01      	bkpt	0x0001
   15134:	2300      	movs	r3, #0
   15136:	461a      	mov	r2, r3
   15138:	4619      	mov	r1, r3
   1513a:	4618      	mov	r0, r3
   1513c:	f7f7 fd32 	bl	cba4 <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   15140:	4621      	mov	r1, r4
   15142:	f851 6f36 	ldr.w	r6, [r1, #54]!
   15146:	f8c0 6006 	str.w	r6, [r0, #6]
   1514a:	8889      	ldrh	r1, [r1, #4]
   1514c:	8099      	strh	r1, [r3, #4]
   1514e:	e7d8      	b.n	15102 <ble_ll_adv_legacy_pdu_make+0x52>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   15150:	2100      	movs	r1, #0
   15152:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   15154:	f7f8 fa38 	bl	d5c8 <os_mbuf_copydata>
   15158:	e7d4      	b.n	15104 <ble_ll_adv_legacy_pdu_make+0x54>

0001515a <ble_ll_adv_scan_rsp_legacy_pdu_make>:
{
   1515a:	b538      	push	{r3, r4, r5, lr}
   1515c:	460c      	mov	r4, r1
   1515e:	4611      	mov	r1, r2
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   15160:	6c62      	ldr	r2, [r4, #68]	; 0x44
   15162:	b1ea      	cbz	r2, 151a0 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x46>
   15164:	7c12      	ldrb	r2, [r2, #16]
    BLE_LL_ASSERT(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   15166:	2a1f      	cmp	r2, #31
   15168:	d810      	bhi.n	1518c <ble_ll_adv_scan_rsp_legacy_pdu_make+0x32>
    pdulen = BLE_DEV_ADDR_LEN + scan_rsp_len;
   1516a:	1d95      	adds	r5, r2, #6
   1516c:	b2ed      	uxtb	r5, r5
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1516e:	8963      	ldrh	r3, [r4, #10]
   15170:	f013 0f01 	tst.w	r3, #1
   15174:	d116      	bne.n	151a4 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x4a>
    hdr = BLE_ADV_PDU_TYPE_SCAN_RSP;
   15176:	2304      	movs	r3, #4
    *hdr_byte = hdr;
   15178:	700b      	strb	r3, [r1, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1517a:	4621      	mov	r1, r4
   1517c:	f851 3f24 	ldr.w	r3, [r1, #36]!
   15180:	6003      	str	r3, [r0, #0]
   15182:	888b      	ldrh	r3, [r1, #4]
   15184:	8083      	strh	r3, [r0, #4]
    if (scan_rsp_len != 0) {
   15186:	b97a      	cbnz	r2, 151a8 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x4e>
}
   15188:	4628      	mov	r0, r5
   1518a:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1518c:	f7f7 f806 	bl	c19c <hal_debugger_connected>
   15190:	b100      	cbz	r0, 15194 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x3a>
   15192:	be01      	bkpt	0x0001
   15194:	2300      	movs	r3, #0
   15196:	461a      	mov	r2, r3
   15198:	4619      	mov	r1, r3
   1519a:	4618      	mov	r0, r3
   1519c:	f7f7 fd02 	bl	cba4 <__assert_func>
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   151a0:	2200      	movs	r2, #0
   151a2:	e7e2      	b.n	1516a <ble_ll_adv_scan_rsp_legacy_pdu_make+0x10>
        hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   151a4:	2344      	movs	r3, #68	; 0x44
   151a6:	e7e7      	b.n	15178 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x1e>
        os_mbuf_copydata(advsm->scan_rsp_data, 0, scan_rsp_len,
   151a8:	1d83      	adds	r3, r0, #6
   151aa:	2100      	movs	r1, #0
   151ac:	6c60      	ldr	r0, [r4, #68]	; 0x44
   151ae:	f7f8 fa0b 	bl	d5c8 <os_mbuf_copydata>
   151b2:	e7e9      	b.n	15188 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x2e>

000151b4 <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   151b4:	8943      	ldrh	r3, [r0, #10]
   151b6:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   151ba:	d023      	beq.n	15204 <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   151bc:	b510      	push	{r4, lr}
   151be:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   151c0:	f413 7f00 	tst.w	r3, #512	; 0x200
   151c4:	d00e      	beq.n	151e4 <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   151c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   151c8:	b133      	cbz	r3, 151d8 <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   151ca:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   151cc:	f7f8 f952 	bl	d474 <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   151d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   151d2:	63e3      	str	r3, [r4, #60]	; 0x3c
            advsm->new_adv_data = NULL;
   151d4:	2300      	movs	r3, #0
   151d6:	6423      	str	r3, [r4, #64]	; 0x40
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   151d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   151dc:	4620      	mov	r0, r4
   151de:	f7ff fd46 	bl	14c6e <ble_ll_adv_flags_clear>
}
   151e2:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   151e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
   151e8:	d0fb      	beq.n	151e2 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   151ea:	6c40      	ldr	r0, [r0, #68]	; 0x44
   151ec:	f7f8 f942 	bl	d474 <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   151f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   151f2:	6463      	str	r3, [r4, #68]	; 0x44
        advsm->new_scan_rsp_data = NULL;
   151f4:	2300      	movs	r3, #0
   151f6:	64a3      	str	r3, [r4, #72]	; 0x48
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   151f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   151fc:	4620      	mov	r0, r4
   151fe:	f7ff fd36 	bl	14c6e <ble_ll_adv_flags_clear>
   15202:	e7ee      	b.n	151e2 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   15204:	4770      	bx	lr
	...

00015208 <ble_ll_adv_sm_stop>:
{
   15208:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1520a:	7803      	ldrb	r3, [r0, #0]
   1520c:	b903      	cbnz	r3, 15210 <ble_ll_adv_sm_stop+0x8>
}
   1520e:	bd38      	pop	{r3, r4, r5, pc}
   15210:	4604      	mov	r4, r0
        ble_ll_rfmgmt_release();
   15212:	f005 fb17 	bl	1a844 <ble_ll_rfmgmt_release>
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   15216:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1521a:	f005 fe23 	bl	1ae64 <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1521e:	f7f9 f993 	bl	e548 <os_arch_save_sr>
   15222:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   15224:	f7ff fb96 	bl	14954 <ble_ll_state_get>
   15228:	2801      	cmp	r0, #1
   1522a:	d016      	beq.n	1525a <ble_ll_adv_sm_stop+0x52>
        OS_EXIT_CRITICAL(sr);
   1522c:	4628      	mov	r0, r5
   1522e:	f7f9 f991 	bl	e554 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   15232:	f104 0150 	add.w	r1, r4, #80	; 0x50
   15236:	480d      	ldr	r0, [pc, #52]	; (1526c <ble_ll_adv_sm_stop+0x64>)
   15238:	f7f8 f87e 	bl	d338 <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   1523c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1523e:	b118      	cbz	r0, 15248 <ble_ll_adv_sm_stop+0x40>
            ble_transport_free(advsm->conn_comp_ev);
   15240:	f012 f86c 	bl	2731c <ble_transport_free>
            advsm->conn_comp_ev = NULL;
   15244:	2300      	movs	r3, #0
   15246:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_active_chanset_clear(advsm);
   15248:	4620      	mov	r0, r4
   1524a:	f7ff fd5a 	bl	14d02 <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   1524e:	2300      	movs	r3, #0
   15250:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   15252:	4620      	mov	r0, r4
   15254:	f7ff ffae 	bl	151b4 <ble_ll_adv_update_adv_scan_rsp_data>
}
   15258:	e7d9      	b.n	1520e <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   1525a:	f006 fd15 	bl	1bc88 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1525e:	2000      	movs	r0, #0
   15260:	f7ff fb72 	bl	14948 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   15264:	4b02      	ldr	r3, [pc, #8]	; (15270 <ble_ll_adv_sm_stop+0x68>)
   15266:	2200      	movs	r2, #0
   15268:	601a      	str	r2, [r3, #0]

/* Resume scanning */
#if MYNEWT_VAL(BLE_LL_ROLE_OBSERVER)
void ble_ll_scan_chk_resume(void);
#else
static inline void ble_ll_scan_chk_resume(void) { };
   1526a:	e7df      	b.n	1522c <ble_ll_adv_sm_stop+0x24>
   1526c:	20001fc8 	.word	0x20001fc8
   15270:	200022a8 	.word	0x200022a8

00015274 <ble_ll_adv_set_enable>:
{
   15274:	b510      	push	{r4, lr}
   15276:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   15278:	f7ff fd82 	bl	14d80 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1527c:	b178      	cbz	r0, 1529e <ble_ll_adv_set_enable+0x2a>
    if (enable == 1) {
   1527e:	2c01      	cmp	r4, #1
   15280:	d002      	beq.n	15288 <ble_ll_adv_set_enable+0x14>
    } else if (enable == 0) {
   15282:	b144      	cbz	r4, 15296 <ble_ll_adv_set_enable+0x22>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   15284:	2012      	movs	r0, #18
}
   15286:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   15288:	7802      	ldrb	r2, [r0, #0]
   1528a:	b10a      	cbz	r2, 15290 <ble_ll_adv_set_enable+0x1c>
    rc = BLE_ERR_SUCCESS;
   1528c:	2000      	movs	r0, #0
   1528e:	e7fa      	b.n	15286 <ble_ll_adv_set_enable+0x12>
            rc = ble_ll_adv_sm_start(advsm);
   15290:	f7ff fe02 	bl	14e98 <ble_ll_adv_sm_start>
   15294:	e7f7      	b.n	15286 <ble_ll_adv_set_enable+0x12>
        ble_ll_adv_sm_stop(advsm);
   15296:	f7ff ffb7 	bl	15208 <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   1529a:	2000      	movs	r0, #0
   1529c:	e7f3      	b.n	15286 <ble_ll_adv_set_enable+0x12>
        return BLE_ERR_UNK_ADV_INDENT;
   1529e:	2042      	movs	r0, #66	; 0x42
   152a0:	e7f1      	b.n	15286 <ble_ll_adv_set_enable+0x12>

000152a2 <ble_ll_adv_update_data_mbuf>:
{
   152a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152a6:	4605      	mov	r5, r0
   152a8:	4616      	mov	r6, r2
   152aa:	461f      	mov	r7, r3
   152ac:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    om = *omp;
   152b0:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   152b2:	b149      	cbz	r1, 152c8 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   152b4:	b114      	cbz	r4, 152bc <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   152b6:	4620      	mov	r0, r4
   152b8:	f7f8 f8dc 	bl	d474 <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   152bc:	2100      	movs	r1, #0
   152be:	4640      	mov	r0, r8
   152c0:	f7f8 fd7f 	bl	ddc2 <os_msys_get_pkthdr>
        if (!om) {
   152c4:	4604      	mov	r4, r0
   152c6:	b150      	cbz	r0, 152de <ble_ll_adv_update_data_mbuf+0x3c>
    BLE_LL_ASSERT(om);
   152c8:	b164      	cbz	r4, 152e4 <ble_ll_adv_update_data_mbuf+0x42>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   152ca:	8a22      	ldrh	r2, [r4, #16]
   152cc:	4442      	add	r2, r8
   152ce:	42b2      	cmp	r2, r6
   152d0:	dc12      	bgt.n	152f8 <ble_ll_adv_update_data_mbuf+0x56>
    ret = os_mbuf_append(om, data, datalen);
   152d2:	4642      	mov	r2, r8
   152d4:	4639      	mov	r1, r7
   152d6:	4620      	mov	r0, r4
   152d8:	f7f8 f8e5 	bl	d4a6 <os_mbuf_append>
    if (ret) {
   152dc:	b988      	cbnz	r0, 15302 <ble_ll_adv_update_data_mbuf+0x60>
    *omp = om;
   152de:	602c      	str	r4, [r5, #0]
}
   152e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(om);
   152e4:	f7f6 ff5a 	bl	c19c <hal_debugger_connected>
   152e8:	b100      	cbz	r0, 152ec <ble_ll_adv_update_data_mbuf+0x4a>
   152ea:	be01      	bkpt	0x0001
   152ec:	2300      	movs	r3, #0
   152ee:	461a      	mov	r2, r3
   152f0:	4619      	mov	r1, r3
   152f2:	4618      	mov	r0, r3
   152f4:	f7f7 fc56 	bl	cba4 <__assert_func>
        os_mbuf_free_chain(om);
   152f8:	4620      	mov	r0, r4
   152fa:	f7f8 f8bb 	bl	d474 <os_mbuf_free_chain>
        om = NULL;
   152fe:	2400      	movs	r4, #0
        goto done;
   15300:	e7ed      	b.n	152de <ble_ll_adv_update_data_mbuf+0x3c>
        os_mbuf_free_chain(om);
   15302:	4620      	mov	r0, r4
   15304:	f7f8 f8b6 	bl	d474 <os_mbuf_free_chain>
        om = NULL;
   15308:	2400      	movs	r4, #0
   1530a:	e7e8      	b.n	152de <ble_ll_adv_update_data_mbuf+0x3c>

0001530c <ble_ll_adv_set_scan_rsp_data>:
{
   1530c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1530e:	b083      	sub	sp, #12
   15310:	4606      	mov	r6, r0
   15312:	460f      	mov	r7, r1
   15314:	461c      	mov	r4, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   15316:	4610      	mov	r0, r2
   15318:	f7ff fd32 	bl	14d80 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1531c:	2800      	cmp	r0, #0
   1531e:	d03c      	beq.n	1539a <ble_ll_adv_set_scan_rsp_data+0x8e>
   15320:	4605      	mov	r5, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   15322:	8983      	ldrh	r3, [r0, #12]
   15324:	f013 0f02 	tst.w	r3, #2
   15328:	d102      	bne.n	15330 <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1532a:	f013 0f10 	tst.w	r3, #16
   1532e:	d036      	beq.n	1539e <ble_ll_adv_set_scan_rsp_data+0x92>
    switch (operation) {
   15330:	2c03      	cmp	r4, #3
   15332:	d002      	beq.n	1533a <ble_ll_adv_set_scan_rsp_data+0x2e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15334:	2012      	movs	r0, #18
}
   15336:	b003      	add	sp, #12
   15338:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1533a:	f013 0f10 	tst.w	r3, #16
   1533e:	d001      	beq.n	15344 <ble_ll_adv_set_scan_rsp_data+0x38>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   15340:	2f1f      	cmp	r7, #31
   15342:	d82e      	bhi.n	153a2 <ble_ll_adv_set_scan_rsp_data+0x96>
    if (advsm->adv_enabled) {
   15344:	782b      	ldrb	r3, [r5, #0]
   15346:	b1e3      	cbz	r3, 15382 <ble_ll_adv_set_scan_rsp_data+0x76>
        if (advsm->new_scan_rsp_data) {
   15348:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1534a:	b14b      	cbz	r3, 15360 <ble_ll_adv_set_scan_rsp_data+0x54>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1534c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15350:	4628      	mov	r0, r5
   15352:	f7ff fc8c 	bl	14c6e <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   15356:	6ca8      	ldr	r0, [r5, #72]	; 0x48
   15358:	f7f8 f88c 	bl	d474 <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   1535c:	2300      	movs	r3, #0
   1535e:	64ab      	str	r3, [r5, #72]	; 0x48
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   15360:	9700      	str	r7, [sp, #0]
   15362:	4633      	mov	r3, r6
   15364:	221f      	movs	r2, #31
   15366:	2101      	movs	r1, #1
   15368:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1536c:	f7ff ff99 	bl	152a2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   15370:	6cab      	ldr	r3, [r5, #72]	; 0x48
   15372:	b1c3      	cbz	r3, 153a6 <ble_ll_adv_set_scan_rsp_data+0x9a>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   15374:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15378:	4628      	mov	r0, r5
   1537a:	f7ff fc6d 	bl	14c58 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1537e:	2000      	movs	r0, #0
   15380:	e7d9      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   15382:	9700      	str	r7, [sp, #0]
   15384:	4633      	mov	r3, r6
   15386:	221f      	movs	r2, #31
   15388:	2101      	movs	r1, #1
   1538a:	f105 0044 	add.w	r0, r5, #68	; 0x44
   1538e:	f7ff ff88 	bl	152a2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   15392:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   15394:	b14b      	cbz	r3, 153aa <ble_ll_adv_set_scan_rsp_data+0x9e>
    return BLE_ERR_SUCCESS;
   15396:	2000      	movs	r0, #0
   15398:	e7cd      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>
        return BLE_ERR_UNK_ADV_INDENT;
   1539a:	2042      	movs	r0, #66	; 0x42
   1539c:	e7cb      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1539e:	2012      	movs	r0, #18
   153a0:	e7c9      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   153a2:	2012      	movs	r0, #18
   153a4:	e7c7      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_MEM_CAPACITY;
   153a6:	2007      	movs	r0, #7
   153a8:	e7c5      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>
            return BLE_ERR_MEM_CAPACITY;
   153aa:	2007      	movs	r0, #7
   153ac:	e7c3      	b.n	15336 <ble_ll_adv_set_scan_rsp_data+0x2a>

000153ae <ble_ll_adv_set_adv_data>:
{
   153ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   153b0:	b083      	sub	sp, #12
   153b2:	4606      	mov	r6, r0
   153b4:	460f      	mov	r7, r1
   153b6:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   153b8:	4610      	mov	r0, r2
   153ba:	f7ff fce1 	bl	14d80 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   153be:	2800      	cmp	r0, #0
   153c0:	d049      	beq.n	15456 <ble_ll_adv_set_adv_data+0xa8>
   153c2:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   153c4:	8983      	ldrh	r3, [r0, #12]
   153c6:	f013 0f10 	tst.w	r3, #16
   153ca:	d007      	beq.n	153dc <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   153cc:	f013 0f04 	tst.w	r3, #4
   153d0:	d007      	beq.n	153e2 <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   153d2:	f004 fa1a 	bl	1980a <ble_ll_hci_adv_mode_ext>
   153d6:	b120      	cbz	r0, 153e2 <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   153d8:	2012      	movs	r0, #18
   153da:	e005      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   153dc:	f013 0f02 	tst.w	r3, #2
   153e0:	d13b      	bne.n	1545a <ble_ll_adv_set_adv_data+0xac>
    switch (operation) {
   153e2:	2d03      	cmp	r5, #3
   153e4:	d002      	beq.n	153ec <ble_ll_adv_set_adv_data+0x3e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   153e6:	2012      	movs	r0, #18
}
   153e8:	b003      	add	sp, #12
   153ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   153ec:	89a3      	ldrh	r3, [r4, #12]
   153ee:	f013 0f10 	tst.w	r3, #16
   153f2:	d001      	beq.n	153f8 <ble_ll_adv_set_adv_data+0x4a>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   153f4:	2f1f      	cmp	r7, #31
   153f6:	d832      	bhi.n	1545e <ble_ll_adv_set_adv_data+0xb0>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   153f8:	2140      	movs	r1, #64	; 0x40
   153fa:	4620      	mov	r0, r4
   153fc:	f7ff fc37 	bl	14c6e <ble_ll_adv_flags_clear>
    if (advsm->adv_enabled) {
   15400:	7823      	ldrb	r3, [r4, #0]
   15402:	b1e3      	cbz	r3, 1543e <ble_ll_adv_set_adv_data+0x90>
        if (advsm->new_adv_data) {
   15404:	6c23      	ldr	r3, [r4, #64]	; 0x40
   15406:	b14b      	cbz	r3, 1541c <ble_ll_adv_set_adv_data+0x6e>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   15408:	f44f 7100 	mov.w	r1, #512	; 0x200
   1540c:	4620      	mov	r0, r4
   1540e:	f7ff fc2e 	bl	14c6e <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   15412:	6c20      	ldr	r0, [r4, #64]	; 0x40
   15414:	f7f8 f82e 	bl	d474 <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   15418:	2300      	movs	r3, #0
   1541a:	6423      	str	r3, [r4, #64]	; 0x40
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   1541c:	9700      	str	r7, [sp, #0]
   1541e:	4633      	mov	r3, r6
   15420:	221f      	movs	r2, #31
   15422:	2101      	movs	r1, #1
   15424:	f104 0040 	add.w	r0, r4, #64	; 0x40
   15428:	f7ff ff3b 	bl	152a2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   1542c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1542e:	b1c3      	cbz	r3, 15462 <ble_ll_adv_set_adv_data+0xb4>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   15430:	f44f 7100 	mov.w	r1, #512	; 0x200
   15434:	4620      	mov	r0, r4
   15436:	f7ff fc0f 	bl	14c58 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1543a:	2000      	movs	r0, #0
   1543c:	e7d4      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   1543e:	9700      	str	r7, [sp, #0]
   15440:	4633      	mov	r3, r6
   15442:	221f      	movs	r2, #31
   15444:	2101      	movs	r1, #1
   15446:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1544a:	f7ff ff2a 	bl	152a2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   1544e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15450:	b14b      	cbz	r3, 15466 <ble_ll_adv_set_adv_data+0xb8>
    return BLE_ERR_SUCCESS;
   15452:	2000      	movs	r0, #0
   15454:	e7c8      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
        return BLE_ERR_UNK_ADV_INDENT;
   15456:	2042      	movs	r0, #66	; 0x42
   15458:	e7c6      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1545a:	2012      	movs	r0, #18
   1545c:	e7c4      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1545e:	2012      	movs	r0, #18
   15460:	e7c2      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_MEM_CAPACITY;
   15462:	2007      	movs	r0, #7
   15464:	e7c0      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
            return BLE_ERR_MEM_CAPACITY;
   15466:	2007      	movs	r0, #7
   15468:	e7be      	b.n	153e8 <ble_ll_adv_set_adv_data+0x3a>
	...

0001546c <ble_ll_adv_rx_req>:
{
   1546c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15470:	4680      	mov	r8, r0
   15472:	460e      	mov	r6, r1
    advsm = g_ble_ll_cur_adv_sm;
   15474:	4b4d      	ldr	r3, [pc, #308]	; (155ac <ble_ll_adv_rx_req+0x140>)
   15476:	f8d3 9000 	ldr.w	r9, [r3]
    rxbuf = rxpdu->om_data;
   1547a:	680d      	ldr	r5, [r1, #0]
    if (memcmp(advsm->adva, adva, BLE_DEV_ADDR_LEN)) {
   1547c:	2206      	movs	r2, #6
   1547e:	f105 0108 	add.w	r1, r5, #8
   15482:	f109 0024 	add.w	r0, r9, #36	; 0x24
   15486:	f7f9 fa73 	bl	e970 <memcmp>
   1548a:	2800      	cmp	r0, #0
   1548c:	f040 8081 	bne.w	15592 <ble_ll_adv_rx_req+0x126>
   15490:	4682      	mov	sl, r0
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   15492:	f1b8 0f03 	cmp.w	r8, #3
   15496:	d022      	beq.n	154de <ble_ll_adv_rx_req+0x72>
        chk_wl = advsm->adv_filter_policy & 2;
   15498:	f899 4003 	ldrb.w	r4, [r9, #3]
   1549c:	f004 0402 	and.w	r4, r4, #2
    if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   154a0:	782f      	ldrb	r7, [r5, #0]
   154a2:	f017 0740 	ands.w	r7, r7, #64	; 0x40
   154a6:	d000      	beq.n	154aa <ble_ll_adv_rx_req+0x3e>
        txadd = BLE_ADDR_RANDOM;
   154a8:	2701      	movs	r7, #1
    peer = rxbuf + BLE_LL_PDU_HDR_LEN;
   154aa:	3502      	adds	r5, #2
    if (ble_ll_resolv_enabled()) {
   154ac:	f005 f8a2 	bl	1a5f4 <ble_ll_resolv_enabled>
   154b0:	b9d0      	cbnz	r0, 154e8 <ble_ll_adv_rx_req+0x7c>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   154b2:	2c00      	cmp	r4, #0
   154b4:	d14d      	bne.n	15552 <ble_ll_adv_rx_req+0xe6>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   154b6:	8b33      	ldrh	r3, [r6, #24]
   154b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   154bc:	8333      	strh	r3, [r6, #24]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   154be:	f1b8 0f03 	cmp.w	r8, #3
   154c2:	d050      	beq.n	15566 <ble_ll_adv_rx_req+0xfa>
    } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_CONNECT_REQ) {
   154c4:	f1b8 0f05 	cmp.w	r8, #5
   154c8:	d169      	bne.n	1559e <ble_ll_adv_rx_req+0x132>
        if (ble_ll_conn_find_by_peer_addr(peer, peer_addr_type)) {
   154ca:	4639      	mov	r1, r7
   154cc:	4628      	mov	r0, r5
   154ce:	f000 ff97 	bl	16400 <ble_ll_conn_find_by_peer_addr>
   154d2:	2800      	cmp	r0, #0
   154d4:	d166      	bne.n	155a4 <ble_ll_adv_rx_req+0x138>
    rc = -1;
   154d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   154da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chk_wl = advsm->adv_filter_policy & 1;
   154de:	f899 4003 	ldrb.w	r4, [r9, #3]
   154e2:	f004 0401 	and.w	r4, r4, #1
   154e6:	e7db      	b.n	154a0 <ble_ll_adv_rx_req+0x34>
        if (ble_ll_is_rpa(peer, txadd)) {
   154e8:	4639      	mov	r1, r7
   154ea:	4628      	mov	r0, r5
   154ec:	f7ff f91d 	bl	1472a <ble_ll_is_rpa>
   154f0:	4683      	mov	fp, r0
   154f2:	b1f8      	cbz	r0, 15534 <ble_ll_adv_rx_req+0xc8>
            advsm->adv_rpa_index = ble_hw_resolv_list_match();
   154f4:	f005 ffe0 	bl	1b4b8 <ble_hw_resolv_list_match>
   154f8:	b240      	sxtb	r0, r0
   154fa:	f889 0008 	strb.w	r0, [r9, #8]
            if (advsm->adv_rpa_index >= 0) {
   154fe:	2800      	cmp	r0, #0
   15500:	db13      	blt.n	1552a <ble_ll_adv_rx_req+0xbe>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   15502:	8b33      	ldrh	r3, [r6, #24]
   15504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   15508:	8333      	strh	r3, [r6, #24]
                rl = &g_ble_ll_resolv_list[advsm->adv_rpa_index];
   1550a:	f999 2008 	ldrsb.w	r2, [r9, #8]
                if (chk_wl) {
   1550e:	2c00      	cmp	r4, #0
   15510:	d0cf      	beq.n	154b2 <ble_ll_adv_rx_req+0x46>
                    peer = rl->rl_identity_addr;
   15512:	2336      	movs	r3, #54	; 0x36
   15514:	fb03 f302 	mul.w	r3, r3, r2
   15518:	f103 0520 	add.w	r5, r3, #32
   1551c:	4a24      	ldr	r2, [pc, #144]	; (155b0 <ble_ll_adv_rx_req+0x144>)
   1551e:	4415      	add	r5, r2
   15520:	3504      	adds	r5, #4
                    peer_addr_type = rl->rl_addr_type;
   15522:	5cd7      	ldrb	r7, [r2, r3]
                    resolved = 1;
   15524:	f04f 0a01 	mov.w	sl, #1
   15528:	e7c3      	b.n	154b2 <ble_ll_adv_rx_req+0x46>
                if (chk_wl) {
   1552a:	2c00      	cmp	r4, #0
   1552c:	d0c1      	beq.n	154b2 <ble_ll_adv_rx_req+0x46>
                    return -1;
   1552e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15532:	e7d2      	b.n	154da <ble_ll_adv_rx_req+0x6e>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   15534:	4639      	mov	r1, r7
   15536:	4628      	mov	r0, r5
   15538:	f004 fe56 	bl	1a1e8 <ble_ll_resolv_list_find>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1553c:	b128      	cbz	r0, 1554a <ble_ll_adv_rx_req+0xde>
   1553e:	7842      	ldrb	r2, [r0, #1]
   15540:	b92a      	cbnz	r2, 1554e <ble_ll_adv_rx_req+0xe2>
                rl->rl_has_peer) {
   15542:	78c3      	ldrb	r3, [r0, #3]
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   15544:	bb43      	cbnz	r3, 15598 <ble_ll_adv_rx_req+0x12c>
    resolved = 0;
   15546:	46da      	mov	sl, fp
   15548:	e7b3      	b.n	154b2 <ble_ll_adv_rx_req+0x46>
   1554a:	46da      	mov	sl, fp
   1554c:	e7b1      	b.n	154b2 <ble_ll_adv_rx_req+0x46>
   1554e:	46da      	mov	sl, fp
   15550:	e7af      	b.n	154b2 <ble_ll_adv_rx_req+0x46>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   15552:	4652      	mov	r2, sl
   15554:	4639      	mov	r1, r7
   15556:	4628      	mov	r0, r5
   15558:	f005 fda4 	bl	1b0a4 <ble_ll_whitelist_match>
   1555c:	2800      	cmp	r0, #0
   1555e:	d1aa      	bne.n	154b6 <ble_ll_adv_rx_req+0x4a>
        return -1;
   15560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15564:	e7b9      	b.n	154da <ble_ll_adv_rx_req+0x6e>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   15566:	4649      	mov	r1, r9
   15568:	4812      	ldr	r0, [pc, #72]	; (155b4 <ble_ll_adv_rx_req+0x148>)
   1556a:	f006 fb25 	bl	1bbb8 <ble_phy_set_txend_cb>
        rc = ble_phy_tx(ble_ll_adv_scan_rsp_legacy_pdu_make, advsm,
   1556e:	2200      	movs	r2, #0
   15570:	4649      	mov	r1, r9
   15572:	4811      	ldr	r0, [pc, #68]	; (155b8 <ble_ll_adv_rx_req+0x14c>)
   15574:	f006 fdae 	bl	1c0d4 <ble_phy_tx>
        if (!rc) {
   15578:	2800      	cmp	r0, #0
   1557a:	d1ae      	bne.n	154da <ble_ll_adv_rx_req+0x6e>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_SCAN_RSP_TXD;
   1557c:	8b33      	ldrh	r3, [r6, #24]
   1557e:	f043 0310 	orr.w	r3, r3, #16
   15582:	8333      	strh	r3, [r6, #24]
            STATS_INC(ble_ll_stats, scan_rsp_txg);
   15584:	4a0d      	ldr	r2, [pc, #52]	; (155bc <ble_ll_adv_rx_req+0x150>)
   15586:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1558a:	3301      	adds	r3, #1
   1558c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
   15590:	e7a3      	b.n	154da <ble_ll_adv_rx_req+0x6e>
        return -1;
   15592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15596:	e7a0      	b.n	154da <ble_ll_adv_rx_req+0x6e>
                return -1;
   15598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1559c:	e79d      	b.n	154da <ble_ll_adv_rx_req+0x6e>
    rc = -1;
   1559e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155a2:	e79a      	b.n	154da <ble_ll_adv_rx_req+0x6e>
            return -1;
   155a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   155a8:	e797      	b.n	154da <ble_ll_adv_rx_req+0x6e>
   155aa:	bf00      	nop
   155ac:	200022a8 	.word	0x200022a8
   155b0:	2000258c 	.word	0x2000258c
   155b4:	00014d49 	.word	0x00014d49
   155b8:	0001515b 	.word	0x0001515b
   155bc:	20001ea8 	.word	0x20001ea8

000155c0 <ble_ll_adv_conn_req_rxd>:
{
   155c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   155c4:	4606      	mov	r6, r0
   155c6:	460f      	mov	r7, r1
   155c8:	4614      	mov	r4, r2
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   155ca:	8992      	ldrh	r2, [r2, #12]
   155cc:	f012 0f10 	tst.w	r2, #16
   155d0:	d103      	bne.n	155da <ble_ll_adv_conn_req_rxd+0x1a>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   155d2:	8963      	ldrh	r3, [r4, #10]
   155d4:	f013 0f08 	tst.w	r3, #8
   155d8:	d066      	beq.n	156a8 <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   155da:	883b      	ldrh	r3, [r7, #0]
   155dc:	f403 6880 	and.w	r8, r3, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   155e0:	f106 0902 	add.w	r9, r6, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   155e4:	f013 0f40 	tst.w	r3, #64	; 0x40
   155e8:	d060      	beq.n	156ac <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   155ea:	7835      	ldrb	r5, [r6, #0]
   155ec:	f015 0540 	ands.w	r5, r5, #64	; 0x40
   155f0:	d000      	beq.n	155f4 <ble_ll_adv_conn_req_rxd+0x34>
            addr_type = BLE_ADDR_RANDOM;
   155f2:	2501      	movs	r5, #1
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   155f4:	f012 0f04 	tst.w	r2, #4
   155f8:	d01b      	beq.n	15632 <ble_ll_adv_conn_req_rxd+0x72>
            if (resolved) {
   155fa:	f1b8 0f00 	cmp.w	r8, #0
   155fe:	d00f      	beq.n	15620 <ble_ll_adv_conn_req_rxd+0x60>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   15600:	f994 2008 	ldrsb.w	r2, [r4, #8]
   15604:	2336      	movs	r3, #54	; 0x36
   15606:	fb03 f302 	mul.w	r3, r3, r2
   1560a:	f103 0120 	add.w	r1, r3, #32
   1560e:	4a2a      	ldr	r2, [pc, #168]	; (156b8 <ble_ll_adv_conn_req_rxd+0xf8>)
   15610:	4411      	add	r1, r2
   15612:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   15614:	5cd5      	ldrb	r5, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   15616:	7963      	ldrb	r3, [r4, #5]
   15618:	42ab      	cmp	r3, r5
   1561a:	d003      	beq.n	15624 <ble_ll_adv_conn_req_rxd+0x64>
                valid = 0;
   1561c:	2500      	movs	r5, #0
   1561e:	e046      	b.n	156ae <ble_ll_adv_conn_req_rxd+0xee>
            ident_addr = inita;
   15620:	4649      	mov	r1, r9
   15622:	e7f8      	b.n	15616 <ble_ll_adv_conn_req_rxd+0x56>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   15624:	2206      	movs	r2, #6
   15626:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1562a:	f7f9 f9a1 	bl	e970 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   1562e:	2800      	cmp	r0, #0
   15630:	d140      	bne.n	156b4 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   15632:	f1b8 0f00 	cmp.w	r8, #0
   15636:	d114      	bne.n	15662 <ble_ll_adv_conn_req_rxd+0xa2>
                                         !(advsm->props &
   15638:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_periph_start(rxbuf, addr_type, hdr,
   1563a:	091b      	lsrs	r3, r3, #4
   1563c:	f083 0301 	eor.w	r3, r3, #1
   15640:	f003 0301 	and.w	r3, r3, #1
   15644:	463a      	mov	r2, r7
   15646:	4629      	mov	r1, r5
   15648:	4630      	mov	r0, r6
   1564a:	f001 fe8d 	bl	17368 <ble_ll_conn_periph_start>
        if (valid) {
   1564e:	4605      	mov	r5, r0
   15650:	b368      	cbz	r0, 156ae <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   15652:	8963      	ldrh	r3, [r4, #10]
   15654:	f013 0f08 	tst.w	r3, #8
   15658:	d129      	bne.n	156ae <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1565a:	4620      	mov	r0, r4
   1565c:	f7ff fdd4 	bl	15208 <ble_ll_adv_sm_stop>
   15660:	e025      	b.n	156ae <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   15662:	f8d9 3000 	ldr.w	r3, [r9]
   15666:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
   1566a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1566e:	85e3      	strh	r3, [r4, #46]	; 0x2e
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   15670:	4649      	mov	r1, r9
   15672:	f994 0008 	ldrsb.w	r0, [r4, #8]
   15676:	f004 ff8f 	bl	1a598 <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1567a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1567e:	2236      	movs	r2, #54	; 0x36
   15680:	fb02 f303 	mul.w	r3, r2, r3
   15684:	3320      	adds	r3, #32
   15686:	490c      	ldr	r1, [pc, #48]	; (156b8 <ble_ll_adv_conn_req_rxd+0xf8>)
   15688:	440b      	add	r3, r1
            memcpy(inita,
   1568a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1568e:	f8c6 0002 	str.w	r0, [r6, #2]
   15692:	889b      	ldrh	r3, [r3, #4]
   15694:	f8a9 3004 	strh.w	r3, [r9, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   15698:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1569c:	fb02 f203 	mul.w	r2, r2, r3
   156a0:	5c8d      	ldrb	r5, [r1, r2]
            addr_type += 2;
   156a2:	3502      	adds	r5, #2
   156a4:	b2ed      	uxtb	r5, r5
   156a6:	e7c7      	b.n	15638 <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   156a8:	2500      	movs	r5, #0
   156aa:	e000      	b.n	156ae <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   156ac:	2500      	movs	r5, #0
}
   156ae:	4628      	mov	r0, r5
   156b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                valid = 0;
   156b4:	2500      	movs	r5, #0
   156b6:	e7fa      	b.n	156ae <ble_ll_adv_conn_req_rxd+0xee>
   156b8:	2000258c 	.word	0x2000258c

000156bc <ble_ll_adv_sm_stop_timeout>:
{
   156bc:	b510      	push	{r4, lr}
   156be:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   156c0:	8983      	ldrh	r3, [r0, #12]
   156c2:	f013 0f08 	tst.w	r3, #8
   156c6:	d103      	bne.n	156d0 <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   156c8:	4620      	mov	r0, r4
   156ca:	f7ff fd9d 	bl	15208 <ble_ll_adv_sm_stop>
}
   156ce:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   156d0:	4603      	mov	r3, r0
   156d2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   156d4:	213c      	movs	r1, #60	; 0x3c
   156d6:	2000      	movs	r0, #0
   156d8:	f002 f83a 	bl	17750 <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   156dc:	2300      	movs	r3, #0
   156de:	64e3      	str	r3, [r4, #76]	; 0x4c
   156e0:	e7f2      	b.n	156c8 <ble_ll_adv_sm_stop_timeout+0xc>
	...

000156e4 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   156e4:	b510      	push	{r4, lr}
    struct ble_ll_sched_item *sch;
    uint32_t max_delay_ticks;
    int rc;

    BLE_LL_ASSERT(advsm->adv_enabled);
   156e6:	7803      	ldrb	r3, [r0, #0]
   156e8:	b19b      	cbz	r3, 15712 <ble_ll_adv_reschedule_event+0x2e>
   156ea:	4604      	mov	r4, r0

    sch = &advsm->adv_sch;
   156ec:	3060      	adds	r0, #96	; 0x60

    if (!sch->enqueued) {
   156ee:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   156f2:	b96b      	cbnz	r3, 15710 <ble_ll_adv_reschedule_event+0x2c>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   156f4:	89a3      	ldrh	r3, [r4, #12]
   156f6:	f013 0f08 	tst.w	r3, #8
   156fa:	d014      	beq.n	15726 <ble_ll_adv_reschedule_event+0x42>
            max_delay_ticks = 0;
   156fc:	2100      	movs	r1, #0
        } else {
            max_delay_ticks = ble_ll_tmr_u2t(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(sch, max_delay_ticks);
   156fe:	f005 fb2d 	bl	1ad5c <ble_ll_sched_adv_reschedule>
        if (rc) {
   15702:	b998      	cbnz	r0, 1572c <ble_ll_adv_reschedule_event+0x48>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        advsm->adv_event_start_time = sch->start_time +
   15704:	6e62      	ldr	r2, [r4, #100]	; 0x64
   15706:	4b0b      	ldr	r3, [pc, #44]	; (15734 <ble_ll_adv_reschedule_event+0x50>)
   15708:	781b      	ldrb	r3, [r3, #0]
   1570a:	4413      	add	r3, r2
   1570c:	61a3      	str	r3, [r4, #24]
                                      g_ble_ll_sched_offset_ticks;
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1570e:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   15710:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(advsm->adv_enabled);
   15712:	f7f6 fd43 	bl	c19c <hal_debugger_connected>
   15716:	b100      	cbz	r0, 1571a <ble_ll_adv_reschedule_event+0x36>
   15718:	be01      	bkpt	0x0001
   1571a:	2300      	movs	r3, #0
   1571c:	461a      	mov	r2, r3
   1571e:	4619      	mov	r1, r3
   15720:	4618      	mov	r0, r3
   15722:	f7f7 fa3f 	bl	cba4 <__assert_func>
            max_delay_ticks = ble_ll_tmr_u2t(BLE_LL_ADV_DELAY_MS_MAX * 1000);
   15726:	f240 1147 	movw	r1, #327	; 0x147
   1572a:	e7e8      	b.n	156fe <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1572c:	4620      	mov	r0, r4
   1572e:	f7ff faf3 	bl	14d18 <ble_ll_adv_drop_event>
            return;
   15732:	e7ed      	b.n	15710 <ble_ll_adv_reschedule_event+0x2c>
   15734:	200026a8 	.word	0x200026a8

00015738 <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   15738:	b510      	push	{r4, lr}
   1573a:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   1573c:	227c      	movs	r2, #124	; 0x7c
   1573e:	2100      	movs	r1, #0
   15740:	f7f9 f95f 	bl	ea02 <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   15744:	f44f 6300 	mov.w	r3, #2048	; 0x800
   15748:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1574a:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   1574c:	2307      	movs	r3, #7
   1574e:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   15750:	2300      	movs	r3, #0
   15752:	6523      	str	r3, [r4, #80]	; 0x50
   15754:	65e3      	str	r3, [r4, #92]	; 0x5c
    ev->ev.ev_queued = 0;
   15756:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    ev->ev.ev_cb = (os_event_fn *)fn;
   1575a:	4b03      	ldr	r3, [pc, #12]	; (15768 <ble_ll_adv_sm_init+0x30>)
   1575c:	6563      	str	r3, [r4, #84]	; 0x54
    ev->ev.ev_arg = arg;
   1575e:	65a4      	str	r4, [r4, #88]	; 0x58
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   15760:	2312      	movs	r3, #18
   15762:	81a3      	strh	r3, [r4, #12]
}
   15764:	bd10      	pop	{r4, pc}
   15766:	bf00      	nop
   15768:	000158c9 	.word	0x000158c9

0001576c <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   1576c:	7903      	ldrb	r3, [r0, #4]
   1576e:	2b01      	cmp	r3, #1
   15770:	d90e      	bls.n	15790 <ble_ll_adv_chk_rpa_timeout+0x24>
{
   15772:	b510      	push	{r4, lr}
   15774:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   15776:	8943      	ldrh	r3, [r0, #10]
   15778:	f413 7f80 	tst.w	r3, #256	; 0x100
   1577c:	d100      	bne.n	15780 <ble_ll_adv_chk_rpa_timeout+0x14>
}
   1577e:	bd10      	pop	{r4, pc}
        ble_ll_adv_rpa_update(advsm);
   15780:	f7ff fa81 	bl	14c86 <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   15784:	f44f 7180 	mov.w	r1, #256	; 0x100
   15788:	4620      	mov	r0, r4
   1578a:	f7ff fa70 	bl	14c6e <ble_ll_adv_flags_clear>
   1578e:	e7f6      	b.n	1577e <ble_ll_adv_chk_rpa_timeout+0x12>
   15790:	4770      	bx	lr
	...

00015794 <ble_ll_adv_done>:
{
   15794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    BLE_LL_ASSERT(advsm->adv_enabled);
   15798:	7803      	ldrb	r3, [r0, #0]
   1579a:	2b00      	cmp	r3, #0
   1579c:	d041      	beq.n	15822 <ble_ll_adv_done+0x8e>
   1579e:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   157a0:	f005 f850 	bl	1a844 <ble_ll_rfmgmt_release>
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   157a4:	4620      	mov	r0, r4
   157a6:	f7ff fd05 	bl	151b4 <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   157aa:	f104 0560 	add.w	r5, r4, #96	; 0x60
   157ae:	4628      	mov	r0, r5
   157b0:	f005 fb58 	bl	1ae64 <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   157b4:	f104 0650 	add.w	r6, r4, #80	; 0x50
   157b8:	4631      	mov	r1, r6
   157ba:	483b      	ldr	r0, [pc, #236]	; (158a8 <ble_ll_adv_done+0x114>)
   157bc:	f7f7 fdbc 	bl	d338 <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   157c0:	4620      	mov	r0, r4
   157c2:	f7ff fa3c 	bl	14c3e <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   157c6:	79a3      	ldrb	r3, [r4, #6]
   157c8:	4283      	cmp	r3, r0
   157ca:	d034      	beq.n	15836 <ble_ll_adv_done+0xa2>
        ++advsm->adv_chan;
   157cc:	3301      	adds	r3, #1
   157ce:	b2db      	uxtb	r3, r3
   157d0:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   157d2:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   157d6:	2201      	movs	r2, #1
   157d8:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   157da:	78a1      	ldrb	r1, [r4, #2]
   157dc:	420a      	tst	r2, r1
   157de:	d101      	bne.n	157e4 <ble_ll_adv_done+0x50>
            ++advsm->adv_chan;
   157e0:	3301      	adds	r3, #1
   157e2:	71a3      	strb	r3, [r4, #6]
    return os_cputime_get32();
   157e4:	f015 fa6b 	bl	2acbe <os_cputime_get32>
        advsm->adv_pdu_start_time = ble_ll_tmr_get() +
   157e8:	4b30      	ldr	r3, [pc, #192]	; (158ac <ble_ll_adv_done+0x118>)
   157ea:	781b      	ldrb	r3, [r3, #0]
   157ec:	4403      	add	r3, r0
   157ee:	61e3      	str	r3, [r4, #28]
        resched_pdu = 1;
   157f0:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   157f2:	89a3      	ldrh	r3, [r4, #12]
   157f4:	f013 0f08 	tst.w	r3, #8
   157f8:	d004      	beq.n	15804 <ble_ll_adv_done+0x70>
        LL_TMR_GEQ(advsm->adv_pdu_start_time, advsm->adv_end_time)) {
   157fa:	69e3      	ldr	r3, [r4, #28]
   157fc:	6a22      	ldr	r2, [r4, #32]
   157fe:	1a9b      	subs	r3, r3, r2
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   15800:	2b00      	cmp	r3, #0
   15802:	da40      	bge.n	15886 <ble_ll_adv_done+0xf2>
    ble_ll_adv_chk_rpa_timeout(advsm);
   15804:	4620      	mov	r0, r4
   15806:	f7ff ffb1 	bl	1576c <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   1580a:	4620      	mov	r0, r4
   1580c:	f7ff fb10 	bl	14e30 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   15810:	2f00      	cmp	r7, #0
   15812:	d03c      	beq.n	1588e <ble_ll_adv_done+0xfa>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   15814:	4628      	mov	r0, r5
   15816:	f005 faeb 	bl	1adf0 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   1581a:	2800      	cmp	r0, #0
   1581c:	d13b      	bne.n	15896 <ble_ll_adv_done+0x102>
}
   1581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(advsm->adv_enabled);
   15822:	f7f6 fcbb 	bl	c19c <hal_debugger_connected>
   15826:	b100      	cbz	r0, 1582a <ble_ll_adv_done+0x96>
   15828:	be01      	bkpt	0x0001
   1582a:	2300      	movs	r3, #0
   1582c:	461a      	mov	r2, r3
   1582e:	4619      	mov	r1, r3
   15830:	4618      	mov	r0, r3
   15832:	f7f7 f9b7 	bl	cba4 <__assert_func>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   15836:	4620      	mov	r0, r4
   15838:	f7ff f9f4 	bl	14c24 <ble_ll_adv_first_chan>
   1583c:	71a0      	strb	r0, [r4, #6]
        itvl = advsm->adv_itvl_usecs;
   1583e:	6960      	ldr	r0, [r4, #20]
    if (usecs <= 31249) {
   15840:	f647 2311 	movw	r3, #31249	; 0x7a11
   15844:	4298      	cmp	r0, r3
   15846:	d811      	bhi.n	1586c <ble_ll_adv_done+0xd8>
        return (usecs * 137439) / 4194304;
   15848:	4b19      	ldr	r3, [pc, #100]	; (158b0 <ble_ll_adv_done+0x11c>)
   1584a:	fb03 f000 	mul.w	r0, r3, r0
   1584e:	ea4f 5890 	mov.w	r8, r0, lsr #22
        advsm->adv_event_start_time += tick_itvl;
   15852:	69a3      	ldr	r3, [r4, #24]
   15854:	4443      	add	r3, r8
   15856:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   15858:	61e3      	str	r3, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1585a:	4a14      	ldr	r2, [pc, #80]	; (158ac <ble_ll_adv_done+0x118>)
   1585c:	7817      	ldrb	r7, [r2, #0]
   1585e:	1bdf      	subs	r7, r3, r7
    return os_cputime_get32();
   15860:	f015 fa2d 	bl	2acbe <os_cputime_get32>
        if (delta_t < 0) {
   15864:	1a3b      	subs	r3, r7, r0
   15866:	d40a      	bmi.n	1587e <ble_ll_adv_done+0xea>
        resched_pdu = 0;
   15868:	2700      	movs	r7, #0
   1586a:	e7c2      	b.n	157f2 <ble_ll_adv_done+0x5e>
    return os_cputime_usecs_to_ticks(usecs);
   1586c:	f015 fa2c 	bl	2acc8 <os_cputime_usecs_to_ticks>
   15870:	4680      	mov	r8, r0
   15872:	e7ee      	b.n	15852 <ble_ll_adv_done+0xbe>
                advsm->adv_event_start_time += tick_itvl;
   15874:	69a2      	ldr	r2, [r4, #24]
   15876:	4442      	add	r2, r8
   15878:	61a2      	str	r2, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1587a:	61e2      	str	r2, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   1587c:	4443      	add	r3, r8
            while (delta_t < 0) {
   1587e:	2b00      	cmp	r3, #0
   15880:	dbf8      	blt.n	15874 <ble_ll_adv_done+0xe0>
        resched_pdu = 0;
   15882:	2700      	movs	r7, #0
   15884:	e7b5      	b.n	157f2 <ble_ll_adv_done+0x5e>
        ble_ll_adv_sm_stop_timeout(advsm);
   15886:	4620      	mov	r0, r4
   15888:	f7ff ff18 	bl	156bc <ble_ll_adv_sm_stop_timeout>
        return;
   1588c:	e7c7      	b.n	1581e <ble_ll_adv_done+0x8a>
        ble_ll_adv_reschedule_event(advsm);
   1588e:	4620      	mov	r0, r4
   15890:	f7ff ff28 	bl	156e4 <ble_ll_adv_reschedule_event>
        return;
   15894:	e7c3      	b.n	1581e <ble_ll_adv_done+0x8a>
        STATS_INC(ble_ll_stats, adv_resched_pdu_fail);
   15896:	4a07      	ldr	r2, [pc, #28]	; (158b4 <ble_ll_adv_done+0x120>)
   15898:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1589a:	3301      	adds	r3, #1
   1589c:	6753      	str	r3, [r2, #116]	; 0x74
    os_eventq_put(&evq->evq, &ev->ev);
   1589e:	4631      	mov	r1, r6
   158a0:	4801      	ldr	r0, [pc, #4]	; (158a8 <ble_ll_adv_done+0x114>)
   158a2:	f7f7 fcb2 	bl	d20a <os_eventq_put>
}
   158a6:	e7ba      	b.n	1581e <ble_ll_adv_done+0x8a>
   158a8:	20001fc8 	.word	0x20001fc8
   158ac:	200026a8 	.word	0x200026a8
   158b0:	000218df 	.word	0x000218df
   158b4:	20001ea8 	.word	0x20001ea8

000158b8 <ble_ll_adv_make_done>:
{
   158b8:	b510      	push	{r4, lr}
   158ba:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   158bc:	f7ff fa21 	bl	14d02 <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   158c0:	4620      	mov	r0, r4
   158c2:	f7ff ff67 	bl	15794 <ble_ll_adv_done>
}
   158c6:	bd10      	pop	{r4, pc}

000158c8 <ble_ll_adv_event_done>:
{
   158c8:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   158ca:	6880      	ldr	r0, [r0, #8]
   158cc:	f7ff ff62 	bl	15794 <ble_ll_adv_done>
}
   158d0:	bd08      	pop	{r3, pc}
	...

000158d4 <ble_ll_adv_rpa_timeout>:
{
   158d4:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   158d6:	2400      	movs	r4, #0
   158d8:	2c00      	cmp	r4, #0
   158da:	dd00      	ble.n	158de <ble_ll_adv_rpa_timeout+0xa>
}
   158dc:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   158de:	4a08      	ldr	r2, [pc, #32]	; (15900 <ble_ll_adv_rpa_timeout+0x2c>)
   158e0:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
   158e4:	008b      	lsls	r3, r1, #2
   158e6:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   158e8:	5cd3      	ldrb	r3, [r2, r3]
   158ea:	b113      	cbz	r3, 158f2 <ble_ll_adv_rpa_timeout+0x1e>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   158ec:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   158ee:	2b01      	cmp	r3, #1
   158f0:	d801      	bhi.n	158f6 <ble_ll_adv_rpa_timeout+0x22>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   158f2:	3401      	adds	r4, #1
   158f4:	e7f0      	b.n	158d8 <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   158f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   158fa:	f7ff f9ad 	bl	14c58 <ble_ll_adv_flags_set>
   158fe:	e7f8      	b.n	158f2 <ble_ll_adv_rpa_timeout+0x1e>
   15900:	2000222c 	.word	0x2000222c

00015904 <ble_ll_adv_event_rmvd_from_sched>:
{
   15904:	b508      	push	{r3, lr}
    ble_ll_adv_drop_event(advsm);
   15906:	f7ff fa07 	bl	14d18 <ble_ll_adv_drop_event>
}
   1590a:	bd08      	pop	{r3, pc}

0001590c <ble_ll_adv_halt>:
{
   1590c:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   1590e:	4b0b      	ldr	r3, [pc, #44]	; (1593c <ble_ll_adv_halt+0x30>)
   15910:	681c      	ldr	r4, [r3, #0]
   15912:	b194      	cbz	r4, 1593a <ble_ll_adv_halt+0x2e>
        ble_phy_txpwr_set(g_ble_ll_tx_power);
   15914:	4b0a      	ldr	r3, [pc, #40]	; (15940 <ble_ll_adv_halt+0x34>)
   15916:	f993 0000 	ldrsb.w	r0, [r3]
   1591a:	f006 f97b 	bl	1bc14 <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   1591e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   15922:	4808      	ldr	r0, [pc, #32]	; (15944 <ble_ll_adv_halt+0x38>)
   15924:	f7f7 fc71 	bl	d20a <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15928:	2000      	movs	r0, #0
   1592a:	f7ff f80d 	bl	14948 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   1592e:	4c03      	ldr	r4, [pc, #12]	; (1593c <ble_ll_adv_halt+0x30>)
   15930:	6820      	ldr	r0, [r4, #0]
   15932:	f7ff f9e6 	bl	14d02 <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   15936:	2300      	movs	r3, #0
   15938:	6023      	str	r3, [r4, #0]
}
   1593a:	bd10      	pop	{r4, pc}
   1593c:	200022a8 	.word	0x200022a8
   15940:	20002218 	.word	0x20002218
   15944:	20001fc8 	.word	0x20001fc8

00015948 <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   15948:	290f      	cmp	r1, #15
   1594a:	d163      	bne.n	15a14 <ble_ll_adv_set_adv_params+0xcc>
   1594c:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   1594e:	4a3e      	ldr	r2, [pc, #248]	; (15a48 <ble_ll_adv_set_adv_params+0x100>)
   15950:	7811      	ldrb	r1, [r2, #0]
   15952:	2900      	cmp	r1, #0
   15954:	d160      	bne.n	15a18 <ble_ll_adv_set_adv_params+0xd0>
{
   15956:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   15958:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   1595a:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   1595c:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   1595e:	7902      	ldrb	r2, [r0, #4]
   15960:	2a04      	cmp	r2, #4
   15962:	d85b      	bhi.n	15a1c <ble_ll_adv_set_adv_params+0xd4>
   15964:	e8df f002 	tbb	[pc, r2]
   15968:	54523c03 	.word	0x54523c03
   1596c:	48          	.byte	0x48
   1596d:	00          	.byte	0x00
   1596e:	2213      	movs	r2, #19
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   15970:	f012 0f08 	tst.w	r2, #8
   15974:	d10b      	bne.n	1598e <ble_ll_adv_set_adv_params+0x46>
        if ((adv_itvl_min > adv_itvl_max) ||
   15976:	42ac      	cmp	r4, r5
   15978:	d852      	bhi.n	15a20 <ble_ll_adv_set_adv_params+0xd8>
   1597a:	2c1f      	cmp	r4, #31
   1597c:	d952      	bls.n	15a24 <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   1597e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   15982:	d851      	bhi.n	15a28 <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   15984:	2d1f      	cmp	r5, #31
   15986:	d951      	bls.n	15a2c <ble_ll_adv_set_adv_params+0xe4>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   15988:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1598c:	d850      	bhi.n	15a30 <ble_ll_adv_set_adv_params+0xe8>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1598e:	7959      	ldrb	r1, [r3, #5]
   15990:	2903      	cmp	r1, #3
   15992:	d84f      	bhi.n	15a34 <ble_ll_adv_set_adv_params+0xec>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   15994:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   15996:	2901      	cmp	r1, #1
   15998:	d84e      	bhi.n	15a38 <ble_ll_adv_set_adv_params+0xf0>
    advsm->adv_txpwr = g_ble_ll_tx_power;
   1599a:	492c      	ldr	r1, [pc, #176]	; (15a4c <ble_ll_adv_set_adv_params+0x104>)
   1599c:	7808      	ldrb	r0, [r1, #0]
   1599e:	492a      	ldr	r1, [pc, #168]	; (15a48 <ble_ll_adv_set_adv_params+0x100>)
   159a0:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   159a2:	7959      	ldrb	r1, [r3, #5]
   159a4:	2901      	cmp	r1, #1
   159a6:	d906      	bls.n	159b6 <ble_ll_adv_set_adv_params+0x6e>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   159a8:	4619      	mov	r1, r3
   159aa:	4f27      	ldr	r7, [pc, #156]	; (15a48 <ble_ll_adv_set_adv_params+0x100>)
   159ac:	f851 0f07 	ldr.w	r0, [r1, #7]!
   159b0:	6338      	str	r0, [r7, #48]	; 0x30
   159b2:	8889      	ldrh	r1, [r1, #4]
   159b4:	86b9      	strh	r1, [r7, #52]	; 0x34
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   159b6:	7b58      	ldrb	r0, [r3, #13]
   159b8:	f010 0ff8 	tst.w	r0, #248	; 0xf8
   159bc:	d13e      	bne.n	15a3c <ble_ll_adv_set_adv_params+0xf4>
   159be:	2800      	cmp	r0, #0
   159c0:	d03e      	beq.n	15a40 <ble_ll_adv_set_adv_params+0xf8>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   159c2:	2e03      	cmp	r6, #3
   159c4:	d83e      	bhi.n	15a44 <ble_ll_adv_set_adv_params+0xfc>
    advsm->own_addr_type = cmd->own_addr_type;
   159c6:	795f      	ldrb	r7, [r3, #5]
   159c8:	491f      	ldr	r1, [pc, #124]	; (15a48 <ble_ll_adv_set_adv_params+0x100>)
   159ca:	710f      	strb	r7, [r1, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   159cc:	799b      	ldrb	r3, [r3, #6]
   159ce:	714b      	strb	r3, [r1, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   159d0:	70ce      	strb	r6, [r1, #3]
    advsm->adv_chanmask = cmd->chan_map;
   159d2:	7088      	strb	r0, [r1, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   159d4:	81cc      	strh	r4, [r1, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   159d6:	820d      	strh	r5, [r1, #16]
    advsm->props = props;
   159d8:	818a      	strh	r2, [r1, #12]
    return 0;
   159da:	2000      	movs	r0, #0
}
   159dc:	bcf0      	pop	{r4, r5, r6, r7}
   159de:	4770      	bx	lr
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   159e0:	461a      	mov	r2, r3
   159e2:	4c19      	ldr	r4, [pc, #100]	; (15a48 <ble_ll_adv_set_adv_params+0x100>)
   159e4:	f852 0f07 	ldr.w	r0, [r2, #7]!
   159e8:	6320      	str	r0, [r4, #48]	; 0x30
   159ea:	8892      	ldrh	r2, [r2, #4]
   159ec:	86a2      	strh	r2, [r4, #52]	; 0x34
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   159ee:	460e      	mov	r6, r1
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   159f0:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   159f2:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   159f4:	462c      	mov	r4, r5
        break;
   159f6:	e7bb      	b.n	15970 <ble_ll_adv_set_adv_params+0x28>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   159f8:	461a      	mov	r2, r3
   159fa:	4e13      	ldr	r6, [pc, #76]	; (15a48 <ble_ll_adv_set_adv_params+0x100>)
   159fc:	f852 0f07 	ldr.w	r0, [r2, #7]!
   15a00:	6330      	str	r0, [r6, #48]	; 0x30
   15a02:	8892      	ldrh	r2, [r2, #4]
   15a04:	86b2      	strh	r2, [r6, #52]	; 0x34
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   15a06:	460e      	mov	r6, r1
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   15a08:	2215      	movs	r2, #21
        break;
   15a0a:	e7b1      	b.n	15970 <ble_ll_adv_set_adv_params+0x28>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   15a0c:	2212      	movs	r2, #18
        break;
   15a0e:	e7af      	b.n	15970 <ble_ll_adv_set_adv_params+0x28>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   15a10:	2210      	movs	r2, #16
   15a12:	e7ad      	b.n	15970 <ble_ll_adv_set_adv_params+0x28>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15a14:	2012      	movs	r0, #18
   15a16:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   15a18:	200c      	movs	r0, #12
}
   15a1a:	4770      	bx	lr
    switch (cmd->type) {
   15a1c:	2012      	movs	r0, #18
   15a1e:	e7dd      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   15a20:	2012      	movs	r0, #18
   15a22:	e7db      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a24:	2012      	movs	r0, #18
   15a26:	e7d9      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a28:	2012      	movs	r0, #18
   15a2a:	e7d7      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a2c:	2012      	movs	r0, #18
   15a2e:	e7d5      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a30:	2012      	movs	r0, #18
   15a32:	e7d3      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15a34:	2012      	movs	r0, #18
   15a36:	e7d1      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a38:	2012      	movs	r0, #18
   15a3a:	e7cf      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15a3c:	2012      	movs	r0, #18
   15a3e:	e7cd      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a40:	2012      	movs	r0, #18
   15a42:	e7cb      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15a44:	2012      	movs	r0, #18
   15a46:	e7c9      	b.n	159dc <ble_ll_adv_set_adv_params+0x94>
   15a48:	2000222c 	.word	0x2000222c
   15a4c:	20002218 	.word	0x20002218

00015a50 <ble_ll_adv_read_txpwr>:
    rsp->power_level = g_ble_ll_tx_power;
   15a50:	4b03      	ldr	r3, [pc, #12]	; (15a60 <ble_ll_adv_read_txpwr+0x10>)
   15a52:	f993 3000 	ldrsb.w	r3, [r3]
   15a56:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   15a58:	2301      	movs	r3, #1
   15a5a:	700b      	strb	r3, [r1, #0]
}
   15a5c:	2000      	movs	r0, #0
   15a5e:	4770      	bx	lr
   15a60:	20002218 	.word	0x20002218

00015a64 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   15a64:	2901      	cmp	r1, #1
   15a66:	d001      	beq.n	15a6c <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15a68:	2012      	movs	r0, #18
}
   15a6a:	4770      	bx	lr
{
   15a6c:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   15a6e:	2300      	movs	r3, #0
   15a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15a74:	7801      	ldrb	r1, [r0, #0]
   15a76:	4618      	mov	r0, r3
   15a78:	f7ff fbfc 	bl	15274 <ble_ll_adv_set_enable>
}
   15a7c:	bd08      	pop	{r3, pc}

00015a7e <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   15a7e:	2920      	cmp	r1, #32
   15a80:	d109      	bne.n	15a96 <ble_ll_hci_set_scan_rsp_data+0x18>
   15a82:	7801      	ldrb	r1, [r0, #0]
   15a84:	291f      	cmp	r1, #31
   15a86:	d808      	bhi.n	15a9a <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   15a88:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   15a8a:	2303      	movs	r3, #3
   15a8c:	2200      	movs	r2, #0
   15a8e:	3001      	adds	r0, #1
   15a90:	f7ff fc3c 	bl	1530c <ble_ll_adv_set_scan_rsp_data>
}
   15a94:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15a96:	2012      	movs	r0, #18
   15a98:	4770      	bx	lr
   15a9a:	2012      	movs	r0, #18
}
   15a9c:	4770      	bx	lr

00015a9e <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   15a9e:	2920      	cmp	r1, #32
   15aa0:	d109      	bne.n	15ab6 <ble_ll_hci_set_adv_data+0x18>
   15aa2:	7801      	ldrb	r1, [r0, #0]
   15aa4:	291f      	cmp	r1, #31
   15aa6:	d808      	bhi.n	15aba <ble_ll_hci_set_adv_data+0x1c>
{
   15aa8:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   15aaa:	2303      	movs	r3, #3
   15aac:	2200      	movs	r2, #0
   15aae:	3001      	adds	r0, #1
   15ab0:	f7ff fc7d 	bl	153ae <ble_ll_adv_set_adv_data>
}
   15ab4:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15ab6:	2012      	movs	r0, #18
   15ab8:	4770      	bx	lr
   15aba:	2012      	movs	r0, #18
}
   15abc:	4770      	bx	lr
	...

00015ac0 <ble_ll_adv_rx_isr_end>:
{
   15ac0:	b510      	push	{r4, lr}
    if (rxpdu == NULL) {
   15ac2:	b141      	cbz	r1, 15ad6 <ble_ll_adv_rx_isr_end+0x16>
   15ac4:	460b      	mov	r3, r1
        if (crcok) {
   15ac6:	b19a      	cbz	r2, 15af0 <ble_ll_adv_rx_isr_end+0x30>
            if ((pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) ||
   15ac8:	2803      	cmp	r0, #3
   15aca:	d00b      	beq.n	15ae4 <ble_ll_adv_rx_isr_end+0x24>
   15acc:	2805      	cmp	r0, #5
   15ace:	d009      	beq.n	15ae4 <ble_ll_adv_rx_isr_end+0x24>
    rc = -1;
   15ad0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15ad4:	e00e      	b.n	15af4 <ble_ll_adv_rx_isr_end+0x34>
        ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   15ad6:	4b0c      	ldr	r3, [pc, #48]	; (15b08 <ble_ll_adv_rx_isr_end+0x48>)
   15ad8:	6818      	ldr	r0, [r3, #0]
   15ada:	f7ff f935 	bl	14d48 <ble_ll_adv_tx_done>
    rc = -1;
   15ade:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15ae2:	e00b      	b.n	15afc <ble_ll_adv_rx_isr_end+0x3c>
                rc = ble_ll_adv_rx_req(pdu_type, rxpdu);
   15ae4:	4619      	mov	r1, r3
   15ae6:	f7ff fcc1 	bl	1546c <ble_ll_adv_rx_req>
        if (rc) {
   15aea:	4604      	mov	r4, r0
   15aec:	b128      	cbz	r0, 15afa <ble_ll_adv_rx_isr_end+0x3a>
   15aee:	e001      	b.n	15af4 <ble_ll_adv_rx_isr_end+0x34>
    rc = -1;
   15af0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            g_ble_ll_cur_adv_sm = NULL;
   15af4:	4b04      	ldr	r3, [pc, #16]	; (15b08 <ble_ll_adv_rx_isr_end+0x48>)
   15af6:	2200      	movs	r2, #0
   15af8:	601a      	str	r2, [r3, #0]
    if (rc) {
   15afa:	b114      	cbz	r4, 15b02 <ble_ll_adv_rx_isr_end+0x42>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15afc:	2000      	movs	r0, #0
   15afe:	f7fe ff23 	bl	14948 <ble_ll_state_set>
}
   15b02:	4620      	mov	r0, r4
   15b04:	bd10      	pop	{r4, pc}
   15b06:	bf00      	nop
   15b08:	200022a8 	.word	0x200022a8

00015b0c <ble_ll_adv_rx_pkt_in>:
{
   15b0c:	b510      	push	{r4, lr}
   15b0e:	4614      	mov	r4, r2
    if (!advsm->adv_enabled) {
   15b10:	4a0e      	ldr	r2, [pc, #56]	; (15b4c <ble_ll_adv_rx_pkt_in+0x40>)
   15b12:	7812      	ldrb	r2, [r2, #0]
   15b14:	b162      	cbz	r2, 15b30 <ble_ll_adv_rx_pkt_in+0x24>
   15b16:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   15b18:	8822      	ldrh	r2, [r4, #0]
   15b1a:	f012 0f80 	tst.w	r2, #128	; 0x80
   15b1e:	d003      	beq.n	15b28 <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   15b20:	2805      	cmp	r0, #5
   15b22:	d006      	beq.n	15b32 <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   15b24:	2803      	cmp	r0, #3
   15b26:	d00c      	beq.n	15b42 <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   15b28:	4621      	mov	r1, r4
   15b2a:	4808      	ldr	r0, [pc, #32]	; (15b4c <ble_ll_adv_rx_pkt_in+0x40>)
   15b2c:	f7ff fec4 	bl	158b8 <ble_ll_adv_make_done>
}
   15b30:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   15b32:	4a06      	ldr	r2, [pc, #24]	; (15b4c <ble_ll_adv_rx_pkt_in+0x40>)
   15b34:	4621      	mov	r1, r4
   15b36:	4618      	mov	r0, r3
   15b38:	f7ff fd42 	bl	155c0 <ble_ll_adv_conn_req_rxd>
   15b3c:	2800      	cmp	r0, #0
   15b3e:	d1f7      	bne.n	15b30 <ble_ll_adv_rx_pkt_in+0x24>
   15b40:	e7f2      	b.n	15b28 <ble_ll_adv_rx_pkt_in+0x1c>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   15b42:	f012 0f10 	tst.w	r2, #16
   15b46:	d1f3      	bne.n	15b30 <ble_ll_adv_rx_pkt_in+0x24>
   15b48:	e7ee      	b.n	15b28 <ble_ll_adv_rx_pkt_in+0x1c>
   15b4a:	bf00      	nop
   15b4c:	2000222c 	.word	0x2000222c

00015b50 <ble_ll_adv_rx_isr_start>:
{
   15b50:	b508      	push	{r3, lr}
   15b52:	4603      	mov	r3, r0
    advsm = g_ble_ll_cur_adv_sm;
   15b54:	4a0d      	ldr	r2, [pc, #52]	; (15b8c <ble_ll_adv_rx_isr_start+0x3c>)
   15b56:	6810      	ldr	r0, [r2, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   15b58:	2b03      	cmp	r3, #3
   15b5a:	d006      	beq.n	15b6a <ble_ll_adv_rx_isr_start+0x1a>
        if (pdu_type == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   15b5c:	2b05      	cmp	r3, #5
   15b5e:	d00a      	beq.n	15b76 <ble_ll_adv_rx_isr_start+0x26>
        ble_ll_adv_tx_done(advsm);
   15b60:	f7ff f8f2 	bl	14d48 <ble_ll_adv_tx_done>
   15b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   15b68:	bd08      	pop	{r3, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   15b6a:	8983      	ldrh	r3, [r0, #12]
   15b6c:	f013 0f02 	tst.w	r3, #2
   15b70:	d0f6      	beq.n	15b60 <ble_ll_adv_rx_isr_start+0x10>
            rc = 1;
   15b72:	2001      	movs	r0, #1
    return rc;
   15b74:	e7f8      	b.n	15b68 <ble_ll_adv_rx_isr_start+0x18>
            if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   15b76:	8983      	ldrh	r3, [r0, #12]
   15b78:	f013 0f01 	tst.w	r3, #1
   15b7c:	d0f0      	beq.n	15b60 <ble_ll_adv_rx_isr_start+0x10>
                rc = !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY);
   15b7e:	0918      	lsrs	r0, r3, #4
   15b80:	f080 0001 	eor.w	r0, r0, #1
   15b84:	f000 0001 	and.w	r0, r0, #1
    if (rc < 0) {
   15b88:	e7ee      	b.n	15b68 <ble_ll_adv_rx_isr_start+0x18>
   15b8a:	bf00      	nop
   15b8c:	200022a8 	.word	0x200022a8

00015b90 <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15b90:	2300      	movs	r3, #0
   15b92:	2b00      	cmp	r3, #0
   15b94:	dd01      	ble.n	15b9a <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   15b96:	2001      	movs	r0, #1
   15b98:	4770      	bx	lr
        if (advsm->adv_enabled &&
   15b9a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   15b9e:	008a      	lsls	r2, r1, #2
   15ba0:	4906      	ldr	r1, [pc, #24]	; (15bbc <ble_ll_adv_can_chg_whitelist+0x2c>)
   15ba2:	5c8a      	ldrb	r2, [r1, r2]
   15ba4:	b132      	cbz	r2, 15bb4 <ble_ll_adv_can_chg_whitelist+0x24>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   15ba6:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   15baa:	0091      	lsls	r1, r2, #2
   15bac:	4a03      	ldr	r2, [pc, #12]	; (15bbc <ble_ll_adv_can_chg_whitelist+0x2c>)
   15bae:	440a      	add	r2, r1
   15bb0:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   15bb2:	b90a      	cbnz	r2, 15bb8 <ble_ll_adv_can_chg_whitelist+0x28>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15bb4:	3301      	adds	r3, #1
   15bb6:	e7ec      	b.n	15b92 <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   15bb8:	2000      	movs	r0, #0
}
   15bba:	4770      	bx	lr
   15bbc:	2000222c 	.word	0x2000222c

00015bc0 <ble_ll_adv_send_conn_comp_ev>:
{
   15bc0:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(advsm->conn_comp_ev != NULL);
   15bc2:	4b0a      	ldr	r3, [pc, #40]	; (15bec <ble_ll_adv_send_conn_comp_ev+0x2c>)
   15bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   15bc6:	b13a      	cbz	r2, 15bd8 <ble_ll_adv_send_conn_comp_ev+0x18>
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, advsm->conn_comp_ev,
   15bc8:	4c08      	ldr	r4, [pc, #32]	; (15bec <ble_ll_adv_send_conn_comp_ev+0x2c>)
   15bca:	4623      	mov	r3, r4
   15bcc:	2100      	movs	r1, #0
   15bce:	f001 fdbf 	bl	17750 <ble_ll_conn_comp_event_send>
    advsm->conn_comp_ev = NULL;
   15bd2:	2300      	movs	r3, #0
   15bd4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   15bd6:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(advsm->conn_comp_ev != NULL);
   15bd8:	f7f6 fae0 	bl	c19c <hal_debugger_connected>
   15bdc:	b100      	cbz	r0, 15be0 <ble_ll_adv_send_conn_comp_ev+0x20>
   15bde:	be01      	bkpt	0x0001
   15be0:	2300      	movs	r3, #0
   15be2:	461a      	mov	r2, r3
   15be4:	4619      	mov	r1, r3
   15be6:	4618      	mov	r0, r3
   15be8:	f7f6 ffdc 	bl	cba4 <__assert_func>
   15bec:	2000222c 	.word	0x2000222c

00015bf0 <ble_ll_adv_get_local_rpa>:
{
   15bf0:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   15bf2:	7903      	ldrb	r3, [r0, #4]
   15bf4:	2b01      	cmp	r3, #1
   15bf6:	d90c      	bls.n	15c12 <ble_ll_adv_get_local_rpa+0x22>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   15bf8:	8943      	ldrh	r3, [r0, #10]
   15bfa:	f013 0f01 	tst.w	r3, #1
   15bfe:	d00a      	beq.n	15c16 <ble_ll_adv_get_local_rpa+0x26>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   15c00:	f100 0424 	add.w	r4, r0, #36	; 0x24
   15c04:	2101      	movs	r1, #1
   15c06:	4620      	mov	r0, r4
   15c08:	f7fe fd8f 	bl	1472a <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   15c0c:	b920      	cbnz	r0, 15c18 <ble_ll_adv_get_local_rpa+0x28>
    uint8_t *rpa = NULL;
   15c0e:	2400      	movs	r4, #0
   15c10:	e002      	b.n	15c18 <ble_ll_adv_get_local_rpa+0x28>
   15c12:	2400      	movs	r4, #0
   15c14:	e000      	b.n	15c18 <ble_ll_adv_get_local_rpa+0x28>
   15c16:	2400      	movs	r4, #0
}
   15c18:	4620      	mov	r0, r4
   15c1a:	bd10      	pop	{r4, pc}

00015c1c <ble_ll_adv_get_peer_rpa>:
}
   15c1c:	302a      	adds	r0, #42	; 0x2a
   15c1e:	4770      	bx	lr

00015c20 <ble_ll_adv_wfr_timer_exp>:
{
   15c20:	b508      	push	{r3, lr}
    ble_phy_disable();
   15c22:	f006 f831 	bl	1bc88 <ble_phy_disable>
    ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   15c26:	4b02      	ldr	r3, [pc, #8]	; (15c30 <ble_ll_adv_wfr_timer_exp+0x10>)
   15c28:	6818      	ldr	r0, [r3, #0]
   15c2a:	f7ff f88d 	bl	14d48 <ble_ll_adv_tx_done>
}
   15c2e:	bd08      	pop	{r3, pc}
   15c30:	200022a8 	.word	0x200022a8

00015c34 <ble_ll_adv_reset>:
{
   15c34:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15c36:	2400      	movs	r4, #0
   15c38:	2c00      	cmp	r4, #0
   15c3a:	dd00      	ble.n	15c3e <ble_ll_adv_reset+0xa>
}
   15c3c:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   15c3e:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
   15c42:	0093      	lsls	r3, r2, #2
   15c44:	4d07      	ldr	r5, [pc, #28]	; (15c64 <ble_ll_adv_reset+0x30>)
   15c46:	441d      	add	r5, r3
        ble_ll_adv_sm_stop(advsm);
   15c48:	4628      	mov	r0, r5
   15c4a:	f7ff fadd 	bl	15208 <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   15c4e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   15c50:	f7f7 fc10 	bl	d474 <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   15c54:	6c68      	ldr	r0, [r5, #68]	; 0x44
   15c56:	f7f7 fc0d 	bl	d474 <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   15c5a:	4628      	mov	r0, r5
   15c5c:	f7ff fd6c 	bl	15738 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15c60:	3401      	adds	r4, #1
   15c62:	e7e9      	b.n	15c38 <ble_ll_adv_reset+0x4>
   15c64:	2000222c 	.word	0x2000222c

00015c68 <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   15c68:	2300      	movs	r3, #0
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	dd01      	ble.n	15c72 <ble_ll_adv_enabled+0xa>
    return 0;
   15c6e:	2000      	movs	r0, #0
   15c70:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   15c72:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   15c76:	008a      	lsls	r2, r1, #2
   15c78:	4903      	ldr	r1, [pc, #12]	; (15c88 <ble_ll_adv_enabled+0x20>)
   15c7a:	5c8a      	ldrb	r2, [r1, r2]
   15c7c:	b90a      	cbnz	r2, 15c82 <ble_ll_adv_enabled+0x1a>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   15c7e:	3301      	adds	r3, #1
   15c80:	e7f3      	b.n	15c6a <ble_ll_adv_enabled+0x2>
            return 1;
   15c82:	2001      	movs	r0, #1
}
   15c84:	4770      	bx	lr
   15c86:	bf00      	nop
   15c88:	2000222c 	.word	0x2000222c

00015c8c <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   15c8c:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15c8e:	2400      	movs	r4, #0
   15c90:	2c00      	cmp	r4, #0
   15c92:	dd00      	ble.n	15c96 <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   15c94:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   15c96:	ebc4 1244 	rsb	r2, r4, r4, lsl #5
   15c9a:	0093      	lsls	r3, r2, #2
   15c9c:	4802      	ldr	r0, [pc, #8]	; (15ca8 <ble_ll_adv_init+0x1c>)
   15c9e:	4418      	add	r0, r3
   15ca0:	f7ff fd4a 	bl	15738 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15ca4:	3401      	adds	r4, #1
   15ca6:	e7f3      	b.n	15c90 <ble_ll_adv_init+0x4>
   15ca8:	2000222c 	.word	0x2000222c

00015cac <ble_ll_conn_is_empty_pdu>:
ble_ll_conn_is_empty_pdu(uint8_t *rxbuf)
{
    int rc;
    uint8_t llid;

    llid = rxbuf[0] & BLE_LL_DATA_HDR_LLID_MASK;
   15cac:	7803      	ldrb	r3, [r0, #0]
   15cae:	f003 0303 	and.w	r3, r3, #3
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   15cb2:	2b01      	cmp	r3, #1
   15cb4:	d001      	beq.n	15cba <ble_ll_conn_is_empty_pdu+0xe>
        rc = 1;
    } else {
        rc = 0;
   15cb6:	2000      	movs	r0, #0
   15cb8:	4770      	bx	lr
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   15cba:	7843      	ldrb	r3, [r0, #1]
   15cbc:	b10b      	cbz	r3, 15cc2 <ble_ll_conn_is_empty_pdu+0x16>
        rc = 0;
   15cbe:	2000      	movs	r0, #0
   15cc0:	4770      	bx	lr
        rc = 1;
   15cc2:	2001      	movs	r0, #1
    }
    return rc;
}
   15cc4:	4770      	bx	lr

00015cc6 <ble_ll_conn_can_send_next_pdu>:

    return rc;
#else
    return 1;
#endif
}
   15cc6:	2001      	movs	r0, #1
   15cc8:	4770      	bx	lr

00015cca <ble_ll_conn_calc_dci_csa1>:
{
   15cca:	b508      	push	{r3, lr}
   15ccc:	4601      	mov	r1, r0
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   15cce:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   15cd2:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
   15cd6:	4403      	add	r3, r0
   15cd8:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   15cda:	2825      	cmp	r0, #37	; 0x25
   15cdc:	d902      	bls.n	15ce4 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   15cde:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   15ce2:	b2d8      	uxtb	r0, r3
    conn->last_unmapped_chan = curchan;
   15ce4:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    bitpos = 1 << (curchan & 0x07);
   15ce8:	f000 0207 	and.w	r2, r0, #7
   15cec:	2301      	movs	r3, #1
   15cee:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   15cf0:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   15cf4:	440a      	add	r2, r1
   15cf6:	7f12      	ldrb	r2, [r2, #28]
   15cf8:	4213      	tst	r3, r2
   15cfa:	d000      	beq.n	15cfe <ble_ll_conn_calc_dci_csa1+0x34>
}
   15cfc:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   15cfe:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   15d02:	fbb0 f3f2 	udiv	r3, r0, r2
   15d06:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   15d0a:	311c      	adds	r1, #28
   15d0c:	b2c0      	uxtb	r0, r0
   15d0e:	f005 f92d 	bl	1af6c <ble_ll_utils_remapped_channel>
   15d12:	e7f3      	b.n	15cfc <ble_ll_conn_calc_dci_csa1+0x32>

00015d14 <ble_ll_conn_halt>:
{
   15d14:	b508      	push	{r3, lr}
    ble_phy_disable();
   15d16:	f005 ffb7 	bl	1bc88 <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15d1a:	2000      	movs	r0, #0
   15d1c:	f7fe fe14 	bl	14948 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   15d20:	4b01      	ldr	r3, [pc, #4]	; (15d28 <ble_ll_conn_halt+0x14>)
   15d22:	2200      	movs	r2, #0
   15d24:	601a      	str	r2, [r3, #0]
}
   15d26:	bd08      	pop	{r3, pc}
   15d28:	20002330 	.word	0x20002330

00015d2c <ble_ll_conn_current_sm_over>:
{
   15d2c:	b510      	push	{r4, lr}
   15d2e:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   15d30:	f7ff fff0 	bl	15d14 <ble_ll_conn_halt>
    if (connsm) {
   15d34:	b11c      	cbz	r4, 15d3e <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   15d36:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15d3a:	f7fe fe11 	bl	14960 <ble_ll_event_send>
}
   15d3e:	bd10      	pop	{r4, pc}

00015d40 <ble_ll_conn_rxend_unencrypt>:
{
   15d40:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   15d42:	7882      	ldrb	r2, [r0, #2]
   15d44:	f36f 0241 	bfc	r2, #1, #1
   15d48:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   15d4a:	f7ff ffef 	bl	15d2c <ble_ll_conn_current_sm_over>
}
   15d4e:	bd08      	pop	{r3, pc}

00015d50 <ble_ll_conn_txend_encrypt>:
{
   15d50:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   15d52:	7882      	ldrb	r2, [r0, #2]
   15d54:	f042 0202 	orr.w	r2, r2, #2
   15d58:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   15d5a:	f7ff ffe7 	bl	15d2c <ble_ll_conn_current_sm_over>
}
   15d5e:	bd08      	pop	{r3, pc}

00015d60 <ble_ll_conn_wait_txend>:
{
   15d60:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   15d62:	f7ff ffe3 	bl	15d2c <ble_ll_conn_current_sm_over>
}
   15d66:	bd08      	pop	{r3, pc}

00015d68 <ble_ll_conn_start_rx_encrypt>:
{
   15d68:	b500      	push	{lr}
   15d6a:	b083      	sub	sp, #12
    CONN_F_ENCRYPTED(connsm) = 1;
   15d6c:	7883      	ldrb	r3, [r0, #2]
   15d6e:	f043 0302 	orr.w	r3, r3, #2
   15d72:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   15d74:	2301      	movs	r3, #1
   15d76:	9300      	str	r3, [sp, #0]
   15d78:	f500 73ac 	add.w	r3, r0, #344	; 0x158
   15d7c:	f500 7298 	add.w	r2, r0, #304	; 0x130
   15d80:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   15d84:	2100      	movs	r1, #0
   15d86:	f005 fecb 	bl	1bb20 <ble_phy_encrypt_enable>
}
   15d8a:	b003      	add	sp, #12
   15d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00015d90 <ble_ll_conn_start_rx_unencrypt>:
{
   15d90:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   15d92:	7883      	ldrb	r3, [r0, #2]
   15d94:	f36f 0341 	bfc	r3, #1, #1
   15d98:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   15d9a:	f005 fef3 	bl	1bb84 <ble_phy_encrypt_disable>
}
   15d9e:	bd08      	pop	{r3, pc}

00015da0 <ble_ll_conn_event_start_cb>:
{
   15da0:	b530      	push	{r4, r5, lr}
   15da2:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   15da4:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   15da6:	4b3e      	ldr	r3, [pc, #248]	; (15ea0 <ble_ll_conn_event_start_cb+0x100>)
   15da8:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   15daa:	2c00      	cmp	r4, #0
   15dac:	d042      	beq.n	15e34 <ble_ll_conn_event_start_cb+0x94>
   15dae:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   15db0:	79a3      	ldrb	r3, [r4, #6]
   15db2:	2b00      	cmp	r3, #0
   15db4:	d048      	beq.n	15e48 <ble_ll_conn_event_start_cb+0xa8>
    ble_ll_whitelist_disable();
   15db6:	f005 f9d3 	bl	1b160 <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   15dba:	2004      	movs	r0, #4
   15dbc:	f7fe fdc4 	bl	14948 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   15dc0:	6d62      	ldr	r2, [r4, #84]	; 0x54
   15dc2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   15dc4:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
   15dc8:	f005 ff38 	bl	1bc3c <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   15dcc:	f006 fa3a 	bl	1c244 <ble_phy_resolv_list_disable>
    switch (connsm->conn_role) {
   15dd0:	79e3      	ldrb	r3, [r4, #7]
   15dd2:	2b02      	cmp	r3, #2
   15dd4:	d159      	bne.n	15e8a <ble_ll_conn_event_start_cb+0xea>
        if (CONN_F_ENCRYPTED(connsm)) {
   15dd6:	78a3      	ldrb	r3, [r4, #2]
   15dd8:	f013 0f02 	tst.w	r3, #2
   15ddc:	d042      	beq.n	15e64 <ble_ll_conn_event_start_cb+0xc4>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   15dde:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   15de2:	2301      	movs	r3, #1
   15de4:	9300      	str	r3, [sp, #0]
   15de6:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   15dea:	f504 7298 	add.w	r2, r4, #304	; 0x130
   15dee:	2100      	movs	r1, #0
   15df0:	f005 fe96 	bl	1bb20 <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   15df4:	6868      	ldr	r0, [r5, #4]
   15df6:	4b2b      	ldr	r3, [pc, #172]	; (15ea4 <ble_ll_conn_event_start_cb+0x104>)
   15df8:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   15dfa:	78a9      	ldrb	r1, [r5, #2]
   15dfc:	4418      	add	r0, r3
   15dfe:	f006 f929 	bl	1c054 <ble_phy_rx_set_start_time>
        if (rc) {
   15e02:	4605      	mov	r5, r0
   15e04:	b388      	cbz	r0, 15e6a <ble_ll_conn_event_start_cb+0xca>
            STATS_INC(ble_ll_conn_stats, periph_ce_failures);
   15e06:	4a28      	ldr	r2, [pc, #160]	; (15ea8 <ble_ll_conn_event_start_cb+0x108>)
   15e08:	6b13      	ldr	r3, [r2, #48]	; 0x30
   15e0a:	3301      	adds	r3, #1
   15e0c:	6313      	str	r3, [r2, #48]	; 0x30
        ble_ll_event_send(&connsm->conn_ev_end);
   15e0e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   15e12:	f7fe fda5 	bl	14960 <ble_ll_event_send>
        ble_phy_disable();
   15e16:	f005 ff37 	bl	1bc88 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15e1a:	2000      	movs	r0, #0
   15e1c:	f7fe fd94 	bl	14948 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   15e20:	4b1f      	ldr	r3, [pc, #124]	; (15ea0 <ble_ll_conn_event_start_cb+0x100>)
   15e22:	2200      	movs	r2, #0
   15e24:	601a      	str	r2, [r3, #0]
            rc = BLE_LL_SCHED_STATE_DONE;
   15e26:	2501      	movs	r5, #1
    return os_cputime_get32();
   15e28:	f014 ff49 	bl	2acbe <os_cputime_get32>
    connsm->last_scheduled = ble_ll_tmr_get();
   15e2c:	6620      	str	r0, [r4, #96]	; 0x60
}
   15e2e:	4628      	mov	r0, r5
   15e30:	b003      	add	sp, #12
   15e32:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   15e34:	f7f6 f9b2 	bl	c19c <hal_debugger_connected>
   15e38:	b100      	cbz	r0, 15e3c <ble_ll_conn_event_start_cb+0x9c>
   15e3a:	be01      	bkpt	0x0001
   15e3c:	2300      	movs	r3, #0
   15e3e:	461a      	mov	r2, r3
   15e40:	4619      	mov	r1, r3
   15e42:	4618      	mov	r0, r3
   15e44:	f7f6 feae 	bl	cba4 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_start_in_idle);
   15e48:	4a17      	ldr	r2, [pc, #92]	; (15ea8 <ble_ll_conn_event_start_cb+0x108>)
   15e4a:	6f53      	ldr	r3, [r2, #116]	; 0x74
   15e4c:	3301      	adds	r3, #1
   15e4e:	6753      	str	r3, [r2, #116]	; 0x74
        BLE_LL_ASSERT(0);
   15e50:	f7f6 f9a4 	bl	c19c <hal_debugger_connected>
   15e54:	b100      	cbz	r0, 15e58 <ble_ll_conn_event_start_cb+0xb8>
   15e56:	be01      	bkpt	0x0001
   15e58:	2300      	movs	r3, #0
   15e5a:	461a      	mov	r2, r3
   15e5c:	4619      	mov	r1, r3
   15e5e:	4618      	mov	r0, r3
   15e60:	f7f6 fea0 	bl	cba4 <__assert_func>
            ble_phy_encrypt_disable();
   15e64:	f005 fe8e 	bl	1bb84 <ble_phy_encrypt_disable>
   15e68:	e7c4      	b.n	15df4 <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.periph_set_last_anchor = 1;
   15e6a:	7823      	ldrb	r3, [r4, #0]
   15e6c:	f043 0320 	orr.w	r3, r3, #32
   15e70:	7023      	strb	r3, [r4, #0]
            usecs = connsm->periph_cur_tx_win_usecs + 61 +
   15e72:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
                    (2 * connsm->periph_cur_window_widening);
   15e76:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
            usecs = connsm->periph_cur_tx_win_usecs + 61 +
   15e7a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   15e7e:	323d      	adds	r2, #61	; 0x3d
   15e80:	2100      	movs	r1, #0
   15e82:	4608      	mov	r0, r1
   15e84:	f005 fce8 	bl	1b858 <ble_phy_wfr_enable>
    if (rc == BLE_LL_SCHED_STATE_DONE) {
   15e88:	e7ce      	b.n	15e28 <ble_ll_conn_event_start_cb+0x88>
        BLE_LL_ASSERT(0);
   15e8a:	f7f6 f987 	bl	c19c <hal_debugger_connected>
   15e8e:	b100      	cbz	r0, 15e92 <ble_ll_conn_event_start_cb+0xf2>
   15e90:	be01      	bkpt	0x0001
   15e92:	2300      	movs	r3, #0
   15e94:	461a      	mov	r2, r3
   15e96:	4619      	mov	r1, r3
   15e98:	4618      	mov	r0, r3
   15e9a:	f7f6 fe83 	bl	cba4 <__assert_func>
   15e9e:	bf00      	nop
   15ea0:	20002330 	.word	0x20002330
   15ea4:	200026a8 	.word	0x200026a8
   15ea8:	200022ac 	.word	0x200022ac

00015eac <ble_ll_conn_chk_csm_flags>:
{
   15eac:	b510      	push	{r4, lr}
   15eae:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   15eb0:	7883      	ldrb	r3, [r0, #2]
   15eb2:	f013 0f01 	tst.w	r3, #1
   15eb6:	d114      	bne.n	15ee2 <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   15eb8:	7863      	ldrb	r3, [r4, #1]
   15eba:	f013 0f02 	tst.w	r3, #2
   15ebe:	d00f      	beq.n	15ee0 <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   15ec0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   15ec4:	f013 0f01 	tst.w	r3, #1
   15ec8:	d119      	bne.n	15efe <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   15eca:	f013 0f40 	tst.w	r3, #64	; 0x40
   15ece:	d11c      	bne.n	15f0a <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   15ed0:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   15ed2:	4620      	mov	r0, r4
   15ed4:	f003 fe61 	bl	19b9a <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   15ed8:	7863      	ldrb	r3, [r4, #1]
   15eda:	f36f 0341 	bfc	r3, #1, #1
   15ede:	7063      	strb	r3, [r4, #1]
}
   15ee0:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   15ee2:	f003 feb5 	bl	19c50 <ble_ll_hci_ev_ltk_req>
   15ee6:	b920      	cbnz	r0, 15ef2 <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   15ee8:	78a3      	ldrb	r3, [r4, #2]
   15eea:	f36f 0300 	bfc	r3, #0, #1
   15eee:	70a3      	strb	r3, [r4, #2]
   15ef0:	e7e2      	b.n	15eb8 <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   15ef2:	2206      	movs	r2, #6
   15ef4:	2103      	movs	r1, #3
   15ef6:	4620      	mov	r0, r4
   15ef8:	f003 f8a2 	bl	19040 <ble_ll_ctrl_reject_ind_send>
   15efc:	e7f4      	b.n	15ee8 <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   15efe:	2100      	movs	r1, #0
   15f00:	4620      	mov	r0, r4
   15f02:	f002 fd7d 	bl	18a00 <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   15f06:	2100      	movs	r1, #0
   15f08:	e7e3      	b.n	15ed2 <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   15f0a:	2106      	movs	r1, #6
   15f0c:	4620      	mov	r0, r4
   15f0e:	f002 fd77 	bl	18a00 <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   15f12:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
   15f16:	e7dc      	b.n	15ed2 <ble_ll_conn_chk_csm_flags+0x26>

00015f18 <ble_ll_conn_adjust_pyld_len>:
{
   15f18:	b538      	push	{r3, r4, r5, lr}
   15f1a:	4604      	mov	r4, r0
   15f1c:	460d      	mov	r5, r1
    max_pyld_len = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   15f1e:	2101      	movs	r1, #1
   15f20:	8b00      	ldrh	r0, [r0, #24]
   15f22:	f7fe fd75 	bl	14a10 <ble_ll_pdu_max_tx_octets_get>
    if (CONN_F_ENCRYPTED(connsm)) {
   15f26:	78a3      	ldrb	r3, [r4, #2]
   15f28:	f013 0f02 	tst.w	r3, #2
   15f2c:	d001      	beq.n	15f32 <ble_ll_conn_adjust_pyld_len+0x1a>
        max_pyld_len -= BLE_LL_DATA_MIC_LEN;
   15f2e:	1f03      	subs	r3, r0, #4
   15f30:	b298      	uxth	r0, r3
    if (ret > connsm->eff_max_tx_octets) {
   15f32:	7b63      	ldrb	r3, [r4, #13]
   15f34:	42ab      	cmp	r3, r5
   15f36:	d300      	bcc.n	15f3a <ble_ll_conn_adjust_pyld_len+0x22>
    ret = pyld_len;
   15f38:	462b      	mov	r3, r5
    if (ret > max_pyld_len) {
   15f3a:	4298      	cmp	r0, r3
   15f3c:	d300      	bcc.n	15f40 <ble_ll_conn_adjust_pyld_len+0x28>
   15f3e:	4618      	mov	r0, r3
}
   15f40:	bd38      	pop	{r3, r4, r5, pc}

00015f42 <ble_ll_conn_continue_rx_encrypt>:
{
   15f42:	b508      	push	{r3, lr}
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   15f44:	2201      	movs	r2, #1
   15f46:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   15f4a:	2100      	movs	r1, #0
   15f4c:	f005 fe12 	bl	1bb74 <ble_phy_encrypt_set_pkt_cntr>
}
   15f50:	bd08      	pop	{r3, pc}
	...

00015f54 <ble_ll_conn_get_next_sched_time>:
{
   15f54:	b510      	push	{r4, lr}
   15f56:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   15f58:	6f04      	ldr	r4, [r0, #112]	; 0x70
   15f5a:	6f83      	ldr	r3, [r0, #120]	; 0x78
   15f5c:	441c      	add	r4, r3
   15f5e:	4b12      	ldr	r3, [pc, #72]	; (15fa8 <ble_ll_conn_get_next_sched_time+0x54>)
   15f60:	781b      	ldrb	r3, [r3, #0]
   15f62:	1ae4      	subs	r4, r4, r3
    rem_us = connsm->anchor_point_usecs;
   15f64:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    ble_ll_tmr_add_u(&ce_end, &rem_us, connsm->conn_itvl_usecs);
   15f68:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
}

static inline void
ble_ll_tmr_add_u(uint32_t *ticks, uint8_t *rem_us, uint8_t usecs)
{
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   15f6c:	2a1e      	cmp	r2, #30
   15f6e:	d80f      	bhi.n	15f90 <ble_ll_conn_get_next_sched_time+0x3c>

    *rem_us += usecs;
   15f70:	4413      	add	r3, r2
   15f72:	b2db      	uxtb	r3, r3
    if (*rem_us >= USECS_PER_TICK) {
   15f74:	2b1e      	cmp	r3, #30
   15f76:	d900      	bls.n	15f7a <ble_ll_conn_get_next_sched_time+0x26>
        *rem_us -= USECS_PER_TICK;
        *ticks += 1;
   15f78:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   15f7a:	a801      	add	r0, sp, #4
   15f7c:	f004 ffc6 	bl	1af0c <ble_ll_sched_next_time>
   15f80:	b118      	cbz	r0, 15f8a <ble_ll_conn_get_next_sched_time+0x36>
        if (LL_TMR_LT(next_sched_time, ce_end)) {
   15f82:	9b01      	ldr	r3, [sp, #4]
   15f84:	1b1a      	subs	r2, r3, r4
   15f86:	2a00      	cmp	r2, #0
   15f88:	db0c      	blt.n	15fa4 <ble_ll_conn_get_next_sched_time+0x50>
}
   15f8a:	4620      	mov	r0, r4
   15f8c:	b002      	add	sp, #8
   15f8e:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   15f90:	f7f6 f904 	bl	c19c <hal_debugger_connected>
   15f94:	b100      	cbz	r0, 15f98 <ble_ll_conn_get_next_sched_time+0x44>
   15f96:	be01      	bkpt	0x0001
   15f98:	2300      	movs	r3, #0
   15f9a:	461a      	mov	r2, r3
   15f9c:	4619      	mov	r1, r3
   15f9e:	4618      	mov	r0, r3
   15fa0:	f7f6 fe00 	bl	cba4 <__assert_func>
            ce_end = next_sched_time;
   15fa4:	461c      	mov	r4, r3
    return ce_end;
   15fa6:	e7f0      	b.n	15f8a <ble_ll_conn_get_next_sched_time+0x36>
   15fa8:	200026a8 	.word	0x200026a8

00015fac <ble_ll_conn_tx_pdu>:
{
   15fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fb0:	b08f      	sub	sp, #60	; 0x3c
   15fb2:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   15fb4:	7806      	ldrb	r6, [r0, #0]
   15fb6:	f016 0604 	ands.w	r6, r6, #4
   15fba:	d130      	bne.n	1601e <ble_ll_conn_tx_pdu+0x72>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   15fbc:	f8d0 a0ac 	ldr.w	sl, [r0, #172]	; 0xac
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   15fc0:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
   15fc4:	2d00      	cmp	r5, #0
   15fc6:	d062      	beq.n	1608e <ble_ll_conn_tx_pdu+0xe2>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   15fc8:	2d00      	cmp	r5, #0
   15fca:	d070      	beq.n	160ae <ble_ll_conn_tx_pdu+0x102>
        if (connsm->cur_tx_pdu) {
   15fcc:	2d00      	cmp	r5, #0
   15fce:	f000 80fe 	beq.w	161ce <ble_ll_conn_tx_pdu+0x222>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   15fd2:	f105 0818 	add.w	r8, r5, #24
            pktlen = OS_MBUF_PKTLEN(m);
   15fd6:	8a2b      	ldrh	r3, [r5, #16]
   15fd8:	9302      	str	r3, [sp, #8]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   15fda:	f895 b01c 	ldrb.w	fp, [r5, #28]
            cur_offset = ble_hdr->txinfo.offset;
   15fde:	f8b5 901a 	ldrh.w	r9, [r5, #26]
            if (cur_offset == 0) {
   15fe2:	f1b9 0f00 	cmp.w	r9, #0
   15fe6:	f040 80f0 	bne.w	161ca <ble_ll_conn_tx_pdu+0x21e>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   15fea:	7e6f      	ldrb	r7, [r5, #25]
   15fec:	f007 0703 	and.w	r7, r7, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   15ff0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   15ff4:	2b02      	cmp	r3, #2
   15ff6:	f240 8089 	bls.w	1610c <ble_ll_conn_tx_pdu+0x160>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   15ffa:	f1ba 0f00 	cmp.w	sl, #0
   15ffe:	f000 8085 	beq.w	1610c <ble_ll_conn_tx_pdu+0x160>
   16002:	4650      	mov	r0, sl
   16004:	f002 fb25 	bl	18652 <ble_ll_ctrl_enc_allowed_pdu_tx>
   16008:	2800      	cmp	r0, #0
   1600a:	d17f      	bne.n	1610c <ble_ll_conn_tx_pdu+0x160>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   1600c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   16010:	f002 fb2f 	bl	18672 <ble_ll_ctrl_is_start_enc_rsp>
                    && (CONN_IS_CENTRAL(connsm) ||
   16014:	2800      	cmp	r0, #0
   16016:	d179      	bne.n	1610c <ble_ll_conn_tx_pdu+0x160>
                    nextpkthdr = NULL;
   16018:	f04f 0a00 	mov.w	sl, #0
   1601c:	e076      	b.n	1610c <ble_ll_conn_tx_pdu+0x160>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1601e:	7843      	ldrb	r3, [r0, #1]
   16020:	f043 0320 	orr.w	r3, r3, #32
   16024:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   16026:	f04f 0800 	mov.w	r8, #0
    m = NULL;
   1602a:	4645      	mov	r5, r8
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1602c:	2701      	movs	r7, #1
    md = 0;
   1602e:	4646      	mov	r6, r8
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   16030:	7863      	ldrb	r3, [r4, #1]
   16032:	f013 0f20 	tst.w	r3, #32
   16036:	d00b      	beq.n	16050 <ble_ll_conn_tx_pdu+0xa4>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   16038:	ab0e      	add	r3, sp, #56	; 0x38
   1603a:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   1603c:	2300      	movs	r3, #0
   1603e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   16042:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
        ble_hdr->txinfo.pyld_len = 0;
   16046:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
        ble_hdr = &empty_pdu.ble_hdr;
   1604a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   1604e:	ad04      	add	r5, sp, #16
    if (connsm->tx_seqnum) {
   16050:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   16054:	b10b      	cbz	r3, 1605a <ble_ll_conn_tx_pdu+0xae>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   16056:	f047 0708 	orr.w	r7, r7, #8
    if (md) {
   1605a:	b10e      	cbz	r6, 16060 <ble_ll_conn_tx_pdu+0xb4>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   1605c:	f047 0710 	orr.w	r7, r7, #16
    if (connsm->next_exp_seqnum) {
   16060:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   16064:	b10b      	cbz	r3, 1606a <ble_ll_conn_tx_pdu+0xbe>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   16066:	f047 0704 	orr.w	r7, r7, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   1606a:	f888 7001 	strb.w	r7, [r8, #1]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   1606e:	7823      	ldrb	r3, [r4, #0]
   16070:	f013 0f04 	tst.w	r3, #4
   16074:	f040 80f9 	bne.w	1626a <ble_ll_conn_tx_pdu+0x2be>
        (CONN_IS_PERIPHERAL(connsm) && (md == 0) &&
   16078:	f894 9007 	ldrb.w	r9, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   1607c:	f1b9 0f02 	cmp.w	r9, #2
   16080:	f000 80db 	beq.w	1623a <ble_ll_conn_tx_pdu+0x28e>
        txend_func = NULL;
   16084:	f04f 0a00 	mov.w	sl, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   16088:	f04f 0902 	mov.w	r9, #2
   1608c:	e0f1      	b.n	16272 <ble_ll_conn_tx_pdu+0x2c6>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   1608e:	7843      	ldrb	r3, [r0, #1]
   16090:	f013 0320 	ands.w	r3, r3, #32
   16094:	d198      	bne.n	15fc8 <ble_ll_conn_tx_pdu+0x1c>
   16096:	f1ba 0f00 	cmp.w	sl, #0
   1609a:	d195      	bne.n	15fc8 <ble_ll_conn_tx_pdu+0x1c>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1609c:	7842      	ldrb	r2, [r0, #1]
   1609e:	f042 0220 	orr.w	r2, r2, #32
   160a2:	7042      	strb	r2, [r0, #1]
    ble_hdr = NULL;
   160a4:	46d0      	mov	r8, sl
    m = NULL;
   160a6:	4655      	mov	r5, sl
    md = 0;
   160a8:	461e      	mov	r6, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   160aa:	2701      	movs	r7, #1
        goto conn_tx_pdu;
   160ac:	e7c0      	b.n	16030 <ble_ll_conn_tx_pdu+0x84>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   160ae:	7863      	ldrb	r3, [r4, #1]
   160b0:	f013 0720 	ands.w	r7, r3, #32
   160b4:	d18a      	bne.n	15fcc <ble_ll_conn_tx_pdu+0x20>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   160b6:	f1aa 0910 	sub.w	r9, sl, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   160ba:	f8da 3004 	ldr.w	r3, [sl, #4]
   160be:	9303      	str	r3, [sp, #12]
            ((connsm->enc_data.enc_state > CONN_ENC_S_ENC_RSP_TO_BE_SENT) &&
   160c0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
        if (((connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) &&
   160c4:	2b03      	cmp	r3, #3
   160c6:	d902      	bls.n	160ce <ble_ll_conn_tx_pdu+0x122>
             CONN_IS_PERIPHERAL(connsm))) {
   160c8:	79e3      	ldrb	r3, [r4, #7]
             CONN_IS_CENTRAL(connsm)) ||
   160ca:	2b02      	cmp	r3, #2
   160cc:	d055      	beq.n	1617a <ble_ll_conn_tx_pdu+0x1ce>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   160ce:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   160d2:	685b      	ldr	r3, [r3, #4]
   160d4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   160d8:	2b00      	cmp	r3, #0
   160da:	d06a      	beq.n	161b2 <ble_ll_conn_tx_pdu+0x206>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   160dc:	f10a 0808 	add.w	r8, sl, #8
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   160e0:	f89a 3009 	ldrb.w	r3, [sl, #9]
   160e4:	f003 0303 	and.w	r3, r3, #3
        pktlen = pkthdr->omp_len;
   160e8:	f8ba 2000 	ldrh.w	r2, [sl]
   160ec:	9202      	str	r2, [sp, #8]
        if (llid == BLE_LL_LLID_CTRL) {
   160ee:	2b03      	cmp	r3, #3
   160f0:	d164      	bne.n	161bc <ble_ll_conn_tx_pdu+0x210>
            cur_txlen = pktlen;
   160f2:	fa5f fb82 	uxtb.w	fp, r2
        ble_hdr->txinfo.pyld_len = cur_txlen;
   160f6:	f8aa b00c 	strh.w	fp, [sl, #12]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   160fa:	f89a 7009 	ldrb.w	r7, [sl, #9]
        connsm->cur_tx_pdu = m;
   160fe:	f8c4 90a8 	str.w	r9, [r4, #168]	; 0xa8
   16102:	f8dd a00c 	ldr.w	sl, [sp, #12]
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   16106:	464d      	mov	r5, r9
    cur_offset = 0;
   16108:	f04f 0900 	mov.w	r9, #0
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   1610c:	f1ba 0f00 	cmp.w	sl, #0
   16110:	f000 8086 	beq.w	16220 <ble_ll_conn_tx_pdu+0x274>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   16114:	4620      	mov	r0, r4
   16116:	f7ff ff1d 	bl	15f54 <ble_ll_conn_get_next_sched_time>
   1611a:	4682      	mov	sl, r0
        if ((cur_offset + cur_txlen) < pktlen) {
   1611c:	eb09 030b 	add.w	r3, r9, fp
   16120:	9a02      	ldr	r2, [sp, #8]
   16122:	4293      	cmp	r3, r2
   16124:	f280 8083 	bge.w	1622e <ble_ll_conn_tx_pdu+0x282>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   16128:	b29b      	uxth	r3, r3
   1612a:	1ad3      	subs	r3, r2, r3
   1612c:	b29b      	uxth	r3, r3
        if (next_txlen > connsm->eff_max_tx_octets) {
   1612e:	7b60      	ldrb	r0, [r4, #13]
   16130:	4298      	cmp	r0, r3
   16132:	d300      	bcc.n	16136 <ble_ll_conn_tx_pdu+0x18a>
   16134:	4618      	mov	r0, r3
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   16136:	f8b4 901a 	ldrh.w	r9, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   1613a:	2101      	movs	r1, #1
   1613c:	f7fe fc64 	bl	14a08 <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   16140:	4481      	add	r9, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   16142:	2101      	movs	r1, #1
   16144:	fa1f f08b 	uxth.w	r0, fp
   16148:	f7fe fc5e 	bl	14a08 <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   1614c:	4448      	add	r0, r9
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1614e:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    if (usecs <= 31249) {
   16152:	f647 2311 	movw	r3, #31249	; 0x7a11
   16156:	4298      	cmp	r0, r3
   16158:	d86b      	bhi.n	16232 <ble_ll_conn_tx_pdu+0x286>
        return (usecs * 137439) / 4194304;
   1615a:	4ba0      	ldr	r3, [pc, #640]	; (163dc <ble_ll_conn_tx_pdu+0x430>)
   1615c:	fb03 f000 	mul.w	r0, r3, r0
   16160:	ea4f 5990 	mov.w	r9, r0, lsr #22
    return os_cputime_get32();
   16164:	f014 fdab 	bl	2acbe <os_cputime_get32>
        if (LL_TMR_LT(ble_ll_tmr_get() + ticks, next_event_time)) {
   16168:	4448      	add	r0, r9
   1616a:	eba0 0a0a 	sub.w	sl, r0, sl
   1616e:	f1ba 0f00 	cmp.w	sl, #0
   16172:	f6bf af5d 	bge.w	16030 <ble_ll_conn_tx_pdu+0x84>
            md = 1;
   16176:	2601      	movs	r6, #1
   16178:	e75a      	b.n	16030 <ble_ll_conn_tx_pdu+0x84>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   1617a:	4650      	mov	r0, sl
   1617c:	f002 fa69 	bl	18652 <ble_ll_ctrl_enc_allowed_pdu_tx>
   16180:	b170      	cbz	r0, 161a0 <ble_ll_conn_tx_pdu+0x1f4>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   16182:	9b03      	ldr	r3, [sp, #12]
   16184:	2b00      	cmp	r3, #0
   16186:	d0a2      	beq.n	160ce <ble_ll_conn_tx_pdu+0x122>
   16188:	4618      	mov	r0, r3
   1618a:	f002 fa62 	bl	18652 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1618e:	2800      	cmp	r0, #0
   16190:	d19d      	bne.n	160ce <ble_ll_conn_tx_pdu+0x122>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   16192:	4648      	mov	r0, r9
   16194:	f002 fa6d 	bl	18672 <ble_ll_ctrl_is_start_enc_rsp>
                && (CONN_IS_CENTRAL(connsm) ||
   16198:	2800      	cmp	r0, #0
   1619a:	d198      	bne.n	160ce <ble_ll_conn_tx_pdu+0x122>
                nextpkthdr = NULL;
   1619c:	9503      	str	r5, [sp, #12]
   1619e:	e796      	b.n	160ce <ble_ll_conn_tx_pdu+0x122>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   161a0:	7863      	ldrb	r3, [r4, #1]
   161a2:	f043 0320 	orr.w	r3, r3, #32
   161a6:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   161a8:	46a8      	mov	r8, r5
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   161aa:	464d      	mov	r5, r9
    md = 0;
   161ac:	463e      	mov	r6, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   161ae:	2701      	movs	r7, #1
                goto conn_tx_pdu;
   161b0:	e73e      	b.n	16030 <ble_ll_conn_tx_pdu+0x84>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   161b2:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   161b6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   161ba:	e78f      	b.n	160dc <ble_ll_conn_tx_pdu+0x130>
            cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   161bc:	9902      	ldr	r1, [sp, #8]
   161be:	4620      	mov	r0, r4
   161c0:	f7ff feaa 	bl	15f18 <ble_ll_conn_adjust_pyld_len>
   161c4:	fa5f fb80 	uxtb.w	fp, r0
   161c8:	e795      	b.n	160f6 <ble_ll_conn_tx_pdu+0x14a>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   161ca:	2701      	movs	r7, #1
   161cc:	e710      	b.n	15ff0 <ble_ll_conn_tx_pdu+0x44>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   161ce:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   161d2:	2b02      	cmp	r3, #2
   161d4:	d90d      	bls.n	161f2 <ble_ll_conn_tx_pdu+0x246>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   161d6:	f1ba 0f00 	cmp.w	sl, #0
   161da:	d011      	beq.n	16200 <ble_ll_conn_tx_pdu+0x254>
   161dc:	4650      	mov	r0, sl
   161de:	f002 fa38 	bl	18652 <ble_ll_ctrl_enc_allowed_pdu_tx>
   161e2:	b1a8      	cbz	r0, 16210 <ble_ll_conn_tx_pdu+0x264>
    ble_hdr = NULL;
   161e4:	46a8      	mov	r8, r5
            cur_txlen = 0;
   161e6:	46b3      	mov	fp, r6
            pktlen = 0;
   161e8:	2300      	movs	r3, #0
   161ea:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   161ec:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   161ee:	2701      	movs	r7, #1
   161f0:	e78c      	b.n	1610c <ble_ll_conn_tx_pdu+0x160>
    ble_hdr = NULL;
   161f2:	46a8      	mov	r8, r5
            cur_txlen = 0;
   161f4:	46b3      	mov	fp, r6
            pktlen = 0;
   161f6:	2300      	movs	r3, #0
   161f8:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   161fa:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   161fc:	2701      	movs	r7, #1
   161fe:	e785      	b.n	1610c <ble_ll_conn_tx_pdu+0x160>
    ble_hdr = NULL;
   16200:	46d0      	mov	r8, sl
    m = NULL;
   16202:	4655      	mov	r5, sl
            cur_txlen = 0;
   16204:	46b3      	mov	fp, r6
            pktlen = 0;
   16206:	2300      	movs	r3, #0
   16208:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   1620a:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1620c:	2701      	movs	r7, #1
   1620e:	e77d      	b.n	1610c <ble_ll_conn_tx_pdu+0x160>
                    nextpkthdr = NULL;
   16210:	46aa      	mov	sl, r5
    ble_hdr = NULL;
   16212:	46a8      	mov	r8, r5
            cur_txlen = 0;
   16214:	46b3      	mov	fp, r6
            pktlen = 0;
   16216:	2300      	movs	r3, #0
   16218:	9302      	str	r3, [sp, #8]
    cur_offset = 0;
   1621a:	4699      	mov	r9, r3
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1621c:	2701      	movs	r7, #1
   1621e:	e775      	b.n	1610c <ble_ll_conn_tx_pdu+0x160>
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   16220:	eb09 030b 	add.w	r3, r9, fp
   16224:	9a02      	ldr	r2, [sp, #8]
   16226:	4293      	cmp	r3, r2
   16228:	f6bf af02 	bge.w	16030 <ble_ll_conn_tx_pdu+0x84>
   1622c:	e772      	b.n	16114 <ble_ll_conn_tx_pdu+0x168>
            next_txlen = connsm->eff_max_tx_octets;
   1622e:	7b63      	ldrb	r3, [r4, #13]
   16230:	e77d      	b.n	1612e <ble_ll_conn_tx_pdu+0x182>
    return os_cputime_usecs_to_ticks(usecs);
   16232:	f014 fd49 	bl	2acc8 <os_cputime_usecs_to_ticks>
   16236:	4681      	mov	r9, r0
   16238:	e794      	b.n	16164 <ble_ll_conn_tx_pdu+0x1b8>
        (CONN_IS_PERIPHERAL(connsm) && (md == 0) &&
   1623a:	2e00      	cmp	r6, #0
   1623c:	d14c      	bne.n	162d8 <ble_ll_conn_tx_pdu+0x32c>
         (connsm->cons_rxd_bad_crc == 0) &&
   1623e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
        (CONN_IS_PERIPHERAL(connsm) && (md == 0) &&
   16242:	2b00      	cmp	r3, #0
   16244:	d14b      	bne.n	162de <ble_ll_conn_tx_pdu+0x332>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   16246:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
         (connsm->cons_rxd_bad_crc == 0) &&
   1624a:	f013 0a10 	ands.w	sl, r3, #16
   1624e:	d002      	beq.n	16256 <ble_ll_conn_tx_pdu+0x2aa>
        txend_func = NULL;
   16250:	f04f 0a00 	mov.w	sl, #0
   16254:	e00d      	b.n	16272 <ble_ll_conn_tx_pdu+0x2c6>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   16256:	682b      	ldr	r3, [r5, #0]
   16258:	7819      	ldrb	r1, [r3, #0]
   1625a:	4638      	mov	r0, r7
   1625c:	f002 fb18 	bl	18890 <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   16260:	2800      	cmp	r0, #0
   16262:	d03f      	beq.n	162e4 <ble_ll_conn_tx_pdu+0x338>
        txend_func = NULL;
   16264:	f04f 0a00 	mov.w	sl, #0
   16268:	e003      	b.n	16272 <ble_ll_conn_tx_pdu+0x2c6>
        txend_func = ble_ll_conn_wait_txend;
   1626a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 163e8 <ble_ll_conn_tx_pdu+0x43c>
        end_transition = BLE_PHY_TRANSITION_NONE;
   1626e:	f04f 0900 	mov.w	r9, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   16272:	f898 3001 	ldrb.w	r3, [r8, #1]
   16276:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   1627a:	2b03      	cmp	r3, #3
   1627c:	d036      	beq.n	162ec <ble_ll_conn_tx_pdu+0x340>
        opcode = 0;
   1627e:	2300      	movs	r3, #0
        is_ctrl = 0;
   16280:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   16282:	b10a      	cbz	r2, 16288 <ble_ll_conn_tx_pdu+0x2dc>
   16284:	2b05      	cmp	r3, #5
   16286:	d049      	beq.n	1631c <ble_ll_conn_tx_pdu+0x370>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   16288:	b10a      	cbz	r2, 1628e <ble_ll_conn_tx_pdu+0x2e2>
   1628a:	2b0b      	cmp	r3, #11
   1628c:	d05b      	beq.n	16346 <ble_ll_conn_tx_pdu+0x39a>
        if (CONN_F_ENCRYPTED(connsm)) {
   1628e:	78a3      	ldrb	r3, [r4, #2]
   16290:	f013 0f02 	tst.w	r3, #2
   16294:	d17e      	bne.n	16394 <ble_ll_conn_tx_pdu+0x3e8>
    ble_phy_set_txend_cb(txend_func, connsm);
   16296:	4621      	mov	r1, r4
   16298:	4650      	mov	r0, sl
   1629a:	f005 fc8d 	bl	1bbb8 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   1629e:	464a      	mov	r2, r9
   162a0:	4629      	mov	r1, r5
   162a2:	484f      	ldr	r0, [pc, #316]	; (163e0 <ble_ll_conn_tx_pdu+0x434>)
   162a4:	f005 ff16 	bl	1c0d4 <ble_phy_tx>
    if (!rc) {
   162a8:	b998      	cbnz	r0, 162d2 <ble_ll_conn_tx_pdu+0x326>
        cur_txlen = ble_hdr->txinfo.pyld_len;
   162aa:	f898 2004 	ldrb.w	r2, [r8, #4]
        CONN_F_LAST_TXD_MD(connsm) = md;
   162ae:	7863      	ldrb	r3, [r4, #1]
   162b0:	f366 1386 	bfi	r3, r6, #6, #1
   162b4:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   162b6:	f013 0f20 	tst.w	r3, #32
   162ba:	d07b      	beq.n	163b4 <ble_ll_conn_tx_pdu+0x408>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   162bc:	7823      	ldrb	r3, [r4, #0]
   162be:	f013 0f04 	tst.w	r3, #4
   162c2:	d002      	beq.n	162ca <ble_ll_conn_tx_pdu+0x31e>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   162c4:	f043 0308 	orr.w	r3, r3, #8
   162c8:	7023      	strb	r3, [r4, #0]
            STATS_INC(ble_ll_conn_stats, tx_empty_pdus);
   162ca:	4a46      	ldr	r2, [pc, #280]	; (163e4 <ble_ll_conn_tx_pdu+0x438>)
   162cc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   162ce:	3301      	adds	r3, #1
   162d0:	66d3      	str	r3, [r2, #108]	; 0x6c
}
   162d2:	b00f      	add	sp, #60	; 0x3c
   162d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   162d8:	f04f 0a00 	mov.w	sl, #0
   162dc:	e7c9      	b.n	16272 <ble_ll_conn_tx_pdu+0x2c6>
   162de:	f04f 0a00 	mov.w	sl, #0
   162e2:	e7c6      	b.n	16272 <ble_ll_conn_tx_pdu+0x2c6>
        end_transition = BLE_PHY_TRANSITION_NONE;
   162e4:	46d1      	mov	r9, sl
        txend_func = ble_ll_conn_wait_txend;
   162e6:	f8df a100 	ldr.w	sl, [pc, #256]	; 163e8 <ble_ll_conn_tx_pdu+0x43c>
   162ea:	e7c2      	b.n	16272 <ble_ll_conn_tx_pdu+0x2c6>
        opcode = m->om_data[0];
   162ec:	682b      	ldr	r3, [r5, #0]
   162ee:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   162f0:	2b06      	cmp	r3, #6
   162f2:	d001      	beq.n	162f8 <ble_ll_conn_tx_pdu+0x34c>
        is_ctrl = 1;
   162f4:	2201      	movs	r2, #1
   162f6:	e7c4      	b.n	16282 <ble_ll_conn_tx_pdu+0x2d6>
        CONN_F_ENCRYPTED(connsm) = 1;
   162f8:	78a3      	ldrb	r3, [r4, #2]
   162fa:	f043 0302 	orr.w	r3, r3, #2
   162fe:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   16300:	2301      	movs	r3, #1
   16302:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   16306:	2100      	movs	r1, #0
   16308:	9100      	str	r1, [sp, #0]
   1630a:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1630e:	f504 7298 	add.w	r2, r4, #304	; 0x130
   16312:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   16316:	f005 fc03 	bl	1bb20 <ble_phy_encrypt_enable>
   1631a:	e7bc      	b.n	16296 <ble_ll_conn_tx_pdu+0x2ea>
        CONN_F_ENCRYPTED(connsm) = 0;
   1631c:	78a3      	ldrb	r3, [r4, #2]
   1631e:	f36f 0341 	bfc	r3, #1, #1
   16322:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   16324:	2308      	movs	r3, #8
   16326:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   1632a:	2300      	movs	r3, #0
   1632c:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   16330:	f005 fc28 	bl	1bb84 <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   16334:	f1ba 0f00 	cmp.w	sl, #0
   16338:	d002      	beq.n	16340 <ble_ll_conn_tx_pdu+0x394>
            txend_func = ble_ll_conn_txend_encrypt;
   1633a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 163ec <ble_ll_conn_tx_pdu+0x440>
   1633e:	e7aa      	b.n	16296 <ble_ll_conn_tx_pdu+0x2ea>
            txend_func = ble_ll_conn_start_rx_encrypt;
   16340:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 163f0 <ble_ll_conn_tx_pdu+0x444>
   16344:	e7a7      	b.n	16296 <ble_ll_conn_tx_pdu+0x2ea>
        switch (connsm->conn_role) {
   16346:	79e3      	ldrb	r3, [r4, #7]
   16348:	2b02      	cmp	r3, #2
   1634a:	d119      	bne.n	16380 <ble_ll_conn_tx_pdu+0x3d4>
            CONN_F_ENCRYPTED(connsm) = 1;
   1634c:	78a3      	ldrb	r3, [r4, #2]
   1634e:	f043 0302 	orr.w	r3, r3, #2
   16352:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   16354:	2301      	movs	r3, #1
   16356:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1635a:	2100      	movs	r1, #0
   1635c:	9100      	str	r1, [sp, #0]
   1635e:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   16362:	f504 7298 	add.w	r2, r4, #304	; 0x130
   16366:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1636a:	f005 fbd9 	bl	1bb20 <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   1636e:	f1ba 0f00 	cmp.w	sl, #0
   16372:	d002      	beq.n	1637a <ble_ll_conn_tx_pdu+0x3ce>
                txend_func = ble_ll_conn_rxend_unencrypt;
   16374:	f8df a07c 	ldr.w	sl, [pc, #124]	; 163f4 <ble_ll_conn_tx_pdu+0x448>
   16378:	e78d      	b.n	16296 <ble_ll_conn_tx_pdu+0x2ea>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   1637a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 163f8 <ble_ll_conn_tx_pdu+0x44c>
   1637e:	e78a      	b.n	16296 <ble_ll_conn_tx_pdu+0x2ea>
            BLE_LL_ASSERT(0);
   16380:	f7f5 ff0c 	bl	c19c <hal_debugger_connected>
   16384:	b100      	cbz	r0, 16388 <ble_ll_conn_tx_pdu+0x3dc>
   16386:	be01      	bkpt	0x0001
   16388:	2300      	movs	r3, #0
   1638a:	461a      	mov	r2, r3
   1638c:	4619      	mov	r1, r3
   1638e:	4618      	mov	r0, r3
   16390:	f7f6 fc08 	bl	cba4 <__assert_func>
            connsm->enc_data.tx_encrypted = 1;
   16394:	2301      	movs	r3, #1
   16396:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   1639a:	2100      	movs	r1, #0
   1639c:	460a      	mov	r2, r1
   1639e:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   163a2:	f005 fbe7 	bl	1bb74 <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   163a6:	f1ba 0f00 	cmp.w	sl, #0
   163aa:	f47f af74 	bne.w	16296 <ble_ll_conn_tx_pdu+0x2ea>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   163ae:	f8df a04c 	ldr.w	sl, [pc, #76]	; 163fc <ble_ll_conn_tx_pdu+0x450>
   163b2:	e770      	b.n	16296 <ble_ll_conn_tx_pdu+0x2ea>
        } else if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   163b4:	f007 0703 	and.w	r7, r7, #3
   163b8:	2f03      	cmp	r7, #3
   163ba:	d007      	beq.n	163cc <ble_ll_conn_tx_pdu+0x420>
            STATS_INC(ble_ll_conn_stats, tx_l2cap_pdus);
   163bc:	4b09      	ldr	r3, [pc, #36]	; (163e4 <ble_ll_conn_tx_pdu+0x438>)
   163be:	6e59      	ldr	r1, [r3, #100]	; 0x64
   163c0:	3101      	adds	r1, #1
   163c2:	6659      	str	r1, [r3, #100]	; 0x64
            STATS_INCN(ble_ll_conn_stats, tx_l2cap_bytes, cur_txlen);
   163c4:	6e99      	ldr	r1, [r3, #104]	; 0x68
   163c6:	440a      	add	r2, r1
   163c8:	669a      	str	r2, [r3, #104]	; 0x68
    return rc;
   163ca:	e782      	b.n	162d2 <ble_ll_conn_tx_pdu+0x326>
            STATS_INC(ble_ll_conn_stats, tx_ctrl_pdus);
   163cc:	4b05      	ldr	r3, [pc, #20]	; (163e4 <ble_ll_conn_tx_pdu+0x438>)
   163ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   163d0:	3101      	adds	r1, #1
   163d2:	65d9      	str	r1, [r3, #92]	; 0x5c
            STATS_INCN(ble_ll_conn_stats, tx_ctrl_bytes, cur_txlen);
   163d4:	6e19      	ldr	r1, [r3, #96]	; 0x60
   163d6:	440a      	add	r2, r1
   163d8:	661a      	str	r2, [r3, #96]	; 0x60
   163da:	e77a      	b.n	162d2 <ble_ll_conn_tx_pdu+0x326>
   163dc:	000218df 	.word	0x000218df
   163e0:	00014919 	.word	0x00014919
   163e4:	200022ac 	.word	0x200022ac
   163e8:	00015d61 	.word	0x00015d61
   163ec:	00015d51 	.word	0x00015d51
   163f0:	00015d69 	.word	0x00015d69
   163f4:	00015d41 	.word	0x00015d41
   163f8:	00015d91 	.word	0x00015d91
   163fc:	00015f43 	.word	0x00015f43

00016400 <ble_ll_conn_find_by_peer_addr>:
{
   16400:	b570      	push	{r4, r5, r6, lr}
   16402:	4605      	mov	r5, r0
   16404:	460e      	mov	r6, r1
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   16406:	4b0b      	ldr	r3, [pc, #44]	; (16434 <ble_ll_conn_find_by_peer_addr+0x34>)
   16408:	681c      	ldr	r4, [r3, #0]
   1640a:	e001      	b.n	16410 <ble_ll_conn_find_by_peer_addr+0x10>
   1640c:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   16410:	b16c      	cbz	r4, 1642e <ble_ll_conn_find_by_peer_addr+0x2e>
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN) &&
   16412:	2206      	movs	r2, #6
   16414:	4629      	mov	r1, r5
   16416:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1641a:	f7f8 faa9 	bl	e970 <memcmp>
   1641e:	2800      	cmp	r0, #0
   16420:	d1f4      	bne.n	1640c <ble_ll_conn_find_by_peer_addr+0xc>
            !((connsm->peer_addr_type ^ addr_type) & 1)) {
   16422:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   16426:	4073      	eors	r3, r6
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN) &&
   16428:	f013 0f01 	tst.w	r3, #1
   1642c:	d1ee      	bne.n	1640c <ble_ll_conn_find_by_peer_addr+0xc>
}
   1642e:	4620      	mov	r0, r4
   16430:	bd70      	pop	{r4, r5, r6, pc}
   16432:	bf00      	nop
   16434:	2000232c 	.word	0x2000232c

00016438 <ble_ll_conn_itvl_to_ticks>:
{
   16438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1643a:	460f      	mov	r7, r1
   1643c:	4616      	mov	r6, r2
    *itvl_ticks = ble_ll_tmr_u2t_r(itvl * BLE_LL_CONN_ITVL_USECS, itvl_usecs);
   1643e:	f240 44e2 	movw	r4, #1250	; 0x4e2
   16442:	fb04 f400 	mul.w	r4, r4, r0
    if (usecs <= 31249) {
   16446:	f647 2311 	movw	r3, #31249	; 0x7a11
   1644a:	429c      	cmp	r4, r3
   1644c:	d80d      	bhi.n	1646a <ble_ll_conn_itvl_to_ticks+0x32>
        return (usecs * 137439) / 4194304;
   1644e:	4d0b      	ldr	r5, [pc, #44]	; (1647c <ble_ll_conn_itvl_to_ticks+0x44>)
   16450:	fb05 f504 	mul.w	r5, r5, r4
   16454:	0dad      	lsrs	r5, r5, #22
    return os_cputime_ticks_to_usecs(ticks);
   16456:	4628      	mov	r0, r5
   16458:	f014 fc3e 	bl	2acd8 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   1645c:	1a24      	subs	r4, r4, r0
   1645e:	b2e4      	uxtb	r4, r4
   16460:	7034      	strb	r4, [r6, #0]
    if (*rem_us == USECS_PER_TICK) {
   16462:	2c1f      	cmp	r4, #31
   16464:	d006      	beq.n	16474 <ble_ll_conn_itvl_to_ticks+0x3c>
   16466:	603d      	str	r5, [r7, #0]
}
   16468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return os_cputime_usecs_to_ticks(usecs);
   1646a:	4620      	mov	r0, r4
   1646c:	f014 fc2c 	bl	2acc8 <os_cputime_usecs_to_ticks>
   16470:	4605      	mov	r5, r0
   16472:	e7f0      	b.n	16456 <ble_ll_conn_itvl_to_ticks+0x1e>
        *rem_us = 0;
   16474:	2300      	movs	r3, #0
   16476:	7033      	strb	r3, [r6, #0]
        ticks++;
   16478:	3501      	adds	r5, #1
   1647a:	e7f4      	b.n	16466 <ble_ll_conn_itvl_to_ticks+0x2e>
   1647c:	000218df 	.word	0x000218df

00016480 <ble_ll_conn_is_lru>:
    if (LL_TMR_LT(s1->last_scheduled, s2->last_scheduled)) {
   16480:	6e03      	ldr	r3, [r0, #96]	; 0x60
   16482:	6e0a      	ldr	r2, [r1, #96]	; 0x60
   16484:	1a9b      	subs	r3, r3, r2
   16486:	2b00      	cmp	r3, #0
   16488:	db01      	blt.n	1648e <ble_ll_conn_is_lru+0xe>
        rc = 0;
   1648a:	2000      	movs	r0, #0
}
   1648c:	4770      	bx	lr
        rc = 1;
   1648e:	2001      	movs	r0, #1
   16490:	4770      	bx	lr
	...

00016494 <ble_ll_conn_get_ce_end_time>:
{
   16494:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   16496:	4b04      	ldr	r3, [pc, #16]	; (164a8 <ble_ll_conn_get_ce_end_time+0x14>)
   16498:	681b      	ldr	r3, [r3, #0]
   1649a:	b10b      	cbz	r3, 164a0 <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   1649c:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
   1649e:	bd08      	pop	{r3, pc}
    return os_cputime_get32();
   164a0:	f014 fc0d 	bl	2acbe <os_cputime_get32>
    return ce_end_time;
   164a4:	e7fb      	b.n	1649e <ble_ll_conn_get_ce_end_time+0xa>
   164a6:	bf00      	nop
   164a8:	20002330 	.word	0x20002330

000164ac <ble_ll_conn_find_by_handle>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   164ac:	2801      	cmp	r0, #1
   164ae:	d108      	bne.n	164c2 <ble_ll_conn_find_by_handle+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   164b0:	3801      	subs	r0, #1
   164b2:	4b06      	ldr	r3, [pc, #24]	; (164cc <ble_ll_conn_find_by_handle+0x20>)
   164b4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   164b8:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   164bc:	7983      	ldrb	r3, [r0, #6]
   164be:	b113      	cbz	r3, 164c6 <ble_ll_conn_find_by_handle+0x1a>
}
   164c0:	4770      	bx	lr
    connsm = NULL;
   164c2:	2000      	movs	r0, #0
   164c4:	4770      	bx	lr
            connsm = NULL;
   164c6:	2000      	movs	r0, #0
    return connsm;
   164c8:	e7fa      	b.n	164c0 <ble_ll_conn_find_by_handle+0x14>
   164ca:	bf00      	nop
   164cc:	20002358 	.word	0x20002358

000164d0 <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   164d0:	4b07      	ldr	r3, [pc, #28]	; (164f0 <ble_ll_conn_sm_get+0x20>)
   164d2:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   164d4:	b138      	cbz	r0, 164e6 <ble_ll_conn_sm_get+0x16>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   164d6:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   164da:	4a05      	ldr	r2, [pc, #20]	; (164f0 <ble_ll_conn_sm_get+0x20>)
   164dc:	6013      	str	r3, [r2, #0]
   164de:	b103      	cbz	r3, 164e2 <ble_ll_conn_sm_get+0x12>
}
   164e0:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   164e2:	6052      	str	r2, [r2, #4]
   164e4:	4770      	bx	lr
        STATS_INC(ble_ll_conn_stats, no_free_conn_sm);
   164e6:	4a03      	ldr	r2, [pc, #12]	; (164f4 <ble_ll_conn_sm_get+0x24>)
   164e8:	6a13      	ldr	r3, [r2, #32]
   164ea:	3301      	adds	r3, #1
   164ec:	6213      	str	r3, [r2, #32]
    return connsm;
   164ee:	e7f7      	b.n	164e0 <ble_ll_conn_sm_get+0x10>
   164f0:	20002334 	.word	0x20002334
   164f4:	200022ac 	.word	0x200022ac

000164f8 <ble_ll_conn_calc_dci>:
{
   164f8:	b538      	push	{r3, r4, r5, lr}
   164fa:	4605      	mov	r5, r0
   164fc:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   164fe:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
    while (latency > 0) {
   16502:	b12c      	cbz	r4, 16510 <ble_ll_conn_calc_dci+0x18>
        index = ble_ll_conn_calc_dci_csa1(conn);
   16504:	4628      	mov	r0, r5
   16506:	f7ff fbe0 	bl	15cca <ble_ll_conn_calc_dci_csa1>
        latency--;
   1650a:	3c01      	subs	r4, #1
   1650c:	b2a4      	uxth	r4, r4
   1650e:	e7f8      	b.n	16502 <ble_ll_conn_calc_dci+0xa>
}
   16510:	bd38      	pop	{r3, r4, r5, pc}
	...

00016514 <ble_ll_conn_next_event>:
 *
 * @return int
 */
static int
ble_ll_conn_next_event(struct ble_ll_conn_sm *connsm)
{
   16514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16516:	4604      	mov	r4, r0
    struct ble_ll_conn_upd_req *upd;
    uint8_t skip_anchor_calc = 0;
    uint32_t usecs;

    /* XXX: deal with connection request procedure here as well */
    ble_ll_conn_chk_csm_flags(connsm);
   16518:	f7ff fcc8 	bl	15eac <ble_ll_conn_chk_csm_flags>

    /* If unable to start terminate procedure, start it now */
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   1651c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   16520:	b11b      	cbz	r3, 1652a <ble_ll_conn_next_event+0x16>
   16522:	f994 3000 	ldrsb.w	r3, [r4]
   16526:	2b00      	cmp	r3, #0
   16528:	da66      	bge.n	165f8 <ble_ll_conn_next_event+0xe4>
        ble_ll_ctrl_terminate_start(connsm);
    }

    if (CONN_F_TERMINATE_STARTED(connsm) && CONN_IS_PERIPHERAL(connsm)) {
   1652a:	7821      	ldrb	r1, [r4, #0]
   1652c:	f994 3000 	ldrsb.w	r3, [r4]
   16530:	2b00      	cmp	r3, #0
   16532:	db65      	blt.n	16600 <ble_ll_conn_next_event+0xec>
     * latency if we are doing one of these updates as long as we
     * know that the central has received the ACK to the PDU that set
     * the instant
     */
    /* Set event counter to the next connection event that we will tx/rx in */
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   16534:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   16538:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1653c:	fb05 f500 	mul.w	r5, r5, r0
    latency = 1;
    if (connsm->csmflags.cfbit.allow_periph_latency     &&
        !connsm->csmflags.cfbit.conn_update_sched       &&
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   16540:	6822      	ldr	r2, [r4, #0]
   16542:	4bac      	ldr	r3, [pc, #688]	; (167f4 <ble_ll_conn_next_event+0x2e0>)
   16544:	4013      	ands	r3, r2
    if (connsm->csmflags.cfbit.allow_periph_latency     &&
   16546:	2b10      	cmp	r3, #16
   16548:	d061      	beq.n	1660e <ble_ll_conn_next_event+0xfa>
    latency = 1;
   1654a:	2601      	movs	r6, #1
        if (connsm->csmflags.cfbit.pkt_rxd) {
            latency += connsm->periph_latency;
            itvl = itvl * latency;
        }
    }
    connsm->event_cntr += latency;
   1654c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   16550:	4433      	add	r3, r6
   16552:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46

    if (!skip_anchor_calc) {
        /* Calculate next anchor point for connection.
         * We can use pre-calculated values for one interval if latency is 1.
         */
        if (latency == 1) {
   16556:	2e01      	cmp	r6, #1
   16558:	d065      	beq.n	16626 <ble_ll_conn_next_event+0x112>
    if (usecs <= 31249) {
   1655a:	f647 2311 	movw	r3, #31249	; 0x7a11
   1655e:	429d      	cmp	r5, r3
   16560:	f200 8082 	bhi.w	16668 <ble_ll_conn_next_event+0x154>
        return (usecs * 137439) / 4194304;
   16564:	4fa4      	ldr	r7, [pc, #656]	; (167f8 <ble_ll_conn_next_event+0x2e4>)
   16566:	fb07 f705 	mul.w	r7, r7, r5
   1656a:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   1656c:	4638      	mov	r0, r7
   1656e:	f014 fbb3 	bl	2acd8 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   16572:	1a2d      	subs	r5, r5, r0
   16574:	b2ed      	uxtb	r5, r5
    if (*rem_us == USECS_PER_TICK) {
   16576:	2d1f      	cmp	r5, #31
   16578:	d07b      	beq.n	16672 <ble_ll_conn_next_event+0x15e>
    *ticks += t_ticks;
   1657a:	6f20      	ldr	r0, [r4, #112]	; 0x70
   1657c:	4438      	add	r0, r7
   1657e:	6720      	str	r0, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   16580:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
   16584:	4405      	add	r5, r0
   16586:	b2ed      	uxtb	r5, r5
   16588:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   1658c:	2d1e      	cmp	r5, #30
   1658e:	d905      	bls.n	1659c <ble_ll_conn_next_event+0x88>
        *rem_us -= USECS_PER_TICK;
   16590:	3d1f      	subs	r5, #31
   16592:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        *ticks += 1;
   16596:	6f23      	ldr	r3, [r4, #112]	; 0x70
   16598:	3301      	adds	r3, #1
   1659a:	6723      	str	r3, [r4, #112]	; 0x70
     * If a connection update has been scheduled and the event counter
     * is now equal to the instant, we need to adjust the start of the
     * connection by the the transmit window offset. We also copy in the
     * update parameters as they now should take effect.
     */
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1659c:	7863      	ldrb	r3, [r4, #1]
   1659e:	f013 0f01 	tst.w	r3, #1
   165a2:	d005      	beq.n	165b0 <ble_ll_conn_next_event+0x9c>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   165a4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   165a8:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   165ac:	429a      	cmp	r2, r3
   165ae:	d063      	beq.n	16678 <ble_ll_conn_next_event+0x164>
     * counter, when we get here the event counter has already been
     * incremented by 1. That is why we do a signed comparison and change to
     * new channel map once the event counter equals or has passed channel
     * map update instant.
     */
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   165b0:	7863      	ldrb	r3, [r4, #1]
   165b2:	f013 0f10 	tst.w	r3, #16
   165b6:	d007      	beq.n	165c8 <ble_ll_conn_next_event+0xb4>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   165b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   165ba:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
   165be:	1a9b      	subs	r3, r3, r2
   165c0:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   165c2:	2b00      	cmp	r3, #0
   165c4:	f340 80d0 	ble.w	16768 <ble_ll_conn_next_event+0x254>
#endif
    }
#endif

    /* Calculate data channel index of next connection event */
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   165c8:	4631      	mov	r1, r6
   165ca:	4620      	mov	r0, r4
   165cc:	f7ff ff94 	bl	164f8 <ble_ll_conn_calc_dci>
   165d0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    /*
     * If we are trying to terminate connection, check if next wake time is
     * passed the termination timeout. If so, no need to continue with
     * connection as we will time out anyway.
     */
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   165d4:	f994 3000 	ldrsb.w	r3, [r4]
   165d8:	2b00      	cmp	r3, #0
   165da:	f2c0 80dc 	blt.w	16796 <ble_ll_conn_next_event+0x282>
     */
    itvl = ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
                          BLE_LL_SCHED_USECS_PER_SLOT);

#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   165de:	79e3      	ldrb	r3, [r4, #7]
   165e0:	2b02      	cmp	r3, #2
   165e2:	f000 80e1 	beq.w	167a8 <ble_ll_conn_next_event+0x294>
    itvl = ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
   165e6:	20a3      	movs	r0, #163	; 0xa3
        cur_ww += BLE_LL_JITTER_USECS;
        connsm->periph_cur_window_widening = cur_ww;
        itvl += ble_ll_tmr_u2t(cur_ww + connsm->periph_cur_tx_win_usecs);
    }
#endif
    itvl -= g_ble_ll_sched_offset_ticks;
   165e8:	4b84      	ldr	r3, [pc, #528]	; (167fc <ble_ll_conn_next_event+0x2e8>)
   165ea:	781b      	ldrb	r3, [r3, #0]
   165ec:	1ac0      	subs	r0, r0, r3
    connsm->ce_end_time = connsm->anchor_point + itvl;
   165ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
   165f0:	4418      	add	r0, r3
   165f2:	65a0      	str	r0, [r4, #88]	; 0x58

    return 0;
   165f4:	2000      	movs	r0, #0
}
   165f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_ctrl_terminate_start(connsm);
   165f8:	4620      	mov	r0, r4
   165fa:	f002 f955 	bl	188a8 <ble_ll_ctrl_terminate_start>
   165fe:	e794      	b.n	1652a <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && CONN_IS_PERIPHERAL(connsm)) {
   16600:	79e3      	ldrb	r3, [r4, #7]
   16602:	2b02      	cmp	r3, #2
   16604:	d196      	bne.n	16534 <ble_ll_conn_next_event+0x20>
        connsm->periph_latency = 0;
   16606:	2300      	movs	r3, #0
   16608:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
   1660c:	e792      	b.n	16534 <ble_ll_conn_next_event+0x20>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   1660e:	f011 0f01 	tst.w	r1, #1
   16612:	d006      	beq.n	16622 <ble_ll_conn_next_event+0x10e>
            latency += connsm->periph_latency;
   16614:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
   16618:	3601      	adds	r6, #1
   1661a:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   1661c:	fb06 f505 	mul.w	r5, r6, r5
   16620:	e794      	b.n	1654c <ble_ll_conn_next_event+0x38>
    latency = 1;
   16622:	2601      	movs	r6, #1
   16624:	e792      	b.n	1654c <ble_ll_conn_next_event+0x38>
            connsm->anchor_point += connsm->conn_itvl_ticks;
   16626:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   16628:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1662a:	4413      	add	r3, r2
   1662c:	6723      	str	r3, [r4, #112]	; 0x70
            ble_ll_tmr_add_u(&connsm->anchor_point, &connsm->anchor_point_usecs,
   1662e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   16632:	2b1e      	cmp	r3, #30
   16634:	d80e      	bhi.n	16654 <ble_ll_conn_next_event+0x140>
    *rem_us += usecs;
   16636:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1663a:	4413      	add	r3, r2
   1663c:	b2db      	uxtb	r3, r3
   1663e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   16642:	2b1e      	cmp	r3, #30
   16644:	d9aa      	bls.n	1659c <ble_ll_conn_next_event+0x88>
        *rem_us -= USECS_PER_TICK;
   16646:	3b1f      	subs	r3, #31
   16648:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   1664c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1664e:	3301      	adds	r3, #1
   16650:	6723      	str	r3, [r4, #112]	; 0x70
    }
}
   16652:	e7a3      	b.n	1659c <ble_ll_conn_next_event+0x88>
    BLE_LL_ASSERT(usecs < USECS_PER_TICK);
   16654:	f7f5 fda2 	bl	c19c <hal_debugger_connected>
   16658:	b100      	cbz	r0, 1665c <ble_ll_conn_next_event+0x148>
   1665a:	be01      	bkpt	0x0001
   1665c:	2300      	movs	r3, #0
   1665e:	461a      	mov	r2, r3
   16660:	4619      	mov	r1, r3
   16662:	4618      	mov	r0, r3
   16664:	f7f6 fa9e 	bl	cba4 <__assert_func>
    return os_cputime_usecs_to_ticks(usecs);
   16668:	4628      	mov	r0, r5
   1666a:	f014 fb2d 	bl	2acc8 <os_cputime_usecs_to_ticks>
   1666e:	4607      	mov	r7, r0
   16670:	e77c      	b.n	1656c <ble_ll_conn_next_event+0x58>
        ticks++;
   16672:	3701      	adds	r7, #1
        *rem_us = 0;
   16674:	2500      	movs	r5, #0
   16676:	e780      	b.n	1657a <ble_ll_conn_next_event+0x66>
            (CONN_IS_PERIPHERAL(connsm) &&
   16678:	79e3      	ldrb	r3, [r4, #7]
        if (CONN_IS_CENTRAL(connsm) ||
   1667a:	2b02      	cmp	r3, #2
   1667c:	d034      	beq.n	166e8 <ble_ll_conn_next_event+0x1d4>
            (connsm->conn_itvl != upd->interval) ||
   1667e:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   16682:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   16686:	429a      	cmp	r2, r3
   16688:	d034      	beq.n	166f4 <ble_ll_conn_next_event+0x1e0>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   1668a:	7863      	ldrb	r3, [r4, #1]
   1668c:	f043 0302 	orr.w	r3, r3, #2
   16690:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   16692:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   16696:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        connsm->periph_latency = upd->latency;
   1669a:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   1669e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        connsm->tx_win_size = upd->winsize;
   166a2:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   166a6:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   166aa:	f240 43e2 	movw	r3, #1250	; 0x4e2
   166ae:	fb03 f302 	mul.w	r3, r3, r2
        connsm->periph_cur_tx_win_usecs =
   166b2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        connsm->tx_win_off = upd->winoffset;
   166b6:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   166ba:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
        connsm->conn_itvl = upd->interval;
   166be:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
   166c2:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
        ble_ll_conn_itvl_to_ticks(connsm->conn_itvl, &connsm->conn_itvl_ticks,
   166c6:	f104 0275 	add.w	r2, r4, #117	; 0x75
   166ca:	f104 0178 	add.w	r1, r4, #120	; 0x78
   166ce:	f7ff feb3 	bl	16438 <ble_ll_conn_itvl_to_ticks>
        if (upd->winoffset != 0) {
   166d2:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   166d6:	b9d3      	cbnz	r3, 1670e <ble_ll_conn_next_event+0x1fa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   166d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
   166da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        connsm->csmflags.cfbit.conn_update_sched = 0;
   166de:	7863      	ldrb	r3, [r4, #1]
   166e0:	f36f 0300 	bfc	r3, #0, #1
   166e4:	7063      	strb	r3, [r4, #1]
   166e6:	e763      	b.n	165b0 <ble_ll_conn_next_event+0x9c>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   166e8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
        if (CONN_IS_CENTRAL(connsm) ||
   166ec:	f013 0f40 	tst.w	r3, #64	; 0x40
   166f0:	d1cb      	bne.n	1668a <ble_ll_conn_next_event+0x176>
   166f2:	e7c4      	b.n	1667e <ble_ll_conn_next_event+0x16a>
            (connsm->periph_latency != upd->latency) ||
   166f4:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   166f8:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval) ||
   166fc:	429a      	cmp	r2, r3
   166fe:	d1c4      	bne.n	1668a <ble_ll_conn_next_event+0x176>
            (connsm->supervision_tmo != upd->timeout)) {
   16700:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   16704:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->periph_latency != upd->latency) ||
   16708:	429a      	cmp	r2, r3
   1670a:	d1be      	bne.n	1668a <ble_ll_conn_next_event+0x176>
   1670c:	e7c1      	b.n	16692 <ble_ll_conn_next_event+0x17e>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   1670e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   16712:	fb05 f503 	mul.w	r5, r5, r3
    if (usecs <= 31249) {
   16716:	f647 2311 	movw	r3, #31249	; 0x7a11
   1671a:	429d      	cmp	r5, r3
   1671c:	d81c      	bhi.n	16758 <ble_ll_conn_next_event+0x244>
        return (usecs * 137439) / 4194304;
   1671e:	4f36      	ldr	r7, [pc, #216]	; (167f8 <ble_ll_conn_next_event+0x2e4>)
   16720:	fb07 f705 	mul.w	r7, r7, r5
   16724:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   16726:	4638      	mov	r0, r7
   16728:	f014 fad6 	bl	2acd8 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   1672c:	1a2b      	subs	r3, r5, r0
   1672e:	b2db      	uxtb	r3, r3
    if (*rem_us == USECS_PER_TICK) {
   16730:	2b1f      	cmp	r3, #31
   16732:	d016      	beq.n	16762 <ble_ll_conn_next_event+0x24e>
    *ticks += t_ticks;
   16734:	6f22      	ldr	r2, [r4, #112]	; 0x70
   16736:	4417      	add	r7, r2
   16738:	6727      	str	r7, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   1673a:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1673e:	4413      	add	r3, r2
   16740:	b2db      	uxtb	r3, r3
   16742:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   16746:	2b1e      	cmp	r3, #30
   16748:	d9c6      	bls.n	166d8 <ble_ll_conn_next_event+0x1c4>
        *rem_us -= USECS_PER_TICK;
   1674a:	3b1f      	subs	r3, #31
   1674c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   16750:	463b      	mov	r3, r7
   16752:	3301      	adds	r3, #1
   16754:	6723      	str	r3, [r4, #112]	; 0x70
}
   16756:	e7bf      	b.n	166d8 <ble_ll_conn_next_event+0x1c4>
    return os_cputime_usecs_to_ticks(usecs);
   16758:	4628      	mov	r0, r5
   1675a:	f014 fab5 	bl	2acc8 <os_cputime_usecs_to_ticks>
   1675e:	4607      	mov	r7, r0
   16760:	e7e1      	b.n	16726 <ble_ll_conn_next_event+0x212>
        ticks++;
   16762:	3701      	adds	r7, #1
        *rem_us = 0;
   16764:	2300      	movs	r3, #0
   16766:	e7e5      	b.n	16734 <ble_ll_conn_next_event+0x220>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   16768:	f104 0521 	add.w	r5, r4, #33	; 0x21
   1676c:	4628      	mov	r0, r5
   1676e:	f004 fc26 	bl	1afbe <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   16772:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   16776:	f8d4 3021 	ldr.w	r3, [r4, #33]	; 0x21
   1677a:	61e3      	str	r3, [r4, #28]
   1677c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16780:	f884 3020 	strb.w	r3, [r4, #32]
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   16784:	7863      	ldrb	r3, [r4, #1]
   16786:	f36f 1304 	bfc	r3, #4, #1
   1678a:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   1678c:	2101      	movs	r1, #1
   1678e:	4620      	mov	r0, r4
   16790:	f002 f936 	bl	18a00 <ble_ll_ctrl_proc_stop>
   16794:	e718      	b.n	165c8 <ble_ll_conn_next_event+0xb4>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   16796:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   16798:	6f22      	ldr	r2, [r4, #112]	; 0x70
   1679a:	1a9b      	subs	r3, r3, r2
   1679c:	2b00      	cmp	r3, #0
   1679e:	f73f af1e 	bgt.w	165de <ble_ll_conn_next_event+0xca>
            return -1;
   167a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167a6:	e726      	b.n	165f6 <ble_ll_conn_next_event+0xe2>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   167a8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   167ac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   167ae:	6f20      	ldr	r0, [r4, #112]	; 0x70
   167b0:	f004 fc1a 	bl	1afe8 <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   167b4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
   167b8:	f240 2371 	movw	r3, #625	; 0x271
   167bc:	fb03 f302 	mul.w	r3, r3, r2
   167c0:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   167c2:	4298      	cmp	r0, r3
   167c4:	d212      	bcs.n	167ec <ble_ll_conn_next_event+0x2d8>
        cur_ww += BLE_LL_JITTER_USECS;
   167c6:	3010      	adds	r0, #16
        connsm->periph_cur_window_widening = cur_ww;
   167c8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        itvl += ble_ll_tmr_u2t(cur_ww + connsm->periph_cur_tx_win_usecs);
   167cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   167d0:	4418      	add	r0, r3
    if (usecs <= 31249) {
   167d2:	f647 2311 	movw	r3, #31249	; 0x7a11
   167d6:	4298      	cmp	r0, r3
   167d8:	d805      	bhi.n	167e6 <ble_ll_conn_next_event+0x2d2>
        return (usecs * 137439) / 4194304;
   167da:	4b07      	ldr	r3, [pc, #28]	; (167f8 <ble_ll_conn_next_event+0x2e4>)
   167dc:	fb03 f000 	mul.w	r0, r3, r0
   167e0:	0d80      	lsrs	r0, r0, #22
   167e2:	30a3      	adds	r0, #163	; 0xa3
   167e4:	e700      	b.n	165e8 <ble_ll_conn_next_event+0xd4>
    return os_cputime_usecs_to_ticks(usecs);
   167e6:	f014 fa6f 	bl	2acc8 <os_cputime_usecs_to_ticks>
   167ea:	e7fa      	b.n	167e2 <ble_ll_conn_next_event+0x2ce>
            return -1;
   167ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167f0:	e701      	b.n	165f6 <ble_ll_conn_next_event+0xe2>
   167f2:	bf00      	nop
   167f4:	00401110 	.word	0x00401110
   167f8:	000218df 	.word	0x000218df
   167fc:	200026a8 	.word	0x200026a8

00016800 <ble_ll_conn_created>:
 *
 * @ return 0: connection NOT created. 1: connection created
 */
static int
ble_ll_conn_created(struct ble_ll_conn_sm *connsm, struct ble_mbuf_hdr *rxhdr)
{
   16800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16802:	4604      	mov	r4, r0
   16804:	460d      	mov	r5, r1
#endif

    /* XXX: TODO this assumes we received in 1M phy */

    /* Set state to created */
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   16806:	2301      	movs	r3, #1
   16808:	7183      	strb	r3, [r0, #6]

    /* Clear packet received flag */
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1680a:	7803      	ldrb	r3, [r0, #0]
   1680c:	f36f 0300 	bfc	r3, #0, #1
   16810:	7003      	strb	r3, [r0, #0]
    return os_cputime_get32();
   16812:	f014 fa54 	bl	2acbe <os_cputime_get32>

    /* Consider time created the last scheduled time */
    connsm->last_scheduled = ble_ll_tmr_get();
   16816:	6620      	str	r0, [r4, #96]	; 0x60

    /*
     * Set the last rxd pdu time since this is where we want to start the
     * supervision timer from.
     */
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   16818:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
     * time of the connect request. The actual connection starts 1.25 msecs plus
     * the transmit window offset from the end of the connection request.
     */
    rc = 1;
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1681c:	79e3      	ldrb	r3, [r4, #7]
   1681e:	2b02      	cmp	r3, #2
   16820:	d009      	beq.n	16836 <ble_ll_conn_created+0x36>
         */
        if (!ble_ll_conn_phy_update_if_needed(connsm)) {
            CONN_F_CTRLR_PHY_UPDATE(connsm) = 1;
        }
#endif
        switch (connsm->conn_role) {
   16822:	79e3      	ldrb	r3, [r4, #7]
   16824:	2b02      	cmp	r3, #2
   16826:	f040 8087 	bne.w	16938 <ble_ll_conn_created+0x138>
                                   NULL);
            break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        case BLE_LL_CONN_ROLE_PERIPHERAL:
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   1682a:	4629      	mov	r1, r5
   1682c:	4620      	mov	r0, r4
   1682e:	f7ff f9c7 	bl	15bc0 <ble_ll_adv_send_conn_comp_ev>
            break;
   16832:	2001      	movs	r0, #1
            break;
        }
    }

    return rc;
}
   16834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   16836:	68ab      	ldr	r3, [r5, #8]
   16838:	67e3      	str	r3, [r4, #124]	; 0x7c
        usecs = rxhdr->rem_usecs + 1250 +
   1683a:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1683c:	f8b4 006e 	ldrh.w	r0, [r4, #110]	; 0x6e
        usecs = rxhdr->rem_usecs + 1250 +
   16840:	f240 43e2 	movw	r3, #1250	; 0x4e2
   16844:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   16848:	79a9      	ldrb	r1, [r5, #6]
   1684a:	2022      	movs	r0, #34	; 0x22
   1684c:	f7fe f8dc 	bl	14a08 <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   16850:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   16852:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   16856:	78ab      	ldrb	r3, [r5, #2]
   16858:	2b24      	cmp	r3, #36	; 0x24
   1685a:	d816      	bhi.n	1688a <ble_ll_conn_created+0x8a>
            switch (rxhdr->rxinfo.phy) {
   1685c:	f995 3005 	ldrsb.w	r3, [r5, #5]
   16860:	2b02      	cmp	r3, #2
   16862:	dc0b      	bgt.n	1687c <ble_ll_conn_created+0x7c>
   16864:	2b00      	cmp	r3, #0
   16866:	dc0e      	bgt.n	16886 <ble_ll_conn_created+0x86>
                BLE_LL_ASSERT(0);
   16868:	f7f5 fc98 	bl	c19c <hal_debugger_connected>
   1686c:	b100      	cbz	r0, 16870 <ble_ll_conn_created+0x70>
   1686e:	be01      	bkpt	0x0001
   16870:	2300      	movs	r3, #0
   16872:	461a      	mov	r2, r3
   16874:	4619      	mov	r1, r3
   16876:	4618      	mov	r0, r3
   16878:	f7f6 f994 	bl	cba4 <__assert_func>
            switch (rxhdr->rxinfo.phy) {
   1687c:	2b03      	cmp	r3, #3
   1687e:	d1f3      	bne.n	16868 <ble_ll_conn_created+0x68>
                usecs += 2500;
   16880:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   16884:	e001      	b.n	1688a <ble_ll_conn_created+0x8a>
                usecs += 1250;
   16886:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        connsm->anchor_point = rxhdr->beg_cputime;
   1688a:	68ab      	ldr	r3, [r5, #8]
   1688c:	6723      	str	r3, [r4, #112]	; 0x70
        connsm->anchor_point_usecs = 0;
   1688e:	2300      	movs	r3, #0
   16890:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (usecs <= 31249) {
   16894:	f647 2311 	movw	r3, #31249	; 0x7a11
   16898:	429e      	cmp	r6, r3
   1689a:	d842      	bhi.n	16922 <ble_ll_conn_created+0x122>
        return (usecs * 137439) / 4194304;
   1689c:	4f2b      	ldr	r7, [pc, #172]	; (1694c <ble_ll_conn_created+0x14c>)
   1689e:	fb07 f706 	mul.w	r7, r7, r6
   168a2:	0dbf      	lsrs	r7, r7, #22
    return os_cputime_ticks_to_usecs(ticks);
   168a4:	4638      	mov	r0, r7
   168a6:	f014 fa17 	bl	2acd8 <os_cputime_ticks_to_usecs>
    *rem_us = usecs - ble_ll_tmr_t2u(ticks);
   168aa:	1a36      	subs	r6, r6, r0
   168ac:	b2f6      	uxtb	r6, r6
    if (*rem_us == USECS_PER_TICK) {
   168ae:	2e1f      	cmp	r6, #31
   168b0:	d03c      	beq.n	1692c <ble_ll_conn_created+0x12c>
    *ticks += t_ticks;
   168b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
   168b4:	4438      	add	r0, r7
   168b6:	6720      	str	r0, [r4, #112]	; 0x70
    *rem_us += t_rem_us;
   168b8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   168bc:	441e      	add	r6, r3
   168be:	b2f3      	uxtb	r3, r6
   168c0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    if (*rem_us >= USECS_PER_TICK) {
   168c4:	2b1e      	cmp	r3, #30
   168c6:	d905      	bls.n	168d4 <ble_ll_conn_created+0xd4>
        *rem_us -= USECS_PER_TICK;
   168c8:	3b1f      	subs	r3, #31
   168ca:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        *ticks += 1;
   168ce:	4603      	mov	r3, r0
   168d0:	3301      	adds	r3, #1
   168d2:	6723      	str	r3, [r4, #112]	; 0x70
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   168d4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   168d8:	f240 40e2 	movw	r0, #1250	; 0x4e2
   168dc:	fb00 f003 	mul.w	r0, r0, r3
        connsm->periph_cur_tx_win_usecs =
   168e0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        connsm->ce_end_time = connsm->anchor_point +
   168e4:	6f26      	ldr	r6, [r4, #112]	; 0x70
                              ble_ll_tmr_u2t(MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) *
   168e6:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
   168ea:	3008      	adds	r0, #8
    if (usecs <= 31249) {
   168ec:	f647 2311 	movw	r3, #31249	; 0x7a11
   168f0:	4298      	cmp	r0, r3
   168f2:	d81e      	bhi.n	16932 <ble_ll_conn_created+0x132>
        return (usecs * 137439) / 4194304;
   168f4:	4b15      	ldr	r3, [pc, #84]	; (1694c <ble_ll_conn_created+0x14c>)
   168f6:	fb03 f000 	mul.w	r0, r3, r0
   168fa:	0d80      	lsrs	r0, r0, #22
        connsm->ce_end_time = connsm->anchor_point +
   168fc:	4406      	add	r6, r0
                                             connsm->periph_cur_tx_win_usecs) + 1;
   168fe:	3601      	adds	r6, #1
        connsm->ce_end_time = connsm->anchor_point +
   16900:	65a6      	str	r6, [r4, #88]	; 0x58
        while (ble_ll_sched_conn_periph_new(connsm)) {
   16902:	4620      	mov	r0, r4
   16904:	f004 f9a2 	bl	1ac4c <ble_ll_sched_conn_periph_new>
   16908:	2800      	cmp	r0, #0
   1690a:	d08a      	beq.n	16822 <ble_ll_conn_created+0x22>
            if (ble_ll_conn_next_event(connsm)) {
   1690c:	4620      	mov	r0, r4
   1690e:	f7ff fe01 	bl	16514 <ble_ll_conn_next_event>
   16912:	2800      	cmp	r0, #0
   16914:	d0f5      	beq.n	16902 <ble_ll_conn_created+0x102>
                STATS_INC(ble_ll_conn_stats, cant_set_sched);
   16916:	4a0e      	ldr	r2, [pc, #56]	; (16950 <ble_ll_conn_created+0x150>)
   16918:	68d3      	ldr	r3, [r2, #12]
   1691a:	3301      	adds	r3, #1
   1691c:	60d3      	str	r3, [r2, #12]
                rc = 0;
   1691e:	2000      	movs	r0, #0
   16920:	e788      	b.n	16834 <ble_ll_conn_created+0x34>
    return os_cputime_usecs_to_ticks(usecs);
   16922:	4630      	mov	r0, r6
   16924:	f014 f9d0 	bl	2acc8 <os_cputime_usecs_to_ticks>
   16928:	4607      	mov	r7, r0
   1692a:	e7bb      	b.n	168a4 <ble_ll_conn_created+0xa4>
        ticks++;
   1692c:	3701      	adds	r7, #1
        *rem_us = 0;
   1692e:	2600      	movs	r6, #0
   16930:	e7bf      	b.n	168b2 <ble_ll_conn_created+0xb2>
    return os_cputime_usecs_to_ticks(usecs);
   16932:	f014 f9c9 	bl	2acc8 <os_cputime_usecs_to_ticks>
   16936:	e7e1      	b.n	168fc <ble_ll_conn_created+0xfc>
            BLE_LL_ASSERT(0);
   16938:	f7f5 fc30 	bl	c19c <hal_debugger_connected>
   1693c:	b100      	cbz	r0, 16940 <ble_ll_conn_created+0x140>
   1693e:	be01      	bkpt	0x0001
   16940:	2300      	movs	r3, #0
   16942:	461a      	mov	r2, r3
   16944:	4619      	mov	r1, r3
   16946:	4618      	mov	r0, r3
   16948:	f7f6 f92c 	bl	cba4 <__assert_func>
   1694c:	000218df 	.word	0x000218df
   16950:	200022ac 	.word	0x200022ac

00016954 <ble_ll_conn_set_csa>:
{
   16954:	b510      	push	{r4, lr}
   16956:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   16958:	2300      	movs	r3, #0
   1695a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   1695e:	2101      	movs	r1, #1
   16960:	f7ff fdca 	bl	164f8 <ble_ll_conn_calc_dci>
   16964:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
}
   16968:	bd10      	pop	{r4, pc}
	...

0001696c <ble_ll_conn_wfr_timer_exp>:
{
   1696c:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   1696e:	4b04      	ldr	r3, [pc, #16]	; (16980 <ble_ll_conn_wfr_timer_exp+0x14>)
   16970:	6818      	ldr	r0, [r3, #0]
   16972:	f7ff f9db 	bl	15d2c <ble_ll_conn_current_sm_over>
    STATS_INC(ble_ll_conn_stats, wfr_expirations);
   16976:	4a03      	ldr	r2, [pc, #12]	; (16984 <ble_ll_conn_wfr_timer_exp+0x18>)
   16978:	6953      	ldr	r3, [r2, #20]
   1697a:	3301      	adds	r3, #1
   1697c:	6153      	str	r3, [r2, #20]
}
   1697e:	bd08      	pop	{r3, pc}
   16980:	20002330 	.word	0x20002330
   16984:	200022ac 	.word	0x200022ac

00016988 <ble_ll_conn_auth_pyld_timer_start>:
{
   16988:	b510      	push	{r4, lr}
   1698a:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   1698c:	f8b0 004e 	ldrh.w	r0, [r0, #78]	; 0x4e
   16990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   16994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16998:	2300      	movs	r3, #0
   1699a:	0200      	lsls	r0, r0, #8
   1699c:	2100      	movs	r1, #0
   1699e:	f016 fb07 	bl	2cfb0 <__aeabi_uldivmod>
   169a2:	4601      	mov	r1, r0
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   169a4:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   169a8:	f7f6 fad6 	bl	cf58 <os_callout_reset>
}
   169ac:	bd10      	pop	{r4, pc}

000169ae <ble_ll_conn_auth_pyld_timer_cb>:
{
   169ae:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   169b0:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   169b2:	4620      	mov	r0, r4
   169b4:	f000 fff4 	bl	179a0 <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING, NULL);
   169b8:	2200      	movs	r2, #0
   169ba:	2107      	movs	r1, #7
   169bc:	4620      	mov	r0, r4
   169be:	f001 ffa5 	bl	1890c <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   169c2:	4620      	mov	r0, r4
   169c4:	f7ff ffe0 	bl	16988 <ble_ll_conn_auth_pyld_timer_start>
}
   169c8:	bd10      	pop	{r4, pc}
	...

000169cc <ble_ll_conn_sm_new>:
{
   169cc:	b538      	push	{r3, r4, r5, lr}
   169ce:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   169d0:	2100      	movs	r1, #0
   169d2:	6001      	str	r1, [r0, #0]
    connsm->event_cntr = 0;
   169d4:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   169d8:	7181      	strb	r1, [r0, #6]
    connsm->disconnect_reason = 0;
   169da:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    connsm->rxd_disconnect_reason = 0;
   169de:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   169e2:	2322      	movs	r3, #34	; 0x22
   169e4:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   169e8:	63c1      	str	r1, [r0, #60]	; 0x3c
   169ea:	f8c0 103f 	str.w	r1, [r0, #63]	; 0x3f
    connsm->vers_nr = 0;
   169ee:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    connsm->comp_id = 0;
   169f2:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
    connsm->sub_vers_nr = 0;
   169f6:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    connsm->reject_reason = BLE_ERR_SUCCESS;
   169fa:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   169fe:	237f      	movs	r3, #127	; 0x7f
   16a00:	7203      	strb	r3, [r0, #8]
    connsm->inita_identity_used = 0;
   16a02:	f880 108c 	strb.w	r1, [r0, #140]	; 0x8c
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   16a06:	23ff      	movs	r3, #255	; 0xff
   16a08:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
    connsm->pending_ctrl_procs = 0;
   16a0c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    connsm->conn_param_req.handle = 0;
   16a10:	f8a0 1168 	strh.w	r1, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   16a14:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
   16a18:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    ev->ev.ev_queued = 0;
   16a1c:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    ev->ev.ev_cb = (os_event_fn *)fn;
   16a20:	4b23      	ldr	r3, [pc, #140]	; (16ab0 <ble_ll_conn_sm_new+0xe4>)
   16a22:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    ev->ev.ev_arg = arg;
   16a26:	f8c0 00a0 	str.w	r0, [r0, #160]	; 0xa0
    STAILQ_INIT(&connsm->conn_txq);
   16a2a:	4603      	mov	r3, r0
   16a2c:	f843 1fac 	str.w	r1, [r3, #172]!
   16a30:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    connsm->cur_tx_pdu = NULL;
   16a34:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
    connsm->tx_seqnum = 0;
   16a38:	f880 102e 	strb.w	r1, [r0, #46]	; 0x2e
    connsm->next_exp_seqnum = 0;
   16a3c:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    connsm->cons_rxd_bad_crc = 0;
   16a40:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    connsm->last_rxd_sn = 1;
   16a44:	2501      	movs	r5, #1
   16a46:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
    connsm->completed_pkts = 0;
   16a4a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   16a4e:	4b19      	ldr	r3, [pc, #100]	; (16ab4 <ble_ll_conn_sm_new+0xe8>)
   16a50:	7a1a      	ldrb	r2, [r3, #8]
   16a52:	7242      	strb	r2, [r0, #9]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   16a54:	79da      	ldrb	r2, [r3, #7]
   16a56:	7282      	strb	r2, [r0, #10]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   16a58:	899a      	ldrh	r2, [r3, #12]
   16a5a:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   16a5c:	8a9b      	ldrh	r3, [r3, #20]
   16a5e:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16a60:	f44f 73a4 	mov.w	r3, #328	; 0x148
   16a64:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16a66:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16a68:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16a6a:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16a6c:	231b      	movs	r3, #27
   16a6e:	72c3      	strb	r3, [r0, #11]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16a70:	7303      	strb	r3, [r0, #12]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16a72:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16a74:	7383      	strb	r3, [r0, #14]
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   16a76:	2250      	movs	r2, #80	; 0x50
   16a78:	f500 708c 	add.w	r0, r0, #280	; 0x118
   16a7c:	f7f7 ffc1 	bl	ea02 <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   16a80:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   16a84:	f640 33b8 	movw	r3, #3000	; 0xbb8
   16a88:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    CONN_F_LE_PING_SUPP(connsm) = 1;
   16a8c:	78a3      	ldrb	r3, [r4, #2]
   16a8e:	f043 0308 	orr.w	r3, r3, #8
   16a92:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   16a94:	4623      	mov	r3, r4
   16a96:	4a08      	ldr	r2, [pc, #32]	; (16ab8 <ble_ll_conn_sm_new+0xec>)
   16a98:	4908      	ldr	r1, [pc, #32]	; (16abc <ble_ll_conn_sm_new+0xf0>)
   16a9a:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   16a9e:	f7f6 fa2f 	bl	cf00 <os_callout_init>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   16aa2:	4b07      	ldr	r3, [pc, #28]	; (16ac0 <ble_ll_conn_sm_new+0xf4>)
   16aa4:	681a      	ldr	r2, [r3, #0]
   16aa6:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
   16aaa:	601c      	str	r4, [r3, #0]
}
   16aac:	bd38      	pop	{r3, r4, r5, pc}
   16aae:	bf00      	nop
   16ab0:	00016c39 	.word	0x00016c39
   16ab4:	2000233c 	.word	0x2000233c
   16ab8:	000169af 	.word	0x000169af
   16abc:	20001fc8 	.word	0x20001fc8
   16ac0:	2000232c 	.word	0x2000232c

00016ac4 <ble_ll_conn_update_eff_data_len>:
{
   16ac4:	b508      	push	{r3, lr}
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   16ac6:	8a43      	ldrh	r3, [r0, #18]
   16ac8:	8a82      	ldrh	r2, [r0, #20]
   16aca:	4293      	cmp	r3, r2
   16acc:	bf28      	it	cs
   16ace:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   16ad0:	8b42      	ldrh	r2, [r0, #26]
   16ad2:	429a      	cmp	r2, r3
   16ad4:	d021      	beq.n	16b1a <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   16ad6:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   16ad8:	2201      	movs	r2, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   16ada:	8a03      	ldrh	r3, [r0, #16]
   16adc:	8ac1      	ldrh	r1, [r0, #22]
   16ade:	428b      	cmp	r3, r1
   16ae0:	bf28      	it	cs
   16ae2:	460b      	movcs	r3, r1
    if (eff_time != connsm->eff_max_tx_time) {
   16ae4:	8b01      	ldrh	r1, [r0, #24]
   16ae6:	4299      	cmp	r1, r3
   16ae8:	d001      	beq.n	16aee <ble_ll_conn_update_eff_data_len+0x2a>
        connsm->eff_max_tx_time = eff_time;
   16aea:	8303      	strh	r3, [r0, #24]
        send_event = 1;
   16aec:	2201      	movs	r2, #1
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   16aee:	7a83      	ldrb	r3, [r0, #10]
   16af0:	7ac1      	ldrb	r1, [r0, #11]
   16af2:	428b      	cmp	r3, r1
   16af4:	bf28      	it	cs
   16af6:	460b      	movcs	r3, r1
    if (eff_bytes != connsm->eff_max_rx_octets) {
   16af8:	7b81      	ldrb	r1, [r0, #14]
   16afa:	428b      	cmp	r3, r1
   16afc:	d001      	beq.n	16b02 <ble_ll_conn_update_eff_data_len+0x3e>
        connsm->eff_max_rx_octets = eff_bytes;
   16afe:	7383      	strb	r3, [r0, #14]
        send_event = 1;
   16b00:	2201      	movs	r2, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   16b02:	7a43      	ldrb	r3, [r0, #9]
   16b04:	7b01      	ldrb	r1, [r0, #12]
   16b06:	428b      	cmp	r3, r1
   16b08:	bf28      	it	cs
   16b0a:	460b      	movcs	r3, r1
    if (eff_bytes != connsm->eff_max_tx_octets) {
   16b0c:	7b41      	ldrb	r1, [r0, #13]
   16b0e:	428b      	cmp	r3, r1
   16b10:	d005      	beq.n	16b1e <ble_ll_conn_update_eff_data_len+0x5a>
        connsm->eff_max_tx_octets = eff_bytes;
   16b12:	7343      	strb	r3, [r0, #13]
        ble_ll_hci_ev_datalen_chg(connsm);
   16b14:	f002 fff8 	bl	19b08 <ble_ll_hci_ev_datalen_chg>
}
   16b18:	bd08      	pop	{r3, pc}
    send_event = 0;
   16b1a:	2200      	movs	r2, #0
   16b1c:	e7dd      	b.n	16ada <ble_ll_conn_update_eff_data_len+0x16>
    if (send_event) {
   16b1e:	2a00      	cmp	r2, #0
   16b20:	d0fa      	beq.n	16b18 <ble_ll_conn_update_eff_data_len+0x54>
   16b22:	e7f7      	b.n	16b14 <ble_ll_conn_update_eff_data_len+0x50>

00016b24 <ble_ll_conn_end>:
{
   16b24:	b570      	push	{r4, r5, r6, lr}
   16b26:	4604      	mov	r4, r0
   16b28:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   16b2a:	30d8      	adds	r0, #216	; 0xd8
   16b2c:	f004 f99a 	bl	1ae64 <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   16b30:	f7f7 fd0a 	bl	e548 <os_arch_save_sr>
   16b34:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   16b36:	4b3b      	ldr	r3, [pc, #236]	; (16c24 <ble_ll_conn_end+0x100>)
   16b38:	681b      	ldr	r3, [r3, #0]
   16b3a:	42a3      	cmp	r3, r4
   16b3c:	d020      	beq.n	16b80 <ble_ll_conn_end+0x5c>
    OS_EXIT_CRITICAL(sr);
   16b3e:	4630      	mov	r0, r6
   16b40:	f7f7 fd08 	bl	e554 <os_arch_restore_sr>
}

static inline void
ble_npl_callout_stop(struct ble_npl_callout *co)
{
    os_callout_stop(&co->co);
   16b44:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   16b48:	f7f6 f9e8 	bl	cf1c <os_callout_stop>
   16b4c:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
   16b50:	f7f6 f9e4 	bl	cf1c <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   16b54:	4b34      	ldr	r3, [pc, #208]	; (16c28 <ble_ll_conn_end+0x104>)
   16b56:	681b      	ldr	r3, [r3, #0]
   16b58:	42a3      	cmp	r3, r4
   16b5a:	d018      	beq.n	16b8e <ble_ll_conn_end+0x6a>
   16b5c:	461a      	mov	r2, r3
   16b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   16b62:	42a3      	cmp	r3, r4
   16b64:	d1fa      	bne.n	16b5c <ble_ll_conn_end+0x38>
   16b66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   16b6a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    if (connsm->cur_tx_pdu) {
   16b6e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   16b72:	b1c0      	cbz	r0, 16ba6 <ble_ll_conn_end+0x82>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   16b74:	f7f6 fc7e 	bl	d474 <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   16b78:	2300      	movs	r3, #0
   16b7a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   16b7e:	e012      	b.n	16ba6 <ble_ll_conn_end+0x82>
        ble_ll_conn_halt();
   16b80:	f7ff f8c8 	bl	15d14 <ble_ll_conn_halt>
        STATS_INC(ble_ll_conn_stats, conn_event_while_tmo);
   16b84:	4a29      	ldr	r2, [pc, #164]	; (16c2c <ble_ll_conn_end+0x108>)
   16b86:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   16b88:	3301      	adds	r3, #1
   16b8a:	67d3      	str	r3, [r2, #124]	; 0x7c
   16b8c:	e7d7      	b.n	16b3e <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   16b8e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   16b92:	4b25      	ldr	r3, [pc, #148]	; (16c28 <ble_ll_conn_end+0x104>)
   16b94:	601a      	str	r2, [r3, #0]
   16b96:	e7ea      	b.n	16b6e <ble_ll_conn_end+0x4a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   16b98:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   16b9c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
        os_mbuf_free_chain(m);
   16ba0:	3810      	subs	r0, #16
   16ba2:	f7f6 fc67 	bl	d474 <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   16ba6:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
        if (!pkthdr) {
   16baa:	b128      	cbz	r0, 16bb8 <ble_ll_conn_end+0x94>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   16bac:	6843      	ldr	r3, [r0, #4]
   16bae:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d1f4      	bne.n	16ba0 <ble_ll_conn_end+0x7c>
   16bb6:	e7ef      	b.n	16b98 <ble_ll_conn_end+0x74>
    os_eventq_remove(&evq->evq, &ev->ev);
   16bb8:	f104 0198 	add.w	r1, r4, #152	; 0x98
   16bbc:	481c      	ldr	r0, [pc, #112]	; (16c30 <ble_ll_conn_end+0x10c>)
   16bbe:	f7f6 fbbb 	bl	d338 <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   16bc2:	2300      	movs	r3, #0
   16bc4:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   16bc6:	78e3      	ldrb	r3, [r4, #3]
   16bc8:	f003 0318 	and.w	r3, r3, #24
   16bcc:	2b18      	cmp	r3, #24
   16bce:	d017      	beq.n	16c00 <ble_ll_conn_end+0xdc>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   16bd0:	78e3      	ldrb	r3, [r4, #3]
   16bd2:	f013 0f10 	tst.w	r3, #16
   16bd6:	d11c      	bne.n	16c12 <ble_ll_conn_end+0xee>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   16bd8:	b14d      	cbz	r5, 16bee <ble_ll_conn_end+0xca>
   16bda:	2d02      	cmp	r5, #2
   16bdc:	d103      	bne.n	16be6 <ble_ll_conn_end+0xc2>
   16bde:	7823      	ldrb	r3, [r4, #0]
   16be0:	f013 0f04 	tst.w	r3, #4
   16be4:	d003      	beq.n	16bee <ble_ll_conn_end+0xca>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   16be6:	4629      	mov	r1, r5
   16be8:	4620      	mov	r0, r4
   16bea:	f000 feee 	bl	179ca <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   16bee:	2300      	movs	r3, #0
   16bf0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   16bf4:	4b0f      	ldr	r3, [pc, #60]	; (16c34 <ble_ll_conn_end+0x110>)
   16bf6:	685a      	ldr	r2, [r3, #4]
   16bf8:	6014      	str	r4, [r2, #0]
   16bfa:	34b4      	adds	r4, #180	; 0xb4
   16bfc:	605c      	str	r4, [r3, #4]
}
   16bfe:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   16c00:	2100      	movs	r1, #0
   16c02:	4620      	mov	r0, r4
   16c04:	f003 f84c 	bl	19ca0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   16c08:	78e3      	ldrb	r3, [r4, #3]
   16c0a:	f36f 1304 	bfc	r3, #4, #1
   16c0e:	70e3      	strb	r3, [r4, #3]
   16c10:	e7de      	b.n	16bd0 <ble_ll_conn_end+0xac>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   16c12:	4629      	mov	r1, r5
   16c14:	4620      	mov	r0, r4
   16c16:	f003 f843 	bl	19ca0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   16c1a:	78e3      	ldrb	r3, [r4, #3]
   16c1c:	f36f 1304 	bfc	r3, #4, #1
   16c20:	70e3      	strb	r3, [r4, #3]
   16c22:	e7d9      	b.n	16bd8 <ble_ll_conn_end+0xb4>
   16c24:	20002330 	.word	0x20002330
   16c28:	2000232c 	.word	0x2000232c
   16c2c:	200022ac 	.word	0x200022ac
   16c30:	20001fc8 	.word	0x20001fc8
   16c34:	20002334 	.word	0x20002334

00016c38 <ble_ll_conn_event_end>:
 * @param void *arg Pointer to connection state machine
 *
 */
static void
ble_ll_conn_event_end(struct ble_npl_event *ev)
{
   16c38:	b538      	push	{r3, r4, r5, lr}
   16c3a:	4604      	mov	r4, r0
    uint8_t ble_err;
    uint32_t tmo;
    struct ble_ll_conn_sm *connsm;

    ble_ll_rfmgmt_release();
   16c3c:	f003 fe02 	bl	1a844 <ble_ll_rfmgmt_release>
    return ev->ev.ev_arg;
   16c40:	68a4      	ldr	r4, [r4, #8]

    /* Better be a connection state machine! */
    connsm = (struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(connsm);
   16c42:	2c00      	cmp	r4, #0
   16c44:	d036      	beq.n	16cb4 <ble_ll_conn_event_end+0x7c>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   16c46:	79a3      	ldrb	r3, [r4, #6]
   16c48:	2b00      	cmp	r3, #0
   16c4a:	d03d      	beq.n	16cc8 <ble_ll_conn_event_end+0x90>
                       connsm->event_cntr);

    ble_ll_scan_chk_resume();

    /* If we have transmitted the terminate IND successfully, we are done */
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   16c4c:	7823      	ldrb	r3, [r4, #0]
   16c4e:	f013 0202 	ands.w	r2, r3, #2
   16c52:	d147      	bne.n	16ce4 <ble_ll_conn_event_end+0xac>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   16c54:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   16c58:	2b0c      	cmp	r3, #12
   16c5a:	d043      	beq.n	16ce4 <ble_ll_conn_event_end+0xac>
    os_eventq_remove(&evq->evq, &ev->ev);
   16c5c:	f104 0198 	add.w	r1, r4, #152	; 0x98
   16c60:	4845      	ldr	r0, [pc, #276]	; (16d78 <ble_ll_conn_event_end+0x140>)
   16c62:	f7f6 fb69 	bl	d338 <os_eventq_remove>

    /*
     * If we have received a packet, we can set the current transmit window
     * usecs to 0 since we dont need to listen in the transmit window.
     */
    if (connsm->csmflags.cfbit.pkt_rxd) {
   16c66:	7823      	ldrb	r3, [r4, #0]
   16c68:	f013 0f01 	tst.w	r3, #1
   16c6c:	d002      	beq.n	16c74 <ble_ll_conn_event_end+0x3c>
        connsm->periph_cur_tx_win_usecs = 0;
   16c6e:	2300      	movs	r3, #0
   16c70:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
     * XXX: what should be here? Was there code here that got deleted?
     */
#endif

    /* Move to next connection event */
    if (ble_ll_conn_next_event(connsm)) {
   16c74:	4620      	mov	r0, r4
   16c76:	f7ff fc4d 	bl	16514 <ble_ll_conn_next_event>
   16c7a:	2800      	cmp	r0, #0
   16c7c:	d13d      	bne.n	16cfa <ble_ll_conn_event_end+0xc2>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
        return;
    }

    /* Reset "per connection event" variables */
    connsm->cons_rxd_bad_crc = 0;
   16c7e:	2200      	movs	r2, #0
   16c80:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    connsm->csmflags.cfbit.pkt_rxd = 0;
   16c84:	7823      	ldrb	r3, [r4, #0]
   16c86:	f362 0300 	bfi	r3, r2, #0, #1
   16c8a:	7023      	strb	r3, [r4, #0]

    /* See if we need to start any control procedures */
    ble_ll_ctrl_chk_proc_start(connsm);
   16c8c:	4620      	mov	r0, r4
   16c8e:	f001 fe7e 	bl	1898e <ble_ll_ctrl_chk_proc_start>

    /* Set initial schedule callback */
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   16c92:	4b3a      	ldr	r3, [pc, #232]	; (16d7c <ble_ll_conn_event_end+0x144>)
   16c94:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

    /* XXX: I think all this fine for when we do connection updates, but
       we may want to force the first event to be scheduled. Not sure */
    /* Schedule the next connection event */
    while (ble_ll_sched_conn_reschedule(connsm)) {
   16c98:	4620      	mov	r0, r4
   16c9a:	f003 ff69 	bl	1ab70 <ble_ll_sched_conn_reschedule>
   16c9e:	b388      	cbz	r0, 16d04 <ble_ll_conn_event_end+0xcc>
        if (ble_ll_conn_next_event(connsm)) {
   16ca0:	4620      	mov	r0, r4
   16ca2:	f7ff fc37 	bl	16514 <ble_ll_conn_next_event>
   16ca6:	2800      	cmp	r0, #0
   16ca8:	d0f6      	beq.n	16c98 <ble_ll_conn_event_end+0x60>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   16caa:	2116      	movs	r1, #22
   16cac:	4620      	mov	r0, r4
   16cae:	f7ff ff39 	bl	16b24 <ble_ll_conn_end>
            return;
   16cb2:	e021      	b.n	16cf8 <ble_ll_conn_event_end+0xc0>
    BLE_LL_ASSERT(connsm);
   16cb4:	f7f5 fa72 	bl	c19c <hal_debugger_connected>
   16cb8:	b100      	cbz	r0, 16cbc <ble_ll_conn_event_end+0x84>
   16cba:	be01      	bkpt	0x0001
   16cbc:	2300      	movs	r3, #0
   16cbe:	461a      	mov	r2, r3
   16cc0:	4619      	mov	r1, r3
   16cc2:	4618      	mov	r0, r3
   16cc4:	f7f5 ff6e 	bl	cba4 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_end_in_idle);
   16cc8:	4a2d      	ldr	r2, [pc, #180]	; (16d80 <ble_ll_conn_event_end+0x148>)
   16cca:	6f93      	ldr	r3, [r2, #120]	; 0x78
   16ccc:	3301      	adds	r3, #1
   16cce:	6793      	str	r3, [r2, #120]	; 0x78
        BLE_LL_ASSERT(0);
   16cd0:	f7f5 fa64 	bl	c19c <hal_debugger_connected>
   16cd4:	b100      	cbz	r0, 16cd8 <ble_ll_conn_event_end+0xa0>
   16cd6:	be01      	bkpt	0x0001
   16cd8:	2300      	movs	r3, #0
   16cda:	461a      	mov	r2, r3
   16cdc:	4619      	mov	r1, r3
   16cde:	4618      	mov	r0, r3
   16ce0:	f7f5 ff60 	bl	cba4 <__assert_func>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   16ce4:	b922      	cbnz	r2, 16cf0 <ble_ll_conn_event_end+0xb8>
            ble_err = connsm->rxd_disconnect_reason;
   16ce6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
            if (ble_err == 0) {
   16cea:	b911      	cbnz	r1, 16cf2 <ble_ll_conn_event_end+0xba>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   16cec:	2113      	movs	r1, #19
   16cee:	e000      	b.n	16cf2 <ble_ll_conn_event_end+0xba>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   16cf0:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   16cf2:	4620      	mov	r0, r4
   16cf4:	f7ff ff16 	bl	16b24 <ble_ll_conn_end>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
                                        connsm->csmflags.cfbit.rxd_features) {
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
    }
}
   16cf8:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   16cfa:	2116      	movs	r1, #22
   16cfc:	4620      	mov	r0, r4
   16cfe:	f7ff ff11 	bl	16b24 <ble_ll_conn_end>
        return;
   16d02:	e7f9      	b.n	16cf8 <ble_ll_conn_event_end+0xc0>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   16d04:	79a3      	ldrb	r3, [r4, #6]
   16d06:	2b01      	cmp	r3, #1
   16d08:	d025      	beq.n	16d56 <ble_ll_conn_event_end+0x11e>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   16d0a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   16d0e:	f242 7010 	movw	r0, #10000	; 0x2710
   16d12:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   16d16:	2508      	movs	r5, #8
    if (usecs <= 31249) {
   16d18:	f647 2311 	movw	r3, #31249	; 0x7a11
   16d1c:	4298      	cmp	r0, r3
   16d1e:	d822      	bhi.n	16d66 <ble_ll_conn_event_end+0x12e>
        return (usecs * 137439) / 4194304;
   16d20:	4b18      	ldr	r3, [pc, #96]	; (16d84 <ble_ll_conn_event_end+0x14c>)
   16d22:	fb03 f000 	mul.w	r0, r3, r0
   16d26:	0d80      	lsrs	r0, r0, #22
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   16d28:	6f23      	ldr	r3, [r4, #112]	; 0x70
   16d2a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   16d2e:	1a9b      	subs	r3, r3, r2
   16d30:	4283      	cmp	r3, r0
   16d32:	d21b      	bcs.n	16d6c <ble_ll_conn_event_end+0x134>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   16d34:	4620      	mov	r0, r4
   16d36:	f000 fdc1 	bl	178bc <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   16d3a:	78e3      	ldrb	r3, [r4, #3]
   16d3c:	f003 0318 	and.w	r3, r3, #24
   16d40:	2b18      	cmp	r3, #24
   16d42:	d1d9      	bne.n	16cf8 <ble_ll_conn_event_end+0xc0>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   16d44:	2100      	movs	r1, #0
   16d46:	4620      	mov	r0, r4
   16d48:	f002 ffaa 	bl	19ca0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   16d4c:	78e3      	ldrb	r3, [r4, #3]
   16d4e:	f36f 1304 	bfc	r3, #4, #1
   16d52:	70e3      	strb	r3, [r4, #3]
   16d54:	e7d0      	b.n	16cf8 <ble_ll_conn_event_end+0xc0>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   16d56:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   16d5a:	f641 504c 	movw	r0, #7500	; 0x1d4c
   16d5e:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   16d62:	253e      	movs	r5, #62	; 0x3e
   16d64:	e7d8      	b.n	16d18 <ble_ll_conn_event_end+0xe0>
    return os_cputime_usecs_to_ticks(usecs);
   16d66:	f013 ffaf 	bl	2acc8 <os_cputime_usecs_to_ticks>
   16d6a:	e7dd      	b.n	16d28 <ble_ll_conn_event_end+0xf0>
        ble_ll_conn_end(connsm, ble_err);
   16d6c:	4629      	mov	r1, r5
   16d6e:	4620      	mov	r0, r4
   16d70:	f7ff fed8 	bl	16b24 <ble_ll_conn_end>
        return;
   16d74:	e7c0      	b.n	16cf8 <ble_ll_conn_event_end+0xc0>
   16d76:	bf00      	nop
   16d78:	20001fc8 	.word	0x20001fc8
   16d7c:	00015da1 	.word	0x00015da1
   16d80:	200022ac 	.word	0x200022ac
   16d84:	000218df 	.word	0x000218df

00016d88 <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   16d88:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   16d8a:	2000      	movs	r0, #0
   16d8c:	f7fd fddc 	bl	14948 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   16d90:	4b07      	ldr	r3, [pc, #28]	; (16db0 <ble_ll_conn_event_halt+0x28>)
   16d92:	681b      	ldr	r3, [r3, #0]
   16d94:	b153      	cbz	r3, 16dac <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   16d96:	781a      	ldrb	r2, [r3, #0]
   16d98:	f36f 0200 	bfc	r2, #0, #1
   16d9c:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   16d9e:	4c04      	ldr	r4, [pc, #16]	; (16db0 <ble_ll_conn_event_halt+0x28>)
   16da0:	6820      	ldr	r0, [r4, #0]
   16da2:	3098      	adds	r0, #152	; 0x98
   16da4:	f7fd fddc 	bl	14960 <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   16da8:	2300      	movs	r3, #0
   16daa:	6023      	str	r3, [r4, #0]
    }
}
   16dac:	bd10      	pop	{r4, pc}
   16dae:	bf00      	nop
   16db0:	20002330 	.word	0x20002330

00016db4 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   16db4:	b570      	push	{r4, r5, r6, lr}
   16db6:	4604      	mov	r4, r0
   16db8:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   16dba:	f7f7 fbc5 	bl	e548 <os_arch_save_sr>
   16dbe:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   16dc0:	4b07      	ldr	r3, [pc, #28]	; (16de0 <ble_ll_conn_timeout+0x2c>)
   16dc2:	681b      	ldr	r3, [r3, #0]
   16dc4:	42a3      	cmp	r3, r4
   16dc6:	d007      	beq.n	16dd8 <ble_ll_conn_timeout+0x24>
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   16dc8:	4630      	mov	r0, r6
   16dca:	f7f7 fbc3 	bl	e554 <os_arch_restore_sr>
    /* Check if we need to resume scanning */
    if (was_current) {
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   16dce:	4629      	mov	r1, r5
   16dd0:	4620      	mov	r0, r4
   16dd2:	f7ff fea7 	bl	16b24 <ble_ll_conn_end>
}
   16dd6:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_conn_current_sm_over(NULL);
   16dd8:	2000      	movs	r0, #0
   16dda:	f7fe ffa7 	bl	15d2c <ble_ll_conn_current_sm_over>
        was_current = 1;
   16dde:	e7f3      	b.n	16dc8 <ble_ll_conn_timeout+0x14>
   16de0:	20002330 	.word	0x20002330

00016de4 <ble_ll_conn_rx_isr_start>:
 *
 * @param rxhdr
 */
int
ble_ll_conn_rx_isr_start(struct ble_mbuf_hdr *rxhdr, uint32_t aa)
{
   16de4:	b510      	push	{r4, lr}
     * Disable wait for response timer since we receive a response. We dont
     * care if this is the response we were waiting for or not; the code
     * called at receive end will deal with ending the connection event
     * if needed
     */
    connsm = g_ble_ll_conn_cur_sm;
   16de6:	4b19      	ldr	r3, [pc, #100]	; (16e4c <ble_ll_conn_rx_isr_start+0x68>)
   16de8:	681c      	ldr	r4, [r3, #0]
    if (connsm) {
   16dea:	b354      	cbz	r4, 16e42 <ble_ll_conn_rx_isr_start+0x5e>
        /* Double check access address. Better match connection state machine */
        if (aa != connsm->access_addr) {
   16dec:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16dee:	428b      	cmp	r3, r1
   16df0:	d116      	bne.n	16e20 <ble_ll_conn_rx_isr_start+0x3c>
            g_ble_ll_conn_cur_sm = NULL;
            return -1;
        }

        /* Set connection handle in mbuf header */
        rxhdr->rxinfo.handle = connsm->conn_handle;
   16df2:	88a3      	ldrh	r3, [r4, #4]
   16df4:	70c3      	strb	r3, [r0, #3]

        /* Set flag denoting we have received a packet in connection event */
        connsm->csmflags.cfbit.pkt_rxd = 1;
   16df6:	7823      	ldrb	r3, [r4, #0]
   16df8:	f043 0301 	orr.w	r3, r3, #1
   16dfc:	7023      	strb	r3, [r4, #0]

        /* Connection is established */
        connsm->conn_state = BLE_LL_CONN_STATE_ESTABLISHED;
   16dfe:	2202      	movs	r2, #2
   16e00:	71a2      	strb	r2, [r4, #6]

        /* Set anchor point (and last) if 1st rxd frame in connection event */
        if (connsm->csmflags.cfbit.periph_set_last_anchor) {
   16e02:	f013 0f20 	tst.w	r3, #32
   16e06:	d01e      	beq.n	16e46 <ble_ll_conn_rx_isr_start+0x62>
            connsm->csmflags.cfbit.periph_set_last_anchor = 0;
   16e08:	b2db      	uxtb	r3, r3
   16e0a:	f36f 1345 	bfc	r3, #5, #1
   16e0e:	7023      	strb	r3, [r4, #0]
            connsm->last_anchor_point = rxhdr->beg_cputime;
   16e10:	6883      	ldr	r3, [r0, #8]
   16e12:	67e3      	str	r3, [r4, #124]	; 0x7c
            connsm->anchor_point = connsm->last_anchor_point;
   16e14:	6723      	str	r3, [r4, #112]	; 0x70
            connsm->anchor_point_usecs = rxhdr->rem_usecs;
   16e16:	68c3      	ldr	r3, [r0, #12]
   16e18:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
        }
    }
    return 1;
   16e1c:	2001      	movs	r0, #1
   16e1e:	e011      	b.n	16e44 <ble_ll_conn_rx_isr_start+0x60>
            STATS_INC(ble_ll_conn_stats, rx_data_pdu_bad_aa);
   16e20:	4a0b      	ldr	r2, [pc, #44]	; (16e50 <ble_ll_conn_rx_isr_start+0x6c>)
   16e22:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16e24:	3301      	adds	r3, #1
   16e26:	6293      	str	r3, [r2, #40]	; 0x28
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   16e28:	2000      	movs	r0, #0
   16e2a:	f7fd fd8d 	bl	14948 <ble_ll_state_set>
            ble_ll_event_send(&connsm->conn_ev_end);
   16e2e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   16e32:	f7fd fd95 	bl	14960 <ble_ll_event_send>
            g_ble_ll_conn_cur_sm = NULL;
   16e36:	4b05      	ldr	r3, [pc, #20]	; (16e4c <ble_ll_conn_rx_isr_start+0x68>)
   16e38:	2200      	movs	r2, #0
   16e3a:	601a      	str	r2, [r3, #0]
            return -1;
   16e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e40:	e000      	b.n	16e44 <ble_ll_conn_rx_isr_start+0x60>
    return 1;
   16e42:	2001      	movs	r0, #1
}
   16e44:	bd10      	pop	{r4, pc}
    return 1;
   16e46:	2001      	movs	r0, #1
   16e48:	e7fc      	b.n	16e44 <ble_ll_conn_rx_isr_start+0x60>
   16e4a:	bf00      	nop
   16e4c:	20002330 	.word	0x20002330
   16e50:	200022ac 	.word	0x200022ac

00016e54 <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   16e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    /* Packets with invalid CRC are not sent to LL */
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   16e58:	880b      	ldrh	r3, [r1, #0]
   16e5a:	f013 0f80 	tst.w	r3, #128	; 0x80
   16e5e:	d023      	beq.n	16ea8 <ble_ll_conn_rx_data_pdu+0x54>
   16e60:	4605      	mov	r5, r0
   16e62:	460c      	mov	r4, r1

    /* XXX: there is a chance that the connection was thrown away and
       re-used before processing packets here. Fix this. */
    /* We better have a connection state machine */
    connsm = ble_ll_conn_find_by_handle(hdr->rxinfo.handle);
   16e64:	78c8      	ldrb	r0, [r1, #3]
   16e66:	f7ff fb21 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   16e6a:	4606      	mov	r6, r0
   16e6c:	b330      	cbz	r0, 16ebc <ble_ll_conn_rx_data_pdu+0x68>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
       goto conn_rx_data_pdu_end;
    }

    /* Check state machine */
    ble_ll_conn_chk_csm_flags(connsm);
   16e6e:	f7ff f81d 	bl	15eac <ble_ll_conn_chk_csm_flags>

    /* Validate rx data pdu */
    rxbuf = rxpdu->om_data;
   16e72:	682b      	ldr	r3, [r5, #0]
    hdr_byte = rxbuf[0];
   16e74:	f893 8000 	ldrb.w	r8, [r3]
    acl_len = rxbuf[1];
   16e78:	f893 a001 	ldrb.w	sl, [r3, #1]
   16e7c:	fa1f fb8a 	uxth.w	fp, sl
    llid = hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   16e80:	f008 0903 	and.w	r9, r8, #3


#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   16e84:	8827      	ldrh	r7, [r4, #0]
   16e86:	f017 0720 	ands.w	r7, r7, #32
   16e8a:	d120      	bne.n	16ece <ble_ll_conn_rx_data_pdu+0x7a>

    /*
     * Check that the LLID and payload length are reasonable.
     * Empty payload is only allowed for LLID == 01b.
     *  */
    if ((llid == 0) || ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   16e8c:	f1b9 0f00 	cmp.w	r9, #0
   16e90:	d005      	beq.n	16e9e <ble_ll_conn_rx_data_pdu+0x4a>
   16e92:	f1bb 0f00 	cmp.w	fp, #0
   16e96:	d123      	bne.n	16ee0 <ble_ll_conn_rx_data_pdu+0x8c>
   16e98:	f1b9 0f01 	cmp.w	r9, #1
   16e9c:	d020      	beq.n	16ee0 <ble_ll_conn_rx_data_pdu+0x8c>
        STATS_INC(ble_ll_conn_stats, rx_bad_llid);
   16e9e:	4a54      	ldr	r2, [pc, #336]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16ea0:	6d93      	ldr	r3, [r2, #88]	; 0x58
   16ea2:	3301      	adds	r3, #1
   16ea4:	6593      	str	r3, [r2, #88]	; 0x58
        goto conn_rx_data_pdu_end;
   16ea6:	e00d      	b.n	16ec4 <ble_ll_conn_rx_data_pdu+0x70>
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   16ea8:	f7f5 f978 	bl	c19c <hal_debugger_connected>
   16eac:	b100      	cbz	r0, 16eb0 <ble_ll_conn_rx_data_pdu+0x5c>
   16eae:	be01      	bkpt	0x0001
   16eb0:	2300      	movs	r3, #0
   16eb2:	461a      	mov	r2, r3
   16eb4:	4619      	mov	r1, r3
   16eb6:	4618      	mov	r0, r3
   16eb8:	f7f5 fe74 	bl	cba4 <__assert_func>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
   16ebc:	4a4c      	ldr	r2, [pc, #304]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16ebe:	69d3      	ldr	r3, [r2, #28]
   16ec0:	3301      	adds	r3, #1
   16ec2:	61d3      	str	r3, [r2, #28]
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_CONN_CREDIT) {
        ble_ll_conn_cth_flow_free_credit(connsm, 1);
    }
#endif

    os_mbuf_free_chain(rxpdu);
   16ec4:	4628      	mov	r0, r5
   16ec6:	f7f6 fad5 	bl	d474 <os_mbuf_free_chain>
}
   16eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        STATS_INC(ble_ll_conn_stats, mic_failures);
   16ece:	4a48      	ldr	r2, [pc, #288]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16ed0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   16ed2:	3301      	adds	r3, #1
   16ed4:	6713      	str	r3, [r2, #112]	; 0x70
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   16ed6:	213d      	movs	r1, #61	; 0x3d
   16ed8:	4630      	mov	r0, r6
   16eda:	f7ff ff6b 	bl	16db4 <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   16ede:	e7f1      	b.n	16ec4 <ble_ll_conn_rx_data_pdu+0x70>
        (connsm->enc_data.enc_state >= CONN_ENC_S_ENC_RSP_TO_BE_SENT &&
   16ee0:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT &&
   16ee4:	2b02      	cmp	r3, #2
   16ee6:	d902      	bls.n	16eee <ble_ll_conn_rx_data_pdu+0x9a>
         CONN_IS_PERIPHERAL(connsm))) {
   16ee8:	79f3      	ldrb	r3, [r6, #7]
         CONN_IS_CENTRAL(connsm)) ||
   16eea:	2b02      	cmp	r3, #2
   16eec:	d03f      	beq.n	16f6e <ble_ll_conn_rx_data_pdu+0x11a>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   16eee:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   16ef2:	2b02      	cmp	r3, #2
   16ef4:	d045      	beq.n	16f82 <ble_ll_conn_rx_data_pdu+0x12e>
    connsm->conn_rssi = hdr->rxinfo.rssi;
   16ef6:	f994 3004 	ldrsb.w	r3, [r4, #4]
   16efa:	7233      	strb	r3, [r6, #8]
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   16efc:	79f3      	ldrb	r3, [r6, #7]
   16efe:	2b02      	cmp	r3, #2
   16f00:	d04a      	beq.n	16f98 <ble_ll_conn_rx_data_pdu+0x144>
    rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   16f02:	f008 0808 	and.w	r8, r8, #8
    if (rxd_sn == connsm->last_rxd_sn) {
   16f06:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   16f0a:	4543      	cmp	r3, r8
   16f0c:	d04c      	beq.n	16fa8 <ble_ll_conn_rx_data_pdu+0x154>
    connsm->last_rxd_sn = rxd_sn;
   16f0e:	f886 8031 	strb.w	r8, [r6, #49]	; 0x31
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   16f12:	f1b9 0f01 	cmp.w	r9, #1
   16f16:	d04c      	beq.n	16fb2 <ble_ll_conn_rx_data_pdu+0x15e>
    if (llid == BLE_LL_LLID_CTRL) {
   16f18:	f1b9 0f03 	cmp.w	r9, #3
   16f1c:	d04d      	beq.n	16fba <ble_ll_conn_rx_data_pdu+0x166>
        STATS_INC(ble_ll_conn_stats, rx_l2cap_pdus);
   16f1e:	4a34      	ldr	r2, [pc, #208]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16f20:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   16f22:	3301      	adds	r3, #1
   16f24:	64d3      	str	r3, [r2, #76]	; 0x4c
        STATS_INCN(ble_ll_conn_stats, rx_l2cap_bytes, acl_len);
   16f26:	6d13      	ldr	r3, [r2, #80]	; 0x50
   16f28:	4453      	add	r3, sl
   16f2a:	6513      	str	r3, [r2, #80]	; 0x50
    if (OS_MBUF_IS_PKTHDR(om)) {
   16f2c:	796b      	ldrb	r3, [r5, #5]
   16f2e:	2b07      	cmp	r3, #7
   16f30:	d900      	bls.n	16f34 <ble_ll_conn_rx_data_pdu+0xe0>
        startoff = om->om_pkthdr_len;
   16f32:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   16f34:	462a      	mov	r2, r5
   16f36:	f852 3b10 	ldr.w	r3, [r2], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   16f3a:	4417      	add	r7, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   16f3c:	1bdf      	subs	r7, r3, r7
   16f3e:	b2bf      	uxth	r7, r7
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   16f40:	2f01      	cmp	r7, #1
   16f42:	d94a      	bls.n	16fda <ble_ll_conn_rx_data_pdu+0x186>
        os_mbuf_prepend(rxpdu, 2);
   16f44:	2102      	movs	r1, #2
   16f46:	4628      	mov	r0, r5
   16f48:	f7f6 fbf9 	bl	d73e <os_mbuf_prepend>
        rxbuf = rxpdu->om_data;
   16f4c:	682c      	ldr	r4, [r5, #0]
        acl_hdr = (llid << 12) | connsm->conn_handle;
   16f4e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   16f52:	ea41 3109 	orr.w	r1, r1, r9, lsl #12
        put_le16(rxbuf, acl_hdr);
   16f56:	b289      	uxth	r1, r1
   16f58:	4620      	mov	r0, r4
   16f5a:	f013 fe1d 	bl	2ab98 <put_le16>
        put_le16(rxbuf + 2, acl_len);
   16f5e:	4659      	mov	r1, fp
   16f60:	1ca0      	adds	r0, r4, #2
   16f62:	f013 fe19 	bl	2ab98 <put_le16>
}

static inline int
ble_transport_to_hs_acl(struct os_mbuf *om)
{
    return ble_transport_to_hs_acl_impl(om);
   16f66:	4628      	mov	r0, r5
   16f68:	f00a ff2b 	bl	21dc2 <ble_transport_to_hs_acl_impl>
   16f6c:	e7ad      	b.n	16eca <ble_ll_conn_rx_data_pdu+0x76>
        if (!ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   16f6e:	4628      	mov	r0, r5
   16f70:	f001 fb61 	bl	18636 <ble_ll_ctrl_enc_allowed_pdu_rx>
   16f74:	2800      	cmp	r0, #0
   16f76:	d1ba      	bne.n	16eee <ble_ll_conn_rx_data_pdu+0x9a>
            ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   16f78:	213d      	movs	r1, #61	; 0x3d
   16f7a:	4630      	mov	r0, r6
   16f7c:	f7ff ff1a 	bl	16db4 <ble_ll_conn_timeout>
            goto conn_rx_data_pdu_end;
   16f80:	e7a0      	b.n	16ec4 <ble_ll_conn_rx_data_pdu+0x70>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   16f82:	78b3      	ldrb	r3, [r6, #2]
   16f84:	f013 0f08 	tst.w	r3, #8
   16f88:	d0b5      	beq.n	16ef6 <ble_ll_conn_rx_data_pdu+0xa2>
        CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   16f8a:	f1bb 0f00 	cmp.w	fp, #0
   16f8e:	d0b2      	beq.n	16ef6 <ble_ll_conn_rx_data_pdu+0xa2>
        ble_ll_conn_auth_pyld_timer_start(connsm);
   16f90:	4630      	mov	r0, r6
   16f92:	f7ff fcf9 	bl	16988 <ble_ll_conn_auth_pyld_timer_start>
   16f96:	e7ae      	b.n	16ef6 <ble_ll_conn_rx_data_pdu+0xa2>
        if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   16f98:	f018 0f04 	tst.w	r8, #4
   16f9c:	d0b1      	beq.n	16f02 <ble_ll_conn_rx_data_pdu+0xae>
            connsm->csmflags.cfbit.allow_periph_latency = 1;
   16f9e:	7833      	ldrb	r3, [r6, #0]
   16fa0:	f043 0310 	orr.w	r3, r3, #16
   16fa4:	7033      	strb	r3, [r6, #0]
   16fa6:	e7ac      	b.n	16f02 <ble_ll_conn_rx_data_pdu+0xae>
       STATS_INC(ble_ll_conn_stats, data_pdu_rx_dup);
   16fa8:	4a11      	ldr	r2, [pc, #68]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16faa:	6b53      	ldr	r3, [r2, #52]	; 0x34
   16fac:	3301      	adds	r3, #1
   16fae:	6353      	str	r3, [r2, #52]	; 0x34
       goto conn_rx_data_pdu_end;
   16fb0:	e788      	b.n	16ec4 <ble_ll_conn_rx_data_pdu+0x70>
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   16fb2:	f1bb 0f00 	cmp.w	fp, #0
   16fb6:	d1af      	bne.n	16f18 <ble_ll_conn_rx_data_pdu+0xc4>
   16fb8:	e784      	b.n	16ec4 <ble_ll_conn_rx_data_pdu+0x70>
        STATS_INC(ble_ll_conn_stats, rx_ctrl_pdus);
   16fba:	4a0d      	ldr	r2, [pc, #52]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16fbc:	6c93      	ldr	r3, [r2, #72]	; 0x48
   16fbe:	3301      	adds	r3, #1
   16fc0:	6493      	str	r3, [r2, #72]	; 0x48
        if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   16fc2:	4629      	mov	r1, r5
   16fc4:	4630      	mov	r0, r6
   16fc6:	f001 fe65 	bl	18c94 <ble_ll_ctrl_rx_pdu>
   16fca:	2800      	cmp	r0, #0
   16fcc:	f43f af7d 	beq.w	16eca <ble_ll_conn_rx_data_pdu+0x76>
            STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
   16fd0:	4a07      	ldr	r2, [pc, #28]	; (16ff0 <ble_ll_conn_rx_data_pdu+0x19c>)
   16fd2:	6d53      	ldr	r3, [r2, #84]	; 0x54
   16fd4:	3301      	adds	r3, #1
   16fd6:	6553      	str	r3, [r2, #84]	; 0x54
   16fd8:	e777      	b.n	16eca <ble_ll_conn_rx_data_pdu+0x76>
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   16fda:	f7f5 f8df 	bl	c19c <hal_debugger_connected>
   16fde:	b100      	cbz	r0, 16fe2 <ble_ll_conn_rx_data_pdu+0x18e>
   16fe0:	be01      	bkpt	0x0001
   16fe2:	2300      	movs	r3, #0
   16fe4:	461a      	mov	r2, r3
   16fe6:	4619      	mov	r1, r3
   16fe8:	4618      	mov	r0, r3
   16fea:	f7f5 fddb 	bl	cba4 <__assert_func>
   16fee:	bf00      	nop
   16ff0:	200022ac 	.word	0x200022ac

00016ff4 <ble_ll_conn_rx_isr_end>:
 *      == 0: Success. Do not disable the PHY.
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_conn_rx_isr_end(uint8_t *rxbuf, struct ble_mbuf_hdr *rxhdr)
{
   16ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ff8:	b083      	sub	sp, #12
   16ffa:	4605      	mov	r5, r0
   16ffc:	468b      	mov	fp, r1
    struct ble_mbuf_hdr *txhdr;
    int rx_phy_mode;
    bool alloc_rxpdu = true;

    rc = -1;
    connsm = g_ble_ll_conn_cur_sm;
   16ffe:	4b95      	ldr	r3, [pc, #596]	; (17254 <ble_ll_conn_rx_isr_end+0x260>)
   17000:	681c      	ldr	r4, [r3, #0]

    /* Retrieve the header and payload length */
    hdr_byte = rxbuf[0];
   17002:	7807      	ldrb	r7, [r0, #0]
    rx_pyld_len = rxbuf[1];
   17004:	f890 a001 	ldrb.w	sl, [r0, #1]

    /*
     * No need to alloc rxpdu for packets with invalid CRC, we would throw them
     * away instantly from LL anyway.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   17008:	880b      	ldrh	r3, [r1, #0]
   1700a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1700e:	d11a      	bne.n	17046 <ble_ll_conn_rx_isr_end+0x52>
    struct os_mbuf *rxpdu = NULL;
   17010:	f04f 0800 	mov.w	r8, #0

    /*
     * We should have a current connection state machine. If we dont, we just
     * hand the packet to the higher layer to count it.
     */
    if (!connsm) {
   17014:	b1ec      	cbz	r4, 17052 <ble_ll_conn_rx_isr_end+0x5e>
    /*
     * Calculate the end time of the received PDU. NOTE: this looks strange
     * but for the 32768 crystal we add the time it takes to send the packet
     * to the 'additional usecs' field to save some calculations.
     */
    begtime = rxhdr->beg_cputime;
   17016:	f8db 9008 	ldr.w	r9, [fp, #8]
#if BLE_LL_BT5_PHY_SUPPORTED
    rx_phy_mode = connsm->phy_data.rx_phy_mode;
#else
    rx_phy_mode = BLE_PHY_MODE_1M;
#endif
    add_usecs = rxhdr->rem_usecs +
   1701a:	f8db 600c 	ldr.w	r6, [fp, #12]
            ble_ll_pdu_tx_time_get(rx_pyld_len, rx_phy_mode);
   1701e:	2101      	movs	r1, #1
   17020:	4650      	mov	r0, sl
   17022:	f7fd fcf1 	bl	14a08 <ble_ll_pdu_tx_time_get>
    add_usecs = rxhdr->rem_usecs +
   17026:	4406      	add	r6, r0
    /*
     * Check the packet CRC. A connection event can continue even if the
     * received PDU does not pass the CRC check. If we receive two consecutive
     * CRC errors we end the connection event.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   17028:	f8bb 3000 	ldrh.w	r3, [fp]
   1702c:	f013 0f80 	tst.w	r3, #128	; 0x80
   17030:	d125      	bne.n	1707e <ble_ll_conn_rx_isr_end+0x8a>
        /*
         * Increment # of consecutively received CRC errors. If more than
         * one we will end the connection event.
         */
        ++connsm->cons_rxd_bad_crc;
   17032:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   17036:	3301      	adds	r3, #1
   17038:	b2db      	uxtb	r3, r3
   1703a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (connsm->cons_rxd_bad_crc >= 2) {
   1703e:	2b01      	cmp	r3, #1
   17040:	d90e      	bls.n	17060 <ble_ll_conn_rx_isr_end+0x6c>
            reply = 0;
   17042:	2300      	movs	r3, #0
   17044:	e069      	b.n	1711a <ble_ll_conn_rx_isr_end+0x126>
        rxpdu = ble_ll_rxpdu_alloc(rx_pyld_len + BLE_LL_PDU_HDR_LEN);
   17046:	f10a 0002 	add.w	r0, sl, #2
   1704a:	f7fd fb2d 	bl	146a8 <ble_ll_rxpdu_alloc>
   1704e:	4680      	mov	r8, r0
   17050:	e7e0      	b.n	17014 <ble_ll_conn_rx_isr_end+0x20>
        STATS_INC(ble_ll_conn_stats, rx_data_pdu_no_conn);
   17052:	4a81      	ldr	r2, [pc, #516]	; (17258 <ble_ll_conn_rx_isr_end+0x264>)
   17054:	6a53      	ldr	r3, [r2, #36]	; 0x24
   17056:	3301      	adds	r3, #1
   17058:	6253      	str	r3, [r2, #36]	; 0x24
    rc = -1;
   1705a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
        goto conn_exit;
   1705e:	e06b      	b.n	17138 <ble_ll_conn_rx_isr_end+0x144>
        } else {
            switch (connsm->conn_role) {
   17060:	79e3      	ldrb	r3, [r4, #7]
   17062:	2b02      	cmp	r3, #2
   17064:	d101      	bne.n	1706a <ble_ll_conn_rx_isr_end+0x76>
                break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
            case BLE_LL_CONN_ROLE_PERIPHERAL:
                /* A peripheral always responds with a packet */
                reply = 1;
   17066:	2301      	movs	r3, #1
   17068:	e057      	b.n	1711a <ble_ll_conn_rx_isr_end+0x126>
                break;
#endif
            default:
                BLE_LL_ASSERT(0);
   1706a:	f7f5 f897 	bl	c19c <hal_debugger_connected>
   1706e:	b100      	cbz	r0, 17072 <ble_ll_conn_rx_isr_end+0x7e>
   17070:	be01      	bkpt	0x0001
   17072:	2300      	movs	r3, #0
   17074:	461a      	mov	r2, r3
   17076:	4619      	mov	r1, r3
   17078:	4618      	mov	r0, r3
   1707a:	f7f5 fd93 	bl	cba4 <__assert_func>
                break;
            }
        }
    } else {
        /* Reset consecutively received bad crcs (since this one was good!) */
        connsm->cons_rxd_bad_crc = 0;
   1707e:	2300      	movs	r3, #0
   17080:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if (usecs <= 31249) {
   17084:	f647 2311 	movw	r3, #31249	; 0x7a11
   17088:	429e      	cmp	r6, r3
   1708a:	d865      	bhi.n	17158 <ble_ll_conn_rx_isr_end+0x164>
        return (usecs * 137439) / 4194304;
   1708c:	4873      	ldr	r0, [pc, #460]	; (1725c <ble_ll_conn_rx_isr_end+0x268>)
   1708e:	fb00 f006 	mul.w	r0, r0, r6
   17092:	0d80      	lsrs	r0, r0, #22

        /* Set last valid received pdu time (resets supervision timer) */
        connsm->last_rxd_pdu_cputime = begtime + ble_ll_tmr_u2t(add_usecs);
   17094:	4448      	add	r0, r9
   17096:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88

        /* Set last received header byte */
        connsm->last_rxd_hdr_byte = hdr_byte;
   1709a:	f884 7032 	strb.w	r7, [r4, #50]	; 0x32

        if (BLE_LL_LLID_IS_CTRL(hdr_byte)) {
   1709e:	f007 0b03 	and.w	fp, r7, #3
   170a2:	f1bb 0f03 	cmp.w	fp, #3
   170a6:	d05b      	beq.n	17160 <ble_ll_conn_rx_isr_end+0x16c>
    uint8_t opcode = 0;
   170a8:	2300      	movs	r3, #0
   170aa:	9301      	str	r3, [sp, #4]

        /*
         * If SN bit from header does not match NESN in connection, this is
         * a resent PDU and should be ignored.
         */
        hdr_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   170ac:	f007 0208 	and.w	r2, r7, #8
        conn_nesn = connsm->next_exp_seqnum;
   170b0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
        if (rxpdu && ((hdr_sn && conn_nesn) || (!hdr_sn && !conn_nesn))) {
   170b4:	f1b8 0f00 	cmp.w	r8, #0
   170b8:	d014      	beq.n	170e4 <ble_ll_conn_rx_isr_end+0xf0>
   170ba:	b102      	cbz	r2, 170be <ble_ll_conn_rx_isr_end+0xca>
   170bc:	b90b      	cbnz	r3, 170c2 <ble_ll_conn_rx_isr_end+0xce>
   170be:	b98a      	cbnz	r2, 170e4 <ble_ll_conn_rx_isr_end+0xf0>
   170c0:	b983      	cbnz	r3, 170e4 <ble_ll_conn_rx_isr_end+0xf0>
            connsm->next_exp_seqnum ^= 1;
   170c2:	f083 0301 	eor.w	r3, r3, #1
   170c6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
            if (CONN_F_ENCRYPTED(connsm) && !ble_ll_conn_is_empty_pdu(rxbuf)) {
   170ca:	78a3      	ldrb	r3, [r4, #2]
   170cc:	f013 0f02 	tst.w	r3, #2
   170d0:	d008      	beq.n	170e4 <ble_ll_conn_rx_isr_end+0xf0>
   170d2:	4628      	mov	r0, r5
   170d4:	f7fe fdea 	bl	15cac <ble_ll_conn_is_empty_pdu>
   170d8:	b920      	cbnz	r0, 170e4 <ble_ll_conn_rx_isr_end+0xf0>
                ++connsm->enc_data.rx_pkt_cntr;
   170da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   170de:	3301      	adds	r3, #1
   170e0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
            }
#endif
        }

        ble_ll_trace_u32x2(BLE_LL_TRACE_ID_CONN_RX, connsm->tx_seqnum,
   170e4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   170e8:	f007 0704 	and.w	r7, r7, #4

        /*
         * Check NESN bit from header. If same as tx seq num, the transmission
         * is acknowledged. Otherwise we need to resend this PDU.
         */
        if (CONN_F_EMPTY_PDU_TXD(connsm) || connsm->cur_tx_pdu) {
   170ec:	7862      	ldrb	r2, [r4, #1]
   170ee:	f012 0f20 	tst.w	r2, #32
   170f2:	d102      	bne.n	170fa <ble_ll_conn_rx_isr_end+0x106>
   170f4:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
   170f8:	b13a      	cbz	r2, 1710a <ble_ll_conn_rx_isr_end+0x116>
            hdr_nesn = hdr_byte & BLE_LL_DATA_HDR_NESN_MASK;
            conn_sn = connsm->tx_seqnum;
            if ((hdr_nesn && conn_sn) || (!hdr_nesn && !conn_sn)) {
   170fa:	b107      	cbz	r7, 170fe <ble_ll_conn_rx_isr_end+0x10a>
   170fc:	b90b      	cbnz	r3, 17102 <ble_ll_conn_rx_isr_end+0x10e>
   170fe:	bb97      	cbnz	r7, 17166 <ble_ll_conn_rx_isr_end+0x172>
   17100:	bb8b      	cbnz	r3, 17166 <ble_ll_conn_rx_isr_end+0x172>
                /* We did not get an ACK. Must retry the PDU */
                STATS_INC(ble_ll_conn_stats, data_pdu_txf);
   17102:	4a55      	ldr	r2, [pc, #340]	; (17258 <ble_ll_conn_rx_isr_end+0x264>)
   17104:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   17106:	3301      	adds	r3, #1
   17108:	63d3      	str	r3, [r2, #60]	; 0x3c

        /* Should we continue connection event? */
        /* If this is a TERMINATE_IND, we have to reply */
chk_rx_terminate_ind:
        /* If we received a terminate IND, we must set some flags */
        if (BLE_LL_LLID_IS_CTRL(hdr_byte) &&
   1710a:	f1bb 0f03 	cmp.w	fp, #3
   1710e:	d07d      	beq.n	1720c <ble_ll_conn_rx_isr_end+0x218>
            (rx_pyld_len == (1 + BLE_LL_CTRL_TERMINATE_IND_LEN))) {
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
            connsm->rxd_disconnect_reason = rxbuf[3];
        }

        switch (connsm->conn_role) {
   17110:	79e3      	ldrb	r3, [r4, #7]
   17112:	2b02      	cmp	r3, #2
   17114:	f040 808a 	bne.w	1722c <ble_ll_conn_rx_isr_end+0x238>
            break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        case BLE_LL_CONN_ROLE_PERIPHERAL:
            /* A peripheral always replies */
            reply = 1;
   17118:	2301      	movs	r3, #1
    /* If reply flag set, send data pdu and continue connection event */
    rc = -1;
    if (rx_pyld_len && CONN_F_ENCRYPTED(connsm)) {
        rx_pyld_len += BLE_LL_DATA_MIC_LEN;
    }
    if (reply && ble_ll_conn_can_send_next_pdu(connsm, begtime, add_usecs)) {
   1711a:	2b00      	cmp	r3, #0
   1711c:	f000 8090 	beq.w	17240 <ble_ll_conn_rx_isr_end+0x24c>
   17120:	4632      	mov	r2, r6
   17122:	4649      	mov	r1, r9
   17124:	4620      	mov	r0, r4
   17126:	f7fe fdce 	bl	15cc6 <ble_ll_conn_can_send_next_pdu>
   1712a:	2800      	cmp	r0, #0
   1712c:	f000 808b 	beq.w	17246 <ble_ll_conn_rx_isr_end+0x252>
        rc = ble_ll_conn_tx_pdu(connsm);
   17130:	4620      	mov	r0, r4
   17132:	f7fe ff3b 	bl	15fac <ble_ll_conn_tx_pdu>
   17136:	4607      	mov	r7, r0
    }

conn_exit:
    /* Copy the received pdu and hand it up */
    if (rxpdu) {
   17138:	f1b8 0f00 	cmp.w	r8, #0
   1713c:	d006      	beq.n	1714c <ble_ll_conn_rx_isr_end+0x158>
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1713e:	4641      	mov	r1, r8
   17140:	4628      	mov	r0, r5
   17142:	f004 fb47 	bl	1b7d4 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   17146:	4640      	mov	r0, r8
   17148:	f7fd fb3c 	bl	147c4 <ble_ll_rx_pdu_in>
    }

    /* Send link layer a connection end event if over */
    if (rc) {
   1714c:	2f00      	cmp	r7, #0
   1714e:	d17d      	bne.n	1724c <ble_ll_conn_rx_isr_end+0x258>
        ble_ll_conn_current_sm_over(connsm);
    }

    return rc;
}
   17150:	4638      	mov	r0, r7
   17152:	b003      	add	sp, #12
   17154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return os_cputime_usecs_to_ticks(usecs);
   17158:	4630      	mov	r0, r6
   1715a:	f013 fdb5 	bl	2acc8 <os_cputime_usecs_to_ticks>
   1715e:	e799      	b.n	17094 <ble_ll_conn_rx_isr_end+0xa0>
            opcode = rxbuf[2];
   17160:	78ab      	ldrb	r3, [r5, #2]
   17162:	9301      	str	r3, [sp, #4]
   17164:	e7a2      	b.n	170ac <ble_ll_conn_rx_isr_end+0xb8>
                connsm->tx_seqnum ^= 1;
   17166:	f083 0301 	eor.w	r3, r3, #1
   1716a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
                STATS_INC(ble_ll_conn_stats, data_pdu_txg);
   1716e:	4a3a      	ldr	r2, [pc, #232]	; (17258 <ble_ll_conn_rx_isr_end+0x264>)
   17170:	6b93      	ldr	r3, [r2, #56]	; 0x38
   17172:	3301      	adds	r3, #1
   17174:	6393      	str	r3, [r2, #56]	; 0x38
                if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   17176:	7863      	ldrb	r3, [r4, #1]
   17178:	f013 0f20 	tst.w	r3, #32
   1717c:	d129      	bne.n	171d2 <ble_ll_conn_rx_isr_end+0x1de>
                txpdu = connsm->cur_tx_pdu;
   1717e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
                if (txpdu) {
   17182:	2f00      	cmp	r7, #0
   17184:	d0c1      	beq.n	1710a <ble_ll_conn_rx_isr_end+0x116>
                    if (connsm->enc_data.tx_encrypted) {
   17186:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   1718a:	b123      	cbz	r3, 17196 <ble_ll_conn_rx_isr_end+0x1a2>
                        ++connsm->enc_data.tx_pkt_cntr;
   1718c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17190:	3301      	adds	r3, #1
   17192:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
                    if ((txhdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK)
   17196:	7e7b      	ldrb	r3, [r7, #25]
   17198:	f003 0303 	and.w	r3, r3, #3
   1719c:	2b03      	cmp	r3, #3
   1719e:	d01d      	beq.n	171dc <ble_ll_conn_rx_isr_end+0x1e8>
                    txhdr->txinfo.offset += txhdr->txinfo.pyld_len;
   171a0:	8bb9      	ldrh	r1, [r7, #28]
   171a2:	8b7b      	ldrh	r3, [r7, #26]
   171a4:	4419      	add	r1, r3
   171a6:	b289      	uxth	r1, r1
   171a8:	8379      	strh	r1, [r7, #26]
                    if (txhdr->txinfo.offset >= OS_MBUF_PKTLEN(txpdu)) {
   171aa:	8a3b      	ldrh	r3, [r7, #16]
   171ac:	4299      	cmp	r1, r3
   171ae:	d326      	bcc.n	171fe <ble_ll_conn_rx_isr_end+0x20a>
                        if (txhdr->txinfo.pyld_len != 0) {
   171b0:	8bbb      	ldrh	r3, [r7, #28]
   171b2:	b13b      	cbz	r3, 171c4 <ble_ll_conn_rx_isr_end+0x1d0>
                            ++connsm->completed_pkts;
   171b4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   171b8:	3301      	adds	r3, #1
   171ba:	b29b      	uxth	r3, r3
   171bc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                            if (connsm->completed_pkts > 2) {
   171c0:	2b02      	cmp	r3, #2
   171c2:	d816      	bhi.n	171f2 <ble_ll_conn_rx_isr_end+0x1fe>
                        os_mbuf_free_chain(txpdu);
   171c4:	4638      	mov	r0, r7
   171c6:	f7f6 f955 	bl	d474 <os_mbuf_free_chain>
                        connsm->cur_tx_pdu = NULL;
   171ca:	2300      	movs	r3, #0
   171cc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   171d0:	e79b      	b.n	1710a <ble_ll_conn_rx_isr_end+0x116>
                    CONN_F_EMPTY_PDU_TXD(connsm) = 0;
   171d2:	7863      	ldrb	r3, [r4, #1]
   171d4:	f36f 1345 	bfc	r3, #5, #1
   171d8:	7063      	strb	r3, [r4, #1]
                    goto chk_rx_terminate_ind;
   171da:	e796      	b.n	1710a <ble_ll_conn_rx_isr_end+0x116>
                        connsm->cur_tx_pdu = NULL;
   171dc:	2300      	movs	r3, #0
   171de:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
                        rc = ble_ll_ctrl_tx_done(txpdu, connsm);
   171e2:	4621      	mov	r1, r4
   171e4:	4638      	mov	r0, r7
   171e6:	f001 ff52 	bl	1908e <ble_ll_ctrl_tx_done>
                        if (rc) {
   171ea:	4607      	mov	r7, r0
   171ec:	2800      	cmp	r0, #0
   171ee:	d1a3      	bne.n	17138 <ble_ll_conn_rx_isr_end+0x144>
   171f0:	e78b      	b.n	1710a <ble_ll_conn_rx_isr_end+0x116>
    os_eventq_put(&evq->evq, &ev->ev);
   171f2:	491b      	ldr	r1, [pc, #108]	; (17260 <ble_ll_conn_rx_isr_end+0x26c>)
   171f4:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
   171f8:	f7f6 f807 	bl	d20a <os_eventq_put>
}
   171fc:	e7e2      	b.n	171c4 <ble_ll_conn_rx_isr_end+0x1d0>
                        rem_bytes = OS_MBUF_PKTLEN(txpdu) - txhdr->txinfo.offset;
   171fe:	1a59      	subs	r1, r3, r1
                        rem_bytes = ble_ll_conn_adjust_pyld_len(connsm, rem_bytes);
   17200:	b289      	uxth	r1, r1
   17202:	4620      	mov	r0, r4
   17204:	f7fe fe88 	bl	15f18 <ble_ll_conn_adjust_pyld_len>
                        txhdr->txinfo.pyld_len = rem_bytes;
   17208:	83b8      	strh	r0, [r7, #28]
   1720a:	e77e      	b.n	1710a <ble_ll_conn_rx_isr_end+0x116>
        if (BLE_LL_LLID_IS_CTRL(hdr_byte) &&
   1720c:	9b01      	ldr	r3, [sp, #4]
   1720e:	2b02      	cmp	r3, #2
   17210:	f47f af7e 	bne.w	17110 <ble_ll_conn_rx_isr_end+0x11c>
            (opcode == BLE_LL_CTRL_TERMINATE_IND) &&
   17214:	f1ba 0f02 	cmp.w	sl, #2
   17218:	f47f af7a 	bne.w	17110 <ble_ll_conn_rx_isr_end+0x11c>
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
   1721c:	7823      	ldrb	r3, [r4, #0]
   1721e:	f043 0304 	orr.w	r3, r3, #4
   17222:	7023      	strb	r3, [r4, #0]
            connsm->rxd_disconnect_reason = rxbuf[3];
   17224:	78eb      	ldrb	r3, [r5, #3]
   17226:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   1722a:	e771      	b.n	17110 <ble_ll_conn_rx_isr_end+0x11c>
            BLE_LL_ASSERT(0);
   1722c:	f7f4 ffb6 	bl	c19c <hal_debugger_connected>
   17230:	b100      	cbz	r0, 17234 <ble_ll_conn_rx_isr_end+0x240>
   17232:	be01      	bkpt	0x0001
   17234:	2300      	movs	r3, #0
   17236:	461a      	mov	r2, r3
   17238:	4619      	mov	r1, r3
   1723a:	4618      	mov	r0, r3
   1723c:	f7f5 fcb2 	bl	cba4 <__assert_func>
    rc = -1;
   17240:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   17244:	e778      	b.n	17138 <ble_ll_conn_rx_isr_end+0x144>
   17246:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1724a:	e775      	b.n	17138 <ble_ll_conn_rx_isr_end+0x144>
        ble_ll_conn_current_sm_over(connsm);
   1724c:	4620      	mov	r0, r4
   1724e:	f7fe fd6d 	bl	15d2c <ble_ll_conn_current_sm_over>
    return rc;
   17252:	e77d      	b.n	17150 <ble_ll_conn_rx_isr_end+0x15c>
   17254:	20002330 	.word	0x20002330
   17258:	200022ac 	.word	0x200022ac
   1725c:	000218df 	.word	0x000218df
   17260:	20002018 	.word	0x20002018

00017264 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint16_t length)
{
   17264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17266:	4605      	mov	r5, r0
   17268:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   1726a:	2a03      	cmp	r2, #3
   1726c:	d00d      	beq.n	1728a <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   1726e:	2300      	movs	r3, #0
   17270:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   17272:	8363      	strh	r3, [r4, #26]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   17274:	7662      	strb	r2, [r4, #25]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   17276:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1727a:	2b02      	cmp	r3, #2
   1727c:	d91d      	bls.n	172ba <ble_ll_conn_enqueue_pkt+0x56>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1727e:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   17282:	2a03      	cmp	r2, #3
   17284:	d004      	beq.n	17290 <ble_ll_conn_enqueue_pkt+0x2c>
    lifo = 0;
   17286:	2600      	movs	r6, #0
   17288:	e018      	b.n	172bc <ble_ll_conn_enqueue_pkt+0x58>
        om->om_len = length;
   1728a:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   1728c:	820b      	strh	r3, [r1, #16]
   1728e:	e7ee      	b.n	1726e <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   17290:	6822      	ldr	r2, [r4, #0]
   17292:	7812      	ldrb	r2, [r2, #0]
   17294:	3a02      	subs	r2, #2
   17296:	2a0f      	cmp	r2, #15
   17298:	d809      	bhi.n	172ae <ble_ll_conn_enqueue_pkt+0x4a>
   1729a:	e8df f002 	tbb	[pc, r2]
   1729e:	0a1d      	.short	0x0a1d
   172a0:	081d1d0a 	.word	0x081d1d0a
   172a4:	08080808 	.word	0x08080808
   172a8:	08081d08 	.word	0x08081d08
   172ac:	1d08      	.short	0x1d08
   172ae:	2600      	movs	r6, #0
   172b0:	e004      	b.n	172bc <ble_ll_conn_enqueue_pkt+0x58>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   172b2:	2b06      	cmp	r3, #6
   172b4:	d012      	beq.n	172dc <ble_ll_conn_enqueue_pkt+0x78>
    lifo = 0;
   172b6:	2600      	movs	r6, #0
   172b8:	e000      	b.n	172bc <ble_ll_conn_enqueue_pkt+0x58>
   172ba:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   172bc:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   172c0:	f7f7 f942 	bl	e548 <os_arch_save_sr>
    if (lifo) {
   172c4:	b186      	cbz	r6, 172e8 <ble_ll_conn_enqueue_pkt+0x84>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   172c6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
   172ca:	6163      	str	r3, [r4, #20]
   172cc:	b143      	cbz	r3, 172e0 <ble_ll_conn_enqueue_pkt+0x7c>
   172ce:	f8c5 70ac 	str.w	r7, [r5, #172]	; 0xac
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   172d2:	f7f7 f93f 	bl	e554 <os_arch_restore_sr>
}
   172d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   172d8:	2601      	movs	r6, #1
   172da:	e7ef      	b.n	172bc <ble_ll_conn_enqueue_pkt+0x58>
                    lifo = 1;
   172dc:	2601      	movs	r6, #1
   172de:	e7ed      	b.n	172bc <ble_ll_conn_enqueue_pkt+0x58>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   172e0:	3414      	adds	r4, #20
   172e2:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   172e6:	e7f2      	b.n	172ce <ble_ll_conn_enqueue_pkt+0x6a>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   172e8:	2300      	movs	r3, #0
   172ea:	f844 3f14 	str.w	r3, [r4, #20]!
   172ee:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   172f2:	601f      	str	r7, [r3, #0]
   172f4:	f8c5 40b0 	str.w	r4, [r5, #176]	; 0xb0
   172f8:	e7eb      	b.n	172d2 <ble_ll_conn_enqueue_pkt+0x6e>
	...

000172fc <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   172fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172fe:	4605      	mov	r5, r0
   17300:	460c      	mov	r4, r1
   17302:	4616      	mov	r6, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_by_handle(conn_handle);
   17304:	f3c1 000b 	ubfx	r0, r1, #0, #12
   17308:	f7ff f8d0 	bl	164ac <ble_ll_conn_find_by_handle>
    if (connsm) {
   1730c:	b180      	cbz	r0, 17330 <ble_ll_conn_tx_pkt_in+0x34>
   1730e:	4607      	mov	r7, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   17310:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   17314:	d10a      	bne.n	1732c <ble_ll_conn_tx_pkt_in+0x30>
            hdr_byte = BLE_LL_LLID_DATA_START;
   17316:	2202      	movs	r2, #2
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
        }

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);
   17318:	4909      	ldr	r1, [pc, #36]	; (17340 <ble_ll_conn_tx_pkt_in+0x44>)
   1731a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   1731c:	3301      	adds	r3, #1
   1731e:	644b      	str	r3, [r1, #68]	; 0x44

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   17320:	4633      	mov	r3, r6
   17322:	4629      	mov	r1, r5
   17324:	4638      	mov	r0, r7
   17326:	f7ff ff9d 	bl	17264 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   1732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1732c:	2201      	movs	r2, #1
   1732e:	e7f3      	b.n	17318 <ble_ll_conn_tx_pkt_in+0x1c>
        STATS_INC(ble_ll_conn_stats, handle_not_found);
   17330:	4a03      	ldr	r2, [pc, #12]	; (17340 <ble_ll_conn_tx_pkt_in+0x44>)
   17332:	6993      	ldr	r3, [r2, #24]
   17334:	3301      	adds	r3, #1
   17336:	6193      	str	r3, [r2, #24]
        os_mbuf_free_chain(om);
   17338:	4628      	mov	r0, r5
   1733a:	f7f6 f89b 	bl	d474 <os_mbuf_free_chain>
}
   1733e:	e7f4      	b.n	1732a <ble_ll_conn_tx_pkt_in+0x2e>
   17340:	200022ac 	.word	0x200022ac

00017344 <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   17344:	b538      	push	{r3, r4, r5, lr}
   17346:	4605      	mov	r5, r0
   17348:	460c      	mov	r4, r1
#endif
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->central_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   1734a:	2205      	movs	r2, #5
   1734c:	4805      	ldr	r0, [pc, #20]	; (17364 <ble_ll_conn_set_global_chanmap+0x20>)
   1734e:	f7f7 fb0f 	bl	e970 <memcmp>
   17352:	b128      	cbz	r0, 17360 <ble_ll_conn_set_global_chanmap+0x1c>
        return;
    }

    /* Change channel map and cause channel map update procedure to start */
    conn_params->num_used_chans = num_used_chans;
   17354:	4b03      	ldr	r3, [pc, #12]	; (17364 <ble_ll_conn_set_global_chanmap+0x20>)
   17356:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->central_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   17358:	6820      	ldr	r0, [r4, #0]
   1735a:	6018      	str	r0, [r3, #0]
   1735c:	7922      	ldrb	r2, [r4, #4]
   1735e:	711a      	strb	r2, [r3, #4]
        if (connsm->conn_role == BLE_LL_CONN_ROLE_CENTRAL) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD, NULL);
        }
    }
#endif
}
   17360:	bd38      	pop	{r3, r4, r5, pc}
   17362:	bf00      	nop
   17364:	2000233c 	.word	0x2000233c

00017368 <ble_ll_conn_periph_start>:
 */
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
int
ble_ll_conn_periph_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                         bool force_csa2)
{
   17368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1736c:	4607      	mov	r7, r0
   1736e:	468a      	mov	sl, r1
   17370:	4690      	mov	r8, r2
   17372:	4699      	mov	r9, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   17374:	1c86      	adds	r6, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   17376:	4b75      	ldr	r3, [pc, #468]	; (1754c <ble_ll_conn_periph_start+0x1e4>)
   17378:	681c      	ldr	r4, [r3, #0]
   1737a:	e007      	b.n	1738c <ble_ll_conn_periph_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   1737c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   17380:	f013 0f01 	tst.w	r3, #1
   17384:	f000 808c 	beq.w	174a0 <ble_ll_conn_periph_start+0x138>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   17388:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   1738c:	b194      	cbz	r4, 173b4 <ble_ll_conn_periph_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   1738e:	2206      	movs	r2, #6
   17390:	4631      	mov	r1, r6
   17392:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   17396:	f7f7 faeb 	bl	e970 <memcmp>
   1739a:	4605      	mov	r5, r0
   1739c:	2800      	cmp	r0, #0
   1739e:	d1f3      	bne.n	17388 <ble_ll_conn_periph_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   173a0:	783b      	ldrb	r3, [r7, #0]
   173a2:	f013 0f40 	tst.w	r3, #64	; 0x40
   173a6:	d0e9      	beq.n	1737c <ble_ll_conn_periph_start+0x14>
                if (connsm->peer_addr_type & 1) {
   173a8:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   173ac:	f013 0f01 	tst.w	r3, #1
   173b0:	d0ea      	beq.n	17388 <ble_ll_conn_periph_start+0x20>
   173b2:	e075      	b.n	174a0 <ble_ll_conn_periph_start+0x138>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   173b4:	f7ff f88c 	bl	164d0 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   173b8:	4604      	mov	r4, r0
   173ba:	2800      	cmp	r0, #0
   173bc:	f000 80c3 	beq.w	17546 <ble_ll_conn_periph_start+0x1de>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   173c0:	f107 000e 	add.w	r0, r7, #14
   173c4:	f013 fc0e 	bl	2abe4 <get_le32>
   173c8:	6520      	str	r0, [r4, #80]	; 0x50
    crcinit = dptr[6];
   173ca:	7d3a      	ldrb	r2, [r7, #20]
    crcinit = (crcinit << 8) | dptr[5];
   173cc:	7cfb      	ldrb	r3, [r7, #19]
   173ce:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   173d2:	7cbb      	ldrb	r3, [r7, #18]
   173d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   173d8:	6563      	str	r3, [r4, #84]	; 0x54
    connsm->tx_win_size = dptr[7];
   173da:	7d7b      	ldrb	r3, [r7, #21]
   173dc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    connsm->tx_win_off = get_le16(dptr + 8);
   173e0:	f107 0016 	add.w	r0, r7, #22
   173e4:	f013 fbf9 	bl	2abda <get_le16>
   173e8:	f8a4 006e 	strh.w	r0, [r4, #110]	; 0x6e
    connsm->conn_itvl = get_le16(dptr + 10);
   173ec:	f107 0018 	add.w	r0, r7, #24
   173f0:	f013 fbf3 	bl	2abda <get_le16>
   173f4:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    connsm->periph_latency = get_le16(dptr + 12);
   173f8:	f107 001a 	add.w	r0, r7, #26
   173fc:	f013 fbed 	bl	2abda <get_le16>
   17400:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
    connsm->supervision_tmo = get_le16(dptr + 14);
   17404:	f107 001c 	add.w	r0, r7, #28
   17408:	f013 fbe7 	bl	2abda <get_le16>
   1740c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   17410:	f104 011c 	add.w	r1, r4, #28
   17414:	463b      	mov	r3, r7
   17416:	f853 2f1e 	ldr.w	r2, [r3, #30]!
   1741a:	61e2      	str	r2, [r4, #28]
   1741c:	791b      	ldrb	r3, [r3, #4]
   1741e:	710b      	strb	r3, [r1, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   17420:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   17424:	f002 021f 	and.w	r2, r2, #31
   17428:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
    connsm->central_sca = dptr[21] >> 5;
   1742c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   17430:	095b      	lsrs	r3, r3, #5
   17432:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   17436:	f8b4 506e 	ldrh.w	r5, [r4, #110]	; 0x6e
   1743a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   1743e:	429d      	cmp	r5, r3
   17440:	d822      	bhi.n	17488 <ble_ll_conn_periph_start+0x120>
   17442:	2b05      	cmp	r3, #5
   17444:	d920      	bls.n	17488 <ble_ll_conn_periph_start+0x120>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   17446:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1744a:	d81d      	bhi.n	17488 <ble_ll_conn_periph_start+0x120>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   1744c:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   17450:	b1d5      	cbz	r5, 17488 <ble_ll_conn_periph_start+0x120>
        (connsm->periph_latency > BLE_LL_CONN_PERIPH_LATENCY_MAX) ||
   17452:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   17456:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1745a:	d215      	bcs.n	17488 <ble_ll_conn_periph_start+0x120>
        (connsm->periph_latency > BLE_LL_CONN_PERIPH_LATENCY_MAX) ||
   1745c:	2a04      	cmp	r2, #4
   1745e:	d913      	bls.n	17488 <ble_ll_conn_periph_start+0x120>
        (connsm->hop_inc < 5) || (connsm->hop_inc > 16)) {
   17460:	2a10      	cmp	r2, #16
   17462:	d811      	bhi.n	17488 <ble_ll_conn_periph_start+0x120>
        goto err_periph_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->periph_latency + 1) * (connsm->conn_itvl * 2) *
   17464:	fb0c 3c03 	mla	ip, ip, r3, r3
   17468:	f640 12c4 	movw	r2, #2500	; 0x9c4
   1746c:	fb02 fc0c 	mul.w	ip, r2, ip
           BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   17470:	f242 7210 	movw	r2, #10000	; 0x2710
   17474:	fb02 f000 	mul.w	r0, r2, r0
   17478:	4560      	cmp	r0, ip
   1747a:	d905      	bls.n	17488 <ble_ll_conn_periph_start+0x120>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   1747c:	3b01      	subs	r3, #1
    if (temp > 8) {
   1747e:	2b08      	cmp	r3, #8
   17480:	d900      	bls.n	17484 <ble_ll_conn_periph_start+0x11c>
        temp = 8;
   17482:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   17484:	429d      	cmp	r5, r3
   17486:	d90e      	bls.n	174a6 <ble_ll_conn_periph_start+0x13e>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_periph_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   17488:	2500      	movs	r5, #0
   1748a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
   1748e:	4b30      	ldr	r3, [pc, #192]	; (17550 <ble_ll_conn_periph_start+0x1e8>)
   17490:	685a      	ldr	r2, [r3, #4]
   17492:	6014      	str	r4, [r2, #0]
   17494:	34b4      	adds	r4, #180	; 0xb4
   17496:	605c      	str	r4, [r3, #4]
    STATS_INC(ble_ll_conn_stats, periph_rxd_bad_conn_req_params);
   17498:	4a2e      	ldr	r2, [pc, #184]	; (17554 <ble_ll_conn_periph_start+0x1ec>)
   1749a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1749c:	3301      	adds	r3, #1
   1749e:	62d3      	str	r3, [r2, #44]	; 0x2c
    return 0;
}
   174a0:	4628      	mov	r0, r5
   174a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   174a6:	6833      	ldr	r3, [r6, #0]
   174a8:	f8c4 308f 	str.w	r3, [r4, #143]	; 0x8f
   174ac:	88b3      	ldrh	r3, [r6, #4]
   174ae:	f8a4 3093 	strh.w	r3, [r4, #147]	; 0x93
    connsm->peer_addr_type = pat;
   174b2:	f884 a08e 	strb.w	sl, [r4, #142]	; 0x8e
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   174b6:	4608      	mov	r0, r1
   174b8:	f003 fd81 	bl	1afbe <ble_ll_utils_calc_num_used_chans>
   174bc:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    if (connsm->num_used_chans < 2) {
   174c0:	2801      	cmp	r0, #1
   174c2:	d9e1      	bls.n	17488 <ble_ll_conn_periph_start+0x120>
    ble_ll_conn_itvl_to_ticks(connsm->conn_itvl, &connsm->conn_itvl_ticks,
   174c4:	f104 0275 	add.w	r2, r4, #117	; 0x75
   174c8:	f104 0178 	add.w	r1, r4, #120	; 0x78
   174cc:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
   174d0:	f7fe ffb2 	bl	16438 <ble_ll_conn_itvl_to_ticks>
    connsm->conn_role = BLE_LL_CONN_ROLE_PERIPHERAL;
   174d4:	2302      	movs	r3, #2
   174d6:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   174d8:	4620      	mov	r0, r4
   174da:	f7ff fa77 	bl	169cc <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   174de:	f1b9 0f00 	cmp.w	r9, #0
   174e2:	d105      	bne.n	174f0 <ble_ll_conn_periph_start+0x188>
   174e4:	783b      	ldrb	r3, [r7, #0]
   174e6:	f013 0f20 	tst.w	r3, #32
   174ea:	d025      	beq.n	17538 <ble_ll_conn_periph_start+0x1d0>
   174ec:	2101      	movs	r1, #1
   174ee:	e000      	b.n	174f2 <ble_ll_conn_periph_start+0x18a>
   174f0:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   174f2:	4620      	mov	r0, r4
   174f4:	f7ff fa2e 	bl	16954 <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   174f8:	4b17      	ldr	r3, [pc, #92]	; (17558 <ble_ll_conn_periph_start+0x1f0>)
   174fa:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    rc = ble_ll_conn_created(connsm, rxhdr);
   174fe:	4641      	mov	r1, r8
   17500:	4620      	mov	r0, r4
   17502:	f7ff f97d 	bl	16800 <ble_ll_conn_created>
    if (!rc) {
   17506:	4605      	mov	r5, r0
   17508:	2800      	cmp	r0, #0
   1750a:	d1c9      	bne.n	174a0 <ble_ll_conn_periph_start+0x138>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1750c:	4b0f      	ldr	r3, [pc, #60]	; (1754c <ble_ll_conn_periph_start+0x1e4>)
   1750e:	681b      	ldr	r3, [r3, #0]
   17510:	42a3      	cmp	r3, r4
   17512:	d013      	beq.n	1753c <ble_ll_conn_periph_start+0x1d4>
   17514:	461a      	mov	r2, r3
   17516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   1751a:	42a3      	cmp	r3, r4
   1751c:	d1fa      	bne.n	17514 <ble_ll_conn_periph_start+0x1ac>
   1751e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   17522:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   17526:	2300      	movs	r3, #0
   17528:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1752c:	4b08      	ldr	r3, [pc, #32]	; (17550 <ble_ll_conn_periph_start+0x1e8>)
   1752e:	685a      	ldr	r2, [r3, #4]
   17530:	6014      	str	r4, [r2, #0]
   17532:	34b4      	adds	r4, #180	; 0xb4
   17534:	605c      	str	r4, [r3, #4]
   17536:	e7b3      	b.n	174a0 <ble_ll_conn_periph_start+0x138>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   17538:	2100      	movs	r1, #0
   1753a:	e7da      	b.n	174f2 <ble_ll_conn_periph_start+0x18a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1753c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   17540:	4b02      	ldr	r3, [pc, #8]	; (1754c <ble_ll_conn_periph_start+0x1e4>)
   17542:	601a      	str	r2, [r3, #0]
   17544:	e7ef      	b.n	17526 <ble_ll_conn_periph_start+0x1be>
        return 0;
   17546:	2500      	movs	r5, #0
   17548:	e7aa      	b.n	174a0 <ble_ll_conn_periph_start+0x138>
   1754a:	bf00      	nop
   1754c:	2000232c 	.word	0x2000232c
   17550:	20002334 	.word	0x20002334
   17554:	200022ac 	.word	0x200022ac
   17558:	00015da1 	.word	0x00015da1

0001755c <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   1755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   1755e:	4b26      	ldr	r3, [pc, #152]	; (175f8 <ble_ll_conn_module_reset+0x9c>)
   17560:	6818      	ldr	r0, [r3, #0]
   17562:	b118      	cbz	r0, 1756c <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   17564:	2100      	movs	r1, #0
   17566:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   17568:	f7ff fadc 	bl	16b24 <ble_ll_conn_end>
    g_ble_ll_conn_create_sm.connsm = NULL;
#endif

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   1756c:	4b23      	ldr	r3, [pc, #140]	; (175fc <ble_ll_conn_module_reset+0xa0>)
   1756e:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   17570:	b118      	cbz	r0, 1757a <ble_ll_conn_module_reset+0x1e>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   17572:	2100      	movs	r1, #0
   17574:	f7ff fad6 	bl	16b24 <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   17578:	e7f8      	b.n	1756c <ble_ll_conn_module_reset+0x10>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   1757a:	f004 fe51 	bl	1c220 <ble_phy_max_data_pdu_pyld>
   1757e:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   17580:	4606      	mov	r6, r0
   17582:	28fb      	cmp	r0, #251	; 0xfb
   17584:	bf28      	it	cs
   17586:	26fb      	movcs	r6, #251	; 0xfb
   17588:	b2f7      	uxtb	r7, r6
   1758a:	463e      	mov	r6, r7
    conn_params->supp_max_rx_octets = maxbytes;
   1758c:	4c1c      	ldr	r4, [pc, #112]	; (17600 <ble_ll_conn_module_reset+0xa4>)
   1758e:	71e7      	strb	r7, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   17590:	3604      	adds	r6, #4
   17592:	2101      	movs	r1, #1
   17594:	4630      	mov	r0, r6
   17596:	f7fd fa37 	bl	14a08 <ble_ll_pdu_tx_time_get>
   1759a:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   1759c:	71a7      	strb	r7, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   1759e:	2101      	movs	r1, #1
   175a0:	4630      	mov	r0, r6
   175a2:	f7fd fa31 	bl	14a08 <ble_ll_pdu_tx_time_get>
   175a6:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   175a8:	2d1b      	cmp	r5, #27
   175aa:	bf28      	it	cs
   175ac:	251b      	movcs	r5, #27
   175ae:	b2eb      	uxtb	r3, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   175b0:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   175b2:	1d1d      	adds	r5, r3, #4
   175b4:	2101      	movs	r1, #1
   175b6:	4628      	mov	r0, r5
   175b8:	f7fd fa26 	bl	14a08 <ble_ll_pdu_tx_time_get>
   175bc:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   175be:	2101      	movs	r1, #1
   175c0:	4628      	mov	r0, r5
   175c2:	f7fd fa21 	bl	14a08 <ble_ll_pdu_tx_time_get>
   175c6:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   175c8:	2103      	movs	r1, #3
   175ca:	4628      	mov	r0, r5
   175cc:	f7fd fa1c 	bl	14a08 <ble_ll_pdu_tx_time_get>
   175d0:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   175d2:	231b      	movs	r3, #27
   175d4:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   175d6:	f44f 73a4 	mov.w	r3, #328	; 0x148
   175da:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   175dc:	2325      	movs	r3, #37	; 0x25
   175de:	7163      	strb	r3, [r4, #5]
    memset(conn_params->central_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   175e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   175e4:	6023      	str	r3, [r4, #0]
    conn_params->central_chan_map[4] = 0x1f;
   175e6:	231f      	movs	r3, #31
   175e8:	7123      	strb	r3, [r4, #4]

    /* Reset statistics */
    STATS_RESET(ble_ll_conn_stats);
   175ea:	2274      	movs	r2, #116	; 0x74
   175ec:	2100      	movs	r1, #0
   175ee:	4805      	ldr	r0, [pc, #20]	; (17604 <ble_ll_conn_module_reset+0xa8>)
   175f0:	f7f7 fa07 	bl	ea02 <memset>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_CTRL_TO_HOST_FLOW_CONTROL)
    g_ble_ll_conn_cth_flow.enabled = false;
    g_ble_ll_conn_cth_flow.max_buffers = 1;
    g_ble_ll_conn_cth_flow.num_buffers = 1;
#endif
}
   175f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175f6:	bf00      	nop
   175f8:	20002330 	.word	0x20002330
   175fc:	2000232c 	.word	0x2000232c
   17600:	2000233c 	.word	0x2000233c
   17604:	200022b8 	.word	0x200022b8

00017608 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   17608:	b530      	push	{r4, r5, lr}
   1760a:	b083      	sub	sp, #12
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active connections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   1760c:	2400      	movs	r4, #0
   1760e:	4b1c      	ldr	r3, [pc, #112]	; (17680 <ble_ll_conn_module_init+0x78>)
   17610:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   17612:	4b1c      	ldr	r3, [pc, #112]	; (17684 <ble_ll_conn_module_init+0x7c>)
   17614:	601c      	str	r4, [r3, #0]
   17616:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   17618:	4d1b      	ldr	r5, [pc, #108]	; (17688 <ble_ll_conn_module_init+0x80>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   1761a:	b16c      	cbz	r4, 17638 <ble_ll_conn_module_init+0x30>

        ++connsm;
    }

    /* Register connection statistics */
    rc = stats_init_and_reg(STATS_HDR(ble_ll_conn_stats),
   1761c:	4b1b      	ldr	r3, [pc, #108]	; (1768c <ble_ll_conn_module_init+0x84>)
   1761e:	9301      	str	r3, [sp, #4]
   17620:	2300      	movs	r3, #0
   17622:	9300      	str	r3, [sp, #0]
   17624:	221d      	movs	r2, #29
   17626:	2104      	movs	r1, #4
   17628:	4819      	ldr	r0, [pc, #100]	; (17690 <ble_ll_conn_module_init+0x88>)
   1762a:	f7fa fd7f 	bl	1212c <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_conn_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_conn_stats),
                            "ble_ll_conn");
    BLE_LL_ASSERT(rc == 0);
   1762e:	b9e8      	cbnz	r0, 1766c <ble_ll_conn_module_init+0x64>
    ble_npl_event_init(&g_ble_ll_conn_cth_flow_error_ev,
                       ble_ll_conn_cth_flow_error_fn, NULL);
#endif

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   17630:	f7ff ff94 	bl	1755c <ble_ll_conn_module_reset>
}
   17634:	b003      	add	sp, #12
   17636:	bd30      	pop	{r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   17638:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1763c:	2100      	movs	r1, #0
   1763e:	4628      	mov	r0, r5
   17640:	f7f7 f9df 	bl	ea02 <memset>
        connsm->conn_handle = i + 1;
   17644:	3401      	adds	r4, #1
   17646:	b2a4      	uxth	r4, r4
   17648:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1764a:	4b0e      	ldr	r3, [pc, #56]	; (17684 <ble_ll_conn_module_init+0x7c>)
   1764c:	685a      	ldr	r2, [r3, #4]
   1764e:	6015      	str	r5, [r2, #0]
   17650:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
   17654:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   17656:	2303      	movs	r3, #3
   17658:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
        connsm->conn_sch.cb_arg = connsm;
   1765c:	f8c5 50e4 	str.w	r5, [r5, #228]	; 0xe4
        ble_ll_ctrl_init_conn_sm(connsm);
   17660:	4628      	mov	r0, r5
   17662:	f001 fd7d 	bl	19160 <ble_ll_ctrl_init_conn_sm>
        ++connsm;
   17666:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   1766a:	e7d6      	b.n	1761a <ble_ll_conn_module_init+0x12>
    BLE_LL_ASSERT(rc == 0);
   1766c:	f7f4 fd96 	bl	c19c <hal_debugger_connected>
   17670:	b100      	cbz	r0, 17674 <ble_ll_conn_module_init+0x6c>
   17672:	be01      	bkpt	0x0001
   17674:	2300      	movs	r3, #0
   17676:	461a      	mov	r2, r3
   17678:	4619      	mov	r1, r3
   1767a:	4618      	mov	r0, r3
   1767c:	f7f5 fa92 	bl	cba4 <__assert_func>
   17680:	2000232c 	.word	0x2000232c
   17684:	20002334 	.word	0x20002334
   17688:	20002358 	.word	0x20002358
   1768c:	0002dd10 	.word	0x0002dd10
   17690:	200022ac 	.word	0x200022ac

00017694 <ble_ll_conn_hci_chk_conn_params>:
                                uint16_t latency, uint16_t spvn_tmo)
{
    uint32_t spvn_tmo_usecs;
    uint32_t min_spvn_tmo_usecs;

    if ((itvl_min > itvl_max) ||
   17694:	4288      	cmp	r0, r1
   17696:	d81a      	bhi.n	176ce <ble_ll_conn_hci_chk_conn_params+0x3a>
   17698:	2805      	cmp	r0, #5
   1769a:	d91a      	bls.n	176d2 <ble_ll_conn_hci_chk_conn_params+0x3e>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   1769c:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   176a0:	d819      	bhi.n	176d6 <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   176a2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   176a6:	d218      	bcs.n	176da <ble_ll_conn_hci_chk_conn_params+0x46>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   176a8:	2b09      	cmp	r3, #9
   176aa:	d918      	bls.n	176de <ble_ll_conn_hci_chk_conn_params+0x4a>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   176ac:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   176b0:	d817      	bhi.n	176e2 <ble_ll_conn_hci_chk_conn_params+0x4e>
    /*
    * Supervision timeout (in msecs) must be more than:
    *  (1 + connLatency) * connIntervalMax * 1.25 msecs * 2.
    */
    spvn_tmo_usecs = spvn_tmo;
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   176b2:	f242 7010 	movw	r0, #10000	; 0x2710
   176b6:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
    min_spvn_tmo_usecs *= (1 + latency);
   176ba:	fb02 1101 	mla	r1, r2, r1, r1
   176be:	f640 12c4 	movw	r2, #2500	; 0x9c4
   176c2:	fb02 f101 	mul.w	r1, r2, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   176c6:	428b      	cmp	r3, r1
   176c8:	d90d      	bls.n	176e6 <ble_ll_conn_hci_chk_conn_params+0x52>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return BLE_ERR_SUCCESS;
   176ca:	2000      	movs	r0, #0
   176cc:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   176ce:	2012      	movs	r0, #18
   176d0:	4770      	bx	lr
   176d2:	2012      	movs	r0, #18
   176d4:	4770      	bx	lr
   176d6:	2012      	movs	r0, #18
   176d8:	4770      	bx	lr
   176da:	2012      	movs	r0, #18
   176dc:	4770      	bx	lr
   176de:	2012      	movs	r0, #18
   176e0:	4770      	bx	lr
   176e2:	2012      	movs	r0, #18
   176e4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   176e6:	2012      	movs	r0, #18
}
   176e8:	4770      	bx	lr

000176ea <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   176ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   176ec:	888b      	ldrh	r3, [r1, #4]
   176ee:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   176f2:	8802      	ldrh	r2, [r0, #0]
   176f4:	4293      	cmp	r3, r2
   176f6:	d11d      	bne.n	17734 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   176f8:	8844      	ldrh	r4, [r0, #2]
   176fa:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   176fe:	8885      	ldrh	r5, [r0, #4]
   17700:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   17704:	88c2      	ldrh	r2, [r0, #6]
   17706:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   1770a:	8903      	ldrh	r3, [r0, #8]
   1770c:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   17710:	8947      	ldrh	r7, [r0, #10]
   17712:	b2be      	uxth	r6, r7
   17714:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   17718:	8980      	ldrh	r0, [r0, #12]
   1771a:	b287      	uxth	r7, r0
   1771c:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   17720:	b29b      	uxth	r3, r3
   17722:	b292      	uxth	r2, r2
   17724:	b2a9      	uxth	r1, r5
   17726:	b2a0      	uxth	r0, r4
   17728:	f7ff ffb4 	bl	17694 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   1772c:	b960      	cbnz	r0, 17748 <ble_ll_conn_process_conn_params+0x5e>
   1772e:	42be      	cmp	r6, r7
   17730:	d80c      	bhi.n	1774c <ble_ll_conn_process_conn_params+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   17732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   17734:	f7f4 fd32 	bl	c19c <hal_debugger_connected>
   17738:	b100      	cbz	r0, 1773c <ble_ll_conn_process_conn_params+0x52>
   1773a:	be01      	bkpt	0x0001
   1773c:	2300      	movs	r3, #0
   1773e:	461a      	mov	r2, r3
   17740:	4619      	mov	r1, r3
   17742:	4618      	mov	r0, r3
   17744:	f7f5 fa2e 	bl	cba4 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17748:	2012      	movs	r0, #18
   1774a:	e7f2      	b.n	17732 <ble_ll_conn_process_conn_params+0x48>
   1774c:	2012      	movs	r0, #18
   1774e:	e7f0      	b.n	17732 <ble_ll_conn_process_conn_params+0x48>

00017750 <ble_ll_conn_comp_event_send>:
{
   17750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   17752:	2a00      	cmp	r2, #0
   17754:	d051      	beq.n	177fa <ble_ll_conn_comp_event_send+0xaa>
   17756:	4605      	mov	r5, r0
   17758:	460f      	mov	r7, r1
   1775a:	461e      	mov	r6, r3
   1775c:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   1775e:	200a      	movs	r0, #10
   17760:	f002 f928 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   17764:	2800      	cmp	r0, #0
   17766:	d06b      	beq.n	17840 <ble_ll_conn_comp_event_send+0xf0>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   17768:	233e      	movs	r3, #62	; 0x3e
   1776a:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   1776c:	221f      	movs	r2, #31
   1776e:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   17770:	2100      	movs	r1, #0
   17772:	1ca0      	adds	r0, r4, #2
   17774:	f7f7 f945 	bl	ea02 <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   17778:	230a      	movs	r3, #10
   1777a:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   1777c:	70e7      	strb	r7, [r4, #3]
        if (connsm) {
   1777e:	b3c5      	cbz	r5, 177f2 <ble_ll_conn_comp_event_send+0xa2>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   17780:	88ab      	ldrh	r3, [r5, #4]
   17782:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   17784:	79eb      	ldrb	r3, [r5, #7]
   17786:	3b01      	subs	r3, #1
   17788:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   1778a:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1778e:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   17790:	462b      	mov	r3, r5
   17792:	f853 2f8f 	ldr.w	r2, [r3, #143]!
   17796:	60a2      	str	r2, [r4, #8]
   17798:	889b      	ldrh	r3, [r3, #4]
   1779a:	81a3      	strh	r3, [r4, #12]
            switch (connsm->conn_role) {
   1779c:	79eb      	ldrb	r3, [r5, #7]
   1779e:	2b02      	cmp	r3, #2
   177a0:	d135      	bne.n	1780e <ble_ll_conn_comp_event_send+0xbe>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   177a2:	4630      	mov	r0, r6
   177a4:	f7fe fa24 	bl	15bf0 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   177a8:	b120      	cbz	r0, 177b4 <ble_ll_conn_comp_event_send+0x64>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   177aa:	6802      	ldr	r2, [r0, #0]
   177ac:	f8c4 200e 	str.w	r2, [r4, #14]
   177b0:	8883      	ldrh	r3, [r0, #4]
   177b2:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_resolved) {
   177b4:	f895 3095 	ldrb.w	r3, [r5, #149]	; 0x95
   177b8:	b113      	cbz	r3, 177c0 <ble_ll_conn_comp_event_send+0x70>
                 enh_ev->peer_addr_type += 2;
   177ba:	79e3      	ldrb	r3, [r4, #7]
   177bc:	3302      	adds	r3, #2
   177be:	71e3      	strb	r3, [r4, #7]
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   177c0:	79e3      	ldrb	r3, [r4, #7]
   177c2:	2b01      	cmp	r3, #1
   177c4:	d909      	bls.n	177da <ble_ll_conn_comp_event_send+0x8a>
                 switch (connsm->conn_role) {
   177c6:	79eb      	ldrb	r3, [r5, #7]
   177c8:	2b02      	cmp	r3, #2
   177ca:	d12a      	bne.n	17822 <ble_ll_conn_comp_event_send+0xd2>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   177cc:	4630      	mov	r0, r6
   177ce:	f7fe fa25 	bl	15c1c <ble_ll_adv_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   177d2:	6803      	ldr	r3, [r0, #0]
   177d4:	6163      	str	r3, [r4, #20]
   177d6:	8883      	ldrh	r3, [r0, #4]
   177d8:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   177da:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   177de:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->periph_latency);
   177e0:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   177e4:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   177e6:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   177ea:	83e3      	strh	r3, [r4, #30]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   177ec:	79eb      	ldrb	r3, [r5, #7]
   177ee:	2b02      	cmp	r3, #2
   177f0:	d021      	beq.n	17836 <ble_ll_conn_comp_event_send+0xe6>
        ble_ll_hci_event_send(hci_ev);
   177f2:	4620      	mov	r0, r4
   177f4:	f002 f80c 	bl	19810 <ble_ll_hci_event_send>
}
   177f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(evbuf);
   177fa:	f7f4 fccf 	bl	c19c <hal_debugger_connected>
   177fe:	b100      	cbz	r0, 17802 <ble_ll_conn_comp_event_send+0xb2>
   17800:	be01      	bkpt	0x0001
   17802:	2300      	movs	r3, #0
   17804:	461a      	mov	r2, r3
   17806:	4619      	mov	r1, r3
   17808:	4618      	mov	r0, r3
   1780a:	f7f5 f9cb 	bl	cba4 <__assert_func>
                BLE_LL_ASSERT(0);
   1780e:	f7f4 fcc5 	bl	c19c <hal_debugger_connected>
   17812:	b100      	cbz	r0, 17816 <ble_ll_conn_comp_event_send+0xc6>
   17814:	be01      	bkpt	0x0001
   17816:	2300      	movs	r3, #0
   17818:	461a      	mov	r2, r3
   1781a:	4619      	mov	r1, r3
   1781c:	4618      	mov	r0, r3
   1781e:	f7f5 f9c1 	bl	cba4 <__assert_func>
                     BLE_LL_ASSERT(0);
   17822:	f7f4 fcbb 	bl	c19c <hal_debugger_connected>
   17826:	b100      	cbz	r0, 1782a <ble_ll_conn_comp_event_send+0xda>
   17828:	be01      	bkpt	0x0001
   1782a:	2300      	movs	r3, #0
   1782c:	461a      	mov	r2, r3
   1782e:	4619      	mov	r1, r3
   17830:	4618      	mov	r0, r3
   17832:	f7f5 f9b7 	bl	cba4 <__assert_func>
                enh_ev->mca = connsm->central_sca;
   17836:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1783a:	f884 3020 	strb.w	r3, [r4, #32]
   1783e:	e7d8      	b.n	177f2 <ble_ll_conn_comp_event_send+0xa2>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   17840:	2001      	movs	r0, #1
   17842:	f002 f8b7 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   17846:	b918      	cbnz	r0, 17850 <ble_ll_conn_comp_event_send+0x100>
    ble_transport_free(evbuf);
   17848:	4620      	mov	r0, r4
   1784a:	f00f fd67 	bl	2731c <ble_transport_free>
   1784e:	e7d3      	b.n	177f8 <ble_ll_conn_comp_event_send+0xa8>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   17850:	233e      	movs	r3, #62	; 0x3e
   17852:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   17854:	2313      	movs	r3, #19
   17856:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   17858:	2300      	movs	r3, #0
   1785a:	f8c4 3002 	str.w	r3, [r4, #2]
   1785e:	f8c4 3006 	str.w	r3, [r4, #6]
   17862:	f8c4 300a 	str.w	r3, [r4, #10]
   17866:	f8c4 300e 	str.w	r3, [r4, #14]
   1786a:	f8c4 3011 	str.w	r3, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   1786e:	2301      	movs	r3, #1
   17870:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   17872:	70e7      	strb	r7, [r4, #3]
        if (connsm) {
   17874:	b1cd      	cbz	r5, 178aa <ble_ll_conn_comp_event_send+0x15a>
            ev->conn_handle = htole16(connsm->conn_handle);
   17876:	88ab      	ldrh	r3, [r5, #4]
   17878:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   1787a:	79eb      	ldrb	r3, [r5, #7]
   1787c:	3b01      	subs	r3, #1
   1787e:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   17880:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   17884:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   17886:	462b      	mov	r3, r5
   17888:	f853 2f8f 	ldr.w	r2, [r3, #143]!
   1788c:	60a2      	str	r2, [r4, #8]
   1788e:	889b      	ldrh	r3, [r3, #4]
   17890:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   17892:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   17896:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->periph_latency);
   17898:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
   1789c:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   1789e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   178a2:	8263      	strh	r3, [r4, #18]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   178a4:	79eb      	ldrb	r3, [r5, #7]
   178a6:	2b02      	cmp	r3, #2
   178a8:	d003      	beq.n	178b2 <ble_ll_conn_comp_event_send+0x162>
        ble_ll_hci_event_send(hci_ev);
   178aa:	4620      	mov	r0, r4
   178ac:	f001 ffb0 	bl	19810 <ble_ll_hci_event_send>
        return;
   178b0:	e7a2      	b.n	177f8 <ble_ll_conn_comp_event_send+0xa8>
                ev->mca = connsm->central_sca;
   178b2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   178b6:	7523      	strb	r3, [r4, #20]
   178b8:	e7f7      	b.n	178aa <ble_ll_conn_comp_event_send+0x15a>
	...

000178bc <ble_ll_conn_num_comp_pkts_event_send>:
{
   178bc:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   178be:	b138      	cbz	r0, 178d0 <ble_ll_conn_num_comp_pkts_event_send+0x14>
   178c0:	4604      	mov	r4, r0
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   178c2:	f7f6 fd7b 	bl	e3bc <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   178c6:	4b34      	ldr	r3, [pc, #208]	; (17998 <ble_ll_conn_num_comp_pkts_event_send+0xdc>)
   178c8:	681b      	ldr	r3, [r3, #0]
   178ca:	1ac0      	subs	r0, r0, r3
   178cc:	28ff      	cmp	r0, #255	; 0xff
   178ce:	d905      	bls.n	178dc <ble_ll_conn_num_comp_pkts_event_send+0x20>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   178d0:	4b32      	ldr	r3, [pc, #200]	; (1799c <ble_ll_conn_num_comp_pkts_event_send+0xe0>)
   178d2:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   178d4:	2600      	movs	r6, #0
    hci_ev = NULL;
   178d6:	4630      	mov	r0, r6
    ev = NULL;
   178d8:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   178da:	e035      	b.n	17948 <ble_ll_conn_num_comp_pkts_event_send+0x8c>
        if (connsm->completed_pkts) {
   178dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   178e0:	2b00      	cmp	r3, #0
   178e2:	d055      	beq.n	17990 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
            hci_ev = ble_transport_alloc_evt(0);
   178e4:	2000      	movs	r0, #0
   178e6:	f00f fd05 	bl	272f4 <ble_transport_alloc_evt>
            if (hci_ev) {
   178ea:	2800      	cmp	r0, #0
   178ec:	d050      	beq.n	17990 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   178ee:	2213      	movs	r2, #19
   178f0:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   178f2:	2201      	movs	r2, #1
   178f4:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   178f6:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   178f8:	88a2      	ldrh	r2, [r4, #4]
   178fa:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   178fe:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   17902:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   17906:	2205      	movs	r2, #5
   17908:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   1790a:	2200      	movs	r2, #0
   1790c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
                ble_ll_hci_event_send(hci_ev);
   17910:	f001 ff7e 	bl	19810 <ble_ll_hci_event_send>
        return;
   17914:	e03c      	b.n	17990 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
            if (!hci_ev) {
   17916:	b320      	cbz	r0, 17962 <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   17918:	782b      	ldrb	r3, [r5, #0]
   1791a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1791e:	88a2      	ldrh	r2, [r4, #4]
   17920:	f8a3 2001 	strh.w	r2, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   17924:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
   17928:	f8a3 2003 	strh.w	r2, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   1792c:	7843      	ldrb	r3, [r0, #1]
   1792e:	3304      	adds	r3, #4
   17930:	7043      	strb	r3, [r0, #1]
            ev->count++;
   17932:	782b      	ldrb	r3, [r5, #0]
   17934:	3301      	adds	r3, #1
   17936:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   17938:	2300      	movs	r3, #0
   1793a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (ev->count == max_handles) {
   1793e:	782b      	ldrb	r3, [r5, #0]
   17940:	2b3f      	cmp	r3, #63	; 0x3f
   17942:	d019      	beq.n	17978 <ble_ll_conn_num_comp_pkts_event_send+0xbc>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   17944:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
   17948:	b1dc      	cbz	r4, 17982 <ble_ll_conn_num_comp_pkts_event_send+0xc6>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   1794a:	79a3      	ldrb	r3, [r4, #6]
   1794c:	2b00      	cmp	r3, #0
   1794e:	d0f9      	beq.n	17944 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   17950:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   17954:	2b00      	cmp	r3, #0
   17956:	d1de      	bne.n	17916 <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   17958:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1795c:	2b00      	cmp	r3, #0
   1795e:	d1da      	bne.n	17916 <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   17960:	e7f0      	b.n	17944 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = ble_transport_alloc_evt(0);
   17962:	f00f fcc7 	bl	272f4 <ble_transport_alloc_evt>
                if (!hci_ev) {
   17966:	b160      	cbz	r0, 17982 <ble_ll_conn_num_comp_pkts_event_send+0xc6>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   17968:	2313      	movs	r3, #19
   1796a:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   1796c:	2301      	movs	r3, #1
   1796e:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   17970:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   17972:	2300      	movs	r3, #0
   17974:	7083      	strb	r3, [r0, #2]
   17976:	e7cf      	b.n	17918 <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   17978:	f001 ff4a 	bl	19810 <ble_ll_hci_event_send>
                event_sent = 1;
   1797c:	2601      	movs	r6, #1
                hci_ev = NULL;
   1797e:	2000      	movs	r0, #0
   17980:	e7e0      	b.n	17944 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   17982:	b130      	cbz	r0, 17992 <ble_ll_conn_num_comp_pkts_event_send+0xd6>
        ble_ll_hci_event_send(hci_ev);
   17984:	f001 ff44 	bl	19810 <ble_ll_hci_event_send>
   17988:	f7f6 fd18 	bl	e3bc <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   1798c:	4b02      	ldr	r3, [pc, #8]	; (17998 <ble_ll_conn_num_comp_pkts_event_send+0xdc>)
   1798e:	6018      	str	r0, [r3, #0]
}
   17990:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   17992:	2e00      	cmp	r6, #0
   17994:	d0fc      	beq.n	17990 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
   17996:	e7f7      	b.n	17988 <ble_ll_conn_num_comp_pkts_event_send+0xcc>
   17998:	200024f8 	.word	0x200024f8
   1799c:	2000232c 	.word	0x2000232c

000179a0 <ble_ll_auth_pyld_tmo_event_send>:
{
   179a0:	b510      	push	{r4, lr}
   179a2:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   179a4:	2057      	movs	r0, #87	; 0x57
   179a6:	f002 f829 	bl	199fc <ble_ll_hci_is_event_enabled>
   179aa:	b900      	cbnz	r0, 179ae <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   179ac:	bd10      	pop	{r4, pc}
        hci_ev = ble_transport_alloc_evt(0);
   179ae:	2000      	movs	r0, #0
   179b0:	f00f fca0 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   179b4:	2800      	cmp	r0, #0
   179b6:	d0f9      	beq.n	179ac <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   179b8:	2257      	movs	r2, #87	; 0x57
   179ba:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   179bc:	2202      	movs	r2, #2
   179be:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   179c0:	88a2      	ldrh	r2, [r4, #4]
   179c2:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   179c4:	f001 ff24 	bl	19810 <ble_ll_hci_event_send>
}
   179c8:	e7f0      	b.n	179ac <ble_ll_auth_pyld_tmo_event_send+0xc>

000179ca <ble_ll_disconn_comp_event_send>:
{
   179ca:	b538      	push	{r3, r4, r5, lr}
   179cc:	4605      	mov	r5, r0
   179ce:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   179d0:	2005      	movs	r0, #5
   179d2:	f002 f813 	bl	199fc <ble_ll_hci_is_event_enabled>
   179d6:	b900      	cbnz	r0, 179da <ble_ll_disconn_comp_event_send+0x10>
}
   179d8:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = ble_transport_alloc_evt(0);
   179da:	2000      	movs	r0, #0
   179dc:	f00f fc8a 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   179e0:	2800      	cmp	r0, #0
   179e2:	d0f9      	beq.n	179d8 <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   179e4:	2205      	movs	r2, #5
   179e6:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   179e8:	2204      	movs	r2, #4
   179ea:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   179ec:	2200      	movs	r2, #0
   179ee:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   179f0:	88aa      	ldrh	r2, [r5, #4]
   179f2:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   179f6:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   179f8:	f001 ff0a 	bl	19810 <ble_ll_hci_event_send>
}
   179fc:	e7ec      	b.n	179d8 <ble_ll_disconn_comp_event_send+0xe>

000179fe <ble_ll_conn_hci_read_rem_features>:
ble_ll_conn_hci_read_rem_features(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rd_rem_feat_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   179fe:	2902      	cmp	r1, #2
   17a00:	d001      	beq.n	17a06 <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17a02:	2012      	movs	r0, #18
    }

    connsm->csmflags.cfbit.pending_hci_rd_features = 1;

    return BLE_ERR_SUCCESS;
}
   17a04:	4770      	bx	lr
{
   17a06:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_by_handle(le16toh(cmd->conn_handle));
   17a08:	8800      	ldrh	r0, [r0, #0]
   17a0a:	f7fe fd4f 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17a0e:	4604      	mov	r4, r0
   17a10:	b310      	cbz	r0, 17a58 <ble_ll_conn_hci_read_rem_features+0x5a>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   17a12:	78c3      	ldrb	r3, [r0, #3]
   17a14:	f013 0f10 	tst.w	r3, #16
   17a18:	d120      	bne.n	17a5c <ble_ll_conn_hci_read_rem_features+0x5e>
    if (!connsm->csmflags.cfbit.rxd_features &&
   17a1a:	f013 0f08 	tst.w	r3, #8
   17a1e:	d10c      	bne.n	17a3a <ble_ll_conn_hci_read_rem_features+0x3c>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   17a20:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    if (!connsm->csmflags.cfbit.rxd_features &&
   17a24:	f013 0f08 	tst.w	r3, #8
   17a28:	d107      	bne.n	17a3a <ble_ll_conn_hci_read_rem_features+0x3c>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) &&
   17a2a:	79c3      	ldrb	r3, [r0, #7]
   17a2c:	2b02      	cmp	r3, #2
   17a2e:	d00a      	beq.n	17a46 <ble_ll_conn_hci_read_rem_features+0x48>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG, NULL);
   17a30:	2200      	movs	r2, #0
   17a32:	2103      	movs	r1, #3
   17a34:	4620      	mov	r0, r4
   17a36:	f000 ff69 	bl	1890c <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   17a3a:	78e3      	ldrb	r3, [r4, #3]
   17a3c:	f043 0310 	orr.w	r3, r3, #16
   17a40:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   17a42:	2000      	movs	r0, #0
}
   17a44:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_PERIPH_INIT)) {
   17a46:	f7fc ff9b 	bl	14980 <ble_ll_read_supp_features>
   17a4a:	f000 0208 	and.w	r2, r0, #8
   17a4e:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) &&
   17a50:	4313      	orrs	r3, r2
   17a52:	d1ed      	bne.n	17a30 <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   17a54:	200c      	movs	r0, #12
   17a56:	e7f5      	b.n	17a44 <ble_ll_conn_hci_read_rem_features+0x46>
        return BLE_ERR_UNK_CONN_ID;
   17a58:	2002      	movs	r0, #2
   17a5a:	e7f3      	b.n	17a44 <ble_ll_conn_hci_read_rem_features+0x46>
        return BLE_ERR_CMD_DISALLOWED;
   17a5c:	200c      	movs	r0, #12
   17a5e:	e7f1      	b.n	17a44 <ble_ll_conn_hci_read_rem_features+0x46>

00017a60 <ble_ll_conn_hci_update>:
 *
 * @return int
 */
int
ble_ll_conn_hci_update(const uint8_t *cmdbuf, uint8_t len)
{
   17a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a62:	4605      	mov	r5, r0
     * getting an UNKOWN_RSP ctrl pdu and resorting to use normal
     * connection update procedure.
     */

    /* If no connection handle exit with error */
    handle = le16toh(cmd->conn_handle);
   17a64:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17a66:	b2b8      	uxth	r0, r7
   17a68:	f7fe fd20 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17a6c:	2800      	cmp	r0, #0
   17a6e:	d057      	beq.n	17b20 <ble_ll_conn_hci_update+0xc0>
   17a70:	4604      	mov	r4, r0
        return BLE_ERR_UNK_CONN_ID;
    }

    /* Better not have this procedure ongoing! */
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   17a72:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   17a76:	f013 0f41 	tst.w	r3, #65	; 0x41
   17a7a:	d153      	bne.n	17b24 <ble_ll_conn_hci_update+0xc4>
        IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
        return BLE_ERR_CMD_DISALLOWED;
    }

    /* See if this feature is supported on both sides */
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   17a7c:	f890 103b 	ldrb.w	r1, [r0, #59]	; 0x3b
   17a80:	f011 0602 	ands.w	r6, r1, #2
   17a84:	d104      	bne.n	17a90 <ble_ll_conn_hci_update+0x30>
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   17a86:	79c3      	ldrb	r3, [r0, #7]
   17a88:	2b02      	cmp	r3, #2
   17a8a:	d102      	bne.n	17a92 <ble_ll_conn_hci_update+0x32>
            return BLE_ERR_UNSUPP_REM_FEATURE;
   17a8c:	251a      	movs	r5, #26
   17a8e:	e008      	b.n	17aa2 <ble_ll_conn_hci_update+0x42>
        }
#endif
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
    } else {
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   17a90:	2606      	movs	r6, #6
     * If we are a peripheral and the central has initiated the procedure already
     * we should deny the peripheral request for now. If we are a central and the
     * peripheral has initiated the procedure, we need to send a reject to the
     * peripheral.
     */
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   17a92:	7823      	ldrb	r3, [r4, #0]
   17a94:	f013 0f40 	tst.w	r3, #64	; 0x40
   17a98:	d00f      	beq.n	17aba <ble_ll_conn_hci_update+0x5a>
        switch (connsm->conn_role) {
   17a9a:	79e3      	ldrb	r3, [r4, #7]
   17a9c:	2b02      	cmp	r3, #2
   17a9e:	d102      	bne.n	17aa6 <ble_ll_conn_hci_update+0x46>
                                        BLE_ERR_LMP_COLLISION);
            break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
        case BLE_LL_CONN_ROLE_PERIPHERAL:
            return BLE_ERR_LMP_COLLISION;
   17aa0:	2523      	movs	r5, #35	; 0x23
        /* Start the control procedure */
        ble_ll_ctrl_proc_start(connsm, ctrl_proc, NULL);
    }

    return rc;
}
   17aa2:	4628      	mov	r0, r5
   17aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            BLE_LL_ASSERT(0);
   17aa6:	f7f4 fb79 	bl	c19c <hal_debugger_connected>
   17aaa:	b100      	cbz	r0, 17aae <ble_ll_conn_hci_update+0x4e>
   17aac:	be01      	bkpt	0x0001
   17aae:	2300      	movs	r3, #0
   17ab0:	461a      	mov	r2, r3
   17ab2:	4619      	mov	r1, r3
   17ab4:	4618      	mov	r0, r3
   17ab6:	f7f5 f875 	bl	cba4 <__assert_func>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   17aba:	7863      	ldrb	r3, [r4, #1]
   17abc:	f013 0f10 	tst.w	r3, #16
   17ac0:	d002      	beq.n	17ac8 <ble_ll_conn_hci_update+0x68>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   17ac2:	79e3      	ldrb	r3, [r4, #7]
   17ac4:	2b02      	cmp	r3, #2
   17ac6:	d02f      	beq.n	17b28 <ble_ll_conn_hci_update+0xc8>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   17ac8:	886b      	ldrh	r3, [r5, #2]
   17aca:	b298      	uxth	r0, r3
   17acc:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   17ad0:	88ab      	ldrh	r3, [r5, #4]
   17ad2:	b299      	uxth	r1, r3
   17ad4:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   17ad8:	88eb      	ldrh	r3, [r5, #6]
   17ada:	b29a      	uxth	r2, r3
   17adc:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   17ae0:	f8b5 c008 	ldrh.w	ip, [r5, #8]
   17ae4:	fa1f f38c 	uxth.w	r3, ip
   17ae8:	f8a4 c170 	strh.w	ip, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   17aec:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
   17af0:	fa1f fe8c 	uxth.w	lr, ip
   17af4:	f8a4 c172 	strh.w	ip, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   17af8:	89ad      	ldrh	r5, [r5, #12]
   17afa:	fa1f fc85 	uxth.w	ip, r5
   17afe:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   17b02:	45e6      	cmp	lr, ip
   17b04:	d812      	bhi.n	17b2c <ble_ll_conn_hci_update+0xcc>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   17b06:	f7ff fdc5 	bl	17694 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   17b0a:	4605      	mov	r5, r0
   17b0c:	2800      	cmp	r0, #0
   17b0e:	d1c8      	bne.n	17aa2 <ble_ll_conn_hci_update+0x42>
        hcu->handle = handle;
   17b10:	f8a4 7168 	strh.w	r7, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc, NULL);
   17b14:	2200      	movs	r2, #0
   17b16:	4631      	mov	r1, r6
   17b18:	4620      	mov	r0, r4
   17b1a:	f000 fef7 	bl	1890c <ble_ll_ctrl_proc_start>
   17b1e:	e7c0      	b.n	17aa2 <ble_ll_conn_hci_update+0x42>
        return BLE_ERR_UNK_CONN_ID;
   17b20:	2502      	movs	r5, #2
   17b22:	e7be      	b.n	17aa2 <ble_ll_conn_hci_update+0x42>
        return BLE_ERR_CMD_DISALLOWED;
   17b24:	250c      	movs	r5, #12
   17b26:	e7bc      	b.n	17aa2 <ble_ll_conn_hci_update+0x42>
            return BLE_ERR_DIFF_TRANS_COLL;
   17b28:	252a      	movs	r5, #42	; 0x2a
   17b2a:	e7ba      	b.n	17aa2 <ble_ll_conn_hci_update+0x42>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17b2c:	2512      	movs	r5, #18
   17b2e:	e7b8      	b.n	17aa2 <ble_ll_conn_hci_update+0x42>

00017b30 <ble_ll_conn_hci_param_rr>:

int
ble_ll_conn_hci_param_rr(const uint8_t *cmdbuf, uint8_t len,
                         uint8_t *rspbuf, uint8_t *rsplen)
{
   17b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t rsp_opcode;
    uint16_t handle;
    struct os_mbuf *om;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   17b34:	290e      	cmp	r1, #14
   17b36:	d003      	beq.n	17b40 <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17b38:	2412      	movs	r4, #18
done:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   17b3a:	4620      	mov	r0, r4
   17b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17b40:	4604      	mov	r4, r0
   17b42:	4616      	mov	r6, r2
   17b44:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   17b46:	8807      	ldrh	r7, [r0, #0]
   17b48:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   17b4c:	f7fc ff18 	bl	14980 <ble_ll_read_supp_features>
   17b50:	f000 0202 	and.w	r2, r0, #2
   17b54:	2300      	movs	r3, #0
   17b56:	4313      	orrs	r3, r2
   17b58:	d104      	bne.n	17b64 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   17b5a:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   17b5c:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   17b5e:	2302      	movs	r3, #2
   17b60:	702b      	strb	r3, [r5, #0]
    return rc;
   17b62:	e7ea      	b.n	17b3a <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_by_handle(handle);
   17b64:	4640      	mov	r0, r8
   17b66:	f7fe fca1 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17b6a:	4680      	mov	r8, r0
   17b6c:	b388      	cbz	r0, 17bd2 <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   17b6e:	4601      	mov	r1, r0
   17b70:	4620      	mov	r0, r4
   17b72:	f7ff fdba 	bl	176ea <ble_ll_conn_process_conn_params>
   17b76:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   17b78:	f898 3000 	ldrb.w	r3, [r8]
   17b7c:	f013 0f40 	tst.w	r3, #64	; 0x40
   17b80:	d0ec      	beq.n	17b5c <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   17b82:	b9c8      	cbnz	r0, 17bb8 <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   17b84:	2110      	movs	r1, #16
   17b86:	201b      	movs	r0, #27
   17b88:	f7f6 f91b 	bl	ddc2 <os_msys_get_pkthdr>
            if (om) {
   17b8c:	4681      	mov	r9, r0
   17b8e:	b1c8      	cbz	r0, 17bc4 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   17b90:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   17b94:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   17b98:	4651      	mov	r1, sl
   17b9a:	4640      	mov	r0, r8
   17b9c:	f000 fd99 	bl	186d2 <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   17ba0:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   17ba4:	4b0c      	ldr	r3, [pc, #48]	; (17bd8 <ble_ll_conn_hci_param_rr+0xa8>)
   17ba6:	5c1b      	ldrb	r3, [r3, r0]
   17ba8:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   17baa:	b2db      	uxtb	r3, r3
   17bac:	2203      	movs	r2, #3
   17bae:	4649      	mov	r1, r9
   17bb0:	4640      	mov	r0, r8
   17bb2:	f7ff fb57 	bl	17264 <ble_ll_conn_enqueue_pkt>
   17bb6:	e005      	b.n	17bc4 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   17bb8:	223b      	movs	r2, #59	; 0x3b
   17bba:	f898 1034 	ldrb.w	r1, [r8, #52]	; 0x34
   17bbe:	4640      	mov	r0, r8
   17bc0:	f001 fa3e 	bl	19040 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   17bc4:	f898 3000 	ldrb.w	r3, [r8]
   17bc8:	f36f 1386 	bfc	r3, #6, #1
   17bcc:	f888 3000 	strb.w	r3, [r8]
   17bd0:	e7c4      	b.n	17b5c <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   17bd2:	2402      	movs	r4, #2
   17bd4:	e7c2      	b.n	17b5c <ble_ll_conn_hci_param_rr+0x2c>
   17bd6:	bf00      	nop
   17bd8:	0002dd1c 	.word	0x0002dd1c

00017bdc <ble_ll_conn_hci_param_nrr>:
    struct ble_hci_le_rem_conn_params_nrr_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   17bdc:	2903      	cmp	r1, #3
   17bde:	d001      	beq.n	17be4 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17be0:	2012      	movs	r0, #18
done:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   17be2:	4770      	bx	lr
{
   17be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17be8:	4606      	mov	r6, r0
   17bea:	4615      	mov	r5, r2
   17bec:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   17bee:	8807      	ldrh	r7, [r0, #0]
   17bf0:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   17bf4:	f7fc fec4 	bl	14980 <ble_ll_read_supp_features>
   17bf8:	f000 0202 	and.w	r2, r0, #2
   17bfc:	2300      	movs	r3, #0
   17bfe:	4313      	orrs	r3, r2
   17c00:	d105      	bne.n	17c0e <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   17c02:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   17c04:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   17c06:	2302      	movs	r3, #2
   17c08:	7023      	strb	r3, [r4, #0]
}
   17c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_by_handle(handle);
   17c0e:	4640      	mov	r0, r8
   17c10:	f7fe fc4c 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17c14:	4680      	mov	r8, r0
   17c16:	b190      	cbz	r0, 17c3e <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   17c18:	7803      	ldrb	r3, [r0, #0]
   17c1a:	f013 0f40 	tst.w	r3, #64	; 0x40
   17c1e:	d101      	bne.n	17c24 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   17c20:	2000      	movs	r0, #0
   17c22:	e7ef      	b.n	17c04 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   17c24:	78b2      	ldrb	r2, [r6, #2]
   17c26:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
   17c2a:	f001 fa09 	bl	19040 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   17c2e:	f898 3000 	ldrb.w	r3, [r8]
   17c32:	f36f 1386 	bfc	r3, #6, #1
   17c36:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   17c3a:	2000      	movs	r0, #0
   17c3c:	e7e2      	b.n	17c04 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   17c3e:	2002      	movs	r0, #2
   17c40:	e7e0      	b.n	17c04 <ble_ll_conn_hci_param_nrr+0x28>

00017c42 <ble_ll_conn_hci_disconnect_cmd>:
 *
 * @return int
 */
int
ble_ll_conn_hci_disconnect_cmd(const struct ble_hci_lc_disconnect_cp *cmd)
{
   17c42:	b510      	push	{r4, lr}
   17c44:	4604      	mov	r4, r0
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   17c46:	8800      	ldrh	r0, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   17c48:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   17c4c:	d23b      	bcs.n	17cc6 <ble_ll_conn_hci_disconnect_cmd+0x84>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   17c4e:	78a3      	ldrb	r3, [r4, #2]
   17c50:	2b29      	cmp	r3, #41	; 0x29
   17c52:	d819      	bhi.n	17c88 <ble_ll_conn_hci_disconnect_cmd+0x46>
   17c54:	2b05      	cmp	r3, #5
   17c56:	d338      	bcc.n	17cca <ble_ll_conn_hci_disconnect_cmd+0x88>
   17c58:	3b05      	subs	r3, #5
   17c5a:	2b24      	cmp	r3, #36	; 0x24
   17c5c:	d837      	bhi.n	17cce <ble_ll_conn_hci_disconnect_cmd+0x8c>
   17c5e:	e8df f003 	tbb	[pc, r3]
   17c62:	3617      	.short	0x3617
   17c64:	36363636 	.word	0x36363636
   17c68:	36363636 	.word	0x36363636
   17c6c:	36363636 	.word	0x36363636
   17c70:	36171717 	.word	0x36171717
   17c74:	17363636 	.word	0x17363636
   17c78:	36363636 	.word	0x36363636
   17c7c:	36363636 	.word	0x36363636
   17c80:	36363636 	.word	0x36363636
   17c84:	3636      	.short	0x3636
   17c86:	17          	.byte	0x17
   17c87:	00          	.byte	0x00
   17c88:	2b3b      	cmp	r3, #59	; 0x3b
   17c8a:	d001      	beq.n	17c90 <ble_ll_conn_hci_disconnect_cmd+0x4e>
   17c8c:	2012      	movs	r0, #18
            break;
        }
    }

    return rc;
}
   17c8e:	bd10      	pop	{r4, pc}
            connsm = ble_ll_conn_find_by_handle(handle);
   17c90:	f7fe fc0c 	bl	164ac <ble_ll_conn_find_by_handle>
            if (connsm) {
   17c94:	b1e8      	cbz	r0, 17cd2 <ble_ll_conn_hci_disconnect_cmd+0x90>
                if (connsm->disconnect_reason) {
   17c96:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
   17c9a:	b9e2      	cbnz	r2, 17cd6 <ble_ll_conn_hci_disconnect_cmd+0x94>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   17c9c:	f990 2000 	ldrsb.w	r2, [r0]
   17ca0:	2a00      	cmp	r2, #0
   17ca2:	db06      	blt.n	17cb2 <ble_ll_conn_hci_disconnect_cmd+0x70>
                    connsm->disconnect_reason = cmd->reason;
   17ca4:	78a2      	ldrb	r2, [r4, #2]
   17ca6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
                    ble_ll_ctrl_terminate_start(connsm);
   17caa:	f000 fdfd 	bl	188a8 <ble_ll_ctrl_terminate_start>
                    rc = BLE_ERR_SUCCESS;
   17cae:	2000      	movs	r0, #0
   17cb0:	e7ed      	b.n	17c8e <ble_ll_conn_hci_disconnect_cmd+0x4c>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   17cb2:	f7f4 fa73 	bl	c19c <hal_debugger_connected>
   17cb6:	b100      	cbz	r0, 17cba <ble_ll_conn_hci_disconnect_cmd+0x78>
   17cb8:	be01      	bkpt	0x0001
   17cba:	2300      	movs	r3, #0
   17cbc:	461a      	mov	r2, r3
   17cbe:	4619      	mov	r1, r3
   17cc0:	4618      	mov	r0, r3
   17cc2:	f7f4 ff6f 	bl	cba4 <__assert_func>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   17cc6:	2012      	movs	r0, #18
   17cc8:	e7e1      	b.n	17c8e <ble_ll_conn_hci_disconnect_cmd+0x4c>
        switch (cmd->reason) {
   17cca:	2012      	movs	r0, #18
   17ccc:	e7df      	b.n	17c8e <ble_ll_conn_hci_disconnect_cmd+0x4c>
   17cce:	2012      	movs	r0, #18
   17cd0:	e7dd      	b.n	17c8e <ble_ll_conn_hci_disconnect_cmd+0x4c>
                rc = BLE_ERR_UNK_CONN_ID;
   17cd2:	2002      	movs	r0, #2
   17cd4:	e7db      	b.n	17c8e <ble_ll_conn_hci_disconnect_cmd+0x4c>
                    rc = BLE_ERR_CMD_DISALLOWED;
   17cd6:	200c      	movs	r0, #12
    return rc;
   17cd8:	e7d9      	b.n	17c8e <ble_ll_conn_hci_disconnect_cmd+0x4c>

00017cda <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   17cda:	2902      	cmp	r1, #2
   17cdc:	d001      	beq.n	17ce2 <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17cde:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   17ce0:	4770      	bx	lr
{
   17ce2:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_by_handle(le16toh(cmd->conn_handle));
   17ce4:	8800      	ldrh	r0, [r0, #0]
   17ce6:	f7fe fbe1 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17cea:	b1a0      	cbz	r0, 17d16 <ble_ll_conn_hci_rd_rem_ver_cmd+0x3c>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   17cec:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
   17cf0:	f012 0f10 	tst.w	r2, #16
   17cf4:	d111      	bne.n	17d1a <ble_ll_conn_hci_rd_rem_ver_cmd+0x40>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   17cf6:	7841      	ldrb	r1, [r0, #1]
   17cf8:	f011 0f04 	tst.w	r1, #4
   17cfc:	d005      	beq.n	17d0a <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   17cfe:	f042 0210 	orr.w	r2, r2, #16
   17d02:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
    return BLE_ERR_SUCCESS;
   17d06:	2000      	movs	r0, #0
}
   17d08:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG, NULL);
   17d0a:	2200      	movs	r2, #0
   17d0c:	2104      	movs	r1, #4
   17d0e:	f000 fdfd 	bl	1890c <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   17d12:	2000      	movs	r0, #0
   17d14:	e7f8      	b.n	17d08 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   17d16:	2002      	movs	r0, #2
   17d18:	e7f6      	b.n	17d08 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   17d1a:	200c      	movs	r0, #12
   17d1c:	e7f4      	b.n	17d08 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

00017d1e <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   17d1e:	2902      	cmp	r1, #2
   17d20:	d001      	beq.n	17d26 <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17d22:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   17d24:	4770      	bx	lr
{
   17d26:	b538      	push	{r3, r4, r5, lr}
   17d28:	4614      	mov	r4, r2
   17d2a:	461d      	mov	r5, r3
    rsp->handle = cmd->handle;
   17d2c:	8803      	ldrh	r3, [r0, #0]
   17d2e:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_by_handle(le16toh(cmd->handle));
   17d30:	8800      	ldrh	r0, [r0, #0]
   17d32:	f7fe fbbb 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17d36:	b130      	cbz	r0, 17d46 <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   17d38:	f990 3008 	ldrsb.w	r3, [r0, #8]
   17d3c:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   17d3e:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   17d40:	2303      	movs	r3, #3
   17d42:	702b      	strb	r3, [r5, #0]
}
   17d44:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   17d46:	237f      	movs	r3, #127	; 0x7f
   17d48:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   17d4a:	2002      	movs	r0, #2
   17d4c:	e7f8      	b.n	17d40 <ble_ll_conn_hci_rd_rssi+0x22>

00017d4e <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   17d4e:	2902      	cmp	r1, #2
   17d50:	d001      	beq.n	17d56 <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17d52:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   17d54:	4770      	bx	lr
{
   17d56:	b570      	push	{r4, r5, r6, lr}
   17d58:	4614      	mov	r4, r2
   17d5a:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   17d5c:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17d5e:	b2b0      	uxth	r0, r6
   17d60:	f7fe fba4 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17d64:	4602      	mov	r2, r0
   17d66:	b170      	cbz	r0, 17d86 <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   17d68:	7843      	ldrb	r3, [r0, #1]
   17d6a:	f013 0f10 	tst.w	r3, #16
   17d6e:	d010      	beq.n	17d92 <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   17d70:	f852 3f21 	ldr.w	r3, [r2, #33]!
   17d74:	f8c4 3002 	str.w	r3, [r4, #2]
   17d78:	7913      	ldrb	r3, [r2, #4]
   17d7a:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   17d7c:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   17d7e:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   17d80:	2307      	movs	r3, #7
   17d82:	702b      	strb	r3, [r5, #0]
}
   17d84:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   17d86:	2200      	movs	r2, #0
   17d88:	f8c4 2002 	str.w	r2, [r4, #2]
   17d8c:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   17d8e:	2002      	movs	r0, #2
   17d90:	e7f5      	b.n	17d7e <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   17d92:	f852 3f1c 	ldr.w	r3, [r2, #28]!
   17d96:	f8c4 3002 	str.w	r3, [r4, #2]
   17d9a:	7913      	ldrb	r3, [r2, #4]
   17d9c:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   17d9e:	2000      	movs	r0, #0
   17da0:	e7ed      	b.n	17d7e <ble_ll_conn_hci_rd_chan_map+0x30>

00017da2 <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   17da2:	2905      	cmp	r1, #5
   17da4:	d001      	beq.n	17daa <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17da6:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   17da8:	4770      	bx	lr
{
   17daa:	b510      	push	{r4, lr}
   17dac:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   17dae:	f003 f906 	bl	1afbe <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   17db2:	2801      	cmp	r0, #1
   17db4:	d908      	bls.n	17dc8 <ble_ll_conn_hci_set_chan_class+0x26>
   17db6:	7923      	ldrb	r3, [r4, #4]
   17db8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   17dbc:	d106      	bne.n	17dcc <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   17dbe:	4621      	mov	r1, r4
   17dc0:	f7ff fac0 	bl	17344 <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   17dc4:	2000      	movs	r0, #0
}
   17dc6:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17dc8:	2012      	movs	r0, #18
   17dca:	e7fc      	b.n	17dc6 <ble_ll_conn_hci_set_chan_class+0x24>
   17dcc:	2012      	movs	r0, #18
   17dce:	e7fa      	b.n	17dc6 <ble_ll_conn_hci_set_chan_class+0x24>

00017dd0 <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   17dd0:	2906      	cmp	r1, #6
   17dd2:	d001      	beq.n	17dd8 <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17dd4:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   17dd6:	4770      	bx	lr
{
   17dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17ddc:	4604      	mov	r4, r0
   17dde:	4616      	mov	r6, r2
   17de0:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   17de2:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17de4:	b2b8      	uxth	r0, r7
   17de6:	f7fe fb61 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17dea:	4680      	mov	r8, r0
   17dec:	b320      	cbz	r0, 17e38 <ble_ll_conn_hci_set_data_len+0x68>
    txoctets = le16toh(cmd->tx_octets);
   17dee:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   17df2:	88a4      	ldrh	r4, [r4, #4]
   17df4:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   17df8:	4648      	mov	r0, r9
   17dfa:	f7fc fc83 	bl	14704 <ble_ll_chk_txrx_octets>
   17dfe:	b928      	cbnz	r0, 17e0c <ble_ll_conn_hci_set_data_len+0x3c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   17e00:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   17e02:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   17e04:	2302      	movs	r3, #2
   17e06:	702b      	strb	r3, [r5, #0]
}
   17e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        !ble_ll_chk_txrx_time(txtime)) {
   17e0c:	4650      	mov	r0, sl
   17e0e:	f7fc fc81 	bl	14714 <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   17e12:	2800      	cmp	r0, #0
   17e14:	d0f4      	beq.n	17e00 <ble_ll_conn_hci_set_data_len+0x30>
    if (connsm->max_tx_time != txtime ||
   17e16:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   17e1a:	4553      	cmp	r3, sl
   17e1c:	d103      	bne.n	17e26 <ble_ll_conn_hci_set_data_len+0x56>
        connsm->max_tx_octets != txoctets) {
   17e1e:	f898 3009 	ldrb.w	r3, [r8, #9]
    if (connsm->max_tx_time != txtime ||
   17e22:	454b      	cmp	r3, r9
   17e24:	d00a      	beq.n	17e3c <ble_ll_conn_hci_set_data_len+0x6c>
        connsm->max_tx_time = txtime;
   17e26:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   17e2a:	f888 9009 	strb.w	r9, [r8, #9]
        ble_ll_ctrl_initiate_dle(connsm);
   17e2e:	4640      	mov	r0, r8
   17e30:	f000 fd94 	bl	1895c <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   17e34:	2000      	movs	r0, #0
   17e36:	e7e4      	b.n	17e02 <ble_ll_conn_hci_set_data_len+0x32>
        rc = BLE_ERR_UNK_CONN_ID;
   17e38:	2002      	movs	r0, #2
   17e3a:	e7e2      	b.n	17e02 <ble_ll_conn_hci_set_data_len+0x32>
    rc = BLE_ERR_SUCCESS;
   17e3c:	2000      	movs	r0, #0
   17e3e:	e7e0      	b.n	17e02 <ble_ll_conn_hci_set_data_len+0x32>

00017e40 <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   17e40:	2912      	cmp	r1, #18
   17e42:	d001      	beq.n	17e48 <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17e44:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   17e46:	4770      	bx	lr
{
   17e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e4c:	4606      	mov	r6, r0
   17e4e:	4615      	mov	r5, r2
   17e50:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   17e52:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17e54:	b2b8      	uxth	r0, r7
   17e56:	f7fe fb29 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17e5a:	4680      	mov	r8, r0
   17e5c:	b1b8      	cbz	r0, 17e8e <ble_ll_conn_hci_le_ltk_reply+0x4e>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   17e5e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   17e62:	2b09      	cmp	r3, #9
   17e64:	d005      	beq.n	17e72 <ble_ll_conn_hci_le_ltk_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   17e66:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   17e68:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   17e6a:	2302      	movs	r3, #2
   17e6c:	7023      	strb	r3, [r4, #0]
}
   17e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   17e72:	2210      	movs	r2, #16
   17e74:	1cb1      	adds	r1, r6, #2
   17e76:	f500 709c 	add.w	r0, r0, #312	; 0x138
   17e7a:	f012 fee5 	bl	2ac48 <swap_buf>
    ble_ll_calc_session_key(connsm);
   17e7e:	4640      	mov	r0, r8
   17e80:	f000 fbb2 	bl	185e8 <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   17e84:	4640      	mov	r0, r8
   17e86:	f000 fc03 	bl	18690 <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   17e8a:	2000      	movs	r0, #0
   17e8c:	e7ec      	b.n	17e68 <ble_ll_conn_hci_le_ltk_reply+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   17e8e:	2002      	movs	r0, #2
   17e90:	e7ea      	b.n	17e68 <ble_ll_conn_hci_le_ltk_reply+0x28>

00017e92 <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   17e92:	2902      	cmp	r1, #2
   17e94:	d001      	beq.n	17e9a <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17e96:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   17e98:	4770      	bx	lr
{
   17e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17e9c:	4615      	mov	r5, r2
   17e9e:	461c      	mov	r4, r3
    handle = le16toh(cmd->conn_handle);
   17ea0:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17ea2:	b2b0      	uxth	r0, r6
   17ea4:	f7fe fb02 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17ea8:	4607      	mov	r7, r0
   17eaa:	b188      	cbz	r0, 17ed0 <ble_ll_conn_hci_le_ltk_neg_reply+0x3e>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   17eac:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   17eb0:	2b09      	cmp	r3, #9
   17eb2:	d004      	beq.n	17ebe <ble_ll_conn_hci_le_ltk_neg_reply+0x2c>
        rc = BLE_ERR_CMD_DISALLOWED;
   17eb4:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   17eb6:	802e      	strh	r6, [r5, #0]
    *rsplen = sizeof(*rsp);
   17eb8:	2302      	movs	r3, #2
   17eba:	7023      	strb	r3, [r4, #0]
}
   17ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   17ebe:	2206      	movs	r2, #6
   17ec0:	2103      	movs	r1, #3
   17ec2:	f001 f8bd 	bl	19040 <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   17ec6:	230a      	movs	r3, #10
   17ec8:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   17ecc:	2000      	movs	r0, #0
   17ece:	e7f2      	b.n	17eb6 <ble_ll_conn_hci_le_ltk_neg_reply+0x24>
        rc = BLE_ERR_UNK_CONN_ID;
   17ed0:	2002      	movs	r0, #2
   17ed2:	e7f0      	b.n	17eb6 <ble_ll_conn_hci_le_ltk_neg_reply+0x24>

00017ed4 <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   17ed4:	2902      	cmp	r1, #2
   17ed6:	d001      	beq.n	17edc <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17ed8:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   17eda:	4770      	bx	lr
{
   17edc:	b570      	push	{r4, r5, r6, lr}
   17ede:	4614      	mov	r4, r2
   17ee0:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   17ee2:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17ee4:	b2b0      	uxth	r0, r6
   17ee6:	f7fe fae1 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17eea:	b138      	cbz	r0, 17efc <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   17eec:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
   17ef0:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   17ef2:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   17ef4:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   17ef6:	2304      	movs	r3, #4
   17ef8:	702b      	strb	r3, [r5, #0]
}
   17efa:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   17efc:	2300      	movs	r3, #0
   17efe:	70a3      	strb	r3, [r4, #2]
   17f00:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   17f02:	2002      	movs	r0, #2
   17f04:	e7f6      	b.n	17ef4 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>
	...

00017f08 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   17f08:	2904      	cmp	r1, #4
   17f0a:	d001      	beq.n	17f10 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17f0c:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   17f0e:	4770      	bx	lr
{
   17f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f12:	4604      	mov	r4, r0
   17f14:	4616      	mov	r6, r2
   17f16:	461d      	mov	r5, r3
    handle = le16toh(cmd->conn_handle);
   17f18:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_by_handle(handle);
   17f1a:	b2b8      	uxth	r0, r7
   17f1c:	f7fe fac6 	bl	164ac <ble_ll_conn_find_by_handle>
    if (!connsm) {
   17f20:	4602      	mov	r2, r0
   17f22:	b1d8      	cbz	r0, 17f5c <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   17f24:	8860      	ldrh	r0, [r4, #2]
   17f26:	b284      	uxth	r4, r0
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   17f28:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
        min_tmo *= (connsm->periph_latency + 1);
   17f2c:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
   17f30:	fb03 1301 	mla	r3, r3, r1, r1
   17f34:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17f38:	fb01 f103 	mul.w	r1, r1, r3
        min_tmo /= 10000;
   17f3c:	4b0c      	ldr	r3, [pc, #48]	; (17f70 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   17f3e:	fba3 3101 	umull	r3, r1, r3, r1
        if (tmo < min_tmo) {
   17f42:	ebb4 3f51 	cmp.w	r4, r1, lsr #13
   17f46:	d30b      	bcc.n	17f60 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   17f48:	f8a2 004e 	strh.w	r0, [r2, #78]	; 0x4e
   17f4c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   17f50:	b15b      	cbz	r3, 17f6a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   17f52:	4610      	mov	r0, r2
   17f54:	f7fe fd18 	bl	16988 <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   17f58:	2000      	movs	r0, #0
   17f5a:	e002      	b.n	17f62 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   17f5c:	2002      	movs	r0, #2
   17f5e:	e000      	b.n	17f62 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   17f60:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   17f62:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   17f64:	2302      	movs	r3, #2
   17f66:	702b      	strb	r3, [r5, #0]
}
   17f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   17f6a:	2000      	movs	r0, #0
   17f6c:	e7f9      	b.n	17f62 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   17f6e:	bf00      	nop
   17f70:	d1b71759 	.word	0xd1b71759

00017f74 <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   17f74:	2801      	cmp	r0, #1
   17f76:	d010      	beq.n	17f9a <ble_ll_ctrl_enc_allowed_pdu+0x26>
   17f78:	2803      	cmp	r0, #3
   17f7a:	d111      	bne.n	17fa0 <ble_ll_ctrl_enc_allowed_pdu+0x2c>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   17f7c:	3a02      	subs	r2, #2
   17f7e:	2a0f      	cmp	r2, #15
   17f80:	d809      	bhi.n	17f96 <ble_ll_ctrl_enc_allowed_pdu+0x22>
   17f82:	e8df f002 	tbb	[pc, r2]
   17f86:	0f0f      	.short	0x0f0f
   17f88:	080f0f0f 	.word	0x080f0f0f
   17f8c:	0f0f0808 	.word	0x0f0f0808
   17f90:	08080f08 	.word	0x08080f08
   17f94:	0f08      	.short	0x0f08
    switch (llid) {
   17f96:	2000      	movs	r0, #0
   17f98:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   17f9a:	b129      	cbz	r1, 17fa8 <ble_ll_ctrl_enc_allowed_pdu+0x34>
    allowed = 0;
   17f9c:	2000      	movs	r0, #0
   17f9e:	4770      	bx	lr
    switch (llid) {
   17fa0:	2000      	movs	r0, #0
   17fa2:	4770      	bx	lr
            allowed = 1;
   17fa4:	2001      	movs	r0, #1
   17fa6:	4770      	bx	lr
            /* Empty PDUs are allowed */
            allowed = 1;
   17fa8:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   17faa:	4770      	bx	lr

00017fac <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if (CONN_IS_PERIPHERAL(connsm) &&
   17fac:	79c3      	ldrb	r3, [r0, #7]
   17fae:	2b02      	cmp	r3, #2
   17fb0:	d001      	beq.n	17fb6 <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   17fb2:	2007      	movs	r0, #7
   17fb4:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   17fb6:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if (CONN_IS_PERIPHERAL(connsm) &&
   17fba:	2b02      	cmp	r3, #2
   17fbc:	d001      	beq.n	17fc2 <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   17fbe:	2007      	movs	r0, #7
   17fc0:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   17fc2:	200b      	movs	r0, #11
    }

    return rc;
}
   17fc4:	4770      	bx	lr

00017fc6 <ble_ll_ctrl_start_rsp_timer>:
{
   17fc6:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   17fc8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   17fcc:	30b8      	adds	r0, #184	; 0xb8
   17fce:	f7f4 ffc3 	bl	cf58 <os_callout_reset>
}
   17fd2:	bd08      	pop	{r3, pc}

00017fd4 <ble_ll_ctrl_rx_start_enc_req>:
{
   17fd4:	b508      	push	{r3, lr}
    switch (connsm->conn_role) {
   17fd6:	79c3      	ldrb	r3, [r0, #7]
   17fd8:	2b02      	cmp	r3, #2
   17fda:	d101      	bne.n	17fe0 <ble_ll_ctrl_rx_start_enc_req+0xc>
}
   17fdc:	2007      	movs	r0, #7
   17fde:	bd08      	pop	{r3, pc}
        BLE_LL_ASSERT(0);
   17fe0:	f7f4 f8dc 	bl	c19c <hal_debugger_connected>
   17fe4:	b100      	cbz	r0, 17fe8 <ble_ll_ctrl_rx_start_enc_req+0x14>
   17fe6:	be01      	bkpt	0x0001
   17fe8:	2300      	movs	r3, #0
   17fea:	461a      	mov	r2, r3
   17fec:	4619      	mov	r1, r3
   17fee:	4618      	mov	r0, r3
   17ff0:	f7f4 fdd8 	bl	cba4 <__assert_func>

00017ff4 <ble_ll_ctrl_rx_pause_enc_rsp>:
 *
 * @return uint8_t
 */
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
   17ff4:	b508      	push	{r3, lr}
    int rc;

    switch (connsm->conn_role) {
   17ff6:	79c3      	ldrb	r3, [r0, #7]
   17ff8:	2b02      	cmp	r3, #2
   17ffa:	d10a      	bne.n	18012 <ble_ll_ctrl_rx_pause_enc_rsp+0x1e>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
        break;
#endif
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    case BLE_LL_CONN_ROLE_PERIPHERAL:
        if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   17ffc:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   18000:	2b05      	cmp	r3, #5
   18002:	d001      	beq.n	18008 <ble_ll_ctrl_rx_pause_enc_rsp+0x14>
                 * From this moment encryption is paused.
                 */
                rc = BLE_ERR_MAX;
                connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
            } else {
                rc = BLE_LL_CTRL_UNKNOWN_RSP;
   18004:	2007      	movs	r0, #7
        BLE_LL_ASSERT(0);
        break;
    }

    return rc;
}
   18006:	bd08      	pop	{r3, pc}
                connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   18008:	2306      	movs	r3, #6
   1800a:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
                rc = BLE_ERR_MAX;
   1800e:	20ff      	movs	r0, #255	; 0xff
   18010:	e7f9      	b.n	18006 <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
        BLE_LL_ASSERT(0);
   18012:	f7f4 f8c3 	bl	c19c <hal_debugger_connected>
   18016:	b100      	cbz	r0, 1801a <ble_ll_ctrl_rx_pause_enc_rsp+0x26>
   18018:	be01      	bkpt	0x0001
   1801a:	2300      	movs	r3, #0
   1801c:	461a      	mov	r2, r3
   1801e:	4619      	mov	r1, r3
   18020:	4618      	mov	r0, r3
   18022:	f7f4 fdbf 	bl	cba4 <__assert_func>

00018026 <ble_ll_ctrl_conn_param_pdu_make>:
 *             of the data.
 */
static void
ble_ll_ctrl_conn_param_pdu_make(struct ble_ll_conn_sm *connsm, uint8_t *dptr,
                                struct ble_ll_conn_params *req)
{
   18026:	b570      	push	{r4, r5, r6, lr}
   18028:	4605      	mov	r5, r0
   1802a:	460c      	mov	r4, r1
    uint16_t offset;
    struct hci_conn_update *hcu;

    /* If we were passed in a request, we use the parameters from the request */
    if (req) {
   1802c:	2a00      	cmp	r2, #0
   1802e:	d03d      	beq.n	180ac <ble_ll_ctrl_conn_param_pdu_make+0x86>
   18030:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   18032:	8811      	ldrh	r1, [r2, #0]
   18034:	4620      	mov	r0, r4
   18036:	f012 fdaf 	bl	2ab98 <put_le16>
        put_le16(dptr + 2, req->interval_max);
   1803a:	8871      	ldrh	r1, [r6, #2]
   1803c:	1ca0      	adds	r0, r4, #2
   1803e:	f012 fdab 	bl	2ab98 <put_le16>
        put_le16(dptr + 4, req->latency);
   18042:	88b1      	ldrh	r1, [r6, #4]
   18044:	1d20      	adds	r0, r4, #4
   18046:	f012 fda7 	bl	2ab98 <put_le16>
        put_le16(dptr + 6, req->timeout);
   1804a:	88f1      	ldrh	r1, [r6, #6]
   1804c:	1da0      	adds	r0, r4, #6
   1804e:	f012 fda3 	bl	2ab98 <put_le16>
     * other this value should be set to non-zero. I think this
     * applies only when an offset field is set. See section 5.1.7.1 pg 103
     * Vol 6 Part B.
     */
    /* XXX: for now, set periodicity to 0 */
    dptr[8] = 0;
   18052:	2300      	movs	r3, #0
   18054:	7223      	strb	r3, [r4, #8]

    /* XXX: deal with reference event count. what to put here? */
    put_le16(dptr + 9, connsm->event_cntr);
   18056:	f8b5 1046 	ldrh.w	r1, [r5, #70]	; 0x46
   1805a:	f104 0009 	add.w	r0, r4, #9
   1805e:	f012 fd9b 	bl	2ab98 <put_le16>

    /* XXX: For now, dont use offsets */
    offset = 0xFFFF;
    put_le16(dptr + 11, offset);
   18062:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18066:	f104 000b 	add.w	r0, r4, #11
   1806a:	f012 fd95 	bl	2ab98 <put_le16>
    put_le16(dptr + 13, offset);
   1806e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18072:	f104 000d 	add.w	r0, r4, #13
   18076:	f012 fd8f 	bl	2ab98 <put_le16>
    put_le16(dptr + 15, offset);
   1807a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1807e:	f104 000f 	add.w	r0, r4, #15
   18082:	f012 fd89 	bl	2ab98 <put_le16>
    put_le16(dptr + 17, offset);
   18086:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1808a:	f104 0011 	add.w	r0, r4, #17
   1808e:	f012 fd83 	bl	2ab98 <put_le16>
    put_le16(dptr + 19, offset);
   18092:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18096:	f104 0013 	add.w	r0, r4, #19
   1809a:	f012 fd7d 	bl	2ab98 <put_le16>
    put_le16(dptr + 21, offset);
   1809e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   180a2:	f104 0015 	add.w	r0, r4, #21
   180a6:	f012 fd77 	bl	2ab98 <put_le16>
}
   180aa:	bd70      	pop	{r4, r5, r6, pc}
        BLE_LL_ASSERT(hcu->handle != 0);
   180ac:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   180b0:	b1a3      	cbz	r3, 180dc <ble_ll_ctrl_conn_param_pdu_make+0xb6>
        put_le16(dptr, hcu->conn_itvl_min);
   180b2:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   180b6:	4620      	mov	r0, r4
   180b8:	f012 fd6e 	bl	2ab98 <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   180bc:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   180c0:	1ca0      	adds	r0, r4, #2
   180c2:	f012 fd69 	bl	2ab98 <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   180c6:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   180ca:	1d20      	adds	r0, r4, #4
   180cc:	f012 fd64 	bl	2ab98 <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   180d0:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   180d4:	1da0      	adds	r0, r4, #6
   180d6:	f012 fd5f 	bl	2ab98 <put_le16>
   180da:	e7ba      	b.n	18052 <ble_ll_ctrl_conn_param_pdu_make+0x2c>
        BLE_LL_ASSERT(hcu->handle != 0);
   180dc:	f7f4 f85e 	bl	c19c <hal_debugger_connected>
   180e0:	b100      	cbz	r0, 180e4 <ble_ll_ctrl_conn_param_pdu_make+0xbe>
   180e2:	be01      	bkpt	0x0001
   180e4:	2300      	movs	r3, #0
   180e6:	461a      	mov	r2, r3
   180e8:	4619      	mov	r1, r3
   180ea:	4618      	mov	r0, r3
   180ec:	f7f4 fd5a 	bl	cba4 <__assert_func>

000180f0 <ble_ll_ctrl_conn_upd_make>:
{
   180f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   180f2:	4604      	mov	r4, r0
   180f4:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->periph_latency + 6 + 1;
   180f6:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   180fa:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
   180fe:	441d      	add	r5, r3
   18100:	b2ad      	uxth	r5, r5
   18102:	3507      	adds	r5, #7
   18104:	b2ad      	uxth	r5, r5
    if (cp) {
   18106:	2a00      	cmp	r2, #0
   18108:	d066      	beq.n	181d8 <ble_ll_ctrl_conn_upd_make+0xe8>
   1810a:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   1810c:	8997      	ldrh	r7, [r2, #12]
   1810e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18112:	429f      	cmp	r7, r3
   18114:	d05c      	beq.n	181d0 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   18116:	8853      	ldrh	r3, [r2, #2]
   18118:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1811c:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   18120:	f8b0 0064 	ldrh.w	r0, [r0, #100]	; 0x64
   18124:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   18128:	8948      	ldrh	r0, [r1, #10]
   1812a:	eba0 0c05 	sub.w	ip, r0, r5
   1812e:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   18132:	d140      	bne.n	181b6 <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   18134:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   18136:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   1813a:	fb0c f707 	mul.w	r7, ip, r7
   1813e:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   18142:	fbb2 f0f3 	udiv	r0, r2, r3
   18146:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   1814a:	4a2d      	ldr	r2, [pc, #180]	; (18200 <ble_ll_ctrl_conn_upd_make+0x110>)
   1814c:	fba2 2303 	umull	r2, r3, r2, r3
   18150:	0a9b      	lsrs	r3, r3, #10
   18152:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   18156:	884b      	ldrh	r3, [r1, #2]
   18158:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   1815c:	88cb      	ldrh	r3, [r1, #6]
   1815e:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   18162:	888b      	ldrh	r3, [r1, #4]
   18164:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   18168:	2301      	movs	r3, #1
   1816a:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   1816e:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   18172:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   18176:	4630      	mov	r0, r6
   18178:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   1817c:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   18180:	f012 fd0a 	bl	2ab98 <put_le16>
    put_le16(pyld + 3, req->interval);
   18184:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   18188:	1cf0      	adds	r0, r6, #3
   1818a:	f012 fd05 	bl	2ab98 <put_le16>
    put_le16(pyld + 5, req->latency);
   1818e:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   18192:	1d70      	adds	r0, r6, #5
   18194:	f012 fd00 	bl	2ab98 <put_le16>
    put_le16(pyld + 7, req->timeout);
   18198:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   1819c:	1df0      	adds	r0, r6, #7
   1819e:	f012 fcfb 	bl	2ab98 <put_le16>
    put_le16(pyld + 9, instant);
   181a2:	4629      	mov	r1, r5
   181a4:	f106 0009 	add.w	r0, r6, #9
   181a8:	f012 fcf6 	bl	2ab98 <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   181ac:	7863      	ldrb	r3, [r4, #1]
   181ae:	f043 0301 	orr.w	r3, r3, #1
   181b2:	7063      	strb	r3, [r4, #1]
}
   181b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   181b6:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   181b8:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   181bc:	f240 40e2 	movw	r0, #1250	; 0x4e2
   181c0:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   181c4:	fbb2 f7f3 	udiv	r7, r2, r3
   181c8:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   181cc:	1a9b      	subs	r3, r3, r2
   181ce:	e7bc      	b.n	1814a <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   181d0:	2300      	movs	r3, #0
   181d2:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   181d6:	e7be      	b.n	18156 <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   181d8:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   181dc:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   181e0:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   181e4:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   181e8:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   181ec:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   181f0:	2300      	movs	r3, #0
   181f2:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   181f6:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   181fa:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   181fe:	e7b6      	b.n	1816e <ble_ll_ctrl_conn_upd_make+0x7e>
   18200:	d1b71759 	.word	0xd1b71759

00018204 <ble_ll_ctrl_version_ind_make>:

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   18204:	b510      	push	{r4, lr}
   18206:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   18208:	7843      	ldrb	r3, [r0, #1]
   1820a:	f043 0304 	orr.w	r3, r3, #4
   1820e:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   18210:	4608      	mov	r0, r1
   18212:	2309      	movs	r3, #9
   18214:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   18218:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1821c:	f012 fcbc 	bl	2ab98 <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   18220:	2100      	movs	r1, #0
   18222:	1ce0      	adds	r0, r4, #3
   18224:	f012 fcb8 	bl	2ab98 <put_le16>
}
   18228:	bd10      	pop	{r4, pc}

0001822a <ble_ll_ctrl_datalen_upd_make>:
{
   1822a:	b538      	push	{r3, r4, r5, lr}
   1822c:	4605      	mov	r5, r0
   1822e:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   18230:	7a81      	ldrb	r1, [r0, #10]
   18232:	1c60      	adds	r0, r4, #1
   18234:	f012 fcb0 	bl	2ab98 <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   18238:	8a69      	ldrh	r1, [r5, #18]
   1823a:	1ce0      	adds	r0, r4, #3
   1823c:	f012 fcac 	bl	2ab98 <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   18240:	7a69      	ldrb	r1, [r5, #9]
   18242:	1d60      	adds	r0, r4, #5
   18244:	f012 fca8 	bl	2ab98 <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   18248:	8a29      	ldrh	r1, [r5, #16]
   1824a:	1de0      	adds	r0, r4, #7
   1824c:	f012 fca4 	bl	2ab98 <put_le16>
}
   18250:	bd38      	pop	{r3, r4, r5, pc}
	...

00018254 <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   18254:	b510      	push	{r4, lr}
   18256:	4604      	mov	r4, r0
   18258:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.central_chan_map, BLE_LL_CONN_CHMAP_LEN);
   1825a:	4b0e      	ldr	r3, [pc, #56]	; (18294 <ble_ll_ctrl_chanmap_req_make+0x40>)
   1825c:	681a      	ldr	r2, [r3, #0]
   1825e:	600a      	str	r2, [r1, #0]
   18260:	791b      	ldrb	r3, [r3, #4]
   18262:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   18264:	680b      	ldr	r3, [r1, #0]
   18266:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   1826a:	790b      	ldrb	r3, [r1, #4]
   1826c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->periph_latency + 6 + 1;
   18270:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   18274:	f8b4 1066 	ldrh.w	r1, [r4, #102]	; 0x66
   18278:	440b      	add	r3, r1
   1827a:	b29b      	uxth	r3, r3
   1827c:	3307      	adds	r3, #7
   1827e:	b299      	uxth	r1, r3
   18280:	84e1      	strh	r1, [r4, #38]	; 0x26
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   18282:	3005      	adds	r0, #5
   18284:	f012 fc88 	bl	2ab98 <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   18288:	7863      	ldrb	r3, [r4, #1]
   1828a:	f043 0310 	orr.w	r3, r3, #16
   1828e:	7063      	strb	r3, [r4, #1]
}
   18290:	bd10      	pop	{r4, pc}
   18292:	bf00      	nop
   18294:	2000233c 	.word	0x2000233c

00018298 <ble_ll_ctrl_update_features>:
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
    connsm->conn_features = feat[0];
   18298:	780b      	ldrb	r3, [r1, #0]
   1829a:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    memcpy(connsm->remote_features, feat + 1, 7);
   1829e:	f851 3f01 	ldr.w	r3, [r1, #1]!
   182a2:	63c3      	str	r3, [r0, #60]	; 0x3c
   182a4:	888a      	ldrh	r2, [r1, #4]
   182a6:	798b      	ldrb	r3, [r1, #6]
   182a8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
   182ac:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   182b0:	78c3      	ldrb	r3, [r0, #3]
   182b2:	f013 0f08 	tst.w	r3, #8
   182b6:	d102      	bne.n	182be <ble_ll_ctrl_update_features+0x26>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   182b8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   182bc:	70c3      	strb	r3, [r0, #3]
    }
}
   182be:	4770      	bx	lr

000182c0 <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept peripheral feature requests if we are a central and feature
     * requests if we are a peripheral.
     */
    if (opcode == BLE_LL_CTRL_PERIPH_FEATURE_REQ) {
   182c0:	2b0e      	cmp	r3, #14
   182c2:	d021      	beq.n	18308 <ble_ll_ctrl_rx_feature_req+0x48>
{
   182c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182c8:	4604      	mov	r4, r0
   182ca:	460e      	mov	r6, r1
   182cc:	4615      	mov	r5, r2
        if (!CONN_IS_CENTRAL(connsm)) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (!CONN_IS_PERIPHERAL(connsm)) {
   182ce:	79c3      	ldrb	r3, [r0, #7]
   182d0:	2b02      	cmp	r3, #2
   182d2:	d002      	beq.n	182da <ble_ll_ctrl_rx_feature_req+0x1a>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   182d4:	2007      	movs	r0, #7

    put_le64(rspbuf + 1, our_feat);
    rspbuf[1] = connsm->conn_features;

    return rsp_opcode;
}
   182d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    our_feat = ble_ll_read_supp_features();
   182da:	f7fc fb51 	bl	14980 <ble_ll_read_supp_features>
   182de:	4607      	mov	r7, r0
   182e0:	4688      	mov	r8, r1
    ble_ll_ctrl_update_features(connsm, dptr);
   182e2:	4631      	mov	r1, r6
   182e4:	4620      	mov	r0, r4
   182e6:	f7ff ffd7 	bl	18298 <ble_ll_ctrl_update_features>
    connsm->conn_features &= our_feat;
   182ea:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   182ee:	403b      	ands	r3, r7
   182f0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    put_le64(rspbuf + 1, our_feat);
   182f4:	463a      	mov	r2, r7
   182f6:	4643      	mov	r3, r8
   182f8:	1c68      	adds	r0, r5, #1
   182fa:	f012 fc5b 	bl	2abb4 <put_le64>
    rspbuf[1] = connsm->conn_features;
   182fe:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   18302:	706b      	strb	r3, [r5, #1]
    return rsp_opcode;
   18304:	2009      	movs	r0, #9
   18306:	e7e6      	b.n	182d6 <ble_ll_ctrl_rx_feature_req+0x16>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   18308:	2007      	movs	r0, #7
}
   1830a:	4770      	bx	lr

0001830c <ble_ll_ctrl_enc_req_make>:
{
   1830c:	b570      	push	{r4, r5, r6, lr}
   1830e:	4604      	mov	r4, r0
   18310:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   18312:	e9d0 234a 	ldrd	r2, r3, [r0, #296]	; 0x128
   18316:	4608      	mov	r0, r1
   18318:	f012 fc4c 	bl	2abb4 <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   1831c:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   18320:	f105 0008 	add.w	r0, r5, #8
   18324:	f012 fc38 	bl	2ab98 <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   18328:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   1832c:	2108      	movs	r1, #8
   1832e:	4630      	mov	r0, r6
   18330:	f001 fe00 	bl	19f34 <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   18334:	2208      	movs	r2, #8
   18336:	4631      	mov	r1, r6
   18338:	f105 000a 	add.w	r0, r5, #10
   1833c:	f012 fc84 	bl	2ac48 <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   18340:	2104      	movs	r1, #4
   18342:	f504 7098 	add.w	r0, r4, #304	; 0x130
   18346:	f001 fdf5 	bl	19f34 <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   1834a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   1834e:	f8c5 3012 	str.w	r3, [r5, #18]
}
   18352:	bd70      	pop	{r4, r5, r6, pc}

00018354 <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc, void *data)
{
   18354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18358:	4605      	mov	r5, r0
   1835a:	460c      	mov	r4, r1
   1835c:	4617      	mov	r7, r2
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   1835e:	2110      	movs	r1, #16
   18360:	201b      	movs	r0, #27
   18362:	f7f5 fd2e 	bl	ddc2 <os_msys_get_pkthdr>

    if (om) {
   18366:	4606      	mov	r6, r0
   18368:	2800      	cmp	r0, #0
   1836a:	d06a      	beq.n	18442 <ble_ll_ctrl_proc_init+0xee>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   1836c:	f8d0 8000 	ldr.w	r8, [r0]
        ctrdata = dptr + 1;
   18370:	f108 0901 	add.w	r9, r8, #1

        switch (ctrl_proc) {
   18374:	2c08      	cmp	r4, #8
   18376:	d84e      	bhi.n	18416 <ble_ll_ctrl_proc_init+0xc2>
   18378:	e8df f004 	tbb	[pc, r4]
   1837c:	12410c05 	.word	0x12410c05
   18380:	57342e28 	.word	0x57342e28
   18384:	3b          	.byte	0x3b
   18385:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, data);
   18386:	463a      	mov	r2, r7
   18388:	4649      	mov	r1, r9
   1838a:	4628      	mov	r0, r5
   1838c:	f7ff feb0 	bl	180f0 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   18390:	2300      	movs	r3, #0
            break;
   18392:	e04b      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
        case BLE_LL_CTRL_PROC_CHAN_MAP_UPD:
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   18394:	4649      	mov	r1, r9
   18396:	4628      	mov	r0, r5
   18398:	f7ff ff5c 	bl	18254 <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   1839c:	2301      	movs	r3, #1
            break;
   1839e:	e045      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
        case BLE_LL_CTRL_PROC_FEATURE_XCHG:
            switch (connsm->conn_role) {
   183a0:	79eb      	ldrb	r3, [r5, #7]
   183a2:	2b02      	cmp	r3, #2
   183a4:	d108      	bne.n	183b8 <ble_ll_ctrl_proc_init+0x64>
#endif
            default:
                BLE_LL_ASSERT(0);
                break;
            }
            put_le64(ctrdata, ble_ll_read_supp_features());
   183a6:	f7fc faeb 	bl	14980 <ble_ll_read_supp_features>
   183aa:	4602      	mov	r2, r0
   183ac:	460b      	mov	r3, r1
   183ae:	4648      	mov	r0, r9
   183b0:	f012 fc00 	bl	2abb4 <put_le64>
                opcode = BLE_LL_CTRL_PERIPH_FEATURE_REQ;
   183b4:	230e      	movs	r3, #14
            break;
   183b6:	e039      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
                BLE_LL_ASSERT(0);
   183b8:	f7f3 fef0 	bl	c19c <hal_debugger_connected>
   183bc:	b100      	cbz	r0, 183c0 <ble_ll_ctrl_proc_init+0x6c>
   183be:	be01      	bkpt	0x0001
   183c0:	2300      	movs	r3, #0
   183c2:	461a      	mov	r2, r3
   183c4:	4619      	mov	r1, r3
   183c6:	4618      	mov	r0, r3
   183c8:	f7f4 fbec 	bl	cba4 <__assert_func>
        case BLE_LL_CTRL_PROC_VERSION_XCHG:
            opcode = BLE_LL_CTRL_VERSION_IND;
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   183cc:	4649      	mov	r1, r9
   183ce:	4628      	mov	r0, r5
   183d0:	f7ff ff18 	bl	18204 <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   183d4:	230c      	movs	r3, #12
            break;
   183d6:	e029      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
        case BLE_LL_CTRL_PROC_TERMINATE:
            opcode = BLE_LL_CTRL_TERMINATE_IND;
            ctrdata[0] = connsm->disconnect_reason;
   183d8:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   183dc:	f888 3001 	strb.w	r3, [r8, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   183e0:	2302      	movs	r3, #2
            break;
   183e2:	e023      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
        case BLE_LL_CTRL_PROC_CONN_PARAM_REQ:
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   183e4:	2200      	movs	r2, #0
   183e6:	4649      	mov	r1, r9
   183e8:	4628      	mov	r0, r5
   183ea:	f7ff fe1c 	bl	18026 <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   183ee:	230f      	movs	r3, #15
            break;
   183f0:	e01c      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
        case BLE_LL_CTRL_PROC_LE_PING:
            opcode = BLE_LL_CTRL_PING_REQ;
            break;
        case BLE_LL_CTRL_PROC_DATA_LEN_UPD:
            opcode = BLE_LL_CTRL_LENGTH_REQ;
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   183f2:	4641      	mov	r1, r8
   183f4:	4628      	mov	r0, r5
   183f6:	f7ff ff18 	bl	1822a <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   183fa:	2314      	movs	r3, #20
            break;
   183fc:	e016      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        /* XXX: deal with already encrypted connection.*/
        case BLE_LL_CTRL_PROC_ENCRYPT:
            /* If we are already encrypted we do pause procedure */
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   183fe:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   18402:	2b02      	cmp	r3, #2
   18404:	d101      	bne.n	1840a <ble_ll_ctrl_proc_init+0xb6>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   18406:	230a      	movs	r3, #10
   18408:	e010      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
            } else {
                opcode = BLE_LL_CTRL_ENC_REQ;
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   1840a:	4649      	mov	r1, r9
   1840c:	4628      	mov	r0, r5
   1840e:	f7ff ff7d 	bl	1830c <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   18412:	2303      	movs	r3, #3
   18414:	e00a      	b.n	1842c <ble_ll_ctrl_proc_init+0xd8>
            opcode = BLE_LL_CTRL_CIS_REQ;
            ble_ll_ctrl_cis_create(connsm, ctrdata);
            break;
#endif
        default:
            BLE_LL_ASSERT(0);
   18416:	f7f3 fec1 	bl	c19c <hal_debugger_connected>
   1841a:	b100      	cbz	r0, 1841e <ble_ll_ctrl_proc_init+0xca>
   1841c:	be01      	bkpt	0x0001
   1841e:	2300      	movs	r3, #0
   18420:	461a      	mov	r2, r3
   18422:	4619      	mov	r1, r3
   18424:	4618      	mov	r0, r3
   18426:	f7f4 fbbd 	bl	cba4 <__assert_func>
        ctrdata = dptr + 1;
   1842a:	2312      	movs	r3, #18
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   1842c:	f888 3000 	strb.w	r3, [r8]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   18430:	4a05      	ldr	r2, [pc, #20]	; (18448 <ble_ll_ctrl_proc_init+0xf4>)
   18432:	5cd3      	ldrb	r3, [r2, r3]
   18434:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   18436:	b2db      	uxtb	r3, r3
   18438:	2203      	movs	r2, #3
   1843a:	4631      	mov	r1, r6
   1843c:	4628      	mov	r0, r5
   1843e:	f7fe ff11 	bl	17264 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   18442:	4630      	mov	r0, r6
   18444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18448:	0002dd1c 	.word	0x0002dd1c

0001844c <ble_ll_ctrl_rx_conn_update>:
{
   1844c:	b538      	push	{r3, r4, r5, lr}
   1844e:	4604      	mov	r4, r0
   18450:	460d      	mov	r5, r1
    reqdata->winsize = dptr[0];
   18452:	4608      	mov	r0, r1
   18454:	f810 3b01 	ldrb.w	r3, [r0], #1
   18458:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   1845c:	f012 fbbd 	bl	2abda <get_le16>
   18460:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   18464:	1ce8      	adds	r0, r5, #3
   18466:	f012 fbb8 	bl	2abda <get_le16>
   1846a:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   1846e:	1d68      	adds	r0, r5, #5
   18470:	f012 fbb3 	bl	2abda <get_le16>
   18474:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   18478:	1de8      	adds	r0, r5, #7
   1847a:	f012 fbae 	bl	2abda <get_le16>
   1847e:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   18482:	f105 0009 	add.w	r0, r5, #9
   18486:	f012 fba8 	bl	2abda <get_le16>
   1848a:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   1848e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   18492:	1ac3      	subs	r3, r0, r3
   18494:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   18496:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1849a:	4293      	cmp	r3, r2
   1849c:	d80d      	bhi.n	184ba <ble_ll_ctrl_rx_conn_update+0x6e>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   1849e:	7862      	ldrb	r2, [r4, #1]
   184a0:	f042 0201 	orr.w	r2, r2, #1
   184a4:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   184a6:	b933      	cbnz	r3, 184b6 <ble_ll_ctrl_rx_conn_update+0x6a>
            reqdata->winoffset = 0;
   184a8:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   184ac:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   184b0:	3001      	adds	r0, #1
   184b2:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
}
   184b6:	20ff      	movs	r0, #255	; 0xff
   184b8:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   184ba:	2128      	movs	r1, #40	; 0x28
   184bc:	4620      	mov	r0, r4
   184be:	f7fe fc79 	bl	16db4 <ble_ll_conn_timeout>
   184c2:	e7f8      	b.n	184b6 <ble_ll_ctrl_rx_conn_update+0x6a>

000184c4 <ble_ll_ctrl_rx_chanmap_req>:
{
   184c4:	b538      	push	{r3, r4, r5, lr}
   184c6:	4604      	mov	r4, r0
   184c8:	460d      	mov	r5, r1
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   184ca:	1d48      	adds	r0, r1, #5
   184cc:	f012 fb85 	bl	2abda <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   184d0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
   184d4:	1ac3      	subs	r3, r0, r3
   184d6:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   184d8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   184dc:	4293      	cmp	r3, r2
   184de:	d905      	bls.n	184ec <ble_ll_ctrl_rx_chanmap_req+0x28>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   184e0:	2128      	movs	r1, #40	; 0x28
   184e2:	4620      	mov	r0, r4
   184e4:	f7fe fc66 	bl	16db4 <ble_ll_conn_timeout>
}
   184e8:	20ff      	movs	r0, #255	; 0xff
   184ea:	bd38      	pop	{r3, r4, r5, pc}
        connsm->chanmap_instant = instant;
   184ec:	84e0      	strh	r0, [r4, #38]	; 0x26
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   184ee:	682b      	ldr	r3, [r5, #0]
   184f0:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   184f4:	792b      	ldrb	r3, [r5, #4]
   184f6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   184fa:	7863      	ldrb	r3, [r4, #1]
   184fc:	f043 0310 	orr.w	r3, r3, #16
   18500:	7063      	strb	r3, [r4, #1]
   18502:	e7f1      	b.n	184e8 <ble_ll_ctrl_rx_chanmap_req+0x24>

00018504 <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   18504:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   18506:	2122      	movs	r1, #34	; 0x22
   18508:	6880      	ldr	r0, [r0, #8]
   1850a:	f7fe fc53 	bl	16db4 <ble_ll_conn_timeout>
}
   1850e:	bd08      	pop	{r3, pc}

00018510 <ble_ll_ctrl_len_proc>:
{
   18510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18514:	4680      	mov	r8, r0
   18516:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   18518:	4608      	mov	r0, r1
   1851a:	f012 fb5e 	bl	2abda <get_le16>
   1851e:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   18520:	1ca0      	adds	r0, r4, #2
   18522:	f012 fb5a 	bl	2abda <get_le16>
   18526:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   18528:	1d20      	adds	r0, r4, #4
   1852a:	f012 fb56 	bl	2abda <get_le16>
   1852e:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   18530:	1da0      	adds	r0, r4, #6
   18532:	f012 fb52 	bl	2abda <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   18536:	2d1a      	cmp	r5, #26
   18538:	d916      	bls.n	18568 <ble_ll_ctrl_len_proc+0x58>
   1853a:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   1853e:	d316      	bcc.n	1856e <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   18540:	2f1a      	cmp	r7, #26
   18542:	d916      	bls.n	18572 <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   18544:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   18548:	d201      	bcs.n	1854e <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   1854a:	2001      	movs	r0, #1
    return rc;
   1854c:	e00d      	b.n	1856a <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   1854e:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   18552:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   18556:	f888 500c 	strb.w	r5, [r8, #12]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   1855a:	f888 700b 	strb.w	r7, [r8, #11]
        ble_ll_conn_update_eff_data_len(connsm);
   1855e:	4640      	mov	r0, r8
   18560:	f7fe fab0 	bl	16ac4 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   18564:	2000      	movs	r0, #0
   18566:	e000      	b.n	1856a <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   18568:	2001      	movs	r0, #1
}
   1856a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   1856e:	2001      	movs	r0, #1
   18570:	e7fb      	b.n	1856a <ble_ll_ctrl_len_proc+0x5a>
   18572:	2001      	movs	r0, #1
   18574:	e7f9      	b.n	1856a <ble_ll_ctrl_len_proc+0x5a>

00018576 <ble_ll_ctrl_rx_enc_req>:
{
   18576:	b570      	push	{r4, r5, r6, lr}
   18578:	4604      	mov	r4, r0
   1857a:	460d      	mov	r5, r1
   1857c:	4616      	mov	r6, r2
    connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_TO_BE_SENT;
   1857e:	2303      	movs	r3, #3
   18580:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   18584:	2300      	movs	r3, #0
   18586:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   1858a:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   1858e:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   18592:	4608      	mov	r0, r1
   18594:	f012 fb31 	bl	2abfa <get_le64>
   18598:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   1859c:	f105 0008 	add.w	r0, r5, #8
   185a0:	f012 fb1b 	bl	2abda <get_le16>
   185a4:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   185a8:	2208      	movs	r2, #8
   185aa:	f105 010a 	add.w	r1, r5, #10
   185ae:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   185b2:	f012 fb49 	bl	2ac48 <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   185b6:	f8d5 3012 	ldr.w	r3, [r5, #18]
   185ba:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   185be:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   185c2:	2108      	movs	r1, #8
   185c4:	4628      	mov	r0, r5
   185c6:	f001 fcb5 	bl	19f34 <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   185ca:	2208      	movs	r2, #8
   185cc:	4629      	mov	r1, r5
   185ce:	4630      	mov	r0, r6
   185d0:	f012 fb3a 	bl	2ac48 <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   185d4:	2104      	movs	r1, #4
   185d6:	f504 709a 	add.w	r0, r4, #308	; 0x134
   185da:	f001 fcab 	bl	19f34 <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   185de:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   185e2:	60b3      	str	r3, [r6, #8]
}
   185e4:	2004      	movs	r0, #4
   185e6:	bd70      	pop	{r4, r5, r6, pc}

000185e8 <ble_ll_calc_session_key>:
{
   185e8:	b510      	push	{r4, lr}
   185ea:	4604      	mov	r4, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   185ec:	f504 709c 	add.w	r0, r4, #312	; 0x138
   185f0:	f002 feb0 	bl	1b354 <ble_hw_encrypt_block>
   185f4:	2800      	cmp	r0, #0
   185f6:	d1f9      	bne.n	185ec <ble_ll_calc_session_key+0x4>
}
   185f8:	bd10      	pop	{r4, pc}

000185fa <ble_ll_ctrl_rx_enc_rsp>:
{
   185fa:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   185fc:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   18600:	2b02      	cmp	r3, #2
   18602:	d000      	beq.n	18606 <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   18604:	bd38      	pop	{r3, r4, r5, pc}
   18606:	4604      	mov	r4, r0
   18608:	460d      	mov	r5, r1
        connsm->enc_data.rx_pkt_cntr = 0;
   1860a:	2300      	movs	r3, #0
   1860c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   18610:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   18614:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   18618:	2208      	movs	r2, #8
   1861a:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   1861e:	f012 fb13 	bl	2ac48 <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   18622:	68ab      	ldr	r3, [r5, #8]
   18624:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   18628:	4620      	mov	r0, r4
   1862a:	f7ff ffdd 	bl	185e8 <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   1862e:	2307      	movs	r3, #7
   18630:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   18634:	e7e6      	b.n	18604 <ble_ll_ctrl_rx_enc_rsp+0xa>

00018636 <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   18636:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   18638:	6803      	ldr	r3, [r0, #0]
   1863a:	7818      	ldrb	r0, [r3, #0]
   1863c:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   18640:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   18642:	2803      	cmp	r0, #3
   18644:	d003      	beq.n	1864e <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   18646:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   18648:	f7ff fc94 	bl	17f74 <ble_ll_ctrl_enc_allowed_pdu>
}
   1864c:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   1864e:	789a      	ldrb	r2, [r3, #2]
   18650:	e7fa      	b.n	18648 <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

00018652 <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   18652:	b508      	push	{r3, lr}
   18654:	4603      	mov	r3, r0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   18656:	7a40      	ldrb	r0, [r0, #9]
   18658:	f000 0003 	and.w	r0, r0, #3
    len = ble_hdr->txinfo.pyld_len;
   1865c:	7b19      	ldrb	r1, [r3, #12]
    if (llid == BLE_LL_LLID_CTRL) {
   1865e:	2803      	cmp	r0, #3
   18660:	d003      	beq.n	1866a <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   18662:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   18664:	f7ff fc86 	bl	17f74 <ble_ll_ctrl_enc_allowed_pdu>
}
   18668:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   1866a:	f853 3c10 	ldr.w	r3, [r3, #-16]
   1866e:	781a      	ldrb	r2, [r3, #0]
   18670:	e7f8      	b.n	18664 <ble_ll_ctrl_enc_allowed_pdu_tx+0x12>

00018672 <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   18672:	7e43      	ldrb	r3, [r0, #25]
   18674:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   18678:	2b03      	cmp	r3, #3
   1867a:	d001      	beq.n	18680 <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   1867c:	2000      	movs	r0, #0
   1867e:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   18680:	6803      	ldr	r3, [r0, #0]
   18682:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   18684:	2b06      	cmp	r3, #6
   18686:	d001      	beq.n	1868c <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   18688:	2000      	movs	r0, #0
   1868a:	4770      	bx	lr
            is_start_enc_rsp = 1;
   1868c:	2001      	movs	r0, #1
}
   1868e:	4770      	bx	lr

00018690 <ble_ll_ctrl_start_enc_send>:
{
   18690:	b510      	push	{r4, lr}
   18692:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   18694:	2110      	movs	r1, #16
   18696:	201b      	movs	r0, #27
   18698:	f7f5 fb93 	bl	ddc2 <os_msys_get_pkthdr>
    if (om) {
   1869c:	b1b0      	cbz	r0, 186cc <ble_ll_ctrl_start_enc_send+0x3c>
   1869e:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   186a0:	6803      	ldr	r3, [r0, #0]
   186a2:	2205      	movs	r2, #5
   186a4:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   186a6:	2301      	movs	r3, #1
   186a8:	2203      	movs	r2, #3
   186aa:	4620      	mov	r0, r4
   186ac:	f7fe fdda 	bl	17264 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   186b0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   186b4:	2bff      	cmp	r3, #255	; 0xff
   186b6:	d001      	beq.n	186bc <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   186b8:	2000      	movs	r0, #0
}
   186ba:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   186bc:	2302      	movs	r3, #2
   186be:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
            ble_ll_ctrl_start_rsp_timer(connsm);
   186c2:	4620      	mov	r0, r4
   186c4:	f7ff fc7f 	bl	17fc6 <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   186c8:	2000      	movs	r0, #0
   186ca:	e7f6      	b.n	186ba <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   186cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   186d0:	e7f3      	b.n	186ba <ble_ll_ctrl_start_enc_send+0x2a>

000186d2 <ble_ll_ctrl_conn_param_reply>:
{
   186d2:	b508      	push	{r3, lr}
    switch (connsm->conn_role) {
   186d4:	79c3      	ldrb	r3, [r0, #7]
   186d6:	2b02      	cmp	r3, #2
   186d8:	d104      	bne.n	186e4 <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   186da:	3101      	adds	r1, #1
   186dc:	f7ff fca3 	bl	18026 <ble_ll_ctrl_conn_param_pdu_make>
}
   186e0:	2010      	movs	r0, #16
   186e2:	bd08      	pop	{r3, pc}
        BLE_LL_ASSERT(0);
   186e4:	f7f3 fd5a 	bl	c19c <hal_debugger_connected>
   186e8:	b100      	cbz	r0, 186ec <ble_ll_ctrl_conn_param_reply+0x1a>
   186ea:	be01      	bkpt	0x0001
   186ec:	2300      	movs	r3, #0
   186ee:	461a      	mov	r2, r3
   186f0:	4619      	mov	r1, r3
   186f2:	4618      	mov	r0, r3
   186f4:	f7f4 fa56 	bl	cba4 <__assert_func>

000186f8 <ble_ll_ctrl_conn_param_pdu_proc>:
{
   186f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   186fc:	4604      	mov	r4, r0
   186fe:	460d      	mov	r5, r1
   18700:	4617      	mov	r7, r2
   18702:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   18704:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   18708:	4608      	mov	r0, r1
   1870a:	f012 fa66 	bl	2abda <get_le16>
   1870e:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   18712:	1ca8      	adds	r0, r5, #2
   18714:	f012 fa61 	bl	2abda <get_le16>
   18718:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   1871c:	1d28      	adds	r0, r5, #4
   1871e:	f012 fa5c 	bl	2abda <get_le16>
   18722:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   18726:	1da8      	adds	r0, r5, #6
   18728:	f012 fa57 	bl	2abda <get_le16>
   1872c:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   18730:	7a2b      	ldrb	r3, [r5, #8]
   18732:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   18736:	f105 0009 	add.w	r0, r5, #9
   1873a:	f012 fa4e 	bl	2abda <get_le16>
   1873e:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   18742:	f105 000b 	add.w	r0, r5, #11
   18746:	f012 fa48 	bl	2abda <get_le16>
   1874a:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   1874e:	f105 000d 	add.w	r0, r5, #13
   18752:	f012 fa42 	bl	2abda <get_le16>
   18756:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   1875a:	f105 000f 	add.w	r0, r5, #15
   1875e:	f012 fa3c 	bl	2abda <get_le16>
   18762:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   18766:	f105 0011 	add.w	r0, r5, #17
   1876a:	f012 fa36 	bl	2abda <get_le16>
   1876e:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   18772:	f105 0013 	add.w	r0, r5, #19
   18776:	f012 fa30 	bl	2abda <get_le16>
   1877a:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   1877e:	f105 0015 	add.w	r0, r5, #21
   18782:	f012 fa2a 	bl	2abda <get_le16>
   18786:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   1878a:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   1878e:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   18792:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   18796:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   1879a:	f7fe ff7b 	bl	17694 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   1879e:	2800      	cmp	r0, #0
   187a0:	d156      	bne.n	18850 <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   187a2:	2e0f      	cmp	r6, #15
   187a4:	d00b      	beq.n	187be <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if (CONN_IS_PERIPHERAL(connsm) || (opcode == BLE_LL_CTRL_CONN_PARM_RSP)) {
   187a6:	79e3      	ldrb	r3, [r4, #7]
   187a8:	2b02      	cmp	r3, #2
   187aa:	d024      	beq.n	187f6 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   187ac:	2e10      	cmp	r6, #16
   187ae:	d022      	beq.n	187f6 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   187b0:	2006      	movs	r0, #6
   187b2:	f001 f8ff 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   187b6:	2800      	cmp	r0, #0
   187b8:	d13e      	bne.n	18838 <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   187ba:	231a      	movs	r3, #26
   187bc:	e049      	b.n	18852 <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   187be:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
   187c2:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   187c6:	4293      	cmp	r3, r2
   187c8:	d3ed      	bcc.n	187a6 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   187ca:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   187ce:	4293      	cmp	r3, r2
   187d0:	d8e9      	bhi.n	187a6 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   187d2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   187d6:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   187da:	429a      	cmp	r2, r3
   187dc:	d1e3      	bne.n	187a6 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->periph_latency == req->latency)) {
   187de:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
   187e2:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   187e6:	429a      	cmp	r2, r3
   187e8:	d1dd      	bne.n	187a6 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   187ea:	4642      	mov	r2, r8
   187ec:	4639      	mov	r1, r7
   187ee:	4620      	mov	r0, r4
   187f0:	f7ff ff6f 	bl	186d2 <ble_ll_ctrl_conn_param_reply>
    if (ble_err) {
   187f4:	e030      	b.n	18858 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   187f6:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   187fa:	2b00      	cmp	r3, #0
   187fc:	d0d8      	beq.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   187fe:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   18802:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   18806:	4293      	cmp	r3, r2
   18808:	d3d2      	bcc.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   1880a:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   1880e:	428b      	cmp	r3, r1
   18810:	d8ce      	bhi.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   18812:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   18816:	429a      	cmp	r2, r3
   18818:	d8ca      	bhi.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   1881a:	4299      	cmp	r1, r3
   1881c:	d3c8      	bcc.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   1881e:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   18822:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   18826:	429a      	cmp	r2, r3
   18828:	d1c2      	bne.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   1882a:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   1882e:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   18832:	429a      	cmp	r2, r3
   18834:	d1bc      	bne.n	187b0 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   18836:	e7d8      	b.n	187ea <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   18838:	4641      	mov	r1, r8
   1883a:	4620      	mov	r0, r4
   1883c:	f001 f988 	bl	19b50 <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   18840:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   18844:	7823      	ldrb	r3, [r4, #0]
   18846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1884a:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   1884c:	20ff      	movs	r0, #255	; 0xff
   1884e:	e003      	b.n	18858 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   18850:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   18852:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   18854:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   18856:	2011      	movs	r0, #17
}
   18858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001885c <ble_ll_ctrl_rx_conn_param_rsp>:
{
   1885c:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1885e:	79c3      	ldrb	r3, [r0, #7]
   18860:	2b02      	cmp	r3, #2
   18862:	d011      	beq.n	18888 <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   18864:	7803      	ldrb	r3, [r0, #0]
   18866:	f013 0f40 	tst.w	r3, #64	; 0x40
   1886a:	d003      	beq.n	18874 <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   1886c:	7803      	ldrb	r3, [r0, #0]
   1886e:	f36f 1386 	bfc	r3, #6, #1
   18872:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   18874:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   18878:	f013 0f40 	tst.w	r3, #64	; 0x40
   1887c:	d006      	beq.n	1888c <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   1887e:	2310      	movs	r3, #16
   18880:	f7ff ff3a 	bl	186f8 <ble_ll_ctrl_conn_param_pdu_proc>
    return rsp_opcode;
   18884:	b2c0      	uxtb	r0, r0
}
   18886:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   18888:	2007      	movs	r0, #7
   1888a:	e7fc      	b.n	18886 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   1888c:	20ff      	movs	r0, #255	; 0xff
   1888e:	e7fa      	b.n	18886 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

00018890 <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   18890:	f000 0003 	and.w	r0, r0, #3
   18894:	2803      	cmp	r0, #3
   18896:	d001      	beq.n	1889c <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   18898:	2000      	movs	r0, #0
   1889a:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   1889c:	2902      	cmp	r1, #2
   1889e:	d001      	beq.n	188a4 <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   188a0:	2000      	movs	r0, #0
   188a2:	4770      	bx	lr
            rc = 1;
   188a4:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   188a6:	4770      	bx	lr

000188a8 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   188a8:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   188aa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   188ae:	b1eb      	cbz	r3, 188ec <ble_ll_ctrl_terminate_start+0x44>
   188b0:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc, NULL);
   188b2:	2200      	movs	r2, #0
   188b4:	2105      	movs	r1, #5
   188b6:	f7ff fd4d 	bl	18354 <ble_ll_ctrl_proc_init>
    if (om) {
   188ba:	b1b0      	cbz	r0, 188ea <ble_ll_ctrl_terminate_start+0x42>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   188bc:	7823      	ldrb	r3, [r4, #0]
   188be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   188c2:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   188c4:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
   188c8:	f242 7310 	movw	r3, #10000	; 0x2710
   188cc:	fb03 f505 	mul.w	r5, r3, r5
    return os_cputime_get32();
   188d0:	f012 f9f5 	bl	2acbe <os_cputime_get32>
   188d4:	4606      	mov	r6, r0
    if (usecs <= 31249) {
   188d6:	f647 2311 	movw	r3, #31249	; 0x7a11
   188da:	429d      	cmp	r5, r3
   188dc:	d810      	bhi.n	18900 <ble_ll_ctrl_terminate_start+0x58>
        return (usecs * 137439) / 4194304;
   188de:	4b0a      	ldr	r3, [pc, #40]	; (18908 <ble_ll_ctrl_terminate_start+0x60>)
   188e0:	fb03 f305 	mul.w	r3, r3, r5
   188e4:	0d98      	lsrs	r0, r3, #22
        connsm->terminate_timeout = ble_ll_tmr_get() + ble_ll_tmr_u2t(usecs);
   188e6:	4430      	add	r0, r6
   188e8:	65e0      	str	r0, [r4, #92]	; 0x5c
    }
}
   188ea:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   188ec:	f7f3 fc56 	bl	c19c <hal_debugger_connected>
   188f0:	b100      	cbz	r0, 188f4 <ble_ll_ctrl_terminate_start+0x4c>
   188f2:	be01      	bkpt	0x0001
   188f4:	2300      	movs	r3, #0
   188f6:	461a      	mov	r2, r3
   188f8:	4619      	mov	r1, r3
   188fa:	4618      	mov	r0, r3
   188fc:	f7f4 f952 	bl	cba4 <__assert_func>
    return os_cputime_usecs_to_ticks(usecs);
   18900:	4628      	mov	r0, r5
   18902:	f012 f9e1 	bl	2acc8 <os_cputime_usecs_to_ticks>
   18906:	e7ee      	b.n	188e6 <ble_ll_ctrl_terminate_start+0x3e>
   18908:	000218df 	.word	0x000218df

0001890c <ble_ll_ctrl_proc_start>:
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc,
                       void *data)
{
   1890c:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   1890e:	2905      	cmp	r1, #5
   18910:	d00e      	beq.n	18930 <ble_ll_ctrl_proc_start+0x24>
   18912:	4604      	mov	r4, r0
   18914:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   18916:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1891a:	2bff      	cmp	r3, #255	; 0xff
   1891c:	d012      	beq.n	18944 <ble_ll_ctrl_proc_start+0x38>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   1891e:	2301      	movs	r3, #1
   18920:	fa03 f105 	lsl.w	r1, r3, r5
   18924:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   18928:	4319      	orrs	r1, r3
   1892a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
}
   1892e:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   18930:	f7f3 fc34 	bl	c19c <hal_debugger_connected>
   18934:	b100      	cbz	r0, 18938 <ble_ll_ctrl_proc_start+0x2c>
   18936:	be01      	bkpt	0x0001
   18938:	2300      	movs	r3, #0
   1893a:	461a      	mov	r2, r3
   1893c:	4619      	mov	r1, r3
   1893e:	4618      	mov	r0, r3
   18940:	f7f4 f930 	bl	cba4 <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc, data);
   18944:	f7ff fd06 	bl	18354 <ble_ll_ctrl_proc_init>
        if (om) {
   18948:	2800      	cmp	r0, #0
   1894a:	d0e8      	beq.n	1891e <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   1894c:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   18950:	2d01      	cmp	r5, #1
   18952:	d0e4      	beq.n	1891e <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   18954:	4620      	mov	r0, r4
   18956:	f7ff fb36 	bl	17fc6 <ble_ll_ctrl_start_rsp_timer>
   1895a:	e7e0      	b.n	1891e <ble_ll_ctrl_proc_start+0x12>

0001895c <ble_ll_ctrl_initiate_dle>:
{
   1895c:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   1895e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   18962:	f013 0f20 	tst.w	r3, #32
   18966:	d011      	beq.n	1898c <ble_ll_ctrl_initiate_dle+0x30>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   18968:	7a43      	ldrb	r3, [r0, #9]
   1896a:	2b1b      	cmp	r3, #27
   1896c:	d80a      	bhi.n	18984 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   1896e:	7a83      	ldrb	r3, [r0, #10]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   18970:	2b1b      	cmp	r3, #27
   18972:	d807      	bhi.n	18984 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   18974:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   18976:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1897a:	d803      	bhi.n	18984 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   1897c:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   1897e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   18982:	d903      	bls.n	1898c <ble_ll_ctrl_initiate_dle+0x30>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD, NULL);
   18984:	2200      	movs	r2, #0
   18986:	2108      	movs	r1, #8
   18988:	f7ff ffc0 	bl	1890c <ble_ll_ctrl_proc_start>
}
   1898c:	bd08      	pop	{r3, pc}

0001898e <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   1898e:	b538      	push	{r3, r4, r5, lr}
   18990:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   18992:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   18996:	b923      	cbnz	r3, 189a2 <ble_ll_ctrl_chk_proc_start+0x14>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   18998:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   1899c:	2bff      	cmp	r3, #255	; 0xff
   1899e:	d007      	beq.n	189b0 <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   189a0:	bd38      	pop	{r3, r4, r5, pc}
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   189a2:	f990 3000 	ldrsb.w	r3, [r0]
   189a6:	2b00      	cmp	r3, #0
   189a8:	dbfa      	blt.n	189a0 <ble_ll_ctrl_chk_proc_start+0x12>
            ble_ll_ctrl_terminate_start(connsm);
   189aa:	f7ff ff7d 	bl	188a8 <ble_ll_ctrl_terminate_start>
        return;
   189ae:	e7f7      	b.n	189a0 <ble_ll_ctrl_chk_proc_start+0x12>
        (connsm->pending_ctrl_procs != 0)) {
   189b0:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   189b4:	2b00      	cmp	r3, #0
   189b6:	d0f3      	beq.n	189a0 <ble_ll_ctrl_chk_proc_start+0x12>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   189b8:	2500      	movs	r5, #0
   189ba:	2d0b      	cmp	r5, #11
   189bc:	dcf0      	bgt.n	189a0 <ble_ll_ctrl_chk_proc_start+0x12>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   189be:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   189c2:	412b      	asrs	r3, r5
   189c4:	f013 0f01 	tst.w	r3, #1
   189c8:	d018      	beq.n	189fc <ble_ll_ctrl_chk_proc_start+0x6e>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   189ca:	2d04      	cmp	r5, #4
   189cc:	d005      	beq.n	189da <ble_ll_ctrl_chk_proc_start+0x4c>
                    ble_ll_ctrl_proc_start(connsm, i, NULL);
   189ce:	2200      	movs	r2, #0
   189d0:	4629      	mov	r1, r5
   189d2:	4620      	mov	r0, r4
   189d4:	f7ff ff9a 	bl	1890c <ble_ll_ctrl_proc_start>
                    break;
   189d8:	e7e2      	b.n	189a0 <ble_ll_ctrl_chk_proc_start+0x12>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   189da:	7863      	ldrb	r3, [r4, #1]
   189dc:	f013 0f08 	tst.w	r3, #8
   189e0:	d0f5      	beq.n	189ce <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   189e2:	2100      	movs	r1, #0
   189e4:	4620      	mov	r0, r4
   189e6:	f001 f981 	bl	19cec <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   189ea:	2301      	movs	r3, #1
   189ec:	fa03 f205 	lsl.w	r2, r3, r5
   189f0:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   189f4:	ea23 0302 	bic.w	r3, r3, r2
   189f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   189fc:	3501      	adds	r5, #1
   189fe:	e7dc      	b.n	189ba <ble_ll_ctrl_chk_proc_start+0x2c>

00018a00 <ble_ll_ctrl_proc_stop>:
{
   18a00:	b538      	push	{r3, r4, r5, lr}
   18a02:	4604      	mov	r4, r0
   18a04:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   18a06:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   18a0a:	428b      	cmp	r3, r1
   18a0c:	d00b      	beq.n	18a26 <ble_ll_ctrl_proc_stop+0x26>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   18a0e:	2101      	movs	r1, #1
   18a10:	40a9      	lsls	r1, r5
   18a12:	f8b4 5044 	ldrh.w	r5, [r4, #68]	; 0x44
   18a16:	ea25 0501 	bic.w	r5, r5, r1
   18a1a:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
    ble_ll_ctrl_chk_proc_start(connsm);
   18a1e:	4620      	mov	r0, r4
   18a20:	f7ff ffb5 	bl	1898e <ble_ll_ctrl_chk_proc_start>
}
   18a24:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   18a26:	30b8      	adds	r0, #184	; 0xb8
   18a28:	f7f4 fa78 	bl	cf1c <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   18a2c:	23ff      	movs	r3, #255	; 0xff
   18a2e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   18a32:	e7ec      	b.n	18a0e <ble_ll_ctrl_proc_stop+0xe>

00018a34 <ble_ll_ctrl_proc_unk_rsp>:
{
   18a34:	b538      	push	{r3, r4, r5, lr}
   18a36:	4604      	mov	r4, r0
    opcode = dptr[0];
   18a38:	780d      	ldrb	r5, [r1, #0]
    switch (opcode) {
   18a3a:	2d14      	cmp	r5, #20
   18a3c:	d831      	bhi.n	18aa2 <ble_ll_ctrl_proc_unk_rsp+0x6e>
   18a3e:	e8df f005 	tbb	[pc, r5]
   18a42:	3012      	.short	0x3012
   18a44:	30303030 	.word	0x30303030
   18a48:	30303030 	.word	0x30303030
   18a4c:	30303030 	.word	0x30303030
   18a50:	30322018 	.word	0x30322018
   18a54:	3028      	.short	0x3028
   18a56:	0b          	.byte	0x0b
   18a57:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   18a58:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   18a5c:	f023 0320 	bic.w	r3, r3, #32
   18a60:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   18a64:	2508      	movs	r5, #8
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   18a66:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   18a6a:	42ab      	cmp	r3, r5
   18a6c:	d01d      	beq.n	18aaa <ble_ll_ctrl_proc_unk_rsp+0x76>
}
   18a6e:	20ff      	movs	r0, #255	; 0xff
   18a70:	bd38      	pop	{r3, r4, r5, pc}
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_PERIPH_INIT);
   18a72:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   18a76:	f023 0308 	bic.w	r3, r3, #8
   18a7a:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   18a7e:	2503      	movs	r5, #3
        break;
   18a80:	e7f1      	b.n	18a66 <ble_ll_ctrl_proc_unk_rsp+0x32>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   18a82:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   18a86:	f023 0302 	bic.w	r3, r3, #2
   18a8a:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   18a8e:	2506      	movs	r5, #6
   18a90:	e7e9      	b.n	18a66 <ble_ll_ctrl_proc_unk_rsp+0x32>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   18a92:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   18a96:	f023 0310 	bic.w	r3, r3, #16
   18a9a:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   18a9e:	2507      	movs	r5, #7
        break;
   18aa0:	e7e1      	b.n	18a66 <ble_ll_ctrl_proc_unk_rsp+0x32>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   18aa2:	250c      	movs	r5, #12
        break;
   18aa4:	e7df      	b.n	18a66 <ble_ll_ctrl_proc_unk_rsp+0x32>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   18aa6:	2506      	movs	r5, #6
   18aa8:	e7dd      	b.n	18a66 <ble_ll_ctrl_proc_unk_rsp+0x32>
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   18aaa:	4629      	mov	r1, r5
   18aac:	4620      	mov	r0, r4
   18aae:	f7ff ffa7 	bl	18a00 <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   18ab2:	2d06      	cmp	r5, #6
   18ab4:	d00a      	beq.n	18acc <ble_ll_ctrl_proc_unk_rsp+0x98>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   18ab6:	2d03      	cmp	r5, #3
   18ab8:	d1d9      	bne.n	18a6e <ble_ll_ctrl_proc_unk_rsp+0x3a>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   18aba:	78e3      	ldrb	r3, [r4, #3]
   18abc:	f013 0f10 	tst.w	r3, #16
   18ac0:	d109      	bne.n	18ad6 <ble_ll_ctrl_proc_unk_rsp+0xa2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   18ac2:	78e3      	ldrb	r3, [r4, #3]
   18ac4:	f36f 1304 	bfc	r3, #4, #1
   18ac8:	70e3      	strb	r3, [r4, #3]
   18aca:	e7d0      	b.n	18a6e <ble_ll_ctrl_proc_unk_rsp+0x3a>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   18acc:	211a      	movs	r1, #26
   18ace:	4620      	mov	r0, r4
   18ad0:	f001 f863 	bl	19b9a <ble_ll_hci_ev_conn_update>
   18ad4:	e7cb      	b.n	18a6e <ble_ll_ctrl_proc_unk_rsp+0x3a>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   18ad6:	211a      	movs	r1, #26
   18ad8:	4620      	mov	r0, r4
   18ada:	f001 f8e1 	bl	19ca0 <ble_ll_hci_ev_rd_rem_used_feat>
   18ade:	e7f0      	b.n	18ac2 <ble_ll_ctrl_proc_unk_rsp+0x8e>

00018ae0 <ble_ll_ctrl_rx_feature_rsp>:
{
   18ae0:	b510      	push	{r4, lr}
   18ae2:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   18ae4:	f7ff fbd8 	bl	18298 <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   18ae8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   18aec:	f013 0f08 	tst.w	r3, #8
   18af0:	d104      	bne.n	18afc <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   18af2:	78e3      	ldrb	r3, [r4, #3]
   18af4:	f013 0f10 	tst.w	r3, #16
   18af8:	d105      	bne.n	18b06 <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   18afa:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   18afc:	2103      	movs	r1, #3
   18afe:	4620      	mov	r0, r4
   18b00:	f7ff ff7e 	bl	18a00 <ble_ll_ctrl_proc_stop>
   18b04:	e7f5      	b.n	18af2 <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   18b06:	2100      	movs	r1, #0
   18b08:	4620      	mov	r0, r4
   18b0a:	f001 f8c9 	bl	19ca0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   18b0e:	78e3      	ldrb	r3, [r4, #3]
   18b10:	f36f 1304 	bfc	r3, #4, #1
   18b14:	70e3      	strb	r3, [r4, #3]
}
   18b16:	e7f0      	b.n	18afa <ble_ll_ctrl_rx_feature_rsp+0x1a>

00018b18 <ble_ll_ctrl_rx_version_ind>:
{
   18b18:	b570      	push	{r4, r5, r6, lr}
   18b1a:	4604      	mov	r4, r0
   18b1c:	460d      	mov	r5, r1
   18b1e:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   18b20:	4608      	mov	r0, r1
   18b22:	f810 3b01 	ldrb.w	r3, [r0], #1
   18b26:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->comp_id = get_le16(dptr + 1);
   18b2a:	f012 f856 	bl	2abda <get_le16>
   18b2e:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
    connsm->sub_vers_nr = get_le16(dptr + 3);
   18b32:	1ce8      	adds	r0, r5, #3
   18b34:	f012 f851 	bl	2abda <get_le16>
   18b38:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   18b3c:	7863      	ldrb	r3, [r4, #1]
   18b3e:	f043 0308 	orr.w	r3, r3, #8
   18b42:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   18b44:	f013 0f04 	tst.w	r3, #4
   18b48:	d007      	beq.n	18b5a <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   18b4a:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   18b4c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   18b50:	f013 0f10 	tst.w	r3, #16
   18b54:	d107      	bne.n	18b66 <ble_ll_ctrl_rx_version_ind+0x4e>
}
   18b56:	4628      	mov	r0, r5
   18b58:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   18b5a:	4631      	mov	r1, r6
   18b5c:	4620      	mov	r0, r4
   18b5e:	f7ff fb51 	bl	18204 <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   18b62:	250c      	movs	r5, #12
   18b64:	e7f2      	b.n	18b4c <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   18b66:	2100      	movs	r1, #0
   18b68:	4620      	mov	r0, r4
   18b6a:	f001 f8bf 	bl	19cec <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   18b6e:	2104      	movs	r1, #4
   18b70:	4620      	mov	r0, r4
   18b72:	f7ff ff45 	bl	18a00 <ble_ll_ctrl_proc_stop>
   18b76:	e7ee      	b.n	18b56 <ble_ll_ctrl_rx_version_ind+0x3e>

00018b78 <ble_ll_ctrl_rx_start_enc_rsp>:
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   18b78:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   18b7c:	2b08      	cmp	r3, #8
   18b7e:	d11c      	bne.n	18bba <ble_ll_ctrl_rx_start_enc_rsp+0x42>
{
   18b80:	b510      	push	{r4, lr}
   18b82:	4604      	mov	r4, r0
    switch (connsm->conn_role) {
   18b84:	79c3      	ldrb	r3, [r0, #7]
   18b86:	2b02      	cmp	r3, #2
   18b88:	d10d      	bne.n	18ba6 <ble_ll_ctrl_rx_start_enc_rsp+0x2e>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   18b8a:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
   18b8e:	2b02      	cmp	r3, #2
   18b90:	d005      	beq.n	18b9e <ble_ll_ctrl_rx_start_enc_rsp+0x26>
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   18b92:	2100      	movs	r1, #0
   18b94:	4620      	mov	r0, r4
   18b96:	f001 f822 	bl	19bde <ble_ll_hci_ev_encrypt_chg>
    return rc;
   18b9a:	2006      	movs	r0, #6
}
   18b9c:	bd10      	pop	{r4, pc}
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   18b9e:	2102      	movs	r1, #2
   18ba0:	f7ff ff2e 	bl	18a00 <ble_ll_ctrl_proc_stop>
   18ba4:	e7f5      	b.n	18b92 <ble_ll_ctrl_rx_start_enc_rsp+0x1a>
        BLE_LL_ASSERT(0);
   18ba6:	f7f3 faf9 	bl	c19c <hal_debugger_connected>
   18baa:	b100      	cbz	r0, 18bae <ble_ll_ctrl_rx_start_enc_rsp+0x36>
   18bac:	be01      	bkpt	0x0001
   18bae:	2300      	movs	r3, #0
   18bb0:	461a      	mov	r2, r3
   18bb2:	4619      	mov	r1, r3
   18bb4:	4618      	mov	r0, r3
   18bb6:	f7f3 fff5 	bl	cba4 <__assert_func>
        return BLE_ERR_MAX;
   18bba:	20ff      	movs	r0, #255	; 0xff
}
   18bbc:	4770      	bx	lr

00018bbe <ble_ll_ctrl_rx_ping_rsp>:
{
   18bbe:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   18bc0:	2107      	movs	r1, #7
   18bc2:	f7ff ff1d 	bl	18a00 <ble_ll_ctrl_proc_stop>
}
   18bc6:	bd08      	pop	{r3, pc}

00018bc8 <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   18bc8:	7803      	ldrb	r3, [r0, #0]
   18bca:	f013 0f40 	tst.w	r3, #64	; 0x40
   18bce:	d124      	bne.n	18c1a <ble_ll_ctrl_rx_conn_param_req+0x52>
{
   18bd0:	b570      	push	{r4, r5, r6, lr}
   18bd2:	4604      	mov	r4, r0
   18bd4:	460d      	mov	r5, r1
   18bd6:	4616      	mov	r6, r2
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   18bd8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   18bdc:	f013 0f40 	tst.w	r3, #64	; 0x40
   18be0:	d009      	beq.n	18bf6 <ble_ll_ctrl_rx_conn_param_req+0x2e>
        switch (connsm->conn_role) {
   18be2:	79c3      	ldrb	r3, [r0, #7]
   18be4:	2b02      	cmp	r3, #2
   18be6:	d10e      	bne.n	18c06 <ble_ll_ctrl_rx_conn_param_req+0x3e>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   18be8:	2106      	movs	r1, #6
   18bea:	f7ff ff09 	bl	18a00 <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   18bee:	2123      	movs	r1, #35	; 0x23
   18bf0:	4620      	mov	r0, r4
   18bf2:	f000 ffd2 	bl	19b9a <ble_ll_hci_ev_conn_update>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   18bf6:	230f      	movs	r3, #15
   18bf8:	4632      	mov	r2, r6
   18bfa:	4629      	mov	r1, r5
   18bfc:	4620      	mov	r0, r4
   18bfe:	f7ff fd7b 	bl	186f8 <ble_ll_ctrl_conn_param_pdu_proc>
    return rsp_opcode;
   18c02:	b2c0      	uxtb	r0, r0
}
   18c04:	bd70      	pop	{r4, r5, r6, pc}
            BLE_LL_ASSERT(0);
   18c06:	f7f3 fac9 	bl	c19c <hal_debugger_connected>
   18c0a:	b100      	cbz	r0, 18c0e <ble_ll_ctrl_rx_conn_param_req+0x46>
   18c0c:	be01      	bkpt	0x0001
   18c0e:	2300      	movs	r3, #0
   18c10:	461a      	mov	r2, r3
   18c12:	4619      	mov	r1, r3
   18c14:	4618      	mov	r0, r3
   18c16:	f7f3 ffc5 	bl	cba4 <__assert_func>
        return BLE_ERR_MAX;
   18c1a:	20ff      	movs	r0, #255	; 0xff
}
   18c1c:	4770      	bx	lr

00018c1e <ble_ll_ctrl_rx_reject_ind>:
{
   18c1e:	b538      	push	{r3, r4, r5, lr}
   18c20:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   18c22:	2a0d      	cmp	r2, #13
   18c24:	d00a      	beq.n	18c3c <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   18c26:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   18c28:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   18c2c:	2b06      	cmp	r3, #6
   18c2e:	d007      	beq.n	18c40 <ble_ll_ctrl_rx_reject_ind+0x22>
   18c30:	2b08      	cmp	r3, #8
   18c32:	d029      	beq.n	18c88 <ble_ll_ctrl_rx_reject_ind+0x6a>
   18c34:	2b02      	cmp	r3, #2
   18c36:	d01b      	beq.n	18c70 <ble_ll_ctrl_rx_reject_ind+0x52>
}
   18c38:	20ff      	movs	r0, #255	; 0xff
   18c3a:	bd38      	pop	{r3, r4, r5, pc}
        ble_error = dptr[0];
   18c3c:	780d      	ldrb	r5, [r1, #0]
   18c3e:	e7f3      	b.n	18c28 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   18c40:	2a11      	cmp	r2, #17
   18c42:	d1f9      	bne.n	18c38 <ble_ll_ctrl_rx_reject_ind+0x1a>
            switch (connsm->conn_role) {
   18c44:	79e3      	ldrb	r3, [r4, #7]
   18c46:	2b02      	cmp	r3, #2
   18c48:	d108      	bne.n	18c5c <ble_ll_ctrl_rx_reject_ind+0x3e>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   18c4a:	2106      	movs	r1, #6
   18c4c:	4620      	mov	r0, r4
   18c4e:	f7ff fed7 	bl	18a00 <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   18c52:	4629      	mov	r1, r5
   18c54:	4620      	mov	r0, r4
   18c56:	f000 ffa0 	bl	19b9a <ble_ll_hci_ev_conn_update>
                break;
   18c5a:	e7ed      	b.n	18c38 <ble_ll_ctrl_rx_reject_ind+0x1a>
                BLE_LL_ASSERT(0);
   18c5c:	f7f3 fa9e 	bl	c19c <hal_debugger_connected>
   18c60:	b100      	cbz	r0, 18c64 <ble_ll_ctrl_rx_reject_ind+0x46>
   18c62:	be01      	bkpt	0x0001
   18c64:	2300      	movs	r3, #0
   18c66:	461a      	mov	r2, r3
   18c68:	4619      	mov	r1, r3
   18c6a:	4618      	mov	r0, r3
   18c6c:	f7f3 ff9a 	bl	cba4 <__assert_func>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   18c70:	2102      	movs	r1, #2
   18c72:	4620      	mov	r0, r4
   18c74:	f7ff fec4 	bl	18a00 <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   18c78:	4629      	mov	r1, r5
   18c7a:	4620      	mov	r0, r4
   18c7c:	f000 ffaf 	bl	19bde <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   18c80:	2301      	movs	r3, #1
   18c82:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        break;
   18c86:	e7d7      	b.n	18c38 <ble_ll_ctrl_rx_reject_ind+0x1a>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   18c88:	2108      	movs	r1, #8
   18c8a:	4620      	mov	r0, r4
   18c8c:	f7ff feb8 	bl	18a00 <ble_ll_ctrl_proc_stop>
        break;
   18c90:	e7d2      	b.n	18c38 <ble_ll_ctrl_rx_reject_ind+0x1a>
	...

00018c94 <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   18c94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c98:	4604      	mov	r4, r0
   18c9a:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   18c9c:	680d      	ldr	r5, [r1, #0]
    len = dptr[1];
   18c9e:	786b      	ldrb	r3, [r5, #1]
    opcode = dptr[2];
   18ca0:	78ae      	ldrb	r6, [r5, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   18ca2:	2e29      	cmp	r6, #41	; 0x29
   18ca4:	f200 8198 	bhi.w	18fd8 <ble_ll_ctrl_rx_pdu+0x344>
   18ca8:	f105 0901 	add.w	r9, r5, #1
   18cac:	f105 0803 	add.w	r8, r5, #3
   18cb0:	3b01      	subs	r3, #1
   18cb2:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   18cb4:	4ab6      	ldr	r2, [pc, #728]	; (18f90 <ble_ll_ctrl_rx_pdu+0x2fc>)
   18cb6:	5d92      	ldrb	r2, [r2, r6]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   18cb8:	429a      	cmp	r2, r3
   18cba:	f040 8194 	bne.w	18fe6 <ble_ll_ctrl_rx_pdu+0x352>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   18cbe:	1ef3      	subs	r3, r6, #3
   18cc0:	2b24      	cmp	r3, #36	; 0x24
   18cc2:	d825      	bhi.n	18d10 <ble_ll_ctrl_rx_pdu+0x7c>
   18cc4:	e8df f003 	tbb	[pc, r3]
   18cc8:	244d244d 	.word	0x244d244d
   18ccc:	4d242424 	.word	0x4d242424
   18cd0:	57242424 	.word	0x57242424
   18cd4:	48245252 	.word	0x48245252
   18cd8:	43241324 	.word	0x43241324
   18cdc:	243e2424 	.word	0x243e2424
   18ce0:	24241824 	.word	0x24241824
   18ce4:	24242424 	.word	0x24242424
   18ce8:	5c242424 	.word	0x5c242424
   18cec:	5c          	.byte	0x5c
   18ced:	00          	.byte	0x00
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   18cee:	f04f 0b20 	mov.w	fp, #32
   18cf2:	f04f 0a00 	mov.w	sl, #0
   18cf6:	e003      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   18cf8:	f04f 7b00 	mov.w	fp, #33554432	; 0x2000000
   18cfc:	f04f 0a00 	mov.w	sl, #0
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   18d00:	f7fb fe3e 	bl	14980 <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   18d04:	ea0b 0200 	and.w	r2, fp, r0
   18d08:	ea0a 0301 	and.w	r3, sl, r1
   18d0c:	4313      	orrs	r3, r2
   18d0e:	d03c      	beq.n	18d8a <ble_ll_ctrl_rx_pdu+0xf6>
        }
    }

    /* Process opcode */
    rsp_opcode = BLE_ERR_MAX;
    switch (opcode) {
   18d10:	2e15      	cmp	r6, #21
   18d12:	d871      	bhi.n	18df8 <ble_ll_ctrl_rx_pdu+0x164>
   18d14:	e8df f016 	tbh	[pc, r6, lsl #1]
   18d18:	00800076 	.word	0x00800076
   18d1c:	00fd0070 	.word	0x00fd0070
   18d20:	01110107 	.word	0x01110107
   18d24:	00c50119 	.word	0x00c50119
   18d28:	00dc00d0 	.word	0x00dc00d0
   18d2c:	01290121 	.word	0x01290121
   18d30:	015400e6 	.word	0x015400e6
   18d34:	013e00f1 	.word	0x013e00f1
   18d38:	01540149 	.word	0x01540149
   18d3c:	0133016e 	.word	0x0133016e
   18d40:	00a7008a 	.word	0x00a7008a
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   18d44:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   18d48:	f04f 0a00 	mov.w	sl, #0
   18d4c:	e7d8      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   18d4e:	f44f 6b10 	mov.w	fp, #2304	; 0x900
   18d52:	f04f 0a00 	mov.w	sl, #0
   18d56:	e7d3      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_PING;
   18d58:	f04f 0b10 	mov.w	fp, #16
   18d5c:	f04f 0a00 	mov.w	sl, #0
   18d60:	e7ce      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   18d62:	f04f 0b01 	mov.w	fp, #1
   18d66:	f04f 0a00 	mov.w	sl, #0
   18d6a:	e7c9      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   18d6c:	f04f 0b02 	mov.w	fp, #2
   18d70:	f04f 0a00 	mov.w	sl, #0
   18d74:	e7c4      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_PERIPH_INIT;
   18d76:	f04f 0b08 	mov.w	fp, #8
   18d7a:	f04f 0a00 	mov.w	sl, #0
   18d7e:	e7bf      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
        feature = BLE_LL_FEAT_CONN_SUBRATING;
   18d80:	f04f 0b00 	mov.w	fp, #0
   18d84:	f04f 0a20 	mov.w	sl, #32
   18d88:	e7ba      	b.n	18d00 <ble_ll_ctrl_rx_pdu+0x6c>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   18d8a:	2e03      	cmp	r6, #3
   18d8c:	d024      	beq.n	18dd8 <ble_ll_ctrl_rx_pdu+0x144>
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   18d8e:	f04f 0807 	mov.w	r8, #7
    int rc = 0;
   18d92:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18d96:	46ca      	mov	sl, r9
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   18d98:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   18d9c:	f000 813c 	beq.w	19018 <ble_ll_ctrl_rx_pdu+0x384>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   18da0:	f885 8000 	strb.w	r8, [r5]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   18da4:	f1b8 0f07 	cmp.w	r8, #7
   18da8:	f000 813a 	beq.w	19020 <ble_ll_ctrl_rx_pdu+0x38c>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   18dac:	4b78      	ldr	r3, [pc, #480]	; (18f90 <ble_ll_ctrl_rx_pdu+0x2fc>)
   18dae:	f813 3008 	ldrb.w	r3, [r3, r8]
   18db2:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   18db4:	b2db      	uxtb	r3, r3
   18db6:	2203      	movs	r2, #3
   18db8:	4639      	mov	r1, r7
   18dba:	4620      	mov	r0, r4
   18dbc:	f7fe fa52 	bl	17264 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   18dc0:	f1ba 0f00 	cmp.w	sl, #0
   18dc4:	f040 812e 	bne.w	19024 <ble_ll_ctrl_rx_pdu+0x390>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT, NULL);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   18dc8:	78e3      	ldrb	r3, [r4, #3]
   18dca:	f013 0f20 	tst.w	r3, #32
   18dce:	f040 812f 	bne.w	19030 <ble_ll_ctrl_rx_pdu+0x39c>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   18dd2:	4648      	mov	r0, r9
   18dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   18dd8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   18ddc:	f013 0f04 	tst.w	r3, #4
   18de0:	d005      	beq.n	18dee <ble_ll_ctrl_rx_pdu+0x15a>
                    rspbuf[1] = opcode;
   18de2:	706e      	strb	r6, [r5, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   18de4:	231a      	movs	r3, #26
   18de6:	70ab      	strb	r3, [r5, #2]
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   18de8:	f04f 0811 	mov.w	r8, #17
   18dec:	e7d1      	b.n	18d92 <ble_ll_ctrl_rx_pdu+0xfe>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   18dee:	231a      	movs	r3, #26
   18df0:	706b      	strb	r3, [r5, #1]
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   18df2:	f04f 080d 	mov.w	r8, #13
   18df6:	e7cc      	b.n	18d92 <ble_ll_ctrl_rx_pdu+0xfe>
    restart_encryption = 0;
   18df8:	f04f 0900 	mov.w	r9, #0
   18dfc:	46ca      	mov	sl, r9
   18dfe:	f04f 08ff 	mov.w	r8, #255	; 0xff
   18e02:	e7c9      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   18e04:	4641      	mov	r1, r8
   18e06:	4620      	mov	r0, r4
   18e08:	f7ff fb20 	bl	1844c <ble_ll_ctrl_rx_conn_update>
   18e0c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18e10:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18e14:	46ca      	mov	sl, r9
        break;
   18e16:	e7bf      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   18e18:	4641      	mov	r1, r8
   18e1a:	4620      	mov	r0, r4
   18e1c:	f7ff fb52 	bl	184c4 <ble_ll_ctrl_rx_chanmap_req>
   18e20:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18e24:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18e28:	46ca      	mov	sl, r9
        break;
   18e2a:	e7b5      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   18e2c:	4641      	mov	r1, r8
   18e2e:	4620      	mov	r0, r4
   18e30:	f7ff fb6e 	bl	18510 <ble_ll_ctrl_len_proc>
   18e34:	4682      	mov	sl, r0
   18e36:	2800      	cmp	r0, #0
   18e38:	f040 80e2 	bne.w	19000 <ble_ll_ctrl_rx_pdu+0x36c>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   18e3c:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   18e40:	2b08      	cmp	r3, #8
   18e42:	d008      	beq.n	18e56 <ble_ll_ctrl_rx_pdu+0x1c2>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   18e44:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   18e48:	f413 7f80 	tst.w	r3, #256	; 0x100
   18e4c:	d003      	beq.n	18e56 <ble_ll_ctrl_rx_pdu+0x1c2>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   18e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   18e52:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   18e56:	4629      	mov	r1, r5
   18e58:	4620      	mov	r0, r4
   18e5a:	f7ff f9e6 	bl	1822a <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   18e5e:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   18e60:	f04f 0815 	mov.w	r8, #21
        break;
   18e64:	e798      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   18e66:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
   18e6a:	2b08      	cmp	r3, #8
   18e6c:	d005      	beq.n	18e7a <ble_ll_ctrl_rx_pdu+0x1e6>
    int rc = 0;
   18e6e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18e72:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   18e74:	f04f 08ff 	mov.w	r8, #255	; 0xff
   18e78:	e78e      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   18e7a:	4641      	mov	r1, r8
   18e7c:	4620      	mov	r0, r4
   18e7e:	f7ff fb47 	bl	18510 <ble_ll_ctrl_len_proc>
   18e82:	4681      	mov	r9, r0
   18e84:	b940      	cbnz	r0, 18e98 <ble_ll_ctrl_rx_pdu+0x204>
    rsp_opcode = BLE_ERR_MAX;
   18e86:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   18e8a:	2108      	movs	r1, #8
   18e8c:	4620      	mov	r0, r4
   18e8e:	f7ff fdb7 	bl	18a00 <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   18e92:	f04f 0a00 	mov.w	sl, #0
   18e96:	e77f      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
                rc = -1;
   18e98:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   18e9c:	f04f 0807 	mov.w	r8, #7
   18ea0:	e7f3      	b.n	18e8a <ble_ll_ctrl_rx_pdu+0x1f6>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   18ea2:	464a      	mov	r2, r9
   18ea4:	4641      	mov	r1, r8
   18ea6:	4620      	mov	r0, r4
   18ea8:	f7ff fdc4 	bl	18a34 <ble_ll_ctrl_proc_unk_rsp>
   18eac:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18eb0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18eb4:	46ca      	mov	sl, r9
        break;
   18eb6:	e76f      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   18eb8:	4633      	mov	r3, r6
   18eba:	462a      	mov	r2, r5
   18ebc:	4641      	mov	r1, r8
   18ebe:	4620      	mov	r0, r4
   18ec0:	f7ff f9fe 	bl	182c0 <ble_ll_ctrl_rx_feature_req>
   18ec4:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18ec8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18ecc:	46ca      	mov	sl, r9
        break;
   18ece:	e763      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   18ed0:	4641      	mov	r1, r8
   18ed2:	4620      	mov	r0, r4
   18ed4:	f7ff fe04 	bl	18ae0 <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   18ed8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18edc:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   18ede:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   18ee2:	e759      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   18ee4:	464a      	mov	r2, r9
   18ee6:	4641      	mov	r1, r8
   18ee8:	4620      	mov	r0, r4
   18eea:	f7ff fe15 	bl	18b18 <ble_ll_ctrl_rx_version_ind>
   18eee:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18ef2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18ef6:	46ca      	mov	sl, r9
        break;
   18ef8:	e74e      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   18efa:	4633      	mov	r3, r6
   18efc:	462a      	mov	r2, r5
   18efe:	4641      	mov	r1, r8
   18f00:	4620      	mov	r0, r4
   18f02:	f7ff f9dd 	bl	182c0 <ble_ll_ctrl_rx_feature_req>
   18f06:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18f0a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f0e:	46ca      	mov	sl, r9
        break;
   18f10:	e742      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   18f12:	464a      	mov	r2, r9
   18f14:	4641      	mov	r1, r8
   18f16:	4620      	mov	r0, r4
   18f18:	f7ff fb2d 	bl	18576 <ble_ll_ctrl_rx_enc_req>
   18f1c:	4680      	mov	r8, r0
    int rc = 0;
   18f1e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f22:	46ca      	mov	sl, r9
        break;
   18f24:	e738      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   18f26:	4641      	mov	r1, r8
   18f28:	4620      	mov	r0, r4
   18f2a:	f7ff fb66 	bl	185fa <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   18f2e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f32:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   18f34:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   18f38:	e72e      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   18f3a:	4620      	mov	r0, r4
   18f3c:	f7ff f84a 	bl	17fd4 <ble_ll_ctrl_rx_start_enc_req>
   18f40:	4680      	mov	r8, r0
    int rc = 0;
   18f42:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f46:	46ca      	mov	sl, r9
        break;
   18f48:	e726      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   18f4a:	4620      	mov	r0, r4
   18f4c:	f7ff fe14 	bl	18b78 <ble_ll_ctrl_rx_start_enc_rsp>
   18f50:	4680      	mov	r8, r0
    int rc = 0;
   18f52:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f56:	46ca      	mov	sl, r9
        break;
   18f58:	e71e      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   18f5a:	4620      	mov	r0, r4
   18f5c:	f7ff f826 	bl	17fac <ble_ll_ctrl_rx_pause_enc_req>
   18f60:	4680      	mov	r8, r0
    int rc = 0;
   18f62:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f66:	46ca      	mov	sl, r9
        break;
   18f68:	e716      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   18f6a:	4620      	mov	r0, r4
   18f6c:	f7ff f842 	bl	17ff4 <ble_ll_ctrl_rx_pause_enc_rsp>
   18f70:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   18f72:	280b      	cmp	r0, #11
   18f74:	d04b      	beq.n	1900e <ble_ll_ctrl_rx_pdu+0x37a>
    int rc = 0;
   18f76:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f7a:	46ca      	mov	sl, r9
   18f7c:	e70c      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   18f7e:	4620      	mov	r0, r4
   18f80:	f7ff fe1d 	bl	18bbe <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   18f84:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18f88:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   18f8a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   18f8e:	e703      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
   18f90:	0002dd1c 	.word	0x0002dd1c
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   18f94:	462a      	mov	r2, r5
   18f96:	4641      	mov	r1, r8
   18f98:	4620      	mov	r0, r4
   18f9a:	f7ff fe15 	bl	18bc8 <ble_ll_ctrl_rx_conn_param_req>
   18f9e:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18fa2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18fa6:	46ca      	mov	sl, r9
        break;
   18fa8:	e6f6      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   18faa:	462a      	mov	r2, r5
   18fac:	4641      	mov	r1, r8
   18fae:	4620      	mov	r0, r4
   18fb0:	f7ff fc54 	bl	1885c <ble_ll_ctrl_rx_conn_param_rsp>
   18fb4:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18fb8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18fbc:	46ca      	mov	sl, r9
        break;
   18fbe:	e6eb      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   18fc0:	464b      	mov	r3, r9
   18fc2:	4632      	mov	r2, r6
   18fc4:	4641      	mov	r1, r8
   18fc6:	4620      	mov	r0, r4
   18fc8:	f7ff fe29 	bl	18c1e <ble_ll_ctrl_rx_reject_ind>
   18fcc:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   18fd0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18fd4:	46ca      	mov	sl, r9
        break;
   18fd6:	e6df      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rc = -1;
   18fd8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   18fdc:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   18fe0:	f04f 0807 	mov.w	r8, #7
   18fe4:	e6d8      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        rc = -1;
   18fe6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   18fea:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   18fee:	f04f 0807 	mov.w	r8, #7
   18ff2:	e6d1      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
    int rc = 0;
   18ff4:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   18ff8:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   18ffa:	f04f 0813 	mov.w	r8, #19
   18ffe:	e6cb      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
            rc  = -1;
   19000:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   19004:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   19008:	f04f 0807 	mov.w	r8, #7
   1900c:	e6c4      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
    int rc = 0;
   1900e:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   19012:	f04f 0a01 	mov.w	sl, #1
   19016:	e6bf      	b.n	18d98 <ble_ll_ctrl_rx_pdu+0x104>
        os_mbuf_free_chain(om);
   19018:	4638      	mov	r0, r7
   1901a:	f7f4 fa2b 	bl	d474 <os_mbuf_free_chain>
   1901e:	e6d3      	b.n	18dc8 <ble_ll_ctrl_rx_pdu+0x134>
            rspbuf[1] = opcode;
   19020:	706e      	strb	r6, [r5, #1]
   19022:	e6c3      	b.n	18dac <ble_ll_ctrl_rx_pdu+0x118>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT, NULL);
   19024:	2200      	movs	r2, #0
   19026:	2102      	movs	r1, #2
   19028:	4620      	mov	r0, r4
   1902a:	f7ff f993 	bl	18354 <ble_ll_ctrl_proc_init>
   1902e:	e6cb      	b.n	18dc8 <ble_ll_ctrl_rx_pdu+0x134>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   19030:	78e3      	ldrb	r3, [r4, #3]
   19032:	f36f 1345 	bfc	r3, #5, #1
   19036:	70e3      	strb	r3, [r4, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   19038:	4620      	mov	r0, r4
   1903a:	f7ff fc8f 	bl	1895c <ble_ll_ctrl_initiate_dle>
    return rc;
   1903e:	e6c8      	b.n	18dd2 <ble_ll_ctrl_rx_pdu+0x13e>

00019040 <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   19040:	b570      	push	{r4, r5, r6, lr}
   19042:	4606      	mov	r6, r0
   19044:	460c      	mov	r4, r1
   19046:	4615      	mov	r5, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   19048:	2110      	movs	r1, #16
   1904a:	201b      	movs	r0, #27
   1904c:	f7f4 feb9 	bl	ddc2 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   19050:	b1d8      	cbz	r0, 1908a <ble_ll_ctrl_reject_ind_send+0x4a>
   19052:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   19054:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   19056:	2c03      	cmp	r4, #3
   19058:	d00a      	beq.n	19070 <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   1905a:	2211      	movs	r2, #17
   1905c:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   1905e:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   19060:	709d      	strb	r5, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   19062:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   19064:	2203      	movs	r2, #3
   19066:	4630      	mov	r0, r6
   19068:	f7fe f8fc 	bl	17264 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   1906c:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   1906e:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   19070:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
   19074:	f012 0f04 	tst.w	r2, #4
   19078:	d104      	bne.n	19084 <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   1907a:	220d      	movs	r2, #13
   1907c:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   1907e:	705d      	strb	r5, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   19080:	2302      	movs	r3, #2
   19082:	e7ef      	b.n	19064 <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   19084:	2211      	movs	r2, #17
   19086:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
   19088:	e7e9      	b.n	1905e <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   1908a:	2001      	movs	r0, #1
    return rc;
   1908c:	e7ef      	b.n	1906e <ble_ll_ctrl_reject_ind_send+0x2e>

0001908e <ble_ll_ctrl_tx_done>:
 *
 * @return int
 */
int
ble_ll_ctrl_tx_done(struct os_mbuf *txpdu, struct ble_ll_conn_sm *connsm)
{
   1908e:	b538      	push	{r3, r4, r5, lr}
   19090:	4604      	mov	r4, r0
                                     connsm->event_cntr,
                                     txpdu->om_data, txpdu->om_len);
#endif

    rc = 0;
    opcode = txpdu->om_data[0];
   19092:	6802      	ldr	r2, [r0, #0]
   19094:	7813      	ldrb	r3, [r2, #0]
    switch (opcode) {
   19096:	3b02      	subs	r3, #2
   19098:	2b0f      	cmp	r3, #15
   1909a:	d859      	bhi.n	19150 <ble_ll_ctrl_tx_done+0xc2>
   1909c:	e8df f003 	tbb	[pc, r3]
   190a0:	58332e08 	.word	0x58332e08
   190a4:	5858583c 	.word	0x5858583c
   190a8:	29584e2e 	.word	0x29584e2e
   190ac:	0f585858 	.word	0x0f585858
    case BLE_LL_CTRL_TERMINATE_IND:
        connsm->csmflags.cfbit.terminate_ind_txd = 1;
   190b0:	780b      	ldrb	r3, [r1, #0]
   190b2:	f043 0302 	orr.w	r3, r3, #2
   190b6:	700b      	strb	r3, [r1, #0]
        rc = -1;
   190b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        break;
   190bc:	e049      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
    case BLE_LL_CTRL_REJECT_IND_EXT:
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   190be:	f891 3037 	ldrb.w	r3, [r1, #55]	; 0x37
   190c2:	2b06      	cmp	r3, #6
   190c4:	d008      	beq.n	190d8 <ble_ll_ctrl_tx_done+0x4a>
                connsm->reject_reason = txpdu->om_data[2];
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
            }
        }
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   190c6:	f891 3118 	ldrb.w	r3, [r1, #280]	; 0x118
   190ca:	2b02      	cmp	r3, #2
   190cc:	d946      	bls.n	1915c <ble_ll_ctrl_tx_done+0xce>
            connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   190ce:	2301      	movs	r3, #1
   190d0:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   190d4:	2500      	movs	r5, #0
   190d6:	e03c      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   190d8:	7853      	ldrb	r3, [r2, #1]
   190da:	2b0f      	cmp	r3, #15
   190dc:	d1f3      	bne.n	190c6 <ble_ll_ctrl_tx_done+0x38>
                            txpdu->om_data[2] != BLE_ERR_LMP_COLLISION) {
   190de:	7893      	ldrb	r3, [r2, #2]
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   190e0:	2b23      	cmp	r3, #35	; 0x23
   190e2:	d0f0      	beq.n	190c6 <ble_ll_ctrl_tx_done+0x38>
                connsm->reject_reason = txpdu->om_data[2];
   190e4:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
   190e8:	784b      	ldrb	r3, [r1, #1]
   190ea:	f043 0302 	orr.w	r3, r3, #2
   190ee:	704b      	strb	r3, [r1, #1]
   190f0:	e7e9      	b.n	190c6 <ble_ll_ctrl_tx_done+0x38>
        }
#endif
        break;
    case BLE_LL_CTRL_REJECT_IND:
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   190f2:	2301      	movs	r3, #1
   190f4:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   190f8:	2500      	movs	r5, #0
#endif
        break;
   190fa:	e02a      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    case BLE_LL_CTRL_PAUSE_ENC_REQ:
        /* note: fall-through intentional */
    case BLE_LL_CTRL_ENC_REQ:
        connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_WAIT;
   190fc:	2304      	movs	r3, #4
   190fe:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   19102:	2500      	movs	r5, #0
        break;
   19104:	e025      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
    case BLE_LL_CTRL_ENC_RSP:
        connsm->enc_data.enc_state = CONN_ENC_S_LTK_REQ_WAIT;
   19106:	2309      	movs	r3, #9
   19108:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
        connsm->csmflags.cfbit.send_ltk_req = 1;
   1910c:	788b      	ldrb	r3, [r1, #2]
   1910e:	f043 0301 	orr.w	r3, r3, #1
   19112:	708b      	strb	r3, [r1, #2]
    rc = 0;
   19114:	2500      	movs	r5, #0
        break;
   19116:	e01c      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    case BLE_LL_CTRL_START_ENC_RSP:
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   19118:	79cb      	ldrb	r3, [r1, #7]
   1911a:	2b02      	cmp	r3, #2
   1911c:	d001      	beq.n	19122 <ble_ll_ctrl_tx_done+0x94>
    rc = 0;
   1911e:	2500      	movs	r5, #0
   19120:	e017      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
            connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   19122:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
            if (CONN_F_LE_PING_SUPP(connsm)) {
   19126:	788b      	ldrb	r3, [r1, #2]
   19128:	f013 0f08 	tst.w	r3, #8
   1912c:	d101      	bne.n	19132 <ble_ll_ctrl_tx_done+0xa4>
    rc = 0;
   1912e:	2500      	movs	r5, #0
   19130:	e00f      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   19132:	4608      	mov	r0, r1
   19134:	f7fd fc28 	bl	16988 <ble_ll_conn_auth_pyld_timer_start>
    rc = 0;
   19138:	2500      	movs	r5, #0
   1913a:	e00a      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
            }
        }
        break;
    case BLE_LL_CTRL_PAUSE_ENC_RSP:
        if (connsm->conn_role == BLE_LL_CONN_ROLE_PERIPHERAL) {
   1913c:	79cb      	ldrb	r3, [r1, #7]
   1913e:	2b02      	cmp	r3, #2
   19140:	d001      	beq.n	19146 <ble_ll_ctrl_tx_done+0xb8>
    rc = 0;
   19142:	2500      	movs	r5, #0
   19144:	e005      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSE_ENC_RSP_WAIT;
   19146:	2305      	movs	r3, #5
   19148:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   1914c:	2500      	movs	r5, #0
   1914e:	e000      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>
    opcode = txpdu->om_data[0];
   19150:	2500      	movs	r5, #0
#endif
    default:
        break;
    }

    os_mbuf_free_chain(txpdu);
   19152:	4620      	mov	r0, r4
   19154:	f7f4 f98e 	bl	d474 <os_mbuf_free_chain>
    return rc;
}
   19158:	4628      	mov	r0, r5
   1915a:	bd38      	pop	{r3, r4, r5, pc}
    rc = 0;
   1915c:	2500      	movs	r5, #0
   1915e:	e7f8      	b.n	19152 <ble_ll_ctrl_tx_done+0xc4>

00019160 <ble_ll_ctrl_init_conn_sm>:

void
ble_ll_ctrl_init_conn_sm(struct ble_ll_conn_sm *connsm)
{
   19160:	b508      	push	{r3, lr}
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   19162:	4603      	mov	r3, r0
   19164:	4a02      	ldr	r2, [pc, #8]	; (19170 <ble_ll_ctrl_init_conn_sm+0x10>)
   19166:	4903      	ldr	r1, [pc, #12]	; (19174 <ble_ll_ctrl_init_conn_sm+0x14>)
   19168:	30b8      	adds	r0, #184	; 0xb8
   1916a:	f7f3 fec9 	bl	cf00 <os_callout_init>
    ble_npl_callout_init(&connsm->ctrl_proc_rsp_timer, &g_ble_ll_data.ll_evq,
                         ble_ll_ctrl_proc_rsp_timer_cb, connsm);
}
   1916e:	bd08      	pop	{r3, pc}
   19170:	00018505 	.word	0x00018505
   19174:	20001fc8 	.word	0x20001fc8

00019178 <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   19178:	2001      	movs	r0, #1
   1917a:	4770      	bx	lr

0001917c <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   1917c:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   1917e:	2209      	movs	r2, #9
   19180:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   19182:	2000      	movs	r0, #0
   19184:	7058      	strb	r0, [r3, #1]
   19186:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   19188:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   1918a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1918e:	711a      	strb	r2, [r3, #4]
   19190:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   19192:	7198      	strb	r0, [r3, #6]
   19194:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   19196:	2308      	movs	r3, #8
   19198:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   1919a:	4770      	bx	lr

0001919c <ble_ll_hci_rd_local_supp_feat>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_supp_feat(uint8_t *rspbuf, uint8_t *rsplen)
{
   1919c:	4603      	mov	r3, r0
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   1919e:	2000      	movs	r0, #0
   191a0:	7018      	strb	r0, [r3, #0]
   191a2:	7058      	strb	r0, [r3, #1]
   191a4:	7098      	strb	r0, [r3, #2]
   191a6:	70d8      	strb	r0, [r3, #3]
   191a8:	2260      	movs	r2, #96	; 0x60
   191aa:	711a      	strb	r2, [r3, #4]
   191ac:	7158      	strb	r0, [r3, #5]
   191ae:	7198      	strb	r0, [r3, #6]
   191b0:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   191b2:	2308      	movs	r3, #8
   191b4:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   191b6:	4770      	bx	lr

000191b8 <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   191b8:	4b04      	ldr	r3, [pc, #16]	; (191cc <ble_ll_hci_rd_bd_addr+0x14>)
   191ba:	681a      	ldr	r2, [r3, #0]
   191bc:	6002      	str	r2, [r0, #0]
   191be:	889b      	ldrh	r3, [r3, #4]
   191c0:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   191c2:	2306      	movs	r3, #6
   191c4:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   191c6:	2000      	movs	r0, #0
   191c8:	4770      	bx	lr
   191ca:	bf00      	nop
   191cc:	2000221c 	.word	0x2000221c

000191d0 <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   191d0:	2908      	cmp	r1, #8
   191d2:	d106      	bne.n	191e2 <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   191d4:	6801      	ldr	r1, [r0, #0]
   191d6:	6842      	ldr	r2, [r0, #4]
   191d8:	4b03      	ldr	r3, [pc, #12]	; (191e8 <ble_ll_hci_set_le_event_mask+0x18>)
   191da:	6019      	str	r1, [r3, #0]
   191dc:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   191de:	2000      	movs	r0, #0
   191e0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   191e2:	2012      	movs	r0, #18
}
   191e4:	4770      	bx	lr
   191e6:	bf00      	nop
   191e8:	20002520 	.word	0x20002520

000191ec <ble_ll_hci_le_read_bufsize>:
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

#if MYNEWT_VAL(BLE_LL_ROLE_CENTRAL) || MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL)
    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   191ec:	4b04      	ldr	r3, [pc, #16]	; (19200 <ble_ll_hci_le_read_bufsize+0x14>)
   191ee:	895a      	ldrh	r2, [r3, #10]
   191f0:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   191f2:	7a5b      	ldrb	r3, [r3, #9]
   191f4:	7083      	strb	r3, [r0, #2]
    /* TODO check if can just not support this command */
    rp->data_len = 0;
    rp->data_packets = 0;
#endif

    *rsplen = sizeof(*rp);
   191f6:	2303      	movs	r3, #3
   191f8:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   191fa:	2000      	movs	r0, #0
   191fc:	4770      	bx	lr
   191fe:	bf00      	nop
   19200:	20001fb8 	.word	0x20001fb8

00019204 <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   19204:	4b04      	ldr	r3, [pc, #16]	; (19218 <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   19206:	7a5a      	ldrb	r2, [r3, #9]
   19208:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   1920a:	895b      	ldrh	r3, [r3, #10]
   1920c:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   1920e:	2304      	movs	r3, #4
   19210:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19212:	2000      	movs	r0, #0
   19214:	4770      	bx	lr
   19216:	bf00      	nop
   19218:	2000233c 	.word	0x2000233c

0001921c <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   1921c:	4b06      	ldr	r3, [pc, #24]	; (19238 <ble_ll_hci_le_rd_max_data_len+0x1c>)
   1921e:	799a      	ldrb	r2, [r3, #6]
   19220:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   19222:	8a5a      	ldrh	r2, [r3, #18]
   19224:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   19226:	79da      	ldrb	r2, [r3, #7]
   19228:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   1922a:	8a9b      	ldrh	r3, [r3, #20]
   1922c:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   1922e:	2308      	movs	r3, #8
   19230:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19232:	2000      	movs	r0, #0
   19234:	4770      	bx	lr
   19236:	bf00      	nop
   19238:	2000233c 	.word	0x2000233c

0001923c <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   1923c:	380d      	subs	r0, #13
   1923e:	2837      	cmp	r0, #55	; 0x37
   19240:	d81f      	bhi.n	19282 <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   19242:	e8df f000 	tbb	[pc, r0]
   19246:	1e1c      	.short	0x1e1c
   19248:	1e1e1e1e 	.word	0x1e1e1e1e
   1924c:	1c1e1e1c 	.word	0x1c1e1e1c
   19250:	1e1c1e1e 	.word	0x1e1c1e1e
   19254:	1e1e1e1e 	.word	0x1e1e1e1e
   19258:	1e1e1e1e 	.word	0x1e1e1e1e
   1925c:	1c1c1e1e 	.word	0x1c1c1e1e
   19260:	1e1e1e1e 	.word	0x1e1e1e1e
   19264:	1e1e1e1e 	.word	0x1e1e1e1e
   19268:	1c1e1e1e 	.word	0x1c1e1e1e
   1926c:	1e1e1e1e 	.word	0x1e1e1e1e
   19270:	1e1e1e1e 	.word	0x1e1e1e1e
   19274:	1e1e1e1e 	.word	0x1e1e1e1e
   19278:	1e1e1e1e 	.word	0x1e1e1e1e
   1927c:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_REQ_PEER_SCA:
#endif
        rc = 1;
        break;
    default:
        rc = 0;
   1927e:	2001      	movs	r0, #1
   19280:	4770      	bx	lr
   19282:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   19284:	4770      	bx	lr
	...

00019288 <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   19288:	4b04      	ldr	r3, [pc, #16]	; (1929c <ble_ll_read_rf_path_compensation+0x14>)
   1928a:	881b      	ldrh	r3, [r3, #0]
   1928c:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   1928e:	4b04      	ldr	r3, [pc, #16]	; (192a0 <ble_ll_read_rf_path_compensation+0x18>)
   19290:	881b      	ldrh	r3, [r3, #0]
   19292:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);
   19294:	2304      	movs	r3, #4
   19296:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19298:	2000      	movs	r0, #0
   1929a:	4770      	bx	lr
   1929c:	20002528 	.word	0x20002528
   192a0:	2000252a 	.word	0x2000252a

000192a4 <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   192a4:	2908      	cmp	r1, #8
   192a6:	d106      	bne.n	192b6 <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   192a8:	6801      	ldr	r1, [r0, #0]
   192aa:	6842      	ldr	r2, [r0, #4]
   192ac:	4b03      	ldr	r3, [pc, #12]	; (192bc <ble_ll_hci_cb_set_event_mask+0x18>)
   192ae:	6019      	str	r1, [r3, #0]
   192b0:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   192b2:	2000      	movs	r0, #0
   192b4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   192b6:	2012      	movs	r0, #18
}
   192b8:	4770      	bx	lr
   192ba:	bf00      	nop
   192bc:	20002510 	.word	0x20002510

000192c0 <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   192c0:	2908      	cmp	r1, #8
   192c2:	d106      	bne.n	192d2 <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   192c4:	6801      	ldr	r1, [r0, #0]
   192c6:	6842      	ldr	r2, [r0, #4]
   192c8:	4b03      	ldr	r3, [pc, #12]	; (192d8 <ble_ll_hci_cb_set_event_mask2+0x18>)
   192ca:	6019      	str	r1, [r3, #0]
   192cc:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   192ce:	2000      	movs	r0, #0
   192d0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   192d2:	2012      	movs	r0, #18
}
   192d4:	4770      	bx	lr
   192d6:	bf00      	nop
   192d8:	20002518 	.word	0x20002518

000192dc <ble_ll_hci_disconnect>:
    if (len != sizeof (*cmd)) {
   192dc:	2903      	cmp	r1, #3
   192de:	d001      	beq.n	192e4 <ble_ll_hci_disconnect+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   192e0:	2012      	movs	r0, #18
}
   192e2:	4770      	bx	lr
{
   192e4:	b508      	push	{r3, lr}
    return ble_ll_conn_hci_disconnect_cmd(cmd);
   192e6:	f7fe fcac 	bl	17c42 <ble_ll_conn_hci_disconnect_cmd>
}
   192ea:	bd08      	pop	{r3, pc}

000192ec <ble_ll_hci_link_ctrl_cmd_proc>:
{
   192ec:	b508      	push	{r3, lr}
    switch (ocf) {
   192ee:	2a06      	cmp	r2, #6
   192f0:	d003      	beq.n	192fa <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   192f2:	2a1d      	cmp	r2, #29
   192f4:	d006      	beq.n	19304 <ble_ll_hci_link_ctrl_cmd_proc+0x18>
   192f6:	2001      	movs	r0, #1
}
   192f8:	bd08      	pop	{r3, pc}
        rc = ble_ll_hci_disconnect(cmdbuf, len);
   192fa:	f7ff ffef 	bl	192dc <ble_ll_hci_disconnect>
        rc += (BLE_ERR_MAX + 1);
   192fe:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   19302:	e7f9      	b.n	192f8 <ble_ll_hci_link_ctrl_cmd_proc+0xc>
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   19304:	f7fe fce9 	bl	17cda <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   19308:	f500 7080 	add.w	r0, r0, #256	; 0x100
    return rc;
   1930c:	e7f4      	b.n	192f8 <ble_ll_hci_link_ctrl_cmd_proc+0xc>

0001930e <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   1930e:	b510      	push	{r4, lr}
   19310:	4614      	mov	r4, r2
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   19312:	2a63      	cmp	r2, #99	; 0x63
   19314:	d01a      	beq.n	1934c <ble_ll_hci_ctlr_bb_cmd_proc+0x3e>
   19316:	461a      	mov	r2, r3
   19318:	d907      	bls.n	1932a <ble_ll_hci_ctlr_bb_cmd_proc+0x1c>
   1931a:	2c7b      	cmp	r4, #123	; 0x7b
   1931c:	d019      	beq.n	19352 <ble_ll_hci_ctlr_bb_cmd_proc+0x44>
   1931e:	2c7c      	cmp	r4, #124	; 0x7c
   19320:	d10c      	bne.n	1933c <ble_ll_hci_ctlr_bb_cmd_proc+0x2e>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   19322:	9b02      	ldr	r3, [sp, #8]
   19324:	f7fe fdf0 	bl	17f08 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   19328:	e00c      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
    switch (ocf) {
   1932a:	2c01      	cmp	r4, #1
   1932c:	d008      	beq.n	19340 <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   1932e:	2c03      	cmp	r4, #3
   19330:	d102      	bne.n	19338 <ble_ll_hci_ctlr_bb_cmd_proc+0x2a>
        if (len == 0) {
   19332:	b141      	cbz	r1, 19346 <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19334:	2012      	movs	r0, #18
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
   19336:	e005      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
    switch (ocf) {
   19338:	2001      	movs	r0, #1
   1933a:	e003      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
   1933c:	2001      	movs	r0, #1
   1933e:	e001      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   19340:	f7ff ffb0 	bl	192a4 <ble_ll_hci_cb_set_event_mask>
}
   19344:	bd10      	pop	{r4, pc}
            rc = ble_ll_reset();
   19346:	f7fb fb21 	bl	1498c <ble_ll_reset>
   1934a:	e7fb      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   1934c:	f7ff ffb8 	bl	192c0 <ble_ll_hci_cb_set_event_mask2>
        break;
   19350:	e7f8      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   19352:	9b02      	ldr	r3, [sp, #8]
   19354:	f7fe fdbe 	bl	17ed4 <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   19358:	e7f4      	b.n	19344 <ble_ll_hci_ctlr_bb_cmd_proc+0x36>
	...

0001935c <ble_ll_hci_rd_local_supp_cmd>:
{
   1935c:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   1935e:	2300      	movs	r3, #0
   19360:	62c3      	str	r3, [r0, #44]	; 0x2c
   19362:	6303      	str	r3, [r0, #48]	; 0x30
   19364:	6343      	str	r3, [r0, #52]	; 0x34
   19366:	6383      	str	r3, [r0, #56]	; 0x38
   19368:	63c3      	str	r3, [r0, #60]	; 0x3c
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   1936a:	4b0e      	ldr	r3, [pc, #56]	; (193a4 <ble_ll_hci_rd_local_supp_cmd+0x48>)
   1936c:	f103 0220 	add.w	r2, r3, #32
   19370:	681f      	ldr	r7, [r3, #0]
   19372:	685e      	ldr	r6, [r3, #4]
   19374:	689d      	ldr	r5, [r3, #8]
   19376:	68dc      	ldr	r4, [r3, #12]
   19378:	6007      	str	r7, [r0, #0]
   1937a:	6046      	str	r6, [r0, #4]
   1937c:	6085      	str	r5, [r0, #8]
   1937e:	60c4      	str	r4, [r0, #12]
   19380:	3310      	adds	r3, #16
   19382:	3010      	adds	r0, #16
   19384:	4293      	cmp	r3, r2
   19386:	d1f3      	bne.n	19370 <ble_ll_hci_rd_local_supp_cmd+0x14>
   19388:	681d      	ldr	r5, [r3, #0]
   1938a:	685c      	ldr	r4, [r3, #4]
   1938c:	689a      	ldr	r2, [r3, #8]
   1938e:	6005      	str	r5, [r0, #0]
   19390:	6044      	str	r4, [r0, #4]
   19392:	6082      	str	r2, [r0, #8]
   19394:	7b1b      	ldrb	r3, [r3, #12]
   19396:	7303      	strb	r3, [r0, #12]
    *rsplen = sizeof(*rsp);
   19398:	2340      	movs	r3, #64	; 0x40
   1939a:	700b      	strb	r3, [r1, #0]
}
   1939c:	2000      	movs	r0, #0
   1939e:	bcf0      	pop	{r4, r5, r6, r7}
   193a0:	4770      	bx	lr
   193a2:	bf00      	nop
   193a4:	0002dd48 	.word	0x0002dd48

000193a8 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   193a8:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   193aa:	3a01      	subs	r2, #1
   193ac:	2a08      	cmp	r2, #8
   193ae:	d826      	bhi.n	193fe <ble_ll_hci_info_params_cmd_proc+0x56>
   193b0:	e8df f002 	tbb	[pc, r2]
   193b4:	25150d05 	.word	0x25150d05
   193b8:	25252525 	.word	0x25252525
   193bc:	1d          	.byte	0x1d
   193bd:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   193be:	b109      	cbz	r1, 193c4 <ble_ll_hci_info_params_cmd_proc+0x1c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   193c0:	2012      	movs	r0, #18
   193c2:	e01d      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   193c4:	9902      	ldr	r1, [sp, #8]
   193c6:	4618      	mov	r0, r3
   193c8:	f7ff fed8 	bl	1917c <ble_ll_hci_rd_local_version>
   193cc:	e018      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   193ce:	b109      	cbz	r1, 193d4 <ble_ll_hci_info_params_cmd_proc+0x2c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   193d0:	2012      	movs	r0, #18
   193d2:	e015      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   193d4:	9902      	ldr	r1, [sp, #8]
   193d6:	4618      	mov	r0, r3
   193d8:	f7ff ffc0 	bl	1935c <ble_ll_hci_rd_local_supp_cmd>
   193dc:	e010      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   193de:	b109      	cbz	r1, 193e4 <ble_ll_hci_info_params_cmd_proc+0x3c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   193e0:	2012      	movs	r0, #18
   193e2:	e00d      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   193e4:	9902      	ldr	r1, [sp, #8]
   193e6:	4618      	mov	r0, r3
   193e8:	f7ff fed8 	bl	1919c <ble_ll_hci_rd_local_supp_feat>
   193ec:	e008      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   193ee:	b109      	cbz	r1, 193f4 <ble_ll_hci_info_params_cmd_proc+0x4c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   193f0:	2012      	movs	r0, #18
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
   193f2:	e005      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   193f4:	9902      	ldr	r1, [sp, #8]
   193f6:	4618      	mov	r0, r3
   193f8:	f7ff fede 	bl	191b8 <ble_ll_hci_rd_bd_addr>
   193fc:	e000      	b.n	19400 <ble_ll_hci_info_params_cmd_proc+0x58>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   193fe:	2001      	movs	r0, #1
}
   19400:	bd08      	pop	{r3, pc}

00019402 <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   19402:	2a05      	cmp	r2, #5
   19404:	d001      	beq.n	1940a <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
#endif
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   19406:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   19408:	4770      	bx	lr
{
   1940a:	b510      	push	{r4, lr}
   1940c:	461c      	mov	r4, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   1940e:	9b02      	ldr	r3, [sp, #8]
   19410:	4622      	mov	r2, r4
   19412:	f7fe fc84 	bl	17d1e <ble_ll_conn_hci_rd_rssi>
}
   19416:	bd10      	pop	{r4, pc}

00019418 <ble_ll_hci_le_read_local_features>:
{
   19418:	b538      	push	{r3, r4, r5, lr}
   1941a:	4604      	mov	r4, r0
   1941c:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   1941e:	f7fb faaf 	bl	14980 <ble_ll_read_supp_features>
   19422:	6020      	str	r0, [r4, #0]
   19424:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   19426:	2308      	movs	r3, #8
   19428:	702b      	strb	r3, [r5, #0]
}
   1942a:	2000      	movs	r0, #0
   1942c:	bd38      	pop	{r3, r4, r5, pc}

0001942e <ble_ll_hci_le_encrypt>:
{
   1942e:	b570      	push	{r4, r5, r6, lr}
   19430:	b08c      	sub	sp, #48	; 0x30
   19432:	4604      	mov	r4, r0
   19434:	4616      	mov	r6, r2
   19436:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   19438:	2210      	movs	r2, #16
   1943a:	4601      	mov	r1, r0
   1943c:	4668      	mov	r0, sp
   1943e:	f011 fc03 	bl	2ac48 <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   19442:	2210      	movs	r2, #16
   19444:	18a1      	adds	r1, r4, r2
   19446:	eb0d 0002 	add.w	r0, sp, r2
   1944a:	f011 fbfd 	bl	2ac48 <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   1944e:	4668      	mov	r0, sp
   19450:	f001 ff80 	bl	1b354 <ble_hw_encrypt_block>
    if (!rc) {
   19454:	b118      	cbz	r0, 1945e <ble_ll_hci_le_encrypt+0x30>
        rc = BLE_ERR_CTLR_BUSY;
   19456:	243a      	movs	r4, #58	; 0x3a
}
   19458:	4620      	mov	r0, r4
   1945a:	b00c      	add	sp, #48	; 0x30
   1945c:	bd70      	pop	{r4, r5, r6, pc}
   1945e:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   19460:	2210      	movs	r2, #16
   19462:	a908      	add	r1, sp, #32
   19464:	4630      	mov	r0, r6
   19466:	f011 fbef 	bl	2ac48 <swap_buf>
        *rsplen = sizeof(*rsp);
   1946a:	2310      	movs	r3, #16
   1946c:	702b      	strb	r3, [r5, #0]
        rc = BLE_ERR_SUCCESS;
   1946e:	e7f3      	b.n	19458 <ble_ll_hci_le_encrypt+0x2a>

00019470 <ble_ll_hci_le_rand>:
{
   19470:	b510      	push	{r4, lr}
   19472:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   19474:	2108      	movs	r1, #8
   19476:	f000 fd5d 	bl	19f34 <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   1947a:	2308      	movs	r3, #8
   1947c:	7023      	strb	r3, [r4, #0]
}
   1947e:	2000      	movs	r0, #0
   19480:	bd10      	pop	{r4, pc}

00019482 <ble_ll_hci_le_read_supp_states>:
{
   19482:	b538      	push	{r3, r4, r5, lr}
   19484:	4604      	mov	r4, r0
   19486:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   19488:	f7fb fa72 	bl	14970 <ble_ll_read_supp_states>
   1948c:	6020      	str	r0, [r4, #0]
   1948e:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   19490:	2308      	movs	r3, #8
   19492:	702b      	strb	r3, [r5, #0]
}
   19494:	2000      	movs	r0, #0
   19496:	bd38      	pop	{r3, r4, r5, pc}

00019498 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   19498:	2904      	cmp	r1, #4
   1949a:	d001      	beq.n	194a0 <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1949c:	2012      	movs	r0, #18
}
   1949e:	4770      	bx	lr
{
   194a0:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   194a2:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   194a4:	8845      	ldrh	r5, [r0, #2]
   194a6:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   194a8:	4620      	mov	r0, r4
   194aa:	f7fb f92b 	bl	14704 <ble_ll_chk_txrx_octets>
   194ae:	b908      	cbnz	r0, 194b4 <ble_ll_hci_le_wr_sugg_data_len+0x1c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   194b0:	2012      	movs	r0, #18
}
   194b2:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   194b4:	4630      	mov	r0, r6
   194b6:	f7fb f92d 	bl	14714 <ble_ll_chk_txrx_time>
   194ba:	b1c0      	cbz	r0, 194ee <ble_ll_hci_le_wr_sugg_data_len+0x56>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   194bc:	b2e1      	uxtb	r1, r4
   194be:	4b0d      	ldr	r3, [pc, #52]	; (194f4 <ble_ll_hci_le_wr_sugg_data_len+0x5c>)
   194c0:	7259      	strb	r1, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   194c2:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   194c4:	799a      	ldrb	r2, [r3, #6]
   194c6:	b293      	uxth	r3, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   194c8:	42a3      	cmp	r3, r4
   194ca:	d900      	bls.n	194ce <ble_ll_hci_le_wr_sugg_data_len+0x36>
   194cc:	460a      	mov	r2, r1
   194ce:	4b09      	ldr	r3, [pc, #36]	; (194f4 <ble_ll_hci_le_wr_sugg_data_len+0x5c>)
   194d0:	721a      	strb	r2, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   194d2:	8a58      	ldrh	r0, [r3, #18]
   194d4:	42b0      	cmp	r0, r6
   194d6:	bf28      	it	cs
   194d8:	4630      	movcs	r0, r6
        g_ble_ll_conn_params.conn_init_max_tx_time =
   194da:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   194dc:	f640 0248 	movw	r2, #2120	; 0x848
   194e0:	4282      	cmp	r2, r0
   194e2:	bf28      	it	cs
   194e4:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   194e6:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   194e8:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   194ea:	2000      	movs	r0, #0
   194ec:	e7e1      	b.n	194b2 <ble_ll_hci_le_wr_sugg_data_len+0x1a>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   194ee:	2012      	movs	r0, #18
   194f0:	e7df      	b.n	194b2 <ble_ll_hci_le_wr_sugg_data_len+0x1a>
   194f2:	bf00      	nop
   194f4:	2000233c 	.word	0x2000233c

000194f8 <ble_ll_read_tx_power>:
{
   194f8:	b538      	push	{r3, r4, r5, lr}
   194fa:	4604      	mov	r4, r0
   194fc:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   194fe:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   19502:	f002 fb5f 	bl	1bbc4 <ble_phy_txpower_round>
   19506:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   19508:	207e      	movs	r0, #126	; 0x7e
   1950a:	f002 fb5b 	bl	1bbc4 <ble_phy_txpower_round>
   1950e:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   19510:	2302      	movs	r3, #2
   19512:	702b      	strb	r3, [r5, #0]
}
   19514:	2000      	movs	r0, #0
   19516:	bd38      	pop	{r3, r4, r5, pc}

00019518 <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   19518:	2904      	cmp	r1, #4
   1951a:	d121      	bne.n	19560 <ble_ll_write_rf_path_compensation+0x48>
{
   1951c:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   1951e:	f9b0 3000 	ldrsh.w	r3, [r0]
   19522:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   19524:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   19528:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   1952a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   1952e:	b29b      	uxth	r3, r3
   19530:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   19534:	d816      	bhi.n	19564 <ble_ll_write_rf_path_compensation+0x4c>
   19536:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   1953a:	db15      	blt.n	19568 <ble_ll_write_rf_path_compensation+0x50>
   1953c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   19540:	dc14      	bgt.n	1956c <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   19542:	4b0b      	ldr	r3, [pc, #44]	; (19570 <ble_ll_write_rf_path_compensation+0x58>)
   19544:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   19546:	4b0b      	ldr	r3, [pc, #44]	; (19574 <ble_ll_write_rf_path_compensation+0x5c>)
   19548:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   1954a:	480b      	ldr	r0, [pc, #44]	; (19578 <ble_ll_write_rf_path_compensation+0x60>)
   1954c:	fb80 3002 	smull	r3, r0, r0, r2
   19550:	17d2      	asrs	r2, r2, #31
   19552:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   19556:	b240      	sxtb	r0, r0
   19558:	f002 fb6a 	bl	1bc30 <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   1955c:	2000      	movs	r0, #0
}
   1955e:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19560:	2012      	movs	r0, #18
}
   19562:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19564:	2012      	movs	r0, #18
   19566:	e7fa      	b.n	1955e <ble_ll_write_rf_path_compensation+0x46>
   19568:	2012      	movs	r0, #18
   1956a:	e7f8      	b.n	1955e <ble_ll_write_rf_path_compensation+0x46>
   1956c:	2012      	movs	r0, #18
   1956e:	e7f6      	b.n	1955e <ble_ll_write_rf_path_compensation+0x46>
   19570:	2000252a 	.word	0x2000252a
   19574:	20002528 	.word	0x20002528
   19578:	66666667 	.word	0x66666667

0001957c <ble_ll_hci_le_cmd_proc>:
{
   1957c:	b538      	push	{r3, r4, r5, lr}
   1957e:	4614      	mov	r4, r2
   19580:	461a      	mov	r2, r3
    switch (ocf) {
   19582:	1e63      	subs	r3, r4, #1
   19584:	2b4d      	cmp	r3, #77	; 0x4d
   19586:	f200 8137 	bhi.w	197f8 <ble_ll_hci_le_cmd_proc+0x27c>
   1958a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1958e:	004e      	.short	0x004e
   19590:	005b0052 	.word	0x005b0052
   19594:	00640135 	.word	0x00640135
   19598:	006d0069 	.word	0x006d0069
   1959c:	007a0076 	.word	0x007a0076
   195a0:	0135007e 	.word	0x0135007e
   195a4:	01350135 	.word	0x01350135
   195a8:	00820135 	.word	0x00820135
   195ac:	0092008b 	.word	0x0092008b
   195b0:	009a0096 	.word	0x009a0096
   195b4:	00a2009e 	.word	0x00a2009e
   195b8:	00ab00a7 	.word	0x00ab00a7
   195bc:	013500b0 	.word	0x013500b0
   195c0:	00be00b9 	.word	0x00be00b9
   195c4:	013500c3 	.word	0x013500c3
   195c8:	01350135 	.word	0x01350135
   195cc:	00d100cc 	.word	0x00d100cc
   195d0:	00db00d6 	.word	0x00db00d6
   195d4:	013500e4 	.word	0x013500e4
   195d8:	00e80135 	.word	0x00e80135
   195dc:	00f000ec 	.word	0x00f000ec
   195e0:	010000f7 	.word	0x010000f7
   195e4:	010a0105 	.word	0x010a0105
   195e8:	0112010e 	.word	0x0112010e
   195ec:	01350135 	.word	0x01350135
   195f0:	01350135 	.word	0x01350135
   195f4:	01350135 	.word	0x01350135
   195f8:	01350135 	.word	0x01350135
   195fc:	01350135 	.word	0x01350135
   19600:	01350135 	.word	0x01350135
   19604:	01350135 	.word	0x01350135
   19608:	01350135 	.word	0x01350135
   1960c:	01350135 	.word	0x01350135
   19610:	01350135 	.word	0x01350135
   19614:	01350135 	.word	0x01350135
   19618:	01350135 	.word	0x01350135
   1961c:	01350135 	.word	0x01350135
   19620:	011b0135 	.word	0x011b0135
   19624:	012d0124 	.word	0x012d0124
   19628:	0131      	.short	0x0131
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   1962a:	f7ff fdd1 	bl	191d0 <ble_ll_hci_set_le_event_mask>
   1962e:	4605      	mov	r5, r0
        break;
   19630:	e0e3      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   19632:	b109      	cbz	r1, 19638 <ble_ll_hci_le_cmd_proc+0xbc>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19634:	2512      	movs	r5, #18
   19636:	e0e0      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   19638:	9904      	ldr	r1, [sp, #16]
   1963a:	4610      	mov	r0, r2
   1963c:	f7ff fdd6 	bl	191ec <ble_ll_hci_le_read_bufsize>
   19640:	4605      	mov	r5, r0
   19642:	e0da      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   19644:	b109      	cbz	r1, 1964a <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19646:	2512      	movs	r5, #18
   19648:	e0d7      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   1964a:	9904      	ldr	r1, [sp, #16]
   1964c:	4610      	mov	r0, r2
   1964e:	f7ff fee3 	bl	19418 <ble_ll_hci_le_read_local_features>
   19652:	4605      	mov	r5, r0
   19654:	e0d1      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   19656:	2200      	movs	r2, #0
   19658:	f7fb f888 	bl	1476c <ble_ll_set_random_addr>
   1965c:	4605      	mov	r5, r0
        break;
   1965e:	e0cc      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   19660:	f7fc f972 	bl	15948 <ble_ll_adv_set_adv_params>
   19664:	4605      	mov	r5, r0
        break;
   19666:	e0c8      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   19668:	b109      	cbz	r1, 1966e <ble_ll_hci_le_cmd_proc+0xf2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1966a:	2512      	movs	r5, #18
   1966c:	e0c5      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   1966e:	9904      	ldr	r1, [sp, #16]
   19670:	4610      	mov	r0, r2
   19672:	f7fc f9ed 	bl	15a50 <ble_ll_adv_read_txpwr>
   19676:	4605      	mov	r5, r0
   19678:	e0bf      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   1967a:	f7fc fa10 	bl	15a9e <ble_ll_hci_set_adv_data>
   1967e:	4605      	mov	r5, r0
        break;
   19680:	e0bb      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   19682:	f7fc f9fc 	bl	15a7e <ble_ll_hci_set_scan_rsp_data>
   19686:	4605      	mov	r5, r0
        break;
   19688:	e0b7      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   1968a:	f7fc f9eb 	bl	15a64 <ble_ll_hci_adv_set_enable>
   1968e:	4605      	mov	r5, r0
        break;
   19690:	e0b3      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   19692:	b109      	cbz	r1, 19698 <ble_ll_hci_le_cmd_proc+0x11c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19694:	2512      	movs	r5, #18
   19696:	e0b0      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   19698:	9904      	ldr	r1, [sp, #16]
   1969a:	4610      	mov	r0, r2
   1969c:	f001 fcfc 	bl	1b098 <ble_ll_whitelist_read_size>
   196a0:	4605      	mov	r5, r0
   196a2:	e0aa      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   196a4:	b109      	cbz	r1, 196aa <ble_ll_hci_le_cmd_proc+0x12e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   196a6:	2512      	movs	r5, #18
   196a8:	e0a7      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_whitelist_clear();
   196aa:	f001 fcdf 	bl	1b06c <ble_ll_whitelist_clear>
   196ae:	4605      	mov	r5, r0
   196b0:	e0a3      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   196b2:	f001 fcff 	bl	1b0b4 <ble_ll_whitelist_add>
   196b6:	4605      	mov	r5, r0
        break;
   196b8:	e09f      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   196ba:	f001 fd2d 	bl	1b118 <ble_ll_whitelist_rmv>
   196be:	4605      	mov	r5, r0
        break;
   196c0:	e09b      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   196c2:	f7fe f9cd 	bl	17a60 <ble_ll_conn_hci_update>
   196c6:	4605      	mov	r5, r0
        break;
   196c8:	e097      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   196ca:	f7fe fb6a 	bl	17da2 <ble_ll_conn_hci_set_chan_class>
   196ce:	4605      	mov	r5, r0
        break;
   196d0:	e093      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   196d2:	9b04      	ldr	r3, [sp, #16]
   196d4:	f7fe fb3b 	bl	17d4e <ble_ll_conn_hci_rd_chan_map>
   196d8:	4605      	mov	r5, r0
        break;
   196da:	e08e      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   196dc:	f7fe f98f 	bl	179fe <ble_ll_conn_hci_read_rem_features>
   196e0:	4605      	mov	r5, r0
        break;
   196e2:	e08a      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   196e4:	9b04      	ldr	r3, [sp, #16]
   196e6:	f7ff fea2 	bl	1942e <ble_ll_hci_le_encrypt>
   196ea:	4605      	mov	r5, r0
        break;
   196ec:	e085      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   196ee:	b109      	cbz	r1, 196f4 <ble_ll_hci_le_cmd_proc+0x178>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   196f0:	2512      	movs	r5, #18
   196f2:	e082      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   196f4:	9904      	ldr	r1, [sp, #16]
   196f6:	4610      	mov	r0, r2
   196f8:	f7ff feba 	bl	19470 <ble_ll_hci_le_rand>
   196fc:	4605      	mov	r5, r0
   196fe:	e07c      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   19700:	9b04      	ldr	r3, [sp, #16]
   19702:	f7fe fb9d 	bl	17e40 <ble_ll_conn_hci_le_ltk_reply>
   19706:	4605      	mov	r5, r0
        break;
   19708:	e077      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   1970a:	9b04      	ldr	r3, [sp, #16]
   1970c:	f7fe fbc1 	bl	17e92 <ble_ll_conn_hci_le_ltk_neg_reply>
   19710:	4605      	mov	r5, r0
        break;
   19712:	e072      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   19714:	b109      	cbz	r1, 1971a <ble_ll_hci_le_cmd_proc+0x19e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19716:	2512      	movs	r5, #18
   19718:	e06f      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   1971a:	9904      	ldr	r1, [sp, #16]
   1971c:	4610      	mov	r0, r2
   1971e:	f7ff feb0 	bl	19482 <ble_ll_hci_le_read_supp_states>
   19722:	4605      	mov	r5, r0
   19724:	e069      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   19726:	9b04      	ldr	r3, [sp, #16]
   19728:	f7fe fa02 	bl	17b30 <ble_ll_conn_hci_param_rr>
   1972c:	4605      	mov	r5, r0
        break;
   1972e:	e064      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   19730:	9b04      	ldr	r3, [sp, #16]
   19732:	f7fe fa53 	bl	17bdc <ble_ll_conn_hci_param_nrr>
   19736:	4605      	mov	r5, r0
        break;
   19738:	e05f      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   1973a:	9b04      	ldr	r3, [sp, #16]
   1973c:	f7fe fb48 	bl	17dd0 <ble_ll_conn_hci_set_data_len>
   19740:	4605      	mov	r5, r0
        break;
   19742:	e05a      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   19744:	b109      	cbz	r1, 1974a <ble_ll_hci_le_cmd_proc+0x1ce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19746:	2512      	movs	r5, #18
   19748:	e057      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   1974a:	9904      	ldr	r1, [sp, #16]
   1974c:	4610      	mov	r0, r2
   1974e:	f7ff fd59 	bl	19204 <ble_ll_hci_le_rd_sugg_data_len>
   19752:	4605      	mov	r5, r0
   19754:	e051      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   19756:	f7ff fe9f 	bl	19498 <ble_ll_hci_le_wr_sugg_data_len>
   1975a:	4605      	mov	r5, r0
        break;
   1975c:	e04d      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   1975e:	f000 fd63 	bl	1a228 <ble_ll_resolv_list_add>
   19762:	4605      	mov	r5, r0
        break;
   19764:	e049      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   19766:	f000 fdf5 	bl	1a354 <ble_ll_resolv_list_rmv>
   1976a:	4605      	mov	r5, r0
        break;
   1976c:	e045      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   1976e:	b109      	cbz	r1, 19774 <ble_ll_hci_le_cmd_proc+0x1f8>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   19770:	2512      	movs	r5, #18
   19772:	e042      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_resolv_list_clr();
   19774:	f000 fd1a 	bl	1a1ac <ble_ll_resolv_list_clr>
   19778:	4605      	mov	r5, r0
   1977a:	e03e      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   1977c:	b109      	cbz	r1, 19782 <ble_ll_hci_le_cmd_proc+0x206>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1977e:	2512      	movs	r5, #18
   19780:	e03b      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   19782:	9904      	ldr	r1, [sp, #16]
   19784:	4610      	mov	r0, r2
   19786:	f000 fd25 	bl	1a1d4 <ble_ll_resolv_list_read_size>
   1978a:	4605      	mov	r5, r0
   1978c:	e035      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   1978e:	9b04      	ldr	r3, [sp, #16]
   19790:	f000 fe42 	bl	1a418 <ble_ll_resolv_peer_addr_rd>
   19794:	4605      	mov	r5, r0
        break;
   19796:	e030      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   19798:	9b04      	ldr	r3, [sp, #16]
   1979a:	f000 fe58 	bl	1a44e <ble_ll_resolv_local_addr_rd>
   1979e:	4605      	mov	r5, r0
        break;
   197a0:	e02b      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   197a2:	f000 fe23 	bl	1a3ec <ble_ll_resolv_enable_cmd>
   197a6:	4605      	mov	r5, r0
        break;
   197a8:	e027      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   197aa:	f000 fe6b 	bl	1a484 <ble_ll_resolv_set_rpa_tmo>
   197ae:	4605      	mov	r5, r0
        break;
   197b0:	e023      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   197b2:	b109      	cbz	r1, 197b8 <ble_ll_hci_le_cmd_proc+0x23c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   197b4:	2512      	movs	r5, #18
   197b6:	e020      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   197b8:	9904      	ldr	r1, [sp, #16]
   197ba:	4610      	mov	r0, r2
   197bc:	f7ff fd2e 	bl	1921c <ble_ll_hci_le_rd_max_data_len>
   197c0:	4605      	mov	r5, r0
   197c2:	e01a      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   197c4:	b109      	cbz	r1, 197ca <ble_ll_hci_le_cmd_proc+0x24e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   197c6:	2512      	movs	r5, #18
   197c8:	e017      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_read_tx_power(rspbuf, rsplen);
   197ca:	9904      	ldr	r1, [sp, #16]
   197cc:	4610      	mov	r0, r2
   197ce:	f7ff fe93 	bl	194f8 <ble_ll_read_tx_power>
   197d2:	4605      	mov	r5, r0
   197d4:	e011      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        if (len == 0) {
   197d6:	b109      	cbz	r1, 197dc <ble_ll_hci_le_cmd_proc+0x260>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   197d8:	2512      	movs	r5, #18
   197da:	e00e      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
            rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   197dc:	9904      	ldr	r1, [sp, #16]
   197de:	4610      	mov	r0, r2
   197e0:	f7ff fd52 	bl	19288 <ble_ll_read_rf_path_compensation>
   197e4:	4605      	mov	r5, r0
   197e6:	e008      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   197e8:	f7ff fe96 	bl	19518 <ble_ll_write_rf_path_compensation>
   197ec:	4605      	mov	r5, r0
        break;
   197ee:	e004      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   197f0:	f000 fe72 	bl	1a4d8 <ble_ll_resolve_set_priv_mode>
   197f4:	4605      	mov	r5, r0
        break;
   197f6:	e000      	b.n	197fa <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   197f8:	2501      	movs	r5, #1
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf)) {
   197fa:	4620      	mov	r0, r4
   197fc:	f7ff fd1e 	bl	1923c <ble_ll_hci_le_cmd_send_cmd_status>
   19800:	b108      	cbz	r0, 19806 <ble_ll_hci_le_cmd_proc+0x28a>
        rc += (BLE_ERR_MAX + 1);
   19802:	f505 7580 	add.w	r5, r5, #256	; 0x100
}
   19806:	4628      	mov	r0, r5
   19808:	bd38      	pop	{r3, r4, r5, pc}

0001980a <ble_ll_hci_adv_mode_ext>:
}
   1980a:	2000      	movs	r0, #0
   1980c:	4770      	bx	lr
	...

00019810 <ble_ll_hci_event_send>:
{
   19810:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   19812:	7843      	ldrb	r3, [r0, #1]
   19814:	3302      	adds	r3, #2
   19816:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1981a:	d206      	bcs.n	1982a <ble_ll_hci_event_send+0x1a>
    STATS_INC(ble_ll_stats, hci_events_sent);
   1981c:	4a08      	ldr	r2, [pc, #32]	; (19840 <ble_ll_hci_event_send+0x30>)
   1981e:	6953      	ldr	r3, [r2, #20]
   19820:	3301      	adds	r3, #1
   19822:	6153      	str	r3, [r2, #20]
    return ble_transport_to_hs_evt_impl(buf);
   19824:	f008 fac8 	bl	21db8 <ble_transport_to_hs_evt_impl>
}
   19828:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   1982a:	f7f2 fcb7 	bl	c19c <hal_debugger_connected>
   1982e:	b100      	cbz	r0, 19832 <ble_ll_hci_event_send+0x22>
   19830:	be01      	bkpt	0x0001
   19832:	2300      	movs	r3, #0
   19834:	461a      	mov	r2, r3
   19836:	4619      	mov	r1, r3
   19838:	4618      	mov	r0, r3
   1983a:	f7f3 f9b3 	bl	cba4 <__assert_func>
   1983e:	bf00      	nop
   19840:	20001ea8 	.word	0x20001ea8

00019844 <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   19844:	b570      	push	{r4, r5, r6, lr}
   19846:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   19848:	2300      	movs	r3, #0
   1984a:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   1984c:	6885      	ldr	r5, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   1984e:	b1bd      	cbz	r5, 19880 <ble_ll_hci_cmd_proc+0x3c>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   19850:	462b      	mov	r3, r5
   19852:	f833 6b06 	ldrh.w	r6, [r3], #6
    ocf = BLE_HCI_OCF(opcode);
   19856:	f3c6 0209 	ubfx	r2, r6, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   1985a:	f3c6 2185 	ubfx	r1, r6, #10, #6
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   1985e:	2000      	movs	r0, #0
   19860:	f88d 000f 	strb.w	r0, [sp, #15]
    if (rc >= 0) {
        goto send_cc_cs;
    }
#endif

    switch (ogf) {
   19864:	2908      	cmp	r1, #8
   19866:	d815      	bhi.n	19894 <ble_ll_hci_cmd_proc+0x50>
   19868:	b248      	sxtb	r0, r1
   1986a:	2800      	cmp	r0, #0
   1986c:	d06c      	beq.n	19948 <ble_ll_hci_cmd_proc+0x104>
   1986e:	3901      	subs	r1, #1
   19870:	2907      	cmp	r1, #7
   19872:	d86b      	bhi.n	1994c <ble_ll_hci_cmd_proc+0x108>
   19874:	e8df f001 	tbb	[pc, r1]
   19878:	4b426a1d 	.word	0x4b426a1d
   1987c:	5d6a6a54 	.word	0x5d6a6a54
    BLE_LL_ASSERT(cmd != NULL);
   19880:	f7f2 fc8c 	bl	c19c <hal_debugger_connected>
   19884:	b100      	cbz	r0, 19888 <ble_ll_hci_cmd_proc+0x44>
   19886:	be01      	bkpt	0x0001
   19888:	2300      	movs	r3, #0
   1988a:	461a      	mov	r2, r3
   1988c:	4619      	mov	r1, r3
   1988e:	4618      	mov	r0, r3
   19890:	f7f3 f988 	bl	cba4 <__assert_func>
    switch (ogf) {
   19894:	293f      	cmp	r1, #63	; 0x3f
   19896:	d108      	bne.n	198aa <ble_ll_hci_cmd_proc+0x66>
    case BLE_HCI_OGF_LE:
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
        break;
#if MYNEWT_VAL(BLE_LL_HCI_VS)
    case BLE_HCI_OGF_VENDOR:
        rc = ble_ll_hci_vs_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   19898:	78a9      	ldrb	r1, [r5, #2]
   1989a:	f10d 000f 	add.w	r0, sp, #15
   1989e:	9000      	str	r0, [sp, #0]
   198a0:	1ce8      	adds	r0, r5, #3
   198a2:	f000 face 	bl	19e42 <ble_ll_hci_vs_cmd_proc>
   198a6:	4604      	mov	r4, r0
        break;
   198a8:	e008      	b.n	198bc <ble_ll_hci_cmd_proc+0x78>
    switch (ogf) {
   198aa:	2401      	movs	r4, #1

    /* We always send command status for unknown command
     * ref: Core 5.3, Vol 4, Part E, 4.5
     */
    if (rc == BLE_ERR_UNKNOWN_HCI_CMD) {
        rc += (BLE_ERR_MAX + 1);
   198ac:	f504 7480 	add.w	r4, r4, #256	; 0x100
   198b0:	e006      	b.n	198c0 <ble_ll_hci_cmd_proc+0x7c>
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   198b2:	78a9      	ldrb	r1, [r5, #2]
   198b4:	1ce8      	adds	r0, r5, #3
   198b6:	f7ff fd19 	bl	192ec <ble_ll_hci_link_ctrl_cmd_proc>
   198ba:	4604      	mov	r4, r0
    if (rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   198bc:	2c01      	cmp	r4, #1
   198be:	d0f5      	beq.n	198ac <ble_ll_hci_cmd_proc+0x68>

#if MYNEWT_VAL(BLE_LL_HBD_FAKE_DUAL_MODE)
send_cc_cs:
#endif
    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   198c0:	2c00      	cmp	r4, #0
   198c2:	db45      	blt.n	19950 <ble_ll_hci_cmd_proc+0x10c>
    if (rc <= BLE_ERR_MAX) {
   198c4:	2cff      	cmp	r4, #255	; 0xff
   198c6:	dc4d      	bgt.n	19964 <ble_ll_hci_cmd_proc+0x120>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   198c8:	230e      	movs	r3, #14
   198ca:	702b      	strb	r3, [r5, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   198cc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   198d0:	3304      	adds	r3, #4
   198d2:	706b      	strb	r3, [r5, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   198d4:	f7ff fc50 	bl	19178 <ble_ll_hci_get_num_cmd_pkts>
   198d8:	70a8      	strb	r0, [r5, #2]
        cmd_complete->opcode = htole16(opcode);
   198da:	f8a5 6003 	strh.w	r6, [r5, #3]
        cmd_complete->status = (uint8_t) rc;
   198de:	716c      	strb	r4, [r5, #5]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
        cmd_status->opcode = htole16(opcode);
    }

    /* Count commands and those in error */
    if (rc) {
   198e0:	2c00      	cmp	r4, #0
   198e2:	d04b      	beq.n	1997c <ble_ll_hci_cmd_proc+0x138>
        STATS_INC(ble_ll_stats, hci_cmd_errs);
   198e4:	4a28      	ldr	r2, [pc, #160]	; (19988 <ble_ll_hci_cmd_proc+0x144>)
   198e6:	6913      	ldr	r3, [r2, #16]
   198e8:	3301      	adds	r3, #1
   198ea:	6113      	str	r3, [r2, #16]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   198ec:	4628      	mov	r0, r5
   198ee:	f7ff ff8f 	bl	19810 <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   198f2:	9b02      	ldr	r3, [sp, #8]
   198f4:	b103      	cbz	r3, 198f8 <ble_ll_hci_cmd_proc+0xb4>
        post_cb();
   198f6:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   198f8:	b004      	add	sp, #16
   198fa:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   198fc:	78a9      	ldrb	r1, [r5, #2]
   198fe:	f10d 000f 	add.w	r0, sp, #15
   19902:	9000      	str	r0, [sp, #0]
   19904:	1ce8      	adds	r0, r5, #3
   19906:	f7ff fd02 	bl	1930e <ble_ll_hci_ctlr_bb_cmd_proc>
   1990a:	4604      	mov	r4, r0
        break;
   1990c:	e7d6      	b.n	198bc <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   1990e:	78a9      	ldrb	r1, [r5, #2]
   19910:	f10d 000f 	add.w	r0, sp, #15
   19914:	9000      	str	r0, [sp, #0]
   19916:	1ce8      	adds	r0, r5, #3
   19918:	f7ff fd46 	bl	193a8 <ble_ll_hci_info_params_cmd_proc>
   1991c:	4604      	mov	r4, r0
        break;
   1991e:	e7cd      	b.n	198bc <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   19920:	78a9      	ldrb	r1, [r5, #2]
   19922:	f10d 000f 	add.w	r0, sp, #15
   19926:	9000      	str	r0, [sp, #0]
   19928:	1ce8      	adds	r0, r5, #3
   1992a:	f7ff fd6a 	bl	19402 <ble_ll_hci_status_params_cmd_proc>
   1992e:	4604      	mov	r4, r0
        break;
   19930:	e7c4      	b.n	198bc <ble_ll_hci_cmd_proc+0x78>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   19932:	78a9      	ldrb	r1, [r5, #2]
   19934:	a802      	add	r0, sp, #8
   19936:	9001      	str	r0, [sp, #4]
   19938:	f10d 000f 	add.w	r0, sp, #15
   1993c:	9000      	str	r0, [sp, #0]
   1993e:	1ce8      	adds	r0, r5, #3
   19940:	f7ff fe1c 	bl	1957c <ble_ll_hci_le_cmd_proc>
   19944:	4604      	mov	r4, r0
        break;
   19946:	e7b9      	b.n	198bc <ble_ll_hci_cmd_proc+0x78>
    switch (ogf) {
   19948:	2401      	movs	r4, #1
   1994a:	e7af      	b.n	198ac <ble_ll_hci_cmd_proc+0x68>
   1994c:	2401      	movs	r4, #1
   1994e:	e7ad      	b.n	198ac <ble_ll_hci_cmd_proc+0x68>
    BLE_LL_ASSERT(rc >= 0);
   19950:	f7f2 fc24 	bl	c19c <hal_debugger_connected>
   19954:	b100      	cbz	r0, 19958 <ble_ll_hci_cmd_proc+0x114>
   19956:	be01      	bkpt	0x0001
   19958:	2300      	movs	r3, #0
   1995a:	461a      	mov	r2, r3
   1995c:	4619      	mov	r1, r3
   1995e:	4618      	mov	r0, r3
   19960:	f7f3 f920 	bl	cba4 <__assert_func>
        rc -= (BLE_ERR_MAX + 1);
   19964:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   19968:	230f      	movs	r3, #15
   1996a:	702b      	strb	r3, [r5, #0]
        hci_ev->length = sizeof(*cmd_status);
   1996c:	2304      	movs	r3, #4
   1996e:	706b      	strb	r3, [r5, #1]
        cmd_status->status = (uint8_t)rc;
   19970:	70ac      	strb	r4, [r5, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   19972:	f7ff fc01 	bl	19178 <ble_ll_hci_get_num_cmd_pkts>
   19976:	70e8      	strb	r0, [r5, #3]
        cmd_status->opcode = htole16(opcode);
   19978:	80ae      	strh	r6, [r5, #4]
   1997a:	e7b1      	b.n	198e0 <ble_ll_hci_cmd_proc+0x9c>
        STATS_INC(ble_ll_stats, hci_cmds);
   1997c:	4a02      	ldr	r2, [pc, #8]	; (19988 <ble_ll_hci_cmd_proc+0x144>)
   1997e:	68d3      	ldr	r3, [r2, #12]
   19980:	3301      	adds	r3, #1
   19982:	60d3      	str	r3, [r2, #12]
   19984:	e7b2      	b.n	198ec <ble_ll_hci_cmd_proc+0xa8>
   19986:	bf00      	nop
   19988:	20001ea8 	.word	0x20001ea8

0001998c <ble_ll_hci_send_noop>:
{
   1998c:	b510      	push	{r4, lr}
    hci_ev = ble_transport_alloc_evt(0);
   1998e:	2000      	movs	r0, #0
   19990:	f00d fcb0 	bl	272f4 <ble_transport_alloc_evt>
    if (hci_ev) {
   19994:	b168      	cbz	r0, 199b2 <ble_ll_hci_send_noop+0x26>
   19996:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   19998:	230e      	movs	r3, #14
   1999a:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   1999c:	2303      	movs	r3, #3
   1999e:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   199a0:	f7ff fbea 	bl	19178 <ble_ll_hci_get_num_cmd_pkts>
   199a4:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   199a6:	2300      	movs	r3, #0
   199a8:	70e3      	strb	r3, [r4, #3]
   199aa:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   199ac:	4620      	mov	r0, r4
   199ae:	f7ff ff2f 	bl	19810 <ble_ll_hci_event_send>
}
   199b2:	bd10      	pop	{r4, pc}

000199b4 <ble_ll_hci_is_le_event_enabled>:
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   199b4:	4b0f      	ldr	r3, [pc, #60]	; (199f4 <ble_ll_hci_is_le_event_enabled+0x40>)
   199b6:	6859      	ldr	r1, [r3, #4]
   199b8:	2200      	movs	r2, #0
   199ba:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   199be:	4313      	orrs	r3, r2
   199c0:	d101      	bne.n	199c6 <ble_ll_hci_is_le_event_enabled+0x12>
    return false;
   199c2:	2000      	movs	r0, #0
}
   199c4:	4770      	bx	lr
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   199c6:	1e41      	subs	r1, r0, #1
   199c8:	2201      	movs	r2, #1
   199ca:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   199ce:	f1c0 0021 	rsb	r0, r0, #33	; 0x21
   199d2:	fa02 f303 	lsl.w	r3, r2, r3
   199d6:	fa22 f000 	lsr.w	r0, r2, r0
   199da:	4318      	orrs	r0, r3
   199dc:	408a      	lsls	r2, r1
   199de:	4b06      	ldr	r3, [pc, #24]	; (199f8 <ble_ll_hci_is_le_event_enabled+0x44>)
   199e0:	6819      	ldr	r1, [r3, #0]
   199e2:	685b      	ldr	r3, [r3, #4]
   199e4:	400a      	ands	r2, r1
   199e6:	4018      	ands	r0, r3
   199e8:	ea52 0300 	orrs.w	r3, r2, r0
   199ec:	bf14      	ite	ne
   199ee:	2001      	movne	r0, #1
   199f0:	2000      	moveq	r0, #0
   199f2:	4770      	bx	lr
   199f4:	20002510 	.word	0x20002510
   199f8:	20002520 	.word	0x20002520

000199fc <ble_ll_hci_is_event_enabled>:
    if (evcode >= 64) {
   199fc:	283f      	cmp	r0, #63	; 0x3f
   199fe:	d816      	bhi.n	19a2e <ble_ll_hci_is_event_enabled+0x32>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   19a00:	1e41      	subs	r1, r0, #1
   19a02:	2201      	movs	r2, #1
   19a04:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
   19a08:	f1c0 0021 	rsb	r0, r0, #33	; 0x21
   19a0c:	fa02 f303 	lsl.w	r3, r2, r3
   19a10:	fa22 f000 	lsr.w	r0, r2, r0
   19a14:	4318      	orrs	r0, r3
   19a16:	408a      	lsls	r2, r1
   19a18:	4b11      	ldr	r3, [pc, #68]	; (19a60 <ble_ll_hci_is_event_enabled+0x64>)
   19a1a:	6819      	ldr	r1, [r3, #0]
   19a1c:	685b      	ldr	r3, [r3, #4]
   19a1e:	400a      	ands	r2, r1
   19a20:	4018      	ands	r0, r3
   19a22:	ea52 0300 	orrs.w	r3, r2, r0
   19a26:	bf14      	ite	ne
   19a28:	2001      	movne	r0, #1
   19a2a:	2000      	moveq	r0, #0
}
   19a2c:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   19a2e:	f1a0 0140 	sub.w	r1, r0, #64	; 0x40
   19a32:	2201      	movs	r2, #1
   19a34:	f1a0 0360 	sub.w	r3, r0, #96	; 0x60
   19a38:	f1c0 0060 	rsb	r0, r0, #96	; 0x60
   19a3c:	fa02 f303 	lsl.w	r3, r2, r3
   19a40:	fa22 f000 	lsr.w	r0, r2, r0
   19a44:	4318      	orrs	r0, r3
   19a46:	408a      	lsls	r2, r1
   19a48:	4b06      	ldr	r3, [pc, #24]	; (19a64 <ble_ll_hci_is_event_enabled+0x68>)
   19a4a:	6819      	ldr	r1, [r3, #0]
   19a4c:	685b      	ldr	r3, [r3, #4]
   19a4e:	400a      	ands	r2, r1
   19a50:	4018      	ands	r0, r3
   19a52:	ea52 0300 	orrs.w	r3, r2, r0
   19a56:	bf14      	ite	ne
   19a58:	2001      	movne	r0, #1
   19a5a:	2000      	moveq	r0, #0
   19a5c:	4770      	bx	lr
   19a5e:	bf00      	nop
   19a60:	20002510 	.word	0x20002510
   19a64:	20002518 	.word	0x20002518

00019a68 <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmdbuf, void *arg)
{
   19a68:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   19a6a:	4b0c      	ldr	r3, [pc, #48]	; (19a9c <ble_ll_hci_cmd_rx+0x34>)
   19a6c:	781b      	ldrb	r3, [r3, #0]
    }
#endif

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   19a6e:	b99b      	cbnz	r3, 19a98 <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   19a70:	4b0a      	ldr	r3, [pc, #40]	; (19a9c <ble_ll_hci_cmd_rx+0x34>)
   19a72:	781b      	ldrb	r3, [r3, #0]
   19a74:	b933      	cbnz	r3, 19a84 <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   19a76:	4909      	ldr	r1, [pc, #36]	; (19a9c <ble_ll_hci_cmd_rx+0x34>)
   19a78:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   19a7a:	4809      	ldr	r0, [pc, #36]	; (19aa0 <ble_ll_hci_cmd_rx+0x38>)
   19a7c:	f7f3 fbc5 	bl	d20a <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmdbuf);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   19a80:	2000      	movs	r0, #0
}
   19a82:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   19a84:	f7f2 fb8a 	bl	c19c <hal_debugger_connected>
   19a88:	b100      	cbz	r0, 19a8c <ble_ll_hci_cmd_rx+0x24>
   19a8a:	be01      	bkpt	0x0001
   19a8c:	2300      	movs	r3, #0
   19a8e:	461a      	mov	r2, r3
   19a90:	4619      	mov	r1, r3
   19a92:	4618      	mov	r0, r3
   19a94:	f7f3 f886 	bl	cba4 <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   19a98:	2007      	movs	r0, #7
   19a9a:	e7f2      	b.n	19a82 <ble_ll_hci_cmd_rx+0x1a>
   19a9c:	200024fc 	.word	0x200024fc
   19aa0:	20001fc8 	.word	0x20001fc8

00019aa4 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   19aa4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    ble_ll_acl_data_in(om);
   19aa6:	f7fa fea1 	bl	147ec <ble_ll_acl_data_in>
#else
    /* host should never send ACL in that case but if it does just ignore it */
    os_mbuf_free_chain(om);
#endif
    return 0;
}
   19aaa:	2000      	movs	r0, #0
   19aac:	bd08      	pop	{r3, pc}
	...

00019ab0 <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   19ab0:	4a0e      	ldr	r2, [pc, #56]	; (19aec <ble_ll_hci_init+0x3c>)
   19ab2:	2300      	movs	r3, #0
   19ab4:	6013      	str	r3, [r2, #0]
   19ab6:	6093      	str	r3, [r2, #8]
   19ab8:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   19aba:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   19abc:	490c      	ldr	r1, [pc, #48]	; (19af0 <ble_ll_hci_init+0x40>)
   19abe:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   19ac0:	4a0c      	ldr	r2, [pc, #48]	; (19af4 <ble_ll_hci_init+0x44>)
   19ac2:	201f      	movs	r0, #31
   19ac4:	2100      	movs	r1, #0
   19ac6:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   19aca:	4a0b      	ldr	r2, [pc, #44]	; (19af8 <ble_ll_hci_init+0x48>)
   19acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19ad0:	f641 71ff 	movw	r1, #8191	; 0x1fff
   19ad4:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   19ad8:	4a08      	ldr	r2, [pc, #32]	; (19afc <ble_ll_hci_init+0x4c>)
   19ada:	2000      	movs	r0, #0
   19adc:	2100      	movs	r1, #0
   19ade:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   19ae2:	4a07      	ldr	r2, [pc, #28]	; (19b00 <ble_ll_hci_init+0x50>)
   19ae4:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   19ae6:	4a07      	ldr	r2, [pc, #28]	; (19b04 <ble_ll_hci_init+0x54>)
   19ae8:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   19aea:	4770      	bx	lr
   19aec:	200024fc 	.word	0x200024fc
   19af0:	00019845 	.word	0x00019845
   19af4:	20002520 	.word	0x20002520
   19af8:	20002510 	.word	0x20002510
   19afc:	20002518 	.word	0x20002518
   19b00:	20002528 	.word	0x20002528
   19b04:	2000252a 	.word	0x2000252a

00019b08 <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   19b08:	b510      	push	{r4, lr}
   19b0a:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   19b0c:	2007      	movs	r0, #7
   19b0e:	f7ff ff51 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   19b12:	b900      	cbnz	r0, 19b16 <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19b14:	bd10      	pop	{r4, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19b16:	2000      	movs	r0, #0
   19b18:	f00d fbec 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19b1c:	2800      	cmp	r0, #0
   19b1e:	d0f9      	beq.n	19b14 <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   19b20:	223e      	movs	r2, #62	; 0x3e
   19b22:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19b24:	220b      	movs	r2, #11
   19b26:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   19b28:	2207      	movs	r2, #7
   19b2a:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   19b2c:	88a2      	ldrh	r2, [r4, #4]
   19b2e:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   19b32:	7b62      	ldrb	r2, [r4, #13]
   19b34:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   19b38:	8b22      	ldrh	r2, [r4, #24]
   19b3a:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   19b3e:	7ba2      	ldrb	r2, [r4, #14]
   19b40:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   19b44:	8b62      	ldrh	r2, [r4, #26]
   19b46:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   19b4a:	f7ff fe61 	bl	19810 <ble_ll_hci_event_send>
}
   19b4e:	e7e1      	b.n	19b14 <ble_ll_hci_ev_datalen_chg+0xc>

00019b50 <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   19b50:	b538      	push	{r3, r4, r5, lr}
   19b52:	4605      	mov	r5, r0
   19b54:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   19b56:	2006      	movs	r0, #6
   19b58:	f7ff ff2c 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   19b5c:	b900      	cbnz	r0, 19b60 <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19b5e:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19b60:	2000      	movs	r0, #0
   19b62:	f00d fbc7 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19b66:	2800      	cmp	r0, #0
   19b68:	d0f9      	beq.n	19b5e <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   19b6a:	223e      	movs	r2, #62	; 0x3e
   19b6c:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19b6e:	220b      	movs	r2, #11
   19b70:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   19b72:	2206      	movs	r2, #6
   19b74:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   19b76:	88aa      	ldrh	r2, [r5, #4]
   19b78:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   19b7c:	8822      	ldrh	r2, [r4, #0]
   19b7e:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   19b82:	8862      	ldrh	r2, [r4, #2]
   19b84:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   19b88:	88a2      	ldrh	r2, [r4, #4]
   19b8a:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   19b8e:	88e2      	ldrh	r2, [r4, #6]
   19b90:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   19b94:	f7ff fe3c 	bl	19810 <ble_ll_hci_event_send>
}
   19b98:	e7e1      	b.n	19b5e <ble_ll_hci_ev_rem_conn_parm_req+0xe>

00019b9a <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   19b9a:	b538      	push	{r3, r4, r5, lr}
   19b9c:	4605      	mov	r5, r0
   19b9e:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   19ba0:	2003      	movs	r0, #3
   19ba2:	f7ff ff07 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   19ba6:	b900      	cbnz	r0, 19baa <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19ba8:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19baa:	2000      	movs	r0, #0
   19bac:	f00d fba2 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19bb0:	2800      	cmp	r0, #0
   19bb2:	d0f9      	beq.n	19ba8 <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   19bb4:	223e      	movs	r2, #62	; 0x3e
   19bb6:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19bb8:	220a      	movs	r2, #10
   19bba:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   19bbc:	2203      	movs	r2, #3
   19bbe:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   19bc0:	70c4      	strb	r4, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   19bc2:	88aa      	ldrh	r2, [r5, #4]
   19bc4:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   19bc6:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
   19bca:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->periph_latency);
   19bcc:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
   19bd0:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   19bd2:	f8b5 2068 	ldrh.w	r2, [r5, #104]	; 0x68
   19bd6:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   19bd8:	f7ff fe1a 	bl	19810 <ble_ll_hci_event_send>
}
   19bdc:	e7e4      	b.n	19ba8 <ble_ll_hci_ev_conn_update+0xe>

00019bde <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   19bde:	b538      	push	{r3, r4, r5, lr}
   19be0:	4604      	mov	r4, r0
   19be2:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   19be4:	7883      	ldrb	r3, [r0, #2]
   19be6:	f013 0f04 	tst.w	r3, #4
   19bea:	d004      	beq.n	19bf6 <ble_ll_hci_ev_encrypt_chg+0x18>

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
        return;
    }

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   19bec:	2030      	movs	r0, #48	; 0x30
   19bee:	f7ff ff05 	bl	199fc <ble_ll_hci_is_event_enabled>
   19bf2:	b9e8      	cbnz	r0, 19c30 <ble_ll_hci_ev_encrypt_chg+0x52>
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19bf4:	bd38      	pop	{r3, r4, r5, pc}
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   19bf6:	2008      	movs	r0, #8
   19bf8:	f7ff ff00 	bl	199fc <ble_ll_hci_is_event_enabled>
   19bfc:	b920      	cbnz	r0, 19c08 <ble_ll_hci_ev_encrypt_chg+0x2a>
        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   19bfe:	78a3      	ldrb	r3, [r4, #2]
   19c00:	f043 0304 	orr.w	r3, r3, #4
   19c04:	70a3      	strb	r3, [r4, #2]
        return;
   19c06:	e7f5      	b.n	19bf4 <ble_ll_hci_ev_encrypt_chg+0x16>
            hci_ev = ble_transport_alloc_evt(0);
   19c08:	2000      	movs	r0, #0
   19c0a:	f00d fb73 	bl	272f4 <ble_transport_alloc_evt>
            if (hci_ev) {
   19c0e:	2800      	cmp	r0, #0
   19c10:	d0f5      	beq.n	19bfe <ble_ll_hci_ev_encrypt_chg+0x20>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   19c12:	2208      	movs	r2, #8
   19c14:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   19c16:	2204      	movs	r2, #4
   19c18:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   19c1a:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   19c1c:	88a2      	ldrh	r2, [r4, #4]
   19c1e:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   19c22:	fab5 f185 	clz	r1, r5
   19c26:	0949      	lsrs	r1, r1, #5
   19c28:	7141      	strb	r1, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   19c2a:	f7ff fdf1 	bl	19810 <ble_ll_hci_event_send>
   19c2e:	e7e6      	b.n	19bfe <ble_ll_hci_ev_encrypt_chg+0x20>
        hci_ev = ble_transport_alloc_evt(0);
   19c30:	2000      	movs	r0, #0
   19c32:	f00d fb5f 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19c36:	2800      	cmp	r0, #0
   19c38:	d0dc      	beq.n	19bf4 <ble_ll_hci_ev_encrypt_chg+0x16>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   19c3a:	2230      	movs	r2, #48	; 0x30
   19c3c:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   19c3e:	2203      	movs	r2, #3
   19c40:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   19c42:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   19c44:	88a2      	ldrh	r2, [r4, #4]
   19c46:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   19c4a:	f7ff fde1 	bl	19810 <ble_ll_hci_event_send>
   19c4e:	e7d1      	b.n	19bf4 <ble_ll_hci_ev_encrypt_chg+0x16>

00019c50 <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   19c50:	b510      	push	{r4, lr}
   19c52:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   19c54:	2005      	movs	r0, #5
   19c56:	f7ff fead 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   19c5a:	b1e0      	cbz	r0, 19c96 <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = ble_transport_alloc_evt(0);
   19c5c:	2000      	movs	r0, #0
   19c5e:	f00d fb49 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19c62:	b1d8      	cbz	r0, 19c9c <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   19c64:	223e      	movs	r2, #62	; 0x3e
   19c66:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19c68:	220d      	movs	r2, #13
   19c6a:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   19c6c:	2205      	movs	r2, #5
   19c6e:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   19c70:	88a2      	ldrh	r2, [r4, #4]
   19c72:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   19c76:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   19c7a:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   19c7e:	f8c0 1005 	str.w	r1, [r0, #5]
   19c82:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   19c86:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   19c8a:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   19c8e:	f7ff fdbf 	bl	19810 <ble_ll_hci_event_send>
        }
        rc = 0;
   19c92:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   19c94:	bd10      	pop	{r4, pc}
        rc = -1;
   19c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c9a:	e7fb      	b.n	19c94 <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   19c9c:	2000      	movs	r0, #0
    return rc;
   19c9e:	e7f9      	b.n	19c94 <ble_ll_hci_ev_ltk_req+0x44>

00019ca0 <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   19ca0:	b538      	push	{r3, r4, r5, lr}
   19ca2:	4605      	mov	r5, r0
   19ca4:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   19ca6:	2004      	movs	r0, #4
   19ca8:	f7ff fe84 	bl	199b4 <ble_ll_hci_is_le_event_enabled>
   19cac:	b900      	cbnz	r0, 19cb0 <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19cae:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19cb0:	2000      	movs	r0, #0
   19cb2:	f00d fb1f 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19cb6:	2800      	cmp	r0, #0
   19cb8:	d0f9      	beq.n	19cae <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   19cba:	233e      	movs	r3, #62	; 0x3e
   19cbc:	7003      	strb	r3, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19cbe:	230c      	movs	r3, #12
   19cc0:	7043      	strb	r3, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   19cc2:	2304      	movs	r3, #4
   19cc4:	7083      	strb	r3, [r0, #2]
            ev->status = status;
   19cc6:	70c4      	strb	r4, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   19cc8:	88ab      	ldrh	r3, [r5, #4]
   19cca:	8083      	strh	r3, [r0, #4]
            ev->features[0] = connsm->conn_features;
   19ccc:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   19cd0:	7183      	strb	r3, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   19cd2:	462b      	mov	r3, r5
   19cd4:	f853 1f3c 	ldr.w	r1, [r3, #60]!
   19cd8:	f8c0 1007 	str.w	r1, [r0, #7]
   19cdc:	8899      	ldrh	r1, [r3, #4]
   19cde:	799b      	ldrb	r3, [r3, #6]
   19ce0:	f8a0 100b 	strh.w	r1, [r0, #11]
   19ce4:	7343      	strb	r3, [r0, #13]
            ble_ll_hci_event_send(hci_ev);
   19ce6:	f7ff fd93 	bl	19810 <ble_ll_hci_event_send>
}
   19cea:	e7e0      	b.n	19cae <ble_ll_hci_ev_rd_rem_used_feat+0xe>

00019cec <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   19cec:	b538      	push	{r3, r4, r5, lr}
   19cee:	4605      	mov	r5, r0
   19cf0:	460c      	mov	r4, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   19cf2:	200c      	movs	r0, #12
   19cf4:	f7ff fe82 	bl	199fc <ble_ll_hci_is_event_enabled>
   19cf8:	b900      	cbnz	r0, 19cfc <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19cfa:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19cfc:	2000      	movs	r0, #0
   19cfe:	f00d faf9 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19d02:	2800      	cmp	r0, #0
   19d04:	d0f9      	beq.n	19cfa <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   19d06:	220c      	movs	r2, #12
   19d08:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19d0a:	2208      	movs	r2, #8
   19d0c:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   19d0e:	7084      	strb	r4, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   19d10:	88aa      	ldrh	r2, [r5, #4]
   19d12:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   19d16:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   19d1a:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   19d1c:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
   19d20:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   19d22:	f8b5 204c 	ldrh.w	r2, [r5, #76]	; 0x4c
   19d26:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   19d28:	f7ff fd72 	bl	19810 <ble_ll_hci_event_send>
}
   19d2c:	e7e5      	b.n	19cfa <ble_ll_hci_ev_rd_rem_ver+0xe>

00019d2e <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   19d2e:	b510      	push	{r4, lr}
   19d30:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   19d32:	2010      	movs	r0, #16
   19d34:	f7ff fe62 	bl	199fc <ble_ll_hci_is_event_enabled>
   19d38:	b908      	cbnz	r0, 19d3e <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   19d3a:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   19d3c:	bd10      	pop	{r4, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19d3e:	2000      	movs	r0, #0
   19d40:	f00d fad8 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19d44:	b140      	cbz	r0, 19d58 <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   19d46:	2210      	movs	r2, #16
   19d48:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19d4a:	2201      	movs	r2, #1
   19d4c:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   19d4e:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   19d50:	f7ff fd5e 	bl	19810 <ble_ll_hci_event_send>
    rc = 0;
   19d54:	2000      	movs	r0, #0
   19d56:	e7f1      	b.n	19d3c <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   19d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   19d5c:	e7ee      	b.n	19d3c <ble_ll_hci_ev_hw_err+0xe>

00019d5e <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   19d5e:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   19d60:	201a      	movs	r0, #26
   19d62:	f7ff fe4b 	bl	199fc <ble_ll_hci_is_event_enabled>
   19d66:	b900      	cbnz	r0, 19d6a <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   19d68:	bd08      	pop	{r3, pc}
        hci_ev = ble_transport_alloc_evt(0);
   19d6a:	2000      	movs	r0, #0
   19d6c:	f00d fac2 	bl	272f4 <ble_transport_alloc_evt>
        if (hci_ev) {
   19d70:	2800      	cmp	r0, #0
   19d72:	d0f9      	beq.n	19d68 <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   19d74:	221a      	movs	r2, #26
   19d76:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   19d78:	2201      	movs	r2, #1
   19d7a:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   19d7c:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   19d7e:	f7ff fd47 	bl	19810 <ble_ll_hci_event_send>
}
   19d82:	e7f1      	b.n	19d68 <ble_ll_hci_ev_databuf_overflow+0xa>

00019d84 <ble_ll_hci_vs_find_by_ocf>:
#endif
};

static struct ble_ll_hci_vs_cmd *
ble_ll_hci_vs_find_by_ocf(uint16_t ocf)
{
   19d84:	4602      	mov	r2, r0
    struct ble_ll_hci_vs_cmd *entry;

    entry = SLIST_FIRST(&g_ble_ll_hci_vs_list);
   19d86:	4b04      	ldr	r3, [pc, #16]	; (19d98 <ble_ll_hci_vs_find_by_ocf+0x14>)
   19d88:	6818      	ldr	r0, [r3, #0]
    while (entry) {
   19d8a:	b120      	cbz	r0, 19d96 <ble_ll_hci_vs_find_by_ocf+0x12>
        if (entry->ocf == ocf) {
   19d8c:	8803      	ldrh	r3, [r0, #0]
   19d8e:	4293      	cmp	r3, r2
   19d90:	d001      	beq.n	19d96 <ble_ll_hci_vs_find_by_ocf+0x12>
            return entry;
        }

        entry = SLIST_NEXT(entry, link);
   19d92:	6880      	ldr	r0, [r0, #8]
   19d94:	e7f9      	b.n	19d8a <ble_ll_hci_vs_find_by_ocf+0x6>
    }

    return NULL;
}
   19d96:	4770      	bx	lr
   19d98:	2000252c 	.word	0x2000252c

00019d9c <ble_ll_hci_vs_is_controller_busy>:
{
   19d9c:	b508      	push	{r3, lr}
    if (ble_ll_adv_enabled()) {
   19d9e:	f7fb ff63 	bl	15c68 <ble_ll_adv_enabled>
   19da2:	b958      	cbnz	r0, 19dbc <ble_ll_hci_vs_is_controller_busy+0x20>
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   19da4:	4b07      	ldr	r3, [pc, #28]	; (19dc4 <ble_ll_hci_vs_is_controller_busy+0x28>)
   19da6:	681b      	ldr	r3, [r3, #0]
    int i = 0;
   19da8:	2200      	movs	r2, #0
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   19daa:	b11b      	cbz	r3, 19db4 <ble_ll_hci_vs_is_controller_busy+0x18>
        i++;
   19dac:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_ble_ll_conn_free_list, free_stqe) {
   19dae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   19db2:	e7fa      	b.n	19daa <ble_ll_hci_vs_is_controller_busy+0xe>
    if (i < MYNEWT_VAL(BLE_MAX_CONNECTIONS)) {
   19db4:	2a00      	cmp	r2, #0
   19db6:	dd03      	ble.n	19dc0 <ble_ll_hci_vs_is_controller_busy+0x24>
    return 0;
   19db8:	2000      	movs	r0, #0
}
   19dba:	bd08      	pop	{r3, pc}
        return 1;
   19dbc:	2001      	movs	r0, #1
   19dbe:	e7fc      	b.n	19dba <ble_ll_hci_vs_is_controller_busy+0x1e>
        return 1;
   19dc0:	2001      	movs	r0, #1
   19dc2:	e7fa      	b.n	19dba <ble_ll_hci_vs_is_controller_busy+0x1e>
   19dc4:	20002334 	.word	0x20002334

00019dc8 <ble_ll_hci_vs_set_tx_power>:
{
   19dc8:	b570      	push	{r4, r5, r6, lr}
    if (cmdlen != sizeof(*cmd)) {
   19dca:	2a01      	cmp	r2, #1
   19dcc:	d002      	beq.n	19dd4 <ble_ll_hci_vs_set_tx_power+0xc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19dce:	2612      	movs	r6, #18
}
   19dd0:	4630      	mov	r0, r6
   19dd2:	bd70      	pop	{r4, r5, r6, pc}
   19dd4:	460c      	mov	r4, r1
   19dd6:	461d      	mov	r5, r3
    if (ble_ll_hci_vs_is_controller_busy()) {
   19dd8:	f7ff ffe0 	bl	19d9c <ble_ll_hci_vs_is_controller_busy>
   19ddc:	4606      	mov	r6, r0
   19dde:	b998      	cbnz	r0, 19e08 <ble_ll_hci_vs_set_tx_power+0x40>
    if (cmd->tx_power == 127) {
   19de0:	f994 0000 	ldrsb.w	r0, [r4]
   19de4:	287f      	cmp	r0, #127	; 0x7f
   19de6:	d10a      	bne.n	19dfe <ble_ll_hci_vs_set_tx_power+0x36>
        g_ble_ll_tx_power = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   19de8:	4b08      	ldr	r3, [pc, #32]	; (19e0c <ble_ll_hci_vs_set_tx_power+0x44>)
   19dea:	2200      	movs	r2, #0
   19dec:	701a      	strb	r2, [r3, #0]
    rsp->tx_power = g_ble_ll_tx_power;
   19dee:	4b07      	ldr	r3, [pc, #28]	; (19e0c <ble_ll_hci_vs_set_tx_power+0x44>)
   19df0:	f993 3000 	ldrsb.w	r3, [r3]
   19df4:	702b      	strb	r3, [r5, #0]
    *rsplen = sizeof(*rsp);
   19df6:	9b04      	ldr	r3, [sp, #16]
   19df8:	2201      	movs	r2, #1
   19dfa:	701a      	strb	r2, [r3, #0]
    return BLE_ERR_SUCCESS;
   19dfc:	e7e8      	b.n	19dd0 <ble_ll_hci_vs_set_tx_power+0x8>
        g_ble_ll_tx_power = ble_phy_txpower_round(cmd->tx_power);
   19dfe:	f001 fee1 	bl	1bbc4 <ble_phy_txpower_round>
   19e02:	4b02      	ldr	r3, [pc, #8]	; (19e0c <ble_ll_hci_vs_set_tx_power+0x44>)
   19e04:	7018      	strb	r0, [r3, #0]
   19e06:	e7f2      	b.n	19dee <ble_ll_hci_vs_set_tx_power+0x26>
        return BLE_ERR_CMD_DISALLOWED;
   19e08:	260c      	movs	r6, #12
   19e0a:	e7e1      	b.n	19dd0 <ble_ll_hci_vs_set_tx_power+0x8>
   19e0c:	20002218 	.word	0x20002218

00019e10 <ble_ll_hci_vs_rd_static_addr>:
    if (cmdlen != 0) {
   19e10:	b99a      	cbnz	r2, 19e3a <ble_ll_hci_vs_rd_static_addr+0x2a>
{
   19e12:	b510      	push	{r4, lr}
   19e14:	b082      	sub	sp, #8
   19e16:	461c      	mov	r4, r3
    if (ble_hw_get_static_addr(&addr) < 0) {
   19e18:	4668      	mov	r0, sp
   19e1a:	f001 f9dd 	bl	1b1d8 <ble_hw_get_static_addr>
   19e1e:	2800      	cmp	r0, #0
   19e20:	db0d      	blt.n	19e3e <ble_ll_hci_vs_rd_static_addr+0x2e>
    memcpy(rsp->addr, addr.val, sizeof(rsp->addr));
   19e22:	f8dd 3001 	ldr.w	r3, [sp, #1]
   19e26:	6023      	str	r3, [r4, #0]
   19e28:	f8bd 3005 	ldrh.w	r3, [sp, #5]
   19e2c:	80a3      	strh	r3, [r4, #4]
    *rsplen = sizeof(*rsp);
   19e2e:	9b04      	ldr	r3, [sp, #16]
   19e30:	2206      	movs	r2, #6
   19e32:	701a      	strb	r2, [r3, #0]
    return BLE_ERR_SUCCESS;
   19e34:	2000      	movs	r0, #0
}
   19e36:	b002      	add	sp, #8
   19e38:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19e3a:	2012      	movs	r0, #18
}
   19e3c:	4770      	bx	lr
        return BLE_ERR_UNSPECIFIED;
   19e3e:	201f      	movs	r0, #31
   19e40:	e7f9      	b.n	19e36 <ble_ll_hci_vs_rd_static_addr+0x26>

00019e42 <ble_ll_hci_vs_cmd_proc>:

int
ble_ll_hci_vs_cmd_proc(const uint8_t *cmdbuf, uint8_t cmdlen, uint16_t ocf,
                       uint8_t *rspbuf, uint8_t *rsplen)
{
   19e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e46:	b082      	sub	sp, #8
   19e48:	4607      	mov	r7, r0
   19e4a:	460e      	mov	r6, r1
   19e4c:	4614      	mov	r4, r2
   19e4e:	461d      	mov	r5, r3
    struct ble_ll_hci_vs_cmd *cmd;
    int rc;

    cmd = ble_ll_hci_vs_find_by_ocf(ocf);
   19e50:	4610      	mov	r0, r2
   19e52:	f7ff ff97 	bl	19d84 <ble_ll_hci_vs_find_by_ocf>
    if (!cmd) {
   19e56:	b158      	cbz	r0, 19e70 <ble_ll_hci_vs_cmd_proc+0x2e>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
    } else {
        rc = cmd->cb(ocf, cmdbuf, cmdlen, rspbuf, rsplen);
   19e58:	f8d0 8004 	ldr.w	r8, [r0, #4]
   19e5c:	9b08      	ldr	r3, [sp, #32]
   19e5e:	9300      	str	r3, [sp, #0]
   19e60:	462b      	mov	r3, r5
   19e62:	4632      	mov	r2, r6
   19e64:	4639      	mov	r1, r7
   19e66:	4620      	mov	r0, r4
   19e68:	47c0      	blx	r8
    }

    return rc;
}
   19e6a:	b002      	add	sp, #8
   19e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   19e70:	2001      	movs	r0, #1
    return rc;
   19e72:	e7fa      	b.n	19e6a <ble_ll_hci_vs_cmd_proc+0x28>

00019e74 <ble_ll_hci_vs_register>:

void
ble_ll_hci_vs_register(struct ble_ll_hci_vs_cmd *cmds, uint32_t num_cmds)
{
   19e74:	b570      	push	{r4, r5, r6, lr}
   19e76:	4604      	mov	r4, r0
   19e78:	460e      	mov	r6, r1

    /* Assume all cmds are registered early on init, so just assert in case of
     * invalid request since it means something is wrong with the code itself.
     */

    for (i = 0; i < num_cmds; i++, cmds++) {
   19e7a:	2500      	movs	r5, #0
   19e7c:	42b5      	cmp	r5, r6
   19e7e:	d220      	bcs.n	19ec2 <ble_ll_hci_vs_register+0x4e>
        BLE_LL_ASSERT(cmds->cb != NULL);
   19e80:	6863      	ldr	r3, [r4, #4]
   19e82:	b153      	cbz	r3, 19e9a <ble_ll_hci_vs_register+0x26>
        BLE_LL_ASSERT(ble_ll_hci_vs_find_by_ocf(cmds->ocf) == NULL);
   19e84:	8820      	ldrh	r0, [r4, #0]
   19e86:	f7ff ff7d 	bl	19d84 <ble_ll_hci_vs_find_by_ocf>
   19e8a:	b980      	cbnz	r0, 19eae <ble_ll_hci_vs_register+0x3a>

        SLIST_INSERT_HEAD(&g_ble_ll_hci_vs_list, cmds, link);
   19e8c:	4b0d      	ldr	r3, [pc, #52]	; (19ec4 <ble_ll_hci_vs_register+0x50>)
   19e8e:	681a      	ldr	r2, [r3, #0]
   19e90:	60a2      	str	r2, [r4, #8]
   19e92:	601c      	str	r4, [r3, #0]
    for (i = 0; i < num_cmds; i++, cmds++) {
   19e94:	3501      	adds	r5, #1
   19e96:	340c      	adds	r4, #12
   19e98:	e7f0      	b.n	19e7c <ble_ll_hci_vs_register+0x8>
        BLE_LL_ASSERT(cmds->cb != NULL);
   19e9a:	f7f2 f97f 	bl	c19c <hal_debugger_connected>
   19e9e:	b100      	cbz	r0, 19ea2 <ble_ll_hci_vs_register+0x2e>
   19ea0:	be01      	bkpt	0x0001
   19ea2:	2300      	movs	r3, #0
   19ea4:	461a      	mov	r2, r3
   19ea6:	4619      	mov	r1, r3
   19ea8:	4618      	mov	r0, r3
   19eaa:	f7f2 fe7b 	bl	cba4 <__assert_func>
        BLE_LL_ASSERT(ble_ll_hci_vs_find_by_ocf(cmds->ocf) == NULL);
   19eae:	f7f2 f975 	bl	c19c <hal_debugger_connected>
   19eb2:	b100      	cbz	r0, 19eb6 <ble_ll_hci_vs_register+0x42>
   19eb4:	be01      	bkpt	0x0001
   19eb6:	2300      	movs	r3, #0
   19eb8:	461a      	mov	r2, r3
   19eba:	4619      	mov	r1, r3
   19ebc:	4618      	mov	r0, r3
   19ebe:	f7f2 fe71 	bl	cba4 <__assert_func>
    }
}
   19ec2:	bd70      	pop	{r4, r5, r6, pc}
   19ec4:	2000252c 	.word	0x2000252c

00019ec8 <ble_ll_hci_vs_init>:

void
ble_ll_hci_vs_init(void)
{
   19ec8:	b508      	push	{r3, lr}
    SLIST_INIT(&g_ble_ll_hci_vs_list);
   19eca:	4b04      	ldr	r3, [pc, #16]	; (19edc <ble_ll_hci_vs_init+0x14>)
   19ecc:	2200      	movs	r2, #0
   19ece:	601a      	str	r2, [r3, #0]

    ble_ll_hci_vs_register(g_ble_ll_hci_vs_cmds,
   19ed0:	2102      	movs	r1, #2
   19ed2:	4803      	ldr	r0, [pc, #12]	; (19ee0 <ble_ll_hci_vs_init+0x18>)
   19ed4:	f7ff ffce 	bl	19e74 <ble_ll_hci_vs_register>
                           ARRAY_SIZE(g_ble_ll_hci_vs_cmds));
}
   19ed8:	bd08      	pop	{r3, pc}
   19eda:	bf00      	nop
   19edc:	2000252c 	.word	0x2000252c
   19ee0:	200002a8 	.word	0x200002a8

00019ee4 <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   19ee4:	b538      	push	{r3, r4, r5, lr}
   19ee6:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   19ee8:	f7f4 fb2e 	bl	e548 <os_arch_save_sr>
   19eec:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   19eee:	4b0f      	ldr	r3, [pc, #60]	; (19f2c <ble_ll_rand_sample+0x48>)
   19ef0:	7a1b      	ldrb	r3, [r3, #8]
   19ef2:	b2db      	uxtb	r3, r3
   19ef4:	2b1f      	cmp	r3, #31
   19ef6:	d815      	bhi.n	19f24 <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   19ef8:	4a0c      	ldr	r2, [pc, #48]	; (19f2c <ble_ll_rand_sample+0x48>)
   19efa:	7a13      	ldrb	r3, [r2, #8]
   19efc:	3301      	adds	r3, #1
   19efe:	b2db      	uxtb	r3, r3
   19f00:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   19f02:	6813      	ldr	r3, [r2, #0]
   19f04:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   19f06:	6813      	ldr	r3, [r2, #0]
   19f08:	4a09      	ldr	r2, [pc, #36]	; (19f30 <ble_ll_rand_sample+0x4c>)
   19f0a:	4293      	cmp	r3, r2
   19f0c:	d006      	beq.n	19f1c <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   19f0e:	3301      	adds	r3, #1
   19f10:	4a06      	ldr	r2, [pc, #24]	; (19f2c <ble_ll_rand_sample+0x48>)
   19f12:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   19f14:	4620      	mov	r0, r4
   19f16:	f7f4 fb1d 	bl	e554 <os_arch_restore_sr>
}
   19f1a:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   19f1c:	4b03      	ldr	r3, [pc, #12]	; (19f2c <ble_ll_rand_sample+0x48>)
   19f1e:	3a1f      	subs	r2, #31
   19f20:	601a      	str	r2, [r3, #0]
   19f22:	e7f7      	b.n	19f14 <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   19f24:	f001 fa72 	bl	1b40c <ble_hw_rng_stop>
   19f28:	e7f4      	b.n	19f14 <ble_ll_rand_sample+0x30>
   19f2a:	bf00      	nop
   19f2c:	20002550 	.word	0x20002550
   19f30:	2000254f 	.word	0x2000254f

00019f34 <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   19f34:	b570      	push	{r4, r5, r6, lr}
   19f36:	4604      	mov	r4, r0
   19f38:	460e      	mov	r6, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   19f3a:	e018      	b.n	19f6e <ble_ll_rand_data_get+0x3a>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   19f3c:	4a1b      	ldr	r2, [pc, #108]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f3e:	f1a5 011f 	sub.w	r1, r5, #31
   19f42:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   19f44:	3401      	adds	r4, #1
            --rnums;
   19f46:	3b01      	subs	r3, #1
   19f48:	b2db      	uxtb	r3, r3
        while (rnums) {
   19f4a:	b15b      	cbz	r3, 19f64 <ble_ll_rand_data_get+0x30>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   19f4c:	4a17      	ldr	r2, [pc, #92]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f4e:	6851      	ldr	r1, [r2, #4]
   19f50:	7809      	ldrb	r1, [r1, #0]
   19f52:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   19f54:	6852      	ldr	r2, [r2, #4]
   19f56:	4d16      	ldr	r5, [pc, #88]	; (19fb0 <ble_ll_rand_data_get+0x7c>)
   19f58:	42aa      	cmp	r2, r5
   19f5a:	d0ef      	beq.n	19f3c <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   19f5c:	3201      	adds	r2, #1
   19f5e:	4913      	ldr	r1, [pc, #76]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f60:	604a      	str	r2, [r1, #4]
   19f62:	e7ef      	b.n	19f44 <ble_ll_rand_data_get+0x10>
        }
        OS_EXIT_CRITICAL(sr);
   19f64:	f7f4 faf6 	bl	e554 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   19f68:	f001 fa36 	bl	1b3d8 <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   19f6c:	b986      	cbnz	r6, 19f90 <ble_ll_rand_data_get+0x5c>
    while (len != 0) {
   19f6e:	b1d6      	cbz	r6, 19fa6 <ble_ll_rand_data_get+0x72>
        OS_ENTER_CRITICAL(sr);
   19f70:	f7f4 faea 	bl	e548 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   19f74:	4b0d      	ldr	r3, [pc, #52]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f76:	7a1b      	ldrb	r3, [r3, #8]
   19f78:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   19f7a:	429e      	cmp	r6, r3
   19f7c:	d200      	bcs.n	19f80 <ble_ll_rand_data_get+0x4c>
            rnums = len;
   19f7e:	4633      	mov	r3, r6
        len -= rnums;
   19f80:	1af6      	subs	r6, r6, r3
   19f82:	b2f6      	uxtb	r6, r6
        g_ble_ll_rnum_data.rnd_size -= rnums;
   19f84:	4909      	ldr	r1, [pc, #36]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f86:	7a0a      	ldrb	r2, [r1, #8]
   19f88:	1ad2      	subs	r2, r2, r3
   19f8a:	b2d2      	uxtb	r2, r2
   19f8c:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   19f8e:	e7dc      	b.n	19f4a <ble_ll_rand_data_get+0x16>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   19f90:	4b06      	ldr	r3, [pc, #24]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f92:	7a1b      	ldrb	r3, [r3, #8]
   19f94:	b2db      	uxtb	r3, r3
   19f96:	42b3      	cmp	r3, r6
   19f98:	d2e9      	bcs.n	19f6e <ble_ll_rand_data_get+0x3a>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   19f9a:	4b04      	ldr	r3, [pc, #16]	; (19fac <ble_ll_rand_data_get+0x78>)
   19f9c:	7a1b      	ldrb	r3, [r3, #8]
   19f9e:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   19fa0:	2b1f      	cmp	r3, #31
   19fa2:	d9f5      	bls.n	19f90 <ble_ll_rand_data_get+0x5c>
   19fa4:	e7e3      	b.n	19f6e <ble_ll_rand_data_get+0x3a>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   19fa6:	2000      	movs	r0, #0
   19fa8:	bd70      	pop	{r4, r5, r6, pc}
   19faa:	bf00      	nop
   19fac:	20002550 	.word	0x20002550
   19fb0:	2000254f 	.word	0x2000254f

00019fb4 <ble_ll_rand>:

/* Simple wrapper to allow easy replacement of rand() */
uint32_t
ble_ll_rand(void)
{
   19fb4:	b508      	push	{r3, lr}
    static unsigned short xsubi[3];
    static bool init = true;

    if (init) {
   19fb6:	4b07      	ldr	r3, [pc, #28]	; (19fd4 <ble_ll_rand+0x20>)
   19fb8:	781b      	ldrb	r3, [r3, #0]
   19fba:	b91b      	cbnz	r3, 19fc4 <ble_ll_rand+0x10>
        init = false;
        ble_ll_rand_data_get((uint8_t *)xsubi, sizeof(xsubi));
    }

    return (uint32_t) jrand48(xsubi);
   19fbc:	4806      	ldr	r0, [pc, #24]	; (19fd8 <ble_ll_rand+0x24>)
   19fbe:	f7f4 fd65 	bl	ea8c <jrand48>
}
   19fc2:	bd08      	pop	{r3, pc}
        init = false;
   19fc4:	4b03      	ldr	r3, [pc, #12]	; (19fd4 <ble_ll_rand+0x20>)
   19fc6:	2200      	movs	r2, #0
   19fc8:	701a      	strb	r2, [r3, #0]
        ble_ll_rand_data_get((uint8_t *)xsubi, sizeof(xsubi));
   19fca:	2106      	movs	r1, #6
   19fcc:	4802      	ldr	r0, [pc, #8]	; (19fd8 <ble_ll_rand+0x24>)
   19fce:	f7ff ffb1 	bl	19f34 <ble_ll_rand_data_get>
   19fd2:	e7f3      	b.n	19fbc <ble_ll_rand+0x8>
   19fd4:	200002c0 	.word	0x200002c0
   19fd8:	2000255c 	.word	0x2000255c

00019fdc <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   19fdc:	b510      	push	{r4, lr}
   19fde:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   19fe0:	2103      	movs	r1, #3
   19fe2:	4620      	mov	r0, r4
   19fe4:	f7ff ffa6 	bl	19f34 <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   19fe8:	7823      	ldrb	r3, [r4, #0]
   19fea:	7862      	ldrb	r2, [r4, #1]
   19fec:	4413      	add	r3, r2
   19fee:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   19ff0:	18d3      	adds	r3, r2, r3
   19ff2:	d0f5      	beq.n	19fe0 <ble_ll_rand_prand_get+0x4>
   19ff4:	f240 21fd 	movw	r1, #765	; 0x2fd
   19ff8:	428b      	cmp	r3, r1
   19ffa:	d0f1      	beq.n	19fe0 <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   19ffc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   1a000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a004:	70a2      	strb	r2, [r4, #2]
}
   1a006:	bd10      	pop	{r4, pc}

0001a008 <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   1a008:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   1a00a:	4b05      	ldr	r3, [pc, #20]	; (1a020 <ble_ll_rand_start+0x18>)
   1a00c:	7a1b      	ldrb	r3, [r3, #8]
   1a00e:	b2db      	uxtb	r3, r3
   1a010:	2b1f      	cmp	r3, #31
   1a012:	d901      	bls.n	1a018 <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   1a014:	2000      	movs	r0, #0
   1a016:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   1a018:	f001 f9de 	bl	1b3d8 <ble_hw_rng_start>
   1a01c:	e7fa      	b.n	1a014 <ble_ll_rand_start+0xc>
   1a01e:	bf00      	nop
   1a020:	20002550 	.word	0x20002550

0001a024 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   1a024:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   1a026:	4b05      	ldr	r3, [pc, #20]	; (1a03c <ble_ll_rand_init+0x18>)
   1a028:	4a05      	ldr	r2, [pc, #20]	; (1a040 <ble_ll_rand_init+0x1c>)
   1a02a:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   1a02c:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   1a02e:	2101      	movs	r1, #1
   1a030:	4804      	ldr	r0, [pc, #16]	; (1a044 <ble_ll_rand_init+0x20>)
   1a032:	f001 f9ad 	bl	1b390 <ble_hw_rng_init>
#endif
    return 0;
}
   1a036:	2000      	movs	r0, #0
   1a038:	bd08      	pop	{r3, pc}
   1a03a:	bf00      	nop
   1a03c:	20002550 	.word	0x20002550
   1a040:	20002530 	.word	0x20002530
   1a044:	00019ee5 	.word	0x00019ee5

0001a048 <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   1a048:	2300      	movs	r3, #0
   1a04a:	2b0f      	cmp	r3, #15
   1a04c:	dc04      	bgt.n	1a058 <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   1a04e:	7802      	ldrb	r2, [r0, #0]
   1a050:	b922      	cbnz	r2, 1a05c <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   1a052:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   1a054:	3301      	adds	r3, #1
   1a056:	e7f8      	b.n	1a04a <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   1a058:	2000      	movs	r0, #0
   1a05a:	4770      	bx	lr
            rc = 1;
   1a05c:	2001      	movs	r0, #1
    }

    return rc;
}
   1a05e:	4770      	bx	lr

0001a060 <ble_ll_is_controller_busy>:
{
   1a060:	b508      	push	{r3, lr}
    if (ble_ll_adv_enabled()) {
   1a062:	f7fb fe01 	bl	15c68 <ble_ll_adv_enabled>
   1a066:	b900      	cbnz	r0, 1a06a <ble_ll_is_controller_busy+0xa>
}
   1a068:	bd08      	pop	{r3, pc}
        return 1;
   1a06a:	2001      	movs	r0, #1
   1a06c:	e7fc      	b.n	1a068 <ble_ll_is_controller_busy+0x8>
	...

0001a070 <ble_ll_resolv_list_chg_allowed>:
{
   1a070:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   1a072:	4b06      	ldr	r3, [pc, #24]	; (1a08c <ble_ll_resolv_list_chg_allowed+0x1c>)
   1a074:	781b      	ldrb	r3, [r3, #0]
   1a076:	b90b      	cbnz	r3, 1a07c <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   1a078:	2001      	movs	r0, #1
}
   1a07a:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   1a07c:	f7ff fff0 	bl	1a060 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   1a080:	b108      	cbz	r0, 1a086 <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 0;
   1a082:	2000      	movs	r0, #0
   1a084:	e7f9      	b.n	1a07a <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 1;
   1a086:	2001      	movs	r0, #1
    return rc;
   1a088:	e7f7      	b.n	1a07a <ble_ll_resolv_list_chg_allowed+0xa>
   1a08a:	bf00      	nop
   1a08c:	20002564 	.word	0x20002564

0001a090 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   1a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a092:	4607      	mov	r7, r0
   1a094:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   1a096:	4c0c      	ldr	r4, [pc, #48]	; (1a0c8 <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1a098:	2500      	movs	r5, #0
   1a09a:	e001      	b.n	1a0a0 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   1a09c:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1a09e:	3501      	adds	r5, #1
   1a0a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0cc <ble_ll_is_on_resolv_list+0x3c>)
   1a0a2:	78db      	ldrb	r3, [r3, #3]
   1a0a4:	42ab      	cmp	r3, r5
   1a0a6:	dd0c      	ble.n	1a0c2 <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   1a0a8:	7823      	ldrb	r3, [r4, #0]
   1a0aa:	42b3      	cmp	r3, r6
   1a0ac:	d1f6      	bne.n	1a09c <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   1a0ae:	2206      	movs	r2, #6
   1a0b0:	4639      	mov	r1, r7
   1a0b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1a0b6:	f7f4 fc5b 	bl	e970 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   1a0ba:	2800      	cmp	r0, #0
   1a0bc:	d1ee      	bne.n	1a09c <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   1a0be:	1c68      	adds	r0, r5, #1
   1a0c0:	e000      	b.n	1a0c4 <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   1a0c2:	2000      	movs	r0, #0
}
   1a0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0c6:	bf00      	nop
   1a0c8:	2000258c 	.word	0x2000258c
   1a0cc:	20002564 	.word	0x20002564

0001a0d0 <ble_ll_resolv_gen_priv_addr>:
{
   1a0d0:	b570      	push	{r4, r5, r6, lr}
   1a0d2:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   1a0d4:	b350      	cbz	r0, 1a12c <ble_ll_resolv_gen_priv_addr+0x5c>
   1a0d6:	4605      	mov	r5, r0
    if (local) {
   1a0d8:	b391      	cbz	r1, 1a140 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_local_rpa;
   1a0da:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   1a0de:	3504      	adds	r5, #4
    ble_ll_rand_prand_get(prand);
   1a0e0:	1ce0      	adds	r0, r4, #3
   1a0e2:	f7ff ff7b 	bl	19fdc <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   1a0e6:	466e      	mov	r6, sp
   1a0e8:	6828      	ldr	r0, [r5, #0]
   1a0ea:	6869      	ldr	r1, [r5, #4]
   1a0ec:	68aa      	ldr	r2, [r5, #8]
   1a0ee:	68eb      	ldr	r3, [r5, #12]
   1a0f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   1a0f2:	2300      	movs	r3, #0
   1a0f4:	9304      	str	r3, [sp, #16]
   1a0f6:	9305      	str	r3, [sp, #20]
   1a0f8:	9306      	str	r3, [sp, #24]
   1a0fa:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   1a0fe:	7963      	ldrb	r3, [r4, #5]
   1a100:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   1a104:	7923      	ldrb	r3, [r4, #4]
   1a106:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   1a10a:	78e3      	ldrb	r3, [r4, #3]
   1a10c:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   1a110:	4668      	mov	r0, sp
   1a112:	f001 f91f 	bl	1b354 <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   1a116:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1a11a:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   1a11c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   1a120:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   1a122:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   1a126:	70a3      	strb	r3, [r4, #2]
}
   1a128:	b00c      	add	sp, #48	; 0x30
   1a12a:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   1a12c:	f7f2 f836 	bl	c19c <hal_debugger_connected>
   1a130:	b100      	cbz	r0, 1a134 <ble_ll_resolv_gen_priv_addr+0x64>
   1a132:	be01      	bkpt	0x0001
   1a134:	2300      	movs	r3, #0
   1a136:	461a      	mov	r2, r3
   1a138:	4619      	mov	r1, r3
   1a13a:	4618      	mov	r0, r3
   1a13c:	f7f2 fd32 	bl	cba4 <__assert_func>
        addr = rl->rl_peer_rpa;
   1a140:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   1a144:	3514      	adds	r5, #20
   1a146:	e7cb      	b.n	1a0e0 <ble_ll_resolv_gen_priv_addr+0x10>

0001a148 <ble_ll_resolv_rpa_timer_cb>:
{
   1a148:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   1a14a:	4c16      	ldr	r4, [pc, #88]	; (1a1a4 <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1a14c:	2500      	movs	r5, #0
   1a14e:	e016      	b.n	1a17e <ble_ll_resolv_rpa_timer_cb+0x36>
            OS_ENTER_CRITICAL(sr);
   1a150:	f7f4 f9fa 	bl	e548 <os_arch_save_sr>
   1a154:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   1a156:	2101      	movs	r1, #1
   1a158:	4620      	mov	r0, r4
   1a15a:	f7ff ffb9 	bl	1a0d0 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   1a15e:	4630      	mov	r0, r6
   1a160:	f7f4 f9f8 	bl	e554 <os_arch_restore_sr>
   1a164:	e012      	b.n	1a18c <ble_ll_resolv_rpa_timer_cb+0x44>
            OS_ENTER_CRITICAL(sr);
   1a166:	f7f4 f9ef 	bl	e548 <os_arch_save_sr>
   1a16a:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   1a16c:	2100      	movs	r1, #0
   1a16e:	4620      	mov	r0, r4
   1a170:	f7ff ffae 	bl	1a0d0 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   1a174:	4630      	mov	r0, r6
   1a176:	f7f4 f9ed 	bl	e554 <os_arch_restore_sr>
        ++rl;
   1a17a:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1a17c:	3501      	adds	r5, #1
   1a17e:	4b0a      	ldr	r3, [pc, #40]	; (1a1a8 <ble_ll_resolv_rpa_timer_cb+0x60>)
   1a180:	78db      	ldrb	r3, [r3, #3]
   1a182:	42ab      	cmp	r3, r5
   1a184:	dd06      	ble.n	1a194 <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   1a186:	78a3      	ldrb	r3, [r4, #2]
   1a188:	2b00      	cmp	r3, #0
   1a18a:	d1e1      	bne.n	1a150 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   1a18c:	78e3      	ldrb	r3, [r4, #3]
   1a18e:	2b00      	cmp	r3, #0
   1a190:	d0f3      	beq.n	1a17a <ble_ll_resolv_rpa_timer_cb+0x32>
   1a192:	e7e8      	b.n	1a166 <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   1a194:	4804      	ldr	r0, [pc, #16]	; (1a1a8 <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1a196:	6841      	ldr	r1, [r0, #4]
   1a198:	3008      	adds	r0, #8
   1a19a:	f7f2 fedd 	bl	cf58 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   1a19e:	f7fb fb99 	bl	158d4 <ble_ll_adv_rpa_timeout>
}
   1a1a2:	bd70      	pop	{r4, r5, r6, pc}
   1a1a4:	2000258c 	.word	0x2000258c
   1a1a8:	20002564 	.word	0x20002564

0001a1ac <ble_ll_resolv_list_clr>:
{
   1a1ac:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   1a1ae:	f7ff ff5f 	bl	1a070 <ble_ll_resolv_list_chg_allowed>
   1a1b2:	b158      	cbz	r0, 1a1cc <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   1a1b4:	4d06      	ldr	r5, [pc, #24]	; (1a1d0 <ble_ll_resolv_list_clr+0x24>)
   1a1b6:	2400      	movs	r4, #0
   1a1b8:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   1a1ba:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   1a1bc:	f001 f93a 	bl	1b434 <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   1a1c0:	f105 0008 	add.w	r0, r5, #8
   1a1c4:	f7f2 feaa 	bl	cf1c <os_callout_stop>
    return BLE_ERR_SUCCESS;
   1a1c8:	4620      	mov	r0, r4
}
   1a1ca:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1a1cc:	200c      	movs	r0, #12
   1a1ce:	e7fc      	b.n	1a1ca <ble_ll_resolv_list_clr+0x1e>
   1a1d0:	20002564 	.word	0x20002564

0001a1d4 <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   1a1d4:	4b03      	ldr	r3, [pc, #12]	; (1a1e4 <ble_ll_resolv_list_read_size+0x10>)
   1a1d6:	785b      	ldrb	r3, [r3, #1]
   1a1d8:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1a1da:	2301      	movs	r3, #1
   1a1dc:	700b      	strb	r3, [r1, #0]
}
   1a1de:	2000      	movs	r0, #0
   1a1e0:	4770      	bx	lr
   1a1e2:	bf00      	nop
   1a1e4:	20002564 	.word	0x20002564

0001a1e8 <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   1a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1ea:	4607      	mov	r7, r0
   1a1ec:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   1a1ee:	4c0c      	ldr	r4, [pc, #48]	; (1a220 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1a1f0:	2500      	movs	r5, #0
   1a1f2:	e001      	b.n	1a1f8 <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   1a1f4:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1a1f6:	3501      	adds	r5, #1
   1a1f8:	4b0a      	ldr	r3, [pc, #40]	; (1a224 <ble_ll_resolv_list_find+0x3c>)
   1a1fa:	78db      	ldrb	r3, [r3, #3]
   1a1fc:	42ab      	cmp	r3, r5
   1a1fe:	dd0b      	ble.n	1a218 <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   1a200:	7823      	ldrb	r3, [r4, #0]
   1a202:	42b3      	cmp	r3, r6
   1a204:	d1f6      	bne.n	1a1f4 <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   1a206:	2206      	movs	r2, #6
   1a208:	4639      	mov	r1, r7
   1a20a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1a20e:	f7f4 fbaf 	bl	e970 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   1a212:	2800      	cmp	r0, #0
   1a214:	d1ee      	bne.n	1a1f4 <ble_ll_resolv_list_find+0xc>
   1a216:	e000      	b.n	1a21a <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   1a218:	2400      	movs	r4, #0
}
   1a21a:	4620      	mov	r0, r4
   1a21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a21e:	bf00      	nop
   1a220:	2000258c 	.word	0x2000258c
   1a224:	20002564 	.word	0x20002564

0001a228 <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   1a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   1a22c:	2927      	cmp	r1, #39	; 0x27
   1a22e:	d003      	beq.n	1a238 <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a230:	2612      	movs	r6, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   1a232:	4630      	mov	r0, r6
   1a234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a238:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   1a23a:	f7ff ff19 	bl	1a070 <ble_ll_resolv_list_chg_allowed>
   1a23e:	2800      	cmp	r0, #0
   1a240:	d07d      	beq.n	1a33e <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   1a242:	4b42      	ldr	r3, [pc, #264]	; (1a34c <ble_ll_resolv_list_add+0x124>)
   1a244:	f893 8003 	ldrb.w	r8, [r3, #3]
   1a248:	785b      	ldrb	r3, [r3, #1]
   1a24a:	4598      	cmp	r8, r3
   1a24c:	d279      	bcs.n	1a342 <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   1a24e:	4627      	mov	r7, r4
   1a250:	f817 1b01 	ldrb.w	r1, [r7], #1
   1a254:	4638      	mov	r0, r7
   1a256:	f7ff ff1b 	bl	1a090 <ble_ll_is_on_resolv_list>
   1a25a:	4606      	mov	r6, r0
   1a25c:	2800      	cmp	r0, #0
   1a25e:	d172      	bne.n	1a346 <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   1a260:	f104 0907 	add.w	r9, r4, #7
   1a264:	4648      	mov	r0, r9
   1a266:	f7ff feef 	bl	1a048 <ble_ll_resolv_irk_nonzero>
   1a26a:	bb50      	cbnz	r0, 1a2c2 <ble_ll_resolv_list_add+0x9a>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   1a26c:	4b38      	ldr	r3, [pc, #224]	; (1a350 <ble_ll_resolv_list_add+0x128>)
   1a26e:	2536      	movs	r5, #54	; 0x36
   1a270:	fb05 3508 	mla	r5, r5, r8, r3
    memset (rl, 0, sizeof(*rl));
   1a274:	2236      	movs	r2, #54	; 0x36
   1a276:	2100      	movs	r1, #0
   1a278:	4628      	mov	r0, r5
   1a27a:	f7f4 fbc2 	bl	ea02 <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   1a27e:	7822      	ldrb	r2, [r4, #0]
   1a280:	462b      	mov	r3, r5
   1a282:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   1a286:	683a      	ldr	r2, [r7, #0]
   1a288:	626a      	str	r2, [r5, #36]	; 0x24
   1a28a:	88ba      	ldrh	r2, [r7, #4]
   1a28c:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   1a28e:	4648      	mov	r0, r9
   1a290:	f7ff feda 	bl	1a048 <ble_ll_resolv_irk_nonzero>
   1a294:	bb30      	cbnz	r0, 1a2e4 <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   1a296:	3417      	adds	r4, #23
   1a298:	4620      	mov	r0, r4
   1a29a:	f7ff fed5 	bl	1a048 <ble_ll_resolv_irk_nonzero>
   1a29e:	bb70      	cbnz	r0, 1a2fe <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   1a2a0:	2300      	movs	r3, #0
   1a2a2:	706b      	strb	r3, [r5, #1]
    if (rl->rl_has_peer) {
   1a2a4:	78eb      	ldrb	r3, [r5, #3]
   1a2a6:	bbab      	cbnz	r3, 1a314 <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   1a2a8:	4a28      	ldr	r2, [pc, #160]	; (1a34c <ble_ll_resolv_list_add+0x124>)
   1a2aa:	78d3      	ldrb	r3, [r2, #3]
   1a2ac:	3301      	adds	r3, #1
   1a2ae:	b2db      	uxtb	r3, r3
   1a2b0:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   1a2b2:	2b01      	cmp	r3, #1
   1a2b4:	d1bd      	bne.n	1a232 <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   1a2b6:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1a2b8:	6851      	ldr	r1, [r2, #4]
   1a2ba:	3008      	adds	r0, #8
   1a2bc:	f7f2 fe4c 	bl	cf58 <os_callout_reset>
   1a2c0:	e7b7      	b.n	1a232 <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   1a2c2:	4b22      	ldr	r3, [pc, #136]	; (1a34c <ble_ll_resolv_list_add+0x124>)
   1a2c4:	789b      	ldrb	r3, [r3, #2]
   1a2c6:	4822      	ldr	r0, [pc, #136]	; (1a350 <ble_ll_resolv_list_add+0x128>)
   1a2c8:	2236      	movs	r2, #54	; 0x36
   1a2ca:	fb03 2c02 	mla	ip, r3, r2, r2
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   1a2ce:	fb02 0503 	mla	r5, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   1a2d2:	eba8 0803 	sub.w	r8, r8, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   1a2d6:	fb02 f208 	mul.w	r2, r2, r8
   1a2da:	4629      	mov	r1, r5
   1a2dc:	4460      	add	r0, ip
   1a2de:	f7f4 fb78 	bl	e9d2 <memmove>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw];
   1a2e2:	e7c7      	b.n	1a274 <ble_ll_resolv_list_add+0x4c>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   1a2e4:	2210      	movs	r2, #16
   1a2e6:	4649      	mov	r1, r9
   1a2e8:	f105 0014 	add.w	r0, r5, #20
   1a2ec:	f010 fcac 	bl	2ac48 <swap_buf>
        rl->rl_has_peer = 1;
   1a2f0:	2301      	movs	r3, #1
   1a2f2:	70eb      	strb	r3, [r5, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   1a2f4:	2100      	movs	r1, #0
   1a2f6:	4628      	mov	r0, r5
   1a2f8:	f7ff feea 	bl	1a0d0 <ble_ll_resolv_gen_priv_addr>
   1a2fc:	e7cb      	b.n	1a296 <ble_ll_resolv_list_add+0x6e>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   1a2fe:	2210      	movs	r2, #16
   1a300:	4621      	mov	r1, r4
   1a302:	1d28      	adds	r0, r5, #4
   1a304:	f010 fca0 	bl	2ac48 <swap_buf>
        rl->rl_has_local = 1;
   1a308:	2101      	movs	r1, #1
   1a30a:	70a9      	strb	r1, [r5, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   1a30c:	4628      	mov	r0, r5
   1a30e:	f7ff fedf 	bl	1a0d0 <ble_ll_resolv_gen_priv_addr>
   1a312:	e7c5      	b.n	1a2a0 <ble_ll_resolv_list_add+0x78>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   1a314:	f105 0014 	add.w	r0, r5, #20
   1a318:	f001 f892 	bl	1b440 <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   1a31c:	4606      	mov	r6, r0
   1a31e:	b920      	cbnz	r0, 1a32a <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   1a320:	4a0a      	ldr	r2, [pc, #40]	; (1a34c <ble_ll_resolv_list_add+0x124>)
   1a322:	7893      	ldrb	r3, [r2, #2]
   1a324:	3301      	adds	r3, #1
   1a326:	7093      	strb	r3, [r2, #2]
   1a328:	e7be      	b.n	1a2a8 <ble_ll_resolv_list_add+0x80>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   1a32a:	f7f1 ff37 	bl	c19c <hal_debugger_connected>
   1a32e:	b100      	cbz	r0, 1a332 <ble_ll_resolv_list_add+0x10a>
   1a330:	be01      	bkpt	0x0001
   1a332:	2300      	movs	r3, #0
   1a334:	461a      	mov	r2, r3
   1a336:	4619      	mov	r1, r3
   1a338:	4618      	mov	r0, r3
   1a33a:	f7f2 fc33 	bl	cba4 <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   1a33e:	260c      	movs	r6, #12
   1a340:	e777      	b.n	1a232 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   1a342:	2607      	movs	r6, #7
   1a344:	e775      	b.n	1a232 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a346:	2612      	movs	r6, #18
   1a348:	e773      	b.n	1a232 <ble_ll_resolv_list_add+0xa>
   1a34a:	bf00      	nop
   1a34c:	20002564 	.word	0x20002564
   1a350:	2000258c 	.word	0x2000258c

0001a354 <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   1a354:	2907      	cmp	r1, #7
   1a356:	d001      	beq.n	1a35c <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a358:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   1a35a:	4770      	bx	lr
{
   1a35c:	b570      	push	{r4, r5, r6, lr}
   1a35e:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   1a360:	f7ff fe86 	bl	1a070 <ble_ll_resolv_list_chg_allowed>
   1a364:	2800      	cmp	r0, #0
   1a366:	d037      	beq.n	1a3d8 <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   1a368:	4620      	mov	r0, r4
   1a36a:	f810 1b01 	ldrb.w	r1, [r0], #1
   1a36e:	f7ff fe8f 	bl	1a090 <ble_ll_is_on_resolv_list>
    if (position) {
   1a372:	4604      	mov	r4, r0
   1a374:	b390      	cbz	r0, 1a3dc <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   1a376:	4b1a      	ldr	r3, [pc, #104]	; (1a3e0 <ble_ll_resolv_list_rmv+0x8c>)
   1a378:	78dd      	ldrb	r5, [r3, #3]
   1a37a:	4285      	cmp	r5, r0
   1a37c:	db16      	blt.n	1a3ac <ble_ll_resolv_list_rmv+0x58>
        memmove(&g_ble_ll_resolv_list[position - 1],
   1a37e:	1e46      	subs	r6, r0, #1
   1a380:	4818      	ldr	r0, [pc, #96]	; (1a3e4 <ble_ll_resolv_list_rmv+0x90>)
   1a382:	2336      	movs	r3, #54	; 0x36
                (g_ble_ll_resolv_data.rl_cnt - position) *
   1a384:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   1a386:	fb03 f202 	mul.w	r2, r3, r2
   1a38a:	fb03 0104 	mla	r1, r3, r4, r0
   1a38e:	fb03 0006 	mla	r0, r3, r6, r0
   1a392:	f7f4 fb1e 	bl	e9d2 <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   1a396:	4b12      	ldr	r3, [pc, #72]	; (1a3e0 <ble_ll_resolv_list_rmv+0x8c>)
   1a398:	3d01      	subs	r5, #1
   1a39a:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   1a39c:	789b      	ldrb	r3, [r3, #2]
   1a39e:	42a3      	cmp	r3, r4
   1a3a0:	da0e      	bge.n	1a3c0 <ble_ll_resolv_list_rmv+0x6c>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   1a3a2:	4b0f      	ldr	r3, [pc, #60]	; (1a3e0 <ble_ll_resolv_list_rmv+0x8c>)
   1a3a4:	78db      	ldrb	r3, [r3, #3]
   1a3a6:	b19b      	cbz	r3, 1a3d0 <ble_ll_resolv_list_rmv+0x7c>
        return BLE_ERR_SUCCESS;
   1a3a8:	2000      	movs	r0, #0
}
   1a3aa:	bd70      	pop	{r4, r5, r6, pc}
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   1a3ac:	f7f1 fef6 	bl	c19c <hal_debugger_connected>
   1a3b0:	b100      	cbz	r0, 1a3b4 <ble_ll_resolv_list_rmv+0x60>
   1a3b2:	be01      	bkpt	0x0001
   1a3b4:	2300      	movs	r3, #0
   1a3b6:	461a      	mov	r2, r3
   1a3b8:	4619      	mov	r1, r3
   1a3ba:	4618      	mov	r0, r3
   1a3bc:	f7f2 fbf2 	bl	cba4 <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   1a3c0:	4630      	mov	r0, r6
   1a3c2:	f001 f85b 	bl	1b47c <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   1a3c6:	4a06      	ldr	r2, [pc, #24]	; (1a3e0 <ble_ll_resolv_list_rmv+0x8c>)
   1a3c8:	7893      	ldrb	r3, [r2, #2]
   1a3ca:	3b01      	subs	r3, #1
   1a3cc:	7093      	strb	r3, [r2, #2]
   1a3ce:	e7e8      	b.n	1a3a2 <ble_ll_resolv_list_rmv+0x4e>
    os_callout_stop(&co->co);
   1a3d0:	4805      	ldr	r0, [pc, #20]	; (1a3e8 <ble_ll_resolv_list_rmv+0x94>)
   1a3d2:	f7f2 fda3 	bl	cf1c <os_callout_stop>
}
   1a3d6:	e7e7      	b.n	1a3a8 <ble_ll_resolv_list_rmv+0x54>
        return BLE_ERR_CMD_DISALLOWED;
   1a3d8:	200c      	movs	r0, #12
   1a3da:	e7e6      	b.n	1a3aa <ble_ll_resolv_list_rmv+0x56>
    return BLE_ERR_UNK_CONN_ID;
   1a3dc:	2002      	movs	r0, #2
   1a3de:	e7e4      	b.n	1a3aa <ble_ll_resolv_list_rmv+0x56>
   1a3e0:	20002564 	.word	0x20002564
   1a3e4:	2000258c 	.word	0x2000258c
   1a3e8:	2000256c 	.word	0x2000256c

0001a3ec <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   1a3ec:	2901      	cmp	r1, #1
   1a3ee:	d001      	beq.n	1a3f4 <ble_ll_resolv_enable_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a3f0:	2012      	movs	r0, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   1a3f2:	4770      	bx	lr
{
   1a3f4:	b510      	push	{r4, lr}
   1a3f6:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   1a3f8:	f7ff fe32 	bl	1a060 <ble_ll_is_controller_busy>
   1a3fc:	b928      	cbnz	r0, 1a40a <ble_ll_resolv_enable_cmd+0x1e>
    if (cmd->enable > 1) {
   1a3fe:	7823      	ldrb	r3, [r4, #0]
   1a400:	2b01      	cmp	r3, #1
   1a402:	d804      	bhi.n	1a40e <ble_ll_resolv_enable_cmd+0x22>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   1a404:	4a03      	ldr	r2, [pc, #12]	; (1a414 <ble_ll_resolv_enable_cmd+0x28>)
   1a406:	7013      	strb	r3, [r2, #0]
}
   1a408:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   1a40a:	200c      	movs	r0, #12
   1a40c:	e7fc      	b.n	1a408 <ble_ll_resolv_enable_cmd+0x1c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a40e:	2012      	movs	r0, #18
   1a410:	e7fa      	b.n	1a408 <ble_ll_resolv_enable_cmd+0x1c>
   1a412:	bf00      	nop
   1a414:	20002564 	.word	0x20002564

0001a418 <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   1a418:	2907      	cmp	r1, #7
   1a41a:	d116      	bne.n	1a44a <ble_ll_resolv_peer_addr_rd+0x32>
{
   1a41c:	b538      	push	{r3, r4, r5, lr}
   1a41e:	4614      	mov	r4, r2
   1a420:	461d      	mov	r5, r3
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   1a422:	f810 1b01 	ldrb.w	r1, [r0], #1
   1a426:	f7ff fedf 	bl	1a1e8 <ble_ll_resolv_list_find>
    if (rl) {
   1a42a:	4602      	mov	r2, r0
   1a42c:	b140      	cbz	r0, 1a440 <ble_ll_resolv_peer_addr_rd+0x28>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   1a42e:	f852 3f30 	ldr.w	r3, [r2, #48]!
   1a432:	6023      	str	r3, [r4, #0]
   1a434:	8893      	ldrh	r3, [r2, #4]
   1a436:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   1a438:	2000      	movs	r0, #0
    } else {
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
   1a43a:	2306      	movs	r3, #6
   1a43c:	702b      	strb	r3, [r5, #0]
    return rc;
}
   1a43e:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   1a440:	2300      	movs	r3, #0
   1a442:	6023      	str	r3, [r4, #0]
   1a444:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   1a446:	2002      	movs	r0, #2
   1a448:	e7f7      	b.n	1a43a <ble_ll_resolv_peer_addr_rd+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a44a:	2012      	movs	r0, #18
}
   1a44c:	4770      	bx	lr

0001a44e <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   1a44e:	2907      	cmp	r1, #7
   1a450:	d116      	bne.n	1a480 <ble_ll_resolv_local_addr_rd+0x32>
{
   1a452:	b538      	push	{r3, r4, r5, lr}
   1a454:	4614      	mov	r4, r2
   1a456:	461d      	mov	r5, r3
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   1a458:	f810 1b01 	ldrb.w	r1, [r0], #1
   1a45c:	f7ff fec4 	bl	1a1e8 <ble_ll_resolv_list_find>
    if (rl) {
   1a460:	4602      	mov	r2, r0
   1a462:	b140      	cbz	r0, 1a476 <ble_ll_resolv_local_addr_rd+0x28>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1a464:	f852 3f2a 	ldr.w	r3, [r2, #42]!
   1a468:	6023      	str	r3, [r4, #0]
   1a46a:	8893      	ldrh	r3, [r2, #4]
   1a46c:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   1a46e:	2000      	movs	r0, #0
    } else {
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
   1a470:	2306      	movs	r3, #6
   1a472:	702b      	strb	r3, [r5, #0]
    return rc;
}
   1a474:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   1a476:	2300      	movs	r3, #0
   1a478:	6023      	str	r3, [r4, #0]
   1a47a:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   1a47c:	2002      	movs	r0, #2
   1a47e:	e7f7      	b.n	1a470 <ble_ll_resolv_local_addr_rd+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a480:	2012      	movs	r0, #18
}
   1a482:	4770      	bx	lr

0001a484 <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   1a484:	2902      	cmp	r1, #2
   1a486:	d11e      	bne.n	1a4c6 <ble_ll_resolv_set_rpa_tmo+0x42>
{
   1a488:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   1a48a:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   1a48c:	1e53      	subs	r3, r2, #1
   1a48e:	b29b      	uxth	r3, r3
   1a490:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   1a494:	428b      	cmp	r3, r1
   1a496:	d818      	bhi.n	1a4ca <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   1a498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1a49c:	fb01 f102 	mul.w	r1, r1, r2
   1a4a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a4a4:	2300      	movs	r3, #0
   1a4a6:	01c8      	lsls	r0, r1, #7
   1a4a8:	0e49      	lsrs	r1, r1, #25
   1a4aa:	f012 fd81 	bl	2cfb0 <__aeabi_uldivmod>
   1a4ae:	4b08      	ldr	r3, [pc, #32]	; (1a4d0 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   1a4b0:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   1a4b2:	78db      	ldrb	r3, [r3, #3]
   1a4b4:	b90b      	cbnz	r3, 1a4ba <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   1a4b6:	2000      	movs	r0, #0
}
   1a4b8:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1a4ba:	4601      	mov	r1, r0
   1a4bc:	4805      	ldr	r0, [pc, #20]	; (1a4d4 <ble_ll_resolv_set_rpa_tmo+0x50>)
   1a4be:	f7f2 fd4b 	bl	cf58 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   1a4c2:	2000      	movs	r0, #0
   1a4c4:	e7f8      	b.n	1a4b8 <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a4c6:	2012      	movs	r0, #18
}
   1a4c8:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a4ca:	2012      	movs	r0, #18
   1a4cc:	e7f4      	b.n	1a4b8 <ble_ll_resolv_set_rpa_tmo+0x34>
   1a4ce:	bf00      	nop
   1a4d0:	20002564 	.word	0x20002564
   1a4d4:	2000256c 	.word	0x2000256c

0001a4d8 <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   1a4d8:	b570      	push	{r4, r5, r6, lr}
   1a4da:	4604      	mov	r4, r0
   1a4dc:	460d      	mov	r5, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   1a4de:	f7ff fdbf 	bl	1a060 <ble_ll_is_controller_busy>
   1a4e2:	b970      	cbnz	r0, 1a502 <ble_ll_resolve_set_priv_mode+0x2a>
   1a4e4:	4606      	mov	r6, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   1a4e6:	2d08      	cmp	r5, #8
   1a4e8:	d10d      	bne.n	1a506 <ble_ll_resolve_set_priv_mode+0x2e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   1a4ea:	4620      	mov	r0, r4
   1a4ec:	f810 1b01 	ldrb.w	r1, [r0], #1
   1a4f0:	f7ff fe7a 	bl	1a1e8 <ble_ll_resolv_list_find>
    if (!rl) {
   1a4f4:	b148      	cbz	r0, 1a50a <ble_ll_resolve_set_priv_mode+0x32>
        return BLE_ERR_UNK_CONN_ID;
    }

    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   1a4f6:	79e3      	ldrb	r3, [r4, #7]
   1a4f8:	2b01      	cmp	r3, #1
   1a4fa:	d808      	bhi.n	1a50e <ble_ll_resolve_set_priv_mode+0x36>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl->rl_priv_mode = cmd->mode;
   1a4fc:	7043      	strb	r3, [r0, #1]

    return BLE_ERR_SUCCESS;
}
   1a4fe:	4630      	mov	r0, r6
   1a500:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1a502:	260c      	movs	r6, #12
   1a504:	e7fb      	b.n	1a4fe <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a506:	2612      	movs	r6, #18
   1a508:	e7f9      	b.n	1a4fe <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_UNK_CONN_ID;
   1a50a:	2602      	movs	r6, #2
   1a50c:	e7f7      	b.n	1a4fe <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a50e:	2612      	movs	r6, #18
   1a510:	e7f5      	b.n	1a4fe <ble_ll_resolve_set_priv_mode+0x26>

0001a512 <ble_ll_resolv_get_priv_addr>:
}

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   1a512:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   1a514:	b180      	cbz	r0, 1a538 <ble_ll_resolv_get_priv_addr+0x26>
   1a516:	460e      	mov	r6, r1
   1a518:	4615      	mov	r5, r2
   1a51a:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   1a51c:	b1b2      	cbz	r2, 1a54c <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   1a51e:	f7f4 f813 	bl	e548 <os_arch_save_sr>
    if (local) {
   1a522:	b33e      	cbz	r6, 1a574 <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   1a524:	78a3      	ldrb	r3, [r4, #2]
   1a526:	b1db      	cbz	r3, 1a560 <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1a528:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   1a52c:	602b      	str	r3, [r5, #0]
   1a52e:	88a3      	ldrh	r3, [r4, #4]
   1a530:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   1a532:	f7f4 f80f 	bl	e554 <os_arch_restore_sr>
}
   1a536:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   1a538:	f7f1 fe30 	bl	c19c <hal_debugger_connected>
   1a53c:	b100      	cbz	r0, 1a540 <ble_ll_resolv_get_priv_addr+0x2e>
   1a53e:	be01      	bkpt	0x0001
   1a540:	2300      	movs	r3, #0
   1a542:	461a      	mov	r2, r3
   1a544:	4619      	mov	r1, r3
   1a546:	4618      	mov	r0, r3
   1a548:	f7f2 fb2c 	bl	cba4 <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   1a54c:	f7f1 fe26 	bl	c19c <hal_debugger_connected>
   1a550:	b100      	cbz	r0, 1a554 <ble_ll_resolv_get_priv_addr+0x42>
   1a552:	be01      	bkpt	0x0001
   1a554:	2300      	movs	r3, #0
   1a556:	461a      	mov	r2, r3
   1a558:	4619      	mov	r1, r3
   1a55a:	4618      	mov	r0, r3
   1a55c:	f7f2 fb22 	bl	cba4 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   1a560:	f7f1 fe1c 	bl	c19c <hal_debugger_connected>
   1a564:	b100      	cbz	r0, 1a568 <ble_ll_resolv_get_priv_addr+0x56>
   1a566:	be01      	bkpt	0x0001
   1a568:	2300      	movs	r3, #0
   1a56a:	461a      	mov	r2, r3
   1a56c:	4619      	mov	r1, r3
   1a56e:	4618      	mov	r0, r3
   1a570:	f7f2 fb18 	bl	cba4 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   1a574:	78e3      	ldrb	r3, [r4, #3]
   1a576:	b12b      	cbz	r3, 1a584 <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   1a578:	f854 3f30 	ldr.w	r3, [r4, #48]!
   1a57c:	602b      	str	r3, [r5, #0]
   1a57e:	88a3      	ldrh	r3, [r4, #4]
   1a580:	80ab      	strh	r3, [r5, #4]
   1a582:	e7d6      	b.n	1a532 <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   1a584:	f7f1 fe0a 	bl	c19c <hal_debugger_connected>
   1a588:	b100      	cbz	r0, 1a58c <ble_ll_resolv_get_priv_addr+0x7a>
   1a58a:	be01      	bkpt	0x0001
   1a58c:	2300      	movs	r3, #0
   1a58e:	461a      	mov	r2, r3
   1a590:	4619      	mov	r1, r3
   1a592:	4618      	mov	r0, r3
   1a594:	f7f2 fb06 	bl	cba4 <__assert_func>

0001a598 <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   1a598:	b538      	push	{r3, r4, r5, lr}
   1a59a:	4605      	mov	r5, r0
   1a59c:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   1a59e:	f7f3 ffd3 	bl	e548 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   1a5a2:	4a06      	ldr	r2, [pc, #24]	; (1a5bc <ble_ll_resolv_set_peer_rpa+0x24>)
   1a5a4:	2336      	movs	r3, #54	; 0x36
   1a5a6:	fb03 f305 	mul.w	r3, r3, r5
   1a5aa:	3330      	adds	r3, #48	; 0x30
   1a5ac:	18d1      	adds	r1, r2, r3
   1a5ae:	6825      	ldr	r5, [r4, #0]
   1a5b0:	50d5      	str	r5, [r2, r3]
   1a5b2:	88a3      	ldrh	r3, [r4, #4]
   1a5b4:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   1a5b6:	f7f3 ffcd 	bl	e554 <os_arch_restore_sr>
}
   1a5ba:	bd38      	pop	{r3, r4, r5, pc}
   1a5bc:	2000258c 	.word	0x2000258c

0001a5c0 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   1a5c0:	b538      	push	{r3, r4, r5, lr}
   1a5c2:	4615      	mov	r5, r2
   1a5c4:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   1a5c6:	f7ff fe0f 	bl	1a1e8 <ble_ll_resolv_list_find>
    if (rl) {
   1a5ca:	b178      	cbz	r0, 1a5ec <ble_ll_resolv_gen_rpa+0x2c>
   1a5cc:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   1a5ce:	b10c      	cbz	r4, 1a5d4 <ble_ll_resolv_gen_rpa+0x14>
   1a5d0:	7882      	ldrb	r2, [r0, #2]
   1a5d2:	b922      	cbnz	r2, 1a5de <ble_ll_resolv_gen_rpa+0x1e>
   1a5d4:	b964      	cbnz	r4, 1a5f0 <ble_ll_resolv_gen_rpa+0x30>
   1a5d6:	78da      	ldrb	r2, [r3, #3]
   1a5d8:	b90a      	cbnz	r2, 1a5de <ble_ll_resolv_gen_rpa+0x1e>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
            return 1;
        }
    }

    return 0;
   1a5da:	4620      	mov	r0, r4
   1a5dc:	e007      	b.n	1a5ee <ble_ll_resolv_gen_rpa+0x2e>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   1a5de:	462a      	mov	r2, r5
   1a5e0:	4621      	mov	r1, r4
   1a5e2:	4618      	mov	r0, r3
   1a5e4:	f7ff ff95 	bl	1a512 <ble_ll_resolv_get_priv_addr>
            return 1;
   1a5e8:	2001      	movs	r0, #1
   1a5ea:	e000      	b.n	1a5ee <ble_ll_resolv_gen_rpa+0x2e>
    return 0;
   1a5ec:	2000      	movs	r0, #0
}
   1a5ee:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   1a5f0:	2000      	movs	r0, #0
   1a5f2:	e7fc      	b.n	1a5ee <ble_ll_resolv_gen_rpa+0x2e>

0001a5f4 <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   1a5f4:	4b01      	ldr	r3, [pc, #4]	; (1a5fc <ble_ll_resolv_enabled+0x8>)
   1a5f6:	7818      	ldrb	r0, [r3, #0]
   1a5f8:	4770      	bx	lr
   1a5fa:	bf00      	nop
   1a5fc:	20002564 	.word	0x20002564

0001a600 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   1a600:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   1a602:	4b09      	ldr	r3, [pc, #36]	; (1a628 <ble_ll_resolv_init+0x28>)
   1a604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   1a608:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   1a60a:	f000 ff53 	bl	1b4b4 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   1a60e:	2804      	cmp	r0, #4
   1a610:	d900      	bls.n	1a614 <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   1a612:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   1a614:	4c04      	ldr	r4, [pc, #16]	; (1a628 <ble_ll_resolv_init+0x28>)
   1a616:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1a618:	2300      	movs	r3, #0
   1a61a:	4a04      	ldr	r2, [pc, #16]	; (1a62c <ble_ll_resolv_init+0x2c>)
   1a61c:	4904      	ldr	r1, [pc, #16]	; (1a630 <ble_ll_resolv_init+0x30>)
   1a61e:	f104 0008 	add.w	r0, r4, #8
   1a622:	f7f2 fc6d 	bl	cf00 <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   1a626:	bd10      	pop	{r4, pc}
   1a628:	20002564 	.word	0x20002564
   1a62c:	0001a149 	.word	0x0001a149
   1a630:	20001fc8 	.word	0x20001fc8

0001a634 <ble_ll_resolv_list_reset>:
{
   1a634:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   1a636:	4805      	ldr	r0, [pc, #20]	; (1a64c <ble_ll_resolv_list_reset+0x18>)
   1a638:	2300      	movs	r3, #0
   1a63a:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   1a63e:	f7f2 fc6d 	bl	cf1c <os_callout_stop>
    ble_ll_resolv_list_clr();
   1a642:	f7ff fdb3 	bl	1a1ac <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   1a646:	f7ff ffdb 	bl	1a600 <ble_ll_resolv_init>
}
   1a64a:	bd08      	pop	{r3, pc}
   1a64c:	20002564 	.word	0x20002564

0001a650 <ble_ll_rfmgmt_disable>:
    }
}

static void
ble_ll_rfmgmt_disable(void)
{
   1a650:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   1a652:	f7f3 ff82 	bl	e55a <os_arch_in_critical>
   1a656:	b118      	cbz	r0, 1a660 <ble_ll_rfmgmt_disable+0x10>

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   1a658:	4b09      	ldr	r3, [pc, #36]	; (1a680 <ble_ll_rfmgmt_disable+0x30>)
   1a65a:	781b      	ldrb	r3, [r3, #0]
   1a65c:	b953      	cbnz	r3, 1a674 <ble_ll_rfmgmt_disable+0x24>
        BLE_LL_DEBUG_GPIO(RFMGMT, 0);
        ble_phy_rfclk_disable();
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
    }
}
   1a65e:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   1a660:	f7f1 fd9c 	bl	c19c <hal_debugger_connected>
   1a664:	b100      	cbz	r0, 1a668 <ble_ll_rfmgmt_disable+0x18>
   1a666:	be01      	bkpt	0x0001
   1a668:	2300      	movs	r3, #0
   1a66a:	461a      	mov	r2, r3
   1a66c:	4619      	mov	r1, r3
   1a66e:	4618      	mov	r0, r3
   1a670:	f7f2 fa98 	bl	cba4 <__assert_func>
        ble_phy_rfclk_disable();
   1a674:	f001 fdf0 	bl	1c258 <ble_phy_rfclk_disable>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
   1a678:	4b01      	ldr	r3, [pc, #4]	; (1a680 <ble_ll_rfmgmt_disable+0x30>)
   1a67a:	2200      	movs	r2, #0
   1a67c:	701a      	strb	r2, [r3, #0]
}
   1a67e:	e7ee      	b.n	1a65e <ble_ll_rfmgmt_disable+0xe>
   1a680:	20002664 	.word	0x20002664

0001a684 <ble_ll_rfmgmt_release_ev>:
    ble_ll_rfmgmt_enable();
}

static void
ble_ll_rfmgmt_release_ev(struct ble_npl_event *ev)
{
   1a684:	b538      	push	{r3, r4, r5, lr}
    uint32_t now;
    bool can_disable;
    uint8_t lls;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a686:	f7f3 ff5f 	bl	e548 <os_arch_save_sr>
   1a68a:	4604      	mov	r4, r0
    return os_cputime_get32();
   1a68c:	f010 fb17 	bl	2acbe <os_cputime_get32>
   1a690:	4605      	mov	r5, r0

    now = ble_ll_tmr_get();

    can_disable = true;
    lls = ble_ll_state_get();
   1a692:	f7fa f95f 	bl	14954 <ble_ll_state_get>

    if (rfmgmt->enable_scan && CPUTIME_GEQ(now, rfmgmt->enable_scan_at)) {
   1a696:	4a0d      	ldr	r2, [pc, #52]	; (1a6cc <ble_ll_rfmgmt_release_ev+0x48>)
   1a698:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   1a69c:	b122      	cbz	r2, 1a6a8 <ble_ll_rfmgmt_release_ev+0x24>
   1a69e:	4b0b      	ldr	r3, [pc, #44]	; (1a6cc <ble_ll_rfmgmt_release_ev+0x48>)
   1a6a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a6a2:	1aaa      	subs	r2, r5, r2
   1a6a4:	2a00      	cmp	r2, #0
   1a6a6:	da09      	bge.n	1a6bc <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scan */
        can_disable = false;
    } else if (rfmgmt->enable_sched && CPUTIME_GEQ(now, rfmgmt->enable_sched_at)) {
   1a6a8:	4b08      	ldr	r3, [pc, #32]	; (1a6cc <ble_ll_rfmgmt_release_ev+0x48>)
   1a6aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a6ae:	b123      	cbz	r3, 1a6ba <ble_ll_rfmgmt_release_ev+0x36>
   1a6b0:	4b06      	ldr	r3, [pc, #24]	; (1a6cc <ble_ll_rfmgmt_release_ev+0x48>)
   1a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a6b4:	1aeb      	subs	r3, r5, r3
   1a6b6:	2b00      	cmp	r3, #0
   1a6b8:	da00      	bge.n	1a6bc <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scheduler item */
        can_disable = false;
    } else if (lls != BLE_LL_STATE_STANDBY) {
   1a6ba:	b118      	cbz	r0, 1a6c4 <ble_ll_rfmgmt_release_ev+0x40>

    if (can_disable) {
        ble_ll_rfmgmt_disable();
    }

    OS_EXIT_CRITICAL(sr);
   1a6bc:	4620      	mov	r0, r4
   1a6be:	f7f3 ff49 	bl	e554 <os_arch_restore_sr>
}
   1a6c2:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_rfmgmt_disable();
   1a6c4:	f7ff ffc4 	bl	1a650 <ble_ll_rfmgmt_disable>
   1a6c8:	e7f8      	b.n	1a6bc <ble_ll_rfmgmt_release_ev+0x38>
   1a6ca:	bf00      	nop
   1a6cc:	20002664 	.word	0x20002664

0001a6d0 <ble_ll_rfmgmt_enable>:
{
   1a6d0:	b510      	push	{r4, lr}
    OS_ASSERT_CRITICAL();
   1a6d2:	f7f3 ff42 	bl	e55a <os_arch_in_critical>
   1a6d6:	b118      	cbz	r0, 1a6e0 <ble_ll_rfmgmt_enable+0x10>
    if (g_ble_ll_rfmgmt_data.state == RFMGMT_STATE_OFF) {
   1a6d8:	4b0b      	ldr	r3, [pc, #44]	; (1a708 <ble_ll_rfmgmt_enable+0x38>)
   1a6da:	781b      	ldrb	r3, [r3, #0]
   1a6dc:	b153      	cbz	r3, 1a6f4 <ble_ll_rfmgmt_enable+0x24>
}
   1a6de:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1a6e0:	f7f1 fd5c 	bl	c19c <hal_debugger_connected>
   1a6e4:	b100      	cbz	r0, 1a6e8 <ble_ll_rfmgmt_enable+0x18>
   1a6e6:	be01      	bkpt	0x0001
   1a6e8:	2300      	movs	r3, #0
   1a6ea:	461a      	mov	r2, r3
   1a6ec:	4619      	mov	r1, r3
   1a6ee:	4618      	mov	r0, r3
   1a6f0:	f7f2 fa58 	bl	cba4 <__assert_func>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_ENABLING;
   1a6f4:	4c04      	ldr	r4, [pc, #16]	; (1a708 <ble_ll_rfmgmt_enable+0x38>)
   1a6f6:	2301      	movs	r3, #1
   1a6f8:	7023      	strb	r3, [r4, #0]
   1a6fa:	f010 fae0 	bl	2acbe <os_cputime_get32>
        g_ble_ll_rfmgmt_data.enabled_at = ble_ll_tmr_get();
   1a6fe:	6320      	str	r0, [r4, #48]	; 0x30
        ble_phy_rfclk_enable();
   1a700:	f001 fda6 	bl	1c250 <ble_phy_rfclk_enable>
}
   1a704:	e7eb      	b.n	1a6de <ble_ll_rfmgmt_enable+0xe>
   1a706:	bf00      	nop
   1a708:	20002664 	.word	0x20002664

0001a70c <ble_ll_rfmgmt_timer_exp>:
{
   1a70c:	b508      	push	{r3, lr}
    g_ble_ll_rfmgmt_data.timer_scheduled = false;
   1a70e:	4b03      	ldr	r3, [pc, #12]	; (1a71c <ble_ll_rfmgmt_timer_exp+0x10>)
   1a710:	2200      	movs	r2, #0
   1a712:	771a      	strb	r2, [r3, #28]
    ble_ll_rfmgmt_enable();
   1a714:	f7ff ffdc 	bl	1a6d0 <ble_ll_rfmgmt_enable>
}
   1a718:	bd08      	pop	{r3, pc}
   1a71a:	bf00      	nop
   1a71c:	20002664 	.word	0x20002664

0001a720 <ble_ll_rfmgmt_timer_reschedule>:
{
   1a720:	b510      	push	{r4, lr}
    if (rfmgmt->enable_scan && rfmgmt->enable_sched) {
   1a722:	4b1f      	ldr	r3, [pc, #124]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1a728:	b15b      	cbz	r3, 1a742 <ble_ll_rfmgmt_timer_reschedule+0x22>
   1a72a:	4a1d      	ldr	r2, [pc, #116]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a72c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   1a730:	b13a      	cbz	r2, 1a742 <ble_ll_rfmgmt_timer_reschedule+0x22>
        if (CPUTIME_LT(rfmgmt->enable_scan_at, rfmgmt->enable_sched_at)) {
   1a732:	4b1b      	ldr	r3, [pc, #108]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a736:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1a738:	1b13      	subs	r3, r2, r4
   1a73a:	2b00      	cmp	r3, #0
   1a73c:	da04      	bge.n	1a748 <ble_ll_rfmgmt_timer_reschedule+0x28>
            enable_at = rfmgmt->enable_scan_at;
   1a73e:	4614      	mov	r4, r2
   1a740:	e002      	b.n	1a748 <ble_ll_rfmgmt_timer_reschedule+0x28>
    } else if (rfmgmt->enable_scan) {
   1a742:	b1e3      	cbz	r3, 1a77e <ble_ll_rfmgmt_timer_reschedule+0x5e>
        enable_at = rfmgmt->enable_scan_at;
   1a744:	4b16      	ldr	r3, [pc, #88]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a746:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    if (rfmgmt->timer_scheduled) {
   1a748:	4b15      	ldr	r3, [pc, #84]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a74a:	7f1b      	ldrb	r3, [r3, #28]
   1a74c:	b14b      	cbz	r3, 1a762 <ble_ll_rfmgmt_timer_reschedule+0x42>
        if (rfmgmt->timer_scheduled_at == enable_at) {
   1a74e:	4b14      	ldr	r3, [pc, #80]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a750:	6a1b      	ldr	r3, [r3, #32]
   1a752:	42a3      	cmp	r3, r4
   1a754:	d012      	beq.n	1a77c <ble_ll_rfmgmt_timer_reschedule+0x5c>
        rfmgmt->timer_scheduled = false;
   1a756:	4812      	ldr	r0, [pc, #72]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a758:	2300      	movs	r3, #0
   1a75a:	7703      	strb	r3, [r0, #28]
}

static inline void
ble_ll_tmr_stop(struct ble_ll_tmr *tmr)
{
    os_cputime_timer_stop(&tmr->t);
   1a75c:	3004      	adds	r0, #4
   1a75e:	f010 faaa 	bl	2acb6 <os_cputime_timer_stop>
    return os_cputime_get32();
   1a762:	f010 faac 	bl	2acbe <os_cputime_get32>
    if (CPUTIME_LEQ(enable_at, ble_ll_tmr_get())) {
   1a766:	1a20      	subs	r0, r4, r0
   1a768:	2800      	cmp	r0, #0
   1a76a:	dd16      	ble.n	1a79a <ble_ll_rfmgmt_timer_reschedule+0x7a>
    rfmgmt->timer_scheduled = true;
   1a76c:	480c      	ldr	r0, [pc, #48]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a76e:	2301      	movs	r3, #1
   1a770:	7703      	strb	r3, [r0, #28]
    rfmgmt->timer_scheduled_at = enable_at;
   1a772:	6204      	str	r4, [r0, #32]
    os_cputime_timer_start(&tmr->t, tgt);
   1a774:	4621      	mov	r1, r4
   1a776:	3004      	adds	r0, #4
   1a778:	f010 fa99 	bl	2acae <os_cputime_timer_start>
}
   1a77c:	bd10      	pop	{r4, pc}
    } else if (rfmgmt->enable_sched) {
   1a77e:	4b08      	ldr	r3, [pc, #32]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a780:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1a784:	b113      	cbz	r3, 1a78c <ble_ll_rfmgmt_timer_reschedule+0x6c>
        enable_at = rfmgmt->enable_sched_at;
   1a786:	4b06      	ldr	r3, [pc, #24]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a788:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1a78a:	e7dd      	b.n	1a748 <ble_ll_rfmgmt_timer_reschedule+0x28>
        rfmgmt->timer_scheduled = false;
   1a78c:	4804      	ldr	r0, [pc, #16]	; (1a7a0 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1a78e:	2300      	movs	r3, #0
   1a790:	7703      	strb	r3, [r0, #28]
    os_cputime_timer_stop(&tmr->t);
   1a792:	3004      	adds	r0, #4
   1a794:	f010 fa8f 	bl	2acb6 <os_cputime_timer_stop>
        return;
   1a798:	e7f0      	b.n	1a77c <ble_ll_rfmgmt_timer_reschedule+0x5c>
        ble_ll_rfmgmt_enable();
   1a79a:	f7ff ff99 	bl	1a6d0 <ble_ll_rfmgmt_enable>
        return;
   1a79e:	e7ed      	b.n	1a77c <ble_ll_rfmgmt_timer_reschedule+0x5c>
   1a7a0:	20002664 	.word	0x20002664

0001a7a4 <ble_ll_rfmgmt_init>:
    return rem_ticks;
}

void
ble_ll_rfmgmt_init(void)
{
   1a7a4:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    BLE_LL_DEBUG_GPIO_INIT(RFMGMT);

    rfmgmt->state = RFMGMT_STATE_OFF;
   1a7a6:	4c09      	ldr	r4, [pc, #36]	; (1a7cc <ble_ll_rfmgmt_init+0x28>)
   1a7a8:	2500      	movs	r5, #0
   1a7aa:	7025      	strb	r5, [r4, #0]

    rfmgmt->ticks_to_enabled =
   1a7ac:	2332      	movs	r3, #50	; 0x32
   1a7ae:	8063      	strh	r3, [r4, #2]
            ble_ll_tmr_u2t_up(MYNEWT_VAL(BLE_LL_RFMGMT_ENABLE_TIME));

    rfmgmt->timer_scheduled = false;
   1a7b0:	7725      	strb	r5, [r4, #28]
    os_cputime_timer_init(&tmr->t, cb, arg);
   1a7b2:	462a      	mov	r2, r5
   1a7b4:	4906      	ldr	r1, [pc, #24]	; (1a7d0 <ble_ll_rfmgmt_init+0x2c>)
   1a7b6:	1d20      	adds	r0, r4, #4
   1a7b8:	f010 fa5a 	bl	2ac70 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   1a7bc:	6365      	str	r5, [r4, #52]	; 0x34
   1a7be:	6425      	str	r5, [r4, #64]	; 0x40
    ev->ev.ev_queued = 0;
   1a7c0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ev->ev.ev_cb = (os_event_fn *)fn;
   1a7c4:	4b03      	ldr	r3, [pc, #12]	; (1a7d4 <ble_ll_rfmgmt_init+0x30>)
   1a7c6:	63a3      	str	r3, [r4, #56]	; 0x38
    ev->ev.ev_arg = arg;
   1a7c8:	63e5      	str	r5, [r4, #60]	; 0x3c
    ble_ll_tmr_init(&rfmgmt->timer, ble_ll_rfmgmt_timer_exp, NULL);

    ble_npl_event_init(&rfmgmt->release_ev, ble_ll_rfmgmt_release_ev, NULL);
}
   1a7ca:	bd38      	pop	{r3, r4, r5, pc}
   1a7cc:	20002664 	.word	0x20002664
   1a7d0:	0001a70d 	.word	0x0001a70d
   1a7d4:	0001a685 	.word	0x0001a685

0001a7d8 <ble_ll_rfmgmt_reset>:

void
ble_ll_rfmgmt_reset(void)
{
   1a7d8:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->timer_scheduled = false;
   1a7da:	4c0b      	ldr	r4, [pc, #44]	; (1a808 <ble_ll_rfmgmt_reset+0x30>)
   1a7dc:	2500      	movs	r5, #0
   1a7de:	7725      	strb	r5, [r4, #28]
    rfmgmt->timer_scheduled_at = 0;
   1a7e0:	6225      	str	r5, [r4, #32]
    os_cputime_timer_stop(&tmr->t);
   1a7e2:	1d20      	adds	r0, r4, #4
   1a7e4:	f010 fa67 	bl	2acb6 <os_cputime_timer_stop>
    os_eventq_remove(&evq->evq, &ev->ev);
   1a7e8:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1a7ec:	4807      	ldr	r0, [pc, #28]	; (1a80c <ble_ll_rfmgmt_reset+0x34>)
   1a7ee:	f7f2 fda3 	bl	d338 <os_eventq_remove>
    ble_ll_tmr_stop(&rfmgmt->timer);

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    ble_ll_rfmgmt_disable();
   1a7f2:	f7ff ff2d 	bl	1a650 <ble_ll_rfmgmt_disable>

    rfmgmt->enable_scan = false;
   1a7f6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    rfmgmt->enable_scan_at = 0;
   1a7fa:	62a5      	str	r5, [r4, #40]	; 0x28
    rfmgmt->enable_sched = false;
   1a7fc:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    rfmgmt->enable_sched_at = 0;
   1a800:	62e5      	str	r5, [r4, #44]	; 0x2c

    rfmgmt->enabled_at = 0;
   1a802:	6325      	str	r5, [r4, #48]	; 0x30
}
   1a804:	bd38      	pop	{r3, r4, r5, pc}
   1a806:	bf00      	nop
   1a808:	20002664 	.word	0x20002664
   1a80c:	20001fc8 	.word	0x20001fc8

0001a810 <ble_ll_rfmgmt_sched_changed>:
    OS_EXIT_CRITICAL(sr);
}

void
ble_ll_rfmgmt_sched_changed(struct ble_ll_sched_item *first)
{
   1a810:	b538      	push	{r3, r4, r5, lr}
   1a812:	4604      	mov	r4, r0
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a814:	f7f3 fe98 	bl	e548 <os_arch_save_sr>
   1a818:	4605      	mov	r5, r0

    rfmgmt->enable_sched = (first != NULL);
   1a81a:	2c00      	cmp	r4, #0
   1a81c:	bf14      	ite	ne
   1a81e:	2201      	movne	r2, #1
   1a820:	2200      	moveq	r2, #0
   1a822:	4b07      	ldr	r3, [pc, #28]	; (1a840 <ble_ll_rfmgmt_sched_changed+0x30>)
   1a824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (first) {
   1a828:	d004      	beq.n	1a834 <ble_ll_rfmgmt_sched_changed+0x24>
        rfmgmt->enable_sched_at = first->start_time - rfmgmt->ticks_to_enabled;
   1a82a:	6863      	ldr	r3, [r4, #4]
   1a82c:	4a04      	ldr	r2, [pc, #16]	; (1a840 <ble_ll_rfmgmt_sched_changed+0x30>)
   1a82e:	8851      	ldrh	r1, [r2, #2]
   1a830:	1a5b      	subs	r3, r3, r1
   1a832:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    ble_ll_rfmgmt_timer_reschedule();
   1a834:	f7ff ff74 	bl	1a720 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   1a838:	4628      	mov	r0, r5
   1a83a:	f7f3 fe8b 	bl	e554 <os_arch_restore_sr>
}
   1a83e:	bd38      	pop	{r3, r4, r5, pc}
   1a840:	20002664 	.word	0x20002664

0001a844 <ble_ll_rfmgmt_release>:

void
ble_ll_rfmgmt_release(void)
{
   1a844:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a846:	f7f3 fe7f 	bl	e548 <os_arch_save_sr>
   1a84a:	4604      	mov	r4, r0
   1a84c:	4d08      	ldr	r5, [pc, #32]	; (1a870 <ble_ll_rfmgmt_release+0x2c>)
   1a84e:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1a852:	4808      	ldr	r0, [pc, #32]	; (1a874 <ble_ll_rfmgmt_release+0x30>)
   1a854:	f7f2 fd70 	bl	d338 <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   1a858:	782b      	ldrb	r3, [r5, #0]
   1a85a:	b91b      	cbnz	r3, 1a864 <ble_ll_rfmgmt_release+0x20>
        ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);
    }

    OS_EXIT_CRITICAL(sr);
   1a85c:	4620      	mov	r0, r4
   1a85e:	f7f3 fe79 	bl	e554 <os_arch_restore_sr>
}
   1a862:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_put(&evq->evq, &ev->ev);
   1a864:	f105 0134 	add.w	r1, r5, #52	; 0x34
   1a868:	4802      	ldr	r0, [pc, #8]	; (1a874 <ble_ll_rfmgmt_release+0x30>)
   1a86a:	f7f2 fcce 	bl	d20a <os_eventq_put>
}
   1a86e:	e7f5      	b.n	1a85c <ble_ll_rfmgmt_release+0x18>
   1a870:	20002664 	.word	0x20002664
   1a874:	20001fc8 	.word	0x20001fc8

0001a878 <ble_ll_rfmgmt_enable_now>:

uint32_t
ble_ll_rfmgmt_enable_now(void)
{
   1a878:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    uint32_t enabled_at;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a87a:	f7f3 fe65 	bl	e548 <os_arch_save_sr>
   1a87e:	4605      	mov	r5, r0

    ble_ll_rfmgmt_enable();
   1a880:	f7ff ff26 	bl	1a6d0 <ble_ll_rfmgmt_enable>

    if (rfmgmt->state == RFMGMT_STATE_ENABLED) {
   1a884:	4b08      	ldr	r3, [pc, #32]	; (1a8a8 <ble_ll_rfmgmt_enable_now+0x30>)
   1a886:	781b      	ldrb	r3, [r3, #0]
   1a888:	2b02      	cmp	r3, #2
   1a88a:	d009      	beq.n	1a8a0 <ble_ll_rfmgmt_enable_now+0x28>
        enabled_at = ble_ll_tmr_get();
    } else {
        enabled_at = rfmgmt->enabled_at + rfmgmt->ticks_to_enabled + 1;
   1a88c:	4b06      	ldr	r3, [pc, #24]	; (1a8a8 <ble_ll_rfmgmt_enable_now+0x30>)
   1a88e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1a890:	8858      	ldrh	r0, [r3, #2]
   1a892:	4404      	add	r4, r0
   1a894:	3401      	adds	r4, #1
    }

    OS_EXIT_CRITICAL(sr);
   1a896:	4628      	mov	r0, r5
   1a898:	f7f3 fe5c 	bl	e554 <os_arch_restore_sr>

    return enabled_at;
}
   1a89c:	4620      	mov	r0, r4
   1a89e:	bd38      	pop	{r3, r4, r5, pc}
    return os_cputime_get32();
   1a8a0:	f010 fa0d 	bl	2acbe <os_cputime_get32>
   1a8a4:	4604      	mov	r4, r0
   1a8a6:	e7f6      	b.n	1a896 <ble_ll_rfmgmt_enable_now+0x1e>
   1a8a8:	20002664 	.word	0x20002664

0001a8ac <preempt_any>:
static int
preempt_any(struct ble_ll_sched_item *sch,
            struct ble_ll_sched_item *item)
{
    return 1;
}
   1a8ac:	2001      	movs	r0, #1
   1a8ae:	4770      	bx	lr

0001a8b0 <preempt_none>:
static int
preempt_none(struct ble_ll_sched_item *sch,
             struct ble_ll_sched_item *item)
{
    return 0;
}
   1a8b0:	2000      	movs	r0, #0
   1a8b2:	4770      	bx	lr

0001a8b4 <preempt_any_except_conn>:

static int
preempt_any_except_conn(struct ble_ll_sched_item *sch,
                        struct ble_ll_sched_item *item)
{
   1a8b4:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sch->sched_type == BLE_LL_SCHED_TYPE_CONN);
   1a8b6:	7803      	ldrb	r3, [r0, #0]
   1a8b8:	2b03      	cmp	r3, #3
   1a8ba:	d104      	bne.n	1a8c6 <preempt_any_except_conn+0x12>

    if (item->sched_type != BLE_LL_SCHED_TYPE_CONN) {
   1a8bc:	780b      	ldrb	r3, [r1, #0]
   1a8be:	2b03      	cmp	r3, #3
   1a8c0:	d00b      	beq.n	1a8da <preempt_any_except_conn+0x26>
        return 1;
   1a8c2:	2001      	movs	r0, #1
    }

    return ble_ll_conn_is_lru(sch->cb_arg, item->cb_arg);
}
   1a8c4:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sch->sched_type == BLE_LL_SCHED_TYPE_CONN);
   1a8c6:	f7f1 fc69 	bl	c19c <hal_debugger_connected>
   1a8ca:	b100      	cbz	r0, 1a8ce <preempt_any_except_conn+0x1a>
   1a8cc:	be01      	bkpt	0x0001
   1a8ce:	2300      	movs	r3, #0
   1a8d0:	461a      	mov	r2, r3
   1a8d2:	4619      	mov	r1, r3
   1a8d4:	4618      	mov	r0, r3
   1a8d6:	f7f2 f965 	bl	cba4 <__assert_func>
    return ble_ll_conn_is_lru(sch->cb_arg, item->cb_arg);
   1a8da:	68c9      	ldr	r1, [r1, #12]
   1a8dc:	68c0      	ldr	r0, [r0, #12]
   1a8de:	f7fb fdcf 	bl	16480 <ble_ll_conn_is_lru>
   1a8e2:	e7ef      	b.n	1a8c4 <preempt_any_except_conn+0x10>

0001a8e4 <ble_ll_sched_overlaps_current>:
 * Determines if the schedule item overlaps the currently running schedule
 * item. We only care about connection schedule items
 */
static int
ble_ll_sched_overlaps_current(struct ble_ll_sched_item *sch)
{
   1a8e4:	b510      	push	{r4, lr}
   1a8e6:	4604      	mov	r4, r0
    int rc = 0;
#if MYNEWT_VAL(BLE_LL_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_LL_ROLE_CENTRAL)
    uint32_t ce_end_time;

    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   1a8e8:	f7fa f834 	bl	14954 <ble_ll_state_get>
   1a8ec:	2804      	cmp	r0, #4
   1a8ee:	d001      	beq.n	1a8f4 <ble_ll_sched_overlaps_current+0x10>
    int rc = 0;
   1a8f0:	2000      	movs	r0, #0
            rc = 1;
        }
    }
#endif
    return rc;
}
   1a8f2:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   1a8f4:	f7fb fdce 	bl	16494 <ble_ll_conn_get_ce_end_time>
        if (LL_TMR_GT(ce_end_time, sch->start_time)) {
   1a8f8:	6863      	ldr	r3, [r4, #4]
   1a8fa:	1ac0      	subs	r0, r0, r3
   1a8fc:	2800      	cmp	r0, #0
   1a8fe:	dd01      	ble.n	1a904 <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   1a900:	2001      	movs	r0, #1
    return rc;
   1a902:	e7f6      	b.n	1a8f2 <ble_ll_sched_overlaps_current+0xe>
    int rc = 0;
   1a904:	2000      	movs	r0, #0
   1a906:	e7f4      	b.n	1a8f2 <ble_ll_sched_overlaps_current+0xe>

0001a908 <ble_ll_sched_preempt>:
{
   1a908:	b538      	push	{r3, r4, r5, lr}
   1a90a:	4605      	mov	r5, r0
   1a90c:	460c      	mov	r4, r1
    entry = first;
   1a90e:	e008      	b.n	1a922 <ble_ll_sched_preempt+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1a910:	6999      	ldr	r1, [r3, #24]
   1a912:	4a14      	ldr	r2, [pc, #80]	; (1a964 <ble_ll_sched_preempt+0x5c>)
   1a914:	6051      	str	r1, [r2, #4]
   1a916:	e00a      	b.n	1a92e <ble_ll_sched_preempt+0x26>
                ble_ll_adv_event_rmvd_from_sched(entry->cb_arg);
   1a918:	68d8      	ldr	r0, [r3, #12]
   1a91a:	f7fa fff3 	bl	15904 <ble_ll_adv_event_rmvd_from_sched>
    } while (entry != sch);
   1a91e:	42ac      	cmp	r4, r5
   1a920:	d01e      	beq.n	1a960 <ble_ll_sched_preempt+0x58>
        next = TAILQ_NEXT(entry, link);
   1a922:	4623      	mov	r3, r4
   1a924:	6964      	ldr	r4, [r4, #20]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1a926:	2c00      	cmp	r4, #0
   1a928:	d0f2      	beq.n	1a910 <ble_ll_sched_preempt+0x8>
   1a92a:	699a      	ldr	r2, [r3, #24]
   1a92c:	61a2      	str	r2, [r4, #24]
   1a92e:	699a      	ldr	r2, [r3, #24]
   1a930:	6959      	ldr	r1, [r3, #20]
   1a932:	6011      	str	r1, [r2, #0]
        entry->enqueued = 0;
   1a934:	2200      	movs	r2, #0
   1a936:	705a      	strb	r2, [r3, #1]
        switch (entry->sched_type) {
   1a938:	781a      	ldrb	r2, [r3, #0]
   1a93a:	2a01      	cmp	r2, #1
   1a93c:	d0ec      	beq.n	1a918 <ble_ll_sched_preempt+0x10>
   1a93e:	2a03      	cmp	r2, #3
   1a940:	d104      	bne.n	1a94c <ble_ll_sched_preempt+0x44>
                connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   1a942:	68d8      	ldr	r0, [r3, #12]
                ble_ll_event_send(&connsm->conn_ev_end);
   1a944:	3098      	adds	r0, #152	; 0x98
   1a946:	f7fa f80b 	bl	14960 <ble_ll_event_send>
                break;
   1a94a:	e7e8      	b.n	1a91e <ble_ll_sched_preempt+0x16>
                BLE_LL_ASSERT(0);
   1a94c:	f7f1 fc26 	bl	c19c <hal_debugger_connected>
   1a950:	b100      	cbz	r0, 1a954 <ble_ll_sched_preempt+0x4c>
   1a952:	be01      	bkpt	0x0001
   1a954:	2300      	movs	r3, #0
   1a956:	461a      	mov	r2, r3
   1a958:	4619      	mov	r1, r3
   1a95a:	4618      	mov	r0, r3
   1a95c:	f7f2 f922 	bl	cba4 <__assert_func>
}
   1a960:	bd38      	pop	{r3, r4, r5, pc}
   1a962:	bf00      	nop
   1a964:	200026ac 	.word	0x200026ac

0001a968 <ble_ll_sched_insert>:
{
   1a968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a96c:	4605      	mov	r5, r0
   1a96e:	4688      	mov	r8, r1
   1a970:	4616      	mov	r6, r2
    OS_ASSERT_CRITICAL();
   1a972:	f7f3 fdf2 	bl	e55a <os_arch_in_critical>
   1a976:	b150      	cbz	r0, 1a98e <ble_ll_sched_insert+0x26>
    max_start_time = sch->start_time + max_delay;
   1a978:	686b      	ldr	r3, [r5, #4]
   1a97a:	eb03 0a08 	add.w	sl, r3, r8
    duration = sch->end_time - sch->start_time;
   1a97e:	68aa      	ldr	r2, [r5, #8]
   1a980:	eba2 0903 	sub.w	r9, r2, r3
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1a984:	4b43      	ldr	r3, [pc, #268]	; (1aa94 <ble_ll_sched_insert+0x12c>)
   1a986:	681c      	ldr	r4, [r3, #0]
    if (!first) {
   1a988:	b15c      	cbz	r4, 1a9a2 <ble_ll_sched_insert+0x3a>
    preempt_first = NULL;
   1a98a:	2700      	movs	r7, #0
   1a98c:	e02b      	b.n	1a9e6 <ble_ll_sched_insert+0x7e>
    OS_ASSERT_CRITICAL();
   1a98e:	f7f1 fc05 	bl	c19c <hal_debugger_connected>
   1a992:	b100      	cbz	r0, 1a996 <ble_ll_sched_insert+0x2e>
   1a994:	be01      	bkpt	0x0001
   1a996:	2300      	movs	r3, #0
   1a998:	461a      	mov	r2, r3
   1a99a:	4619      	mov	r1, r3
   1a99c:	4618      	mov	r0, r3
   1a99e:	f7f2 f901 	bl	cba4 <__assert_func>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   1a9a2:	462a      	mov	r2, r5
   1a9a4:	f842 4f14 	str.w	r4, [r2, #20]!
   1a9a8:	605a      	str	r2, [r3, #4]
   1a9aa:	601d      	str	r5, [r3, #0]
   1a9ac:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   1a9ae:	2301      	movs	r3, #1
   1a9b0:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   1a9b2:	e041      	b.n	1aa38 <ble_ll_sched_insert+0xd0>
            TAILQ_INSERT_BEFORE(entry, sch, link);
   1a9b4:	69a3      	ldr	r3, [r4, #24]
   1a9b6:	61ab      	str	r3, [r5, #24]
   1a9b8:	616c      	str	r4, [r5, #20]
   1a9ba:	69a3      	ldr	r3, [r4, #24]
   1a9bc:	601d      	str	r5, [r3, #0]
   1a9be:	f105 0314 	add.w	r3, r5, #20
   1a9c2:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   1a9c4:	2301      	movs	r3, #1
   1a9c6:	706b      	strb	r3, [r5, #1]
            goto done;
   1a9c8:	e02f      	b.n	1aa2a <ble_ll_sched_insert+0xc2>
                sch->start_time = entry->end_time + 1;
   1a9ca:	68a3      	ldr	r3, [r4, #8]
   1a9cc:	3301      	adds	r3, #1
   1a9ce:	606b      	str	r3, [r5, #4]
                if ((max_delay == 0) || LL_TMR_GEQ(sch->start_time,
   1a9d0:	f1b8 0f00 	cmp.w	r8, #0
   1a9d4:	d01b      	beq.n	1aa0e <ble_ll_sched_insert+0xa6>
   1a9d6:	eba3 020a 	sub.w	r2, r3, sl
   1a9da:	2a00      	cmp	r2, #0
   1a9dc:	da17      	bge.n	1aa0e <ble_ll_sched_insert+0xa6>
                sch->end_time = sch->start_time + duration;
   1a9de:	444b      	add	r3, r9
   1a9e0:	60ab      	str	r3, [r5, #8]
                preempt_first = NULL;
   1a9e2:	2700      	movs	r7, #0
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1a9e4:	6964      	ldr	r4, [r4, #20]
   1a9e6:	b1ac      	cbz	r4, 1aa14 <ble_ll_sched_insert+0xac>
        if (LL_TMR_LEQ(sch->end_time, entry->start_time)) {
   1a9e8:	68ab      	ldr	r3, [r5, #8]
   1a9ea:	6862      	ldr	r2, [r4, #4]
   1a9ec:	1a9b      	subs	r3, r3, r2
   1a9ee:	2b00      	cmp	r3, #0
   1a9f0:	dde0      	ble.n	1a9b4 <ble_ll_sched_insert+0x4c>
           LL_TMR_GT(sch2->end_time, sch1->start_time);
   1a9f2:	68a3      	ldr	r3, [r4, #8]
   1a9f4:	686a      	ldr	r2, [r5, #4]
   1a9f6:	1a9b      	subs	r3, r3, r2
    return LL_TMR_GT(sch1->end_time, sch2->start_time) &&
   1a9f8:	2b00      	cmp	r3, #0
   1a9fa:	ddf3      	ble.n	1a9e4 <ble_ll_sched_insert+0x7c>
            if (preempt_cb(sch, entry)) {
   1a9fc:	4621      	mov	r1, r4
   1a9fe:	4628      	mov	r0, r5
   1aa00:	47b0      	blx	r6
   1aa02:	2800      	cmp	r0, #0
   1aa04:	d0e1      	beq.n	1a9ca <ble_ll_sched_insert+0x62>
                if (!preempt_first) {
   1aa06:	2f00      	cmp	r7, #0
   1aa08:	d1ec      	bne.n	1a9e4 <ble_ll_sched_insert+0x7c>
                    preempt_first = entry;
   1aa0a:	4627      	mov	r7, r4
   1aa0c:	e7ea      	b.n	1a9e4 <ble_ll_sched_insert+0x7c>
                    sch->enqueued = 0;
   1aa0e:	2300      	movs	r3, #0
   1aa10:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   1aa12:	e011      	b.n	1aa38 <ble_ll_sched_insert+0xd0>
        TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1aa14:	2300      	movs	r3, #0
   1aa16:	616b      	str	r3, [r5, #20]
   1aa18:	4b1e      	ldr	r3, [pc, #120]	; (1aa94 <ble_ll_sched_insert+0x12c>)
   1aa1a:	685a      	ldr	r2, [r3, #4]
   1aa1c:	61aa      	str	r2, [r5, #24]
   1aa1e:	6015      	str	r5, [r2, #0]
   1aa20:	f105 0214 	add.w	r2, r5, #20
   1aa24:	605a      	str	r2, [r3, #4]
        sch->enqueued = 1;
   1aa26:	2301      	movs	r3, #1
   1aa28:	706b      	strb	r3, [r5, #1]
    if (preempt_first) {
   1aa2a:	b12f      	cbz	r7, 1aa38 <ble_ll_sched_insert+0xd0>
        BLE_LL_ASSERT(sch->enqueued);
   1aa2c:	786b      	ldrb	r3, [r5, #1]
   1aa2e:	b163      	cbz	r3, 1aa4a <ble_ll_sched_insert+0xe2>
        ble_ll_sched_preempt(sch, preempt_first);
   1aa30:	4639      	mov	r1, r7
   1aa32:	4628      	mov	r0, r5
   1aa34:	f7ff ff68 	bl	1a908 <ble_ll_sched_preempt>
    if (TAILQ_FIRST(&g_ble_ll_sched_q) == sch) {
   1aa38:	4b16      	ldr	r3, [pc, #88]	; (1aa94 <ble_ll_sched_insert+0x12c>)
   1aa3a:	681b      	ldr	r3, [r3, #0]
   1aa3c:	42ab      	cmp	r3, r5
   1aa3e:	d00e      	beq.n	1aa5e <ble_ll_sched_insert+0xf6>
    return sch->enqueued ? 0 : -1;
   1aa40:	786b      	ldrb	r3, [r5, #1]
   1aa42:	b31b      	cbz	r3, 1aa8c <ble_ll_sched_insert+0x124>
   1aa44:	2000      	movs	r0, #0
}
   1aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        BLE_LL_ASSERT(sch->enqueued);
   1aa4a:	f7f1 fba7 	bl	c19c <hal_debugger_connected>
   1aa4e:	b100      	cbz	r0, 1aa52 <ble_ll_sched_insert+0xea>
   1aa50:	be01      	bkpt	0x0001
   1aa52:	2300      	movs	r3, #0
   1aa54:	461a      	mov	r2, r3
   1aa56:	4619      	mov	r1, r3
   1aa58:	4618      	mov	r0, r3
   1aa5a:	f7f2 f8a3 	bl	cba4 <__assert_func>
        BLE_LL_ASSERT(sch->enqueued);
   1aa5e:	786b      	ldrb	r3, [r5, #1]
   1aa60:	b153      	cbz	r3, 1aa78 <ble_ll_sched_insert+0x110>
    if (g_ble_ll_sched_q_head_changed) {
   1aa62:	4b0d      	ldr	r3, [pc, #52]	; (1aa98 <ble_ll_sched_insert+0x130>)
   1aa64:	781b      	ldrb	r3, [r3, #0]
   1aa66:	2b00      	cmp	r3, #0
   1aa68:	d1ea      	bne.n	1aa40 <ble_ll_sched_insert+0xd8>
    g_ble_ll_sched_q_head_changed = 1;
   1aa6a:	4b0b      	ldr	r3, [pc, #44]	; (1aa98 <ble_ll_sched_insert+0x130>)
   1aa6c:	2201      	movs	r2, #1
   1aa6e:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_stop(&tmr->t);
   1aa70:	480a      	ldr	r0, [pc, #40]	; (1aa9c <ble_ll_sched_insert+0x134>)
   1aa72:	f010 f920 	bl	2acb6 <os_cputime_timer_stop>
}
   1aa76:	e7e3      	b.n	1aa40 <ble_ll_sched_insert+0xd8>
        BLE_LL_ASSERT(sch->enqueued);
   1aa78:	f7f1 fb90 	bl	c19c <hal_debugger_connected>
   1aa7c:	b100      	cbz	r0, 1aa80 <ble_ll_sched_insert+0x118>
   1aa7e:	be01      	bkpt	0x0001
   1aa80:	2300      	movs	r3, #0
   1aa82:	461a      	mov	r2, r3
   1aa84:	4619      	mov	r1, r3
   1aa86:	4618      	mov	r0, r3
   1aa88:	f7f2 f88c 	bl	cba4 <__assert_func>
    return sch->enqueued ? 0 : -1;
   1aa8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa90:	e7d9      	b.n	1aa46 <ble_ll_sched_insert+0xde>
   1aa92:	bf00      	nop
   1aa94:	200026ac 	.word	0x200026ac
   1aa98:	200026b4 	.word	0x200026b4
   1aa9c:	200026b8 	.word	0x200026b8

0001aaa0 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   1aaa0:	b538      	push	{r3, r4, r5, lr}
   1aaa2:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   1aaa4:	f7f9 ff56 	bl	14954 <ble_ll_state_get>
   1aaa8:	4605      	mov	r5, r0
    return os_cputime_get32();
   1aaaa:	f010 f908 	bl	2acbe <os_cputime_get32>

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, ble_ll_tmr_get(),
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   1aaae:	b925      	cbnz	r5, 1aaba <ble_ll_sched_execute_item+0x1a>
        BLE_LL_ASSERT(0);
        break;
    }

sched:
    BLE_LL_ASSERT(sch->sched_cb);
   1aab0:	6923      	ldr	r3, [r4, #16]
   1aab2:	b313      	cbz	r3, 1aafa <ble_ll_sched_execute_item+0x5a>

    BLE_LL_DEBUG_GPIO(SCHED_ITEM, 1);
    rc = sch->sched_cb(sch);
   1aab4:	4620      	mov	r0, r4
   1aab6:	4798      	blx	r3
    if (rc != BLE_LL_SCHED_STATE_RUNNING) {
        BLE_LL_DEBUG_GPIO(SCHED_ITEM, 0);
    }

    return rc;
}
   1aab8:	bd38      	pop	{r3, r4, r5, pc}
    ble_phy_disable();
   1aaba:	f001 f8e5 	bl	1bc88 <ble_phy_disable>
    switch (lls) {
   1aabe:	2d01      	cmp	r5, #1
   1aac0:	d008      	beq.n	1aad4 <ble_ll_sched_execute_item+0x34>
   1aac2:	2d04      	cmp	r5, #4
   1aac4:	d10f      	bne.n	1aae6 <ble_ll_sched_execute_item+0x46>
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
   1aac6:	4a12      	ldr	r2, [pc, #72]	; (1ab10 <ble_ll_sched_execute_item+0x70>)
   1aac8:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1aaca:	3301      	adds	r3, #1
   1aacc:	67d3      	str	r3, [r2, #124]	; 0x7c
        ble_ll_conn_event_halt();
   1aace:	f7fc f95b 	bl	16d88 <ble_ll_conn_event_halt>
        break;
   1aad2:	e7ed      	b.n	1aab0 <ble_ll_sched_execute_item+0x10>
        STATS_INC(ble_ll_stats, sched_state_adv_errs);
   1aad4:	4a0e      	ldr	r2, [pc, #56]	; (1ab10 <ble_ll_sched_execute_item+0x70>)
   1aad6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1aada:	3301      	adds	r3, #1
   1aadc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        ble_ll_adv_halt();
   1aae0:	f7fa ff14 	bl	1590c <ble_ll_adv_halt>
        break;
   1aae4:	e7e4      	b.n	1aab0 <ble_ll_sched_execute_item+0x10>
        BLE_LL_ASSERT(0);
   1aae6:	f7f1 fb59 	bl	c19c <hal_debugger_connected>
   1aaea:	b100      	cbz	r0, 1aaee <ble_ll_sched_execute_item+0x4e>
   1aaec:	be01      	bkpt	0x0001
   1aaee:	2300      	movs	r3, #0
   1aaf0:	461a      	mov	r2, r3
   1aaf2:	4619      	mov	r1, r3
   1aaf4:	4618      	mov	r0, r3
   1aaf6:	f7f2 f855 	bl	cba4 <__assert_func>
    BLE_LL_ASSERT(sch->sched_cb);
   1aafa:	f7f1 fb4f 	bl	c19c <hal_debugger_connected>
   1aafe:	b100      	cbz	r0, 1ab02 <ble_ll_sched_execute_item+0x62>
   1ab00:	be01      	bkpt	0x0001
   1ab02:	2300      	movs	r3, #0
   1ab04:	461a      	mov	r2, r3
   1ab06:	4619      	mov	r1, r3
   1ab08:	4618      	mov	r0, r3
   1ab0a:	f7f2 f84b 	bl	cba4 <__assert_func>
   1ab0e:	bf00      	nop
   1ab10:	20001ea8 	.word	0x20001ea8

0001ab14 <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1ab14:	4b13      	ldr	r3, [pc, #76]	; (1ab64 <ble_ll_sched_run+0x50>)
   1ab16:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   1ab18:	b318      	cbz	r0, 1ab62 <ble_ll_sched_run+0x4e>
{
   1ab1a:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1ab1c:	6943      	ldr	r3, [r0, #20]
   1ab1e:	b173      	cbz	r3, 1ab3e <ble_ll_sched_run+0x2a>
   1ab20:	6982      	ldr	r2, [r0, #24]
   1ab22:	619a      	str	r2, [r3, #24]
   1ab24:	6983      	ldr	r3, [r0, #24]
   1ab26:	6942      	ldr	r2, [r0, #20]
   1ab28:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   1ab2a:	2300      	movs	r3, #0
   1ab2c:	7043      	strb	r3, [r0, #1]
        g_ble_ll_sched_q_head_changed = 1;
   1ab2e:	4c0e      	ldr	r4, [pc, #56]	; (1ab68 <ble_ll_sched_run+0x54>)
   1ab30:	2301      	movs	r3, #1
   1ab32:	7023      	strb	r3, [r4, #0]

        ble_ll_sched_execute_item(sch);
   1ab34:	f7ff ffb4 	bl	1aaa0 <ble_ll_sched_execute_item>
    if (!g_ble_ll_sched_q_head_changed) {
   1ab38:	7823      	ldrb	r3, [r4, #0]
   1ab3a:	b923      	cbnz	r3, 1ab46 <ble_ll_sched_run+0x32>

        ble_ll_sched_restart();
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   1ab3c:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1ab3e:	6982      	ldr	r2, [r0, #24]
   1ab40:	4b08      	ldr	r3, [pc, #32]	; (1ab64 <ble_ll_sched_run+0x50>)
   1ab42:	605a      	str	r2, [r3, #4]
   1ab44:	e7ee      	b.n	1ab24 <ble_ll_sched_run+0x10>
    g_ble_ll_sched_q_head_changed = 0;
   1ab46:	2200      	movs	r2, #0
   1ab48:	7022      	strb	r2, [r4, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1ab4a:	4b06      	ldr	r3, [pc, #24]	; (1ab64 <ble_ll_sched_run+0x50>)
   1ab4c:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1ab4e:	4620      	mov	r0, r4
   1ab50:	f7ff fe5e 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1ab54:	2c00      	cmp	r4, #0
   1ab56:	d0f1      	beq.n	1ab3c <ble_ll_sched_run+0x28>
    os_cputime_timer_start(&tmr->t, tgt);
   1ab58:	6861      	ldr	r1, [r4, #4]
   1ab5a:	4804      	ldr	r0, [pc, #16]	; (1ab6c <ble_ll_sched_run+0x58>)
   1ab5c:	f010 f8a7 	bl	2acae <os_cputime_timer_start>
}
   1ab60:	e7ec      	b.n	1ab3c <ble_ll_sched_run+0x28>
   1ab62:	4770      	bx	lr
   1ab64:	200026ac 	.word	0x200026ac
   1ab68:	200026b4 	.word	0x200026b4
   1ab6c:	200026b8 	.word	0x200026b8

0001ab70 <ble_ll_sched_conn_reschedule>:
{
   1ab70:	b570      	push	{r4, r5, r6, lr}
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   1ab72:	6f03      	ldr	r3, [r0, #112]	; 0x70
   1ab74:	4a2f      	ldr	r2, [pc, #188]	; (1ac34 <ble_ll_sched_conn_reschedule+0xc4>)
   1ab76:	7812      	ldrb	r2, [r2, #0]
   1ab78:	1a9b      	subs	r3, r3, r2
   1ab7a:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
    switch (connsm->conn_role) {
   1ab7e:	79c3      	ldrb	r3, [r0, #7]
   1ab80:	2b02      	cmp	r3, #2
   1ab82:	d135      	bne.n	1abf0 <ble_ll_sched_conn_reschedule+0x80>
   1ab84:	4604      	mov	r4, r0
   1ab86:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
        usecs = connsm->periph_cur_window_widening;
   1ab8a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    if (usecs <= 31249) {
   1ab8e:	f647 2311 	movw	r3, #31249	; 0x7a11
   1ab92:	4298      	cmp	r0, r3
   1ab94:	d829      	bhi.n	1abea <ble_ll_sched_conn_reschedule+0x7a>
        return (usecs * 137439) / 4194304;
   1ab96:	4b28      	ldr	r3, [pc, #160]	; (1ac38 <ble_ll_sched_conn_reschedule+0xc8>)
   1ab98:	fb03 f000 	mul.w	r0, r3, r0
   1ab9c:	0d80      	lsrs	r0, r0, #22
        sch->start_time -= (ble_ll_tmr_u2t(usecs) + 1);
   1ab9e:	3001      	adds	r0, #1
   1aba0:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
   1aba4:	1a2d      	subs	r5, r5, r0
   1aba6:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
        sch->remainder = 0;
   1abaa:	2300      	movs	r3, #0
   1abac:	f884 30da 	strb.w	r3, [r4, #218]	; 0xda
    sch->end_time = connsm->ce_end_time;
   1abb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1abb2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    return os_cputime_get32();
   1abb6:	f010 f882 	bl	2acbe <os_cputime_get32>
    if (LL_TMR_LT(sch->start_time, ble_ll_tmr_get())) {
   1abba:	1a28      	subs	r0, r5, r0
   1abbc:	2800      	cmp	r0, #0
   1abbe:	db36      	blt.n	1ac2e <ble_ll_sched_conn_reschedule+0xbe>
    OS_ENTER_CRITICAL(sr);
   1abc0:	f7f3 fcc2 	bl	e548 <os_arch_save_sr>
   1abc4:	4605      	mov	r5, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   1abc6:	4630      	mov	r0, r6
   1abc8:	f7ff fe8c 	bl	1a8e4 <ble_ll_sched_overlaps_current>
   1abcc:	b9d0      	cbnz	r0, 1ac04 <ble_ll_sched_conn_reschedule+0x94>
    rc = ble_ll_sched_insert(sch, 0, preempt_any_except_conn);
   1abce:	4a1b      	ldr	r2, [pc, #108]	; (1ac3c <ble_ll_sched_conn_reschedule+0xcc>)
   1abd0:	2100      	movs	r1, #0
   1abd2:	4630      	mov	r0, r6
   1abd4:	f7ff fec8 	bl	1a968 <ble_ll_sched_insert>
   1abd8:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
   1abda:	4628      	mov	r0, r5
   1abdc:	f7f3 fcba 	bl	e554 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   1abe0:	4b17      	ldr	r3, [pc, #92]	; (1ac40 <ble_ll_sched_conn_reschedule+0xd0>)
   1abe2:	781b      	ldrb	r3, [r3, #0]
   1abe4:	b9a3      	cbnz	r3, 1ac10 <ble_ll_sched_conn_reschedule+0xa0>
}
   1abe6:	4620      	mov	r0, r4
   1abe8:	bd70      	pop	{r4, r5, r6, pc}
    return os_cputime_usecs_to_ticks(usecs);
   1abea:	f010 f86d 	bl	2acc8 <os_cputime_usecs_to_ticks>
   1abee:	e7d6      	b.n	1ab9e <ble_ll_sched_conn_reschedule+0x2e>
        BLE_LL_ASSERT(0);
   1abf0:	f7f1 fad4 	bl	c19c <hal_debugger_connected>
   1abf4:	b100      	cbz	r0, 1abf8 <ble_ll_sched_conn_reschedule+0x88>
   1abf6:	be01      	bkpt	0x0001
   1abf8:	2300      	movs	r3, #0
   1abfa:	461a      	mov	r2, r3
   1abfc:	4619      	mov	r1, r3
   1abfe:	4618      	mov	r0, r3
   1ac00:	f7f1 ffd0 	bl	cba4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1ac04:	4628      	mov	r0, r5
   1ac06:	f7f3 fca5 	bl	e554 <os_arch_restore_sr>
        return -1;
   1ac0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ac0e:	e7ea      	b.n	1abe6 <ble_ll_sched_conn_reschedule+0x76>
    g_ble_ll_sched_q_head_changed = 0;
   1ac10:	4b0b      	ldr	r3, [pc, #44]	; (1ac40 <ble_ll_sched_conn_reschedule+0xd0>)
   1ac12:	2200      	movs	r2, #0
   1ac14:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1ac16:	4b0b      	ldr	r3, [pc, #44]	; (1ac44 <ble_ll_sched_conn_reschedule+0xd4>)
   1ac18:	681d      	ldr	r5, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1ac1a:	4628      	mov	r0, r5
   1ac1c:	f7ff fdf8 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1ac20:	2d00      	cmp	r5, #0
   1ac22:	d0e0      	beq.n	1abe6 <ble_ll_sched_conn_reschedule+0x76>
    os_cputime_timer_start(&tmr->t, tgt);
   1ac24:	6869      	ldr	r1, [r5, #4]
   1ac26:	4808      	ldr	r0, [pc, #32]	; (1ac48 <ble_ll_sched_conn_reschedule+0xd8>)
   1ac28:	f010 f841 	bl	2acae <os_cputime_timer_start>
}
   1ac2c:	e7db      	b.n	1abe6 <ble_ll_sched_conn_reschedule+0x76>
        return -1;
   1ac2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1ac32:	e7d8      	b.n	1abe6 <ble_ll_sched_conn_reschedule+0x76>
   1ac34:	200026a8 	.word	0x200026a8
   1ac38:	000218df 	.word	0x000218df
   1ac3c:	0001a8b5 	.word	0x0001a8b5
   1ac40:	200026b4 	.word	0x200026b4
   1ac44:	200026ac 	.word	0x200026ac
   1ac48:	200026b8 	.word	0x200026b8

0001ac4c <ble_ll_sched_conn_periph_new>:
{
   1ac4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac4e:	4604      	mov	r4, r0
    sch = &connsm->conn_sch;
   1ac50:	f100 06d8 	add.w	r6, r0, #216	; 0xd8
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   1ac54:	6f05      	ldr	r5, [r0, #112]	; 0x70
   1ac56:	4b1c      	ldr	r3, [pc, #112]	; (1acc8 <ble_ll_sched_conn_periph_new+0x7c>)
   1ac58:	781b      	ldrb	r3, [r3, #0]
   1ac5a:	1aed      	subs	r5, r5, r3
                      ble_ll_tmr_u2t(connsm->periph_cur_window_widening) - 1;
   1ac5c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    if (usecs <= 31249) {
   1ac60:	f647 2311 	movw	r3, #31249	; 0x7a11
   1ac64:	4298      	cmp	r0, r3
   1ac66:	d81e      	bhi.n	1aca6 <ble_ll_sched_conn_periph_new+0x5a>
        return (usecs * 137439) / 4194304;
   1ac68:	4b18      	ldr	r3, [pc, #96]	; (1accc <ble_ll_sched_conn_periph_new+0x80>)
   1ac6a:	fb03 f000 	mul.w	r0, r3, r0
   1ac6e:	0d80      	lsrs	r0, r0, #22
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   1ac70:	1a2d      	subs	r5, r5, r0
                      ble_ll_tmr_u2t(connsm->periph_cur_window_widening) - 1;
   1ac72:	3d01      	subs	r5, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   1ac74:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
    sch->end_time = connsm->ce_end_time;
   1ac78:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ac7a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    sch->remainder = 0;
   1ac7e:	2700      	movs	r7, #0
   1ac80:	f884 70da 	strb.w	r7, [r4, #218]	; 0xda
    OS_ENTER_CRITICAL(sr);
   1ac84:	f7f3 fc60 	bl	e548 <os_arch_save_sr>
   1ac88:	4605      	mov	r5, r0
    rc = ble_ll_sched_insert(sch, 0, preempt_any);
   1ac8a:	4a11      	ldr	r2, [pc, #68]	; (1acd0 <ble_ll_sched_conn_periph_new+0x84>)
   1ac8c:	4639      	mov	r1, r7
   1ac8e:	4630      	mov	r0, r6
   1ac90:	f7ff fe6a 	bl	1a968 <ble_ll_sched_insert>
   1ac94:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
   1ac96:	4628      	mov	r0, r5
   1ac98:	f7f3 fc5c 	bl	e554 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   1ac9c:	4b0d      	ldr	r3, [pc, #52]	; (1acd4 <ble_ll_sched_conn_periph_new+0x88>)
   1ac9e:	781b      	ldrb	r3, [r3, #0]
   1aca0:	b923      	cbnz	r3, 1acac <ble_ll_sched_conn_periph_new+0x60>
}
   1aca2:	4620      	mov	r0, r4
   1aca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return os_cputime_usecs_to_ticks(usecs);
   1aca6:	f010 f80f 	bl	2acc8 <os_cputime_usecs_to_ticks>
   1acaa:	e7e1      	b.n	1ac70 <ble_ll_sched_conn_periph_new+0x24>
    g_ble_ll_sched_q_head_changed = 0;
   1acac:	4b09      	ldr	r3, [pc, #36]	; (1acd4 <ble_ll_sched_conn_periph_new+0x88>)
   1acae:	701f      	strb	r7, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1acb0:	4b09      	ldr	r3, [pc, #36]	; (1acd8 <ble_ll_sched_conn_periph_new+0x8c>)
   1acb2:	681d      	ldr	r5, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1acb4:	4628      	mov	r0, r5
   1acb6:	f7ff fdab 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1acba:	2d00      	cmp	r5, #0
   1acbc:	d0f1      	beq.n	1aca2 <ble_ll_sched_conn_periph_new+0x56>
    os_cputime_timer_start(&tmr->t, tgt);
   1acbe:	6869      	ldr	r1, [r5, #4]
   1acc0:	4806      	ldr	r0, [pc, #24]	; (1acdc <ble_ll_sched_conn_periph_new+0x90>)
   1acc2:	f00f fff4 	bl	2acae <os_cputime_timer_start>
    return rc;
   1acc6:	e7ec      	b.n	1aca2 <ble_ll_sched_conn_periph_new+0x56>
   1acc8:	200026a8 	.word	0x200026a8
   1accc:	000218df 	.word	0x000218df
   1acd0:	0001a8ad 	.word	0x0001a8ad
   1acd4:	200026b4 	.word	0x200026b4
   1acd8:	200026ac 	.word	0x200026ac
   1acdc:	200026b8 	.word	0x200026b8

0001ace0 <ble_ll_sched_adv_new>:
{
   1ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ace4:	4604      	mov	r4, r0
   1ace6:	460e      	mov	r6, r1
   1ace8:	4617      	mov	r7, r2
    OS_ENTER_CRITICAL(sr);
   1acea:	f7f3 fc2d 	bl	e548 <os_arch_save_sr>
   1acee:	4605      	mov	r5, r0
    rc = ble_ll_sched_insert(sch, BLE_LL_SCHED_MAX_DELAY_ANY,
   1acf0:	4a16      	ldr	r2, [pc, #88]	; (1ad4c <ble_ll_sched_adv_new+0x6c>)
   1acf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1acf6:	4620      	mov	r0, r4
   1acf8:	f7ff fe36 	bl	1a968 <ble_ll_sched_insert>
    BLE_LL_ASSERT(rc == 0);
   1acfc:	b968      	cbnz	r0, 1ad1a <ble_ll_sched_adv_new+0x3a>
   1acfe:	4680      	mov	r8, r0
    cb(sch->cb_arg, sch->start_time, arg);
   1ad00:	463a      	mov	r2, r7
   1ad02:	6861      	ldr	r1, [r4, #4]
   1ad04:	68e0      	ldr	r0, [r4, #12]
   1ad06:	47b0      	blx	r6
    OS_EXIT_CRITICAL(sr);
   1ad08:	4628      	mov	r0, r5
   1ad0a:	f7f3 fc23 	bl	e554 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   1ad0e:	4b10      	ldr	r3, [pc, #64]	; (1ad50 <ble_ll_sched_adv_new+0x70>)
   1ad10:	781b      	ldrb	r3, [r3, #0]
   1ad12:	b963      	cbnz	r3, 1ad2e <ble_ll_sched_adv_new+0x4e>
}
   1ad14:	4640      	mov	r0, r8
   1ad16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(rc == 0);
   1ad1a:	f7f1 fa3f 	bl	c19c <hal_debugger_connected>
   1ad1e:	b100      	cbz	r0, 1ad22 <ble_ll_sched_adv_new+0x42>
   1ad20:	be01      	bkpt	0x0001
   1ad22:	2300      	movs	r3, #0
   1ad24:	461a      	mov	r2, r3
   1ad26:	4619      	mov	r1, r3
   1ad28:	4618      	mov	r0, r3
   1ad2a:	f7f1 ff3b 	bl	cba4 <__assert_func>
    g_ble_ll_sched_q_head_changed = 0;
   1ad2e:	4b08      	ldr	r3, [pc, #32]	; (1ad50 <ble_ll_sched_adv_new+0x70>)
   1ad30:	2200      	movs	r2, #0
   1ad32:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1ad34:	4b07      	ldr	r3, [pc, #28]	; (1ad54 <ble_ll_sched_adv_new+0x74>)
   1ad36:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1ad38:	4620      	mov	r0, r4
   1ad3a:	f7ff fd69 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1ad3e:	2c00      	cmp	r4, #0
   1ad40:	d0e8      	beq.n	1ad14 <ble_ll_sched_adv_new+0x34>
   1ad42:	6861      	ldr	r1, [r4, #4]
   1ad44:	4804      	ldr	r0, [pc, #16]	; (1ad58 <ble_ll_sched_adv_new+0x78>)
   1ad46:	f00f ffb2 	bl	2acae <os_cputime_timer_start>
    return rc;
   1ad4a:	e7e3      	b.n	1ad14 <ble_ll_sched_adv_new+0x34>
   1ad4c:	0001a8b1 	.word	0x0001a8b1
   1ad50:	200026b4 	.word	0x200026b4
   1ad54:	200026ac 	.word	0x200026ac
   1ad58:	200026b8 	.word	0x200026b8

0001ad5c <ble_ll_sched_adv_reschedule>:
{
   1ad5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad60:	4605      	mov	r5, r0
   1ad62:	460c      	mov	r4, r1
    max_end_time = sch->end_time + max_delay_ticks;
   1ad64:	6883      	ldr	r3, [r0, #8]
   1ad66:	eb03 0801 	add.w	r8, r3, r1
    OS_ENTER_CRITICAL(sr);
   1ad6a:	f7f3 fbed 	bl	e548 <os_arch_save_sr>
   1ad6e:	4606      	mov	r6, r0
    rc = ble_ll_sched_insert(sch, max_delay_ticks, preempt_none);
   1ad70:	4a1b      	ldr	r2, [pc, #108]	; (1ade0 <ble_ll_sched_adv_reschedule+0x84>)
   1ad72:	4621      	mov	r1, r4
   1ad74:	4628      	mov	r0, r5
   1ad76:	f7ff fdf7 	bl	1a968 <ble_ll_sched_insert>
    if (rc == 0) {
   1ad7a:	4607      	mov	r7, r0
   1ad7c:	b980      	cbnz	r0, 1ada0 <ble_ll_sched_adv_reschedule+0x44>
        next = TAILQ_NEXT(sch, link);
   1ad7e:	696b      	ldr	r3, [r5, #20]
        if (next) {
   1ad80:	b13b      	cbz	r3, 1ad92 <ble_ll_sched_adv_reschedule+0x36>
            if (LL_TMR_LT(next->start_time, max_end_time)) {
   1ad82:	685c      	ldr	r4, [r3, #4]
   1ad84:	eba4 0308 	sub.w	r3, r4, r8
   1ad88:	2b00      	cmp	r3, #0
   1ad8a:	db00      	blt.n	1ad8e <ble_ll_sched_adv_reschedule+0x32>
    max_end_time = sch->end_time + max_delay_ticks;
   1ad8c:	4644      	mov	r4, r8
            rand_ticks = max_end_time - sch->end_time;
   1ad8e:	68a9      	ldr	r1, [r5, #8]
   1ad90:	1a64      	subs	r4, r4, r1
        if (rand_ticks) {
   1ad92:	b974      	cbnz	r4, 1adb2 <ble_ll_sched_adv_reschedule+0x56>
        sch->start_time += rand_ticks;
   1ad94:	686b      	ldr	r3, [r5, #4]
   1ad96:	4423      	add	r3, r4
   1ad98:	606b      	str	r3, [r5, #4]
        sch->end_time += rand_ticks;
   1ad9a:	68a9      	ldr	r1, [r5, #8]
   1ad9c:	4421      	add	r1, r4
   1ad9e:	60a9      	str	r1, [r5, #8]
    OS_EXIT_CRITICAL(sr);
   1ada0:	4630      	mov	r0, r6
   1ada2:	f7f3 fbd7 	bl	e554 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   1ada6:	4b0f      	ldr	r3, [pc, #60]	; (1ade4 <ble_ll_sched_adv_reschedule+0x88>)
   1ada8:	781b      	ldrb	r3, [r3, #0]
   1adaa:	b94b      	cbnz	r3, 1adc0 <ble_ll_sched_adv_reschedule+0x64>
}
   1adac:	4638      	mov	r0, r7
   1adae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rand_ticks = ble_ll_rand() % rand_ticks;
   1adb2:	f7ff f8ff 	bl	19fb4 <ble_ll_rand>
   1adb6:	fbb0 f3f4 	udiv	r3, r0, r4
   1adba:	fb04 0413 	mls	r4, r4, r3, r0
   1adbe:	e7e9      	b.n	1ad94 <ble_ll_sched_adv_reschedule+0x38>
    g_ble_ll_sched_q_head_changed = 0;
   1adc0:	4b08      	ldr	r3, [pc, #32]	; (1ade4 <ble_ll_sched_adv_reschedule+0x88>)
   1adc2:	2200      	movs	r2, #0
   1adc4:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1adc6:	4b08      	ldr	r3, [pc, #32]	; (1ade8 <ble_ll_sched_adv_reschedule+0x8c>)
   1adc8:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1adca:	4620      	mov	r0, r4
   1adcc:	f7ff fd20 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1add0:	2c00      	cmp	r4, #0
   1add2:	d0eb      	beq.n	1adac <ble_ll_sched_adv_reschedule+0x50>
   1add4:	6861      	ldr	r1, [r4, #4]
   1add6:	4805      	ldr	r0, [pc, #20]	; (1adec <ble_ll_sched_adv_reschedule+0x90>)
   1add8:	f00f ff69 	bl	2acae <os_cputime_timer_start>
    return rc;
   1addc:	e7e6      	b.n	1adac <ble_ll_sched_adv_reschedule+0x50>
   1adde:	bf00      	nop
   1ade0:	0001a8b1 	.word	0x0001a8b1
   1ade4:	200026b4 	.word	0x200026b4
   1ade8:	200026ac 	.word	0x200026ac
   1adec:	200026b8 	.word	0x200026b8

0001adf0 <ble_ll_sched_adv_resched_pdu>:
{
   1adf0:	b538      	push	{r3, r4, r5, lr}
   1adf2:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
   1adf4:	f7f3 fba8 	bl	e548 <os_arch_save_sr>
   1adf8:	4604      	mov	r4, r0
    lls = ble_ll_state_get();
   1adfa:	f7f9 fdab 	bl	14954 <ble_ll_state_get>
    switch(lls) {
   1adfe:	2801      	cmp	r0, #1
   1ae00:	d01b      	beq.n	1ae3a <ble_ll_sched_adv_resched_pdu+0x4a>
   1ae02:	2804      	cmp	r0, #4
   1ae04:	d020      	beq.n	1ae48 <ble_ll_sched_adv_resched_pdu+0x58>
    rc = ble_ll_sched_insert(sch, 0, preempt_none);
   1ae06:	4a13      	ldr	r2, [pc, #76]	; (1ae54 <ble_ll_sched_adv_resched_pdu+0x64>)
   1ae08:	2100      	movs	r1, #0
   1ae0a:	4628      	mov	r0, r5
   1ae0c:	f7ff fdac 	bl	1a968 <ble_ll_sched_insert>
   1ae10:	4605      	mov	r5, r0
    OS_EXIT_CRITICAL(sr);
   1ae12:	4620      	mov	r0, r4
   1ae14:	f7f3 fb9e 	bl	e554 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   1ae18:	4b0f      	ldr	r3, [pc, #60]	; (1ae58 <ble_ll_sched_adv_resched_pdu+0x68>)
   1ae1a:	781b      	ldrb	r3, [r3, #0]
   1ae1c:	b193      	cbz	r3, 1ae44 <ble_ll_sched_adv_resched_pdu+0x54>
    g_ble_ll_sched_q_head_changed = 0;
   1ae1e:	4b0e      	ldr	r3, [pc, #56]	; (1ae58 <ble_ll_sched_adv_resched_pdu+0x68>)
   1ae20:	2200      	movs	r2, #0
   1ae22:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1ae24:	4b0d      	ldr	r3, [pc, #52]	; (1ae5c <ble_ll_sched_adv_resched_pdu+0x6c>)
   1ae26:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1ae28:	4620      	mov	r0, r4
   1ae2a:	f7ff fcf1 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1ae2e:	b14c      	cbz	r4, 1ae44 <ble_ll_sched_adv_resched_pdu+0x54>
   1ae30:	6861      	ldr	r1, [r4, #4]
   1ae32:	480b      	ldr	r0, [pc, #44]	; (1ae60 <ble_ll_sched_adv_resched_pdu+0x70>)
   1ae34:	f00f ff3b 	bl	2acae <os_cputime_timer_start>
}
   1ae38:	e004      	b.n	1ae44 <ble_ll_sched_adv_resched_pdu+0x54>
        OS_EXIT_CRITICAL(sr);
   1ae3a:	4620      	mov	r0, r4
   1ae3c:	f7f3 fb8a 	bl	e554 <os_arch_restore_sr>
        return -1;
   1ae40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   1ae44:	4628      	mov	r0, r5
   1ae46:	bd38      	pop	{r3, r4, r5, pc}
        OS_EXIT_CRITICAL(sr);
   1ae48:	4620      	mov	r0, r4
   1ae4a:	f7f3 fb83 	bl	e554 <os_arch_restore_sr>
        return -1;
   1ae4e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1ae52:	e7f7      	b.n	1ae44 <ble_ll_sched_adv_resched_pdu+0x54>
   1ae54:	0001a8b1 	.word	0x0001a8b1
   1ae58:	200026b4 	.word	0x200026b4
   1ae5c:	200026ac 	.word	0x200026ac
   1ae60:	200026b8 	.word	0x200026b8

0001ae64 <ble_ll_sched_rmv_elem>:
{
   1ae64:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(sch);
   1ae66:	b1c8      	cbz	r0, 1ae9c <ble_ll_sched_rmv_elem+0x38>
   1ae68:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1ae6a:	f7f3 fb6d 	bl	e548 <os_arch_save_sr>
   1ae6e:	4605      	mov	r5, r0
    if (sch->enqueued) {
   1ae70:	7863      	ldrb	r3, [r4, #1]
   1ae72:	b35b      	cbz	r3, 1aecc <ble_ll_sched_rmv_elem+0x68>
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   1ae74:	4b22      	ldr	r3, [pc, #136]	; (1af00 <ble_ll_sched_rmv_elem+0x9c>)
   1ae76:	681b      	ldr	r3, [r3, #0]
   1ae78:	42a3      	cmp	r3, r4
   1ae7a:	d019      	beq.n	1aeb0 <ble_ll_sched_rmv_elem+0x4c>
    first_removed = 0;
   1ae7c:	2100      	movs	r1, #0
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1ae7e:	6963      	ldr	r3, [r4, #20]
   1ae80:	b1c3      	cbz	r3, 1aeb4 <ble_ll_sched_rmv_elem+0x50>
   1ae82:	69a2      	ldr	r2, [r4, #24]
   1ae84:	619a      	str	r2, [r3, #24]
   1ae86:	69a3      	ldr	r3, [r4, #24]
   1ae88:	6962      	ldr	r2, [r4, #20]
   1ae8a:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   1ae8c:	2300      	movs	r3, #0
   1ae8e:	7063      	strb	r3, [r4, #1]
    if (first_removed) {
   1ae90:	b329      	cbz	r1, 1aede <ble_ll_sched_rmv_elem+0x7a>
    if (g_ble_ll_sched_q_head_changed) {
   1ae92:	4b1c      	ldr	r3, [pc, #112]	; (1af04 <ble_ll_sched_rmv_elem+0xa0>)
   1ae94:	781b      	ldrb	r3, [r3, #0]
   1ae96:	b18b      	cbz	r3, 1aebc <ble_ll_sched_rmv_elem+0x58>
        rc = 0;
   1ae98:	2400      	movs	r4, #0
   1ae9a:	e018      	b.n	1aece <ble_ll_sched_rmv_elem+0x6a>
    BLE_LL_ASSERT(sch);
   1ae9c:	f7f1 f97e 	bl	c19c <hal_debugger_connected>
   1aea0:	b100      	cbz	r0, 1aea4 <ble_ll_sched_rmv_elem+0x40>
   1aea2:	be01      	bkpt	0x0001
   1aea4:	2300      	movs	r3, #0
   1aea6:	461a      	mov	r2, r3
   1aea8:	4619      	mov	r1, r3
   1aeaa:	4618      	mov	r0, r3
   1aeac:	f7f1 fe7a 	bl	cba4 <__assert_func>
            first_removed = 1;
   1aeb0:	2101      	movs	r1, #1
   1aeb2:	e7e4      	b.n	1ae7e <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1aeb4:	69a2      	ldr	r2, [r4, #24]
   1aeb6:	4b12      	ldr	r3, [pc, #72]	; (1af00 <ble_ll_sched_rmv_elem+0x9c>)
   1aeb8:	605a      	str	r2, [r3, #4]
   1aeba:	e7e4      	b.n	1ae86 <ble_ll_sched_rmv_elem+0x22>
    g_ble_ll_sched_q_head_changed = 1;
   1aebc:	4b11      	ldr	r3, [pc, #68]	; (1af04 <ble_ll_sched_rmv_elem+0xa0>)
   1aebe:	2201      	movs	r2, #1
   1aec0:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_stop(&tmr->t);
   1aec2:	4811      	ldr	r0, [pc, #68]	; (1af08 <ble_ll_sched_rmv_elem+0xa4>)
   1aec4:	f00f fef7 	bl	2acb6 <os_cputime_timer_stop>
        rc = 0;
   1aec8:	2400      	movs	r4, #0
}
   1aeca:	e000      	b.n	1aece <ble_ll_sched_rmv_elem+0x6a>
        rc = 1;
   1aecc:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   1aece:	4628      	mov	r0, r5
   1aed0:	f7f3 fb40 	bl	e554 <os_arch_restore_sr>
    if (!g_ble_ll_sched_q_head_changed) {
   1aed4:	4b0b      	ldr	r3, [pc, #44]	; (1af04 <ble_ll_sched_rmv_elem+0xa0>)
   1aed6:	781b      	ldrb	r3, [r3, #0]
   1aed8:	b91b      	cbnz	r3, 1aee2 <ble_ll_sched_rmv_elem+0x7e>
}
   1aeda:	4620      	mov	r0, r4
   1aedc:	bd38      	pop	{r3, r4, r5, pc}
        rc = 0;
   1aede:	2400      	movs	r4, #0
   1aee0:	e7f5      	b.n	1aece <ble_ll_sched_rmv_elem+0x6a>
    g_ble_ll_sched_q_head_changed = 0;
   1aee2:	4b08      	ldr	r3, [pc, #32]	; (1af04 <ble_ll_sched_rmv_elem+0xa0>)
   1aee4:	2200      	movs	r2, #0
   1aee6:	701a      	strb	r2, [r3, #0]
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1aee8:	4b05      	ldr	r3, [pc, #20]	; (1af00 <ble_ll_sched_rmv_elem+0x9c>)
   1aeea:	681d      	ldr	r5, [r3, #0]
    ble_ll_rfmgmt_sched_changed(first);
   1aeec:	4628      	mov	r0, r5
   1aeee:	f7ff fc8f 	bl	1a810 <ble_ll_rfmgmt_sched_changed>
    if (first) {
   1aef2:	2d00      	cmp	r5, #0
   1aef4:	d0f1      	beq.n	1aeda <ble_ll_sched_rmv_elem+0x76>
    os_cputime_timer_start(&tmr->t, tgt);
   1aef6:	6869      	ldr	r1, [r5, #4]
   1aef8:	4803      	ldr	r0, [pc, #12]	; (1af08 <ble_ll_sched_rmv_elem+0xa4>)
   1aefa:	f00f fed8 	bl	2acae <os_cputime_timer_start>
    return rc;
   1aefe:	e7ec      	b.n	1aeda <ble_ll_sched_rmv_elem+0x76>
   1af00:	200026ac 	.word	0x200026ac
   1af04:	200026b4 	.word	0x200026b4
   1af08:	200026b8 	.word	0x200026b8

0001af0c <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   1af0c:	b510      	push	{r4, lr}
   1af0e:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   1af10:	f7f3 fb1a 	bl	e548 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1af14:	4b05      	ldr	r3, [pc, #20]	; (1af2c <ble_ll_sched_next_time+0x20>)
   1af16:	681b      	ldr	r3, [r3, #0]
    if (first) {
   1af18:	b133      	cbz	r3, 1af28 <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   1af1a:	685b      	ldr	r3, [r3, #4]
   1af1c:	6023      	str	r3, [r4, #0]
        rc = 1;
   1af1e:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   1af20:	f7f3 fb18 	bl	e554 <os_arch_restore_sr>

    return rc;
}
   1af24:	4620      	mov	r0, r4
   1af26:	bd10      	pop	{r4, pc}
    rc = 0;
   1af28:	2400      	movs	r4, #0
   1af2a:	e7f9      	b.n	1af20 <ble_ll_sched_next_time+0x14>
   1af2c:	200026ac 	.word	0x200026ac

0001af30 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   1af30:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&tmr->t);
   1af32:	4802      	ldr	r0, [pc, #8]	; (1af3c <ble_ll_sched_stop+0xc>)
   1af34:	f00f febf 	bl	2acb6 <os_cputime_timer_stop>
    ble_ll_tmr_stop(&g_ble_ll_sched_timer);
}
   1af38:	bd08      	pop	{r3, pc}
   1af3a:	bf00      	nop
   1af3c:	200026b8 	.word	0x200026b8

0001af40 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   1af40:	b508      	push	{r3, lr}

    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks = ble_ll_tmr_u2t_up(XCVR_TX_SCHED_DELAY_USECS);
   1af42:	4b06      	ldr	r3, [pc, #24]	; (1af5c <ble_ll_sched_init+0x1c>)
   1af44:	2207      	movs	r2, #7
   1af46:	701a      	strb	r2, [r3, #0]
    os_cputime_timer_init(&tmr->t, cb, arg);
   1af48:	2200      	movs	r2, #0
   1af4a:	4905      	ldr	r1, [pc, #20]	; (1af60 <ble_ll_sched_init+0x20>)
   1af4c:	4805      	ldr	r0, [pc, #20]	; (1af64 <ble_ll_sched_init+0x24>)
   1af4e:	f00f fe8f 	bl	2ac70 <os_cputime_timer_init>

    /* Initialize cputimer for the scheduler */
    ble_ll_tmr_init(&g_ble_ll_sched_timer, ble_ll_sched_run, NULL);

    g_ble_ll_sched_q_head_changed = 0;
   1af52:	2000      	movs	r0, #0
   1af54:	4b04      	ldr	r3, [pc, #16]	; (1af68 <ble_ll_sched_init+0x28>)
   1af56:	7018      	strb	r0, [r3, #0]

    return 0;
}
   1af58:	bd08      	pop	{r3, pc}
   1af5a:	bf00      	nop
   1af5c:	200026a8 	.word	0x200026a8
   1af60:	0001ab15 	.word	0x0001ab15
   1af64:	200026b8 	.word	0x200026b8
   1af68:	200026b4 	.word	0x200026b4

0001af6c <ble_ll_utils_remapped_channel>:
    return aa;
}

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   1af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1af6e:	2400      	movs	r4, #0
    chan = 0;
   1af70:	4626      	mov	r6, r4
    cntr = 0;
   1af72:	4625      	mov	r5, r4
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1af74:	e011      	b.n	1af9a <ble_ll_utils_remapped_channel+0x2e>
        if (usable_chans != 0) {
            mask = 0x01;
            for (j = 0; j < 8; j++) {
                if (usable_chans & mask) {
                    if (cntr == remap_index) {
                        return (chan + j);
   1af76:	4432      	add	r2, r6
   1af78:	b2d0      	uxtb	r0, r2
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
    return 0;
}
   1af7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                mask <<= 1;
   1af7c:	005b      	lsls	r3, r3, #1
   1af7e:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   1af80:	3201      	adds	r2, #1
   1af82:	2a07      	cmp	r2, #7
   1af84:	dc06      	bgt.n	1af94 <ble_ll_utils_remapped_channel+0x28>
                if (usable_chans & mask) {
   1af86:	423b      	tst	r3, r7
   1af88:	d0f8      	beq.n	1af7c <ble_ll_utils_remapped_channel+0x10>
                    if (cntr == remap_index) {
   1af8a:	4285      	cmp	r5, r0
   1af8c:	d0f3      	beq.n	1af76 <ble_ll_utils_remapped_channel+0xa>
                    ++cntr;
   1af8e:	3501      	adds	r5, #1
   1af90:	b2ed      	uxtb	r5, r5
   1af92:	e7f3      	b.n	1af7c <ble_ll_utils_remapped_channel+0x10>
        chan += 8;
   1af94:	3608      	adds	r6, #8
   1af96:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1af98:	3401      	adds	r4, #1
   1af9a:	2c04      	cmp	r4, #4
   1af9c:	dc05      	bgt.n	1afaa <ble_ll_utils_remapped_channel+0x3e>
        usable_chans = chanmap[i];
   1af9e:	5d0f      	ldrb	r7, [r1, r4]
        if (usable_chans != 0) {
   1afa0:	2f00      	cmp	r7, #0
   1afa2:	d0f7      	beq.n	1af94 <ble_ll_utils_remapped_channel+0x28>
            for (j = 0; j < 8; j++) {
   1afa4:	2200      	movs	r2, #0
            mask = 0x01;
   1afa6:	2301      	movs	r3, #1
   1afa8:	e7eb      	b.n	1af82 <ble_ll_utils_remapped_channel+0x16>
    BLE_LL_ASSERT(0);
   1afaa:	f7f1 f8f7 	bl	c19c <hal_debugger_connected>
   1afae:	b100      	cbz	r0, 1afb2 <ble_ll_utils_remapped_channel+0x46>
   1afb0:	be01      	bkpt	0x0001
   1afb2:	2300      	movs	r3, #0
   1afb4:	461a      	mov	r2, r3
   1afb6:	4619      	mov	r1, r3
   1afb8:	4618      	mov	r0, r3
   1afba:	f7f1 fdf3 	bl	cba4 <__assert_func>

0001afbe <ble_ll_utils_calc_num_used_chans>:
{
    uint32_t u32 = 0;
    uint32_t num_used_chans = 0;
    unsigned idx;

    for (idx = 0; idx < 37; idx++) {
   1afbe:	2300      	movs	r3, #0
    uint32_t num_used_chans = 0;
   1afc0:	4619      	mov	r1, r3
    uint32_t u32 = 0;
   1afc2:	461a      	mov	r2, r3
    for (idx = 0; idx < 37; idx++) {
   1afc4:	e001      	b.n	1afca <ble_ll_utils_calc_num_used_chans+0xc>
            u32 = chan_map[idx / 8];
        }
        if (u32 & 1) {
            num_used_chans++;
        }
        u32 >>= 1;
   1afc6:	0852      	lsrs	r2, r2, #1
    for (idx = 0; idx < 37; idx++) {
   1afc8:	3301      	adds	r3, #1
   1afca:	2b24      	cmp	r3, #36	; 0x24
   1afcc:	d809      	bhi.n	1afe2 <ble_ll_utils_calc_num_used_chans+0x24>
        if ((idx % 8) == 0) {
   1afce:	f013 0f07 	tst.w	r3, #7
   1afd2:	d101      	bne.n	1afd8 <ble_ll_utils_calc_num_used_chans+0x1a>
            u32 = chan_map[idx / 8];
   1afd4:	08da      	lsrs	r2, r3, #3
   1afd6:	5c82      	ldrb	r2, [r0, r2]
        if (u32 & 1) {
   1afd8:	f012 0f01 	tst.w	r2, #1
   1afdc:	d0f3      	beq.n	1afc6 <ble_ll_utils_calc_num_used_chans+0x8>
            num_used_chans++;
   1afde:	3101      	adds	r1, #1
   1afe0:	e7f1      	b.n	1afc6 <ble_ll_utils_calc_num_used_chans+0x8>
    }

    return num_used_chans;
}
   1afe2:	b2c8      	uxtb	r0, r1
   1afe4:	4770      	bx	lr
	...

0001afe8 <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   1afe8:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   1afea:	2800      	cmp	r0, #0
   1afec:	dc01      	bgt.n	1aff2 <ble_ll_utils_calc_window_widening+0xa>
    window_widening = 0;
   1afee:	2000      	movs	r0, #0
        total_sca_ppm = g_ble_sca_ppm_tbl[central_sca] + MYNEWT_VAL(BLE_LL_SCA);
        window_widening = (total_sca_ppm * delta_msec) / 1000;
    }

    return window_widening;
}
   1aff0:	4770      	bx	lr
{
   1aff2:	b510      	push	{r4, lr}
   1aff4:	4614      	mov	r4, r2
    return os_cputime_ticks_to_usecs(ticks);
   1aff6:	f00f fe6f 	bl	2acd8 <os_cputime_ticks_to_usecs>
        delta_msec = ble_ll_tmr_t2u(time_since_last_anchor) / 1000;
   1affa:	4a07      	ldr	r2, [pc, #28]	; (1b018 <ble_ll_utils_calc_window_widening+0x30>)
   1affc:	fba2 3000 	umull	r3, r0, r2, r0
   1b000:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[central_sca] + MYNEWT_VAL(BLE_LL_SCA);
   1b002:	4906      	ldr	r1, [pc, #24]	; (1b01c <ble_ll_utils_calc_window_widening+0x34>)
   1b004:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   1b008:	303c      	adds	r0, #60	; 0x3c
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   1b00a:	fb00 f003 	mul.w	r0, r0, r3
   1b00e:	fba2 3000 	umull	r3, r0, r2, r0
   1b012:	0980      	lsrs	r0, r0, #6
}
   1b014:	bd10      	pop	{r4, pc}
   1b016:	bf00      	nop
   1b018:	10624dd3 	.word	0x10624dd3
   1b01c:	0002dd78 	.word	0x0002dd78

0001b020 <ble_ll_whitelist_chg_allowed>:

struct ble_ll_whitelist_entry g_ble_ll_whitelist[BLE_LL_WHITELIST_SIZE];

static int
ble_ll_whitelist_chg_allowed(void)
{
   1b020:	b508      	push	{r3, lr}
     *  -> scanning uses the whitelist and is enabled.
     *  -> initiating uses whitelist and a LE create connection command is in
     *     progress
     */
#if MYNEWT_VAL(BLE_LL_ROLE_BROADCASTER)
    if (ble_ll_adv_can_chg_whitelist()) {
   1b022:	f7fa fdb5 	bl	15b90 <ble_ll_adv_can_chg_whitelist>
   1b026:	b900      	cbnz	r0, 1b02a <ble_ll_whitelist_chg_allowed+0xa>
        return 1;
    }
#endif

    return 0;
}
   1b028:	bd08      	pop	{r3, pc}
        return 1;
   1b02a:	2001      	movs	r0, #1
   1b02c:	e7fc      	b.n	1b028 <ble_ll_whitelist_chg_allowed+0x8>
	...

0001b030 <ble_ll_whitelist_search>:
 * is the 'position' of the device in the whitelist (the index of the element
 * plus 1).
 */
static int
ble_ll_whitelist_search(const uint8_t *addr, uint8_t addr_type)
{
   1b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b032:	4607      	mov	r7, r0
   1b034:	460e      	mov	r6, r1
    int i;
    struct ble_ll_whitelist_entry *wl;

    wl = &g_ble_ll_whitelist[0];
   1b036:	4c0c      	ldr	r4, [pc, #48]	; (1b068 <ble_ll_whitelist_search+0x38>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1b038:	2500      	movs	r5, #0
   1b03a:	e001      	b.n	1b040 <ble_ll_whitelist_search+0x10>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++wl;
   1b03c:	3408      	adds	r4, #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1b03e:	3501      	adds	r5, #1
   1b040:	2d07      	cmp	r5, #7
   1b042:	dc0e      	bgt.n	1b062 <ble_ll_whitelist_search+0x32>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   1b044:	7823      	ldrb	r3, [r4, #0]
   1b046:	2b00      	cmp	r3, #0
   1b048:	d0f8      	beq.n	1b03c <ble_ll_whitelist_search+0xc>
   1b04a:	7863      	ldrb	r3, [r4, #1]
   1b04c:	42b3      	cmp	r3, r6
   1b04e:	d1f5      	bne.n	1b03c <ble_ll_whitelist_search+0xc>
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   1b050:	2206      	movs	r2, #6
   1b052:	4639      	mov	r1, r7
   1b054:	1ca0      	adds	r0, r4, #2
   1b056:	f7f3 fc8b 	bl	e970 <memcmp>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   1b05a:	2800      	cmp	r0, #0
   1b05c:	d1ee      	bne.n	1b03c <ble_ll_whitelist_search+0xc>
            return i + 1;
   1b05e:	1c68      	adds	r0, r5, #1
   1b060:	e000      	b.n	1b064 <ble_ll_whitelist_search+0x34>
    }

    return 0;
   1b062:	2000      	movs	r0, #0
}
   1b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b066:	bf00      	nop
   1b068:	200026d0 	.word	0x200026d0

0001b06c <ble_ll_whitelist_clear>:
{
   1b06c:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   1b06e:	f7ff ffd7 	bl	1b020 <ble_ll_whitelist_chg_allowed>
   1b072:	b160      	cbz	r0, 1b08e <ble_ll_whitelist_clear+0x22>
    wl = &g_ble_ll_whitelist[0];
   1b074:	4a07      	ldr	r2, [pc, #28]	; (1b094 <ble_ll_whitelist_clear+0x28>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1b076:	2300      	movs	r3, #0
   1b078:	e003      	b.n	1b082 <ble_ll_whitelist_clear+0x16>
        wl->wl_valid = 0;
   1b07a:	2100      	movs	r1, #0
   1b07c:	f802 1b08 	strb.w	r1, [r2], #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1b080:	3301      	adds	r3, #1
   1b082:	2b07      	cmp	r3, #7
   1b084:	ddf9      	ble.n	1b07a <ble_ll_whitelist_clear+0xe>
    ble_hw_whitelist_clear();
   1b086:	f000 f8c5 	bl	1b214 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   1b08a:	2000      	movs	r0, #0
}
   1b08c:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1b08e:	200c      	movs	r0, #12
   1b090:	e7fc      	b.n	1b08c <ble_ll_whitelist_clear+0x20>
   1b092:	bf00      	nop
   1b094:	200026d0 	.word	0x200026d0

0001b098 <ble_ll_whitelist_read_size>:
    rsp->size = BLE_LL_WHITELIST_SIZE;
   1b098:	2308      	movs	r3, #8
   1b09a:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1b09c:	2301      	movs	r3, #1
   1b09e:	700b      	strb	r3, [r1, #0]
}
   1b0a0:	2000      	movs	r0, #0
   1b0a2:	4770      	bx	lr

0001b0a4 <ble_ll_whitelist_match>:
 *
 * @return int
 */
int
ble_ll_whitelist_match(uint8_t *addr, uint8_t addr_type, int is_ident)
{
   1b0a4:	b508      	push	{r3, lr}
    /*
     * XXX: This should be changed. This is HW specific: some HW may be able
     * to both resolve a private address and perform a whitelist check. The
     * current BLE hw cannot support this.
     */
    if (is_ident) {
   1b0a6:	b112      	cbz	r2, 1b0ae <ble_ll_whitelist_match+0xa>
        rc = ble_ll_whitelist_search(addr, addr_type);
   1b0a8:	f7ff ffc2 	bl	1b030 <ble_ll_whitelist_search>
    }
#else
    rc = ble_ll_whitelist_search(addr, addr_type);
#endif
    return rc;
}
   1b0ac:	bd08      	pop	{r3, pc}
        rc = ble_hw_whitelist_match();
   1b0ae:	f000 f94b 	bl	1b348 <ble_hw_whitelist_match>
    return rc;
   1b0b2:	e7fb      	b.n	1b0ac <ble_ll_whitelist_match+0x8>

0001b0b4 <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   1b0b4:	2907      	cmp	r1, #7
   1b0b6:	d001      	beq.n	1b0bc <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1b0b8:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   1b0ba:	4770      	bx	lr
{
   1b0bc:	b538      	push	{r3, r4, r5, lr}
   1b0be:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   1b0c0:	f7ff ffae 	bl	1b020 <ble_ll_whitelist_chg_allowed>
   1b0c4:	b310      	cbz	r0, 1b10c <ble_ll_whitelist_add+0x58>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   1b0c6:	4625      	mov	r5, r4
   1b0c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   1b0cc:	4628      	mov	r0, r5
   1b0ce:	f7ff ffaf 	bl	1b030 <ble_ll_whitelist_search>
   1b0d2:	4603      	mov	r3, r0
   1b0d4:	b188      	cbz	r0, 1b0fa <ble_ll_whitelist_add+0x46>
    rc = BLE_ERR_SUCCESS;
   1b0d6:	2000      	movs	r0, #0
}
   1b0d8:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(&wl->wl_dev_addr[0], cmd->addr, BLE_DEV_ADDR_LEN);
   1b0da:	6829      	ldr	r1, [r5, #0]
   1b0dc:	f8c2 1002 	str.w	r1, [r2, #2]
   1b0e0:	88a9      	ldrh	r1, [r5, #4]
   1b0e2:	80d1      	strh	r1, [r2, #6]
                wl->wl_addr_type = cmd->addr_type;
   1b0e4:	7821      	ldrb	r1, [r4, #0]
   1b0e6:	7051      	strb	r1, [r2, #1]
                wl->wl_valid = 1;
   1b0e8:	2101      	movs	r1, #1
   1b0ea:	7011      	strb	r1, [r2, #0]
        if (i == BLE_LL_WHITELIST_SIZE) {
   1b0ec:	2b08      	cmp	r3, #8
   1b0ee:	d00f      	beq.n	1b110 <ble_ll_whitelist_add+0x5c>
            rc = ble_hw_whitelist_add(cmd->addr, cmd->addr_type);
   1b0f0:	7821      	ldrb	r1, [r4, #0]
   1b0f2:	4628      	mov	r0, r5
   1b0f4:	f000 f89a 	bl	1b22c <ble_hw_whitelist_add>
   1b0f8:	e7ee      	b.n	1b0d8 <ble_ll_whitelist_add+0x24>
        wl = &g_ble_ll_whitelist[0];
   1b0fa:	4a06      	ldr	r2, [pc, #24]	; (1b114 <ble_ll_whitelist_add+0x60>)
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1b0fc:	2b07      	cmp	r3, #7
   1b0fe:	dcf5      	bgt.n	1b0ec <ble_ll_whitelist_add+0x38>
            if (wl->wl_valid == 0) {
   1b100:	7811      	ldrb	r1, [r2, #0]
   1b102:	2900      	cmp	r1, #0
   1b104:	d0e9      	beq.n	1b0da <ble_ll_whitelist_add+0x26>
            ++wl;
   1b106:	3208      	adds	r2, #8
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1b108:	3301      	adds	r3, #1
   1b10a:	e7f7      	b.n	1b0fc <ble_ll_whitelist_add+0x48>
        return BLE_ERR_CMD_DISALLOWED;
   1b10c:	200c      	movs	r0, #12
   1b10e:	e7e3      	b.n	1b0d8 <ble_ll_whitelist_add+0x24>
            rc = BLE_ERR_MEM_CAPACITY;
   1b110:	2007      	movs	r0, #7
   1b112:	e7e1      	b.n	1b0d8 <ble_ll_whitelist_add+0x24>
   1b114:	200026d0 	.word	0x200026d0

0001b118 <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   1b118:	2907      	cmp	r1, #7
   1b11a:	d001      	beq.n	1b120 <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1b11c:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   1b11e:	4770      	bx	lr
{
   1b120:	b538      	push	{r3, r4, r5, lr}
   1b122:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   1b124:	f7ff ff7c 	bl	1b020 <ble_ll_whitelist_chg_allowed>
   1b128:	b188      	cbz	r0, 1b14e <ble_ll_whitelist_rmv+0x36>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   1b12a:	4625      	mov	r5, r4
   1b12c:	f815 1b01 	ldrb.w	r1, [r5], #1
   1b130:	4628      	mov	r0, r5
   1b132:	f7ff ff7d 	bl	1b030 <ble_ll_whitelist_search>
    if (position) {
   1b136:	b120      	cbz	r0, 1b142 <ble_ll_whitelist_rmv+0x2a>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   1b138:	1e43      	subs	r3, r0, #1
   1b13a:	4a06      	ldr	r2, [pc, #24]	; (1b154 <ble_ll_whitelist_rmv+0x3c>)
   1b13c:	2100      	movs	r1, #0
   1b13e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   1b142:	7821      	ldrb	r1, [r4, #0]
   1b144:	4628      	mov	r0, r5
   1b146:	f000 f8a7 	bl	1b298 <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   1b14a:	2000      	movs	r0, #0
}
   1b14c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1b14e:	200c      	movs	r0, #12
   1b150:	e7fc      	b.n	1b14c <ble_ll_whitelist_rmv+0x34>
   1b152:	bf00      	nop
   1b154:	200026d0 	.word	0x200026d0

0001b158 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   1b158:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   1b15a:	f000 f8dd 	bl	1b318 <ble_hw_whitelist_enable>
#endif
}
   1b15e:	bd08      	pop	{r3, pc}

0001b160 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   1b160:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   1b162:	f000 f8e7 	bl	1b334 <ble_hw_whitelist_disable>
#endif
}
   1b166:	bd08      	pop	{r3, pc}

0001b168 <ble_rng_isr>:
/**
 * Random number generator ISR.
 */
static void
ble_rng_isr(void)
{
   1b168:	b508      	push	{r3, lr}
    uint8_t rnum;

    os_trace_isr_enter();

    /* No callback? Clear and disable interrupts */
    if (g_ble_rng_isr_cb == NULL) {
   1b16a:	4b0d      	ldr	r3, [pc, #52]	; (1b1a0 <ble_rng_isr+0x38>)
   1b16c:	681b      	ldr	r3, [r3, #0]
   1b16e:	b163      	cbz	r3, 1b18a <ble_rng_isr+0x22>
        os_trace_isr_exit();
        return;
    }

    /* If there is a value ready grab it */
    if (NRF_RNG->EVENTS_VALRDY) {
   1b170:	4a0c      	ldr	r2, [pc, #48]	; (1b1a4 <ble_rng_isr+0x3c>)
   1b172:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1b176:	b13a      	cbz	r2, 1b188 <ble_rng_isr+0x20>
        NRF_RNG->EVENTS_VALRDY = 0;
   1b178:	4a0a      	ldr	r2, [pc, #40]	; (1b1a4 <ble_rng_isr+0x3c>)
   1b17a:	2100      	movs	r1, #0
   1b17c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        rnum = (uint8_t)NRF_RNG->VALUE;
   1b180:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
        (*g_ble_rng_isr_cb)(rnum);
   1b184:	b2c0      	uxtb	r0, r0
   1b186:	4798      	blx	r3
    }

    os_trace_isr_exit();
}
   1b188:	bd08      	pop	{r3, pc}
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rng_int_disable(NRF_RNG_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1b18a:	4b06      	ldr	r3, [pc, #24]	; (1b1a4 <ble_rng_isr+0x3c>)
   1b18c:	2201      	movs	r2, #1
   1b18e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        NRF_RNG->EVENTS_VALRDY = 0;
   1b192:	2200      	movs	r2, #0
   1b194:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        (void)NRF_RNG->SHORTS;
   1b198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        return;
   1b19c:	e7f4      	b.n	1b188 <ble_rng_isr+0x20>
   1b19e:	bf00      	nop
   1b1a0:	20002714 	.word	0x20002714
   1b1a4:	4000d000 	.word	0x4000d000

0001b1a8 <ble_hw_get_public_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) != 0) {
   1b1a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b1ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1b1b0:	f013 0f01 	tst.w	r3, #1
   1b1b4:	d10d      	bne.n	1b1d2 <ble_hw_get_public_addr+0x2a>
    addr_low = NRF_FICR->DEVICEADDR[0];
   1b1b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b1ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    addr_high = NRF_FICR->DEVICEADDR[1];
   1b1be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    memcpy(addr->val, &addr_low, 4);
   1b1c2:	f8c0 2001 	str.w	r2, [r0, #1]
    memcpy(&addr->val[4], &addr_high, 2);
   1b1c6:	f8a0 3005 	strh.w	r3, [r0, #5]
    addr->type = BLE_ADDR_PUBLIC;
   1b1ca:	2300      	movs	r3, #0
   1b1cc:	7003      	strb	r3, [r0, #0]
    return 0;
   1b1ce:	4618      	mov	r0, r3
   1b1d0:	4770      	bx	lr
        return -1;
   1b1d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b1d6:	4770      	bx	lr

0001b1d8 <ble_hw_get_static_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) == 1) {
   1b1d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b1dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1b1e0:	f013 0f01 	tst.w	r3, #1
   1b1e4:	d00f      	beq.n	1b206 <ble_hw_get_static_addr+0x2e>
        memcpy(addr->val, (void *)&NRF_FICR->DEVICEADDR[0], 4);
   1b1e6:	4b09      	ldr	r3, [pc, #36]	; (1b20c <ble_hw_get_static_addr+0x34>)
   1b1e8:	681b      	ldr	r3, [r3, #0]
   1b1ea:	f8c0 3001 	str.w	r3, [r0, #1]
        memcpy(&addr->val[4], (void *)&NRF_FICR->DEVICEADDR[1], 2);
   1b1ee:	4b08      	ldr	r3, [pc, #32]	; (1b210 <ble_hw_get_static_addr+0x38>)
   1b1f0:	881b      	ldrh	r3, [r3, #0]
   1b1f2:	f8a0 3005 	strh.w	r3, [r0, #5]
        addr->val[5] |= 0xc0;
   1b1f6:	7983      	ldrb	r3, [r0, #6]
   1b1f8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b1fc:	7183      	strb	r3, [r0, #6]
        addr->type = BLE_ADDR_RANDOM;
   1b1fe:	2301      	movs	r3, #1
   1b200:	7003      	strb	r3, [r0, #0]
        rc = 0;
   1b202:	2000      	movs	r0, #0
   1b204:	4770      	bx	lr
        rc = -1;
   1b206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b20a:	4770      	bx	lr
   1b20c:	100000a4 	.word	0x100000a4
   1b210:	100000a8 	.word	0x100000a8

0001b214 <ble_hw_whitelist_clear>:
    NRF_RADIO->DACNF = 0;
   1b214:	2300      	movs	r3, #0
   1b216:	4a03      	ldr	r2, [pc, #12]	; (1b224 <ble_hw_whitelist_clear+0x10>)
   1b218:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    g_ble_hw_whitelist_mask = 0;
   1b21c:	4a02      	ldr	r2, [pc, #8]	; (1b228 <ble_hw_whitelist_clear+0x14>)
   1b21e:	7013      	strb	r3, [r2, #0]
}
   1b220:	4770      	bx	lr
   1b222:	bf00      	nop
   1b224:	40001000 	.word	0x40001000
   1b228:	20002710 	.word	0x20002710

0001b22c <ble_hw_whitelist_add>:
{
   1b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b230:	4606      	mov	r6, r0
   1b232:	460f      	mov	r7, r1
    mask = 0x01;
   1b234:	2501      	movs	r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1b236:	2400      	movs	r4, #0
   1b238:	e008      	b.n	1b24c <ble_hw_whitelist_add+0x20>
                NRF_RADIO->DACNF |= (mask << 8);
   1b23a:	f8d8 3640 	ldr.w	r3, [r8, #1600]	; 0x640
   1b23e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1b242:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
   1b246:	e019      	b.n	1b27c <ble_hw_whitelist_add+0x50>
        mask <<= 1;
   1b248:	006d      	lsls	r5, r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1b24a:	3401      	adds	r4, #1
   1b24c:	2c07      	cmp	r4, #7
   1b24e:	dc1b      	bgt.n	1b288 <ble_hw_whitelist_add+0x5c>
        if ((mask & g_ble_hw_whitelist_mask) == 0) {
   1b250:	4b0f      	ldr	r3, [pc, #60]	; (1b290 <ble_hw_whitelist_add+0x64>)
   1b252:	781b      	ldrb	r3, [r3, #0]
   1b254:	422b      	tst	r3, r5
   1b256:	d1f7      	bne.n	1b248 <ble_hw_whitelist_add+0x1c>
            NRF_RADIO->DAB[i] = get_le32(addr);
   1b258:	4630      	mov	r0, r6
   1b25a:	f00f fcc3 	bl	2abe4 <get_le32>
   1b25e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1b294 <ble_hw_whitelist_add+0x68>
   1b262:	f504 73c0 	add.w	r3, r4, #384	; 0x180
   1b266:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
            NRF_RADIO->DAP[i] = get_le16(addr + 4);
   1b26a:	1d30      	adds	r0, r6, #4
   1b26c:	f00f fcb5 	bl	2abda <get_le16>
   1b270:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   1b274:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
            if (addr_type == BLE_ADDR_RANDOM) {
   1b278:	2f01      	cmp	r7, #1
   1b27a:	d0de      	beq.n	1b23a <ble_hw_whitelist_add+0xe>
            g_ble_hw_whitelist_mask |= mask;
   1b27c:	4a04      	ldr	r2, [pc, #16]	; (1b290 <ble_hw_whitelist_add+0x64>)
   1b27e:	7813      	ldrb	r3, [r2, #0]
   1b280:	431d      	orrs	r5, r3
   1b282:	7015      	strb	r5, [r2, #0]
            return BLE_ERR_SUCCESS;
   1b284:	2000      	movs	r0, #0
   1b286:	e000      	b.n	1b28a <ble_hw_whitelist_add+0x5e>
    return BLE_ERR_MEM_CAPACITY;
   1b288:	2007      	movs	r0, #7
}
   1b28a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b28e:	bf00      	nop
   1b290:	20002710 	.word	0x20002710
   1b294:	40001000 	.word	0x40001000

0001b298 <ble_hw_whitelist_rmv>:
{
   1b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b29a:	4604      	mov	r4, r0
   1b29c:	460e      	mov	r6, r1
    dab = get_le32(addr);
   1b29e:	f00f fca1 	bl	2abe4 <get_le32>
   1b2a2:	4605      	mov	r5, r0
    dap = get_le16(addr + 4);
   1b2a4:	1d20      	adds	r0, r4, #4
   1b2a6:	f00f fc98 	bl	2abda <get_le16>
    txadd = NRF_RADIO->DACNF >> 8;
   1b2aa:	4b19      	ldr	r3, [pc, #100]	; (1b310 <ble_hw_whitelist_rmv+0x78>)
   1b2ac:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
   1b2b0:	0a3f      	lsrs	r7, r7, #8
    mask = 0x01;
   1b2b2:	2201      	movs	r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1b2b4:	2300      	movs	r3, #0
   1b2b6:	e002      	b.n	1b2be <ble_hw_whitelist_rmv+0x26>
                    if (cfg_addr != 0) {
   1b2b8:	b9d9      	cbnz	r1, 1b2f2 <ble_hw_whitelist_rmv+0x5a>
        mask <<= 1;
   1b2ba:	0052      	lsls	r2, r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1b2bc:	3301      	adds	r3, #1
   1b2be:	2b07      	cmp	r3, #7
   1b2c0:	dc17      	bgt.n	1b2f2 <ble_hw_whitelist_rmv+0x5a>
        if (mask & g_ble_hw_whitelist_mask) {
   1b2c2:	4c14      	ldr	r4, [pc, #80]	; (1b314 <ble_hw_whitelist_rmv+0x7c>)
   1b2c4:	7824      	ldrb	r4, [r4, #0]
   1b2c6:	4214      	tst	r4, r2
   1b2c8:	d0f7      	beq.n	1b2ba <ble_hw_whitelist_rmv+0x22>
            if ((dab == NRF_RADIO->DAB[i]) && (dap == NRF_RADIO->DAP[i])) {
   1b2ca:	f503 74c0 	add.w	r4, r3, #384	; 0x180
   1b2ce:	4910      	ldr	r1, [pc, #64]	; (1b310 <ble_hw_whitelist_rmv+0x78>)
   1b2d0:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   1b2d4:	42a9      	cmp	r1, r5
   1b2d6:	d1f0      	bne.n	1b2ba <ble_hw_whitelist_rmv+0x22>
   1b2d8:	f503 71c4 	add.w	r1, r3, #392	; 0x188
   1b2dc:	4c0c      	ldr	r4, [pc, #48]	; (1b310 <ble_hw_whitelist_rmv+0x78>)
   1b2de:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   1b2e2:	4288      	cmp	r0, r1
   1b2e4:	d1e9      	bne.n	1b2ba <ble_hw_whitelist_rmv+0x22>
                cfg_addr = txadd & mask;
   1b2e6:	b2d1      	uxtb	r1, r2
   1b2e8:	4039      	ands	r1, r7
                if (addr_type == BLE_ADDR_RANDOM) {
   1b2ea:	2e01      	cmp	r6, #1
   1b2ec:	d0e4      	beq.n	1b2b8 <ble_hw_whitelist_rmv+0x20>
                    if (cfg_addr == 0) {
   1b2ee:	2900      	cmp	r1, #0
   1b2f0:	d1e3      	bne.n	1b2ba <ble_hw_whitelist_rmv+0x22>
    if (i < BLE_HW_WHITE_LIST_SIZE) {
   1b2f2:	2b07      	cmp	r3, #7
   1b2f4:	dc0b      	bgt.n	1b30e <ble_hw_whitelist_rmv+0x76>
        g_ble_hw_whitelist_mask &= ~mask;
   1b2f6:	4907      	ldr	r1, [pc, #28]	; (1b314 <ble_hw_whitelist_rmv+0x7c>)
   1b2f8:	780b      	ldrb	r3, [r1, #0]
   1b2fa:	ea23 0302 	bic.w	r3, r3, r2
   1b2fe:	700b      	strb	r3, [r1, #0]
        NRF_RADIO->DACNF &= ~mask;
   1b300:	4903      	ldr	r1, [pc, #12]	; (1b310 <ble_hw_whitelist_rmv+0x78>)
   1b302:	f8d1 3640 	ldr.w	r3, [r1, #1600]	; 0x640
   1b306:	ea23 0202 	bic.w	r2, r3, r2
   1b30a:	f8c1 2640 	str.w	r2, [r1, #1600]	; 0x640
}
   1b30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b310:	40001000 	.word	0x40001000
   1b314:	20002710 	.word	0x20002710

0001b318 <ble_hw_whitelist_enable>:
    NRF_RADIO->DACNF |= g_ble_hw_whitelist_mask;
   1b318:	4a04      	ldr	r2, [pc, #16]	; (1b32c <ble_hw_whitelist_enable+0x14>)
   1b31a:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   1b31e:	4b04      	ldr	r3, [pc, #16]	; (1b330 <ble_hw_whitelist_enable+0x18>)
   1b320:	781b      	ldrb	r3, [r3, #0]
   1b322:	430b      	orrs	r3, r1
   1b324:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1b328:	4770      	bx	lr
   1b32a:	bf00      	nop
   1b32c:	40001000 	.word	0x40001000
   1b330:	20002710 	.word	0x20002710

0001b334 <ble_hw_whitelist_disable>:
    NRF_RADIO->DACNF &= 0x0000ff00;
   1b334:	4a03      	ldr	r2, [pc, #12]	; (1b344 <ble_hw_whitelist_disable+0x10>)
   1b336:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1b33a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b33e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1b342:	4770      	bx	lr
   1b344:	40001000 	.word	0x40001000

0001b348 <ble_hw_whitelist_match>:
    return (int)NRF_RADIO->EVENTS_DEVMATCH;
   1b348:	4b01      	ldr	r3, [pc, #4]	; (1b350 <ble_hw_whitelist_match+0x8>)
   1b34a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1b34e:	4770      	bx	lr
   1b350:	40001000 	.word	0x40001000

0001b354 <ble_hw_encrypt_block>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b354:	2201      	movs	r2, #1
   1b356:	4b0c      	ldr	r3, [pc, #48]	; (1b388 <ble_hw_encrypt_block+0x34>)
   1b358:	601a      	str	r2, [r3, #0]
    NRF_ECB->EVENTS_ENDECB = 0;
   1b35a:	3b04      	subs	r3, #4
   1b35c:	2100      	movs	r1, #0
   1b35e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    NRF_ECB->EVENTS_ERRORECB = 0;
   1b362:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1b366:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1b36a:	601a      	str	r2, [r3, #0]
        end = NRF_ECB->EVENTS_ENDECB;
   1b36c:	4b07      	ldr	r3, [pc, #28]	; (1b38c <ble_hw_encrypt_block+0x38>)
   1b36e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        err = NRF_ECB->EVENTS_ERRORECB;
   1b372:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        if (end || err) {
   1b376:	b90a      	cbnz	r2, 1b37c <ble_hw_encrypt_block+0x28>
   1b378:	2b00      	cmp	r3, #0
   1b37a:	d0f7      	beq.n	1b36c <ble_hw_encrypt_block+0x18>
            if (err) {
   1b37c:	b90b      	cbnz	r3, 1b382 <ble_hw_encrypt_block+0x2e>
    rc = 0;
   1b37e:	2000      	movs	r0, #0
   1b380:	4770      	bx	lr
                rc = -1;
   1b382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b386:	4770      	bx	lr
   1b388:	4000e004 	.word	0x4000e004
   1b38c:	4000e000 	.word	0x4000e000

0001b390 <ble_hw_rng_init>:
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    /* Set bias */
    if (bias) {
   1b390:	b199      	cbz	r1, 1b3ba <ble_hw_rng_init+0x2a>
        NRF_RNG->CONFIG = 1;
   1b392:	4b0c      	ldr	r3, [pc, #48]	; (1b3c4 <ble_hw_rng_init+0x34>)
   1b394:	2201      	movs	r2, #1
   1b396:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    } else {
        NRF_RNG->CONFIG = 0;
    }

    /* If we were passed a function pointer we need to enable the interrupt */
    if (cb != NULL) {
   1b39a:	b160      	cbz	r0, 1b3b6 <ble_hw_rng_init+0x26>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b39c:	4b0a      	ldr	r3, [pc, #40]	; (1b3c8 <ble_hw_rng_init+0x38>)
   1b39e:	22e0      	movs	r2, #224	; 0xe0
   1b3a0:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b3a4:	4a09      	ldr	r2, [pc, #36]	; (1b3cc <ble_hw_rng_init+0x3c>)
   1b3a6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b3a8:	4909      	ldr	r1, [pc, #36]	; (1b3d0 <ble_hw_rng_init+0x40>)
   1b3aa:	6751      	str	r1, [r2, #116]	; 0x74
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b3ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1b3b0:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(RNG_IRQn, (uint32_t)ble_rng_isr);
#else
        ble_npl_hw_set_isr(RNG_IRQn, ble_rng_isr);
#endif
        NVIC_EnableIRQ(RNG_IRQn);
        g_ble_rng_isr_cb = cb;
   1b3b2:	4b08      	ldr	r3, [pc, #32]	; (1b3d4 <ble_hw_rng_init+0x44>)
   1b3b4:	6018      	str	r0, [r3, #0]
    }

    return 0;
}
   1b3b6:	2000      	movs	r0, #0
   1b3b8:	4770      	bx	lr
        NRF_RNG->CONFIG = 0;
   1b3ba:	4b02      	ldr	r3, [pc, #8]	; (1b3c4 <ble_hw_rng_init+0x34>)
   1b3bc:	2200      	movs	r2, #0
   1b3be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1b3c2:	e7ea      	b.n	1b39a <ble_hw_rng_init+0xa>
   1b3c4:	4000d000 	.word	0x4000d000
   1b3c8:	e000e100 	.word	0xe000e100
   1b3cc:	e000ed00 	.word	0xe000ed00
   1b3d0:	0001b169 	.word	0x0001b169
   1b3d4:	20002714 	.word	0x20002714

0001b3d8 <ble_hw_rng_start>:
 *
 * @return int
 */
int
ble_hw_rng_start(void)
{
   1b3d8:	b508      	push	{r3, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   1b3da:	f7f3 f8b5 	bl	e548 <os_arch_save_sr>
    NRF_RNG->EVENTS_VALRDY = 0;
   1b3de:	4b09      	ldr	r3, [pc, #36]	; (1b404 <ble_hw_rng_start+0x2c>)
   1b3e0:	2200      	movs	r2, #0
   1b3e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    if (g_ble_rng_isr_cb) {
   1b3e6:	4b08      	ldr	r3, [pc, #32]	; (1b408 <ble_hw_rng_start+0x30>)
   1b3e8:	681b      	ldr	r3, [r3, #0]
   1b3ea:	b11b      	cbz	r3, 1b3f4 <ble_hw_rng_start+0x1c>
    p_reg->INTENSET = mask;
   1b3ec:	4b05      	ldr	r3, [pc, #20]	; (1b404 <ble_hw_rng_start+0x2c>)
   1b3ee:	2201      	movs	r2, #1
   1b3f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b3f4:	4b03      	ldr	r3, [pc, #12]	; (1b404 <ble_hw_rng_start+0x2c>)
   1b3f6:	2201      	movs	r2, #1
   1b3f8:	601a      	str	r2, [r3, #0]
        nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
    }
    nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
    OS_EXIT_CRITICAL(sr);
   1b3fa:	f7f3 f8ab 	bl	e554 <os_arch_restore_sr>

    return 0;
}
   1b3fe:	2000      	movs	r0, #0
   1b400:	bd08      	pop	{r3, pc}
   1b402:	bf00      	nop
   1b404:	4000d000 	.word	0x4000d000
   1b408:	20002714 	.word	0x20002714

0001b40c <ble_hw_rng_stop>:
 *
 * @return int
 */
int
ble_hw_rng_stop(void)
{
   1b40c:	b510      	push	{r4, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   1b40e:	f7f3 f89b 	bl	e548 <os_arch_save_sr>
    p_reg->INTENCLR = mask;
   1b412:	4b06      	ldr	r3, [pc, #24]	; (1b42c <ble_hw_rng_stop+0x20>)
   1b414:	2201      	movs	r2, #1
   1b416:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1b41a:	4905      	ldr	r1, [pc, #20]	; (1b430 <ble_hw_rng_stop+0x24>)
   1b41c:	600a      	str	r2, [r1, #0]
    nrf_rng_int_disable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
    nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_STOP);
    NRF_RNG->EVENTS_VALRDY = 0;
   1b41e:	2400      	movs	r4, #0
   1b420:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    OS_EXIT_CRITICAL(sr);
   1b424:	f7f3 f896 	bl	e554 <os_arch_restore_sr>

    return 0;
}
   1b428:	4620      	mov	r0, r4
   1b42a:	bd10      	pop	{r4, pc}
   1b42c:	4000d000 	.word	0x4000d000
   1b430:	4000d004 	.word	0x4000d004

0001b434 <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
    g_nrf_num_irks = 0;
   1b434:	4b01      	ldr	r3, [pc, #4]	; (1b43c <ble_hw_resolv_list_clear+0x8>)
   1b436:	2200      	movs	r2, #0
   1b438:	701a      	strb	r2, [r3, #0]
}
   1b43a:	4770      	bx	lr
   1b43c:	20002758 	.word	0x20002758

0001b440 <ble_hw_resolv_list_add>:
ble_hw_resolv_list_add(uint8_t *irk)
{
    uint32_t *nrf_entry;

    /* Find first ununsed device address match element */
    if (g_nrf_num_irks == NRF_IRK_LIST_ENTRIES) {
   1b440:	4b0c      	ldr	r3, [pc, #48]	; (1b474 <ble_hw_resolv_list_add+0x34>)
   1b442:	781b      	ldrb	r3, [r3, #0]
   1b444:	2b04      	cmp	r3, #4
   1b446:	d012      	beq.n	1b46e <ble_hw_resolv_list_add+0x2e>
{
   1b448:	b4f0      	push	{r4, r5, r6, r7}
        return BLE_ERR_MEM_CAPACITY;
    }

    /* Copy into irk list */
    nrf_entry = &g_nrf_irk_list[4 * g_nrf_num_irks];
   1b44a:	490b      	ldr	r1, [pc, #44]	; (1b478 <ble_hw_resolv_list_add+0x38>)
   1b44c:	011e      	lsls	r6, r3, #4
   1b44e:	eb01 1203 	add.w	r2, r1, r3, lsl #4
    memcpy(nrf_entry, irk, 16);
   1b452:	6807      	ldr	r7, [r0, #0]
   1b454:	6845      	ldr	r5, [r0, #4]
   1b456:	6884      	ldr	r4, [r0, #8]
   1b458:	68c0      	ldr	r0, [r0, #12]
   1b45a:	518f      	str	r7, [r1, r6]
   1b45c:	6055      	str	r5, [r2, #4]
   1b45e:	6094      	str	r4, [r2, #8]
   1b460:	60d0      	str	r0, [r2, #12]

    /* Add to total */
    ++g_nrf_num_irks;
   1b462:	3301      	adds	r3, #1
   1b464:	4a03      	ldr	r2, [pc, #12]	; (1b474 <ble_hw_resolv_list_add+0x34>)
   1b466:	7013      	strb	r3, [r2, #0]
    return BLE_ERR_SUCCESS;
   1b468:	2000      	movs	r0, #0
}
   1b46a:	bcf0      	pop	{r4, r5, r6, r7}
   1b46c:	4770      	bx	lr
        return BLE_ERR_MEM_CAPACITY;
   1b46e:	2007      	movs	r0, #7
}
   1b470:	4770      	bx	lr
   1b472:	bf00      	nop
   1b474:	20002758 	.word	0x20002758
   1b478:	20002718 	.word	0x20002718

0001b47c <ble_hw_resolv_list_rmv>:
void
ble_hw_resolv_list_rmv(int index)
{
    uint32_t *irk_entry;

    if (index < g_nrf_num_irks) {
   1b47c:	4b0b      	ldr	r3, [pc, #44]	; (1b4ac <ble_hw_resolv_list_rmv+0x30>)
   1b47e:	781b      	ldrb	r3, [r3, #0]
   1b480:	4283      	cmp	r3, r0
   1b482:	dd12      	ble.n	1b4aa <ble_hw_resolv_list_rmv+0x2e>
{
   1b484:	b510      	push	{r4, lr}
        --g_nrf_num_irks;
   1b486:	3b01      	subs	r3, #1
   1b488:	b2db      	uxtb	r3, r3
   1b48a:	4a08      	ldr	r2, [pc, #32]	; (1b4ac <ble_hw_resolv_list_rmv+0x30>)
   1b48c:	7013      	strb	r3, [r2, #0]
        irk_entry = &g_nrf_irk_list[index];
   1b48e:	4c08      	ldr	r4, [pc, #32]	; (1b4b0 <ble_hw_resolv_list_rmv+0x34>)
   1b490:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        if (g_nrf_num_irks > index) {
   1b494:	4283      	cmp	r3, r0
   1b496:	dc00      	bgt.n	1b49a <ble_hw_resolv_list_rmv+0x1e>
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
        }
    }
}
   1b498:	bd10      	pop	{r4, pc}
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
   1b49a:	1a1b      	subs	r3, r3, r0
   1b49c:	011a      	lsls	r2, r3, #4
   1b49e:	f104 0110 	add.w	r1, r4, #16
   1b4a2:	4620      	mov	r0, r4
   1b4a4:	f7f3 fa95 	bl	e9d2 <memmove>
}
   1b4a8:	e7f6      	b.n	1b498 <ble_hw_resolv_list_rmv+0x1c>
   1b4aa:	4770      	bx	lr
   1b4ac:	20002758 	.word	0x20002758
   1b4b0:	20002718 	.word	0x20002718

0001b4b4 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return BLE_HW_RESOLV_LIST_SIZE;
}
   1b4b4:	2010      	movs	r0, #16
   1b4b6:	4770      	bx	lr

0001b4b8 <ble_hw_resolv_list_match>:
 *              indicate index in resolving list of resolved address.
 */
int
ble_hw_resolv_list_match(void)
{
    if (NRF_AAR->ENABLE && NRF_AAR->EVENTS_END && NRF_AAR->EVENTS_RESOLVED) {
   1b4b8:	4b0c      	ldr	r3, [pc, #48]	; (1b4ec <ble_hw_resolv_list_match+0x34>)
   1b4ba:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1b4be:	b15b      	cbz	r3, 1b4d8 <ble_hw_resolv_list_match+0x20>
   1b4c0:	4b0a      	ldr	r3, [pc, #40]	; (1b4ec <ble_hw_resolv_list_match+0x34>)
   1b4c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1b4c6:	b153      	cbz	r3, 1b4de <ble_hw_resolv_list_match+0x26>
   1b4c8:	4b08      	ldr	r3, [pc, #32]	; (1b4ec <ble_hw_resolv_list_match+0x34>)
   1b4ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1b4ce:	b14b      	cbz	r3, 1b4e4 <ble_hw_resolv_list_match+0x2c>
        return (int)NRF_AAR->STATUS;
   1b4d0:	4b06      	ldr	r3, [pc, #24]	; (1b4ec <ble_hw_resolv_list_match+0x34>)
   1b4d2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   1b4d6:	4770      	bx	lr
    }

    return -1;
   1b4d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b4dc:	4770      	bx	lr
   1b4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b4e2:	4770      	bx	lr
   1b4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b4e8:	4770      	bx	lr
   1b4ea:	bf00      	nop
   1b4ec:	4000f000 	.word	0x4000f000

0001b4f0 <ble_phy_apply_errata_102_106_107>:
{
    /* [102] RADIO: PAYLOAD/END events delayed or not triggered after ADDRESS
     * [106] RADIO: Higher CRC error rates for some access addresses
     * [107] RADIO: Immediate address match for access addresses containing MSBs 0x00
     */
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1b4f0:	4a04      	ldr	r2, [pc, #16]	; (1b504 <ble_phy_apply_errata_102_106_107+0x14>)
   1b4f2:	6813      	ldr	r3, [r2, #0]
                         0xfffffffe) | 0x01000000;
   1b4f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1b4f8:	f023 0301 	bic.w	r3, r3, #1
   1b4fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1b500:	6013      	str	r3, [r2, #0]
}
   1b502:	4770      	bx	lr
   1b504:	40001774 	.word	0x40001774

0001b508 <nrf_wait_disabled>:
static void
nrf_wait_disabled(void)
{
    uint32_t state;

    state = NRF_RADIO->STATE;
   1b508:	4b06      	ldr	r3, [pc, #24]	; (1b524 <nrf_wait_disabled+0x1c>)
   1b50a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Disabled) {
   1b50e:	b143      	cbz	r3, 1b522 <nrf_wait_disabled+0x1a>
        if ((state == RADIO_STATE_STATE_RxDisable) ||
   1b510:	2b04      	cmp	r3, #4
   1b512:	d001      	beq.n	1b518 <nrf_wait_disabled+0x10>
   1b514:	2b0c      	cmp	r3, #12
   1b516:	d104      	bne.n	1b522 <nrf_wait_disabled+0x1a>
            (state == RADIO_STATE_STATE_TxDisable)) {
            /* This will end within a short time (6 usecs). Just poll */
            while (NRF_RADIO->STATE == state) {
   1b518:	4a02      	ldr	r2, [pc, #8]	; (1b524 <nrf_wait_disabled+0x1c>)
   1b51a:	f8d2 2550 	ldr.w	r2, [r2, #1360]	; 0x550
   1b51e:	429a      	cmp	r2, r3
   1b520:	d0fa      	beq.n	1b518 <nrf_wait_disabled+0x10>
                tm_tick();
#endif
            }
        }
    }
}
   1b522:	4770      	bx	lr
   1b524:	40001000 	.word	0x40001000

0001b528 <ble_phy_set_start_time>:
 *
 *
 */
static int
ble_phy_set_start_time(uint32_t cputime, uint8_t rem_usecs, bool tx)
{
   1b528:	b430      	push	{r4, r5}
     * Radio ramp-up time is 40 usecs and TX delay is 3 or 5 usecs depending on
     * phy, thus we'll offset RTC by 2 full ticks (61 usecs) and then compensate
     * using TIMER0 with 1 usec precision.
     */

    cputime -= 2;
   1b52a:	1e84      	subs	r4, r0, #2
    rem_usecs += 61;
    if (tx) {
   1b52c:	2a00      	cmp	r2, #0
   1b52e:	d03e      	beq.n	1b5ae <ble_phy_set_start_time+0x86>
        rem_usecs -= BLE_PHY_T_TXENFAST;
   1b530:	3115      	adds	r1, #21
   1b532:	b2c9      	uxtb	r1, r1
        rem_usecs -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   1b534:	4b24      	ldr	r3, [pc, #144]	; (1b5c8 <ble_phy_set_start_time+0xa0>)
   1b536:	7a9b      	ldrb	r3, [r3, #10]
   1b538:	4a24      	ldr	r2, [pc, #144]	; (1b5cc <ble_phy_set_start_time+0xa4>)
   1b53a:	5cd3      	ldrb	r3, [r2, r3]
   1b53c:	1ac9      	subs	r1, r1, r3
   1b53e:	b2c9      	uxtb	r1, r1
     * tick then we should better count one more low-power tick rather than
     * 30 high-power usecs. Also make sure we don't set TIMER0 CC to 0 as the
     * compare won't occur.
     */

    if (rem_usecs > 30) {
   1b540:	291e      	cmp	r1, #30
   1b542:	d902      	bls.n	1b54a <ble_phy_set_start_time+0x22>
        cputime++;
   1b544:	1e44      	subs	r4, r0, #1
        rem_usecs -= 30;
   1b546:	391e      	subs	r1, #30
   1b548:	b2c9      	uxtb	r1, r1
     *      counter.
     *
     * NOTE: since the counter can tick 1 while we do these calculations we
     * need to account for it.
     */
    next_cc = cputime & 0xffffff;
   1b54a:	f024 457f 	bic.w	r5, r4, #4278190080	; 0xff000000
    cur_cc = NRF_RTC0->CC[0];
   1b54e:	4a20      	ldr	r2, [pc, #128]	; (1b5d0 <ble_phy_set_start_time+0xa8>)
   1b550:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    cntr = NRF_RTC0->COUNTER;
   1b554:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504

    delta = (cur_cc - cntr) & 0xffffff;
   1b558:	1a9b      	subs	r3, r3, r2
   1b55a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((delta <= 3) && (delta != 0)) {
   1b55e:	3b01      	subs	r3, #1
   1b560:	2b02      	cmp	r3, #2
   1b562:	d927      	bls.n	1b5b4 <ble_phy_set_start_time+0x8c>
        return -1;
    }
    delta = (next_cc - cntr) & 0xffffff;
   1b564:	1aaa      	subs	r2, r5, r2
   1b566:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    if ((delta & 0x800000) || (delta < 3)) {
   1b56a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1b56e:	d124      	bne.n	1b5ba <ble_phy_set_start_time+0x92>
   1b570:	2b02      	cmp	r3, #2
   1b572:	d925      	bls.n	1b5c0 <ble_phy_set_start_time+0x98>
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b574:	4b17      	ldr	r3, [pc, #92]	; (1b5d4 <ble_phy_set_start_time+0xac>)
   1b576:	2201      	movs	r2, #1
   1b578:	601a      	str	r2, [r3, #0]

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1b57a:	3b0c      	subs	r3, #12
   1b57c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    }

    /* Clear and set TIMER0 to fire off at proper time */
    nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_CLEAR);
    nrf_timer_cc_set(NRF_TIMER0, 0, rem_usecs);
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1b580:	2000      	movs	r0, #0
   1b582:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

    /* Set RTC compare to start TIMER0 */
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1b586:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   1b58a:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1b58e:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1b592:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b596:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
}

NRF_STATIC_INLINE void nrf_ppi_channels_enable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1b59a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1b59e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b5a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    /* Enable PPI */
    nrf_ppi_channels_enable(NRF_PPI, PPI_CHEN_CH31_Msk);

    /* Store the cputime at which we set the RTC */
    g_ble_phy_data.phy_start_cputime = cputime;
   1b5a6:	4b08      	ldr	r3, [pc, #32]	; (1b5c8 <ble_phy_set_start_time+0xa0>)
   1b5a8:	631c      	str	r4, [r3, #48]	; 0x30

    return 0;
}
   1b5aa:	bc30      	pop	{r4, r5}
   1b5ac:	4770      	bx	lr
        rem_usecs -= BLE_PHY_T_RXENFAST;
   1b5ae:	3115      	adds	r1, #21
   1b5b0:	b2c9      	uxtb	r1, r1
   1b5b2:	e7c5      	b.n	1b540 <ble_phy_set_start_time+0x18>
        return -1;
   1b5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5b8:	e7f7      	b.n	1b5aa <ble_phy_set_start_time+0x82>
        return -1;
   1b5ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5be:	e7f4      	b.n	1b5aa <ble_phy_set_start_time+0x82>
   1b5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5c4:	e7f1      	b.n	1b5aa <ble_phy_set_start_time+0x82>
   1b5c6:	bf00      	nop
   1b5c8:	2000279c 	.word	0x2000279c
   1b5cc:	0002ddc0 	.word	0x0002ddc0
   1b5d0:	4000b000 	.word	0x4000b000
   1b5d4:	4000800c 	.word	0x4000800c

0001b5d8 <ble_phy_get_ccm_datarate>:
    assert(0);
    return 0;
#else
    return CCM_MODE_DATARATE_1Mbit << CCM_MODE_DATARATE_Pos;
#endif
}
   1b5d8:	2000      	movs	r0, #0
   1b5da:	4770      	bx	lr

0001b5dc <ble_phy_rx_xcvr_setup>:
/**
 * Setup transceiver for receive.
 */
static void
ble_phy_rx_xcvr_setup(void)
{
   1b5dc:	b510      	push	{r4, lr}

    dptr = (uint8_t *)&g_ble_phy_rx_buf[0];
    dptr += 3;

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (g_ble_phy_data.phy_encrypted) {
   1b5de:	4b36      	ldr	r3, [pc, #216]	; (1b6b8 <ble_phy_rx_xcvr_setup+0xdc>)
   1b5e0:	79db      	ldrb	r3, [r3, #7]
   1b5e2:	2b00      	cmp	r3, #0
   1b5e4:	d05a      	beq.n	1b69c <ble_phy_rx_xcvr_setup+0xc0>
        NRF_RADIO->PACKETPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   1b5e6:	4b35      	ldr	r3, [pc, #212]	; (1b6bc <ble_phy_rx_xcvr_setup+0xe0>)
   1b5e8:	4a35      	ldr	r2, [pc, #212]	; (1b6c0 <ble_phy_rx_xcvr_setup+0xe4>)
   1b5ea:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
        NRF_CCM->INPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   1b5ee:	4c35      	ldr	r4, [pc, #212]	; (1b6c4 <ble_phy_rx_xcvr_setup+0xe8>)
   1b5f0:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)dptr;
   1b5f4:	4b34      	ldr	r3, [pc, #208]	; (1b6c8 <ble_phy_rx_xcvr_setup+0xec>)
   1b5f6:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   1b5fa:	4b34      	ldr	r3, [pc, #208]	; (1b6cc <ble_phy_rx_xcvr_setup+0xf0>)
   1b5fc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
                                                    ble_phy_get_ccm_datarate();
   1b600:	f7ff ffea 	bl	1b5d8 <ble_phy_get_ccm_datarate>
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
   1b604:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1b608:	f040 0001 	orr.w	r0, r0, #1
   1b60c:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   1b610:	4b2f      	ldr	r3, [pc, #188]	; (1b6d0 <ble_phy_rx_xcvr_setup+0xf4>)
   1b612:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        NRF_CCM->SHORTS = 0;
   1b616:	2300      	movs	r3, #0
   1b618:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        NRF_CCM->EVENTS_ERROR = 0;
   1b61c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        NRF_CCM->EVENTS_ENDCRYPT = 0;
   1b620:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b624:	2301      	movs	r3, #1
   1b626:	6023      	str	r3, [r4, #0]
   1b628:	4b2a      	ldr	r3, [pc, #168]	; (1b6d4 <ble_phy_rx_xcvr_setup+0xf8>)
   1b62a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1b62e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#else
    NRF_RADIO->PACKETPTR = (uint32_t)dptr;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (g_ble_phy_data.phy_privacy) {
   1b632:	4b21      	ldr	r3, [pc, #132]	; (1b6b8 <ble_phy_rx_xcvr_setup+0xdc>)
   1b634:	7a1b      	ldrb	r3, [r3, #8]
   1b636:	b3b3      	cbz	r3, 1b6a6 <ble_phy_rx_xcvr_setup+0xca>
        NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Enabled;
   1b638:	4b22      	ldr	r3, [pc, #136]	; (1b6c4 <ble_phy_rx_xcvr_setup+0xe8>)
   1b63a:	2203      	movs	r2, #3
   1b63c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1b640:	4a25      	ldr	r2, [pc, #148]	; (1b6d8 <ble_phy_rx_xcvr_setup+0xfc>)
   1b642:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
   1b646:	4a25      	ldr	r2, [pc, #148]	; (1b6dc <ble_phy_rx_xcvr_setup+0x100>)
   1b648:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        NRF_AAR->EVENTS_END = 0;
   1b64c:	2200      	movs	r2, #0
   1b64e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        NRF_AAR->EVENTS_RESOLVED = 0;
   1b652:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1b656:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1b65a:	4b1e      	ldr	r3, [pc, #120]	; (1b6d4 <ble_phy_rx_xcvr_setup+0xf8>)
   1b65c:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   1b660:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Turn off trigger TXEN on output compare match and AAR on bcmatch */
    nrf_ppi_channels_disable(NRF_PPI, PPI_CHEN_CH20_Msk | PPI_CHEN_CH23_Msk);

    /* Reset the rx started flag. Used for the wait for response */
    g_ble_phy_data.phy_rx_started = 0;
   1b664:	4b14      	ldr	r3, [pc, #80]	; (1b6b8 <ble_phy_rx_xcvr_setup+0xdc>)
   1b666:	2200      	movs	r2, #0
   1b668:	719a      	strb	r2, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_RX;
   1b66a:	2101      	movs	r1, #1
   1b66c:	70d9      	strb	r1, [r3, #3]
        g_ble_phy_data.phy_bcc_offset = 5;
    } else {
        g_ble_phy_data.phy_bcc_offset = 0;
    }
#else
    g_ble_phy_data.phy_bcc_offset = 0;
   1b66e:	735a      	strb	r2, [r3, #13]
    return (uint8_t)(p_reg->DATAWHITEIV & RADIO_DATAWHITEIV_DATAWHITEIV_Msk);
}

NRF_STATIC_INLINE void nrf_radio_bcc_set(NRF_RADIO_Type * p_reg, uint32_t radio_bcc)
{
    p_reg->BCC = radio_bcc;
   1b670:	4b13      	ldr	r3, [pc, #76]	; (1b6c0 <ble_phy_rx_xcvr_setup+0xe4>)
   1b672:	2108      	movs	r1, #8
   1b674:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
#endif

    /* I want to know when 1st byte received (after address) */
    nrf_radio_bcc_set(NRF_RADIO, 8 + g_ble_phy_data.phy_bcc_offset); /* in bits */
    NRF_RADIO->EVENTS_ADDRESS = 0;
   1b678:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_RADIO->EVENTS_DEVMATCH = 0;
   1b67c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    NRF_RADIO->EVENTS_BCMATCH = 0;
   1b680:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    NRF_RADIO->EVENTS_RSSIEND = 0;
   1b684:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NRF_RADIO->EVENTS_CRCOK = 0;
   1b688:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk |
   1b68c:	f240 1253 	movw	r2, #339	; 0x153
   1b690:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->INTENSET = mask;
   1b694:	2212      	movs	r2, #18
   1b696:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
                        RADIO_SHORTS_DISABLED_RSSISTOP_Msk;

    nrf_radio_int_enable(NRF_RADIO, RADIO_INTENSET_ADDRESS_Msk |
                         RADIO_INTENSET_DISABLED_Msk);
}
   1b69a:	bd10      	pop	{r4, pc}
        NRF_RADIO->PACKETPTR = (uint32_t)dptr;
   1b69c:	4a0a      	ldr	r2, [pc, #40]	; (1b6c8 <ble_phy_rx_xcvr_setup+0xec>)
   1b69e:	4b08      	ldr	r3, [pc, #32]	; (1b6c0 <ble_phy_rx_xcvr_setup+0xe4>)
   1b6a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1b6a4:	e7c5      	b.n	1b632 <ble_phy_rx_xcvr_setup+0x56>
        if (g_ble_phy_data.phy_encrypted == 0) {
   1b6a6:	4b04      	ldr	r3, [pc, #16]	; (1b6b8 <ble_phy_rx_xcvr_setup+0xdc>)
   1b6a8:	79db      	ldrb	r3, [r3, #7]
   1b6aa:	2b00      	cmp	r3, #0
   1b6ac:	d1d5      	bne.n	1b65a <ble_phy_rx_xcvr_setup+0x7e>
            NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   1b6ae:	4b05      	ldr	r3, [pc, #20]	; (1b6c4 <ble_phy_rx_xcvr_setup+0xe8>)
   1b6b0:	2200      	movs	r2, #0
   1b6b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1b6b6:	e7d0      	b.n	1b65a <ble_phy_rx_xcvr_setup+0x7e>
   1b6b8:	2000279c 	.word	0x2000279c
   1b6bc:	200027d0 	.word	0x200027d0
   1b6c0:	40001000 	.word	0x40001000
   1b6c4:	4000f000 	.word	0x4000f000
   1b6c8:	200028d7 	.word	0x200028d7
   1b6cc:	20002b00 	.word	0x20002b00
   1b6d0:	20002adc 	.word	0x20002adc
   1b6d4:	4001f000 	.word	0x4001f000
   1b6d8:	20002718 	.word	0x20002718
   1b6dc:	200027ac 	.word	0x200027ac

0001b6e0 <ble_phy_set_access_addr>:
 *
 * @return int 0: success; PHY error code otherwise
 */
static int
ble_phy_set_access_addr(uint32_t access_addr)
{
   1b6e0:	b508      	push	{r3, lr}
    NRF_RADIO->BASE0 = (access_addr << 8);
   1b6e2:	0203      	lsls	r3, r0, #8
   1b6e4:	4a08      	ldr	r2, [pc, #32]	; (1b708 <ble_phy_set_access_addr+0x28>)
   1b6e6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    NRF_RADIO->PREFIX0 = (NRF_RADIO->PREFIX0 & 0xFFFFFF00) | (access_addr >> 24);
   1b6ea:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   1b6ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1b6f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   1b6f6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524

    g_ble_phy_data.phy_access_address = access_addr;
   1b6fa:	4b04      	ldr	r3, [pc, #16]	; (1b70c <ble_phy_set_access_addr+0x2c>)
   1b6fc:	6158      	str	r0, [r3, #20]

#ifndef BABBLESIM
    ble_phy_apply_errata_102_106_107();
   1b6fe:	f7ff fef7 	bl	1b4f0 <ble_phy_apply_errata_102_106_107>
#endif
    return 0;
}
   1b702:	2000      	movs	r0, #0
   1b704:	bd08      	pop	{r3, pc}
   1b706:	bf00      	nop
   1b708:	40001000 	.word	0x40001000
   1b70c:	2000279c 	.word	0x2000279c

0001b710 <ble_phy_stop_usec_timer>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b710:	2301      	movs	r3, #1
   1b712:	4a05      	ldr	r2, [pc, #20]	; (1b728 <ble_phy_stop_usec_timer+0x18>)
   1b714:	6013      	str	r3, [r2, #0]
 */
static void
ble_phy_stop_usec_timer(void)
{
    nrf_timer_task_trigger(NRF_TIMER0, NRF_TIMER_TASK_STOP);
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1b716:	3a04      	subs	r2, #4
   1b718:	6113      	str	r3, [r2, #16]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1b71a:	4b04      	ldr	r3, [pc, #16]	; (1b72c <ble_phy_stop_usec_timer+0x1c>)
   1b71c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b720:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    nrf_rtc_event_disable(NRF_RTC0, RTC_EVTENSET_COMPARE0_Msk);
}
   1b724:	4770      	bx	lr
   1b726:	bf00      	nop
   1b728:	40008004 	.word	0x40008004
   1b72c:	4000b000 	.word	0x4000b000

0001b730 <ble_phy_disable_irq_and_ppi>:
    p_reg->INTENCLR = mask;
   1b730:	4a0c      	ldr	r2, [pc, #48]	; (1b764 <ble_phy_disable_irq_and_ppi+0x34>)
   1b732:	f243 43ff 	movw	r3, #13567	; 0x34ff
   1b736:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 */
static void
ble_phy_disable_irq_and_ppi(void)
{
    nrf_radio_int_disable(NRF_RADIO, NRF_RADIO_IRQ_MASK_ALL);
    NRF_RADIO->SHORTS = 0;
   1b73a:	2300      	movs	r3, #0
   1b73c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b740:	3210      	adds	r2, #16
   1b742:	2101      	movs	r1, #1
   1b744:	6011      	str	r1, [r2, #0]
   1b746:	4a08      	ldr	r2, [pc, #32]	; (1b768 <ble_phy_disable_irq_and_ppi+0x38>)
   1b748:	4908      	ldr	r1, [pc, #32]	; (1b76c <ble_phy_disable_irq_and_ppi+0x3c>)
   1b74a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1b74e:	21c0      	movs	r1, #192	; 0xc0
   1b750:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b754:	4a06      	ldr	r2, [pc, #24]	; (1b770 <ble_phy_disable_irq_and_ppi+0x40>)
   1b756:	2102      	movs	r1, #2
   1b758:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    nrf_ppi_channels_disable(NRF_PPI, PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
        PPI_CHEN_CH20_Msk | PPI_CHEN_CH21_Msk | PPI_CHEN_CH23_Msk |
        PPI_CHEN_CH25_Msk | PPI_CHEN_CH31_Msk);
    nrf_ppi_channels_disable(NRF_PPI, PPI_CHEN_CH6_Msk | PPI_CHEN_CH7_Msk);
    NVIC_ClearPendingIRQ(RADIO_IRQn);
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   1b75c:	4a05      	ldr	r2, [pc, #20]	; (1b774 <ble_phy_disable_irq_and_ppi+0x44>)
   1b75e:	70d3      	strb	r3, [r2, #3]
}
   1b760:	4770      	bx	lr
   1b762:	bf00      	nop
   1b764:	40001000 	.word	0x40001000
   1b768:	4001f000 	.word	0x4001f000
   1b76c:	82b00030 	.word	0x82b00030
   1b770:	e000e100 	.word	0xe000e100
   1b774:	2000279c 	.word	0x2000279c

0001b778 <ble_phy_set_start_now>:
{
   1b778:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   1b77a:	f7f2 fee5 	bl	e548 <os_arch_save_sr>
   1b77e:	4605      	mov	r5, r0
   1b780:	2201      	movs	r2, #1
   1b782:	4b10      	ldr	r3, [pc, #64]	; (1b7c4 <ble_phy_set_start_now+0x4c>)
   1b784:	601a      	str	r2, [r3, #0]
    p_reg->CC[cc_channel] = cc_value;
   1b786:	3b0c      	subs	r3, #12
   1b788:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1b78c:	2400      	movs	r4, #0
   1b78e:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    now = os_cputime_get32();
   1b792:	f00f fa94 	bl	2acbe <os_cputime_get32>
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1b796:	4a0c      	ldr	r2, [pc, #48]	; (1b7c8 <ble_phy_set_start_now+0x50>)
   1b798:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    nrf_rtc_cc_set(NRF_RTC0, 0, now + 3);
   1b79c:	3003      	adds	r0, #3
    p_reg->CC[ch] = cc_val;
   1b79e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1b7a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1b7a6:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CHENSET = mask;
   1b7aa:	f502 32a0 	add.w	r2, r2, #81920	; 0x14000
   1b7ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1b7b2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    g_ble_phy_data.phy_start_cputime = now + 3;
   1b7b6:	4a05      	ldr	r2, [pc, #20]	; (1b7cc <ble_phy_set_start_now+0x54>)
   1b7b8:	6310      	str	r0, [r2, #48]	; 0x30
    OS_EXIT_CRITICAL(sr);
   1b7ba:	4628      	mov	r0, r5
   1b7bc:	f7f2 feca 	bl	e554 <os_arch_restore_sr>
}
   1b7c0:	4620      	mov	r0, r4
   1b7c2:	bd38      	pop	{r3, r4, r5, pc}
   1b7c4:	4000800c 	.word	0x4000800c
   1b7c8:	4000b000 	.word	0x4000b000
   1b7cc:	2000279c 	.word	0x2000279c

0001b7d0 <ble_phy_get_cur_phy>:
}
   1b7d0:	2001      	movs	r0, #1
   1b7d2:	4770      	bx	lr

0001b7d4 <ble_phy_rxpdu_copy>:
{
   1b7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(((uint32_t)dptr & 3) == 0);
   1b7d6:	f010 0f03 	tst.w	r0, #3
   1b7da:	d109      	bne.n	1b7f0 <ble_phy_rxpdu_copy+0x1c>
   1b7dc:	460f      	mov	r7, r1
    block_len = rxpdu->om_omp->omp_databuf_len;
   1b7de:	688b      	ldr	r3, [r1, #8]
   1b7e0:	f8b3 c000 	ldrh.w	ip, [r3]
    rem_len = OS_MBUF_PKTHDR(rxpdu)->omp_len;
   1b7e4:	8a0e      	ldrh	r6, [r1, #16]
    copy_len = block_len - rxpdu->om_pkthdr_len - 4;
   1b7e6:	794b      	ldrb	r3, [r1, #5]
   1b7e8:	ebac 0303 	sub.w	r3, ip, r3
   1b7ec:	3b04      	subs	r3, #4
    dst = om->om_data;
   1b7ee:	e00b      	b.n	1b808 <ble_phy_rxpdu_copy+0x34>
    assert(((uint32_t)dptr & 3) == 0);
   1b7f0:	f7f0 fcd4 	bl	c19c <hal_debugger_connected>
   1b7f4:	b100      	cbz	r0, 1b7f8 <ble_phy_rxpdu_copy+0x24>
   1b7f6:	be01      	bkpt	0x0001
   1b7f8:	2300      	movs	r3, #0
   1b7fa:	461a      	mov	r2, r3
   1b7fc:	4619      	mov	r1, r3
   1b7fe:	4618      	mov	r0, r3
   1b800:	f7f1 f9d0 	bl	cba4 <__assert_func>
        om = SLIST_NEXT(om, om_next);
   1b804:	68c9      	ldr	r1, [r1, #12]
        copy_len = block_len;
   1b806:	4663      	mov	r3, ip
        copy_len = min(copy_len, rem_len);
   1b808:	4632      	mov	r2, r6
   1b80a:	429e      	cmp	r6, r3
   1b80c:	bf28      	it	cs
   1b80e:	461a      	movcs	r2, r3
        copy_len &= ~3;
   1b810:	f022 0203 	bic.w	r2, r2, #3
        dst = om->om_data;
   1b814:	680d      	ldr	r5, [r1, #0]
        om->om_len = copy_len;
   1b816:	80ca      	strh	r2, [r1, #6]
        rem_len -= copy_len;
   1b818:	1ab6      	subs	r6, r6, r2
        block_rem_len -= copy_len;
   1b81a:	eba3 0e02 	sub.w	lr, r3, r2
        __asm__ volatile (".syntax unified              \n"
   1b81e:	4614      	mov	r4, r2
   1b820:	e001      	b.n	1b826 <ble_phy_rxpdu_copy+0x52>
   1b822:	5883      	ldr	r3, [r0, r2]
   1b824:	50ab      	str	r3, [r5, r2]
   1b826:	3a04      	subs	r2, #4
   1b828:	d5fb      	bpl.n	1b822 <ble_phy_rxpdu_copy+0x4e>
   1b82a:	1900      	adds	r0, r0, r4
   1b82c:	192d      	adds	r5, r5, r4
        if ((rem_len < 4) && (block_rem_len >= rem_len)) {
   1b82e:	2e03      	cmp	r6, #3
   1b830:	d8e8      	bhi.n	1b804 <ble_phy_rxpdu_copy+0x30>
   1b832:	4576      	cmp	r6, lr
   1b834:	d8e6      	bhi.n	1b804 <ble_phy_rxpdu_copy+0x30>
    om->om_len += rem_len;
   1b836:	88cb      	ldrh	r3, [r1, #6]
   1b838:	4433      	add	r3, r6
   1b83a:	80cb      	strh	r3, [r1, #6]
    __asm__ volatile (".syntax unified              \n"
   1b83c:	e001      	b.n	1b842 <ble_phy_rxpdu_copy+0x6e>
   1b83e:	5d83      	ldrb	r3, [r0, r6]
   1b840:	55ab      	strb	r3, [r5, r6]
   1b842:	3e01      	subs	r6, #1
   1b844:	d5fb      	bpl.n	1b83e <ble_phy_rxpdu_copy+0x6a>
    memcpy(BLE_MBUF_HDR_PTR(rxpdu), &g_ble_phy_data.rxhdr,
   1b846:	4c03      	ldr	r4, [pc, #12]	; (1b854 <ble_phy_rxpdu_copy+0x80>)
   1b848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b84a:	61b8      	str	r0, [r7, #24]
   1b84c:	61f9      	str	r1, [r7, #28]
   1b84e:	623a      	str	r2, [r7, #32]
   1b850:	627b      	str	r3, [r7, #36]	; 0x24
}
   1b852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b854:	200027b4 	.word	0x200027b4

0001b858 <ble_phy_wfr_enable>:
{
   1b858:	b410      	push	{r4}
    phy = g_ble_phy_data.phy_cur_phy_mode;
   1b85a:	4b1c      	ldr	r3, [pc, #112]	; (1b8cc <ble_phy_wfr_enable+0x74>)
   1b85c:	7a9c      	ldrb	r4, [r3, #10]
    if (txrx == BLE_PHY_WFR_ENABLE_TXRX) {
   1b85e:	2801      	cmp	r0, #1
   1b860:	d02a      	beq.n	1b8b8 <ble_phy_wfr_enable+0x60>
        end_time = NRF_TIMER0->CC[0] + BLE_PHY_T_RXENFAST + wfr_usecs;
   1b862:	4b1b      	ldr	r3, [pc, #108]	; (1b8d0 <ble_phy_wfr_enable+0x78>)
   1b864:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   1b868:	4413      	add	r3, r2
   1b86a:	3328      	adds	r3, #40	; 0x28
    end_time += ble_phy_mode_pdu_start_off(phy);
   1b86c:	3328      	adds	r3, #40	; 0x28
    end_time += g_ble_phy_t_rxaddrdelay[phy];
   1b86e:	4a19      	ldr	r2, [pc, #100]	; (1b8d4 <ble_phy_wfr_enable+0x7c>)
   1b870:	5d12      	ldrb	r2, [r2, r4]
   1b872:	4413      	add	r3, r2
   1b874:	4a16      	ldr	r2, [pc, #88]	; (1b8d0 <ble_phy_wfr_enable+0x78>)
   1b876:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    NRF_TIMER0->EVENTS_COMPARE[3] = 0;
   1b87a:	2300      	movs	r3, #0
   1b87c:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
   1b880:	4b15      	ldr	r3, [pc, #84]	; (1b8d8 <ble_phy_wfr_enable+0x80>)
   1b882:	2130      	movs	r1, #48	; 0x30
   1b884:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b888:	f5a3 33b7 	sub.w	r3, r3, #93696	; 0x16e00
   1b88c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
   1b890:	2101      	movs	r1, #1
   1b892:	6019      	str	r1, [r3, #0]
    if (NRF_TIMER0->CC[1] > NRF_TIMER0->CC[3]) {
   1b894:	f8d2 1544 	ldr.w	r1, [r2, #1348]	; 0x544
   1b898:	f8d2 354c 	ldr.w	r3, [r2, #1356]	; 0x54c
   1b89c:	4299      	cmp	r1, r3
   1b89e:	d909      	bls.n	1b8b4 <ble_phy_wfr_enable+0x5c>
    p_reg->CHENCLR = mask;
   1b8a0:	4b0d      	ldr	r3, [pc, #52]	; (1b8d8 <ble_phy_wfr_enable+0x80>)
   1b8a2:	2230      	movs	r2, #48	; 0x30
   1b8a4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1b8a8:	f5a3 33ef 	sub.w	r3, r3, #122368	; 0x1de00
   1b8ac:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
   1b8b0:	2201      	movs	r2, #1
   1b8b2:	601a      	str	r2, [r3, #0]
}
   1b8b4:	bc10      	pop	{r4}
   1b8b6:	4770      	bx	lr
        end_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   1b8b8:	4b05      	ldr	r3, [pc, #20]	; (1b8d0 <ble_phy_wfr_enable+0x78>)
   1b8ba:	f8d3 2548 	ldr.w	r2, [r3, #1352]	; 0x548
   1b8be:	3296      	adds	r2, #150	; 0x96
        end_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   1b8c0:	4b06      	ldr	r3, [pc, #24]	; (1b8dc <ble_phy_wfr_enable+0x84>)
   1b8c2:	5c5b      	ldrb	r3, [r3, r1]
   1b8c4:	4413      	add	r3, r2
        end_time += 1;
   1b8c6:	3303      	adds	r3, #3
   1b8c8:	e7d0      	b.n	1b86c <ble_phy_wfr_enable+0x14>
   1b8ca:	bf00      	nop
   1b8cc:	2000279c 	.word	0x2000279c
   1b8d0:	40008000 	.word	0x40008000
   1b8d4:	0002ddb8 	.word	0x0002ddb8
   1b8d8:	4001f000 	.word	0x4001f000
   1b8dc:	0002ddc4 	.word	0x0002ddc4

0001b8e0 <ble_phy_tx_end_isr>:
{
   1b8e0:	b510      	push	{r4, lr}
    tx_phy_mode = g_ble_phy_data.phy_cur_phy_mode;
   1b8e2:	4b2b      	ldr	r3, [pc, #172]	; (1b990 <ble_phy_tx_end_isr+0xb0>)
   1b8e4:	7a9c      	ldrb	r4, [r3, #10]
    was_encrypted = g_ble_phy_data.phy_encrypted;
   1b8e6:	79da      	ldrb	r2, [r3, #7]
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   1b8e8:	78db      	ldrb	r3, [r3, #3]
   1b8ea:	2b02      	cmp	r3, #2
   1b8ec:	d121      	bne.n	1b932 <ble_phy_tx_end_isr+0x52>
    if (was_encrypted) {
   1b8ee:	b15a      	cbz	r2, 1b908 <ble_phy_tx_end_isr+0x28>
        if (NRF_CCM->EVENTS_ERROR) {
   1b8f0:	4b28      	ldr	r3, [pc, #160]	; (1b994 <ble_phy_tx_end_isr+0xb4>)
   1b8f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   1b8f6:	b13b      	cbz	r3, 1b908 <ble_phy_tx_end_isr+0x28>
            STATS_INC(ble_phy_stats, tx_hw_err);
   1b8f8:	4a27      	ldr	r2, [pc, #156]	; (1b998 <ble_phy_tx_end_isr+0xb8>)
   1b8fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1b8fc:	3301      	adds	r3, #1
   1b8fe:	63d3      	str	r3, [r2, #60]	; 0x3c
            NRF_CCM->EVENTS_ERROR = 0;
   1b900:	4b24      	ldr	r3, [pc, #144]	; (1b994 <ble_phy_tx_end_isr+0xb4>)
   1b902:	2200      	movs	r2, #0
   1b904:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    if (g_ble_phy_data.txend_cb) {
   1b908:	4b21      	ldr	r3, [pc, #132]	; (1b990 <ble_phy_tx_end_isr+0xb0>)
   1b90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b90c:	b113      	cbz	r3, 1b914 <ble_phy_tx_end_isr+0x34>
        g_ble_phy_data.txend_cb(g_ble_phy_data.txend_arg);
   1b90e:	4a20      	ldr	r2, [pc, #128]	; (1b990 <ble_phy_tx_end_isr+0xb0>)
   1b910:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1b912:	4798      	blx	r3
    transition = g_ble_phy_data.phy_transition;
   1b914:	4b1e      	ldr	r3, [pc, #120]	; (1b990 <ble_phy_tx_end_isr+0xb0>)
   1b916:	791b      	ldrb	r3, [r3, #4]
    if (transition == BLE_PHY_TRANSITION_TX_RX) {
   1b918:	2b02      	cmp	r3, #2
   1b91a:	d014      	beq.n	1b946 <ble_phy_tx_end_isr+0x66>
   1b91c:	2201      	movs	r2, #1
   1b91e:	491f      	ldr	r1, [pc, #124]	; (1b99c <ble_phy_tx_end_isr+0xbc>)
   1b920:	600a      	str	r2, [r1, #0]
        NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1b922:	3904      	subs	r1, #4
   1b924:	610a      	str	r2, [r1, #16]
   1b926:	4a1e      	ldr	r2, [pc, #120]	; (1b9a0 <ble_phy_tx_end_isr+0xc0>)
   1b928:	491e      	ldr	r1, [pc, #120]	; (1b9a4 <ble_phy_tx_end_isr+0xc4>)
   1b92a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
        assert(transition == BLE_PHY_TRANSITION_NONE);
   1b92e:	bb23      	cbnz	r3, 1b97a <ble_phy_tx_end_isr+0x9a>
}
   1b930:	bd10      	pop	{r4, pc}
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   1b932:	f7f0 fc33 	bl	c19c <hal_debugger_connected>
   1b936:	b100      	cbz	r0, 1b93a <ble_phy_tx_end_isr+0x5a>
   1b938:	be01      	bkpt	0x0001
   1b93a:	2300      	movs	r3, #0
   1b93c:	461a      	mov	r2, r3
   1b93e:	4619      	mov	r1, r3
   1b940:	4618      	mov	r0, r3
   1b942:	f7f1 f92f 	bl	cba4 <__assert_func>
        ble_phy_rx_xcvr_setup();
   1b946:	f7ff fe49 	bl	1b5dc <ble_phy_rx_xcvr_setup>
        ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_TXRX, tx_phy_mode, 0);
   1b94a:	2200      	movs	r2, #0
   1b94c:	4621      	mov	r1, r4
   1b94e:	2001      	movs	r0, #1
   1b950:	f7ff ff82 	bl	1b858 <ble_phy_wfr_enable>
        rx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   1b954:	4a14      	ldr	r2, [pc, #80]	; (1b9a8 <ble_phy_tx_end_isr+0xc8>)
   1b956:	f8d2 1548 	ldr.w	r1, [r2, #1352]	; 0x548
   1b95a:	3196      	adds	r1, #150	; 0x96
        rx_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   1b95c:	4b13      	ldr	r3, [pc, #76]	; (1b9ac <ble_phy_tx_end_isr+0xcc>)
   1b95e:	5d1b      	ldrb	r3, [r3, r4]
   1b960:	440b      	add	r3, r1
        rx_time -= 2;
   1b962:	3b2a      	subs	r3, #42	; 0x2a
    p_reg->CC[cc_channel] = cc_value;
   1b964:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1b968:	2300      	movs	r3, #0
   1b96a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    p_reg->CHENSET = mask;
   1b96e:	4b0c      	ldr	r3, [pc, #48]	; (1b9a0 <ble_phy_tx_end_isr+0xc0>)
   1b970:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b974:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        ble_phy_plna_enable_lna();
   1b978:	e7da      	b.n	1b930 <ble_phy_tx_end_isr+0x50>
        assert(transition == BLE_PHY_TRANSITION_NONE);
   1b97a:	f7f0 fc0f 	bl	c19c <hal_debugger_connected>
   1b97e:	b100      	cbz	r0, 1b982 <ble_phy_tx_end_isr+0xa2>
   1b980:	be01      	bkpt	0x0001
   1b982:	2300      	movs	r3, #0
   1b984:	461a      	mov	r2, r3
   1b986:	4619      	mov	r1, r3
   1b988:	4618      	mov	r0, r3
   1b98a:	f7f1 f90b 	bl	cba4 <__assert_func>
   1b98e:	bf00      	nop
   1b990:	2000279c 	.word	0x2000279c
   1b994:	4000f000 	.word	0x4000f000
   1b998:	2000275c 	.word	0x2000275c
   1b99c:	40008004 	.word	0x40008004
   1b9a0:	4001f000 	.word	0x4001f000
   1b9a4:	80100030 	.word	0x80100030
   1b9a8:	40008000 	.word	0x40008000
   1b9ac:	0002ddc4 	.word	0x0002ddc4

0001b9b0 <ble_phy_init>:
{
   1b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9b4:	b082      	sub	sp, #8
    g_ble_phy_data.phy_cur_phy_mode = BLE_PHY_MODE_1M;
   1b9b6:	4f4c      	ldr	r7, [pc, #304]	; (1bae8 <ble_phy_init+0x138>)
   1b9b8:	2601      	movs	r6, #1
   1b9ba:	72be      	strb	r6, [r7, #10]
    g_ble_phy_data.phy_tx_phy_mode = BLE_PHY_MODE_1M;
   1b9bc:	72fe      	strb	r6, [r7, #11]
    g_ble_phy_data.phy_rx_phy_mode = BLE_PHY_MODE_1M;
   1b9be:	733e      	strb	r6, [r7, #12]
    g_ble_phy_data.rx_pwr_compensation = 0;
   1b9c0:	2400      	movs	r4, #0
   1b9c2:	73bc      	strb	r4, [r7, #14]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   1b9c4:	2328      	movs	r3, #40	; 0x28
   1b9c6:	70bb      	strb	r3, [r7, #2]
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1b9c8:	4b48      	ldr	r3, [pc, #288]	; (1baec <ble_phy_init+0x13c>)
   1b9ca:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   1b9ce:	f8c3 6ffc 	str.w	r6, [r3, #4092]	; 0xffc
    p_reg->INTENCLR = mask;
   1b9d2:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1b9d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->MODE = RADIO_MODE_MODE_Ble_1Mbit;
   1b9da:	f04f 0903 	mov.w	r9, #3
   1b9de:	f8c3 9510 	str.w	r9, [r3, #1296]	; 0x510
    NRF_RADIO->PCNF0 = NRF_PCNF0;
   1b9e2:	4a43      	ldr	r2, [pc, #268]	; (1baf0 <ble_phy_init+0x140>)
   1b9e4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_RADIO->PCNF1 = NRF_MAXLEN |
   1b9e8:	4a42      	ldr	r2, [pc, #264]	; (1baf4 <ble_phy_init+0x144>)
   1b9ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast << RADIO_MODECNF0_RU_Pos) &
   1b9ee:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1b9f2:	4332      	orrs	r2, r6
   1b9f4:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    NRF_RADIO->TXADDRESS  = 0;
   1b9f8:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    NRF_RADIO->RXADDRESSES  = (1 << 0);
   1b9fc:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530
    NRF_RADIO->CRCCNF = (RADIO_CRCCNF_SKIPADDR_Skip << RADIO_CRCCNF_SKIPADDR_Pos) | RADIO_CRCCNF_LEN_Three;
   1ba00:	f240 1203 	movw	r2, #259	; 0x103
   1ba04:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_RADIO->CRCPOLY = 0x0000065B;
   1ba08:	f240 625b 	movw	r2, #1627	; 0x65b
   1ba0c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_RADIO->TIFS = BLE_LL_IFS;
   1ba10:	2296      	movs	r2, #150	; 0x96
   1ba12:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
   1ba16:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1bb1c <ble_phy_init+0x16c>
   1ba1a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
   1ba1e:	f8c8 3504 	str.w	r3, [r8, #1284]	; 0x504
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ba22:	4d35      	ldr	r5, [pc, #212]	; (1baf8 <ble_phy_init+0x148>)
   1ba24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1ba28:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ba2c:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    NRF_CCM->EVENTS_ERROR = 0;
   1ba30:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    memset(g_nrf_encrypt_scratchpad, 0, sizeof(g_nrf_encrypt_scratchpad));
   1ba34:	f44f 7286 	mov.w	r2, #268	; 0x10c
   1ba38:	4621      	mov	r1, r4
   1ba3a:	4830      	ldr	r0, [pc, #192]	; (1bafc <ble_phy_init+0x14c>)
   1ba3c:	f7f2 ffe1 	bl	ea02 <memset>
    g_ble_phy_data.phy_aar_scratch = 0;
   1ba40:	613c      	str	r4, [r7, #16]
    NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1ba42:	4b2f      	ldr	r3, [pc, #188]	; (1bb00 <ble_phy_init+0x150>)
   1ba44:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE void nrf_aar_int_disable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ba48:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_AAR->EVENTS_END = 0;
   1ba4c:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    NRF_AAR->EVENTS_RESOLVED = 0;
   1ba50:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1ba54:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    NRF_AAR->NIRK = 0;
   1ba58:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ba5c:	4b29      	ldr	r3, [pc, #164]	; (1bb04 <ble_phy_init+0x154>)
   1ba5e:	601e      	str	r6, [r3, #0]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1ba60:	3b04      	subs	r3, #4
   1ba62:	611e      	str	r6, [r3, #16]
    NRF_TIMER0->BITMODE = 3;    /* 32-bit timer */
   1ba64:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    NRF_TIMER0->MODE = 0;       /* Timer mode */
   1ba68:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER0->PRESCALER = 4;  /* gives us 1 MHz */
   1ba6c:	2204      	movs	r2, #4
   1ba6e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ba72:	f5a3 43dd 	sub.w	r3, r3, #28288	; 0x6e80
   1ba76:	3b7c      	subs	r3, #124	; 0x7c
   1ba78:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ba7c:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
   1ba80:	3348      	adds	r3, #72	; 0x48
   1ba82:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ba86:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1ba8a:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ba8e:	f5a3 43e2 	sub.w	r3, r3, #28928	; 0x7100
   1ba92:	3b3c      	subs	r3, #60	; 0x3c
   1ba94:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ba98:	4b1b      	ldr	r3, [pc, #108]	; (1bb08 <ble_phy_init+0x158>)
   1ba9a:	f883 4301 	strb.w	r4, [r3, #769]	; 0x301
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ba9e:	4a1b      	ldr	r2, [pc, #108]	; (1bb0c <ble_phy_init+0x15c>)
   1baa0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1baa2:	491b      	ldr	r1, [pc, #108]	; (1bb10 <ble_phy_init+0x160>)
   1baa4:	6451      	str	r1, [r2, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1baa6:	2202      	movs	r2, #2
   1baa8:	601a      	str	r2, [r3, #0]
    if (!g_ble_phy_data.phy_stats_initialized) {
   1baaa:	783b      	ldrb	r3, [r7, #0]
   1baac:	b11b      	cbz	r3, 1bab6 <ble_phy_init+0x106>
}
   1baae:	2000      	movs	r0, #0
   1bab0:	b002      	add	sp, #8
   1bab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = stats_init_and_reg(STATS_HDR(ble_phy_stats),
   1bab6:	4b17      	ldr	r3, [pc, #92]	; (1bb14 <ble_phy_init+0x164>)
   1bab8:	9301      	str	r3, [sp, #4]
   1baba:	4623      	mov	r3, r4
   1babc:	9400      	str	r4, [sp, #0]
   1babe:	220d      	movs	r2, #13
   1bac0:	2104      	movs	r1, #4
   1bac2:	4815      	ldr	r0, [pc, #84]	; (1bb18 <ble_phy_init+0x168>)
   1bac4:	f7f6 fb32 	bl	1212c <stats_init_and_reg>
        assert(rc == 0);
   1bac8:	b918      	cbnz	r0, 1bad2 <ble_phy_init+0x122>
        g_ble_phy_data.phy_stats_initialized  = 1;
   1baca:	4b07      	ldr	r3, [pc, #28]	; (1bae8 <ble_phy_init+0x138>)
   1bacc:	2201      	movs	r2, #1
   1bace:	701a      	strb	r2, [r3, #0]
   1bad0:	e7ed      	b.n	1baae <ble_phy_init+0xfe>
        assert(rc == 0);
   1bad2:	f7f0 fb63 	bl	c19c <hal_debugger_connected>
   1bad6:	b100      	cbz	r0, 1bada <ble_phy_init+0x12a>
   1bad8:	be01      	bkpt	0x0001
   1bada:	2300      	movs	r3, #0
   1badc:	461a      	mov	r2, r3
   1bade:	4619      	mov	r1, r3
   1bae0:	4618      	mov	r0, r3
   1bae2:	f7f1 f85f 	bl	cba4 <__assert_func>
   1bae6:	bf00      	nop
   1bae8:	2000279c 	.word	0x2000279c
   1baec:	40001000 	.word	0x40001000
   1baf0:	00100108 	.word	0x00100108
   1baf4:	020300ff 	.word	0x020300ff
   1baf8:	4000f000 	.word	0x4000f000
   1bafc:	20002b00 	.word	0x20002b00
   1bb00:	20002718 	.word	0x20002718
   1bb04:	40008004 	.word	0x40008004
   1bb08:	e000e100 	.word	0xe000e100
   1bb0c:	e000ed00 	.word	0xe000ed00
   1bb10:	0001bf21 	.word	0x0001bf21
   1bb14:	0002dd88 	.word	0x0002dd88
   1bb18:	2000275c 	.word	0x2000275c
   1bb1c:	4001f000 	.word	0x4001f000

0001bb20 <ble_phy_encrypt_enable>:
{
   1bb20:	b4f0      	push	{r4, r5, r6, r7}
   1bb22:	4684      	mov	ip, r0
   1bb24:	460f      	mov	r7, r1
   1bb26:	4616      	mov	r6, r2
    memcpy(g_nrf_ccm_data.key, key, 16);
   1bb28:	4c0f      	ldr	r4, [pc, #60]	; (1bb68 <ble_phy_encrypt_enable+0x48>)
   1bb2a:	4625      	mov	r5, r4
   1bb2c:	6818      	ldr	r0, [r3, #0]
   1bb2e:	6859      	ldr	r1, [r3, #4]
   1bb30:	689a      	ldr	r2, [r3, #8]
   1bb32:	68db      	ldr	r3, [r3, #12]
   1bb34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   1bb36:	f8c4 c010 	str.w	ip, [r4, #16]
   1bb3a:	6167      	str	r7, [r4, #20]
    memcpy(g_nrf_ccm_data.iv, iv, 8);
   1bb3c:	6832      	ldr	r2, [r6, #0]
   1bb3e:	6873      	ldr	r3, [r6, #4]
   1bb40:	f8c4 2019 	str.w	r2, [r4, #25]
   1bb44:	f8c4 301d 	str.w	r3, [r4, #29]
    g_nrf_ccm_data.dir_bit = is_master;
   1bb48:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1bb4c:	7623      	strb	r3, [r4, #24]
    g_ble_phy_data.phy_encrypted = 1;
   1bb4e:	4b07      	ldr	r3, [pc, #28]	; (1bb6c <ble_phy_encrypt_enable+0x4c>)
   1bb50:	2201      	movs	r2, #1
   1bb52:	71da      	strb	r2, [r3, #7]
    NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   1bb54:	4b06      	ldr	r3, [pc, #24]	; (1bb70 <ble_phy_encrypt_enable+0x50>)
   1bb56:	2200      	movs	r2, #0
   1bb58:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1bb5c:	2202      	movs	r2, #2
   1bb5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1bb62:	bcf0      	pop	{r4, r5, r6, r7}
   1bb64:	4770      	bx	lr
   1bb66:	bf00      	nop
   1bb68:	20002adc 	.word	0x20002adc
   1bb6c:	2000279c 	.word	0x2000279c
   1bb70:	4000f000 	.word	0x4000f000

0001bb74 <ble_phy_encrypt_set_pkt_cntr>:
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   1bb74:	4b02      	ldr	r3, [pc, #8]	; (1bb80 <ble_phy_encrypt_set_pkt_cntr+0xc>)
   1bb76:	6118      	str	r0, [r3, #16]
   1bb78:	6159      	str	r1, [r3, #20]
    g_nrf_ccm_data.dir_bit = dir;
   1bb7a:	761a      	strb	r2, [r3, #24]
}
   1bb7c:	4770      	bx	lr
   1bb7e:	bf00      	nop
   1bb80:	20002adc 	.word	0x20002adc

0001bb84 <ble_phy_encrypt_disable>:
    p_reg->CHENCLR = mask;
   1bb84:	4b09      	ldr	r3, [pc, #36]	; (1bbac <ble_phy_encrypt_disable+0x28>)
   1bb86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1bb8a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1bb8e:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
   1bb92:	3bf8      	subs	r3, #248	; 0xf8
   1bb94:	2201      	movs	r2, #1
   1bb96:	601a      	str	r2, [r3, #0]
    NRF_CCM->EVENTS_ERROR = 0;
   1bb98:	4a05      	ldr	r2, [pc, #20]	; (1bbb0 <ble_phy_encrypt_disable+0x2c>)
   1bb9a:	2300      	movs	r3, #0
   1bb9c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1bba0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    g_ble_phy_data.phy_encrypted = 0;
   1bba4:	4a03      	ldr	r2, [pc, #12]	; (1bbb4 <ble_phy_encrypt_disable+0x30>)
   1bba6:	71d3      	strb	r3, [r2, #7]
}
   1bba8:	4770      	bx	lr
   1bbaa:	bf00      	nop
   1bbac:	4001f000 	.word	0x4001f000
   1bbb0:	4000f000 	.word	0x4000f000
   1bbb4:	2000279c 	.word	0x2000279c

0001bbb8 <ble_phy_set_txend_cb>:
    g_ble_phy_data.txend_cb = txend_cb;
   1bbb8:	4b01      	ldr	r3, [pc, #4]	; (1bbc0 <ble_phy_set_txend_cb+0x8>)
   1bbba:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   1bbbc:	6299      	str	r1, [r3, #40]	; 0x28
}
   1bbbe:	4770      	bx	lr
   1bbc0:	2000279c 	.word	0x2000279c

0001bbc4 <ble_phy_txpower_round>:
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   1bbc4:	2803      	cmp	r0, #3
   1bbc6:	dc12      	bgt.n	1bbee <ble_phy_txpower_round+0x2a>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   1bbc8:	2802      	cmp	r0, #2
   1bbca:	dc12      	bgt.n	1bbf2 <ble_phy_txpower_round+0x2e>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   1bbcc:	2800      	cmp	r0, #0
   1bbce:	da12      	bge.n	1bbf6 <ble_phy_txpower_round+0x32>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   1bbd0:	f110 0f04 	cmn.w	r0, #4
   1bbd4:	da11      	bge.n	1bbfa <ble_phy_txpower_round+0x36>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   1bbd6:	f110 0f08 	cmn.w	r0, #8
   1bbda:	da11      	bge.n	1bc00 <ble_phy_txpower_round+0x3c>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   1bbdc:	f110 0f0c 	cmn.w	r0, #12
   1bbe0:	da11      	bge.n	1bc06 <ble_phy_txpower_round+0x42>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   1bbe2:	f110 0f14 	cmn.w	r0, #20
   1bbe6:	da11      	bge.n	1bc0c <ble_phy_txpower_round+0x48>
    return (int8_t)RADIO_TXPOWER_TXPOWER_Neg40dBm;
   1bbe8:	f06f 0027 	mvn.w	r0, #39	; 0x27
   1bbec:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
   1bbee:	2004      	movs	r0, #4
   1bbf0:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
   1bbf2:	2003      	movs	r0, #3
   1bbf4:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_0dBm;
   1bbf6:	2000      	movs	r0, #0
   1bbf8:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
   1bbfa:	f06f 0003 	mvn.w	r0, #3
   1bbfe:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
   1bc00:	f06f 0007 	mvn.w	r0, #7
   1bc04:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
   1bc06:	f06f 000b 	mvn.w	r0, #11
   1bc0a:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm;
   1bc0c:	f06f 0013 	mvn.w	r0, #19
}
   1bc10:	4770      	bx	lr
	...

0001bc14 <ble_phy_txpwr_set>:
{
   1bc14:	b508      	push	{r3, lr}
    dbm = ble_phy_txpower_round(dbm);
   1bc16:	f7ff ffd5 	bl	1bbc4 <ble_phy_txpower_round>
    NRF_RADIO->TXPOWER = dbm;
   1bc1a:	4b03      	ldr	r3, [pc, #12]	; (1bc28 <ble_phy_txpwr_set+0x14>)
   1bc1c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    g_ble_phy_data.phy_txpwr_dbm = dbm;
   1bc20:	4b02      	ldr	r3, [pc, #8]	; (1bc2c <ble_phy_txpwr_set+0x18>)
   1bc22:	7058      	strb	r0, [r3, #1]
}
   1bc24:	2000      	movs	r0, #0
   1bc26:	bd08      	pop	{r3, pc}
   1bc28:	40001000 	.word	0x40001000
   1bc2c:	2000279c 	.word	0x2000279c

0001bc30 <ble_phy_set_rx_pwr_compensation>:
    g_ble_phy_data.rx_pwr_compensation = compensation;
   1bc30:	4b01      	ldr	r3, [pc, #4]	; (1bc38 <ble_phy_set_rx_pwr_compensation+0x8>)
   1bc32:	7398      	strb	r0, [r3, #14]
}
   1bc34:	4770      	bx	lr
   1bc36:	bf00      	nop
   1bc38:	2000279c 	.word	0x2000279c

0001bc3c <ble_phy_setchan>:
{
   1bc3c:	b538      	push	{r3, r4, r5, lr}
   1bc3e:	4604      	mov	r4, r0
    assert(chan < BLE_PHY_NUM_CHANS);
   1bc40:	2827      	cmp	r0, #39	; 0x27
   1bc42:	d810      	bhi.n	1bc66 <ble_phy_setchan+0x2a>
   1bc44:	4608      	mov	r0, r1
   1bc46:	4615      	mov	r5, r2
    ble_phy_set_access_addr(access_addr);
   1bc48:	f7ff fd4a 	bl	1b6e0 <ble_phy_set_access_addr>
    NRF_RADIO->CRCINIT = crcinit;
   1bc4c:	4b0b      	ldr	r3, [pc, #44]	; (1bc7c <ble_phy_setchan+0x40>)
   1bc4e:	f8c3 553c 	str.w	r5, [r3, #1340]	; 0x53c
    g_ble_phy_data.phy_chan = chan;
   1bc52:	4a0b      	ldr	r2, [pc, #44]	; (1bc80 <ble_phy_setchan+0x44>)
   1bc54:	7094      	strb	r4, [r2, #2]
    NRF_RADIO->FREQUENCY = g_ble_phy_chan_freq[chan];
   1bc56:	4a0b      	ldr	r2, [pc, #44]	; (1bc84 <ble_phy_setchan+0x48>)
   1bc58:	5d12      	ldrb	r2, [r2, r4]
   1bc5a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_RADIO->DATAWHITEIV = chan;
   1bc5e:	f8c3 4554 	str.w	r4, [r3, #1364]	; 0x554
}
   1bc62:	2000      	movs	r0, #0
   1bc64:	bd38      	pop	{r3, r4, r5, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   1bc66:	f7f0 fa99 	bl	c19c <hal_debugger_connected>
   1bc6a:	b100      	cbz	r0, 1bc6e <ble_phy_setchan+0x32>
   1bc6c:	be01      	bkpt	0x0001
   1bc6e:	2300      	movs	r3, #0
   1bc70:	461a      	mov	r2, r3
   1bc72:	4619      	mov	r1, r3
   1bc74:	4618      	mov	r0, r3
   1bc76:	f7f0 ff95 	bl	cba4 <__assert_func>
   1bc7a:	bf00      	nop
   1bc7c:	40001000 	.word	0x40001000
   1bc80:	2000279c 	.word	0x2000279c
   1bc84:	0002dd90 	.word	0x0002dd90

0001bc88 <ble_phy_disable>:
 * the usec timer (if used), disables interrupts, disables the RADIO, disables
 * PPI and sets state to idle.
 */
void
ble_phy_disable(void)
{
   1bc88:	b508      	push	{r3, lr}
    ble_phy_trace_void(BLE_PHY_TRACE_ID_DISABLE);

    ble_phy_stop_usec_timer();
   1bc8a:	f7ff fd41 	bl	1b710 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   1bc8e:	f7ff fd4f 	bl	1b730 <ble_phy_disable_irq_and_ppi>
}
   1bc92:	bd08      	pop	{r3, pc}

0001bc94 <ble_phy_rx_start_isr>:
{
   1bc94:	b538      	push	{r3, r4, r5, lr}
    NRF_RADIO->EVENTS_ADDRESS = 0;
   1bc96:	4b44      	ldr	r3, [pc, #272]	; (1bda8 <ble_phy_rx_start_isr+0x114>)
   1bc98:	2500      	movs	r5, #0
   1bc9a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
   1bc9e:	2202      	movs	r2, #2
   1bca0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1bca4:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1bca8:	2230      	movs	r2, #48	; 0x30
   1bcaa:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ble_hdr->rxinfo.flags = ble_ll_state_get();
   1bcae:	f7f8 fe51 	bl	14954 <ble_ll_state_get>
   1bcb2:	4c3e      	ldr	r4, [pc, #248]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bcb4:	8320      	strh	r0, [r4, #24]
    ble_hdr->rxinfo.channel = g_ble_phy_data.phy_chan;
   1bcb6:	78a3      	ldrb	r3, [r4, #2]
   1bcb8:	76a3      	strb	r3, [r4, #26]
    ble_hdr->rxinfo.handle = 0;
   1bcba:	76e5      	strb	r5, [r4, #27]
    ble_hdr->rxinfo.phy = ble_phy_get_cur_phy();
   1bcbc:	f7ff fd88 	bl	1b7d0 <ble_phy_get_cur_phy>
   1bcc0:	7760      	strb	r0, [r4, #29]
    phy = g_ble_phy_data.phy_cur_phy_mode;
   1bcc2:	7aa1      	ldrb	r1, [r4, #10]
    ble_hdr->rxinfo.phy_mode = ble_phy_get_cur_rx_phy_mode();
   1bcc4:	77a1      	strb	r1, [r4, #30]
    ble_hdr->beg_cputime = g_ble_phy_data.phy_start_cputime;
   1bcc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1bcc8:	6222      	str	r2, [r4, #32]
    usecs = NRF_TIMER0->CC[1];
   1bcca:	4b39      	ldr	r3, [pc, #228]	; (1bdb0 <ble_phy_rx_start_isr+0x11c>)
   1bccc:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
                g_ble_phy_t_rxaddrdelay[ble_hdr->rxinfo.phy_mode];
   1bcd0:	4838      	ldr	r0, [pc, #224]	; (1bdb4 <ble_phy_rx_start_isr+0x120>)
   1bcd2:	5c44      	ldrb	r4, [r0, r1]
    pdu_usecs = ble_phy_mode_pdu_start_off(ble_hdr->rxinfo.phy_mode) +
   1bcd4:	3428      	adds	r4, #40	; 0x28
    if (usecs < pdu_usecs) {
   1bcd6:	42a3      	cmp	r3, r4
   1bcd8:	d203      	bcs.n	1bce2 <ble_phy_rx_start_isr+0x4e>
        g_ble_phy_data.phy_start_cputime--;
   1bcda:	3a01      	subs	r2, #1
   1bcdc:	4933      	ldr	r1, [pc, #204]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bcde:	630a      	str	r2, [r1, #48]	; 0x30
        usecs += 30;
   1bce0:	331e      	adds	r3, #30
    usecs -= pdu_usecs;
   1bce2:	1b1c      	subs	r4, r3, r4
    ticks = os_cputime_usecs_to_ticks(usecs);
   1bce4:	4620      	mov	r0, r4
   1bce6:	f00e ffef 	bl	2acc8 <os_cputime_usecs_to_ticks>
   1bcea:	4605      	mov	r5, r0
    usecs -= os_cputime_ticks_to_usecs(ticks);
   1bcec:	f00e fff4 	bl	2acd8 <os_cputime_ticks_to_usecs>
   1bcf0:	1a24      	subs	r4, r4, r0
    if (usecs == 31) {
   1bcf2:	2c1f      	cmp	r4, #31
   1bcf4:	d015      	beq.n	1bd22 <ble_phy_rx_start_isr+0x8e>
    ble_hdr->beg_cputime += ticks;
   1bcf6:	4a2d      	ldr	r2, [pc, #180]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bcf8:	6a10      	ldr	r0, [r2, #32]
   1bcfa:	4428      	add	r0, r5
   1bcfc:	6210      	str	r0, [r2, #32]
    ble_hdr->rem_usecs = usecs;
   1bcfe:	6254      	str	r4, [r2, #36]	; 0x24
        state = NRF_RADIO->STATE;
   1bd00:	4b29      	ldr	r3, [pc, #164]	; (1bda8 <ble_phy_rx_start_isr+0x114>)
   1bd02:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
        if (NRF_RADIO->EVENTS_BCMATCH != 0) {
   1bd06:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1bd0a:	b96b      	cbnz	r3, 1bd28 <ble_phy_rx_start_isr+0x94>
        if (state == RADIO_STATE_STATE_Disabled) {
   1bd0c:	2a00      	cmp	r2, #0
   1bd0e:	d1f7      	bne.n	1bd00 <ble_phy_rx_start_isr+0x6c>
   1bd10:	4b25      	ldr	r3, [pc, #148]	; (1bda8 <ble_phy_rx_start_isr+0x114>)
   1bd12:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1bd16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            NRF_RADIO->SHORTS = 0;
   1bd1a:	2000      	movs	r0, #0
   1bd1c:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
            return false;
   1bd20:	e037      	b.n	1bd92 <ble_phy_rx_start_isr+0xfe>
        ++ticks;
   1bd22:	3501      	adds	r5, #1
        usecs = 0;
   1bd24:	2400      	movs	r4, #0
   1bd26:	e7e6      	b.n	1bcf6 <ble_phy_rx_start_isr+0x62>
    if (g_ble_phy_data.phy_privacy && (dptr[3] & 0x40)) {
   1bd28:	4b20      	ldr	r3, [pc, #128]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bd2a:	7a1b      	ldrb	r3, [r3, #8]
   1bd2c:	b303      	cbz	r3, 1bd70 <ble_phy_rx_start_isr+0xdc>
   1bd2e:	4b22      	ldr	r3, [pc, #136]	; (1bdb8 <ble_phy_rx_start_isr+0x124>)
   1bd30:	78db      	ldrb	r3, [r3, #3]
   1bd32:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd36:	d01b      	beq.n	1bd70 <ble_phy_rx_start_isr+0xdc>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   1bd38:	f003 030f 	and.w	r3, r3, #15
   1bd3c:	2b07      	cmp	r3, #7
   1bd3e:	d029      	beq.n	1bd94 <ble_phy_rx_start_isr+0x100>
   1bd40:	2300      	movs	r3, #0
        NRF_AAR->ADDRPTR = (uint32_t)(dptr + 3 + adva_offset);
   1bd42:	1cd9      	adds	r1, r3, #3
   1bd44:	4a1c      	ldr	r2, [pc, #112]	; (1bdb8 <ble_phy_rx_start_isr+0x124>)
   1bd46:	440a      	add	r2, r1
   1bd48:	491c      	ldr	r1, [pc, #112]	; (1bdbc <ble_phy_rx_start_isr+0x128>)
   1bd4a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
        NRF_RADIO->EVENTS_BCMATCH = 0;
   1bd4e:	f5a1 4160 	sub.w	r1, r1, #57344	; 0xe000
   1bd52:	2200      	movs	r2, #0
   1bd54:	f8c1 2128 	str.w	r2, [r1, #296]	; 0x128
    p_reg->CHENSET = mask;
   1bd58:	4a19      	ldr	r2, [pc, #100]	; (1bdc0 <ble_phy_rx_start_isr+0x12c>)
   1bd5a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1bd5e:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
        nrf_radio_bcc_set(NRF_RADIO, (BLE_LL_PDU_HDR_LEN + adva_offset +
   1bd62:	3308      	adds	r3, #8
            BLE_DEV_ADDR_LEN) * 8 + g_ble_phy_data.phy_bcc_offset);
   1bd64:	4a11      	ldr	r2, [pc, #68]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bd66:	7b52      	ldrb	r2, [r2, #13]
   1bd68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    p_reg->BCC = radio_bcc;
   1bd6c:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    rc = ble_ll_rx_start(dptr + 3,
   1bd70:	4b0e      	ldr	r3, [pc, #56]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bd72:	f103 0218 	add.w	r2, r3, #24
   1bd76:	7899      	ldrb	r1, [r3, #2]
   1bd78:	4812      	ldr	r0, [pc, #72]	; (1bdc4 <ble_phy_rx_start_isr+0x130>)
   1bd7a:	f7f8 fd51 	bl	14820 <ble_ll_rx_start>
    if (rc >= 0) {
   1bd7e:	2800      	cmp	r0, #0
   1bd80:	db0a      	blt.n	1bd98 <ble_phy_rx_start_isr+0x104>
        g_ble_phy_data.phy_rx_started = 1;
   1bd82:	4b0a      	ldr	r3, [pc, #40]	; (1bdac <ble_phy_rx_start_isr+0x118>)
   1bd84:	2201      	movs	r2, #1
   1bd86:	719a      	strb	r2, [r3, #6]
    STATS_INC(ble_phy_stats, rx_starts);
   1bd88:	4a0f      	ldr	r2, [pc, #60]	; (1bdc8 <ble_phy_rx_start_isr+0x134>)
   1bd8a:	6a13      	ldr	r3, [r2, #32]
   1bd8c:	3301      	adds	r3, #1
   1bd8e:	6213      	str	r3, [r2, #32]
    return true;
   1bd90:	2001      	movs	r0, #1
}
   1bd92:	bd38      	pop	{r3, r4, r5, pc}
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   1bd94:	2302      	movs	r3, #2
   1bd96:	e7d4      	b.n	1bd42 <ble_phy_rx_start_isr+0xae>
        ble_phy_disable();
   1bd98:	f7ff ff76 	bl	1bc88 <ble_phy_disable>
        STATS_INC(ble_phy_stats, rx_aborts);
   1bd9c:	4a0a      	ldr	r2, [pc, #40]	; (1bdc8 <ble_phy_rx_start_isr+0x134>)
   1bd9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1bda0:	3301      	adds	r3, #1
   1bda2:	6253      	str	r3, [r2, #36]	; 0x24
   1bda4:	e7f0      	b.n	1bd88 <ble_phy_rx_start_isr+0xf4>
   1bda6:	bf00      	nop
   1bda8:	40001000 	.word	0x40001000
   1bdac:	2000279c 	.word	0x2000279c
   1bdb0:	40008000 	.word	0x40008000
   1bdb4:	0002ddb8 	.word	0x0002ddb8
   1bdb8:	200028d4 	.word	0x200028d4
   1bdbc:	4000f000 	.word	0x4000f000
   1bdc0:	4001f000 	.word	0x4001f000
   1bdc4:	200028d7 	.word	0x200028d7
   1bdc8:	2000275c 	.word	0x2000275c

0001bdcc <ble_phy_rx_end_isr>:
{
   1bdcc:	b510      	push	{r4, lr}
    p_reg->CHENCLR = mask;
   1bdce:	4b4a      	ldr	r3, [pc, #296]	; (1bef8 <ble_phy_rx_end_isr+0x12c>)
   1bdd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1bdd4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   1bdd8:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
   1bddc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   1bde0:	2b00      	cmp	r3, #0
   1bde2:	d047      	beq.n	1be74 <ble_phy_rx_end_isr+0xa8>
                           g_ble_phy_data.rx_pwr_compensation;
   1bde4:	4945      	ldr	r1, [pc, #276]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1bde6:	7b8b      	ldrb	r3, [r1, #14]
    ble_hdr->rxinfo.rssi = (-1 * NRF_RADIO->RSSISAMPLE) +
   1bde8:	4a45      	ldr	r2, [pc, #276]	; (1bf00 <ble_phy_rx_end_isr+0x134>)
   1bdea:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
   1bdee:	1a1b      	subs	r3, r3, r0
   1bdf0:	770b      	strb	r3, [r1, #28]
    crcok = NRF_RADIO->EVENTS_CRCOK;
   1bdf2:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    if (!crcok) {
   1bdf6:	f013 0fff 	tst.w	r3, #255	; 0xff
   1bdfa:	d145      	bne.n	1be88 <ble_phy_rx_end_isr+0xbc>
        STATS_INC(ble_phy_stats, rx_crc_err);
   1bdfc:	4a41      	ldr	r2, [pc, #260]	; (1bf04 <ble_phy_rx_end_isr+0x138>)
   1bdfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1be00:	3301      	adds	r3, #1
   1be02:	62d3      	str	r3, [r2, #44]	; 0x2c
    tx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   1be04:	4a40      	ldr	r2, [pc, #256]	; (1bf08 <ble_phy_rx_end_isr+0x13c>)
   1be06:	f8d2 3548 	ldr.w	r3, [r2, #1352]	; 0x548
   1be0a:	3396      	adds	r3, #150	; 0x96
    tx_time -= g_ble_phy_t_rxenddelay[ble_hdr->rxinfo.phy_mode];
   1be0c:	493b      	ldr	r1, [pc, #236]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1be0e:	7f88      	ldrb	r0, [r1, #30]
   1be10:	4c3e      	ldr	r4, [pc, #248]	; (1bf0c <ble_phy_rx_end_isr+0x140>)
   1be12:	5c20      	ldrb	r0, [r4, r0]
   1be14:	1a1b      	subs	r3, r3, r0
    tx_time -= BLE_PHY_T_TXENFAST;
   1be16:	3b28      	subs	r3, #40	; 0x28
    tx_time -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   1be18:	7a89      	ldrb	r1, [r1, #10]
   1be1a:	483d      	ldr	r0, [pc, #244]	; (1bf10 <ble_phy_rx_end_isr+0x144>)
   1be1c:	5c41      	ldrb	r1, [r0, r1]
   1be1e:	1a5b      	subs	r3, r3, r1
    p_reg->CC[cc_channel] = cc_value;
   1be20:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1be24:	2300      	movs	r3, #0
   1be26:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    p_reg->CHENSET = mask;
   1be2a:	4b33      	ldr	r3, [pc, #204]	; (1bef8 <ble_phy_rx_end_isr+0x12c>)
   1be2c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1be30:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1be34:	f5a3 33b7 	sub.w	r3, r3, #93696	; 0x16e00
   1be38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
   1be3c:	2101      	movs	r1, #1
   1be3e:	6019      	str	r1, [r3, #0]
    if (NRF_TIMER0->CC[3] > NRF_TIMER0->CC[0]) {
   1be40:	f8d2 154c 	ldr.w	r1, [r2, #1356]	; 0x54c
   1be44:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   1be48:	4299      	cmp	r1, r3
   1be4a:	d907      	bls.n	1be5c <ble_phy_rx_end_isr+0x90>
    p_reg->CHENCLR = mask;
   1be4c:	4b2a      	ldr	r3, [pc, #168]	; (1bef8 <ble_phy_rx_end_isr+0x12c>)
   1be4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1be52:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        g_ble_phy_data.phy_transition_late = 1;
   1be56:	4b29      	ldr	r3, [pc, #164]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1be58:	2201      	movs	r2, #1
   1be5a:	715a      	strb	r2, [r3, #5]
    dptr[2] = dptr[1];
   1be5c:	482d      	ldr	r0, [pc, #180]	; (1bf14 <ble_phy_rx_end_isr+0x148>)
   1be5e:	7903      	ldrb	r3, [r0, #4]
   1be60:	7143      	strb	r3, [r0, #5]
    dptr[1] = dptr[0];
   1be62:	78c3      	ldrb	r3, [r0, #3]
   1be64:	f800 3f04 	strb.w	r3, [r0, #4]!
    rc = ble_ll_rx_end(dptr + 1, ble_hdr);
   1be68:	492b      	ldr	r1, [pc, #172]	; (1bf18 <ble_phy_rx_end_isr+0x14c>)
   1be6a:	f7f8 fcf9 	bl	14860 <ble_ll_rx_end>
    if (rc < 0) {
   1be6e:	2800      	cmp	r0, #0
   1be70:	db3e      	blt.n	1bef0 <ble_phy_rx_end_isr+0x124>
}
   1be72:	bd10      	pop	{r4, pc}
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   1be74:	f7f0 f992 	bl	c19c <hal_debugger_connected>
   1be78:	b100      	cbz	r0, 1be7c <ble_phy_rx_end_isr+0xb0>
   1be7a:	be01      	bkpt	0x0001
   1be7c:	2300      	movs	r3, #0
   1be7e:	461a      	mov	r2, r3
   1be80:	4619      	mov	r1, r3
   1be82:	4618      	mov	r0, r3
   1be84:	f7f0 fe8e 	bl	cba4 <__assert_func>
        STATS_INC(ble_phy_stats, rx_valid);
   1be88:	4a1e      	ldr	r2, [pc, #120]	; (1bf04 <ble_phy_rx_end_isr+0x138>)
   1be8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1be8c:	3301      	adds	r3, #1
   1be8e:	6293      	str	r3, [r2, #40]	; 0x28
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_CRC_OK;
   1be90:	4a1a      	ldr	r2, [pc, #104]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1be92:	8b13      	ldrh	r3, [r2, #24]
   1be94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1be98:	b29b      	uxth	r3, r3
   1be9a:	8313      	strh	r3, [r2, #24]
        if (g_ble_phy_data.phy_encrypted) {
   1be9c:	79d2      	ldrb	r2, [r2, #7]
   1be9e:	2a00      	cmp	r2, #0
   1bea0:	d0b0      	beq.n	1be04 <ble_phy_rx_end_isr+0x38>
            if ((dptr[1] != 0) && (NRF_CCM->MICSTATUS == 0)) {
   1bea2:	4a1c      	ldr	r2, [pc, #112]	; (1bf14 <ble_phy_rx_end_isr+0x148>)
   1bea4:	7912      	ldrb	r2, [r2, #4]
   1bea6:	b13a      	cbz	r2, 1beb8 <ble_phy_rx_end_isr+0xec>
   1bea8:	4a1c      	ldr	r2, [pc, #112]	; (1bf1c <ble_phy_rx_end_isr+0x150>)
   1beaa:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1beae:	b91a      	cbnz	r2, 1beb8 <ble_phy_rx_end_isr+0xec>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_MIC_FAILURE;
   1beb0:	f043 0320 	orr.w	r3, r3, #32
   1beb4:	4a11      	ldr	r2, [pc, #68]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1beb6:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ERROR) {
   1beb8:	4b18      	ldr	r3, [pc, #96]	; (1bf1c <ble_phy_rx_end_isr+0x150>)
   1beba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   1bebe:	b143      	cbz	r3, 1bed2 <ble_phy_rx_end_isr+0x106>
                STATS_INC(ble_phy_stats, rx_hw_err);
   1bec0:	4a10      	ldr	r2, [pc, #64]	; (1bf04 <ble_phy_rx_end_isr+0x138>)
   1bec2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1bec4:	3301      	adds	r3, #1
   1bec6:	6393      	str	r3, [r2, #56]	; 0x38
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   1bec8:	4a0c      	ldr	r2, [pc, #48]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1beca:	8b13      	ldrh	r3, [r2, #24]
   1becc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1bed0:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1bed2:	4b12      	ldr	r3, [pc, #72]	; (1bf1c <ble_phy_rx_end_isr+0x150>)
   1bed4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1bed8:	2b00      	cmp	r3, #0
   1beda:	d193      	bne.n	1be04 <ble_phy_rx_end_isr+0x38>
                STATS_INC(ble_phy_stats, rx_hw_err);
   1bedc:	4a09      	ldr	r2, [pc, #36]	; (1bf04 <ble_phy_rx_end_isr+0x138>)
   1bede:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1bee0:	3301      	adds	r3, #1
   1bee2:	6393      	str	r3, [r2, #56]	; 0x38
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   1bee4:	4a05      	ldr	r2, [pc, #20]	; (1befc <ble_phy_rx_end_isr+0x130>)
   1bee6:	8b13      	ldrh	r3, [r2, #24]
   1bee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1beec:	8313      	strh	r3, [r2, #24]
   1beee:	e789      	b.n	1be04 <ble_phy_rx_end_isr+0x38>
        ble_phy_disable();
   1bef0:	f7ff feca 	bl	1bc88 <ble_phy_disable>
}
   1bef4:	e7bd      	b.n	1be72 <ble_phy_rx_end_isr+0xa6>
   1bef6:	bf00      	nop
   1bef8:	4001f000 	.word	0x4001f000
   1befc:	2000279c 	.word	0x2000279c
   1bf00:	40001000 	.word	0x40001000
   1bf04:	2000275c 	.word	0x2000275c
   1bf08:	40008000 	.word	0x40008000
   1bf0c:	0002ddbc 	.word	0x0002ddbc
   1bf10:	0002ddc0 	.word	0x0002ddc0
   1bf14:	200028d4 	.word	0x200028d4
   1bf18:	200027b4 	.word	0x200027b4
   1bf1c:	4000f000 	.word	0x4000f000

0001bf20 <ble_phy_isr>:
{
   1bf20:	b510      	push	{r4, lr}
    irq_en = NRF_RADIO->INTENSET;
   1bf22:	4b2c      	ldr	r3, [pc, #176]	; (1bfd4 <ble_phy_isr+0xb4>)
   1bf24:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    if ((irq_en & RADIO_INTENCLR_ADDRESS_Msk) && NRF_RADIO->EVENTS_ADDRESS) {
   1bf28:	f014 0f02 	tst.w	r4, #2
   1bf2c:	d002      	beq.n	1bf34 <ble_phy_isr+0x14>
   1bf2e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1bf32:	bb53      	cbnz	r3, 1bf8a <ble_phy_isr+0x6a>
    if ((irq_en & RADIO_INTENCLR_DISABLED_Msk) && NRF_RADIO->EVENTS_DISABLED) {
   1bf34:	f014 0f10 	tst.w	r4, #16
   1bf38:	d01f      	beq.n	1bf7a <ble_phy_isr+0x5a>
   1bf3a:	4b26      	ldr	r3, [pc, #152]	; (1bfd4 <ble_phy_isr+0xb4>)
   1bf3c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1bf40:	b1db      	cbz	r3, 1bf7a <ble_phy_isr+0x5a>
        BLE_LL_ASSERT(NRF_RADIO->EVENTS_END ||
   1bf42:	4b24      	ldr	r3, [pc, #144]	; (1bfd4 <ble_phy_isr+0xb4>)
   1bf44:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   1bf48:	b933      	cbnz	r3, 1bf58 <ble_phy_isr+0x38>
   1bf4a:	4b23      	ldr	r3, [pc, #140]	; (1bfd8 <ble_phy_isr+0xb8>)
   1bf4c:	78db      	ldrb	r3, [r3, #3]
   1bf4e:	2b01      	cmp	r3, #1
   1bf50:	d122      	bne.n	1bf98 <ble_phy_isr+0x78>
   1bf52:	4b21      	ldr	r3, [pc, #132]	; (1bfd8 <ble_phy_isr+0xb8>)
   1bf54:	799b      	ldrb	r3, [r3, #6]
   1bf56:	b9fb      	cbnz	r3, 1bf98 <ble_phy_isr+0x78>
        NRF_RADIO->EVENTS_END = 0;
   1bf58:	4b1e      	ldr	r3, [pc, #120]	; (1bfd4 <ble_phy_isr+0xb4>)
   1bf5a:	2200      	movs	r2, #0
   1bf5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_RADIO->EVENTS_DISABLED = 0;
   1bf60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    p_reg->INTENCLR = mask;
   1bf64:	2210      	movs	r2, #16
   1bf66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        switch (g_ble_phy_data.phy_state) {
   1bf6a:	4b1b      	ldr	r3, [pc, #108]	; (1bfd8 <ble_phy_isr+0xb8>)
   1bf6c:	78db      	ldrb	r3, [r3, #3]
   1bf6e:	2b01      	cmp	r3, #1
   1bf70:	d01c      	beq.n	1bfac <ble_phy_isr+0x8c>
   1bf72:	2b02      	cmp	r3, #2
   1bf74:	d124      	bne.n	1bfc0 <ble_phy_isr+0xa0>
            ble_phy_tx_end_isr();
   1bf76:	f7ff fcb3 	bl	1b8e0 <ble_phy_tx_end_isr>
    g_ble_phy_data.phy_transition_late = 0;
   1bf7a:	4b17      	ldr	r3, [pc, #92]	; (1bfd8 <ble_phy_isr+0xb8>)
   1bf7c:	2200      	movs	r2, #0
   1bf7e:	715a      	strb	r2, [r3, #5]
    STATS_INC(ble_phy_stats, phy_isrs);
   1bf80:	4a16      	ldr	r2, [pc, #88]	; (1bfdc <ble_phy_isr+0xbc>)
   1bf82:	68d3      	ldr	r3, [r2, #12]
   1bf84:	3301      	adds	r3, #1
   1bf86:	60d3      	str	r3, [r2, #12]
}
   1bf88:	bd10      	pop	{r4, pc}
        if (ble_phy_rx_start_isr()) {
   1bf8a:	f7ff fe83 	bl	1bc94 <ble_phy_rx_start_isr>
   1bf8e:	2800      	cmp	r0, #0
   1bf90:	d0d0      	beq.n	1bf34 <ble_phy_isr+0x14>
            irq_en &= ~RADIO_INTENCLR_DISABLED_Msk;
   1bf92:	f024 0410 	bic.w	r4, r4, #16
   1bf96:	e7cd      	b.n	1bf34 <ble_phy_isr+0x14>
        BLE_LL_ASSERT(NRF_RADIO->EVENTS_END ||
   1bf98:	f7f0 f900 	bl	c19c <hal_debugger_connected>
   1bf9c:	b100      	cbz	r0, 1bfa0 <ble_phy_isr+0x80>
   1bf9e:	be01      	bkpt	0x0001
   1bfa0:	2300      	movs	r3, #0
   1bfa2:	461a      	mov	r2, r3
   1bfa4:	4619      	mov	r1, r3
   1bfa6:	4618      	mov	r0, r3
   1bfa8:	f7f0 fdfc 	bl	cba4 <__assert_func>
            if (g_ble_phy_data.phy_rx_started) {
   1bfac:	4b0a      	ldr	r3, [pc, #40]	; (1bfd8 <ble_phy_isr+0xb8>)
   1bfae:	799b      	ldrb	r3, [r3, #6]
   1bfb0:	b113      	cbz	r3, 1bfb8 <ble_phy_isr+0x98>
                ble_phy_rx_end_isr();
   1bfb2:	f7ff ff0b 	bl	1bdcc <ble_phy_rx_end_isr>
   1bfb6:	e7e0      	b.n	1bf7a <ble_phy_isr+0x5a>
                ble_ll_wfr_timer_exp(NULL);
   1bfb8:	2000      	movs	r0, #0
   1bfba:	f7f8 fbed 	bl	14798 <ble_ll_wfr_timer_exp>
   1bfbe:	e7dc      	b.n	1bf7a <ble_phy_isr+0x5a>
            BLE_LL_ASSERT(0);
   1bfc0:	f7f0 f8ec 	bl	c19c <hal_debugger_connected>
   1bfc4:	b100      	cbz	r0, 1bfc8 <ble_phy_isr+0xa8>
   1bfc6:	be01      	bkpt	0x0001
   1bfc8:	2300      	movs	r3, #0
   1bfca:	461a      	mov	r2, r3
   1bfcc:	4619      	mov	r1, r3
   1bfce:	4618      	mov	r0, r3
   1bfd0:	f7f0 fde8 	bl	cba4 <__assert_func>
   1bfd4:	40001000 	.word	0x40001000
   1bfd8:	2000279c 	.word	0x2000279c
   1bfdc:	2000275c 	.word	0x2000275c

0001bfe0 <ble_phy_rx>:
{
   1bfe0:	b508      	push	{r3, lr}
    nrf_wait_disabled();
   1bfe2:	f7ff fa91 	bl	1b508 <nrf_wait_disabled>
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   1bfe6:	4b18      	ldr	r3, [pc, #96]	; (1c048 <ble_phy_rx+0x68>)
   1bfe8:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   1bfec:	b133      	cbz	r3, 1bffc <ble_phy_rx+0x1c>
            ((NRF_RADIO->STATE & 0x07) != RADIO_STATE_STATE_RxIdle)) {
   1bfee:	4b16      	ldr	r3, [pc, #88]	; (1c048 <ble_phy_rx+0x68>)
   1bff0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   1bff4:	f003 0307 	and.w	r3, r3, #7
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   1bff8:	2b02      	cmp	r3, #2
   1bffa:	d113      	bne.n	1c024 <ble_phy_rx+0x44>
   1bffc:	4b12      	ldr	r3, [pc, #72]	; (1c048 <ble_phy_rx+0x68>)
   1bffe:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1c002:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   1c006:	2200      	movs	r2, #0
   1c008:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   1c00c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ble_phy_rx_xcvr_setup();
   1c010:	f7ff fae4 	bl	1b5dc <ble_phy_rx_xcvr_setup>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   1c014:	4b0d      	ldr	r3, [pc, #52]	; (1c04c <ble_phy_rx+0x6c>)
   1c016:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1c01a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   1c01e:	d009      	beq.n	1c034 <ble_phy_rx+0x54>
    return 0;
   1c020:	2000      	movs	r0, #0
}
   1c022:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   1c024:	f7ff fe30 	bl	1bc88 <ble_phy_disable>
        STATS_INC(ble_phy_stats, radio_state_errs);
   1c028:	4a09      	ldr	r2, [pc, #36]	; (1c050 <ble_phy_rx+0x70>)
   1c02a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1c02c:	3301      	adds	r3, #1
   1c02e:	6353      	str	r3, [r2, #52]	; 0x34
        return BLE_PHY_ERR_RADIO_STATE;
   1c030:	2001      	movs	r0, #1
   1c032:	e7f6      	b.n	1c022 <ble_phy_rx+0x42>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   1c034:	f7f0 f8b2 	bl	c19c <hal_debugger_connected>
   1c038:	b100      	cbz	r0, 1c03c <ble_phy_rx+0x5c>
   1c03a:	be01      	bkpt	0x0001
   1c03c:	2300      	movs	r3, #0
   1c03e:	461a      	mov	r2, r3
   1c040:	4619      	mov	r1, r3
   1c042:	4618      	mov	r0, r3
   1c044:	f7f0 fdae 	bl	cba4 <__assert_func>
   1c048:	40001000 	.word	0x40001000
   1c04c:	4001f000 	.word	0x4001f000
   1c050:	2000275c 	.word	0x2000275c

0001c054 <ble_phy_rx_set_start_time>:
{
   1c054:	b510      	push	{r4, lr}
   1c056:	4b0f      	ldr	r3, [pc, #60]	; (1c094 <ble_phy_rx_set_start_time+0x40>)
   1c058:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1c05c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, false) != 0) {
   1c060:	2200      	movs	r2, #0
   1c062:	f7ff fa61 	bl	1b528 <ble_phy_set_start_time>
   1c066:	b950      	cbnz	r0, 1c07e <ble_phy_rx_set_start_time+0x2a>
    bool late = false;
   1c068:	2400      	movs	r4, #0
    p_reg->CHENSET = mask;
   1c06a:	4b0a      	ldr	r3, [pc, #40]	; (1c094 <ble_phy_rx_set_start_time+0x40>)
   1c06c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c070:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    rc = ble_phy_rx();
   1c074:	f7ff ffb4 	bl	1bfe0 <ble_phy_rx>
    if (!rc && late) {
   1c078:	b900      	cbnz	r0, 1c07c <ble_phy_rx_set_start_time+0x28>
   1c07a:	b944      	cbnz	r4, 1c08e <ble_phy_rx_set_start_time+0x3a>
}
   1c07c:	bd10      	pop	{r4, pc}
        STATS_INC(ble_phy_stats, rx_late);
   1c07e:	4a06      	ldr	r2, [pc, #24]	; (1c098 <ble_phy_rx_set_start_time+0x44>)
   1c080:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1c082:	3301      	adds	r3, #1
   1c084:	6313      	str	r3, [r2, #48]	; 0x30
        ble_phy_set_start_now();
   1c086:	f7ff fb77 	bl	1b778 <ble_phy_set_start_now>
        late = true;
   1c08a:	2401      	movs	r4, #1
   1c08c:	e7ed      	b.n	1c06a <ble_phy_rx_set_start_time+0x16>
        rc = BLE_PHY_ERR_RX_LATE;
   1c08e:	2006      	movs	r0, #6
    return rc;
   1c090:	e7f4      	b.n	1c07c <ble_phy_rx_set_start_time+0x28>
   1c092:	bf00      	nop
   1c094:	4001f000 	.word	0x4001f000
   1c098:	2000275c 	.word	0x2000275c

0001c09c <ble_phy_tx_set_start_time>:
{
   1c09c:	b508      	push	{r3, lr}
    p_reg->CHENCLR = mask;
   1c09e:	4b0b      	ldr	r3, [pc, #44]	; (1c0cc <ble_phy_tx_set_start_time+0x30>)
   1c0a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1c0a4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, true) != 0) {
   1c0a8:	2201      	movs	r2, #1
   1c0aa:	f7ff fa3d 	bl	1b528 <ble_phy_set_start_time>
   1c0ae:	b928      	cbnz	r0, 1c0bc <ble_phy_tx_set_start_time+0x20>
    p_reg->CHENSET = mask;
   1c0b0:	4b06      	ldr	r3, [pc, #24]	; (1c0cc <ble_phy_tx_set_start_time+0x30>)
   1c0b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1c0b6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c0ba:	bd08      	pop	{r3, pc}
        STATS_INC(ble_phy_stats, tx_late);
   1c0bc:	4a04      	ldr	r2, [pc, #16]	; (1c0d0 <ble_phy_tx_set_start_time+0x34>)
   1c0be:	6993      	ldr	r3, [r2, #24]
   1c0c0:	3301      	adds	r3, #1
   1c0c2:	6193      	str	r3, [r2, #24]
        ble_phy_disable();
   1c0c4:	f7ff fde0 	bl	1bc88 <ble_phy_disable>
        rc = BLE_PHY_ERR_TX_LATE;
   1c0c8:	2005      	movs	r0, #5
   1c0ca:	e7f6      	b.n	1c0ba <ble_phy_tx_set_start_time+0x1e>
   1c0cc:	4001f000 	.word	0x4001f000
   1c0d0:	2000275c 	.word	0x2000275c

0001c0d4 <ble_phy_tx>:
{
   1c0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0d8:	b082      	sub	sp, #8
    if (g_ble_phy_data.phy_transition_late) {
   1c0da:	4b3c      	ldr	r3, [pc, #240]	; (1c1cc <ble_phy_tx+0xf8>)
   1c0dc:	795b      	ldrb	r3, [r3, #5]
   1c0de:	2b00      	cmp	r3, #0
   1c0e0:	d15e      	bne.n	1c1a0 <ble_phy_tx+0xcc>
   1c0e2:	4606      	mov	r6, r0
   1c0e4:	460f      	mov	r7, r1
   1c0e6:	4615      	mov	r5, r2
    nrf_wait_disabled();
   1c0e8:	f7ff fa0e 	bl	1b508 <nrf_wait_disabled>
    p_reg->CHENCLR = mask;
   1c0ec:	4b38      	ldr	r3, [pc, #224]	; (1c1d0 <ble_phy_tx+0xfc>)
   1c0ee:	4a39      	ldr	r2, [pc, #228]	; (1c1d4 <ble_phy_tx+0x100>)
   1c0f0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (g_ble_phy_data.phy_encrypted) {
   1c0f4:	4b35      	ldr	r3, [pc, #212]	; (1c1cc <ble_phy_tx+0xf8>)
   1c0f6:	79db      	ldrb	r3, [r3, #7]
   1c0f8:	2b00      	cmp	r3, #0
   1c0fa:	d059      	beq.n	1c1b0 <ble_phy_tx+0xdc>
        NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1c0fc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1c1e8 <ble_phy_tx+0x114>
   1c100:	2301      	movs	r3, #1
   1c102:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
        NRF_CCM->INPTR = (uint32_t)dptr;
   1c106:	4c34      	ldr	r4, [pc, #208]	; (1c1d8 <ble_phy_tx+0x104>)
   1c108:	f8c8 450c 	str.w	r4, [r8, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)pktptr;
   1c10c:	4b33      	ldr	r3, [pc, #204]	; (1c1dc <ble_phy_tx+0x108>)
   1c10e:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   1c112:	4b33      	ldr	r3, [pc, #204]	; (1c1e0 <ble_phy_tx+0x10c>)
   1c114:	f8c8 3514 	str.w	r3, [r8, #1300]	; 0x514
        NRF_CCM->EVENTS_ERROR = 0;
   1c118:	2300      	movs	r3, #0
   1c11a:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | ble_phy_get_ccm_datarate();
   1c11e:	f7ff fa5b 	bl	1b5d8 <ble_phy_get_ccm_datarate>
   1c122:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1c126:	f8c8 0504 	str.w	r0, [r8, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   1c12a:	4b2e      	ldr	r3, [pc, #184]	; (1c1e4 <ble_phy_tx+0x110>)
   1c12c:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
    payload_len = pducb(&dptr[3], pducb_arg, &hdr_byte);
   1c130:	f10d 0207 	add.w	r2, sp, #7
   1c134:	4639      	mov	r1, r7
   1c136:	1ce0      	adds	r0, r4, #3
   1c138:	47b0      	blx	r6
    dptr[0] = hdr_byte;
   1c13a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c13e:	7023      	strb	r3, [r4, #0]
    dptr[1] = payload_len;
   1c140:	7060      	strb	r0, [r4, #1]
    dptr[2] = 0;
   1c142:	2300      	movs	r3, #0
   1c144:	70a3      	strb	r3, [r4, #2]
    if (g_ble_phy_data.phy_encrypted) {
   1c146:	4b21      	ldr	r3, [pc, #132]	; (1c1cc <ble_phy_tx+0xf8>)
   1c148:	79db      	ldrb	r3, [r3, #7]
   1c14a:	b113      	cbz	r3, 1c152 <ble_phy_tx+0x7e>
   1c14c:	4b26      	ldr	r3, [pc, #152]	; (1c1e8 <ble_phy_tx+0x114>)
   1c14e:	2201      	movs	r2, #1
   1c150:	601a      	str	r2, [r3, #0]
    NRF_RADIO->PACKETPTR = (uint32_t)pktptr;
   1c152:	4b26      	ldr	r3, [pc, #152]	; (1c1ec <ble_phy_tx+0x118>)
   1c154:	4a21      	ldr	r2, [pc, #132]	; (1c1dc <ble_phy_tx+0x108>)
   1c156:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RADIO->EVENTS_READY = 0;
   1c15a:	2200      	movs	r2, #0
   1c15c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    NRF_RADIO->EVENTS_END = 0;
   1c160:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   1c164:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->SHORTS = shortcuts;
   1c168:	2203      	movs	r2, #3
   1c16a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->INTENSET = mask;
   1c16e:	2210      	movs	r2, #16
   1c170:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    g_ble_phy_data.phy_transition = end_trans;
   1c174:	4a15      	ldr	r2, [pc, #84]	; (1c1cc <ble_phy_tx+0xf8>)
   1c176:	7115      	strb	r5, [r2, #4]
    g_ble_phy_data.phy_tx_pyld_len = payload_len;
   1c178:	7250      	strb	r0, [r2, #9]
    state = NRF_RADIO->STATE;
   1c17a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Tx) {
   1c17e:	2b0b      	cmp	r3, #11
   1c180:	d01c      	beq.n	1c1bc <ble_phy_tx+0xe8>
        g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   1c182:	4613      	mov	r3, r2
   1c184:	2202      	movs	r2, #2
   1c186:	70da      	strb	r2, [r3, #3]
        STATS_INC(ble_phy_stats, tx_good);
   1c188:	4b19      	ldr	r3, [pc, #100]	; (1c1f0 <ble_phy_tx+0x11c>)
   1c18a:	691a      	ldr	r2, [r3, #16]
   1c18c:	3201      	adds	r2, #1
   1c18e:	611a      	str	r2, [r3, #16]
        STATS_INCN(ble_phy_stats, tx_bytes, payload_len + BLE_LL_PDU_HDR_LEN);
   1c190:	69da      	ldr	r2, [r3, #28]
   1c192:	4410      	add	r0, r2
   1c194:	3002      	adds	r0, #2
   1c196:	61d8      	str	r0, [r3, #28]
        rc = BLE_ERR_SUCCESS;
   1c198:	2000      	movs	r0, #0
}
   1c19a:	b002      	add	sp, #8
   1c19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_phy_disable();
   1c1a0:	f7ff fd72 	bl	1bc88 <ble_phy_disable>
        STATS_INC(ble_phy_stats, tx_late);
   1c1a4:	4a12      	ldr	r2, [pc, #72]	; (1c1f0 <ble_phy_tx+0x11c>)
   1c1a6:	6993      	ldr	r3, [r2, #24]
   1c1a8:	3301      	adds	r3, #1
   1c1aa:	6193      	str	r3, [r2, #24]
        return BLE_PHY_ERR_TX_LATE;
   1c1ac:	2005      	movs	r0, #5
   1c1ae:	e7f4      	b.n	1c19a <ble_phy_tx+0xc6>
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1c1b0:	4a10      	ldr	r2, [pc, #64]	; (1c1f4 <ble_phy_tx+0x120>)
   1c1b2:	4b0d      	ldr	r3, [pc, #52]	; (1c1e8 <ble_phy_tx+0x114>)
   1c1b4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        dptr = (uint8_t *)&g_ble_phy_tx_buf[0];
   1c1b8:	4c08      	ldr	r4, [pc, #32]	; (1c1dc <ble_phy_tx+0x108>)
   1c1ba:	e7b9      	b.n	1c130 <ble_phy_tx+0x5c>
        ble_phy_disable();
   1c1bc:	f7ff fd64 	bl	1bc88 <ble_phy_disable>
        STATS_INC(ble_phy_stats, tx_late);
   1c1c0:	4a0b      	ldr	r2, [pc, #44]	; (1c1f0 <ble_phy_tx+0x11c>)
   1c1c2:	6993      	ldr	r3, [r2, #24]
   1c1c4:	3301      	adds	r3, #1
   1c1c6:	6193      	str	r3, [r2, #24]
        rc = BLE_PHY_ERR_RADIO_STATE;
   1c1c8:	2001      	movs	r0, #1
   1c1ca:	e7e6      	b.n	1c19a <ble_phy_tx+0xc6>
   1c1cc:	2000279c 	.word	0x2000279c
   1c1d0:	4001f000 	.word	0x4001f000
   1c1d4:	02800030 	.word	0x02800030
   1c1d8:	200027d0 	.word	0x200027d0
   1c1dc:	200029d8 	.word	0x200029d8
   1c1e0:	20002b00 	.word	0x20002b00
   1c1e4:	20002adc 	.word	0x20002adc
   1c1e8:	4000f000 	.word	0x4000f000
   1c1ec:	40001000 	.word	0x40001000
   1c1f0:	2000275c 	.word	0x2000275c
   1c1f4:	20002718 	.word	0x20002718

0001c1f8 <ble_phy_access_addr_get>:

/* Gets the current access address */
uint32_t ble_phy_access_addr_get(void)
{
    return g_ble_phy_data.phy_access_address;
}
   1c1f8:	4b01      	ldr	r3, [pc, #4]	; (1c200 <ble_phy_access_addr_get+0x8>)
   1c1fa:	6958      	ldr	r0, [r3, #20]
   1c1fc:	4770      	bx	lr
   1c1fe:	bf00      	nop
   1c200:	2000279c 	.word	0x2000279c

0001c204 <ble_phy_rx_started>:
 */
int
ble_phy_rx_started(void)
{
    return g_ble_phy_data.phy_rx_started;
}
   1c204:	4b01      	ldr	r3, [pc, #4]	; (1c20c <ble_phy_rx_started+0x8>)
   1c206:	7998      	ldrb	r0, [r3, #6]
   1c208:	4770      	bx	lr
   1c20a:	bf00      	nop
   1c20c:	2000279c 	.word	0x2000279c

0001c210 <ble_phy_xcvr_state_get>:
 */
uint8_t
ble_phy_xcvr_state_get(void)
{
    uint32_t state;
    state = NRF_RADIO->STATE;
   1c210:	4b02      	ldr	r3, [pc, #8]	; (1c21c <ble_phy_xcvr_state_get+0xc>)
   1c212:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
    return (uint8_t)state;
}
   1c216:	b2c0      	uxtb	r0, r0
   1c218:	4770      	bx	lr
   1c21a:	bf00      	nop
   1c21c:	40001000 	.word	0x40001000

0001c220 <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   1c220:	20fb      	movs	r0, #251	; 0xfb
   1c222:	4770      	bx	lr

0001c224 <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    NRF_AAR->NIRK = (uint32_t)g_nrf_num_irks;
   1c224:	4b04      	ldr	r3, [pc, #16]	; (1c238 <ble_phy_resolv_list_enable+0x14>)
   1c226:	781a      	ldrb	r2, [r3, #0]
   1c228:	4b04      	ldr	r3, [pc, #16]	; (1c23c <ble_phy_resolv_list_enable+0x18>)
   1c22a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_privacy = 1;
   1c22e:	4b04      	ldr	r3, [pc, #16]	; (1c240 <ble_phy_resolv_list_enable+0x1c>)
   1c230:	2201      	movs	r2, #1
   1c232:	721a      	strb	r2, [r3, #8]
}
   1c234:	4770      	bx	lr
   1c236:	bf00      	nop
   1c238:	20002758 	.word	0x20002758
   1c23c:	4000f000 	.word	0x4000f000
   1c240:	2000279c 	.word	0x2000279c

0001c244 <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   1c244:	4b01      	ldr	r3, [pc, #4]	; (1c24c <ble_phy_resolv_list_disable+0x8>)
   1c246:	2200      	movs	r2, #0
   1c248:	721a      	strb	r2, [r3, #8]
}
   1c24a:	4770      	bx	lr
   1c24c:	2000279c 	.word	0x2000279c

0001c250 <ble_phy_rfclk_enable>:
}
#endif

void
ble_phy_rfclk_enable(void)
{
   1c250:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_request();
   1c252:	f00e f951 	bl	2a4f8 <nrf52_clock_hfxo_request>
#else
    nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTART);
#endif
}
   1c256:	bd08      	pop	{r3, pc}

0001c258 <ble_phy_rfclk_disable>:

void
ble_phy_rfclk_disable(void)
{
   1c258:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_release();
   1c25a:	f00e f985 	bl	2a568 <nrf52_clock_hfxo_release>
#else
    nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTOP);
#endif
}
   1c25e:	bd08      	pop	{r3, pc}

0001c260 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   1c260:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1c262:	2300      	movs	r3, #0
   1c264:	2b1a      	cmp	r3, #26
   1c266:	d809      	bhi.n	1c27c <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   1c268:	4a06      	ldr	r2, [pc, #24]	; (1c284 <ble_att_rx_dispatch_entry_find+0x24>)
   1c26a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   1c26e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1c272:	428a      	cmp	r2, r1
   1c274:	d005      	beq.n	1c282 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   1c276:	d803      	bhi.n	1c280 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1c278:	3301      	adds	r3, #1
   1c27a:	e7f3      	b.n	1c264 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   1c27c:	2000      	movs	r0, #0
   1c27e:	4770      	bx	lr
   1c280:	2000      	movs	r0, #0
}
   1c282:	4770      	bx	lr
   1c284:	0002ddd0 	.word	0x0002ddd0

0001c288 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   1c288:	3801      	subs	r0, #1
   1c28a:	2851      	cmp	r0, #81	; 0x51
   1c28c:	f200 80f2 	bhi.w	1c474 <ble_att_inc_rx_stat+0x1ec>
   1c290:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c294:	00570052 	.word	0x00570052
   1c298:	0061005c 	.word	0x0061005c
   1c29c:	006b0066 	.word	0x006b0066
   1c2a0:	00750070 	.word	0x00750070
   1c2a4:	007f007a 	.word	0x007f007a
   1c2a8:	00890084 	.word	0x00890084
   1c2ac:	0093008e 	.word	0x0093008e
   1c2b0:	009d0098 	.word	0x009d0098
   1c2b4:	00ab00a4 	.word	0x00ab00a4
   1c2b8:	00f000b2 	.word	0x00f000b2
   1c2bc:	00b900f0 	.word	0x00b900f0
   1c2c0:	00c700c0 	.word	0x00c700c0
   1c2c4:	00f000ce 	.word	0x00f000ce
   1c2c8:	00f000d5 	.word	0x00f000d5
   1c2cc:	00e300dc 	.word	0x00e300dc
   1c2d0:	00f000f0 	.word	0x00f000f0
   1c2d4:	00f000f0 	.word	0x00f000f0
   1c2d8:	00f000f0 	.word	0x00f000f0
   1c2dc:	00f000f0 	.word	0x00f000f0
   1c2e0:	00f000f0 	.word	0x00f000f0
   1c2e4:	00f000f0 	.word	0x00f000f0
   1c2e8:	00f000f0 	.word	0x00f000f0
   1c2ec:	00f000f0 	.word	0x00f000f0
   1c2f0:	00f000f0 	.word	0x00f000f0
   1c2f4:	00f000f0 	.word	0x00f000f0
   1c2f8:	00f000f0 	.word	0x00f000f0
   1c2fc:	00f000f0 	.word	0x00f000f0
   1c300:	00f000f0 	.word	0x00f000f0
   1c304:	00f000f0 	.word	0x00f000f0
   1c308:	00f000f0 	.word	0x00f000f0
   1c30c:	00f000f0 	.word	0x00f000f0
   1c310:	00f000f0 	.word	0x00f000f0
   1c314:	00f000f0 	.word	0x00f000f0
   1c318:	00f000f0 	.word	0x00f000f0
   1c31c:	00f000f0 	.word	0x00f000f0
   1c320:	00f000f0 	.word	0x00f000f0
   1c324:	00f000f0 	.word	0x00f000f0
   1c328:	00f000f0 	.word	0x00f000f0
   1c32c:	00f000f0 	.word	0x00f000f0
   1c330:	00f000f0 	.word	0x00f000f0
   1c334:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   1c338:	4a4f      	ldr	r2, [pc, #316]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c33a:	68d3      	ldr	r3, [r2, #12]
   1c33c:	3301      	adds	r3, #1
   1c33e:	60d3      	str	r3, [r2, #12]
        break;
   1c340:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   1c342:	4a4d      	ldr	r2, [pc, #308]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c344:	6953      	ldr	r3, [r2, #20]
   1c346:	3301      	adds	r3, #1
   1c348:	6153      	str	r3, [r2, #20]
        break;
   1c34a:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   1c34c:	4a4a      	ldr	r2, [pc, #296]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c34e:	69d3      	ldr	r3, [r2, #28]
   1c350:	3301      	adds	r3, #1
   1c352:	61d3      	str	r3, [r2, #28]
        break;
   1c354:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   1c356:	4a48      	ldr	r2, [pc, #288]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c358:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1c35a:	3301      	adds	r3, #1
   1c35c:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   1c35e:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   1c360:	4a45      	ldr	r2, [pc, #276]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c362:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1c364:	3301      	adds	r3, #1
   1c366:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   1c368:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   1c36a:	4a43      	ldr	r2, [pc, #268]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c36c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1c36e:	3301      	adds	r3, #1
   1c370:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   1c372:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   1c374:	4a40      	ldr	r2, [pc, #256]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c376:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1c378:	3301      	adds	r3, #1
   1c37a:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   1c37c:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   1c37e:	4a3e      	ldr	r2, [pc, #248]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c380:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1c382:	3301      	adds	r3, #1
   1c384:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   1c386:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   1c388:	4a3b      	ldr	r2, [pc, #236]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c38a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c38c:	3301      	adds	r3, #1
   1c38e:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1c390:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   1c392:	4a39      	ldr	r2, [pc, #228]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c394:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1c396:	3301      	adds	r3, #1
   1c398:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   1c39a:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   1c39c:	4a36      	ldr	r2, [pc, #216]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c39e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1c3a0:	3301      	adds	r3, #1
   1c3a2:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1c3a4:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   1c3a6:	4a34      	ldr	r2, [pc, #208]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3a8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1c3aa:	3301      	adds	r3, #1
   1c3ac:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   1c3ae:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   1c3b0:	4a31      	ldr	r2, [pc, #196]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3b2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c3b4:	3301      	adds	r3, #1
   1c3b6:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   1c3b8:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   1c3ba:	4a2f      	ldr	r2, [pc, #188]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3bc:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1c3be:	3301      	adds	r3, #1
   1c3c0:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   1c3c2:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   1c3c4:	4a2c      	ldr	r2, [pc, #176]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3c6:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1c3c8:	3301      	adds	r3, #1
   1c3ca:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   1c3cc:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   1c3ce:	4a2a      	ldr	r2, [pc, #168]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3d0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c3d4:	3301      	adds	r3, #1
   1c3d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   1c3da:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   1c3dc:	4a26      	ldr	r2, [pc, #152]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1c3e2:	3301      	adds	r3, #1
   1c3e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   1c3e8:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   1c3ea:	4a23      	ldr	r2, [pc, #140]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3ec:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1c3f0:	3301      	adds	r3, #1
   1c3f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   1c3f6:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   1c3f8:	4a1f      	ldr	r2, [pc, #124]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c3fa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c3fe:	3301      	adds	r3, #1
   1c400:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   1c404:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   1c406:	4a1c      	ldr	r2, [pc, #112]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c408:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   1c40c:	3301      	adds	r3, #1
   1c40e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   1c412:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   1c414:	4a18      	ldr	r2, [pc, #96]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c416:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   1c41a:	3301      	adds	r3, #1
   1c41c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   1c420:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   1c422:	4a15      	ldr	r2, [pc, #84]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c424:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   1c428:	3301      	adds	r3, #1
   1c42a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   1c42e:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   1c430:	4a11      	ldr	r2, [pc, #68]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c432:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1c436:	3301      	adds	r3, #1
   1c438:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   1c43c:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   1c43e:	4a0e      	ldr	r2, [pc, #56]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c440:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   1c444:	3301      	adds	r3, #1
   1c446:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   1c44a:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   1c44c:	4a0a      	ldr	r2, [pc, #40]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c44e:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   1c452:	3301      	adds	r3, #1
   1c454:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   1c458:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   1c45a:	4a07      	ldr	r2, [pc, #28]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c45c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   1c460:	3301      	adds	r3, #1
   1c462:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   1c466:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   1c468:	4a03      	ldr	r2, [pc, #12]	; (1c478 <ble_att_inc_rx_stat+0x1f0>)
   1c46a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1c46e:	3301      	adds	r3, #1
   1c470:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   1c474:	4770      	bx	lr
   1c476:	bf00      	nop
   1c478:	20002c10 	.word	0x20002c10

0001c47c <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   1c47c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c480:	d000      	beq.n	1c484 <ble_att_rx_handle_unknown_request+0x8>
   1c482:	4770      	bx	lr
{
   1c484:	b570      	push	{r4, r5, r6, lr}
   1c486:	b082      	sub	sp, #8
   1c488:	4604      	mov	r4, r0
   1c48a:	460e      	mov	r6, r1
   1c48c:	4615      	mov	r5, r2
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   1c48e:	6810      	ldr	r0, [r2, #0]
   1c490:	8a01      	ldrh	r1, [r0, #16]
   1c492:	f7f1 f8c6 	bl	d622 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   1c496:	2306      	movs	r3, #6
   1c498:	9300      	str	r3, [sp, #0]
   1c49a:	2300      	movs	r3, #0
   1c49c:	4622      	mov	r2, r4
   1c49e:	6829      	ldr	r1, [r5, #0]
   1c4a0:	4630      	mov	r0, r6
   1c4a2:	f001 f98f 	bl	1d7c4 <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   1c4a6:	2300      	movs	r3, #0
   1c4a8:	602b      	str	r3, [r5, #0]
}
   1c4aa:	b002      	add	sp, #8
   1c4ac:	bd70      	pop	{r4, r5, r6, pc}

0001c4ae <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   1c4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4b2:	b082      	sub	sp, #8
   1c4b4:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1c4b6:	f007 fb7a 	bl	23bae <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1c4ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c4be:	4298      	cmp	r0, r3
   1c4c0:	d033      	beq.n	1c52a <ble_att_rx+0x7c>
   1c4c2:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1c4c4:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   1c4c8:	f10d 0307 	add.w	r3, sp, #7
   1c4cc:	2201      	movs	r2, #1
   1c4ce:	2100      	movs	r1, #0
   1c4d0:	6920      	ldr	r0, [r4, #16]
   1c4d2:	f7f1 f879 	bl	d5c8 <os_mbuf_copydata>
    if (rc != 0) {
   1c4d6:	bb50      	cbnz	r0, 1c52e <ble_att_rx+0x80>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   1c4d8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1c4dc:	4630      	mov	r0, r6
   1c4de:	f7ff febf 	bl	1c260 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   1c4e2:	4680      	mov	r8, r0
   1c4e4:	b188      	cbz	r0, 1c50a <ble_att_rx+0x5c>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   1c4e6:	4630      	mov	r0, r6
   1c4e8:	f7ff fece 	bl	1c288 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1c4ec:	2101      	movs	r1, #1
   1c4ee:	6920      	ldr	r0, [r4, #16]
   1c4f0:	f7f1 f897 	bl	d622 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   1c4f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c4f8:	4639      	mov	r1, r7
   1c4fa:	4628      	mov	r0, r5
   1c4fc:	4798      	blx	r3
    if (rc != 0) {
   1c4fe:	4604      	mov	r4, r0
   1c500:	b950      	cbnz	r0, 1c518 <ble_att_rx+0x6a>
        }
        return rc;
    }

    return 0;
}
   1c502:	4620      	mov	r0, r4
   1c504:	b002      	add	sp, #8
   1c506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1c50a:	463a      	mov	r2, r7
   1c50c:	4629      	mov	r1, r5
   1c50e:	4630      	mov	r0, r6
   1c510:	f7ff ffb4 	bl	1c47c <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   1c514:	2408      	movs	r4, #8
   1c516:	e7f4      	b.n	1c502 <ble_att_rx+0x54>
        if (rc == BLE_HS_ENOTSUP) {
   1c518:	2808      	cmp	r0, #8
   1c51a:	d1f2      	bne.n	1c502 <ble_att_rx+0x54>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1c51c:	463a      	mov	r2, r7
   1c51e:	4629      	mov	r1, r5
   1c520:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c524:	f7ff ffaa 	bl	1c47c <ble_att_rx_handle_unknown_request>
        return rc;
   1c528:	e7eb      	b.n	1c502 <ble_att_rx+0x54>
        return BLE_HS_ENOTCONN;
   1c52a:	2407      	movs	r4, #7
   1c52c:	e7e9      	b.n	1c502 <ble_att_rx+0x54>
        return BLE_HS_EMSGSIZE;
   1c52e:	2404      	movs	r4, #4
   1c530:	e7e7      	b.n	1c502 <ble_att_rx+0x54>

0001c532 <ble_att_conn_chan_find>:
{
   1c532:	b508      	push	{r3, lr}
   1c534:	4613      	mov	r3, r2
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   1c536:	460a      	mov	r2, r1
   1c538:	2104      	movs	r1, #4
   1c53a:	f006 ffc1 	bl	234c0 <ble_hs_misc_conn_chan_find>
}
   1c53e:	bd08      	pop	{r3, pc}

0001c540 <ble_att_inc_tx_stat>:
    switch (att_op) {
   1c540:	3801      	subs	r0, #1
   1c542:	2851      	cmp	r0, #81	; 0x51
   1c544:	f200 80f4 	bhi.w	1c730 <ble_att_inc_tx_stat+0x1f0>
   1c548:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c54c:	00570052 	.word	0x00570052
   1c550:	0061005c 	.word	0x0061005c
   1c554:	006b0066 	.word	0x006b0066
   1c558:	00750070 	.word	0x00750070
   1c55c:	007f007a 	.word	0x007f007a
   1c560:	00890084 	.word	0x00890084
   1c564:	0093008e 	.word	0x0093008e
   1c568:	009f0098 	.word	0x009f0098
   1c56c:	00ad00a6 	.word	0x00ad00a6
   1c570:	00f200b4 	.word	0x00f200b4
   1c574:	00bb00f2 	.word	0x00bb00f2
   1c578:	00c900c2 	.word	0x00c900c2
   1c57c:	00f200d0 	.word	0x00f200d0
   1c580:	00f200d7 	.word	0x00f200d7
   1c584:	00e500de 	.word	0x00e500de
   1c588:	00f200f2 	.word	0x00f200f2
   1c58c:	00f200f2 	.word	0x00f200f2
   1c590:	00f200f2 	.word	0x00f200f2
   1c594:	00f200f2 	.word	0x00f200f2
   1c598:	00f200f2 	.word	0x00f200f2
   1c59c:	00f200f2 	.word	0x00f200f2
   1c5a0:	00f200f2 	.word	0x00f200f2
   1c5a4:	00f200f2 	.word	0x00f200f2
   1c5a8:	00f200f2 	.word	0x00f200f2
   1c5ac:	00f200f2 	.word	0x00f200f2
   1c5b0:	00f200f2 	.word	0x00f200f2
   1c5b4:	00f200f2 	.word	0x00f200f2
   1c5b8:	00f200f2 	.word	0x00f200f2
   1c5bc:	00f200f2 	.word	0x00f200f2
   1c5c0:	00f200f2 	.word	0x00f200f2
   1c5c4:	00f200f2 	.word	0x00f200f2
   1c5c8:	00f200f2 	.word	0x00f200f2
   1c5cc:	00f200f2 	.word	0x00f200f2
   1c5d0:	00f200f2 	.word	0x00f200f2
   1c5d4:	00f200f2 	.word	0x00f200f2
   1c5d8:	00f200f2 	.word	0x00f200f2
   1c5dc:	00f200f2 	.word	0x00f200f2
   1c5e0:	00f200f2 	.word	0x00f200f2
   1c5e4:	00f200f2 	.word	0x00f200f2
   1c5e8:	00f200f2 	.word	0x00f200f2
   1c5ec:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   1c5f0:	4a50      	ldr	r2, [pc, #320]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c5f2:	6913      	ldr	r3, [r2, #16]
   1c5f4:	3301      	adds	r3, #1
   1c5f6:	6113      	str	r3, [r2, #16]
        break;
   1c5f8:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   1c5fa:	4a4e      	ldr	r2, [pc, #312]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c5fc:	6993      	ldr	r3, [r2, #24]
   1c5fe:	3301      	adds	r3, #1
   1c600:	6193      	str	r3, [r2, #24]
        break;
   1c602:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   1c604:	4a4b      	ldr	r2, [pc, #300]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c606:	6a13      	ldr	r3, [r2, #32]
   1c608:	3301      	adds	r3, #1
   1c60a:	6213      	str	r3, [r2, #32]
        break;
   1c60c:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   1c60e:	4a49      	ldr	r2, [pc, #292]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c610:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1c612:	3301      	adds	r3, #1
   1c614:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   1c616:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   1c618:	4a46      	ldr	r2, [pc, #280]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c61a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1c61c:	3301      	adds	r3, #1
   1c61e:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   1c620:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   1c622:	4a44      	ldr	r2, [pc, #272]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c624:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1c626:	3301      	adds	r3, #1
   1c628:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   1c62a:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   1c62c:	4a41      	ldr	r2, [pc, #260]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c62e:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1c630:	3301      	adds	r3, #1
   1c632:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   1c634:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   1c636:	4a3f      	ldr	r2, [pc, #252]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c638:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1c63a:	3301      	adds	r3, #1
   1c63c:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1c63e:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   1c640:	4a3c      	ldr	r2, [pc, #240]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c642:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1c644:	3301      	adds	r3, #1
   1c646:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   1c648:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   1c64a:	4a3a      	ldr	r2, [pc, #232]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c64c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c64e:	3301      	adds	r3, #1
   1c650:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1c652:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   1c654:	4a37      	ldr	r2, [pc, #220]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c656:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1c658:	3301      	adds	r3, #1
   1c65a:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1c65c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   1c65e:	4a35      	ldr	r2, [pc, #212]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c660:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c662:	3301      	adds	r3, #1
   1c664:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1c666:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   1c668:	4a32      	ldr	r2, [pc, #200]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c66a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1c66c:	3301      	adds	r3, #1
   1c66e:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   1c670:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   1c672:	4a30      	ldr	r2, [pc, #192]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c674:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1c676:	3301      	adds	r3, #1
   1c678:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   1c67a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   1c67c:	4a2d      	ldr	r2, [pc, #180]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c67e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c682:	3301      	adds	r3, #1
   1c684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   1c688:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   1c68a:	4a2a      	ldr	r2, [pc, #168]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c68c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1c690:	3301      	adds	r3, #1
   1c692:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   1c696:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   1c698:	4a26      	ldr	r2, [pc, #152]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c69a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1c69e:	3301      	adds	r3, #1
   1c6a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   1c6a4:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   1c6a6:	4a23      	ldr	r2, [pc, #140]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6a8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c6ac:	3301      	adds	r3, #1
   1c6ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   1c6b2:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   1c6b4:	4a1f      	ldr	r2, [pc, #124]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6b6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1c6ba:	3301      	adds	r3, #1
   1c6bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   1c6c0:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   1c6c2:	4a1c      	ldr	r2, [pc, #112]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6c4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   1c6c8:	3301      	adds	r3, #1
   1c6ca:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   1c6ce:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   1c6d0:	4a18      	ldr	r2, [pc, #96]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6d2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   1c6d6:	3301      	adds	r3, #1
   1c6d8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   1c6dc:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   1c6de:	4a15      	ldr	r2, [pc, #84]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6e0:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1c6e4:	3301      	adds	r3, #1
   1c6e6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   1c6ea:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   1c6ec:	4a11      	ldr	r2, [pc, #68]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6ee:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   1c6f2:	3301      	adds	r3, #1
   1c6f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   1c6f8:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   1c6fa:	4a0e      	ldr	r2, [pc, #56]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c6fc:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   1c700:	3301      	adds	r3, #1
   1c702:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   1c706:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   1c708:	4a0a      	ldr	r2, [pc, #40]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c70a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   1c70e:	3301      	adds	r3, #1
   1c710:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   1c714:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   1c716:	4a07      	ldr	r2, [pc, #28]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c718:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1c71c:	3301      	adds	r3, #1
   1c71e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   1c722:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   1c724:	4a03      	ldr	r2, [pc, #12]	; (1c734 <ble_att_inc_tx_stat+0x1f4>)
   1c726:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1c72a:	3301      	adds	r3, #1
   1c72c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   1c730:	4770      	bx	lr
   1c732:	bf00      	nop
   1c734:	20002c10 	.word	0x20002c10

0001c738 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   1c738:	2916      	cmp	r1, #22
   1c73a:	d800      	bhi.n	1c73e <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1c73c:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1c73e:	8181      	strh	r1, [r0, #12]
}
   1c740:	4770      	bx	lr

0001c742 <ble_att_chan_mtu>:
{
   1c742:	b510      	push	{r4, lr}
   1c744:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1c746:	f007 fa01 	bl	23b4c <ble_l2cap_is_mtu_req_sent>
   1c74a:	b130      	cbz	r0, 1c75a <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1c74c:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1c74e:	b130      	cbz	r0, 1c75e <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   1c750:	8963      	ldrh	r3, [r4, #10]
   1c752:	4298      	cmp	r0, r3
   1c754:	bf28      	it	cs
   1c756:	4618      	movcs	r0, r3
}
   1c758:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   1c75a:	2017      	movs	r0, #23
   1c75c:	e7fc      	b.n	1c758 <ble_att_chan_mtu+0x16>
   1c75e:	2017      	movs	r0, #23
   1c760:	e7fa      	b.n	1c758 <ble_att_chan_mtu+0x16>

0001c762 <ble_att_truncate_to_mtu>:
{
   1c762:	b510      	push	{r4, lr}
   1c764:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   1c766:	f7ff ffec 	bl	1c742 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   1c76a:	8a21      	ldrh	r1, [r4, #16]
   1c76c:	1a0b      	subs	r3, r1, r0
    if (extra_len > 0) {
   1c76e:	2b00      	cmp	r3, #0
   1c770:	dc00      	bgt.n	1c774 <ble_att_truncate_to_mtu+0x12>
}
   1c772:	bd10      	pop	{r4, pc}
        os_mbuf_adj(txom, -extra_len);
   1c774:	1a41      	subs	r1, r0, r1
   1c776:	4620      	mov	r0, r4
   1c778:	f7f0 ff53 	bl	d622 <os_mbuf_adj>
}
   1c77c:	e7f9      	b.n	1c772 <ble_att_truncate_to_mtu+0x10>

0001c77e <ble_att_mtu>:
{
   1c77e:	b510      	push	{r4, lr}
   1c780:	b082      	sub	sp, #8
   1c782:	4604      	mov	r4, r0
    ble_hs_lock();
   1c784:	f005 f872 	bl	2186c <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1c788:	aa01      	add	r2, sp, #4
   1c78a:	4669      	mov	r1, sp
   1c78c:	4620      	mov	r0, r4
   1c78e:	f7ff fed0 	bl	1c532 <ble_att_conn_chan_find>
    if (rc == 0) {
   1c792:	b128      	cbz	r0, 1c7a0 <ble_att_mtu+0x22>
        mtu = 0;
   1c794:	2400      	movs	r4, #0
    ble_hs_unlock();
   1c796:	f005 f86d 	bl	21874 <ble_hs_unlock>
}
   1c79a:	4620      	mov	r0, r4
   1c79c:	b002      	add	sp, #8
   1c79e:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   1c7a0:	9801      	ldr	r0, [sp, #4]
   1c7a2:	f7ff ffce 	bl	1c742 <ble_att_chan_mtu>
   1c7a6:	4604      	mov	r4, r0
   1c7a8:	e7f5      	b.n	1c796 <ble_att_mtu+0x18>
	...

0001c7ac <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   1c7ac:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   1c7ae:	f007 f99f 	bl	23af0 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1c7b2:	4603      	mov	r3, r0
   1c7b4:	b138      	cbz	r0, 1c7c6 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   1c7b6:	2204      	movs	r2, #4
   1c7b8:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   1c7ba:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   1c7bc:	4a03      	ldr	r2, [pc, #12]	; (1c7cc <ble_att_create_chan+0x20>)
   1c7be:	8812      	ldrh	r2, [r2, #0]
   1c7c0:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   1c7c2:	4a03      	ldr	r2, [pc, #12]	; (1c7d0 <ble_att_create_chan+0x24>)
   1c7c4:	6182      	str	r2, [r0, #24]

    return chan;
}
   1c7c6:	4618      	mov	r0, r3
   1c7c8:	bd08      	pop	{r3, pc}
   1c7ca:	bf00      	nop
   1c7cc:	20002c0c 	.word	0x20002c0c
   1c7d0:	0001c4af 	.word	0x0001c4af

0001c7d4 <ble_att_init>:

int
ble_att_init(void)
{
   1c7d4:	b500      	push	{lr}
   1c7d6:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   1c7d8:	4b09      	ldr	r3, [pc, #36]	; (1c800 <ble_att_init+0x2c>)
   1c7da:	f44f 7280 	mov.w	r2, #256	; 0x100
   1c7de:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   1c7e0:	4b08      	ldr	r3, [pc, #32]	; (1c804 <ble_att_init+0x30>)
   1c7e2:	9301      	str	r3, [sp, #4]
   1c7e4:	2300      	movs	r3, #0
   1c7e6:	9300      	str	r3, [sp, #0]
   1c7e8:	2236      	movs	r2, #54	; 0x36
   1c7ea:	2104      	movs	r1, #4
   1c7ec:	4806      	ldr	r0, [pc, #24]	; (1c808 <ble_att_init+0x34>)
   1c7ee:	f7f5 fc9d 	bl	1212c <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   1c7f2:	b910      	cbnz	r0, 1c7fa <ble_att_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;
}
   1c7f4:	b003      	add	sp, #12
   1c7f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1c7fa:	200b      	movs	r0, #11
   1c7fc:	e7fa      	b.n	1c7f4 <ble_att_init+0x20>
   1c7fe:	bf00      	nop
   1c800:	20002c0c 	.word	0x20002c0c
   1c804:	0002ddc8 	.word	0x0002ddc8
   1c808:	20002c10 	.word	0x20002c10

0001c80c <ble_att_clt_rx_error>:
 * $error response                                                           *
 *****************************************************************************/

int
ble_att_clt_rx_error(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1c80c:	b570      	push	{r4, r5, r6, lr}
   1c80e:	4605      	mov	r5, r0
   1c810:	460c      	mov	r4, r1
    struct ble_att_error_rsp *rsp;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1c812:	2104      	movs	r1, #4
   1c814:	4620      	mov	r0, r4
   1c816:	f006 fe28 	bl	2346a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1c81a:	4606      	mov	r6, r0
   1c81c:	b108      	cbz	r0, 1c822 <ble_att_clt_rx_error+0x16>

    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
                     le16toh(rsp->baep_error_code));

    return 0;
}
   1c81e:	4630      	mov	r0, r6
   1c820:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   1c822:	6823      	ldr	r3, [r4, #0]
   1c824:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   1c826:	78da      	ldrb	r2, [r3, #3]
   1c828:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   1c82c:	4628      	mov	r0, r5
   1c82e:	f003 fea8 	bl	20582 <ble_gattc_rx_err>
    return 0;
   1c832:	e7f4      	b.n	1c81e <ble_att_clt_rx_error+0x12>

0001c834 <ble_att_clt_rx_mtu>:
    return rc;
}

int
ble_att_clt_rx_mtu(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1c834:	b570      	push	{r4, r5, r6, lr}
   1c836:	b082      	sub	sp, #8
   1c838:	4604      	mov	r4, r0
   1c83a:	460d      	mov	r5, r1
    uint16_t mtu;
    int rc;

    mtu = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   1c83c:	2102      	movs	r1, #2
   1c83e:	4628      	mov	r0, r5
   1c840:	f006 fe13 	bl	2346a <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   1c844:	b148      	cbz	r0, 1c85a <ble_att_clt_rx_mtu+0x26>
   1c846:	4606      	mov	r6, r0
    mtu = 0;
   1c848:	2500      	movs	r5, #0
        if (rc == 0) {
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
        }
    }

    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   1c84a:	462a      	mov	r2, r5
   1c84c:	4631      	mov	r1, r6
   1c84e:	4620      	mov	r0, r4
   1c850:	f003 fead 	bl	205ae <ble_gattc_rx_mtu>
    return rc;
}
   1c854:	4630      	mov	r0, r6
   1c856:	b002      	add	sp, #8
   1c858:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1c85a:	682b      	ldr	r3, [r5, #0]
   1c85c:	681d      	ldr	r5, [r3, #0]
        ble_hs_lock();
   1c85e:	f005 f805 	bl	2186c <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1c862:	aa01      	add	r2, sp, #4
   1c864:	2100      	movs	r1, #0
   1c866:	4620      	mov	r0, r4
   1c868:	f7ff fe63 	bl	1c532 <ble_att_conn_chan_find>
        if (rc == 0) {
   1c86c:	4606      	mov	r6, r0
   1c86e:	b150      	cbz	r0, 1c886 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   1c870:	2500      	movs	r5, #0
        ble_hs_unlock();
   1c872:	f004 ffff 	bl	21874 <ble_hs_unlock>
        if (rc == 0) {
   1c876:	2e00      	cmp	r6, #0
   1c878:	d1e7      	bne.n	1c84a <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1c87a:	462a      	mov	r2, r5
   1c87c:	2104      	movs	r1, #4
   1c87e:	4620      	mov	r0, r4
   1c880:	f002 fe97 	bl	1f5b2 <ble_gap_mtu_event>
   1c884:	e7e1      	b.n	1c84a <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   1c886:	8829      	ldrh	r1, [r5, #0]
   1c888:	9801      	ldr	r0, [sp, #4]
   1c88a:	f7ff ff55 	bl	1c738 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1c88e:	9801      	ldr	r0, [sp, #4]
   1c890:	f7ff ff57 	bl	1c742 <ble_att_chan_mtu>
   1c894:	4605      	mov	r5, r0
   1c896:	e7ec      	b.n	1c872 <ble_att_clt_rx_mtu+0x3e>

0001c898 <ble_att_clt_tx_find_info>:

    req->bafq_start_handle = htole16(start_handle);
    req->bafq_end_handle = htole16(end_handle);

    return ble_att_tx(conn_handle, txom);
}
   1c898:	2008      	movs	r0, #8
   1c89a:	4770      	bx	lr

0001c89c <ble_att_clt_rx_find_info>:

done:
    /* Notify GATT that response processing is done. */
    ble_gattc_rx_find_info_complete(conn_handle, rc);
    return rc;
}
   1c89c:	2008      	movs	r0, #8
   1c89e:	4770      	bx	lr

0001c8a0 <ble_att_clt_tx_find_type_value>:
    req->bavq_end_handle = htole16(end_handle);
    req->bavq_attr_type = htole16(attribute_type);
    memcpy(req->bavq_value, attribute_value, value_len);

    return ble_att_tx(conn_handle, txom);
}
   1c8a0:	2008      	movs	r0, #8
   1c8a2:	4770      	bx	lr

0001c8a4 <ble_att_clt_rx_find_type_value>:

    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);

    return 0;
}
   1c8a4:	2008      	movs	r0, #8
   1c8a6:	4770      	bx	lr

0001c8a8 <ble_att_clt_tx_read_type>:
    req->batq_end_handle = htole16(end_handle);

    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   1c8a8:	2008      	movs	r0, #8
   1c8aa:	4770      	bx	lr

0001c8ac <ble_att_clt_rx_read_type>:
done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_type_complete(conn_handle, rc);
    return rc;

}
   1c8ac:	2008      	movs	r0, #8
   1c8ae:	4770      	bx	lr

0001c8b0 <ble_att_clt_tx_read>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c8b0:	2008      	movs	r0, #8
   1c8b2:	4770      	bx	lr

0001c8b4 <ble_att_clt_rx_read>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
    return 0;
}
   1c8b4:	2008      	movs	r0, #8
   1c8b6:	4770      	bx	lr

0001c8b8 <ble_att_clt_tx_read_blob>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c8b8:	2008      	movs	r0, #8
   1c8ba:	4770      	bx	lr

0001c8bc <ble_att_clt_rx_read_blob>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
    return 0;
}
   1c8bc:	2008      	movs	r0, #8
   1c8be:	4770      	bx	lr

0001c8c0 <ble_att_clt_rx_read_mult>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
    return 0;
}
   1c8c0:	2008      	movs	r0, #8
   1c8c2:	4770      	bx	lr

0001c8c4 <ble_att_clt_tx_read_group_type>:
    req->bagq_start_handle = htole16(start_handle);
    req->bagq_end_handle = htole16(end_handle);
    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   1c8c4:	2008      	movs	r0, #8
   1c8c6:	4770      	bx	lr

0001c8c8 <ble_att_clt_rx_read_group_type>:

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
    return rc;
}
   1c8c8:	2008      	movs	r0, #8
   1c8ca:	4770      	bx	lr

0001c8cc <ble_att_clt_rx_write>:
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
    return 0;
}
   1c8cc:	2008      	movs	r0, #8
   1c8ce:	4770      	bx	lr

0001c8d0 <ble_att_clt_tx_prep_write>:
    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
    return rc;
}
   1c8d0:	2008      	movs	r0, #8
   1c8d2:	4770      	bx	lr

0001c8d4 <ble_att_clt_rx_prep_write>:

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
    return rc;
}
   1c8d4:	2008      	movs	r0, #8
   1c8d6:	4770      	bx	lr

0001c8d8 <ble_att_clt_tx_exec_write>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c8d8:	2008      	movs	r0, #8
   1c8da:	4770      	bx	lr

0001c8dc <ble_att_clt_rx_exec_write>:
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
    return 0;
}
   1c8dc:	2008      	movs	r0, #8
   1c8de:	4770      	bx	lr

0001c8e0 <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   1c8e0:	b570      	push	{r4, r5, r6, lr}
   1c8e2:	b082      	sub	sp, #8
   1c8e4:	4614      	mov	r4, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1c8e6:	b931      	cbnz	r1, 1c8f6 <ble_att_clt_tx_notify+0x16>
        rc = BLE_HS_EINVAL;
   1c8e8:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1c8ea:	4620      	mov	r0, r4
   1c8ec:	f7f0 fdc2 	bl	d474 <os_mbuf_free_chain>
    return rc;
}
   1c8f0:	4628      	mov	r0, r5
   1c8f2:	b002      	add	sp, #8
   1c8f4:	bd70      	pop	{r4, r5, r6, pc}
   1c8f6:	4605      	mov	r5, r0
   1c8f8:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   1c8fa:	aa01      	add	r2, sp, #4
   1c8fc:	2102      	movs	r1, #2
   1c8fe:	201b      	movs	r0, #27
   1c900:	f000 f846 	bl	1c990 <ble_att_cmd_get>
    if (req == NULL) {
   1c904:	b150      	cbz	r0, 1c91c <ble_att_clt_tx_notify+0x3c>
    req->banq_handle = htole16(handle);
   1c906:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1c908:	4621      	mov	r1, r4
   1c90a:	9801      	ldr	r0, [sp, #4]
   1c90c:	f7f0 ffbd 	bl	d88a <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1c910:	9901      	ldr	r1, [sp, #4]
   1c912:	4628      	mov	r0, r5
   1c914:	f000 f84a 	bl	1c9ac <ble_att_tx>
   1c918:	4605      	mov	r5, r0
   1c91a:	e7e9      	b.n	1c8f0 <ble_att_clt_tx_notify+0x10>
        rc = BLE_HS_ENOMEM;
   1c91c:	2506      	movs	r5, #6
   1c91e:	e7e4      	b.n	1c8ea <ble_att_clt_tx_notify+0xa>

0001c920 <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   1c920:	b570      	push	{r4, r5, r6, lr}
   1c922:	b082      	sub	sp, #8
   1c924:	4614      	mov	r4, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1c926:	b931      	cbnz	r1, 1c936 <ble_att_clt_tx_indicate+0x16>
        rc = BLE_HS_EINVAL;
   1c928:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1c92a:	4620      	mov	r0, r4
   1c92c:	f7f0 fda2 	bl	d474 <os_mbuf_free_chain>
    return rc;
}
   1c930:	4628      	mov	r0, r5
   1c932:	b002      	add	sp, #8
   1c934:	bd70      	pop	{r4, r5, r6, pc}
   1c936:	4605      	mov	r5, r0
   1c938:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   1c93a:	aa01      	add	r2, sp, #4
   1c93c:	2102      	movs	r1, #2
   1c93e:	201d      	movs	r0, #29
   1c940:	f000 f826 	bl	1c990 <ble_att_cmd_get>
    if (req == NULL) {
   1c944:	b150      	cbz	r0, 1c95c <ble_att_clt_tx_indicate+0x3c>
    req->baiq_handle = htole16(handle);
   1c946:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1c948:	4621      	mov	r1, r4
   1c94a:	9801      	ldr	r0, [sp, #4]
   1c94c:	f7f0 ff9d 	bl	d88a <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1c950:	9901      	ldr	r1, [sp, #4]
   1c952:	4628      	mov	r0, r5
   1c954:	f000 f82a 	bl	1c9ac <ble_att_tx>
   1c958:	4605      	mov	r5, r0
   1c95a:	e7e9      	b.n	1c930 <ble_att_clt_tx_indicate+0x10>
        rc = BLE_HS_ENOMEM;
   1c95c:	2506      	movs	r5, #6
   1c95e:	e7e4      	b.n	1c92a <ble_att_clt_tx_indicate+0xa>

0001c960 <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1c960:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gatts_rx_indicate_rsp(conn_handle);
   1c962:	f003 fe36 	bl	205d2 <ble_gatts_rx_indicate_rsp>
    return 0;
}
   1c966:	2000      	movs	r0, #0
   1c968:	bd08      	pop	{r3, pc}

0001c96a <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"

#if NIMBLE_BLE_CONNECT
void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   1c96a:	b570      	push	{r4, r5, r6, lr}
   1c96c:	4606      	mov	r6, r0
   1c96e:	4614      	mov	r4, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   1c970:	3101      	adds	r1, #1
   1c972:	b289      	uxth	r1, r1
   1c974:	4610      	mov	r0, r2
   1c976:	f7f0 ffaa 	bl	d8ce <os_mbuf_extend>
   1c97a:	b120      	cbz	r0, 1c986 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   1c97c:	6825      	ldr	r5, [r4, #0]
   1c97e:	f805 6b01 	strb.w	r6, [r5], #1

    return hdr->data;
}
   1c982:	4628      	mov	r0, r5
   1c984:	bd70      	pop	{r4, r5, r6, pc}
   1c986:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   1c988:	4620      	mov	r0, r4
   1c98a:	f7f0 fd73 	bl	d474 <os_mbuf_free_chain>
        return NULL;
   1c98e:	e7f8      	b.n	1c982 <ble_att_cmd_prepare+0x18>

0001c990 <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1c990:	b570      	push	{r4, r5, r6, lr}
   1c992:	4605      	mov	r5, r0
   1c994:	460e      	mov	r6, r1
   1c996:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   1c998:	f006 fd48 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
   1c99c:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   1c99e:	b120      	cbz	r0, 1c9aa <ble_att_cmd_get+0x1a>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   1c9a0:	4602      	mov	r2, r0
   1c9a2:	4631      	mov	r1, r6
   1c9a4:	4628      	mov	r0, r5
   1c9a6:	f7ff ffe0 	bl	1c96a <ble_att_cmd_prepare>
}
   1c9aa:	bd70      	pop	{r4, r5, r6, pc}

0001c9ac <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   1c9ac:	b530      	push	{r4, r5, lr}
   1c9ae:	b083      	sub	sp, #12
   1c9b0:	4605      	mov	r5, r0
   1c9b2:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   1c9b4:	680b      	ldr	r3, [r1, #0]
   1c9b6:	7818      	ldrb	r0, [r3, #0]
   1c9b8:	f7ff fdc2 	bl	1c540 <ble_att_inc_tx_stat>

    ble_hs_lock();
   1c9bc:	f004 ff56 	bl	2186c <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   1c9c0:	ab01      	add	r3, sp, #4
   1c9c2:	466a      	mov	r2, sp
   1c9c4:	2104      	movs	r1, #4
   1c9c6:	4628      	mov	r0, r5
   1c9c8:	f006 fd92 	bl	234f0 <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   1c9cc:	b140      	cbz	r0, 1c9e0 <ble_att_tx+0x34>
   1c9ce:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   1c9d0:	4620      	mov	r0, r4
   1c9d2:	f7f0 fd4f 	bl	d474 <os_mbuf_free_chain>
    } else {
        ble_att_truncate_to_mtu(chan, txom);
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    ble_hs_unlock();
   1c9d6:	f004 ff4d 	bl	21874 <ble_hs_unlock>

    return rc;
}
   1c9da:	4628      	mov	r0, r5
   1c9dc:	b003      	add	sp, #12
   1c9de:	bd30      	pop	{r4, r5, pc}
        ble_att_truncate_to_mtu(chan, txom);
   1c9e0:	4621      	mov	r1, r4
   1c9e2:	9801      	ldr	r0, [sp, #4]
   1c9e4:	f7ff febd 	bl	1c762 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   1c9e8:	4622      	mov	r2, r4
   1c9ea:	9901      	ldr	r1, [sp, #4]
   1c9ec:	9800      	ldr	r0, [sp, #0]
   1c9ee:	f007 f979 	bl	23ce4 <ble_l2cap_tx>
   1c9f2:	4605      	mov	r5, r0
   1c9f4:	e7ef      	b.n	1c9d6 <ble_att_tx+0x2a>
	...

0001c9f8 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   1c9f8:	4b02      	ldr	r3, [pc, #8]	; (1ca04 <ble_att_svr_next_id+0xc>)
   1c9fa:	8818      	ldrh	r0, [r3, #0]
   1c9fc:	3001      	adds	r0, #1
   1c9fe:	b280      	uxth	r0, r0
   1ca00:	8018      	strh	r0, [r3, #0]
}
   1ca02:	4770      	bx	lr
   1ca04:	20002d1c 	.word	0x20002d1c

0001ca08 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ca08:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1ca0a:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ca0c:	b16b      	cbz	r3, 1ca2a <ble_att_svr_prep_find_prev+0x22>
{
   1ca0e:	b410      	push	{r4}
   1ca10:	e002      	b.n	1ca18 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   1ca12:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ca14:	681b      	ldr	r3, [r3, #0]
   1ca16:	b133      	cbz	r3, 1ca26 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   1ca18:	889c      	ldrh	r4, [r3, #4]
   1ca1a:	428c      	cmp	r4, r1
   1ca1c:	d803      	bhi.n	1ca26 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   1ca1e:	d1f8      	bne.n	1ca12 <ble_att_svr_prep_find_prev+0xa>
   1ca20:	88dc      	ldrh	r4, [r3, #6]
   1ca22:	4294      	cmp	r4, r2
   1ca24:	d9f5      	bls.n	1ca12 <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   1ca26:	bc10      	pop	{r4}
   1ca28:	4770      	bx	lr
   1ca2a:	4770      	bx	lr

0001ca2c <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ca2c:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1ca2e:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ca30:	b343      	cbz	r3, 1ca84 <ble_att_svr_prep_validate+0x58>
{
   1ca32:	b410      	push	{r4}
   1ca34:	e00b      	b.n	1ca4e <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   1ca36:	88da      	ldrh	r2, [r3, #6]
   1ca38:	b9ca      	cbnz	r2, 1ca6e <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   1ca3a:	88da      	ldrh	r2, [r3, #6]
   1ca3c:	6898      	ldr	r0, [r3, #8]
   1ca3e:	8a00      	ldrh	r0, [r0, #16]
   1ca40:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   1ca42:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1ca46:	dc16      	bgt.n	1ca76 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   1ca48:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ca4a:	681b      	ldr	r3, [r3, #0]
   1ca4c:	b1bb      	cbz	r3, 1ca7e <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   1ca4e:	2a00      	cmp	r2, #0
   1ca50:	d0f1      	beq.n	1ca36 <ble_att_svr_prep_validate+0xa>
   1ca52:	8894      	ldrh	r4, [r2, #4]
   1ca54:	8898      	ldrh	r0, [r3, #4]
   1ca56:	4284      	cmp	r4, r0
   1ca58:	d1ed      	bne.n	1ca36 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1ca5a:	88d4      	ldrh	r4, [r2, #6]
   1ca5c:	6892      	ldr	r2, [r2, #8]
   1ca5e:	8a12      	ldrh	r2, [r2, #16]
   1ca60:	4422      	add	r2, r4
                entry->bape_offset) {
   1ca62:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1ca64:	42a2      	cmp	r2, r4
   1ca66:	d0e8      	beq.n	1ca3a <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   1ca68:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1ca6a:	2007      	movs	r0, #7
   1ca6c:	e008      	b.n	1ca80 <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   1ca6e:	889b      	ldrh	r3, [r3, #4]
   1ca70:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1ca72:	2007      	movs	r0, #7
   1ca74:	e004      	b.n	1ca80 <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   1ca76:	889b      	ldrh	r3, [r3, #4]
   1ca78:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1ca7a:	200d      	movs	r0, #13
   1ca7c:	e000      	b.n	1ca80 <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   1ca7e:	2000      	movs	r0, #0
}
   1ca80:	bc10      	pop	{r4}
   1ca82:	4770      	bx	lr
    return 0;
   1ca84:	2000      	movs	r0, #0
}
   1ca86:	4770      	bx	lr

0001ca88 <ble_att_svr_entry_alloc>:
{
   1ca88:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   1ca8a:	4806      	ldr	r0, [pc, #24]	; (1caa4 <ble_att_svr_entry_alloc+0x1c>)
   1ca8c:	f7f1 f8cf 	bl	dc2e <os_memblock_get>
    if (entry != NULL) {
   1ca90:	4603      	mov	r3, r0
   1ca92:	b128      	cbz	r0, 1caa0 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   1ca94:	2200      	movs	r2, #0
   1ca96:	6002      	str	r2, [r0, #0]
   1ca98:	6042      	str	r2, [r0, #4]
   1ca9a:	6082      	str	r2, [r0, #8]
   1ca9c:	60c2      	str	r2, [r0, #12]
   1ca9e:	6102      	str	r2, [r0, #16]
}
   1caa0:	4618      	mov	r0, r3
   1caa2:	bd08      	pop	{r3, pc}
   1caa4:	20002cf8 	.word	0x20002cf8

0001caa8 <ble_att_svr_get_sec_state>:
{
   1caa8:	b538      	push	{r3, r4, r5, lr}
   1caaa:	4605      	mov	r5, r0
   1caac:	460c      	mov	r4, r1
    ble_hs_lock();
   1caae:	f004 fedd 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   1cab2:	4628      	mov	r0, r5
   1cab4:	f005 fd50 	bl	22558 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   1cab8:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1caba:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1cabc:	f004 feda 	bl	21874 <ble_hs_unlock>
}
   1cac0:	bd38      	pop	{r3, r4, r5, pc}

0001cac2 <ble_att_svr_check_perms>:
{
   1cac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cac6:	b0a6      	sub	sp, #152	; 0x98
   1cac8:	4605      	mov	r5, r0
   1caca:	4614      	mov	r4, r2
   1cacc:	461e      	mov	r6, r3
    if (is_read) {
   1cace:	b389      	cbz	r1, 1cb34 <ble_att_svr_check_perms+0x72>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   1cad0:	7a11      	ldrb	r1, [r2, #8]
   1cad2:	f011 0f01 	tst.w	r1, #1
   1cad6:	d029      	beq.n	1cb2c <ble_att_svr_check_perms+0x6a>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   1cad8:	f001 0704 	and.w	r7, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   1cadc:	f001 0808 	and.w	r8, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   1cae0:	f001 0010 	and.w	r0, r1, #16
    if (!enc && !authen && !author) {
   1cae4:	b91f      	cbnz	r7, 1caee <ble_att_svr_check_perms+0x2c>
   1cae6:	f1b8 0f00 	cmp.w	r8, #0
   1caea:	d100      	bne.n	1caee <ble_att_svr_check_perms+0x2c>
   1caec:	b1d8      	cbz	r0, 1cb26 <ble_att_svr_check_perms+0x64>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1caee:	a925      	add	r1, sp, #148	; 0x94
   1caf0:	4628      	mov	r0, r5
   1caf2:	f7ff ffd9 	bl	1caa8 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   1caf6:	b917      	cbnz	r7, 1cafe <ble_att_svr_check_perms+0x3c>
   1caf8:	f1b8 0f00 	cmp.w	r8, #0
   1cafc:	d004      	beq.n	1cb08 <ble_att_svr_check_perms+0x46>
   1cafe:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1cb02:	f013 0f01 	tst.w	r3, #1
   1cb06:	d024      	beq.n	1cb52 <ble_att_svr_check_perms+0x90>
    if (authen && !sec_state.authenticated) {
   1cb08:	f1b8 0f00 	cmp.w	r8, #0
   1cb0c:	d004      	beq.n	1cb18 <ble_att_svr_check_perms+0x56>
   1cb0e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1cb12:	f013 0f02 	tst.w	r3, #2
   1cb16:	d050      	beq.n	1cbba <ble_att_svr_check_perms+0xf8>
    if (entry->ha_min_key_size > sec_state.key_size) {
   1cb18:	7a63      	ldrb	r3, [r4, #9]
   1cb1a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   1cb1e:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   1cb22:	d84f      	bhi.n	1cbc4 <ble_att_svr_check_perms+0x102>
    return 0;
   1cb24:	2000      	movs	r0, #0
}
   1cb26:	b026      	add	sp, #152	; 0x98
   1cb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   1cb2c:	2302      	movs	r3, #2
   1cb2e:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   1cb30:	2010      	movs	r0, #16
   1cb32:	e7f8      	b.n	1cb26 <ble_att_svr_check_perms+0x64>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   1cb34:	7a11      	ldrb	r1, [r2, #8]
   1cb36:	f011 0f02 	tst.w	r1, #2
   1cb3a:	d006      	beq.n	1cb4a <ble_att_svr_check_perms+0x88>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   1cb3c:	f001 0720 	and.w	r7, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   1cb40:	f001 0840 	and.w	r8, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   1cb44:	f001 0080 	and.w	r0, r1, #128	; 0x80
   1cb48:	e7cc      	b.n	1cae4 <ble_att_svr_check_perms+0x22>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   1cb4a:	2303      	movs	r3, #3
   1cb4c:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   1cb4e:	2010      	movs	r0, #16
   1cb50:	e7e9      	b.n	1cb26 <ble_att_svr_check_perms+0x64>
        ble_hs_lock();
   1cb52:	f004 fe8b 	bl	2186c <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   1cb56:	4628      	mov	r0, r5
   1cb58:	f005 fce6 	bl	22528 <ble_hs_conn_find>
        if (conn != NULL) {
   1cb5c:	b1a8      	cbz	r0, 1cb8a <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   1cb5e:	a901      	add	r1, sp, #4
   1cb60:	f005 fd1a 	bl	22598 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   1cb64:	2300      	movs	r3, #0
   1cb66:	9309      	str	r3, [sp, #36]	; 0x24
   1cb68:	930a      	str	r3, [sp, #40]	; 0x28
   1cb6a:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb6c:	930c      	str	r3, [sp, #48]	; 0x30
   1cb6e:	930d      	str	r3, [sp, #52]	; 0x34
   1cb70:	930e      	str	r3, [sp, #56]	; 0x38
   1cb72:	930f      	str	r3, [sp, #60]	; 0x3c
            key_sec.peer_addr = addrs.peer_id_addr;
   1cb74:	f8dd 000b 	ldr.w	r0, [sp, #11]
   1cb78:	9008      	str	r0, [sp, #32]
   1cb7a:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   1cb7e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1cb82:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   1cb86:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   1cb8a:	f004 fe73 	bl	21874 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   1cb8e:	a910      	add	r1, sp, #64	; 0x40
   1cb90:	a808      	add	r0, sp, #32
   1cb92:	f009 fa7c 	bl	2608e <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   1cb96:	b938      	cbnz	r0, 1cba8 <ble_att_svr_check_perms+0xe6>
   1cb98:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1cb9c:	f013 0f01 	tst.w	r3, #1
   1cba0:	d002      	beq.n	1cba8 <ble_att_svr_check_perms+0xe6>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   1cba2:	230f      	movs	r3, #15
   1cba4:	7033      	strb	r3, [r6, #0]
   1cba6:	e001      	b.n	1cbac <ble_att_svr_check_perms+0xea>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1cba8:	2305      	movs	r3, #5
   1cbaa:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1cbac:	7830      	ldrb	r0, [r6, #0]
   1cbae:	b110      	cbz	r0, 1cbb6 <ble_att_svr_check_perms+0xf4>
   1cbb0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1cbb4:	e7b7      	b.n	1cb26 <ble_att_svr_check_perms+0x64>
   1cbb6:	2000      	movs	r0, #0
   1cbb8:	e7b5      	b.n	1cb26 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1cbba:	2305      	movs	r3, #5
   1cbbc:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1cbbe:	f240 1005 	movw	r0, #261	; 0x105
   1cbc2:	e7b0      	b.n	1cb26 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   1cbc4:	230c      	movs	r3, #12
   1cbc6:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   1cbc8:	f44f 7086 	mov.w	r0, #268	; 0x10c
   1cbcc:	e7ab      	b.n	1cb26 <ble_att_svr_check_perms+0x64>

0001cbce <ble_att_svr_read>:
{
   1cbce:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cbd0:	b087      	sub	sp, #28
   1cbd2:	4606      	mov	r6, r0
   1cbd4:	460c      	mov	r4, r1
   1cbd6:	4615      	mov	r5, r2
   1cbd8:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   1cbda:	2300      	movs	r3, #0
   1cbdc:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1cbe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cbe4:	4298      	cmp	r0, r3
   1cbe6:	d10e      	bne.n	1cc06 <ble_att_svr_read+0x38>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1cbe8:	68e7      	ldr	r7, [r4, #12]
   1cbea:	6923      	ldr	r3, [r4, #16]
   1cbec:	9301      	str	r3, [sp, #4]
   1cbee:	ab03      	add	r3, sp, #12
   1cbf0:	9300      	str	r3, [sp, #0]
   1cbf2:	462b      	mov	r3, r5
   1cbf4:	2201      	movs	r2, #1
   1cbf6:	8961      	ldrh	r1, [r4, #10]
   1cbf8:	4630      	mov	r0, r6
   1cbfa:	47b8      	blx	r7
    if (rc != 0) {
   1cbfc:	4603      	mov	r3, r0
   1cbfe:	b960      	cbnz	r0, 1cc1a <ble_att_svr_read+0x4c>
}
   1cc00:	4618      	mov	r0, r3
   1cc02:	b007      	add	sp, #28
   1cc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   1cc06:	f10d 0317 	add.w	r3, sp, #23
   1cc0a:	460a      	mov	r2, r1
   1cc0c:	2101      	movs	r1, #1
   1cc0e:	f7ff ff58 	bl	1cac2 <ble_att_svr_check_perms>
        if (rc != 0) {
   1cc12:	4603      	mov	r3, r0
   1cc14:	2800      	cmp	r0, #0
   1cc16:	d0e7      	beq.n	1cbe8 <ble_att_svr_read+0x1a>
   1cc18:	e002      	b.n	1cc20 <ble_att_svr_read+0x52>
        att_err = rc;
   1cc1a:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   1cc1e:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   1cc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cc22:	2a00      	cmp	r2, #0
   1cc24:	d0ec      	beq.n	1cc00 <ble_att_svr_read+0x32>
        *out_att_err = att_err;
   1cc26:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1cc2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1cc2c:	700a      	strb	r2, [r1, #0]
   1cc2e:	e7e7      	b.n	1cc00 <ble_att_svr_read+0x32>

0001cc30 <ble_att_svr_write>:
{
   1cc30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc34:	b085      	sub	sp, #20
   1cc36:	4605      	mov	r5, r0
   1cc38:	460c      	mov	r4, r1
   1cc3a:	4616      	mov	r6, r2
   1cc3c:	4698      	mov	r8, r3
   1cc3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   1cc40:	2200      	movs	r2, #0
   1cc42:	f88d 200f 	strb.w	r2, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1cc46:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cc4a:	4290      	cmp	r0, r2
   1cc4c:	d114      	bne.n	1cc78 <ble_att_svr_write+0x48>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1cc4e:	f8d4 900c 	ldr.w	r9, [r4, #12]
   1cc52:	6923      	ldr	r3, [r4, #16]
   1cc54:	9301      	str	r3, [sp, #4]
   1cc56:	f8cd 8000 	str.w	r8, [sp]
   1cc5a:	4633      	mov	r3, r6
   1cc5c:	2202      	movs	r2, #2
   1cc5e:	8961      	ldrh	r1, [r4, #10]
   1cc60:	4628      	mov	r0, r5
   1cc62:	47c8      	blx	r9
    if (rc != 0) {
   1cc64:	4602      	mov	r2, r0
   1cc66:	b988      	cbnz	r0, 1cc8c <ble_att_svr_write+0x5c>
    if (out_att_err != NULL) {
   1cc68:	b117      	cbz	r7, 1cc70 <ble_att_svr_write+0x40>
        *out_att_err = att_err;
   1cc6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1cc6e:	703b      	strb	r3, [r7, #0]
}
   1cc70:	4610      	mov	r0, r2
   1cc72:	b005      	add	sp, #20
   1cc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   1cc78:	f10d 030f 	add.w	r3, sp, #15
   1cc7c:	460a      	mov	r2, r1
   1cc7e:	2100      	movs	r1, #0
   1cc80:	f7ff ff1f 	bl	1cac2 <ble_att_svr_check_perms>
        if (rc != 0) {
   1cc84:	4602      	mov	r2, r0
   1cc86:	2800      	cmp	r0, #0
   1cc88:	d0e1      	beq.n	1cc4e <ble_att_svr_write+0x1e>
   1cc8a:	e7ed      	b.n	1cc68 <ble_att_svr_write+0x38>
        att_err = rc;
   1cc8c:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   1cc90:	2209      	movs	r2, #9
        goto done;
   1cc92:	e7e9      	b.n	1cc68 <ble_att_svr_write+0x38>

0001cc94 <ble_att_svr_pullup_req_base>:
{
   1cc94:	b510      	push	{r4, lr}
   1cc96:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   1cc98:	f006 fbe7 	bl	2346a <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   1cc9c:	2806      	cmp	r0, #6
   1cc9e:	d003      	beq.n	1cca8 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   1cca0:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   1cca2:	b104      	cbz	r4, 1cca6 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   1cca4:	7023      	strb	r3, [r4, #0]
}
   1cca6:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cca8:	2311      	movs	r3, #17
   1ccaa:	e7fa      	b.n	1cca2 <ble_att_svr_pullup_req_base+0xe>

0001ccac <ble_att_svr_build_mtu_rsp>:
{
   1ccac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ccb0:	b083      	sub	sp, #12
   1ccb2:	4606      	mov	r6, r0
   1ccb4:	460f      	mov	r7, r1
   1ccb6:	4615      	mov	r5, r2
   1ccb8:	461c      	mov	r4, r3
   1ccba:	f04f 0800 	mov.w	r8, #0
    *att_err = 0; /* Silence unnecessary warning. */
   1ccbe:	f883 8000 	strb.w	r8, [r3]
    ble_hs_lock();
   1ccc2:	f004 fdd3 	bl	2186c <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1ccc6:	aa01      	add	r2, sp, #4
   1ccc8:	4641      	mov	r1, r8
   1ccca:	4630      	mov	r0, r6
   1cccc:	f7ff fc31 	bl	1c532 <ble_att_conn_chan_find>
    if (rc == 0) {
   1ccd0:	4681      	mov	r9, r0
   1ccd2:	b910      	cbnz	r0, 1ccda <ble_att_svr_build_mtu_rsp+0x2e>
        mtu = chan->my_mtu;
   1ccd4:	9b01      	ldr	r3, [sp, #4]
   1ccd6:	f8b3 800a 	ldrh.w	r8, [r3, #10]
    ble_hs_unlock();
   1ccda:	f004 fdcb 	bl	21874 <ble_hs_unlock>
    if (rc != 0) {
   1ccde:	f1b9 0f00 	cmp.w	r9, #0
   1cce2:	d005      	beq.n	1ccf0 <ble_att_svr_build_mtu_rsp+0x44>
    txom = NULL;
   1cce4:	2600      	movs	r6, #0
    *out_txom = txom;
   1cce6:	602e      	str	r6, [r5, #0]
}
   1cce8:	4648      	mov	r0, r9
   1ccea:	b003      	add	sp, #12
   1ccec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   1ccf0:	683e      	ldr	r6, [r7, #0]
    *rxom = NULL;
   1ccf2:	2300      	movs	r3, #0
   1ccf4:	603b      	str	r3, [r7, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ccf6:	8a31      	ldrh	r1, [r6, #16]
   1ccf8:	4630      	mov	r0, r6
   1ccfa:	f7f0 fc92 	bl	d622 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   1ccfe:	4632      	mov	r2, r6
   1cd00:	2102      	movs	r1, #2
   1cd02:	2003      	movs	r0, #3
   1cd04:	f7ff fe31 	bl	1c96a <ble_att_cmd_prepare>
    if (cmd == NULL) {
   1cd08:	b110      	cbz	r0, 1cd10 <ble_att_svr_build_mtu_rsp+0x64>
    cmd->bamc_mtu = htole16(mtu);
   1cd0a:	f8a0 8000 	strh.w	r8, [r0]
    rc = 0;
   1cd0e:	e7ea      	b.n	1cce6 <ble_att_svr_build_mtu_rsp+0x3a>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cd10:	2311      	movs	r3, #17
   1cd12:	7023      	strb	r3, [r4, #0]
        rc = BLE_HS_ENOMEM;
   1cd14:	f04f 0906 	mov.w	r9, #6
        goto done;
   1cd18:	e7e5      	b.n	1cce6 <ble_att_svr_build_mtu_rsp+0x3a>

0001cd1a <ble_att_svr_pkt>:
{
   1cd1a:	b570      	push	{r4, r5, r6, lr}
   1cd1c:	4606      	mov	r6, r0
   1cd1e:	460c      	mov	r4, r1
   1cd20:	4615      	mov	r5, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   1cd22:	f006 fb83 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
   1cd26:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   1cd28:	b108      	cbz	r0, 1cd2e <ble_att_svr_pkt+0x14>
        return 0;
   1cd2a:	2000      	movs	r0, #0
}
   1cd2c:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   1cd2e:	6833      	ldr	r3, [r6, #0]
   1cd30:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   1cd32:	2300      	movs	r3, #0
   1cd34:	6033      	str	r3, [r6, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cd36:	2311      	movs	r3, #17
   1cd38:	702b      	strb	r3, [r5, #0]
    return BLE_HS_ENOMEM;
   1cd3a:	2006      	movs	r0, #6
   1cd3c:	e7f6      	b.n	1cd2c <ble_att_svr_pkt+0x12>

0001cd3e <ble_att_svr_build_write_rsp>:
{
   1cd3e:	b570      	push	{r4, r5, r6, lr}
   1cd40:	b082      	sub	sp, #8
   1cd42:	460c      	mov	r4, r1
   1cd44:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1cd46:	a901      	add	r1, sp, #4
   1cd48:	f7ff ffe7 	bl	1cd1a <ble_att_svr_pkt>
    if (rc != 0) {
   1cd4c:	4606      	mov	r6, r0
   1cd4e:	b120      	cbz	r0, 1cd5a <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   1cd50:	9b01      	ldr	r3, [sp, #4]
   1cd52:	6023      	str	r3, [r4, #0]
}
   1cd54:	4630      	mov	r0, r6
   1cd56:	b002      	add	sp, #8
   1cd58:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   1cd5a:	9a01      	ldr	r2, [sp, #4]
   1cd5c:	2100      	movs	r1, #0
   1cd5e:	2013      	movs	r0, #19
   1cd60:	f7ff fe03 	bl	1c96a <ble_att_cmd_prepare>
   1cd64:	2800      	cmp	r0, #0
   1cd66:	d1f3      	bne.n	1cd50 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cd68:	2311      	movs	r3, #17
   1cd6a:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1cd6c:	2606      	movs	r6, #6
        goto done;
   1cd6e:	e7ef      	b.n	1cd50 <ble_att_svr_build_write_rsp+0x12>

0001cd70 <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   1cd70:	b570      	push	{r4, r5, r6, lr}
   1cd72:	b082      	sub	sp, #8
   1cd74:	460c      	mov	r4, r1
   1cd76:	4615      	mov	r5, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1cd78:	a901      	add	r1, sp, #4
   1cd7a:	f7ff ffce 	bl	1cd1a <ble_att_svr_pkt>
    if (rc != 0) {
   1cd7e:	4606      	mov	r6, r0
   1cd80:	b120      	cbz	r0, 1cd8c <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   1cd82:	9b01      	ldr	r3, [sp, #4]
   1cd84:	6023      	str	r3, [r4, #0]
    return rc;
}
   1cd86:	4630      	mov	r0, r6
   1cd88:	b002      	add	sp, #8
   1cd8a:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   1cd8c:	9a01      	ldr	r2, [sp, #4]
   1cd8e:	2100      	movs	r1, #0
   1cd90:	201e      	movs	r0, #30
   1cd92:	f7ff fdea 	bl	1c96a <ble_att_cmd_prepare>
   1cd96:	2800      	cmp	r0, #0
   1cd98:	d1f3      	bne.n	1cd82 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cd9a:	2311      	movs	r3, #17
   1cd9c:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1cd9e:	2606      	movs	r6, #6
        goto done;
   1cda0:	e7ef      	b.n	1cd82 <ble_att_svr_build_indicate_rsp+0x12>
	...

0001cda4 <ble_att_svr_fill_info>:
{
   1cda4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cda8:	4680      	mov	r8, r0
   1cdaa:	460f      	mov	r7, r1
   1cdac:	4691      	mov	r9, r2
   1cdae:	469b      	mov	fp, r3
   1cdb0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    *format = 0;
   1cdb4:	2600      	movs	r6, #0
   1cdb6:	f88a 6000 	strb.w	r6, [sl]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1cdba:	4b20      	ldr	r3, [pc, #128]	; (1ce3c <ble_att_svr_fill_info+0x98>)
   1cdbc:	681c      	ldr	r4, [r3, #0]
   1cdbe:	e021      	b.n	1ce04 <ble_att_svr_fill_info+0x60>
                if (*format == 0) {
   1cdc0:	f89a 3000 	ldrb.w	r3, [sl]
   1cdc4:	b923      	cbnz	r3, 1cdd0 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   1cdc6:	2301      	movs	r3, #1
   1cdc8:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 4;
   1cdcc:	2104      	movs	r1, #4
   1cdce:	e006      	b.n	1cdde <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   1cdd0:	2b01      	cmp	r3, #1
   1cdd2:	d12a      	bne.n	1ce2a <ble_att_svr_fill_info+0x86>
                entry_sz = 4;
   1cdd4:	2104      	movs	r1, #4
   1cdd6:	e002      	b.n	1cdde <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   1cdd8:	2b02      	cmp	r3, #2
   1cdda:	d126      	bne.n	1ce2a <ble_att_svr_fill_info+0x86>
                entry_sz = 18;
   1cddc:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   1cdde:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   1cde2:	440b      	add	r3, r1
   1cde4:	455b      	cmp	r3, fp
   1cde6:	dc20      	bgt.n	1ce2a <ble_att_svr_fill_info+0x86>
            buf = os_mbuf_extend(om, entry_sz);
   1cde8:	4648      	mov	r0, r9
   1cdea:	f7f0 fd70 	bl	d8ce <os_mbuf_extend>
            if (buf == NULL) {
   1cdee:	4605      	mov	r5, r0
   1cdf0:	b1f8      	cbz	r0, 1ce32 <ble_att_svr_fill_info+0x8e>
            put_le16(buf + 0, ha->ha_handle_id);
   1cdf2:	8961      	ldrh	r1, [r4, #10]
   1cdf4:	f00d fed0 	bl	2ab98 <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   1cdf8:	1ca9      	adds	r1, r5, #2
   1cdfa:	6860      	ldr	r0, [r4, #4]
   1cdfc:	f009 fb60 	bl	264c0 <ble_uuid_flat>
            num_entries++;
   1ce00:	3601      	adds	r6, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1ce02:	6824      	ldr	r4, [r4, #0]
   1ce04:	b18c      	cbz	r4, 1ce2a <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id > end_handle) {
   1ce06:	8965      	ldrh	r5, [r4, #10]
   1ce08:	42bd      	cmp	r5, r7
   1ce0a:	d80e      	bhi.n	1ce2a <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id >= start_handle) {
   1ce0c:	4545      	cmp	r5, r8
   1ce0e:	d3f8      	bcc.n	1ce02 <ble_att_svr_fill_info+0x5e>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   1ce10:	6863      	ldr	r3, [r4, #4]
   1ce12:	781b      	ldrb	r3, [r3, #0]
   1ce14:	2b10      	cmp	r3, #16
   1ce16:	d0d3      	beq.n	1cdc0 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   1ce18:	f89a 3000 	ldrb.w	r3, [sl]
   1ce1c:	2b00      	cmp	r3, #0
   1ce1e:	d1db      	bne.n	1cdd8 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   1ce20:	2302      	movs	r3, #2
   1ce22:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 18;
   1ce26:	2112      	movs	r1, #18
   1ce28:	e7d9      	b.n	1cdde <ble_att_svr_fill_info+0x3a>
    if (rc == 0 && num_entries == 0) {
   1ce2a:	b126      	cbz	r6, 1ce36 <ble_att_svr_fill_info+0x92>
   1ce2c:	2000      	movs	r0, #0
}
   1ce2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rc = BLE_HS_ENOMEM;
   1ce32:	2006      	movs	r0, #6
        return rc;
   1ce34:	e7fb      	b.n	1ce2e <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   1ce36:	2005      	movs	r0, #5
   1ce38:	e7f9      	b.n	1ce2e <ble_att_svr_fill_info+0x8a>
   1ce3a:	bf00      	nop
   1ce3c:	20002d20 	.word	0x20002d20

0001ce40 <ble_att_svr_build_find_info_rsp>:
{
   1ce40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce44:	b082      	sub	sp, #8
   1ce46:	4606      	mov	r6, r0
   1ce48:	460d      	mov	r5, r1
   1ce4a:	4617      	mov	r7, r2
    txom = *rxom;
   1ce4c:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   1ce4e:	2100      	movs	r1, #0
   1ce50:	6019      	str	r1, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ce52:	8a21      	ldrh	r1, [r4, #16]
   1ce54:	4620      	mov	r0, r4
   1ce56:	f7f0 fbe4 	bl	d622 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   1ce5a:	4622      	mov	r2, r4
   1ce5c:	2101      	movs	r1, #1
   1ce5e:	2005      	movs	r0, #5
   1ce60:	f7ff fd83 	bl	1c96a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1ce64:	b188      	cbz	r0, 1ce8a <ble_att_svr_build_find_info_rsp+0x4a>
   1ce66:	4680      	mov	r8, r0
    mtu = ble_att_mtu(conn_handle);
   1ce68:	4630      	mov	r0, r6
   1ce6a:	f7ff fc88 	bl	1c77e <ble_att_mtu>
   1ce6e:	4603      	mov	r3, r0
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   1ce70:	f8cd 8000 	str.w	r8, [sp]
   1ce74:	4622      	mov	r2, r4
   1ce76:	4639      	mov	r1, r7
   1ce78:	4628      	mov	r0, r5
   1ce7a:	f7ff ff93 	bl	1cda4 <ble_att_svr_fill_info>
    if (rc != 0) {
   1ce7e:	b948      	cbnz	r0, 1ce94 <ble_att_svr_build_find_info_rsp+0x54>
    *out_txom = txom;
   1ce80:	9b08      	ldr	r3, [sp, #32]
   1ce82:	601c      	str	r4, [r3, #0]
}
   1ce84:	b002      	add	sp, #8
   1ce86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ce8a:	2311      	movs	r3, #17
   1ce8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce8e:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1ce90:	2006      	movs	r0, #6
        goto done;
   1ce92:	e7f5      	b.n	1ce80 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1ce94:	230a      	movs	r3, #10
   1ce96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ce98:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   1ce9a:	2005      	movs	r0, #5
        goto done;
   1ce9c:	e7f0      	b.n	1ce80 <ble_att_svr_build_find_info_rsp+0x40>

0001ce9e <ble_att_svr_read_group_type_entry_write>:
{
   1ce9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cea2:	460c      	mov	r4, r1
   1cea4:	4617      	mov	r7, r2
   1cea6:	461e      	mov	r6, r3
   1cea8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   1ceac:	f898 3000 	ldrb.w	r3, [r8]
   1ceb0:	2b10      	cmp	r3, #16
   1ceb2:	d016      	beq.n	1cee2 <ble_att_svr_read_group_type_entry_write+0x44>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1ceb4:	2114      	movs	r1, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   1ceb6:	8a05      	ldrh	r5, [r0, #16]
   1ceb8:	440d      	add	r5, r1
   1ceba:	42a5      	cmp	r5, r4
   1cebc:	dc13      	bgt.n	1cee6 <ble_att_svr_read_group_type_entry_write+0x48>
    buf = os_mbuf_extend(om, len);
   1cebe:	f7f0 fd06 	bl	d8ce <os_mbuf_extend>
    if (buf == NULL) {
   1cec2:	4604      	mov	r4, r0
   1cec4:	b188      	cbz	r0, 1ceea <ble_att_svr_read_group_type_entry_write+0x4c>
    put_le16(buf + 0, start_group_handle);
   1cec6:	4639      	mov	r1, r7
   1cec8:	f00d fe66 	bl	2ab98 <put_le16>
    put_le16(buf + 2, end_group_handle);
   1cecc:	4631      	mov	r1, r6
   1cece:	1ca0      	adds	r0, r4, #2
   1ced0:	f00d fe62 	bl	2ab98 <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   1ced4:	1d21      	adds	r1, r4, #4
   1ced6:	4640      	mov	r0, r8
   1ced8:	f009 faf2 	bl	264c0 <ble_uuid_flat>
    return 0;
   1cedc:	2000      	movs	r0, #0
}
   1cede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1cee2:	2106      	movs	r1, #6
   1cee4:	e7e7      	b.n	1ceb6 <ble_att_svr_read_group_type_entry_write+0x18>
        return BLE_HS_EMSGSIZE;
   1cee6:	2004      	movs	r0, #4
   1cee8:	e7f9      	b.n	1cede <ble_att_svr_read_group_type_entry_write+0x40>
        return BLE_HS_ENOMEM;
   1ceea:	2006      	movs	r0, #6
   1ceec:	e7f7      	b.n	1cede <ble_att_svr_read_group_type_entry_write+0x40>

0001ceee <ble_att_svr_is_valid_find_group_type>:
{
   1ceee:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1cef0:	f009 faac 	bl	2644c <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1cef4:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   1cef8:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1cefa:	2b01      	cmp	r3, #1
   1cefc:	d907      	bls.n	1cf0e <ble_att_svr_is_valid_find_group_type+0x20>
   1cefe:	f642 0303 	movw	r3, #10243	; 0x2803
   1cf02:	4298      	cmp	r0, r3
   1cf04:	d001      	beq.n	1cf0a <ble_att_svr_is_valid_find_group_type+0x1c>
   1cf06:	2000      	movs	r0, #0
   1cf08:	e002      	b.n	1cf10 <ble_att_svr_is_valid_find_group_type+0x22>
   1cf0a:	2001      	movs	r0, #1
   1cf0c:	e000      	b.n	1cf10 <ble_att_svr_is_valid_find_group_type+0x22>
   1cf0e:	2001      	movs	r0, #1
}
   1cf10:	bd08      	pop	{r3, pc}

0001cf12 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   1cf12:	7803      	ldrb	r3, [r0, #0]
   1cf14:	2b10      	cmp	r3, #16
   1cf16:	d126      	bne.n	1cf66 <ble_att_svr_is_valid_group_end+0x54>
{
   1cf18:	b510      	push	{r4, lr}
   1cf1a:	460c      	mov	r4, r1
    if (uuid->type != BLE_UUID_TYPE_16) {
   1cf1c:	780b      	ldrb	r3, [r1, #0]
   1cf1e:	2b10      	cmp	r3, #16
   1cf20:	d001      	beq.n	1cf26 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   1cf22:	2000      	movs	r0, #0
}
   1cf24:	bd10      	pop	{r4, pc}
    switch (ble_uuid_u16(uuid_group)) {
   1cf26:	f009 fa91 	bl	2644c <ble_uuid_u16>
   1cf2a:	f642 0301 	movw	r3, #10241	; 0x2801
   1cf2e:	4298      	cmp	r0, r3
   1cf30:	d907      	bls.n	1cf42 <ble_att_svr_is_valid_group_end+0x30>
   1cf32:	f642 0303 	movw	r3, #10243	; 0x2803
   1cf36:	4298      	cmp	r0, r3
   1cf38:	d108      	bne.n	1cf4c <ble_att_svr_is_valid_group_end+0x3a>
        return ble_att_svr_is_valid_find_group_type(uuid);
   1cf3a:	4620      	mov	r0, r4
   1cf3c:	f7ff ffd7 	bl	1ceee <ble_att_svr_is_valid_find_group_type>
   1cf40:	e7f0      	b.n	1cf24 <ble_att_svr_is_valid_group_end+0x12>
    switch (ble_uuid_u16(uuid_group)) {
   1cf42:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   1cf46:	d203      	bcs.n	1cf50 <ble_att_svr_is_valid_group_end+0x3e>
   1cf48:	2001      	movs	r0, #1
   1cf4a:	e7eb      	b.n	1cf24 <ble_att_svr_is_valid_group_end+0x12>
   1cf4c:	2001      	movs	r0, #1
   1cf4e:	e7e9      	b.n	1cf24 <ble_att_svr_is_valid_group_end+0x12>
        uuid16 = ble_uuid_u16(uuid);
   1cf50:	4620      	mov	r0, r4
   1cf52:	f009 fa7b 	bl	2644c <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1cf56:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1cf5a:	b280      	uxth	r0, r0
   1cf5c:	2801      	cmp	r0, #1
   1cf5e:	bf8c      	ite	hi
   1cf60:	2000      	movhi	r0, #0
   1cf62:	2001      	movls	r0, #1
   1cf64:	e7de      	b.n	1cf24 <ble_att_svr_is_valid_group_end+0x12>
        return 1;
   1cf66:	2001      	movs	r0, #1
}
   1cf68:	4770      	bx	lr

0001cf6a <ble_att_svr_is_valid_read_group_type>:
{
   1cf6a:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1cf6c:	f009 fa6e 	bl	2644c <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1cf70:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1cf74:	b280      	uxth	r0, r0
}
   1cf76:	2801      	cmp	r0, #1
   1cf78:	bf8c      	ite	hi
   1cf7a:	2000      	movhi	r0, #0
   1cf7c:	2001      	movls	r0, #1
   1cf7e:	bd08      	pop	{r3, pc}

0001cf80 <ble_att_svr_read_flat>:
{
   1cf80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf84:	b082      	sub	sp, #8
   1cf86:	4604      	mov	r4, r0
   1cf88:	460d      	mov	r5, r1
   1cf8a:	4616      	mov	r6, r2
   1cf8c:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   1cf8e:	f006 fa4d 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   1cf92:	4607      	mov	r7, r0
   1cf94:	b300      	cbz	r0, 1cfd8 <ble_att_svr_read_flat+0x58>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1cf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf98:	9300      	str	r3, [sp, #0]
   1cf9a:	4603      	mov	r3, r0
   1cf9c:	4632      	mov	r2, r6
   1cf9e:	4629      	mov	r1, r5
   1cfa0:	4620      	mov	r0, r4
   1cfa2:	f7ff fe14 	bl	1cbce <ble_att_svr_read>
    if (rc != 0) {
   1cfa6:	4604      	mov	r4, r0
   1cfa8:	b950      	cbnz	r0, 1cfc0 <ble_att_svr_read_flat+0x40>
    len = OS_MBUF_PKTLEN(om);
   1cfaa:	8a3d      	ldrh	r5, [r7, #16]
    if (len > max_len) {
   1cfac:	4545      	cmp	r5, r8
   1cfae:	d80e      	bhi.n	1cfce <ble_att_svr_read_flat+0x4e>
    rc = os_mbuf_copydata(om, 0, len, dst);
   1cfb0:	9b08      	ldr	r3, [sp, #32]
   1cfb2:	462a      	mov	r2, r5
   1cfb4:	2100      	movs	r1, #0
   1cfb6:	4638      	mov	r0, r7
   1cfb8:	f7f0 fb06 	bl	d5c8 <os_mbuf_copydata>
    *out_len = len;
   1cfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cfbe:	801d      	strh	r5, [r3, #0]
    os_mbuf_free_chain(om);
   1cfc0:	4638      	mov	r0, r7
   1cfc2:	f7f0 fa57 	bl	d474 <os_mbuf_free_chain>
}
   1cfc6:	4620      	mov	r0, r4
   1cfc8:	b002      	add	sp, #8
   1cfca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   1cfce:	230e      	movs	r3, #14
   1cfd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cfd2:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   1cfd4:	2404      	movs	r4, #4
        goto done;
   1cfd6:	e7f3      	b.n	1cfc0 <ble_att_svr_read_flat+0x40>
        rc = BLE_HS_ENOMEM;
   1cfd8:	2406      	movs	r4, #6
   1cfda:	e7f1      	b.n	1cfc0 <ble_att_svr_read_flat+0x40>

0001cfdc <ble_att_svr_fill_type_value_entry>:
{
   1cfdc:	b530      	push	{r4, r5, lr}
   1cfde:	b083      	sub	sp, #12
   1cfe0:	4604      	mov	r4, r0
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   1cfe2:	8a00      	ldrh	r0, [r0, #16]
   1cfe4:	3004      	adds	r0, #4
    if (rsp_sz > mtu) {
   1cfe6:	4298      	cmp	r0, r3
   1cfe8:	dd02      	ble.n	1cff0 <ble_att_svr_fill_type_value_entry+0x14>
        return 0;
   1cfea:	2000      	movs	r0, #0
}
   1cfec:	b003      	add	sp, #12
   1cfee:	bd30      	pop	{r4, r5, pc}
   1cff0:	4615      	mov	r5, r2
    put_le16(&u16, first);
   1cff2:	f10d 0006 	add.w	r0, sp, #6
   1cff6:	f00d fdcf 	bl	2ab98 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1cffa:	2202      	movs	r2, #2
   1cffc:	f10d 0106 	add.w	r1, sp, #6
   1d000:	4620      	mov	r0, r4
   1d002:	f7f0 fa50 	bl	d4a6 <os_mbuf_append>
    if (rc != 0) {
   1d006:	b968      	cbnz	r0, 1d024 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   1d008:	4629      	mov	r1, r5
   1d00a:	f10d 0006 	add.w	r0, sp, #6
   1d00e:	f00d fdc3 	bl	2ab98 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1d012:	2202      	movs	r2, #2
   1d014:	f10d 0106 	add.w	r1, sp, #6
   1d018:	4620      	mov	r0, r4
   1d01a:	f7f0 fa44 	bl	d4a6 <os_mbuf_append>
    if (rc != 0) {
   1d01e:	b930      	cbnz	r0, 1d02e <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1d020:	2001      	movs	r0, #1
   1d022:	e7e3      	b.n	1cfec <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d024:	2311      	movs	r3, #17
   1d026:	9a06      	ldr	r2, [sp, #24]
   1d028:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1d02a:	2006      	movs	r0, #6
   1d02c:	e7de      	b.n	1cfec <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d02e:	2311      	movs	r3, #17
   1d030:	9a06      	ldr	r2, [sp, #24]
   1d032:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1d034:	2006      	movs	r0, #6
   1d036:	e7d9      	b.n	1cfec <ble_att_svr_fill_type_value_entry+0x10>

0001d038 <ble_att_svr_fill_type_value>:
{
   1d038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d03c:	b08d      	sub	sp, #52	; 0x34
   1d03e:	4682      	mov	sl, r0
   1d040:	460e      	mov	r6, r1
   1d042:	4690      	mov	r8, r2
   1d044:	9305      	str	r3, [sp, #20]
   1d046:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
   1d04a:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d04e:	4b33      	ldr	r3, [pc, #204]	; (1d11c <ble_att_svr_fill_type_value+0xe4>)
   1d050:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1d052:	2700      	movs	r7, #0
    first = 0;
   1d054:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d056:	e015      	b.n	1d084 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1d058:	f8cd 9000 	str.w	r9, [sp]
   1d05c:	465b      	mov	r3, fp
   1d05e:	463a      	mov	r2, r7
   1d060:	4629      	mov	r1, r5
   1d062:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1d064:	f7ff ffba 	bl	1cfdc <ble_att_svr_fill_type_value_entry>
   1d068:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   1d06a:	2801      	cmp	r0, #1
   1d06c:	d13a      	bne.n	1d0e4 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1d06e:	8963      	ldrh	r3, [r4, #10]
   1d070:	4543      	cmp	r3, r8
   1d072:	d833      	bhi.n	1d0dc <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   1d074:	2700      	movs	r7, #0
            first = 0;
   1d076:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   1d078:	a905      	add	r1, sp, #20
   1d07a:	6860      	ldr	r0, [r4, #4]
   1d07c:	f009 f974 	bl	26368 <ble_uuid_cmp>
   1d080:	b188      	cbz	r0, 1d0a6 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1d082:	6824      	ldr	r4, [r4, #0]
   1d084:	b364      	cbz	r4, 1d0e0 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   1d086:	8963      	ldrh	r3, [r4, #10]
   1d088:	42b3      	cmp	r3, r6
   1d08a:	d3fa      	bcc.n	1d082 <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   1d08c:	b90d      	cbnz	r5, 1d092 <ble_att_svr_fill_type_value+0x5a>
   1d08e:	4543      	cmp	r3, r8
   1d090:	d826      	bhi.n	1d0e0 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   1d092:	2d00      	cmp	r5, #0
   1d094:	d0f0      	beq.n	1d078 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   1d096:	6861      	ldr	r1, [r4, #4]
   1d098:	a805      	add	r0, sp, #20
   1d09a:	f7ff ff3a 	bl	1cf12 <ble_att_svr_is_valid_group_end>
   1d09e:	2800      	cmp	r0, #0
   1d0a0:	d1da      	bne.n	1d058 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   1d0a2:	8967      	ldrh	r7, [r4, #10]
                continue;
   1d0a4:	e7ed      	b.n	1d082 <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   1d0a6:	f8cd 9008 	str.w	r9, [sp, #8]
   1d0aa:	f10d 031e 	add.w	r3, sp, #30
   1d0ae:	9301      	str	r3, [sp, #4]
   1d0b0:	ab08      	add	r3, sp, #32
   1d0b2:	9300      	str	r3, [sp, #0]
   1d0b4:	2310      	movs	r3, #16
   1d0b6:	2200      	movs	r2, #0
   1d0b8:	4621      	mov	r1, r4
   1d0ba:	4650      	mov	r0, sl
   1d0bc:	f7ff ff60 	bl	1cf80 <ble_att_svr_read_flat>
            if (rc != 0) {
   1d0c0:	4603      	mov	r3, r0
   1d0c2:	b978      	cbnz	r0, 1d0e4 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   1d0c4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1d0c8:	aa08      	add	r2, sp, #32
   1d0ca:	2106      	movs	r1, #6
   1d0cc:	9816      	ldr	r0, [sp, #88]	; 0x58
   1d0ce:	f7f0 faf9 	bl	d6c4 <os_mbuf_cmpf>
            if (rc == 0) {
   1d0d2:	2800      	cmp	r0, #0
   1d0d4:	d1d5      	bne.n	1d082 <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1d0d6:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1d0d8:	462f      	mov	r7, r5
   1d0da:	e7d2      	b.n	1d082 <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   1d0dc:	2700      	movs	r7, #0
            first = 0;
   1d0de:	463d      	mov	r5, r7
    if (first) {
   1d0e0:	b94d      	cbnz	r5, 1d0f6 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   1d0e2:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   1d0e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d0e6:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1d0e8:	b90b      	cbnz	r3, 1d0ee <ble_att_svr_fill_type_value+0xb6>
   1d0ea:	2a01      	cmp	r2, #1
   1d0ec:	d910      	bls.n	1d110 <ble_att_svr_fill_type_value+0xd8>
}
   1d0ee:	4618      	mov	r0, r3
   1d0f0:	b00d      	add	sp, #52	; 0x34
   1d0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1d0f6:	f8cd 9000 	str.w	r9, [sp]
   1d0fa:	465b      	mov	r3, fp
   1d0fc:	463a      	mov	r2, r7
   1d0fe:	4629      	mov	r1, r5
   1d100:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1d102:	f7ff ff6b 	bl	1cfdc <ble_att_svr_fill_type_value_entry>
   1d106:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1d108:	2801      	cmp	r0, #1
   1d10a:	d1eb      	bne.n	1d0e4 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   1d10c:	2300      	movs	r3, #0
   1d10e:	e7e9      	b.n	1d0e4 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d110:	230a      	movs	r3, #10
   1d112:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1d116:	2305      	movs	r3, #5
   1d118:	e7e9      	b.n	1d0ee <ble_att_svr_fill_type_value+0xb6>
   1d11a:	bf00      	nop
   1d11c:	20002d20 	.word	0x20002d20

0001d120 <ble_att_svr_build_find_type_value_rsp>:
{
   1d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d124:	b088      	sub	sp, #32
   1d126:	4604      	mov	r4, r0
   1d128:	4688      	mov	r8, r1
   1d12a:	4617      	mov	r7, r2
   1d12c:	9305      	str	r3, [sp, #20]
   1d12e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d130:	9d10      	ldr	r5, [sp, #64]	; 0x40
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1d132:	462a      	mov	r2, r5
   1d134:	a907      	add	r1, sp, #28
   1d136:	4630      	mov	r0, r6
   1d138:	f7ff fdef 	bl	1cd1a <ble_att_svr_pkt>
    if (rc != 0) {
   1d13c:	b128      	cbz	r0, 1d14a <ble_att_svr_build_find_type_value_rsp+0x2a>
    *out_txom = txom;
   1d13e:	9a07      	ldr	r2, [sp, #28]
   1d140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d142:	601a      	str	r2, [r3, #0]
}
   1d144:	b008      	add	sp, #32
   1d146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1d14a:	9a07      	ldr	r2, [sp, #28]
   1d14c:	2100      	movs	r1, #0
   1d14e:	2007      	movs	r0, #7
   1d150:	f7ff fc0b 	bl	1c96a <ble_att_cmd_prepare>
    if (buf == NULL) {
   1d154:	b178      	cbz	r0, 1d176 <ble_att_svr_build_find_type_value_rsp+0x56>
    mtu = ble_att_mtu(conn_handle);
   1d156:	4620      	mov	r0, r4
   1d158:	f7ff fb11 	bl	1c77e <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1d15c:	9503      	str	r5, [sp, #12]
   1d15e:	9002      	str	r0, [sp, #8]
   1d160:	9b07      	ldr	r3, [sp, #28]
   1d162:	9301      	str	r3, [sp, #4]
   1d164:	6833      	ldr	r3, [r6, #0]
   1d166:	9300      	str	r3, [sp, #0]
   1d168:	9b05      	ldr	r3, [sp, #20]
   1d16a:	463a      	mov	r2, r7
   1d16c:	4641      	mov	r1, r8
   1d16e:	4620      	mov	r0, r4
   1d170:	f7ff ff62 	bl	1d038 <ble_att_svr_fill_type_value>
    if (rc != 0) {
   1d174:	e7e3      	b.n	1d13e <ble_att_svr_build_find_type_value_rsp+0x1e>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d176:	2311      	movs	r3, #17
   1d178:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1d17a:	2006      	movs	r0, #6
        goto done;
   1d17c:	e7df      	b.n	1d13e <ble_att_svr_build_find_type_value_rsp+0x1e>

0001d17e <ble_att_svr_service_uuid>:
{
   1d17e:	b510      	push	{r4, lr}
   1d180:	b08a      	sub	sp, #40	; 0x28
   1d182:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   1d184:	9202      	str	r2, [sp, #8]
   1d186:	f10d 0316 	add.w	r3, sp, #22
   1d18a:	9301      	str	r3, [sp, #4]
   1d18c:	ab06      	add	r3, sp, #24
   1d18e:	9300      	str	r3, [sp, #0]
   1d190:	2310      	movs	r3, #16
   1d192:	2200      	movs	r2, #0
   1d194:	4601      	mov	r1, r0
   1d196:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1d19a:	f7ff fef1 	bl	1cf80 <ble_att_svr_read_flat>
    if (rc != 0) {
   1d19e:	b108      	cbz	r0, 1d1a4 <ble_att_svr_service_uuid+0x26>
}
   1d1a0:	b00a      	add	sp, #40	; 0x28
   1d1a2:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   1d1a4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1d1a8:	a906      	add	r1, sp, #24
   1d1aa:	4620      	mov	r0, r4
   1d1ac:	f009 f8b4 	bl	26318 <ble_uuid_init_from_buf>
    return rc;
   1d1b0:	e7f6      	b.n	1d1a0 <ble_att_svr_service_uuid+0x22>
	...

0001d1b4 <ble_att_svr_build_read_group_type_rsp>:
{
   1d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1b8:	b08b      	sub	sp, #44	; 0x2c
   1d1ba:	460e      	mov	r6, r1
   1d1bc:	4617      	mov	r7, r2
   1d1be:	4698      	mov	r8, r3
   1d1c0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1d1c4:	2500      	movs	r5, #0
    *att_err = 0;
   1d1c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d1c8:	701d      	strb	r5, [r3, #0]
    *err_handle = start_handle;
   1d1ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d1cc:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   1d1ce:	f7ff fad6 	bl	1c77e <ble_att_mtu>
   1d1d2:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   1d1d4:	f8d9 a000 	ldr.w	sl, [r9]
    *rxom = NULL;
   1d1d8:	f8c9 5000 	str.w	r5, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d1dc:	f8ba 1010 	ldrh.w	r1, [sl, #16]
   1d1e0:	4650      	mov	r0, sl
   1d1e2:	f7f0 fa1e 	bl	d622 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   1d1e6:	4652      	mov	r2, sl
   1d1e8:	2101      	movs	r1, #1
   1d1ea:	2011      	movs	r0, #17
   1d1ec:	f7ff fbbd 	bl	1c96a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1d1f0:	b130      	cbz	r0, 1d200 <ble_att_svr_build_read_group_type_rsp+0x4c>
   1d1f2:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1d1f4:	2500      	movs	r5, #0
   1d1f6:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1d1f8:	4b4b      	ldr	r3, [pc, #300]	; (1d328 <ble_att_svr_build_read_group_type_rsp+0x174>)
   1d1fa:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1d1fc:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1d1fe:	e03e      	b.n	1d27e <ble_att_svr_build_read_group_type_rsp+0xca>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d200:	2311      	movs	r3, #17
   1d202:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d204:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1d206:	2306      	movs	r3, #6
    end_group_handle = 0;
   1d208:	46a9      	mov	r9, r5
        goto done;
   1d20a:	e059      	b.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   1d20c:	6860      	ldr	r0, [r4, #4]
   1d20e:	f7ff feac 	bl	1cf6a <ble_att_svr_is_valid_read_group_type>
   1d212:	b910      	cbnz	r0, 1d21a <ble_att_svr_build_read_group_type_rsp+0x66>
                end_group_handle = entry->ha_handle_id;
   1d214:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1d218:	e03a      	b.n	1d290 <ble_att_svr_build_read_group_type_rsp+0xdc>
                rc = ble_att_svr_read_group_type_entry_write(
   1d21a:	ab05      	add	r3, sp, #20
   1d21c:	9300      	str	r3, [sp, #0]
   1d21e:	464b      	mov	r3, r9
   1d220:	462a      	mov	r2, r5
   1d222:	9903      	ldr	r1, [sp, #12]
   1d224:	4650      	mov	r0, sl
   1d226:	f7ff fe3a 	bl	1ce9e <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1d22a:	4603      	mov	r3, r0
   1d22c:	b918      	cbnz	r0, 1d236 <ble_att_svr_build_read_group_type_rsp+0x82>
                end_group_handle = 0;
   1d22e:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1d232:	464d      	mov	r5, r9
   1d234:	e02e      	b.n	1d294 <ble_att_svr_build_read_group_type_rsp+0xe0>
                    *err_handle = entry->ha_handle_id;
   1d236:	8962      	ldrh	r2, [r4, #10]
   1d238:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1d23a:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   1d23c:	2806      	cmp	r0, #6
   1d23e:	d003      	beq.n	1d248 <ble_att_svr_build_read_group_type_rsp+0x94>
                end_group_handle = 0;
   1d240:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1d244:	464d      	mov	r5, r9
                    goto done;
   1d246:	e03b      	b.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d248:	2211      	movs	r2, #17
   1d24a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1d24c:	700a      	strb	r2, [r1, #0]
   1d24e:	e7f7      	b.n	1d240 <ble_att_svr_build_read_group_type_rsp+0x8c>
                    *err_handle = entry->ha_handle_id;
   1d250:	8962      	ldrh	r2, [r4, #10]
   1d252:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1d254:	800a      	strh	r2, [r1, #0]
                    goto done;
   1d256:	e033      	b.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1d258:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1d25c:	2b10      	cmp	r3, #16
   1d25e:	d003      	beq.n	1d268 <ble_att_svr_build_read_group_type_rsp+0xb4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1d260:	2314      	movs	r3, #20
   1d262:	f88b 3000 	strb.w	r3, [fp]
   1d266:	e007      	b.n	1d278 <ble_att_svr_build_read_group_type_rsp+0xc4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1d268:	2306      	movs	r3, #6
   1d26a:	f88b 3000 	strb.w	r3, [fp]
   1d26e:	e003      	b.n	1d278 <ble_att_svr_build_read_group_type_rsp+0xc4>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   1d270:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1d274:	2a10      	cmp	r2, #16
   1d276:	d123      	bne.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
                start_group_handle = entry->ha_handle_id;
   1d278:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   1d27a:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1d27c:	6824      	ldr	r4, [r4, #0]
   1d27e:	2c00      	cmp	r4, #0
   1d280:	d03a      	beq.n	1d2f8 <ble_att_svr_build_read_group_type_rsp+0x144>
        if (entry->ha_handle_id < start_handle) {
   1d282:	8963      	ldrh	r3, [r4, #10]
   1d284:	42b3      	cmp	r3, r6
   1d286:	d3f9      	bcc.n	1d27c <ble_att_svr_build_read_group_type_rsp+0xc8>
        if (entry->ha_handle_id > end_handle) {
   1d288:	42bb      	cmp	r3, r7
   1d28a:	d837      	bhi.n	1d2fc <ble_att_svr_build_read_group_type_rsp+0x148>
        if (start_group_handle != 0) {
   1d28c:	2d00      	cmp	r5, #0
   1d28e:	d1bd      	bne.n	1d20c <ble_att_svr_build_read_group_type_rsp+0x58>
        if (start_group_handle == 0) {
   1d290:	2d00      	cmp	r5, #0
   1d292:	d1f3      	bne.n	1d27c <ble_att_svr_build_read_group_type_rsp+0xc8>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   1d294:	4641      	mov	r1, r8
   1d296:	6860      	ldr	r0, [r4, #4]
   1d298:	f009 f866 	bl	26368 <ble_uuid_cmp>
   1d29c:	2800      	cmp	r0, #0
   1d29e:	d1ed      	bne.n	1d27c <ble_att_svr_build_read_group_type_rsp+0xc8>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   1d2a0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d2a2:	a905      	add	r1, sp, #20
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	f7ff ff6a 	bl	1d17e <ble_att_svr_service_uuid>
                if (rc != 0) {
   1d2aa:	4603      	mov	r3, r0
   1d2ac:	2800      	cmp	r0, #0
   1d2ae:	d1cf      	bne.n	1d250 <ble_att_svr_build_read_group_type_rsp+0x9c>
                switch (rsp->bagp_length) {
   1d2b0:	f89b 2000 	ldrb.w	r2, [fp]
   1d2b4:	2a06      	cmp	r2, #6
   1d2b6:	d0db      	beq.n	1d270 <ble_att_svr_build_read_group_type_rsp+0xbc>
   1d2b8:	2a14      	cmp	r2, #20
   1d2ba:	d018      	beq.n	1d2ee <ble_att_svr_build_read_group_type_rsp+0x13a>
   1d2bc:	2a00      	cmp	r2, #0
   1d2be:	d0cb      	beq.n	1d258 <ble_att_svr_build_read_group_type_rsp+0xa4>
    if (rc == 0) {
   1d2c0:	bb2b      	cbnz	r3, 1d30e <ble_att_svr_build_read_group_type_rsp+0x15a>
        if (start_group_handle != 0) {
   1d2c2:	b15d      	cbz	r5, 1d2dc <ble_att_svr_build_read_group_type_rsp+0x128>
            if (entry == NULL) {
   1d2c4:	b1e4      	cbz	r4, 1d300 <ble_att_svr_build_read_group_type_rsp+0x14c>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   1d2c6:	ab05      	add	r3, sp, #20
   1d2c8:	9300      	str	r3, [sp, #0]
   1d2ca:	464b      	mov	r3, r9
   1d2cc:	462a      	mov	r2, r5
   1d2ce:	9903      	ldr	r1, [sp, #12]
   1d2d0:	4650      	mov	r0, sl
   1d2d2:	f7ff fde4 	bl	1ce9e <ble_att_svr_read_group_type_entry_write>
   1d2d6:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   1d2d8:	2806      	cmp	r0, #6
   1d2da:	d014      	beq.n	1d306 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   1d2dc:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   1d2e0:	2a02      	cmp	r2, #2
   1d2e2:	d814      	bhi.n	1d30e <ble_att_svr_build_read_group_type_rsp+0x15a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d2e4:	230a      	movs	r3, #10
   1d2e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d2e8:	7013      	strb	r3, [r2, #0]
            rc = BLE_HS_ENOENT;
   1d2ea:	2305      	movs	r3, #5
   1d2ec:	e010      	b.n	1d310 <ble_att_svr_build_read_group_type_rsp+0x15c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1d2ee:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1d2f2:	2a10      	cmp	r2, #16
   1d2f4:	d1c0      	bne.n	1d278 <ble_att_svr_build_read_group_type_rsp+0xc4>
   1d2f6:	e7e3      	b.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
    rc = 0;
   1d2f8:	2300      	movs	r3, #0
   1d2fa:	e7e1      	b.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
            rc = 0;
   1d2fc:	2300      	movs	r3, #0
   1d2fe:	e7df      	b.n	1d2c0 <ble_att_svr_build_read_group_type_rsp+0x10c>
                end_group_handle = 0xffff;
   1d300:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1d304:	e7df      	b.n	1d2c6 <ble_att_svr_build_read_group_type_rsp+0x112>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d306:	2211      	movs	r2, #17
   1d308:	9916      	ldr	r1, [sp, #88]	; 0x58
   1d30a:	700a      	strb	r2, [r1, #0]
   1d30c:	e7e6      	b.n	1d2dc <ble_att_svr_build_read_group_type_rsp+0x128>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   1d30e:	b10b      	cbz	r3, 1d314 <ble_att_svr_build_read_group_type_rsp+0x160>
   1d310:	2b04      	cmp	r3, #4
   1d312:	d006      	beq.n	1d322 <ble_att_svr_build_read_group_type_rsp+0x16e>
    *out_txom = txom;
   1d314:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1d316:	f8c2 a000 	str.w	sl, [r2]
}
   1d31a:	4618      	mov	r0, r3
   1d31c:	b00b      	add	sp, #44	; 0x2c
   1d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   1d322:	2300      	movs	r3, #0
   1d324:	e7f6      	b.n	1d314 <ble_att_svr_build_read_group_type_rsp+0x160>
   1d326:	bf00      	nop
   1d328:	20002d20 	.word	0x20002d20

0001d32c <ble_att_svr_prep_free>:
    if (entry != NULL) {
   1d32c:	b148      	cbz	r0, 1d342 <ble_att_svr_prep_free+0x16>
{
   1d32e:	b510      	push	{r4, lr}
   1d330:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   1d332:	6880      	ldr	r0, [r0, #8]
   1d334:	f7f0 f89e 	bl	d474 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   1d338:	4621      	mov	r1, r4
   1d33a:	4802      	ldr	r0, [pc, #8]	; (1d344 <ble_att_svr_prep_free+0x18>)
   1d33c:	f7f0 fc9f 	bl	dc7e <os_memblock_put>
}
   1d340:	bd10      	pop	{r4, pc}
   1d342:	4770      	bx	lr
   1d344:	20003028 	.word	0x20003028

0001d348 <ble_att_svr_prep_alloc>:
{
   1d348:	b570      	push	{r4, r5, r6, lr}
   1d34a:	4606      	mov	r6, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   1d34c:	480c      	ldr	r0, [pc, #48]	; (1d380 <ble_att_svr_prep_alloc+0x38>)
   1d34e:	f7f0 fc6e 	bl	dc2e <os_memblock_get>
    if (entry == NULL) {
   1d352:	4604      	mov	r4, r0
   1d354:	b150      	cbz	r0, 1d36c <ble_att_svr_prep_alloc+0x24>
    memset(entry, 0, sizeof *entry);
   1d356:	2300      	movs	r3, #0
   1d358:	6003      	str	r3, [r0, #0]
   1d35a:	6043      	str	r3, [r0, #4]
   1d35c:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   1d35e:	f006 f865 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
   1d362:	4605      	mov	r5, r0
   1d364:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   1d366:	b120      	cbz	r0, 1d372 <ble_att_svr_prep_alloc+0x2a>
}
   1d368:	4620      	mov	r0, r4
   1d36a:	bd70      	pop	{r4, r5, r6, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1d36c:	2309      	movs	r3, #9
   1d36e:	7033      	strb	r3, [r6, #0]
        return NULL;
   1d370:	e7fa      	b.n	1d368 <ble_att_svr_prep_alloc+0x20>
        ble_att_svr_prep_free(entry);
   1d372:	4620      	mov	r0, r4
   1d374:	f7ff ffda 	bl	1d32c <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d378:	2311      	movs	r3, #17
   1d37a:	7033      	strb	r3, [r6, #0]
        return NULL;
   1d37c:	462c      	mov	r4, r5
   1d37e:	e7f3      	b.n	1d368 <ble_att_svr_prep_alloc+0x20>
   1d380:	20003028 	.word	0x20003028

0001d384 <ble_att_svr_insert_prep_entry>:
{
   1d384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d388:	4688      	mov	r8, r1
   1d38a:	4691      	mov	r9, r2
   1d38c:	461d      	mov	r5, r3
   1d38e:	9f08      	ldr	r7, [sp, #32]
    conn = ble_hs_conn_find_assert(conn_handle);
   1d390:	f005 f8e2 	bl	22558 <ble_hs_conn_find_assert>
   1d394:	4606      	mov	r6, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   1d396:	4638      	mov	r0, r7
   1d398:	f7ff ffd6 	bl	1d348 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   1d39c:	b368      	cbz	r0, 1d3fa <ble_att_svr_insert_prep_entry+0x76>
   1d39e:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   1d3a0:	f8a0 8004 	strh.w	r8, [r0, #4]
    prep_entry->bape_offset = offset;
   1d3a4:	f8a0 9006 	strh.w	r9, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   1d3a8:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   1d3aa:	3b04      	subs	r3, #4
   1d3ac:	b29b      	uxth	r3, r3
   1d3ae:	2204      	movs	r2, #4
   1d3b0:	4629      	mov	r1, r5
   1d3b2:	6880      	ldr	r0, [r0, #8]
   1d3b4:	f7f0 f8dc 	bl	d570 <os_mbuf_appendfrom>
    if (rc != 0) {
   1d3b8:	4605      	mov	r5, r0
   1d3ba:	b9a0      	cbnz	r0, 1d3e6 <ble_att_svr_insert_prep_entry+0x62>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   1d3bc:	464a      	mov	r2, r9
   1d3be:	4641      	mov	r1, r8
   1d3c0:	f106 0044 	add.w	r0, r6, #68	; 0x44
   1d3c4:	f7ff fb20 	bl	1ca08 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   1d3c8:	b198      	cbz	r0, 1d3f2 <ble_att_svr_insert_prep_entry+0x6e>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   1d3ca:	6802      	ldr	r2, [r0, #0]
   1d3cc:	6022      	str	r2, [r4, #0]
   1d3ce:	6004      	str	r4, [r0, #0]
    return os_time_get();
   1d3d0:	f7f0 fff4 	bl	e3bc <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   1d3d4:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   1d3d8:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   1d3da:	64b0      	str	r0, [r6, #72]	; 0x48
    ble_hs_timer_resched();
   1d3dc:	f004 fb36 	bl	21a4c <ble_hs_timer_resched>
}
   1d3e0:	4628      	mov	r0, r5
   1d3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_att_svr_prep_free(prep_entry);
   1d3e6:	4620      	mov	r0, r4
   1d3e8:	f7ff ffa0 	bl	1d32c <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1d3ec:	2309      	movs	r3, #9
   1d3ee:	703b      	strb	r3, [r7, #0]
        return rc;
   1d3f0:	e7f6      	b.n	1d3e0 <ble_att_svr_insert_prep_entry+0x5c>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   1d3f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1d3f4:	6023      	str	r3, [r4, #0]
   1d3f6:	6474      	str	r4, [r6, #68]	; 0x44
   1d3f8:	e7ea      	b.n	1d3d0 <ble_att_svr_insert_prep_entry+0x4c>
        return BLE_HS_ENOMEM;
   1d3fa:	2506      	movs	r5, #6
   1d3fc:	e7f0      	b.n	1d3e0 <ble_att_svr_insert_prep_entry+0x5c>

0001d3fe <ble_att_svr_prep_extract>:
{
   1d3fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d402:	4605      	mov	r5, r0
   1d404:	4689      	mov	r9, r1
   1d406:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   1d408:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   1d40a:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   1d40c:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1d40e:	e00b      	b.n	1d428 <ble_att_svr_prep_extract+0x2a>
            os_mbuf_concat(om, entry->bape_value);
   1d410:	68a1      	ldr	r1, [r4, #8]
   1d412:	4630      	mov	r0, r6
   1d414:	f7f0 fa39 	bl	d88a <os_mbuf_concat>
        entry->bape_value = NULL;
   1d418:	2300      	movs	r3, #0
   1d41a:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1d41c:	682b      	ldr	r3, [r5, #0]
   1d41e:	681b      	ldr	r3, [r3, #0]
   1d420:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   1d422:	4620      	mov	r0, r4
   1d424:	f7ff ff82 	bl	1d32c <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1d428:	682c      	ldr	r4, [r5, #0]
   1d42a:	b134      	cbz	r4, 1d43a <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   1d42c:	88a3      	ldrh	r3, [r4, #4]
   1d42e:	42bb      	cmp	r3, r7
   1d430:	d103      	bne.n	1d43a <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   1d432:	2e00      	cmp	r6, #0
   1d434:	d1ec      	bne.n	1d410 <ble_att_svr_prep_extract+0x12>
            om = entry->bape_value;
   1d436:	68a6      	ldr	r6, [r4, #8]
   1d438:	e7ee      	b.n	1d418 <ble_att_svr_prep_extract+0x1a>
    *out_attr_handle = attr_handle;
   1d43a:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   1d43e:	f8c8 6000 	str.w	r6, [r8]
}
   1d442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0001d448 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   1d448:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   1d44a:	4c03      	ldr	r4, [pc, #12]	; (1d458 <ble_att_svr_free_start_mem+0x10>)
   1d44c:	6820      	ldr	r0, [r4, #0]
   1d44e:	f00d fdbb 	bl	2afc8 <free>
    ble_att_svr_entry_mem = NULL;
   1d452:	2300      	movs	r3, #0
   1d454:	6023      	str	r3, [r4, #0]
}
   1d456:	bd10      	pop	{r4, pc}
   1d458:	20002cf4 	.word	0x20002cf4

0001d45c <ble_att_svr_register>:
{
   1d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d460:	4680      	mov	r8, r0
   1d462:	460f      	mov	r7, r1
   1d464:	4616      	mov	r6, r2
   1d466:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   1d468:	f7ff fb0e 	bl	1ca88 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   1d46c:	b1b8      	cbz	r0, 1d49e <ble_att_svr_register+0x42>
   1d46e:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   1d470:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   1d474:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   1d476:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   1d478:	f7ff fabe 	bl	1c9f8 <ble_att_svr_next_id>
   1d47c:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   1d47e:	9b06      	ldr	r3, [sp, #24]
   1d480:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   1d482:	9b07      	ldr	r3, [sp, #28]
   1d484:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   1d486:	2300      	movs	r3, #0
   1d488:	6023      	str	r3, [r4, #0]
   1d48a:	4b07      	ldr	r3, [pc, #28]	; (1d4a8 <ble_att_svr_register+0x4c>)
   1d48c:	685a      	ldr	r2, [r3, #4]
   1d48e:	6014      	str	r4, [r2, #0]
   1d490:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   1d492:	b135      	cbz	r5, 1d4a2 <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   1d494:	8963      	ldrh	r3, [r4, #10]
   1d496:	802b      	strh	r3, [r5, #0]
    return 0;
   1d498:	2000      	movs	r0, #0
}
   1d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   1d49e:	2006      	movs	r0, #6
   1d4a0:	e7fb      	b.n	1d49a <ble_att_svr_register+0x3e>
    return 0;
   1d4a2:	2000      	movs	r0, #0
   1d4a4:	e7f9      	b.n	1d49a <ble_att_svr_register+0x3e>
   1d4a6:	bf00      	nop
   1d4a8:	20002d20 	.word	0x20002d20

0001d4ac <ble_att_svr_prev_handle>:
}
   1d4ac:	4b01      	ldr	r3, [pc, #4]	; (1d4b4 <ble_att_svr_prev_handle+0x8>)
   1d4ae:	8818      	ldrh	r0, [r3, #0]
   1d4b0:	4770      	bx	lr
   1d4b2:	bf00      	nop
   1d4b4:	20002d1c 	.word	0x20002d1c

0001d4b8 <ble_att_svr_find_by_handle>:
{
   1d4b8:	4602      	mov	r2, r0
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   1d4ba:	4b04      	ldr	r3, [pc, #16]	; (1d4cc <ble_att_svr_find_by_handle+0x14>)
   1d4bc:	6818      	ldr	r0, [r3, #0]
   1d4be:	b120      	cbz	r0, 1d4ca <ble_att_svr_find_by_handle+0x12>
        if (entry->ha_handle_id == handle_id) {
   1d4c0:	8943      	ldrh	r3, [r0, #10]
   1d4c2:	4293      	cmp	r3, r2
   1d4c4:	d001      	beq.n	1d4ca <ble_att_svr_find_by_handle+0x12>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1d4c6:	6800      	ldr	r0, [r0, #0]
   1d4c8:	e7f9      	b.n	1d4be <ble_att_svr_find_by_handle+0x6>
}
   1d4ca:	4770      	bx	lr
   1d4cc:	20002d20 	.word	0x20002d20

0001d4d0 <ble_att_svr_write_handle>:
{
   1d4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4d2:	b083      	sub	sp, #12
   1d4d4:	4607      	mov	r7, r0
   1d4d6:	4614      	mov	r4, r2
   1d4d8:	461d      	mov	r5, r3
   1d4da:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1d4dc:	4608      	mov	r0, r1
   1d4de:	f7ff ffeb 	bl	1d4b8 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1d4e2:	b140      	cbz	r0, 1d4f6 <ble_att_svr_write_handle+0x26>
   1d4e4:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   1d4e6:	9600      	str	r6, [sp, #0]
   1d4e8:	462b      	mov	r3, r5
   1d4ea:	4622      	mov	r2, r4
   1d4ec:	4638      	mov	r0, r7
   1d4ee:	f7ff fb9f 	bl	1cc30 <ble_att_svr_write>
}
   1d4f2:	b003      	add	sp, #12
   1d4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1d4f6:	b10e      	cbz	r6, 1d4fc <ble_att_svr_write_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d4f8:	2301      	movs	r3, #1
   1d4fa:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   1d4fc:	2005      	movs	r0, #5
   1d4fe:	e7f8      	b.n	1d4f2 <ble_att_svr_write_handle+0x22>

0001d500 <ble_att_svr_prep_write>:
{
   1d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d504:	b084      	sub	sp, #16
   1d506:	4606      	mov	r6, r0
   1d508:	460d      	mov	r5, r1
   1d50a:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   1d50c:	2300      	movs	r3, #0
   1d50e:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   1d510:	4611      	mov	r1, r2
   1d512:	4628      	mov	r0, r5
   1d514:	f7ff fa8a 	bl	1ca2c <ble_att_svr_prep_validate>
    if (rc != 0) {
   1d518:	4680      	mov	r8, r0
   1d51a:	b9f8      	cbnz	r0, 1d55c <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   1d51c:	682b      	ldr	r3, [r5, #0]
   1d51e:	b1eb      	cbz	r3, 1d55c <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   1d520:	aa03      	add	r2, sp, #12
   1d522:	f10d 010a 	add.w	r1, sp, #10
   1d526:	4628      	mov	r0, r5
   1d528:	f7ff ff69 	bl	1d3fe <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   1d52c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1d530:	f7ff ffc2 	bl	1d4b8 <ble_att_svr_find_by_handle>
   1d534:	4601      	mov	r1, r0
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   1d536:	f10d 0309 	add.w	r3, sp, #9
   1d53a:	9300      	str	r3, [sp, #0]
   1d53c:	ab03      	add	r3, sp, #12
   1d53e:	2200      	movs	r2, #0
   1d540:	4630      	mov	r0, r6
   1d542:	f7ff fb75 	bl	1cc30 <ble_att_svr_write>
   1d546:	4604      	mov	r4, r0
        os_mbuf_free_chain(om);
   1d548:	9803      	ldr	r0, [sp, #12]
   1d54a:	f7ef ff93 	bl	d474 <os_mbuf_free_chain>
        if (rc != 0) {
   1d54e:	2c00      	cmp	r4, #0
   1d550:	d0e4      	beq.n	1d51c <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   1d552:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d556:	803b      	strh	r3, [r7, #0]
            return att_err;
   1d558:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   1d55c:	4640      	mov	r0, r8
   1d55e:	b004      	add	sp, #16
   1d560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d564 <ble_att_svr_find_by_uuid>:
{
   1d564:	b570      	push	{r4, r5, r6, lr}
   1d566:	460d      	mov	r5, r1
   1d568:	4616      	mov	r6, r2
    if (prev == NULL) {
   1d56a:	b108      	cbz	r0, 1d570 <ble_att_svr_find_by_uuid+0xc>
        entry = STAILQ_NEXT(prev, ha_next);
   1d56c:	6804      	ldr	r4, [r0, #0]
   1d56e:	e003      	b.n	1d578 <ble_att_svr_find_by_uuid+0x14>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   1d570:	4b09      	ldr	r3, [pc, #36]	; (1d598 <ble_att_svr_find_by_uuid+0x34>)
   1d572:	681c      	ldr	r4, [r3, #0]
   1d574:	e000      	b.n	1d578 <ble_att_svr_find_by_uuid+0x14>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1d576:	6824      	ldr	r4, [r4, #0]
    for (;
   1d578:	b15c      	cbz	r4, 1d592 <ble_att_svr_find_by_uuid+0x2e>
         entry != NULL && entry->ha_handle_id <= end_handle;
   1d57a:	8963      	ldrh	r3, [r4, #10]
   1d57c:	42b3      	cmp	r3, r6
   1d57e:	d807      	bhi.n	1d590 <ble_att_svr_find_by_uuid+0x2c>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   1d580:	b13d      	cbz	r5, 1d592 <ble_att_svr_find_by_uuid+0x2e>
   1d582:	4629      	mov	r1, r5
   1d584:	6860      	ldr	r0, [r4, #4]
   1d586:	f008 feef 	bl	26368 <ble_uuid_cmp>
   1d58a:	2800      	cmp	r0, #0
   1d58c:	d1f3      	bne.n	1d576 <ble_att_svr_find_by_uuid+0x12>
   1d58e:	e000      	b.n	1d592 <ble_att_svr_find_by_uuid+0x2e>
    return NULL;
   1d590:	2400      	movs	r4, #0
}
   1d592:	4620      	mov	r0, r4
   1d594:	bd70      	pop	{r4, r5, r6, pc}
   1d596:	bf00      	nop
   1d598:	20002d20 	.word	0x20002d20

0001d59c <ble_att_svr_build_read_type_rsp>:
{
   1d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5a0:	b08f      	sub	sp, #60	; 0x3c
   1d5a2:	9005      	str	r0, [sp, #20]
   1d5a4:	460d      	mov	r5, r1
   1d5a6:	4616      	mov	r6, r2
   1d5a8:	461f      	mov	r7, r3
   1d5aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d5ac:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   1d5b0:	2200      	movs	r2, #0
   1d5b2:	f88b 2000 	strb.w	r2, [fp]
    *err_handle = start_handle;
   1d5b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1d5b8:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   1d5ba:	f8d3 8000 	ldr.w	r8, [r3]
    *rxom = NULL;
   1d5be:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d5c0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   1d5c4:	4640      	mov	r0, r8
   1d5c6:	f7f0 f82c 	bl	d622 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   1d5ca:	4642      	mov	r2, r8
   1d5cc:	2101      	movs	r1, #1
   1d5ce:	2009      	movs	r0, #9
   1d5d0:	f7ff f9cb 	bl	1c96a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1d5d4:	9007      	str	r0, [sp, #28]
   1d5d6:	b148      	cbz	r0, 1d5ec <ble_att_svr_build_read_type_rsp+0x50>
    mtu = ble_att_mtu(conn_handle);
   1d5d8:	9805      	ldr	r0, [sp, #20]
   1d5da:	f7ff f8d0 	bl	1c77e <ble_att_mtu>
   1d5de:	4681      	mov	r9, r0
    prev_attr_len = 0;
   1d5e0:	f04f 0a00 	mov.w	sl, #0
    entry_written = 0;
   1d5e4:	f8cd a018 	str.w	sl, [sp, #24]
    entry = NULL;
   1d5e8:	4654      	mov	r4, sl
   1d5ea:	e029      	b.n	1d640 <ble_att_svr_build_read_type_rsp+0xa4>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d5ec:	2311      	movs	r3, #17
   1d5ee:	f88b 3000 	strb.w	r3, [fp]
        *err_handle = 0;
   1d5f2:	2300      	movs	r3, #0
   1d5f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1d5f6:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1d5f8:	2206      	movs	r2, #6
    prev_attr_len = 0;
   1d5fa:	469a      	mov	sl, r3
    entry_written = 0;
   1d5fc:	9306      	str	r3, [sp, #24]
        goto done;
   1d5fe:	e052      	b.n	1d6a6 <ble_att_svr_build_read_type_rsp+0x10a>
                *err_handle = entry->ha_handle_id;
   1d600:	8963      	ldrh	r3, [r4, #10]
   1d602:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1d604:	800b      	strh	r3, [r1, #0]
                goto done;
   1d606:	e04e      	b.n	1d6a6 <ble_att_svr_build_read_type_rsp+0x10a>
            } else if (prev_attr_len != attr_len) {
   1d608:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1d60c:	4553      	cmp	r3, sl
   1d60e:	d14a      	bne.n	1d6a6 <ble_att_svr_build_read_type_rsp+0x10a>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   1d610:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1d614:	3302      	adds	r3, #2
   1d616:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1d61a:	440b      	add	r3, r1
            if (txomlen > mtu) {
   1d61c:	4599      	cmp	r9, r3
   1d61e:	db42      	blt.n	1d6a6 <ble_att_svr_build_read_type_rsp+0x10a>
            data = os_mbuf_extend(txom, 2 + attr_len);
   1d620:	3102      	adds	r1, #2
   1d622:	b289      	uxth	r1, r1
   1d624:	4640      	mov	r0, r8
   1d626:	f7f0 f952 	bl	d8ce <os_mbuf_extend>
            if (data == NULL) {
   1d62a:	b398      	cbz	r0, 1d694 <ble_att_svr_build_read_type_rsp+0xf8>
            data->handle = htole16(entry->ha_handle_id);
   1d62c:	8962      	ldrh	r2, [r4, #10]
   1d62e:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   1d632:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1d636:	a908      	add	r1, sp, #32
   1d638:	f7f1 f9be 	bl	e9b8 <memcpy>
            entry_written = 1;
   1d63c:	2301      	movs	r3, #1
   1d63e:	9306      	str	r3, [sp, #24]
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   1d640:	4632      	mov	r2, r6
   1d642:	4639      	mov	r1, r7
   1d644:	4620      	mov	r0, r4
   1d646:	f7ff ff8d 	bl	1d564 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   1d64a:	4604      	mov	r4, r0
   1d64c:	b350      	cbz	r0, 1d6a4 <ble_att_svr_build_read_type_rsp+0x108>
        if (entry->ha_handle_id >= start_handle) {
   1d64e:	8943      	ldrh	r3, [r0, #10]
   1d650:	42ab      	cmp	r3, r5
   1d652:	d3f5      	bcc.n	1d640 <ble_att_svr_build_read_type_rsp+0xa4>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   1d654:	f8cd b008 	str.w	fp, [sp, #8]
   1d658:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1d65c:	9301      	str	r3, [sp, #4]
   1d65e:	ab08      	add	r3, sp, #32
   1d660:	9300      	str	r3, [sp, #0]
   1d662:	2313      	movs	r3, #19
   1d664:	2200      	movs	r2, #0
   1d666:	4601      	mov	r1, r0
   1d668:	9805      	ldr	r0, [sp, #20]
   1d66a:	f7ff fc89 	bl	1cf80 <ble_att_svr_read_flat>
            if (rc != 0) {
   1d66e:	4602      	mov	r2, r0
   1d670:	2800      	cmp	r0, #0
   1d672:	d1c5      	bne.n	1d600 <ble_att_svr_build_read_type_rsp+0x64>
            if (attr_len > mtu - 4) {
   1d674:	f1a9 0303 	sub.w	r3, r9, #3
   1d678:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1d67c:	428b      	cmp	r3, r1
   1d67e:	dc03      	bgt.n	1d688 <ble_att_svr_build_read_type_rsp+0xec>
                attr_len = mtu - 4;
   1d680:	f1a9 0304 	sub.w	r3, r9, #4
   1d684:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   1d688:	f1ba 0f00 	cmp.w	sl, #0
   1d68c:	d1bc      	bne.n	1d608 <ble_att_svr_build_read_type_rsp+0x6c>
                prev_attr_len = attr_len;
   1d68e:	f8bd a036 	ldrh.w	sl, [sp, #54]	; 0x36
   1d692:	e7bd      	b.n	1d610 <ble_att_svr_build_read_type_rsp+0x74>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d694:	2311      	movs	r3, #17
   1d696:	f88b 3000 	strb.w	r3, [fp]
                *err_handle = entry->ha_handle_id;
   1d69a:	8963      	ldrh	r3, [r4, #10]
   1d69c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1d69e:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   1d6a0:	2206      	movs	r2, #6
                goto done;
   1d6a2:	e000      	b.n	1d6a6 <ble_att_svr_build_read_type_rsp+0x10a>
            rc = BLE_HS_ENOENT;
   1d6a4:	2205      	movs	r2, #5
    if (!entry_written) {
   1d6a6:	9b06      	ldr	r3, [sp, #24]
   1d6a8:	b943      	cbnz	r3, 1d6bc <ble_att_svr_build_read_type_rsp+0x120>
        if (*att_err == 0) {
   1d6aa:	f89b 3000 	ldrb.w	r3, [fp]
   1d6ae:	b913      	cbnz	r3, 1d6b6 <ble_att_svr_build_read_type_rsp+0x11a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1d6b0:	230a      	movs	r3, #10
   1d6b2:	f88b 3000 	strb.w	r3, [fp]
        if (rc == 0) {
   1d6b6:	b94a      	cbnz	r2, 1d6cc <ble_att_svr_build_read_type_rsp+0x130>
            rc = BLE_HS_ENOENT;
   1d6b8:	2205      	movs	r2, #5
   1d6ba:	e007      	b.n	1d6cc <ble_att_svr_build_read_type_rsp+0x130>
        *att_err = 0;
   1d6bc:	2200      	movs	r2, #0
   1d6be:	f88b 2000 	strb.w	r2, [fp]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   1d6c2:	f10a 0a02 	add.w	sl, sl, #2
   1d6c6:	9b07      	ldr	r3, [sp, #28]
   1d6c8:	f883 a000 	strb.w	sl, [r3]
    *out_txom = txom;
   1d6cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d6ce:	f8c3 8000 	str.w	r8, [r3]
}
   1d6d2:	4610      	mov	r0, r2
   1d6d4:	b00f      	add	sp, #60	; 0x3c
   1d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d6da <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   1d6da:	6802      	ldr	r2, [r0, #0]
   1d6dc:	b11a      	cbz	r2, 1d6e6 <ble_att_svr_ticks_until_tmo+0xc>
    time_diff = svr->basc_prep_timeout_at - now;
   1d6de:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   1d6e0:	1a40      	subs	r0, r0, r1
   1d6e2:	d403      	bmi.n	1d6ec <ble_att_svr_ticks_until_tmo+0x12>
}
   1d6e4:	4770      	bx	lr
        return BLE_HS_FOREVER;
   1d6e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d6ea:	4770      	bx	lr
        return 0;
   1d6ec:	2000      	movs	r0, #0
   1d6ee:	e7f9      	b.n	1d6e4 <ble_att_svr_ticks_until_tmo+0xa>

0001d6f0 <ble_att_svr_read_handle>:
{
   1d6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6f2:	b083      	sub	sp, #12
   1d6f4:	4607      	mov	r7, r0
   1d6f6:	4614      	mov	r4, r2
   1d6f8:	461d      	mov	r5, r3
   1d6fa:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1d6fc:	4608      	mov	r0, r1
   1d6fe:	f7ff fedb 	bl	1d4b8 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1d702:	b140      	cbz	r0, 1d716 <ble_att_svr_read_handle+0x26>
   1d704:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1d706:	9600      	str	r6, [sp, #0]
   1d708:	462b      	mov	r3, r5
   1d70a:	4622      	mov	r2, r4
   1d70c:	4638      	mov	r0, r7
   1d70e:	f7ff fa5e 	bl	1cbce <ble_att_svr_read>
}
   1d712:	b003      	add	sp, #12
   1d714:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1d716:	b10e      	cbz	r6, 1d71c <ble_att_svr_read_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d718:	2301      	movs	r3, #1
   1d71a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   1d71c:	2005      	movs	r0, #5
   1d71e:	e7f8      	b.n	1d712 <ble_att_svr_read_handle+0x22>

0001d720 <ble_att_svr_build_read_mult_rsp>:
{
   1d720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d724:	b084      	sub	sp, #16
   1d726:	4680      	mov	r8, r0
   1d728:	460c      	mov	r4, r1
   1d72a:	4691      	mov	r9, r2
   1d72c:	461e      	mov	r6, r3
    mtu = ble_att_mtu(conn_handle);
   1d72e:	f7ff f826 	bl	1c77e <ble_att_mtu>
   1d732:	4607      	mov	r7, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1d734:	4632      	mov	r2, r6
   1d736:	a903      	add	r1, sp, #12
   1d738:	4620      	mov	r0, r4
   1d73a:	f7ff faee 	bl	1cd1a <ble_att_svr_pkt>
    if (rc != 0) {
   1d73e:	4682      	mov	sl, r0
   1d740:	b148      	cbz	r0, 1d756 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   1d742:	2300      	movs	r3, #0
   1d744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d746:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   1d748:	9b03      	ldr	r3, [sp, #12]
   1d74a:	f8c9 3000 	str.w	r3, [r9]
}
   1d74e:	4650      	mov	r0, sl
   1d750:	b004      	add	sp, #16
   1d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   1d756:	9a03      	ldr	r2, [sp, #12]
   1d758:	2100      	movs	r1, #0
   1d75a:	200f      	movs	r0, #15
   1d75c:	f7ff f905 	bl	1c96a <ble_att_cmd_prepare>
   1d760:	b318      	cbz	r0, 1d7aa <ble_att_svr_build_read_mult_rsp+0x8a>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   1d762:	6823      	ldr	r3, [r4, #0]
   1d764:	8a1b      	ldrh	r3, [r3, #16]
   1d766:	2b01      	cmp	r3, #1
   1d768:	d9ee      	bls.n	1d748 <ble_att_svr_build_read_mult_rsp+0x28>
   1d76a:	9b03      	ldr	r3, [sp, #12]
   1d76c:	8a1b      	ldrh	r3, [r3, #16]
   1d76e:	42bb      	cmp	r3, r7
   1d770:	d2ea      	bcs.n	1d748 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1d772:	4632      	mov	r2, r6
   1d774:	2102      	movs	r1, #2
   1d776:	4620      	mov	r0, r4
   1d778:	f7ff fa8c 	bl	1cc94 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   1d77c:	b9e8      	cbnz	r0, 1d7ba <ble_att_svr_build_read_mult_rsp+0x9a>
        handle = get_le16((*rxom)->om_data);
   1d77e:	6823      	ldr	r3, [r4, #0]
   1d780:	6818      	ldr	r0, [r3, #0]
   1d782:	f00d fa2a 	bl	2abda <get_le16>
   1d786:	4605      	mov	r5, r0
        os_mbuf_adj(*rxom, 2);
   1d788:	2102      	movs	r1, #2
   1d78a:	6820      	ldr	r0, [r4, #0]
   1d78c:	f7ef ff49 	bl	d622 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1d790:	9600      	str	r6, [sp, #0]
   1d792:	9b03      	ldr	r3, [sp, #12]
   1d794:	2200      	movs	r2, #0
   1d796:	4629      	mov	r1, r5
   1d798:	4640      	mov	r0, r8
   1d79a:	f7ff ffa9 	bl	1d6f0 <ble_att_svr_read_handle>
        if (rc != 0) {
   1d79e:	2800      	cmp	r0, #0
   1d7a0:	d0df      	beq.n	1d762 <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   1d7a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d7a4:	8015      	strh	r5, [r2, #0]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1d7a6:	4682      	mov	sl, r0
            goto done;
   1d7a8:	e7ce      	b.n	1d748 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d7aa:	2311      	movs	r3, #17
   1d7ac:	7033      	strb	r3, [r6, #0]
        *err_handle = 0;
   1d7ae:	2300      	movs	r3, #0
   1d7b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1d7b2:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1d7b4:	f04f 0a06 	mov.w	sl, #6
        goto done;
   1d7b8:	e7c6      	b.n	1d748 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   1d7ba:	2200      	movs	r2, #0
   1d7bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d7be:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1d7c0:	4682      	mov	sl, r0
            goto done;
   1d7c2:	e7c1      	b.n	1d748 <ble_att_svr_build_read_mult_rsp+0x28>

0001d7c4 <ble_att_svr_tx_error_rsp>:
{
   1d7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7c6:	4605      	mov	r5, r0
   1d7c8:	460c      	mov	r4, r1
   1d7ca:	4617      	mov	r7, r2
   1d7cc:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   1d7ce:	460a      	mov	r2, r1
   1d7d0:	2104      	movs	r1, #4
   1d7d2:	2001      	movs	r0, #1
   1d7d4:	f7ff f8c9 	bl	1c96a <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1d7d8:	b150      	cbz	r0, 1d7f0 <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   1d7da:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   1d7dc:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   1d7e0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1d7e4:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   1d7e6:	4621      	mov	r1, r4
   1d7e8:	4628      	mov	r0, r5
   1d7ea:	f7ff f8df 	bl	1c9ac <ble_att_tx>
}
   1d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1d7f0:	2006      	movs	r0, #6
   1d7f2:	e7fc      	b.n	1d7ee <ble_att_svr_tx_error_rsp+0x2a>

0001d7f4 <ble_att_svr_tx_rsp>:
{
   1d7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7f8:	b085      	sub	sp, #20
   1d7fa:	4607      	mov	r7, r0
   1d7fc:	4614      	mov	r4, r2
   1d7fe:	461e      	mov	r6, r3
   1d800:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   1d804:	4689      	mov	r9, r1
   1d806:	b111      	cbz	r1, 1d80e <ble_att_svr_tx_rsp+0x1a>
   1d808:	f1b8 0f00 	cmp.w	r8, #0
   1d80c:	d03d      	beq.n	1d88a <ble_att_svr_tx_rsp+0x96>
        ble_hs_lock();
   1d80e:	f004 f82d 	bl	2186c <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1d812:	aa03      	add	r2, sp, #12
   1d814:	a902      	add	r1, sp, #8
   1d816:	4638      	mov	r0, r7
   1d818:	f7fe fe8b 	bl	1c532 <ble_att_conn_chan_find>
        if (rc != 0) {
   1d81c:	4605      	mov	r5, r0
   1d81e:	b918      	cbnz	r0, 1d828 <ble_att_svr_tx_rsp+0x34>
            if (hs_status == 0) {
   1d820:	f1b9 0f00 	cmp.w	r9, #0
   1d824:	d018      	beq.n	1d858 <ble_att_svr_tx_rsp+0x64>
   1d826:	464d      	mov	r5, r9
        ble_hs_unlock();
   1d828:	f004 f824 	bl	21874 <ble_hs_unlock>
        if (hs_status != 0) {
   1d82c:	b375      	cbz	r5, 1d88c <ble_att_svr_tx_rsp+0x98>
            STATS_INC(ble_att_stats, error_rsp_tx);
   1d82e:	4a1b      	ldr	r2, [pc, #108]	; (1d89c <ble_att_svr_tx_rsp+0xa8>)
   1d830:	6913      	ldr	r3, [r2, #16]
   1d832:	3301      	adds	r3, #1
   1d834:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   1d836:	b324      	cbz	r4, 1d882 <ble_att_svr_tx_rsp+0x8e>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   1d838:	8a21      	ldrh	r1, [r4, #16]
   1d83a:	4620      	mov	r0, r4
   1d83c:	f7ef fef1 	bl	d622 <os_mbuf_adj>
            if (om != NULL) {
   1d840:	b324      	cbz	r4, 1d88c <ble_att_svr_tx_rsp+0x98>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   1d842:	f8cd 8000 	str.w	r8, [sp]
   1d846:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1d84a:	4632      	mov	r2, r6
   1d84c:	4621      	mov	r1, r4
   1d84e:	4638      	mov	r0, r7
   1d850:	f7ff ffb8 	bl	1d7c4 <ble_att_svr_tx_error_rsp>
                om = NULL;
   1d854:	2400      	movs	r4, #0
   1d856:	e019      	b.n	1d88c <ble_att_svr_tx_rsp+0x98>
                ble_att_inc_tx_stat(om->om_data[0]);
   1d858:	6823      	ldr	r3, [r4, #0]
   1d85a:	7818      	ldrb	r0, [r3, #0]
   1d85c:	f7fe fe70 	bl	1c540 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   1d860:	4621      	mov	r1, r4
   1d862:	9803      	ldr	r0, [sp, #12]
   1d864:	f7fe ff7d 	bl	1c762 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   1d868:	4622      	mov	r2, r4
   1d86a:	9903      	ldr	r1, [sp, #12]
   1d86c:	9802      	ldr	r0, [sp, #8]
   1d86e:	f006 fa39 	bl	23ce4 <ble_l2cap_tx>
                if (hs_status != 0) {
   1d872:	4605      	mov	r5, r0
   1d874:	b908      	cbnz	r0, 1d87a <ble_att_svr_tx_rsp+0x86>
                om = NULL;
   1d876:	2400      	movs	r4, #0
   1d878:	e7d6      	b.n	1d828 <ble_att_svr_tx_rsp+0x34>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   1d87a:	f04f 080e 	mov.w	r8, #14
                om = NULL;
   1d87e:	2400      	movs	r4, #0
   1d880:	e7d2      	b.n	1d828 <ble_att_svr_tx_rsp+0x34>
                om = ble_hs_mbuf_l2cap_pkt();
   1d882:	f005 fdd3 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
   1d886:	4604      	mov	r4, r0
   1d888:	e7da      	b.n	1d840 <ble_att_svr_tx_rsp+0x4c>
   1d88a:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   1d88c:	4620      	mov	r0, r4
   1d88e:	f7ef fdf1 	bl	d474 <os_mbuf_free_chain>
}
   1d892:	4628      	mov	r0, r5
   1d894:	b005      	add	sp, #20
   1d896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d89a:	bf00      	nop
   1d89c:	20002c10 	.word	0x20002c10

0001d8a0 <ble_att_svr_rx_mtu>:
{
   1d8a0:	b570      	push	{r4, r5, r6, lr}
   1d8a2:	b086      	sub	sp, #24
   1d8a4:	4605      	mov	r5, r0
   1d8a6:	460c      	mov	r4, r1
    txom = NULL;
   1d8a8:	2300      	movs	r3, #0
   1d8aa:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   1d8ac:	f10d 020b 	add.w	r2, sp, #11
   1d8b0:	2102      	movs	r1, #2
   1d8b2:	4620      	mov	r0, r4
   1d8b4:	f7ff f9ee 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d8b8:	b180      	cbz	r0, 1d8dc <ble_att_svr_rx_mtu+0x3c>
   1d8ba:	4601      	mov	r1, r0
    mtu = 0;
   1d8bc:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   1d8be:	2300      	movs	r3, #0
   1d8c0:	9301      	str	r3, [sp, #4]
   1d8c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1d8c6:	9300      	str	r3, [sp, #0]
   1d8c8:	2302      	movs	r3, #2
   1d8ca:	9a03      	ldr	r2, [sp, #12]
   1d8cc:	4628      	mov	r0, r5
   1d8ce:	f7ff ff91 	bl	1d7f4 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   1d8d2:	4604      	mov	r4, r0
   1d8d4:	b170      	cbz	r0, 1d8f4 <ble_att_svr_rx_mtu+0x54>
}
   1d8d6:	4620      	mov	r0, r4
   1d8d8:	b006      	add	sp, #24
   1d8da:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1d8dc:	6823      	ldr	r3, [r4, #0]
   1d8de:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   1d8e0:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   1d8e2:	f10d 030b 	add.w	r3, sp, #11
   1d8e6:	aa03      	add	r2, sp, #12
   1d8e8:	4621      	mov	r1, r4
   1d8ea:	4628      	mov	r0, r5
   1d8ec:	f7ff f9de 	bl	1ccac <ble_att_svr_build_mtu_rsp>
   1d8f0:	4601      	mov	r1, r0
    if (rc != 0) {
   1d8f2:	e7e4      	b.n	1d8be <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   1d8f4:	f003 ffba 	bl	2186c <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1d8f8:	aa05      	add	r2, sp, #20
   1d8fa:	a904      	add	r1, sp, #16
   1d8fc:	4628      	mov	r0, r5
   1d8fe:	f7fe fe18 	bl	1c532 <ble_att_conn_chan_find>
        if (rc == 0) {
   1d902:	4604      	mov	r4, r0
   1d904:	b148      	cbz	r0, 1d91a <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   1d906:	f003 ffb5 	bl	21874 <ble_hs_unlock>
        if (rc == 0) {
   1d90a:	2c00      	cmp	r4, #0
   1d90c:	d1e3      	bne.n	1d8d6 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1d90e:	4632      	mov	r2, r6
   1d910:	2104      	movs	r1, #4
   1d912:	4628      	mov	r0, r5
   1d914:	f001 fe4d 	bl	1f5b2 <ble_gap_mtu_event>
    return rc;
   1d918:	e7dd      	b.n	1d8d6 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   1d91a:	4631      	mov	r1, r6
   1d91c:	9805      	ldr	r0, [sp, #20]
   1d91e:	f7fe ff0b 	bl	1c738 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1d922:	9805      	ldr	r0, [sp, #20]
   1d924:	7b83      	ldrb	r3, [r0, #14]
   1d926:	f043 0301 	orr.w	r3, r3, #1
   1d92a:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   1d92c:	f7fe ff09 	bl	1c742 <ble_att_chan_mtu>
   1d930:	4606      	mov	r6, r0
   1d932:	e7e8      	b.n	1d906 <ble_att_svr_rx_mtu+0x66>

0001d934 <ble_att_svr_rx_find_info>:
{
   1d934:	b570      	push	{r4, r5, r6, lr}
   1d936:	b084      	sub	sp, #16
   1d938:	4606      	mov	r6, r0
   1d93a:	460c      	mov	r4, r1
    txom = NULL;
   1d93c:	2300      	movs	r3, #0
   1d93e:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1d940:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1d944:	f10d 020b 	add.w	r2, sp, #11
   1d948:	2104      	movs	r1, #4
   1d94a:	4620      	mov	r0, r4
   1d94c:	f7ff f9a2 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d950:	bb20      	cbnz	r0, 1d99c <ble_att_svr_rx_find_info+0x68>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   1d952:	6823      	ldr	r3, [r4, #0]
   1d954:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   1d956:	881d      	ldrh	r5, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   1d958:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1d95a:	4295      	cmp	r5, r2
   1d95c:	d800      	bhi.n	1d960 <ble_att_svr_rx_find_info+0x2c>
   1d95e:	b975      	cbnz	r5, 1d97e <ble_att_svr_rx_find_info+0x4a>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d960:	2301      	movs	r3, #1
   1d962:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   1d966:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   1d968:	9501      	str	r5, [sp, #4]
   1d96a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1d96e:	9300      	str	r3, [sp, #0]
   1d970:	2304      	movs	r3, #4
   1d972:	9a03      	ldr	r2, [sp, #12]
   1d974:	4630      	mov	r0, r6
   1d976:	f7ff ff3d 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1d97a:	b004      	add	sp, #16
   1d97c:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   1d97e:	f10d 030b 	add.w	r3, sp, #11
   1d982:	9301      	str	r3, [sp, #4]
   1d984:	ab03      	add	r3, sp, #12
   1d986:	9300      	str	r3, [sp, #0]
   1d988:	4623      	mov	r3, r4
   1d98a:	4629      	mov	r1, r5
   1d98c:	4630      	mov	r0, r6
   1d98e:	f7ff fa57 	bl	1ce40 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   1d992:	4601      	mov	r1, r0
   1d994:	2800      	cmp	r0, #0
   1d996:	d1e7      	bne.n	1d968 <ble_att_svr_rx_find_info+0x34>
    err_handle = 0;
   1d998:	2500      	movs	r5, #0
   1d99a:	e7e5      	b.n	1d968 <ble_att_svr_rx_find_info+0x34>
   1d99c:	4601      	mov	r1, r0
        err_handle = 0;
   1d99e:	2500      	movs	r5, #0
   1d9a0:	e7e2      	b.n	1d968 <ble_att_svr_rx_find_info+0x34>

0001d9a2 <ble_att_svr_rx_find_type_value>:
{
   1d9a2:	b570      	push	{r4, r5, r6, lr}
   1d9a4:	b088      	sub	sp, #32
   1d9a6:	4605      	mov	r5, r0
   1d9a8:	460c      	mov	r4, r1
    txom = NULL;
   1d9aa:	2300      	movs	r3, #0
   1d9ac:	9306      	str	r3, [sp, #24]
    att_err = 0;
   1d9ae:	f88d 3017 	strb.w	r3, [sp, #23]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1d9b2:	f10d 0217 	add.w	r2, sp, #23
   1d9b6:	2106      	movs	r1, #6
   1d9b8:	4620      	mov	r0, r4
   1d9ba:	f7ff f96b 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d9be:	bb58      	cbnz	r0, 1da18 <ble_att_svr_rx_find_type_value+0x76>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   1d9c0:	6823      	ldr	r3, [r4, #0]
   1d9c2:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   1d9c4:	881e      	ldrh	r6, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   1d9c6:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   1d9c8:	889b      	ldrh	r3, [r3, #4]
   1d9ca:	2110      	movs	r1, #16
   1d9cc:	f88d 101c 	strb.w	r1, [sp, #28]
   1d9d0:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   1d9d4:	4296      	cmp	r6, r2
   1d9d6:	d800      	bhi.n	1d9da <ble_att_svr_rx_find_type_value+0x38>
   1d9d8:	b976      	cbnz	r6, 1d9f8 <ble_att_svr_rx_find_type_value+0x56>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d9da:	2301      	movs	r3, #1
   1d9dc:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   1d9e0:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1d9e2:	9601      	str	r6, [sp, #4]
   1d9e4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1d9e8:	9300      	str	r3, [sp, #0]
   1d9ea:	2306      	movs	r3, #6
   1d9ec:	9a06      	ldr	r2, [sp, #24]
   1d9ee:	4628      	mov	r0, r5
   1d9f0:	f7ff ff00 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1d9f4:	b008      	add	sp, #32
   1d9f6:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   1d9f8:	f10d 0317 	add.w	r3, sp, #23
   1d9fc:	9302      	str	r3, [sp, #8]
   1d9fe:	ab06      	add	r3, sp, #24
   1da00:	9301      	str	r3, [sp, #4]
   1da02:	9400      	str	r4, [sp, #0]
   1da04:	9b07      	ldr	r3, [sp, #28]
   1da06:	4631      	mov	r1, r6
   1da08:	4628      	mov	r0, r5
   1da0a:	f7ff fb89 	bl	1d120 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   1da0e:	4601      	mov	r1, r0
   1da10:	2800      	cmp	r0, #0
   1da12:	d1e6      	bne.n	1d9e2 <ble_att_svr_rx_find_type_value+0x40>
    err_handle = 0;
   1da14:	2600      	movs	r6, #0
   1da16:	e7e4      	b.n	1d9e2 <ble_att_svr_rx_find_type_value+0x40>
   1da18:	4601      	mov	r1, r0
   1da1a:	2600      	movs	r6, #0
   1da1c:	e7e1      	b.n	1d9e2 <ble_att_svr_rx_find_type_value+0x40>

0001da1e <ble_att_svr_rx_read_type>:
{
   1da1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da22:	b08c      	sub	sp, #48	; 0x30
   1da24:	4605      	mov	r5, r0
   1da26:	460c      	mov	r4, r1
    txom = NULL;
   1da28:	2300      	movs	r3, #0
   1da2a:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1da2c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   1da30:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1da34:	680b      	ldr	r3, [r1, #0]
   1da36:	8a1e      	ldrh	r6, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1da38:	2e06      	cmp	r6, #6
   1da3a:	d001      	beq.n	1da40 <ble_att_svr_rx_read_type+0x22>
   1da3c:	2e14      	cmp	r6, #20
   1da3e:	d132      	bne.n	1daa6 <ble_att_svr_rx_read_type+0x88>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1da40:	f10d 0213 	add.w	r2, sp, #19
   1da44:	4631      	mov	r1, r6
   1da46:	4620      	mov	r0, r4
   1da48:	f7ff f924 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1da4c:	4601      	mov	r1, r0
   1da4e:	bb58      	cbnz	r0, 1daa8 <ble_att_svr_rx_read_type+0x8a>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   1da50:	6821      	ldr	r1, [r4, #0]
   1da52:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   1da54:	881a      	ldrh	r2, [r3, #0]
   1da56:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   1da58:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1da5c:	4547      	cmp	r7, r8
   1da5e:	d800      	bhi.n	1da62 <ble_att_svr_rx_read_type+0x44>
   1da60:	b937      	cbnz	r7, 1da70 <ble_att_svr_rx_read_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1da62:	2301      	movs	r3, #1
   1da64:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   1da68:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   1da6c:	210a      	movs	r1, #10
        goto done;
   1da6e:	e01b      	b.n	1daa8 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   1da70:	1f33      	subs	r3, r6, #4
   1da72:	2204      	movs	r2, #4
   1da74:	a805      	add	r0, sp, #20
   1da76:	f008 fd0f 	bl	26498 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1da7a:	b118      	cbz	r0, 1da84 <ble_att_svr_rx_read_type+0x66>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1da7c:	2104      	movs	r1, #4
   1da7e:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   1da82:	e011      	b.n	1daa8 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   1da84:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   1da88:	9303      	str	r3, [sp, #12]
   1da8a:	f10d 0313 	add.w	r3, sp, #19
   1da8e:	9302      	str	r3, [sp, #8]
   1da90:	ab0b      	add	r3, sp, #44	; 0x2c
   1da92:	9301      	str	r3, [sp, #4]
   1da94:	9400      	str	r4, [sp, #0]
   1da96:	ab05      	add	r3, sp, #20
   1da98:	4642      	mov	r2, r8
   1da9a:	4639      	mov	r1, r7
   1da9c:	4628      	mov	r0, r5
   1da9e:	f7ff fd7d 	bl	1d59c <ble_att_svr_build_read_type_rsp>
   1daa2:	4601      	mov	r1, r0
    if (rc != 0) {
   1daa4:	e000      	b.n	1daa8 <ble_att_svr_rx_read_type+0x8a>
        rc = BLE_HS_EBADDATA;
   1daa6:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   1daa8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1daac:	9301      	str	r3, [sp, #4]
   1daae:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dab2:	9300      	str	r3, [sp, #0]
   1dab4:	2308      	movs	r3, #8
   1dab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dab8:	4628      	mov	r0, r5
   1daba:	f7ff fe9b 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1dabe:	b00c      	add	sp, #48	; 0x30
   1dac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dac4 <ble_att_svr_rx_read>:
{
   1dac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dac8:	b084      	sub	sp, #16
   1daca:	4605      	mov	r5, r0
   1dacc:	460c      	mov	r4, r1
    att_err = 0;
   1dace:	2300      	movs	r3, #0
   1dad0:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dad4:	f10d 020f 	add.w	r2, sp, #15
   1dad8:	2102      	movs	r1, #2
   1dada:	4620      	mov	r0, r4
   1dadc:	f7ff f8da 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dae0:	b170      	cbz	r0, 1db00 <ble_att_svr_rx_read+0x3c>
   1dae2:	4601      	mov	r1, r0
    err_handle = 0;
   1dae4:	2600      	movs	r6, #0
    txom = NULL;
   1dae6:	4637      	mov	r7, r6
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   1dae8:	9601      	str	r6, [sp, #4]
   1daea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1daee:	9300      	str	r3, [sp, #0]
   1daf0:	230a      	movs	r3, #10
   1daf2:	463a      	mov	r2, r7
   1daf4:	4628      	mov	r0, r5
   1daf6:	f7ff fe7d 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1dafa:	b004      	add	sp, #16
   1dafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   1db00:	6827      	ldr	r7, [r4, #0]
   1db02:	683b      	ldr	r3, [r7, #0]
    err_handle = le16toh(req->barq_handle);
   1db04:	881e      	ldrh	r6, [r3, #0]
    *rxom = NULL;
   1db06:	f04f 0800 	mov.w	r8, #0
   1db0a:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1db0e:	8a39      	ldrh	r1, [r7, #16]
   1db10:	4638      	mov	r0, r7
   1db12:	f7ef fd86 	bl	d622 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   1db16:	463a      	mov	r2, r7
   1db18:	4641      	mov	r1, r8
   1db1a:	200b      	movs	r0, #11
   1db1c:	f7fe ff25 	bl	1c96a <ble_att_cmd_prepare>
   1db20:	b150      	cbz	r0, 1db38 <ble_att_svr_rx_read+0x74>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   1db22:	f10d 030f 	add.w	r3, sp, #15
   1db26:	9300      	str	r3, [sp, #0]
   1db28:	463b      	mov	r3, r7
   1db2a:	2200      	movs	r2, #0
   1db2c:	4631      	mov	r1, r6
   1db2e:	4628      	mov	r0, r5
   1db30:	f7ff fdde 	bl	1d6f0 <ble_att_svr_read_handle>
   1db34:	4601      	mov	r1, r0
done:
   1db36:	e7d7      	b.n	1dae8 <ble_att_svr_rx_read+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1db38:	2311      	movs	r3, #17
   1db3a:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1db3e:	2106      	movs	r1, #6
        goto done;
   1db40:	e7d2      	b.n	1dae8 <ble_att_svr_rx_read+0x24>

0001db42 <ble_att_svr_rx_read_blob>:
{
   1db42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db46:	b085      	sub	sp, #20
   1db48:	4605      	mov	r5, r0
   1db4a:	460c      	mov	r4, r1
    att_err = 0;
   1db4c:	2300      	movs	r3, #0
   1db4e:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1db52:	f10d 020f 	add.w	r2, sp, #15
   1db56:	2104      	movs	r1, #4
   1db58:	4620      	mov	r0, r4
   1db5a:	f7ff f89b 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1db5e:	b170      	cbz	r0, 1db7e <ble_att_svr_rx_read_blob+0x3c>
   1db60:	4601      	mov	r1, r0
    err_handle = 0;
   1db62:	2700      	movs	r7, #0
    txom = NULL;
   1db64:	463e      	mov	r6, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   1db66:	9701      	str	r7, [sp, #4]
   1db68:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1db6c:	9300      	str	r3, [sp, #0]
   1db6e:	230c      	movs	r3, #12
   1db70:	4632      	mov	r2, r6
   1db72:	4628      	mov	r0, r5
   1db74:	f7ff fe3e 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1db78:	b005      	add	sp, #20
   1db7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   1db7e:	6826      	ldr	r6, [r4, #0]
   1db80:	6833      	ldr	r3, [r6, #0]
    err_handle = le16toh(req->babq_handle);
   1db82:	881f      	ldrh	r7, [r3, #0]
    offset = le16toh(req->babq_offset);
   1db84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   1db88:	f04f 0800 	mov.w	r8, #0
   1db8c:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1db90:	8a31      	ldrh	r1, [r6, #16]
   1db92:	4630      	mov	r0, r6
   1db94:	f7ef fd45 	bl	d622 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   1db98:	4632      	mov	r2, r6
   1db9a:	4641      	mov	r1, r8
   1db9c:	200d      	movs	r0, #13
   1db9e:	f7fe fee4 	bl	1c96a <ble_att_cmd_prepare>
   1dba2:	b150      	cbz	r0, 1dbba <ble_att_svr_rx_read_blob+0x78>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   1dba4:	f10d 030f 	add.w	r3, sp, #15
   1dba8:	9300      	str	r3, [sp, #0]
   1dbaa:	4633      	mov	r3, r6
   1dbac:	464a      	mov	r2, r9
   1dbae:	4639      	mov	r1, r7
   1dbb0:	4628      	mov	r0, r5
   1dbb2:	f7ff fd9d 	bl	1d6f0 <ble_att_svr_read_handle>
   1dbb6:	4601      	mov	r1, r0
    if (rc != 0) {
   1dbb8:	e7d5      	b.n	1db66 <ble_att_svr_rx_read_blob+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1dbba:	2311      	movs	r3, #17
   1dbbc:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1dbc0:	2106      	movs	r1, #6
        goto done;
   1dbc2:	e7d0      	b.n	1db66 <ble_att_svr_rx_read_blob+0x24>

0001dbc4 <ble_att_svr_rx_read_mult>:
{
   1dbc4:	b510      	push	{r4, lr}
   1dbc6:	b084      	sub	sp, #16
   1dbc8:	4604      	mov	r4, r0
    txom = NULL;
   1dbca:	2300      	movs	r3, #0
   1dbcc:	9303      	str	r3, [sp, #12]
    err_handle = 0;
   1dbce:	f8ad 300a 	strh.w	r3, [sp, #10]
    att_err = 0;
   1dbd2:	f88d 3009 	strb.w	r3, [sp, #9]
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   1dbd6:	f10d 030a 	add.w	r3, sp, #10
   1dbda:	9300      	str	r3, [sp, #0]
   1dbdc:	f10d 0309 	add.w	r3, sp, #9
   1dbe0:	aa03      	add	r2, sp, #12
   1dbe2:	f7ff fd9d 	bl	1d720 <ble_att_svr_build_read_mult_rsp>
   1dbe6:	4601      	mov	r1, r0
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   1dbe8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1dbec:	9301      	str	r3, [sp, #4]
   1dbee:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1dbf2:	9300      	str	r3, [sp, #0]
   1dbf4:	230e      	movs	r3, #14
   1dbf6:	9a03      	ldr	r2, [sp, #12]
   1dbf8:	4620      	mov	r0, r4
   1dbfa:	f7ff fdfb 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1dbfe:	b004      	add	sp, #16
   1dc00:	bd10      	pop	{r4, pc}

0001dc02 <ble_att_svr_rx_read_group_type>:
{
   1dc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc06:	b08c      	sub	sp, #48	; 0x30
   1dc08:	4605      	mov	r5, r0
   1dc0a:	460c      	mov	r4, r1
    txom = NULL;
   1dc0c:	2300      	movs	r3, #0
   1dc0e:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1dc10:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   1dc14:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1dc18:	680b      	ldr	r3, [r1, #0]
   1dc1a:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1dc1c:	2906      	cmp	r1, #6
   1dc1e:	d001      	beq.n	1dc24 <ble_att_svr_rx_read_group_type+0x22>
   1dc20:	2914      	cmp	r1, #20
   1dc22:	d140      	bne.n	1dca6 <ble_att_svr_rx_read_group_type+0xa4>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1dc24:	f10d 0215 	add.w	r2, sp, #21
   1dc28:	4620      	mov	r0, r4
   1dc2a:	f7ff f833 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dc2e:	4601      	mov	r1, r0
   1dc30:	2800      	cmp	r0, #0
   1dc32:	d139      	bne.n	1dca8 <ble_att_svr_rx_read_group_type+0xa6>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   1dc34:	6821      	ldr	r1, [r4, #0]
   1dc36:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   1dc38:	881e      	ldrh	r6, [r3, #0]
   1dc3a:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   1dc3c:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1dc40:	4547      	cmp	r7, r8
   1dc42:	d800      	bhi.n	1dc46 <ble_att_svr_rx_read_group_type+0x44>
   1dc44:	b937      	cbnz	r7, 1dc54 <ble_att_svr_rx_read_group_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1dc46:	2301      	movs	r3, #1
   1dc48:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1dc4c:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1dc50:	210a      	movs	r1, #10
        goto done;
   1dc52:	e029      	b.n	1dca8 <ble_att_svr_rx_read_group_type+0xa6>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   1dc54:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   1dc56:	3b04      	subs	r3, #4
   1dc58:	2204      	movs	r2, #4
   1dc5a:	a806      	add	r0, sp, #24
   1dc5c:	f008 fc1c 	bl	26498 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1dc60:	b130      	cbz	r0, 1dc70 <ble_att_svr_rx_read_group_type+0x6e>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1dc62:	2304      	movs	r3, #4
   1dc64:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1dc68:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1dc6c:	210a      	movs	r1, #10
        goto done;
   1dc6e:	e01b      	b.n	1dca8 <ble_att_svr_rx_read_group_type+0xa6>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   1dc70:	a806      	add	r0, sp, #24
   1dc72:	f7ff f97a 	bl	1cf6a <ble_att_svr_is_valid_read_group_type>
   1dc76:	b928      	cbnz	r0, 1dc84 <ble_att_svr_rx_read_group_type+0x82>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   1dc78:	2110      	movs	r1, #16
   1dc7a:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   1dc7e:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   1dc82:	e011      	b.n	1dca8 <ble_att_svr_rx_read_group_type+0xa6>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   1dc84:	f10d 0316 	add.w	r3, sp, #22
   1dc88:	9303      	str	r3, [sp, #12]
   1dc8a:	f10d 0315 	add.w	r3, sp, #21
   1dc8e:	9302      	str	r3, [sp, #8]
   1dc90:	ab0b      	add	r3, sp, #44	; 0x2c
   1dc92:	9301      	str	r3, [sp, #4]
   1dc94:	9400      	str	r4, [sp, #0]
   1dc96:	ab06      	add	r3, sp, #24
   1dc98:	4642      	mov	r2, r8
   1dc9a:	4639      	mov	r1, r7
   1dc9c:	4628      	mov	r0, r5
   1dc9e:	f7ff fa89 	bl	1d1b4 <ble_att_svr_build_read_group_type_rsp>
   1dca2:	4601      	mov	r1, r0
    if (rc != 0) {
   1dca4:	e000      	b.n	1dca8 <ble_att_svr_rx_read_group_type+0xa6>
        rc = BLE_HS_EBADDATA;
   1dca6:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1dca8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1dcac:	9301      	str	r3, [sp, #4]
   1dcae:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1dcb2:	9300      	str	r3, [sp, #0]
   1dcb4:	2310      	movs	r3, #16
   1dcb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1dcb8:	4628      	mov	r0, r5
   1dcba:	f7ff fd9b 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1dcbe:	b00c      	add	sp, #48	; 0x30
   1dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dcc4 <ble_att_svr_rx_write>:
{
   1dcc4:	b570      	push	{r4, r5, r6, lr}
   1dcc6:	b084      	sub	sp, #16
   1dcc8:	4605      	mov	r5, r0
   1dcca:	460c      	mov	r4, r1
    txom = NULL;
   1dccc:	2300      	movs	r3, #0
   1dcce:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1dcd0:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dcd4:	f10d 020b 	add.w	r2, sp, #11
   1dcd8:	2102      	movs	r1, #2
   1dcda:	4620      	mov	r0, r4
   1dcdc:	f7fe ffda 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dce0:	b160      	cbz	r0, 1dcfc <ble_att_svr_rx_write+0x38>
   1dce2:	4601      	mov	r1, r0
    handle = 0;
   1dce4:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   1dce6:	9601      	str	r6, [sp, #4]
   1dce8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1dcec:	9300      	str	r3, [sp, #0]
   1dcee:	2312      	movs	r3, #18
   1dcf0:	9a03      	ldr	r2, [sp, #12]
   1dcf2:	4628      	mov	r0, r5
   1dcf4:	f7ff fd7e 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1dcf8:	b004      	add	sp, #16
   1dcfa:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1dcfc:	6823      	ldr	r3, [r4, #0]
   1dcfe:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   1dd00:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   1dd02:	f10d 020b 	add.w	r2, sp, #11
   1dd06:	a903      	add	r1, sp, #12
   1dd08:	4620      	mov	r0, r4
   1dd0a:	f7ff f818 	bl	1cd3e <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   1dd0e:	4601      	mov	r1, r0
   1dd10:	2800      	cmp	r0, #0
   1dd12:	d1e8      	bne.n	1dce6 <ble_att_svr_rx_write+0x22>
    os_mbuf_adj(*rxom, sizeof(*req));
   1dd14:	2102      	movs	r1, #2
   1dd16:	6820      	ldr	r0, [r4, #0]
   1dd18:	f7ef fc83 	bl	d622 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1dd1c:	f10d 030b 	add.w	r3, sp, #11
   1dd20:	9300      	str	r3, [sp, #0]
   1dd22:	4623      	mov	r3, r4
   1dd24:	2200      	movs	r2, #0
   1dd26:	4631      	mov	r1, r6
   1dd28:	4628      	mov	r0, r5
   1dd2a:	f7ff fbd1 	bl	1d4d0 <ble_att_svr_write_handle>
   1dd2e:	4601      	mov	r1, r0
    if (rc != 0) {
   1dd30:	e7d9      	b.n	1dce6 <ble_att_svr_rx_write+0x22>

0001dd32 <ble_att_svr_rx_write_no_rsp>:
{
   1dd32:	b570      	push	{r4, r5, r6, lr}
   1dd34:	b084      	sub	sp, #16
   1dd36:	4605      	mov	r5, r0
   1dd38:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dd3a:	f10d 020f 	add.w	r2, sp, #15
   1dd3e:	2102      	movs	r1, #2
   1dd40:	4620      	mov	r0, r4
   1dd42:	f7fe ffa7 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dd46:	4603      	mov	r3, r0
   1dd48:	b110      	cbz	r0, 1dd50 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   1dd4a:	4618      	mov	r0, r3
   1dd4c:	b004      	add	sp, #16
   1dd4e:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1dd50:	6820      	ldr	r0, [r4, #0]
   1dd52:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   1dd54:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   1dd56:	2102      	movs	r1, #2
   1dd58:	f7ef fc63 	bl	d622 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1dd5c:	f10d 030f 	add.w	r3, sp, #15
   1dd60:	9300      	str	r3, [sp, #0]
   1dd62:	4623      	mov	r3, r4
   1dd64:	2200      	movs	r2, #0
   1dd66:	4631      	mov	r1, r6
   1dd68:	4628      	mov	r0, r5
   1dd6a:	f7ff fbb1 	bl	1d4d0 <ble_att_svr_write_handle>
   1dd6e:	4603      	mov	r3, r0
   1dd70:	e7eb      	b.n	1dd4a <ble_att_svr_rx_write_no_rsp+0x18>

0001dd72 <ble_att_svr_prep_clear>:
{
   1dd72:	b510      	push	{r4, lr}
   1dd74:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1dd76:	6820      	ldr	r0, [r4, #0]
   1dd78:	b120      	cbz	r0, 1dd84 <ble_att_svr_prep_clear+0x12>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1dd7a:	6803      	ldr	r3, [r0, #0]
   1dd7c:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   1dd7e:	f7ff fad5 	bl	1d32c <ble_att_svr_prep_free>
   1dd82:	e7f8      	b.n	1dd76 <ble_att_svr_prep_clear+0x4>
}
   1dd84:	bd10      	pop	{r4, pc}

0001dd86 <ble_att_svr_rx_prep_write>:
{
   1dd86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dd8a:	b085      	sub	sp, #20
   1dd8c:	4605      	mov	r5, r0
   1dd8e:	460c      	mov	r4, r1
    att_err = 0;
   1dd90:	2300      	movs	r3, #0
   1dd92:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1dd96:	f10d 020f 	add.w	r2, sp, #15
   1dd9a:	2104      	movs	r1, #4
   1dd9c:	4620      	mov	r0, r4
   1dd9e:	f7fe ff79 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1dda2:	b178      	cbz	r0, 1ddc4 <ble_att_svr_rx_prep_write+0x3e>
   1dda4:	4606      	mov	r6, r0
    err_handle = 0;
   1dda6:	2700      	movs	r7, #0
    txom = NULL;
   1dda8:	46b8      	mov	r8, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   1ddaa:	9701      	str	r7, [sp, #4]
   1ddac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ddb0:	9300      	str	r3, [sp, #0]
   1ddb2:	2316      	movs	r3, #22
   1ddb4:	4642      	mov	r2, r8
   1ddb6:	4631      	mov	r1, r6
   1ddb8:	4628      	mov	r0, r5
   1ddba:	f7ff fd1b 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1ddbe:	b005      	add	sp, #20
   1ddc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1ddc4:	6823      	ldr	r3, [r4, #0]
   1ddc6:	f8d3 9000 	ldr.w	r9, [r3]
    err_handle = le16toh(req->bapc_handle);
   1ddca:	f8b9 7000 	ldrh.w	r7, [r9]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   1ddce:	4638      	mov	r0, r7
   1ddd0:	f7ff fb72 	bl	1d4b8 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   1ddd4:	4680      	mov	r8, r0
   1ddd6:	b158      	cbz	r0, 1ddf0 <ble_att_svr_rx_prep_write+0x6a>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   1ddd8:	f10d 030f 	add.w	r3, sp, #15
   1dddc:	4602      	mov	r2, r0
   1ddde:	2100      	movs	r1, #0
   1dde0:	4628      	mov	r0, r5
   1dde2:	f7fe fe6e 	bl	1cac2 <ble_att_svr_check_perms>
    if (rc != 0) {
   1dde6:	4606      	mov	r6, r0
   1dde8:	b138      	cbz	r0, 1ddfa <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   1ddea:	f04f 0800 	mov.w	r8, #0
   1ddee:	e7dc      	b.n	1ddaa <ble_att_svr_rx_prep_write+0x24>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1ddf0:	2301      	movs	r3, #1
   1ddf2:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   1ddf6:	2605      	movs	r6, #5
        goto done;
   1ddf8:	e7d7      	b.n	1ddaa <ble_att_svr_rx_prep_write+0x24>
    ble_hs_lock();
   1ddfa:	f003 fd37 	bl	2186c <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1ddfe:	f8b9 1000 	ldrh.w	r1, [r9]
                                       le16toh(req->bapc_offset), *rxom,
   1de02:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1de06:	f10d 030f 	add.w	r3, sp, #15
   1de0a:	9300      	str	r3, [sp, #0]
   1de0c:	6823      	ldr	r3, [r4, #0]
   1de0e:	4628      	mov	r0, r5
   1de10:	f7ff fab8 	bl	1d384 <ble_att_svr_insert_prep_entry>
   1de14:	4606      	mov	r6, r0
    ble_hs_unlock();
   1de16:	f003 fd2d 	bl	21874 <ble_hs_unlock>
    txom = *rxom;
   1de1a:	f8d4 8000 	ldr.w	r8, [r4]
    *rxom = NULL;
   1de1e:	2300      	movs	r3, #0
   1de20:	6023      	str	r3, [r4, #0]
    if (rc != 0) {
   1de22:	2e00      	cmp	r6, #0
   1de24:	d1c1      	bne.n	1ddaa <ble_att_svr_rx_prep_write+0x24>
    os_mbuf_prepend(txom, 1);
   1de26:	2101      	movs	r1, #1
   1de28:	4640      	mov	r0, r8
   1de2a:	f7ef fc88 	bl	d73e <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   1de2e:	f8d8 3000 	ldr.w	r3, [r8]
   1de32:	2217      	movs	r2, #23
   1de34:	701a      	strb	r2, [r3, #0]
    rc = 0;
   1de36:	e7b8      	b.n	1ddaa <ble_att_svr_rx_prep_write+0x24>

0001de38 <ble_att_svr_rx_exec_write>:
{
   1de38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1de3c:	b085      	sub	sp, #20
   1de3e:	4605      	mov	r5, r0
   1de40:	460c      	mov	r4, r1
    err_handle = 0;
   1de42:	2300      	movs	r3, #0
   1de44:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1de48:	f10d 0209 	add.w	r2, sp, #9
   1de4c:	2101      	movs	r1, #1
   1de4e:	4620      	mov	r0, r4
   1de50:	f7fe ff20 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1de54:	4607      	mov	r7, r0
   1de56:	b190      	cbz	r0, 1de7e <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   1de58:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   1de5c:	4646      	mov	r6, r8
    if (rc == 0) {
   1de5e:	b337      	cbz	r7, 1deae <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   1de60:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1de64:	9301      	str	r3, [sp, #4]
   1de66:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1de6a:	9300      	str	r3, [sp, #0]
   1de6c:	2318      	movs	r3, #24
   1de6e:	4632      	mov	r2, r6
   1de70:	4639      	mov	r1, r7
   1de72:	4628      	mov	r0, r5
   1de74:	f7ff fcbe 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1de78:	b005      	add	sp, #20
   1de7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   1de7e:	6826      	ldr	r6, [r4, #0]
   1de80:	6833      	ldr	r3, [r6, #0]
    flags = req->baeq_flags;
   1de82:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   1de86:	f04f 0900 	mov.w	r9, #0
   1de8a:	f8c4 9000 	str.w	r9, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1de8e:	8a31      	ldrh	r1, [r6, #16]
   1de90:	4630      	mov	r0, r6
   1de92:	f7ef fbc6 	bl	d622 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   1de96:	4632      	mov	r2, r6
   1de98:	4649      	mov	r1, r9
   1de9a:	2019      	movs	r0, #25
   1de9c:	f7fe fd65 	bl	1c96a <ble_att_cmd_prepare>
   1dea0:	2800      	cmp	r0, #0
   1dea2:	d1dc      	bne.n	1de5e <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1dea4:	2311      	movs	r3, #17
   1dea6:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   1deaa:	2706      	movs	r7, #6
        goto done;
   1deac:	e7d7      	b.n	1de5e <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   1deae:	f003 fcdd 	bl	2186c <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   1deb2:	4628      	mov	r0, r5
   1deb4:	f004 fb50 	bl	22558 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   1deb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1deba:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   1debc:	2300      	movs	r3, #0
   1debe:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   1dec0:	f003 fcd8 	bl	21874 <ble_hs_unlock>
        if (flags) {
   1dec4:	f1b8 0f00 	cmp.w	r8, #0
   1dec8:	d103      	bne.n	1ded2 <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   1deca:	a803      	add	r0, sp, #12
   1decc:	f7ff ff51 	bl	1dd72 <ble_att_svr_prep_clear>
   1ded0:	e7c6      	b.n	1de60 <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   1ded2:	f10d 020a 	add.w	r2, sp, #10
   1ded6:	a903      	add	r1, sp, #12
   1ded8:	4628      	mov	r0, r5
   1deda:	f7ff fb11 	bl	1d500 <ble_att_svr_prep_write>
   1dede:	b2c0      	uxtb	r0, r0
   1dee0:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   1dee4:	2800      	cmp	r0, #0
   1dee6:	d0f0      	beq.n	1deca <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   1dee8:	2709      	movs	r7, #9
   1deea:	e7ee      	b.n	1deca <ble_att_svr_rx_exec_write+0x92>

0001deec <ble_att_svr_rx_notify>:
{
   1deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deee:	4605      	mov	r5, r0
   1def0:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1def2:	2200      	movs	r2, #0
   1def4:	2102      	movs	r1, #2
   1def6:	4620      	mov	r0, r4
   1def8:	f7fe fecc 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1defc:	b988      	cbnz	r0, 1df22 <ble_att_svr_rx_notify+0x36>
   1defe:	4606      	mov	r6, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   1df00:	6820      	ldr	r0, [r4, #0]
   1df02:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   1df04:	881f      	ldrh	r7, [r3, #0]
    if (handle == 0) {
   1df06:	b177      	cbz	r7, 1df26 <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   1df08:	2102      	movs	r1, #2
   1df0a:	f7ef fb8a 	bl	d622 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   1df0e:	2300      	movs	r3, #0
   1df10:	6822      	ldr	r2, [r4, #0]
   1df12:	4639      	mov	r1, r7
   1df14:	4628      	mov	r0, r5
   1df16:	f001 face 	bl	1f4b6 <ble_gap_notify_rx_event>
    *rxom = NULL;
   1df1a:	2300      	movs	r3, #0
   1df1c:	6023      	str	r3, [r4, #0]
}
   1df1e:	4630      	mov	r0, r6
   1df20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1df22:	2606      	movs	r6, #6
   1df24:	e7fb      	b.n	1df1e <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   1df26:	260a      	movs	r6, #10
   1df28:	e7f9      	b.n	1df1e <ble_att_svr_rx_notify+0x32>

0001df2a <ble_att_svr_rx_indicate>:
{
   1df2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df2c:	b085      	sub	sp, #20
   1df2e:	4607      	mov	r7, r0
   1df30:	460c      	mov	r4, r1
    txom = NULL;
   1df32:	2200      	movs	r2, #0
   1df34:	9203      	str	r2, [sp, #12]
    att_err = 0;
   1df36:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1df3a:	2102      	movs	r1, #2
   1df3c:	4620      	mov	r0, r4
   1df3e:	f7fe fea9 	bl	1cc94 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1df42:	b9d0      	cbnz	r0, 1df7a <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   1df44:	6823      	ldr	r3, [r4, #0]
   1df46:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   1df48:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   1df4a:	b90d      	cbnz	r5, 1df50 <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   1df4c:	260a      	movs	r6, #10
   1df4e:	e016      	b.n	1df7e <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   1df50:	f10d 020b 	add.w	r2, sp, #11
   1df54:	a903      	add	r1, sp, #12
   1df56:	4620      	mov	r0, r4
   1df58:	f7fe ff0a 	bl	1cd70 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   1df5c:	4606      	mov	r6, r0
   1df5e:	b970      	cbnz	r0, 1df7e <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   1df60:	2102      	movs	r1, #2
   1df62:	6820      	ldr	r0, [r4, #0]
   1df64:	f7ef fb5d 	bl	d622 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   1df68:	2301      	movs	r3, #1
   1df6a:	6822      	ldr	r2, [r4, #0]
   1df6c:	4629      	mov	r1, r5
   1df6e:	4638      	mov	r0, r7
   1df70:	f001 faa1 	bl	1f4b6 <ble_gap_notify_rx_event>
    *rxom = NULL;
   1df74:	2300      	movs	r3, #0
   1df76:	6023      	str	r3, [r4, #0]
    rc = 0;
   1df78:	e001      	b.n	1df7e <ble_att_svr_rx_indicate+0x54>
   1df7a:	4606      	mov	r6, r0
    handle = 0;
   1df7c:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   1df7e:	9501      	str	r5, [sp, #4]
   1df80:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1df84:	9300      	str	r3, [sp, #0]
   1df86:	231d      	movs	r3, #29
   1df88:	9a03      	ldr	r2, [sp, #12]
   1df8a:	4631      	mov	r1, r6
   1df8c:	4638      	mov	r0, r7
   1df8e:	f7ff fc31 	bl	1d7f4 <ble_att_svr_tx_rsp>
}
   1df92:	b005      	add	sp, #20
   1df94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001df98 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   1df98:	b510      	push	{r4, lr}
   1df9a:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   1df9c:	f7ff fa54 	bl	1d448 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   1dfa0:	4b0f      	ldr	r3, [pc, #60]	; (1dfe0 <ble_att_svr_start+0x48>)
   1dfa2:	881c      	ldrh	r4, [r3, #0]
   1dfa4:	b91c      	cbnz	r4, 1dfae <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   1dfa6:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   1dfa8:	4620      	mov	r0, r4
   1dfaa:	b002      	add	sp, #8
   1dfac:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   1dfae:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1dfb2:	0080      	lsls	r0, r0, #2
   1dfb4:	f00c ffd2 	bl	2af5c <malloc>
   1dfb8:	4603      	mov	r3, r0
   1dfba:	4a0a      	ldr	r2, [pc, #40]	; (1dfe4 <ble_att_svr_start+0x4c>)
   1dfbc:	6010      	str	r0, [r2, #0]
        if (ble_att_svr_entry_mem == NULL) {
   1dfbe:	b168      	cbz	r0, 1dfdc <ble_att_svr_start+0x44>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   1dfc0:	4a09      	ldr	r2, [pc, #36]	; (1dfe8 <ble_att_svr_start+0x50>)
   1dfc2:	9200      	str	r2, [sp, #0]
   1dfc4:	2214      	movs	r2, #20
   1dfc6:	4621      	mov	r1, r4
   1dfc8:	4808      	ldr	r0, [pc, #32]	; (1dfec <ble_att_svr_start+0x54>)
   1dfca:	f7ef fdf9 	bl	dbc0 <os_mempool_init>
        if (rc != 0) {
   1dfce:	b908      	cbnz	r0, 1dfd4 <ble_att_svr_start+0x3c>
    return 0;
   1dfd0:	2400      	movs	r4, #0
   1dfd2:	e7e9      	b.n	1dfa8 <ble_att_svr_start+0x10>
            rc = BLE_HS_EOS;
   1dfd4:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   1dfd6:	f7ff fa37 	bl	1d448 <ble_att_svr_free_start_mem>
    return rc;
   1dfda:	e7e5      	b.n	1dfa8 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   1dfdc:	2406      	movs	r4, #6
   1dfde:	e7fa      	b.n	1dfd6 <ble_att_svr_start+0x3e>
   1dfe0:	200033d0 	.word	0x200033d0
   1dfe4:	20002cf4 	.word	0x20002cf4
   1dfe8:	0002dea8 	.word	0x0002dea8
   1dfec:	20002cf8 	.word	0x20002cf8

0001dff0 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   1dff0:	b500      	push	{lr}
   1dff2:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   1dff4:	4b0a      	ldr	r3, [pc, #40]	; (1e020 <ble_att_svr_init+0x30>)
   1dff6:	9300      	str	r3, [sp, #0]
   1dff8:	4b0a      	ldr	r3, [pc, #40]	; (1e024 <ble_att_svr_init+0x34>)
   1dffa:	220c      	movs	r2, #12
   1dffc:	2140      	movs	r1, #64	; 0x40
   1dffe:	480a      	ldr	r0, [pc, #40]	; (1e028 <ble_att_svr_init+0x38>)
   1e000:	f7ef fdde 	bl	dbc0 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   1e004:	b950      	cbnz	r0, 1e01c <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   1e006:	4b09      	ldr	r3, [pc, #36]	; (1e02c <ble_att_svr_init+0x3c>)
   1e008:	6018      	str	r0, [r3, #0]
   1e00a:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   1e00c:	4b08      	ldr	r3, [pc, #32]	; (1e030 <ble_att_svr_init+0x40>)
   1e00e:	6018      	str	r0, [r3, #0]
   1e010:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   1e012:	4b08      	ldr	r3, [pc, #32]	; (1e034 <ble_att_svr_init+0x44>)
   1e014:	8018      	strh	r0, [r3, #0]

    return 0;
}
   1e016:	b003      	add	sp, #12
   1e018:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   1e01c:	200b      	movs	r0, #11
   1e01e:	e7fa      	b.n	1e016 <ble_att_svr_init+0x26>
   1e020:	0002dec0 	.word	0x0002dec0
   1e024:	20002d28 	.word	0x20002d28
   1e028:	20003028 	.word	0x20003028
   1e02c:	20002d20 	.word	0x20002d20
   1e030:	20002d14 	.word	0x20002d14
   1e034:	20002d1c 	.word	0x20002d1c

0001e038 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   1e038:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   1e03a:	b119      	cbz	r1, 1e044 <ble_gap_call_event_cb+0xc>
   1e03c:	460b      	mov	r3, r1
        rc = cb(event, cb_arg);
   1e03e:	4611      	mov	r1, r2
   1e040:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   1e042:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   1e044:	7803      	ldrb	r3, [r0, #0]
   1e046:	2b04      	cmp	r3, #4
   1e048:	d001      	beq.n	1e04e <ble_gap_call_event_cb+0x16>
        rc = 0;
   1e04a:	2000      	movs	r0, #0
    return rc;
   1e04c:	e7f9      	b.n	1e042 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   1e04e:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   1e050:	6883      	ldr	r3, [r0, #8]
   1e052:	6810      	ldr	r0, [r2, #0]
   1e054:	6851      	ldr	r1, [r2, #4]
   1e056:	6892      	ldr	r2, [r2, #8]
   1e058:	6018      	str	r0, [r3, #0]
   1e05a:	6059      	str	r1, [r3, #4]
   1e05c:	609a      	str	r2, [r3, #8]
        rc = 0;
   1e05e:	2000      	movs	r0, #0
   1e060:	e7ef      	b.n	1e042 <ble_gap_call_event_cb+0xa>
	...

0001e064 <ble_gap_is_preempted>:
    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
        return true;
    }
#endif
#if NIMBLE_BLE_ADVERTISE
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e064:	2300      	movs	r3, #0
   1e066:	2b00      	cmp	r3, #0
   1e068:	dd01      	ble.n	1e06e <ble_gap_is_preempted+0xa>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }
#endif
    return false;
   1e06a:	2000      	movs	r0, #0
}
   1e06c:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   1e06e:	4a05      	ldr	r2, [pc, #20]	; (1e084 <ble_gap_is_preempted+0x20>)
   1e070:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1e074:	7852      	ldrb	r2, [r2, #1]
   1e076:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1e07a:	f012 0f04 	tst.w	r2, #4
   1e07e:	d1f5      	bne.n	1e06c <ble_gap_is_preempted+0x8>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e080:	3301      	adds	r3, #1
   1e082:	e7f0      	b.n	1e066 <ble_gap_is_preempted+0x2>
   1e084:	20000548 	.word	0x20000548

0001e088 <ble_gap_has_client>:

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   1e088:	b120      	cbz	r0, 1e094 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb != NULL;
   1e08a:	6880      	ldr	r0, [r0, #8]
   1e08c:	3800      	subs	r0, #0
   1e08e:	bf18      	it	ne
   1e090:	2001      	movne	r0, #1
   1e092:	4770      	bx	lr
        return 0;
   1e094:	2000      	movs	r0, #0
}
   1e096:	4770      	bx	lr

0001e098 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   1e098:	8803      	ldrh	r3, [r0, #0]
   1e09a:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   1e09c:	8843      	ldrh	r3, [r0, #2]
   1e09e:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   1e0a0:	8883      	ldrh	r3, [r0, #4]
   1e0a2:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   1e0a4:	88c3      	ldrh	r3, [r0, #6]
   1e0a6:	80cb      	strh	r3, [r1, #6]
}
   1e0a8:	4770      	bx	lr
	...

0001e0ac <ble_gap_adv_active_instance>:
#if NIMBLE_BLE_ADVERTISE || NIMBLE_BLE_CONNECT
static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   1e0ac:	0100      	lsls	r0, r0, #4
   1e0ae:	4b03      	ldr	r3, [pc, #12]	; (1e0bc <ble_gap_adv_active_instance+0x10>)
   1e0b0:	5c18      	ldrb	r0, [r3, r0]
}
   1e0b2:	2801      	cmp	r0, #1
   1e0b4:	bf14      	ite	ne
   1e0b6:	2000      	movne	r0, #0
   1e0b8:	2001      	moveq	r0, #1
   1e0ba:	4770      	bx	lr
   1e0bc:	20000548 	.word	0x20000548

0001e0c0 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   1e0c0:	4b05      	ldr	r3, [pc, #20]	; (1e0d8 <ble_gap_accept_master_conn+0x18>)
   1e0c2:	7c1b      	ldrb	r3, [r3, #16]
   1e0c4:	2b02      	cmp	r3, #2
   1e0c6:	d001      	beq.n	1e0cc <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   1e0c8:	2005      	movs	r0, #5
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   1e0ca:	4770      	bx	lr
        STATS_INC(ble_gap_stats, connect_mst);
   1e0cc:	4a03      	ldr	r2, [pc, #12]	; (1e0dc <ble_gap_accept_master_conn+0x1c>)
   1e0ce:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1e0d0:	3301      	adds	r3, #1
   1e0d2:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   1e0d4:	2000      	movs	r0, #0
   1e0d6:	4770      	bx	lr
   1e0d8:	20000548 	.word	0x20000548
   1e0dc:	20003048 	.word	0x20003048

0001e0e0 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   1e0e0:	b988      	cbnz	r0, 1e106 <ble_gap_accept_slave_conn+0x26>
{
   1e0e2:	b510      	push	{r4, lr}
   1e0e4:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   1e0e6:	f7ff ffe1 	bl	1e0ac <ble_gap_adv_active_instance>
   1e0ea:	b170      	cbz	r0, 1e10a <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   1e0ec:	4b09      	ldr	r3, [pc, #36]	; (1e114 <ble_gap_accept_slave_conn+0x34>)
   1e0ee:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   1e0f2:	7863      	ldrb	r3, [r4, #1]
   1e0f4:	f013 0f08 	tst.w	r3, #8
   1e0f8:	d009      	beq.n	1e10e <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   1e0fa:	4a07      	ldr	r2, [pc, #28]	; (1e118 <ble_gap_accept_slave_conn+0x38>)
   1e0fc:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1e0fe:	3301      	adds	r3, #1
   1e100:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   1e102:	2000      	movs	r0, #0
    }

    return rc;
}
   1e104:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   1e106:	2005      	movs	r0, #5
}
   1e108:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1e10a:	2005      	movs	r0, #5
   1e10c:	e7fa      	b.n	1e104 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   1e10e:	2005      	movs	r0, #5
    return rc;
   1e110:	e7f8      	b.n	1e104 <ble_gap_accept_slave_conn+0x24>
   1e112:	bf00      	nop
   1e114:	20000548 	.word	0x20000548
   1e118:	20003048 	.word	0x20003048

0001e11c <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   1e11c:	7803      	ldrb	r3, [r0, #0]
   1e11e:	b11b      	cbz	r3, 1e128 <ble_gap_adv_type+0xc>
   1e120:	2b01      	cmp	r3, #1
   1e122:	d005      	beq.n	1e130 <ble_gap_adv_type+0x14>
   1e124:	2000      	movs	r0, #0
   1e126:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   1e128:	7843      	ldrb	r3, [r0, #1]
   1e12a:	b93b      	cbnz	r3, 1e13c <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   1e12c:	2003      	movs	r0, #3
   1e12e:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   1e130:	7a03      	ldrb	r3, [r0, #8]
   1e132:	f013 0f01 	tst.w	r3, #1
   1e136:	d003      	beq.n	1e140 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   1e138:	2001      	movs	r0, #1
   1e13a:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   1e13c:	2002      	movs	r0, #2
   1e13e:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   1e140:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   1e142:	4770      	bx	lr

0001e144 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   1e144:	2801      	cmp	r0, #1
   1e146:	d011      	beq.n	1e16c <ble_gap_adv_dflt_itvls+0x28>
   1e148:	2802      	cmp	r0, #2
   1e14a:	d00a      	beq.n	1e162 <ble_gap_adv_dflt_itvls+0x1e>
   1e14c:	b120      	cbz	r0, 1e158 <ble_gap_adv_dflt_itvls+0x14>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1e14e:	2330      	movs	r3, #48	; 0x30
   1e150:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1e152:	2360      	movs	r3, #96	; 0x60
   1e154:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   1e156:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   1e158:	23a0      	movs	r3, #160	; 0xa0
   1e15a:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   1e15c:	23f0      	movs	r3, #240	; 0xf0
   1e15e:	8013      	strh	r3, [r2, #0]
        break;
   1e160:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1e162:	2330      	movs	r3, #48	; 0x30
   1e164:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1e166:	2360      	movs	r3, #96	; 0x60
   1e168:	8013      	strh	r3, [r2, #0]
        break;
   1e16a:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1e16c:	2330      	movs	r3, #48	; 0x30
   1e16e:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1e170:	2360      	movs	r3, #96	; 0x60
   1e172:	8013      	strh	r3, [r2, #0]
        break;
   1e174:	4770      	bx	lr
	...

0001e178 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   1e178:	b410      	push	{r4}
   1e17a:	4602      	mov	r2, r0
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e17c:	4b06      	ldr	r3, [pc, #24]	; (1e198 <ble_gap_update_entry_find+0x20>)
   1e17e:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1e180:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e182:	b128      	cbz	r0, 1e190 <ble_gap_update_entry_find+0x18>
        if (entry->conn_handle == conn_handle) {
   1e184:	8a83      	ldrh	r3, [r0, #20]
   1e186:	4293      	cmp	r3, r2
   1e188:	d002      	beq.n	1e190 <ble_gap_update_entry_find+0x18>
            break;
        }

        prev = entry;
   1e18a:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e18c:	6800      	ldr	r0, [r0, #0]
   1e18e:	e7f8      	b.n	1e182 <ble_gap_update_entry_find+0xa>
    }

    if (out_prev != NULL) {
   1e190:	b101      	cbz	r1, 1e194 <ble_gap_update_entry_find+0x1c>
        *out_prev = prev;
   1e192:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   1e194:	bc10      	pop	{r4}
   1e196:	4770      	bx	lr
   1e198:	200030d0 	.word	0x200030d0

0001e19c <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   1e19c:	8802      	ldrh	r2, [r0, #0]
   1e19e:	8843      	ldrh	r3, [r0, #2]
   1e1a0:	429a      	cmp	r2, r3
   1e1a2:	d814      	bhi.n	1e1ce <ble_gap_validate_conn_params+0x32>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   1e1a4:	2a05      	cmp	r2, #5
   1e1a6:	d914      	bls.n	1e1d2 <ble_gap_validate_conn_params+0x36>
   1e1a8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e1ac:	d813      	bhi.n	1e1d6 <ble_gap_validate_conn_params+0x3a>
        return false;
    }

    if (params->latency > 0x01F3) {
   1e1ae:	8882      	ldrh	r2, [r0, #4]
   1e1b0:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1e1b4:	d211      	bcs.n	1e1da <ble_gap_validate_conn_params+0x3e>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   1e1b6:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1e1b8:	fb02 3303 	mla	r3, r2, r3, r3
   1e1bc:	2b00      	cmp	r3, #0
   1e1be:	db04      	blt.n	1e1ca <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   1e1c0:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   1e1c4:	dd0b      	ble.n	1e1de <ble_gap_validate_conn_params+0x42>
        return false;
    }

    return true;
   1e1c6:	2001      	movs	r0, #1
   1e1c8:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1e1ca:	3303      	adds	r3, #3
   1e1cc:	e7f8      	b.n	1e1c0 <ble_gap_validate_conn_params+0x24>
        return false;
   1e1ce:	2000      	movs	r0, #0
   1e1d0:	4770      	bx	lr
        return false;
   1e1d2:	2000      	movs	r0, #0
   1e1d4:	4770      	bx	lr
   1e1d6:	2000      	movs	r0, #0
   1e1d8:	4770      	bx	lr
        return false;
   1e1da:	2000      	movs	r0, #0
   1e1dc:	4770      	bx	lr
        return false;
   1e1de:	2000      	movs	r0, #0
}
   1e1e0:	4770      	bx	lr
	...

0001e1e4 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   1e1e4:	b538      	push	{r3, r4, r5, lr}
   1e1e6:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1e1e8:	4b05      	ldr	r3, [pc, #20]	; (1e200 <ble_gap_event_listener_call+0x1c>)
   1e1ea:	681c      	ldr	r4, [r3, #0]
   1e1ec:	b12c      	cbz	r4, 1e1fa <ble_gap_event_listener_call+0x16>
        evl->fn(event, evl->arg);
   1e1ee:	6823      	ldr	r3, [r4, #0]
   1e1f0:	6861      	ldr	r1, [r4, #4]
   1e1f2:	4628      	mov	r0, r5
   1e1f4:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1e1f6:	68a4      	ldr	r4, [r4, #8]
   1e1f8:	e7f8      	b.n	1e1ec <ble_gap_event_listener_call+0x8>
    }

    return 0;
}
   1e1fa:	2000      	movs	r0, #0
   1e1fc:	bd38      	pop	{r3, r4, r5, pc}
   1e1fe:	bf00      	nop
   1e200:	20003044 	.word	0x20003044

0001e204 <ble_gap_extract_conn_cb>:
{
   1e204:	b570      	push	{r4, r5, r6, lr}
   1e206:	4606      	mov	r6, r0
   1e208:	460d      	mov	r5, r1
   1e20a:	4614      	mov	r4, r2
    ble_hs_lock();
   1e20c:	f003 fb2e 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1e210:	4630      	mov	r0, r6
   1e212:	f004 f989 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   1e216:	4606      	mov	r6, r0
   1e218:	b140      	cbz	r0, 1e22c <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   1e21a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1e21c:	602b      	str	r3, [r5, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   1e21e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1e220:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1e222:	f003 fb27 	bl	21874 <ble_hs_unlock>
    if (conn == NULL) {
   1e226:	b12e      	cbz	r6, 1e234 <ble_gap_extract_conn_cb+0x30>
        return 0;
   1e228:	2000      	movs	r0, #0
}
   1e22a:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   1e22c:	2300      	movs	r3, #0
   1e22e:	602b      	str	r3, [r5, #0]
        *out_cb_arg = NULL;
   1e230:	6023      	str	r3, [r4, #0]
   1e232:	e7f6      	b.n	1e222 <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   1e234:	2007      	movs	r0, #7
   1e236:	e7f8      	b.n	1e22a <ble_gap_extract_conn_cb+0x26>

0001e238 <ble_gap_call_conn_event_cb>:
{
   1e238:	b510      	push	{r4, lr}
   1e23a:	b082      	sub	sp, #8
   1e23c:	4604      	mov	r4, r0
   1e23e:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   1e240:	466a      	mov	r2, sp
   1e242:	a901      	add	r1, sp, #4
   1e244:	f7ff ffde 	bl	1e204 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   1e248:	b108      	cbz	r0, 1e24e <ble_gap_call_conn_event_cb+0x16>
}
   1e24a:	b002      	add	sp, #8
   1e24c:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   1e24e:	9a00      	ldr	r2, [sp, #0]
   1e250:	9901      	ldr	r1, [sp, #4]
   1e252:	4620      	mov	r0, r4
   1e254:	f7ff fef0 	bl	1e038 <ble_gap_call_event_cb>
    if (rc != 0) {
   1e258:	e7f7      	b.n	1e24a <ble_gap_call_conn_event_cb+0x12>

0001e25a <ble_gap_fill_conn_desc>:
{
   1e25a:	b570      	push	{r4, r5, r6, lr}
   1e25c:	b088      	sub	sp, #32
   1e25e:	4605      	mov	r5, r0
   1e260:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   1e262:	ae01      	add	r6, sp, #4
   1e264:	4631      	mov	r1, r6
   1e266:	f004 f997 	bl	22598 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   1e26a:	e896 0003 	ldmia.w	r6, {r0, r1}
   1e26e:	6060      	str	r0, [r4, #4]
   1e270:	f104 0308 	add.w	r3, r4, #8
   1e274:	f823 1b02 	strh.w	r1, [r3], #2
   1e278:	0c09      	lsrs	r1, r1, #16
   1e27a:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   1e27c:	f8dd 300b 	ldr.w	r3, [sp, #11]
   1e280:	f8c4 300b 	str.w	r3, [r4, #11]
   1e284:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   1e288:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1e28c:	f8a4 200f 	strh.w	r2, [r4, #15]
   1e290:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   1e292:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1e296:	f8c4 3012 	str.w	r3, [r4, #18]
   1e29a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e29e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1e2a2:	82e2      	strh	r2, [r4, #22]
   1e2a4:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   1e2a6:	f8dd 3019 	ldr.w	r3, [sp, #25]
   1e2aa:	f8c4 3019 	str.w	r3, [r4, #25]
   1e2ae:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   1e2b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1e2b6:	f8a4 201d 	strh.w	r2, [r4, #29]
   1e2ba:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   1e2bc:	88ab      	ldrh	r3, [r5, #4]
   1e2be:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   1e2c0:	8bab      	ldrh	r3, [r5, #28]
   1e2c2:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   1e2c4:	8beb      	ldrh	r3, [r5, #30]
   1e2c6:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   1e2c8:	8c2b      	ldrh	r3, [r5, #32]
   1e2ca:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   1e2cc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1e2d0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   1e2d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1e2d6:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   1e2d8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1e2dc:	f013 0f01 	tst.w	r3, #1
   1e2e0:	d004      	beq.n	1e2ec <ble_gap_fill_conn_desc+0x92>
        desc->role = BLE_GAP_ROLE_MASTER;
   1e2e2:	2300      	movs	r3, #0
   1e2e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1e2e8:	b008      	add	sp, #32
   1e2ea:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_SLAVE;
   1e2ec:	2301      	movs	r3, #1
   1e2ee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1e2f2:	e7f9      	b.n	1e2e8 <ble_gap_fill_conn_desc+0x8e>

0001e2f4 <ble_gap_conn_to_snapshot>:
{
   1e2f4:	b538      	push	{r3, r4, r5, lr}
   1e2f6:	4605      	mov	r5, r0
   1e2f8:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   1e2fa:	6809      	ldr	r1, [r1, #0]
   1e2fc:	f7ff ffad 	bl	1e25a <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   1e300:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1e302:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   1e304:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1e306:	60a3      	str	r3, [r4, #8]
}
   1e308:	bd38      	pop	{r3, r4, r5, pc}

0001e30a <ble_gap_find_snapshot>:
{
   1e30a:	b538      	push	{r3, r4, r5, lr}
   1e30c:	4604      	mov	r4, r0
   1e30e:	460d      	mov	r5, r1
    ble_hs_lock();
   1e310:	f003 faac 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1e314:	4620      	mov	r0, r4
   1e316:	f004 f907 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   1e31a:	4604      	mov	r4, r0
   1e31c:	b110      	cbz	r0, 1e324 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   1e31e:	4629      	mov	r1, r5
   1e320:	f7ff ffe8 	bl	1e2f4 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   1e324:	f003 faa6 	bl	21874 <ble_hs_unlock>
    if (conn == NULL) {
   1e328:	b10c      	cbz	r4, 1e32e <ble_gap_find_snapshot+0x24>
        return 0;
   1e32a:	2000      	movs	r0, #0
}
   1e32c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1e32e:	2007      	movs	r0, #7
   1e330:	e7fc      	b.n	1e32c <ble_gap_find_snapshot+0x22>

0001e332 <ble_gap_rd_rem_sup_feat_tx>:
{
   1e332:	b500      	push	{lr}
   1e334:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   1e336:	f8ad 000c 	strh.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e33a:	2300      	movs	r3, #0
   1e33c:	9300      	str	r3, [sp, #0]
   1e33e:	2202      	movs	r2, #2
   1e340:	a903      	add	r1, sp, #12
   1e342:	f242 0016 	movw	r0, #8214	; 0x2016
   1e346:	f004 fb47 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e34a:	b005      	add	sp, #20
   1e34c:	f85d fb04 	ldr.w	pc, [sp], #4

0001e350 <ble_gap_conn_cancel_tx>:
{
   1e350:	b500      	push	{lr}
   1e352:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e354:	2100      	movs	r1, #0
   1e356:	9100      	str	r1, [sp, #0]
   1e358:	460b      	mov	r3, r1
   1e35a:	460a      	mov	r2, r1
   1e35c:	f242 000e 	movw	r0, #8206	; 0x200e
   1e360:	f004 fb3a 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e364:	b003      	add	sp, #12
   1e366:	f85d fb04 	ldr.w	pc, [sp], #4

0001e36a <ble_gap_adv_enable_tx>:
{
   1e36a:	b500      	push	{lr}
   1e36c:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   1e36e:	3800      	subs	r0, #0
   1e370:	bf18      	it	ne
   1e372:	2001      	movne	r0, #1
   1e374:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e378:	2300      	movs	r3, #0
   1e37a:	9300      	str	r3, [sp, #0]
   1e37c:	2201      	movs	r2, #1
   1e37e:	a903      	add	r1, sp, #12
   1e380:	f242 000a 	movw	r0, #8202	; 0x200a
   1e384:	f004 fb28 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e388:	b005      	add	sp, #20
   1e38a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e38e <ble_gap_adv_params_tx>:
{
   1e38e:	b570      	push	{r4, r5, r6, lr}
   1e390:	b08a      	sub	sp, #40	; 0x28
   1e392:	4606      	mov	r6, r0
   1e394:	460c      	mov	r4, r1
   1e396:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   1e398:	2300      	movs	r3, #0
   1e39a:	9308      	str	r3, [sp, #32]
   1e39c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   1e3a0:	8853      	ldrh	r3, [r2, #2]
   1e3a2:	b90b      	cbnz	r3, 1e3a8 <ble_gap_adv_params_tx+0x1a>
   1e3a4:	8892      	ldrh	r2, [r2, #4]
   1e3a6:	b342      	cbz	r2, 1e3fa <ble_gap_adv_params_tx+0x6c>
        cmd.min_interval = htole16(adv_params->itvl_min);
   1e3a8:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   1e3ac:	88ab      	ldrh	r3, [r5, #4]
   1e3ae:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   1e3b2:	4628      	mov	r0, r5
   1e3b4:	f7ff feb2 	bl	1e11c <ble_gap_adv_type>
   1e3b8:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   1e3bc:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   1e3c0:	b354      	cbz	r4, 1e418 <ble_gap_adv_params_tx+0x8a>
    cmd.peer_addr_type = peer_addr->type;
   1e3c2:	7823      	ldrb	r3, [r4, #0]
   1e3c4:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   1e3c8:	f854 3f01 	ldr.w	r3, [r4, #1]!
   1e3cc:	f8cd 3017 	str.w	r3, [sp, #23]
   1e3d0:	88a3      	ldrh	r3, [r4, #4]
   1e3d2:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   1e3d6:	79ab      	ldrb	r3, [r5, #6]
   1e3d8:	bb03      	cbnz	r3, 1e41c <ble_gap_adv_params_tx+0x8e>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   1e3da:	2307      	movs	r3, #7
   1e3dc:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   1e3e0:	79eb      	ldrb	r3, [r5, #7]
   1e3e2:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1e3e6:	2300      	movs	r3, #0
   1e3e8:	9300      	str	r3, [sp, #0]
   1e3ea:	220f      	movs	r2, #15
   1e3ec:	a904      	add	r1, sp, #16
   1e3ee:	f242 0006 	movw	r0, #8198	; 0x2006
   1e3f2:	f004 faf1 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e3f6:	b00a      	add	sp, #40	; 0x28
   1e3f8:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   1e3fa:	aa03      	add	r2, sp, #12
   1e3fc:	f10d 010e 	add.w	r1, sp, #14
   1e400:	7828      	ldrb	r0, [r5, #0]
   1e402:	f7ff fe9f 	bl	1e144 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   1e406:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e40a:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   1e40e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1e412:	f8ad 3012 	strh.w	r3, [sp, #18]
   1e416:	e7cc      	b.n	1e3b2 <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   1e418:	ac08      	add	r4, sp, #32
   1e41a:	e7d2      	b.n	1e3c2 <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = adv_params->channel_map;
   1e41c:	f88d 301d 	strb.w	r3, [sp, #29]
   1e420:	e7de      	b.n	1e3e0 <ble_gap_adv_params_tx+0x52>

0001e422 <ble_gap_tx_param_pos_reply>:
{
   1e422:	b500      	push	{lr}
   1e424:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1e426:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1e42a:	880b      	ldrh	r3, [r1, #0]
   1e42c:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1e430:	884b      	ldrh	r3, [r1, #2]
   1e432:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1e436:	888b      	ldrh	r3, [r1, #4]
   1e438:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1e43c:	88cb      	ldrh	r3, [r1, #6]
   1e43e:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   1e442:	890b      	ldrh	r3, [r1, #8]
   1e444:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   1e448:	894b      	ldrh	r3, [r1, #10]
   1e44a:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e44e:	2300      	movs	r3, #0
   1e450:	9300      	str	r3, [sp, #0]
   1e452:	220e      	movs	r2, #14
   1e454:	a902      	add	r1, sp, #8
   1e456:	f242 0020 	movw	r0, #8224	; 0x2020
   1e45a:	f004 fabd 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e45e:	b007      	add	sp, #28
   1e460:	f85d fb04 	ldr.w	pc, [sp], #4

0001e464 <ble_gap_tx_param_neg_reply>:
{
   1e464:	b500      	push	{lr}
   1e466:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   1e468:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   1e46c:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e470:	2300      	movs	r3, #0
   1e472:	9300      	str	r3, [sp, #0]
   1e474:	2203      	movs	r2, #3
   1e476:	a903      	add	r1, sp, #12
   1e478:	f242 0021 	movw	r0, #8225	; 0x2021
   1e47c:	f004 faac 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e480:	b005      	add	sp, #20
   1e482:	f85d fb04 	ldr.w	pc, [sp], #4

0001e486 <ble_gap_update_tx>:
{
   1e486:	b500      	push	{lr}
   1e488:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1e48a:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1e48e:	880b      	ldrh	r3, [r1, #0]
   1e490:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1e494:	884b      	ldrh	r3, [r1, #2]
   1e496:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1e49a:	888b      	ldrh	r3, [r1, #4]
   1e49c:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1e4a0:	88cb      	ldrh	r3, [r1, #6]
   1e4a2:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   1e4a6:	890b      	ldrh	r3, [r1, #8]
   1e4a8:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   1e4ac:	894b      	ldrh	r3, [r1, #10]
   1e4ae:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1e4b2:	2300      	movs	r3, #0
   1e4b4:	9300      	str	r3, [sp, #0]
   1e4b6:	220e      	movs	r2, #14
   1e4b8:	a902      	add	r1, sp, #8
   1e4ba:	f242 0013 	movw	r0, #8211	; 0x2013
   1e4be:	f004 fa8b 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1e4c2:	b007      	add	sp, #28
   1e4c4:	f85d fb04 	ldr.w	pc, [sp], #4

0001e4c8 <ble_gap_update_entry_remove>:
{
   1e4c8:	b510      	push	{r4, lr}
   1e4ca:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   1e4cc:	a901      	add	r1, sp, #4
   1e4ce:	f7ff fe53 	bl	1e178 <ble_gap_update_entry_find>
    if (entry != NULL) {
   1e4d2:	4604      	mov	r4, r0
   1e4d4:	b128      	cbz	r0, 1e4e2 <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   1e4d6:	9b01      	ldr	r3, [sp, #4]
   1e4d8:	b133      	cbz	r3, 1e4e8 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   1e4da:	6802      	ldr	r2, [r0, #0]
   1e4dc:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   1e4de:	f003 fab5 	bl	21a4c <ble_hs_timer_resched>
}
   1e4e2:	4620      	mov	r0, r4
   1e4e4:	b002      	add	sp, #8
   1e4e6:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   1e4e8:	4b02      	ldr	r3, [pc, #8]	; (1e4f4 <ble_gap_update_entry_remove+0x2c>)
   1e4ea:	681a      	ldr	r2, [r3, #0]
   1e4ec:	6812      	ldr	r2, [r2, #0]
   1e4ee:	601a      	str	r2, [r3, #0]
   1e4f0:	e7f5      	b.n	1e4de <ble_gap_update_entry_remove+0x16>
   1e4f2:	bf00      	nop
   1e4f4:	200030d0 	.word	0x200030d0

0001e4f8 <ble_gap_slave_reset_state>:
{
   1e4f8:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   1e4fa:	4b06      	ldr	r3, [pc, #24]	; (1e514 <ble_gap_slave_reset_state+0x1c>)
   1e4fc:	0101      	lsls	r1, r0, #4
   1e4fe:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1e502:	2200      	movs	r2, #0
   1e504:	545a      	strb	r2, [r3, r1]
    ble_gap_slave[instance].exp_set = 0;
   1e506:	7843      	ldrb	r3, [r0, #1]
   1e508:	f362 1304 	bfi	r3, r2, #4, #1
   1e50c:	7043      	strb	r3, [r0, #1]
    ble_hs_timer_resched();
   1e50e:	f003 fa9d 	bl	21a4c <ble_hs_timer_resched>
}
   1e512:	bd08      	pop	{r3, pc}
   1e514:	20000548 	.word	0x20000548

0001e518 <ble_gap_slave_extract_cb>:
{
   1e518:	b570      	push	{r4, r5, r6, lr}
   1e51a:	4604      	mov	r4, r0
   1e51c:	460e      	mov	r6, r1
   1e51e:	4615      	mov	r5, r2
    ble_hs_lock();
   1e520:	f003 f9a4 	bl	2186c <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   1e524:	4b06      	ldr	r3, [pc, #24]	; (1e540 <ble_gap_slave_extract_cb+0x28>)
   1e526:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1e52a:	689a      	ldr	r2, [r3, #8]
   1e52c:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   1e52e:	68db      	ldr	r3, [r3, #12]
   1e530:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   1e532:	4620      	mov	r0, r4
   1e534:	f7ff ffe0 	bl	1e4f8 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   1e538:	f003 f99c 	bl	21874 <ble_hs_unlock>
}
   1e53c:	bd70      	pop	{r4, r5, r6, pc}
   1e53e:	bf00      	nop
   1e540:	20000548 	.word	0x20000548

0001e544 <ble_gap_adv_finished>:
{
   1e544:	b530      	push	{r4, r5, lr}
   1e546:	b091      	sub	sp, #68	; 0x44
   1e548:	4604      	mov	r4, r0
   1e54a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1e54c:	2234      	movs	r2, #52	; 0x34
   1e54e:	2100      	movs	r1, #0
   1e550:	a803      	add	r0, sp, #12
   1e552:	f7f0 fa56 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1e556:	2309      	movs	r3, #9
   1e558:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   1e55c:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   1e55e:	a803      	add	r0, sp, #12
   1e560:	f7ff fe40 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   1e564:	aa01      	add	r2, sp, #4
   1e566:	a902      	add	r1, sp, #8
   1e568:	4620      	mov	r0, r4
   1e56a:	f7ff ffd5 	bl	1e518 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   1e56e:	9b02      	ldr	r3, [sp, #8]
   1e570:	b113      	cbz	r3, 1e578 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   1e572:	9901      	ldr	r1, [sp, #4]
   1e574:	a803      	add	r0, sp, #12
   1e576:	4798      	blx	r3
}
   1e578:	b011      	add	sp, #68	; 0x44
   1e57a:	bd30      	pop	{r4, r5, pc}

0001e57c <ble_gap_master_reset_state>:
{
   1e57c:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   1e57e:	4b08      	ldr	r3, [pc, #32]	; (1e5a0 <ble_gap_master_reset_state+0x24>)
   1e580:	2200      	movs	r2, #0
   1e582:	741a      	strb	r2, [r3, #16]
    ble_gap_master.exp_set = 0;
   1e584:	7c59      	ldrb	r1, [r3, #17]
   1e586:	f362 0100 	bfi	r1, r2, #0, #1
   1e58a:	7459      	strb	r1, [r3, #17]
    ble_gap_master.conn.cancel = 0;
   1e58c:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   1e590:	f362 01c3 	bfi	r1, r2, #3, #1
   1e594:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    ble_hs_timer_resched();
   1e598:	f003 fa58 	bl	21a4c <ble_hs_timer_resched>
}
   1e59c:	bd08      	pop	{r3, pc}
   1e59e:	bf00      	nop
   1e5a0:	20000548 	.word	0x20000548

0001e5a4 <ble_gap_master_extract_state>:
{
   1e5a4:	b570      	push	{r4, r5, r6, lr}
   1e5a6:	4604      	mov	r4, r0
   1e5a8:	460e      	mov	r6, r1
    ble_hs_lock();
   1e5aa:	f003 f95f 	bl	2186c <ble_hs_lock>
    *out_state = ble_gap_master;
   1e5ae:	4d08      	ldr	r5, [pc, #32]	; (1e5d0 <ble_gap_master_extract_state+0x2c>)
   1e5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e5b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e5b4:	682b      	ldr	r3, [r5, #0]
   1e5b6:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   1e5b8:	b916      	cbnz	r6, 1e5c0 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   1e5ba:	f003 f95b 	bl	21874 <ble_hs_unlock>
}
   1e5be:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   1e5c0:	f7ff ffdc 	bl	1e57c <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1e5c4:	f1a5 0320 	sub.w	r3, r5, #32
   1e5c8:	2200      	movs	r2, #0
   1e5ca:	f883 2020 	strb.w	r2, [r3, #32]
   1e5ce:	e7f4      	b.n	1e5ba <ble_gap_master_extract_state+0x16>
   1e5d0:	20000558 	.word	0x20000558

0001e5d4 <ble_gap_master_connect_failure>:
{
   1e5d4:	b510      	push	{r4, lr}
   1e5d6:	b092      	sub	sp, #72	; 0x48
   1e5d8:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   1e5da:	2101      	movs	r1, #1
   1e5dc:	a80d      	add	r0, sp, #52	; 0x34
   1e5de:	f7ff ffe1 	bl	1e5a4 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1e5e2:	a80d      	add	r0, sp, #52	; 0x34
   1e5e4:	f7ff fd50 	bl	1e088 <ble_gap_has_client>
   1e5e8:	b910      	cbnz	r0, 1e5f0 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   1e5ea:	2000      	movs	r0, #0
}
   1e5ec:	b012      	add	sp, #72	; 0x48
   1e5ee:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   1e5f0:	2234      	movs	r2, #52	; 0x34
   1e5f2:	2100      	movs	r1, #0
   1e5f4:	4668      	mov	r0, sp
   1e5f6:	f7f0 fa04 	bl	ea02 <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   1e5fa:	2300      	movs	r3, #0
   1e5fc:	f88d 3000 	strb.w	r3, [sp]
        event.connect.status = status;
   1e600:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   1e602:	9910      	ldr	r1, [sp, #64]	; 0x40
   1e604:	4668      	mov	r0, sp
   1e606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e608:	4798      	blx	r3
   1e60a:	e7ef      	b.n	1e5ec <ble_gap_master_connect_failure+0x18>

0001e60c <ble_gap_master_failed>:
{
   1e60c:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   1e60e:	4b06      	ldr	r3, [pc, #24]	; (1e628 <ble_gap_master_failed+0x1c>)
   1e610:	7c1b      	ldrb	r3, [r3, #16]
   1e612:	2b02      	cmp	r3, #2
   1e614:	d000      	beq.n	1e618 <ble_gap_master_failed+0xc>
}
   1e616:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   1e618:	4a04      	ldr	r2, [pc, #16]	; (1e62c <ble_gap_master_failed+0x20>)
   1e61a:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1e61c:	3301      	adds	r3, #1
   1e61e:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   1e620:	f7ff ffd8 	bl	1e5d4 <ble_gap_master_connect_failure>
}
   1e624:	e7f7      	b.n	1e616 <ble_gap_master_failed+0xa>
   1e626:	bf00      	nop
   1e628:	20000548 	.word	0x20000548
   1e62c:	20003048 	.word	0x20003048

0001e630 <ble_gap_master_connect_cancelled>:
{
   1e630:	b510      	push	{r4, lr}
   1e632:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   1e634:	2101      	movs	r1, #1
   1e636:	a80d      	add	r0, sp, #52	; 0x34
   1e638:	f7ff ffb4 	bl	1e5a4 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   1e63c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1e63e:	b1ac      	cbz	r4, 1e66c <ble_gap_master_connect_cancelled+0x3c>
        memset(&event, 0, sizeof event);
   1e640:	2234      	movs	r2, #52	; 0x34
   1e642:	2100      	movs	r1, #0
   1e644:	4668      	mov	r0, sp
   1e646:	f7f0 f9dc 	bl	ea02 <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   1e64a:	2300      	movs	r3, #0
   1e64c:	f88d 3000 	strb.w	r3, [sp]
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1e650:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e654:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   1e658:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1e65c:	f013 0f08 	tst.w	r3, #8
   1e660:	d006      	beq.n	1e670 <ble_gap_master_connect_cancelled+0x40>
            event.connect.status = BLE_HS_EAPP;
   1e662:	2309      	movs	r3, #9
   1e664:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   1e666:	9910      	ldr	r1, [sp, #64]	; 0x40
   1e668:	4668      	mov	r0, sp
   1e66a:	47a0      	blx	r4
}
   1e66c:	b012      	add	sp, #72	; 0x48
   1e66e:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   1e670:	230d      	movs	r3, #13
   1e672:	9301      	str	r3, [sp, #4]
   1e674:	e7f7      	b.n	1e666 <ble_gap_master_connect_cancelled+0x36>
	...

0001e678 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   1e678:	b128      	cbz	r0, 1e686 <ble_gap_update_entry_free+0xe>
{
   1e67a:	b508      	push	{r3, lr}
   1e67c:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   1e67e:	4802      	ldr	r0, [pc, #8]	; (1e688 <ble_gap_update_entry_free+0x10>)
   1e680:	f7ef fafd 	bl	dc7e <os_memblock_put>
}
   1e684:	bd08      	pop	{r3, pc}
   1e686:	4770      	bx	lr
   1e688:	200030ec 	.word	0x200030ec

0001e68c <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   1e68c:	4b0b      	ldr	r3, [pc, #44]	; (1e6bc <ble_gap_master_ticks_until_exp+0x30>)
   1e68e:	7c1b      	ldrb	r3, [r3, #16]
   1e690:	b173      	cbz	r3, 1e6b0 <ble_gap_master_ticks_until_exp+0x24>
   1e692:	4b0a      	ldr	r3, [pc, #40]	; (1e6bc <ble_gap_master_ticks_until_exp+0x30>)
   1e694:	7c5b      	ldrb	r3, [r3, #17]
   1e696:	f013 0f01 	tst.w	r3, #1
   1e69a:	d00c      	beq.n	1e6b6 <ble_gap_master_ticks_until_exp+0x2a>
{
   1e69c:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   1e69e:	4b07      	ldr	r3, [pc, #28]	; (1e6bc <ble_gap_master_ticks_until_exp+0x30>)
   1e6a0:	695c      	ldr	r4, [r3, #20]
   1e6a2:	f7ef fe8b 	bl	e3bc <os_time_get>
   1e6a6:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1e6a8:	2800      	cmp	r0, #0
   1e6aa:	dc00      	bgt.n	1e6ae <ble_gap_master_ticks_until_exp+0x22>
    return 0;
   1e6ac:	2000      	movs	r0, #0
}
   1e6ae:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1e6b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e6b4:	4770      	bx	lr
   1e6b6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1e6ba:	4770      	bx	lr
   1e6bc:	20000548 	.word	0x20000548

0001e6c0 <ble_gap_update_next_exp>:
{
   1e6c0:	b538      	push	{r3, r4, r5, lr}
   1e6c2:	4605      	mov	r5, r0
   1e6c4:	f7ef fe7a 	bl	e3bc <os_time_get>
   1e6c8:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e6ca:	4b0b      	ldr	r3, [pc, #44]	; (1e6f8 <ble_gap_update_next_exp+0x38>)
   1e6cc:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   1e6ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1e6d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e6d6:	e002      	b.n	1e6de <ble_gap_update_next_exp+0x1e>
            ticks = 0;
   1e6d8:	2300      	movs	r3, #0
   1e6da:	e005      	b.n	1e6e8 <ble_gap_update_next_exp+0x28>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1e6dc:	6812      	ldr	r2, [r2, #0]
   1e6de:	b142      	cbz	r2, 1e6f2 <ble_gap_update_next_exp+0x32>
        ticks = entry->exp_os_ticks - now;
   1e6e0:	6913      	ldr	r3, [r2, #16]
   1e6e2:	1b1b      	subs	r3, r3, r4
        if (ticks <= 0) {
   1e6e4:	2b00      	cmp	r3, #0
   1e6e6:	ddf7      	ble.n	1e6d8 <ble_gap_update_next_exp+0x18>
        if (ticks < best_ticks) {
   1e6e8:	4299      	cmp	r1, r3
   1e6ea:	ddf7      	ble.n	1e6dc <ble_gap_update_next_exp+0x1c>
            conn_handle = entry->conn_handle;
   1e6ec:	8a90      	ldrh	r0, [r2, #20]
            best_ticks = ticks;
   1e6ee:	4619      	mov	r1, r3
   1e6f0:	e7f4      	b.n	1e6dc <ble_gap_update_next_exp+0x1c>
    if (out_ticks_from_now != NULL) {
   1e6f2:	b105      	cbz	r5, 1e6f6 <ble_gap_update_next_exp+0x36>
        *out_ticks_from_now = best_ticks;
   1e6f4:	6029      	str	r1, [r5, #0]
}
   1e6f6:	bd38      	pop	{r3, r4, r5, pc}
   1e6f8:	200030d0 	.word	0x200030d0

0001e6fc <ble_gap_update_timer>:
{
   1e6fc:	b510      	push	{r4, lr}
   1e6fe:	b082      	sub	sp, #8
   1e700:	e007      	b.n	1e712 <ble_gap_update_timer+0x16>
        ble_hs_unlock();
   1e702:	f003 f8b7 	bl	21874 <ble_hs_unlock>
            entry = NULL;
   1e706:	2400      	movs	r4, #0
   1e708:	e002      	b.n	1e710 <ble_gap_update_timer+0x14>
            ble_gap_update_entry_free(entry);
   1e70a:	4620      	mov	r0, r4
   1e70c:	f7ff ffb4 	bl	1e678 <ble_gap_update_entry_free>
    } while (entry != NULL);
   1e710:	b17c      	cbz	r4, 1e732 <ble_gap_update_timer+0x36>
        ble_hs_lock();
   1e712:	f003 f8ab 	bl	2186c <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   1e716:	a801      	add	r0, sp, #4
   1e718:	f7ff ffd2 	bl	1e6c0 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   1e71c:	9b01      	ldr	r3, [sp, #4]
   1e71e:	2b00      	cmp	r3, #0
   1e720:	d1ef      	bne.n	1e702 <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
   1e722:	f7ff fed1 	bl	1e4c8 <ble_gap_update_entry_remove>
   1e726:	4604      	mov	r4, r0
        ble_hs_unlock();
   1e728:	f003 f8a4 	bl	21874 <ble_hs_unlock>
        if (entry != NULL) {
   1e72c:	2c00      	cmp	r4, #0
   1e72e:	d1ec      	bne.n	1e70a <ble_gap_update_timer+0xe>
   1e730:	e7ee      	b.n	1e710 <ble_gap_update_timer+0x14>
}
   1e732:	9801      	ldr	r0, [sp, #4]
   1e734:	b002      	add	sp, #8
   1e736:	bd10      	pop	{r4, pc}

0001e738 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   1e738:	4b0b      	ldr	r3, [pc, #44]	; (1e768 <ble_gap_slave_ticks_until_exp+0x30>)
   1e73a:	781b      	ldrb	r3, [r3, #0]
   1e73c:	b173      	cbz	r3, 1e75c <ble_gap_slave_ticks_until_exp+0x24>
   1e73e:	4b0a      	ldr	r3, [pc, #40]	; (1e768 <ble_gap_slave_ticks_until_exp+0x30>)
   1e740:	785b      	ldrb	r3, [r3, #1]
   1e742:	f013 0f10 	tst.w	r3, #16
   1e746:	d00c      	beq.n	1e762 <ble_gap_slave_ticks_until_exp+0x2a>
{
   1e748:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   1e74a:	4b07      	ldr	r3, [pc, #28]	; (1e768 <ble_gap_slave_ticks_until_exp+0x30>)
   1e74c:	685c      	ldr	r4, [r3, #4]
   1e74e:	f7ef fe35 	bl	e3bc <os_time_get>
   1e752:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1e754:	2800      	cmp	r0, #0
   1e756:	dc00      	bgt.n	1e75a <ble_gap_slave_ticks_until_exp+0x22>
    return 0;
   1e758:	2000      	movs	r0, #0
}
   1e75a:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1e75c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e760:	4770      	bx	lr
   1e762:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1e766:	4770      	bx	lr
   1e768:	20000548 	.word	0x20000548

0001e76c <ble_gap_slave_timer>:
{
   1e76c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   1e76e:	f7ff ffe3 	bl	1e738 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1e772:	b100      	cbz	r0, 1e776 <ble_gap_slave_timer+0xa>
}
   1e774:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   1e776:	2000      	movs	r0, #0
   1e778:	f7ff fdf7 	bl	1e36a <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1e77c:	b108      	cbz	r0, 1e782 <ble_gap_slave_timer+0x16>
        return 100;
   1e77e:	2064      	movs	r0, #100	; 0x64
   1e780:	e7f8      	b.n	1e774 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   1e782:	f7ff feb9 	bl	1e4f8 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   1e786:	2300      	movs	r3, #0
   1e788:	461a      	mov	r2, r3
   1e78a:	210d      	movs	r1, #13
   1e78c:	4618      	mov	r0, r3
   1e78e:	f7ff fed9 	bl	1e544 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   1e792:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e796:	e7ed      	b.n	1e774 <ble_gap_slave_timer+0x8>

0001e798 <ble_gap_slave_set_timer>:
{
   1e798:	b510      	push	{r4, lr}
   1e79a:	4604      	mov	r4, r0
   1e79c:	f7ef fe0e 	bl	e3bc <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   1e7a0:	4404      	add	r4, r0
   1e7a2:	4b04      	ldr	r3, [pc, #16]	; (1e7b4 <ble_gap_slave_set_timer+0x1c>)
   1e7a4:	605c      	str	r4, [r3, #4]
    ble_gap_slave[0].exp_set = 1;
   1e7a6:	785a      	ldrb	r2, [r3, #1]
   1e7a8:	f042 0210 	orr.w	r2, r2, #16
   1e7ac:	705a      	strb	r2, [r3, #1]
    ble_hs_timer_resched();
   1e7ae:	f003 f94d 	bl	21a4c <ble_hs_timer_resched>
}
   1e7b2:	bd10      	pop	{r4, pc}
   1e7b4:	20000548 	.word	0x20000548

0001e7b8 <ble_gap_log_adv>:
{
   1e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e7ba:	b087      	sub	sp, #28
   1e7bc:	4606      	mov	r6, r0
   1e7be:	460d      	mov	r5, r1
   1e7c0:	4614      	mov	r4, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   1e7c2:	7853      	ldrb	r3, [r2, #1]
   1e7c4:	4a15      	ldr	r2, [pc, #84]	; (1e81c <ble_gap_log_adv+0x64>)
   1e7c6:	2101      	movs	r1, #1
   1e7c8:	2004      	movs	r0, #4
   1e7ca:	f7f2 ff35 	bl	11638 <modlog_printf>
    if (direct_addr) {
   1e7ce:	b1ad      	cbz	r5, 1e7fc <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   1e7d0:	782b      	ldrb	r3, [r5, #0]
   1e7d2:	4a13      	ldr	r2, [pc, #76]	; (1e820 <ble_gap_log_adv+0x68>)
   1e7d4:	2101      	movs	r1, #1
   1e7d6:	2004      	movs	r0, #4
   1e7d8:	f7f2 ff2e 	bl	11638 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   1e7dc:	796b      	ldrb	r3, [r5, #5]
   1e7de:	792a      	ldrb	r2, [r5, #4]
   1e7e0:	78e9      	ldrb	r1, [r5, #3]
   1e7e2:	78a8      	ldrb	r0, [r5, #2]
   1e7e4:	786f      	ldrb	r7, [r5, #1]
   1e7e6:	9704      	str	r7, [sp, #16]
   1e7e8:	9003      	str	r0, [sp, #12]
   1e7ea:	9102      	str	r1, [sp, #8]
   1e7ec:	9201      	str	r2, [sp, #4]
   1e7ee:	9300      	str	r3, [sp, #0]
   1e7f0:	79ab      	ldrb	r3, [r5, #6]
   1e7f2:	4a0c      	ldr	r2, [pc, #48]	; (1e824 <ble_gap_log_adv+0x6c>)
   1e7f4:	2101      	movs	r1, #1
   1e7f6:	2004      	movs	r0, #4
   1e7f8:	f7f2 ff1e 	bl	11638 <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   1e7fc:	79e3      	ldrb	r3, [r4, #7]
   1e7fe:	8862      	ldrh	r2, [r4, #2]
   1e800:	88a1      	ldrh	r1, [r4, #4]
   1e802:	9103      	str	r1, [sp, #12]
   1e804:	9202      	str	r2, [sp, #8]
   1e806:	9301      	str	r3, [sp, #4]
   1e808:	9600      	str	r6, [sp, #0]
   1e80a:	79a3      	ldrb	r3, [r4, #6]
   1e80c:	4a06      	ldr	r2, [pc, #24]	; (1e828 <ble_gap_log_adv+0x70>)
   1e80e:	2101      	movs	r1, #1
   1e810:	2004      	movs	r0, #4
   1e812:	f7f2 ff11 	bl	11638 <modlog_printf>
}
   1e816:	b007      	add	sp, #28
   1e818:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e81a:	bf00      	nop
   1e81c:	0002df0c 	.word	0x0002df0c
   1e820:	0002df1c 	.word	0x0002df1c
   1e824:	0002d5a0 	.word	0x0002d5a0
   1e828:	0002df40 	.word	0x0002df40

0001e82c <ble_gap_log_update>:
{
   1e82c:	b570      	push	{r4, r5, r6, lr}
   1e82e:	b086      	sub	sp, #24
   1e830:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "connection parameter update; "
   1e832:	880a      	ldrh	r2, [r1, #0]
   1e834:	8848      	ldrh	r0, [r1, #2]
   1e836:	888c      	ldrh	r4, [r1, #4]
   1e838:	88cd      	ldrh	r5, [r1, #6]
   1e83a:	890e      	ldrh	r6, [r1, #8]
   1e83c:	8949      	ldrh	r1, [r1, #10]
   1e83e:	9105      	str	r1, [sp, #20]
   1e840:	9604      	str	r6, [sp, #16]
   1e842:	9503      	str	r5, [sp, #12]
   1e844:	9402      	str	r4, [sp, #8]
   1e846:	9001      	str	r0, [sp, #4]
   1e848:	9200      	str	r2, [sp, #0]
   1e84a:	4a03      	ldr	r2, [pc, #12]	; (1e858 <ble_gap_log_update+0x2c>)
   1e84c:	2101      	movs	r1, #1
   1e84e:	2004      	movs	r0, #4
   1e850:	f7f2 fef2 	bl	11638 <modlog_printf>
}
   1e854:	b006      	add	sp, #24
   1e856:	bd70      	pop	{r4, r5, r6, pc}
   1e858:	0002df9c 	.word	0x0002df9c

0001e85c <ble_gap_master_timer>:
{
   1e85c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   1e85e:	f7ff ff15 	bl	1e68c <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1e862:	b9e0      	cbnz	r0, 1e89e <ble_gap_master_timer+0x42>
    switch (ble_gap_master.op) {
   1e864:	4b0f      	ldr	r3, [pc, #60]	; (1e8a4 <ble_gap_master_timer+0x48>)
   1e866:	7c1b      	ldrb	r3, [r3, #16]
   1e868:	2b01      	cmp	r3, #1
   1e86a:	d00c      	beq.n	1e886 <ble_gap_master_timer+0x2a>
   1e86c:	2b02      	cmp	r3, #2
   1e86e:	d114      	bne.n	1e89a <ble_gap_master_timer+0x3e>
        rc = ble_gap_conn_cancel_tx();
   1e870:	f7ff fd6e 	bl	1e350 <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   1e874:	b9a0      	cbnz	r0, 1e8a0 <ble_gap_master_timer+0x44>
            ble_gap_master.exp_set = 0;
   1e876:	4b0b      	ldr	r3, [pc, #44]	; (1e8a4 <ble_gap_master_timer+0x48>)
   1e878:	7c5a      	ldrb	r2, [r3, #17]
   1e87a:	f36f 0200 	bfc	r2, #0, #1
   1e87e:	745a      	strb	r2, [r3, #17]
    return BLE_HS_FOREVER;
   1e880:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   1e884:	e00b      	b.n	1e89e <ble_gap_master_timer+0x42>
        assert(0);
   1e886:	f7ed fc89 	bl	c19c <hal_debugger_connected>
   1e88a:	b100      	cbz	r0, 1e88e <ble_gap_master_timer+0x32>
   1e88c:	be01      	bkpt	0x0001
   1e88e:	2300      	movs	r3, #0
   1e890:	461a      	mov	r2, r3
   1e892:	4619      	mov	r1, r3
   1e894:	4618      	mov	r0, r3
   1e896:	f7ee f985 	bl	cba4 <__assert_func>
    switch (ble_gap_master.op) {
   1e89a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1e89e:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1e8a0:	200c      	movs	r0, #12
   1e8a2:	e7fc      	b.n	1e89e <ble_gap_master_timer+0x42>
   1e8a4:	20000548 	.word	0x20000548

0001e8a8 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   1e8a8:	b34a      	cbz	r2, 1e8fe <ble_gap_adv_validate+0x56>
{
   1e8aa:	b508      	push	{r3, lr}
   1e8ac:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1e8ae:	2803      	cmp	r0, #3
   1e8b0:	d827      	bhi.n	1e902 <ble_gap_adv_validate+0x5a>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   1e8b2:	7852      	ldrb	r2, [r2, #1]
   1e8b4:	2a02      	cmp	r2, #2
   1e8b6:	d826      	bhi.n	1e906 <ble_gap_adv_validate+0x5e>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   1e8b8:	4a1b      	ldr	r2, [pc, #108]	; (1e928 <ble_gap_adv_validate+0x80>)
   1e8ba:	7812      	ldrb	r2, [r2, #0]
   1e8bc:	bb2a      	cbnz	r2, 1e90a <ble_gap_adv_validate+0x62>
    switch (adv_params->conn_mode) {
   1e8be:	781a      	ldrb	r2, [r3, #0]
   1e8c0:	2a01      	cmp	r2, #1
   1e8c2:	d013      	beq.n	1e8ec <ble_gap_adv_validate+0x44>
   1e8c4:	2a02      	cmp	r2, #2
   1e8c6:	d008      	beq.n	1e8da <ble_gap_adv_validate+0x32>
   1e8c8:	b10a      	cbz	r2, 1e8ce <ble_gap_adv_validate+0x26>
   1e8ca:	2003      	movs	r0, #3
}
   1e8cc:	bd08      	pop	{r3, pc}
        if (adv_params->high_duty_cycle) {
   1e8ce:	7a1b      	ldrb	r3, [r3, #8]
   1e8d0:	f013 0f01 	tst.w	r3, #1
   1e8d4:	d11b      	bne.n	1e90e <ble_gap_adv_validate+0x66>
    return 0;
   1e8d6:	2000      	movs	r0, #0
   1e8d8:	e7f8      	b.n	1e8cc <ble_gap_adv_validate+0x24>
        if (adv_params->high_duty_cycle) {
   1e8da:	7a1b      	ldrb	r3, [r3, #8]
   1e8dc:	f013 0f01 	tst.w	r3, #1
   1e8e0:	d117      	bne.n	1e912 <ble_gap_adv_validate+0x6a>
        if (!ble_hs_conn_can_alloc()) {
   1e8e2:	f003 fd55 	bl	22390 <ble_hs_conn_can_alloc>
   1e8e6:	b1b0      	cbz	r0, 1e916 <ble_gap_adv_validate+0x6e>
    return 0;
   1e8e8:	2000      	movs	r0, #0
   1e8ea:	e7ef      	b.n	1e8cc <ble_gap_adv_validate+0x24>
        if (peer_addr == NULL) {
   1e8ec:	b1a9      	cbz	r1, 1e91a <ble_gap_adv_validate+0x72>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   1e8ee:	780b      	ldrb	r3, [r1, #0]
   1e8f0:	2b03      	cmp	r3, #3
   1e8f2:	d814      	bhi.n	1e91e <ble_gap_adv_validate+0x76>
        if (!ble_hs_conn_can_alloc()) {
   1e8f4:	f003 fd4c 	bl	22390 <ble_hs_conn_can_alloc>
   1e8f8:	b198      	cbz	r0, 1e922 <ble_gap_adv_validate+0x7a>
    return 0;
   1e8fa:	2000      	movs	r0, #0
   1e8fc:	e7e6      	b.n	1e8cc <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   1e8fe:	2003      	movs	r0, #3
}
   1e900:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1e902:	2003      	movs	r0, #3
   1e904:	e7e2      	b.n	1e8cc <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   1e906:	2003      	movs	r0, #3
   1e908:	e7e0      	b.n	1e8cc <ble_gap_adv_validate+0x24>
        return BLE_HS_EALREADY;
   1e90a:	2002      	movs	r0, #2
   1e90c:	e7de      	b.n	1e8cc <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1e90e:	2003      	movs	r0, #3
   1e910:	e7dc      	b.n	1e8cc <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1e912:	2003      	movs	r0, #3
   1e914:	e7da      	b.n	1e8cc <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   1e916:	2006      	movs	r0, #6
   1e918:	e7d8      	b.n	1e8cc <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1e91a:	2003      	movs	r0, #3
   1e91c:	e7d6      	b.n	1e8cc <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1e91e:	2003      	movs	r0, #3
   1e920:	e7d4      	b.n	1e8cc <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   1e922:	2006      	movs	r0, #6
   1e924:	e7d2      	b.n	1e8cc <ble_gap_adv_validate+0x24>
   1e926:	bf00      	nop
   1e928:	20000548 	.word	0x20000548

0001e92c <ble_gap_update_entry_alloc>:
{
   1e92c:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   1e92e:	4807      	ldr	r0, [pc, #28]	; (1e94c <ble_gap_update_entry_alloc+0x20>)
   1e930:	f7ef f97d 	bl	dc2e <os_memblock_get>
    if (entry != NULL) {
   1e934:	4603      	mov	r3, r0
   1e936:	b130      	cbz	r0, 1e946 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   1e938:	2200      	movs	r2, #0
   1e93a:	6002      	str	r2, [r0, #0]
   1e93c:	6042      	str	r2, [r0, #4]
   1e93e:	6082      	str	r2, [r0, #8]
   1e940:	60c2      	str	r2, [r0, #12]
   1e942:	6102      	str	r2, [r0, #16]
   1e944:	6142      	str	r2, [r0, #20]
}
   1e946:	4618      	mov	r0, r3
   1e948:	bd08      	pop	{r3, pc}
   1e94a:	bf00      	nop
   1e94c:	200030ec 	.word	0x200030ec

0001e950 <ble_gap_conn_find>:
{
   1e950:	b538      	push	{r3, r4, r5, lr}
   1e952:	4605      	mov	r5, r0
   1e954:	460c      	mov	r4, r1
    ble_hs_lock();
   1e956:	f002 ff89 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1e95a:	4628      	mov	r0, r5
   1e95c:	f003 fde4 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   1e960:	4605      	mov	r5, r0
   1e962:	b118      	cbz	r0, 1e96c <ble_gap_conn_find+0x1c>
   1e964:	b114      	cbz	r4, 1e96c <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   1e966:	4621      	mov	r1, r4
   1e968:	f7ff fc77 	bl	1e25a <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   1e96c:	f002 ff82 	bl	21874 <ble_hs_unlock>
    if (conn == NULL) {
   1e970:	b10d      	cbz	r5, 1e976 <ble_gap_conn_find+0x26>
        return 0;
   1e972:	2000      	movs	r0, #0
}
   1e974:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1e976:	2007      	movs	r0, #7
   1e978:	e7fc      	b.n	1e974 <ble_gap_conn_find+0x24>

0001e97a <ble_gap_master_in_progress>:
}
   1e97a:	2000      	movs	r0, #0
   1e97c:	4770      	bx	lr

0001e97e <ble_gap_rx_adv_report>:
}
   1e97e:	4770      	bx	lr

0001e980 <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   1e980:	b538      	push	{r3, r4, r5, lr}
   1e982:	4604      	mov	r4, r0
    ble_hs_lock();
   1e984:	f002 ff72 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   1e988:	8860      	ldrh	r0, [r4, #2]
   1e98a:	f003 fdcd 	bl	22528 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   1e98e:	b110      	cbz	r0, 1e996 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   1e990:	4605      	mov	r5, r0
   1e992:	7863      	ldrb	r3, [r4, #1]
   1e994:	b113      	cbz	r3, 1e99c <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   1e996:	f002 ff6d 	bl	21874 <ble_hs_unlock>
}
   1e99a:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   1e99c:	1d20      	adds	r0, r4, #4
   1e99e:	f00c f921 	bl	2abe4 <get_le32>
   1e9a2:	6268      	str	r0, [r5, #36]	; 0x24
   1e9a4:	e7f7      	b.n	1e996 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

0001e9a6 <ble_gap_rx_l2cap_update_req>:
{
   1e9a6:	b530      	push	{r4, r5, lr}
   1e9a8:	b08f      	sub	sp, #60	; 0x3c
   1e9aa:	4604      	mov	r4, r0
   1e9ac:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1e9ae:	2234      	movs	r2, #52	; 0x34
   1e9b0:	2100      	movs	r1, #0
   1e9b2:	a801      	add	r0, sp, #4
   1e9b4:	f7f0 f825 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   1e9b8:	2305      	movs	r3, #5
   1e9ba:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1e9be:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   1e9c2:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1e9c4:	4621      	mov	r1, r4
   1e9c6:	a801      	add	r0, sp, #4
   1e9c8:	f7ff fc36 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1e9cc:	b00f      	add	sp, #60	; 0x3c
   1e9ce:	bd30      	pop	{r4, r5, pc}

0001e9d0 <ble_gap_rx_phy_update_complete>:
{
   1e9d0:	b570      	push	{r4, r5, r6, lr}
   1e9d2:	b08e      	sub	sp, #56	; 0x38
   1e9d4:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   1e9d6:	8845      	ldrh	r5, [r0, #2]
   1e9d8:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   1e9da:	2234      	movs	r2, #52	; 0x34
   1e9dc:	2100      	movs	r1, #0
   1e9de:	a801      	add	r0, sp, #4
   1e9e0:	f7f0 f80f 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   1e9e4:	2312      	movs	r3, #18
   1e9e6:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   1e9ea:	7863      	ldrb	r3, [r4, #1]
   1e9ec:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   1e9ee:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   1e9f2:	7923      	ldrb	r3, [r4, #4]
   1e9f4:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   1e9f8:	7963      	ldrb	r3, [r4, #5]
   1e9fa:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   1e9fe:	a801      	add	r0, sp, #4
   1ea00:	f7ff fbf0 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1ea04:	4631      	mov	r1, r6
   1ea06:	a801      	add	r0, sp, #4
   1ea08:	f7ff fc16 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1ea0c:	b00e      	add	sp, #56	; 0x38
   1ea0e:	bd70      	pop	{r4, r5, r6, pc}

0001ea10 <ble_gap_timer>:
{
   1ea10:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   1ea12:	f7ff ff23 	bl	1e85c <ble_gap_master_timer>
   1ea16:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   1ea18:	f7ff fe70 	bl	1e6fc <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   1ea1c:	4284      	cmp	r4, r0
   1ea1e:	bfa8      	it	ge
   1ea20:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1ea22:	f7ff fea3 	bl	1e76c <ble_gap_slave_timer>
   1ea26:	42a0      	cmp	r0, r4
   1ea28:	dd01      	ble.n	1ea2e <ble_gap_timer+0x1e>
}
   1ea2a:	4620      	mov	r0, r4
   1ea2c:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1ea2e:	f7ff fe9d 	bl	1e76c <ble_gap_slave_timer>
   1ea32:	4604      	mov	r4, r0
    return min_ticks;
   1ea34:	e7f9      	b.n	1ea2a <ble_gap_timer+0x1a>
	...

0001ea38 <ble_gap_adv_start>:
{
   1ea38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea3c:	b082      	sub	sp, #8
   1ea3e:	4604      	mov	r4, r0
   1ea40:	460e      	mov	r6, r1
   1ea42:	4617      	mov	r7, r2
   1ea44:	461d      	mov	r5, r3
    STATS_INC(ble_gap_stats, adv_start);
   1ea46:	4a41      	ldr	r2, [pc, #260]	; (1eb4c <ble_gap_adv_start+0x114>)
   1ea48:	69d3      	ldr	r3, [r2, #28]
   1ea4a:	3301      	adds	r3, #1
   1ea4c:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   1ea4e:	f002 ff0d 	bl	2186c <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   1ea52:	462a      	mov	r2, r5
   1ea54:	4631      	mov	r1, r6
   1ea56:	4620      	mov	r0, r4
   1ea58:	f7ff ff26 	bl	1e8a8 <ble_gap_adv_validate>
    if (rc != 0) {
   1ea5c:	4680      	mov	r8, r0
   1ea5e:	b9a8      	cbnz	r0, 1ea8c <ble_gap_adv_start+0x54>
    if (duration_ms != BLE_HS_FOREVER) {
   1ea60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1ea64:	429f      	cmp	r7, r3
   1ea66:	d006      	beq.n	1ea76 <ble_gap_adv_start+0x3e>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1ea68:	a901      	add	r1, sp, #4
   1ea6a:	4638      	mov	r0, r7
   1ea6c:	f7ef fd47 	bl	e4fe <os_time_ms_to_ticks>
        if (rc != 0) {
   1ea70:	f010 0fff 	tst.w	r0, #255	; 0xff
   1ea74:	d117      	bne.n	1eaa6 <ble_gap_adv_start+0x6e>
    if (!ble_hs_is_enabled()) {
   1ea76:	f002 ff31 	bl	218dc <ble_hs_is_enabled>
   1ea7a:	b1c8      	cbz	r0, 1eab0 <ble_gap_adv_start+0x78>
    if (ble_gap_is_preempted()) {
   1ea7c:	f7ff faf2 	bl	1e064 <ble_gap_is_preempted>
   1ea80:	b9d8      	cbnz	r0, 1eaba <ble_gap_adv_start+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   1ea82:	4620      	mov	r0, r4
   1ea84:	f004 fc5f 	bl	23346 <ble_hs_id_use_addr>
    if (rc != 0) {
   1ea88:	4680      	mov	r8, r0
   1ea8a:	b1d8      	cbz	r0, 1eac4 <ble_gap_adv_start+0x8c>
    ble_hs_unlock();
   1ea8c:	f002 fef2 	bl	21874 <ble_hs_unlock>
    if (rc != 0) {
   1ea90:	f1b8 0f00 	cmp.w	r8, #0
   1ea94:	d003      	beq.n	1ea9e <ble_gap_adv_start+0x66>
        STATS_INC(ble_gap_stats, adv_start_fail);
   1ea96:	4a2d      	ldr	r2, [pc, #180]	; (1eb4c <ble_gap_adv_start+0x114>)
   1ea98:	6a13      	ldr	r3, [r2, #32]
   1ea9a:	3301      	adds	r3, #1
   1ea9c:	6213      	str	r3, [r2, #32]
}
   1ea9e:	4640      	mov	r0, r8
   1eaa0:	b002      	add	sp, #8
   1eaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   1eaa6:	f002 fee5 	bl	21874 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1eaaa:	f04f 0803 	mov.w	r8, #3
   1eaae:	e7f2      	b.n	1ea96 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   1eab0:	f002 fee0 	bl	21874 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   1eab4:	f04f 081e 	mov.w	r8, #30
   1eab8:	e7ed      	b.n	1ea96 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   1eaba:	f002 fedb 	bl	21874 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   1eabe:	f04f 081d 	mov.w	r8, #29
   1eac2:	e7e8      	b.n	1ea96 <ble_gap_adv_start+0x5e>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   1eac4:	4a22      	ldr	r2, [pc, #136]	; (1eb50 <ble_gap_adv_start+0x118>)
   1eac6:	2101      	movs	r1, #1
   1eac8:	2004      	movs	r0, #4
   1eaca:	f7f2 fdb5 	bl	11638 <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   1eace:	462a      	mov	r2, r5
   1ead0:	4631      	mov	r1, r6
   1ead2:	4620      	mov	r0, r4
   1ead4:	f7ff fe70 	bl	1e7b8 <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   1ead8:	4a1e      	ldr	r2, [pc, #120]	; (1eb54 <ble_gap_adv_start+0x11c>)
   1eada:	2101      	movs	r1, #1
   1eadc:	2004      	movs	r0, #4
   1eade:	f7f2 fdab 	bl	11638 <modlog_printf>
    ble_gap_slave[0].cb = cb;
   1eae2:	4b1d      	ldr	r3, [pc, #116]	; (1eb58 <ble_gap_adv_start+0x120>)
   1eae4:	9a08      	ldr	r2, [sp, #32]
   1eae6:	609a      	str	r2, [r3, #8]
    ble_gap_slave[0].cb_arg = cb_arg;
   1eae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1eaea:	60da      	str	r2, [r3, #12]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   1eaec:	785a      	ldrb	r2, [r3, #1]
   1eaee:	f364 0201 	bfi	r2, r4, #0, #2
   1eaf2:	705a      	strb	r2, [r3, #1]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   1eaf4:	782b      	ldrb	r3, [r5, #0]
   1eaf6:	b1d3      	cbz	r3, 1eb2e <ble_gap_adv_start+0xf6>
        ble_gap_slave[0].connectable = 1;
   1eaf8:	4a17      	ldr	r2, [pc, #92]	; (1eb58 <ble_gap_adv_start+0x120>)
   1eafa:	7853      	ldrb	r3, [r2, #1]
   1eafc:	f043 0308 	orr.w	r3, r3, #8
   1eb00:	7053      	strb	r3, [r2, #1]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   1eb02:	462a      	mov	r2, r5
   1eb04:	4631      	mov	r1, r6
   1eb06:	4620      	mov	r0, r4
   1eb08:	f7ff fc41 	bl	1e38e <ble_gap_adv_params_tx>
    if (rc != 0) {
   1eb0c:	4680      	mov	r8, r0
   1eb0e:	2800      	cmp	r0, #0
   1eb10:	d1bc      	bne.n	1ea8c <ble_gap_adv_start+0x54>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   1eb12:	2001      	movs	r0, #1
   1eb14:	4b10      	ldr	r3, [pc, #64]	; (1eb58 <ble_gap_adv_start+0x120>)
   1eb16:	7018      	strb	r0, [r3, #0]
    rc = ble_gap_adv_enable_tx(1);
   1eb18:	f7ff fc27 	bl	1e36a <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1eb1c:	4680      	mov	r8, r0
   1eb1e:	b960      	cbnz	r0, 1eb3a <ble_gap_adv_start+0x102>
    if (duration_ms != BLE_HS_FOREVER) {
   1eb20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1eb24:	429f      	cmp	r7, r3
   1eb26:	d10c      	bne.n	1eb42 <ble_gap_adv_start+0x10a>
    ble_hs_unlock();
   1eb28:	f002 fea4 	bl	21874 <ble_hs_unlock>
    if (rc != 0) {
   1eb2c:	e7b7      	b.n	1ea9e <ble_gap_adv_start+0x66>
        ble_gap_slave[0].connectable = 0;
   1eb2e:	4b0a      	ldr	r3, [pc, #40]	; (1eb58 <ble_gap_adv_start+0x120>)
   1eb30:	785a      	ldrb	r2, [r3, #1]
   1eb32:	f36f 02c3 	bfc	r2, #3, #1
   1eb36:	705a      	strb	r2, [r3, #1]
   1eb38:	e7e3      	b.n	1eb02 <ble_gap_adv_start+0xca>
        ble_gap_slave_reset_state(0);
   1eb3a:	2000      	movs	r0, #0
   1eb3c:	f7ff fcdc 	bl	1e4f8 <ble_gap_slave_reset_state>
        goto done;
   1eb40:	e7a4      	b.n	1ea8c <ble_gap_adv_start+0x54>
        ble_gap_slave_set_timer(duration_ticks);
   1eb42:	9801      	ldr	r0, [sp, #4]
   1eb44:	f7ff fe28 	bl	1e798 <ble_gap_slave_set_timer>
   1eb48:	e7ee      	b.n	1eb28 <ble_gap_adv_start+0xf0>
   1eb4a:	bf00      	nop
   1eb4c:	20003048 	.word	0x20003048
   1eb50:	0002e04c 	.word	0x0002e04c
   1eb54:	0002e438 	.word	0x0002e438
   1eb58:	20000548 	.word	0x20000548

0001eb5c <ble_gap_adv_set_data>:
{
   1eb5c:	b510      	push	{r4, lr}
   1eb5e:	b08a      	sub	sp, #40	; 0x28
   1eb60:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, adv_set_data);
   1eb62:	4a0f      	ldr	r2, [pc, #60]	; (1eba0 <ble_gap_adv_set_data+0x44>)
   1eb64:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1eb66:	3301      	adds	r3, #1
   1eb68:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   1eb6a:	4601      	mov	r1, r0
   1eb6c:	b190      	cbz	r0, 1eb94 <ble_gap_adv_set_data+0x38>
   1eb6e:	2c1f      	cmp	r4, #31
   1eb70:	dc14      	bgt.n	1eb9c <ble_gap_adv_set_data+0x40>
    memcpy(cmd.adv_data, data, data_len);
   1eb72:	4622      	mov	r2, r4
   1eb74:	f10d 0009 	add.w	r0, sp, #9
   1eb78:	f7ef ff1e 	bl	e9b8 <memcpy>
    cmd.adv_data_len = data_len;
   1eb7c:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1eb80:	2300      	movs	r3, #0
   1eb82:	9300      	str	r3, [sp, #0]
   1eb84:	2220      	movs	r2, #32
   1eb86:	a902      	add	r1, sp, #8
   1eb88:	f242 0008 	movw	r0, #8200	; 0x2008
   1eb8c:	f003 ff24 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   1eb90:	b00a      	add	sp, #40	; 0x28
   1eb92:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   1eb94:	2c00      	cmp	r4, #0
   1eb96:	d0ea      	beq.n	1eb6e <ble_gap_adv_set_data+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1eb98:	2012      	movs	r0, #18
   1eb9a:	e7f9      	b.n	1eb90 <ble_gap_adv_set_data+0x34>
   1eb9c:	2012      	movs	r0, #18
   1eb9e:	e7f7      	b.n	1eb90 <ble_gap_adv_set_data+0x34>
   1eba0:	20003048 	.word	0x20003048

0001eba4 <ble_gap_adv_set_fields>:
{
   1eba4:	b500      	push	{lr}
   1eba6:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   1eba8:	231f      	movs	r3, #31
   1ebaa:	f10d 0207 	add.w	r2, sp, #7
   1ebae:	a902      	add	r1, sp, #8
   1ebb0:	f003 fbac 	bl	2230c <ble_hs_adv_set_fields>
    if (rc != 0) {
   1ebb4:	b110      	cbz	r0, 1ebbc <ble_gap_adv_set_fields+0x18>
}
   1ebb6:	b00b      	add	sp, #44	; 0x2c
   1ebb8:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   1ebbc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1ebc0:	a802      	add	r0, sp, #8
   1ebc2:	f7ff ffcb 	bl	1eb5c <ble_gap_adv_set_data>
    if (rc != 0) {
   1ebc6:	e7f6      	b.n	1ebb6 <ble_gap_adv_set_fields+0x12>

0001ebc8 <ble_gap_adv_active>:
{
   1ebc8:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   1ebca:	2000      	movs	r0, #0
   1ebcc:	f7ff fa6e 	bl	1e0ac <ble_gap_adv_active_instance>
}
   1ebd0:	bd08      	pop	{r3, pc}
	...

0001ebd4 <ble_gap_rx_conn_complete>:
{
   1ebd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebd6:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   1ebd8:	4a6b      	ldr	r2, [pc, #428]	; (1ed88 <ble_gap_rx_conn_complete+0x1b4>)
   1ebda:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1ebdc:	3301      	adds	r3, #1
   1ebde:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   1ebe0:	7803      	ldrb	r3, [r0, #0]
   1ebe2:	b37b      	cbz	r3, 1ec44 <ble_gap_rx_conn_complete+0x70>
        switch (evt->status) {
   1ebe4:	2b02      	cmp	r3, #2
   1ebe6:	d00e      	beq.n	1ec06 <ble_gap_rx_conn_complete+0x32>
   1ebe8:	2b3c      	cmp	r3, #60	; 0x3c
   1ebea:	d11c      	bne.n	1ec26 <ble_gap_rx_conn_complete+0x52>
            if (ble_gap_adv_active()) {
   1ebec:	f7ff ffec 	bl	1ebc8 <ble_gap_adv_active>
   1ebf0:	b910      	cbnz	r0, 1ebf8 <ble_gap_rx_conn_complete+0x24>
        return 0;
   1ebf2:	2000      	movs	r0, #0
}
   1ebf4:	b011      	add	sp, #68	; 0x44
   1ebf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   1ebf8:	2300      	movs	r3, #0
   1ebfa:	461a      	mov	r2, r3
   1ebfc:	4619      	mov	r1, r3
   1ebfe:	4618      	mov	r0, r3
   1ec00:	f7ff fca0 	bl	1e544 <ble_gap_adv_finished>
   1ec04:	e7f5      	b.n	1ebf2 <ble_gap_rx_conn_complete+0x1e>
            if (ble_gap_master_in_progress()) {
   1ec06:	f7ff feb8 	bl	1e97a <ble_gap_master_in_progress>
   1ec0a:	2800      	cmp	r0, #0
   1ec0c:	d0f1      	beq.n	1ebf2 <ble_gap_rx_conn_complete+0x1e>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   1ec0e:	4b5f      	ldr	r3, [pc, #380]	; (1ed8c <ble_gap_rx_conn_complete+0x1b8>)
   1ec10:	f893 3020 	ldrb.w	r3, [r3, #32]
   1ec14:	2b02      	cmp	r3, #2
   1ec16:	d002      	beq.n	1ec1e <ble_gap_rx_conn_complete+0x4a>
                    ble_gap_master_connect_cancelled();
   1ec18:	f7ff fd0a 	bl	1e630 <ble_gap_master_connect_cancelled>
   1ec1c:	e7e9      	b.n	1ebf2 <ble_gap_rx_conn_complete+0x1e>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   1ec1e:	201d      	movs	r0, #29
   1ec20:	f7ff fcf4 	bl	1e60c <ble_gap_master_failed>
   1ec24:	e7e5      	b.n	1ebf2 <ble_gap_rx_conn_complete+0x1e>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   1ec26:	4a5a      	ldr	r2, [pc, #360]	; (1ed90 <ble_gap_rx_conn_complete+0x1bc>)
   1ec28:	2101      	movs	r1, #1
   1ec2a:	2004      	movs	r0, #4
   1ec2c:	f7f2 fd04 	bl	11638 <modlog_printf>
            assert(0);
   1ec30:	f7ed fab4 	bl	c19c <hal_debugger_connected>
   1ec34:	b100      	cbz	r0, 1ec38 <ble_gap_rx_conn_complete+0x64>
   1ec36:	be01      	bkpt	0x0001
   1ec38:	2300      	movs	r3, #0
   1ec3a:	461a      	mov	r2, r3
   1ec3c:	4619      	mov	r1, r3
   1ec3e:	4618      	mov	r0, r3
   1ec40:	f7ed ffb0 	bl	cba4 <__assert_func>
   1ec44:	4604      	mov	r4, r0
   1ec46:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   1ec48:	2100      	movs	r1, #0
   1ec4a:	8840      	ldrh	r0, [r0, #2]
   1ec4c:	f003 fb7b 	bl	22346 <ble_hs_atomic_conn_flags>
   1ec50:	2800      	cmp	r0, #0
   1ec52:	d0cf      	beq.n	1ebf4 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   1ec54:	7923      	ldrb	r3, [r4, #4]
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	d064      	beq.n	1ed24 <ble_gap_rx_conn_complete+0x150>
   1ec5a:	2b01      	cmp	r3, #1
   1ec5c:	d067      	beq.n	1ed2e <ble_gap_rx_conn_complete+0x15a>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   1ec5e:	8860      	ldrh	r0, [r4, #2]
   1ec60:	f003 fc10 	bl	22484 <ble_hs_conn_alloc>
   1ec64:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   1ec66:	89a3      	ldrh	r3, [r4, #12]
   1ec68:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   1ec6a:	89e3      	ldrh	r3, [r4, #14]
   1ec6c:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   1ec6e:	8a23      	ldrh	r3, [r4, #16]
   1ec70:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   1ec72:	7ca3      	ldrb	r3, [r4, #18]
   1ec74:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   1ec78:	7923      	ldrb	r3, [r4, #4]
   1ec7a:	2b00      	cmp	r3, #0
   1ec7c:	d15d      	bne.n	1ed3a <ble_gap_rx_conn_complete+0x166>
        conn->bhc_cb = ble_gap_master.cb;
   1ec7e:	4b43      	ldr	r3, [pc, #268]	; (1ed8c <ble_gap_rx_conn_complete+0x1b8>)
   1ec80:	699a      	ldr	r2, [r3, #24]
   1ec82:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   1ec84:	69da      	ldr	r2, [r3, #28]
   1ec86:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   1ec88:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   1ec8c:	f042 0201 	orr.w	r2, r2, #1
   1ec90:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   1ec94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   1ec98:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1ec9c:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   1ec9e:	f7ff fc6d 	bl	1e57c <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   1eca2:	7966      	ldrb	r6, [r4, #5]
   1eca4:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   1eca6:	4623      	mov	r3, r4
   1eca8:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1ecac:	60aa      	str	r2, [r5, #8]
   1ecae:	889b      	ldrh	r3, [r3, #4]
   1ecb0:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   1ecb2:	2301      	movs	r3, #1
   1ecb4:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   1ecb6:	4623      	mov	r3, r4
   1ecb8:	f853 2f13 	ldr.w	r2, [r3, #19]!
   1ecbc:	f8c5 200f 	str.w	r2, [r5, #15]
   1ecc0:	889b      	ldrh	r3, [r3, #4]
   1ecc2:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   1ecc6:	2300      	movs	r3, #0
   1ecc8:	930e      	str	r3, [sp, #56]	; 0x38
   1ecca:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   1ecce:	f104 0719 	add.w	r7, r4, #25
   1ecd2:	2206      	movs	r2, #6
   1ecd4:	4639      	mov	r1, r7
   1ecd6:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   1ecda:	f7ef fe49 	bl	e970 <memcmp>
   1ecde:	2800      	cmp	r0, #0
   1ece0:	d14a      	bne.n	1ed78 <ble_gap_rx_conn_complete+0x1a4>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1ece2:	2e01      	cmp	r6, #1
   1ece4:	d038      	beq.n	1ed58 <ble_gap_rx_conn_complete+0x184>
    ble_hs_lock();
   1ece6:	f002 fdc1 	bl	2186c <ble_hs_lock>
    memset(&event, 0, sizeof event);
   1ecea:	2234      	movs	r2, #52	; 0x34
   1ecec:	2100      	movs	r1, #0
   1ecee:	a801      	add	r0, sp, #4
   1ecf0:	f7ef fe87 	bl	ea02 <memset>
    ble_hs_conn_insert(conn);
   1ecf4:	4628      	mov	r0, r5
   1ecf6:	f003 fc23 	bl	22540 <ble_hs_conn_insert>
    ble_hs_unlock();
   1ecfa:	f002 fdbb 	bl	21874 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   1ecfe:	2500      	movs	r5, #0
   1ed00:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   1ed04:	8863      	ldrh	r3, [r4, #2]
   1ed06:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   1ed0a:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1ed0c:	a801      	add	r0, sp, #4
   1ed0e:	f7ff fa69 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   1ed12:	8861      	ldrh	r1, [r4, #2]
   1ed14:	a801      	add	r0, sp, #4
   1ed16:	f7ff fa8f 	bl	1e238 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   1ed1a:	8860      	ldrh	r0, [r4, #2]
   1ed1c:	f7ff fb09 	bl	1e332 <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   1ed20:	4628      	mov	r0, r5
   1ed22:	e767      	b.n	1ebf4 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   1ed24:	f7ff f9cc 	bl	1e0c0 <ble_gap_accept_master_conn>
        if (rc != 0) {
   1ed28:	2800      	cmp	r0, #0
   1ed2a:	d098      	beq.n	1ec5e <ble_gap_rx_conn_complete+0x8a>
   1ed2c:	e762      	b.n	1ebf4 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   1ed2e:	4630      	mov	r0, r6
   1ed30:	f7ff f9d6 	bl	1e0e0 <ble_gap_accept_slave_conn>
        if (rc != 0) {
   1ed34:	2800      	cmp	r0, #0
   1ed36:	d092      	beq.n	1ec5e <ble_gap_rx_conn_complete+0x8a>
   1ed38:	e75c      	b.n	1ebf4 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   1ed3a:	4b14      	ldr	r3, [pc, #80]	; (1ed8c <ble_gap_rx_conn_complete+0x1b8>)
   1ed3c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1ed40:	689a      	ldr	r2, [r3, #8]
   1ed42:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   1ed44:	68da      	ldr	r2, [r3, #12]
   1ed46:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   1ed48:	785b      	ldrb	r3, [r3, #1]
   1ed4a:	f3c3 0301 	ubfx	r3, r3, #0, #2
   1ed4e:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   1ed50:	4630      	mov	r0, r6
   1ed52:	f7ff fbd1 	bl	1e4f8 <ble_gap_slave_reset_state>
   1ed56:	e7a4      	b.n	1eca2 <ble_gap_rx_conn_complete+0xce>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1ed58:	7b6b      	ldrb	r3, [r5, #13]
   1ed5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ed5e:	2b40      	cmp	r3, #64	; 0x40
   1ed60:	d1c1      	bne.n	1ece6 <ble_gap_rx_conn_complete+0x112>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   1ed62:	462b      	mov	r3, r5
   1ed64:	f853 2f07 	ldr.w	r2, [r3, #7]!
   1ed68:	f8c5 2015 	str.w	r2, [r5, #21]
   1ed6c:	889a      	ldrh	r2, [r3, #4]
   1ed6e:	799b      	ldrb	r3, [r3, #6]
   1ed70:	f8a5 2019 	strh.w	r2, [r5, #25]
   1ed74:	76eb      	strb	r3, [r5, #27]
   1ed76:	e7b6      	b.n	1ece6 <ble_gap_rx_conn_complete+0x112>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   1ed78:	2301      	movs	r3, #1
   1ed7a:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   1ed7c:	683b      	ldr	r3, [r7, #0]
   1ed7e:	f8c5 3016 	str.w	r3, [r5, #22]
   1ed82:	88bb      	ldrh	r3, [r7, #4]
   1ed84:	836b      	strh	r3, [r5, #26]
   1ed86:	e7ae      	b.n	1ece6 <ble_gap_rx_conn_complete+0x112>
   1ed88:	20003048 	.word	0x20003048
   1ed8c:	20000548 	.word	0x20000548
   1ed90:	0002e074 	.word	0x0002e074

0001ed94 <ble_gap_adv_stop_no_lock>:
{
   1ed94:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   1ed96:	4a0e      	ldr	r2, [pc, #56]	; (1edd0 <ble_gap_adv_stop_no_lock+0x3c>)
   1ed98:	6953      	ldr	r3, [r2, #20]
   1ed9a:	3301      	adds	r3, #1
   1ed9c:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   1ed9e:	f7ff ff13 	bl	1ebc8 <ble_gap_adv_active>
   1eda2:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   1eda4:	4a0b      	ldr	r2, [pc, #44]	; (1edd4 <ble_gap_adv_stop_no_lock+0x40>)
   1eda6:	2101      	movs	r1, #1
   1eda8:	2004      	movs	r0, #4
   1edaa:	f7f2 fc45 	bl	11638 <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   1edae:	2000      	movs	r0, #0
   1edb0:	f7ff fadb 	bl	1e36a <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1edb4:	4605      	mov	r5, r0
   1edb6:	b128      	cbz	r0, 1edc4 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   1edb8:	4a05      	ldr	r2, [pc, #20]	; (1edd0 <ble_gap_adv_stop_no_lock+0x3c>)
   1edba:	6993      	ldr	r3, [r2, #24]
   1edbc:	3301      	adds	r3, #1
   1edbe:	6193      	str	r3, [r2, #24]
}
   1edc0:	4628      	mov	r0, r5
   1edc2:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   1edc4:	f7ff fb98 	bl	1e4f8 <ble_gap_slave_reset_state>
    if (!active) {
   1edc8:	2c00      	cmp	r4, #0
   1edca:	d1f9      	bne.n	1edc0 <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   1edcc:	2502      	movs	r5, #2
   1edce:	e7f3      	b.n	1edb8 <ble_gap_adv_stop_no_lock+0x24>
   1edd0:	20003048 	.word	0x20003048
   1edd4:	0002e0b8 	.word	0x0002e0b8

0001edd8 <ble_gap_disc_active>:
}
   1edd8:	2000      	movs	r0, #0
   1edda:	4770      	bx	lr

0001eddc <ble_gap_conn_active>:
}
   1eddc:	2000      	movs	r0, #0
   1edde:	4770      	bx	lr

0001ede0 <ble_gap_conn_cancel_no_lock>:
{
   1ede0:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   1ede2:	4a0f      	ldr	r2, [pc, #60]	; (1ee20 <ble_gap_conn_cancel_no_lock+0x40>)
   1ede4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1ede6:	3301      	adds	r3, #1
   1ede8:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   1edea:	f7ff fff7 	bl	1eddc <ble_gap_conn_active>
   1edee:	b928      	cbnz	r0, 1edfc <ble_gap_conn_cancel_no_lock+0x1c>
        rc = BLE_HS_EALREADY;
   1edf0:	2002      	movs	r0, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   1edf2:	4a0b      	ldr	r2, [pc, #44]	; (1ee20 <ble_gap_conn_cancel_no_lock+0x40>)
   1edf4:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1edf6:	3301      	adds	r3, #1
   1edf8:	6513      	str	r3, [r2, #80]	; 0x50
}
   1edfa:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   1edfc:	4a09      	ldr	r2, [pc, #36]	; (1ee24 <ble_gap_conn_cancel_no_lock+0x44>)
   1edfe:	2101      	movs	r1, #1
   1ee00:	2004      	movs	r0, #4
   1ee02:	f7f2 fc19 	bl	11638 <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   1ee06:	f7ff faa3 	bl	1e350 <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   1ee0a:	2800      	cmp	r0, #0
   1ee0c:	d1f1      	bne.n	1edf2 <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   1ee0e:	4a06      	ldr	r2, [pc, #24]	; (1ee28 <ble_gap_conn_cancel_no_lock+0x48>)
   1ee10:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
   1ee14:	f043 0308 	orr.w	r3, r3, #8
   1ee18:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
    if (rc != 0) {
   1ee1c:	e7ed      	b.n	1edfa <ble_gap_conn_cancel_no_lock+0x1a>
   1ee1e:	bf00      	nop
   1ee20:	20003048 	.word	0x20003048
   1ee24:	0002e0e4 	.word	0x0002e0e4
   1ee28:	20000548 	.word	0x20000548

0001ee2c <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   1ee2c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1ee30:	f013 0f02 	tst.w	r3, #2
   1ee34:	d120      	bne.n	1ee78 <ble_gap_terminate_with_conn+0x4c>
{
   1ee36:	b530      	push	{r4, r5, lr}
   1ee38:	b085      	sub	sp, #20
   1ee3a:	4604      	mov	r4, r0
   1ee3c:	460d      	mov	r5, r1
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   1ee3e:	9100      	str	r1, [sp, #0]
   1ee40:	8883      	ldrh	r3, [r0, #4]
   1ee42:	4a0e      	ldr	r2, [pc, #56]	; (1ee7c <ble_gap_terminate_with_conn+0x50>)
   1ee44:	2101      	movs	r1, #1
   1ee46:	2004      	movs	r0, #4
   1ee48:	f7f2 fbf6 	bl	11638 <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   1ee4c:	88a3      	ldrh	r3, [r4, #4]
   1ee4e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   1ee52:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   1ee56:	2300      	movs	r3, #0
   1ee58:	9300      	str	r3, [sp, #0]
   1ee5a:	2203      	movs	r2, #3
   1ee5c:	a903      	add	r1, sp, #12
   1ee5e:	f240 4006 	movw	r0, #1030	; 0x406
   1ee62:	f003 fdb9 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   1ee66:	b928      	cbnz	r0, 1ee74 <ble_gap_terminate_with_conn+0x48>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   1ee68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1ee6c:	f043 0302 	orr.w	r3, r3, #2
   1ee70:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1ee74:	b005      	add	sp, #20
   1ee76:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   1ee78:	2002      	movs	r0, #2
}
   1ee7a:	4770      	bx	lr
   1ee7c:	0002e110 	.word	0x0002e110

0001ee80 <ble_gap_terminate>:
{
   1ee80:	b538      	push	{r3, r4, r5, lr}
   1ee82:	4604      	mov	r4, r0
   1ee84:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   1ee86:	4a0d      	ldr	r2, [pc, #52]	; (1eebc <ble_gap_terminate+0x3c>)
   1ee88:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1ee8a:	3301      	adds	r3, #1
   1ee8c:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   1ee8e:	f002 fced 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1ee92:	4620      	mov	r0, r4
   1ee94:	f003 fb48 	bl	22528 <ble_hs_conn_find>
    if (conn == NULL) {
   1ee98:	b160      	cbz	r0, 1eeb4 <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   1ee9a:	4629      	mov	r1, r5
   1ee9c:	f7ff ffc6 	bl	1ee2c <ble_gap_terminate_with_conn>
   1eea0:	4604      	mov	r4, r0
    ble_hs_unlock();
   1eea2:	f002 fce7 	bl	21874 <ble_hs_unlock>
    if (rc != 0) {
   1eea6:	b11c      	cbz	r4, 1eeb0 <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   1eea8:	4a04      	ldr	r2, [pc, #16]	; (1eebc <ble_gap_terminate+0x3c>)
   1eeaa:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1eeac:	3301      	adds	r3, #1
   1eeae:	6493      	str	r3, [r2, #72]	; 0x48
}
   1eeb0:	4620      	mov	r0, r4
   1eeb2:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   1eeb4:	f002 fcde 	bl	21874 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   1eeb8:	2407      	movs	r4, #7
   1eeba:	e7f5      	b.n	1eea8 <ble_gap_terminate+0x28>
   1eebc:	20003048 	.word	0x20003048

0001eec0 <ble_gap_update_notify>:
{
   1eec0:	b530      	push	{r4, r5, lr}
   1eec2:	b08f      	sub	sp, #60	; 0x3c
   1eec4:	4604      	mov	r4, r0
   1eec6:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1eec8:	2234      	movs	r2, #52	; 0x34
   1eeca:	2100      	movs	r1, #0
   1eecc:	a801      	add	r0, sp, #4
   1eece:	f7ef fd98 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   1eed2:	2303      	movs	r3, #3
   1eed4:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   1eed8:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   1eedc:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1eede:	a801      	add	r0, sp, #4
   1eee0:	f7ff f980 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1eee4:	4621      	mov	r1, r4
   1eee6:	a801      	add	r0, sp, #4
   1eee8:	f7ff f9a6 	bl	1e238 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   1eeec:	2d0d      	cmp	r5, #13
   1eeee:	d001      	beq.n	1eef4 <ble_gap_update_notify+0x34>
}
   1eef0:	b00f      	add	sp, #60	; 0x3c
   1eef2:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1eef4:	2113      	movs	r1, #19
   1eef6:	4620      	mov	r0, r4
   1eef8:	f7ff ffc2 	bl	1ee80 <ble_gap_terminate>
}
   1eefc:	e7f8      	b.n	1eef0 <ble_gap_update_notify+0x30>
	...

0001ef00 <ble_gap_conn_broken>:
{
   1ef00:	b570      	push	{r4, r5, r6, lr}
   1ef02:	b090      	sub	sp, #64	; 0x40
   1ef04:	4604      	mov	r4, r0
   1ef06:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1ef08:	2234      	movs	r2, #52	; 0x34
   1ef0a:	2100      	movs	r1, #0
   1ef0c:	4668      	mov	r0, sp
   1ef0e:	f7ef fd78 	bl	ea02 <memset>
    snap.desc = &event.disconnect.conn;
   1ef12:	ab02      	add	r3, sp, #8
   1ef14:	930d      	str	r3, [sp, #52]	; 0x34
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   1ef16:	a90d      	add	r1, sp, #52	; 0x34
   1ef18:	4620      	mov	r0, r4
   1ef1a:	f7ff f9f6 	bl	1e30a <ble_gap_find_snapshot>
    if (rc != 0) {
   1ef1e:	b108      	cbz	r0, 1ef24 <ble_gap_conn_broken+0x24>
}
   1ef20:	b010      	add	sp, #64	; 0x40
   1ef22:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   1ef24:	f002 fca2 	bl	2186c <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1ef28:	4620      	mov	r0, r4
   1ef2a:	f7ff facd 	bl	1e4c8 <ble_gap_update_entry_remove>
   1ef2e:	4606      	mov	r6, r0
    ble_hs_unlock();
   1ef30:	f002 fca0 	bl	21874 <ble_hs_unlock>
    if (entry != NULL) {
   1ef34:	b136      	cbz	r6, 1ef44 <ble_gap_conn_broken+0x44>
        ble_gap_update_notify(conn_handle, reason);
   1ef36:	4629      	mov	r1, r5
   1ef38:	4620      	mov	r0, r4
   1ef3a:	f7ff ffc1 	bl	1eec0 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   1ef3e:	4630      	mov	r0, r6
   1ef40:	f7ff fb9a 	bl	1e678 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   1ef44:	4629      	mov	r1, r5
   1ef46:	4620      	mov	r0, r4
   1ef48:	f005 f92a 	bl	241a0 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
   1ef4c:	4620      	mov	r0, r4
   1ef4e:	f006 fe63 	bl	25c18 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
   1ef52:	4620      	mov	r0, r4
   1ef54:	f002 f92c 	bl	211b0 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   1ef58:	4620      	mov	r0, r4
   1ef5a:	f001 fb47 	bl	205ec <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   1ef5e:	4620      	mov	r0, r4
   1ef60:	f003 fc1e 	bl	227a0 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   1ef64:	4620      	mov	r0, r4
   1ef66:	f003 f9d9 	bl	2231c <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   1ef6a:	2301      	movs	r3, #1
   1ef6c:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   1ef70:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   1ef72:	4668      	mov	r0, sp
   1ef74:	f7ff f936 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   1ef78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ef7a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1ef7c:	4668      	mov	r0, sp
   1ef7e:	f7ff f85b 	bl	1e038 <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   1ef82:	4a02      	ldr	r2, [pc, #8]	; (1ef8c <ble_gap_conn_broken+0x8c>)
   1ef84:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1ef86:	3301      	adds	r3, #1
   1ef88:	6653      	str	r3, [r2, #100]	; 0x64
   1ef8a:	e7c9      	b.n	1ef20 <ble_gap_conn_broken+0x20>
   1ef8c:	20003048 	.word	0x20003048

0001ef90 <ble_gap_rx_disconn_complete>:
{
   1ef90:	b570      	push	{r4, r5, r6, lr}
   1ef92:	b08e      	sub	sp, #56	; 0x38
   1ef94:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   1ef96:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   1ef9a:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   1ef9c:	4a14      	ldr	r2, [pc, #80]	; (1eff0 <ble_gap_rx_disconn_complete+0x60>)
   1ef9e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1efa0:	3301      	adds	r3, #1
   1efa2:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   1efa4:	7803      	ldrb	r3, [r0, #0]
   1efa6:	b953      	cbnz	r3, 1efbe <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   1efa8:	78c1      	ldrb	r1, [r0, #3]
   1efaa:	b111      	cbz	r1, 1efb2 <ble_gap_rx_disconn_complete+0x22>
   1efac:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1efb0:	e000      	b.n	1efb4 <ble_gap_rx_disconn_complete+0x24>
   1efb2:	2100      	movs	r1, #0
   1efb4:	4630      	mov	r0, r6
   1efb6:	f7ff ffa3 	bl	1ef00 <ble_gap_conn_broken>
}
   1efba:	b00e      	add	sp, #56	; 0x38
   1efbc:	bd70      	pop	{r4, r5, r6, pc}
        memset(&event, 0, sizeof event);
   1efbe:	2234      	movs	r2, #52	; 0x34
   1efc0:	2100      	movs	r1, #0
   1efc2:	a801      	add	r0, sp, #4
   1efc4:	f7ef fd1d 	bl	ea02 <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   1efc8:	2306      	movs	r3, #6
   1efca:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   1efce:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1efd2:	7823      	ldrb	r3, [r4, #0]
   1efd4:	b153      	cbz	r3, 1efec <ble_gap_rx_disconn_complete+0x5c>
   1efd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1efda:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   1efdc:	a801      	add	r0, sp, #4
   1efde:	f7ff f901 	bl	1e1e4 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   1efe2:	4631      	mov	r1, r6
   1efe4:	a801      	add	r0, sp, #4
   1efe6:	f7ff f927 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1efea:	e7e6      	b.n	1efba <ble_gap_rx_disconn_complete+0x2a>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1efec:	2300      	movs	r3, #0
   1efee:	e7f4      	b.n	1efda <ble_gap_rx_disconn_complete+0x4a>
   1eff0:	20003048 	.word	0x20003048

0001eff4 <ble_gap_reset_state>:
{
   1eff4:	b510      	push	{r4, lr}
   1eff6:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
   1eff8:	f003 f9bb 	bl	22372 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1effc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f000:	4298      	cmp	r0, r3
   1f002:	d003      	beq.n	1f00c <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
   1f004:	4621      	mov	r1, r4
   1f006:	f7ff ff7b 	bl	1ef00 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   1f00a:	e7f5      	b.n	1eff8 <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
   1f00c:	2000      	movs	r0, #0
   1f00e:	f7ff f84d 	bl	1e0ac <ble_gap_adv_active_instance>
   1f012:	b918      	cbnz	r0, 1f01c <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
   1f014:	4620      	mov	r0, r4
   1f016:	f7ff faf9 	bl	1e60c <ble_gap_master_failed>
}
   1f01a:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
   1f01c:	2300      	movs	r3, #0
   1f01e:	461a      	mov	r2, r3
   1f020:	4621      	mov	r1, r4
   1f022:	4618      	mov	r0, r3
   1f024:	f7ff fa8e 	bl	1e544 <ble_gap_adv_finished>
   1f028:	e7f4      	b.n	1f014 <ble_gap_reset_state+0x20>
	...

0001f02c <ble_gap_rx_update_complete>:
{
   1f02c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f02e:	b091      	sub	sp, #68	; 0x44
   1f030:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   1f032:	4a2c      	ldr	r2, [pc, #176]	; (1f0e4 <ble_gap_rx_update_complete+0xb8>)
   1f034:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1f036:	3301      	adds	r3, #1
   1f038:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   1f03a:	2234      	movs	r2, #52	; 0x34
   1f03c:	2100      	movs	r1, #0
   1f03e:	a801      	add	r0, sp, #4
   1f040:	f7ef fcdf 	bl	ea02 <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1f044:	2300      	movs	r3, #0
   1f046:	930e      	str	r3, [sp, #56]	; 0x38
   1f048:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   1f04a:	f002 fc0f 	bl	2186c <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   1f04e:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   1f050:	4628      	mov	r0, r5
   1f052:	f003 fa69 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   1f056:	b120      	cbz	r0, 1f062 <ble_gap_rx_update_complete+0x36>
   1f058:	4606      	mov	r6, r0
        switch (ev->status) {
   1f05a:	7863      	ldrb	r3, [r4, #1]
   1f05c:	b193      	cbz	r3, 1f084 <ble_gap_rx_update_complete+0x58>
   1f05e:	2b1a      	cmp	r3, #26
   1f060:	d017      	beq.n	1f092 <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   1f062:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1f066:	b353      	cbz	r3, 1f0be <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   1f068:	f002 fc04 	bl	21874 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   1f06c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1f070:	bb5b      	cbnz	r3, 1f0ca <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1f072:	7861      	ldrb	r1, [r4, #1]
   1f074:	b399      	cbz	r1, 1f0de <ble_gap_rx_update_complete+0xb2>
   1f076:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   1f07a:	4628      	mov	r0, r5
   1f07c:	f7ff ff20 	bl	1eec0 <ble_gap_update_notify>
}
   1f080:	b011      	add	sp, #68	; 0x44
   1f082:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   1f084:	88a3      	ldrh	r3, [r4, #4]
   1f086:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   1f088:	88e3      	ldrh	r3, [r4, #6]
   1f08a:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   1f08c:	8923      	ldrh	r3, [r4, #8]
   1f08e:	8403      	strh	r3, [r0, #32]
            break;
   1f090:	e7e7      	b.n	1f062 <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   1f092:	2100      	movs	r1, #0
   1f094:	4628      	mov	r0, r5
   1f096:	f7ff f86f 	bl	1e178 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1f09a:	4607      	mov	r7, r0
   1f09c:	2800      	cmp	r0, #0
   1f09e:	d0e0      	beq.n	1f062 <ble_gap_rx_update_complete+0x36>
   1f0a0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1f0a4:	f013 0f01 	tst.w	r3, #1
   1f0a8:	d1db      	bne.n	1f062 <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   1f0aa:	a90e      	add	r1, sp, #56	; 0x38
   1f0ac:	3004      	adds	r0, #4
   1f0ae:	f7fe fff3 	bl	1e098 <ble_gap_update_to_l2cap>
    return os_time_get();
   1f0b2:	f7ef f983 	bl	e3bc <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   1f0b6:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1f0ba:	6138      	str	r0, [r7, #16]
   1f0bc:	e7d1      	b.n	1f062 <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   1f0be:	4628      	mov	r0, r5
   1f0c0:	f7ff fa02 	bl	1e4c8 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   1f0c4:	f7ff fad8 	bl	1e678 <ble_gap_update_entry_free>
   1f0c8:	e7ce      	b.n	1f068 <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1f0ca:	2300      	movs	r3, #0
   1f0cc:	4a06      	ldr	r2, [pc, #24]	; (1f0e8 <ble_gap_rx_update_complete+0xbc>)
   1f0ce:	a90e      	add	r1, sp, #56	; 0x38
   1f0d0:	4628      	mov	r0, r5
   1f0d2:	f004 fff9 	bl	240c8 <ble_l2cap_sig_update>
        if (rc == 0) {
   1f0d6:	4601      	mov	r1, r0
   1f0d8:	2800      	cmp	r0, #0
   1f0da:	d0d1      	beq.n	1f080 <ble_gap_rx_update_complete+0x54>
   1f0dc:	e7cd      	b.n	1f07a <ble_gap_rx_update_complete+0x4e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1f0de:	2100      	movs	r1, #0
   1f0e0:	e7cb      	b.n	1f07a <ble_gap_rx_update_complete+0x4e>
   1f0e2:	bf00      	nop
   1f0e4:	20003048 	.word	0x20003048
   1f0e8:	0001f0ed 	.word	0x0001f0ed

0001f0ec <ble_gap_update_l2cap_cb>:
{
   1f0ec:	b570      	push	{r4, r5, r6, lr}
   1f0ee:	4605      	mov	r5, r0
   1f0f0:	460e      	mov	r6, r1
    ble_hs_lock();
   1f0f2:	f002 fbbb 	bl	2186c <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1f0f6:	4628      	mov	r0, r5
   1f0f8:	f7ff f9e6 	bl	1e4c8 <ble_gap_update_entry_remove>
   1f0fc:	4604      	mov	r4, r0
    ble_hs_unlock();
   1f0fe:	f002 fbb9 	bl	21874 <ble_hs_unlock>
    if (entry != NULL) {
   1f102:	b11c      	cbz	r4, 1f10c <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   1f104:	4620      	mov	r0, r4
   1f106:	f7ff fab7 	bl	1e678 <ble_gap_update_entry_free>
        if (status != 0) {
   1f10a:	b906      	cbnz	r6, 1f10e <ble_gap_update_l2cap_cb+0x22>
}
   1f10c:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   1f10e:	4631      	mov	r1, r6
   1f110:	4628      	mov	r0, r5
   1f112:	f7ff fed5 	bl	1eec0 <ble_gap_update_notify>
}
   1f116:	e7f9      	b.n	1f10c <ble_gap_update_l2cap_cb+0x20>

0001f118 <ble_gap_update_failed>:
{
   1f118:	b570      	push	{r4, r5, r6, lr}
   1f11a:	4604      	mov	r4, r0
   1f11c:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   1f11e:	4a0a      	ldr	r2, [pc, #40]	; (1f148 <ble_gap_update_failed+0x30>)
   1f120:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1f122:	3301      	adds	r3, #1
   1f124:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   1f126:	f002 fba1 	bl	2186c <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1f12a:	4620      	mov	r0, r4
   1f12c:	f7ff f9cc 	bl	1e4c8 <ble_gap_update_entry_remove>
   1f130:	4606      	mov	r6, r0
    ble_hs_unlock();
   1f132:	f002 fb9f 	bl	21874 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   1f136:	4630      	mov	r0, r6
   1f138:	f7ff fa9e 	bl	1e678 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   1f13c:	4629      	mov	r1, r5
   1f13e:	4620      	mov	r0, r4
   1f140:	f7ff febe 	bl	1eec0 <ble_gap_update_notify>
}
   1f144:	bd70      	pop	{r4, r5, r6, pc}
   1f146:	bf00      	nop
   1f148:	20003048 	.word	0x20003048

0001f14c <ble_gap_rx_param_req>:
{
   1f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f150:	b094      	sub	sp, #80	; 0x50
   1f152:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1f154:	f04f 0834 	mov.w	r8, #52	; 0x34
   1f158:	4642      	mov	r2, r8
   1f15a:	2100      	movs	r1, #0
   1f15c:	a801      	add	r0, sp, #4
   1f15e:	f7ef fc50 	bl	ea02 <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   1f162:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1f166:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   1f16a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   1f16e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   1f172:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1f176:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   1f17a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1f17e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   1f182:	2300      	movs	r3, #0
   1f184:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   1f188:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   1f18c:	ae0e      	add	r6, sp, #56	; 0x38
   1f18e:	ad11      	add	r5, sp, #68	; 0x44
   1f190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1f194:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   1f198:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   1f19c:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   1f19e:	4642      	mov	r2, r8
   1f1a0:	4619      	mov	r1, r3
   1f1a2:	a801      	add	r0, sp, #4
   1f1a4:	f7ef fc2d 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   1f1a8:	2304      	movs	r3, #4
   1f1aa:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1f1ae:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   1f1b2:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   1f1b4:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1f1b6:	4621      	mov	r1, r4
   1f1b8:	eb0d 0003 	add.w	r0, sp, r3
   1f1bc:	f7ff f83c 	bl	1e238 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   1f1c0:	b948      	cbnz	r0, 1f1d6 <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   1f1c2:	a90e      	add	r1, sp, #56	; 0x38
   1f1c4:	4620      	mov	r0, r4
   1f1c6:	f7ff f92c 	bl	1e422 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   1f1ca:	4601      	mov	r1, r0
   1f1cc:	b138      	cbz	r0, 1f1de <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   1f1ce:	4620      	mov	r0, r4
   1f1d0:	f7ff ffa2 	bl	1f118 <ble_gap_update_failed>
   1f1d4:	e003      	b.n	1f1de <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   1f1d6:	b2c1      	uxtb	r1, r0
   1f1d8:	4620      	mov	r0, r4
   1f1da:	f7ff f943 	bl	1e464 <ble_gap_tx_param_neg_reply>
}
   1f1de:	b014      	add	sp, #80	; 0x50
   1f1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f1e4 <ble_gap_update_params>:
{
   1f1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1e8:	b082      	sub	sp, #8
   1f1ea:	4607      	mov	r7, r0
   1f1ec:	460c      	mov	r4, r1
    if (!ble_gap_validate_conn_params(params)) {
   1f1ee:	4608      	mov	r0, r1
   1f1f0:	f7fe ffd4 	bl	1e19c <ble_gap_validate_conn_params>
   1f1f4:	2800      	cmp	r0, #0
   1f1f6:	d07e      	beq.n	1f2f6 <ble_gap_update_params+0x112>
    STATS_INC(ble_gap_stats, update);
   1f1f8:	4a40      	ldr	r2, [pc, #256]	; (1f2fc <ble_gap_update_params+0x118>)
   1f1fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1f1fc:	3301      	adds	r3, #1
   1f1fe:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1f200:	2300      	movs	r3, #0
   1f202:	9300      	str	r3, [sp, #0]
   1f204:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   1f206:	f002 fb31 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1f20a:	4638      	mov	r0, r7
   1f20c:	f003 f98c 	bl	22528 <ble_hs_conn_find>
    if (conn == NULL) {
   1f210:	4606      	mov	r6, r0
   1f212:	2800      	cmp	r0, #0
   1f214:	d04d      	beq.n	1f2b2 <ble_gap_update_params+0xce>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   1f216:	2100      	movs	r1, #0
   1f218:	4638      	mov	r0, r7
   1f21a:	f7fe ffad 	bl	1e178 <ble_gap_update_entry_find>
    if (dup != NULL) {
   1f21e:	b1c0      	cbz	r0, 1f252 <ble_gap_update_params+0x6e>
        rc = BLE_HS_EALREADY;
   1f220:	2502      	movs	r5, #2
    l2cap_update = 0;
   1f222:	f04f 0800 	mov.w	r8, #0
    entry = NULL;
   1f226:	4646      	mov	r6, r8
    ble_hs_unlock();
   1f228:	f002 fb24 	bl	21874 <ble_hs_unlock>
    if (!l2cap_update) {
   1f22c:	f1b8 0f00 	cmp.w	r8, #0
   1f230:	d14d      	bne.n	1f2ce <ble_gap_update_params+0xea>
        ble_hs_timer_resched();
   1f232:	f002 fc0b 	bl	21a4c <ble_hs_timer_resched>
    ble_hs_lock();
   1f236:	f002 fb19 	bl	2186c <ble_hs_lock>
    if (rc == 0) {
   1f23a:	2d00      	cmp	r5, #0
   1f23c:	d153      	bne.n	1f2e6 <ble_gap_update_params+0x102>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   1f23e:	4b30      	ldr	r3, [pc, #192]	; (1f300 <ble_gap_update_params+0x11c>)
   1f240:	681a      	ldr	r2, [r3, #0]
   1f242:	6032      	str	r2, [r6, #0]
   1f244:	601e      	str	r6, [r3, #0]
    ble_hs_unlock();
   1f246:	f002 fb15 	bl	21874 <ble_hs_unlock>
}
   1f24a:	4628      	mov	r0, r5
   1f24c:	b002      	add	sp, #8
   1f24e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry = ble_gap_update_entry_alloc();
   1f252:	f7ff fb6b 	bl	1e92c <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   1f256:	4680      	mov	r8, r0
   1f258:	b378      	cbz	r0, 1f2ba <ble_gap_update_params+0xd6>
    entry->conn_handle = conn_handle;
   1f25a:	8287      	strh	r7, [r0, #20]
    entry->params = *params;
   1f25c:	1d03      	adds	r3, r0, #4
   1f25e:	6820      	ldr	r0, [r4, #0]
   1f260:	6861      	ldr	r1, [r4, #4]
   1f262:	68a2      	ldr	r2, [r4, #8]
   1f264:	c307      	stmia	r3!, {r0, r1, r2}
   1f266:	f7ef f8a9 	bl	e3bc <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   1f26a:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1f26e:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   1f272:	4a24      	ldr	r2, [pc, #144]	; (1f304 <ble_gap_update_params+0x120>)
   1f274:	2101      	movs	r1, #1
   1f276:	2004      	movs	r0, #4
   1f278:	f7f2 f9de 	bl	11638 <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   1f27c:	4621      	mov	r1, r4
   1f27e:	4638      	mov	r0, r7
   1f280:	f7ff fad4 	bl	1e82c <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   1f284:	4a20      	ldr	r2, [pc, #128]	; (1f308 <ble_gap_update_params+0x124>)
   1f286:	2101      	movs	r1, #1
   1f288:	2004      	movs	r0, #4
   1f28a:	f7f2 f9d5 	bl	11638 <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1f28e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1f290:	f013 0f02 	tst.w	r3, #2
   1f294:	d104      	bne.n	1f2a0 <ble_gap_update_params+0xbc>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1f296:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1f29a:	f013 0f01 	tst.w	r3, #1
   1f29e:	d011      	beq.n	1f2c4 <ble_gap_update_params+0xe0>
        rc = ble_gap_update_tx(conn_handle, params);
   1f2a0:	4621      	mov	r1, r4
   1f2a2:	4638      	mov	r0, r7
   1f2a4:	f7ff f8ef 	bl	1e486 <ble_gap_update_tx>
   1f2a8:	4605      	mov	r5, r0
    entry = ble_gap_update_entry_alloc();
   1f2aa:	4646      	mov	r6, r8
    l2cap_update = 0;
   1f2ac:	f04f 0800 	mov.w	r8, #0
   1f2b0:	e7ba      	b.n	1f228 <ble_gap_update_params+0x44>
        rc = BLE_HS_ENOTCONN;
   1f2b2:	2507      	movs	r5, #7
    l2cap_update = 0;
   1f2b4:	f04f 0800 	mov.w	r8, #0
   1f2b8:	e7b6      	b.n	1f228 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   1f2ba:	4606      	mov	r6, r0
        rc = BLE_HS_ENOMEM;
   1f2bc:	2506      	movs	r5, #6
    l2cap_update = 0;
   1f2be:	f04f 0800 	mov.w	r8, #0
   1f2c2:	e7b1      	b.n	1f228 <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   1f2c4:	4646      	mov	r6, r8
        rc = 0;
   1f2c6:	2500      	movs	r5, #0
        l2cap_update = 1;
   1f2c8:	f04f 0801 	mov.w	r8, #1
   1f2cc:	e7ac      	b.n	1f228 <ble_gap_update_params+0x44>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   1f2ce:	4669      	mov	r1, sp
   1f2d0:	4620      	mov	r0, r4
   1f2d2:	f7fe fee1 	bl	1e098 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1f2d6:	2300      	movs	r3, #0
   1f2d8:	4a0c      	ldr	r2, [pc, #48]	; (1f30c <ble_gap_update_params+0x128>)
   1f2da:	4669      	mov	r1, sp
   1f2dc:	4638      	mov	r0, r7
   1f2de:	f004 fef3 	bl	240c8 <ble_l2cap_sig_update>
   1f2e2:	4605      	mov	r5, r0
   1f2e4:	e7a7      	b.n	1f236 <ble_gap_update_params+0x52>
        ble_gap_update_entry_free(entry);
   1f2e6:	4630      	mov	r0, r6
   1f2e8:	f7ff f9c6 	bl	1e678 <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   1f2ec:	4a03      	ldr	r2, [pc, #12]	; (1f2fc <ble_gap_update_params+0x118>)
   1f2ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1f2f0:	3301      	adds	r3, #1
   1f2f2:	6593      	str	r3, [r2, #88]	; 0x58
   1f2f4:	e7a7      	b.n	1f246 <ble_gap_update_params+0x62>
        return BLE_HS_EINVAL;
   1f2f6:	2503      	movs	r5, #3
   1f2f8:	e7a7      	b.n	1f24a <ble_gap_update_params+0x66>
   1f2fa:	bf00      	nop
   1f2fc:	20003048 	.word	0x20003048
   1f300:	200030d0 	.word	0x200030d0
   1f304:	0002e160 	.word	0x0002e160
   1f308:	0002e438 	.word	0x0002e438
   1f30c:	0001f0ed 	.word	0x0001f0ed

0001f310 <ble_gap_unpair>:
{
   1f310:	b510      	push	{r4, lr}
   1f312:	b082      	sub	sp, #8
   1f314:	4604      	mov	r4, r0
    if (ble_addr_cmp(peer_addr, BLE_ADDR_ANY) == 0) {
   1f316:	2300      	movs	r3, #0
   1f318:	9300      	str	r3, [sp, #0]
   1f31a:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   1f31e:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   1f320:	b928      	cbnz	r0, 1f32e <ble_gap_unpair+0x1e>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   1f322:	2206      	movs	r2, #6
   1f324:	f10d 0101 	add.w	r1, sp, #1
   1f328:	1c60      	adds	r0, r4, #1
   1f32a:	f7ef fb21 	bl	e970 <memcmp>
   1f32e:	b1a0      	cbz	r0, 1f35a <ble_gap_unpair+0x4a>
    ble_hs_lock();
   1f330:	f002 fa9c 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find_by_addr(peer_addr);
   1f334:	4620      	mov	r0, r4
   1f336:	f003 f99b 	bl	22670 <ble_hs_conn_find_by_addr>
    if (conn != NULL) {
   1f33a:	b110      	cbz	r0, 1f342 <ble_gap_unpair+0x32>
        ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   1f33c:	2113      	movs	r1, #19
   1f33e:	f7ff fd75 	bl	1ee2c <ble_gap_terminate_with_conn>
    ble_hs_unlock();
   1f342:	f002 fa97 	bl	21874 <ble_hs_unlock>
                             peer_addr->val);
   1f346:	4621      	mov	r1, r4
    ble_hs_pvcy_remove_entry(peer_addr->type,
   1f348:	f811 0b01 	ldrb.w	r0, [r1], #1
   1f34c:	f004 f969 	bl	23622 <ble_hs_pvcy_remove_entry>
    return ble_store_util_delete_peer(peer_addr);
   1f350:	4620      	mov	r0, r4
   1f352:	f006 ff92 	bl	2627a <ble_store_util_delete_peer>
}
   1f356:	b002      	add	sp, #8
   1f358:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   1f35a:	2003      	movs	r0, #3
   1f35c:	e7fb      	b.n	1f356 <ble_gap_unpair+0x46>

0001f35e <ble_gap_unpair_oldest_peer>:
{
   1f35e:	b500      	push	{lr}
   1f360:	b085      	sub	sp, #20
    rc = ble_store_util_bonded_peers(
   1f362:	2201      	movs	r2, #1
   1f364:	a901      	add	r1, sp, #4
   1f366:	a802      	add	r0, sp, #8
   1f368:	f006 ff60 	bl	2622c <ble_store_util_bonded_peers>
    if (rc != 0) {
   1f36c:	b920      	cbnz	r0, 1f378 <ble_gap_unpair_oldest_peer+0x1a>
    if (num_peers == 0) {
   1f36e:	9b01      	ldr	r3, [sp, #4]
   1f370:	b12b      	cbz	r3, 1f37e <ble_gap_unpair_oldest_peer+0x20>
    rc = ble_gap_unpair(&oldest_peer_id_addr);
   1f372:	a802      	add	r0, sp, #8
   1f374:	f7ff ffcc 	bl	1f310 <ble_gap_unpair>
}
   1f378:	b005      	add	sp, #20
   1f37a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ENOENT;
   1f37e:	2005      	movs	r0, #5
   1f380:	e7fa      	b.n	1f378 <ble_gap_unpair_oldest_peer+0x1a>

0001f382 <ble_gap_unpair_oldest_except>:
{
   1f382:	b570      	push	{r4, r5, r6, lr}
   1f384:	b088      	sub	sp, #32
   1f386:	4605      	mov	r5, r0
    rc = ble_store_util_bonded_peers(
   1f388:	2203      	movs	r2, #3
   1f38a:	a901      	add	r1, sp, #4
   1f38c:	a802      	add	r0, sp, #8
   1f38e:	f006 ff4d 	bl	2622c <ble_store_util_bonded_peers>
    if (rc != 0) {
   1f392:	4604      	mov	r4, r0
   1f394:	bb18      	cbnz	r0, 1f3de <ble_gap_unpair_oldest_except+0x5c>
    if (num_peers == 0) {
   1f396:	9e01      	ldr	r6, [sp, #4]
   1f398:	b966      	cbnz	r6, 1f3b4 <ble_gap_unpair_oldest_except+0x32>
        return BLE_HS_ENOENT;
   1f39a:	2405      	movs	r4, #5
   1f39c:	e01f      	b.n	1f3de <ble_gap_unpair_oldest_except+0x5c>
   1f39e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1f3a2:	ab02      	add	r3, sp, #8
   1f3a4:	4419      	add	r1, r3
   1f3a6:	2206      	movs	r2, #6
   1f3a8:	3101      	adds	r1, #1
   1f3aa:	1c68      	adds	r0, r5, #1
   1f3ac:	f7ef fae0 	bl	e970 <memcmp>
        if (ble_addr_cmp(peer_addr, &peer_id_addrs[i]) != 0) {
   1f3b0:	b960      	cbnz	r0, 1f3cc <ble_gap_unpair_oldest_except+0x4a>
    for (i = 0; i < num_peers; i++) {
   1f3b2:	3401      	adds	r4, #1
   1f3b4:	42a6      	cmp	r6, r4
   1f3b6:	dd09      	ble.n	1f3cc <ble_gap_unpair_oldest_except+0x4a>
    type_diff = a->type - b->type;
   1f3b8:	782b      	ldrb	r3, [r5, #0]
   1f3ba:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1f3be:	a908      	add	r1, sp, #32
   1f3c0:	440a      	add	r2, r1
   1f3c2:	f812 0c18 	ldrb.w	r0, [r2, #-24]
    if (type_diff != 0) {
   1f3c6:	1a18      	subs	r0, r3, r0
   1f3c8:	d0e9      	beq.n	1f39e <ble_gap_unpair_oldest_except+0x1c>
   1f3ca:	e7f1      	b.n	1f3b0 <ble_gap_unpair_oldest_except+0x2e>
    if (i >= num_peers) {
   1f3cc:	42a6      	cmp	r6, r4
   1f3ce:	dd09      	ble.n	1f3e4 <ble_gap_unpair_oldest_except+0x62>
    return ble_gap_unpair(&peer_id_addrs[i]);
   1f3d0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1f3d4:	ab02      	add	r3, sp, #8
   1f3d6:	1918      	adds	r0, r3, r4
   1f3d8:	f7ff ff9a 	bl	1f310 <ble_gap_unpair>
   1f3dc:	4604      	mov	r4, r0
}
   1f3de:	4620      	mov	r0, r4
   1f3e0:	b008      	add	sp, #32
   1f3e2:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
   1f3e4:	2406      	movs	r4, #6
   1f3e6:	e7fa      	b.n	1f3de <ble_gap_unpair_oldest_except+0x5c>

0001f3e8 <ble_gap_passkey_event>:
{
   1f3e8:	b530      	push	{r4, r5, lr}
   1f3ea:	b08f      	sub	sp, #60	; 0x3c
   1f3ec:	4604      	mov	r4, r0
   1f3ee:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1f3f0:	2234      	movs	r2, #52	; 0x34
   1f3f2:	2100      	movs	r1, #0
   1f3f4:	a801      	add	r0, sp, #4
   1f3f6:	f7ef fb04 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
   1f3fa:	230b      	movs	r3, #11
   1f3fc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
   1f400:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
   1f404:	ab02      	add	r3, sp, #8
   1f406:	e895 0003 	ldmia.w	r5, {r0, r1}
   1f40a:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f40e:	4621      	mov	r1, r4
   1f410:	a801      	add	r0, sp, #4
   1f412:	f7fe ff11 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1f416:	b00f      	add	sp, #60	; 0x3c
   1f418:	bd30      	pop	{r4, r5, pc}

0001f41a <ble_gap_enc_event>:
{
   1f41a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f41c:	b08f      	sub	sp, #60	; 0x3c
   1f41e:	4604      	mov	r4, r0
   1f420:	460d      	mov	r5, r1
   1f422:	4616      	mov	r6, r2
   1f424:	461f      	mov	r7, r3
    memset(&event, 0, sizeof event);
   1f426:	2234      	movs	r2, #52	; 0x34
   1f428:	2100      	movs	r1, #0
   1f42a:	a801      	add	r0, sp, #4
   1f42c:	f7ef fae9 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
   1f430:	230a      	movs	r3, #10
   1f432:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
   1f436:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
   1f43a:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1f43c:	a801      	add	r0, sp, #4
   1f43e:	f7fe fed1 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f442:	4621      	mov	r1, r4
   1f444:	a801      	add	r0, sp, #4
   1f446:	f7fe fef7 	bl	1e238 <ble_gap_call_conn_event_cb>
    if (status != 0) {
   1f44a:	b90d      	cbnz	r5, 1f450 <ble_gap_enc_event+0x36>
    if (security_restored) {
   1f44c:	b916      	cbnz	r6, 1f454 <ble_gap_enc_event+0x3a>
    if (bonded) {
   1f44e:	b92f      	cbnz	r7, 1f45c <ble_gap_enc_event+0x42>
}
   1f450:	b00f      	add	sp, #60	; 0x3c
   1f452:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_gatts_bonding_restored(conn_handle);
   1f454:	4620      	mov	r0, r4
   1f456:	f002 f899 	bl	2158c <ble_gatts_bonding_restored>
        return;
   1f45a:	e7f9      	b.n	1f450 <ble_gap_enc_event+0x36>
        ble_gatts_bonding_established(conn_handle);
   1f45c:	4620      	mov	r0, r4
   1f45e:	f002 f855 	bl	2150c <ble_gatts_bonding_established>
   1f462:	e7f5      	b.n	1f450 <ble_gap_enc_event+0x36>

0001f464 <ble_gap_identity_event>:
{
   1f464:	b510      	push	{r4, lr}
   1f466:	b08e      	sub	sp, #56	; 0x38
   1f468:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1f46a:	2234      	movs	r2, #52	; 0x34
   1f46c:	2100      	movs	r1, #0
   1f46e:	a801      	add	r0, sp, #4
   1f470:	f7ef fac7 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
   1f474:	2310      	movs	r3, #16
   1f476:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
   1f47a:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f47e:	4621      	mov	r1, r4
   1f480:	a801      	add	r0, sp, #4
   1f482:	f7fe fed9 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1f486:	b00e      	add	sp, #56	; 0x38
   1f488:	bd10      	pop	{r4, pc}

0001f48a <ble_gap_repeat_pairing_event>:
{
   1f48a:	b510      	push	{r4, lr}
   1f48c:	b08e      	sub	sp, #56	; 0x38
   1f48e:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1f490:	2234      	movs	r2, #52	; 0x34
   1f492:	2100      	movs	r1, #0
   1f494:	a801      	add	r0, sp, #4
   1f496:	f7ef fab4 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
   1f49a:	2311      	movs	r3, #17
   1f49c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
   1f4a0:	6820      	ldr	r0, [r4, #0]
   1f4a2:	9002      	str	r0, [sp, #8]
   1f4a4:	88a3      	ldrh	r3, [r4, #4]
   1f4a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
   1f4aa:	8821      	ldrh	r1, [r4, #0]
   1f4ac:	a801      	add	r0, sp, #4
   1f4ae:	f7fe fec3 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1f4b2:	b00e      	add	sp, #56	; 0x38
   1f4b4:	bd10      	pop	{r4, pc}

0001f4b6 <ble_gap_notify_rx_event>:
{
   1f4b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4b8:	b08f      	sub	sp, #60	; 0x3c
   1f4ba:	4604      	mov	r4, r0
   1f4bc:	460f      	mov	r7, r1
   1f4be:	4616      	mov	r6, r2
   1f4c0:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1f4c2:	2234      	movs	r2, #52	; 0x34
   1f4c4:	2100      	movs	r1, #0
   1f4c6:	a801      	add	r0, sp, #4
   1f4c8:	f7ef fa9b 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   1f4cc:	230c      	movs	r3, #12
   1f4ce:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   1f4d2:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   1f4d6:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   1f4da:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   1f4dc:	f04f 0300 	mov.w	r3, #0
   1f4e0:	f365 0300 	bfi	r3, r5, #0, #1
   1f4e4:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1f4e8:	a801      	add	r0, sp, #4
   1f4ea:	f7fe fe7b 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f4ee:	4621      	mov	r1, r4
   1f4f0:	a801      	add	r0, sp, #4
   1f4f2:	f7fe fea1 	bl	1e238 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   1f4f6:	9802      	ldr	r0, [sp, #8]
   1f4f8:	f7ed ffbc 	bl	d474 <os_mbuf_free_chain>
}
   1f4fc:	b00f      	add	sp, #60	; 0x3c
   1f4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f500 <ble_gap_notify_tx_event>:
{
   1f500:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f502:	b08f      	sub	sp, #60	; 0x3c
   1f504:	4607      	mov	r7, r0
   1f506:	460c      	mov	r4, r1
   1f508:	4616      	mov	r6, r2
   1f50a:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1f50c:	2234      	movs	r2, #52	; 0x34
   1f50e:	2100      	movs	r1, #0
   1f510:	a801      	add	r0, sp, #4
   1f512:	f7ef fa76 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   1f516:	230d      	movs	r3, #13
   1f518:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   1f51c:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   1f520:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   1f522:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   1f526:	f04f 0300 	mov.w	r3, #0
   1f52a:	f365 0300 	bfi	r3, r5, #0, #1
   1f52e:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1f532:	a801      	add	r0, sp, #4
   1f534:	f7fe fe56 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f538:	4621      	mov	r1, r4
   1f53a:	a801      	add	r0, sp, #4
   1f53c:	f7fe fe7c 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1f540:	b00f      	add	sp, #60	; 0x3c
   1f542:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f544 <ble_gap_subscribe_event>:
{
   1f544:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f546:	b08f      	sub	sp, #60	; 0x3c
   1f548:	4605      	mov	r5, r0
   1f54a:	460f      	mov	r7, r1
   1f54c:	4616      	mov	r6, r2
   1f54e:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   1f550:	2234      	movs	r2, #52	; 0x34
   1f552:	2100      	movs	r1, #0
   1f554:	a801      	add	r0, sp, #4
   1f556:	f7ef fa54 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   1f55a:	230e      	movs	r3, #14
   1f55c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   1f560:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   1f564:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   1f568:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   1f56c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   1f570:	3a00      	subs	r2, #0
   1f572:	bf18      	it	ne
   1f574:	2201      	movne	r2, #1
   1f576:	1e23      	subs	r3, r4, #0
   1f578:	bf18      	it	ne
   1f57a:	2301      	movne	r3, #1
   1f57c:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   1f580:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   1f584:	3a00      	subs	r2, #0
   1f586:	bf18      	it	ne
   1f588:	2201      	movne	r2, #1
   1f58a:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   1f58e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1f592:	3a00      	subs	r2, #0
   1f594:	bf18      	it	ne
   1f596:	2201      	movne	r2, #1
   1f598:	f362 03c3 	bfi	r3, r2, #3, #1
   1f59c:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   1f5a0:	a801      	add	r0, sp, #4
   1f5a2:	f7fe fe1f 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f5a6:	4629      	mov	r1, r5
   1f5a8:	a801      	add	r0, sp, #4
   1f5aa:	f7fe fe45 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1f5ae:	b00f      	add	sp, #60	; 0x3c
   1f5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f5b2 <ble_gap_mtu_event>:
{
   1f5b2:	b570      	push	{r4, r5, r6, lr}
   1f5b4:	b08e      	sub	sp, #56	; 0x38
   1f5b6:	4604      	mov	r4, r0
   1f5b8:	460e      	mov	r6, r1
   1f5ba:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   1f5bc:	2234      	movs	r2, #52	; 0x34
   1f5be:	2100      	movs	r1, #0
   1f5c0:	a801      	add	r0, sp, #4
   1f5c2:	f7ef fa1e 	bl	ea02 <memset>
    event.type = BLE_GAP_EVENT_MTU;
   1f5c6:	230f      	movs	r3, #15
   1f5c8:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   1f5cc:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   1f5d0:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   1f5d4:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   1f5d8:	a801      	add	r0, sp, #4
   1f5da:	f7fe fe03 	bl	1e1e4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1f5de:	4621      	mov	r1, r4
   1f5e0:	a801      	add	r0, sp, #4
   1f5e2:	f7fe fe29 	bl	1e238 <ble_gap_call_conn_event_cb>
}
   1f5e6:	b00e      	add	sp, #56	; 0x38
   1f5e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0001f5ec <ble_gap_preempt_no_lock>:
{
   1f5ec:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   1f5ee:	f7ff fbd1 	bl	1ed94 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   1f5f2:	b920      	cbnz	r0, 1f5fe <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   1f5f4:	4a06      	ldr	r2, [pc, #24]	; (1f610 <ble_gap_preempt_no_lock+0x24>)
   1f5f6:	7853      	ldrb	r3, [r2, #1]
   1f5f8:	f043 0304 	orr.w	r3, r3, #4
   1f5fc:	7053      	strb	r3, [r2, #1]
    rc = ble_gap_conn_cancel_no_lock();
   1f5fe:	f7ff fbef 	bl	1ede0 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   1f602:	b918      	cbnz	r0, 1f60c <ble_gap_preempt_no_lock+0x20>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   1f604:	4b02      	ldr	r3, [pc, #8]	; (1f610 <ble_gap_preempt_no_lock+0x24>)
   1f606:	2202      	movs	r2, #2
   1f608:	f883 2020 	strb.w	r2, [r3, #32]
}
   1f60c:	bd08      	pop	{r3, pc}
   1f60e:	bf00      	nop
   1f610:	20000548 	.word	0x20000548

0001f614 <ble_gap_preempt>:
{
   1f614:	b508      	push	{r3, lr}
    ble_hs_lock();
   1f616:	f002 f929 	bl	2186c <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   1f61a:	f7fe fd23 	bl	1e064 <ble_gap_is_preempted>
   1f61e:	b110      	cbz	r0, 1f626 <ble_gap_preempt+0x12>
    ble_hs_unlock();
   1f620:	f002 f928 	bl	21874 <ble_hs_unlock>
}
   1f624:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   1f626:	f7ff ffe1 	bl	1f5ec <ble_gap_preempt_no_lock>
   1f62a:	e7f9      	b.n	1f620 <ble_gap_preempt+0xc>

0001f62c <ble_gap_preempt_done>:
{
   1f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f62e:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   1f630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f634:	482c      	ldr	r0, [pc, #176]	; (1f6e8 <ble_gap_preempt_done+0xbc>)
   1f636:	f7ef f8bf 	bl	e7b8 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   1f63a:	4b2c      	ldr	r3, [pc, #176]	; (1f6ec <ble_gap_preempt_done+0xc0>)
   1f63c:	2400      	movs	r4, #0
   1f63e:	601c      	str	r4, [r3, #0]
   1f640:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   1f642:	f002 f913 	bl	2186c <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f646:	4623      	mov	r3, r4
   1f648:	2b00      	cmp	r3, #0
   1f64a:	dd15      	ble.n	1f678 <ble_gap_preempt_done+0x4c>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   1f64c:	4b28      	ldr	r3, [pc, #160]	; (1f6f0 <ble_gap_preempt_done+0xc4>)
   1f64e:	f893 3020 	ldrb.w	r3, [r3, #32]
   1f652:	2b01      	cmp	r3, #1
   1f654:	d028      	beq.n	1f6a8 <ble_gap_preempt_done+0x7c>
    disc_preempted = 0;
   1f656:	2700      	movs	r7, #0
    ble_hs_unlock();
   1f658:	f002 f90c 	bl	21874 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1f65c:	2309      	movs	r3, #9
   1f65e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   1f662:	231d      	movs	r3, #29
   1f664:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f666:	2400      	movs	r4, #0
   1f668:	2c00      	cmp	r4, #0
   1f66a:	dd25      	ble.n	1f6b8 <ble_gap_preempt_done+0x8c>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   1f66c:	481e      	ldr	r0, [pc, #120]	; (1f6e8 <ble_gap_preempt_done+0xbc>)
   1f66e:	f7ef f843 	bl	e6f8 <os_mutex_release>
    if (disc_preempted) {
   1f672:	bb6f      	cbnz	r7, 1f6d0 <ble_gap_preempt_done+0xa4>
}
   1f674:	b00f      	add	sp, #60	; 0x3c
   1f676:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   1f678:	4a1d      	ldr	r2, [pc, #116]	; (1f6f0 <ble_gap_preempt_done+0xc4>)
   1f67a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f67e:	7852      	ldrb	r2, [r2, #1]
   1f680:	f012 0f04 	tst.w	r2, #4
   1f684:	d00e      	beq.n	1f6a4 <ble_gap_preempt_done+0x78>
            ble_gap_slave[i].preempted = 0;
   1f686:	4a1a      	ldr	r2, [pc, #104]	; (1f6f0 <ble_gap_preempt_done+0xc4>)
   1f688:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1f68c:	7851      	ldrb	r1, [r2, #1]
   1f68e:	f36f 0182 	bfc	r1, #2, #1
   1f692:	7051      	strb	r1, [r2, #1]
            slaves[i].cb = ble_gap_slave[i].cb;
   1f694:	6890      	ldr	r0, [r2, #8]
   1f696:	4915      	ldr	r1, [pc, #84]	; (1f6ec <ble_gap_preempt_done+0xc0>)
   1f698:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   1f69c:	68d2      	ldr	r2, [r2, #12]
   1f69e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1f6a2:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f6a4:	3301      	adds	r3, #1
   1f6a6:	e7cf      	b.n	1f648 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1f6a8:	4b11      	ldr	r3, [pc, #68]	; (1f6f0 <ble_gap_preempt_done+0xc4>)
   1f6aa:	2200      	movs	r2, #0
   1f6ac:	f883 2020 	strb.w	r2, [r3, #32]
        master_cb = ble_gap_master.cb;
   1f6b0:	699d      	ldr	r5, [r3, #24]
        master_arg = ble_gap_master.cb_arg;
   1f6b2:	69de      	ldr	r6, [r3, #28]
        disc_preempted = 1;
   1f6b4:	2701      	movs	r7, #1
   1f6b6:	e7cf      	b.n	1f658 <ble_gap_preempt_done+0x2c>
        if (slaves[i].cb) {
   1f6b8:	4b0c      	ldr	r3, [pc, #48]	; (1f6ec <ble_gap_preempt_done+0xc0>)
   1f6ba:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1f6be:	b129      	cbz	r1, 1f6cc <ble_gap_preempt_done+0xa0>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   1f6c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1f6c4:	685a      	ldr	r2, [r3, #4]
   1f6c6:	a801      	add	r0, sp, #4
   1f6c8:	f7fe fcb6 	bl	1e038 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1f6cc:	3401      	adds	r4, #1
   1f6ce:	e7cb      	b.n	1f668 <ble_gap_preempt_done+0x3c>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   1f6d0:	2308      	movs	r3, #8
   1f6d2:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   1f6d6:	231d      	movs	r3, #29
   1f6d8:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   1f6da:	4632      	mov	r2, r6
   1f6dc:	4629      	mov	r1, r5
   1f6de:	a801      	add	r0, sp, #4
   1f6e0:	f7fe fcaa 	bl	1e038 <ble_gap_call_event_cb>
}
   1f6e4:	e7c6      	b.n	1f674 <ble_gap_preempt_done+0x48>
   1f6e6:	bf00      	nop
   1f6e8:	20003108 	.word	0x20003108
   1f6ec:	20003114 	.word	0x20003114
   1f6f0:	20000548 	.word	0x20000548

0001f6f4 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1f6f4:	4b0c      	ldr	r3, [pc, #48]	; (1f728 <ble_gap_event_listener_unregister+0x34>)
   1f6f6:	681a      	ldr	r2, [r3, #0]
   1f6f8:	4613      	mov	r3, r2
   1f6fa:	b11b      	cbz	r3, 1f704 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   1f6fc:	4283      	cmp	r3, r0
   1f6fe:	d001      	beq.n	1f704 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1f700:	689b      	ldr	r3, [r3, #8]
   1f702:	e7fa      	b.n	1f6fa <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   1f704:	b173      	cbz	r3, 1f724 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1f706:	4282      	cmp	r2, r0
   1f708:	d007      	beq.n	1f71a <ble_gap_event_listener_unregister+0x26>
   1f70a:	4613      	mov	r3, r2
   1f70c:	6892      	ldr	r2, [r2, #8]
   1f70e:	4282      	cmp	r2, r0
   1f710:	d1fb      	bne.n	1f70a <ble_gap_event_listener_unregister+0x16>
   1f712:	6892      	ldr	r2, [r2, #8]
   1f714:	609a      	str	r2, [r3, #8]
        rc = 0;
   1f716:	2000      	movs	r0, #0
   1f718:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1f71a:	6892      	ldr	r2, [r2, #8]
   1f71c:	4b02      	ldr	r3, [pc, #8]	; (1f728 <ble_gap_event_listener_unregister+0x34>)
   1f71e:	601a      	str	r2, [r3, #0]
        rc = 0;
   1f720:	2000      	movs	r0, #0
   1f722:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1f724:	2005      	movs	r0, #5
}
   1f726:	4770      	bx	lr
   1f728:	20003044 	.word	0x20003044

0001f72c <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   1f72c:	b510      	push	{r4, lr}
   1f72e:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   1f730:	4b15      	ldr	r3, [pc, #84]	; (1f788 <ble_gap_init+0x5c>)
   1f732:	2400      	movs	r4, #0
   1f734:	611c      	str	r4, [r3, #16]
   1f736:	615c      	str	r4, [r3, #20]
   1f738:	619c      	str	r4, [r3, #24]
   1f73a:	61dc      	str	r4, [r3, #28]
   1f73c:	621c      	str	r4, [r3, #32]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   1f73e:	601c      	str	r4, [r3, #0]
   1f740:	605c      	str	r4, [r3, #4]
   1f742:	609c      	str	r4, [r3, #8]
   1f744:	60dc      	str	r4, [r3, #12]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   1f746:	4811      	ldr	r0, [pc, #68]	; (1f78c <ble_gap_init+0x60>)
   1f748:	f7ee ffcc 	bl	e6e4 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   1f74c:	4b10      	ldr	r3, [pc, #64]	; (1f790 <ble_gap_init+0x64>)
   1f74e:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   1f750:	4b10      	ldr	r3, [pc, #64]	; (1f794 <ble_gap_init+0x68>)
   1f752:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   1f754:	4b10      	ldr	r3, [pc, #64]	; (1f798 <ble_gap_init+0x6c>)
   1f756:	9300      	str	r3, [sp, #0]
   1f758:	4b10      	ldr	r3, [pc, #64]	; (1f79c <ble_gap_init+0x70>)
   1f75a:	2218      	movs	r2, #24
   1f75c:	2101      	movs	r1, #1
   1f75e:	4810      	ldr	r0, [pc, #64]	; (1f7a0 <ble_gap_init+0x74>)
   1f760:	f7ee fa2e 	bl	dbc0 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   1f764:	b120      	cbz	r0, 1f770 <ble_gap_init+0x44>
   1f766:	2801      	cmp	r0, #1
   1f768:	d10c      	bne.n	1f784 <ble_gap_init+0x58>
   1f76a:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   1f76c:	b002      	add	sp, #8
   1f76e:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   1f770:	4b0c      	ldr	r3, [pc, #48]	; (1f7a4 <ble_gap_init+0x78>)
   1f772:	9301      	str	r3, [sp, #4]
   1f774:	2300      	movs	r3, #0
   1f776:	9300      	str	r3, [sp, #0]
   1f778:	221f      	movs	r2, #31
   1f77a:	2104      	movs	r1, #4
   1f77c:	480a      	ldr	r0, [pc, #40]	; (1f7a8 <ble_gap_init+0x7c>)
   1f77e:	f7f2 fcd5 	bl	1212c <stats_init_and_reg>
    if (rc != 0) {
   1f782:	e7f3      	b.n	1f76c <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   1f784:	200b      	movs	r0, #11
   1f786:	e7f1      	b.n	1f76c <ble_gap_init+0x40>
   1f788:	20000548 	.word	0x20000548
   1f78c:	20003108 	.word	0x20003108
   1f790:	200030d0 	.word	0x200030d0
   1f794:	20003044 	.word	0x20003044
   1f798:	0002e17c 	.word	0x0002e17c
   1f79c:	200030d4 	.word	0x200030d4
   1f7a0:	200030ec 	.word	0x200030ec
   1f7a4:	0002e18c 	.word	0x0002e18c
   1f7a8:	20003048 	.word	0x20003048

0001f7ac <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   1f7ac:	4b01      	ldr	r3, [pc, #4]	; (1f7b4 <ble_gattc_err_dispatch_get+0x8>)
   1f7ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f7b2:	4770      	bx	lr
   1f7b4:	0002e208 	.word	0x0002e208

0001f7b8 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   1f7b8:	4b01      	ldr	r3, [pc, #4]	; (1f7c0 <ble_gattc_resume_dispatch_get+0x8>)
   1f7ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f7be:	4770      	bx	lr
   1f7c0:	0002e244 	.word	0x0002e244

0001f7c4 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   1f7c4:	4b01      	ldr	r3, [pc, #4]	; (1f7cc <ble_gattc_tmo_dispatch_get+0x8>)
   1f7c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f7ca:	4770      	bx	lr
   1f7cc:	0002e280 	.word	0x0002e280

0001f7d0 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   1f7d0:	880a      	ldrh	r2, [r1, #0]
   1f7d2:	8903      	ldrh	r3, [r0, #8]
   1f7d4:	429a      	cmp	r2, r3
   1f7d6:	d107      	bne.n	1f7e8 <ble_gattc_proc_matches_conn_op+0x18>
        return 0;
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   1f7d8:	788b      	ldrb	r3, [r1, #2]
   1f7da:	7a82      	ldrb	r2, [r0, #10]
   1f7dc:	4293      	cmp	r3, r2
   1f7de:	d005      	beq.n	1f7ec <ble_gattc_proc_matches_conn_op+0x1c>
   1f7e0:	2bff      	cmp	r3, #255	; 0xff
   1f7e2:	d105      	bne.n	1f7f0 <ble_gattc_proc_matches_conn_op+0x20>
        return 0;
    }

    return 1;
   1f7e4:	2001      	movs	r0, #1
   1f7e6:	4770      	bx	lr
        return 0;
   1f7e8:	2000      	movs	r0, #0
   1f7ea:	4770      	bx	lr
    return 1;
   1f7ec:	2001      	movs	r0, #1
   1f7ee:	4770      	bx	lr
        return 0;
   1f7f0:	2000      	movs	r0, #0
}
   1f7f2:	4770      	bx	lr

0001f7f4 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   1f7f4:	6843      	ldr	r3, [r0, #4]
   1f7f6:	680a      	ldr	r2, [r1, #0]
   1f7f8:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   1f7fa:	2b00      	cmp	r3, #0
   1f7fc:	dd05      	ble.n	1f80a <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   1f7fe:	684a      	ldr	r2, [r1, #4]
   1f800:	429a      	cmp	r2, r3
   1f802:	dd04      	ble.n	1f80e <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   1f804:	604b      	str	r3, [r1, #4]
    }
    return 0;
   1f806:	2000      	movs	r0, #0
   1f808:	4770      	bx	lr
        return 1;
   1f80a:	2001      	movs	r0, #1
   1f80c:	4770      	bx	lr
    return 0;
   1f80e:	2000      	movs	r0, #0
}
   1f810:	4770      	bx	lr

0001f812 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   1f812:	7ac0      	ldrb	r0, [r0, #11]
}
   1f814:	f000 0001 	and.w	r0, r0, #1
   1f818:	4770      	bx	lr

0001f81a <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   1f81a:	b510      	push	{r4, lr}
   1f81c:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   1f81e:	7a80      	ldrb	r0, [r0, #10]
   1f820:	f7ff ffd0 	bl	1f7c4 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   1f824:	b110      	cbz	r0, 1f82c <ble_gattc_proc_timeout+0x12>
   1f826:	4603      	mov	r3, r0
        cb(proc);
   1f828:	4620      	mov	r0, r4
   1f82a:	4798      	blx	r3
    }
}
   1f82c:	bd10      	pop	{r4, pc}
	...

0001f830 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   1f830:	4603      	mov	r3, r0
   1f832:	b118      	cbz	r0, 1f83c <ble_gattc_error+0xc>
   1f834:	280e      	cmp	r0, #14
   1f836:	d102      	bne.n	1f83e <ble_gattc_error+0xe>
        att_handle = 0;
   1f838:	2100      	movs	r1, #0
   1f83a:	e000      	b.n	1f83e <ble_gattc_error+0xe>
   1f83c:	2100      	movs	r1, #0
    }

    error.status = status;
   1f83e:	4802      	ldr	r0, [pc, #8]	; (1f848 <ble_gattc_error+0x18>)
   1f840:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   1f842:	8041      	strh	r1, [r0, #2]
    return &error;
}
   1f844:	4770      	bx	lr
   1f846:	bf00      	nop
   1f848:	200032bc 	.word	0x200032bc

0001f84c <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   1f84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f84e:	4604      	mov	r4, r0
   1f850:	461e      	mov	r6, r3
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1f852:	4608      	mov	r0, r1
   1f854:	b129      	cbz	r1, 1f862 <ble_gattc_mtu_cb+0x16>
   1f856:	290e      	cmp	r1, #14
   1f858:	d003      	beq.n	1f862 <ble_gattc_mtu_cb+0x16>
        STATS_INC(ble_gattc_stats, mtu_fail);
   1f85a:	4909      	ldr	r1, [pc, #36]	; (1f880 <ble_gattc_mtu_cb+0x34>)
   1f85c:	690b      	ldr	r3, [r1, #16]
   1f85e:	3301      	adds	r3, #1
   1f860:	610b      	str	r3, [r1, #16]
    }

    if (proc->mtu.cb == NULL) {
   1f862:	68e5      	ldr	r5, [r4, #12]
   1f864:	b14d      	cbz	r5, 1f87a <ble_gattc_mtu_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   1f866:	8927      	ldrh	r7, [r4, #8]
                          ble_gattc_error(status, att_handle),
   1f868:	4611      	mov	r1, r2
   1f86a:	f7ff ffe1 	bl	1f830 <ble_gattc_error>
   1f86e:	4601      	mov	r1, r0
        rc = proc->mtu.cb(proc->conn_handle,
   1f870:	6923      	ldr	r3, [r4, #16]
   1f872:	4632      	mov	r2, r6
   1f874:	4638      	mov	r0, r7
   1f876:	47a8      	blx	r5
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   1f878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1f87a:	2000      	movs	r0, #0
    return rc;
   1f87c:	e7fc      	b.n	1f878 <ble_gattc_mtu_cb+0x2c>
   1f87e:	bf00      	nop
   1f880:	20003224 	.word	0x20003224

0001f884 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   1f884:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1f886:	2300      	movs	r3, #0
   1f888:	461a      	mov	r2, r3
   1f88a:	210d      	movs	r1, #13
   1f88c:	f7ff ffde 	bl	1f84c <ble_gattc_mtu_cb>
}
   1f890:	bd08      	pop	{r3, pc}

0001f892 <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   1f892:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   1f894:	2300      	movs	r3, #0
   1f896:	f7ff ffd9 	bl	1f84c <ble_gattc_mtu_cb>
}
   1f89a:	bd08      	pop	{r3, pc}

0001f89c <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f89e:	4604      	mov	r4, r0
   1f8a0:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1f8a2:	4608      	mov	r0, r1
   1f8a4:	b129      	cbz	r1, 1f8b2 <ble_gattc_disc_all_svcs_cb+0x16>
   1f8a6:	290e      	cmp	r1, #14
   1f8a8:	d003      	beq.n	1f8b2 <ble_gattc_disc_all_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   1f8aa:	4909      	ldr	r1, [pc, #36]	; (1f8d0 <ble_gattc_disc_all_svcs_cb+0x34>)
   1f8ac:	698b      	ldr	r3, [r1, #24]
   1f8ae:	3301      	adds	r3, #1
   1f8b0:	618b      	str	r3, [r1, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   1f8b2:	6925      	ldr	r5, [r4, #16]
   1f8b4:	b14d      	cbz	r5, 1f8ca <ble_gattc_disc_all_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1f8b6:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1f8b8:	4611      	mov	r1, r2
   1f8ba:	f7ff ffb9 	bl	1f830 <ble_gattc_error>
   1f8be:	4601      	mov	r1, r0
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1f8c0:	6963      	ldr	r3, [r4, #20]
   1f8c2:	4632      	mov	r2, r6
   1f8c4:	4638      	mov	r0, r7
   1f8c6:	47a8      	blx	r5
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   1f8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1f8ca:	2000      	movs	r0, #0
    return rc;
   1f8cc:	e7fc      	b.n	1f8c8 <ble_gattc_disc_all_svcs_cb+0x2c>
   1f8ce:	bf00      	nop
   1f8d0:	20003224 	.word	0x20003224

0001f8d4 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   1f8d4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1f8d6:	2300      	movs	r3, #0
   1f8d8:	461a      	mov	r2, r3
   1f8da:	210d      	movs	r1, #13
   1f8dc:	f7ff ffde 	bl	1f89c <ble_gattc_disc_all_svcs_cb>
}
   1f8e0:	bd08      	pop	{r3, pc}

0001f8e2 <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1f8e2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1f8e4:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1f8e8:	d004      	beq.n	1f8f4 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   1f8ea:	2300      	movs	r3, #0
   1f8ec:	b289      	uxth	r1, r1
   1f8ee:	f7ff ffd5 	bl	1f89c <ble_gattc_disc_all_svcs_cb>
}
   1f8f2:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1f8f4:	210e      	movs	r1, #14
   1f8f6:	e7f8      	b.n	1f8ea <ble_gattc_disc_all_svcs_err+0x8>

0001f8f8 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1f8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f8fa:	4604      	mov	r4, r0
   1f8fc:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1f8fe:	4608      	mov	r0, r1
   1f900:	b129      	cbz	r1, 1f90e <ble_gattc_disc_svc_uuid_cb+0x16>
   1f902:	290e      	cmp	r1, #14
   1f904:	d003      	beq.n	1f90e <ble_gattc_disc_svc_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   1f906:	4909      	ldr	r1, [pc, #36]	; (1f92c <ble_gattc_disc_svc_uuid_cb+0x34>)
   1f908:	6a0b      	ldr	r3, [r1, #32]
   1f90a:	3301      	adds	r3, #1
   1f90c:	620b      	str	r3, [r1, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   1f90e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1f910:	b14d      	cbz	r5, 1f926 <ble_gattc_disc_svc_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1f912:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1f914:	4611      	mov	r1, r2
   1f916:	f7ff ff8b 	bl	1f830 <ble_gattc_error>
   1f91a:	4601      	mov	r1, r0
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1f91c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1f91e:	4632      	mov	r2, r6
   1f920:	4638      	mov	r0, r7
   1f922:	47a8      	blx	r5
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   1f924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1f926:	2000      	movs	r0, #0
    return rc;
   1f928:	e7fc      	b.n	1f924 <ble_gattc_disc_svc_uuid_cb+0x2c>
   1f92a:	bf00      	nop
   1f92c:	20003224 	.word	0x20003224

0001f930 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   1f930:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1f932:	2300      	movs	r3, #0
   1f934:	461a      	mov	r2, r3
   1f936:	210d      	movs	r1, #13
   1f938:	f7ff ffde 	bl	1f8f8 <ble_gattc_disc_svc_uuid_cb>
}
   1f93c:	bd08      	pop	{r3, pc}

0001f93e <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1f93e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1f940:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1f944:	d003      	beq.n	1f94e <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   1f946:	2300      	movs	r3, #0
   1f948:	f7ff ffd6 	bl	1f8f8 <ble_gattc_disc_svc_uuid_cb>
}
   1f94c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1f94e:	210e      	movs	r1, #14
   1f950:	e7f9      	b.n	1f946 <ble_gattc_disc_svc_uuid_err+0x8>
	...

0001f954 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1f954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f956:	4604      	mov	r4, r0
   1f958:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1f95a:	4608      	mov	r0, r1
   1f95c:	b129      	cbz	r1, 1f96a <ble_gattc_find_inc_svcs_cb+0x16>
   1f95e:	290e      	cmp	r1, #14
   1f960:	d003      	beq.n	1f96a <ble_gattc_find_inc_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   1f962:	4909      	ldr	r1, [pc, #36]	; (1f988 <ble_gattc_find_inc_svcs_cb+0x34>)
   1f964:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1f966:	3301      	adds	r3, #1
   1f968:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   1f96a:	6965      	ldr	r5, [r4, #20]
   1f96c:	b14d      	cbz	r5, 1f982 <ble_gattc_find_inc_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1f96e:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1f970:	4611      	mov	r1, r2
   1f972:	f7ff ff5d 	bl	1f830 <ble_gattc_error>
   1f976:	4601      	mov	r1, r0
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1f978:	69a3      	ldr	r3, [r4, #24]
   1f97a:	4632      	mov	r2, r6
   1f97c:	4638      	mov	r0, r7
   1f97e:	47a8      	blx	r5
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   1f980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1f982:	2000      	movs	r0, #0
    return rc;
   1f984:	e7fc      	b.n	1f980 <ble_gattc_find_inc_svcs_cb+0x2c>
   1f986:	bf00      	nop
   1f988:	20003224 	.word	0x20003224

0001f98c <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   1f98c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1f98e:	2300      	movs	r3, #0
   1f990:	461a      	mov	r2, r3
   1f992:	210d      	movs	r1, #13
   1f994:	f7ff ffde 	bl	1f954 <ble_gattc_find_inc_svcs_cb>
}
   1f998:	bd08      	pop	{r3, pc}

0001f99a <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1f99a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   1f99c:	8a03      	ldrh	r3, [r0, #16]
   1f99e:	b913      	cbnz	r3, 1f9a6 <ble_gattc_find_inc_svcs_err+0xc>
   1f9a0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1f9a4:	d003      	beq.n	1f9ae <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   1f9a6:	2300      	movs	r3, #0
   1f9a8:	f7ff ffd4 	bl	1f954 <ble_gattc_find_inc_svcs_cb>
}
   1f9ac:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1f9ae:	210e      	movs	r1, #14
   1f9b0:	e7f9      	b.n	1f9a6 <ble_gattc_find_inc_svcs_err+0xc>
	...

0001f9b4 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9b6:	4604      	mov	r4, r0
   1f9b8:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1f9ba:	4608      	mov	r0, r1
   1f9bc:	b129      	cbz	r1, 1f9ca <ble_gattc_disc_all_chrs_cb+0x16>
   1f9be:	290e      	cmp	r1, #14
   1f9c0:	d003      	beq.n	1f9ca <ble_gattc_disc_all_chrs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   1f9c2:	4909      	ldr	r1, [pc, #36]	; (1f9e8 <ble_gattc_disc_all_chrs_cb+0x34>)
   1f9c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1f9c6:	3301      	adds	r3, #1
   1f9c8:	630b      	str	r3, [r1, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   1f9ca:	6925      	ldr	r5, [r4, #16]
   1f9cc:	b14d      	cbz	r5, 1f9e2 <ble_gattc_disc_all_chrs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1f9ce:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1f9d0:	4611      	mov	r1, r2
   1f9d2:	f7ff ff2d 	bl	1f830 <ble_gattc_error>
   1f9d6:	4601      	mov	r1, r0
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1f9d8:	6963      	ldr	r3, [r4, #20]
   1f9da:	4632      	mov	r2, r6
   1f9dc:	4638      	mov	r0, r7
   1f9de:	47a8      	blx	r5
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   1f9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1f9e2:	2000      	movs	r0, #0
    return rc;
   1f9e4:	e7fc      	b.n	1f9e0 <ble_gattc_disc_all_chrs_cb+0x2c>
   1f9e6:	bf00      	nop
   1f9e8:	20003224 	.word	0x20003224

0001f9ec <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   1f9ec:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1f9ee:	2300      	movs	r3, #0
   1f9f0:	461a      	mov	r2, r3
   1f9f2:	210d      	movs	r1, #13
   1f9f4:	f7ff ffde 	bl	1f9b4 <ble_gattc_disc_all_chrs_cb>
}
   1f9f8:	bd08      	pop	{r3, pc}

0001f9fa <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1f9fa:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1f9fc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fa00:	d003      	beq.n	1fa0a <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   1fa02:	2300      	movs	r3, #0
   1fa04:	f7ff ffd6 	bl	1f9b4 <ble_gattc_disc_all_chrs_cb>
}
   1fa08:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fa0a:	210e      	movs	r1, #14
   1fa0c:	e7f9      	b.n	1fa02 <ble_gattc_disc_all_chrs_err+0x8>
	...

0001fa10 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1fa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa12:	4604      	mov	r4, r0
   1fa14:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fa16:	4608      	mov	r0, r1
   1fa18:	b129      	cbz	r1, 1fa26 <ble_gattc_disc_chr_uuid_cb+0x16>
   1fa1a:	290e      	cmp	r1, #14
   1fa1c:	d003      	beq.n	1fa26 <ble_gattc_disc_chr_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   1fa1e:	4909      	ldr	r1, [pc, #36]	; (1fa44 <ble_gattc_disc_chr_uuid_cb+0x34>)
   1fa20:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1fa22:	3301      	adds	r3, #1
   1fa24:	638b      	str	r3, [r1, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   1fa26:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1fa28:	b14d      	cbz	r5, 1fa3e <ble_gattc_disc_chr_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1fa2a:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1fa2c:	4611      	mov	r1, r2
   1fa2e:	f7ff feff 	bl	1f830 <ble_gattc_error>
   1fa32:	4601      	mov	r1, r0
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1fa34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fa36:	4632      	mov	r2, r6
   1fa38:	4638      	mov	r0, r7
   1fa3a:	47a8      	blx	r5
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   1fa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fa3e:	2000      	movs	r0, #0
    return rc;
   1fa40:	e7fc      	b.n	1fa3c <ble_gattc_disc_chr_uuid_cb+0x2c>
   1fa42:	bf00      	nop
   1fa44:	20003224 	.word	0x20003224

0001fa48 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   1fa48:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fa4a:	2300      	movs	r3, #0
   1fa4c:	461a      	mov	r2, r3
   1fa4e:	210d      	movs	r1, #13
   1fa50:	f7ff ffde 	bl	1fa10 <ble_gattc_disc_chr_uuid_cb>
}
   1fa54:	bd08      	pop	{r3, pc}

0001fa56 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fa56:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fa58:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fa5c:	d003      	beq.n	1fa66 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   1fa5e:	2300      	movs	r3, #0
   1fa60:	f7ff ffd6 	bl	1fa10 <ble_gattc_disc_chr_uuid_cb>
}
   1fa64:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1fa66:	210e      	movs	r1, #14
   1fa68:	e7f9      	b.n	1fa5e <ble_gattc_disc_chr_uuid_err+0x8>
	...

0001fa6c <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   1fa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fa6e:	b083      	sub	sp, #12
   1fa70:	4604      	mov	r4, r0
   1fa72:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fa74:	4608      	mov	r0, r1
   1fa76:	b129      	cbz	r1, 1fa84 <ble_gattc_disc_all_dscs_cb+0x18>
   1fa78:	290e      	cmp	r1, #14
   1fa7a:	d003      	beq.n	1fa84 <ble_gattc_disc_all_dscs_cb+0x18>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   1fa7c:	490a      	ldr	r1, [pc, #40]	; (1faa8 <ble_gattc_disc_all_dscs_cb+0x3c>)
   1fa7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1fa80:	3301      	adds	r3, #1
   1fa82:	640b      	str	r3, [r1, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   1fa84:	6965      	ldr	r5, [r4, #20]
   1fa86:	b165      	cbz	r5, 1faa2 <ble_gattc_disc_all_dscs_cb+0x36>
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1fa88:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1fa8a:	4611      	mov	r1, r2
   1fa8c:	f7ff fed0 	bl	1f830 <ble_gattc_error>
   1fa90:	4601      	mov	r1, r0
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1fa92:	69a3      	ldr	r3, [r4, #24]
   1fa94:	9300      	str	r3, [sp, #0]
   1fa96:	4633      	mov	r3, r6
   1fa98:	89a2      	ldrh	r2, [r4, #12]
   1fa9a:	4638      	mov	r0, r7
   1fa9c:	47a8      	blx	r5
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   1fa9e:	b003      	add	sp, #12
   1faa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = 0;
   1faa2:	2000      	movs	r0, #0
    return rc;
   1faa4:	e7fb      	b.n	1fa9e <ble_gattc_disc_all_dscs_cb+0x32>
   1faa6:	bf00      	nop
   1faa8:	20003224 	.word	0x20003224

0001faac <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   1faac:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1faae:	2300      	movs	r3, #0
   1fab0:	461a      	mov	r2, r3
   1fab2:	210d      	movs	r1, #13
   1fab4:	f7ff ffda 	bl	1fa6c <ble_gattc_disc_all_dscs_cb>
}
   1fab8:	bd08      	pop	{r3, pc}

0001faba <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1faba:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1fabc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1fac0:	d003      	beq.n	1faca <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   1fac2:	2300      	movs	r3, #0
   1fac4:	f7ff ffd2 	bl	1fa6c <ble_gattc_disc_all_dscs_cb>
}
   1fac8:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1faca:	210e      	movs	r1, #14
   1facc:	e7f9      	b.n	1fac2 <ble_gattc_disc_all_dscs_err+0x8>
	...

0001fad0 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1fad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fad2:	4604      	mov	r4, r0
   1fad4:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fad6:	4608      	mov	r0, r1
   1fad8:	b129      	cbz	r1, 1fae6 <ble_gattc_read_cb+0x16>
   1fada:	290e      	cmp	r1, #14
   1fadc:	d003      	beq.n	1fae6 <ble_gattc_read_cb+0x16>
        STATS_INC(ble_gattc_stats, read_fail);
   1fade:	4909      	ldr	r1, [pc, #36]	; (1fb04 <ble_gattc_read_cb+0x34>)
   1fae0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1fae2:	3301      	adds	r3, #1
   1fae4:	648b      	str	r3, [r1, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   1fae6:	6925      	ldr	r5, [r4, #16]
   1fae8:	b14d      	cbz	r5, 1fafe <ble_gattc_read_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   1faea:	8927      	ldrh	r7, [r4, #8]
                           ble_gattc_error(status, att_handle), attr,
   1faec:	4611      	mov	r1, r2
   1faee:	f7ff fe9f 	bl	1f830 <ble_gattc_error>
   1faf2:	4601      	mov	r1, r0
        rc = proc->read.cb(proc->conn_handle,
   1faf4:	6963      	ldr	r3, [r4, #20]
   1faf6:	4632      	mov	r2, r6
   1faf8:	4638      	mov	r0, r7
   1fafa:	47a8      	blx	r5
                           proc->read.cb_arg);
    }

    return rc;
}
   1fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fafe:	2000      	movs	r0, #0
    return rc;
   1fb00:	e7fc      	b.n	1fafc <ble_gattc_read_cb+0x2c>
   1fb02:	bf00      	nop
   1fb04:	20003224 	.word	0x20003224

0001fb08 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   1fb08:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fb0a:	2300      	movs	r3, #0
   1fb0c:	461a      	mov	r2, r3
   1fb0e:	210d      	movs	r1, #13
   1fb10:	f7ff ffde 	bl	1fad0 <ble_gattc_read_cb>
}
   1fb14:	bd08      	pop	{r3, pc}

0001fb16 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   1fb16:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   1fb18:	2300      	movs	r3, #0
   1fb1a:	f7ff ffd9 	bl	1fad0 <ble_gattc_read_cb>
}
   1fb1e:	bd08      	pop	{r3, pc}

0001fb20 <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1fb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb22:	4604      	mov	r4, r0
   1fb24:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fb26:	4608      	mov	r0, r1
   1fb28:	b129      	cbz	r1, 1fb36 <ble_gattc_read_uuid_cb+0x16>
   1fb2a:	290e      	cmp	r1, #14
   1fb2c:	d003      	beq.n	1fb36 <ble_gattc_read_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   1fb2e:	4909      	ldr	r1, [pc, #36]	; (1fb54 <ble_gattc_read_uuid_cb+0x34>)
   1fb30:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1fb32:	3301      	adds	r3, #1
   1fb34:	650b      	str	r3, [r1, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   1fb36:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1fb38:	b14d      	cbz	r5, 1fb4e <ble_gattc_read_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   1fb3a:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   1fb3c:	4611      	mov	r1, r2
   1fb3e:	f7ff fe77 	bl	1f830 <ble_gattc_error>
   1fb42:	4601      	mov	r1, r0
        rc = proc->read_uuid.cb(proc->conn_handle,
   1fb44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1fb46:	4632      	mov	r2, r6
   1fb48:	4638      	mov	r0, r7
   1fb4a:	47a8      	blx	r5
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   1fb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fb4e:	2000      	movs	r0, #0
    return rc;
   1fb50:	e7fc      	b.n	1fb4c <ble_gattc_read_uuid_cb+0x2c>
   1fb52:	bf00      	nop
   1fb54:	20003224 	.word	0x20003224

0001fb58 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   1fb58:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fb5a:	2300      	movs	r3, #0
   1fb5c:	461a      	mov	r2, r3
   1fb5e:	210d      	movs	r1, #13
   1fb60:	f7ff ffde 	bl	1fb20 <ble_gattc_read_uuid_cb>
}
   1fb64:	bd08      	pop	{r3, pc}

0001fb66 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fb66:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   1fb68:	2300      	movs	r3, #0
   1fb6a:	f7ff ffd9 	bl	1fb20 <ble_gattc_read_uuid_cb>
}
   1fb6e:	bd08      	pop	{r3, pc}

0001fb70 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1fb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb72:	4604      	mov	r4, r0
   1fb74:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fb76:	4608      	mov	r0, r1
   1fb78:	b129      	cbz	r1, 1fb86 <ble_gattc_read_long_cb+0x16>
   1fb7a:	290e      	cmp	r1, #14
   1fb7c:	d003      	beq.n	1fb86 <ble_gattc_read_long_cb+0x16>
        STATS_INC(ble_gattc_stats, read_long_fail);
   1fb7e:	4909      	ldr	r1, [pc, #36]	; (1fba4 <ble_gattc_read_long_cb+0x34>)
   1fb80:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1fb82:	3301      	adds	r3, #1
   1fb84:	658b      	str	r3, [r1, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   1fb86:	6925      	ldr	r5, [r4, #16]
   1fb88:	b14d      	cbz	r5, 1fb9e <ble_gattc_read_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   1fb8a:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   1fb8c:	4611      	mov	r1, r2
   1fb8e:	f7ff fe4f 	bl	1f830 <ble_gattc_error>
   1fb92:	4601      	mov	r1, r0
        rc = proc->read_long.cb(proc->conn_handle,
   1fb94:	6963      	ldr	r3, [r4, #20]
   1fb96:	4632      	mov	r2, r6
   1fb98:	4638      	mov	r0, r7
   1fb9a:	47a8      	blx	r5
                                proc->read_long.cb_arg);
    }

    return rc;
}
   1fb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1fb9e:	2000      	movs	r0, #0
    return rc;
   1fba0:	e7fc      	b.n	1fb9c <ble_gattc_read_long_cb+0x2c>
   1fba2:	bf00      	nop
   1fba4:	20003224 	.word	0x20003224

0001fba8 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   1fba8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1fbaa:	2300      	movs	r3, #0
   1fbac:	461a      	mov	r2, r3
   1fbae:	210d      	movs	r1, #13
   1fbb0:	f7ff ffde 	bl	1fb70 <ble_gattc_read_long_cb>
}
   1fbb4:	bd08      	pop	{r3, pc}

0001fbb6 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fbb6:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   1fbb8:	2300      	movs	r3, #0
   1fbba:	f7ff ffd9 	bl	1fb70 <ble_gattc_read_long_cb>
}
   1fbbe:	bd08      	pop	{r3, pc}

0001fbc0 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   1fbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fbc2:	b083      	sub	sp, #12
   1fbc4:	4606      	mov	r6, r0
   1fbc6:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fbc8:	4608      	mov	r0, r1
   1fbca:	b129      	cbz	r1, 1fbd8 <ble_gattc_read_mult_cb+0x18>
   1fbcc:	290e      	cmp	r1, #14
   1fbce:	d003      	beq.n	1fbd8 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   1fbd0:	490f      	ldr	r1, [pc, #60]	; (1fc10 <ble_gattc_read_mult_cb+0x50>)
   1fbd2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   1fbd4:	3301      	adds	r3, #1
   1fbd6:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   1fbd8:	2300      	movs	r3, #0
   1fbda:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   1fbde:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   1fbe2:	b18c      	cbz	r4, 1fc08 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   1fbe4:	6823      	ldr	r3, [r4, #0]
   1fbe6:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   1fbe8:	6a35      	ldr	r5, [r6, #32]
   1fbea:	b17d      	cbz	r5, 1fc0c <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   1fbec:	8937      	ldrh	r7, [r6, #8]
                                ble_gattc_error(status, att_handle), &attr,
   1fbee:	4611      	mov	r1, r2
   1fbf0:	f7ff fe1e 	bl	1f830 <ble_gattc_error>
   1fbf4:	4601      	mov	r1, r0
        rc = proc->read_mult.cb(proc->conn_handle,
   1fbf6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1fbf8:	466a      	mov	r2, sp
   1fbfa:	4638      	mov	r0, r7
   1fbfc:	47a8      	blx	r5
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   1fbfe:	b10c      	cbz	r4, 1fc04 <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   1fc00:	9b01      	ldr	r3, [sp, #4]
   1fc02:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   1fc04:	b003      	add	sp, #12
   1fc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   1fc08:	9301      	str	r3, [sp, #4]
   1fc0a:	e7ed      	b.n	1fbe8 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   1fc0c:	2000      	movs	r0, #0
   1fc0e:	e7f6      	b.n	1fbfe <ble_gattc_read_mult_cb+0x3e>
   1fc10:	20003224 	.word	0x20003224

0001fc14 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   1fc14:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1fc16:	2300      	movs	r3, #0
   1fc18:	461a      	mov	r2, r3
   1fc1a:	210d      	movs	r1, #13
   1fc1c:	f7ff ffd0 	bl	1fbc0 <ble_gattc_read_mult_cb>
}
   1fc20:	bd08      	pop	{r3, pc}

0001fc22 <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fc22:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   1fc24:	2300      	movs	r3, #0
   1fc26:	f7ff ffcb 	bl	1fbc0 <ble_gattc_read_mult_cb>
}
   1fc2a:	bd08      	pop	{r3, pc}

0001fc2c <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1fc2c:	b570      	push	{r4, r5, r6, lr}
   1fc2e:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fc30:	4608      	mov	r0, r1
   1fc32:	b129      	cbz	r1, 1fc40 <ble_gattc_write_long_cb+0x14>
   1fc34:	290e      	cmp	r1, #14
   1fc36:	d003      	beq.n	1fc40 <ble_gattc_write_long_cb+0x14>
        STATS_INC(ble_gattc_stats, write_long_fail);
   1fc38:	4909      	ldr	r1, [pc, #36]	; (1fc60 <ble_gattc_write_long_cb+0x34>)
   1fc3a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   1fc3c:	3301      	adds	r3, #1
   1fc3e:	678b      	str	r3, [r1, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   1fc40:	69a5      	ldr	r5, [r4, #24]
   1fc42:	b155      	cbz	r5, 1fc5a <ble_gattc_write_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   1fc44:	8926      	ldrh	r6, [r4, #8]
                                 ble_gattc_error(status, att_handle),
   1fc46:	4611      	mov	r1, r2
   1fc48:	f7ff fdf2 	bl	1f830 <ble_gattc_error>
   1fc4c:	4601      	mov	r1, r0
        rc = proc->write_long.cb(proc->conn_handle,
   1fc4e:	69e3      	ldr	r3, [r4, #28]
   1fc50:	f104 020c 	add.w	r2, r4, #12
   1fc54:	4630      	mov	r0, r6
   1fc56:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   1fc58:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1fc5a:	2000      	movs	r0, #0
    return rc;
   1fc5c:	e7fc      	b.n	1fc58 <ble_gattc_write_long_cb+0x2c>
   1fc5e:	bf00      	nop
   1fc60:	20003224 	.word	0x20003224

0001fc64 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   1fc64:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   1fc66:	2200      	movs	r2, #0
   1fc68:	210d      	movs	r1, #13
   1fc6a:	f7ff ffdf 	bl	1fc2c <ble_gattc_write_long_cb>
}
   1fc6e:	bd08      	pop	{r3, pc}

0001fc70 <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1fc70:	b570      	push	{r4, r5, r6, lr}
   1fc72:	b082      	sub	sp, #8
   1fc74:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1fc76:	4608      	mov	r0, r1
   1fc78:	b139      	cbz	r1, 1fc8a <ble_gattc_write_reliable_cb+0x1a>
   1fc7a:	290e      	cmp	r1, #14
   1fc7c:	d005      	beq.n	1fc8a <ble_gattc_write_reliable_cb+0x1a>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   1fc7e:	490c      	ldr	r1, [pc, #48]	; (1fcb0 <ble_gattc_write_reliable_cb+0x40>)
   1fc80:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1fc84:	3301      	adds	r3, #1
   1fc86:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   1fc8a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1fc8c:	b175      	cbz	r5, 1fcac <ble_gattc_write_reliable_cb+0x3c>
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   1fc8e:	8926      	ldrh	r6, [r4, #8]
                                     ble_gattc_error(status, att_handle),
   1fc90:	4611      	mov	r1, r2
   1fc92:	f7ff fdcd 	bl	1f830 <ble_gattc_error>
   1fc96:	4601      	mov	r1, r0
        rc = proc->write_reliable.cb(proc->conn_handle,
   1fc98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fc9a:	9300      	str	r3, [sp, #0]
   1fc9c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1fca0:	f104 020c 	add.w	r2, r4, #12
   1fca4:	4630      	mov	r0, r6
   1fca6:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   1fca8:	b002      	add	sp, #8
   1fcaa:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1fcac:	2000      	movs	r0, #0
    return rc;
   1fcae:	e7fb      	b.n	1fca8 <ble_gattc_write_reliable_cb+0x38>
   1fcb0:	20003224 	.word	0x20003224

0001fcb4 <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   1fcb4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   1fcb6:	2200      	movs	r2, #0
   1fcb8:	210d      	movs	r1, #13
   1fcba:	f7ff ffd9 	bl	1fc70 <ble_gattc_write_reliable_cb>
}
   1fcbe:	bd08      	pop	{r3, pc}

0001fcc0 <ble_gattc_proc_set_resume_timer>:
{
   1fcc0:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   1fcc2:	7ac3      	ldrb	r3, [r0, #11]
   1fcc4:	f043 0301 	orr.w	r3, r3, #1
   1fcc8:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   1fcca:	4b07      	ldr	r3, [pc, #28]	; (1fce8 <ble_gattc_proc_set_resume_timer+0x28>)
   1fccc:	681b      	ldr	r3, [r3, #0]
   1fcce:	b103      	cbz	r3, 1fcd2 <ble_gattc_proc_set_resume_timer+0x12>
}
   1fcd0:	bd08      	pop	{r3, pc}
    return os_time_get();
   1fcd2:	f7ee fb73 	bl	e3bc <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   1fcd6:	3080      	adds	r0, #128	; 0x80
   1fcd8:	4b03      	ldr	r3, [pc, #12]	; (1fce8 <ble_gattc_proc_set_resume_timer+0x28>)
   1fcda:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   1fcdc:	2800      	cmp	r0, #0
   1fcde:	d1f7      	bne.n	1fcd0 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   1fce0:	3001      	adds	r0, #1
   1fce2:	6018      	str	r0, [r3, #0]
}
   1fce4:	e7f4      	b.n	1fcd0 <ble_gattc_proc_set_resume_timer+0x10>
   1fce6:	bf00      	nop
   1fce8:	20003220 	.word	0x20003220

0001fcec <ble_gattc_process_resume_status>:
{
   1fcec:	b508      	push	{r3, lr}
    switch (status) {
   1fcee:	460b      	mov	r3, r1
   1fcf0:	b121      	cbz	r1, 1fcfc <ble_gattc_process_resume_status+0x10>
   1fcf2:	2906      	cmp	r1, #6
   1fcf4:	d102      	bne.n	1fcfc <ble_gattc_process_resume_status+0x10>
        ble_gattc_proc_set_resume_timer(proc);
   1fcf6:	f7ff ffe3 	bl	1fcc0 <ble_gattc_proc_set_resume_timer>
        return 0;
   1fcfa:	2300      	movs	r3, #0
}
   1fcfc:	4618      	mov	r0, r3
   1fcfe:	bd08      	pop	{r3, pc}

0001fd00 <ble_gattc_proc_set_exp_timer>:
{
   1fd00:	b510      	push	{r4, lr}
   1fd02:	4604      	mov	r4, r0
   1fd04:	f7ee fb5a 	bl	e3bc <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   1fd08:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   1fd0c:	6060      	str	r0, [r4, #4]
}
   1fd0e:	bd10      	pop	{r4, pc}

0001fd10 <ble_gattc_ticks_until_resume>:
{
   1fd10:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   1fd12:	4b08      	ldr	r3, [pc, #32]	; (1fd34 <ble_gattc_ticks_until_resume+0x24>)
   1fd14:	681b      	ldr	r3, [r3, #0]
   1fd16:	b13b      	cbz	r3, 1fd28 <ble_gattc_ticks_until_resume+0x18>
   1fd18:	f7ee fb50 	bl	e3bc <os_time_get>
    diff = ble_gattc_resume_at - now;
   1fd1c:	4b05      	ldr	r3, [pc, #20]	; (1fd34 <ble_gattc_ticks_until_resume+0x24>)
   1fd1e:	681b      	ldr	r3, [r3, #0]
   1fd20:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   1fd22:	2800      	cmp	r0, #0
   1fd24:	dd03      	ble.n	1fd2e <ble_gattc_ticks_until_resume+0x1e>
}
   1fd26:	bd08      	pop	{r3, pc}
        return BLE_HS_FOREVER;
   1fd28:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1fd2c:	e7fb      	b.n	1fd26 <ble_gattc_ticks_until_resume+0x16>
        return 0;
   1fd2e:	2000      	movs	r0, #0
   1fd30:	e7f9      	b.n	1fd26 <ble_gattc_ticks_until_resume+0x16>
   1fd32:	bf00      	nop
   1fd34:	20003220 	.word	0x20003220

0001fd38 <ble_gattc_extract>:
{
   1fd38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd3c:	4681      	mov	r9, r0
   1fd3e:	4688      	mov	r8, r1
   1fd40:	4692      	mov	sl, r2
   1fd42:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   1fd44:	2500      	movs	r5, #0
   1fd46:	601d      	str	r5, [r3, #0]
   1fd48:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   1fd4a:	f001 fd8f 	bl	2186c <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   1fd4e:	4b17      	ldr	r3, [pc, #92]	; (1fdac <ble_gattc_extract+0x74>)
   1fd50:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   1fd52:	46ab      	mov	fp, r5
    while (proc != NULL) {
   1fd54:	e00b      	b.n	1fd6e <ble_gattc_extract+0x36>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   1fd56:	4a15      	ldr	r2, [pc, #84]	; (1fdac <ble_gattc_extract+0x74>)
   1fd58:	6813      	ldr	r3, [r2, #0]
   1fd5a:	681b      	ldr	r3, [r3, #0]
   1fd5c:	6013      	str	r3, [r2, #0]
   1fd5e:	b9a3      	cbnz	r3, 1fd8a <ble_gattc_extract+0x52>
   1fd60:	6052      	str	r2, [r2, #4]
   1fd62:	e012      	b.n	1fd8a <ble_gattc_extract+0x52>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   1fd64:	4b11      	ldr	r3, [pc, #68]	; (1fdac <ble_gattc_extract+0x74>)
   1fd66:	605d      	str	r5, [r3, #4]
   1fd68:	e00f      	b.n	1fd8a <ble_gattc_extract+0x52>
            prev = proc;
   1fd6a:	4625      	mov	r5, r4
   1fd6c:	4634      	mov	r4, r6
    while (proc != NULL) {
   1fd6e:	b1c4      	cbz	r4, 1fda2 <ble_gattc_extract+0x6a>
        next = STAILQ_NEXT(proc, next);
   1fd70:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   1fd72:	4641      	mov	r1, r8
   1fd74:	4620      	mov	r0, r4
   1fd76:	47c8      	blx	r9
   1fd78:	2800      	cmp	r0, #0
   1fd7a:	d0f6      	beq.n	1fd6a <ble_gattc_extract+0x32>
            if (prev == NULL) {
   1fd7c:	2d00      	cmp	r5, #0
   1fd7e:	d0ea      	beq.n	1fd56 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   1fd80:	682b      	ldr	r3, [r5, #0]
   1fd82:	681b      	ldr	r3, [r3, #0]
   1fd84:	602b      	str	r3, [r5, #0]
   1fd86:	2b00      	cmp	r3, #0
   1fd88:	d0ec      	beq.n	1fd64 <ble_gattc_extract+0x2c>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   1fd8a:	2300      	movs	r3, #0
   1fd8c:	6023      	str	r3, [r4, #0]
   1fd8e:	687b      	ldr	r3, [r7, #4]
   1fd90:	601c      	str	r4, [r3, #0]
   1fd92:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   1fd94:	f1ba 0f00 	cmp.w	sl, #0
   1fd98:	dde8      	ble.n	1fd6c <ble_gattc_extract+0x34>
                num_extracted++;
   1fd9a:	f10b 0b01 	add.w	fp, fp, #1
                if (num_extracted >= max_procs) {
   1fd9e:	45da      	cmp	sl, fp
   1fda0:	dce4      	bgt.n	1fd6c <ble_gattc_extract+0x34>
    ble_hs_unlock();
   1fda2:	f001 fd67 	bl	21874 <ble_hs_unlock>
}
   1fda6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdaa:	bf00      	nop
   1fdac:	20003218 	.word	0x20003218

0001fdb0 <ble_gattc_extract_expired>:
{
   1fdb0:	b510      	push	{r4, lr}
   1fdb2:	b082      	sub	sp, #8
   1fdb4:	4604      	mov	r4, r0
   1fdb6:	f7ee fb01 	bl	e3bc <os_time_get>
    criteria.now = ble_npl_time_get();
   1fdba:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   1fdbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1fdc0:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   1fdc2:	2200      	movs	r2, #0
   1fdc4:	6022      	str	r2, [r4, #0]
   1fdc6:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   1fdc8:	4623      	mov	r3, r4
   1fdca:	4669      	mov	r1, sp
   1fdcc:	4802      	ldr	r0, [pc, #8]	; (1fdd8 <ble_gattc_extract_expired+0x28>)
   1fdce:	f7ff ffb3 	bl	1fd38 <ble_gattc_extract>
}
   1fdd2:	9801      	ldr	r0, [sp, #4]
   1fdd4:	b002      	add	sp, #8
   1fdd6:	bd10      	pop	{r4, pc}
   1fdd8:	0001f7f5 	.word	0x0001f7f5

0001fddc <ble_gattc_extract_stalled>:
{
   1fddc:	b508      	push	{r3, lr}
   1fdde:	4603      	mov	r3, r0
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   1fde0:	2200      	movs	r2, #0
   1fde2:	4611      	mov	r1, r2
   1fde4:	4801      	ldr	r0, [pc, #4]	; (1fdec <ble_gattc_extract_stalled+0x10>)
   1fde6:	f7ff ffa7 	bl	1fd38 <ble_gattc_extract>
}
   1fdea:	bd08      	pop	{r3, pc}
   1fdec:	0001f813 	.word	0x0001f813

0001fdf0 <ble_gattc_extract_by_conn_op>:
{
   1fdf0:	b500      	push	{lr}
   1fdf2:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   1fdf4:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   1fdf8:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   1fdfc:	a901      	add	r1, sp, #4
   1fdfe:	4803      	ldr	r0, [pc, #12]	; (1fe0c <ble_gattc_extract_by_conn_op+0x1c>)
   1fe00:	f7ff ff9a 	bl	1fd38 <ble_gattc_extract>
}
   1fe04:	b003      	add	sp, #12
   1fe06:	f85d fb04 	ldr.w	pc, [sp], #4
   1fe0a:	bf00      	nop
   1fe0c:	0001f7d1 	.word	0x0001f7d1

0001fe10 <ble_gattc_extract_first_by_conn_op>:
{
   1fe10:	b500      	push	{lr}
   1fe12:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   1fe14:	466b      	mov	r3, sp
   1fe16:	2201      	movs	r2, #1
   1fe18:	f7ff ffea 	bl	1fdf0 <ble_gattc_extract_by_conn_op>
}
   1fe1c:	9800      	ldr	r0, [sp, #0]
   1fe1e:	b003      	add	sp, #12
   1fe20:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe24 <ble_gattc_proc_insert>:
{
   1fe24:	b510      	push	{r4, lr}
   1fe26:	4604      	mov	r4, r0
    ble_hs_lock();
   1fe28:	f001 fd20 	bl	2186c <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   1fe2c:	2300      	movs	r3, #0
   1fe2e:	6023      	str	r3, [r4, #0]
   1fe30:	4b03      	ldr	r3, [pc, #12]	; (1fe40 <ble_gattc_proc_insert+0x1c>)
   1fe32:	685a      	ldr	r2, [r3, #4]
   1fe34:	6014      	str	r4, [r2, #0]
   1fe36:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   1fe38:	f001 fd1c 	bl	21874 <ble_hs_unlock>
}
   1fe3c:	bd10      	pop	{r4, pc}
   1fe3e:	bf00      	nop
   1fe40:	20003218 	.word	0x20003218

0001fe44 <ble_gatts_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gatts_indicate_tmo(struct ble_gattc_proc *proc)
{
   1fe44:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   1fe46:	2301      	movs	r3, #1
   1fe48:	8982      	ldrh	r2, [r0, #12]
   1fe4a:	8901      	ldrh	r1, [r0, #8]
   1fe4c:	200d      	movs	r0, #13
   1fe4e:	f7ff fb57 	bl	1f500 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   1fe52:	bd08      	pop	{r3, pc}

0001fe54 <ble_gattc_write_cb>:
{
   1fe54:	b570      	push	{r4, r5, r6, lr}
   1fe56:	b082      	sub	sp, #8
   1fe58:	4604      	mov	r4, r0
    if (status != 0 && status != BLE_HS_EDONE) {
   1fe5a:	4608      	mov	r0, r1
   1fe5c:	b129      	cbz	r1, 1fe6a <ble_gattc_write_cb+0x16>
   1fe5e:	290e      	cmp	r1, #14
   1fe60:	d003      	beq.n	1fe6a <ble_gattc_write_cb+0x16>
        STATS_INC(ble_gattc_stats, write_fail);
   1fe62:	490c      	ldr	r1, [pc, #48]	; (1fe94 <ble_gattc_write_cb+0x40>)
   1fe64:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   1fe66:	3301      	adds	r3, #1
   1fe68:	670b      	str	r3, [r1, #112]	; 0x70
    if (proc->write.cb == NULL) {
   1fe6a:	6925      	ldr	r5, [r4, #16]
   1fe6c:	b185      	cbz	r5, 1fe90 <ble_gattc_write_cb+0x3c>
        memset(&attr, 0, sizeof attr);
   1fe6e:	2300      	movs	r3, #0
   1fe70:	9300      	str	r3, [sp, #0]
   1fe72:	9301      	str	r3, [sp, #4]
        attr.handle = proc->write.att_handle;
   1fe74:	89a3      	ldrh	r3, [r4, #12]
   1fe76:	f8ad 3000 	strh.w	r3, [sp]
        rc = proc->write.cb(proc->conn_handle,
   1fe7a:	8926      	ldrh	r6, [r4, #8]
                            ble_gattc_error(status, att_handle),
   1fe7c:	4611      	mov	r1, r2
   1fe7e:	f7ff fcd7 	bl	1f830 <ble_gattc_error>
   1fe82:	4601      	mov	r1, r0
        rc = proc->write.cb(proc->conn_handle,
   1fe84:	6963      	ldr	r3, [r4, #20]
   1fe86:	466a      	mov	r2, sp
   1fe88:	4630      	mov	r0, r6
   1fe8a:	47a8      	blx	r5
}
   1fe8c:	b002      	add	sp, #8
   1fe8e:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1fe90:	2000      	movs	r0, #0
    return rc;
   1fe92:	e7fb      	b.n	1fe8c <ble_gattc_write_cb+0x38>
   1fe94:	20003224 	.word	0x20003224

0001fe98 <ble_gattc_write_tmo>:
{
   1fe98:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   1fe9a:	2200      	movs	r2, #0
   1fe9c:	210d      	movs	r1, #13
   1fe9e:	f7ff ffd9 	bl	1fe54 <ble_gattc_write_cb>
}
   1fea2:	bd08      	pop	{r3, pc}

0001fea4 <ble_gattc_write_err>:
{
   1fea4:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   1fea6:	f7ff ffd5 	bl	1fe54 <ble_gattc_write_cb>
}
   1feaa:	bd08      	pop	{r3, pc}

0001feac <ble_gattc_proc_free>:
    if (proc != NULL) {
   1feac:	b128      	cbz	r0, 1feba <ble_gattc_proc_free+0xe>
{
   1feae:	b508      	push	{r3, lr}
   1feb0:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   1feb2:	4802      	ldr	r0, [pc, #8]	; (1febc <ble_gattc_proc_free+0x10>)
   1feb4:	f7ed fee3 	bl	dc7e <os_memblock_put>
}
   1feb8:	bd08      	pop	{r3, pc}
   1feba:	4770      	bx	lr
   1febc:	200031fc 	.word	0x200031fc

0001fec0 <ble_gattc_fail_procs>:
{
   1fec0:	b530      	push	{r4, r5, lr}
   1fec2:	b083      	sub	sp, #12
   1fec4:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   1fec6:	466b      	mov	r3, sp
   1fec8:	2200      	movs	r2, #0
   1feca:	f7ff ff91 	bl	1fdf0 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1fece:	e004      	b.n	1feda <ble_gattc_fail_procs+0x1a>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   1fed0:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   1fed4:	4620      	mov	r0, r4
   1fed6:	f7ff ffe9 	bl	1feac <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1feda:	9c00      	ldr	r4, [sp, #0]
   1fedc:	b16c      	cbz	r4, 1fefa <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   1fede:	7aa0      	ldrb	r0, [r4, #10]
   1fee0:	f7ff fc64 	bl	1f7ac <ble_gattc_err_dispatch_get>
   1fee4:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   1fee6:	2200      	movs	r2, #0
   1fee8:	4629      	mov	r1, r5
   1feea:	4620      	mov	r0, r4
   1feec:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   1feee:	9b00      	ldr	r3, [sp, #0]
   1fef0:	681b      	ldr	r3, [r3, #0]
   1fef2:	9300      	str	r3, [sp, #0]
   1fef4:	2b00      	cmp	r3, #0
   1fef6:	d1ed      	bne.n	1fed4 <ble_gattc_fail_procs+0x14>
   1fef8:	e7ea      	b.n	1fed0 <ble_gattc_fail_procs+0x10>
}
   1fefa:	b003      	add	sp, #12
   1fefc:	bd30      	pop	{r4, r5, pc}

0001fefe <ble_gattc_write_reliable_err>:
{
   1fefe:	b510      	push	{r4, lr}
   1ff00:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   1ff02:	f7ff feb5 	bl	1fc70 <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   1ff06:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1ff0a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1ff0e:	429a      	cmp	r2, r3
   1ff10:	d300      	bcc.n	1ff14 <ble_gattc_write_reliable_err+0x16>
}
   1ff12:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   1ff14:	2100      	movs	r1, #0
   1ff16:	8920      	ldrh	r0, [r4, #8]
   1ff18:	f7fc fcde 	bl	1c8d8 <ble_att_clt_tx_exec_write>
}
   1ff1c:	e7f9      	b.n	1ff12 <ble_gattc_write_reliable_err+0x14>

0001ff1e <ble_gattc_write_long_err>:
{
   1ff1e:	b570      	push	{r4, r5, r6, lr}
   1ff20:	4604      	mov	r4, r0
   1ff22:	460d      	mov	r5, r1
   1ff24:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   1ff26:	89c3      	ldrh	r3, [r0, #14]
   1ff28:	b11b      	cbz	r3, 1ff32 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1ff2a:	6902      	ldr	r2, [r0, #16]
   1ff2c:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   1ff2e:	4293      	cmp	r3, r2
   1ff30:	d305      	bcc.n	1ff3e <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   1ff32:	4632      	mov	r2, r6
   1ff34:	4629      	mov	r1, r5
   1ff36:	4620      	mov	r0, r4
   1ff38:	f7ff fe78 	bl	1fc2c <ble_gattc_write_long_cb>
}
   1ff3c:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   1ff3e:	2100      	movs	r1, #0
   1ff40:	8900      	ldrh	r0, [r0, #8]
   1ff42:	f7fc fcc9 	bl	1c8d8 <ble_att_clt_tx_exec_write>
   1ff46:	e7f4      	b.n	1ff32 <ble_gattc_write_long_err+0x14>

0001ff48 <ble_gattc_write_reliable_tx>:
{
   1ff48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff4c:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   1ff4e:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   1ff52:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1ff56:	429d      	cmp	r5, r3
   1ff58:	d226      	bcs.n	1ffa8 <ble_gattc_write_reliable_tx+0x60>
    attr = proc->write_reliable.attrs + attr_idx;
   1ff5a:	f100 070c 	add.w	r7, r0, #12
   1ff5e:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   1ff62:	8900      	ldrh	r0, [r0, #8]
   1ff64:	f7fc fc0b 	bl	1c77e <ble_att_mtu>
   1ff68:	3805      	subs	r0, #5
   1ff6a:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   1ff6c:	b348      	cbz	r0, 1ffc2 <ble_gattc_write_reliable_tx+0x7a>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   1ff6e:	6873      	ldr	r3, [r6, #4]
   1ff70:	8a1b      	ldrh	r3, [r3, #16]
   1ff72:	8872      	ldrh	r2, [r6, #2]
   1ff74:	1a9b      	subs	r3, r3, r2
   1ff76:	4298      	cmp	r0, r3
   1ff78:	bfa8      	it	ge
   1ff7a:	4618      	movge	r0, r3
    proc->write_reliable.length =
   1ff7c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   1ff7e:	f003 fa5a 	bl	23436 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   1ff82:	4680      	mov	r8, r0
   1ff84:	b308      	cbz	r0, 1ffca <ble_gattc_write_reliable_tx+0x82>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   1ff86:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1ff88:	8872      	ldrh	r2, [r6, #2]
   1ff8a:	6871      	ldr	r1, [r6, #4]
   1ff8c:	f7ed faf0 	bl	d570 <os_mbuf_appendfrom>
    if (rc != 0) {
   1ff90:	b9e8      	cbnz	r0, 1ffce <ble_gattc_write_reliable_tx+0x86>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   1ff92:	4643      	mov	r3, r8
   1ff94:	8872      	ldrh	r2, [r6, #2]
   1ff96:	f837 1035 	ldrh.w	r1, [r7, r5, lsl #3]
   1ff9a:	8920      	ldrh	r0, [r4, #8]
   1ff9c:	f7fc fc98 	bl	1c8d0 <ble_att_clt_tx_prep_write>
   1ffa0:	4604      	mov	r4, r0
    om = NULL;
   1ffa2:	f04f 0800 	mov.w	r8, #0
done:
   1ffa6:	e006      	b.n	1ffb6 <ble_gattc_write_reliable_tx+0x6e>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   1ffa8:	2101      	movs	r1, #1
   1ffaa:	8900      	ldrh	r0, [r0, #8]
   1ffac:	f7fc fc94 	bl	1c8d8 <ble_att_clt_tx_exec_write>
   1ffb0:	4604      	mov	r4, r0
    om = NULL;
   1ffb2:	f04f 0800 	mov.w	r8, #0
    os_mbuf_free_chain(om);
   1ffb6:	4640      	mov	r0, r8
   1ffb8:	f7ed fa5c 	bl	d474 <os_mbuf_free_chain>
}
   1ffbc:	4620      	mov	r0, r4
   1ffbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   1ffc2:	2407      	movs	r4, #7
    om = NULL;
   1ffc4:	f04f 0800 	mov.w	r8, #0
   1ffc8:	e7f5      	b.n	1ffb6 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   1ffca:	2406      	movs	r4, #6
   1ffcc:	e7f3      	b.n	1ffb6 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   1ffce:	2406      	movs	r4, #6
   1ffd0:	e7f1      	b.n	1ffb6 <ble_gattc_write_reliable_tx+0x6e>

0001ffd2 <ble_gattc_write_reliable_resume>:
{
   1ffd2:	b538      	push	{r3, r4, r5, lr}
   1ffd4:	4604      	mov	r4, r0
    status = ble_gattc_write_reliable_tx(proc);
   1ffd6:	f7ff ffb7 	bl	1ff48 <ble_gattc_write_reliable_tx>
   1ffda:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1ffdc:	4620      	mov	r0, r4
   1ffde:	f7ff fe85 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   1ffe2:	4605      	mov	r5, r0
   1ffe4:	b908      	cbnz	r0, 1ffea <ble_gattc_write_reliable_resume+0x18>
}
   1ffe6:	4628      	mov	r0, r5
   1ffe8:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   1ffea:	2200      	movs	r2, #0
   1ffec:	4601      	mov	r1, r0
   1ffee:	4620      	mov	r0, r4
   1fff0:	f7ff fe3e 	bl	1fc70 <ble_gattc_write_reliable_cb>
        return rc;
   1fff4:	e7f7      	b.n	1ffe6 <ble_gattc_write_reliable_resume+0x14>

0001fff6 <ble_gattc_write_long_tx>:
{
   1fff6:	b538      	push	{r3, r4, r5, lr}
   1fff8:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   1fffa:	8900      	ldrh	r0, [r0, #8]
   1fffc:	f7fc fbbf 	bl	1c77e <ble_att_mtu>
   20000:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   20002:	2a00      	cmp	r2, #0
   20004:	dd27      	ble.n	20056 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   20006:	6923      	ldr	r3, [r4, #16]
   20008:	8a1b      	ldrh	r3, [r3, #16]
   2000a:	89e0      	ldrh	r0, [r4, #14]
   2000c:	1a18      	subs	r0, r3, r0
   2000e:	4290      	cmp	r0, r2
   20010:	bfa8      	it	ge
   20012:	4610      	movge	r0, r2
    if (write_len <= 0) {
   20014:	2800      	cmp	r0, #0
   20016:	dd17      	ble.n	20048 <ble_gattc_write_long_tx+0x52>
    proc->write_long.length = write_len;
   20018:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   2001a:	f003 fa0c 	bl	23436 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2001e:	4605      	mov	r5, r0
   20020:	b1e0      	cbz	r0, 2005c <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   20022:	8aa3      	ldrh	r3, [r4, #20]
   20024:	89e2      	ldrh	r2, [r4, #14]
   20026:	6921      	ldr	r1, [r4, #16]
   20028:	f7ed faa2 	bl	d570 <os_mbuf_appendfrom>
    if (rc != 0) {
   2002c:	b9c0      	cbnz	r0, 20060 <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   2002e:	462b      	mov	r3, r5
   20030:	89e2      	ldrh	r2, [r4, #14]
   20032:	89a1      	ldrh	r1, [r4, #12]
   20034:	8920      	ldrh	r0, [r4, #8]
   20036:	f7fc fc4b 	bl	1c8d0 <ble_att_clt_tx_prep_write>
   2003a:	4604      	mov	r4, r0
    om = NULL;
   2003c:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   2003e:	4628      	mov	r0, r5
   20040:	f7ed fa18 	bl	d474 <os_mbuf_free_chain>
}
   20044:	4620      	mov	r0, r4
   20046:	bd38      	pop	{r3, r4, r5, pc}
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   20048:	2101      	movs	r1, #1
   2004a:	8920      	ldrh	r0, [r4, #8]
   2004c:	f7fc fc44 	bl	1c8d8 <ble_att_clt_tx_exec_write>
   20050:	4604      	mov	r4, r0
    om = NULL;
   20052:	2500      	movs	r5, #0
        goto done;
   20054:	e7f3      	b.n	2003e <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOTCONN;
   20056:	2407      	movs	r4, #7
    om = NULL;
   20058:	2500      	movs	r5, #0
   2005a:	e7f0      	b.n	2003e <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   2005c:	2406      	movs	r4, #6
   2005e:	e7ee      	b.n	2003e <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   20060:	2406      	movs	r4, #6
   20062:	e7ec      	b.n	2003e <ble_gattc_write_long_tx+0x48>

00020064 <ble_gattc_write_long_resume>:
{
   20064:	b538      	push	{r3, r4, r5, lr}
   20066:	4604      	mov	r4, r0
    status = ble_gattc_write_long_tx(proc);
   20068:	f7ff ffc5 	bl	1fff6 <ble_gattc_write_long_tx>
   2006c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2006e:	4620      	mov	r0, r4
   20070:	f7ff fe3c 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   20074:	4605      	mov	r5, r0
   20076:	b908      	cbnz	r0, 2007c <ble_gattc_write_long_resume+0x18>
}
   20078:	4628      	mov	r0, r5
   2007a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   2007c:	2200      	movs	r2, #0
   2007e:	4601      	mov	r1, r0
   20080:	4620      	mov	r0, r4
   20082:	f7ff fdd3 	bl	1fc2c <ble_gattc_write_long_cb>
        return rc;
   20086:	e7f7      	b.n	20078 <ble_gattc_write_long_resume+0x14>

00020088 <ble_gattc_read_long_tx>:
{
   20088:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   2008a:	89c2      	ldrh	r2, [r0, #14]
   2008c:	b922      	cbnz	r2, 20098 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   2008e:	8981      	ldrh	r1, [r0, #12]
   20090:	8900      	ldrh	r0, [r0, #8]
   20092:	f7fc fc0d 	bl	1c8b0 <ble_att_clt_tx_read>
}
   20096:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   20098:	8981      	ldrh	r1, [r0, #12]
   2009a:	8900      	ldrh	r0, [r0, #8]
   2009c:	f7fc fc0c 	bl	1c8b8 <ble_att_clt_tx_read_blob>
        if (rc != 0) {
   200a0:	e7f9      	b.n	20096 <ble_gattc_read_long_tx+0xe>

000200a2 <ble_gattc_read_long_resume>:
{
   200a2:	b538      	push	{r3, r4, r5, lr}
   200a4:	4604      	mov	r4, r0
    status = ble_gattc_read_long_tx(proc);
   200a6:	f7ff ffef 	bl	20088 <ble_gattc_read_long_tx>
   200aa:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   200ac:	4620      	mov	r0, r4
   200ae:	f7ff fe1d 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   200b2:	4605      	mov	r5, r0
   200b4:	b908      	cbnz	r0, 200ba <ble_gattc_read_long_resume+0x18>
}
   200b6:	4628      	mov	r0, r5
   200b8:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   200ba:	2300      	movs	r3, #0
   200bc:	461a      	mov	r2, r3
   200be:	4601      	mov	r1, r0
   200c0:	4620      	mov	r0, r4
   200c2:	f7ff fd55 	bl	1fb70 <ble_gattc_read_long_cb>
        return rc;
   200c6:	e7f6      	b.n	200b6 <ble_gattc_read_long_resume+0x14>

000200c8 <ble_gattc_disc_all_dscs_tx>:
{
   200c8:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   200ca:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   200cc:	3101      	adds	r1, #1
   200ce:	8a02      	ldrh	r2, [r0, #16]
   200d0:	b289      	uxth	r1, r1
   200d2:	8900      	ldrh	r0, [r0, #8]
   200d4:	f7fc fbe0 	bl	1c898 <ble_att_clt_tx_find_info>
}
   200d8:	bd08      	pop	{r3, pc}

000200da <ble_gattc_disc_all_dscs_resume>:
{
   200da:	b538      	push	{r3, r4, r5, lr}
   200dc:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   200de:	f7ff fff3 	bl	200c8 <ble_gattc_disc_all_dscs_tx>
   200e2:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   200e4:	4620      	mov	r0, r4
   200e6:	f7ff fe01 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   200ea:	4605      	mov	r5, r0
   200ec:	b908      	cbnz	r0, 200f2 <ble_gattc_disc_all_dscs_resume+0x18>
}
   200ee:	4628      	mov	r0, r5
   200f0:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   200f2:	2300      	movs	r3, #0
   200f4:	461a      	mov	r2, r3
   200f6:	4601      	mov	r1, r0
   200f8:	4620      	mov	r0, r4
   200fa:	f7ff fcb7 	bl	1fa6c <ble_gattc_disc_all_dscs_cb>
        return rc;
   200fe:	e7f6      	b.n	200ee <ble_gattc_disc_all_dscs_resume+0x14>

00020100 <ble_gattc_disc_chr_uuid_tx>:
{
   20100:	b500      	push	{lr}
   20102:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   20104:	4b06      	ldr	r3, [pc, #24]	; (20120 <ble_gattc_disc_chr_uuid_tx+0x20>)
   20106:	681b      	ldr	r3, [r3, #0]
   20108:	9301      	str	r3, [sp, #4]
                                  proc->disc_chr_uuid.prev_handle + 1,
   2010a:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   2010c:	3101      	adds	r1, #1
   2010e:	ab01      	add	r3, sp, #4
   20110:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   20112:	b289      	uxth	r1, r1
   20114:	8900      	ldrh	r0, [r0, #8]
   20116:	f7fc fbc7 	bl	1c8a8 <ble_att_clt_tx_read_type>
}
   2011a:	b003      	add	sp, #12
   2011c:	f85d fb04 	ldr.w	pc, [sp], #4
   20120:	0002e1fc 	.word	0x0002e1fc

00020124 <ble_gattc_disc_chr_uuid_resume>:
{
   20124:	b538      	push	{r3, r4, r5, lr}
   20126:	4604      	mov	r4, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   20128:	f7ff ffea 	bl	20100 <ble_gattc_disc_chr_uuid_tx>
   2012c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2012e:	4620      	mov	r0, r4
   20130:	f7ff fddc 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   20134:	4605      	mov	r5, r0
   20136:	b908      	cbnz	r0, 2013c <ble_gattc_disc_chr_uuid_resume+0x18>
}
   20138:	4628      	mov	r0, r5
   2013a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   2013c:	2300      	movs	r3, #0
   2013e:	461a      	mov	r2, r3
   20140:	4601      	mov	r1, r0
   20142:	4620      	mov	r0, r4
   20144:	f7ff fc64 	bl	1fa10 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   20148:	e7f6      	b.n	20138 <ble_gattc_disc_chr_uuid_resume+0x14>
	...

0002014c <ble_gattc_disc_all_chrs_tx>:
{
   2014c:	b500      	push	{lr}
   2014e:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   20150:	4b06      	ldr	r3, [pc, #24]	; (2016c <ble_gattc_disc_all_chrs_tx+0x20>)
   20152:	681b      	ldr	r3, [r3, #0]
   20154:	9301      	str	r3, [sp, #4]
                                  proc->disc_all_chrs.prev_handle + 1,
   20156:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   20158:	3101      	adds	r1, #1
   2015a:	ab01      	add	r3, sp, #4
   2015c:	89c2      	ldrh	r2, [r0, #14]
   2015e:	b289      	uxth	r1, r1
   20160:	8900      	ldrh	r0, [r0, #8]
   20162:	f7fc fba1 	bl	1c8a8 <ble_att_clt_tx_read_type>
}
   20166:	b003      	add	sp, #12
   20168:	f85d fb04 	ldr.w	pc, [sp], #4
   2016c:	0002e1fc 	.word	0x0002e1fc

00020170 <ble_gattc_disc_all_chrs_resume>:
{
   20170:	b538      	push	{r3, r4, r5, lr}
   20172:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   20174:	f7ff ffea 	bl	2014c <ble_gattc_disc_all_chrs_tx>
   20178:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2017a:	4620      	mov	r0, r4
   2017c:	f7ff fdb6 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   20180:	4605      	mov	r5, r0
   20182:	b908      	cbnz	r0, 20188 <ble_gattc_disc_all_chrs_resume+0x18>
}
   20184:	4628      	mov	r0, r5
   20186:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   20188:	2300      	movs	r3, #0
   2018a:	461a      	mov	r2, r3
   2018c:	4601      	mov	r1, r0
   2018e:	4620      	mov	r0, r4
   20190:	f7ff fc10 	bl	1f9b4 <ble_gattc_disc_all_chrs_cb>
        return rc;
   20194:	e7f6      	b.n	20184 <ble_gattc_disc_all_chrs_resume+0x14>
	...

00020198 <ble_gattc_find_inc_svcs_tx>:
{
   20198:	b500      	push	{lr}
   2019a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   2019c:	4b09      	ldr	r3, [pc, #36]	; (201c4 <ble_gattc_find_inc_svcs_tx+0x2c>)
   2019e:	685b      	ldr	r3, [r3, #4]
   201a0:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   201a2:	8a01      	ldrh	r1, [r0, #16]
   201a4:	b951      	cbnz	r1, 201bc <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   201a6:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   201a8:	3101      	adds	r1, #1
   201aa:	ab01      	add	r3, sp, #4
   201ac:	89c2      	ldrh	r2, [r0, #14]
   201ae:	b289      	uxth	r1, r1
   201b0:	8900      	ldrh	r0, [r0, #8]
   201b2:	f7fc fb79 	bl	1c8a8 <ble_att_clt_tx_read_type>
}
   201b6:	b003      	add	sp, #12
   201b8:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   201bc:	8900      	ldrh	r0, [r0, #8]
   201be:	f7fc fb77 	bl	1c8b0 <ble_att_clt_tx_read>
        if (rc != 0) {
   201c2:	e7f8      	b.n	201b6 <ble_gattc_find_inc_svcs_tx+0x1e>
   201c4:	0002e1fc 	.word	0x0002e1fc

000201c8 <ble_gattc_find_inc_svcs_resume>:
{
   201c8:	b538      	push	{r3, r4, r5, lr}
   201ca:	4604      	mov	r4, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   201cc:	f7ff ffe4 	bl	20198 <ble_gattc_find_inc_svcs_tx>
   201d0:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   201d2:	4620      	mov	r0, r4
   201d4:	f7ff fd8a 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   201d8:	4605      	mov	r5, r0
   201da:	b908      	cbnz	r0, 201e0 <ble_gattc_find_inc_svcs_resume+0x18>
}
   201dc:	4628      	mov	r0, r5
   201de:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   201e0:	2300      	movs	r3, #0
   201e2:	461a      	mov	r2, r3
   201e4:	4601      	mov	r1, r0
   201e6:	4620      	mov	r0, r4
   201e8:	f7ff fbb4 	bl	1f954 <ble_gattc_find_inc_svcs_cb>
        return rc;
   201ec:	e7f6      	b.n	201dc <ble_gattc_find_inc_svcs_resume+0x14>

000201ee <ble_gattc_disc_svc_uuid_tx>:
{
   201ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   201f0:	b087      	sub	sp, #28
   201f2:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   201f4:	f100 060c 	add.w	r6, r0, #12
   201f8:	ad02      	add	r5, sp, #8
   201fa:	4629      	mov	r1, r5
   201fc:	4630      	mov	r0, r6
   201fe:	f006 f95f 	bl	264c0 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   20202:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   20204:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   20206:	4630      	mov	r0, r6
   20208:	f006 f986 	bl	26518 <ble_uuid_length>
   2020c:	1c61      	adds	r1, r4, #1
   2020e:	9001      	str	r0, [sp, #4]
   20210:	9500      	str	r5, [sp, #0]
   20212:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   20216:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2021a:	b289      	uxth	r1, r1
   2021c:	4638      	mov	r0, r7
   2021e:	f7fc fb3f 	bl	1c8a0 <ble_att_clt_tx_find_type_value>
}
   20222:	b007      	add	sp, #28
   20224:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020226 <ble_gattc_disc_svc_uuid_resume>:
{
   20226:	b538      	push	{r3, r4, r5, lr}
   20228:	4604      	mov	r4, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   2022a:	f7ff ffe0 	bl	201ee <ble_gattc_disc_svc_uuid_tx>
   2022e:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   20230:	4620      	mov	r0, r4
   20232:	f7ff fd5b 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   20236:	4605      	mov	r5, r0
   20238:	b908      	cbnz	r0, 2023e <ble_gattc_disc_svc_uuid_resume+0x18>
}
   2023a:	4628      	mov	r0, r5
   2023c:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   2023e:	2300      	movs	r3, #0
   20240:	461a      	mov	r2, r3
   20242:	4601      	mov	r1, r0
   20244:	4620      	mov	r0, r4
   20246:	f7ff fb57 	bl	1f8f8 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   2024a:	e7f6      	b.n	2023a <ble_gattc_disc_svc_uuid_resume+0x14>

0002024c <ble_gattc_disc_all_svcs_tx>:
{
   2024c:	b500      	push	{lr}
   2024e:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   20250:	4b07      	ldr	r3, [pc, #28]	; (20270 <ble_gattc_disc_all_svcs_tx+0x24>)
   20252:	689b      	ldr	r3, [r3, #8]
   20254:	9301      	str	r3, [sp, #4]
                                        proc->disc_all_svcs.prev_handle + 1,
   20256:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   20258:	3101      	adds	r1, #1
   2025a:	ab01      	add	r3, sp, #4
   2025c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20260:	b289      	uxth	r1, r1
   20262:	8900      	ldrh	r0, [r0, #8]
   20264:	f7fc fb2e 	bl	1c8c4 <ble_att_clt_tx_read_group_type>
}
   20268:	b003      	add	sp, #12
   2026a:	f85d fb04 	ldr.w	pc, [sp], #4
   2026e:	bf00      	nop
   20270:	0002e1fc 	.word	0x0002e1fc

00020274 <ble_gattc_disc_all_svcs_resume>:
{
   20274:	b538      	push	{r3, r4, r5, lr}
   20276:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   20278:	f7ff ffe8 	bl	2024c <ble_gattc_disc_all_svcs_tx>
   2027c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   2027e:	4620      	mov	r0, r4
   20280:	f7ff fd34 	bl	1fcec <ble_gattc_process_resume_status>
    if (rc != 0) {
   20284:	4605      	mov	r5, r0
   20286:	b908      	cbnz	r0, 2028c <ble_gattc_disc_all_svcs_resume+0x18>
}
   20288:	4628      	mov	r0, r5
   2028a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   2028c:	2300      	movs	r3, #0
   2028e:	461a      	mov	r2, r3
   20290:	b281      	uxth	r1, r0
   20292:	4620      	mov	r0, r4
   20294:	f7ff fb02 	bl	1f89c <ble_gattc_disc_all_svcs_cb>
        return rc;
   20298:	e7f6      	b.n	20288 <ble_gattc_disc_all_svcs_resume+0x14>

0002029a <ble_gattc_process_status>:
{
   2029a:	b510      	push	{r4, lr}
   2029c:	4604      	mov	r4, r0
    switch (status) {
   2029e:	b961      	cbnz	r1, 202ba <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   202a0:	7ac3      	ldrb	r3, [r0, #11]
   202a2:	f013 0f01 	tst.w	r3, #1
   202a6:	d005      	beq.n	202b4 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   202a8:	4620      	mov	r0, r4
   202aa:	f7ff fdbb 	bl	1fe24 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   202ae:	f001 fbcd 	bl	21a4c <ble_hs_timer_resched>
}
   202b2:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   202b4:	f7ff fd24 	bl	1fd00 <ble_gattc_proc_set_exp_timer>
   202b8:	e7f6      	b.n	202a8 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   202ba:	f7ff fdf7 	bl	1feac <ble_gattc_proc_free>
}
   202be:	e7f8      	b.n	202b2 <ble_gattc_process_status+0x18>

000202c0 <ble_gattc_resume_procs>:
{
   202c0:	b510      	push	{r4, lr}
   202c2:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   202c4:	4b0c      	ldr	r3, [pc, #48]	; (202f8 <ble_gattc_resume_procs+0x38>)
   202c6:	2200      	movs	r2, #0
   202c8:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   202ca:	4668      	mov	r0, sp
   202cc:	f7ff fd86 	bl	1fddc <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   202d0:	9c00      	ldr	r4, [sp, #0]
   202d2:	b17c      	cbz	r4, 202f4 <ble_gattc_resume_procs+0x34>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   202d4:	7aa0      	ldrb	r0, [r4, #10]
   202d6:	f7ff fa6f 	bl	1f7b8 <ble_gattc_resume_dispatch_get>
   202da:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   202dc:	7ae3      	ldrb	r3, [r4, #11]
   202de:	f023 0301 	bic.w	r3, r3, #1
   202e2:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   202e4:	4620      	mov	r0, r4
   202e6:	4790      	blx	r2
   202e8:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   202ea:	4620      	mov	r0, r4
   202ec:	f7ff ffd5 	bl	2029a <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   202f0:	6824      	ldr	r4, [r4, #0]
   202f2:	e7ee      	b.n	202d2 <ble_gattc_resume_procs+0x12>
}
   202f4:	b002      	add	sp, #8
   202f6:	bd10      	pop	{r4, pc}
   202f8:	20003220 	.word	0x20003220

000202fc <ble_gattc_proc_alloc>:
{
   202fc:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   202fe:	4805      	ldr	r0, [pc, #20]	; (20314 <ble_gattc_proc_alloc+0x18>)
   20300:	f7ed fc95 	bl	dc2e <os_memblock_get>
    if (proc != NULL) {
   20304:	4604      	mov	r4, r0
   20306:	b118      	cbz	r0, 20310 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   20308:	2238      	movs	r2, #56	; 0x38
   2030a:	2100      	movs	r1, #0
   2030c:	f7ee fb79 	bl	ea02 <memset>
}
   20310:	4620      	mov	r0, r4
   20312:	bd10      	pop	{r4, pc}
   20314:	200031fc 	.word	0x200031fc

00020318 <ble_gattc_log_proc_init>:
{
   20318:	b508      	push	{r3, lr}
   2031a:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   2031c:	4a02      	ldr	r2, [pc, #8]	; (20328 <ble_gattc_log_proc_init+0x10>)
   2031e:	2101      	movs	r1, #1
   20320:	2004      	movs	r0, #4
   20322:	f7f1 f989 	bl	11638 <modlog_printf>
}
   20326:	bd08      	pop	{r3, pc}
   20328:	0002e194 	.word	0x0002e194

0002032c <ble_gattc_log_notify>:
{
   2032c:	b510      	push	{r4, lr}
   2032e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   20330:	4804      	ldr	r0, [pc, #16]	; (20344 <ble_gattc_log_notify+0x18>)
   20332:	f7ff fff1 	bl	20318 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   20336:	4623      	mov	r3, r4
   20338:	4a03      	ldr	r2, [pc, #12]	; (20348 <ble_gattc_log_notify+0x1c>)
   2033a:	2101      	movs	r1, #1
   2033c:	2004      	movs	r0, #4
   2033e:	f7f1 f97b 	bl	11638 <modlog_printf>
}
   20342:	bd10      	pop	{r4, pc}
   20344:	0002e1b4 	.word	0x0002e1b4
   20348:	0002e1c0 	.word	0x0002e1c0

0002034c <ble_gattc_log_indicate>:
{
   2034c:	b510      	push	{r4, lr}
   2034e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   20350:	4804      	ldr	r0, [pc, #16]	; (20364 <ble_gattc_log_indicate+0x18>)
   20352:	f7ff ffe1 	bl	20318 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   20356:	4623      	mov	r3, r4
   20358:	4a03      	ldr	r2, [pc, #12]	; (20368 <ble_gattc_log_indicate+0x1c>)
   2035a:	2101      	movs	r1, #1
   2035c:	2004      	movs	r0, #4
   2035e:	f7f1 f96b 	bl	11638 <modlog_printf>
}
   20362:	bd10      	pop	{r4, pc}
   20364:	0002e1d0 	.word	0x0002e1d0
   20368:	0002e1c0 	.word	0x0002e1c0

0002036c <ble_gatts_indicate_err>:
{
   2036c:	b538      	push	{r3, r4, r5, lr}
   2036e:	4604      	mov	r4, r0
   20370:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   20372:	2907      	cmp	r1, #7
   20374:	d004      	beq.n	20380 <ble_gatts_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   20376:	8981      	ldrh	r1, [r0, #12]
   20378:	8900      	ldrh	r0, [r0, #8]
   2037a:	f001 f84d 	bl	21418 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   2037e:	b940      	cbnz	r0, 20392 <ble_gatts_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   20380:	2301      	movs	r3, #1
   20382:	89a2      	ldrh	r2, [r4, #12]
   20384:	8921      	ldrh	r1, [r4, #8]
   20386:	4628      	mov	r0, r5
   20388:	f7ff f8ba 	bl	1f500 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   2038c:	8920      	ldrh	r0, [r4, #8]
   2038e:	f001 f817 	bl	213c0 <ble_gatts_send_next_indicate>
}
   20392:	bd38      	pop	{r3, r4, r5, pc}

00020394 <ble_gatts_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gatts_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   20394:	b510      	push	{r4, lr}
   20396:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   20398:	8981      	ldrh	r1, [r0, #12]
   2039a:	8900      	ldrh	r0, [r0, #8]
   2039c:	f001 f83c 	bl	21418 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   203a0:	b100      	cbz	r0, 203a4 <ble_gatts_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   203a2:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   203a4:	2301      	movs	r3, #1
   203a6:	89a2      	ldrh	r2, [r4, #12]
   203a8:	8921      	ldrh	r1, [r4, #8]
   203aa:	200e      	movs	r0, #14
   203ac:	f7ff f8a8 	bl	1f500 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   203b0:	8920      	ldrh	r0, [r4, #8]
   203b2:	f001 f805 	bl	213c0 <ble_gatts_send_next_indicate>
   203b6:	e7f4      	b.n	203a2 <ble_gatts_indicate_rx_rsp+0xe>

000203b8 <ble_gattc_timer>:
{
   203b8:	b530      	push	{r4, r5, lr}
   203ba:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   203bc:	4668      	mov	r0, sp
   203be:	f7ff fcf7 	bl	1fdb0 <ble_gattc_extract_expired>
   203c2:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   203c4:	e004      	b.n	203d0 <ble_gattc_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   203c6:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   203ca:	4620      	mov	r0, r4
   203cc:	f7ff fd6e 	bl	1feac <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   203d0:	9c00      	ldr	r4, [sp, #0]
   203d2:	b194      	cbz	r4, 203fa <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   203d4:	4a11      	ldr	r2, [pc, #68]	; (2041c <ble_gattc_timer+0x64>)
   203d6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   203da:	3301      	adds	r3, #1
   203dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   203e0:	4620      	mov	r0, r4
   203e2:	f7ff fa1a 	bl	1f81a <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   203e6:	2113      	movs	r1, #19
   203e8:	8920      	ldrh	r0, [r4, #8]
   203ea:	f7fe fd49 	bl	1ee80 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   203ee:	9b00      	ldr	r3, [sp, #0]
   203f0:	681b      	ldr	r3, [r3, #0]
   203f2:	9300      	str	r3, [sp, #0]
   203f4:	2b00      	cmp	r3, #0
   203f6:	d1e8      	bne.n	203ca <ble_gattc_timer+0x12>
   203f8:	e7e5      	b.n	203c6 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   203fa:	f7ff fc89 	bl	1fd10 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   203fe:	4603      	mov	r3, r0
   20400:	b128      	cbz	r0, 2040e <ble_gattc_timer+0x56>
}
   20402:	42ab      	cmp	r3, r5
   20404:	bfa8      	it	ge
   20406:	462b      	movge	r3, r5
   20408:	4618      	mov	r0, r3
   2040a:	b003      	add	sp, #12
   2040c:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   2040e:	f7ff ff57 	bl	202c0 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   20412:	f7ff fc7d 	bl	1fd10 <ble_gattc_ticks_until_resume>
   20416:	4603      	mov	r3, r0
   20418:	e7f3      	b.n	20402 <ble_gattc_timer+0x4a>
   2041a:	bf00      	nop
   2041c:	20003224 	.word	0x20003224

00020420 <ble_gatts_notify_custom>:
{
   20420:	b5f0      	push	{r4, r5, r6, r7, lr}
   20422:	b083      	sub	sp, #12
   20424:	4606      	mov	r6, r0
   20426:	460d      	mov	r5, r1
   20428:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   2042a:	4a1c      	ldr	r2, [pc, #112]	; (2049c <ble_gatts_notify_custom+0x7c>)
   2042c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   20430:	3301      	adds	r3, #1
   20432:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   20436:	4608      	mov	r0, r1
   20438:	f7ff ff78 	bl	2032c <ble_gattc_log_notify>
    if (txom == NULL) {
   2043c:	b1cc      	cbz	r4, 20472 <ble_gatts_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   2043e:	4622      	mov	r2, r4
   20440:	4629      	mov	r1, r5
   20442:	4630      	mov	r0, r6
   20444:	f7fc fa4c 	bl	1c8e0 <ble_att_clt_tx_notify>
    if (rc != 0) {
   20448:	4607      	mov	r7, r0
   2044a:	b320      	cbz	r0, 20496 <ble_gatts_notify_custom+0x76>
   2044c:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   2044e:	4a13      	ldr	r2, [pc, #76]	; (2049c <ble_gatts_notify_custom+0x7c>)
   20450:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   20454:	3301      	adds	r3, #1
   20456:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   2045a:	2300      	movs	r3, #0
   2045c:	462a      	mov	r2, r5
   2045e:	4631      	mov	r1, r6
   20460:	4638      	mov	r0, r7
   20462:	f7ff f84d 	bl	1f500 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   20466:	4620      	mov	r0, r4
   20468:	f7ed f804 	bl	d474 <os_mbuf_free_chain>
}
   2046c:	4638      	mov	r0, r7
   2046e:	b003      	add	sp, #12
   20470:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   20472:	f002 ffe0 	bl	23436 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   20476:	4604      	mov	r4, r0
   20478:	b158      	cbz	r0, 20492 <ble_gatts_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   2047a:	2200      	movs	r2, #0
   2047c:	9200      	str	r2, [sp, #0]
   2047e:	4603      	mov	r3, r0
   20480:	4629      	mov	r1, r5
   20482:	f64f 70ff 	movw	r0, #65535	; 0xffff
   20486:	f7fd f933 	bl	1d6f0 <ble_att_svr_read_handle>
        if (rc != 0) {
   2048a:	2800      	cmp	r0, #0
   2048c:	d0d7      	beq.n	2043e <ble_gatts_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   2048e:	2709      	movs	r7, #9
   20490:	e7dd      	b.n	2044e <ble_gatts_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   20492:	2706      	movs	r7, #6
   20494:	e7db      	b.n	2044e <ble_gatts_notify_custom+0x2e>
   20496:	2400      	movs	r4, #0
   20498:	e7df      	b.n	2045a <ble_gatts_notify_custom+0x3a>
   2049a:	bf00      	nop
   2049c:	20003224 	.word	0x20003224

000204a0 <ble_gattc_notify_custom>:
{
   204a0:	b508      	push	{r3, lr}
    return ble_gatts_notify_custom(conn_handle, chr_val_handle, txom);
   204a2:	f7ff ffbd 	bl	20420 <ble_gatts_notify_custom>
}
   204a6:	bd08      	pop	{r3, pc}

000204a8 <ble_gatts_notify>:
{
   204a8:	b508      	push	{r3, lr}
    rc = ble_gatts_notify_custom(conn_handle, chr_val_handle, NULL);
   204aa:	2200      	movs	r2, #0
   204ac:	f7ff ffb8 	bl	20420 <ble_gatts_notify_custom>
}
   204b0:	bd08      	pop	{r3, pc}

000204b2 <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   204b2:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   204b4:	2207      	movs	r2, #7
   204b6:	210e      	movs	r1, #14
   204b8:	f7ff fd02 	bl	1fec0 <ble_gattc_fail_procs>
}
   204bc:	bd08      	pop	{r3, pc}
	...

000204c0 <ble_gatts_indicate_custom>:

int
ble_gatts_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   204c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   204c4:	b082      	sub	sp, #8
   204c6:	4606      	mov	r6, r0
   204c8:	460c      	mov	r4, r1
   204ca:	4615      	mov	r5, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   204cc:	4a29      	ldr	r2, [pc, #164]	; (20574 <ble_gatts_indicate_custom+0xb4>)
   204ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   204d2:	3301      	adds	r3, #1
   204d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   204d8:	f7ff ff10 	bl	202fc <ble_gattc_proc_alloc>
    if (proc == NULL) {
   204dc:	4680      	mov	r8, r0
   204de:	b360      	cbz	r0, 2053a <ble_gatts_indicate_custom+0x7a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   204e0:	230e      	movs	r3, #14
   204e2:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   204e4:	8106      	strh	r6, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   204e6:	8184      	strh	r4, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   204e8:	4620      	mov	r0, r4
   204ea:	f7ff ff2f 	bl	2034c <ble_gattc_log_indicate>

    if (txom == NULL) {
   204ee:	b14d      	cbz	r5, 20504 <ble_gatts_indicate_custom+0x44>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   204f0:	462a      	mov	r2, r5
   204f2:	4621      	mov	r1, r4
   204f4:	4630      	mov	r0, r6
   204f6:	f7fc fa13 	bl	1c920 <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   204fa:	4607      	mov	r7, r0
   204fc:	b190      	cbz	r0, 20524 <ble_gatts_indicate_custom+0x64>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   204fe:	b3b7      	cbz	r7, 2056e <ble_gatts_indicate_custom+0xae>
   20500:	2500      	movs	r5, #0
   20502:	e01b      	b.n	2053c <ble_gatts_indicate_custom+0x7c>
        txom = ble_hs_mbuf_att_pkt();
   20504:	f002 ff97 	bl	23436 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   20508:	4605      	mov	r5, r0
   2050a:	b370      	cbz	r0, 2056a <ble_gatts_indicate_custom+0xaa>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   2050c:	2200      	movs	r2, #0
   2050e:	9200      	str	r2, [sp, #0]
   20510:	4603      	mov	r3, r0
   20512:	4621      	mov	r1, r4
   20514:	f64f 70ff 	movw	r0, #65535	; 0xffff
   20518:	f7fd f8ea 	bl	1d6f0 <ble_att_svr_read_handle>
        if (rc != 0) {
   2051c:	2800      	cmp	r0, #0
   2051e:	d0e7      	beq.n	204f0 <ble_gatts_indicate_custom+0x30>
            rc = BLE_HS_EAPP;
   20520:	2709      	movs	r7, #9
   20522:	e00b      	b.n	2053c <ble_gatts_indicate_custom+0x7c>
    ble_hs_lock();
   20524:	f001 f9a2 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   20528:	4630      	mov	r0, r6
   2052a:	f001 fffd 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   2052e:	b108      	cbz	r0, 20534 <ble_gatts_indicate_custom+0x74>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   20530:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
    ble_hs_unlock();
   20534:	f001 f99e 	bl	21874 <ble_hs_unlock>
   20538:	e7e1      	b.n	204fe <ble_gatts_indicate_custom+0x3e>
        rc = BLE_HS_ENOMEM;
   2053a:	2706      	movs	r7, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   2053c:	4a0d      	ldr	r2, [pc, #52]	; (20574 <ble_gatts_indicate_custom+0xb4>)
   2053e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20542:	3301      	adds	r3, #1
   20544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   20548:	2301      	movs	r3, #1
   2054a:	4622      	mov	r2, r4
   2054c:	4631      	mov	r1, r6
   2054e:	4638      	mov	r0, r7
   20550:	f7fe ffd6 	bl	1f500 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   20554:	4639      	mov	r1, r7
   20556:	4640      	mov	r0, r8
   20558:	f7ff fe9f 	bl	2029a <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   2055c:	4628      	mov	r0, r5
   2055e:	f7ec ff89 	bl	d474 <os_mbuf_free_chain>
    return rc;
}
   20562:	4638      	mov	r0, r7
   20564:	b002      	add	sp, #8
   20566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   2056a:	2706      	movs	r7, #6
   2056c:	e7e6      	b.n	2053c <ble_gatts_indicate_custom+0x7c>
   2056e:	2500      	movs	r5, #0
   20570:	e7ea      	b.n	20548 <ble_gatts_indicate_custom+0x88>
   20572:	bf00      	nop
   20574:	20003224 	.word	0x20003224

00020578 <ble_gatts_indicate>:
    return ble_gatts_indicate_custom(conn_handle, chr_val_handle, txom);
}

int
ble_gatts_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   20578:	b508      	push	{r3, lr}
    return ble_gatts_indicate_custom(conn_handle, chr_val_handle, NULL);
   2057a:	2200      	movs	r2, #0
   2057c:	f7ff ffa0 	bl	204c0 <ble_gatts_indicate_custom>
}
   20580:	bd08      	pop	{r3, pc}

00020582 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   20582:	b570      	push	{r4, r5, r6, lr}
   20584:	460d      	mov	r5, r1
   20586:	4614      	mov	r4, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   20588:	21ff      	movs	r1, #255	; 0xff
   2058a:	f7ff fc41 	bl	1fe10 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   2058e:	b168      	cbz	r0, 205ac <ble_gattc_rx_err+0x2a>
   20590:	4606      	mov	r6, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   20592:	7a80      	ldrb	r0, [r0, #10]
   20594:	f7ff f90a 	bl	1f7ac <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   20598:	4603      	mov	r3, r0
   2059a:	b120      	cbz	r0, 205a6 <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   2059c:	462a      	mov	r2, r5
   2059e:	f504 7180 	add.w	r1, r4, #256	; 0x100
   205a2:	4630      	mov	r0, r6
   205a4:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   205a6:	4630      	mov	r0, r6
   205a8:	f7ff fc80 	bl	1feac <ble_gattc_proc_free>
    }
}
   205ac:	bd70      	pop	{r4, r5, r6, pc}

000205ae <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   205ae:	b570      	push	{r4, r5, r6, lr}
   205b0:	460c      	mov	r4, r1
   205b2:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   205b4:	2100      	movs	r1, #0
   205b6:	f7ff fc2b 	bl	1fe10 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   205ba:	b148      	cbz	r0, 205d0 <ble_gattc_rx_mtu+0x22>
   205bc:	4606      	mov	r6, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   205be:	462b      	mov	r3, r5
   205c0:	2200      	movs	r2, #0
   205c2:	4621      	mov	r1, r4
   205c4:	f7ff f942 	bl	1f84c <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   205c8:	210e      	movs	r1, #14
   205ca:	4630      	mov	r0, r6
   205cc:	f7ff fe65 	bl	2029a <ble_gattc_process_status>
    }
}
   205d0:	bd70      	pop	{r4, r5, r6, pc}

000205d2 <ble_gatts_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gatts_rx_indicate_rsp(uint16_t conn_handle)
{
   205d2:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   205d4:	210e      	movs	r1, #14
   205d6:	f7ff fc1b 	bl	1fe10 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   205da:	b130      	cbz	r0, 205ea <ble_gatts_rx_indicate_rsp+0x18>
   205dc:	4604      	mov	r4, r0
        ble_gatts_indicate_rx_rsp(proc);
   205de:	f7ff fed9 	bl	20394 <ble_gatts_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   205e2:	210e      	movs	r1, #14
   205e4:	4620      	mov	r0, r4
   205e6:	f7ff fe58 	bl	2029a <ble_gattc_process_status>
    }
}
   205ea:	bd10      	pop	{r4, pc}

000205ec <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   205ec:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   205ee:	2207      	movs	r2, #7
   205f0:	21ff      	movs	r1, #255	; 0xff
   205f2:	f7ff fc65 	bl	1fec0 <ble_gattc_fail_procs>
}
   205f6:	bd08      	pop	{r3, pc}

000205f8 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   205f8:	b500      	push	{lr}
   205fa:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   205fc:	4b0e      	ldr	r3, [pc, #56]	; (20638 <ble_gattc_init+0x40>)
   205fe:	2200      	movs	r2, #0
   20600:	601a      	str	r2, [r3, #0]
   20602:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   20604:	4b0d      	ldr	r3, [pc, #52]	; (2063c <ble_gattc_init+0x44>)
   20606:	9300      	str	r3, [sp, #0]
   20608:	4b0d      	ldr	r3, [pc, #52]	; (20640 <ble_gattc_init+0x48>)
   2060a:	2238      	movs	r2, #56	; 0x38
   2060c:	2104      	movs	r1, #4
   2060e:	480d      	ldr	r0, [pc, #52]	; (20644 <ble_gattc_init+0x4c>)
   20610:	f7ed fad6 	bl	dbc0 <os_mempool_init>
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   20614:	b110      	cbz	r0, 2061c <ble_gattc_init+0x24>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   20616:	b003      	add	sp, #12
   20618:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   2061c:	4b0a      	ldr	r3, [pc, #40]	; (20648 <ble_gattc_init+0x50>)
   2061e:	9301      	str	r3, [sp, #4]
   20620:	2300      	movs	r3, #0
   20622:	9300      	str	r3, [sp, #0]
   20624:	2223      	movs	r2, #35	; 0x23
   20626:	2104      	movs	r1, #4
   20628:	4808      	ldr	r0, [pc, #32]	; (2064c <ble_gattc_init+0x54>)
   2062a:	f7f1 fd7f 	bl	1212c <stats_init_and_reg>
    if (rc != 0) {
   2062e:	2800      	cmp	r0, #0
   20630:	d0f1      	beq.n	20616 <ble_gattc_init+0x1e>
        return BLE_HS_EOS;
   20632:	200b      	movs	r0, #11
   20634:	e7ef      	b.n	20616 <ble_gattc_init+0x1e>
   20636:	bf00      	nop
   20638:	20003218 	.word	0x20003218
   2063c:	0002e1dc 	.word	0x0002e1dc
   20640:	2000311c 	.word	0x2000311c
   20644:	200031fc 	.word	0x200031fc
   20648:	0002e1f0 	.word	0x0002e1f0
   2064c:	20003224 	.word	0x20003224

00020650 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   20650:	8a03      	ldrh	r3, [r0, #16]
   20652:	f013 0010 	ands.w	r0, r3, #16
   20656:	d000      	beq.n	2065a <ble_gatts_chr_clt_cfg_allowed+0xa>
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   20658:	2001      	movs	r0, #1
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   2065a:	f013 0f20 	tst.w	r3, #32
   2065e:	d001      	beq.n	20664 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   20660:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   20664:	4770      	bx	lr

00020666 <ble_gatts_att_flags_from_chr_flags>:

static uint8_t
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
   20666:	4603      	mov	r3, r0
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   20668:	f010 0f02 	tst.w	r0, #2
   2066c:	d124      	bne.n	206b8 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   2066e:	2000      	movs	r0, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   20670:	f013 0f0c 	tst.w	r3, #12
   20674:	d001      	beq.n	2067a <ble_gatts_att_flags_from_chr_flags+0x14>
        att_flags |= BLE_ATT_F_WRITE;
   20676:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   2067a:	f413 7f00 	tst.w	r3, #512	; 0x200
   2067e:	d001      	beq.n	20684 <ble_gatts_att_flags_from_chr_flags+0x1e>
        att_flags |= BLE_ATT_F_READ_ENC;
   20680:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   20684:	f413 6f80 	tst.w	r3, #1024	; 0x400
   20688:	d001      	beq.n	2068e <ble_gatts_att_flags_from_chr_flags+0x28>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   2068a:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   2068e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   20692:	d001      	beq.n	20698 <ble_gatts_att_flags_from_chr_flags+0x32>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   20694:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   20698:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2069c:	d001      	beq.n	206a2 <ble_gatts_att_flags_from_chr_flags+0x3c>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   2069e:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   206a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   206a6:	d001      	beq.n	206ac <ble_gatts_att_flags_from_chr_flags+0x46>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   206a8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   206ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   206b0:	d001      	beq.n	206b6 <ble_gatts_att_flags_from_chr_flags+0x50>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   206b2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return att_flags;
}
   206b6:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   206b8:	2001      	movs	r0, #1
   206ba:	e7d9      	b.n	20670 <ble_gatts_att_flags_from_chr_flags+0xa>

000206bc <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   206bc:	8a03      	ldrh	r3, [r0, #16]
   206be:	f013 0f01 	tst.w	r3, #1
   206c2:	d124      	bne.n	2070e <ble_gatts_chr_properties+0x52>
    properties = 0;
   206c4:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   206c6:	f013 0f02 	tst.w	r3, #2
   206ca:	d001      	beq.n	206d0 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   206cc:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   206d0:	f013 0f04 	tst.w	r3, #4
   206d4:	d001      	beq.n	206da <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   206d6:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   206da:	f013 0f08 	tst.w	r3, #8
   206de:	d001      	beq.n	206e4 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   206e0:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   206e4:	f013 0f10 	tst.w	r3, #16
   206e8:	d001      	beq.n	206ee <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   206ea:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   206ee:	f013 0f20 	tst.w	r3, #32
   206f2:	d001      	beq.n	206f8 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   206f4:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   206f8:	f013 0f40 	tst.w	r3, #64	; 0x40
   206fc:	d001      	beq.n	20702 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   206fe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   20702:	f413 7fc0 	tst.w	r3, #384	; 0x180
   20706:	d001      	beq.n	2070c <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   20708:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   2070c:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   2070e:	2001      	movs	r0, #1
   20710:	e7d9      	b.n	206c6 <ble_gatts_chr_properties+0xa>

00020712 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   20712:	6803      	ldr	r3, [r0, #0]
   20714:	b11b      	cbz	r3, 2071e <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    if (chr->access_cb == NULL) {
   20716:	6843      	ldr	r3, [r0, #4]
   20718:	b11b      	cbz	r3, 20722 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   2071a:	2001      	movs	r0, #1
   2071c:	4770      	bx	lr
        return 0;
   2071e:	2000      	movs	r0, #0
   20720:	4770      	bx	lr
        return 0;
   20722:	2000      	movs	r0, #0
}
   20724:	4770      	bx	lr

00020726 <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   20726:	2802      	cmp	r0, #2
   20728:	d001      	beq.n	2072e <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   2072a:	2000      	movs	r0, #0
   2072c:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   2072e:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   20730:	4770      	bx	lr
	...

00020734 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   20734:	b110      	cbz	r0, 2073c <ble_gatts_chr_inc_val_stat+0x8>
   20736:	2801      	cmp	r0, #1
   20738:	d005      	beq.n	20746 <ble_gatts_chr_inc_val_stat+0x12>
   2073a:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   2073c:	4a04      	ldr	r2, [pc, #16]	; (20750 <ble_gatts_chr_inc_val_stat+0x1c>)
   2073e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   20740:	3301      	adds	r3, #1
   20742:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   20744:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   20746:	4a02      	ldr	r2, [pc, #8]	; (20750 <ble_gatts_chr_inc_val_stat+0x1c>)
   20748:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2074a:	3301      	adds	r3, #1
   2074c:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   2074e:	4770      	bx	lr
   20750:	200032f0 	.word	0x200032f0

00020754 <ble_gatts_find_svc_entry_idx>:
    return rc;
}

static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
   20754:	4602      	mov	r2, r0
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   20756:	2000      	movs	r0, #0
   20758:	4b07      	ldr	r3, [pc, #28]	; (20778 <ble_gatts_find_svc_entry_idx+0x24>)
   2075a:	881b      	ldrh	r3, [r3, #0]
   2075c:	4283      	cmp	r3, r0
   2075e:	dd07      	ble.n	20770 <ble_gatts_find_svc_entry_idx+0x1c>
        if (ble_gatts_svc_entries[i].svc == svc) {
   20760:	4b06      	ldr	r3, [pc, #24]	; (2077c <ble_gatts_find_svc_entry_idx+0x28>)
   20762:	681b      	ldr	r3, [r3, #0]
   20764:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   20768:	4293      	cmp	r3, r2
   2076a:	d003      	beq.n	20774 <ble_gatts_find_svc_entry_idx+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2076c:	3001      	adds	r0, #1
   2076e:	e7f3      	b.n	20758 <ble_gatts_find_svc_entry_idx+0x4>
            return i;
        }
    }

    return -1;
   20770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20774:	4770      	bx	lr
   20776:	bf00      	nop
   20778:	200032ec 	.word	0x200032ec
   2077c:	20003328 	.word	0x20003328

00020780 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   20780:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   20782:	6885      	ldr	r5, [r0, #8]
   20784:	b1ad      	cbz	r5, 207b2 <ble_gatts_svc_incs_satisfied+0x32>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   20786:	2400      	movs	r4, #0
   20788:	e000      	b.n	2078c <ble_gatts_svc_incs_satisfied+0xc>
   2078a:	3401      	adds	r4, #1
   2078c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   20790:	b168      	cbz	r0, 207ae <ble_gatts_svc_incs_satisfied+0x2e>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   20792:	f7ff ffdf 	bl	20754 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   20796:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2079a:	d00c      	beq.n	207b6 <ble_gatts_svc_incs_satisfied+0x36>
   2079c:	4b07      	ldr	r3, [pc, #28]	; (207bc <ble_gatts_svc_incs_satisfied+0x3c>)
   2079e:	681b      	ldr	r3, [r3, #0]
   207a0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   207a4:	8883      	ldrh	r3, [r0, #4]
   207a6:	2b00      	cmp	r3, #0
   207a8:	d1ef      	bne.n	2078a <ble_gatts_svc_incs_satisfied+0xa>
            return 0;
   207aa:	2000      	movs	r0, #0
   207ac:	e000      	b.n	207b0 <ble_gatts_svc_incs_satisfied+0x30>
        }
    }

    return 1;
   207ae:	2001      	movs	r0, #1
}
   207b0:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
   207b2:	2001      	movs	r0, #1
   207b4:	e7fc      	b.n	207b0 <ble_gatts_svc_incs_satisfied+0x30>
            return 0;
   207b6:	2000      	movs	r0, #0
   207b8:	e7fa      	b.n	207b0 <ble_gatts_svc_incs_satisfied+0x30>
   207ba:	bf00      	nop
   207bc:	20003328 	.word	0x20003328

000207c0 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   207c0:	2802      	cmp	r0, #2
   207c2:	d001      	beq.n	207c8 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   207c4:	2002      	movs	r0, #2
   207c6:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   207c8:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   207ca:	4770      	bx	lr

000207cc <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   207cc:	2802      	cmp	r0, #2
   207ce:	d002      	beq.n	207d6 <ble_gatts_dsc_inc_stat+0xa>
   207d0:	2803      	cmp	r0, #3
   207d2:	d005      	beq.n	207e0 <ble_gatts_dsc_inc_stat+0x14>
   207d4:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   207d6:	4a05      	ldr	r2, [pc, #20]	; (207ec <ble_gatts_dsc_inc_stat+0x20>)
   207d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   207da:	3301      	adds	r3, #1
   207dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   207de:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   207e0:	4a02      	ldr	r2, [pc, #8]	; (207ec <ble_gatts_dsc_inc_stat+0x20>)
   207e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   207e4:	3301      	adds	r3, #1
   207e6:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   207e8:	4770      	bx	lr
   207ea:	bf00      	nop
   207ec:	200032f0 	.word	0x200032f0

000207f0 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   207f0:	6803      	ldr	r3, [r0, #0]
   207f2:	b11b      	cbz	r3, 207fc <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   207f4:	6883      	ldr	r3, [r0, #8]
   207f6:	b11b      	cbz	r3, 20800 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    return 1;
   207f8:	2001      	movs	r0, #1
   207fa:	4770      	bx	lr
        return 0;
   207fc:	2000      	movs	r0, #0
   207fe:	4770      	bx	lr
        return 0;
   20800:	2000      	movs	r0, #0
}
   20802:	4770      	bx	lr

00020804 <ble_gatts_clt_cfg_find_idx>:
}

static int
ble_gatts_clt_cfg_find_idx(struct ble_gatts_clt_cfg *cfgs,
                           uint16_t chr_val_handle)
{
   20804:	4602      	mov	r2, r0
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   20806:	2000      	movs	r0, #0
   20808:	4b06      	ldr	r3, [pc, #24]	; (20824 <ble_gatts_clt_cfg_find_idx+0x20>)
   2080a:	681b      	ldr	r3, [r3, #0]
   2080c:	4283      	cmp	r3, r0
   2080e:	dd05      	ble.n	2081c <ble_gatts_clt_cfg_find_idx+0x18>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   20810:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
   20814:	428b      	cmp	r3, r1
   20816:	d003      	beq.n	20820 <ble_gatts_clt_cfg_find_idx+0x1c>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   20818:	3001      	adds	r0, #1
   2081a:	e7f5      	b.n	20808 <ble_gatts_clt_cfg_find_idx+0x4>
            return i;
        }
    }

    return -1;
   2081c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   20820:	4770      	bx	lr
   20822:	bf00      	nop
   20824:	200032e4 	.word	0x200032e4

00020828 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   20828:	b510      	push	{r4, lr}
   2082a:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   2082c:	f7ff ffea 	bl	20804 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   20830:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20834:	d002      	beq.n	2083c <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   20836:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   2083a:	bd10      	pop	{r4, pc}
        return NULL;
   2083c:	2000      	movs	r0, #0
   2083e:	e7fc      	b.n	2083a <ble_gatts_clt_cfg_find+0x12>

00020840 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   20840:	2801      	cmp	r0, #1
   20842:	d003      	beq.n	2084c <ble_gatts_svc_type_to_uuid+0xc>
   20844:	2802      	cmp	r0, #2
   20846:	d005      	beq.n	20854 <ble_gatts_svc_type_to_uuid+0x14>
   20848:	2003      	movs	r0, #3
   2084a:	4770      	bx	lr
    case BLE_GATT_SVC_TYPE_PRIMARY:
        *uuid = uuid_pri;
   2084c:	4b03      	ldr	r3, [pc, #12]	; (2085c <ble_gatts_svc_type_to_uuid+0x1c>)
   2084e:	600b      	str	r3, [r1, #0]
        return 0;
   20850:	2000      	movs	r0, #0
   20852:	4770      	bx	lr

    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
   20854:	4b02      	ldr	r3, [pc, #8]	; (20860 <ble_gatts_svc_type_to_uuid+0x20>)
   20856:	600b      	str	r3, [r1, #0]
        return 0;
   20858:	2000      	movs	r0, #0

    default:
        return BLE_HS_EINVAL;
    }
}
   2085a:	4770      	bx	lr
   2085c:	200002c4 	.word	0x200002c4
   20860:	200002c8 	.word	0x200002c8

00020864 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   20864:	7803      	ldrb	r3, [r0, #0]
   20866:	3b01      	subs	r3, #1
   20868:	b2db      	uxtb	r3, r3
   2086a:	2b01      	cmp	r3, #1
   2086c:	d803      	bhi.n	20876 <ble_gatts_svc_is_sane+0x12>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    }

    if (svc->uuid == NULL) {
   2086e:	6843      	ldr	r3, [r0, #4]
   20870:	b11b      	cbz	r3, 2087a <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   20872:	2001      	movs	r0, #1
   20874:	4770      	bx	lr
        return 0;
   20876:	2000      	movs	r0, #0
   20878:	4770      	bx	lr
        return 0;
   2087a:	2000      	movs	r0, #0
}
   2087c:	4770      	bx	lr
	...

00020880 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   20880:	4b01      	ldr	r3, [pc, #4]	; (20888 <ble_gatts_clt_cfg_size+0x8>)
   20882:	6818      	ldr	r0, [r3, #0]
}
   20884:	0080      	lsls	r0, r0, #2
   20886:	4770      	bx	lr
   20888:	200032e4 	.word	0x200032e4

0002088c <ble_gatts_schedule_update>:
 *                                  if any.  0 if nothing should get sent.
 */
static uint8_t
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
   2088c:	4603      	mov	r3, r0
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   2088e:	788a      	ldrb	r2, [r1, #2]
   20890:	f991 0002 	ldrsb.w	r0, [r1, #2]
   20894:	2800      	cmp	r0, #0
   20896:	db01      	blt.n	2089c <ble_gatts_schedule_update+0x10>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   20898:	2000      	movs	r0, #0
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    }

    return att_op;
}
   2089a:	4770      	bx	lr
{
   2089c:	b410      	push	{r4}
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   2089e:	f012 0401 	ands.w	r4, r2, #1
   208a2:	d107      	bne.n	208b4 <ble_gatts_schedule_update+0x28>
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   208a4:	f012 0002 	ands.w	r0, r2, #2
   208a8:	d008      	beq.n	208bc <ble_gatts_schedule_update+0x30>
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   208aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   208ae:	b93b      	cbnz	r3, 208c0 <ble_gatts_schedule_update+0x34>
            att_op = BLE_ATT_OP_INDICATE_REQ;
   208b0:	201d      	movs	r0, #29
   208b2:	e000      	b.n	208b6 <ble_gatts_schedule_update+0x2a>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   208b4:	201b      	movs	r0, #27
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   208b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   208ba:	708a      	strb	r2, [r1, #2]
}
   208bc:	bc10      	pop	{r4}
   208be:	4770      	bx	lr
            att_op = 0;
   208c0:	4620      	mov	r0, r4
   208c2:	e7fb      	b.n	208bc <ble_gatts_schedule_update+0x30>

000208c4 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   208c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   208c8:	4682      	mov	sl, r0
   208ca:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   208cc:	f04f 0900 	mov.w	r9, #0
   208d0:	e049      	b.n	20966 <ble_gatts_count_resources+0xa2>
            for (i = 0; svc->includes[i] != NULL; i++) {
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   208d2:	8863      	ldrh	r3, [r4, #2]
   208d4:	3301      	adds	r3, #1
   208d6:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   208d8:	8963      	ldrh	r3, [r4, #10]
   208da:	3301      	adds	r3, #1
   208dc:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   208de:	3201      	adds	r2, #1
   208e0:	68bb      	ldr	r3, [r7, #8]
   208e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   208e6:	2b00      	cmp	r3, #0
   208e8:	d1f3      	bne.n	208d2 <ble_gatts_count_resources+0xe>
   208ea:	e050      	b.n	2098e <ble_gatts_count_resources+0xca>
   208ec:	2200      	movs	r2, #0
   208ee:	e7f7      	b.n	208e0 <ble_gatts_count_resources+0x1c>
                    res->dscs++;
                    res->cccds++;
                    res->attrs++;
                }

                if (chr->descriptors != NULL) {
   208f0:	68f3      	ldr	r3, [r6, #12]
   208f2:	bb1b      	cbnz	r3, 2093c <ble_gatts_count_resources+0x78>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   208f4:	f108 0801 	add.w	r8, r8, #1
   208f8:	68fb      	ldr	r3, [r7, #12]
   208fa:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   208fe:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   20902:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   20906:	2b00      	cmp	r3, #0
   20908:	d02b      	beq.n	20962 <ble_gatts_count_resources+0x9e>
                if (!ble_gatts_chr_is_sane(chr)) {
   2090a:	4630      	mov	r0, r6
   2090c:	f7ff ff01 	bl	20712 <ble_gatts_chr_is_sane>
   20910:	2800      	cmp	r0, #0
   20912:	d046      	beq.n	209a2 <ble_gatts_count_resources+0xde>
                res->chrs++;
   20914:	88a3      	ldrh	r3, [r4, #4]
   20916:	3301      	adds	r3, #1
   20918:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   2091a:	8963      	ldrh	r3, [r4, #10]
   2091c:	3302      	adds	r3, #2
   2091e:	b29b      	uxth	r3, r3
   20920:	8163      	strh	r3, [r4, #10]
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   20922:	8a32      	ldrh	r2, [r6, #16]
   20924:	f012 0f30 	tst.w	r2, #48	; 0x30
   20928:	d0e2      	beq.n	208f0 <ble_gatts_count_resources+0x2c>
                    res->dscs++;
   2092a:	88e2      	ldrh	r2, [r4, #6]
   2092c:	3201      	adds	r2, #1
   2092e:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   20930:	8922      	ldrh	r2, [r4, #8]
   20932:	3201      	adds	r2, #1
   20934:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   20936:	3301      	adds	r3, #1
   20938:	8163      	strh	r3, [r4, #10]
   2093a:	e7d9      	b.n	208f0 <ble_gatts_count_resources+0x2c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   2093c:	2500      	movs	r5, #0
   2093e:	68f2      	ldr	r2, [r6, #12]
   20940:	012b      	lsls	r3, r5, #4
   20942:	eb02 1005 	add.w	r0, r2, r5, lsl #4
   20946:	58d3      	ldr	r3, [r2, r3]
   20948:	2b00      	cmp	r3, #0
   2094a:	d0d3      	beq.n	208f4 <ble_gatts_count_resources+0x30>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   2094c:	f7ff ff50 	bl	207f0 <ble_gatts_dsc_is_sane>
   20950:	b348      	cbz	r0, 209a6 <ble_gatts_count_resources+0xe2>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   20952:	88e3      	ldrh	r3, [r4, #6]
   20954:	3301      	adds	r3, #1
   20956:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   20958:	8963      	ldrh	r3, [r4, #10]
   2095a:	3301      	adds	r3, #1
   2095c:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   2095e:	3501      	adds	r5, #1
   20960:	e7ed      	b.n	2093e <ble_gatts_count_resources+0x7a>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   20962:	f109 0901 	add.w	r9, r9, #1
   20966:	ea4f 1309 	mov.w	r3, r9, lsl #4
   2096a:	eb0a 1709 	add.w	r7, sl, r9, lsl #4
   2096e:	f81a 3003 	ldrb.w	r3, [sl, r3]
   20972:	b193      	cbz	r3, 2099a <ble_gatts_count_resources+0xd6>
        if (!ble_gatts_svc_is_sane(svc)) {
   20974:	4638      	mov	r0, r7
   20976:	f7ff ff75 	bl	20864 <ble_gatts_svc_is_sane>
   2097a:	b180      	cbz	r0, 2099e <ble_gatts_count_resources+0xda>
        res->svcs++;
   2097c:	8823      	ldrh	r3, [r4, #0]
   2097e:	3301      	adds	r3, #1
   20980:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   20982:	8963      	ldrh	r3, [r4, #10]
   20984:	3301      	adds	r3, #1
   20986:	8163      	strh	r3, [r4, #10]
        if (svc->includes != NULL) {
   20988:	68bb      	ldr	r3, [r7, #8]
   2098a:	2b00      	cmp	r3, #0
   2098c:	d1ae      	bne.n	208ec <ble_gatts_count_resources+0x28>
        if (svc->characteristics != NULL) {
   2098e:	68fb      	ldr	r3, [r7, #12]
   20990:	2b00      	cmp	r3, #0
   20992:	d0e6      	beq.n	20962 <ble_gatts_count_resources+0x9e>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   20994:	f04f 0800 	mov.w	r8, #0
   20998:	e7ae      	b.n	208f8 <ble_gatts_count_resources+0x34>
                }
            }
        }
    }

    return 0;
   2099a:	2000      	movs	r0, #0
   2099c:	e004      	b.n	209a8 <ble_gatts_count_resources+0xe4>
            return BLE_HS_EINVAL;
   2099e:	2003      	movs	r0, #3
   209a0:	e002      	b.n	209a8 <ble_gatts_count_resources+0xe4>
                    return BLE_HS_EINVAL;
   209a2:	2003      	movs	r0, #3
   209a4:	e000      	b.n	209a8 <ble_gatts_count_resources+0xe4>
                            return BLE_HS_EINVAL;
   209a6:	2003      	movs	r0, #3
}
   209a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000209ac <ble_gatts_clt_cfg_access_locked>:
{
   209ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   209b0:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   209b2:	2300      	movs	r3, #0
   209b4:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   209b6:	1e4c      	subs	r4, r1, #1
   209b8:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   209ba:	42a1      	cmp	r1, r4
   209bc:	d366      	bcc.n	20a8c <ble_gatts_clt_cfg_access_locked+0xe0>
   209be:	4605      	mov	r5, r0
   209c0:	4617      	mov	r7, r2
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   209c2:	4621      	mov	r1, r4
   209c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   209c6:	f7ff ff2f 	bl	20828 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   209ca:	4680      	mov	r8, r0
   209cc:	2800      	cmp	r0, #0
   209ce:	d05f      	beq.n	20a90 <ble_gatts_clt_cfg_access_locked+0xe4>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   209d0:	7883      	ldrb	r3, [r0, #2]
   209d2:	9a08      	ldr	r2, [sp, #32]
   209d4:	7013      	strb	r3, [r2, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   209d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   209d8:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   209da:	4638      	mov	r0, r7
   209dc:	f7ff fef0 	bl	207c0 <ble_gatts_dsc_op>
   209e0:	4607      	mov	r7, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   209e2:	f7ff fef3 	bl	207cc <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   209e6:	2f02      	cmp	r7, #2
   209e8:	d005      	beq.n	209f6 <ble_gatts_clt_cfg_access_locked+0x4a>
   209ea:	2f03      	cmp	r7, #3
   209ec:	d015      	beq.n	20a1a <ble_gatts_clt_cfg_access_locked+0x6e>
   209ee:	270e      	movs	r7, #14
}
   209f0:	4638      	mov	r0, r7
   209f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        STATS_INC(ble_gatts_stats, dsc_reads);
   209f6:	4a29      	ldr	r2, [pc, #164]	; (20a9c <ble_gatts_clt_cfg_access_locked+0xf0>)
   209f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   209fa:	3301      	adds	r3, #1
   209fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   209fe:	2102      	movs	r1, #2
   20a00:	9806      	ldr	r0, [sp, #24]
   20a02:	f7ec ff64 	bl	d8ce <os_mbuf_extend>
        if (buf == NULL) {
   20a06:	2800      	cmp	r0, #0
   20a08:	d044      	beq.n	20a94 <ble_gatts_clt_cfg_access_locked+0xe8>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   20a0a:	f898 1002 	ldrb.w	r1, [r8, #2]
   20a0e:	f001 0103 	and.w	r1, r1, #3
   20a12:	f00a f8c1 	bl	2ab98 <put_le16>
    return 0;
   20a16:	2700      	movs	r7, #0
        break;
   20a18:	e7ea      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
        STATS_INC(ble_gatts_stats, dsc_writes);
   20a1a:	4a20      	ldr	r2, [pc, #128]	; (20a9c <ble_gatts_clt_cfg_access_locked+0xf0>)
   20a1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20a1e:	3301      	adds	r3, #1
   20a20:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   20a22:	9b06      	ldr	r3, [sp, #24]
   20a24:	8a1b      	ldrh	r3, [r3, #16]
   20a26:	2b02      	cmp	r3, #2
   20a28:	d001      	beq.n	20a2e <ble_gatts_clt_cfg_access_locked+0x82>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   20a2a:	270d      	movs	r7, #13
   20a2c:	e7e0      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
        om = os_mbuf_pullup(om, 2);
   20a2e:	2102      	movs	r1, #2
   20a30:	9806      	ldr	r0, [sp, #24]
   20a32:	f7ec ff7a 	bl	d92a <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   20a36:	6800      	ldr	r0, [r0, #0]
   20a38:	f00a f8cf 	bl	2abda <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   20a3c:	f898 7003 	ldrb.w	r7, [r8, #3]
   20a40:	ea30 0707 	bics.w	r7, r0, r7
   20a44:	d128      	bne.n	20a98 <ble_gatts_clt_cfg_access_locked+0xec>
        if (clt_cfg->flags != flags) {
   20a46:	f898 3002 	ldrb.w	r3, [r8, #2]
   20a4a:	4283      	cmp	r3, r0
   20a4c:	d0d0      	beq.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
            clt_cfg->flags = flags;
   20a4e:	b2c0      	uxtb	r0, r0
   20a50:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   20a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20a56:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   20a58:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   20a5c:	f013 0f04 	tst.w	r3, #4
   20a60:	d0c6      	beq.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   20a62:	462b      	mov	r3, r5
   20a64:	f853 0f07 	ldr.w	r0, [r3, #7]!
   20a68:	6030      	str	r0, [r6, #0]
   20a6a:	889a      	ldrh	r2, [r3, #4]
   20a6c:	799b      	ldrb	r3, [r3, #6]
   20a6e:	80b2      	strh	r2, [r6, #4]
   20a70:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   20a72:	79e8      	ldrb	r0, [r5, #7]
   20a74:	f002 fd55 	bl	23522 <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   20a78:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   20a7a:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   20a7c:	f898 3002 	ldrb.w	r3, [r8, #2]
   20a80:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   20a82:	7b33      	ldrb	r3, [r6, #12]
   20a84:	f36f 0300 	bfc	r3, #0, #1
   20a88:	7333      	strb	r3, [r6, #12]
   20a8a:	e7b1      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   20a8c:	270e      	movs	r7, #14
   20a8e:	e7af      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   20a90:	270e      	movs	r7, #14
   20a92:	e7ad      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   20a94:	2711      	movs	r7, #17
   20a96:	e7ab      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   20a98:	2706      	movs	r7, #6
   20a9a:	e7a9      	b.n	209f0 <ble_gatts_clt_cfg_access_locked+0x44>
   20a9c:	200032f0 	.word	0x200032f0

00020aa0 <ble_gatts_subscribe_event>:
{
   20aa0:	b530      	push	{r4, r5, lr}
   20aa2:	b085      	sub	sp, #20
   20aa4:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   20aa8:	ea83 0504 	eor.w	r5, r3, r4
   20aac:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   20ab0:	d101      	bne.n	20ab6 <ble_gatts_subscribe_event+0x16>
}
   20ab2:	b005      	add	sp, #20
   20ab4:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   20ab6:	f004 0502 	and.w	r5, r4, #2
   20aba:	9502      	str	r5, [sp, #8]
   20abc:	f003 0502 	and.w	r5, r3, #2
   20ac0:	9501      	str	r5, [sp, #4]
   20ac2:	f004 0401 	and.w	r4, r4, #1
   20ac6:	9400      	str	r4, [sp, #0]
   20ac8:	f003 0301 	and.w	r3, r3, #1
   20acc:	f7fe fd3a 	bl	1f544 <ble_gap_subscribe_event>
}
   20ad0:	e7ef      	b.n	20ab2 <ble_gatts_subscribe_event+0x12>

00020ad2 <ble_gatts_clt_cfg_access>:
{
   20ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ad4:	b08d      	sub	sp, #52	; 0x34
   20ad6:	4606      	mov	r6, r0
   20ad8:	460d      	mov	r5, r1
   20ada:	4617      	mov	r7, r2
   20adc:	461c      	mov	r4, r3
    ble_hs_lock();
   20ade:	f000 fec5 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   20ae2:	4630      	mov	r0, r6
   20ae4:	f001 fd20 	bl	22528 <ble_hs_conn_find>
    if (conn == NULL) {
   20ae8:	b1b0      	cbz	r0, 20b18 <ble_gatts_clt_cfg_access+0x46>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   20aea:	f10d 0312 	add.w	r3, sp, #18
   20aee:	9303      	str	r3, [sp, #12]
   20af0:	f10d 0313 	add.w	r3, sp, #19
   20af4:	9302      	str	r3, [sp, #8]
   20af6:	ab08      	add	r3, sp, #32
   20af8:	9301      	str	r3, [sp, #4]
   20afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20afc:	681b      	ldr	r3, [r3, #0]
   20afe:	9300      	str	r3, [sp, #0]
   20b00:	4623      	mov	r3, r4
   20b02:	463a      	mov	r2, r7
   20b04:	4629      	mov	r1, r5
   20b06:	f7ff ff51 	bl	209ac <ble_gatts_clt_cfg_access_locked>
   20b0a:	4604      	mov	r4, r0
    ble_hs_unlock();
   20b0c:	f000 feb2 	bl	21874 <ble_hs_unlock>
    if (rc != 0) {
   20b10:	b134      	cbz	r4, 20b20 <ble_gatts_clt_cfg_access+0x4e>
}
   20b12:	4620      	mov	r0, r4
   20b14:	b00d      	add	sp, #52	; 0x34
   20b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_hs_unlock();
   20b18:	f000 feac 	bl	21874 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   20b1c:	240e      	movs	r4, #14
   20b1e:	e7f8      	b.n	20b12 <ble_gatts_clt_cfg_access+0x40>
    chr_val_handle = attr_handle - 1;
   20b20:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   20b22:	f89d 3012 	ldrb.w	r3, [sp, #18]
   20b26:	9300      	str	r3, [sp, #0]
   20b28:	f89d 3013 	ldrb.w	r3, [sp, #19]
   20b2c:	2201      	movs	r2, #1
   20b2e:	b289      	uxth	r1, r1
   20b30:	4630      	mov	r0, r6
   20b32:	f7ff ffb5 	bl	20aa0 <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   20b36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   20b3a:	2b00      	cmp	r3, #0
   20b3c:	d0e9      	beq.n	20b12 <ble_gatts_clt_cfg_access+0x40>
        if (cccd_value.flags == 0) {
   20b3e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   20b42:	b943      	cbnz	r3, 20b56 <ble_gatts_clt_cfg_access+0x84>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   20b44:	a908      	add	r1, sp, #32
   20b46:	a805      	add	r0, sp, #20
   20b48:	f005 fae4 	bl	26114 <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   20b4c:	a805      	add	r0, sp, #20
   20b4e:	f005 fadb 	bl	26108 <ble_store_delete_cccd>
   20b52:	4604      	mov	r4, r0
   20b54:	e7dd      	b.n	20b12 <ble_gatts_clt_cfg_access+0x40>
            rc = ble_store_write_cccd(&cccd_value);
   20b56:	a808      	add	r0, sp, #32
   20b58:	f005 fad0 	bl	260fc <ble_store_write_cccd>
   20b5c:	4604      	mov	r4, r0
   20b5e:	e7d8      	b.n	20b12 <ble_gatts_clt_cfg_access+0x40>

00020b60 <ble_gatts_register_inc>:
{
   20b60:	b500      	push	{lr}
   20b62:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   20b64:	9001      	str	r0, [sp, #4]
   20b66:	4b06      	ldr	r3, [pc, #24]	; (20b80 <ble_gatts_register_inc+0x20>)
   20b68:	9300      	str	r3, [sp, #0]
   20b6a:	f10d 030e 	add.w	r3, sp, #14
   20b6e:	2200      	movs	r2, #0
   20b70:	2101      	movs	r1, #1
   20b72:	4804      	ldr	r0, [pc, #16]	; (20b84 <ble_gatts_register_inc+0x24>)
   20b74:	f7fc fc72 	bl	1d45c <ble_att_svr_register>
}
   20b78:	b005      	add	sp, #20
   20b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   20b7e:	bf00      	nop
   20b80:	00020ef9 	.word	0x00020ef9
   20b84:	200002cc 	.word	0x200002cc

00020b88 <ble_gatts_register_clt_cfg_dsc>:
{
   20b88:	b500      	push	{lr}
   20b8a:	b083      	sub	sp, #12
   20b8c:	4603      	mov	r3, r0
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   20b8e:	2200      	movs	r2, #0
   20b90:	9201      	str	r2, [sp, #4]
   20b92:	4907      	ldr	r1, [pc, #28]	; (20bb0 <ble_gatts_register_clt_cfg_dsc+0x28>)
   20b94:	9100      	str	r1, [sp, #0]
   20b96:	2103      	movs	r1, #3
   20b98:	4806      	ldr	r0, [pc, #24]	; (20bb4 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   20b9a:	f7fc fc5f 	bl	1d45c <ble_att_svr_register>
    if (rc != 0) {
   20b9e:	b918      	cbnz	r0, 20ba8 <ble_gatts_register_clt_cfg_dsc+0x20>
    STATS_INC(ble_gatts_stats, dscs);
   20ba0:	4a05      	ldr	r2, [pc, #20]	; (20bb8 <ble_gatts_register_clt_cfg_dsc+0x30>)
   20ba2:	6953      	ldr	r3, [r2, #20]
   20ba4:	3301      	adds	r3, #1
   20ba6:	6153      	str	r3, [r2, #20]
}
   20ba8:	b003      	add	sp, #12
   20baa:	f85d fb04 	ldr.w	pc, [sp], #4
   20bae:	bf00      	nop
   20bb0:	00020ad3 	.word	0x00020ad3
   20bb4:	200002d4 	.word	0x200002d4
   20bb8:	200032f0 	.word	0x200032f0

00020bbc <ble_gatts_register_dsc>:
{
   20bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20bbe:	b089      	sub	sp, #36	; 0x24
   20bc0:	4606      	mov	r6, r0
   20bc2:	460d      	mov	r5, r1
   20bc4:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   20bc6:	4610      	mov	r0, r2
   20bc8:	f7ff fe12 	bl	207f0 <ble_gatts_dsc_is_sane>
   20bcc:	b310      	cbz	r0, 20c14 <ble_gatts_register_dsc+0x58>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   20bce:	9401      	str	r4, [sp, #4]
   20bd0:	4b11      	ldr	r3, [pc, #68]	; (20c18 <ble_gatts_register_dsc+0x5c>)
   20bd2:	9300      	str	r3, [sp, #0]
   20bd4:	f10d 030a 	add.w	r3, sp, #10
   20bd8:	7962      	ldrb	r2, [r4, #5]
   20bda:	7921      	ldrb	r1, [r4, #4]
   20bdc:	6820      	ldr	r0, [r4, #0]
   20bde:	f7fc fc3d 	bl	1d45c <ble_att_svr_register>
    if (rc != 0) {
   20be2:	4607      	mov	r7, r0
   20be4:	b998      	cbnz	r0, 20c0e <ble_gatts_register_dsc+0x52>
    if (register_cb != NULL) {
   20be6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20be8:	b16b      	cbz	r3, 20c06 <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   20bea:	2303      	movs	r3, #3
   20bec:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   20bf0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   20bf4:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   20bf8:	9607      	str	r6, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   20bfa:	9506      	str	r5, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   20bfc:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   20bfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   20c00:	a803      	add	r0, sp, #12
   20c02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20c04:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   20c06:	4a05      	ldr	r2, [pc, #20]	; (20c1c <ble_gatts_register_dsc+0x60>)
   20c08:	6953      	ldr	r3, [r2, #20]
   20c0a:	3301      	adds	r3, #1
   20c0c:	6153      	str	r3, [r2, #20]
}
   20c0e:	4638      	mov	r0, r7
   20c10:	b009      	add	sp, #36	; 0x24
   20c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   20c14:	2703      	movs	r7, #3
   20c16:	e7fa      	b.n	20c0e <ble_gatts_register_dsc+0x52>
   20c18:	0002102b 	.word	0x0002102b
   20c1c:	200032f0 	.word	0x200032f0

00020c20 <ble_gatts_register_chr>:
{
   20c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20c24:	b08b      	sub	sp, #44	; 0x2c
   20c26:	4607      	mov	r7, r0
   20c28:	460c      	mov	r4, r1
   20c2a:	4616      	mov	r6, r2
   20c2c:	4698      	mov	r8, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   20c2e:	4608      	mov	r0, r1
   20c30:	f7ff fd6f 	bl	20712 <ble_gatts_chr_is_sane>
   20c34:	2800      	cmp	r0, #0
   20c36:	d063      	beq.n	20d00 <ble_gatts_register_chr+0xe0>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   20c38:	4620      	mov	r0, r4
   20c3a:	f7ff fd09 	bl	20650 <ble_gatts_chr_clt_cfg_allowed>
   20c3e:	b140      	cbz	r0, 20c52 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   20c40:	4b33      	ldr	r3, [pc, #204]	; (20d10 <ble_gatts_register_chr+0xf0>)
   20c42:	881a      	ldrh	r2, [r3, #0]
   20c44:	4b33      	ldr	r3, [pc, #204]	; (20d14 <ble_gatts_register_chr+0xf4>)
   20c46:	681b      	ldr	r3, [r3, #0]
   20c48:	429a      	cmp	r2, r3
   20c4a:	db5c      	blt.n	20d06 <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   20c4c:	3301      	adds	r3, #1
   20c4e:	4a31      	ldr	r2, [pc, #196]	; (20d14 <ble_gatts_register_chr+0xf4>)
   20c50:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   20c52:	9401      	str	r4, [sp, #4]
   20c54:	4b30      	ldr	r3, [pc, #192]	; (20d18 <ble_gatts_register_chr+0xf8>)
   20c56:	9300      	str	r3, [sp, #0]
   20c58:	f10d 0312 	add.w	r3, sp, #18
   20c5c:	2200      	movs	r2, #0
   20c5e:	2101      	movs	r1, #1
   20c60:	482e      	ldr	r0, [pc, #184]	; (20d1c <ble_gatts_register_chr+0xfc>)
   20c62:	f7fc fbfb 	bl	1d45c <ble_att_svr_register>
    if (rc != 0) {
   20c66:	4681      	mov	r9, r0
   20c68:	b118      	cbz	r0, 20c72 <ble_gatts_register_chr+0x52>
}
   20c6a:	4648      	mov	r0, r9
   20c6c:	b00b      	add	sp, #44	; 0x2c
   20c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   20c72:	8a20      	ldrh	r0, [r4, #16]
   20c74:	f7ff fcf7 	bl	20666 <ble_gatts_att_flags_from_chr_flags>
   20c78:	4601      	mov	r1, r0
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   20c7a:	9401      	str	r4, [sp, #4]
   20c7c:	4b28      	ldr	r3, [pc, #160]	; (20d20 <ble_gatts_register_chr+0x100>)
   20c7e:	9300      	str	r3, [sp, #0]
   20c80:	ab04      	add	r3, sp, #16
   20c82:	7ca2      	ldrb	r2, [r4, #18]
   20c84:	6820      	ldr	r0, [r4, #0]
   20c86:	f7fc fbe9 	bl	1d45c <ble_att_svr_register>
    if (rc != 0) {
   20c8a:	4681      	mov	r9, r0
   20c8c:	2800      	cmp	r0, #0
   20c8e:	d1ec      	bne.n	20c6a <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   20c90:	6963      	ldr	r3, [r4, #20]
   20c92:	b113      	cbz	r3, 20c9a <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   20c94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   20c98:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   20c9a:	b17e      	cbz	r6, 20cbc <ble_gatts_register_chr+0x9c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   20c9c:	2302      	movs	r3, #2
   20c9e:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   20ca2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   20ca6:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   20caa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   20cae:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   20cb2:	9708      	str	r7, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   20cb4:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   20cb6:	4641      	mov	r1, r8
   20cb8:	a805      	add	r0, sp, #20
   20cba:	47b0      	blx	r6
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   20cbc:	4620      	mov	r0, r4
   20cbe:	f7ff fcc7 	bl	20650 <ble_gatts_chr_clt_cfg_allowed>
   20cc2:	b980      	cbnz	r0, 20ce6 <ble_gatts_register_chr+0xc6>
    if (chr->descriptors != NULL) {
   20cc4:	68e5      	ldr	r5, [r4, #12]
   20cc6:	b1b5      	cbz	r5, 20cf6 <ble_gatts_register_chr+0xd6>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   20cc8:	682b      	ldr	r3, [r5, #0]
   20cca:	b1a3      	cbz	r3, 20cf6 <ble_gatts_register_chr+0xd6>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   20ccc:	f8cd 8004 	str.w	r8, [sp, #4]
   20cd0:	9600      	str	r6, [sp, #0]
   20cd2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   20cd6:	462a      	mov	r2, r5
   20cd8:	4621      	mov	r1, r4
   20cda:	4638      	mov	r0, r7
   20cdc:	f7ff ff6e 	bl	20bbc <ble_gatts_register_dsc>
            if (rc != 0) {
   20ce0:	b9a0      	cbnz	r0, 20d0c <ble_gatts_register_chr+0xec>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   20ce2:	3510      	adds	r5, #16
   20ce4:	e7f0      	b.n	20cc8 <ble_gatts_register_chr+0xa8>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   20ce6:	f10d 000e 	add.w	r0, sp, #14
   20cea:	f7ff ff4d 	bl	20b88 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   20cee:	2800      	cmp	r0, #0
   20cf0:	d0e8      	beq.n	20cc4 <ble_gatts_register_chr+0xa4>
            return rc;
   20cf2:	4681      	mov	r9, r0
   20cf4:	e7b9      	b.n	20c6a <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   20cf6:	4a0b      	ldr	r2, [pc, #44]	; (20d24 <ble_gatts_register_chr+0x104>)
   20cf8:	6913      	ldr	r3, [r2, #16]
   20cfa:	3301      	adds	r3, #1
   20cfc:	6113      	str	r3, [r2, #16]
    return 0;
   20cfe:	e7b4      	b.n	20c6a <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   20d00:	f04f 0903 	mov.w	r9, #3
   20d04:	e7b1      	b.n	20c6a <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   20d06:	f04f 0906 	mov.w	r9, #6
   20d0a:	e7ae      	b.n	20c6a <ble_gatts_register_chr+0x4a>
                return rc;
   20d0c:	4681      	mov	r9, r0
   20d0e:	e7ac      	b.n	20c6a <ble_gatts_register_chr+0x4a>
   20d10:	200033d2 	.word	0x200033d2
   20d14:	200032e4 	.word	0x200032e4
   20d18:	00020e9d 	.word	0x00020e9d
   20d1c:	200002d0 	.word	0x200002d0
   20d20:	00020ff3 	.word	0x00020ff3
   20d24:	200032f0 	.word	0x200032f0

00020d28 <ble_gatts_register_svc>:
{
   20d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d2c:	b088      	sub	sp, #32
   20d2e:	4604      	mov	r4, r0
   20d30:	460d      	mov	r5, r1
   20d32:	4616      	mov	r6, r2
   20d34:	461f      	mov	r7, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   20d36:	f7ff fd23 	bl	20780 <ble_gatts_svc_incs_satisfied>
   20d3a:	2800      	cmp	r0, #0
   20d3c:	d046      	beq.n	20dcc <ble_gatts_register_svc+0xa4>
    if (!ble_gatts_svc_is_sane(svc)) {
   20d3e:	4620      	mov	r0, r4
   20d40:	f7ff fd90 	bl	20864 <ble_gatts_svc_is_sane>
   20d44:	2800      	cmp	r0, #0
   20d46:	d047      	beq.n	20dd8 <ble_gatts_register_svc+0xb0>
    uuid = NULL;
   20d48:	f04f 0800 	mov.w	r8, #0
   20d4c:	f8cd 8008 	str.w	r8, [sp, #8]
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   20d50:	a902      	add	r1, sp, #8
   20d52:	7820      	ldrb	r0, [r4, #0]
   20d54:	f7ff fd74 	bl	20840 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   20d58:	9401      	str	r4, [sp, #4]
   20d5a:	4b23      	ldr	r3, [pc, #140]	; (20de8 <ble_gatts_register_svc+0xc0>)
   20d5c:	9300      	str	r3, [sp, #0]
   20d5e:	462b      	mov	r3, r5
   20d60:	4642      	mov	r2, r8
   20d62:	2101      	movs	r1, #1
   20d64:	9802      	ldr	r0, [sp, #8]
   20d66:	f7fc fb79 	bl	1d45c <ble_att_svr_register>
    if (rc != 0) {
   20d6a:	4680      	mov	r8, r0
   20d6c:	bb80      	cbnz	r0, 20dd0 <ble_gatts_register_svc+0xa8>
    if (register_cb != NULL) {
   20d6e:	b14e      	cbz	r6, 20d84 <ble_gatts_register_svc+0x5c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   20d70:	2301      	movs	r3, #1
   20d72:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   20d76:	882b      	ldrh	r3, [r5, #0]
   20d78:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   20d7c:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   20d7e:	4639      	mov	r1, r7
   20d80:	a803      	add	r0, sp, #12
   20d82:	47b0      	blx	r6
    if (svc->includes != NULL) {
   20d84:	68a3      	ldr	r3, [r4, #8]
   20d86:	b17b      	cbz	r3, 20da8 <ble_gatts_register_svc+0x80>
        for (i = 0; svc->includes[i] != NULL; i++) {
   20d88:	4645      	mov	r5, r8
   20d8a:	68a3      	ldr	r3, [r4, #8]
   20d8c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   20d90:	b150      	cbz	r0, 20da8 <ble_gatts_register_svc+0x80>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   20d92:	f7ff fcdf 	bl	20754 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   20d96:	4b15      	ldr	r3, [pc, #84]	; (20dec <ble_gatts_register_svc+0xc4>)
   20d98:	681b      	ldr	r3, [r3, #0]
   20d9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   20d9e:	f7ff fedf 	bl	20b60 <ble_gatts_register_inc>
            if (rc != 0) {
   20da2:	b9e0      	cbnz	r0, 20dde <ble_gatts_register_svc+0xb6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   20da4:	3501      	adds	r5, #1
   20da6:	e7f0      	b.n	20d8a <ble_gatts_register_svc+0x62>
    if (svc->characteristics != NULL) {
   20da8:	68e5      	ldr	r5, [r4, #12]
   20daa:	b155      	cbz	r5, 20dc2 <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   20dac:	682b      	ldr	r3, [r5, #0]
   20dae:	b143      	cbz	r3, 20dc2 <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   20db0:	463b      	mov	r3, r7
   20db2:	4632      	mov	r2, r6
   20db4:	4629      	mov	r1, r5
   20db6:	4620      	mov	r0, r4
   20db8:	f7ff ff32 	bl	20c20 <ble_gatts_register_chr>
            if (rc != 0) {
   20dbc:	b988      	cbnz	r0, 20de2 <ble_gatts_register_svc+0xba>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   20dbe:	3518      	adds	r5, #24
   20dc0:	e7f4      	b.n	20dac <ble_gatts_register_svc+0x84>
    STATS_INC(ble_gatts_stats, svcs);
   20dc2:	4a0b      	ldr	r2, [pc, #44]	; (20df0 <ble_gatts_register_svc+0xc8>)
   20dc4:	68d3      	ldr	r3, [r2, #12]
   20dc6:	3301      	adds	r3, #1
   20dc8:	60d3      	str	r3, [r2, #12]
    return 0;
   20dca:	e001      	b.n	20dd0 <ble_gatts_register_svc+0xa8>
        return BLE_HS_EAGAIN;
   20dcc:	f04f 0801 	mov.w	r8, #1
}
   20dd0:	4640      	mov	r0, r8
   20dd2:	b008      	add	sp, #32
   20dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   20dd8:	f04f 0803 	mov.w	r8, #3
   20ddc:	e7f8      	b.n	20dd0 <ble_gatts_register_svc+0xa8>
                return rc;
   20dde:	4680      	mov	r8, r0
   20de0:	e7f6      	b.n	20dd0 <ble_gatts_register_svc+0xa8>
                return rc;
   20de2:	4680      	mov	r8, r0
   20de4:	e7f4      	b.n	20dd0 <ble_gatts_register_svc+0xa8>
   20de6:	bf00      	nop
   20de8:	00020e69 	.word	0x00020e69
   20dec:	20003328 	.word	0x20003328
   20df0:	200032f0 	.word	0x200032f0

00020df4 <ble_gatts_register_round>:
{
   20df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20df8:	b083      	sub	sp, #12
   20dfa:	4607      	mov	r7, r0
   20dfc:	4689      	mov	r9, r1
   20dfe:	4690      	mov	r8, r2
    *out_num_registered = 0;
   20e00:	2400      	movs	r4, #0
   20e02:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   20e04:	e009      	b.n	20e1a <ble_gatts_register_round+0x26>
                entry->handle = handle;
   20e06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   20e0a:	80b3      	strh	r3, [r6, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   20e0c:	f7fc fb4e 	bl	1d4ac <ble_att_svr_prev_handle>
   20e10:	80f0      	strh	r0, [r6, #6]
                (*out_num_registered)++;
   20e12:	683b      	ldr	r3, [r7, #0]
   20e14:	3301      	adds	r3, #1
   20e16:	603b      	str	r3, [r7, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   20e18:	3401      	adds	r4, #1
   20e1a:	4b11      	ldr	r3, [pc, #68]	; (20e60 <ble_gatts_register_round+0x6c>)
   20e1c:	881b      	ldrh	r3, [r3, #0]
   20e1e:	42a3      	cmp	r3, r4
   20e20:	dd17      	ble.n	20e52 <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   20e22:	4b10      	ldr	r3, [pc, #64]	; (20e64 <ble_gatts_register_round+0x70>)
   20e24:	681d      	ldr	r5, [r3, #0]
   20e26:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
        if (entry->handle == 0) {
   20e2a:	88b3      	ldrh	r3, [r6, #4]
   20e2c:	2b00      	cmp	r3, #0
   20e2e:	d1f3      	bne.n	20e18 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   20e30:	4643      	mov	r3, r8
   20e32:	464a      	mov	r2, r9
   20e34:	f10d 0106 	add.w	r1, sp, #6
   20e38:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   20e3c:	f7ff ff74 	bl	20d28 <ble_gatts_register_svc>
            switch (rc) {
   20e40:	4603      	mov	r3, r0
   20e42:	2800      	cmp	r0, #0
   20e44:	d0df      	beq.n	20e06 <ble_gatts_register_round+0x12>
   20e46:	2801      	cmp	r0, #1
   20e48:	d0e6      	beq.n	20e18 <ble_gatts_register_round+0x24>
}
   20e4a:	4618      	mov	r0, r3
   20e4c:	b003      	add	sp, #12
   20e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*out_num_registered == 0) {
   20e52:	683b      	ldr	r3, [r7, #0]
   20e54:	b10b      	cbz	r3, 20e5a <ble_gatts_register_round+0x66>
    return 0;
   20e56:	2300      	movs	r3, #0
   20e58:	e7f7      	b.n	20e4a <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   20e5a:	2303      	movs	r3, #3
   20e5c:	e7f5      	b.n	20e4a <ble_gatts_register_round+0x56>
   20e5e:	bf00      	nop
   20e60:	200032ec 	.word	0x200032ec
   20e64:	20003328 	.word	0x20003328

00020e68 <ble_gatts_svc_access>:
{
   20e68:	b538      	push	{r3, r4, r5, lr}
   20e6a:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   20e6c:	4a0a      	ldr	r2, [pc, #40]	; (20e98 <ble_gatts_svc_access+0x30>)
   20e6e:	6993      	ldr	r3, [r2, #24]
   20e70:	3301      	adds	r3, #1
   20e72:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   20e74:	9b04      	ldr	r3, [sp, #16]
   20e76:	681d      	ldr	r5, [r3, #0]
   20e78:	6860      	ldr	r0, [r4, #4]
   20e7a:	f005 fb4d 	bl	26518 <ble_uuid_length>
   20e7e:	b281      	uxth	r1, r0
   20e80:	4628      	mov	r0, r5
   20e82:	f7ec fd24 	bl	d8ce <os_mbuf_extend>
    if (buf == NULL) {
   20e86:	b128      	cbz	r0, 20e94 <ble_gatts_svc_access+0x2c>
   20e88:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   20e8a:	6860      	ldr	r0, [r4, #4]
   20e8c:	f005 fb18 	bl	264c0 <ble_uuid_flat>
    return 0;
   20e90:	2000      	movs	r0, #0
}
   20e92:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   20e94:	2011      	movs	r0, #17
   20e96:	e7fc      	b.n	20e92 <ble_gatts_svc_access+0x2a>
   20e98:	200032f0 	.word	0x200032f0

00020e9c <ble_gatts_chr_def_access>:
{
   20e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20e9e:	460c      	mov	r4, r1
   20ea0:	9f06      	ldr	r7, [sp, #24]
   20ea2:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   20ea4:	4a13      	ldr	r2, [pc, #76]	; (20ef4 <ble_gatts_chr_def_access+0x58>)
   20ea6:	6a13      	ldr	r3, [r2, #32]
   20ea8:	3301      	adds	r3, #1
   20eaa:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   20eac:	2103      	movs	r1, #3
   20eae:	6838      	ldr	r0, [r7, #0]
   20eb0:	f7ec fd0d 	bl	d8ce <os_mbuf_extend>
    if (buf == NULL) {
   20eb4:	b1d0      	cbz	r0, 20eec <ble_gatts_chr_def_access+0x50>
   20eb6:	4605      	mov	r5, r0
    buf[0] = ble_gatts_chr_properties(chr);
   20eb8:	4630      	mov	r0, r6
   20eba:	f7ff fbff 	bl	206bc <ble_gatts_chr_properties>
   20ebe:	4603      	mov	r3, r0
   20ec0:	4628      	mov	r0, r5
   20ec2:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(buf + 1, attr_handle + 1);
   20ec6:	1c61      	adds	r1, r4, #1
   20ec8:	b289      	uxth	r1, r1
   20eca:	f009 fe65 	bl	2ab98 <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   20ece:	683c      	ldr	r4, [r7, #0]
   20ed0:	6830      	ldr	r0, [r6, #0]
   20ed2:	f005 fb21 	bl	26518 <ble_uuid_length>
   20ed6:	b281      	uxth	r1, r0
   20ed8:	4620      	mov	r0, r4
   20eda:	f7ec fcf8 	bl	d8ce <os_mbuf_extend>
    if (buf == NULL) {
   20ede:	4601      	mov	r1, r0
   20ee0:	b130      	cbz	r0, 20ef0 <ble_gatts_chr_def_access+0x54>
    ble_uuid_flat(chr->uuid, buf);
   20ee2:	6830      	ldr	r0, [r6, #0]
   20ee4:	f005 faec 	bl	264c0 <ble_uuid_flat>
    return 0;
   20ee8:	2000      	movs	r0, #0
}
   20eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   20eec:	2011      	movs	r0, #17
   20eee:	e7fc      	b.n	20eea <ble_gatts_chr_def_access+0x4e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   20ef0:	2011      	movs	r0, #17
   20ef2:	e7fa      	b.n	20eea <ble_gatts_chr_def_access+0x4e>
   20ef4:	200032f0 	.word	0x200032f0

00020ef8 <ble_gatts_inc_access>:
{
   20ef8:	b570      	push	{r4, r5, r6, lr}
   20efa:	9e04      	ldr	r6, [sp, #16]
   20efc:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   20efe:	4a13      	ldr	r2, [pc, #76]	; (20f4c <ble_gatts_inc_access+0x54>)
   20f00:	69d3      	ldr	r3, [r2, #28]
   20f02:	3301      	adds	r3, #1
   20f04:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   20f06:	2104      	movs	r1, #4
   20f08:	6830      	ldr	r0, [r6, #0]
   20f0a:	f7ec fce0 	bl	d8ce <os_mbuf_extend>
    if (buf == NULL) {
   20f0e:	b1c8      	cbz	r0, 20f44 <ble_gatts_inc_access+0x4c>
   20f10:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   20f12:	88a1      	ldrh	r1, [r4, #4]
   20f14:	f009 fe40 	bl	2ab98 <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   20f18:	88e1      	ldrh	r1, [r4, #6]
   20f1a:	1ca8      	adds	r0, r5, #2
   20f1c:	f009 fe3c 	bl	2ab98 <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   20f20:	6823      	ldr	r3, [r4, #0]
   20f22:	6858      	ldr	r0, [r3, #4]
   20f24:	f005 fa92 	bl	2644c <ble_uuid_u16>
    if (uuid16 != 0) {
   20f28:	4604      	mov	r4, r0
   20f2a:	b908      	cbnz	r0, 20f30 <ble_gatts_inc_access+0x38>
    return 0;
   20f2c:	2000      	movs	r0, #0
}
   20f2e:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   20f30:	2102      	movs	r1, #2
   20f32:	6830      	ldr	r0, [r6, #0]
   20f34:	f7ec fccb 	bl	d8ce <os_mbuf_extend>
        if (buf == NULL) {
   20f38:	b130      	cbz	r0, 20f48 <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   20f3a:	4621      	mov	r1, r4
   20f3c:	f009 fe2c 	bl	2ab98 <put_le16>
    return 0;
   20f40:	2000      	movs	r0, #0
   20f42:	e7f4      	b.n	20f2e <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   20f44:	2011      	movs	r0, #17
   20f46:	e7f2      	b.n	20f2e <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   20f48:	2011      	movs	r0, #17
   20f4a:	e7f0      	b.n	20f2e <ble_gatts_inc_access+0x36>
   20f4c:	200032f0 	.word	0x200032f0

00020f50 <ble_gatts_val_access>:
{
   20f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f54:	4607      	mov	r7, r0
   20f56:	460d      	mov	r5, r1
   20f58:	4616      	mov	r6, r2
   20f5a:	461c      	mov	r4, r3
   20f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    switch (gatt_ctxt->op) {
   20f60:	781b      	ldrb	r3, [r3, #0]
   20f62:	2b03      	cmp	r3, #3
   20f64:	d841      	bhi.n	20fea <ble_gatts_val_access+0x9a>
   20f66:	e8df f003 	tbb	[pc, r3]
   20f6a:	3202      	.short	0x3202
   20f6c:	3202      	.short	0x3202
        if (offset == 0) {
   20f6e:	b9fe      	cbnz	r6, 20fb0 <ble_gatts_val_access+0x60>
            gatt_ctxt->om = *om;
   20f70:	f8d8 3000 	ldr.w	r3, [r8]
   20f74:	6063      	str	r3, [r4, #4]
            new_om = 0;
   20f76:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   20f7a:	6863      	ldr	r3, [r4, #4]
   20f7c:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   20f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20f82:	4622      	mov	r2, r4
   20f84:	4629      	mov	r1, r5
   20f86:	4638      	mov	r0, r7
   20f88:	9d09      	ldr	r5, [sp, #36]	; 0x24
   20f8a:	47a8      	blx	r5
        if (rc == 0) {
   20f8c:	4605      	mov	r5, r0
   20f8e:	b9b8      	cbnz	r0, 20fc0 <ble_gatts_val_access+0x70>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   20f90:	6861      	ldr	r1, [r4, #4]
   20f92:	8a0b      	ldrh	r3, [r1, #16]
   20f94:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   20f98:	1b9b      	subs	r3, r3, r6
   20f9a:	d410      	bmi.n	20fbe <ble_gatts_val_access+0x6e>
                if (new_om) {
   20f9c:	f1b9 0f00 	cmp.w	r9, #0
   20fa0:	d00e      	beq.n	20fc0 <ble_gatts_val_access+0x70>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   20fa2:	b29b      	uxth	r3, r3
   20fa4:	4632      	mov	r2, r6
   20fa6:	f8d8 0000 	ldr.w	r0, [r8]
   20faa:	f7ec fae1 	bl	d570 <os_mbuf_appendfrom>
   20fae:	e007      	b.n	20fc0 <ble_gatts_val_access+0x70>
            gatt_ctxt->om = ble_hs_mbuf_att_pkt();
   20fb0:	f002 fa41 	bl	23436 <ble_hs_mbuf_att_pkt>
   20fb4:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   20fb6:	b1d0      	cbz	r0, 20fee <ble_gatts_val_access+0x9e>
            new_om = 1;
   20fb8:	f04f 0901 	mov.w	r9, #1
   20fbc:	e7dd      	b.n	20f7a <ble_gatts_val_access+0x2a>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   20fbe:	2507      	movs	r5, #7
        if (new_om) {
   20fc0:	f1b9 0f00 	cmp.w	r9, #0
   20fc4:	d00e      	beq.n	20fe4 <ble_gatts_val_access+0x94>
            os_mbuf_free_chain(gatt_ctxt->om);
   20fc6:	6860      	ldr	r0, [r4, #4]
   20fc8:	f7ec fa54 	bl	d474 <os_mbuf_free_chain>
   20fcc:	e00a      	b.n	20fe4 <ble_gatts_val_access+0x94>
        gatt_ctxt->om = *om;
   20fce:	f8d8 3000 	ldr.w	r3, [r8]
   20fd2:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   20fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20fd6:	4622      	mov	r2, r4
   20fd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   20fda:	47a8      	blx	r5
   20fdc:	4605      	mov	r5, r0
        *om = gatt_ctxt->om;
   20fde:	6863      	ldr	r3, [r4, #4]
   20fe0:	f8c8 3000 	str.w	r3, [r8]
}
   20fe4:	4628      	mov	r0, r5
   20fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (gatt_ctxt->op) {
   20fea:	250e      	movs	r5, #14
   20fec:	e7fa      	b.n	20fe4 <ble_gatts_val_access+0x94>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   20fee:	2511      	movs	r5, #17
   20ff0:	e7f8      	b.n	20fe4 <ble_gatts_val_access+0x94>

00020ff2 <ble_gatts_chr_val_access>:
{
   20ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ff4:	b089      	sub	sp, #36	; 0x24
   20ff6:	4604      	mov	r4, r0
   20ff8:	460d      	mov	r5, r1
   20ffa:	461e      	mov	r6, r3
   20ffc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   20ffe:	4610      	mov	r0, r2
   21000:	f7ff fb91 	bl	20726 <ble_gatts_chr_op>
   21004:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   21008:	9707      	str	r7, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   2100a:	f7ff fb93 	bl	20734 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   2100e:	68bb      	ldr	r3, [r7, #8]
   21010:	9302      	str	r3, [sp, #8]
   21012:	687b      	ldr	r3, [r7, #4]
   21014:	9301      	str	r3, [sp, #4]
   21016:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21018:	9300      	str	r3, [sp, #0]
   2101a:	ab05      	add	r3, sp, #20
   2101c:	4632      	mov	r2, r6
   2101e:	4629      	mov	r1, r5
   21020:	4620      	mov	r0, r4
   21022:	f7ff ff95 	bl	20f50 <ble_gatts_val_access>
}
   21026:	b009      	add	sp, #36	; 0x24
   21028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002102a <ble_gatts_dsc_access>:
{
   2102a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2102c:	b089      	sub	sp, #36	; 0x24
   2102e:	4604      	mov	r4, r0
   21030:	460d      	mov	r5, r1
   21032:	461e      	mov	r6, r3
   21034:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   21036:	4610      	mov	r0, r2
   21038:	f7ff fbc2 	bl	207c0 <ble_gatts_dsc_op>
   2103c:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   21040:	9707      	str	r7, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   21042:	f7ff fbc3 	bl	207cc <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   21046:	68fb      	ldr	r3, [r7, #12]
   21048:	9302      	str	r3, [sp, #8]
   2104a:	68bb      	ldr	r3, [r7, #8]
   2104c:	9301      	str	r3, [sp, #4]
   2104e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21050:	9300      	str	r3, [sp, #0]
   21052:	ab05      	add	r3, sp, #20
   21054:	4632      	mov	r2, r6
   21056:	4629      	mov	r1, r5
   21058:	4620      	mov	r0, r4
   2105a:	f7ff ff79 	bl	20f50 <ble_gatts_val_access>
}
   2105e:	b009      	add	sp, #36	; 0x24
   21060:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021062 <ble_gatts_mutable>:
{
   21062:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   21064:	f7fd fdb0 	bl	1ebc8 <ble_gap_adv_active>
   21068:	b108      	cbz	r0, 2106e <ble_gatts_mutable+0xc>
        return false;
   2106a:	2000      	movs	r0, #0
}
   2106c:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   2106e:	f7fd feb3 	bl	1edd8 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   21072:	2800      	cmp	r0, #0
   21074:	d1f9      	bne.n	2106a <ble_gatts_mutable+0x8>
        ble_gap_conn_active()) {
   21076:	f7fd feb1 	bl	1eddc <ble_gap_conn_active>
        ble_gap_disc_active() ||
   2107a:	2800      	cmp	r0, #0
   2107c:	d1f5      	bne.n	2106a <ble_gatts_mutable+0x8>
    if (ble_hs_conn_first() != NULL) {
   2107e:	f001 fa85 	bl	2258c <ble_hs_conn_first>
   21082:	b108      	cbz	r0, 21088 <ble_gatts_mutable+0x26>
        return false;
   21084:	2000      	movs	r0, #0
   21086:	e7f1      	b.n	2106c <ble_gatts_mutable+0xa>
    return true;
   21088:	2001      	movs	r0, #1
   2108a:	e7ef      	b.n	2106c <ble_gatts_mutable+0xa>

0002108c <ble_gatts_free_mem>:
{
   2108c:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   2108e:	4c06      	ldr	r4, [pc, #24]	; (210a8 <ble_gatts_free_mem+0x1c>)
   21090:	6820      	ldr	r0, [r4, #0]
   21092:	f009 ff99 	bl	2afc8 <free>
    ble_gatts_clt_cfg_mem = NULL;
   21096:	2500      	movs	r5, #0
   21098:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   2109a:	4c04      	ldr	r4, [pc, #16]	; (210ac <ble_gatts_free_mem+0x20>)
   2109c:	6820      	ldr	r0, [r4, #0]
   2109e:	f009 ff93 	bl	2afc8 <free>
    ble_gatts_svc_entries = NULL;
   210a2:	6025      	str	r5, [r4, #0]
}
   210a4:	bd38      	pop	{r3, r4, r5, pc}
   210a6:	bf00      	nop
   210a8:	200032c0 	.word	0x200032c0
   210ac:	20003328 	.word	0x20003328

000210b0 <ble_gatts_free_svc_defs>:
{
   210b0:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   210b2:	4c04      	ldr	r4, [pc, #16]	; (210c4 <ble_gatts_free_svc_defs+0x14>)
   210b4:	6820      	ldr	r0, [r4, #0]
   210b6:	f009 ff87 	bl	2afc8 <free>
    ble_gatts_svc_defs = NULL;
   210ba:	2300      	movs	r3, #0
   210bc:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   210be:	4a02      	ldr	r2, [pc, #8]	; (210c8 <ble_gatts_free_svc_defs+0x18>)
   210c0:	6013      	str	r3, [r2, #0]
}
   210c2:	bd10      	pop	{r4, pc}
   210c4:	20003324 	.word	0x20003324
   210c8:	200032e8 	.word	0x200032e8

000210cc <ble_gatts_tx_notifications_one_chr>:
{
   210cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   210d0:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   210d2:	4601      	mov	r1, r0
   210d4:	4b17      	ldr	r3, [pc, #92]	; (21134 <ble_gatts_tx_notifications_one_chr+0x68>)
   210d6:	6818      	ldr	r0, [r3, #0]
   210d8:	f7ff fb94 	bl	20804 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   210dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   210e0:	d026      	beq.n	21130 <ble_gatts_tx_notifications_one_chr+0x64>
   210e2:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   210e4:	2600      	movs	r6, #0
   210e6:	e008      	b.n	210fa <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   210e8:	2400      	movs	r4, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   210ea:	f64f 77ff 	movw	r7, #65535	; 0xffff
   210ee:	e013      	b.n	21118 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gatts_notify(conn_handle, chr_val_handle);
   210f0:	4641      	mov	r1, r8
   210f2:	4638      	mov	r0, r7
   210f4:	f7ff f9d8 	bl	204a8 <ble_gatts_notify>
    for (i = 0; ; i++) {
   210f8:	3601      	adds	r6, #1
        ble_hs_lock();
   210fa:	f000 fbb7 	bl	2186c <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   210fe:	4630      	mov	r0, r6
   21100:	f001 fa2e 	bl	22560 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   21104:	4605      	mov	r5, r0
   21106:	2800      	cmp	r0, #0
   21108:	d0ee      	beq.n	210e8 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2110a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   2110c:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   21110:	f7ff fbbc 	bl	2088c <ble_gatts_schedule_update>
   21114:	4604      	mov	r4, r0
            conn_handle = conn->bhc_handle;
   21116:	88af      	ldrh	r7, [r5, #4]
        ble_hs_unlock();
   21118:	f000 fbac 	bl	21874 <ble_hs_unlock>
        if (conn == NULL) {
   2111c:	b145      	cbz	r5, 21130 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   2111e:	2c1b      	cmp	r4, #27
   21120:	d0e6      	beq.n	210f0 <ble_gatts_tx_notifications_one_chr+0x24>
   21122:	2c1d      	cmp	r4, #29
   21124:	d1e8      	bne.n	210f8 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gatts_indicate(conn_handle, chr_val_handle);
   21126:	4641      	mov	r1, r8
   21128:	4638      	mov	r0, r7
   2112a:	f7ff fa25 	bl	20578 <ble_gatts_indicate>
            break;
   2112e:	e7e3      	b.n	210f8 <ble_gatts_tx_notifications_one_chr+0x2c>
}
   21130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21134:	200032e0 	.word	0x200032e0

00021138 <ble_gatts_register_svcs>:
{
   21138:	b5f0      	push	{r4, r5, r6, r7, lr}
   2113a:	b083      	sub	sp, #12
   2113c:	460e      	mov	r6, r1
   2113e:	4617      	mov	r7, r2
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   21140:	2400      	movs	r4, #0
   21142:	0123      	lsls	r3, r4, #4
   21144:	eb00 1104 	add.w	r1, r0, r4, lsl #4
   21148:	5cc3      	ldrb	r3, [r0, r3]
   2114a:	b19b      	cbz	r3, 21174 <ble_gatts_register_svcs+0x3c>
        idx = ble_gatts_num_svc_entries + i;
   2114c:	4b15      	ldr	r3, [pc, #84]	; (211a4 <ble_gatts_register_svcs+0x6c>)
   2114e:	881b      	ldrh	r3, [r3, #0]
   21150:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   21152:	4a15      	ldr	r2, [pc, #84]	; (211a8 <ble_gatts_register_svcs+0x70>)
   21154:	8812      	ldrh	r2, [r2, #0]
   21156:	429a      	cmp	r2, r3
   21158:	dd1f      	ble.n	2119a <ble_gatts_register_svcs+0x62>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   2115a:	4a14      	ldr	r2, [pc, #80]	; (211ac <ble_gatts_register_svcs+0x74>)
   2115c:	6812      	ldr	r2, [r2, #0]
   2115e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   21162:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   21166:	2300      	movs	r3, #0
   21168:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   2116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2116e:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   21170:	3401      	adds	r4, #1
   21172:	e7e6      	b.n	21142 <ble_gatts_register_svcs+0xa>
    ble_gatts_num_svc_entries += num_svcs;
   21174:	4a0b      	ldr	r2, [pc, #44]	; (211a4 <ble_gatts_register_svcs+0x6c>)
   21176:	8813      	ldrh	r3, [r2, #0]
   21178:	4423      	add	r3, r4
   2117a:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   2117c:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   2117e:	42a5      	cmp	r5, r4
   21180:	da09      	bge.n	21196 <ble_gatts_register_svcs+0x5e>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   21182:	463a      	mov	r2, r7
   21184:	4631      	mov	r1, r6
   21186:	a801      	add	r0, sp, #4
   21188:	f7ff fe34 	bl	20df4 <ble_gatts_register_round>
        if (rc != 0) {
   2118c:	4603      	mov	r3, r0
   2118e:	b928      	cbnz	r0, 2119c <ble_gatts_register_svcs+0x64>
        total_registered += cur_registered;
   21190:	9b01      	ldr	r3, [sp, #4]
   21192:	441d      	add	r5, r3
   21194:	e7f3      	b.n	2117e <ble_gatts_register_svcs+0x46>
    return 0;
   21196:	2300      	movs	r3, #0
   21198:	e000      	b.n	2119c <ble_gatts_register_svcs+0x64>
            return BLE_HS_ENOMEM;
   2119a:	2306      	movs	r3, #6
}
   2119c:	4618      	mov	r0, r3
   2119e:	b003      	add	sp, #12
   211a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   211a2:	bf00      	nop
   211a4:	200032ec 	.word	0x200032ec
   211a8:	200033d4 	.word	0x200033d4
   211ac:	20003328 	.word	0x20003328

000211b0 <ble_gatts_connection_broken>:
{
   211b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   211b2:	b083      	sub	sp, #12
   211b4:	4606      	mov	r6, r0
    ble_hs_lock();
   211b6:	f000 fb59 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   211ba:	4630      	mov	r0, r6
   211bc:	f001 f9b4 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   211c0:	4604      	mov	r4, r0
   211c2:	b120      	cbz	r0, 211ce <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   211c4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   211c6:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   211c8:	2300      	movs	r3, #0
   211ca:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   211cc:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   211ce:	f000 fb51 	bl	21874 <ble_hs_unlock>
    if (conn == NULL) {
   211d2:	b1bc      	cbz	r4, 21204 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   211d4:	4630      	mov	r0, r6
   211d6:	f7ff f96c 	bl	204b2 <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   211da:	b19d      	cbz	r5, 21204 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   211dc:	2400      	movs	r4, #0
   211de:	e00b      	b.n	211f8 <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   211e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   211e4:	789b      	ldrb	r3, [r3, #2]
   211e6:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   211ea:	2200      	movs	r2, #0
   211ec:	9200      	str	r2, [sp, #0]
   211ee:	2202      	movs	r2, #2
   211f0:	4630      	mov	r0, r6
   211f2:	f7ff fc55 	bl	20aa0 <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   211f6:	3401      	adds	r4, #1
   211f8:	42a7      	cmp	r7, r4
   211fa:	dcf1      	bgt.n	211e0 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   211fc:	4629      	mov	r1, r5
   211fe:	4802      	ldr	r0, [pc, #8]	; (21208 <ble_gatts_connection_broken+0x58>)
   21200:	f7ec fd3d 	bl	dc7e <os_memblock_put>
}
   21204:	b003      	add	sp, #12
   21206:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21208:	200032c4 	.word	0x200032c4

0002120c <ble_gatts_start>:
{
   2120c:	b570      	push	{r4, r5, r6, lr}
   2120e:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   21210:	4b43      	ldr	r3, [pc, #268]	; (21320 <ble_gatts_start+0x114>)
   21212:	681b      	ldr	r3, [r3, #0]
   21214:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   21216:	f000 fb29 	bl	2186c <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2121a:	f7ff ff22 	bl	21062 <ble_gatts_mutable>
   2121e:	b948      	cbnz	r0, 21234 <ble_gatts_start+0x28>
        rc = BLE_HS_EBUSY;
   21220:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   21222:	f7ff ff33 	bl	2108c <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   21226:	f7ff ff43 	bl	210b0 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   2122a:	f000 fb23 	bl	21874 <ble_hs_unlock>
}
   2122e:	4620      	mov	r0, r4
   21230:	b004      	add	sp, #16
   21232:	bd70      	pop	{r4, r5, r6, pc}
    ble_gatts_free_mem();
   21234:	f7ff ff2a 	bl	2108c <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   21238:	f7fc feae 	bl	1df98 <ble_att_svr_start>
    if (rc != 0) {
   2123c:	4604      	mov	r4, r0
   2123e:	2800      	cmp	r0, #0
   21240:	d168      	bne.n	21314 <ble_gatts_start+0x108>
    if (ble_hs_max_client_configs > 0) {
   21242:	4b38      	ldr	r3, [pc, #224]	; (21324 <ble_gatts_start+0x118>)
   21244:	8818      	ldrh	r0, [r3, #0]
   21246:	b9b0      	cbnz	r0, 21276 <ble_gatts_start+0x6a>
    if (ble_hs_max_services > 0) {
   21248:	4b37      	ldr	r3, [pc, #220]	; (21328 <ble_gatts_start+0x11c>)
   2124a:	8818      	ldrh	r0, [r3, #0]
   2124c:	b9e0      	cbnz	r0, 21288 <ble_gatts_start+0x7c>
    ble_gatts_num_svc_entries = 0;
   2124e:	4b37      	ldr	r3, [pc, #220]	; (2132c <ble_gatts_start+0x120>)
   21250:	2200      	movs	r2, #0
   21252:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   21254:	4b36      	ldr	r3, [pc, #216]	; (21330 <ble_gatts_start+0x124>)
   21256:	681b      	ldr	r3, [r3, #0]
   21258:	42a3      	cmp	r3, r4
   2125a:	dd1e      	ble.n	2129a <ble_gatts_start+0x8e>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   2125c:	4b35      	ldr	r3, [pc, #212]	; (21334 <ble_gatts_start+0x128>)
   2125e:	6818      	ldr	r0, [r3, #0]
   21260:	4b35      	ldr	r3, [pc, #212]	; (21338 <ble_gatts_start+0x12c>)
   21262:	685a      	ldr	r2, [r3, #4]
   21264:	6819      	ldr	r1, [r3, #0]
   21266:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   2126a:	f7ff ff65 	bl	21138 <ble_gatts_register_svcs>
        if (rc != 0) {
   2126e:	2800      	cmp	r0, #0
   21270:	d14f      	bne.n	21312 <ble_gatts_start+0x106>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   21272:	3401      	adds	r4, #1
   21274:	e7ee      	b.n	21254 <ble_gatts_start+0x48>
        ble_gatts_clt_cfg_mem = malloc(
   21276:	0080      	lsls	r0, r0, #2
   21278:	f009 fe70 	bl	2af5c <malloc>
   2127c:	4b2f      	ldr	r3, [pc, #188]	; (2133c <ble_gatts_start+0x130>)
   2127e:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   21280:	2800      	cmp	r0, #0
   21282:	d1e1      	bne.n	21248 <ble_gatts_start+0x3c>
            rc = BLE_HS_ENOMEM;
   21284:	2406      	movs	r4, #6
   21286:	e7cc      	b.n	21222 <ble_gatts_start+0x16>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   21288:	00c0      	lsls	r0, r0, #3
   2128a:	f009 fe67 	bl	2af5c <malloc>
        ble_gatts_svc_entries =
   2128e:	4b2c      	ldr	r3, [pc, #176]	; (21340 <ble_gatts_start+0x134>)
   21290:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   21292:	2800      	cmp	r0, #0
   21294:	d1db      	bne.n	2124e <ble_gatts_start+0x42>
            rc = BLE_HS_ENOMEM;
   21296:	2406      	movs	r4, #6
   21298:	e7c3      	b.n	21222 <ble_gatts_start+0x16>
    ble_gatts_free_svc_defs();
   2129a:	f7ff ff09 	bl	210b0 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   2129e:	4b29      	ldr	r3, [pc, #164]	; (21344 <ble_gatts_start+0x138>)
   212a0:	681c      	ldr	r4, [r3, #0]
   212a2:	2c00      	cmp	r4, #0
   212a4:	d0c1      	beq.n	2122a <ble_gatts_start+0x1e>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   212a6:	4b1f      	ldr	r3, [pc, #124]	; (21324 <ble_gatts_start+0x118>)
   212a8:	881b      	ldrh	r3, [r3, #0]
   212aa:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   212ae:	f7ff fae7 	bl	20880 <ble_gatts_clt_cfg_size>
   212b2:	4602      	mov	r2, r0
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   212b4:	4b24      	ldr	r3, [pc, #144]	; (21348 <ble_gatts_start+0x13c>)
   212b6:	9300      	str	r3, [sp, #0]
   212b8:	4b20      	ldr	r3, [pc, #128]	; (2133c <ble_gatts_start+0x130>)
   212ba:	681b      	ldr	r3, [r3, #0]
   212bc:	b2a1      	uxth	r1, r4
   212be:	4823      	ldr	r0, [pc, #140]	; (2134c <ble_gatts_start+0x140>)
   212c0:	f7ec fc7e 	bl	dbc0 <os_mempool_init>
   212c4:	4606      	mov	r6, r0
   212c6:	4604      	mov	r4, r0
    if (rc != 0) {
   212c8:	b108      	cbz	r0, 212ce <ble_gatts_start+0xc2>
        rc = BLE_HS_EOS;
   212ca:	240b      	movs	r4, #11
   212cc:	e7a9      	b.n	21222 <ble_gatts_start+0x16>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   212ce:	481f      	ldr	r0, [pc, #124]	; (2134c <ble_gatts_start+0x140>)
   212d0:	f7ec fcad 	bl	dc2e <os_memblock_get>
   212d4:	4b1e      	ldr	r3, [pc, #120]	; (21350 <ble_gatts_start+0x144>)
   212d6:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   212d8:	b1f8      	cbz	r0, 2131a <ble_gatts_start+0x10e>
    ha = NULL;
   212da:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   212dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   212e0:	a903      	add	r1, sp, #12
   212e2:	4628      	mov	r0, r5
   212e4:	f7fc f93e 	bl	1d564 <ble_att_svr_find_by_uuid>
   212e8:	4605      	mov	r5, r0
   212ea:	b198      	cbz	r0, 21314 <ble_gatts_start+0x108>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   212ec:	6928      	ldr	r0, [r5, #16]
   212ee:	f7ff f9af 	bl	20650 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   212f2:	4602      	mov	r2, r0
   212f4:	2800      	cmp	r0, #0
   212f6:	d0f1      	beq.n	212dc <ble_gatts_start+0xd0>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   212f8:	896b      	ldrh	r3, [r5, #10]
   212fa:	4915      	ldr	r1, [pc, #84]	; (21350 <ble_gatts_start+0x144>)
   212fc:	6808      	ldr	r0, [r1, #0]
   212fe:	eb00 0186 	add.w	r1, r0, r6, lsl #2
   21302:	3301      	adds	r3, #1
   21304:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   21308:	70ca      	strb	r2, [r1, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   2130a:	2300      	movs	r3, #0
   2130c:	708b      	strb	r3, [r1, #2]
            idx++;
   2130e:	3601      	adds	r6, #1
   21310:	e7e4      	b.n	212dc <ble_gatts_start+0xd0>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   21312:	4604      	mov	r4, r0
    if (rc != 0) {
   21314:	2c00      	cmp	r4, #0
   21316:	d088      	beq.n	2122a <ble_gatts_start+0x1e>
   21318:	e783      	b.n	21222 <ble_gatts_start+0x16>
        rc = BLE_HS_ENOMEM;
   2131a:	2406      	movs	r4, #6
   2131c:	e781      	b.n	21222 <ble_gatts_start+0x16>
   2131e:	bf00      	nop
   21320:	0002e2e0 	.word	0x0002e2e0
   21324:	200033d2 	.word	0x200033d2
   21328:	200033d4 	.word	0x200033d4
   2132c:	200032ec 	.word	0x200032ec
   21330:	200032e8 	.word	0x200032e8
   21334:	20003324 	.word	0x20003324
   21338:	200002d8 	.word	0x200002d8
   2133c:	200032c0 	.word	0x200032c0
   21340:	20003328 	.word	0x20003328
   21344:	200032e4 	.word	0x200032e4
   21348:	0002e2bc 	.word	0x0002e2bc
   2134c:	200032c4 	.word	0x200032c4
   21350:	200032e0 	.word	0x200032e0

00021354 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   21354:	4b05      	ldr	r3, [pc, #20]	; (2136c <ble_gatts_conn_can_alloc+0x18>)
   21356:	681b      	ldr	r3, [r3, #0]
   21358:	b123      	cbz	r3, 21364 <ble_gatts_conn_can_alloc+0x10>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   2135a:	4b05      	ldr	r3, [pc, #20]	; (21370 <ble_gatts_conn_can_alloc+0x1c>)
   2135c:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   2135e:	b11b      	cbz	r3, 21368 <ble_gatts_conn_can_alloc+0x14>
   21360:	2001      	movs	r0, #1
   21362:	4770      	bx	lr
   21364:	2001      	movs	r0, #1
   21366:	4770      	bx	lr
   21368:	2000      	movs	r0, #0
}
   2136a:	4770      	bx	lr
   2136c:	200032e4 	.word	0x200032e4
   21370:	200032c4 	.word	0x200032c4

00021374 <ble_gatts_conn_init>:
{
   21374:	b570      	push	{r4, r5, r6, lr}
   21376:	4604      	mov	r4, r0
    if (ble_gatts_num_cfgable_chrs > 0) {
   21378:	4b0e      	ldr	r3, [pc, #56]	; (213b4 <ble_gatts_conn_init+0x40>)
   2137a:	681b      	ldr	r3, [r3, #0]
   2137c:	2b00      	cmp	r3, #0
   2137e:	dc03      	bgt.n	21388 <ble_gatts_conn_init+0x14>
        gatts_conn->clt_cfgs = NULL;
   21380:	2000      	movs	r0, #0
   21382:	6020      	str	r0, [r4, #0]
        gatts_conn->num_clt_cfgs = 0;
   21384:	6060      	str	r0, [r4, #4]
}
   21386:	bd70      	pop	{r4, r5, r6, pc}
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   21388:	480b      	ldr	r0, [pc, #44]	; (213b8 <ble_gatts_conn_init+0x44>)
   2138a:	f7ec fc50 	bl	dc2e <os_memblock_get>
   2138e:	4605      	mov	r5, r0
   21390:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   21392:	b168      	cbz	r0, 213b0 <ble_gatts_conn_init+0x3c>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   21394:	4b09      	ldr	r3, [pc, #36]	; (213bc <ble_gatts_conn_init+0x48>)
   21396:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   21398:	f7ff fa72 	bl	20880 <ble_gatts_clt_cfg_size>
   2139c:	4602      	mov	r2, r0
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   2139e:	4631      	mov	r1, r6
   213a0:	4628      	mov	r0, r5
   213a2:	f7ed fb09 	bl	e9b8 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   213a6:	4b03      	ldr	r3, [pc, #12]	; (213b4 <ble_gatts_conn_init+0x40>)
   213a8:	681b      	ldr	r3, [r3, #0]
   213aa:	6063      	str	r3, [r4, #4]
    return 0;
   213ac:	2000      	movs	r0, #0
   213ae:	e7ea      	b.n	21386 <ble_gatts_conn_init+0x12>
            return BLE_HS_ENOMEM;
   213b0:	2006      	movs	r0, #6
   213b2:	e7e8      	b.n	21386 <ble_gatts_conn_init+0x12>
   213b4:	200032e4 	.word	0x200032e4
   213b8:	200032c4 	.word	0x200032c4
   213bc:	200032e0 	.word	0x200032e0

000213c0 <ble_gatts_send_next_indicate>:
{
   213c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   213c2:	4606      	mov	r6, r0
    ble_hs_lock();
   213c4:	f000 fa52 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   213c8:	4630      	mov	r0, r6
   213ca:	f001 f8ad 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   213ce:	4604      	mov	r4, r0
   213d0:	b108      	cbz	r0, 213d6 <ble_gatts_send_next_indicate+0x16>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   213d2:	2200      	movs	r2, #0
   213d4:	e002      	b.n	213dc <ble_gatts_send_next_indicate+0x1c>
    chr_val_handle = 0;
   213d6:	2700      	movs	r7, #0
   213d8:	e011      	b.n	213fe <ble_gatts_send_next_indicate+0x3e>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   213da:	3201      	adds	r2, #1
   213dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   213de:	4293      	cmp	r3, r2
   213e0:	dd0c      	ble.n	213fc <ble_gatts_send_next_indicate+0x3c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   213e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   213e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   213e8:	789d      	ldrb	r5, [r3, #2]
   213ea:	f993 1002 	ldrsb.w	r1, [r3, #2]
   213ee:	2900      	cmp	r1, #0
   213f0:	daf3      	bge.n	213da <ble_gatts_send_next_indicate+0x1a>
                chr_val_handle = clt_cfg->chr_val_handle;
   213f2:	881f      	ldrh	r7, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   213f4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   213f8:	709d      	strb	r5, [r3, #2]
                break;
   213fa:	e000      	b.n	213fe <ble_gatts_send_next_indicate+0x3e>
    chr_val_handle = 0;
   213fc:	2700      	movs	r7, #0
    ble_hs_unlock();
   213fe:	f000 fa39 	bl	21874 <ble_hs_unlock>
    if (conn == NULL) {
   21402:	b12c      	cbz	r4, 21410 <ble_gatts_send_next_indicate+0x50>
    if (chr_val_handle == 0) {
   21404:	b137      	cbz	r7, 21414 <ble_gatts_send_next_indicate+0x54>
    rc = ble_gatts_indicate(conn_handle, chr_val_handle);
   21406:	4639      	mov	r1, r7
   21408:	4630      	mov	r0, r6
   2140a:	f7ff f8b5 	bl	20578 <ble_gatts_indicate>
}
   2140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   21410:	2007      	movs	r0, #7
   21412:	e7fc      	b.n	2140e <ble_gatts_send_next_indicate+0x4e>
        return BLE_HS_ENOENT;
   21414:	2005      	movs	r0, #5
   21416:	e7fa      	b.n	2140e <ble_gatts_send_next_indicate+0x4e>

00021418 <ble_gatts_rx_indicate_ack>:
{
   21418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2141c:	b084      	sub	sp, #16
   2141e:	4606      	mov	r6, r0
   21420:	460d      	mov	r5, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   21422:	4b2f      	ldr	r3, [pc, #188]	; (214e0 <ble_gatts_rx_indicate_ack+0xc8>)
   21424:	681c      	ldr	r4, [r3, #0]
   21426:	4620      	mov	r0, r4
   21428:	f7ff f9ec 	bl	20804 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   2142c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   21430:	d04e      	beq.n	214d0 <ble_gatts_rx_indicate_ack+0xb8>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   21432:	ea4f 0880 	mov.w	r8, r0, lsl #2
   21436:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   2143a:	78e3      	ldrb	r3, [r4, #3]
   2143c:	f013 0f02 	tst.w	r3, #2
   21440:	d048      	beq.n	214d4 <ble_gatts_rx_indicate_ack+0xbc>
    ble_hs_lock();
   21442:	f000 fa13 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21446:	4630      	mov	r0, r6
   21448:	f001 f86e 	bl	22528 <ble_hs_conn_find>
   2144c:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   2144e:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   21452:	42aa      	cmp	r2, r5
   21454:	d006      	beq.n	21464 <ble_gatts_rx_indicate_ack+0x4c>
        rc = BLE_HS_ENOENT;
   21456:	2405      	movs	r4, #5
    ble_hs_unlock();
   21458:	f000 fa0c 	bl	21874 <ble_hs_unlock>
    if (rc != 0) {
   2145c:	bbdc      	cbnz	r4, 214d6 <ble_gatts_rx_indicate_ack+0xbe>
    if (persist) {
   2145e:	bb9f      	cbnz	r7, 214c8 <ble_gatts_rx_indicate_ack+0xb0>
    return 0;
   21460:	463c      	mov	r4, r7
   21462:	e038      	b.n	214d6 <ble_gatts_rx_indicate_ack+0xbe>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   21464:	2200      	movs	r2, #0
   21466:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2146a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   2146c:	4490      	add	r8, r2
        persist = conn->bhc_sec_state.bonded &&
   2146e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   21472:	f012 0f04 	tst.w	r2, #4
   21476:	d024      	beq.n	214c2 <ble_gatts_rx_indicate_ack+0xaa>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   21478:	f998 2002 	ldrsb.w	r2, [r8, #2]
        persist = conn->bhc_sec_state.bonded &&
   2147c:	2a00      	cmp	r2, #0
   2147e:	da02      	bge.n	21486 <ble_gatts_rx_indicate_ack+0x6e>
        rc = 0;
   21480:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   21482:	4627      	mov	r7, r4
   21484:	e7e8      	b.n	21458 <ble_gatts_rx_indicate_ack+0x40>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   21486:	4602      	mov	r2, r0
   21488:	f852 0f07 	ldr.w	r0, [r2, #7]!
   2148c:	9000      	str	r0, [sp, #0]
   2148e:	8891      	ldrh	r1, [r2, #4]
   21490:	7992      	ldrb	r2, [r2, #6]
   21492:	f8ad 1004 	strh.w	r1, [sp, #4]
   21496:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2149a:	79d8      	ldrb	r0, [r3, #7]
   2149c:	f002 f841 	bl	23522 <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   214a0:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   214a4:	f8ad 5008 	strh.w	r5, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   214a8:	f898 3002 	ldrb.w	r3, [r8, #2]
   214ac:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   214b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   214b4:	f36f 0300 	bfc	r3, #0, #1
   214b8:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   214bc:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   214be:	2701      	movs	r7, #1
   214c0:	e7ca      	b.n	21458 <ble_gatts_rx_indicate_ack+0x40>
        rc = 0;
   214c2:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   214c4:	4627      	mov	r7, r4
   214c6:	e7c7      	b.n	21458 <ble_gatts_rx_indicate_ack+0x40>
        rc = ble_store_write_cccd(&cccd_value);
   214c8:	4668      	mov	r0, sp
   214ca:	f004 fe17 	bl	260fc <ble_store_write_cccd>
        if (rc != 0) {
   214ce:	e002      	b.n	214d6 <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   214d0:	2405      	movs	r4, #5
   214d2:	e000      	b.n	214d6 <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   214d4:	2405      	movs	r4, #5
}
   214d6:	4620      	mov	r0, r4
   214d8:	b004      	add	sp, #16
   214da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   214de:	bf00      	nop
   214e0:	200032e0 	.word	0x200032e0

000214e4 <ble_gatts_tx_notifications>:
{
   214e4:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   214e6:	2400      	movs	r4, #0
   214e8:	4b06      	ldr	r3, [pc, #24]	; (21504 <ble_gatts_tx_notifications+0x20>)
   214ea:	681b      	ldr	r3, [r3, #0]
   214ec:	42a3      	cmp	r3, r4
   214ee:	dd07      	ble.n	21500 <ble_gatts_tx_notifications+0x1c>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   214f0:	4b05      	ldr	r3, [pc, #20]	; (21508 <ble_gatts_tx_notifications+0x24>)
   214f2:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   214f4:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   214f8:	f7ff fde8 	bl	210cc <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   214fc:	3401      	adds	r4, #1
   214fe:	e7f3      	b.n	214e8 <ble_gatts_tx_notifications+0x4>
}
   21500:	bd10      	pop	{r4, pc}
   21502:	bf00      	nop
   21504:	200032e4 	.word	0x200032e4
   21508:	200032e0 	.word	0x200032e0

0002150c <ble_gatts_bonding_established>:
{
   2150c:	b570      	push	{r4, r5, r6, lr}
   2150e:	b084      	sub	sp, #16
   21510:	4606      	mov	r6, r0
    ble_hs_lock();
   21512:	f000 f9ab 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21516:	4630      	mov	r0, r6
   21518:	f001 f806 	bl	22528 <ble_hs_conn_find>
   2151c:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
   2151e:	4603      	mov	r3, r0
   21520:	f853 0f07 	ldr.w	r0, [r3, #7]!
   21524:	9000      	str	r0, [sp, #0]
   21526:	889a      	ldrh	r2, [r3, #4]
   21528:	799b      	ldrb	r3, [r3, #6]
   2152a:	f8ad 2004 	strh.w	r2, [sp, #4]
   2152e:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   21532:	79e8      	ldrb	r0, [r5, #7]
   21534:	f001 fff5 	bl	23522 <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
   21538:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   2153c:	2400      	movs	r4, #0
   2153e:	e017      	b.n	21570 <ble_gatts_bonding_established+0x64>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
   21540:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
   21544:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   21548:	789b      	ldrb	r3, [r3, #2]
   2154a:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   2154e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   21552:	f36f 0300 	bfc	r3, #0, #1
   21556:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
   2155a:	f000 f98b 	bl	21874 <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
   2155e:	4668      	mov	r0, sp
   21560:	f004 fdcc 	bl	260fc <ble_store_write_cccd>
            ble_hs_lock();
   21564:	f000 f982 	bl	2186c <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
   21568:	4630      	mov	r0, r6
   2156a:	f000 ffdd 	bl	22528 <ble_hs_conn_find>
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   2156e:	3401      	adds	r4, #1
   21570:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21572:	42a3      	cmp	r3, r4
   21574:	dd06      	ble.n	21584 <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
   21576:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   21578:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
   2157c:	7899      	ldrb	r1, [r3, #2]
   2157e:	2900      	cmp	r1, #0
   21580:	d0f5      	beq.n	2156e <ble_gatts_bonding_established+0x62>
   21582:	e7dd      	b.n	21540 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
   21584:	f000 f976 	bl	21874 <ble_hs_unlock>
}
   21588:	b004      	add	sp, #16
   2158a:	bd70      	pop	{r4, r5, r6, pc}

0002158c <ble_gatts_bonding_restored>:
{
   2158c:	b570      	push	{r4, r5, r6, lr}
   2158e:	b08a      	sub	sp, #40	; 0x28
   21590:	4606      	mov	r6, r0
    ble_hs_lock();
   21592:	f000 f96b 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21596:	4630      	mov	r0, r6
   21598:	f000 ffc6 	bl	22528 <ble_hs_conn_find>
   2159c:	4603      	mov	r3, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
   2159e:	4602      	mov	r2, r0
   215a0:	f852 0f07 	ldr.w	r0, [r2, #7]!
   215a4:	9003      	str	r0, [sp, #12]
   215a6:	8891      	ldrh	r1, [r2, #4]
   215a8:	7992      	ldrb	r2, [r2, #6]
   215aa:	f8ad 1010 	strh.w	r1, [sp, #16]
   215ae:	f88d 2012 	strb.w	r2, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   215b2:	79d8      	ldrb	r0, [r3, #7]
   215b4:	f001 ffb5 	bl	23522 <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
   215b8:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
   215bc:	2300      	movs	r3, #0
   215be:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
   215c2:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
   215c6:	f000 f955 	bl	21874 <ble_hs_unlock>
   215ca:	e015      	b.n	215f8 <ble_gatts_bonding_restored+0x6c>
        att_op = 0;
   215cc:	2400      	movs	r4, #0
        ble_hs_unlock();
   215ce:	f000 f951 	bl	21874 <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
   215d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   215d6:	9300      	str	r3, [sp, #0]
   215d8:	2300      	movs	r3, #0
   215da:	2203      	movs	r2, #3
   215dc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   215e0:	4630      	mov	r0, r6
   215e2:	f7ff fa5d 	bl	20aa0 <ble_gatts_subscribe_event>
        switch (att_op) {
   215e6:	2c1b      	cmp	r4, #27
   215e8:	d029      	beq.n	2163e <ble_gatts_bonding_restored+0xb2>
   215ea:	2c1d      	cmp	r4, #29
   215ec:	d038      	beq.n	21660 <ble_gatts_bonding_restored+0xd4>
        cccd_key.idx++;
   215ee:	f89d 3016 	ldrb.w	r3, [sp, #22]
   215f2:	3301      	adds	r3, #1
   215f4:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   215f8:	a906      	add	r1, sp, #24
   215fa:	a803      	add	r0, sp, #12
   215fc:	f004 fd77 	bl	260ee <ble_store_read_cccd>
        if (rc != 0) {
   21600:	bba0      	cbnz	r0, 2166c <ble_gatts_bonding_restored+0xe0>
        ble_hs_lock();
   21602:	f000 f933 	bl	2186c <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   21606:	4630      	mov	r0, r6
   21608:	f000 ff8e 	bl	22528 <ble_hs_conn_find>
   2160c:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   2160e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   21612:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   21614:	f7ff f908 	bl	20828 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
   21618:	4601      	mov	r1, r0
   2161a:	2800      	cmp	r0, #0
   2161c:	d0d6      	beq.n	215cc <ble_gatts_bonding_restored+0x40>
            clt_cfg->flags = cccd_value.flags;
   2161e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   21622:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
   21624:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   21628:	f014 0401 	ands.w	r4, r4, #1
   2162c:	d0cf      	beq.n	215ce <ble_gatts_bonding_restored+0x42>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   2162e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21632:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
   21634:	4628      	mov	r0, r5
   21636:	f7ff f929 	bl	2088c <ble_gatts_schedule_update>
   2163a:	4604      	mov	r4, r0
   2163c:	e7c7      	b.n	215ce <ble_gatts_bonding_restored+0x42>
            rc = ble_gatts_notify(conn_handle, cccd_value.chr_val_handle);
   2163e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   21642:	4630      	mov	r0, r6
   21644:	f7fe ff30 	bl	204a8 <ble_gatts_notify>
            if (rc == 0) {
   21648:	2800      	cmp	r0, #0
   2164a:	d1d0      	bne.n	215ee <ble_gatts_bonding_restored+0x62>
                cccd_value.value_changed = 0;
   2164c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   21650:	f36f 0300 	bfc	r3, #0, #1
   21654:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
   21658:	a806      	add	r0, sp, #24
   2165a:	f004 fd4f 	bl	260fc <ble_store_write_cccd>
   2165e:	e7c6      	b.n	215ee <ble_gatts_bonding_restored+0x62>
            ble_gatts_indicate(conn_handle, cccd_value.chr_val_handle);
   21660:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   21664:	4630      	mov	r0, r6
   21666:	f7fe ff87 	bl	20578 <ble_gatts_indicate>
            break;
   2166a:	e7c0      	b.n	215ee <ble_gatts_bonding_restored+0x62>
}
   2166c:	b00a      	add	sp, #40	; 0x28
   2166e:	bd70      	pop	{r4, r5, r6, pc}

00021670 <ble_gatts_add_svcs>:
{
   21670:	b570      	push	{r4, r5, r6, lr}
   21672:	4604      	mov	r4, r0
    ble_hs_lock();
   21674:	f000 f8fa 	bl	2186c <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   21678:	f7ff fcf3 	bl	21062 <ble_gatts_mutable>
   2167c:	b198      	cbz	r0, 216a6 <ble_gatts_add_svcs+0x36>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   2167e:	4b0c      	ldr	r3, [pc, #48]	; (216b0 <ble_gatts_add_svcs+0x40>)
   21680:	681e      	ldr	r6, [r3, #0]
   21682:	1c75      	adds	r5, r6, #1
    p = realloc(ble_gatts_svc_defs,
   21684:	00a9      	lsls	r1, r5, #2
   21686:	4b0b      	ldr	r3, [pc, #44]	; (216b4 <ble_gatts_add_svcs+0x44>)
   21688:	6818      	ldr	r0, [r3, #0]
   2168a:	f009 fcbd 	bl	2b008 <realloc>
    if (p == NULL) {
   2168e:	b160      	cbz	r0, 216aa <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   21690:	4a08      	ldr	r2, [pc, #32]	; (216b4 <ble_gatts_add_svcs+0x44>)
   21692:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   21694:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    ble_gatts_num_svc_defs++;
   21698:	4b05      	ldr	r3, [pc, #20]	; (216b0 <ble_gatts_add_svcs+0x40>)
   2169a:	601d      	str	r5, [r3, #0]
    rc = 0;
   2169c:	2400      	movs	r4, #0
    ble_hs_unlock();
   2169e:	f000 f8e9 	bl	21874 <ble_hs_unlock>
}
   216a2:	4620      	mov	r0, r4
   216a4:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBUSY;
   216a6:	240f      	movs	r4, #15
   216a8:	e7f9      	b.n	2169e <ble_gatts_add_svcs+0x2e>
        rc = BLE_HS_ENOMEM;
   216aa:	2406      	movs	r4, #6
   216ac:	e7f7      	b.n	2169e <ble_gatts_add_svcs+0x2e>
   216ae:	bf00      	nop
   216b0:	200032e8 	.word	0x200032e8
   216b4:	20003324 	.word	0x20003324

000216b8 <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   216b8:	b500      	push	{lr}
   216ba:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   216bc:	2300      	movs	r3, #0
   216be:	9301      	str	r3, [sp, #4]
   216c0:	9302      	str	r3, [sp, #8]
   216c2:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   216c4:	a901      	add	r1, sp, #4
   216c6:	f7ff f8fd 	bl	208c4 <ble_gatts_count_resources>
    if (rc != 0) {
   216ca:	b990      	cbnz	r0, 216f2 <ble_gatts_count_cfg+0x3a>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   216cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   216d0:	4a09      	ldr	r2, [pc, #36]	; (216f8 <ble_gatts_count_cfg+0x40>)
   216d2:	8811      	ldrh	r1, [r2, #0]
   216d4:	440b      	add	r3, r1
   216d6:	8013      	strh	r3, [r2, #0]
    ble_hs_max_attrs += res.attrs;
   216d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   216dc:	4a07      	ldr	r2, [pc, #28]	; (216fc <ble_gatts_count_cfg+0x44>)
   216de:	8811      	ldrh	r1, [r2, #0]
   216e0:	440b      	add	r3, r1
   216e2:	8013      	strh	r3, [r2, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   216e4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ble_hs_max_client_configs +=
   216e8:	4a05      	ldr	r2, [pc, #20]	; (21700 <ble_gatts_count_cfg+0x48>)
   216ea:	8813      	ldrh	r3, [r2, #0]
   216ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   216f0:	8013      	strh	r3, [r2, #0]

    return 0;
}
   216f2:	b005      	add	sp, #20
   216f4:	f85d fb04 	ldr.w	pc, [sp], #4
   216f8:	200033d4 	.word	0x200033d4
   216fc:	200033d0 	.word	0x200033d0
   21700:	200033d2 	.word	0x200033d2

00021704 <ble_gatts_init>:
    return rc;
}

int
ble_gatts_init(void)
{
   21704:	b500      	push	{lr}
   21706:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   21708:	2300      	movs	r3, #0
   2170a:	4a09      	ldr	r2, [pc, #36]	; (21730 <ble_gatts_init+0x2c>)
   2170c:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   2170e:	4a09      	ldr	r2, [pc, #36]	; (21734 <ble_gatts_init+0x30>)
   21710:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   21712:	4a09      	ldr	r2, [pc, #36]	; (21738 <ble_gatts_init+0x34>)
   21714:	9201      	str	r2, [sp, #4]
   21716:	9300      	str	r3, [sp, #0]
   21718:	220a      	movs	r2, #10
   2171a:	2104      	movs	r1, #4
   2171c:	4807      	ldr	r0, [pc, #28]	; (2173c <ble_gatts_init+0x38>)
   2171e:	f7f0 fd05 	bl	1212c <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   21722:	b910      	cbnz	r0, 2172a <ble_gatts_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;

}
   21724:	b003      	add	sp, #12
   21726:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   2172a:	200b      	movs	r0, #11
   2172c:	e7fa      	b.n	21724 <ble_gatts_init+0x20>
   2172e:	bf00      	nop
   21730:	200032e4 	.word	0x200032e4
   21734:	200032e0 	.word	0x200032e0
   21738:	0002e2d4 	.word	0x0002e2d4
   2173c:	200032f0 	.word	0x200032f0

00021740 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   21740:	b510      	push	{r4, lr}
   21742:	b082      	sub	sp, #8
   21744:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   21746:	e00a      	b.n	2175e <ble_hs_wakeup_tx_conn+0x1e>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   21748:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   2174c:	6422      	str	r2, [r4, #64]	; 0x40

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   2174e:	3b10      	subs	r3, #16
   21750:	9301      	str	r3, [sp, #4]
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   21752:	a901      	add	r1, sp, #4
   21754:	4620      	mov	r0, r4
   21756:	f001 f997 	bl	22a88 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   2175a:	2801      	cmp	r0, #1
   2175c:	d006      	beq.n	2176c <ble_hs_wakeup_tx_conn+0x2c>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2175e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   21760:	b17b      	cbz	r3, 21782 <ble_hs_wakeup_tx_conn+0x42>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   21762:	685a      	ldr	r2, [r3, #4]
   21764:	63e2      	str	r2, [r4, #60]	; 0x3c
   21766:	2a00      	cmp	r2, #0
   21768:	d1f1      	bne.n	2174e <ble_hs_wakeup_tx_conn+0xe>
   2176a:	e7ed      	b.n	21748 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2176c:	9b01      	ldr	r3, [sp, #4]
   2176e:	f103 0110 	add.w	r1, r3, #16
   21772:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   21774:	615a      	str	r2, [r3, #20]
   21776:	b10a      	cbz	r2, 2177c <ble_hs_wakeup_tx_conn+0x3c>
   21778:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   2177a:	e003      	b.n	21784 <ble_hs_wakeup_tx_conn+0x44>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2177c:	3314      	adds	r3, #20
   2177e:	6423      	str	r3, [r4, #64]	; 0x40
   21780:	e7fa      	b.n	21778 <ble_hs_wakeup_tx_conn+0x38>
        }
    }

    return 0;
   21782:	2000      	movs	r0, #0
}
   21784:	b002      	add	sp, #8
   21786:	bd10      	pop	{r4, pc}

00021788 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   21788:	b510      	push	{r4, lr}
   2178a:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   2178c:	6884      	ldr	r4, [r0, #8]
    struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   2178e:	4803      	ldr	r0, [pc, #12]	; (2179c <ble_hs_event_rx_hci_ev+0x14>)
   21790:	f7ec fa75 	bl	dc7e <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    ble_hs_hci_evt_process(hci_ev);
   21794:	4620      	mov	r0, r4
   21796:	f001 fc49 	bl	2302c <ble_hs_hci_evt_process>
}
   2179a:	bd10      	pop	{r4, pc}
   2179c:	20003374 	.word	0x20003374

000217a0 <ble_hs_clear_rx_queue>:
{
   217a0:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   217a2:	4805      	ldr	r0, [pc, #20]	; (217b8 <ble_hs_clear_rx_queue+0x18>)
   217a4:	f001 feda 	bl	2355c <ble_mqueue_get>
   217a8:	4603      	mov	r3, r0
   217aa:	b118      	cbz	r0, 217b4 <ble_hs_clear_rx_queue+0x14>
        os_mbuf_free_chain(om);
   217ac:	4618      	mov	r0, r3
   217ae:	f7eb fe61 	bl	d474 <os_mbuf_free_chain>
   217b2:	e7f6      	b.n	217a2 <ble_hs_clear_rx_queue+0x2>
}
   217b4:	bd08      	pop	{r3, pc}
   217b6:	bf00      	nop
   217b8:	200033ec 	.word	0x200033ec

000217bc <ble_hs_event_tx_notify>:

#if NIMBLE_BLE_CONNECT
static void
ble_hs_event_tx_notify(struct ble_npl_event *ev)
{
   217bc:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   217be:	f7ff fe91 	bl	214e4 <ble_gatts_tx_notifications>
}
   217c2:	bd08      	pop	{r3, pc}

000217c4 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   217c4:	b510      	push	{r4, lr}
   217c6:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
   217c8:	f000 ffeb 	bl	227a2 <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   217cc:	4622      	mov	r2, r4
   217ce:	4b06      	ldr	r3, [pc, #24]	; (217e8 <ble_hs_rx_data+0x24>)
   217d0:	6819      	ldr	r1, [r3, #0]
   217d2:	4806      	ldr	r0, [pc, #24]	; (217ec <ble_hs_rx_data+0x28>)
   217d4:	f001 fed3 	bl	2357e <ble_mqueue_put>
    if (rc != 0) {
   217d8:	b900      	cbnz	r0, 217dc <ble_hs_rx_data+0x18>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   217da:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   217dc:	4620      	mov	r0, r4
   217de:	f7eb fe49 	bl	d474 <os_mbuf_free_chain>
        return BLE_HS_EOS;
   217e2:	200b      	movs	r0, #11
   217e4:	e7f9      	b.n	217da <ble_hs_rx_data+0x16>
   217e6:	bf00      	nop
   217e8:	20003370 	.word	0x20003370
   217ec:	200033ec 	.word	0x200033ec

000217f0 <ble_hs_evq_get>:
}
   217f0:	4b01      	ldr	r3, [pc, #4]	; (217f8 <ble_hs_evq_get+0x8>)
   217f2:	6818      	ldr	r0, [r3, #0]
   217f4:	4770      	bx	lr
   217f6:	bf00      	nop
   217f8:	20003370 	.word	0x20003370

000217fc <ble_hs_sched_start_stage2>:
{
   217fc:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   217fe:	f7ff fff7 	bl	217f0 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   21802:	4902      	ldr	r1, [pc, #8]	; (2180c <ble_hs_sched_start_stage2+0x10>)
   21804:	f7eb fd01 	bl	d20a <os_eventq_put>
}
   21808:	bd08      	pop	{r3, pc}
   2180a:	bf00      	nop
   2180c:	20003350 	.word	0x20003350

00021810 <ble_hs_event_start_stage1>:
{
   21810:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   21812:	f7ff fff3 	bl	217fc <ble_hs_sched_start_stage2>
}
   21816:	bd08      	pop	{r3, pc}

00021818 <ble_hs_evq_set>:
    ble_hs_evq = evq;
   21818:	4b01      	ldr	r3, [pc, #4]	; (21820 <ble_hs_evq_set+0x8>)
   2181a:	6018      	str	r0, [r3, #0]
}
   2181c:	4770      	bx	lr
   2181e:	bf00      	nop
   21820:	20003370 	.word	0x20003370

00021824 <ble_hs_is_parent_task>:
{
   21824:	b508      	push	{r3, lr}
    return os_started();
   21826:	f7eb fa7d 	bl	cd24 <os_started>
    return !ble_npl_os_started() ||
   2182a:	b908      	cbnz	r0, 21830 <ble_hs_is_parent_task+0xc>
   2182c:	2001      	movs	r0, #1
}
   2182e:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   21830:	f7ec fbb6 	bl	dfa0 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   21834:	4b03      	ldr	r3, [pc, #12]	; (21844 <ble_hs_is_parent_task+0x20>)
   21836:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   21838:	4283      	cmp	r3, r0
   2183a:	d001      	beq.n	21840 <ble_hs_is_parent_task+0x1c>
   2183c:	2000      	movs	r0, #0
   2183e:	e7f6      	b.n	2182e <ble_hs_is_parent_task+0xa>
   21840:	2001      	movs	r0, #1
   21842:	e7f4      	b.n	2182e <ble_hs_is_parent_task+0xa>
   21844:	200033e4 	.word	0x200033e4

00021848 <ble_hs_lock_nested>:
{
   21848:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   2184a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2184e:	4802      	ldr	r0, [pc, #8]	; (21858 <ble_hs_lock_nested+0x10>)
   21850:	f7ec ffb2 	bl	e7b8 <os_mutex_pend>
}
   21854:	bd08      	pop	{r3, pc}
   21856:	bf00      	nop
   21858:	200033d8 	.word	0x200033d8

0002185c <ble_hs_unlock_nested>:
{
   2185c:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2185e:	4802      	ldr	r0, [pc, #8]	; (21868 <ble_hs_unlock_nested+0xc>)
   21860:	f7ec ff4a 	bl	e6f8 <os_mutex_release>
}
   21864:	bd08      	pop	{r3, pc}
   21866:	bf00      	nop
   21868:	200033d8 	.word	0x200033d8

0002186c <ble_hs_lock>:
{
   2186c:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   2186e:	f7ff ffeb 	bl	21848 <ble_hs_lock_nested>
}
   21872:	bd08      	pop	{r3, pc}

00021874 <ble_hs_unlock>:
{
   21874:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   21876:	f7ff fff1 	bl	2185c <ble_hs_unlock_nested>
}
   2187a:	bd08      	pop	{r3, pc}

0002187c <ble_hs_process_rx_data_queue>:
{
   2187c:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   2187e:	4805      	ldr	r0, [pc, #20]	; (21894 <ble_hs_process_rx_data_queue+0x18>)
   21880:	f001 fe6c 	bl	2355c <ble_mqueue_get>
   21884:	4603      	mov	r3, r0
   21886:	b118      	cbz	r0, 21890 <ble_hs_process_rx_data_queue+0x14>
        ble_hs_hci_evt_acl_process(om);
   21888:	4618      	mov	r0, r3
   2188a:	f001 fbed 	bl	23068 <ble_hs_hci_evt_acl_process>
   2188e:	e7f6      	b.n	2187e <ble_hs_process_rx_data_queue+0x2>
}
   21890:	bd08      	pop	{r3, pc}
   21892:	bf00      	nop
   21894:	200033ec 	.word	0x200033ec

00021898 <ble_hs_event_rx_data>:
{
   21898:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   2189a:	f7ff ffef 	bl	2187c <ble_hs_process_rx_data_queue>
}
   2189e:	bd08      	pop	{r3, pc}

000218a0 <ble_hs_wakeup_tx>:
{
   218a0:	b510      	push	{r4, lr}
    ble_hs_lock();
   218a2:	f7ff ffe3 	bl	2186c <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   218a6:	f000 fe71 	bl	2258c <ble_hs_conn_first>
   218aa:	b148      	cbz	r0, 218c0 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   218ac:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   218b0:	f013 0f04 	tst.w	r3, #4
   218b4:	d101      	bne.n	218ba <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   218b6:	6800      	ldr	r0, [r0, #0]
   218b8:	e7f7      	b.n	218aa <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   218ba:	f7ff ff41 	bl	21740 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   218be:	b948      	cbnz	r0, 218d4 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   218c0:	f000 fe64 	bl	2258c <ble_hs_conn_first>
   218c4:	4604      	mov	r4, r0
   218c6:	b12c      	cbz	r4, 218d4 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   218c8:	4620      	mov	r0, r4
   218ca:	f7ff ff39 	bl	21740 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   218ce:	b908      	cbnz	r0, 218d4 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   218d0:	6824      	ldr	r4, [r4, #0]
   218d2:	e7f8      	b.n	218c6 <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   218d4:	f7ff ffce 	bl	21874 <ble_hs_unlock>
}
   218d8:	bd10      	pop	{r4, pc}
	...

000218dc <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   218dc:	4b03      	ldr	r3, [pc, #12]	; (218ec <ble_hs_is_enabled+0x10>)
   218de:	7818      	ldrb	r0, [r3, #0]
}
   218e0:	2802      	cmp	r0, #2
   218e2:	bf14      	ite	ne
   218e4:	2000      	movne	r0, #0
   218e6:	2001      	moveq	r0, #1
   218e8:	4770      	bx	lr
   218ea:	bf00      	nop
   218ec:	2000332c 	.word	0x2000332c

000218f0 <ble_hs_timer_reset>:
{
   218f0:	b510      	push	{r4, lr}
   218f2:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   218f4:	f7ff fff2 	bl	218dc <ble_hs_is_enabled>
   218f8:	b918      	cbnz	r0, 21902 <ble_hs_timer_reset+0x12>
    os_callout_stop(&co->co);
   218fa:	4804      	ldr	r0, [pc, #16]	; (2190c <ble_hs_timer_reset+0x1c>)
   218fc:	f7eb fb0e 	bl	cf1c <os_callout_stop>
}
   21900:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   21902:	4621      	mov	r1, r4
   21904:	4801      	ldr	r0, [pc, #4]	; (2190c <ble_hs_timer_reset+0x1c>)
   21906:	f7eb fb27 	bl	cf58 <os_callout_reset>
   2190a:	e7f9      	b.n	21900 <ble_hs_timer_reset+0x10>
   2190c:	20003440 	.word	0x20003440

00021910 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   21910:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   21914:	4298      	cmp	r0, r3
   21916:	d010      	beq.n	2193a <ble_hs_timer_sched+0x2a>
{
   21918:	b510      	push	{r4, lr}
   2191a:	4604      	mov	r4, r0
    return os_time_get();
   2191c:	f7ec fd4e 	bl	e3bc <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   21920:	4420      	add	r0, r4
   21922:	4b06      	ldr	r3, [pc, #24]	; (2193c <ble_hs_timer_sched+0x2c>)
   21924:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   21926:	b123      	cbz	r3, 21932 <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   21928:	4b04      	ldr	r3, [pc, #16]	; (2193c <ble_hs_timer_sched+0x2c>)
   2192a:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   2192c:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   2192e:	2800      	cmp	r0, #0
   21930:	da02      	bge.n	21938 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   21932:	4620      	mov	r0, r4
   21934:	f7ff ffdc 	bl	218f0 <ble_hs_timer_reset>
}
   21938:	bd10      	pop	{r4, pc}
   2193a:	4770      	bx	lr
   2193c:	20003440 	.word	0x20003440

00021940 <ble_hs_sync>:
{
   21940:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   21942:	4b14      	ldr	r3, [pc, #80]	; (21994 <ble_hs_sync+0x54>)
   21944:	2201      	movs	r2, #1
   21946:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   21948:	f002 f84d 	bl	239e6 <ble_hs_startup_go>
    if (rc == 0) {
   2194c:	4604      	mov	r4, r0
   2194e:	b940      	cbnz	r0, 21962 <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   21950:	4b10      	ldr	r3, [pc, #64]	; (21994 <ble_hs_sync+0x54>)
   21952:	2202      	movs	r2, #2
   21954:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   21956:	200c      	movs	r0, #12
   21958:	f7ff ffda 	bl	21910 <ble_hs_timer_sched>
    if (rc == 0) {
   2195c:	b12c      	cbz	r4, 2196a <ble_hs_sync+0x2a>
}
   2195e:	4620      	mov	r0, r4
   21960:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   21962:	4b0c      	ldr	r3, [pc, #48]	; (21994 <ble_hs_sync+0x54>)
   21964:	2200      	movs	r2, #0
   21966:	701a      	strb	r2, [r3, #0]
   21968:	e7f5      	b.n	21956 <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   2196a:	f001 fde3 	bl	23534 <ble_hs_misc_restore_irks>
        if (rc != 0) {
   2196e:	4604      	mov	r4, r0
   21970:	b940      	cbnz	r0, 21984 <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   21972:	4b09      	ldr	r3, [pc, #36]	; (21998 <ble_hs_sync+0x58>)
   21974:	691b      	ldr	r3, [r3, #16]
   21976:	b103      	cbz	r3, 2197a <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   21978:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   2197a:	4a08      	ldr	r2, [pc, #32]	; (2199c <ble_hs_sync+0x5c>)
   2197c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2197e:	3301      	adds	r3, #1
   21980:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   21982:	e7ec      	b.n	2195e <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   21984:	4603      	mov	r3, r0
   21986:	4a06      	ldr	r2, [pc, #24]	; (219a0 <ble_hs_sync+0x60>)
   21988:	2101      	movs	r1, #1
   2198a:	2004      	movs	r0, #4
   2198c:	f7ef fe54 	bl	11638 <modlog_printf>
   21990:	e7ef      	b.n	21972 <ble_hs_sync+0x32>
   21992:	bf00      	nop
   21994:	2000343c 	.word	0x2000343c
   21998:	200002d8 	.word	0x200002d8
   2199c:	20003404 	.word	0x20003404
   219a0:	0002e2e4 	.word	0x0002e2e4

000219a4 <ble_hs_reset>:
{
   219a4:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   219a6:	4a0e      	ldr	r2, [pc, #56]	; (219e0 <ble_hs_reset+0x3c>)
   219a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   219aa:	3301      	adds	r3, #1
   219ac:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   219ae:	4b0d      	ldr	r3, [pc, #52]	; (219e4 <ble_hs_reset+0x40>)
   219b0:	2200      	movs	r2, #0
   219b2:	701a      	strb	r2, [r3, #0]
    ble_hs_clear_rx_queue();
   219b4:	f7ff fef4 	bl	217a0 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
   219b8:	4b0b      	ldr	r3, [pc, #44]	; (219e8 <ble_hs_reset+0x44>)
   219ba:	6818      	ldr	r0, [r3, #0]
   219bc:	f7fd fb1a 	bl	1eff4 <ble_gap_reset_state>
    ble_hs_id_reset();
   219c0:	f001 fcf6 	bl	233b0 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   219c4:	4b09      	ldr	r3, [pc, #36]	; (219ec <ble_hs_reset+0x48>)
   219c6:	68db      	ldr	r3, [r3, #12]
   219c8:	b11b      	cbz	r3, 219d2 <ble_hs_reset+0x2e>
   219ca:	4a07      	ldr	r2, [pc, #28]	; (219e8 <ble_hs_reset+0x44>)
   219cc:	6810      	ldr	r0, [r2, #0]
   219ce:	b100      	cbz	r0, 219d2 <ble_hs_reset+0x2e>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   219d0:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   219d2:	4b05      	ldr	r3, [pc, #20]	; (219e8 <ble_hs_reset+0x44>)
   219d4:	2200      	movs	r2, #0
   219d6:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   219d8:	f7ff ffb2 	bl	21940 <ble_hs_sync>
}
   219dc:	bd08      	pop	{r3, pc}
   219de:	bf00      	nop
   219e0:	20003404 	.word	0x20003404
   219e4:	2000343c 	.word	0x2000343c
   219e8:	200033e8 	.word	0x200033e8
   219ec:	200002d8 	.word	0x200002d8

000219f0 <ble_hs_event_reset>:
{
   219f0:	b508      	push	{r3, lr}
    ble_hs_reset();
   219f2:	f7ff ffd7 	bl	219a4 <ble_hs_reset>
}
   219f6:	bd08      	pop	{r3, pc}

000219f8 <ble_hs_timer_exp>:
{
   219f8:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   219fa:	4b13      	ldr	r3, [pc, #76]	; (21a48 <ble_hs_timer_exp+0x50>)
   219fc:	781b      	ldrb	r3, [r3, #0]
   219fe:	b1b3      	cbz	r3, 21a2e <ble_hs_timer_exp+0x36>
   21a00:	2b02      	cmp	r3, #2
   21a02:	d117      	bne.n	21a34 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   21a04:	f7fe fcd8 	bl	203b8 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   21a08:	f7ff ff82 	bl	21910 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   21a0c:	f002 fbe4 	bl	241d8 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   21a10:	f7ff ff7e 	bl	21910 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
   21a14:	f003 ffe2 	bl	259dc <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
   21a18:	f7ff ff7a 	bl	21910 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   21a1c:	f000 fe68 	bl	226f0 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   21a20:	f7ff ff76 	bl	21910 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   21a24:	f7fc fff4 	bl	1ea10 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   21a28:	f7ff ff72 	bl	21910 <ble_hs_timer_sched>
}
   21a2c:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   21a2e:	f7ff ffb9 	bl	219a4 <ble_hs_reset>
        break;
   21a32:	e7fb      	b.n	21a2c <ble_hs_timer_exp+0x34>
        assert(0);
   21a34:	f7ea fbb2 	bl	c19c <hal_debugger_connected>
   21a38:	b100      	cbz	r0, 21a3c <ble_hs_timer_exp+0x44>
   21a3a:	be01      	bkpt	0x0001
   21a3c:	2300      	movs	r3, #0
   21a3e:	461a      	mov	r2, r3
   21a40:	4619      	mov	r1, r3
   21a42:	4618      	mov	r0, r3
   21a44:	f7eb f8ae 	bl	cba4 <__assert_func>
   21a48:	2000343c 	.word	0x2000343c

00021a4c <ble_hs_timer_resched>:
{
   21a4c:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   21a4e:	2000      	movs	r0, #0
   21a50:	f7ff ff4e 	bl	218f0 <ble_hs_timer_reset>
}
   21a54:	bd08      	pop	{r3, pc}
	...

00021a58 <ble_hs_enqueue_hci_event>:
{
   21a58:	b510      	push	{r4, lr}
   21a5a:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   21a5c:	480a      	ldr	r0, [pc, #40]	; (21a88 <ble_hs_enqueue_hci_event+0x30>)
   21a5e:	f7ec f8e6 	bl	dc2e <os_memblock_get>
    if (ev == NULL) {
   21a62:	b160      	cbz	r0, 21a7e <ble_hs_enqueue_hci_event+0x26>
   21a64:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   21a66:	2300      	movs	r3, #0
   21a68:	6003      	str	r3, [r0, #0]
   21a6a:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   21a6c:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21a6e:	4b07      	ldr	r3, [pc, #28]	; (21a8c <ble_hs_enqueue_hci_event+0x34>)
   21a70:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   21a72:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   21a74:	4b06      	ldr	r3, [pc, #24]	; (21a90 <ble_hs_enqueue_hci_event+0x38>)
   21a76:	6818      	ldr	r0, [r3, #0]
   21a78:	f7eb fbc7 	bl	d20a <os_eventq_put>
}
   21a7c:	bd10      	pop	{r4, pc}
        ble_transport_free(hci_evt);
   21a7e:	4620      	mov	r0, r4
   21a80:	f005 fc4c 	bl	2731c <ble_transport_free>
   21a84:	e7fa      	b.n	21a7c <ble_hs_enqueue_hci_event+0x24>
   21a86:	bf00      	nop
   21a88:	20003374 	.word	0x20003374
   21a8c:	00021789 	.word	0x00021789
   21a90:	20003370 	.word	0x20003370

00021a94 <ble_hs_sched_reset>:
{
   21a94:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   21a96:	4b04      	ldr	r3, [pc, #16]	; (21aa8 <ble_hs_sched_reset+0x14>)
   21a98:	6018      	str	r0, [r3, #0]
   21a9a:	4904      	ldr	r1, [pc, #16]	; (21aac <ble_hs_sched_reset+0x18>)
   21a9c:	4b04      	ldr	r3, [pc, #16]	; (21ab0 <ble_hs_sched_reset+0x1c>)
   21a9e:	6818      	ldr	r0, [r3, #0]
   21aa0:	f7eb fbb3 	bl	d20a <os_eventq_put>
}
   21aa4:	bd08      	pop	{r3, pc}
   21aa6:	bf00      	nop
   21aa8:	200033e8 	.word	0x200033e8
   21aac:	20003330 	.word	0x20003330
   21ab0:	20003370 	.word	0x20003370

00021ab4 <ble_hs_hw_error>:
{
   21ab4:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   21ab6:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   21aba:	f7ff ffeb 	bl	21a94 <ble_hs_sched_reset>
}
   21abe:	bd08      	pop	{r3, pc}

00021ac0 <ble_hs_start>:
{
   21ac0:	b510      	push	{r4, lr}
    ble_hs_lock();
   21ac2:	f7ff fed3 	bl	2186c <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   21ac6:	4b18      	ldr	r3, [pc, #96]	; (21b28 <ble_hs_start+0x68>)
   21ac8:	781b      	ldrb	r3, [r3, #0]
   21aca:	2b01      	cmp	r3, #1
   21acc:	d028      	beq.n	21b20 <ble_hs_start+0x60>
   21ace:	2b02      	cmp	r3, #2
   21ad0:	d021      	beq.n	21b16 <ble_hs_start+0x56>
   21ad2:	b14b      	cbz	r3, 21ae8 <ble_hs_start+0x28>
        assert(0);
   21ad4:	f7ea fb62 	bl	c19c <hal_debugger_connected>
   21ad8:	b100      	cbz	r0, 21adc <ble_hs_start+0x1c>
   21ada:	be01      	bkpt	0x0001
   21adc:	2300      	movs	r3, #0
   21ade:	461a      	mov	r2, r3
   21ae0:	4619      	mov	r1, r3
   21ae2:	4618      	mov	r0, r3
   21ae4:	f7eb f85e 	bl	cba4 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   21ae8:	4b0f      	ldr	r3, [pc, #60]	; (21b28 <ble_hs_start+0x68>)
   21aea:	2202      	movs	r2, #2
   21aec:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   21aee:	f7ff fec1 	bl	21874 <ble_hs_unlock>
    return os_sched_get_current_task();
   21af2:	f7ec fa55 	bl	dfa0 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   21af6:	4b0d      	ldr	r3, [pc, #52]	; (21b2c <ble_hs_start+0x6c>)
   21af8:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   21afa:	2300      	movs	r3, #0
   21afc:	4a0c      	ldr	r2, [pc, #48]	; (21b30 <ble_hs_start+0x70>)
   21afe:	490d      	ldr	r1, [pc, #52]	; (21b34 <ble_hs_start+0x74>)
   21b00:	6809      	ldr	r1, [r1, #0]
   21b02:	480d      	ldr	r0, [pc, #52]	; (21b38 <ble_hs_start+0x78>)
   21b04:	f7eb f9fc 	bl	cf00 <os_callout_init>
    rc = ble_gatts_start();
   21b08:	f7ff fb80 	bl	2120c <ble_gatts_start>
    if (rc != 0) {
   21b0c:	4604      	mov	r4, r0
   21b0e:	b928      	cbnz	r0, 21b1c <ble_hs_start+0x5c>
    ble_hs_sync();
   21b10:	f7ff ff16 	bl	21940 <ble_hs_sync>
    return 0;
   21b14:	e002      	b.n	21b1c <ble_hs_start+0x5c>
    ble_hs_unlock();
   21b16:	f7ff fead 	bl	21874 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   21b1a:	2402      	movs	r4, #2
}
   21b1c:	4620      	mov	r0, r4
   21b1e:	bd10      	pop	{r4, pc}
    ble_hs_unlock();
   21b20:	f7ff fea8 	bl	21874 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   21b24:	240f      	movs	r4, #15
        return rc;
   21b26:	e7f9      	b.n	21b1c <ble_hs_start+0x5c>
   21b28:	2000332c 	.word	0x2000332c
   21b2c:	200033e4 	.word	0x200033e4
   21b30:	000219f9 	.word	0x000219f9
   21b34:	20003370 	.word	0x20003370
   21b38:	20003440 	.word	0x20003440

00021b3c <ble_hs_event_start_stage2>:
{
   21b3c:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   21b3e:	f7ff ffbf 	bl	21ac0 <ble_hs_start>
    assert(rc == 0);
   21b42:	b900      	cbnz	r0, 21b46 <ble_hs_event_start_stage2+0xa>
}
   21b44:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   21b46:	f7ea fb29 	bl	c19c <hal_debugger_connected>
   21b4a:	b100      	cbz	r0, 21b4e <ble_hs_event_start_stage2+0x12>
   21b4c:	be01      	bkpt	0x0001
   21b4e:	2300      	movs	r3, #0
   21b50:	461a      	mov	r2, r3
   21b52:	4619      	mov	r1, r3
   21b54:	4618      	mov	r0, r3
   21b56:	f7eb f825 	bl	cba4 <__assert_func>

00021b5a <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   21b5a:	b508      	push	{r3, lr}
    return ble_transport_to_ll_acl_impl(om);
   21b5c:	f7f3 f859 	bl	14c12 <ble_transport_to_ll_acl_impl>
    return ble_transport_to_ll_acl(om);
}
   21b60:	bd08      	pop	{r3, pc}
	...

00021b64 <ble_hs_init>:

void
ble_hs_init(void)
{
   21b64:	b510      	push	{r4, lr}
   21b66:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   21b68:	4b7f      	ldr	r3, [pc, #508]	; (21d68 <ble_hs_init+0x204>)
   21b6a:	781b      	ldrb	r3, [r3, #0]
   21b6c:	2b00      	cmp	r3, #0
   21b6e:	d06e      	beq.n	21c4e <ble_hs_init+0xea>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   21b70:	4b7e      	ldr	r3, [pc, #504]	; (21d6c <ble_hs_init+0x208>)
   21b72:	9300      	str	r3, [sp, #0]
   21b74:	4b7e      	ldr	r3, [pc, #504]	; (21d70 <ble_hs_init+0x20c>)
   21b76:	2210      	movs	r2, #16
   21b78:	2104      	movs	r1, #4
   21b7a:	487e      	ldr	r0, [pc, #504]	; (21d74 <ble_hs_init+0x210>)
   21b7c:	f7ec f820 	bl	dbc0 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   21b80:	2800      	cmp	r0, #0
   21b82:	d16e      	bne.n	21c62 <ble_hs_init+0xfe>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   21b84:	2300      	movs	r3, #0
   21b86:	4a7c      	ldr	r2, [pc, #496]	; (21d78 <ble_hs_init+0x214>)
   21b88:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   21b8a:	4a7c      	ldr	r2, [pc, #496]	; (21d7c <ble_hs_init+0x218>)
   21b8c:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   21b8e:	4a7c      	ldr	r2, [pc, #496]	; (21d80 <ble_hs_init+0x21c>)
   21b90:	6013      	str	r3, [r2, #0]
   21b92:	6093      	str	r3, [r2, #8]
   21b94:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21b96:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21b98:	497a      	ldr	r1, [pc, #488]	; (21d84 <ble_hs_init+0x220>)
   21b9a:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   21b9c:	4a7a      	ldr	r2, [pc, #488]	; (21d88 <ble_hs_init+0x224>)
   21b9e:	6013      	str	r3, [r2, #0]
   21ba0:	6093      	str	r3, [r2, #8]
   21ba2:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21ba4:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21ba6:	4979      	ldr	r1, [pc, #484]	; (21d8c <ble_hs_init+0x228>)
   21ba8:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   21baa:	4a79      	ldr	r2, [pc, #484]	; (21d90 <ble_hs_init+0x22c>)
   21bac:	6013      	str	r3, [r2, #0]
   21bae:	6093      	str	r3, [r2, #8]
   21bb0:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21bb2:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21bb4:	4977      	ldr	r1, [pc, #476]	; (21d94 <ble_hs_init+0x230>)
   21bb6:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   21bb8:	4a77      	ldr	r2, [pc, #476]	; (21d98 <ble_hs_init+0x234>)
   21bba:	6013      	str	r3, [r2, #0]
   21bbc:	6093      	str	r3, [r2, #8]
   21bbe:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   21bc0:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   21bc2:	4b76      	ldr	r3, [pc, #472]	; (21d9c <ble_hs_init+0x238>)
   21bc4:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   21bc6:	f000 ffd3 	bl	22b70 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   21bca:	f000 fdcf 	bl	2276c <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21bce:	2800      	cmp	r0, #0
   21bd0:	d154      	bne.n	21c7c <ble_hs_init+0x118>
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

#if NIMBLE_BLE_CONNECT
    rc = ble_l2cap_init();
   21bd2:	f002 f8a7 	bl	23d24 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21bd6:	2800      	cmp	r0, #0
   21bd8:	d15d      	bne.n	21c96 <ble_hs_init+0x132>

    rc = ble_att_init();
   21bda:	f7fa fdfb 	bl	1c7d4 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21bde:	2800      	cmp	r0, #0
   21be0:	d166      	bne.n	21cb0 <ble_hs_init+0x14c>

    rc = ble_att_svr_init();
   21be2:	f7fc fa05 	bl	1dff0 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21be6:	2800      	cmp	r0, #0
   21be8:	d16f      	bne.n	21cca <ble_hs_init+0x166>

    rc = ble_gattc_init();
   21bea:	f7fe fd05 	bl	205f8 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21bee:	2800      	cmp	r0, #0
   21bf0:	d178      	bne.n	21ce4 <ble_hs_init+0x180>

    rc = ble_gatts_init();
   21bf2:	f7ff fd87 	bl	21704 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21bf6:	2800      	cmp	r0, #0
   21bf8:	f040 8081 	bne.w	21cfe <ble_hs_init+0x19a>
#endif
    rc = ble_gap_init();
   21bfc:	f7fd fd96 	bl	1f72c <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21c00:	2800      	cmp	r0, #0
   21c02:	f040 8089 	bne.w	21d18 <ble_hs_init+0x1b4>

    ble_hs_stop_init();
   21c06:	f001 ff4b 	bl	23aa0 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   21c0a:	2200      	movs	r2, #0
   21c0c:	4964      	ldr	r1, [pc, #400]	; (21da0 <ble_hs_init+0x23c>)
   21c0e:	4865      	ldr	r0, [pc, #404]	; (21da4 <ble_hs_init+0x240>)
   21c10:	f001 fc9a 	bl	23548 <ble_mqueue_init>

    rc = stats_init_and_reg(
   21c14:	4b64      	ldr	r3, [pc, #400]	; (21da8 <ble_hs_init+0x244>)
   21c16:	9301      	str	r3, [sp, #4]
   21c18:	2300      	movs	r3, #0
   21c1a:	9300      	str	r3, [sp, #0]
   21c1c:	220b      	movs	r2, #11
   21c1e:	2104      	movs	r1, #4
   21c20:	4862      	ldr	r0, [pc, #392]	; (21dac <ble_hs_init+0x248>)
   21c22:	f7f0 fa83 	bl	1212c <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   21c26:	2800      	cmp	r0, #0
   21c28:	f040 8083 	bne.w	21d32 <ble_hs_init+0x1ce>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   21c2c:	4860      	ldr	r0, [pc, #384]	; (21db0 <ble_hs_init+0x24c>)
   21c2e:	f7ec fd59 	bl	e6e4 <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   21c32:	2800      	cmp	r0, #0
   21c34:	f040 808a 	bne.w	21d4c <ble_hs_init+0x1e8>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   21c38:	f7eb fba0 	bl	d37c <os_eventq_dflt_get>
   21c3c:	f7ff fdec 	bl	21818 <ble_hs_evq_set>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   21c40:	f7eb fb9c 	bl	d37c <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   21c44:	4952      	ldr	r1, [pc, #328]	; (21d90 <ble_hs_init+0x22c>)
   21c46:	f7eb fae0 	bl	d20a <os_eventq_put>
                       &ble_hs_ev_start_stage1);
#else
    ble_npl_eventq_put(nimble_port_get_dflt_eventq(), &ble_hs_ev_start_stage1);
#endif
#endif
}
   21c4a:	b002      	add	sp, #8
   21c4c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   21c4e:	f7ea faa5 	bl	c19c <hal_debugger_connected>
   21c52:	b100      	cbz	r0, 21c56 <ble_hs_init+0xf2>
   21c54:	be01      	bkpt	0x0001
   21c56:	2300      	movs	r3, #0
   21c58:	461a      	mov	r2, r3
   21c5a:	4619      	mov	r1, r3
   21c5c:	4618      	mov	r0, r3
   21c5e:	f7ea ffa1 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21c62:	f7ea fa9b 	bl	c19c <hal_debugger_connected>
   21c66:	b100      	cbz	r0, 21c6a <ble_hs_init+0x106>
   21c68:	be01      	bkpt	0x0001
   21c6a:	2000      	movs	r0, #0
   21c6c:	9000      	str	r0, [sp, #0]
   21c6e:	4b51      	ldr	r3, [pc, #324]	; (21db4 <ble_hs_init+0x250>)
   21c70:	681c      	ldr	r4, [r3, #0]
   21c72:	4603      	mov	r3, r0
   21c74:	4602      	mov	r2, r0
   21c76:	4601      	mov	r1, r0
   21c78:	47a0      	blx	r4
   21c7a:	e783      	b.n	21b84 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21c7c:	f7ea fa8e 	bl	c19c <hal_debugger_connected>
   21c80:	b100      	cbz	r0, 21c84 <ble_hs_init+0x120>
   21c82:	be01      	bkpt	0x0001
   21c84:	2000      	movs	r0, #0
   21c86:	9000      	str	r0, [sp, #0]
   21c88:	4b4a      	ldr	r3, [pc, #296]	; (21db4 <ble_hs_init+0x250>)
   21c8a:	681c      	ldr	r4, [r3, #0]
   21c8c:	4603      	mov	r3, r0
   21c8e:	4602      	mov	r2, r0
   21c90:	4601      	mov	r1, r0
   21c92:	47a0      	blx	r4
   21c94:	e79d      	b.n	21bd2 <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21c96:	f7ea fa81 	bl	c19c <hal_debugger_connected>
   21c9a:	b100      	cbz	r0, 21c9e <ble_hs_init+0x13a>
   21c9c:	be01      	bkpt	0x0001
   21c9e:	2000      	movs	r0, #0
   21ca0:	9000      	str	r0, [sp, #0]
   21ca2:	4b44      	ldr	r3, [pc, #272]	; (21db4 <ble_hs_init+0x250>)
   21ca4:	681c      	ldr	r4, [r3, #0]
   21ca6:	4603      	mov	r3, r0
   21ca8:	4602      	mov	r2, r0
   21caa:	4601      	mov	r1, r0
   21cac:	47a0      	blx	r4
   21cae:	e794      	b.n	21bda <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21cb0:	f7ea fa74 	bl	c19c <hal_debugger_connected>
   21cb4:	b100      	cbz	r0, 21cb8 <ble_hs_init+0x154>
   21cb6:	be01      	bkpt	0x0001
   21cb8:	2000      	movs	r0, #0
   21cba:	9000      	str	r0, [sp, #0]
   21cbc:	4b3d      	ldr	r3, [pc, #244]	; (21db4 <ble_hs_init+0x250>)
   21cbe:	681c      	ldr	r4, [r3, #0]
   21cc0:	4603      	mov	r3, r0
   21cc2:	4602      	mov	r2, r0
   21cc4:	4601      	mov	r1, r0
   21cc6:	47a0      	blx	r4
   21cc8:	e78b      	b.n	21be2 <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21cca:	f7ea fa67 	bl	c19c <hal_debugger_connected>
   21cce:	b100      	cbz	r0, 21cd2 <ble_hs_init+0x16e>
   21cd0:	be01      	bkpt	0x0001
   21cd2:	2000      	movs	r0, #0
   21cd4:	9000      	str	r0, [sp, #0]
   21cd6:	4b37      	ldr	r3, [pc, #220]	; (21db4 <ble_hs_init+0x250>)
   21cd8:	681c      	ldr	r4, [r3, #0]
   21cda:	4603      	mov	r3, r0
   21cdc:	4602      	mov	r2, r0
   21cde:	4601      	mov	r1, r0
   21ce0:	47a0      	blx	r4
   21ce2:	e782      	b.n	21bea <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21ce4:	f7ea fa5a 	bl	c19c <hal_debugger_connected>
   21ce8:	b100      	cbz	r0, 21cec <ble_hs_init+0x188>
   21cea:	be01      	bkpt	0x0001
   21cec:	2000      	movs	r0, #0
   21cee:	9000      	str	r0, [sp, #0]
   21cf0:	4b30      	ldr	r3, [pc, #192]	; (21db4 <ble_hs_init+0x250>)
   21cf2:	681c      	ldr	r4, [r3, #0]
   21cf4:	4603      	mov	r3, r0
   21cf6:	4602      	mov	r2, r0
   21cf8:	4601      	mov	r1, r0
   21cfa:	47a0      	blx	r4
   21cfc:	e779      	b.n	21bf2 <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21cfe:	f7ea fa4d 	bl	c19c <hal_debugger_connected>
   21d02:	b100      	cbz	r0, 21d06 <ble_hs_init+0x1a2>
   21d04:	be01      	bkpt	0x0001
   21d06:	2000      	movs	r0, #0
   21d08:	9000      	str	r0, [sp, #0]
   21d0a:	4b2a      	ldr	r3, [pc, #168]	; (21db4 <ble_hs_init+0x250>)
   21d0c:	681c      	ldr	r4, [r3, #0]
   21d0e:	4603      	mov	r3, r0
   21d10:	4602      	mov	r2, r0
   21d12:	4601      	mov	r1, r0
   21d14:	47a0      	blx	r4
   21d16:	e771      	b.n	21bfc <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21d18:	f7ea fa40 	bl	c19c <hal_debugger_connected>
   21d1c:	b100      	cbz	r0, 21d20 <ble_hs_init+0x1bc>
   21d1e:	be01      	bkpt	0x0001
   21d20:	2000      	movs	r0, #0
   21d22:	9000      	str	r0, [sp, #0]
   21d24:	4b23      	ldr	r3, [pc, #140]	; (21db4 <ble_hs_init+0x250>)
   21d26:	681c      	ldr	r4, [r3, #0]
   21d28:	4603      	mov	r3, r0
   21d2a:	4602      	mov	r2, r0
   21d2c:	4601      	mov	r1, r0
   21d2e:	47a0      	blx	r4
   21d30:	e769      	b.n	21c06 <ble_hs_init+0xa2>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21d32:	f7ea fa33 	bl	c19c <hal_debugger_connected>
   21d36:	b100      	cbz	r0, 21d3a <ble_hs_init+0x1d6>
   21d38:	be01      	bkpt	0x0001
   21d3a:	2000      	movs	r0, #0
   21d3c:	9000      	str	r0, [sp, #0]
   21d3e:	4b1d      	ldr	r3, [pc, #116]	; (21db4 <ble_hs_init+0x250>)
   21d40:	681c      	ldr	r4, [r3, #0]
   21d42:	4603      	mov	r3, r0
   21d44:	4602      	mov	r2, r0
   21d46:	4601      	mov	r1, r0
   21d48:	47a0      	blx	r4
   21d4a:	e76f      	b.n	21c2c <ble_hs_init+0xc8>
    SYSINIT_PANIC_ASSERT(rc == 0);
   21d4c:	f7ea fa26 	bl	c19c <hal_debugger_connected>
   21d50:	b100      	cbz	r0, 21d54 <ble_hs_init+0x1f0>
   21d52:	be01      	bkpt	0x0001
   21d54:	2000      	movs	r0, #0
   21d56:	9000      	str	r0, [sp, #0]
   21d58:	4b16      	ldr	r3, [pc, #88]	; (21db4 <ble_hs_init+0x250>)
   21d5a:	681c      	ldr	r4, [r3, #0]
   21d5c:	4603      	mov	r3, r0
   21d5e:	4602      	mov	r2, r0
   21d60:	4601      	mov	r1, r0
   21d62:	47a0      	blx	r4
   21d64:	e768      	b.n	21c38 <ble_hs_init+0xd4>
   21d66:	bf00      	nop
   21d68:	20001e3c 	.word	0x20001e3c
   21d6c:	0002e314 	.word	0x0002e314
   21d70:	20003390 	.word	0x20003390
   21d74:	20003374 	.word	0x20003374
   21d78:	200033e8 	.word	0x200033e8
   21d7c:	2000332c 	.word	0x2000332c
   21d80:	20003360 	.word	0x20003360
   21d84:	000217bd 	.word	0x000217bd
   21d88:	20003330 	.word	0x20003330
   21d8c:	000219f1 	.word	0x000219f1
   21d90:	20003340 	.word	0x20003340
   21d94:	00021811 	.word	0x00021811
   21d98:	20003350 	.word	0x20003350
   21d9c:	00021b3d 	.word	0x00021b3d
   21da0:	00021899 	.word	0x00021899
   21da4:	200033ec 	.word	0x200033ec
   21da8:	0002e328 	.word	0x0002e328
   21dac:	20003404 	.word	0x20003404
   21db0:	200033d8 	.word	0x200033d8
   21db4:	2000028c 	.word	0x2000028c

00021db8 <ble_transport_to_hs_evt_impl>:

/* Transport APIs for HS side */

int
ble_transport_to_hs_evt_impl(void *buf)
{
   21db8:	b508      	push	{r3, lr}
    return ble_hs_hci_rx_evt(buf, NULL);
   21dba:	2100      	movs	r1, #0
   21dbc:	f000 fe4a 	bl	22a54 <ble_hs_hci_rx_evt>
}
   21dc0:	bd08      	pop	{r3, pc}

00021dc2 <ble_transport_to_hs_acl_impl>:

int
ble_transport_to_hs_acl_impl(struct os_mbuf *om)
{
   21dc2:	b508      	push	{r3, lr}
    return ble_hs_rx_data(om, NULL);
   21dc4:	2100      	movs	r1, #0
   21dc6:	f7ff fcfd 	bl	217c4 <ble_hs_rx_data>
}
   21dca:	bd08      	pop	{r3, pc}

00021dcc <ble_transport_hs_init>:

void
ble_transport_hs_init(void)
{
   21dcc:	b508      	push	{r3, lr}
    ble_hs_init();
   21dce:	f7ff fec9 	bl	21b64 <ble_hs_init>
}
   21dd2:	bd08      	pop	{r3, pc}

00021dd4 <ble_hs_adv_set_hdr>:
static ble_uuid128_t ble_hs_adv_uuids128[BLE_HS_ADV_MAX_FIELD_SZ / 16];

static int
ble_hs_adv_set_hdr(uint8_t type, uint8_t data_len, uint8_t max_len,
                   uint8_t *dst, uint8_t *dst_len, struct os_mbuf *om)
{
   21dd4:	b530      	push	{r4, r5, lr}
   21dd6:	b083      	sub	sp, #12
   21dd8:	9d06      	ldr	r5, [sp, #24]
   21dda:	9c07      	ldr	r4, [sp, #28]
   21ddc:	f88d 0007 	strb.w	r0, [sp, #7]
   21de0:	f88d 1006 	strb.w	r1, [sp, #6]
    int rc;

    if (om ) {
   21de4:	b18c      	cbz	r4, 21e0a <ble_hs_adv_set_hdr+0x36>
        data_len++;
   21de6:	b2cb      	uxtb	r3, r1
   21de8:	3301      	adds	r3, #1
   21dea:	f88d 3006 	strb.w	r3, [sp, #6]
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   21dee:	2201      	movs	r2, #1
   21df0:	f10d 0106 	add.w	r1, sp, #6
   21df4:	4620      	mov	r0, r4
   21df6:	f7eb fb56 	bl	d4a6 <os_mbuf_append>
        if (rc) {
   21dfa:	b9c0      	cbnz	r0, 21e2e <ble_hs_adv_set_hdr+0x5a>
            return rc;
        }

        return os_mbuf_append(om, &type, sizeof(type));
   21dfc:	2201      	movs	r2, #1
   21dfe:	f10d 0107 	add.w	r1, sp, #7
   21e02:	4620      	mov	r0, r4
   21e04:	f7eb fb4f 	bl	d4a6 <os_mbuf_append>
   21e08:	e011      	b.n	21e2e <ble_hs_adv_set_hdr+0x5a>
    }


    if (*dst_len + 2 + data_len > max_len) {
   21e0a:	782c      	ldrb	r4, [r5, #0]
   21e0c:	1ca0      	adds	r0, r4, #2
   21e0e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   21e12:	4408      	add	r0, r1
   21e14:	4290      	cmp	r0, r2
   21e16:	dc0c      	bgt.n	21e32 <ble_hs_adv_set_hdr+0x5e>
        return BLE_HS_EMSGSIZE;
    }

    dst[*dst_len] = data_len + 1;
   21e18:	3101      	adds	r1, #1
   21e1a:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   21e1c:	782a      	ldrb	r2, [r5, #0]
   21e1e:	3201      	adds	r2, #1
   21e20:	f89d 1007 	ldrb.w	r1, [sp, #7]
   21e24:	5499      	strb	r1, [r3, r2]

    *dst_len += 2;
   21e26:	782b      	ldrb	r3, [r5, #0]
   21e28:	3302      	adds	r3, #2
   21e2a:	702b      	strb	r3, [r5, #0]

    return 0;
   21e2c:	2000      	movs	r0, #0
}
   21e2e:	b003      	add	sp, #12
   21e30:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   21e32:	2004      	movs	r0, #4
   21e34:	e7fb      	b.n	21e2e <ble_hs_adv_set_hdr+0x5a>

00021e36 <ble_hs_adv_set_flat_mbuf>:

static int
ble_hs_adv_set_flat_mbuf(uint8_t type, int data_len, const void *data,
                         uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                         struct os_mbuf *om)
{
   21e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e3a:	b082      	sub	sp, #8
   21e3c:	460c      	mov	r4, r1
   21e3e:	4615      	mov	r5, r2
   21e40:	4699      	mov	r9, r3
   21e42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   21e44:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int rc;

    BLE_HS_DBG_ASSERT(data_len > 0);

    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   21e46:	fa5f fa81 	uxtb.w	sl, r1
   21e4a:	9601      	str	r6, [sp, #4]
   21e4c:	9700      	str	r7, [sp, #0]
   21e4e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   21e52:	4651      	mov	r1, sl
   21e54:	f7ff ffbe 	bl	21dd4 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   21e58:	4680      	mov	r8, r0
   21e5a:	b930      	cbnz	r0, 21e6a <ble_hs_adv_set_flat_mbuf+0x34>
        return rc;
    }

    if (om) {
   21e5c:	b14e      	cbz	r6, 21e72 <ble_hs_adv_set_flat_mbuf+0x3c>
        return os_mbuf_append(om, data, data_len);
   21e5e:	b2a2      	uxth	r2, r4
   21e60:	4629      	mov	r1, r5
   21e62:	4630      	mov	r0, r6
   21e64:	f7eb fb1f 	bl	d4a6 <os_mbuf_append>
   21e68:	4680      	mov	r8, r0

    memcpy(dst + *dst_len, data, data_len);
    *dst_len += data_len;

    return 0;
}
   21e6a:	4640      	mov	r0, r8
   21e6c:	b002      	add	sp, #8
   21e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   21e72:	7838      	ldrb	r0, [r7, #0]
   21e74:	4622      	mov	r2, r4
   21e76:	4629      	mov	r1, r5
   21e78:	4448      	add	r0, r9
   21e7a:	f7ec fd9d 	bl	e9b8 <memcpy>
    *dst_len += data_len;
   21e7e:	7839      	ldrb	r1, [r7, #0]
   21e80:	4451      	add	r1, sl
   21e82:	7039      	strb	r1, [r7, #0]
    return 0;
   21e84:	e7f1      	b.n	21e6a <ble_hs_adv_set_flat_mbuf+0x34>

00021e86 <ble_hs_adv_set_array_uuid16>:
static int
ble_hs_adv_set_array_uuid16(uint8_t type, uint8_t num_elems,
                            const ble_uuid16_t *elems, uint8_t *dst,
                            uint8_t *dst_len, uint8_t max_len,
                            struct os_mbuf *om)
{
   21e86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e8a:	b082      	sub	sp, #8
   21e8c:	460e      	mov	r6, r1
   21e8e:	4617      	mov	r7, r2
   21e90:	4699      	mov	r9, r3
   21e92:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   21e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   21e98:	0049      	lsls	r1, r1, #1
   21e9a:	9501      	str	r5, [sp, #4]
   21e9c:	f8cd 8000 	str.w	r8, [sp]
   21ea0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   21ea4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   21ea8:	f7ff ff94 	bl	21dd4 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   21eac:	4682      	mov	sl, r0
   21eae:	b9d0      	cbnz	r0, 21ee6 <ble_hs_adv_set_array_uuid16+0x60>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   21eb0:	4604      	mov	r4, r0
   21eb2:	e00c      	b.n	21ece <ble_hs_adv_set_array_uuid16+0x48>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   21eb4:	f898 1000 	ldrb.w	r1, [r8]
   21eb8:	4449      	add	r1, r9
   21eba:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   21ebe:	f004 faff 	bl	264c0 <ble_uuid_flat>
            *dst_len += 2;
   21ec2:	f898 3000 	ldrb.w	r3, [r8]
   21ec6:	3302      	adds	r3, #2
   21ec8:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   21ecc:	3401      	adds	r4, #1
   21ece:	42a6      	cmp	r6, r4
   21ed0:	dd09      	ble.n	21ee6 <ble_hs_adv_set_array_uuid16+0x60>
        if (om) {
   21ed2:	2d00      	cmp	r5, #0
   21ed4:	d0ee      	beq.n	21eb4 <ble_hs_adv_set_array_uuid16+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   21ed6:	4629      	mov	r1, r5
   21ed8:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   21edc:	f004 fb1f 	bl	2651e <ble_uuid_to_mbuf>
            if (rc) {
   21ee0:	2800      	cmp	r0, #0
   21ee2:	d0f3      	beq.n	21ecc <ble_hs_adv_set_array_uuid16+0x46>
                return rc;
   21ee4:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   21ee6:	4650      	mov	r0, sl
   21ee8:	b002      	add	sp, #8
   21eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021eee <ble_hs_adv_set_array_uuid128>:
static int
ble_hs_adv_set_array_uuid128(uint8_t type, uint8_t num_elems,
                             const ble_uuid128_t *elems, uint8_t *dst,
                             uint8_t *dst_len, uint8_t max_len,
                             struct os_mbuf *om)
{
   21eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21ef2:	b082      	sub	sp, #8
   21ef4:	460e      	mov	r6, r1
   21ef6:	4617      	mov	r7, r2
   21ef8:	4699      	mov	r9, r3
   21efa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   21efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   21f00:	0109      	lsls	r1, r1, #4
   21f02:	9501      	str	r5, [sp, #4]
   21f04:	f8cd 8000 	str.w	r8, [sp]
   21f08:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   21f0c:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   21f10:	f7ff ff60 	bl	21dd4 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   21f14:	4682      	mov	sl, r0
   21f16:	b9e0      	cbnz	r0, 21f52 <ble_hs_adv_set_array_uuid128+0x64>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   21f18:	4604      	mov	r4, r0
   21f1a:	e00d      	b.n	21f38 <ble_hs_adv_set_array_uuid128+0x4a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   21f1c:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   21f20:	f898 1000 	ldrb.w	r1, [r8]
   21f24:	4449      	add	r1, r9
   21f26:	4438      	add	r0, r7
   21f28:	f004 faca 	bl	264c0 <ble_uuid_flat>
            *dst_len += 16;
   21f2c:	f898 3000 	ldrb.w	r3, [r8]
   21f30:	3310      	adds	r3, #16
   21f32:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   21f36:	3401      	adds	r4, #1
   21f38:	42a6      	cmp	r6, r4
   21f3a:	dd0a      	ble.n	21f52 <ble_hs_adv_set_array_uuid128+0x64>
        if (om) {
   21f3c:	2d00      	cmp	r5, #0
   21f3e:	d0ed      	beq.n	21f1c <ble_hs_adv_set_array_uuid128+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   21f40:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   21f44:	4629      	mov	r1, r5
   21f46:	4438      	add	r0, r7
   21f48:	f004 fae9 	bl	2651e <ble_uuid_to_mbuf>
            if (rc) {
   21f4c:	2800      	cmp	r0, #0
   21f4e:	d0f2      	beq.n	21f36 <ble_hs_adv_set_array_uuid128+0x48>
                return rc;
   21f50:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   21f52:	4650      	mov	r0, sl
   21f54:	b002      	add	sp, #8
   21f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021f5a <ble_hs_adv_set_array_uuid32>:
{
   21f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21f5e:	b084      	sub	sp, #16
   21f60:	460e      	mov	r6, r1
   21f62:	4617      	mov	r7, r2
   21f64:	4699      	mov	r9, r3
   21f66:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   21f6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   21f6c:	0089      	lsls	r1, r1, #2
   21f6e:	9501      	str	r5, [sp, #4]
   21f70:	f8cd 8000 	str.w	r8, [sp]
   21f74:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   21f78:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   21f7c:	f7ff ff2a 	bl	21dd4 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   21f80:	4682      	mov	sl, r0
   21f82:	b9f8      	cbnz	r0, 21fc4 <ble_hs_adv_set_array_uuid32+0x6a>
    for (i = 0; i < num_elems; i++) {
   21f84:	4604      	mov	r4, r0
   21f86:	e00d      	b.n	21fa4 <ble_hs_adv_set_array_uuid32+0x4a>
            put_le32(dst + *dst_len, elems[i].value);
   21f88:	f898 0000 	ldrb.w	r0, [r8]
   21f8c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   21f90:	6859      	ldr	r1, [r3, #4]
   21f92:	4448      	add	r0, r9
   21f94:	f008 fe04 	bl	2aba0 <put_le32>
            *dst_len += 4;
   21f98:	f898 3000 	ldrb.w	r3, [r8]
   21f9c:	3304      	adds	r3, #4
   21f9e:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   21fa2:	3401      	adds	r4, #1
   21fa4:	42a6      	cmp	r6, r4
   21fa6:	dd0d      	ble.n	21fc4 <ble_hs_adv_set_array_uuid32+0x6a>
        if (om) {
   21fa8:	2d00      	cmp	r5, #0
   21faa:	d0ed      	beq.n	21f88 <ble_hs_adv_set_array_uuid32+0x2e>
            uuid_le = htole32(elems[i].value);
   21fac:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   21fb0:	685b      	ldr	r3, [r3, #4]
   21fb2:	9303      	str	r3, [sp, #12]
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   21fb4:	2204      	movs	r2, #4
   21fb6:	a903      	add	r1, sp, #12
   21fb8:	4628      	mov	r0, r5
   21fba:	f7eb fa74 	bl	d4a6 <os_mbuf_append>
            if (rc) {
   21fbe:	2800      	cmp	r0, #0
   21fc0:	d0ef      	beq.n	21fa2 <ble_hs_adv_set_array_uuid32+0x48>
                return rc;
   21fc2:	4682      	mov	sl, r0
}
   21fc4:	4650      	mov	r0, sl
   21fc6:	b004      	add	sp, #16
   21fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021fcc <ble_hs_adv_set_array16>:

static int
ble_hs_adv_set_array16(uint8_t type, uint8_t num_elems, const uint16_t *elems,
                       uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                       struct os_mbuf *om)
{
   21fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21fd0:	b084      	sub	sp, #16
   21fd2:	460e      	mov	r6, r1
   21fd4:	4617      	mov	r7, r2
   21fd6:	4699      	mov	r9, r3
   21fd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   21fdc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint16_t tmp;
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   21fde:	0049      	lsls	r1, r1, #1
   21fe0:	9501      	str	r5, [sp, #4]
   21fe2:	f8cd 8000 	str.w	r8, [sp]
   21fe6:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   21fea:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   21fee:	f7ff fef1 	bl	21dd4 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   21ff2:	4682      	mov	sl, r0
   21ff4:	b9f8      	cbnz	r0, 22036 <ble_hs_adv_set_array16+0x6a>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   21ff6:	4604      	mov	r4, r0
   21ff8:	e00c      	b.n	22014 <ble_hs_adv_set_array16+0x48>
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
            if (rc) {
                return rc;
            }
        } else {
            put_le16(dst + *dst_len, elems[i]);
   21ffa:	f898 0000 	ldrb.w	r0, [r8]
   21ffe:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   22002:	4448      	add	r0, r9
   22004:	f008 fdc8 	bl	2ab98 <put_le16>
            *dst_len += sizeof elems[i];
   22008:	f898 3000 	ldrb.w	r3, [r8]
   2200c:	3302      	adds	r3, #2
   2200e:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   22012:	3401      	adds	r4, #1
   22014:	42a6      	cmp	r6, r4
   22016:	dd0e      	ble.n	22036 <ble_hs_adv_set_array16+0x6a>
        if (om) {
   22018:	2d00      	cmp	r5, #0
   2201a:	d0ee      	beq.n	21ffa <ble_hs_adv_set_array16+0x2e>
            tmp = htole16(elems[i]);
   2201c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   22020:	f8ad 300e 	strh.w	r3, [sp, #14]
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   22024:	2202      	movs	r2, #2
   22026:	f10d 010e 	add.w	r1, sp, #14
   2202a:	4628      	mov	r0, r5
   2202c:	f7eb fa3b 	bl	d4a6 <os_mbuf_append>
            if (rc) {
   22030:	2800      	cmp	r0, #0
   22032:	d0ee      	beq.n	22012 <ble_hs_adv_set_array16+0x46>
                return rc;
   22034:	4682      	mov	sl, r0
        }
    }

    return 0;
}
   22036:	4650      	mov	r0, sl
   22038:	b004      	add	sp, #16
   2203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002203e <adv_set_fields>:

static int
adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                      struct os_mbuf *om)
{
   2203e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22042:	b086      	sub	sp, #24
   22044:	4604      	mov	r4, r0
   22046:	460d      	mov	r5, r1
   22048:	4690      	mov	r8, r2
   2204a:	461e      	mov	r6, r3
   2204c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t type;
    int8_t tx_pwr_lvl;
    uint8_t dst_len_local;
    int rc;

    dst_len_local = 0;
   2204e:	2300      	movs	r3, #0
   22050:	f88d 3016 	strb.w	r3, [sp, #22]
     * 2. Explicitly specify the value (flags != 0).
     *
     * Note: The CSS prohibits advertising a flags value of 0, so this method
     * of specifying option 1 vs. 2 is sound.
     */
    if (adv_fields->flags != 0) {
   22054:	7803      	ldrb	r3, [r0, #0]
   22056:	2b00      	cmp	r3, #0
   22058:	f040 80c0 	bne.w	221dc <adv_set_fields+0x19e>
            return rc;
        }
    }

    /*** 0x02,0x03 - 16-bit service class UUIDs. */
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   2205c:	6862      	ldr	r2, [r4, #4]
   2205e:	b19a      	cbz	r2, 22088 <adv_set_fields+0x4a>
   22060:	7a21      	ldrb	r1, [r4, #8]
   22062:	b189      	cbz	r1, 22088 <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   22064:	7a63      	ldrb	r3, [r4, #9]
   22066:	f013 0f01 	tst.w	r3, #1
   2206a:	f000 80c7 	beq.w	221fc <adv_set_fields+0x1be>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   2206e:	2003      	movs	r0, #3
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
        }

        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   22070:	9702      	str	r7, [sp, #8]
   22072:	9601      	str	r6, [sp, #4]
   22074:	f10d 0316 	add.w	r3, sp, #22
   22078:	9300      	str	r3, [sp, #0]
   2207a:	462b      	mov	r3, r5
   2207c:	f7ff ff03 	bl	21e86 <ble_hs_adv_set_array_uuid16>
                                         adv_fields->uuids16, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   22080:	4603      	mov	r3, r0
   22082:	2800      	cmp	r0, #0
   22084:	f040 80a6 	bne.w	221d4 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x04,0x05 - 32-bit service class UUIDs. */
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   22088:	68e2      	ldr	r2, [r4, #12]
   2208a:	b19a      	cbz	r2, 220b4 <adv_set_fields+0x76>
   2208c:	7c21      	ldrb	r1, [r4, #16]
   2208e:	b189      	cbz	r1, 220b4 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   22090:	7c63      	ldrb	r3, [r4, #17]
   22092:	f013 0f01 	tst.w	r3, #1
   22096:	f000 80b3 	beq.w	22200 <adv_set_fields+0x1c2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   2209a:	2005      	movs	r0, #5
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
        }

        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   2209c:	9702      	str	r7, [sp, #8]
   2209e:	9601      	str	r6, [sp, #4]
   220a0:	f10d 0316 	add.w	r3, sp, #22
   220a4:	9300      	str	r3, [sp, #0]
   220a6:	462b      	mov	r3, r5
   220a8:	f7ff ff57 	bl	21f5a <ble_hs_adv_set_array_uuid32>
                                         adv_fields->uuids32, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   220ac:	4603      	mov	r3, r0
   220ae:	2800      	cmp	r0, #0
   220b0:	f040 8090 	bne.w	221d4 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x06,0x07 - 128-bit service class UUIDs. */
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   220b4:	6962      	ldr	r2, [r4, #20]
   220b6:	b192      	cbz	r2, 220de <adv_set_fields+0xa0>
   220b8:	7e21      	ldrb	r1, [r4, #24]
   220ba:	b181      	cbz	r1, 220de <adv_set_fields+0xa0>
        if (adv_fields->uuids128_is_complete) {
   220bc:	7e63      	ldrb	r3, [r4, #25]
   220be:	f013 0f01 	tst.w	r3, #1
   220c2:	f000 809f 	beq.w	22204 <adv_set_fields+0x1c6>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   220c6:	2007      	movs	r0, #7
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
        }

        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   220c8:	9702      	str	r7, [sp, #8]
   220ca:	9601      	str	r6, [sp, #4]
   220cc:	f10d 0316 	add.w	r3, sp, #22
   220d0:	9300      	str	r3, [sp, #0]
   220d2:	462b      	mov	r3, r5
   220d4:	f7ff ff0b 	bl	21eee <ble_hs_adv_set_array_uuid128>
                                          adv_fields->uuids128, dst, &dst_len_local,
                                          max_len, om);
        if (rc != 0) {
   220d8:	4603      	mov	r3, r0
   220da:	2800      	cmp	r0, #0
   220dc:	d17a      	bne.n	221d4 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x08,0x09 - Local name. */
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   220de:	69e2      	ldr	r2, [r4, #28]
   220e0:	b1a2      	cbz	r2, 2210c <adv_set_fields+0xce>
   220e2:	f894 1020 	ldrb.w	r1, [r4, #32]
   220e6:	b189      	cbz	r1, 2210c <adv_set_fields+0xce>
        if (adv_fields->name_is_complete) {
   220e8:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   220ec:	f013 0f01 	tst.w	r3, #1
   220f0:	f000 808a 	beq.w	22208 <adv_set_fields+0x1ca>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   220f4:	2009      	movs	r0, #9
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
        }

        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   220f6:	9702      	str	r7, [sp, #8]
   220f8:	9601      	str	r6, [sp, #4]
   220fa:	f10d 0316 	add.w	r3, sp, #22
   220fe:	9300      	str	r3, [sp, #0]
   22100:	462b      	mov	r3, r5
   22102:	f7ff fe98 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
                                      adv_fields->name, dst, &dst_len_local, max_len,
                                      om);
        if (rc != 0) {
   22106:	4603      	mov	r3, r0
   22108:	2800      	cmp	r0, #0
   2210a:	d163      	bne.n	221d4 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x0a - Tx power level. */
    if (adv_fields->tx_pwr_lvl_is_present) {
   2210c:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   22110:	f013 0f01 	tst.w	r3, #1
   22114:	d015      	beq.n	22142 <adv_set_fields+0x104>
        /* Read the power level from the controller if requested; otherwise use
         * the explicitly specified value.
         */
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   22116:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   2211a:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2211e:	d075      	beq.n	2220c <adv_set_fields+0x1ce>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
            if (rc != 0) {
                return rc;
            }
        } else {
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   22120:	f88d 3017 	strb.w	r3, [sp, #23]
        }

        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   22124:	9702      	str	r7, [sp, #8]
   22126:	9601      	str	r6, [sp, #4]
   22128:	f10d 0316 	add.w	r3, sp, #22
   2212c:	9300      	str	r3, [sp, #0]
   2212e:	462b      	mov	r3, r5
   22130:	f10d 0217 	add.w	r2, sp, #23
   22134:	2101      	movs	r1, #1
   22136:	200a      	movs	r0, #10
   22138:	f7ff fe7d 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
                                      &tx_pwr_lvl, dst, &dst_len_local, max_len, om);
        if (rc != 0) {
   2213c:	4603      	mov	r3, r0
   2213e:	2800      	cmp	r0, #0
   22140:	d148      	bne.n	221d4 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x12 - Slave connection interval range. */
    if (adv_fields->slave_itvl_range != NULL) {
   22142:	6a62      	ldr	r2, [r4, #36]	; 0x24
   22144:	b162      	cbz	r2, 22160 <adv_set_fields+0x122>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   22146:	9702      	str	r7, [sp, #8]
   22148:	9601      	str	r6, [sp, #4]
   2214a:	f10d 0316 	add.w	r3, sp, #22
   2214e:	9300      	str	r3, [sp, #0]
   22150:	462b      	mov	r3, r5
   22152:	2104      	movs	r1, #4
   22154:	2012      	movs	r0, #18
   22156:	f7ff fe6e 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
                                      BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN,
                                      adv_fields->slave_itvl_range, dst,
                                      &dst_len_local, max_len, om);
        if (rc != 0) {
   2215a:	4603      	mov	r3, r0
   2215c:	2800      	cmp	r0, #0
   2215e:	d139      	bne.n	221d4 <adv_set_fields+0x196>
            return rc;
        }
    }

    /*** 0x16 - Service data - 16-bit UUID. */
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   22160:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22162:	b11a      	cbz	r2, 2216c <adv_set_fields+0x12e>
   22164:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   22168:	2900      	cmp	r1, #0
   2216a:	d157      	bne.n	2221c <adv_set_fields+0x1de>
            return rc;
        }
    }

    /*** 0x17 - Public target address. */
    if (adv_fields->public_tgt_addr != NULL &&
   2216c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2216e:	b11a      	cbz	r2, 22178 <adv_set_fields+0x13a>
        adv_fields->num_public_tgt_addrs != 0) {
   22170:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   22174:	2900      	cmp	r1, #0
   22176:	d15e      	bne.n	22236 <adv_set_fields+0x1f8>
            return rc;
        }
    }

    /*** 0x19 - Appearance. */
    if (adv_fields->appearance_is_present) {
   22178:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2217c:	f013 0f01 	tst.w	r3, #1
   22180:	d169      	bne.n	22256 <adv_set_fields+0x218>
            return rc;
        }
    }

    /*** 0x1a - Advertising interval. */
    if (adv_fields->adv_itvl_is_present) {
   22182:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   22186:	f013 0f01 	tst.w	r3, #1
   2218a:	d174      	bne.n	22276 <adv_set_fields+0x238>
            return rc;
        }
    }

    /*** 0x20 - Service data - 32-bit UUID. */
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   2218c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   2218e:	b11a      	cbz	r2, 22198 <adv_set_fields+0x15a>
   22190:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   22194:	2900      	cmp	r1, #0
   22196:	d17f      	bne.n	22298 <adv_set_fields+0x25a>
            return rc;
        }
    }

    /*** 0x21 - Service data - 128-bit UUID. */
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   22198:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2219a:	b122      	cbz	r2, 221a6 <adv_set_fields+0x168>
   2219c:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   221a0:	2900      	cmp	r1, #0
   221a2:	f040 8087 	bne.w	222b4 <adv_set_fields+0x276>
            return rc;
        }
    }

    /*** 0x24 - URI. */
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   221a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
   221a8:	b122      	cbz	r2, 221b4 <adv_set_fields+0x176>
   221aa:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   221ae:	2900      	cmp	r1, #0
   221b0:	f040 808e 	bne.w	222d0 <adv_set_fields+0x292>
            return rc;
        }
    }

    /*** 0xff - Manufacturer specific data. */
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   221b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
   221b6:	b122      	cbz	r2, 221c2 <adv_set_fields+0x184>
   221b8:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   221bc:	2901      	cmp	r1, #1
   221be:	f200 8095 	bhi.w	222ec <adv_set_fields+0x2ae>
        if (rc != 0) {
            return rc;
        }
    }

    if (dst_len) {
   221c2:	f1b8 0f00 	cmp.w	r8, #0
   221c6:	f000 809f 	beq.w	22308 <adv_set_fields+0x2ca>
        *dst_len = dst_len_local;
   221ca:	f89d 3016 	ldrb.w	r3, [sp, #22]
   221ce:	f888 3000 	strb.w	r3, [r8]
    }

    return 0;
   221d2:	2300      	movs	r3, #0
}
   221d4:	4618      	mov	r0, r3
   221d6:	b006      	add	sp, #24
   221d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   221dc:	9702      	str	r7, [sp, #8]
   221de:	9601      	str	r6, [sp, #4]
   221e0:	f10d 0316 	add.w	r3, sp, #22
   221e4:	9300      	str	r3, [sp, #0]
   221e6:	460b      	mov	r3, r1
   221e8:	4602      	mov	r2, r0
   221ea:	2101      	movs	r1, #1
   221ec:	4608      	mov	r0, r1
   221ee:	f7ff fe22 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   221f2:	4603      	mov	r3, r0
   221f4:	2800      	cmp	r0, #0
   221f6:	f43f af31 	beq.w	2205c <adv_set_fields+0x1e>
   221fa:	e7eb      	b.n	221d4 <adv_set_fields+0x196>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   221fc:	2002      	movs	r0, #2
   221fe:	e737      	b.n	22070 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   22200:	2004      	movs	r0, #4
   22202:	e74b      	b.n	2209c <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   22204:	2006      	movs	r0, #6
   22206:	e75f      	b.n	220c8 <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   22208:	2008      	movs	r0, #8
   2220a:	e774      	b.n	220f6 <adv_set_fields+0xb8>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   2220c:	f10d 0017 	add.w	r0, sp, #23
   22210:	f000 ff82 	bl	23118 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   22214:	4603      	mov	r3, r0
   22216:	2800      	cmp	r0, #0
   22218:	d084      	beq.n	22124 <adv_set_fields+0xe6>
   2221a:	e7db      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   2221c:	9702      	str	r7, [sp, #8]
   2221e:	9601      	str	r6, [sp, #4]
   22220:	f10d 0316 	add.w	r3, sp, #22
   22224:	9300      	str	r3, [sp, #0]
   22226:	462b      	mov	r3, r5
   22228:	2016      	movs	r0, #22
   2222a:	f7ff fe04 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2222e:	4603      	mov	r3, r0
   22230:	2800      	cmp	r0, #0
   22232:	d09b      	beq.n	2216c <adv_set_fields+0x12e>
   22234:	e7ce      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   22236:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2223a:	9702      	str	r7, [sp, #8]
   2223c:	9601      	str	r6, [sp, #4]
   2223e:	f10d 0316 	add.w	r3, sp, #22
   22242:	9300      	str	r3, [sp, #0]
   22244:	462b      	mov	r3, r5
   22246:	0049      	lsls	r1, r1, #1
   22248:	2017      	movs	r0, #23
   2224a:	f7ff fdf4 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2224e:	4603      	mov	r3, r0
   22250:	2800      	cmp	r0, #0
   22252:	d091      	beq.n	22178 <adv_set_fields+0x13a>
   22254:	e7be      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   22256:	9702      	str	r7, [sp, #8]
   22258:	9601      	str	r6, [sp, #4]
   2225a:	f10d 0316 	add.w	r3, sp, #22
   2225e:	9300      	str	r3, [sp, #0]
   22260:	462b      	mov	r3, r5
   22262:	f104 0236 	add.w	r2, r4, #54	; 0x36
   22266:	2102      	movs	r1, #2
   22268:	2019      	movs	r0, #25
   2226a:	f7ff fde4 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2226e:	4603      	mov	r3, r0
   22270:	2800      	cmp	r0, #0
   22272:	d086      	beq.n	22182 <adv_set_fields+0x144>
   22274:	e7ae      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   22276:	9702      	str	r7, [sp, #8]
   22278:	9601      	str	r6, [sp, #4]
   2227a:	f10d 0316 	add.w	r3, sp, #22
   2227e:	9300      	str	r3, [sp, #0]
   22280:	462b      	mov	r3, r5
   22282:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   22286:	2101      	movs	r1, #1
   22288:	201a      	movs	r0, #26
   2228a:	f7ff fe9f 	bl	21fcc <ble_hs_adv_set_array16>
        if (rc != 0) {
   2228e:	4603      	mov	r3, r0
   22290:	2800      	cmp	r0, #0
   22292:	f43f af7b 	beq.w	2218c <adv_set_fields+0x14e>
   22296:	e79d      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   22298:	9702      	str	r7, [sp, #8]
   2229a:	9601      	str	r6, [sp, #4]
   2229c:	f10d 0316 	add.w	r3, sp, #22
   222a0:	9300      	str	r3, [sp, #0]
   222a2:	462b      	mov	r3, r5
   222a4:	2020      	movs	r0, #32
   222a6:	f7ff fdc6 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   222aa:	4603      	mov	r3, r0
   222ac:	2800      	cmp	r0, #0
   222ae:	f43f af73 	beq.w	22198 <adv_set_fields+0x15a>
   222b2:	e78f      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   222b4:	9702      	str	r7, [sp, #8]
   222b6:	9601      	str	r6, [sp, #4]
   222b8:	f10d 0316 	add.w	r3, sp, #22
   222bc:	9300      	str	r3, [sp, #0]
   222be:	462b      	mov	r3, r5
   222c0:	2021      	movs	r0, #33	; 0x21
   222c2:	f7ff fdb8 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   222c6:	4603      	mov	r3, r0
   222c8:	2800      	cmp	r0, #0
   222ca:	f43f af6c 	beq.w	221a6 <adv_set_fields+0x168>
   222ce:	e781      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   222d0:	9702      	str	r7, [sp, #8]
   222d2:	9601      	str	r6, [sp, #4]
   222d4:	f10d 0316 	add.w	r3, sp, #22
   222d8:	9300      	str	r3, [sp, #0]
   222da:	462b      	mov	r3, r5
   222dc:	2024      	movs	r0, #36	; 0x24
   222de:	f7ff fdaa 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   222e2:	4603      	mov	r3, r0
   222e4:	2800      	cmp	r0, #0
   222e6:	f43f af65 	beq.w	221b4 <adv_set_fields+0x176>
   222ea:	e773      	b.n	221d4 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   222ec:	9702      	str	r7, [sp, #8]
   222ee:	9601      	str	r6, [sp, #4]
   222f0:	f10d 0316 	add.w	r3, sp, #22
   222f4:	9300      	str	r3, [sp, #0]
   222f6:	462b      	mov	r3, r5
   222f8:	20ff      	movs	r0, #255	; 0xff
   222fa:	f7ff fd9c 	bl	21e36 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   222fe:	4603      	mov	r3, r0
   22300:	2800      	cmp	r0, #0
   22302:	f43f af5e 	beq.w	221c2 <adv_set_fields+0x184>
   22306:	e765      	b.n	221d4 <adv_set_fields+0x196>
    return 0;
   22308:	2300      	movs	r3, #0
   2230a:	e763      	b.n	221d4 <adv_set_fields+0x196>

0002230c <ble_hs_adv_set_fields>:
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len)
{
   2230c:	b510      	push	{r4, lr}
   2230e:	b082      	sub	sp, #8
#if !NIMBLE_BLE_ADVERTISE
    return BLE_HS_ENOTSUP;
#endif

    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   22310:	2400      	movs	r4, #0
   22312:	9400      	str	r4, [sp, #0]
   22314:	f7ff fe93 	bl	2203e <adv_set_fields>
}
   22318:	b002      	add	sp, #8
   2231a:	bd10      	pop	{r4, pc}

0002231c <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   2231c:	b510      	push	{r4, lr}
   2231e:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   22320:	f7ff faa4 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   22324:	4620      	mov	r0, r4
   22326:	f000 f8ff 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   2232a:	4604      	mov	r4, r0
   2232c:	b120      	cbz	r0, 22338 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   2232e:	f000 f8e9 	bl	22504 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   22332:	4620      	mov	r0, r4
   22334:	f000 f87e 	bl	22434 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   22338:	f7ff fa9c 	bl	21874 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   2233c:	b10c      	cbz	r4, 22342 <ble_hs_atomic_conn_delete+0x26>
   2233e:	2000      	movs	r0, #0
}
   22340:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   22342:	2007      	movs	r0, #7
   22344:	e7fc      	b.n	22340 <ble_hs_atomic_conn_delete+0x24>

00022346 <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   22346:	b538      	push	{r3, r4, r5, lr}
   22348:	4605      	mov	r5, r0
   2234a:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   2234c:	f7ff fa8e 	bl	2186c <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   22350:	4628      	mov	r0, r5
   22352:	f000 f8e9 	bl	22528 <ble_hs_conn_find>
    if (conn == NULL) {
   22356:	b140      	cbz	r0, 2236a <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   22358:	b14c      	cbz	r4, 2236e <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   2235a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2235e:	7023      	strb	r3, [r4, #0]
        rc = 0;
   22360:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   22362:	f7ff fa87 	bl	21874 <ble_hs_unlock>

    return rc;
}
   22366:	4620      	mov	r0, r4
   22368:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   2236a:	2407      	movs	r4, #7
   2236c:	e7f9      	b.n	22362 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   2236e:	2400      	movs	r4, #0
   22370:	e7f7      	b.n	22362 <ble_hs_atomic_conn_flags+0x1c>

00022372 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   22372:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   22374:	f7ff fa7a 	bl	2186c <ble_hs_lock>

    conn = ble_hs_conn_first();
   22378:	f000 f908 	bl	2258c <ble_hs_conn_first>
    if (conn != NULL) {
   2237c:	b120      	cbz	r0, 22388 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   2237e:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   22380:	f7ff fa78 	bl	21874 <ble_hs_unlock>

    return conn_handle;
}
   22384:	4620      	mov	r0, r4
   22386:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   22388:	f64f 74ff 	movw	r4, #65535	; 0xffff
   2238c:	e7f8      	b.n	22380 <ble_hs_atomic_first_conn_handle+0xe>
	...

00022390 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   22390:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   22392:	4b08      	ldr	r3, [pc, #32]	; (223b4 <ble_hs_conn_can_alloc+0x24>)
   22394:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   22396:	b153      	cbz	r3, 223ae <ble_hs_conn_can_alloc+0x1e>
   22398:	4b07      	ldr	r3, [pc, #28]	; (223b8 <ble_hs_conn_can_alloc+0x28>)
   2239a:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   2239c:	2b02      	cmp	r3, #2
   2239e:	d801      	bhi.n	223a4 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   223a0:	2000      	movs	r0, #0
   223a2:	e005      	b.n	223b0 <ble_hs_conn_can_alloc+0x20>
           ble_gatts_conn_can_alloc();
   223a4:	f7fe ffd6 	bl	21354 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   223a8:	b110      	cbz	r0, 223b0 <ble_hs_conn_can_alloc+0x20>
   223aa:	2001      	movs	r0, #1
   223ac:	e000      	b.n	223b0 <ble_hs_conn_can_alloc+0x20>
   223ae:	2000      	movs	r0, #0
}
   223b0:	bd08      	pop	{r3, pc}
   223b2:	bf00      	nop
   223b4:	200034c4 	.word	0x200034c4
   223b8:	20003704 	.word	0x20003704

000223bc <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   223bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   223be:	e000      	b.n	223c2 <ble_hs_conn_chan_find_by_scid+0x6>
   223c0:	6800      	ldr	r0, [r0, #0]
   223c2:	b128      	cbz	r0, 223d0 <ble_hs_conn_chan_find_by_scid+0x14>
        if (chan->scid == cid) {
   223c4:	8903      	ldrh	r3, [r0, #8]
   223c6:	428b      	cmp	r3, r1
   223c8:	d001      	beq.n	223ce <ble_hs_conn_chan_find_by_scid+0x12>
            return chan;
        }
        if (chan->scid > cid) {
   223ca:	d9f9      	bls.n	223c0 <ble_hs_conn_chan_find_by_scid+0x4>
            return NULL;
   223cc:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   223ce:	4770      	bx	lr
   223d0:	4770      	bx	lr

000223d2 <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   223d2:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   223d4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   223d6:	4633      	mov	r3, r6
    prev = NULL;
   223d8:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   223da:	e001      	b.n	223e0 <ble_hs_conn_chan_insert+0xe>
        }
        if (cur->scid > chan->scid) {
            break;
        }

        prev = cur;
   223dc:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   223de:	681b      	ldr	r3, [r3, #0]
   223e0:	b123      	cbz	r3, 223ec <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   223e2:	891c      	ldrh	r4, [r3, #8]
   223e4:	890a      	ldrh	r2, [r1, #8]
   223e6:	4294      	cmp	r4, r2
   223e8:	d00b      	beq.n	22402 <ble_hs_conn_chan_insert+0x30>
        if (cur->scid > chan->scid) {
   223ea:	d9f7      	bls.n	223dc <ble_hs_conn_chan_insert+0xa>
    }

    if (prev == NULL) {
   223ec:	b12d      	cbz	r5, 223fa <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   223ee:	682b      	ldr	r3, [r5, #0]
   223f0:	600b      	str	r3, [r1, #0]
   223f2:	6029      	str	r1, [r5, #0]
    }

    return 0;
   223f4:	2000      	movs	r0, #0
}
   223f6:	bc70      	pop	{r4, r5, r6}
   223f8:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   223fa:	600e      	str	r6, [r1, #0]
   223fc:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   223fe:	2000      	movs	r0, #0
   22400:	e7f9      	b.n	223f6 <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   22402:	2002      	movs	r0, #2
   22404:	e7f7      	b.n	223f6 <ble_hs_conn_chan_insert+0x24>

00022406 <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   22406:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   22408:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2240a:	428b      	cmp	r3, r1
   2240c:	d00b      	beq.n	22426 <ble_hs_conn_delete_chan+0x20>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   2240e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22410:	428b      	cmp	r3, r1
   22412:	d00b      	beq.n	2242c <ble_hs_conn_delete_chan+0x26>
   22414:	461a      	mov	r2, r3
   22416:	681b      	ldr	r3, [r3, #0]
   22418:	428b      	cmp	r3, r1
   2241a:	d1fb      	bne.n	22414 <ble_hs_conn_delete_chan+0xe>
   2241c:	681b      	ldr	r3, [r3, #0]
   2241e:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   22420:	f001 fb80 	bl	23b24 <ble_l2cap_chan_free>
}
   22424:	bd08      	pop	{r3, pc}
        conn->bhc_rx_chan = NULL;
   22426:	2300      	movs	r3, #0
   22428:	6303      	str	r3, [r0, #48]	; 0x30
   2242a:	e7f0      	b.n	2240e <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   2242c:	681b      	ldr	r3, [r3, #0]
   2242e:	62c3      	str	r3, [r0, #44]	; 0x2c
   22430:	e7f6      	b.n	22420 <ble_hs_conn_delete_chan+0x1a>
	...

00022434 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   22434:	b300      	cbz	r0, 22478 <ble_hs_conn_free+0x44>
{
   22436:	b510      	push	{r4, lr}
   22438:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   2243a:	3044      	adds	r0, #68	; 0x44
   2243c:	f7fb fc99 	bl	1dd72 <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   22440:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   22442:	b149      	cbz	r1, 22458 <ble_hs_conn_free+0x24>
        ble_hs_conn_delete_chan(conn, chan);
   22444:	4620      	mov	r0, r4
   22446:	f7ff ffde 	bl	22406 <ble_hs_conn_delete_chan>
   2244a:	e7f9      	b.n	22440 <ble_hs_conn_free+0xc>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2244c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   22450:	6423      	str	r3, [r4, #64]	; 0x40
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   22452:	3810      	subs	r0, #16
   22454:	f7eb f80e 	bl	d474 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   22458:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   2245a:	b120      	cbz	r0, 22466 <ble_hs_conn_free+0x32>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2245c:	6843      	ldr	r3, [r0, #4]
   2245e:	63e3      	str	r3, [r4, #60]	; 0x3c
   22460:	2b00      	cmp	r3, #0
   22462:	d1f6      	bne.n	22452 <ble_hs_conn_free+0x1e>
   22464:	e7f2      	b.n	2244c <ble_hs_conn_free+0x18>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   22466:	4621      	mov	r1, r4
   22468:	4804      	ldr	r0, [pc, #16]	; (2247c <ble_hs_conn_free+0x48>)
   2246a:	f7eb fc08 	bl	dc7e <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   2246e:	4a04      	ldr	r2, [pc, #16]	; (22480 <ble_hs_conn_free+0x4c>)
   22470:	6913      	ldr	r3, [r2, #16]
   22472:	3301      	adds	r3, #1
   22474:	6113      	str	r3, [r2, #16]
}
   22476:	bd10      	pop	{r4, pc}
   22478:	4770      	bx	lr
   2247a:	bf00      	nop
   2247c:	200034c4 	.word	0x200034c4
   22480:	20003404 	.word	0x20003404

00022484 <ble_hs_conn_alloc>:
{
   22484:	b538      	push	{r3, r4, r5, lr}
   22486:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   22488:	481c      	ldr	r0, [pc, #112]	; (224fc <ble_hs_conn_alloc+0x78>)
   2248a:	f7eb fbd0 	bl	dc2e <os_memblock_get>
    if (conn == NULL) {
   2248e:	4604      	mov	r4, r0
   22490:	b370      	cbz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   22492:	2264      	movs	r2, #100	; 0x64
   22494:	2100      	movs	r1, #0
   22496:	f7ec fab4 	bl	ea02 <memset>
    conn->bhc_handle = conn_handle;
   2249a:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   2249c:	4628      	mov	r0, r5
   2249e:	f7fa f985 	bl	1c7ac <ble_att_create_chan>
    if (chan == NULL) {
   224a2:	4601      	mov	r1, r0
   224a4:	b320      	cbz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   224a6:	4620      	mov	r0, r4
   224a8:	f7ff ff93 	bl	223d2 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   224ac:	bb00      	cbnz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   224ae:	4628      	mov	r0, r5
   224b0:	f001 fe66 	bl	24180 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   224b4:	4601      	mov	r1, r0
   224b6:	b1d8      	cbz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   224b8:	4620      	mov	r0, r4
   224ba:	f7ff ff8a 	bl	223d2 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   224be:	b9b8      	cbnz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   224c0:	4628      	mov	r0, r5
   224c2:	f003 fbd7 	bl	25c74 <ble_sm_create_chan>
    if (chan == NULL) {
   224c6:	4601      	mov	r1, r0
   224c8:	b190      	cbz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   224ca:	4620      	mov	r0, r4
   224cc:	f7ff ff81 	bl	223d2 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   224d0:	b970      	cbnz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   224d2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   224d6:	f7fe ff4d 	bl	21374 <ble_gatts_conn_init>
    if (rc != 0) {
   224da:	b948      	cbnz	r0, 224f0 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   224dc:	4623      	mov	r3, r4
   224de:	2200      	movs	r2, #0
   224e0:	f843 2f3c 	str.w	r2, [r3, #60]!
   224e4:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   224e6:	4a06      	ldr	r2, [pc, #24]	; (22500 <ble_hs_conn_alloc+0x7c>)
   224e8:	68d3      	ldr	r3, [r2, #12]
   224ea:	3301      	adds	r3, #1
   224ec:	60d3      	str	r3, [r2, #12]
    return conn;
   224ee:	e003      	b.n	224f8 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   224f0:	4620      	mov	r0, r4
   224f2:	f7ff ff9f 	bl	22434 <ble_hs_conn_free>
    return NULL;
   224f6:	2400      	movs	r4, #0
}
   224f8:	4620      	mov	r0, r4
   224fa:	bd38      	pop	{r3, r4, r5, pc}
   224fc:	200034c4 	.word	0x200034c4
   22500:	20003404 	.word	0x20003404

00022504 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   22504:	4b07      	ldr	r3, [pc, #28]	; (22524 <ble_hs_conn_remove+0x20>)
   22506:	681b      	ldr	r3, [r3, #0]
   22508:	4283      	cmp	r3, r0
   2250a:	d006      	beq.n	2251a <ble_hs_conn_remove+0x16>
   2250c:	461a      	mov	r2, r3
   2250e:	681b      	ldr	r3, [r3, #0]
   22510:	4283      	cmp	r3, r0
   22512:	d1fb      	bne.n	2250c <ble_hs_conn_remove+0x8>
   22514:	681b      	ldr	r3, [r3, #0]
   22516:	6013      	str	r3, [r2, #0]
}
   22518:	4770      	bx	lr
    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   2251a:	681a      	ldr	r2, [r3, #0]
   2251c:	4b01      	ldr	r3, [pc, #4]	; (22524 <ble_hs_conn_remove+0x20>)
   2251e:	601a      	str	r2, [r3, #0]
   22520:	4770      	bx	lr
   22522:	bf00      	nop
   22524:	200034e0 	.word	0x200034e0

00022528 <ble_hs_conn_find>:

struct ble_hs_conn *
ble_hs_conn_find(uint16_t conn_handle)
{
   22528:	4602      	mov	r2, r0

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2252a:	4b04      	ldr	r3, [pc, #16]	; (2253c <ble_hs_conn_find+0x14>)
   2252c:	6818      	ldr	r0, [r3, #0]
   2252e:	b120      	cbz	r0, 2253a <ble_hs_conn_find+0x12>
        if (conn->bhc_handle == conn_handle) {
   22530:	8883      	ldrh	r3, [r0, #4]
   22532:	4293      	cmp	r3, r2
   22534:	d001      	beq.n	2253a <ble_hs_conn_find+0x12>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22536:	6800      	ldr	r0, [r0, #0]
   22538:	e7f9      	b.n	2252e <ble_hs_conn_find+0x6>
            return conn;
        }
    }

    return NULL;
}
   2253a:	4770      	bx	lr
   2253c:	200034e0 	.word	0x200034e0

00022540 <ble_hs_conn_insert>:
{
   22540:	b510      	push	{r4, lr}
   22542:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   22544:	8880      	ldrh	r0, [r0, #4]
   22546:	f7ff ffef 	bl	22528 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   2254a:	4b02      	ldr	r3, [pc, #8]	; (22554 <ble_hs_conn_insert+0x14>)
   2254c:	681a      	ldr	r2, [r3, #0]
   2254e:	6022      	str	r2, [r4, #0]
   22550:	601c      	str	r4, [r3, #0]
}
   22552:	bd10      	pop	{r4, pc}
   22554:	200034e0 	.word	0x200034e0

00022558 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   22558:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   2255a:	f7ff ffe5 	bl	22528 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   2255e:	bd08      	pop	{r3, pc}

00022560 <ble_hs_conn_find_by_idx>:
    return NULL;
}

struct ble_hs_conn *
ble_hs_conn_find_by_idx(int idx)
{
   22560:	4602      	mov	r2, r0
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22562:	4b05      	ldr	r3, [pc, #20]	; (22578 <ble_hs_conn_find_by_idx+0x18>)
   22564:	6818      	ldr	r0, [r3, #0]
    i = 0;
   22566:	2300      	movs	r3, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22568:	b120      	cbz	r0, 22574 <ble_hs_conn_find_by_idx+0x14>
        if (i == idx) {
   2256a:	4293      	cmp	r3, r2
   2256c:	d002      	beq.n	22574 <ble_hs_conn_find_by_idx+0x14>
            return conn;
        }

        i++;
   2256e:	3301      	adds	r3, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22570:	6800      	ldr	r0, [r0, #0]
   22572:	e7f9      	b.n	22568 <ble_hs_conn_find_by_idx+0x8>
    }

    return NULL;
}
   22574:	4770      	bx	lr
   22576:	bf00      	nop
   22578:	200034e0 	.word	0x200034e0

0002257c <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   2257c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   2257e:	f7ff ffd3 	bl	22528 <ble_hs_conn_find>
}
   22582:	3800      	subs	r0, #0
   22584:	bf18      	it	ne
   22586:	2001      	movne	r0, #1
   22588:	bd08      	pop	{r3, pc}
	...

0002258c <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   2258c:	4b01      	ldr	r3, [pc, #4]	; (22594 <ble_hs_conn_first+0x8>)
   2258e:	6818      	ldr	r0, [r3, #0]
   22590:	4770      	bx	lr
   22592:	bf00      	nop
   22594:	200034e0 	.word	0x200034e0

00022598 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   22598:	b530      	push	{r4, r5, lr}
   2259a:	b083      	sub	sp, #12
   2259c:	4605      	mov	r5, r0
   2259e:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   225a0:	7980      	ldrb	r0, [r0, #6]
   225a2:	f000 ffb6 	bl	23512 <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   225a6:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   225a8:	2200      	movs	r2, #0
   225aa:	a901      	add	r1, sp, #4
   225ac:	f000 fe6e 	bl	2328c <ble_hs_id_addr>
    assert(rc == 0);
   225b0:	bb78      	cbnz	r0, 22612 <ble_hs_conn_addrs+0x7a>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   225b2:	9b01      	ldr	r3, [sp, #4]
   225b4:	681a      	ldr	r2, [r3, #0]
   225b6:	f8c4 2001 	str.w	r2, [r4, #1]
   225ba:	889b      	ldrh	r3, [r3, #4]
   225bc:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   225c0:	2206      	movs	r2, #6
   225c2:	492a      	ldr	r1, [pc, #168]	; (2266c <ble_hs_conn_addrs+0xd4>)
   225c4:	f105 000f 	add.w	r0, r5, #15
   225c8:	f7ec f9d2 	bl	e970 <memcmp>
   225cc:	bb58      	cbnz	r0, 22626 <ble_hs_conn_addrs+0x8e>
        addrs->our_ota_addr = addrs->our_id_addr;
   225ce:	4623      	mov	r3, r4
   225d0:	f853 2b0e 	ldr.w	r2, [r3], #14
   225d4:	f8c4 200e 	str.w	r2, [r4, #14]
   225d8:	88a1      	ldrh	r1, [r4, #4]
   225da:	79a2      	ldrb	r2, [r4, #6]
   225dc:	8099      	strh	r1, [r3, #4]
   225de:	719a      	strb	r2, [r3, #6]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   225e0:	462b      	mov	r3, r5
   225e2:	f853 2f07 	ldr.w	r2, [r3, #7]!
   225e6:	f8c4 2007 	str.w	r2, [r4, #7]
   225ea:	8899      	ldrh	r1, [r3, #4]
   225ec:	799a      	ldrb	r2, [r3, #6]
   225ee:	f8a4 100b 	strh.w	r1, [r4, #11]
   225f2:	7362      	strb	r2, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   225f4:	681a      	ldr	r2, [r3, #0]
   225f6:	f8c4 2015 	str.w	r2, [r4, #21]
   225fa:	889a      	ldrh	r2, [r3, #4]
   225fc:	799b      	ldrb	r3, [r3, #6]
   225fe:	f8a4 2019 	strh.w	r2, [r4, #25]
   22602:	76e3      	strb	r3, [r4, #27]
    switch (conn->bhc_peer_addr.type) {
   22604:	79eb      	ldrb	r3, [r5, #7]
   22606:	2b02      	cmp	r3, #2
   22608:	d017      	beq.n	2263a <ble_hs_conn_addrs+0xa2>
   2260a:	2b03      	cmp	r3, #3
   2260c:	d021      	beq.n	22652 <ble_hs_conn_addrs+0xba>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   2260e:	b003      	add	sp, #12
   22610:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   22612:	f7e9 fdc3 	bl	c19c <hal_debugger_connected>
   22616:	b100      	cbz	r0, 2261a <ble_hs_conn_addrs+0x82>
   22618:	be01      	bkpt	0x0001
   2261a:	2300      	movs	r3, #0
   2261c:	461a      	mov	r2, r3
   2261e:	4619      	mov	r1, r3
   22620:	4618      	mov	r0, r3
   22622:	f7ea fabf 	bl	cba4 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   22626:	462b      	mov	r3, r5
   22628:	f853 2f0e 	ldr.w	r2, [r3, #14]!
   2262c:	f8c4 200e 	str.w	r2, [r4, #14]
   22630:	889a      	ldrh	r2, [r3, #4]
   22632:	799b      	ldrb	r3, [r3, #6]
   22634:	8262      	strh	r2, [r4, #18]
   22636:	7523      	strb	r3, [r4, #20]
   22638:	e7d2      	b.n	225e0 <ble_hs_conn_addrs+0x48>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   2263a:	2300      	movs	r3, #0
   2263c:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   2263e:	f855 3f15 	ldr.w	r3, [r5, #21]!
   22642:	f8c4 3015 	str.w	r3, [r4, #21]
   22646:	88aa      	ldrh	r2, [r5, #4]
   22648:	79ab      	ldrb	r3, [r5, #6]
   2264a:	f8a4 2019 	strh.w	r2, [r4, #25]
   2264e:	76e3      	strb	r3, [r4, #27]
        break;
   22650:	e7dd      	b.n	2260e <ble_hs_conn_addrs+0x76>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   22652:	2301      	movs	r3, #1
   22654:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   22656:	f855 3f15 	ldr.w	r3, [r5, #21]!
   2265a:	f8c4 3015 	str.w	r3, [r4, #21]
   2265e:	88aa      	ldrh	r2, [r5, #4]
   22660:	79ab      	ldrb	r3, [r5, #6]
   22662:	f8a4 2019 	strh.w	r2, [r4, #25]
   22666:	76e3      	strb	r3, [r4, #27]
}
   22668:	e7d1      	b.n	2260e <ble_hs_conn_addrs+0x76>
   2266a:	bf00      	nop
   2266c:	0002e344 	.word	0x0002e344

00022670 <ble_hs_conn_find_by_addr>:
{
   22670:	b570      	push	{r4, r5, r6, lr}
   22672:	b088      	sub	sp, #32
    if (!addr) {
   22674:	4605      	mov	r5, r0
   22676:	2800      	cmp	r0, #0
   22678:	d033      	beq.n	226e2 <ble_hs_conn_find_by_addr+0x72>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2267a:	4b1c      	ldr	r3, [pc, #112]	; (226ec <ble_hs_conn_find_by_addr+0x7c>)
   2267c:	681c      	ldr	r4, [r3, #0]
   2267e:	e016      	b.n	226ae <ble_hs_conn_find_by_addr+0x3e>
        if (BLE_ADDR_IS_RPA(addr)) {
   22680:	79ab      	ldrb	r3, [r5, #6]
   22682:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22686:	2b40      	cmp	r3, #64	; 0x40
   22688:	d115      	bne.n	226b6 <ble_hs_conn_find_by_addr+0x46>
    type_diff = a->type - b->type;
   2268a:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   2268c:	1a18      	subs	r0, r3, r0
   2268e:	d105      	bne.n	2269c <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   22690:	2206      	movs	r2, #6
   22692:	1c69      	adds	r1, r5, #1
   22694:	f104 0016 	add.w	r0, r4, #22
   22698:	f7ec f96a 	bl	e970 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   2269c:	b930      	cbnz	r0, 226ac <ble_hs_conn_find_by_addr+0x3c>
   2269e:	e021      	b.n	226e4 <ble_hs_conn_find_by_addr+0x74>
   226a0:	2206      	movs	r2, #6
   226a2:	1c69      	adds	r1, r5, #1
   226a4:	a803      	add	r0, sp, #12
   226a6:	f7ec f963 	bl	e970 <memcmp>
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   226aa:	b1d8      	cbz	r0, 226e4 <ble_hs_conn_find_by_addr+0x74>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   226ac:	6824      	ldr	r4, [r4, #0]
   226ae:	b1cc      	cbz	r4, 226e4 <ble_hs_conn_find_by_addr+0x74>
        if (BLE_ADDR_IS_RPA(addr)) {
   226b0:	7828      	ldrb	r0, [r5, #0]
   226b2:	2801      	cmp	r0, #1
   226b4:	d0e4      	beq.n	22680 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   226b6:	79e6      	ldrb	r6, [r4, #7]
    if (type_diff != 0) {
   226b8:	1a30      	subs	r0, r6, r0
   226ba:	d105      	bne.n	226c8 <ble_hs_conn_find_by_addr+0x58>
    return memcmp(a->val, b->val, sizeof(a->val));
   226bc:	2206      	movs	r2, #6
   226be:	1c69      	adds	r1, r5, #1
   226c0:	f104 0008 	add.w	r0, r4, #8
   226c4:	f7ec f954 	bl	e970 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   226c8:	b160      	cbz	r0, 226e4 <ble_hs_conn_find_by_addr+0x74>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   226ca:	2e01      	cmp	r6, #1
   226cc:	d9ee      	bls.n	226ac <ble_hs_conn_find_by_addr+0x3c>
            ble_hs_conn_addrs(conn, &addrs);
   226ce:	a901      	add	r1, sp, #4
   226d0:	4620      	mov	r0, r4
   226d2:	f7ff ff61 	bl	22598 <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   226d6:	f89d 000b 	ldrb.w	r0, [sp, #11]
   226da:	782b      	ldrb	r3, [r5, #0]
    if (type_diff != 0) {
   226dc:	1ac0      	subs	r0, r0, r3
   226de:	d0df      	beq.n	226a0 <ble_hs_conn_find_by_addr+0x30>
   226e0:	e7e3      	b.n	226aa <ble_hs_conn_find_by_addr+0x3a>
        return NULL;
   226e2:	4604      	mov	r4, r0
}
   226e4:	4620      	mov	r0, r4
   226e6:	b008      	add	sp, #32
   226e8:	bd70      	pop	{r4, r5, r6, pc}
   226ea:	bf00      	nop
   226ec:	200034e0 	.word	0x200034e0

000226f0 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   226f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   226f2:	f7eb fe63 	bl	e3bc <os_time_get>
   226f6:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   226f8:	f7ff f8b8 	bl	2186c <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   226fc:	4b1a      	ldr	r3, [pc, #104]	; (22768 <ble_hs_conn_timer+0x78>)
   226fe:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   22700:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22704:	e00d      	b.n	22722 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   22706:	88a4      	ldrh	r4, [r4, #4]
                        break;
   22708:	e021      	b.n	2274e <ble_hs_conn_timer+0x5e>
   2270a:	462e      	mov	r6, r5
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   2270c:	4639      	mov	r1, r7
   2270e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   22712:	f7fa ffe2 	bl	1d6da <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   22716:	1e05      	subs	r5, r0, #0
   22718:	dd14      	ble.n	22744 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   2271a:	42ae      	cmp	r6, r5
   2271c:	dc00      	bgt.n	22720 <ble_hs_conn_timer+0x30>
   2271e:	4635      	mov	r5, r6
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   22720:	6824      	ldr	r4, [r4, #0]
   22722:	b194      	cbz	r4, 2274a <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   22724:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22728:	f013 0f02 	tst.w	r3, #2
   2272c:	d1f8      	bne.n	22720 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   2272e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22730:	2b00      	cmp	r3, #0
   22732:	d0ea      	beq.n	2270a <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   22734:	6b66      	ldr	r6, [r4, #52]	; 0x34
   22736:	1bf6      	subs	r6, r6, r7
                    if (time_diff <= 0) {
   22738:	2e00      	cmp	r6, #0
   2273a:	dde4      	ble.n	22706 <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   2273c:	42b5      	cmp	r5, r6
   2273e:	dce5      	bgt.n	2270c <ble_hs_conn_timer+0x1c>
   22740:	462e      	mov	r6, r5
   22742:	e7e3      	b.n	2270c <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   22744:	88a4      	ldrh	r4, [r4, #4]
                    break;
   22746:	4635      	mov	r5, r6
   22748:	e001      	b.n	2274e <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2274a:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   2274e:	f7ff f891 	bl	21874 <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   22752:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22756:	429c      	cmp	r4, r3
   22758:	d101      	bne.n	2275e <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   2275a:	4628      	mov	r0, r5
   2275c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   2275e:	2113      	movs	r1, #19
   22760:	4620      	mov	r0, r4
   22762:	f7fc fb8d 	bl	1ee80 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   22766:	e7c4      	b.n	226f2 <ble_hs_conn_timer+0x2>
   22768:	200034e0 	.word	0x200034e0

0002276c <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   2276c:	b500      	push	{lr}
   2276e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   22770:	4b07      	ldr	r3, [pc, #28]	; (22790 <ble_hs_conn_init+0x24>)
   22772:	9300      	str	r3, [sp, #0]
   22774:	4b07      	ldr	r3, [pc, #28]	; (22794 <ble_hs_conn_init+0x28>)
   22776:	2264      	movs	r2, #100	; 0x64
   22778:	2101      	movs	r1, #1
   2277a:	4807      	ldr	r0, [pc, #28]	; (22798 <ble_hs_conn_init+0x2c>)
   2277c:	f7eb fa20 	bl	dbc0 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   22780:	b920      	cbnz	r0, 2278c <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   22782:	4b06      	ldr	r3, [pc, #24]	; (2279c <ble_hs_conn_init+0x30>)
   22784:	6018      	str	r0, [r3, #0]

    return 0;
}
   22786:	b003      	add	sp, #12
   22788:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   2278c:	200b      	movs	r0, #11
   2278e:	e7fa      	b.n	22786 <ble_hs_conn_init+0x1a>
   22790:	0002e330 	.word	0x0002e330
   22794:	20003460 	.word	0x20003460
   22798:	200034c4 	.word	0x200034c4
   2279c:	200034e0 	.word	0x200034e0

000227a0 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   227a0:	4770      	bx	lr

000227a2 <ble_hs_flow_track_data_mbuf>:
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   227a2:	4770      	bx	lr

000227a4 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   227a4:	2000      	movs	r0, #0
   227a6:	4770      	bx	lr

000227a8 <ble_hs_hci_rx_cmd_complete>:
}

static int
ble_hs_hci_rx_cmd_complete(const void *data, int len,
                           struct ble_hs_hci_ack *out_ack)
{
   227a8:	4603      	mov	r3, r0
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   227aa:	2903      	cmp	r1, #3
   227ac:	d809      	bhi.n	227c2 <ble_hs_hci_rx_cmd_complete+0x1a>
        if (len < sizeof(*nop)) {
   227ae:	2902      	cmp	r1, #2
   227b0:	d91b      	bls.n	227ea <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   227b2:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   227b6:	b9d3      	cbnz	r3, 227ee <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   227b8:	2000      	movs	r0, #0
   227ba:	6010      	str	r0, [r2, #0]
        out_ack->bha_params = NULL;
   227bc:	6050      	str	r0, [r2, #4]
        out_ack->bha_params_len = 0;
   227be:	6090      	str	r0, [r2, #8]
        return 0;
   227c0:	4770      	bx	lr
    }

    opcode = le16toh(ev->opcode);
   227c2:	f8b0 0001 	ldrh.w	r0, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   227c6:	8190      	strh	r0, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   227c8:	78d8      	ldrb	r0, [r3, #3]
   227ca:	b110      	cbz	r0, 227d2 <ble_hs_hci_rx_cmd_complete+0x2a>
   227cc:	f500 7000 	add.w	r0, r0, #512	; 0x200
   227d0:	e000      	b.n	227d4 <ble_hs_hci_rx_cmd_complete+0x2c>
   227d2:	2000      	movs	r0, #0
   227d4:	6010      	str	r0, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   227d6:	1f08      	subs	r0, r1, #4
   227d8:	6090      	str	r0, [r2, #8]
    if (out_ack->bha_params_len) {
   227da:	b118      	cbz	r0, 227e4 <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_params = ev->return_params;
   227dc:	3304      	adds	r3, #4
   227de:	6053      	str	r3, [r2, #4]
    } else {
        out_ack->bha_params = NULL;
    }

    return 0;
   227e0:	2000      	movs	r0, #0
   227e2:	4770      	bx	lr
        out_ack->bha_params = NULL;
   227e4:	2300      	movs	r3, #0
   227e6:	6053      	str	r3, [r2, #4]
   227e8:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   227ea:	200c      	movs	r0, #12
   227ec:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   227ee:	200c      	movs	r0, #12
}
   227f0:	4770      	bx	lr

000227f2 <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   227f2:	2904      	cmp	r1, #4
   227f4:	d10d      	bne.n	22812 <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   227f6:	8843      	ldrh	r3, [r0, #2]
   227f8:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   227fa:	2300      	movs	r3, #0
   227fc:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   227fe:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   22800:	7803      	ldrb	r3, [r0, #0]
   22802:	b123      	cbz	r3, 2280e <ble_hs_hci_rx_cmd_status+0x1c>
   22804:	f503 7300 	add.w	r3, r3, #512	; 0x200
   22808:	6013      	str	r3, [r2, #0]

    return 0;
   2280a:	2000      	movs	r0, #0
   2280c:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   2280e:	2300      	movs	r3, #0
   22810:	e7fa      	b.n	22808 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   22812:	200c      	movs	r0, #12
}
   22814:	4770      	bx	lr
	...

00022818 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   22818:	4b01      	ldr	r3, [pc, #4]	; (22820 <ble_hs_hci_max_acl_payload_sz+0x8>)
   2281a:	8818      	ldrh	r0, [r3, #0]
   2281c:	4770      	bx	lr
   2281e:	bf00      	nop
   22820:	200034ea 	.word	0x200034ea

00022824 <ble_hs_hci_lock>:
{
   22824:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   22826:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2282a:	4802      	ldr	r0, [pc, #8]	; (22834 <ble_hs_hci_lock+0x10>)
   2282c:	f7eb ffc4 	bl	e7b8 <os_mutex_pend>
}
   22830:	bd08      	pop	{r3, pc}
   22832:	bf00      	nop
   22834:	20003640 	.word	0x20003640

00022838 <ble_hs_hci_unlock>:
{
   22838:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2283a:	4802      	ldr	r0, [pc, #8]	; (22844 <ble_hs_hci_unlock+0xc>)
   2283c:	f7eb ff5c 	bl	e6f8 <os_mutex_release>
}
   22840:	bd08      	pop	{r3, pc}
   22842:	bf00      	nop
   22844:	20003640 	.word	0x20003640

00022848 <ble_hs_hci_wait_for_ack>:
{
   22848:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   2284a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2284e:	4807      	ldr	r0, [pc, #28]	; (2286c <ble_hs_hci_wait_for_ack+0x24>)
   22850:	f008 faa8 	bl	2ada4 <os_sem_pend>
    switch (rc) {
   22854:	b140      	cbz	r0, 22868 <ble_hs_hci_wait_for_ack+0x20>
   22856:	2806      	cmp	r0, #6
   22858:	d105      	bne.n	22866 <ble_hs_hci_wait_for_ack+0x1e>
        STATS_INC(ble_hs_stats, hci_timeout);
   2285a:	4a05      	ldr	r2, [pc, #20]	; (22870 <ble_hs_hci_wait_for_ack+0x28>)
   2285c:	6a53      	ldr	r3, [r2, #36]	; 0x24
   2285e:	3301      	adds	r3, #1
   22860:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   22862:	2013      	movs	r0, #19
        break;
   22864:	e000      	b.n	22868 <ble_hs_hci_wait_for_ack+0x20>
        rc = BLE_HS_EOS;
   22866:	200b      	movs	r0, #11
}
   22868:	bd08      	pop	{r3, pc}
   2286a:	bf00      	nop
   2286c:	2000364c 	.word	0x2000364c
   22870:	20003404 	.word	0x20003404

00022874 <ble_hs_hci_process_ack>:
{
   22874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22878:	4607      	mov	r7, r0
   2287a:	460e      	mov	r6, r1
   2287c:	4690      	mov	r8, r2
   2287e:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   22880:	4a1e      	ldr	r2, [pc, #120]	; (228fc <ble_hs_hci_process_ack+0x88>)
   22882:	6993      	ldr	r3, [r2, #24]
   22884:	3301      	adds	r3, #1
   22886:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   22888:	2300      	movs	r3, #0
   2288a:	6023      	str	r3, [r4, #0]
   2288c:	6063      	str	r3, [r4, #4]
   2288e:	60a3      	str	r3, [r4, #8]
   22890:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   22892:	4b1b      	ldr	r3, [pc, #108]	; (22900 <ble_hs_hci_process_ack+0x8c>)
   22894:	6818      	ldr	r0, [r3, #0]
   22896:	7803      	ldrb	r3, [r0, #0]
   22898:	2b0e      	cmp	r3, #14
   2289a:	d00a      	beq.n	228b2 <ble_hs_hci_process_ack+0x3e>
   2289c:	2b0f      	cmp	r3, #15
   2289e:	d01e      	beq.n	228de <ble_hs_hci_process_ack+0x6a>
   228a0:	2511      	movs	r5, #17
    if (rc != 0) {
   228a2:	b11d      	cbz	r5, 228ac <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   228a4:	4a15      	ldr	r2, [pc, #84]	; (228fc <ble_hs_hci_process_ack+0x88>)
   228a6:	69d3      	ldr	r3, [r2, #28]
   228a8:	3301      	adds	r3, #1
   228aa:	61d3      	str	r3, [r2, #28]
}
   228ac:	4628      	mov	r0, r5
   228ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   228b2:	4622      	mov	r2, r4
   228b4:	7841      	ldrb	r1, [r0, #1]
   228b6:	3002      	adds	r0, #2
   228b8:	f7ff ff76 	bl	227a8 <ble_hs_hci_rx_cmd_complete>
   228bc:	4605      	mov	r5, r0
    if (rc == 0) {
   228be:	2d00      	cmp	r5, #0
   228c0:	d1ef      	bne.n	228a2 <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   228c2:	b19e      	cbz	r6, 228ec <ble_hs_hci_process_ack+0x78>
   228c4:	6861      	ldr	r1, [r4, #4]
   228c6:	b189      	cbz	r1, 228ec <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   228c8:	68a3      	ldr	r3, [r4, #8]
   228ca:	4543      	cmp	r3, r8
   228cc:	dd02      	ble.n	228d4 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   228ce:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   228d2:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   228d4:	68a2      	ldr	r2, [r4, #8]
   228d6:	4630      	mov	r0, r6
   228d8:	f7ec f86e 	bl	e9b8 <memcpy>
   228dc:	e008      	b.n	228f0 <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   228de:	4622      	mov	r2, r4
   228e0:	7841      	ldrb	r1, [r0, #1]
   228e2:	3002      	adds	r0, #2
   228e4:	f7ff ff85 	bl	227f2 <ble_hs_hci_rx_cmd_status>
   228e8:	4605      	mov	r5, r0
        break;
   228ea:	e7e8      	b.n	228be <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   228ec:	2300      	movs	r3, #0
   228ee:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   228f0:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   228f2:	89a3      	ldrh	r3, [r4, #12]
   228f4:	42bb      	cmp	r3, r7
   228f6:	d0d4      	beq.n	228a2 <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   228f8:	250c      	movs	r5, #12
   228fa:	e7d3      	b.n	228a4 <ble_hs_hci_process_ack+0x30>
   228fc:	20003404 	.word	0x20003404
   22900:	200034e4 	.word	0x200034e4

00022904 <ble_hs_hci_rx_ack>:
{
   22904:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   22906:	4b06      	ldr	r3, [pc, #24]	; (22920 <ble_hs_hci_rx_ack+0x1c>)
   22908:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   2290a:	b92b      	cbnz	r3, 22918 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   2290c:	4b05      	ldr	r3, [pc, #20]	; (22924 <ble_hs_hci_rx_ack+0x20>)
   2290e:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   22910:	4803      	ldr	r0, [pc, #12]	; (22920 <ble_hs_hci_rx_ack+0x1c>)
   22912:	f008 fa15 	bl	2ad40 <os_sem_release>
}
   22916:	bd08      	pop	{r3, pc}
        ble_transport_free(ack_ev);
   22918:	f004 fd00 	bl	2731c <ble_transport_free>
        return;
   2291c:	e7fb      	b.n	22916 <ble_hs_hci_rx_ack+0x12>
   2291e:	bf00      	nop
   22920:	2000364c 	.word	0x2000364c
   22924:	200034e4 	.word	0x200034e4

00022928 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   22928:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, sizeof(struct ble_mbuf_hdr));
   2292a:	2110      	movs	r1, #16
   2292c:	4805      	ldr	r0, [pc, #20]	; (22944 <ble_hs_hci_frag_alloc+0x1c>)
   2292e:	f7ea fd7e 	bl	d42e <os_mbuf_get_pkthdr>
#else
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
#endif
    if (om != NULL) {
   22932:	b118      	cbz	r0, 2293c <ble_hs_hci_frag_alloc+0x14>
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   22934:	6803      	ldr	r3, [r0, #0]
   22936:	3304      	adds	r3, #4
   22938:	6003      	str	r3, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   2293a:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   2293c:	f000 fd71 	bl	23422 <ble_hs_mbuf_acl_pkt>
    if (om != NULL) {
   22940:	e7fb      	b.n	2293a <ble_hs_hci_frag_alloc+0x12>
   22942:	bf00      	nop
   22944:	20003618 	.word	0x20003618

00022948 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   22948:	b510      	push	{r4, lr}
   2294a:	b082      	sub	sp, #8
   2294c:	4604      	mov	r4, r0
   2294e:	4608      	mov	r0, r1
   22950:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   22952:	2200      	movs	r2, #0
   22954:	f000 fbd8 	bl	23108 <ble_hs_hci_util_handle_pb_bc_join>
   22958:	4601      	mov	r1, r0
   2295a:	a801      	add	r0, sp, #4
   2295c:	f008 f91c 	bl	2ab98 <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   22960:	8a21      	ldrh	r1, [r4, #16]
   22962:	f10d 0006 	add.w	r0, sp, #6
   22966:	f008 f917 	bl	2ab98 <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   2296a:	2104      	movs	r1, #4
   2296c:	4620      	mov	r0, r4
   2296e:	f7ea fee6 	bl	d73e <os_mbuf_prepend>
    if (om2 == NULL) {
   22972:	4604      	mov	r4, r0
   22974:	b158      	cbz	r0, 2298e <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   22976:	2104      	movs	r1, #4
   22978:	f7ea ffd7 	bl	d92a <os_mbuf_pullup>
    if (om == NULL) {
   2297c:	4604      	mov	r4, r0
   2297e:	b130      	cbz	r0, 2298e <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   22980:	6803      	ldr	r3, [r0, #0]
   22982:	9a01      	ldr	r2, [sp, #4]
   22984:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   22986:	f10d 0006 	add.w	r0, sp, #6
   2298a:	f008 f926 	bl	2abda <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   2298e:	4620      	mov	r0, r4
   22990:	b002      	add	sp, #8
   22992:	bd10      	pop	{r4, pc}

00022994 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   22994:	b130      	cbz	r0, 229a4 <ble_hs_hci_set_buf_sz+0x10>
   22996:	b139      	cbz	r1, 229a8 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   22998:	4a04      	ldr	r2, [pc, #16]	; (229ac <ble_hs_hci_set_buf_sz+0x18>)
   2299a:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   2299c:	4b04      	ldr	r3, [pc, #16]	; (229b0 <ble_hs_hci_set_buf_sz+0x1c>)
   2299e:	8019      	strh	r1, [r3, #0]
    return 0;
   229a0:	2000      	movs	r0, #0
   229a2:	4770      	bx	lr
        return BLE_HS_EINVAL;
   229a4:	2003      	movs	r0, #3
   229a6:	4770      	bx	lr
   229a8:	2003      	movs	r0, #3
}
   229aa:	4770      	bx	lr
   229ac:	200034ea 	.word	0x200034ea
   229b0:	200034e8 	.word	0x200034e8

000229b4 <ble_hs_hci_add_avail_pkts>:
{
   229b4:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   229b6:	4b07      	ldr	r3, [pc, #28]	; (229d4 <ble_hs_hci_add_avail_pkts+0x20>)
   229b8:	881b      	ldrh	r3, [r3, #0]
   229ba:	181a      	adds	r2, r3, r0
   229bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   229c0:	da03      	bge.n	229ca <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   229c2:	4418      	add	r0, r3
   229c4:	4b03      	ldr	r3, [pc, #12]	; (229d4 <ble_hs_hci_add_avail_pkts+0x20>)
   229c6:	8018      	strh	r0, [r3, #0]
}
   229c8:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   229ca:	200c      	movs	r0, #12
   229cc:	f7ff f862 	bl	21a94 <ble_hs_sched_reset>
   229d0:	e7fa      	b.n	229c8 <ble_hs_hci_add_avail_pkts+0x14>
   229d2:	bf00      	nop
   229d4:	200034e8 	.word	0x200034e8

000229d8 <ble_hs_hci_cmd_tx>:
{
   229d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   229dc:	b084      	sub	sp, #16
   229de:	4604      	mov	r4, r0
   229e0:	460d      	mov	r5, r1
   229e2:	4616      	mov	r6, r2
   229e4:	461f      	mov	r7, r3
   229e6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   229ea:	f7ff ff1b 	bl	22824 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   229ee:	4632      	mov	r2, r6
   229f0:	4629      	mov	r1, r5
   229f2:	4620      	mov	r0, r4
   229f4:	f000 f908 	bl	22c08 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   229f8:	4605      	mov	r5, r0
   229fa:	b168      	cbz	r0, 22a18 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   229fc:	4b14      	ldr	r3, [pc, #80]	; (22a50 <ble_hs_hci_cmd_tx+0x78>)
   229fe:	6818      	ldr	r0, [r3, #0]
   22a00:	b120      	cbz	r0, 22a0c <ble_hs_hci_cmd_tx+0x34>
        ble_transport_free((uint8_t *) ble_hs_hci_ack);
   22a02:	f004 fc8b 	bl	2731c <ble_transport_free>
        ble_hs_hci_ack = NULL;
   22a06:	4b12      	ldr	r3, [pc, #72]	; (22a50 <ble_hs_hci_cmd_tx+0x78>)
   22a08:	2200      	movs	r2, #0
   22a0a:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   22a0c:	f7ff ff14 	bl	22838 <ble_hs_hci_unlock>
}
   22a10:	4628      	mov	r0, r5
   22a12:	b004      	add	sp, #16
   22a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   22a18:	f7ff ff16 	bl	22848 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   22a1c:	4605      	mov	r5, r0
   22a1e:	b988      	cbnz	r0, 22a44 <ble_hs_hci_cmd_tx+0x6c>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   22a20:	466b      	mov	r3, sp
   22a22:	4642      	mov	r2, r8
   22a24:	4639      	mov	r1, r7
   22a26:	4620      	mov	r0, r4
   22a28:	f7ff ff24 	bl	22874 <ble_hs_hci_process_ack>
    if (rc != 0) {
   22a2c:	4605      	mov	r5, r0
   22a2e:	b960      	cbnz	r0, 22a4a <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   22a30:	9d00      	ldr	r5, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   22a32:	2d00      	cmp	r5, #0
   22a34:	d1e2      	bne.n	229fc <ble_hs_hci_cmd_tx+0x24>
   22a36:	9b02      	ldr	r3, [sp, #8]
   22a38:	4543      	cmp	r3, r8
   22a3a:	d0df      	beq.n	229fc <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   22a3c:	4628      	mov	r0, r5
   22a3e:	f7ff f829 	bl	21a94 <ble_hs_sched_reset>
        goto done;
   22a42:	e7db      	b.n	229fc <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   22a44:	f7ff f826 	bl	21a94 <ble_hs_sched_reset>
        goto done;
   22a48:	e7d8      	b.n	229fc <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   22a4a:	f7ff f823 	bl	21a94 <ble_hs_sched_reset>
        goto done;
   22a4e:	e7d5      	b.n	229fc <ble_hs_hci_cmd_tx+0x24>
   22a50:	200034e4 	.word	0x200034e4

00022a54 <ble_hs_hci_rx_evt>:
{
   22a54:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   22a56:	7803      	ldrb	r3, [r0, #0]
   22a58:	2b0e      	cmp	r3, #14
   22a5a:	d005      	beq.n	22a68 <ble_hs_hci_rx_evt+0x14>
   22a5c:	2b0f      	cmp	r3, #15
   22a5e:	d00d      	beq.n	22a7c <ble_hs_hci_rx_evt+0x28>
        ble_hs_enqueue_hci_event(hci_ev);
   22a60:	f7fe fffa 	bl	21a58 <ble_hs_enqueue_hci_event>
}
   22a64:	2000      	movs	r0, #0
   22a66:	bd08      	pop	{r3, pc}
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   22a68:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   22a6c:	fab3 f383 	clz	r3, r3
   22a70:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   22a72:	2b00      	cmp	r3, #0
   22a74:	d1f4      	bne.n	22a60 <ble_hs_hci_rx_evt+0xc>
        ble_hs_hci_rx_ack(hci_ev);
   22a76:	f7ff ff45 	bl	22904 <ble_hs_hci_rx_ack>
   22a7a:	e7f3      	b.n	22a64 <ble_hs_hci_rx_evt+0x10>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   22a7c:	8883      	ldrh	r3, [r0, #4]
   22a7e:	fab3 f383 	clz	r3, r3
   22a82:	095b      	lsrs	r3, r3, #5
        break;
   22a84:	e7f5      	b.n	22a72 <ble_hs_hci_rx_evt+0x1e>
	...

00022a88 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   22a88:	b570      	push	{r4, r5, r6, lr}
   22a8a:	b082      	sub	sp, #8
   22a8c:	4604      	mov	r4, r0
   22a8e:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   22a90:	680b      	ldr	r3, [r1, #0]
   22a92:	9301      	str	r3, [sp, #4]
    *om = NULL;
   22a94:	2300      	movs	r3, #0
   22a96:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   22a98:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
   22a9c:	f016 0604 	ands.w	r6, r6, #4
   22aa0:	d000      	beq.n	22aa4 <ble_hs_hci_acl_tx_now+0x1c>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   22aa2:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   22aa4:	9b01      	ldr	r3, [sp, #4]
   22aa6:	b35b      	cbz	r3, 22b00 <ble_hs_hci_acl_tx_now+0x78>
   22aa8:	4a22      	ldr	r2, [pc, #136]	; (22b34 <ble_hs_hci_acl_tx_now+0xac>)
   22aaa:	8812      	ldrh	r2, [r2, #0]
   22aac:	b342      	cbz	r2, 22b00 <ble_hs_hci_acl_tx_now+0x78>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   22aae:	f7ff feb3 	bl	22818 <ble_hs_hci_max_acl_payload_sz>
   22ab2:	4601      	mov	r1, r0
   22ab4:	2300      	movs	r3, #0
   22ab6:	4a20      	ldr	r2, [pc, #128]	; (22b38 <ble_hs_hci_acl_tx_now+0xb0>)
   22ab8:	a801      	add	r0, sp, #4
   22aba:	f7ef fb6f 	bl	1219c <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   22abe:	b1d8      	cbz	r0, 22af8 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   22ac0:	4632      	mov	r2, r6
   22ac2:	88a1      	ldrh	r1, [r4, #4]
   22ac4:	f7ff ff40 	bl	22948 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   22ac8:	4606      	mov	r6, r0
   22aca:	b328      	cbz	r0, 22b18 <ble_hs_hci_acl_tx_now+0x90>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   22acc:	f000 fc7c 	bl	233c8 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   22ad0:	4630      	mov	r0, r6
   22ad2:	f7ff f842 	bl	21b5a <ble_hs_tx_data>
        if (rc != 0) {
   22ad6:	4606      	mov	r6, r0
   22ad8:	b9f8      	cbnz	r0, 22b1a <ble_hs_hci_acl_tx_now+0x92>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   22ada:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22ade:	f043 0304 	orr.w	r3, r3, #4
   22ae2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   22ae6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22ae8:	3301      	adds	r3, #1
   22aea:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   22aec:	4a11      	ldr	r2, [pc, #68]	; (22b34 <ble_hs_hci_acl_tx_now+0xac>)
   22aee:	8813      	ldrh	r3, [r2, #0]
   22af0:	3b01      	subs	r3, #1
   22af2:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   22af4:	2601      	movs	r6, #1
   22af6:	e7d5      	b.n	22aa4 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   22af8:	9b01      	ldr	r3, [sp, #4]
   22afa:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   22afc:	2601      	movs	r6, #1
   22afe:	e015      	b.n	22b2c <ble_hs_hci_acl_tx_now+0xa4>
    }

    if (txom != NULL) {
   22b00:	b113      	cbz	r3, 22b08 <ble_hs_hci_acl_tx_now+0x80>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   22b02:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   22b04:	2601      	movs	r6, #1
   22b06:	e011      	b.n	22b2c <ble_hs_hci_acl_tx_now+0xa4>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   22b08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22b0c:	f023 0304 	bic.w	r3, r3, #4
   22b10:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   22b14:	2600      	movs	r6, #0
   22b16:	e009      	b.n	22b2c <ble_hs_hci_acl_tx_now+0xa4>
            rc = BLE_HS_ENOMEM;
   22b18:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   22b1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   22b1e:	f023 0304 	bic.w	r3, r3, #4
   22b22:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   22b26:	9801      	ldr	r0, [sp, #4]
   22b28:	f7ea fca4 	bl	d474 <os_mbuf_free_chain>
    return rc;
}
   22b2c:	4630      	mov	r0, r6
   22b2e:	b002      	add	sp, #8
   22b30:	bd70      	pop	{r4, r5, r6, pc}
   22b32:	bf00      	nop
   22b34:	200034e8 	.word	0x200034e8
   22b38:	00022929 	.word	0x00022929

00022b3c <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   22b3c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   22b3e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   22b40:	b10b      	cbz	r3, 22b46 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   22b42:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   22b44:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   22b46:	f7ff ff9f 	bl	22a88 <ble_hs_hci_acl_tx_now>
   22b4a:	e7fb      	b.n	22b44 <ble_hs_hci_acl_tx+0x8>

00022b4c <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   22b4c:	4b01      	ldr	r3, [pc, #4]	; (22b54 <ble_hs_hci_set_le_supported_feat+0x8>)
   22b4e:	6018      	str	r0, [r3, #0]
}
   22b50:	4770      	bx	lr
   22b52:	bf00      	nop
   22b54:	20003654 	.word	0x20003654

00022b58 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   22b58:	4b01      	ldr	r3, [pc, #4]	; (22b60 <ble_hs_hci_set_hci_version+0x8>)
   22b5a:	7018      	strb	r0, [r3, #0]
}
   22b5c:	4770      	bx	lr
   22b5e:	bf00      	nop
   22b60:	20003658 	.word	0x20003658

00022b64 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   22b64:	4b01      	ldr	r3, [pc, #4]	; (22b6c <ble_hs_hci_get_hci_version+0x8>)
   22b66:	7818      	ldrb	r0, [r3, #0]
   22b68:	4770      	bx	lr
   22b6a:	bf00      	nop
   22b6c:	20003658 	.word	0x20003658

00022b70 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   22b70:	b500      	push	{lr}
   22b72:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   22b74:	2100      	movs	r1, #0
   22b76:	480a      	ldr	r0, [pc, #40]	; (22ba0 <ble_hs_hci_init+0x30>)
   22b78:	f008 f8da 	bl	2ad30 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   22b7c:	4809      	ldr	r0, [pc, #36]	; (22ba4 <ble_hs_hci_init+0x34>)
   22b7e:	f7eb fdb1 	bl	e6e4 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   22b82:	4b09      	ldr	r3, [pc, #36]	; (22ba8 <ble_hs_hci_init+0x38>)
   22b84:	9301      	str	r3, [sp, #4]
   22b86:	f44f 7396 	mov.w	r3, #300	; 0x12c
   22b8a:	9300      	str	r3, [sp, #0]
   22b8c:	2301      	movs	r3, #1
   22b8e:	4a07      	ldr	r2, [pc, #28]	; (22bac <ble_hs_hci_init+0x3c>)
   22b90:	4907      	ldr	r1, [pc, #28]	; (22bb0 <ble_hs_hci_init+0x40>)
   22b92:	4808      	ldr	r0, [pc, #32]	; (22bb4 <ble_hs_hci_init+0x44>)
   22b94:	f7ef faea 	bl	1216c <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   22b98:	b003      	add	sp, #12
   22b9a:	f85d fb04 	ldr.w	pc, [sp], #4
   22b9e:	bf00      	nop
   22ba0:	2000364c 	.word	0x2000364c
   22ba4:	20003640 	.word	0x20003640
   22ba8:	0002e34c 	.word	0x0002e34c
   22bac:	20003618 	.word	0x20003618
   22bb0:	20003624 	.word	0x20003624
   22bb4:	200034ec 	.word	0x200034ec

00022bb8 <ble_hs_hci_cmd_transport>:
#include "nimble/hci_common.h"
#include "ble_hs_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   22bb8:	b508      	push	{r3, lr}
    return ble_transport_to_ll_cmd_impl(buf);
   22bba:	f7f2 f825 	bl	14c08 <ble_transport_to_ll_cmd_impl>
    int rc;

    rc = ble_transport_to_ll_cmd(cmd);
    switch (rc) {
   22bbe:	4603      	mov	r3, r0
   22bc0:	b110      	cbz	r0, 22bc8 <ble_hs_hci_cmd_transport+0x10>
   22bc2:	2807      	cmp	r0, #7
   22bc4:	d102      	bne.n	22bcc <ble_hs_hci_cmd_transport+0x14>
    case 0:
        return 0;

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;
   22bc6:	2314      	movs	r3, #20

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   22bc8:	4618      	mov	r0, r3
   22bca:	bd08      	pop	{r3, pc}
        return BLE_HS_EUNKNOWN;
   22bcc:	2311      	movs	r3, #17
   22bce:	e7fb      	b.n	22bc8 <ble_hs_hci_cmd_transport+0x10>

00022bd0 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   22bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22bd2:	4606      	mov	r6, r0
   22bd4:	460d      	mov	r5, r1
   22bd6:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = ble_transport_alloc_cmd();
   22bd8:	f004 fb84 	bl	272e4 <ble_transport_alloc_cmd>
   22bdc:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   22bde:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   22be0:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   22be2:	b945      	cbnz	r5, 22bf6 <ble_hs_hci_cmd_send+0x26>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   22be4:	4620      	mov	r0, r4
   22be6:	f7ff ffe7 	bl	22bb8 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   22bea:	b918      	cbnz	r0, 22bf4 <ble_hs_hci_cmd_send+0x24>
        STATS_INC(ble_hs_stats, hci_cmd);
   22bec:	4a05      	ldr	r2, [pc, #20]	; (22c04 <ble_hs_hci_cmd_send+0x34>)
   22bee:	6953      	ldr	r3, [r2, #20]
   22bf0:	3301      	adds	r3, #1
   22bf2:	6153      	str	r3, [r2, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   22bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   22bf6:	462a      	mov	r2, r5
   22bf8:	4639      	mov	r1, r7
   22bfa:	3003      	adds	r0, #3
   22bfc:	f7eb fedc 	bl	e9b8 <memcpy>
   22c00:	e7f0      	b.n	22be4 <ble_hs_hci_cmd_send+0x14>
   22c02:	bf00      	nop
   22c04:	20003404 	.word	0x20003404

00022c08 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   22c08:	b570      	push	{r4, r5, r6, lr}
   22c0a:	4604      	mov	r4, r0
   22c0c:	460e      	mov	r6, r1
   22c0e:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   22c10:	4b0a      	ldr	r3, [pc, #40]	; (22c3c <ble_hs_hci_cmd_send_buf+0x34>)
   22c12:	781b      	ldrb	r3, [r3, #0]
   22c14:	2b01      	cmp	r3, #1
   22c16:	d006      	beq.n	22c26 <ble_hs_hci_cmd_send_buf+0x1e>
   22c18:	2b02      	cmp	r3, #2
   22c1a:	d007      	beq.n	22c2c <ble_hs_hci_cmd_send_buf+0x24>
   22c1c:	b10b      	cbz	r3, 22c22 <ble_hs_hci_cmd_send_buf+0x1a>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   22c1e:	2011      	movs	r0, #17
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
}
   22c20:	bd70      	pop	{r4, r5, r6, pc}
    switch (ble_hs_sync_state) {
   22c22:	2016      	movs	r0, #22
   22c24:	e7fc      	b.n	22c20 <ble_hs_hci_cmd_send_buf+0x18>
        if (!ble_hs_is_parent_task()) {
   22c26:	f7fe fdfd 	bl	21824 <ble_hs_is_parent_task>
   22c2a:	b128      	cbz	r0, 22c38 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   22c2c:	4632      	mov	r2, r6
   22c2e:	4629      	mov	r1, r5
   22c30:	4620      	mov	r0, r4
   22c32:	f7ff ffcd 	bl	22bd0 <ble_hs_hci_cmd_send>
   22c36:	e7f3      	b.n	22c20 <ble_hs_hci_cmd_send_buf+0x18>
            return BLE_HS_ENOTSYNCED;
   22c38:	2016      	movs	r0, #22
   22c3a:	e7f1      	b.n	22c20 <ble_hs_hci_cmd_send_buf+0x18>
   22c3c:	2000343c 	.word	0x2000343c

00022c40 <ble_hs_hci_evt_dispatch_find>:
#define BLE_HS_HCI_EVT_LE_DISPATCH_SZ \
    (sizeof ble_hs_hci_evt_le_dispatch / sizeof ble_hs_hci_evt_le_dispatch[0])

static const struct ble_hs_hci_evt_dispatch_entry *
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
   22c40:	4601      	mov	r1, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   22c42:	2300      	movs	r3, #0
   22c44:	2b05      	cmp	r3, #5
   22c46:	d808      	bhi.n	22c5a <ble_hs_hci_evt_dispatch_find+0x1a>
        entry = ble_hs_hci_evt_dispatch + i;
   22c48:	4a05      	ldr	r2, [pc, #20]	; (22c60 <ble_hs_hci_evt_dispatch_find+0x20>)
   22c4a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   22c4e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   22c52:	428a      	cmp	r2, r1
   22c54:	d002      	beq.n	22c5c <ble_hs_hci_evt_dispatch_find+0x1c>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   22c56:	3301      	adds	r3, #1
   22c58:	e7f4      	b.n	22c44 <ble_hs_hci_evt_dispatch_find+0x4>
            return entry;
        }
    }

    return NULL;
   22c5a:	2000      	movs	r0, #0
}
   22c5c:	4770      	bx	lr
   22c5e:	bf00      	nop
   22c60:	0002e35c 	.word	0x0002e35c

00022c64 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   22c64:	2818      	cmp	r0, #24
   22c66:	d803      	bhi.n	22c70 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   22c68:	4b02      	ldr	r3, [pc, #8]	; (22c74 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   22c6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   22c6e:	4770      	bx	lr
        return NULL;
   22c70:	2000      	movs	r0, #0
}
   22c72:	4770      	bx	lr
   22c74:	0002e38c 	.word	0x0002e38c

00022c78 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   22c78:	b16a      	cbz	r2, 22c96 <ble_hs_hci_evt_le_meta+0x1e>
{
   22c7a:	b570      	push	{r4, r5, r6, lr}
   22c7c:	460c      	mov	r4, r1
   22c7e:	4616      	mov	r6, r2
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   22c80:	780d      	ldrb	r5, [r1, #0]
   22c82:	4628      	mov	r0, r5
   22c84:	f7ff ffee 	bl	22c64 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   22c88:	4603      	mov	r3, r0
   22c8a:	b130      	cbz	r0, 22c9a <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   22c8c:	4632      	mov	r2, r6
   22c8e:	4621      	mov	r1, r4
   22c90:	4628      	mov	r0, r5
   22c92:	4798      	blx	r3
    }

    return 0;
}
   22c94:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   22c96:	200c      	movs	r0, #12
}
   22c98:	4770      	bx	lr
    return 0;
   22c9a:	2000      	movs	r0, #0
   22c9c:	e7fa      	b.n	22c94 <ble_hs_hci_evt_le_meta+0x1c>

00022c9e <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   22c9e:	2901      	cmp	r1, #1
   22ca0:	d91a      	bls.n	22cd8 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   22ca2:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   22ca4:	3902      	subs	r1, #2
    data += sizeof(*ev);
   22ca6:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   22ca8:	7840      	ldrb	r0, [r0, #1]
   22caa:	1e43      	subs	r3, r0, #1
   22cac:	b2db      	uxtb	r3, r3
   22cae:	2b18      	cmp	r3, #24
   22cb0:	d814      	bhi.n	22cdc <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   22cb2:	2200      	movs	r2, #0
   22cb4:	e003      	b.n	22cbe <ble_hs_hci_evt_le_adv_rpt_first_pass+0x20>

        if (rpt->data_len > len) {
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   22cb6:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   22cb8:	3305      	adds	r3, #5
   22cba:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   22cbc:	3201      	adds	r2, #1
   22cbe:	4290      	cmp	r0, r2
   22cc0:	dd07      	ble.n	22cd2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
        if (len < sizeof(*rpt) + 1) {
   22cc2:	2909      	cmp	r1, #9
   22cc4:	d90c      	bls.n	22ce0 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x42>
        len -= sizeof(*rpt) + 1;
   22cc6:	390a      	subs	r1, #10
        if (rpt->data_len > len) {
   22cc8:	7a23      	ldrb	r3, [r4, #8]
   22cca:	428b      	cmp	r3, r1
   22ccc:	d9f3      	bls.n	22cb6 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x18>
            return BLE_HS_ECONTROLLER;
   22cce:	200c      	movs	r0, #12
   22cd0:	e007      	b.n	22ce2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
    }

    /* Make sure length was correct */
    if (len) {
   22cd2:	b941      	cbnz	r1, 22ce6 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   22cd4:	2000      	movs	r0, #0
   22cd6:	e004      	b.n	22ce2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
        return BLE_HS_ECONTROLLER;
   22cd8:	200c      	movs	r0, #12
}
   22cda:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   22cdc:	200a      	movs	r0, #10
   22cde:	e000      	b.n	22ce2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
   22ce0:	200c      	movs	r0, #12
}
   22ce2:	bc10      	pop	{r4}
   22ce4:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   22ce6:	200c      	movs	r0, #12
   22ce8:	e7fb      	b.n	22ce2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>

00022cea <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   22cea:	2000      	movs	r0, #0
   22cec:	4770      	bx	lr

00022cee <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   22cee:	2000      	movs	r0, #0
   22cf0:	4770      	bx	lr

00022cf2 <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   22cf2:	2000      	movs	r0, #0
   22cf4:	4770      	bx	lr

00022cf6 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   22cf6:	2000      	movs	r0, #0
   22cf8:	4770      	bx	lr

00022cfa <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   22cfa:	2000      	movs	r0, #0
   22cfc:	4770      	bx	lr

00022cfe <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   22cfe:	2000      	movs	r0, #0
   22d00:	4770      	bx	lr

00022d02 <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   22d02:	2000      	movs	r0, #0
   22d04:	4770      	bx	lr

00022d06 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   22d06:	2000      	movs	r0, #0
   22d08:	4770      	bx	lr

00022d0a <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   22d0a:	2a01      	cmp	r2, #1
   22d0c:	d001      	beq.n	22d12 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   22d0e:	200c      	movs	r0, #12
}
   22d10:	4770      	bx	lr
{
   22d12:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   22d14:	7808      	ldrb	r0, [r1, #0]
   22d16:	f7fe fecd 	bl	21ab4 <ble_hs_hw_error>
    return 0;
   22d1a:	2000      	movs	r0, #0
}
   22d1c:	bd08      	pop	{r3, pc}

00022d1e <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   22d1e:	2a03      	cmp	r2, #3
   22d20:	d001      	beq.n	22d26 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   22d22:	200c      	movs	r0, #12
}
   22d24:	4770      	bx	lr
{
   22d26:	b508      	push	{r3, lr}
    ble_sm_enc_key_refresh_rx(ev);
   22d28:	4608      	mov	r0, r1
   22d2a:	f002 fd41 	bl	257b0 <ble_sm_enc_key_refresh_rx>
    return 0;
   22d2e:	2000      	movs	r0, #0
}
   22d30:	bd08      	pop	{r3, pc}

00022d32 <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   22d32:	2a04      	cmp	r2, #4
   22d34:	d001      	beq.n	22d3a <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   22d36:	200c      	movs	r0, #12
}
   22d38:	4770      	bx	lr
{
   22d3a:	b508      	push	{r3, lr}
    ble_sm_enc_change_rx(ev);
   22d3c:	4608      	mov	r0, r1
   22d3e:	f002 fd2d 	bl	2579c <ble_sm_enc_change_rx>
    return 0;
   22d42:	2000      	movs	r0, #0
}
   22d44:	bd08      	pop	{r3, pc}

00022d46 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   22d46:	2a04      	cmp	r2, #4
   22d48:	d001      	beq.n	22d4e <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   22d4a:	200c      	movs	r0, #12
}
   22d4c:	4770      	bx	lr
{
   22d4e:	b510      	push	{r4, lr}
   22d50:	460c      	mov	r4, r1
    ble_hs_lock();
   22d52:	f7fe fd8b 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   22d56:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   22d5a:	f7ff fbe5 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   22d5e:	b110      	cbz	r0, 22d66 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   22d60:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   22d62:	f7ff fe27 	bl	229b4 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   22d66:	f7fe fd85 	bl	21874 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   22d6a:	4620      	mov	r0, r4
   22d6c:	f7fc f910 	bl	1ef90 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   22d70:	f7fe fd96 	bl	218a0 <ble_hs_wakeup_tx>
    return 0;
   22d74:	2000      	movs	r0, #0
}
   22d76:	bd10      	pop	{r4, pc}

00022d78 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   22d78:	780b      	ldrb	r3, [r1, #0]
   22d7a:	009b      	lsls	r3, r3, #2
   22d7c:	3301      	adds	r3, #1
   22d7e:	4293      	cmp	r3, r2
   22d80:	d129      	bne.n	22dd6 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   22d82:	b570      	push	{r4, r5, r6, lr}
   22d84:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   22d86:	2400      	movs	r4, #0
   22d88:	e008      	b.n	22d9c <ble_hs_hci_evt_num_completed_pkts+0x24>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   22d8a:	200c      	movs	r0, #12
   22d8c:	f7fe fe82 	bl	21a94 <ble_hs_sched_reset>
                ble_hs_hci_add_avail_pkts(num_pkts);
   22d90:	4630      	mov	r0, r6
   22d92:	f7ff fe0f 	bl	229b4 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   22d96:	f7fe fd6d 	bl	21874 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   22d9a:	3401      	adds	r4, #1
   22d9c:	782b      	ldrb	r3, [r5, #0]
   22d9e:	42a3      	cmp	r3, r4
   22da0:	dd15      	ble.n	22dce <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   22da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   22da6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   22daa:	2e00      	cmp	r6, #0
   22dac:	d0f5      	beq.n	22d9a <ble_hs_hci_evt_num_completed_pkts+0x22>
            ble_hs_lock();
   22dae:	f7fe fd5d 	bl	2186c <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   22db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   22db6:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   22dba:	f7ff fbb5 	bl	22528 <ble_hs_conn_find>
            if (conn != NULL) {
   22dbe:	2800      	cmp	r0, #0
   22dc0:	d0e9      	beq.n	22d96 <ble_hs_hci_evt_num_completed_pkts+0x1e>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   22dc2:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   22dc4:	42b3      	cmp	r3, r6
   22dc6:	d3e0      	bcc.n	22d8a <ble_hs_hci_evt_num_completed_pkts+0x12>
                    conn->bhc_outstanding_pkts -= num_pkts;
   22dc8:	1b9b      	subs	r3, r3, r6
   22dca:	8703      	strh	r3, [r0, #56]	; 0x38
   22dcc:	e7e0      	b.n	22d90 <ble_hs_hci_evt_num_completed_pkts+0x18>
    ble_hs_wakeup_tx();
   22dce:	f7fe fd67 	bl	218a0 <ble_hs_wakeup_tx>
    return 0;
   22dd2:	2000      	movs	r0, #0
}
   22dd4:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   22dd6:	200c      	movs	r0, #12
}
   22dd8:	4770      	bx	lr

00022dda <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   22dda:	2a06      	cmp	r2, #6
   22ddc:	d001      	beq.n	22de2 <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   22dde:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   22de0:	4770      	bx	lr
{
   22de2:	b508      	push	{r3, lr}
    ble_gap_rx_phy_update_complete(ev);
   22de4:	4608      	mov	r0, r1
   22de6:	f7fb fdf3 	bl	1e9d0 <ble_gap_rx_phy_update_complete>
    return 0;
   22dea:	2000      	movs	r0, #0
}
   22dec:	bd08      	pop	{r3, pc}

00022dee <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   22dee:	b530      	push	{r4, r5, lr}
   22df0:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   22df2:	2300      	movs	r3, #0
   22df4:	9300      	str	r3, [sp, #0]
   22df6:	9301      	str	r3, [sp, #4]
   22df8:	9302      	str	r3, [sp, #8]
   22dfa:	9304      	str	r3, [sp, #16]
   22dfc:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   22dfe:	2a01      	cmp	r2, #1
   22e00:	d932      	bls.n	22e68 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   22e02:	460d      	mov	r5, r1
   22e04:	784b      	ldrb	r3, [r1, #1]
   22e06:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   22e0a:	d12f      	bne.n	22e6c <ble_hs_hci_evt_le_dir_adv_rpt+0x7e>
    desc.data = NULL;
   22e0c:	2400      	movs	r4, #0
   22e0e:	9403      	str	r4, [sp, #12]
    desc.length_data = 0;
   22e10:	f88d 4001 	strb.w	r4, [sp, #1]
    for (i = 0; i < ev->num_reports; i++) {
   22e14:	786b      	ldrb	r3, [r5, #1]
   22e16:	42a3      	cmp	r3, r4
   22e18:	dd23      	ble.n	22e62 <ble_hs_hci_evt_le_dir_adv_rpt+0x74>
        desc.event_type = ev->reports[i].type;
   22e1a:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   22e1e:	789a      	ldrb	r2, [r3, #2]
   22e20:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   22e24:	78da      	ldrb	r2, [r3, #3]
   22e26:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   22e2a:	461a      	mov	r2, r3
   22e2c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   22e30:	f8cd 1003 	str.w	r1, [sp, #3]
   22e34:	8892      	ldrh	r2, [r2, #4]
   22e36:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   22e3a:	7a9a      	ldrb	r2, [r3, #10]
   22e3c:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   22e40:	461a      	mov	r2, r3
   22e42:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   22e46:	f8cd 1011 	str.w	r1, [sp, #17]
   22e4a:	8892      	ldrh	r2, [r2, #4]
   22e4c:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   22e50:	f993 3011 	ldrsb.w	r3, [r3, #17]
   22e54:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   22e58:	4668      	mov	r0, sp
   22e5a:	f7fb fd90 	bl	1e97e <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   22e5e:	3401      	adds	r4, #1
   22e60:	e7d8      	b.n	22e14 <ble_hs_hci_evt_le_dir_adv_rpt+0x26>
    return 0;
   22e62:	2000      	movs	r0, #0
}
   22e64:	b007      	add	sp, #28
   22e66:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   22e68:	200c      	movs	r0, #12
   22e6a:	e7fb      	b.n	22e64 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   22e6c:	200c      	movs	r0, #12
   22e6e:	e7f9      	b.n	22e64 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>

00022e70 <ble_hs_hci_evt_le_adv_rpt>:
{
   22e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   22e72:	b087      	sub	sp, #28
   22e74:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   22e76:	2300      	movs	r3, #0
   22e78:	9300      	str	r3, [sp, #0]
   22e7a:	9301      	str	r3, [sp, #4]
   22e7c:	9302      	str	r3, [sp, #8]
   22e7e:	9303      	str	r3, [sp, #12]
   22e80:	9304      	str	r3, [sp, #16]
   22e82:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   22e84:	4611      	mov	r1, r2
   22e86:	4630      	mov	r0, r6
   22e88:	f7ff ff09 	bl	22c9e <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   22e8c:	4607      	mov	r7, r0
   22e8e:	bb58      	cbnz	r0, 22ee8 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   22e90:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   22e92:	2200      	movs	r2, #0
   22e94:	9204      	str	r2, [sp, #16]
   22e96:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   22e9a:	4605      	mov	r5, r0
   22e9c:	7872      	ldrb	r2, [r6, #1]
   22e9e:	42aa      	cmp	r2, r5
   22ea0:	dd22      	ble.n	22ee8 <ble_hs_hci_evt_le_adv_rpt+0x78>
        data += sizeof(rpt) + rpt->data_len + 1;
   22ea2:	7a1c      	ldrb	r4, [r3, #8]
   22ea4:	3405      	adds	r4, #5
   22ea6:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   22ea8:	781a      	ldrb	r2, [r3, #0]
   22eaa:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   22eae:	785a      	ldrb	r2, [r3, #1]
   22eb0:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   22eb4:	461a      	mov	r2, r3
   22eb6:	f852 1f02 	ldr.w	r1, [r2, #2]!
   22eba:	f8cd 1003 	str.w	r1, [sp, #3]
   22ebe:	8892      	ldrh	r2, [r2, #4]
   22ec0:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   22ec4:	7a1a      	ldrb	r2, [r3, #8]
   22ec6:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   22eca:	f103 0209 	add.w	r2, r3, #9
   22ece:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   22ed0:	7a1a      	ldrb	r2, [r3, #8]
   22ed2:	4413      	add	r3, r2
   22ed4:	f993 3009 	ldrsb.w	r3, [r3, #9]
   22ed8:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   22edc:	4668      	mov	r0, sp
   22ede:	f7fb fd4e 	bl	1e97e <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   22ee2:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   22ee4:	4623      	mov	r3, r4
   22ee6:	e7d9      	b.n	22e9c <ble_hs_hci_evt_le_adv_rpt+0x2c>
}
   22ee8:	4638      	mov	r0, r7
   22eea:	b007      	add	sp, #28
   22eec:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022eee <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   22eee:	2a1f      	cmp	r2, #31
   22ef0:	d001      	beq.n	22ef6 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   22ef2:	200c      	movs	r0, #12
}
   22ef4:	4770      	bx	lr
{
   22ef6:	b510      	push	{r4, lr}
   22ef8:	b088      	sub	sp, #32
   22efa:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   22efc:	2220      	movs	r2, #32
   22efe:	2100      	movs	r1, #0
   22f00:	4668      	mov	r0, sp
   22f02:	f7eb fd7e 	bl	ea02 <memset>
    evt.status = ev->status;
   22f06:	7863      	ldrb	r3, [r4, #1]
   22f08:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   22f0c:	bb63      	cbnz	r3, 22f68 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   22f0e:	8863      	ldrh	r3, [r4, #2]
   22f10:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   22f14:	7923      	ldrb	r3, [r4, #4]
   22f16:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   22f1a:	7963      	ldrb	r3, [r4, #5]
   22f1c:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   22f20:	4623      	mov	r3, r4
   22f22:	f853 2f06 	ldr.w	r2, [r3, #6]!
   22f26:	f8cd 2006 	str.w	r2, [sp, #6]
   22f2a:	889b      	ldrh	r3, [r3, #4]
   22f2c:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   22f30:	4623      	mov	r3, r4
   22f32:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   22f36:	f8cd 2013 	str.w	r2, [sp, #19]
   22f3a:	889b      	ldrh	r3, [r3, #4]
   22f3c:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   22f40:	4623      	mov	r3, r4
   22f42:	f853 2f12 	ldr.w	r2, [r3, #18]!
   22f46:	f8cd 2019 	str.w	r2, [sp, #25]
   22f4a:	889b      	ldrh	r3, [r3, #4]
   22f4c:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   22f50:	8b23      	ldrh	r3, [r4, #24]
   22f52:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   22f56:	8b63      	ldrh	r3, [r4, #26]
   22f58:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   22f5c:	8ba3      	ldrh	r3, [r4, #28]
   22f5e:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   22f62:	7fa3      	ldrb	r3, [r4, #30]
   22f64:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   22f68:	2100      	movs	r1, #0
   22f6a:	4668      	mov	r0, sp
   22f6c:	f7fb fe32 	bl	1ebd4 <ble_gap_rx_conn_complete>
}
   22f70:	b008      	add	sp, #32
   22f72:	bd10      	pop	{r4, pc}

00022f74 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   22f74:	2a13      	cmp	r2, #19
   22f76:	d001      	beq.n	22f7c <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   22f78:	200c      	movs	r0, #12
}
   22f7a:	4770      	bx	lr
{
   22f7c:	b510      	push	{r4, lr}
   22f7e:	b088      	sub	sp, #32
   22f80:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   22f82:	2220      	movs	r2, #32
   22f84:	2100      	movs	r1, #0
   22f86:	4668      	mov	r0, sp
   22f88:	f7eb fd3b 	bl	ea02 <memset>
    evt.status = ev->status;
   22f8c:	7863      	ldrb	r3, [r4, #1]
   22f8e:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   22f92:	b9e3      	cbnz	r3, 22fce <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   22f94:	8863      	ldrh	r3, [r4, #2]
   22f96:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   22f9a:	7923      	ldrb	r3, [r4, #4]
   22f9c:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   22fa0:	7963      	ldrb	r3, [r4, #5]
   22fa2:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   22fa6:	4623      	mov	r3, r4
   22fa8:	f853 2f06 	ldr.w	r2, [r3, #6]!
   22fac:	f8cd 2006 	str.w	r2, [sp, #6]
   22fb0:	889b      	ldrh	r3, [r3, #4]
   22fb2:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   22fb6:	89a3      	ldrh	r3, [r4, #12]
   22fb8:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   22fbc:	89e3      	ldrh	r3, [r4, #14]
   22fbe:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   22fc2:	8a23      	ldrh	r3, [r4, #16]
   22fc4:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   22fc8:	7ca3      	ldrb	r3, [r4, #18]
   22fca:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   22fce:	2100      	movs	r1, #0
   22fd0:	4668      	mov	r0, sp
   22fd2:	f7fb fdff 	bl	1ebd4 <ble_gap_rx_conn_complete>
}
   22fd6:	b008      	add	sp, #32
   22fd8:	bd10      	pop	{r4, pc}

00022fda <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   22fda:	2a0b      	cmp	r2, #11
   22fdc:	d001      	beq.n	22fe2 <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   22fde:	200c      	movs	r0, #12
}
   22fe0:	4770      	bx	lr
{
   22fe2:	b508      	push	{r3, lr}
    ble_gap_rx_param_req(ev);
   22fe4:	4608      	mov	r0, r1
   22fe6:	f7fc f8b1 	bl	1f14c <ble_gap_rx_param_req>
    return 0;
   22fea:	2000      	movs	r0, #0
}
   22fec:	bd08      	pop	{r3, pc}

00022fee <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   22fee:	2a0d      	cmp	r2, #13
   22ff0:	d001      	beq.n	22ff6 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   22ff2:	200c      	movs	r0, #12
}
   22ff4:	4770      	bx	lr
{
   22ff6:	b508      	push	{r3, lr}
    ble_sm_ltk_req_rx(ev);
   22ff8:	4608      	mov	r0, r1
   22ffa:	f002 fbe1 	bl	257c0 <ble_sm_ltk_req_rx>
    return 0;
   22ffe:	2000      	movs	r0, #0
}
   23000:	bd08      	pop	{r3, pc}

00023002 <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   23002:	2a0c      	cmp	r2, #12
   23004:	d001      	beq.n	2300a <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   23006:	200c      	movs	r0, #12
}
   23008:	4770      	bx	lr
{
   2300a:	b508      	push	{r3, lr}
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   2300c:	4608      	mov	r0, r1
   2300e:	f7fb fcb7 	bl	1e980 <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   23012:	2000      	movs	r0, #0
}
   23014:	bd08      	pop	{r3, pc}

00023016 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   23016:	2a0a      	cmp	r2, #10
   23018:	d001      	beq.n	2301e <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2301a:	200c      	movs	r0, #12
}
   2301c:	4770      	bx	lr
{
   2301e:	b508      	push	{r3, lr}
    ble_gap_rx_update_complete(ev);
   23020:	4608      	mov	r0, r1
   23022:	f7fc f803 	bl	1f02c <ble_gap_rx_update_complete>
    return 0;
   23026:	2000      	movs	r0, #0
}
   23028:	bd08      	pop	{r3, pc}
	...

0002302c <ble_hs_hci_evt_process>:
#endif

int
ble_hs_hci_evt_process(struct ble_hci_ev *ev)
{
   2302c:	b538      	push	{r3, r4, r5, lr}
   2302e:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   23030:	4a0c      	ldr	r2, [pc, #48]	; (23064 <ble_hs_hci_evt_process+0x38>)
   23032:	6993      	ldr	r3, [r2, #24]
   23034:	3301      	adds	r3, #1
   23036:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   23038:	7805      	ldrb	r5, [r0, #0]
   2303a:	4628      	mov	r0, r5
   2303c:	f7ff fe00 	bl	22c40 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   23040:	b150      	cbz	r0, 23058 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   23042:	6843      	ldr	r3, [r0, #4]
   23044:	7862      	ldrb	r2, [r4, #1]
   23046:	1ca1      	adds	r1, r4, #2
   23048:	4628      	mov	r0, r5
   2304a:	4798      	blx	r3
   2304c:	4605      	mov	r5, r0
    }

    ble_transport_free(ev);
   2304e:	4620      	mov	r0, r4
   23050:	f004 f964 	bl	2731c <ble_transport_free>

    return rc;
}
   23054:	4628      	mov	r0, r5
   23056:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   23058:	4a02      	ldr	r2, [pc, #8]	; (23064 <ble_hs_hci_evt_process+0x38>)
   2305a:	6a13      	ldr	r3, [r2, #32]
   2305c:	3301      	adds	r3, #1
   2305e:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   23060:	2508      	movs	r5, #8
   23062:	e7f4      	b.n	2304e <ble_hs_hci_evt_process+0x22>
   23064:	20003404 	.word	0x20003404

00023068 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   23068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2306c:	b086      	sub	sp, #24
   2306e:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   23070:	a905      	add	r1, sp, #20
   23072:	f000 f8a5 	bl	231c0 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   23076:	4605      	mov	r5, r0
   23078:	b130      	cbz	r0, 23088 <ble_hs_hci_evt_acl_process+0x20>
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   2307a:	4620      	mov	r0, r4
   2307c:	f7ea f9fa 	bl	d474 <os_mbuf_free_chain>
    return rc;
#else
    return BLE_HS_ENOTSUP;
#endif
}
   23080:	4628      	mov	r0, r5
   23082:	b006      	add	sp, #24
   23084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_mbuf(om);
   23088:	4620      	mov	r0, r4
   2308a:	f000 f99d 	bl	233c8 <ble_hs_log_mbuf>
    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   2308e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23092:	8a23      	ldrh	r3, [r4, #16]
   23094:	429a      	cmp	r2, r3
   23096:	d001      	beq.n	2309c <ble_hs_hci_evt_acl_process+0x34>
        rc = BLE_HS_EBADDATA;
   23098:	250a      	movs	r5, #10
   2309a:	e7ee      	b.n	2307a <ble_hs_hci_evt_acl_process+0x12>
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   2309c:	f8bd 7014 	ldrh.w	r7, [sp, #20]
   230a0:	f3c7 070b 	ubfx	r7, r7, #0, #12
    ble_hs_lock();
   230a4:	f7fe fbe2 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   230a8:	4638      	mov	r0, r7
   230aa:	f7ff fa3d 	bl	22528 <ble_hs_conn_find>
    if (conn == NULL) {
   230ae:	4680      	mov	r8, r0
   230b0:	b198      	cbz	r0, 230da <ble_hs_hci_evt_acl_process+0x72>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   230b2:	ab03      	add	r3, sp, #12
   230b4:	9300      	str	r3, [sp, #0]
   230b6:	ab04      	add	r3, sp, #16
   230b8:	4622      	mov	r2, r4
   230ba:	a905      	add	r1, sp, #20
   230bc:	f000 fdad 	bl	23c1a <ble_l2cap_rx>
   230c0:	4606      	mov	r6, r0
        om = NULL;
   230c2:	2400      	movs	r4, #0
    ble_hs_unlock();
   230c4:	f7fe fbd6 	bl	21874 <ble_hs_unlock>
    switch (rc) {
   230c8:	b166      	cbz	r6, 230e4 <ble_hs_hci_evt_acl_process+0x7c>
   230ca:	2e01      	cmp	r6, #1
   230cc:	d0d8      	beq.n	23080 <ble_hs_hci_evt_acl_process+0x18>
        if (reject_cid != -1) {
   230ce:	9b03      	ldr	r3, [sp, #12]
   230d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   230d4:	d111      	bne.n	230fa <ble_hs_hci_evt_acl_process+0x92>
        goto err;
   230d6:	4635      	mov	r5, r6
   230d8:	e7cf      	b.n	2307a <ble_hs_hci_evt_acl_process+0x12>
        reject_cid = -1;
   230da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   230de:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   230e0:	2607      	movs	r6, #7
   230e2:	e7ef      	b.n	230c4 <ble_hs_hci_evt_acl_process+0x5c>
        rc = rx_cb(conn->bhc_rx_chan);
   230e4:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   230e8:	9b04      	ldr	r3, [sp, #16]
   230ea:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   230ec:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   230f0:	4640      	mov	r0, r8
   230f2:	f000 fd62 	bl	23bba <ble_l2cap_remove_rx>
    return 0;
   230f6:	4635      	mov	r5, r6
        break;
   230f8:	e7c2      	b.n	23080 <ble_hs_hci_evt_acl_process+0x18>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   230fa:	b29b      	uxth	r3, r3
   230fc:	2200      	movs	r2, #0
   230fe:	4611      	mov	r1, r2
   23100:	4638      	mov	r0, r7
   23102:	f001 f90d 	bl	24320 <ble_l2cap_sig_reject_invalid_cid_tx>
   23106:	e7e6      	b.n	230d6 <ble_hs_hci_evt_acl_process+0x6e>

00023108 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   23108:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   2310c:	b200      	sxth	r0, r0
           (pb      << 12)  |
   2310e:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   23112:	b280      	uxth	r0, r0
   23114:	4770      	bx	lr
	...

00023118 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   23118:	b530      	push	{r4, r5, lr}
   2311a:	b085      	sub	sp, #20
   2311c:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2311e:	2301      	movs	r3, #1
   23120:	9300      	str	r3, [sp, #0]
   23122:	ab03      	add	r3, sp, #12
   23124:	2200      	movs	r2, #0
   23126:	4611      	mov	r1, r2
   23128:	f242 0007 	movw	r0, #8199	; 0x2007
   2312c:	f7ff fc54 	bl	229d8 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   23130:	4605      	mov	r5, r0
   23132:	b930      	cbnz	r0, 23142 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   23134:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   23138:	7023      	strb	r3, [r4, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   2313a:	3314      	adds	r3, #20
   2313c:	b2db      	uxtb	r3, r3
   2313e:	2b1e      	cmp	r3, #30
   23140:	d802      	bhi.n	23148 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   23142:	4628      	mov	r0, r5
   23144:	b005      	add	sp, #20
   23146:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   23148:	4a02      	ldr	r2, [pc, #8]	; (23154 <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   2314a:	2102      	movs	r1, #2
   2314c:	2004      	movs	r0, #4
   2314e:	f7ee fa73 	bl	11638 <modlog_printf>
   23152:	e7f6      	b.n	23142 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   23154:	0002e3f0 	.word	0x0002e3f0

00023158 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   23158:	b570      	push	{r4, r5, r6, lr}
   2315a:	b084      	sub	sp, #16
   2315c:	4606      	mov	r6, r0
   2315e:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   23160:	2c00      	cmp	r4, #0
   23162:	dd16      	ble.n	23192 <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   23164:	2308      	movs	r3, #8
   23166:	9300      	str	r3, [sp, #0]
   23168:	446b      	add	r3, sp
   2316a:	2200      	movs	r2, #0
   2316c:	4611      	mov	r1, r2
   2316e:	f242 0018 	movw	r0, #8216	; 0x2018
   23172:	f7ff fc31 	bl	229d8 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   23176:	4603      	mov	r3, r0
   23178:	b960      	cbnz	r0, 23194 <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   2317a:	4625      	mov	r5, r4
   2317c:	2c08      	cmp	r4, #8
   2317e:	bf28      	it	cs
   23180:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   23182:	462a      	mov	r2, r5
   23184:	a902      	add	r1, sp, #8
   23186:	4630      	mov	r0, r6
   23188:	f7eb fc16 	bl	e9b8 <memcpy>

        len -= chunk_sz;
   2318c:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   2318e:	442e      	add	r6, r5
   23190:	e7e6      	b.n	23160 <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   23192:	2300      	movs	r3, #0
}
   23194:	4618      	mov	r0, r3
   23196:	b004      	add	sp, #16
   23198:	bd70      	pop	{r4, r5, r6, pc}

0002319a <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   2319a:	b500      	push	{lr}
   2319c:	b085      	sub	sp, #20
   2319e:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   231a0:	6800      	ldr	r0, [r0, #0]
   231a2:	9002      	str	r0, [sp, #8]
   231a4:	889b      	ldrh	r3, [r3, #4]
   231a6:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   231aa:	2300      	movs	r3, #0
   231ac:	9300      	str	r3, [sp, #0]
   231ae:	2206      	movs	r2, #6
   231b0:	a902      	add	r1, sp, #8
   231b2:	f242 0005 	movw	r0, #8197	; 0x2005
   231b6:	f7ff fc0f 	bl	229d8 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   231ba:	b005      	add	sp, #20
   231bc:	f85d fb04 	ldr.w	pc, [sp], #4

000231c0 <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   231c0:	b570      	push	{r4, r5, r6, lr}
   231c2:	4605      	mov	r5, r0
   231c4:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   231c6:	460b      	mov	r3, r1
   231c8:	2204      	movs	r2, #4
   231ca:	2100      	movs	r1, #0
   231cc:	f7ea f9fc 	bl	d5c8 <os_mbuf_copydata>
    if (rc != 0) {
   231d0:	b980      	cbnz	r0, 231f4 <ble_hs_hci_util_data_hdr_strip+0x34>
   231d2:	4606      	mov	r6, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   231d4:	2104      	movs	r1, #4
   231d6:	4628      	mov	r0, r5
   231d8:	f7ea fa23 	bl	d622 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   231dc:	4620      	mov	r0, r4
   231de:	f007 fcfc 	bl	2abda <get_le16>
   231e2:	4623      	mov	r3, r4
   231e4:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   231e8:	4618      	mov	r0, r3
   231ea:	f007 fcf6 	bl	2abda <get_le16>
   231ee:	8060      	strh	r0, [r4, #2]

    return 0;
}
   231f0:	4630      	mov	r0, r6
   231f2:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   231f4:	260c      	movs	r6, #12
   231f6:	e7fb      	b.n	231f0 <ble_hs_hci_util_data_hdr_strip+0x30>

000231f8 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   231f8:	b510      	push	{r4, lr}
   231fa:	4604      	mov	r4, r0
    ble_hs_lock();
   231fc:	f7fe fb36 	bl	2186c <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   23200:	4b03      	ldr	r3, [pc, #12]	; (23210 <ble_hs_id_set_pub+0x18>)
   23202:	6820      	ldr	r0, [r4, #0]
   23204:	6018      	str	r0, [r3, #0]
   23206:	88a2      	ldrh	r2, [r4, #4]
   23208:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   2320a:	f7fe fb33 	bl	21874 <ble_hs_unlock>
}
   2320e:	bd10      	pop	{r4, pc}
   23210:	2000365c 	.word	0x2000365c

00023214 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   23214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23216:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   23218:	f7fe fb28 	bl	2186c <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   2321c:	7967      	ldrb	r7, [r4, #5]
   2321e:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   23222:	7820      	ldrb	r0, [r4, #0]
   23224:	f009 fedc 	bl	2cfe0 <__popcountsi2>
   23228:	4605      	mov	r5, r0
    ones += __builtin_popcount(rnd_addr[1]);
   2322a:	7860      	ldrb	r0, [r4, #1]
   2322c:	f009 fed8 	bl	2cfe0 <__popcountsi2>
   23230:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[2]);
   23232:	78a0      	ldrb	r0, [r4, #2]
   23234:	f009 fed4 	bl	2cfe0 <__popcountsi2>
   23238:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[3]);
   2323a:	78e0      	ldrb	r0, [r4, #3]
   2323c:	f009 fed0 	bl	2cfe0 <__popcountsi2>
   23240:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[4]);
   23242:	7920      	ldrb	r0, [r4, #4]
   23244:	f009 fecc 	bl	2cfe0 <__popcountsi2>
   23248:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   2324a:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   2324e:	f009 fec7 	bl	2cfe0 <__popcountsi2>
   23252:	4428      	add	r0, r5

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   23254:	b10e      	cbz	r6, 2325a <ble_hs_id_set_rnd+0x46>
   23256:	2ec0      	cmp	r6, #192	; 0xc0
   23258:	d110      	bne.n	2327c <ble_hs_id_set_rnd+0x68>
   2325a:	b188      	cbz	r0, 23280 <ble_hs_id_set_rnd+0x6c>
            (ones == 0 || ones == 46)) {
   2325c:	282e      	cmp	r0, #46	; 0x2e
   2325e:	d011      	beq.n	23284 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   23260:	4620      	mov	r0, r4
   23262:	f7ff ff9a 	bl	2319a <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   23266:	4605      	mov	r5, r0
   23268:	b920      	cbnz	r0, 23274 <ble_hs_id_set_rnd+0x60>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   2326a:	4b07      	ldr	r3, [pc, #28]	; (23288 <ble_hs_id_set_rnd+0x74>)
   2326c:	6820      	ldr	r0, [r4, #0]
   2326e:	6018      	str	r0, [r3, #0]
   23270:	88a2      	ldrh	r2, [r4, #4]
   23272:	809a      	strh	r2, [r3, #4]

done:
    ble_hs_unlock();
   23274:	f7fe fafe 	bl	21874 <ble_hs_unlock>
    return rc;
}
   23278:	4628      	mov	r0, r5
   2327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   2327c:	2503      	movs	r5, #3
   2327e:	e7f9      	b.n	23274 <ble_hs_id_set_rnd+0x60>
   23280:	2503      	movs	r5, #3
   23282:	e7f7      	b.n	23274 <ble_hs_id_set_rnd+0x60>
   23284:	2503      	movs	r5, #3
   23286:	e7f5      	b.n	23274 <ble_hs_id_set_rnd+0x60>
   23288:	20003664 	.word	0x20003664

0002328c <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   2328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2328e:	460e      	mov	r6, r1
   23290:	4615      	mov	r5, r2
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   23292:	b148      	cbz	r0, 232a8 <ble_hs_id_addr+0x1c>
   23294:	2801      	cmp	r0, #1
   23296:	d115      	bne.n	232c4 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   23298:	4c0d      	ldr	r4, [pc, #52]	; (232d0 <ble_hs_id_addr+0x44>)
   2329a:	7963      	ldrb	r3, [r4, #5]
   2329c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   232a0:	bf0c      	ite	eq
   232a2:	2701      	moveq	r7, #1
   232a4:	2700      	movne	r7, #0
        break;
   232a6:	e001      	b.n	232ac <ble_hs_id_addr+0x20>
    switch (id_addr_type) {
   232a8:	2700      	movs	r7, #0
   232aa:	4c0a      	ldr	r4, [pc, #40]	; (232d4 <ble_hs_id_addr+0x48>)

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   232ac:	2206      	movs	r2, #6
   232ae:	490a      	ldr	r1, [pc, #40]	; (232d8 <ble_hs_id_addr+0x4c>)
   232b0:	4620      	mov	r0, r4
   232b2:	f7eb fb5d 	bl	e970 <memcmp>
   232b6:	b138      	cbz	r0, 232c8 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   232b8:	b106      	cbz	r6, 232bc <ble_hs_id_addr+0x30>
        *out_id_addr = id_addr;
   232ba:	6034      	str	r4, [r6, #0]
    }
    if (out_is_nrpa != NULL) {
   232bc:	b135      	cbz	r5, 232cc <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   232be:	602f      	str	r7, [r5, #0]
    }

    return 0;
   232c0:	2000      	movs	r0, #0
   232c2:	e000      	b.n	232c6 <ble_hs_id_addr+0x3a>
    switch (id_addr_type) {
   232c4:	2003      	movs	r0, #3
}
   232c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOADDR;
   232c8:	2015      	movs	r0, #21
   232ca:	e7fc      	b.n	232c6 <ble_hs_id_addr+0x3a>
    return 0;
   232cc:	2000      	movs	r0, #0
   232ce:	e7fa      	b.n	232c6 <ble_hs_id_addr+0x3a>
   232d0:	20003664 	.word	0x20003664
   232d4:	2000365c 	.word	0x2000365c
   232d8:	0002e43c 	.word	0x0002e43c

000232dc <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   232dc:	b500      	push	{lr}
   232de:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   232e0:	2801      	cmp	r0, #1
   232e2:	d90e      	bls.n	23302 <ble_hs_id_addr_type_usable+0x26>
   232e4:	1e83      	subs	r3, r0, #2
   232e6:	b2db      	uxtb	r3, r3
   232e8:	2b01      	cmp	r3, #1
   232ea:	d80f      	bhi.n	2330c <ble_hs_id_addr_type_usable+0x30>
        }
        break;

    case BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT:
    case BLE_OWN_ADDR_RPA_RANDOM_DEFAULT:
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   232ec:	f000 f911 	bl	23512 <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   232f0:	aa01      	add	r2, sp, #4
   232f2:	2100      	movs	r1, #0
   232f4:	f7ff ffca 	bl	2328c <ble_hs_id_addr>
        if (rc != 0) {
   232f8:	b948      	cbnz	r0, 2330e <ble_hs_id_addr_type_usable+0x32>
            return rc;
        }
        if (nrpa) {
   232fa:	9801      	ldr	r0, [sp, #4]
   232fc:	b138      	cbz	r0, 2330e <ble_hs_id_addr_type_usable+0x32>
            return BLE_HS_ENOADDR;
   232fe:	2015      	movs	r0, #21
   23300:	e005      	b.n	2330e <ble_hs_id_addr_type_usable+0x32>
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   23302:	2200      	movs	r2, #0
   23304:	4611      	mov	r1, r2
   23306:	f7ff ffc1 	bl	2328c <ble_hs_id_addr>
        if (rc != 0) {
   2330a:	e000      	b.n	2330e <ble_hs_id_addr_type_usable+0x32>
    switch (own_addr_type) {
   2330c:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   2330e:	b003      	add	sp, #12
   23310:	f85d fb04 	ldr.w	pc, [sp], #4

00023314 <ble_hs_id_copy_addr>:
{
   23314:	b570      	push	{r4, r5, r6, lr}
   23316:	b082      	sub	sp, #8
   23318:	4605      	mov	r5, r0
   2331a:	460c      	mov	r4, r1
   2331c:	4616      	mov	r6, r2
    ble_hs_lock();
   2331e:	f7fe faa5 	bl	2186c <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   23322:	4632      	mov	r2, r6
   23324:	a901      	add	r1, sp, #4
   23326:	4628      	mov	r0, r5
   23328:	f7ff ffb0 	bl	2328c <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   2332c:	4605      	mov	r5, r0
   2332e:	b928      	cbnz	r0, 2333c <ble_hs_id_copy_addr+0x28>
   23330:	b124      	cbz	r4, 2333c <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   23332:	9b01      	ldr	r3, [sp, #4]
   23334:	681a      	ldr	r2, [r3, #0]
   23336:	6022      	str	r2, [r4, #0]
   23338:	889b      	ldrh	r3, [r3, #4]
   2333a:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   2333c:	f7fe fa9a 	bl	21874 <ble_hs_unlock>
}
   23340:	4628      	mov	r0, r5
   23342:	b002      	add	sp, #8
   23344:	bd70      	pop	{r4, r5, r6, pc}

00023346 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   23346:	b510      	push	{r4, lr}
   23348:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   2334a:	f7ff ffc7 	bl	232dc <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   2334e:	b918      	cbnz	r0, 23358 <ble_hs_id_use_addr+0x12>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   23350:	3c02      	subs	r4, #2
   23352:	b2e4      	uxtb	r4, r4
   23354:	2c01      	cmp	r4, #1
   23356:	d900      	bls.n	2335a <ble_hs_id_use_addr+0x14>
            return rc;
        }
    }

    return 0;
}
   23358:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   2335a:	f000 f97b 	bl	23654 <ble_hs_pvcy_ensure_started>
        if (rc != 0) {
   2335e:	e7fb      	b.n	23358 <ble_hs_id_use_addr+0x12>

00023360 <ble_hs_id_infer_auto>:

int
ble_hs_id_infer_auto(int privacy, uint8_t *out_addr_type)
{
   23360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23364:	4604      	mov	r4, r0
   23366:	460d      	mov	r5, r1
    uint8_t addr_type;
    int num_addr_types;
    int rc;
    int i;

    ble_hs_lock();
   23368:	f7fe fa80 	bl	2186c <ble_hs_lock>

    if (privacy) {
   2336c:	b194      	cbz	r4, 23394 <ble_hs_id_infer_auto+0x34>
        addr_types = priv_addr_types;
   2336e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 233a8 <ble_hs_id_infer_auto+0x48>
    } else {
        addr_types = pub_addr_types;
        num_addr_types = sizeof pub_addr_types / sizeof pub_addr_types[0];
    }

    for (i = 0; i < num_addr_types; i++) {
   23372:	2400      	movs	r4, #0
   23374:	2c01      	cmp	r4, #1
   23376:	dc14      	bgt.n	233a2 <ble_hs_id_infer_auto+0x42>
        addr_type = addr_types[i];
   23378:	f818 7004 	ldrb.w	r7, [r8, r4]

        rc = ble_hs_id_addr_type_usable(addr_type);
   2337c:	4638      	mov	r0, r7
   2337e:	f7ff ffad 	bl	232dc <ble_hs_id_addr_type_usable>
        switch (rc) {
   23382:	4606      	mov	r6, r0
   23384:	b148      	cbz	r0, 2339a <ble_hs_id_infer_auto+0x3a>
   23386:	2815      	cmp	r0, #21
   23388:	d009      	beq.n	2339e <ble_hs_id_infer_auto+0x3e>
    }

    rc = BLE_HS_ENOADDR;

done:
    ble_hs_unlock();
   2338a:	f7fe fa73 	bl	21874 <ble_hs_unlock>
    return rc;
}
   2338e:	4630      	mov	r0, r6
   23390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        addr_types = pub_addr_types;
   23394:	f8df 8014 	ldr.w	r8, [pc, #20]	; 233ac <ble_hs_id_infer_auto+0x4c>
   23398:	e7eb      	b.n	23372 <ble_hs_id_infer_auto+0x12>
            *out_addr_type = addr_type;
   2339a:	702f      	strb	r7, [r5, #0]
            goto done;
   2339c:	e7f5      	b.n	2338a <ble_hs_id_infer_auto+0x2a>
    for (i = 0; i < num_addr_types; i++) {
   2339e:	3401      	adds	r4, #1
   233a0:	e7e8      	b.n	23374 <ble_hs_id_infer_auto+0x14>
    rc = BLE_HS_ENOADDR;
   233a2:	2615      	movs	r6, #21
   233a4:	e7f1      	b.n	2338a <ble_hs_id_infer_auto+0x2a>
   233a6:	bf00      	nop
   233a8:	0002e410 	.word	0x0002e410
   233ac:	0002e414 	.word	0x0002e414

000233b0 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   233b0:	4a03      	ldr	r2, [pc, #12]	; (233c0 <ble_hs_id_reset+0x10>)
   233b2:	2300      	movs	r3, #0
   233b4:	6013      	str	r3, [r2, #0]
   233b6:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   233b8:	4a02      	ldr	r2, [pc, #8]	; (233c4 <ble_hs_id_reset+0x14>)
   233ba:	6013      	str	r3, [r2, #0]
   233bc:	8093      	strh	r3, [r2, #4]
}
   233be:	4770      	bx	lr
   233c0:	2000365c 	.word	0x2000365c
   233c4:	20003664 	.word	0x20003664

000233c8 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   233c8:	b530      	push	{r4, r5, lr}
   233ca:	b083      	sub	sp, #12
   233cc:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   233ce:	2400      	movs	r4, #0
   233d0:	8a2b      	ldrh	r3, [r5, #16]
   233d2:	42a3      	cmp	r3, r4
   233d4:	dd08      	ble.n	233e8 <ble_hs_log_mbuf+0x20>
        os_mbuf_copydata(om, i, 1, &u8);
   233d6:	f10d 0307 	add.w	r3, sp, #7
   233da:	2201      	movs	r2, #1
   233dc:	4621      	mov	r1, r4
   233de:	4628      	mov	r0, r5
   233e0:	f7ea f8f2 	bl	d5c8 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   233e4:	3401      	adds	r4, #1
   233e6:	e7f3      	b.n	233d0 <ble_hs_log_mbuf+0x8>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   233e8:	b003      	add	sp, #12
   233ea:	bd30      	pop	{r4, r5, pc}

000233ec <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   233ec:	2300      	movs	r3, #0
   233ee:	428b      	cmp	r3, r1
   233f0:	da01      	bge.n	233f6 <ble_hs_log_flat_buf+0xa>
   233f2:	3301      	adds	r3, #1
   233f4:	e7fb      	b.n	233ee <ble_hs_log_flat_buf+0x2>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   233f6:	4770      	bx	lr

000233f8 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   233f8:	b510      	push	{r4, lr}
   233fa:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_msys_get_pkthdr(0, sizeof(struct ble_mbuf_hdr));
   233fc:	2110      	movs	r1, #16
   233fe:	2000      	movs	r0, #0
   23400:	f7ea fcdf 	bl	ddc2 <os_msys_get_pkthdr>
#else
    om = os_msys_get_pkthdr(0, 0);
#endif
    if (om == NULL) {
   23404:	4603      	mov	r3, r0
   23406:	b130      	cbz	r0, 23416 <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   23408:	6882      	ldr	r2, [r0, #8]
   2340a:	8812      	ldrh	r2, [r2, #0]
   2340c:	42a2      	cmp	r2, r4
   2340e:	d304      	bcc.n	2341a <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   23410:	6800      	ldr	r0, [r0, #0]
   23412:	4420      	add	r0, r4
   23414:	6018      	str	r0, [r3, #0]

    return om;
}
   23416:	4618      	mov	r0, r3
   23418:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   2341a:	f7ea f82b 	bl	d474 <os_mbuf_free_chain>
        return NULL;
   2341e:	2300      	movs	r3, #0
   23420:	e7f9      	b.n	23416 <ble_hs_mbuf_gen_pkt+0x1e>

00023422 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   23422:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   23424:	2004      	movs	r0, #4
   23426:	f7ff ffe7 	bl	233f8 <ble_hs_mbuf_gen_pkt>
}
   2342a:	bd08      	pop	{r3, pc}

0002342c <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   2342c:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   2342e:	2008      	movs	r0, #8
   23430:	f7ff ffe2 	bl	233f8 <ble_hs_mbuf_gen_pkt>
}
   23434:	bd08      	pop	{r3, pc}

00023436 <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   23436:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   23438:	200d      	movs	r0, #13
   2343a:	f7ff ffdd 	bl	233f8 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   2343e:	bd08      	pop	{r3, pc}

00023440 <ble_hs_mbuf_to_flat>:
}

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   23440:	b570      	push	{r4, r5, r6, lr}
   23442:	4614      	mov	r4, r2
   23444:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   23446:	8a05      	ldrh	r5, [r0, #16]
   23448:	4295      	cmp	r5, r2
   2344a:	d900      	bls.n	2344e <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   2344c:	4615      	mov	r5, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   2344e:	460b      	mov	r3, r1
   23450:	462a      	mov	r2, r5
   23452:	2100      	movs	r1, #0
   23454:	f7ea f8b8 	bl	d5c8 <os_mbuf_copydata>
    if (rc != 0) {
   23458:	b928      	cbnz	r0, 23466 <ble_hs_mbuf_to_flat+0x26>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   2345a:	42a5      	cmp	r5, r4
   2345c:	d900      	bls.n	23460 <ble_hs_mbuf_to_flat+0x20>
        rc = BLE_HS_EMSGSIZE;
   2345e:	2004      	movs	r0, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   23460:	b106      	cbz	r6, 23464 <ble_hs_mbuf_to_flat+0x24>
        *out_copy_len = copy_len;
   23462:	8035      	strh	r5, [r6, #0]
    }
    return rc;
}
   23464:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   23466:	2011      	movs	r0, #17
   23468:	e7fc      	b.n	23464 <ble_hs_mbuf_to_flat+0x24>

0002346a <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
   2346a:	b510      	push	{r4, lr}
   2346c:	4604      	mov	r4, r0
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   2346e:	6800      	ldr	r0, [r0, #0]
   23470:	8a03      	ldrh	r3, [r0, #16]
   23472:	428b      	cmp	r3, r1
   23474:	db06      	blt.n	23484 <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   23476:	b289      	uxth	r1, r1
   23478:	f7ea fa57 	bl	d92a <os_mbuf_pullup>
   2347c:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   2347e:	b118      	cbz	r0, 23488 <ble_hs_mbuf_pullup_base+0x1e>
        return BLE_HS_ENOMEM;
    }

    return 0;
   23480:	2000      	movs	r0, #0
}
   23482:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   23484:	200a      	movs	r0, #10
   23486:	e7fc      	b.n	23482 <ble_hs_mbuf_pullup_base+0x18>
        return BLE_HS_ENOMEM;
   23488:	2006      	movs	r0, #6
   2348a:	e7fa      	b.n	23482 <ble_hs_mbuf_pullup_base+0x18>

0002348c <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   2348c:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   2348e:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   23492:	f013 0f01 	tst.w	r3, #1
   23496:	d101      	bne.n	2349c <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   23498:	2000      	movs	r0, #0
   2349a:	bd08      	pop	{r3, pc}
   2349c:	4608      	mov	r0, r1
                                   sec->irk);
   2349e:	460a      	mov	r2, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   234a0:	f812 1b29 	ldrb.w	r1, [r2], #41
   234a4:	3001      	adds	r0, #1
   234a6:	f000 f94f 	bl	23748 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   234aa:	2800      	cmp	r0, #0
   234ac:	d0f4      	beq.n	23498 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   234ae:	4a03      	ldr	r2, [pc, #12]	; (234bc <ble_hs_misc_restore_one_irk+0x30>)
   234b0:	2103      	movs	r1, #3
   234b2:	2004      	movs	r0, #4
   234b4:	f7ee f8c0 	bl	11638 <modlog_printf>
   234b8:	e7ee      	b.n	23498 <ble_hs_misc_restore_one_irk+0xc>
   234ba:	bf00      	nop
   234bc:	0002e418 	.word	0x0002e418

000234c0 <ble_hs_misc_conn_chan_find>:
{
   234c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234c2:	460e      	mov	r6, r1
   234c4:	4615      	mov	r5, r2
   234c6:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   234c8:	f7ff f82e 	bl	22528 <ble_hs_conn_find>
    if (conn == NULL) {
   234cc:	4607      	mov	r7, r0
   234ce:	b160      	cbz	r0, 234ea <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   234d0:	4631      	mov	r1, r6
   234d2:	f7fe ff73 	bl	223bc <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   234d6:	4603      	mov	r3, r0
   234d8:	b128      	cbz	r0, 234e6 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   234da:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   234dc:	b105      	cbz	r5, 234e0 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   234de:	602f      	str	r7, [r5, #0]
    if (out_chan != NULL) {
   234e0:	b104      	cbz	r4, 234e4 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   234e2:	6023      	str	r3, [r4, #0]
}
   234e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   234e6:	2007      	movs	r0, #7
   234e8:	e7f8      	b.n	234dc <ble_hs_misc_conn_chan_find+0x1c>
        chan = NULL;
   234ea:	4603      	mov	r3, r0
        rc = BLE_HS_ENOTCONN;
   234ec:	2007      	movs	r0, #7
   234ee:	e7f5      	b.n	234dc <ble_hs_misc_conn_chan_find+0x1c>

000234f0 <ble_hs_misc_conn_chan_find_reqd>:
{
   234f0:	b530      	push	{r4, r5, lr}
   234f2:	b083      	sub	sp, #12
   234f4:	4615      	mov	r5, r2
   234f6:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   234f8:	ab01      	add	r3, sp, #4
   234fa:	466a      	mov	r2, sp
   234fc:	f7ff ffe0 	bl	234c0 <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   23500:	b928      	cbnz	r0, 2350e <ble_hs_misc_conn_chan_find_reqd+0x1e>
    if (out_conn != NULL) {
   23502:	b10d      	cbz	r5, 23508 <ble_hs_misc_conn_chan_find_reqd+0x18>
        *out_conn = conn;
   23504:	9b00      	ldr	r3, [sp, #0]
   23506:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   23508:	b10c      	cbz	r4, 2350e <ble_hs_misc_conn_chan_find_reqd+0x1e>
        *out_chan = chan;
   2350a:	9b01      	ldr	r3, [sp, #4]
   2350c:	6023      	str	r3, [r4, #0]
}
   2350e:	b003      	add	sp, #12
   23510:	bd30      	pop	{r4, r5, pc}

00023512 <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   23512:	2801      	cmp	r0, #1
   23514:	d002      	beq.n	2351c <ble_hs_misc_own_addr_type_to_id+0xa>
   23516:	2803      	cmp	r0, #3
   23518:	d001      	beq.n	2351e <ble_hs_misc_own_addr_type_to_id+0xc>
   2351a:	2000      	movs	r0, #0
}
   2351c:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   2351e:	2001      	movs	r0, #1
   23520:	4770      	bx	lr

00023522 <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   23522:	2801      	cmp	r0, #1
   23524:	d002      	beq.n	2352c <ble_hs_misc_peer_addr_type_to_id+0xa>
   23526:	2803      	cmp	r0, #3
   23528:	d001      	beq.n	2352e <ble_hs_misc_peer_addr_type_to_id+0xc>
   2352a:	2000      	movs	r0, #0
}
   2352c:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   2352e:	2001      	movs	r0, #1
   23530:	4770      	bx	lr
	...

00023534 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   23534:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   23536:	2200      	movs	r2, #0
   23538:	4902      	ldr	r1, [pc, #8]	; (23544 <ble_hs_misc_restore_irks+0x10>)
   2353a:	2002      	movs	r0, #2
   2353c:	f002 fe0b 	bl	26156 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   23540:	bd08      	pop	{r3, pc}
   23542:	bf00      	nop
   23544:	0002348d 	.word	0x0002348d

00023548 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   23548:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   2354a:	2000      	movs	r0, #0
   2354c:	6018      	str	r0, [r3, #0]
   2354e:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   23550:	6098      	str	r0, [r3, #8]
   23552:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   23554:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23556:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   23558:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   2355a:	4770      	bx	lr

0002355c <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   2355c:	b538      	push	{r3, r4, r5, lr}
   2355e:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   23560:	f7ea fff2 	bl	e548 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   23564:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   23566:	b114      	cbz	r4, 2356e <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   23568:	6863      	ldr	r3, [r4, #4]
   2356a:	602b      	str	r3, [r5, #0]
   2356c:	b12b      	cbz	r3, 2357a <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   2356e:	f7ea fff1 	bl	e554 <os_arch_restore_sr>

    if (mp) {
   23572:	b104      	cbz	r4, 23576 <ble_mqueue_get+0x1a>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   23574:	3c10      	subs	r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   23576:	4620      	mov	r0, r4
   23578:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   2357a:	606d      	str	r5, [r5, #4]
   2357c:	e7f7      	b.n	2356e <ble_mqueue_get+0x12>

0002357e <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   2357e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   23580:	7953      	ldrb	r3, [r2, #5]
   23582:	2b07      	cmp	r3, #7
   23584:	d916      	bls.n	235b4 <ble_mqueue_put+0x36>
   23586:	4605      	mov	r5, r0
   23588:	460e      	mov	r6, r1
   2358a:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   2358c:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   23590:	f7ea ffda 	bl	e548 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   23594:	2300      	movs	r3, #0
   23596:	f844 3f14 	str.w	r3, [r4, #20]!
   2359a:	686b      	ldr	r3, [r5, #4]
   2359c:	601f      	str	r7, [r3, #0]
   2359e:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   235a0:	f7ea ffd8 	bl	e554 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   235a4:	b146      	cbz	r6, 235b8 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   235a6:	f105 0108 	add.w	r1, r5, #8
   235aa:	4630      	mov	r0, r6
   235ac:	f7e9 fe2d 	bl	d20a <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   235b0:	2000      	movs	r0, #0
}
   235b2:	e000      	b.n	235b6 <ble_mqueue_put+0x38>
err:
    return (rc);
   235b4:	2002      	movs	r0, #2
}
   235b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   235b8:	2000      	movs	r0, #0
   235ba:	e7fc      	b.n	235b6 <ble_mqueue_put+0x38>

000235bc <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   235bc:	1e43      	subs	r3, r0, #1
   235be:	b29b      	uxth	r3, r3
   235c0:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   235c4:	4293      	cmp	r3, r2
   235c6:	d80e      	bhi.n	235e6 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   235c8:	b500      	push	{lr}
   235ca:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   235cc:	f8ad 000c 	strh.w	r0, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   235d0:	2300      	movs	r3, #0
   235d2:	9300      	str	r3, [sp, #0]
   235d4:	2202      	movs	r2, #2
   235d6:	a903      	add	r1, sp, #12
   235d8:	f242 002e 	movw	r0, #8238	; 0x202e
   235dc:	f7ff f9fc 	bl	229d8 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   235e0:	b005      	add	sp, #20
   235e2:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   235e6:	2012      	movs	r0, #18
}
   235e8:	4770      	bx	lr

000235ea <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   235ea:	b500      	push	{lr}
   235ec:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   235ee:	2100      	movs	r1, #0
   235f0:	9100      	str	r1, [sp, #0]
   235f2:	460b      	mov	r3, r1
   235f4:	460a      	mov	r2, r1
   235f6:	f242 0029 	movw	r0, #8233	; 0x2029
   235fa:	f7ff f9ed 	bl	229d8 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   235fe:	b003      	add	sp, #12
   23600:	f85d fb04 	ldr.w	pc, [sp], #4

00023604 <ble_hs_pvcy_set_resolve_enabled>:
{
   23604:	b500      	push	{lr}
   23606:	b085      	sub	sp, #20
    cmd.enable = enable;
   23608:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2360c:	2300      	movs	r3, #0
   2360e:	9300      	str	r3, [sp, #0]
   23610:	2201      	movs	r2, #1
   23612:	a903      	add	r1, sp, #12
   23614:	f242 002d 	movw	r0, #8237	; 0x202d
   23618:	f7ff f9de 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   2361c:	b005      	add	sp, #20
   2361e:	f85d fb04 	ldr.w	pc, [sp], #4

00023622 <ble_hs_pvcy_remove_entry>:
{
   23622:	b500      	push	{lr}
   23624:	b085      	sub	sp, #20
    if (addr_type > BLE_ADDR_RANDOM) {
   23626:	2801      	cmp	r0, #1
   23628:	d901      	bls.n	2362e <ble_hs_pvcy_remove_entry+0xc>
        addr_type = addr_type % 2;
   2362a:	f000 0001 	and.w	r0, r0, #1
    cmd.peer_addr_type = addr_type;
   2362e:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(cmd.peer_id_addr, addr, BLE_DEV_ADDR_LEN);
   23632:	680b      	ldr	r3, [r1, #0]
   23634:	f8cd 3009 	str.w	r3, [sp, #9]
   23638:	888b      	ldrh	r3, [r1, #4]
   2363a:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2363e:	2300      	movs	r3, #0
   23640:	9300      	str	r3, [sp, #0]
   23642:	2207      	movs	r2, #7
   23644:	a902      	add	r1, sp, #8
   23646:	f242 0028 	movw	r0, #8232	; 0x2028
   2364a:	f7ff f9c5 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   2364e:	b005      	add	sp, #20
   23650:	f85d fb04 	ldr.w	pc, [sp], #4

00023654 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   23654:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   23656:	4b07      	ldr	r3, [pc, #28]	; (23674 <ble_hs_pvcy_ensure_started+0x20>)
   23658:	781b      	ldrb	r3, [r3, #0]
   2365a:	b10b      	cbz	r3, 23660 <ble_hs_pvcy_ensure_started+0xc>
        return 0;
   2365c:	2000      	movs	r0, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   2365e:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   23660:	f44f 7096 	mov.w	r0, #300	; 0x12c
   23664:	f7ff ffaa 	bl	235bc <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   23668:	2800      	cmp	r0, #0
   2366a:	d1f8      	bne.n	2365e <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   2366c:	4b01      	ldr	r3, [pc, #4]	; (23674 <ble_hs_pvcy_ensure_started+0x20>)
   2366e:	2201      	movs	r2, #1
   23670:	701a      	strb	r2, [r3, #0]
    return 0;
   23672:	e7f4      	b.n	2365e <ble_hs_pvcy_ensure_started+0xa>
   23674:	2000367c 	.word	0x2000367c

00023678 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   23678:	4b01      	ldr	r3, [pc, #4]	; (23680 <ble_hs_pvcy_our_irk+0x8>)
   2367a:	6003      	str	r3, [r0, #0]
    return 0;
}
   2367c:	2000      	movs	r0, #0
   2367e:	4770      	bx	lr
   23680:	2000366c 	.word	0x2000366c

00023684 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   23684:	7803      	ldrb	r3, [r0, #0]
   23686:	2b01      	cmp	r3, #1
   23688:	d819      	bhi.n	236be <ble_hs_pvcy_set_mode+0x3a>
{
   2368a:	b500      	push	{lr}
   2368c:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.mode = priv_mode;
   2368e:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   23692:	7803      	ldrb	r3, [r0, #0]
   23694:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   23698:	f850 3f01 	ldr.w	r3, [r0, #1]!
   2369c:	f8cd 3009 	str.w	r3, [sp, #9]
   236a0:	8883      	ldrh	r3, [r0, #4]
   236a2:	f8ad 300d 	strh.w	r3, [sp, #13]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   236a6:	2300      	movs	r3, #0
   236a8:	9300      	str	r3, [sp, #0]
   236aa:	2208      	movs	r2, #8
   236ac:	eb0d 0102 	add.w	r1, sp, r2
   236b0:	f242 004e 	movw	r0, #8270	; 0x204e
   236b4:	f7ff f990 	bl	229d8 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   236b8:	b005      	add	sp, #20
   236ba:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   236be:	2012      	movs	r0, #18
}
   236c0:	4770      	bx	lr
	...

000236c4 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   236c4:	2901      	cmp	r1, #1
   236c6:	d83a      	bhi.n	2373e <ble_hs_pvcy_add_entry_hci+0x7a>
{
   236c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   236ca:	b08f      	sub	sp, #60	; 0x3c
   236cc:	4607      	mov	r7, r0
   236ce:	460d      	mov	r5, r1
   236d0:	4614      	mov	r4, r2
    cmd.peer_addr_type = addr_type;
   236d2:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   236d6:	6803      	ldr	r3, [r0, #0]
   236d8:	f8cd 3011 	str.w	r3, [sp, #17]
   236dc:	8883      	ldrh	r3, [r0, #4]
   236de:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   236e2:	4e18      	ldr	r6, [pc, #96]	; (23744 <ble_hs_pvcy_add_entry_hci+0x80>)
   236e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   236e6:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   236ea:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   236ee:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   236f2:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   236f6:	6820      	ldr	r0, [r4, #0]
   236f8:	6861      	ldr	r1, [r4, #4]
   236fa:	68a2      	ldr	r2, [r4, #8]
   236fc:	68e3      	ldr	r3, [r4, #12]
   236fe:	f8cd 0017 	str.w	r0, [sp, #23]
   23702:	f8cd 101b 	str.w	r1, [sp, #27]
   23706:	f8cd 201f 	str.w	r2, [sp, #31]
   2370a:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2370e:	2300      	movs	r3, #0
   23710:	9300      	str	r3, [sp, #0]
   23712:	2227      	movs	r2, #39	; 0x27
   23714:	a904      	add	r1, sp, #16
   23716:	f242 0027 	movw	r0, #8231	; 0x2027
   2371a:	f7ff f95d 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2371e:	b108      	cbz	r0, 23724 <ble_hs_pvcy_add_entry_hci+0x60>
}
   23720:	b00f      	add	sp, #60	; 0x3c
   23722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   23724:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   23728:	683b      	ldr	r3, [r7, #0]
   2372a:	f8cd 3009 	str.w	r3, [sp, #9]
   2372e:	88bb      	ldrh	r3, [r7, #4]
   23730:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   23734:	2101      	movs	r1, #1
   23736:	a802      	add	r0, sp, #8
   23738:	f7ff ffa4 	bl	23684 <ble_hs_pvcy_set_mode>
    if (rc != 0) {
   2373c:	e7f0      	b.n	23720 <ble_hs_pvcy_add_entry_hci+0x5c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2373e:	2012      	movs	r0, #18
}
   23740:	4770      	bx	lr
   23742:	bf00      	nop
   23744:	2000366c 	.word	0x2000366c

00023748 <ble_hs_pvcy_add_entry>:
{
   23748:	b570      	push	{r4, r5, r6, lr}
   2374a:	4604      	mov	r4, r0
   2374c:	460d      	mov	r5, r1
   2374e:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   23750:	4a0a      	ldr	r2, [pc, #40]	; (2377c <ble_hs_pvcy_add_entry+0x34>)
   23752:	6b13      	ldr	r3, [r2, #48]	; 0x30
   23754:	3301      	adds	r3, #1
   23756:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   23758:	f7fb ff5c 	bl	1f614 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   2375c:	4632      	mov	r2, r6
   2375e:	4629      	mov	r1, r5
   23760:	4620      	mov	r0, r4
   23762:	f7ff ffaf 	bl	236c4 <ble_hs_pvcy_add_entry_hci>
   23766:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   23768:	f7fb ff60 	bl	1f62c <ble_gap_preempt_done>
    if (rc != 0) {
   2376c:	b11c      	cbz	r4, 23776 <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   2376e:	4a03      	ldr	r2, [pc, #12]	; (2377c <ble_hs_pvcy_add_entry+0x34>)
   23770:	6b53      	ldr	r3, [r2, #52]	; 0x34
   23772:	3301      	adds	r3, #1
   23774:	6353      	str	r3, [r2, #52]	; 0x34
}
   23776:	4620      	mov	r0, r4
   23778:	bd70      	pop	{r4, r5, r6, pc}
   2377a:	bf00      	nop
   2377c:	20003404 	.word	0x20003404

00023780 <ble_hs_pvcy_set_our_irk>:
{
   23780:	b510      	push	{r4, lr}
   23782:	b086      	sub	sp, #24
    if (irk != NULL) {
   23784:	b170      	cbz	r0, 237a4 <ble_hs_pvcy_set_our_irk+0x24>
   23786:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   23788:	466c      	mov	r4, sp
   2378a:	6800      	ldr	r0, [r0, #0]
   2378c:	6859      	ldr	r1, [r3, #4]
   2378e:	689a      	ldr	r2, [r3, #8]
   23790:	68db      	ldr	r3, [r3, #12]
   23792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   23794:	2210      	movs	r2, #16
   23796:	4669      	mov	r1, sp
   23798:	4815      	ldr	r0, [pc, #84]	; (237f0 <ble_hs_pvcy_set_our_irk+0x70>)
   2379a:	f7eb f8e9 	bl	e970 <memcmp>
   2379e:	b938      	cbnz	r0, 237b0 <ble_hs_pvcy_set_our_irk+0x30>
}
   237a0:	b006      	add	sp, #24
   237a2:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   237a4:	4b13      	ldr	r3, [pc, #76]	; (237f4 <ble_hs_pvcy_set_our_irk+0x74>)
   237a6:	466c      	mov	r4, sp
   237a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   237aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   237ae:	e7f1      	b.n	23794 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   237b0:	4c0f      	ldr	r4, [pc, #60]	; (237f0 <ble_hs_pvcy_set_our_irk+0x70>)
   237b2:	466b      	mov	r3, sp
   237b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   237b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   237ba:	2000      	movs	r0, #0
   237bc:	f7ff ff22 	bl	23604 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   237c0:	2800      	cmp	r0, #0
   237c2:	d1ed      	bne.n	237a0 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_clear_entries();
   237c4:	f7ff ff11 	bl	235ea <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   237c8:	2800      	cmp	r0, #0
   237ca:	d1e9      	bne.n	237a0 <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   237cc:	2001      	movs	r0, #1
   237ce:	f7ff ff19 	bl	23604 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   237d2:	2800      	cmp	r0, #0
   237d4:	d1e4      	bne.n	237a0 <ble_hs_pvcy_set_our_irk+0x20>
        memset(tmp_addr, 0, 6);
   237d6:	2100      	movs	r1, #0
   237d8:	9104      	str	r1, [sp, #16]
   237da:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   237de:	9100      	str	r1, [sp, #0]
   237e0:	9101      	str	r1, [sp, #4]
   237e2:	9102      	str	r1, [sp, #8]
   237e4:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   237e6:	466a      	mov	r2, sp
   237e8:	a804      	add	r0, sp, #16
   237ea:	f7ff ffad 	bl	23748 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   237ee:	e7d7      	b.n	237a0 <ble_hs_pvcy_set_our_irk+0x20>
   237f0:	2000366c 	.word	0x2000366c
   237f4:	0002e444 	.word	0x0002e444

000237f8 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   237f8:	b500      	push	{lr}
   237fa:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   237fc:	2100      	movs	r1, #0
   237fe:	9100      	str	r1, [sp, #0]
   23800:	460b      	mov	r3, r1
   23802:	460a      	mov	r2, r1
   23804:	f640 4003 	movw	r0, #3075	; 0xc03
   23808:	f7ff f8e6 	bl	229d8 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   2380c:	b003      	add	sp, #12
   2380e:	f85d fb04 	ldr.w	pc, [sp], #4

00023812 <ble_hs_startup_le_read_buf_sz_tx>:
{
   23812:	b530      	push	{r4, r5, lr}
   23814:	b085      	sub	sp, #20
   23816:	4605      	mov	r5, r0
   23818:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2381a:	2303      	movs	r3, #3
   2381c:	9300      	str	r3, [sp, #0]
   2381e:	ab03      	add	r3, sp, #12
   23820:	2200      	movs	r2, #0
   23822:	4611      	mov	r1, r2
   23824:	f242 0002 	movw	r0, #8194	; 0x2002
   23828:	f7ff f8d6 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2382c:	b928      	cbnz	r0, 2383a <ble_hs_startup_le_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.data_len);
   2382e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   23832:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   23834:	f89d 300e 	ldrb.w	r3, [sp, #14]
   23838:	7023      	strb	r3, [r4, #0]
}
   2383a:	b005      	add	sp, #20
   2383c:	bd30      	pop	{r4, r5, pc}

0002383e <ble_hs_startup_read_buf_sz_tx>:
{
   2383e:	b530      	push	{r4, r5, lr}
   23840:	b085      	sub	sp, #20
   23842:	4605      	mov	r5, r0
   23844:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   23846:	2307      	movs	r3, #7
   23848:	9300      	str	r3, [sp, #0]
   2384a:	ab02      	add	r3, sp, #8
   2384c:	2200      	movs	r2, #0
   2384e:	4611      	mov	r1, r2
   23850:	f241 0005 	movw	r0, #4101	; 0x1005
   23854:	f7ff f8c0 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23858:	b928      	cbnz	r0, 23866 <ble_hs_startup_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.acl_data_len);
   2385a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2385e:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   23860:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   23864:	8023      	strh	r3, [r4, #0]
}
   23866:	b005      	add	sp, #20
   23868:	bd30      	pop	{r4, r5, pc}

0002386a <ble_hs_startup_read_local_ver_tx>:
{
   2386a:	b510      	push	{r4, lr}
   2386c:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   2386e:	2308      	movs	r3, #8
   23870:	9300      	str	r3, [sp, #0]
   23872:	446b      	add	r3, sp
   23874:	2200      	movs	r2, #0
   23876:	4611      	mov	r1, r2
   23878:	f241 0001 	movw	r0, #4097	; 0x1001
   2387c:	f7ff f8ac 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   23880:	4604      	mov	r4, r0
   23882:	b110      	cbz	r0, 2388a <ble_hs_startup_read_local_ver_tx+0x20>
}
   23884:	4620      	mov	r0, r4
   23886:	b004      	add	sp, #16
   23888:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   2388a:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2388e:	f7ff f963 	bl	22b58 <ble_hs_hci_set_hci_version>
    return 0;
   23892:	e7f7      	b.n	23884 <ble_hs_startup_read_local_ver_tx+0x1a>
   23894:	0000      	movs	r0, r0
	...

00023898 <ble_hs_startup_set_evmask_tx>:
{
   23898:	b510      	push	{r4, lr}
   2389a:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   2389c:	f7ff f962 	bl	22b64 <ble_hs_hci_get_hci_version>
   238a0:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   238a2:	a311      	add	r3, pc, #68	; (adr r3, 238e8 <ble_hs_startup_set_evmask_tx+0x50>)
   238a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   238a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   238ac:	2300      	movs	r3, #0
   238ae:	9300      	str	r3, [sp, #0]
   238b0:	2208      	movs	r2, #8
   238b2:	a904      	add	r1, sp, #16
   238b4:	f640 4001 	movw	r0, #3073	; 0xc01
   238b8:	f7ff f88e 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   238bc:	b908      	cbnz	r0, 238c2 <ble_hs_startup_set_evmask_tx+0x2a>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   238be:	2c06      	cmp	r4, #6
   238c0:	d801      	bhi.n	238c6 <ble_hs_startup_set_evmask_tx+0x2e>
}
   238c2:	b006      	add	sp, #24
   238c4:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   238c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   238ca:	2300      	movs	r3, #0
   238cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   238d0:	2300      	movs	r3, #0
   238d2:	9300      	str	r3, [sp, #0]
   238d4:	2208      	movs	r2, #8
   238d6:	eb0d 0102 	add.w	r1, sp, r2
   238da:	f640 4063 	movw	r0, #3171	; 0xc63
   238de:	f7ff f87b 	bl	229d8 <ble_hs_hci_cmd_tx>
        if (rc != 0) {
   238e2:	e7ee      	b.n	238c2 <ble_hs_startup_set_evmask_tx+0x2a>
   238e4:	f3af 8000 	nop.w
   238e8:	02008090 	.word	0x02008090
   238ec:	20008000 	.word	0x20008000

000238f0 <ble_hs_startup_le_set_evmask_tx>:
{
   238f0:	b500      	push	{lr}
   238f2:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   238f4:	f7ff f936 	bl	22b64 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   238f8:	2806      	cmp	r0, #6
   238fa:	d819      	bhi.n	23930 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   238fc:	231f      	movs	r3, #31
   238fe:	2200      	movs	r2, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   23900:	2807      	cmp	r0, #7
   23902:	d901      	bls.n	23908 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   23904:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   23908:	2808      	cmp	r0, #8
   2390a:	d903      	bls.n	23914 <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   2390c:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
   23910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    cmd.event_mask = htole64(mask);
   23914:	9302      	str	r3, [sp, #8]
   23916:	9203      	str	r2, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   23918:	2300      	movs	r3, #0
   2391a:	9300      	str	r3, [sp, #0]
   2391c:	2208      	movs	r2, #8
   2391e:	eb0d 0102 	add.w	r1, sp, r2
   23922:	f242 0001 	movw	r0, #8193	; 0x2001
   23926:	f7ff f857 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   2392a:	b005      	add	sp, #20
   2392c:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   23930:	233f      	movs	r3, #63	; 0x3f
   23932:	2200      	movs	r2, #0
   23934:	e7e4      	b.n	23900 <ble_hs_startup_le_set_evmask_tx+0x10>

00023936 <ble_hs_startup_read_buf_sz>:
{
   23936:	b500      	push	{lr}
   23938:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   2393a:	2300      	movs	r3, #0
   2393c:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   23940:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   23944:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   23948:	f88d 3001 	strb.w	r3, [sp, #1]
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   2394c:	f10d 0101 	add.w	r1, sp, #1
   23950:	f10d 0006 	add.w	r0, sp, #6
   23954:	f7ff ff5d 	bl	23812 <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   23958:	4603      	mov	r3, r0
   2395a:	b978      	cbnz	r0, 2397c <ble_hs_startup_read_buf_sz+0x46>
    if (le_pktlen != 0) {
   2395c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   23960:	b183      	cbz	r3, 23984 <ble_hs_startup_read_buf_sz+0x4e>
        pktlen = le_pktlen;
   23962:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   23966:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2396a:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   2396e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   23972:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   23976:	f7ff f80d 	bl	22994 <ble_hs_hci_set_buf_sz>
   2397a:	4603      	mov	r3, r0
}
   2397c:	4618      	mov	r0, r3
   2397e:	b003      	add	sp, #12
   23980:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   23984:	a901      	add	r1, sp, #4
   23986:	f10d 0002 	add.w	r0, sp, #2
   2398a:	f7ff ff58 	bl	2383e <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   2398e:	4603      	mov	r3, r0
   23990:	2800      	cmp	r0, #0
   23992:	d0ec      	beq.n	2396e <ble_hs_startup_read_buf_sz+0x38>
   23994:	e7f2      	b.n	2397c <ble_hs_startup_read_buf_sz+0x46>

00023996 <ble_hs_startup_le_read_sup_f_tx>:
{
   23996:	b510      	push	{r4, lr}
   23998:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2399a:	2308      	movs	r3, #8
   2399c:	9300      	str	r3, [sp, #0]
   2399e:	446b      	add	r3, sp
   239a0:	2200      	movs	r2, #0
   239a2:	4611      	mov	r1, r2
   239a4:	f242 0003 	movw	r0, #8195	; 0x2003
   239a8:	f7ff f816 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   239ac:	4604      	mov	r4, r0
   239ae:	b110      	cbz	r0, 239b6 <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   239b0:	4620      	mov	r0, r4
   239b2:	b004      	add	sp, #16
   239b4:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   239b6:	9802      	ldr	r0, [sp, #8]
   239b8:	f7ff f8c8 	bl	22b4c <ble_hs_hci_set_le_supported_feat>
    return 0;
   239bc:	e7f8      	b.n	239b0 <ble_hs_startup_le_read_sup_f_tx+0x1a>

000239be <ble_hs_startup_read_bd_addr>:
{
   239be:	b510      	push	{r4, lr}
   239c0:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   239c2:	2306      	movs	r3, #6
   239c4:	9300      	str	r3, [sp, #0]
   239c6:	ab02      	add	r3, sp, #8
   239c8:	2200      	movs	r2, #0
   239ca:	4611      	mov	r1, r2
   239cc:	f241 0009 	movw	r0, #4105	; 0x1009
   239d0:	f7ff f802 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   239d4:	4604      	mov	r4, r0
   239d6:	b110      	cbz	r0, 239de <ble_hs_startup_read_bd_addr+0x20>
}
   239d8:	4620      	mov	r0, r4
   239da:	b004      	add	sp, #16
   239dc:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   239de:	a802      	add	r0, sp, #8
   239e0:	f7ff fc0a 	bl	231f8 <ble_hs_id_set_pub>
    return 0;
   239e4:	e7f8      	b.n	239d8 <ble_hs_startup_read_bd_addr+0x1a>

000239e6 <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   239e6:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   239e8:	f7ff ff06 	bl	237f8 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   239ec:	4604      	mov	r4, r0
   239ee:	b108      	cbz	r0, 239f4 <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   239f0:	4620      	mov	r0, r4
   239f2:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   239f4:	f7ff ff39 	bl	2386a <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   239f8:	4604      	mov	r4, r0
   239fa:	2800      	cmp	r0, #0
   239fc:	d1f8      	bne.n	239f0 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   239fe:	f7ff ff4b 	bl	23898 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   23a02:	4604      	mov	r4, r0
   23a04:	2800      	cmp	r0, #0
   23a06:	d1f3      	bne.n	239f0 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   23a08:	f7ff ff72 	bl	238f0 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   23a0c:	4604      	mov	r4, r0
   23a0e:	2800      	cmp	r0, #0
   23a10:	d1ee      	bne.n	239f0 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   23a12:	f7ff ff90 	bl	23936 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   23a16:	4604      	mov	r4, r0
   23a18:	2800      	cmp	r0, #0
   23a1a:	d1e9      	bne.n	239f0 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   23a1c:	f7ff ffbb 	bl	23996 <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   23a20:	4604      	mov	r4, r0
   23a22:	2800      	cmp	r0, #0
   23a24:	d1e4      	bne.n	239f0 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   23a26:	f7ff ffca 	bl	239be <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   23a2a:	4604      	mov	r4, r0
   23a2c:	2800      	cmp	r0, #0
   23a2e:	d1df      	bne.n	239f0 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   23a30:	f7ff fea6 	bl	23780 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   23a34:	f7fe feb6 	bl	227a4 <ble_hs_flow_startup>
    return 0;
   23a38:	e7da      	b.n	239f0 <ble_hs_startup_go+0xa>
	...

00023a3c <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   23a3c:	b538      	push	{r3, r4, r5, lr}
   23a3e:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   23a40:	480b      	ldr	r0, [pc, #44]	; (23a70 <ble_hs_stop_done+0x34>)
   23a42:	f7e9 fa6b 	bl	cf1c <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   23a46:	f7fd ff11 	bl	2186c <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   23a4a:	480a      	ldr	r0, [pc, #40]	; (23a74 <ble_hs_stop_done+0x38>)
   23a4c:	f7fb fe52 	bl	1f6f4 <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   23a50:	4a09      	ldr	r2, [pc, #36]	; (23a78 <ble_hs_stop_done+0x3c>)
   23a52:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   23a54:	2300      	movs	r3, #0
   23a56:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   23a58:	4a08      	ldr	r2, [pc, #32]	; (23a7c <ble_hs_stop_done+0x40>)
   23a5a:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   23a5c:	f7fd ff0a 	bl	21874 <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   23a60:	b12c      	cbz	r4, 23a6e <ble_hs_stop_done+0x32>
        listener->fn(status, listener->arg);
   23a62:	6823      	ldr	r3, [r4, #0]
   23a64:	6861      	ldr	r1, [r4, #4]
   23a66:	4628      	mov	r0, r5
   23a68:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   23a6a:	68a4      	ldr	r4, [r4, #8]
   23a6c:	e7f8      	b.n	23a60 <ble_hs_stop_done+0x24>
    }
}
   23a6e:	bd38      	pop	{r3, r4, r5, pc}
   23a70:	20003690 	.word	0x20003690
   23a74:	20003680 	.word	0x20003680
   23a78:	2000368c 	.word	0x2000368c
   23a7c:	2000332c 	.word	0x2000332c

00023a80 <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   23a80:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   23a82:	4b05      	ldr	r3, [pc, #20]	; (23a98 <ble_hs_stop_terminate_timeout_cb+0x18>)
   23a84:	781b      	ldrb	r3, [r3, #0]
   23a86:	4a05      	ldr	r2, [pc, #20]	; (23a9c <ble_hs_stop_terminate_timeout_cb+0x1c>)
   23a88:	2103      	movs	r1, #3
   23a8a:	2004      	movs	r0, #4
   23a8c:	f7ed fdd4 	bl	11638 <modlog_printf>
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   23a90:	2000      	movs	r0, #0
   23a92:	f7ff ffd3 	bl	23a3c <ble_hs_stop_done>
}
   23a96:	bd08      	pop	{r3, pc}
   23a98:	2000367d 	.word	0x2000367d
   23a9c:	0002e458 	.word	0x0002e458

00023aa0 <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   23aa0:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   23aa2:	f7e9 fc6b 	bl	d37c <os_eventq_dflt_get>
   23aa6:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   23aa8:	2300      	movs	r3, #0
   23aaa:	4a02      	ldr	r2, [pc, #8]	; (23ab4 <ble_hs_stop_init+0x14>)
   23aac:	4802      	ldr	r0, [pc, #8]	; (23ab8 <ble_hs_stop_init+0x18>)
   23aae:	f7e9 fa27 	bl	cf00 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   23ab2:	bd08      	pop	{r3, pc}
   23ab4:	00023a81 	.word	0x00023a81
   23ab8:	20003690 	.word	0x20003690

00023abc <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   23abc:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   23abe:	8903      	ldrh	r3, [r0, #8]
   23ac0:	2b04      	cmp	r3, #4
   23ac2:	d001      	beq.n	23ac8 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   23ac4:	8940      	ldrh	r0, [r0, #10]
}
   23ac6:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   23ac8:	f7f8 fe3b 	bl	1c742 <ble_att_chan_mtu>
   23acc:	e7fb      	b.n	23ac6 <ble_l2cap_get_mtu+0xa>

00023ace <ble_l2cap_append_rx>:
{
   23ace:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   23ad0:	6900      	ldr	r0, [r0, #16]
   23ad2:	f7e9 ffe1 	bl	da98 <os_mbuf_pack_chains>
    assert(m);
   23ad6:	b100      	cbz	r0, 23ada <ble_l2cap_append_rx+0xc>
}
   23ad8:	bd08      	pop	{r3, pc}
    assert(m);
   23ada:	f7e8 fb5f 	bl	c19c <hal_debugger_connected>
   23ade:	b100      	cbz	r0, 23ae2 <ble_l2cap_append_rx+0x14>
   23ae0:	be01      	bkpt	0x0001
   23ae2:	2300      	movs	r3, #0
   23ae4:	461a      	mov	r2, r3
   23ae6:	4619      	mov	r1, r3
   23ae8:	4618      	mov	r0, r3
   23aea:	f7e9 f85b 	bl	cba4 <__assert_func>
	...

00023af0 <ble_l2cap_chan_alloc>:
{
   23af0:	b510      	push	{r4, lr}
   23af2:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   23af4:	4809      	ldr	r0, [pc, #36]	; (23b1c <ble_l2cap_chan_alloc+0x2c>)
   23af6:	f7ea f89a 	bl	dc2e <os_memblock_get>
    if (chan == NULL) {
   23afa:	4603      	mov	r3, r0
   23afc:	b160      	cbz	r0, 23b18 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   23afe:	2200      	movs	r2, #0
   23b00:	6002      	str	r2, [r0, #0]
   23b02:	6042      	str	r2, [r0, #4]
   23b04:	6082      	str	r2, [r0, #8]
   23b06:	60c2      	str	r2, [r0, #12]
   23b08:	6102      	str	r2, [r0, #16]
   23b0a:	6142      	str	r2, [r0, #20]
   23b0c:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   23b0e:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   23b10:	4903      	ldr	r1, [pc, #12]	; (23b20 <ble_l2cap_chan_alloc+0x30>)
   23b12:	68ca      	ldr	r2, [r1, #12]
   23b14:	3201      	adds	r2, #1
   23b16:	60ca      	str	r2, [r1, #12]
}
   23b18:	4618      	mov	r0, r3
   23b1a:	bd10      	pop	{r4, pc}
   23b1c:	20003704 	.word	0x20003704
   23b20:	20003720 	.word	0x20003720

00023b24 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   23b24:	b169      	cbz	r1, 23b42 <ble_l2cap_chan_free+0x1e>
{
   23b26:	b510      	push	{r4, lr}
   23b28:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   23b2a:	6908      	ldr	r0, [r1, #16]
   23b2c:	f7e9 fca2 	bl	d474 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   23b30:	4621      	mov	r1, r4
   23b32:	4804      	ldr	r0, [pc, #16]	; (23b44 <ble_l2cap_chan_free+0x20>)
   23b34:	f7ea f8a3 	bl	dc7e <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   23b38:	4a03      	ldr	r2, [pc, #12]	; (23b48 <ble_l2cap_chan_free+0x24>)
   23b3a:	6913      	ldr	r3, [r2, #16]
   23b3c:	3301      	adds	r3, #1
   23b3e:	6113      	str	r3, [r2, #16]
}
   23b40:	bd10      	pop	{r4, pc}
   23b42:	4770      	bx	lr
   23b44:	20003704 	.word	0x20003704
   23b48:	20003720 	.word	0x20003720

00023b4c <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   23b4c:	7b80      	ldrb	r0, [r0, #14]
}
   23b4e:	f000 0001 	and.w	r0, r0, #1
   23b52:	4770      	bx	lr

00023b54 <ble_l2cap_parse_hdr>:
{
   23b54:	b538      	push	{r3, r4, r5, lr}
   23b56:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   23b58:	4613      	mov	r3, r2
   23b5a:	2204      	movs	r2, #4
   23b5c:	f7e9 fd34 	bl	d5c8 <os_mbuf_copydata>
    if (rc != 0) {
   23b60:	b960      	cbnz	r0, 23b7c <ble_l2cap_parse_hdr+0x28>
   23b62:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   23b64:	4620      	mov	r0, r4
   23b66:	f007 f838 	bl	2abda <get_le16>
   23b6a:	4623      	mov	r3, r4
   23b6c:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   23b70:	4618      	mov	r0, r3
   23b72:	f007 f832 	bl	2abda <get_le16>
   23b76:	8060      	strh	r0, [r4, #2]
}
   23b78:	4628      	mov	r0, r5
   23b7a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   23b7c:	2504      	movs	r5, #4
   23b7e:	e7fb      	b.n	23b78 <ble_l2cap_parse_hdr+0x24>

00023b80 <ble_l2cap_prepend_hdr>:
{
   23b80:	b530      	push	{r4, r5, lr}
   23b82:	b083      	sub	sp, #12
   23b84:	4604      	mov	r4, r0
   23b86:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   23b88:	4611      	mov	r1, r2
   23b8a:	a801      	add	r0, sp, #4
   23b8c:	f007 f804 	bl	2ab98 <put_le16>
    put_le16(&hdr.cid, cid);
   23b90:	4629      	mov	r1, r5
   23b92:	f10d 0006 	add.w	r0, sp, #6
   23b96:	f006 ffff 	bl	2ab98 <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   23b9a:	2104      	movs	r1, #4
   23b9c:	4620      	mov	r0, r4
   23b9e:	f7e9 ff48 	bl	da32 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   23ba2:	b110      	cbz	r0, 23baa <ble_l2cap_prepend_hdr+0x2a>
    memcpy(om->om_data, &hdr, sizeof hdr);
   23ba4:	6803      	ldr	r3, [r0, #0]
   23ba6:	9a01      	ldr	r2, [sp, #4]
   23ba8:	601a      	str	r2, [r3, #0]
}
   23baa:	b003      	add	sp, #12
   23bac:	bd30      	pop	{r4, r5, pc}

00023bae <ble_l2cap_get_conn_handle>:
    if (!chan) {
   23bae:	b108      	cbz	r0, 23bb4 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   23bb0:	8880      	ldrh	r0, [r0, #4]
   23bb2:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   23bb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   23bb8:	4770      	bx	lr

00023bba <ble_l2cap_remove_rx>:
{
   23bba:	b538      	push	{r3, r4, r5, lr}
   23bbc:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   23bbe:	2500      	movs	r5, #0
   23bc0:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   23bc2:	6908      	ldr	r0, [r1, #16]
   23bc4:	f7e9 fc56 	bl	d474 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   23bc8:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   23bca:	82a5      	strh	r5, [r4, #20]
}
   23bcc:	bd38      	pop	{r3, r4, r5, pc}

00023bce <ble_l2cap_rx_payload>:
{
   23bce:	b570      	push	{r4, r5, r6, lr}
   23bd0:	4605      	mov	r5, r0
   23bd2:	460c      	mov	r4, r1
   23bd4:	4611      	mov	r1, r2
   23bd6:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   23bd8:	6923      	ldr	r3, [r4, #16]
   23bda:	b163      	cbz	r3, 23bf6 <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   23bdc:	4620      	mov	r0, r4
   23bde:	f7ff ff76 	bl	23ace <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   23be2:	6923      	ldr	r3, [r4, #16]
   23be4:	8a1a      	ldrh	r2, [r3, #16]
   23be6:	8aa0      	ldrh	r0, [r4, #20]
   23be8:	1a10      	subs	r0, r2, r0
    if (len_diff > 0) {
   23bea:	2800      	cmp	r0, #0
   23bec:	dc05      	bgt.n	23bfa <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   23bee:	b950      	cbnz	r0, 23c06 <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   23bf0:	69a3      	ldr	r3, [r4, #24]
   23bf2:	6033      	str	r3, [r6, #0]
}
   23bf4:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   23bf6:	6122      	str	r2, [r4, #16]
   23bf8:	e7f3      	b.n	23be2 <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   23bfa:	4621      	mov	r1, r4
   23bfc:	4628      	mov	r0, r5
   23bfe:	f7ff ffdc 	bl	23bba <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   23c02:	200a      	movs	r0, #10
   23c04:	e7f6      	b.n	23bf4 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   23c06:	f7ea fbd9 	bl	e3bc <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   23c0a:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   23c0e:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   23c10:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   23c12:	f7fd ff1b 	bl	21a4c <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   23c16:	2001      	movs	r0, #1
    return rc;
   23c18:	e7ec      	b.n	23bf4 <ble_l2cap_rx_payload+0x26>

00023c1a <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   23c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c1e:	b082      	sub	sp, #8
   23c20:	4606      	mov	r6, r0
   23c22:	4614      	mov	r4, r2
   23c24:	461f      	mov	r7, r3
   23c26:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   23c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23c2c:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   23c2e:	8809      	ldrh	r1, [r1, #0]
   23c30:	f3c1 3101 	ubfx	r1, r1, #12, #2
    switch (pb) {
   23c34:	2901      	cmp	r1, #1
   23c36:	d031      	beq.n	23c9c <ble_l2cap_rx+0x82>
   23c38:	2902      	cmp	r1, #2
   23c3a:	d141      	bne.n	23cc0 <ble_l2cap_rx+0xa6>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   23c3c:	aa01      	add	r2, sp, #4
   23c3e:	2100      	movs	r1, #0
   23c40:	4620      	mov	r0, r4
   23c42:	f7ff ff87 	bl	23b54 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   23c46:	4680      	mov	r8, r0
   23c48:	bbe0      	cbnz	r0, 23cc4 <ble_l2cap_rx+0xaa>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   23c4a:	2104      	movs	r1, #4
   23c4c:	4620      	mov	r0, r4
   23c4e:	f7e9 fce8 	bl	d622 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   23c52:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   23c56:	4630      	mov	r0, r6
   23c58:	f7fe fbb0 	bl	223bc <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   23c5c:	4680      	mov	r8, r0
   23c5e:	b198      	cbz	r0, 23c88 <ble_l2cap_rx+0x6e>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   23c60:	6903      	ldr	r3, [r0, #16]
   23c62:	b11b      	cbz	r3, 23c6c <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   23c64:	4601      	mov	r1, r0
   23c66:	4630      	mov	r0, r6
   23c68:	f7ff ffa7 	bl	23bba <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   23c6c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   23c70:	4640      	mov	r0, r8
   23c72:	f7ff ff23 	bl	23abc <ble_l2cap_get_mtu>
   23c76:	4285      	cmp	r5, r0
   23c78:	d82b      	bhi.n	23cd2 <ble_l2cap_rx+0xb8>
            ble_l2cap_disconnect(chan);
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   23c7a:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   23c7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   23c82:	f8a8 3014 	strh.w	r3, [r8, #20]
        break;
   23c86:	e011      	b.n	23cac <ble_l2cap_rx+0x92>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   23c88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   23c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   23c90:	4293      	cmp	r3, r2
   23c92:	d000      	beq.n	23c96 <ble_l2cap_rx+0x7c>
                *out_reject_cid = l2cap_hdr.cid;
   23c94:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   23c96:	f04f 0805 	mov.w	r8, #5
            goto err;
   23c9a:	e013      	b.n	23cc4 <ble_l2cap_rx+0xaa>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   23c9c:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   23ca0:	f1b8 0f00 	cmp.w	r8, #0
   23ca4:	d018      	beq.n	23cd8 <ble_l2cap_rx+0xbe>
   23ca6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   23caa:	b1c3      	cbz	r3, 23cde <ble_l2cap_rx+0xc4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   23cac:	463b      	mov	r3, r7
   23cae:	4622      	mov	r2, r4
   23cb0:	4641      	mov	r1, r8
   23cb2:	4630      	mov	r0, r6
   23cb4:	f7ff ff8b 	bl	23bce <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   23cb8:	4680      	mov	r8, r0
   23cba:	b130      	cbz	r0, 23cca <ble_l2cap_rx+0xb0>
    om = NULL;
   23cbc:	2400      	movs	r4, #0
   23cbe:	e001      	b.n	23cc4 <ble_l2cap_rx+0xaa>
    switch (pb) {
   23cc0:	f04f 080a 	mov.w	r8, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   23cc4:	4620      	mov	r0, r4
   23cc6:	f7e9 fbd5 	bl	d474 <os_mbuf_free_chain>
    return rc;
}
   23cca:	4640      	mov	r0, r8
   23ccc:	b002      	add	sp, #8
   23cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_EBADDATA;
   23cd2:	f04f 080a 	mov.w	r8, #10
   23cd6:	e7f5      	b.n	23cc4 <ble_l2cap_rx+0xaa>
            rc = BLE_HS_EBADDATA;
   23cd8:	f04f 080a 	mov.w	r8, #10
   23cdc:	e7f2      	b.n	23cc4 <ble_l2cap_rx+0xaa>
   23cde:	f04f 080a 	mov.w	r8, #10
   23ce2:	e7ef      	b.n	23cc4 <ble_l2cap_rx+0xaa>

00023ce4 <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   23ce4:	b510      	push	{r4, lr}
   23ce6:	b082      	sub	sp, #8
   23ce8:	4604      	mov	r4, r0
   23cea:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   23cec:	4610      	mov	r0, r2
   23cee:	8a12      	ldrh	r2, [r2, #16]
   23cf0:	88c9      	ldrh	r1, [r1, #6]
   23cf2:	f7ff ff45 	bl	23b80 <ble_l2cap_prepend_hdr>
   23cf6:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   23cf8:	b188      	cbz	r0, 23d1e <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   23cfa:	a901      	add	r1, sp, #4
   23cfc:	4620      	mov	r0, r4
   23cfe:	f7fe ff1d 	bl	22b3c <ble_hs_hci_acl_tx>
    switch (rc) {
   23d02:	b150      	cbz	r0, 23d1a <ble_l2cap_tx+0x36>
   23d04:	2801      	cmp	r0, #1
   23d06:	d108      	bne.n	23d1a <ble_l2cap_tx+0x36>
        /* Success. */
        return 0;

    case BLE_HS_EAGAIN:
        /* Controller could not accommodate full packet.  Enqueue remainder. */
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   23d08:	9b01      	ldr	r3, [sp, #4]
   23d0a:	2000      	movs	r0, #0
   23d0c:	6158      	str	r0, [r3, #20]
   23d0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   23d10:	3310      	adds	r3, #16
   23d12:	6013      	str	r3, [r2, #0]
   23d14:	9b01      	ldr	r3, [sp, #4]
   23d16:	3314      	adds	r3, #20
   23d18:	6423      	str	r3, [r4, #64]	; 0x40

    default:
        /* Error. */
        return rc;
    }
}
   23d1a:	b002      	add	sp, #8
   23d1c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   23d1e:	2006      	movs	r0, #6
   23d20:	e7fb      	b.n	23d1a <ble_l2cap_tx+0x36>
	...

00023d24 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   23d24:	b500      	push	{lr}
   23d26:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   23d28:	4b11      	ldr	r3, [pc, #68]	; (23d70 <ble_l2cap_init+0x4c>)
   23d2a:	9300      	str	r3, [sp, #0]
   23d2c:	4b11      	ldr	r3, [pc, #68]	; (23d74 <ble_l2cap_init+0x50>)
   23d2e:	221c      	movs	r2, #28
   23d30:	2103      	movs	r1, #3
   23d32:	4811      	ldr	r0, [pc, #68]	; (23d78 <ble_l2cap_init+0x54>)
   23d34:	f7e9 ff44 	bl	dbc0 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   23d38:	b9a0      	cbnz	r0, 23d64 <ble_l2cap_init+0x40>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   23d3a:	f000 fa71 	bl	24220 <ble_l2cap_sig_init>
    if (rc != 0) {
   23d3e:	4603      	mov	r3, r0
   23d40:	b988      	cbnz	r0, 23d66 <ble_l2cap_init+0x42>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   23d42:	f001 ff7d 	bl	25c40 <ble_sm_init>
    if (rc != 0) {
   23d46:	4603      	mov	r3, r0
   23d48:	b968      	cbnz	r0, 23d66 <ble_l2cap_init+0x42>
        return rc;
    }

    rc = stats_init_and_reg(
   23d4a:	4b0c      	ldr	r3, [pc, #48]	; (23d7c <ble_l2cap_init+0x58>)
   23d4c:	9301      	str	r3, [sp, #4]
   23d4e:	2300      	movs	r3, #0
   23d50:	9300      	str	r3, [sp, #0]
   23d52:	220a      	movs	r2, #10
   23d54:	2104      	movs	r1, #4
   23d56:	480a      	ldr	r0, [pc, #40]	; (23d80 <ble_l2cap_init+0x5c>)
   23d58:	f7ee f9e8 	bl	1212c <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   23d5c:	4603      	mov	r3, r0
   23d5e:	b110      	cbz	r0, 23d66 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   23d60:	230b      	movs	r3, #11
   23d62:	e000      	b.n	23d66 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   23d64:	230b      	movs	r3, #11
    }

    return 0;
}
   23d66:	4618      	mov	r0, r3
   23d68:	b003      	add	sp, #12
   23d6a:	f85d fb04 	ldr.w	pc, [sp], #4
   23d6e:	bf00      	nop
   23d70:	0002e498 	.word	0x0002e498
   23d74:	200036b0 	.word	0x200036b0
   23d78:	20003704 	.word	0x20003704
   23d7c:	0002e4ac 	.word	0x0002e4ac
   23d80:	20003720 	.word	0x20003720

00023d84 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   23d84:	4a05      	ldr	r2, [pc, #20]	; (23d9c <ble_l2cap_sig_next_id+0x18>)
   23d86:	7813      	ldrb	r3, [r2, #0]
   23d88:	3301      	adds	r3, #1
   23d8a:	b2db      	uxtb	r3, r3
   23d8c:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   23d8e:	b913      	cbnz	r3, 23d96 <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   23d90:	4613      	mov	r3, r2
   23d92:	2201      	movs	r2, #1
   23d94:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   23d96:	4b01      	ldr	r3, [pc, #4]	; (23d9c <ble_l2cap_sig_next_id+0x18>)
   23d98:	7818      	ldrb	r0, [r3, #0]
   23d9a:	4770      	bx	lr
   23d9c:	20003754 	.word	0x20003754

00023da0 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   23da0:	281a      	cmp	r0, #26
   23da2:	d803      	bhi.n	23dac <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   23da4:	4b02      	ldr	r3, [pc, #8]	; (23db0 <ble_l2cap_sig_dispatch_get+0x10>)
   23da6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   23daa:	4770      	bx	lr
        return NULL;
   23dac:	2000      	movs	r0, #0
}
   23dae:	4770      	bx	lr
   23db0:	0002e4d0 	.word	0x0002e4d0

00023db4 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   23db4:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   23db6:	8904      	ldrh	r4, [r0, #8]
   23db8:	428c      	cmp	r4, r1
   23dba:	d108      	bne.n	23dce <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
    }

    if (op != proc->op) {
   23dbc:	7a81      	ldrb	r1, [r0, #10]
   23dbe:	4291      	cmp	r1, r2
   23dc0:	d108      	bne.n	23dd4 <ble_l2cap_sig_proc_matches+0x20>
        return 0;
    }

    if (id != 0 && id != proc->id) {
   23dc2:	b14b      	cbz	r3, 23dd8 <ble_l2cap_sig_proc_matches+0x24>
   23dc4:	7ac2      	ldrb	r2, [r0, #11]
   23dc6:	429a      	cmp	r2, r3
   23dc8:	d108      	bne.n	23ddc <ble_l2cap_sig_proc_matches+0x28>
        return 0;
    }

    return 1;
   23dca:	2001      	movs	r0, #1
   23dcc:	e000      	b.n	23dd0 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   23dce:	2000      	movs	r0, #0
}
   23dd0:	bc10      	pop	{r4}
   23dd2:	4770      	bx	lr
        return 0;
   23dd4:	2000      	movs	r0, #0
   23dd6:	e7fb      	b.n	23dd0 <ble_l2cap_sig_proc_matches+0x1c>
    return 1;
   23dd8:	2001      	movs	r0, #1
   23dda:	e7f9      	b.n	23dd0 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   23ddc:	2000      	movs	r0, #0
   23dde:	e7f7      	b.n	23dd0 <ble_l2cap_sig_proc_matches+0x1c>

00023de0 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   23de0:	2008      	movs	r0, #8
   23de2:	4770      	bx	lr

00023de4 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   23de4:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   23de6:	460c      	mov	r4, r1
   23de8:	b119      	cbz	r1, 23df2 <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   23dea:	4a05      	ldr	r2, [pc, #20]	; (23e00 <ble_l2cap_sig_update_call_cb+0x1c>)
   23dec:	69d3      	ldr	r3, [r2, #28]
   23dee:	3301      	adds	r3, #1
   23df0:	61d3      	str	r3, [r2, #28]
    }

    if (proc->update.cb != NULL) {
   23df2:	68c3      	ldr	r3, [r0, #12]
   23df4:	b11b      	cbz	r3, 23dfe <ble_l2cap_sig_update_call_cb+0x1a>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   23df6:	6902      	ldr	r2, [r0, #16]
   23df8:	4621      	mov	r1, r4
   23dfa:	8900      	ldrh	r0, [r0, #8]
   23dfc:	4798      	blx	r3
    }
}
   23dfe:	bd10      	pop	{r4, pc}
   23e00:	20003720 	.word	0x20003720

00023e04 <ble_l2cap_sig_proc_insert>:
{
   23e04:	b510      	push	{r4, lr}
   23e06:	4604      	mov	r4, r0
    ble_hs_lock();
   23e08:	f7fd fd30 	bl	2186c <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   23e0c:	4b05      	ldr	r3, [pc, #20]	; (23e24 <ble_l2cap_sig_proc_insert+0x20>)
   23e0e:	681b      	ldr	r3, [r3, #0]
   23e10:	6023      	str	r3, [r4, #0]
   23e12:	b123      	cbz	r3, 23e1e <ble_l2cap_sig_proc_insert+0x1a>
   23e14:	4b03      	ldr	r3, [pc, #12]	; (23e24 <ble_l2cap_sig_proc_insert+0x20>)
   23e16:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   23e18:	f7fd fd2c 	bl	21874 <ble_hs_unlock>
}
   23e1c:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   23e1e:	4b01      	ldr	r3, [pc, #4]	; (23e24 <ble_l2cap_sig_proc_insert+0x20>)
   23e20:	605c      	str	r4, [r3, #4]
   23e22:	e7f7      	b.n	23e14 <ble_l2cap_sig_proc_insert+0x10>
   23e24:	20003788 	.word	0x20003788

00023e28 <ble_l2cap_sig_proc_extract>:
{
   23e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23e2c:	4607      	mov	r7, r0
   23e2e:	460e      	mov	r6, r1
   23e30:	4615      	mov	r5, r2
    ble_hs_lock();
   23e32:	f7fd fd1b 	bl	2186c <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   23e36:	4b15      	ldr	r3, [pc, #84]	; (23e8c <ble_l2cap_sig_proc_extract+0x64>)
   23e38:	f8d3 9000 	ldr.w	r9, [r3]
   23e3c:	464c      	mov	r4, r9
    prev = NULL;
   23e3e:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   23e42:	b194      	cbz	r4, 23e6a <ble_l2cap_sig_proc_extract+0x42>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   23e44:	462b      	mov	r3, r5
   23e46:	4632      	mov	r2, r6
   23e48:	4639      	mov	r1, r7
   23e4a:	4620      	mov	r0, r4
   23e4c:	f7ff ffb2 	bl	23db4 <ble_l2cap_sig_proc_matches>
   23e50:	b910      	cbnz	r0, 23e58 <ble_l2cap_sig_proc_extract+0x30>
        prev = proc;
   23e52:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   23e54:	6824      	ldr	r4, [r4, #0]
   23e56:	e7f4      	b.n	23e42 <ble_l2cap_sig_proc_extract+0x1a>
            if (prev == NULL) {
   23e58:	f1b8 0f00 	cmp.w	r8, #0
   23e5c:	d00a      	beq.n	23e74 <ble_l2cap_sig_proc_extract+0x4c>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   23e5e:	f8d8 3000 	ldr.w	r3, [r8]
   23e62:	681b      	ldr	r3, [r3, #0]
   23e64:	f8c8 3000 	str.w	r3, [r8]
   23e68:	b163      	cbz	r3, 23e84 <ble_l2cap_sig_proc_extract+0x5c>
    ble_hs_unlock();
   23e6a:	f7fd fd03 	bl	21874 <ble_hs_unlock>
}
   23e6e:	4620      	mov	r0, r4
   23e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   23e74:	f8d9 3000 	ldr.w	r3, [r9]
   23e78:	4a04      	ldr	r2, [pc, #16]	; (23e8c <ble_l2cap_sig_proc_extract+0x64>)
   23e7a:	6013      	str	r3, [r2, #0]
   23e7c:	2b00      	cmp	r3, #0
   23e7e:	d1f4      	bne.n	23e6a <ble_l2cap_sig_proc_extract+0x42>
   23e80:	6052      	str	r2, [r2, #4]
   23e82:	e7f2      	b.n	23e6a <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   23e84:	4b01      	ldr	r3, [pc, #4]	; (23e8c <ble_l2cap_sig_proc_extract+0x64>)
   23e86:	f8c3 8004 	str.w	r8, [r3, #4]
   23e8a:	e7ee      	b.n	23e6a <ble_l2cap_sig_proc_extract+0x42>
   23e8c:	20003788 	.word	0x20003788

00023e90 <ble_l2cap_sig_proc_alloc>:
{
   23e90:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   23e92:	4806      	ldr	r0, [pc, #24]	; (23eac <ble_l2cap_sig_proc_alloc+0x1c>)
   23e94:	f7e9 fecb 	bl	dc2e <os_memblock_get>
    if (proc != NULL) {
   23e98:	4603      	mov	r3, r0
   23e9a:	b128      	cbz	r0, 23ea8 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   23e9c:	2200      	movs	r2, #0
   23e9e:	6002      	str	r2, [r0, #0]
   23ea0:	6042      	str	r2, [r0, #4]
   23ea2:	6082      	str	r2, [r0, #8]
   23ea4:	60c2      	str	r2, [r0, #12]
   23ea6:	6102      	str	r2, [r0, #16]
}
   23ea8:	4618      	mov	r0, r3
   23eaa:	bd08      	pop	{r3, pc}
   23eac:	2000376c 	.word	0x2000376c

00023eb0 <ble_l2cap_sig_proc_set_timer>:
{
   23eb0:	b510      	push	{r4, lr}
   23eb2:	4604      	mov	r4, r0
   23eb4:	f7ea fa82 	bl	e3bc <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   23eb8:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   23ebc:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   23ebe:	f7fd fdc5 	bl	21a4c <ble_hs_timer_resched>
}
   23ec2:	bd10      	pop	{r4, pc}

00023ec4 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   23ec4:	b570      	push	{r4, r5, r6, lr}
   23ec6:	4604      	mov	r4, r0
   23ec8:	f7ea fa78 	bl	e3bc <os_time_get>
   23ecc:	4605      	mov	r5, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   23ece:	2300      	movs	r3, #0
   23ed0:	6023      	str	r3, [r4, #0]
   23ed2:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   23ed4:	f7fd fcca 	bl	2186c <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   23ed8:	4b0f      	ldr	r3, [pc, #60]	; (23f18 <ble_l2cap_sig_extract_expired+0x54>)
   23eda:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   23edc:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   23ee0:	e00a      	b.n	23ef8 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   23ee2:	480d      	ldr	r0, [pc, #52]	; (23f18 <ble_l2cap_sig_extract_expired+0x54>)
   23ee4:	6802      	ldr	r2, [r0, #0]
   23ee6:	6812      	ldr	r2, [r2, #0]
   23ee8:	6002      	str	r2, [r0, #0]
   23eea:	b17a      	cbz	r2, 23f0c <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   23eec:	2200      	movs	r2, #0
   23eee:	601a      	str	r2, [r3, #0]
   23ef0:	6862      	ldr	r2, [r4, #4]
   23ef2:	6013      	str	r3, [r2, #0]
   23ef4:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   23ef6:	460b      	mov	r3, r1
    while (proc != NULL) {
   23ef8:	b153      	cbz	r3, 23f10 <ble_l2cap_sig_extract_expired+0x4c>
        next = STAILQ_NEXT(proc, next);
   23efa:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   23efc:	685a      	ldr	r2, [r3, #4]
   23efe:	1b52      	subs	r2, r2, r5
        if (time_diff <= 0) {
   23f00:	2a00      	cmp	r2, #0
   23f02:	ddee      	ble.n	23ee2 <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   23f04:	4296      	cmp	r6, r2
   23f06:	ddf6      	ble.n	23ef6 <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   23f08:	4616      	mov	r6, r2
   23f0a:	e7f4      	b.n	23ef6 <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   23f0c:	6040      	str	r0, [r0, #4]
   23f0e:	e7ed      	b.n	23eec <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   23f10:	f7fd fcb0 	bl	21874 <ble_hs_unlock>

    return next_exp_in;
}
   23f14:	4630      	mov	r0, r6
   23f16:	bd70      	pop	{r4, r5, r6, pc}
   23f18:	20003788 	.word	0x20003788

00023f1c <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   23f1c:	b128      	cbz	r0, 23f2a <ble_l2cap_sig_proc_free+0xe>
{
   23f1e:	b508      	push	{r3, lr}
   23f20:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   23f22:	4802      	ldr	r0, [pc, #8]	; (23f2c <ble_l2cap_sig_proc_free+0x10>)
   23f24:	f7e9 feab 	bl	dc7e <os_memblock_put>
}
   23f28:	bd08      	pop	{r3, pc}
   23f2a:	4770      	bx	lr
   23f2c:	2000376c 	.word	0x2000376c

00023f30 <ble_l2cap_sig_process_status>:
{
   23f30:	b510      	push	{r4, lr}
   23f32:	4604      	mov	r4, r0
    if (status == 0) {
   23f34:	b929      	cbnz	r1, 23f42 <ble_l2cap_sig_process_status+0x12>
        ble_l2cap_sig_proc_set_timer(proc);
   23f36:	f7ff ffbb 	bl	23eb0 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   23f3a:	4620      	mov	r0, r4
   23f3c:	f7ff ff62 	bl	23e04 <ble_l2cap_sig_proc_insert>
}
   23f40:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_free(proc);
   23f42:	f7ff ffeb 	bl	23f1c <ble_l2cap_sig_proc_free>
}
   23f46:	e7fb      	b.n	23f40 <ble_l2cap_sig_process_status+0x10>

00023f48 <ble_l2cap_sig_rx_reject>:
{
   23f48:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   23f4a:	784a      	ldrb	r2, [r1, #1]
   23f4c:	2101      	movs	r1, #1
   23f4e:	f7ff ff6b 	bl	23e28 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   23f52:	b108      	cbz	r0, 23f58 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   23f54:	f7ff ffe2 	bl	23f1c <ble_l2cap_sig_proc_free>
}
   23f58:	2000      	movs	r0, #0
   23f5a:	bd08      	pop	{r3, pc}

00023f5c <ble_l2cap_sig_update_rsp_rx>:
{
   23f5c:	b570      	push	{r4, r5, r6, lr}
   23f5e:	4614      	mov	r4, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   23f60:	784a      	ldrb	r2, [r1, #1]
   23f62:	2100      	movs	r1, #0
   23f64:	f7ff ff60 	bl	23e28 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   23f68:	b1d8      	cbz	r0, 23fa2 <ble_l2cap_sig_update_rsp_rx+0x46>
   23f6a:	4606      	mov	r6, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   23f6c:	2102      	movs	r1, #2
   23f6e:	4620      	mov	r0, r4
   23f70:	f7ff fa7b 	bl	2346a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23f74:	4605      	mov	r5, r0
   23f76:	b938      	cbnz	r0, 23f88 <ble_l2cap_sig_update_rsp_rx+0x2c>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   23f78:	6823      	ldr	r3, [r4, #0]
   23f7a:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   23f7c:	881b      	ldrh	r3, [r3, #0]
   23f7e:	b163      	cbz	r3, 23f9a <ble_l2cap_sig_update_rsp_rx+0x3e>
   23f80:	2b01      	cmp	r3, #1
   23f82:	d10c      	bne.n	23f9e <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EREJECT;
   23f84:	2110      	movs	r1, #16
   23f86:	e000      	b.n	23f8a <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = rc;
   23f88:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   23f8a:	4630      	mov	r0, r6
   23f8c:	f7ff ff2a 	bl	23de4 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   23f90:	4630      	mov	r0, r6
   23f92:	f7ff ffc3 	bl	23f1c <ble_l2cap_sig_proc_free>
}
   23f96:	4628      	mov	r0, r5
   23f98:	bd70      	pop	{r4, r5, r6, pc}
    switch (le16toh(rsp->result)) {
   23f9a:	4601      	mov	r1, r0
   23f9c:	e7f5      	b.n	23f8a <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = BLE_HS_EBADDATA;
   23f9e:	210a      	movs	r1, #10
   23fa0:	e7f3      	b.n	23f8a <ble_l2cap_sig_update_rsp_rx+0x2e>
        return 0;
   23fa2:	2500      	movs	r5, #0
   23fa4:	e7f7      	b.n	23f96 <ble_l2cap_sig_update_rsp_rx+0x3a>
	...

00023fa8 <ble_l2cap_sig_rx>:
{
   23fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   23faa:	b085      	sub	sp, #20
   23fac:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   23fae:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   23fb0:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   23fb4:	4a1c      	ldr	r2, [pc, #112]	; (24028 <ble_l2cap_sig_rx+0x80>)
   23fb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23fb8:	3301      	adds	r3, #1
   23fba:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   23fbc:	6900      	ldr	r0, [r0, #16]
   23fbe:	f7ff fa03 	bl	233c8 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   23fc2:	2104      	movs	r1, #4
   23fc4:	4630      	mov	r0, r6
   23fc6:	f7ff fa50 	bl	2346a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23fca:	4605      	mov	r5, r0
   23fcc:	b110      	cbz	r0, 23fd4 <ble_l2cap_sig_rx+0x2c>
}
   23fce:	4628      	mov	r0, r5
   23fd0:	b005      	add	sp, #20
   23fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   23fd4:	6923      	ldr	r3, [r4, #16]
   23fd6:	aa03      	add	r2, sp, #12
   23fd8:	88d9      	ldrh	r1, [r3, #6]
   23fda:	6818      	ldr	r0, [r3, #0]
   23fdc:	f000 f957 	bl	2428e <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   23fe0:	2104      	movs	r1, #4
   23fe2:	6920      	ldr	r0, [r4, #16]
   23fe4:	f7e9 fb1d 	bl	d622 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   23fe8:	6923      	ldr	r3, [r4, #16]
   23fea:	8a1a      	ldrh	r2, [r3, #16]
   23fec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23ff0:	429a      	cmp	r2, r3
   23ff2:	d117      	bne.n	24024 <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   23ff4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   23ff8:	f7ff fed2 	bl	23da0 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   23ffc:	4603      	mov	r3, r0
   23ffe:	b178      	cbz	r0, 24020 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   24000:	4632      	mov	r2, r6
   24002:	a903      	add	r1, sp, #12
   24004:	4638      	mov	r0, r7
   24006:	4798      	blx	r3
    if (rc) {
   24008:	4605      	mov	r5, r0
   2400a:	2800      	cmp	r0, #0
   2400c:	d0df      	beq.n	23fce <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   2400e:	2200      	movs	r2, #0
   24010:	9200      	str	r2, [sp, #0]
   24012:	4613      	mov	r3, r2
   24014:	f89d 100d 	ldrb.w	r1, [sp, #13]
   24018:	4638      	mov	r0, r7
   2401a:	f000 f95f 	bl	242dc <ble_l2cap_sig_reject_tx>
   2401e:	e7d6      	b.n	23fce <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   24020:	2510      	movs	r5, #16
   24022:	e7f4      	b.n	2400e <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   24024:	250a      	movs	r5, #10
   24026:	e7d2      	b.n	23fce <ble_l2cap_sig_rx+0x26>
   24028:	20003720 	.word	0x20003720

0002402c <ble_l2cap_sig_update_req_rx>:
{
   2402c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2402e:	b087      	sub	sp, #28
   24030:	4607      	mov	r7, r0
   24032:	460e      	mov	r6, r1
   24034:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   24036:	2108      	movs	r1, #8
   24038:	4610      	mov	r0, r2
   2403a:	f7ff fa16 	bl	2346a <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2403e:	4605      	mov	r5, r0
   24040:	b110      	cbz	r0, 24048 <ble_l2cap_sig_update_req_rx+0x1c>
}
   24042:	4628      	mov	r0, r5
   24044:	b007      	add	sp, #28
   24046:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   24048:	f10d 0107 	add.w	r1, sp, #7
   2404c:	4638      	mov	r0, r7
   2404e:	f7fe f97a 	bl	22346 <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   24052:	4605      	mov	r5, r0
   24054:	2800      	cmp	r0, #0
   24056:	d1f4      	bne.n	24042 <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   24058:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   2405c:	f013 0f01 	tst.w	r3, #1
   24060:	d030      	beq.n	240c4 <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   24062:	6823      	ldr	r3, [r4, #0]
   24064:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   24066:	881a      	ldrh	r2, [r3, #0]
   24068:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   2406c:	885a      	ldrh	r2, [r3, #2]
   2406e:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   24072:	889a      	ldrh	r2, [r3, #4]
   24074:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   24078:	88db      	ldrh	r3, [r3, #6]
   2407a:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   2407e:	2300      	movs	r3, #0
   24080:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   24084:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   24088:	a902      	add	r1, sp, #8
   2408a:	4638      	mov	r0, r7
   2408c:	f7fa fc8b 	bl	1e9a6 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   24090:	4603      	mov	r3, r0
   24092:	b178      	cbz	r0, 240b4 <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   24094:	b9a3      	cbnz	r3, 240c0 <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   24096:	2400      	movs	r4, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   24098:	ab05      	add	r3, sp, #20
   2409a:	2202      	movs	r2, #2
   2409c:	7871      	ldrb	r1, [r6, #1]
   2409e:	2013      	movs	r0, #19
   240a0:	f000 f8fc 	bl	2429c <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   240a4:	2800      	cmp	r0, #0
   240a6:	d0cc      	beq.n	24042 <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   240a8:	8004      	strh	r4, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   240aa:	9905      	ldr	r1, [sp, #20]
   240ac:	4638      	mov	r0, r7
   240ae:	f000 f8d1 	bl	24254 <ble_l2cap_sig_tx>
    return 0;
   240b2:	e7c6      	b.n	24042 <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   240b4:	a902      	add	r1, sp, #8
   240b6:	4638      	mov	r0, r7
   240b8:	f7fb f894 	bl	1f1e4 <ble_gap_update_params>
   240bc:	4603      	mov	r3, r0
   240be:	e7e9      	b.n	24094 <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   240c0:	2401      	movs	r4, #1
   240c2:	e7e9      	b.n	24098 <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   240c4:	2510      	movs	r5, #16
   240c6:	e7bc      	b.n	24042 <ble_l2cap_sig_update_req_rx+0x16>

000240c8 <ble_l2cap_sig_update>:
{
   240c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240cc:	b085      	sub	sp, #20
   240ce:	4604      	mov	r4, r0
   240d0:	460e      	mov	r6, r1
   240d2:	4691      	mov	r9, r2
   240d4:	4698      	mov	r8, r3
    STATS_INC(ble_l2cap_stats, update_init);
   240d6:	4b29      	ldr	r3, [pc, #164]	; (2417c <ble_l2cap_sig_update+0xb4>)
   240d8:	6959      	ldr	r1, [r3, #20]
   240da:	3101      	adds	r1, #1
   240dc:	6159      	str	r1, [r3, #20]
    ble_hs_lock();
   240de:	f7fd fbc5 	bl	2186c <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   240e2:	ab02      	add	r3, sp, #8
   240e4:	aa01      	add	r2, sp, #4
   240e6:	2105      	movs	r1, #5
   240e8:	4620      	mov	r0, r4
   240ea:	f7ff fa01 	bl	234f0 <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   240ee:	bb50      	cbnz	r0, 24146 <ble_l2cap_sig_update+0x7e>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   240f0:	9b01      	ldr	r3, [sp, #4]
   240f2:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
    ble_hs_unlock();
   240f6:	f7fd fbbd 	bl	21874 <ble_hs_unlock>
    if (master) {
   240fa:	f015 0f01 	tst.w	r5, #1
   240fe:	d13a      	bne.n	24176 <ble_l2cap_sig_update+0xae>
    proc = ble_l2cap_sig_proc_alloc();
   24100:	f7ff fec6 	bl	23e90 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   24104:	4607      	mov	r7, r0
   24106:	b350      	cbz	r0, 2415e <ble_l2cap_sig_update+0x96>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   24108:	2300      	movs	r3, #0
   2410a:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   2410c:	f7ff fe3a 	bl	23d84 <ble_l2cap_sig_next_id>
   24110:	4601      	mov	r1, r0
   24112:	72f8      	strb	r0, [r7, #11]
    proc->conn_handle = conn_handle;
   24114:	813c      	strh	r4, [r7, #8]
    proc->update.cb = cb;
   24116:	f8c7 900c 	str.w	r9, [r7, #12]
    proc->update.cb_arg = cb_arg;
   2411a:	f8c7 8010 	str.w	r8, [r7, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   2411e:	ab03      	add	r3, sp, #12
   24120:	2208      	movs	r2, #8
   24122:	2012      	movs	r0, #18
   24124:	f000 f8ba 	bl	2429c <ble_l2cap_sig_cmd_get>
    if (!req) {
   24128:	b1f8      	cbz	r0, 2416a <ble_l2cap_sig_update+0xa2>
    req->itvl_min = htole16(params->itvl_min);
   2412a:	8832      	ldrh	r2, [r6, #0]
   2412c:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   2412e:	8872      	ldrh	r2, [r6, #2]
   24130:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   24132:	88b2      	ldrh	r2, [r6, #4]
   24134:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   24136:	88f2      	ldrh	r2, [r6, #6]
   24138:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   2413a:	9903      	ldr	r1, [sp, #12]
   2413c:	4620      	mov	r0, r4
   2413e:	f000 f889 	bl	24254 <ble_l2cap_sig_tx>
   24142:	4605      	mov	r5, r0
   24144:	e003      	b.n	2414e <ble_l2cap_sig_update+0x86>
   24146:	4605      	mov	r5, r0
        ble_hs_unlock();
   24148:	f7fd fb94 	bl	21874 <ble_hs_unlock>
    proc = NULL;
   2414c:	2700      	movs	r7, #0
    ble_l2cap_sig_process_status(proc, rc);
   2414e:	4629      	mov	r1, r5
   24150:	4638      	mov	r0, r7
   24152:	f7ff feed 	bl	23f30 <ble_l2cap_sig_process_status>
}
   24156:	4628      	mov	r0, r5
   24158:	b005      	add	sp, #20
   2415a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        STATS_INC(ble_l2cap_stats, update_fail);
   2415e:	4a07      	ldr	r2, [pc, #28]	; (2417c <ble_l2cap_sig_update+0xb4>)
   24160:	69d3      	ldr	r3, [r2, #28]
   24162:	3301      	adds	r3, #1
   24164:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   24166:	2506      	movs	r5, #6
        goto done;
   24168:	e7f1      	b.n	2414e <ble_l2cap_sig_update+0x86>
        STATS_INC(ble_l2cap_stats, update_fail);
   2416a:	4a04      	ldr	r2, [pc, #16]	; (2417c <ble_l2cap_sig_update+0xb4>)
   2416c:	69d3      	ldr	r3, [r2, #28]
   2416e:	3301      	adds	r3, #1
   24170:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   24172:	2506      	movs	r5, #6
        goto done;
   24174:	e7eb      	b.n	2414e <ble_l2cap_sig_update+0x86>
        rc = BLE_HS_EINVAL;
   24176:	2503      	movs	r5, #3
    proc = NULL;
   24178:	2700      	movs	r7, #0
   2417a:	e7e8      	b.n	2414e <ble_l2cap_sig_update+0x86>
   2417c:	20003720 	.word	0x20003720

00024180 <ble_l2cap_sig_create_chan>:
{
   24180:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   24182:	f7ff fcb5 	bl	23af0 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   24186:	4603      	mov	r3, r0
   24188:	b130      	cbz	r0, 24198 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   2418a:	2205      	movs	r2, #5
   2418c:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   2418e:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   24190:	2264      	movs	r2, #100	; 0x64
   24192:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   24194:	4a01      	ldr	r2, [pc, #4]	; (2419c <ble_l2cap_sig_create_chan+0x1c>)
   24196:	6182      	str	r2, [r0, #24]
}
   24198:	4618      	mov	r0, r3
   2419a:	bd08      	pop	{r3, pc}
   2419c:	00023fa9 	.word	0x00023fa9

000241a0 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   241a0:	b538      	push	{r3, r4, r5, lr}
   241a2:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   241a4:	e00b      	b.n	241be <ble_l2cap_sig_conn_broken+0x1e>
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, reason);
   241a6:	4629      	mov	r1, r5
   241a8:	4620      	mov	r0, r4
   241aa:	f7ff fe1b 	bl	23de4 <ble_l2cap_sig_update_call_cb>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   241ae:	4a09      	ldr	r2, [pc, #36]	; (241d4 <ble_l2cap_sig_conn_broken+0x34>)
   241b0:	6813      	ldr	r3, [r2, #0]
   241b2:	681b      	ldr	r3, [r3, #0]
   241b4:	6013      	str	r3, [r2, #0]
   241b6:	b14b      	cbz	r3, 241cc <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   241b8:	4620      	mov	r0, r4
   241ba:	f7ff feaf 	bl	23f1c <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   241be:	4b05      	ldr	r3, [pc, #20]	; (241d4 <ble_l2cap_sig_conn_broken+0x34>)
   241c0:	681c      	ldr	r4, [r3, #0]
   241c2:	b12c      	cbz	r4, 241d0 <ble_l2cap_sig_conn_broken+0x30>
        switch(proc->op) {
   241c4:	7aa3      	ldrb	r3, [r4, #10]
   241c6:	2b00      	cmp	r3, #0
   241c8:	d1f1      	bne.n	241ae <ble_l2cap_sig_conn_broken+0xe>
   241ca:	e7ec      	b.n	241a6 <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   241cc:	6052      	str	r2, [r2, #4]
   241ce:	e7f3      	b.n	241b8 <ble_l2cap_sig_conn_broken+0x18>
    }

}
   241d0:	bd38      	pop	{r3, r4, r5, pc}
   241d2:	bf00      	nop
   241d4:	20003788 	.word	0x20003788

000241d8 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   241d8:	b530      	push	{r4, r5, lr}
   241da:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   241dc:	4668      	mov	r0, sp
   241de:	f7ff fe71 	bl	23ec4 <ble_l2cap_sig_extract_expired>
   241e2:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   241e4:	e00a      	b.n	241fc <ble_l2cap_sig_timer+0x24>
        STATS_INC(ble_l2cap_stats, proc_timeout);
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   241e6:	210d      	movs	r1, #13
   241e8:	4620      	mov	r0, r4
   241ea:	f7ff fdfb 	bl	23de4 <ble_l2cap_sig_update_call_cb>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   241ee:	9b00      	ldr	r3, [sp, #0]
   241f0:	681b      	ldr	r3, [r3, #0]
   241f2:	9300      	str	r3, [sp, #0]
   241f4:	b163      	cbz	r3, 24210 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   241f6:	4620      	mov	r0, r4
   241f8:	f7ff fe90 	bl	23f1c <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   241fc:	9c00      	ldr	r4, [sp, #0]
   241fe:	b154      	cbz	r4, 24216 <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   24200:	4a06      	ldr	r2, [pc, #24]	; (2421c <ble_l2cap_sig_timer+0x44>)
   24202:	6a13      	ldr	r3, [r2, #32]
   24204:	3301      	adds	r3, #1
   24206:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   24208:	7aa3      	ldrb	r3, [r4, #10]
   2420a:	2b00      	cmp	r3, #0
   2420c:	d1ef      	bne.n	241ee <ble_l2cap_sig_timer+0x16>
   2420e:	e7ea      	b.n	241e6 <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   24210:	f8cd d004 	str.w	sp, [sp, #4]
   24214:	e7ef      	b.n	241f6 <ble_l2cap_sig_timer+0x1e>
    }

    return ticks_until_exp;
}
   24216:	4628      	mov	r0, r5
   24218:	b003      	add	sp, #12
   2421a:	bd30      	pop	{r4, r5, pc}
   2421c:	20003720 	.word	0x20003720

00024220 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   24220:	b500      	push	{lr}
   24222:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   24224:	4b07      	ldr	r3, [pc, #28]	; (24244 <ble_l2cap_sig_init+0x24>)
   24226:	2200      	movs	r2, #0
   24228:	601a      	str	r2, [r3, #0]
   2422a:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   2422c:	4b06      	ldr	r3, [pc, #24]	; (24248 <ble_l2cap_sig_init+0x28>)
   2422e:	9300      	str	r3, [sp, #0]
   24230:	4b06      	ldr	r3, [pc, #24]	; (2424c <ble_l2cap_sig_init+0x2c>)
   24232:	2214      	movs	r2, #20
   24234:	2101      	movs	r1, #1
   24236:	4806      	ldr	r0, [pc, #24]	; (24250 <ble_l2cap_sig_init+0x30>)
   24238:	f7e9 fcc2 	bl	dbc0 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2423c:	b003      	add	sp, #12
   2423e:	f85d fb04 	ldr.w	pc, [sp], #4
   24242:	bf00      	nop
   24244:	20003788 	.word	0x20003788
   24248:	0002e4b8 	.word	0x0002e4b8
   2424c:	20003758 	.word	0x20003758
   24250:	2000376c 	.word	0x2000376c

00024254 <ble_l2cap_sig_tx>:

#if NIMBLE_BLE_CONNECT
/* this function consumes tx os_mbuf */
int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   24254:	b530      	push	{r4, r5, lr}
   24256:	b083      	sub	sp, #12
   24258:	4605      	mov	r5, r0
   2425a:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   2425c:	f7fd fb06 	bl	2186c <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   24260:	ab01      	add	r3, sp, #4
   24262:	466a      	mov	r2, sp
   24264:	2105      	movs	r1, #5
   24266:	4628      	mov	r0, r5
   24268:	f7ff f942 	bl	234f0 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   2426c:	b950      	cbnz	r0, 24284 <ble_l2cap_sig_tx+0x30>
        rc = ble_l2cap_tx(conn, chan, txom);
   2426e:	4622      	mov	r2, r4
   24270:	9901      	ldr	r1, [sp, #4]
   24272:	9800      	ldr	r0, [sp, #0]
   24274:	f7ff fd36 	bl	23ce4 <ble_l2cap_tx>
   24278:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }
    ble_hs_unlock();
   2427a:	f7fd fafb 	bl	21874 <ble_hs_unlock>

    return rc;
}
   2427e:	4628      	mov	r0, r5
   24280:	b003      	add	sp, #12
   24282:	bd30      	pop	{r4, r5, pc}
   24284:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   24286:	4620      	mov	r0, r4
   24288:	f7e9 f8f4 	bl	d474 <os_mbuf_free_chain>
   2428c:	e7f5      	b.n	2427a <ble_l2cap_sig_tx+0x26>

0002428e <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   2428e:	7803      	ldrb	r3, [r0, #0]
   24290:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   24292:	7843      	ldrb	r3, [r0, #1]
   24294:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   24296:	8843      	ldrh	r3, [r0, #2]
   24298:	8053      	strh	r3, [r2, #2]
}
   2429a:	4770      	bx	lr

0002429c <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   2429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242a0:	4680      	mov	r8, r0
   242a2:	460f      	mov	r7, r1
   242a4:	4616      	mov	r6, r2
   242a6:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   242a8:	f7ff f8c0 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
   242ac:	4604      	mov	r4, r0
   242ae:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   242b0:	b160      	cbz	r0, 242cc <ble_l2cap_sig_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   242b2:	1d31      	adds	r1, r6, #4
   242b4:	b289      	uxth	r1, r1
   242b6:	f7e9 fb0a 	bl	d8ce <os_mbuf_extend>
   242ba:	4604      	mov	r4, r0
   242bc:	b148      	cbz	r0, 242d2 <ble_l2cap_sig_cmd_get+0x36>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   242be:	682b      	ldr	r3, [r5, #0]
   242c0:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   242c2:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   242c6:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   242c8:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   242ca:	3404      	adds	r4, #4
}
   242cc:	4620      	mov	r0, r4
   242ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   242d2:	6828      	ldr	r0, [r5, #0]
   242d4:	f7e9 f8ce 	bl	d474 <os_mbuf_free_chain>
        return NULL;
   242d8:	e7f8      	b.n	242cc <ble_l2cap_sig_cmd_get+0x30>
	...

000242dc <ble_l2cap_sig_reject_tx>:
{
   242dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   242de:	b083      	sub	sp, #12
   242e0:	4604      	mov	r4, r0
   242e2:	4616      	mov	r6, r2
   242e4:	461d      	mov	r5, r3
   242e6:	9f08      	ldr	r7, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   242e8:	1cba      	adds	r2, r7, #2
   242ea:	ab01      	add	r3, sp, #4
   242ec:	b292      	uxth	r2, r2
   242ee:	2001      	movs	r0, #1
   242f0:	f7ff ffd4 	bl	2429c <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   242f4:	b178      	cbz	r0, 24316 <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   242f6:	f820 6b02 	strh.w	r6, [r0], #2
    memcpy(cmd->data, data, data_len);
   242fa:	463a      	mov	r2, r7
   242fc:	4629      	mov	r1, r5
   242fe:	f7ea fb5b 	bl	e9b8 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   24302:	4a06      	ldr	r2, [pc, #24]	; (2431c <ble_l2cap_sig_reject_tx+0x40>)
   24304:	6a93      	ldr	r3, [r2, #40]	; 0x28
   24306:	3301      	adds	r3, #1
   24308:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   2430a:	9901      	ldr	r1, [sp, #4]
   2430c:	4620      	mov	r0, r4
   2430e:	f7ff ffa1 	bl	24254 <ble_l2cap_sig_tx>
}
   24312:	b003      	add	sp, #12
   24314:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   24316:	2006      	movs	r0, #6
   24318:	e7fb      	b.n	24312 <ble_l2cap_sig_reject_tx+0x36>
   2431a:	bf00      	nop
   2431c:	20003720 	.word	0x20003720

00024320 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   24320:	b500      	push	{lr}
   24322:	b085      	sub	sp, #20
    } data = {
   24324:	f8ad 300c 	strh.w	r3, [sp, #12]
   24328:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   2432c:	2304      	movs	r3, #4
   2432e:	9300      	str	r3, [sp, #0]
   24330:	ab03      	add	r3, sp, #12
   24332:	2202      	movs	r2, #2
   24334:	f7ff ffd2 	bl	242dc <ble_l2cap_sig_reject_tx>
}
   24338:	b005      	add	sp, #20
   2433a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00024340 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   24340:	280e      	cmp	r0, #14
   24342:	d803      	bhi.n	2434c <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   24344:	4b02      	ldr	r3, [pc, #8]	; (24350 <ble_sm_dispatch_get+0x10>)
   24346:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2434a:	4770      	bx	lr
        return NULL;
   2434c:	2000      	movs	r0, #0
}
   2434e:	4770      	bx	lr
   24350:	0002e578 	.word	0x0002e578

00024354 <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   24354:	b121      	cbz	r1, 24360 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   24356:	680a      	ldr	r2, [r1, #0]
   24358:	6812      	ldr	r2, [r2, #0]
   2435a:	600a      	str	r2, [r1, #0]
   2435c:	b142      	cbz	r2, 24370 <ble_sm_proc_remove+0x1c>
    }

    ble_sm_dbg_assert_no_cycles();
}
   2435e:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   24360:	4a05      	ldr	r2, [pc, #20]	; (24378 <ble_sm_proc_remove+0x24>)
   24362:	6813      	ldr	r3, [r2, #0]
   24364:	681b      	ldr	r3, [r3, #0]
   24366:	6013      	str	r3, [r2, #0]
   24368:	2b00      	cmp	r3, #0
   2436a:	d1f8      	bne.n	2435e <ble_sm_proc_remove+0xa>
   2436c:	6052      	str	r2, [r2, #4]
   2436e:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   24370:	4a01      	ldr	r2, [pc, #4]	; (24378 <ble_sm_proc_remove+0x24>)
   24372:	6051      	str	r1, [r2, #4]
}
   24374:	e7f3      	b.n	2435e <ble_sm_proc_remove+0xa>
   24376:	bf00      	nop
   24378:	200038ac 	.word	0x200038ac

0002437c <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   2437c:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   2437e:	8944      	ldrh	r4, [r0, #10]
   24380:	428c      	cmp	r4, r1
   24382:	d10e      	bne.n	243a2 <ble_sm_proc_matches+0x26>
        return 0;
    }

    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   24384:	2aff      	cmp	r2, #255	; 0xff
   24386:	d002      	beq.n	2438e <ble_sm_proc_matches+0x12>
   24388:	7b41      	ldrb	r1, [r0, #13]
   2438a:	4291      	cmp	r1, r2
   2438c:	d10c      	bne.n	243a8 <ble_sm_proc_matches+0x2c>
        return 0;
    }

    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   2438e:	7a02      	ldrb	r2, [r0, #8]
   24390:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   24394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24398:	d008      	beq.n	243ac <ble_sm_proc_matches+0x30>
   2439a:	429a      	cmp	r2, r3
   2439c:	d108      	bne.n	243b0 <ble_sm_proc_matches+0x34>
        return 0;
    }

    return 1;
   2439e:	2001      	movs	r0, #1
   243a0:	e000      	b.n	243a4 <ble_sm_proc_matches+0x28>
        return 0;
   243a2:	2000      	movs	r0, #0
}
   243a4:	bc10      	pop	{r4}
   243a6:	4770      	bx	lr
        return 0;
   243a8:	2000      	movs	r0, #0
   243aa:	e7fb      	b.n	243a4 <ble_sm_proc_matches+0x28>
    return 1;
   243ac:	2001      	movs	r0, #1
   243ae:	e7f9      	b.n	243a4 <ble_sm_proc_matches+0x28>
        return 0;
   243b0:	2000      	movs	r0, #0
   243b2:	e7f7      	b.n	243a4 <ble_sm_proc_matches+0x28>

000243b4 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   243b4:	4b04      	ldr	r3, [pc, #16]	; (243c8 <ble_sm_insert+0x14>)
   243b6:	681b      	ldr	r3, [r3, #0]
   243b8:	6003      	str	r3, [r0, #0]
   243ba:	b113      	cbz	r3, 243c2 <ble_sm_insert+0xe>
   243bc:	4b02      	ldr	r3, [pc, #8]	; (243c8 <ble_sm_insert+0x14>)
   243be:	6018      	str	r0, [r3, #0]
}
   243c0:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   243c2:	4b01      	ldr	r3, [pc, #4]	; (243c8 <ble_sm_insert+0x14>)
   243c4:	6058      	str	r0, [r3, #4]
   243c6:	e7f9      	b.n	243bc <ble_sm_insert+0x8>
   243c8:	200038ac 	.word	0x200038ac

000243cc <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   243cc:	f240 4307 	movw	r3, #1031	; 0x407
   243d0:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   243d2:	2307      	movs	r3, #7
   243d4:	7113      	strb	r3, [r2, #4]
}
   243d6:	4770      	bx	lr

000243d8 <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   243d8:	4b08      	ldr	r3, [pc, #32]	; (243fc <ble_sm_build_authreq+0x24>)
   243da:	7a5b      	ldrb	r3, [r3, #9]
   243dc:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   243e0:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   243e4:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   243e8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   243ec:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   243f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   243f4:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   243f8:	4770      	bx	lr
   243fa:	bf00      	nop
   243fc:	200002d8 	.word	0x200002d8

00024400 <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   24400:	7f03      	ldrb	r3, [r0, #28]
   24402:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   24404:	7f43      	ldrb	r3, [r0, #29]
   24406:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   24408:	7a03      	ldrb	r3, [r0, #8]
   2440a:	f013 0f10 	tst.w	r3, #16
   2440e:	d007      	beq.n	24420 <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   24410:	780b      	ldrb	r3, [r1, #0]
   24412:	f023 0301 	bic.w	r3, r3, #1
   24416:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   24418:	7813      	ldrb	r3, [r2, #0]
   2441a:	f023 0301 	bic.w	r3, r3, #1
   2441e:	7013      	strb	r3, [r2, #0]
    }
}
   24420:	4770      	bx	lr

00024422 <ble_sm_chk_store_overflow_by_type>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   24422:	2000      	movs	r0, #0
   24424:	4770      	bx	lr

00024426 <ble_sm_chk_store_overflow>:

static int
ble_sm_chk_store_overflow(uint16_t conn_handle)
{
   24426:	b510      	push	{r4, lr}
   24428:	4604      	mov	r4, r0
    int rc;

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   2442a:	4601      	mov	r1, r0
   2442c:	2002      	movs	r0, #2
   2442e:	f7ff fff8 	bl	24422 <ble_sm_chk_store_overflow_by_type>
                                           conn_handle);
    if (rc != 0) {
   24432:	b918      	cbnz	r0, 2443c <ble_sm_chk_store_overflow+0x16>
        return rc;
    }

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   24434:	4621      	mov	r1, r4
   24436:	2001      	movs	r0, #1
   24438:	f7ff fff3 	bl	24422 <ble_sm_chk_store_overflow_by_type>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2443c:	bd10      	pop	{r4, pc}

0002443e <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2443e:	7a03      	ldrb	r3, [r0, #8]
   24440:	f013 0f10 	tst.w	r3, #16
   24444:	d101      	bne.n	2444a <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   24446:	2001      	movs	r0, #1
    }
}
   24448:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   2444a:	2009      	movs	r0, #9
   2444c:	4770      	bx	lr
	...

00024450 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   24450:	b510      	push	{r4, lr}
   24452:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   24454:	4b06      	ldr	r3, [pc, #24]	; (24470 <ble_sm_pair_base_fill+0x20>)
   24456:	7a1a      	ldrb	r2, [r3, #8]
   24458:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   2445a:	7a5b      	ldrb	r3, [r3, #9]
   2445c:	f3c3 0300 	ubfx	r3, r3, #0, #1
   24460:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   24462:	f7ff ffb9 	bl	243d8 <ble_sm_build_authreq>
   24466:	70a0      	strb	r0, [r4, #2]
    cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
   24468:	2310      	movs	r3, #16
   2446a:	70e3      	strb	r3, [r4, #3]
}
   2446c:	bd10      	pop	{r4, pc}
   2446e:	bf00      	nop
   24470:	200002d8 	.word	0x200002d8

00024474 <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   24474:	b510      	push	{r4, lr}
   24476:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   24478:	2301      	movs	r3, #1
   2447a:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   2447c:	3011      	adds	r0, #17
   2447e:	f7ff ffe7 	bl	24450 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   24482:	4b03      	ldr	r3, [pc, #12]	; (24490 <ble_sm_pair_req_fill+0x1c>)
   24484:	7a9a      	ldrb	r2, [r3, #10]
   24486:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   24488:	7adb      	ldrb	r3, [r3, #11]
   2448a:	75a3      	strb	r3, [r4, #22]
}
   2448c:	bd10      	pop	{r4, pc}
   2448e:	bf00      	nop
   24490:	200002d8 	.word	0x200002d8

00024494 <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   24494:	b510      	push	{r4, lr}
   24496:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   24498:	2302      	movs	r3, #2
   2449a:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   2449c:	3018      	adds	r0, #24
   2449e:	f7ff ffd7 	bl	24450 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   244a2:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   244a4:	4a04      	ldr	r2, [pc, #16]	; (244b8 <ble_sm_pair_rsp_fill+0x24>)
   244a6:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   244a8:	400b      	ands	r3, r1
   244aa:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   244ac:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   244ae:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   244b0:	4013      	ands	r3, r2
   244b2:	7763      	strb	r3, [r4, #29]
}
   244b4:	bd10      	pop	{r4, pc}
   244b6:	bf00      	nop
   244b8:	200002d8 	.word	0x200002d8

000244bc <ble_sm_verify_auth_requirements>:
     */
    if (MYNEWT_VAL(BLE_SM_SC_LVL) >= 3 && !(cmd & BLE_SM_PAIR_AUTHREQ_MITM)) {
        return false;
    }
    return true;
}
   244bc:	2001      	movs	r0, #1
   244be:	4770      	bx	lr

000244c0 <ble_sm_gen_ediv>:
{
   244c0:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   244c2:	2102      	movs	r1, #2
   244c4:	f7fe fe48 	bl	23158 <ble_hs_hci_util_rand>
}
   244c8:	bd08      	pop	{r3, pc}

000244ca <ble_sm_gen_master_id_rand>:
{
   244ca:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   244cc:	2108      	movs	r1, #8
   244ce:	3002      	adds	r0, #2
   244d0:	f7fe fe42 	bl	23158 <ble_hs_hci_util_rand>
}
   244d4:	bd08      	pop	{r3, pc}

000244d6 <ble_sm_gen_csrk>:
{
   244d6:	b508      	push	{r3, lr}
   244d8:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   244da:	2110      	movs	r1, #16
   244dc:	f7fe fe3c 	bl	23158 <ble_hs_hci_util_rand>
}
   244e0:	bd08      	pop	{r3, pc}

000244e2 <ble_sm_io_action>:
{
   244e2:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   244e4:	7a03      	ldrb	r3, [r0, #8]
   244e6:	f013 0f10 	tst.w	r3, #16
   244ea:	d001      	beq.n	244f0 <ble_sm_io_action+0xe>
        return ble_sm_sc_io_action(proc, action);
   244ec:	2008      	movs	r0, #8
}
   244ee:	bd08      	pop	{r3, pc}
        return ble_sm_lgcy_io_action(proc, action);
   244f0:	f001 fc28 	bl	25d44 <ble_sm_lgcy_io_action>
   244f4:	e7fb      	b.n	244ee <ble_sm_io_action+0xc>

000244f6 <ble_sm_pair_cfg>:
{
   244f6:	b510      	push	{r4, lr}
   244f8:	b082      	sub	sp, #8
   244fa:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   244fc:	7cc3      	ldrb	r3, [r0, #19]
   244fe:	f013 0f08 	tst.w	r3, #8
   24502:	d007      	beq.n	24514 <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   24504:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   24506:	f013 0f08 	tst.w	r3, #8
   2450a:	d003      	beq.n	24514 <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   2450c:	7a03      	ldrb	r3, [r0, #8]
   2450e:	f043 0310 	orr.w	r3, r3, #16
   24512:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   24514:	f10d 0206 	add.w	r2, sp, #6
   24518:	f10d 0107 	add.w	r1, sp, #7
   2451c:	4620      	mov	r0, r4
   2451e:	f7ff ff6f 	bl	24400 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   24522:	7a22      	ldrb	r2, [r4, #8]
   24524:	f012 0f01 	tst.w	r2, #1
   24528:	d03b      	beq.n	245a2 <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   2452a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   2452e:	7ce1      	ldrb	r1, [r4, #19]
   24530:	f011 0f01 	tst.w	r1, #1
   24534:	d006      	beq.n	24544 <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   24536:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   24538:	f011 0f01 	tst.w	r1, #1
   2453c:	d002      	beq.n	24544 <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   2453e:	f042 0220 	orr.w	r2, r2, #32
   24542:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   24544:	7a22      	ldrb	r2, [r4, #8]
   24546:	f012 0f10 	tst.w	r2, #16
   2454a:	d108      	bne.n	2455e <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   2454c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   24550:	b929      	cbnz	r1, 2455e <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   24552:	f89d 1006 	ldrb.w	r1, [sp, #6]
   24556:	b911      	cbnz	r1, 2455e <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   24558:	f022 0220 	bic.w	r2, r2, #32
   2455c:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   2455e:	2200      	movs	r2, #0
   24560:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   24562:	f013 0f01 	tst.w	r3, #1
   24566:	d001      	beq.n	2456c <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   24568:	2203      	movs	r2, #3
   2456a:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   2456c:	f013 0f02 	tst.w	r3, #2
   24570:	d003      	beq.n	2457a <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   24572:	7ba2      	ldrb	r2, [r4, #14]
   24574:	f042 020c 	orr.w	r2, r2, #12
   24578:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   2457a:	f013 0f04 	tst.w	r3, #4
   2457e:	d003      	beq.n	24588 <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   24580:	7ba3      	ldrb	r3, [r4, #14]
   24582:	f043 0310 	orr.w	r3, r3, #16
   24586:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   24588:	7ee3      	ldrb	r3, [r4, #27]
   2458a:	7d22      	ldrb	r2, [r4, #20]
   2458c:	4293      	cmp	r3, r2
   2458e:	bf28      	it	cs
   24590:	4613      	movcs	r3, r2
   24592:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   24594:	f10d 0105 	add.w	r1, sp, #5
   24598:	4620      	mov	r0, r4
   2459a:	f7ff ffa2 	bl	244e2 <ble_sm_io_action>
}
   2459e:	b002      	add	sp, #8
   245a0:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   245a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   245a6:	e7c2      	b.n	2452e <ble_sm_pair_cfg+0x38>

000245a8 <ble_sm_gen_ltk>:
{
   245a8:	b570      	push	{r4, r5, r6, lr}
   245aa:	4605      	mov	r5, r0
   245ac:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   245ae:	7bc1      	ldrb	r1, [r0, #15]
   245b0:	4620      	mov	r0, r4
   245b2:	f7fe fdd1 	bl	23158 <ble_hs_hci_util_rand>
    if (rc != 0) {
   245b6:	4606      	mov	r6, r0
   245b8:	b108      	cbz	r0, 245be <ble_sm_gen_ltk+0x16>
}
   245ba:	4630      	mov	r0, r6
   245bc:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   245be:	7be8      	ldrb	r0, [r5, #15]
   245c0:	f1c0 0210 	rsb	r2, r0, #16
   245c4:	2100      	movs	r1, #0
   245c6:	4420      	add	r0, r4
   245c8:	f7ea fa1b 	bl	ea02 <memset>
    return 0;
   245cc:	e7f5      	b.n	245ba <ble_sm_gen_ltk+0x12>
	...

000245d0 <ble_sm_exec>:
{
   245d0:	b570      	push	{r4, r5, r6, lr}
   245d2:	4606      	mov	r6, r0
   245d4:	460c      	mov	r4, r1
   245d6:	4615      	mov	r5, r2
    memset(res, 0, sizeof *res);
   245d8:	2300      	movs	r3, #0
   245da:	600b      	str	r3, [r1, #0]
   245dc:	604b      	str	r3, [r1, #4]
   245de:	608b      	str	r3, [r1, #8]
   245e0:	60cb      	str	r3, [r1, #12]
   245e2:	610b      	str	r3, [r1, #16]
   245e4:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   245e6:	8940      	ldrh	r0, [r0, #10]
   245e8:	f7fd ffc8 	bl	2257c <ble_hs_conn_exists>
   245ec:	b910      	cbnz	r0, 245f4 <ble_sm_exec+0x24>
        res->app_status = BLE_HS_ENOTCONN;
   245ee:	2307      	movs	r3, #7
   245f0:	6023      	str	r3, [r4, #0]
}
   245f2:	bd70      	pop	{r4, r5, r6, pc}
        cb = ble_sm_state_dispatch[proc->state];
   245f4:	7b72      	ldrb	r2, [r6, #13]
   245f6:	4b04      	ldr	r3, [pc, #16]	; (24608 <ble_sm_exec+0x38>)
   245f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   245fc:	462a      	mov	r2, r5
   245fe:	4621      	mov	r1, r4
   24600:	4630      	mov	r0, r6
   24602:	4798      	blx	r3
}
   24604:	e7f5      	b.n	245f2 <ble_sm_exec+0x22>
   24606:	bf00      	nop
   24608:	0002e5b4 	.word	0x0002e5b4

0002460c <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   2460c:	b570      	push	{r4, r5, r6, lr}
   2460e:	b082      	sub	sp, #8
   24610:	4604      	mov	r4, r0
   24612:	460d      	mov	r5, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   24614:	aa01      	add	r2, sp, #4
   24616:	2101      	movs	r1, #1
   24618:	200b      	movs	r0, #11
   2461a:	f001 fb3b 	bl	25c94 <ble_sm_cmd_get>
    if (!cmd) {
   2461e:	b150      	cbz	r0, 24636 <ble_sm_sec_req_exec+0x2a>
   24620:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   24622:	f7ff fed9 	bl	243d8 <ble_sm_build_authreq>
   24626:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   24628:	9901      	ldr	r1, [sp, #4]
   2462a:	8960      	ldrh	r0, [r4, #10]
   2462c:	f001 fb4c 	bl	25cc8 <ble_sm_tx>
    if (rc != 0) {
   24630:	b920      	cbnz	r0, 2463c <ble_sm_sec_req_exec+0x30>
        res->app_status = rc;
        return;
    }
}
   24632:	b002      	add	sp, #8
   24634:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOMEM;
   24636:	2306      	movs	r3, #6
   24638:	602b      	str	r3, [r5, #0]
        return;
   2463a:	e7fa      	b.n	24632 <ble_sm_sec_req_exec+0x26>
        res->app_status = rc;
   2463c:	6028      	str	r0, [r5, #0]
        return;
   2463e:	e7f8      	b.n	24632 <ble_sm_sec_req_exec+0x26>

00024640 <ble_sm_fill_store_value>:
{
   24640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24644:	4606      	mov	r6, r0
   24646:	4688      	mov	r8, r1
   24648:	4617      	mov	r7, r2
   2464a:	461d      	mov	r5, r3
   2464c:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   2464e:	2250      	movs	r2, #80	; 0x50
   24650:	2100      	movs	r1, #0
   24652:	4620      	mov	r0, r4
   24654:	f7ea f9d5 	bl	ea02 <memset>
    value_sec->peer_addr = *peer_addr;
   24658:	6830      	ldr	r0, [r6, #0]
   2465a:	6020      	str	r0, [r4, #0]
   2465c:	88b2      	ldrh	r2, [r6, #4]
   2465e:	79b3      	ldrb	r3, [r6, #6]
   24660:	80a2      	strh	r2, [r4, #4]
   24662:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   24664:	782b      	ldrb	r3, [r5, #0]
   24666:	f003 0303 	and.w	r3, r3, #3
   2466a:	2b03      	cmp	r3, #3
   2466c:	d009      	beq.n	24682 <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   2466e:	782b      	ldrb	r3, [r5, #0]
   24670:	f013 0f04 	tst.w	r3, #4
   24674:	d12e      	bne.n	246d4 <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   24676:	782b      	ldrb	r3, [r5, #0]
   24678:	f013 0f08 	tst.w	r3, #8
   2467c:	d13f      	bne.n	246fe <ble_sm_fill_store_value+0xbe>
}
   2467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   24682:	7c6b      	ldrb	r3, [r5, #17]
   24684:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   24686:	886b      	ldrh	r3, [r5, #2]
   24688:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   2468a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   2468e:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   24692:	462b      	mov	r3, r5
   24694:	f853 0f12 	ldr.w	r0, [r3, #18]!
   24698:	6859      	ldr	r1, [r3, #4]
   2469a:	689a      	ldr	r2, [r3, #8]
   2469c:	68db      	ldr	r3, [r3, #12]
   2469e:	61a0      	str	r0, [r4, #24]
   246a0:	61e1      	str	r1, [r4, #28]
   246a2:	6222      	str	r2, [r4, #32]
   246a4:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   246a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   246aa:	f043 0301 	orr.w	r3, r3, #1
   246ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   246b2:	f1b8 0800 	subs.w	r8, r8, #0
   246b6:	bf18      	it	ne
   246b8:	f04f 0801 	movne.w	r8, #1
   246bc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   246c0:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   246c4:	3f00      	subs	r7, #0
   246c6:	bf18      	it	ne
   246c8:	2701      	movne	r7, #1
   246ca:	f367 0382 	bfi	r3, r7, #2, #1
   246ce:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   246d2:	e7cc      	b.n	2466e <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   246d4:	462b      	mov	r3, r5
   246d6:	f853 0f22 	ldr.w	r0, [r3, #34]!
   246da:	6859      	ldr	r1, [r3, #4]
   246dc:	689a      	ldr	r2, [r3, #8]
   246de:	68db      	ldr	r3, [r3, #12]
   246e0:	f8c4 0029 	str.w	r0, [r4, #41]	; 0x29
   246e4:	f8c4 102d 	str.w	r1, [r4, #45]	; 0x2d
   246e8:	f8c4 2031 	str.w	r2, [r4, #49]	; 0x31
   246ec:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   246f0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   246f4:	f043 0301 	orr.w	r3, r3, #1
   246f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   246fc:	e7bb      	b.n	24676 <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   246fe:	f855 0f32 	ldr.w	r0, [r5, #50]!
   24702:	6869      	ldr	r1, [r5, #4]
   24704:	68aa      	ldr	r2, [r5, #8]
   24706:	68eb      	ldr	r3, [r5, #12]
   24708:	f8c4 003a 	str.w	r0, [r4, #58]	; 0x3a
   2470c:	f8c4 103e 	str.w	r1, [r4, #62]	; 0x3e
   24710:	f8c4 2042 	str.w	r2, [r4, #66]	; 0x42
   24714:	f8c4 3046 	str.w	r3, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   24718:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2471c:	f043 0301 	orr.w	r3, r3, #1
   24720:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   24724:	e7ab      	b.n	2467e <ble_sm_fill_store_value+0x3e>

00024726 <ble_sm_update_sec_state>:
{
   24726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24728:	460f      	mov	r7, r1
   2472a:	4615      	mov	r5, r2
   2472c:	461e      	mov	r6, r3
    conn = ble_hs_conn_find(conn_handle);
   2472e:	f7fd fefb 	bl	22528 <ble_hs_conn_find>
    if (conn != NULL) {
   24732:	b1e0      	cbz	r0, 2476e <ble_sm_update_sec_state+0x48>
   24734:	4604      	mov	r4, r0
        conn->bhc_sec_state.encrypted = encrypted;
   24736:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   2473a:	f367 0200 	bfi	r2, r7, #0, #1
   2473e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   24742:	b125      	cbz	r5, 2474e <ble_sm_update_sec_state+0x28>
            conn->bhc_sec_state.authenticated = 1;
   24744:	b2d3      	uxtb	r3, r2
   24746:	f043 0302 	orr.w	r3, r3, #2
   2474a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        if (bonded) {
   2474e:	b12e      	cbz	r6, 2475c <ble_sm_update_sec_state+0x36>
            conn->bhc_sec_state.bonded = 1;
   24750:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   24754:	f043 0304 	orr.w	r3, r3, #4
   24758:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (key_size) {
   2475c:	9b06      	ldr	r3, [sp, #24]
   2475e:	b133      	cbz	r3, 2476e <ble_sm_update_sec_state+0x48>
            conn->bhc_sec_state.key_size = key_size;
   24760:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
   24764:	9a06      	ldr	r2, [sp, #24]
   24766:	f362 03c7 	bfi	r3, r2, #3, #5
   2476a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
   2476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024770 <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   24770:	b530      	push	{r4, r5, lr}
   24772:	b083      	sub	sp, #12
   24774:	4604      	mov	r4, r0
   24776:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   24778:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   2477a:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   2477c:	9300      	str	r3, [sp, #0]
   2477e:	f3c2 1340 	ubfx	r3, r2, #5, #1
   24782:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   24786:	2101      	movs	r1, #1
   24788:	8940      	ldrh	r0, [r0, #10]
   2478a:	f7ff ffcc 	bl	24726 <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   2478e:	23ff      	movs	r3, #255	; 0xff
   24790:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   24792:	2300      	movs	r3, #0
   24794:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   24796:	7d2b      	ldrb	r3, [r5, #20]
   24798:	f043 0302 	orr.w	r3, r3, #2
   2479c:	752b      	strb	r3, [r5, #20]
}
   2479e:	b003      	add	sp, #12
   247a0:	bd30      	pop	{r4, r5, pc}

000247a2 <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   247a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247a6:	b08a      	sub	sp, #40	; 0x28
   247a8:	4604      	mov	r4, r0
   247aa:	460e      	mov	r6, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   247ac:	f10d 020a 	add.w	r2, sp, #10
   247b0:	f10d 010b 	add.w	r1, sp, #11
   247b4:	f7ff fe24 	bl	24400 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   247b8:	7a23      	ldrb	r3, [r4, #8]
   247ba:	f013 0f01 	tst.w	r3, #1
   247be:	d018      	beq.n	247f2 <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   247c0:	f89d 500b 	ldrb.w	r5, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   247c4:	f015 0f01 	tst.w	r5, #1
   247c8:	d116      	bne.n	247f8 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   247ca:	f015 0f02 	tst.w	r5, #2
   247ce:	d17a      	bne.n	248c6 <ble_sm_key_exch_exec+0x124>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   247d0:	f015 0f04 	tst.w	r5, #4
   247d4:	f040 80e4 	bne.w	249a0 <ble_sm_key_exch_exec+0x1fe>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   247d8:	7a23      	ldrb	r3, [r4, #8]
   247da:	f013 0f01 	tst.w	r3, #1
   247de:	d103      	bne.n	247e8 <ble_sm_key_exch_exec+0x46>
   247e0:	7ba3      	ldrb	r3, [r4, #14]
   247e2:	2b00      	cmp	r3, #0
   247e4:	f040 8110 	bne.w	24a08 <ble_sm_key_exch_exec+0x266>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   247e8:	4631      	mov	r1, r6
   247ea:	4620      	mov	r0, r4
   247ec:	f7ff ffc0 	bl	24770 <ble_sm_key_exch_success>
   247f0:	e10a      	b.n	24a08 <ble_sm_key_exch_exec+0x266>
        our_key_dist = resp_key_dist;
   247f2:	f89d 500a 	ldrb.w	r5, [sp, #10]
   247f6:	e7e5      	b.n	247c4 <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   247f8:	aa01      	add	r2, sp, #4
   247fa:	2110      	movs	r1, #16
   247fc:	2006      	movs	r0, #6
   247fe:	f001 fa49 	bl	25c94 <ble_sm_cmd_get>
        if (!enc_info) {
   24802:	4601      	mov	r1, r0
   24804:	2800      	cmp	r0, #0
   24806:	f000 80f7 	beq.w	249f8 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   2480a:	4680      	mov	r8, r0
   2480c:	4620      	mov	r0, r4
   2480e:	f7ff fecb 	bl	245a8 <ble_sm_gen_ltk>
        if (rc != 0) {
   24812:	4607      	mov	r7, r0
   24814:	2800      	cmp	r0, #0
   24816:	d14a      	bne.n	248ae <ble_sm_key_exch_exec+0x10c>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   24818:	f8d8 0000 	ldr.w	r0, [r8]
   2481c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   24820:	f8d8 2008 	ldr.w	r2, [r8, #8]
   24824:	f8d8 300c 	ldr.w	r3, [r8, #12]
   24828:	f8c4 0082 	str.w	r0, [r4, #130]	; 0x82
   2482c:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
   24830:	f8c4 208a 	str.w	r2, [r4, #138]	; 0x8a
   24834:	f8c4 308e 	str.w	r3, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   24838:	7be3      	ldrb	r3, [r4, #15]
   2483a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   2483e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24842:	f043 0301 	orr.w	r3, r3, #1
   24846:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   2484a:	9901      	ldr	r1, [sp, #4]
   2484c:	8960      	ldrh	r0, [r4, #10]
   2484e:	f001 fa3b 	bl	25cc8 <ble_sm_tx>
        if (rc != 0) {
   24852:	4607      	mov	r7, r0
   24854:	2800      	cmp	r0, #0
   24856:	f040 80d0 	bne.w	249fa <ble_sm_key_exch_exec+0x258>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   2485a:	aa01      	add	r2, sp, #4
   2485c:	210a      	movs	r1, #10
   2485e:	2007      	movs	r0, #7
   24860:	f001 fa18 	bl	25c94 <ble_sm_cmd_get>
        if (!master_id) {
   24864:	4680      	mov	r8, r0
   24866:	2800      	cmp	r0, #0
   24868:	f000 80d1 	beq.w	24a0e <ble_sm_key_exch_exec+0x26c>
        rc = ble_sm_gen_ediv(master_id);
   2486c:	f7ff fe28 	bl	244c0 <ble_sm_gen_ediv>
        if (rc != 0) {
   24870:	4607      	mov	r7, r0
   24872:	bb00      	cbnz	r0, 248b6 <ble_sm_key_exch_exec+0x114>
        rc = ble_sm_gen_master_id_rand(master_id);
   24874:	4640      	mov	r0, r8
   24876:	f7ff fe28 	bl	244ca <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   2487a:	4607      	mov	r7, r0
   2487c:	b9f8      	cbnz	r0, 248be <ble_sm_key_exch_exec+0x11c>
        proc->our_keys.ediv_rand_valid = 1;
   2487e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24882:	f043 0302 	orr.w	r3, r3, #2
   24886:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   2488a:	f8d8 2002 	ldr.w	r2, [r8, #2]
   2488e:	f8d8 3006 	ldr.w	r3, [r8, #6]
   24892:	67a2      	str	r2, [r4, #120]	; 0x78
   24894:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   24896:	f8b8 3000 	ldrh.w	r3, [r8]
   2489a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   2489e:	9901      	ldr	r1, [sp, #4]
   248a0:	8960      	ldrh	r0, [r4, #10]
   248a2:	f001 fa11 	bl	25cc8 <ble_sm_tx>
        if (rc != 0) {
   248a6:	4607      	mov	r7, r0
   248a8:	2800      	cmp	r0, #0
   248aa:	d08e      	beq.n	247ca <ble_sm_key_exch_exec+0x28>
   248ac:	e0a5      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   248ae:	9801      	ldr	r0, [sp, #4]
   248b0:	f7e8 fde0 	bl	d474 <os_mbuf_free_chain>
            goto err;
   248b4:	e0a1      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   248b6:	9801      	ldr	r0, [sp, #4]
   248b8:	f7e8 fddc 	bl	d474 <os_mbuf_free_chain>
            goto err;
   248bc:	e09d      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   248be:	9801      	ldr	r0, [sp, #4]
   248c0:	f7e8 fdd8 	bl	d474 <os_mbuf_free_chain>
            goto err;
   248c4:	e099      	b.n	249fa <ble_sm_key_exch_exec+0x258>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   248c6:	aa01      	add	r2, sp, #4
   248c8:	2110      	movs	r1, #16
   248ca:	2008      	movs	r0, #8
   248cc:	f001 f9e2 	bl	25c94 <ble_sm_cmd_get>
        if (!id_info) {
   248d0:	4680      	mov	r8, r0
   248d2:	2800      	cmp	r0, #0
   248d4:	f000 809d 	beq.w	24a12 <ble_sm_key_exch_exec+0x270>
        rc = ble_hs_pvcy_our_irk(&irk);
   248d8:	4668      	mov	r0, sp
   248da:	f7fe fecd 	bl	23678 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   248de:	4607      	mov	r7, r0
   248e0:	2800      	cmp	r0, #0
   248e2:	d159      	bne.n	24998 <ble_sm_key_exch_exec+0x1f6>
        memcpy(id_info->irk, irk, 16);
   248e4:	9b00      	ldr	r3, [sp, #0]
   248e6:	6818      	ldr	r0, [r3, #0]
   248e8:	6859      	ldr	r1, [r3, #4]
   248ea:	689a      	ldr	r2, [r3, #8]
   248ec:	68db      	ldr	r3, [r3, #12]
   248ee:	f8c8 0000 	str.w	r0, [r8]
   248f2:	f8c8 1004 	str.w	r1, [r8, #4]
   248f6:	f8c8 2008 	str.w	r2, [r8, #8]
   248fa:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   248fe:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   24902:	f043 0304 	orr.w	r3, r3, #4
   24906:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   2490a:	9901      	ldr	r1, [sp, #4]
   2490c:	8960      	ldrh	r0, [r4, #10]
   2490e:	f001 f9db 	bl	25cc8 <ble_sm_tx>
        if (rc != 0) {
   24912:	4607      	mov	r7, r0
   24914:	2800      	cmp	r0, #0
   24916:	d170      	bne.n	249fa <ble_sm_key_exch_exec+0x258>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   24918:	aa01      	add	r2, sp, #4
   2491a:	2107      	movs	r1, #7
   2491c:	2009      	movs	r0, #9
   2491e:	f001 f9b9 	bl	25c94 <ble_sm_cmd_get>
        if (!addr_info) {
   24922:	4607      	mov	r7, r0
   24924:	2800      	cmp	r0, #0
   24926:	d076      	beq.n	24a16 <ble_sm_key_exch_exec+0x274>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   24928:	8960      	ldrh	r0, [r4, #10]
   2492a:	f7fd fe15 	bl	22558 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   2492e:	a903      	add	r1, sp, #12
   24930:	f7fd fe32 	bl	22598 <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   24934:	f89d 200c 	ldrb.w	r2, [sp, #12]
   24938:	463b      	mov	r3, r7
   2493a:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   2493e:	f8dd 200d 	ldr.w	r2, [sp, #13]
   24942:	f8c7 2001 	str.w	r2, [r7, #1]
   24946:	f8bd 2011 	ldrh.w	r2, [sp, #17]
   2494a:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   2494c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   24950:	f042 0210 	orr.w	r2, r2, #16
   24954:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   24958:	9a00      	ldr	r2, [sp, #0]
   2495a:	f8d2 c000 	ldr.w	ip, [r2]
   2495e:	6850      	ldr	r0, [r2, #4]
   24960:	6891      	ldr	r1, [r2, #8]
   24962:	68d2      	ldr	r2, [r2, #12]
   24964:	f8c4 c092 	str.w	ip, [r4, #146]	; 0x92
   24968:	f8c4 0096 	str.w	r0, [r4, #150]	; 0x96
   2496c:	f8c4 109a 	str.w	r1, [r4, #154]	; 0x9a
   24970:	f8c4 209e 	str.w	r2, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   24974:	783a      	ldrb	r2, [r7, #0]
   24976:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   2497a:	681a      	ldr	r2, [r3, #0]
   2497c:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   24980:	889b      	ldrh	r3, [r3, #4]
   24982:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   24986:	9901      	ldr	r1, [sp, #4]
   24988:	8960      	ldrh	r0, [r4, #10]
   2498a:	f001 f99d 	bl	25cc8 <ble_sm_tx>
        if (rc != 0) {
   2498e:	4607      	mov	r7, r0
   24990:	2800      	cmp	r0, #0
   24992:	f43f af1d 	beq.w	247d0 <ble_sm_key_exch_exec+0x2e>
   24996:	e030      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   24998:	9801      	ldr	r0, [sp, #4]
   2499a:	f7e8 fd6b 	bl	d474 <os_mbuf_free_chain>
            goto err;
   2499e:	e02c      	b.n	249fa <ble_sm_key_exch_exec+0x258>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   249a0:	aa01      	add	r2, sp, #4
   249a2:	2110      	movs	r1, #16
   249a4:	200a      	movs	r0, #10
   249a6:	f001 f975 	bl	25c94 <ble_sm_cmd_get>
        if (!sign_info) {
   249aa:	4601      	mov	r1, r0
   249ac:	b3a8      	cbz	r0, 24a1a <ble_sm_key_exch_exec+0x278>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   249ae:	4605      	mov	r5, r0
   249b0:	4620      	mov	r0, r4
   249b2:	f7ff fd90 	bl	244d6 <ble_sm_gen_csrk>
        if (rc != 0) {
   249b6:	4607      	mov	r7, r0
   249b8:	b9d0      	cbnz	r0, 249f0 <ble_sm_key_exch_exec+0x24e>
        proc->our_keys.csrk_valid = 1;
   249ba:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   249be:	f043 0308 	orr.w	r3, r3, #8
   249c2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   249c6:	6828      	ldr	r0, [r5, #0]
   249c8:	6869      	ldr	r1, [r5, #4]
   249ca:	68aa      	ldr	r2, [r5, #8]
   249cc:	68eb      	ldr	r3, [r5, #12]
   249ce:	f8c4 00a2 	str.w	r0, [r4, #162]	; 0xa2
   249d2:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
   249d6:	f8c4 20aa 	str.w	r2, [r4, #170]	; 0xaa
   249da:	f8c4 30ae 	str.w	r3, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   249de:	9901      	ldr	r1, [sp, #4]
   249e0:	8960      	ldrh	r0, [r4, #10]
   249e2:	f001 f971 	bl	25cc8 <ble_sm_tx>
        if (rc != 0) {
   249e6:	4607      	mov	r7, r0
   249e8:	2800      	cmp	r0, #0
   249ea:	f43f aef5 	beq.w	247d8 <ble_sm_key_exch_exec+0x36>
   249ee:	e004      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            os_mbuf_free_chain(txom);
   249f0:	9801      	ldr	r0, [sp, #4]
   249f2:	f7e8 fd3f 	bl	d474 <os_mbuf_free_chain>
            goto err;
   249f6:	e000      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   249f8:	2706      	movs	r7, #6
    }

    return;

err:
    res->app_status = rc;
   249fa:	6037      	str	r7, [r6, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   249fc:	2308      	movs	r3, #8
   249fe:	7133      	strb	r3, [r6, #4]
    res->enc_cb = 1;
   24a00:	7d33      	ldrb	r3, [r6, #20]
   24a02:	f043 0302 	orr.w	r3, r3, #2
   24a06:	7533      	strb	r3, [r6, #20]
}
   24a08:	b00a      	add	sp, #40	; 0x28
   24a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   24a0e:	2706      	movs	r7, #6
   24a10:	e7f3      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24a12:	2706      	movs	r7, #6
   24a14:	e7f1      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24a16:	2706      	movs	r7, #6
   24a18:	e7ef      	b.n	249fa <ble_sm_key_exch_exec+0x258>
            rc = BLE_HS_ENOMEM;
   24a1a:	2706      	movs	r7, #6
   24a1c:	e7ed      	b.n	249fa <ble_sm_key_exch_exec+0x258>

00024a1e <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   24a1e:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   24a20:	7b83      	ldrb	r3, [r0, #14]
   24a22:	b93b      	cbnz	r3, 24a34 <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   24a24:	7a03      	ldrb	r3, [r0, #8]
   24a26:	f013 0f01 	tst.w	r3, #1
   24a2a:	d004      	beq.n	24a36 <ble_sm_key_rxed+0x18>
            res->execute = 1;
   24a2c:	7d0b      	ldrb	r3, [r1, #20]
   24a2e:	f043 0301 	orr.w	r3, r3, #1
   24a32:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   24a34:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   24a36:	f7ff fe9b 	bl	24770 <ble_sm_key_exch_success>
}
   24a3a:	e7fb      	b.n	24a34 <ble_sm_key_rxed+0x16>

00024a3c <ble_sm_start_encrypt_tx>:
{
   24a3c:	b510      	push	{r4, lr}
   24a3e:	b08a      	sub	sp, #40	; 0x28
   24a40:	4603      	mov	r3, r0
    cmd.conn_handle = htole16(params->connection_handle);
   24a42:	8802      	ldrh	r2, [r0, #0]
   24a44:	f8ad 200c 	strh.w	r2, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   24a48:	8842      	ldrh	r2, [r0, #2]
   24a4a:	f8ad 2016 	strh.w	r2, [sp, #22]
    cmd.rand = htole64(params->random_number);
   24a4e:	6881      	ldr	r1, [r0, #8]
   24a50:	68c2      	ldr	r2, [r0, #12]
   24a52:	f8cd 100e 	str.w	r1, [sp, #14]
   24a56:	f8cd 2012 	str.w	r2, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   24a5a:	ac06      	add	r4, sp, #24
   24a5c:	f853 0f10 	ldr.w	r0, [r3, #16]!
   24a60:	6859      	ldr	r1, [r3, #4]
   24a62:	689a      	ldr	r2, [r3, #8]
   24a64:	68db      	ldr	r3, [r3, #12]
   24a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24a68:	2300      	movs	r3, #0
   24a6a:	9300      	str	r3, [sp, #0]
   24a6c:	221c      	movs	r2, #28
   24a6e:	a903      	add	r1, sp, #12
   24a70:	f242 0019 	movw	r0, #8217	; 0x2019
   24a74:	f7fd ffb0 	bl	229d8 <ble_hs_hci_cmd_tx>
}
   24a78:	b00a      	add	sp, #40	; 0x28
   24a7a:	bd10      	pop	{r4, pc}

00024a7c <ble_sm_enc_restore_exec>:
{
   24a7c:	b510      	push	{r4, lr}
   24a7e:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   24a80:	4610      	mov	r0, r2
   24a82:	f7ff ffdb 	bl	24a3c <ble_sm_start_encrypt_tx>
   24a86:	6020      	str	r0, [r4, #0]
}
   24a88:	bd10      	pop	{r4, pc}

00024a8a <ble_sm_enc_start_exec>:
{
   24a8a:	b530      	push	{r4, r5, lr}
   24a8c:	b089      	sub	sp, #36	; 0x24
   24a8e:	4603      	mov	r3, r0
   24a90:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   24a92:	8942      	ldrh	r2, [r0, #10]
   24a94:	f8ad 2000 	strh.w	r2, [sp]
    cmd.encrypted_diversifier = 0;
   24a98:	2200      	movs	r2, #0
   24a9a:	f8ad 2002 	strh.w	r2, [sp, #2]
    cmd.random_number = 0;
   24a9e:	2000      	movs	r0, #0
   24aa0:	2100      	movs	r1, #0
   24aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   24aa6:	ac04      	add	r4, sp, #16
   24aa8:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   24aac:	6859      	ldr	r1, [r3, #4]
   24aae:	689a      	ldr	r2, [r3, #8]
   24ab0:	68db      	ldr	r3, [r3, #12]
   24ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   24ab4:	4668      	mov	r0, sp
   24ab6:	f7ff ffc1 	bl	24a3c <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   24aba:	b130      	cbz	r0, 24aca <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   24abc:	2208      	movs	r2, #8
   24abe:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   24ac0:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   24ac2:	7d2b      	ldrb	r3, [r5, #20]
   24ac4:	f043 0302 	orr.w	r3, r3, #2
   24ac8:	752b      	strb	r3, [r5, #20]
}
   24aca:	b009      	add	sp, #36	; 0x24
   24acc:	bd30      	pop	{r4, r5, pc}

00024ace <ble_sm_ltk_req_reply_tx>:
{
   24ace:	b530      	push	{r4, r5, lr}
   24ad0:	b089      	sub	sp, #36	; 0x24
   24ad2:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   24ad4:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   24ad8:	680d      	ldr	r5, [r1, #0]
   24ada:	6848      	ldr	r0, [r1, #4]
   24adc:	688a      	ldr	r2, [r1, #8]
   24ade:	68cb      	ldr	r3, [r1, #12]
   24ae0:	f8cd 500e 	str.w	r5, [sp, #14]
   24ae4:	f8cd 0012 	str.w	r0, [sp, #18]
   24ae8:	f8cd 2016 	str.w	r2, [sp, #22]
   24aec:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24af0:	2302      	movs	r3, #2
   24af2:	9300      	str	r3, [sp, #0]
   24af4:	ab02      	add	r3, sp, #8
   24af6:	2212      	movs	r2, #18
   24af8:	a903      	add	r1, sp, #12
   24afa:	f242 001a 	movw	r0, #8218	; 0x201a
   24afe:	f7fd ff6b 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   24b02:	b918      	cbnz	r0, 24b0c <ble_sm_ltk_req_reply_tx+0x3e>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   24b04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   24b08:	42a3      	cmp	r3, r4
   24b0a:	d101      	bne.n	24b10 <ble_sm_ltk_req_reply_tx+0x42>
}
   24b0c:	b009      	add	sp, #36	; 0x24
   24b0e:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   24b10:	200c      	movs	r0, #12
   24b12:	e7fb      	b.n	24b0c <ble_sm_ltk_req_reply_tx+0x3e>

00024b14 <ble_sm_ltk_start_exec>:
{
   24b14:	b538      	push	{r3, r4, r5, lr}
   24b16:	4604      	mov	r4, r0
   24b18:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   24b1a:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   24b1e:	8940      	ldrh	r0, [r0, #10]
   24b20:	f7ff ffd5 	bl	24ace <ble_sm_ltk_req_reply_tx>
   24b24:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   24b26:	b910      	cbnz	r0, 24b2e <ble_sm_ltk_start_exec+0x1a>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   24b28:	2305      	movs	r3, #5
   24b2a:	7363      	strb	r3, [r4, #13]
}
   24b2c:	bd38      	pop	{r3, r4, r5, pc}
        res->enc_cb = 1;
   24b2e:	7d2b      	ldrb	r3, [r5, #20]
   24b30:	f043 0302 	orr.w	r3, r3, #2
   24b34:	752b      	strb	r3, [r5, #20]
}
   24b36:	e7f9      	b.n	24b2c <ble_sm_ltk_start_exec+0x18>

00024b38 <ble_sm_ltk_req_neg_reply_tx>:
{
   24b38:	b510      	push	{r4, lr}
   24b3a:	b084      	sub	sp, #16
   24b3c:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   24b3e:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   24b42:	2202      	movs	r2, #2
   24b44:	9200      	str	r2, [sp, #0]
   24b46:	ab02      	add	r3, sp, #8
   24b48:	a903      	add	r1, sp, #12
   24b4a:	f242 001b 	movw	r0, #8219	; 0x201b
   24b4e:	f7fd ff43 	bl	229d8 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   24b52:	b918      	cbnz	r0, 24b5c <ble_sm_ltk_req_neg_reply_tx+0x24>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   24b54:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   24b58:	42a3      	cmp	r3, r4
   24b5a:	d101      	bne.n	24b60 <ble_sm_ltk_req_neg_reply_tx+0x28>
}
   24b5c:	b004      	add	sp, #16
   24b5e:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   24b60:	200c      	movs	r0, #12
   24b62:	e7fb      	b.n	24b5c <ble_sm_ltk_req_neg_reply_tx+0x24>

00024b64 <ble_sm_ltk_restore_exec>:
{
   24b64:	b570      	push	{r4, r5, r6, lr}
   24b66:	4606      	mov	r6, r0
   24b68:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   24b6a:	b1e2      	cbz	r2, 24ba6 <ble_sm_ltk_restore_exec+0x42>
   24b6c:	4615      	mov	r5, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   24b6e:	f102 0118 	add.w	r1, r2, #24
   24b72:	8940      	ldrh	r0, [r0, #10]
   24b74:	f7ff ffab 	bl	24ace <ble_sm_ltk_req_reply_tx>
   24b78:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   24b7a:	b958      	cbnz	r0, 24b94 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   24b7c:	79eb      	ldrb	r3, [r5, #7]
   24b7e:	73f3      	strb	r3, [r6, #15]
            if (value_sec->authenticated) {
   24b80:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
   24b84:	f013 0f02 	tst.w	r3, #2
   24b88:	d008      	beq.n	24b9c <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   24b8a:	7a33      	ldrb	r3, [r6, #8]
   24b8c:	f043 0308 	orr.w	r3, r3, #8
   24b90:	7233      	strb	r3, [r6, #8]
   24b92:	e003      	b.n	24b9c <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   24b94:	7d23      	ldrb	r3, [r4, #20]
   24b96:	f043 0302 	orr.w	r3, r3, #2
   24b9a:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   24b9c:	6823      	ldr	r3, [r4, #0]
   24b9e:	b90b      	cbnz	r3, 24ba4 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   24ba0:	2306      	movs	r3, #6
   24ba2:	7373      	strb	r3, [r6, #13]
}
   24ba4:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   24ba6:	8940      	ldrh	r0, [r0, #10]
   24ba8:	f7ff ffc6 	bl	24b38 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   24bac:	2305      	movs	r3, #5
   24bae:	6023      	str	r3, [r4, #0]
   24bb0:	e7f4      	b.n	24b9c <ble_sm_ltk_restore_exec+0x38>

00024bb2 <ble_sm_random_exec>:
{
   24bb2:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   24bb4:	7a03      	ldrb	r3, [r0, #8]
   24bb6:	f013 0f10 	tst.w	r3, #16
   24bba:	d000      	beq.n	24bbe <ble_sm_random_exec+0xc>
}
   24bbc:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_random_exec(proc, res);
   24bbe:	f001 f966 	bl	25e8e <ble_sm_lgcy_random_exec>
}
   24bc2:	e7fb      	b.n	24bbc <ble_sm_random_exec+0xa>

00024bc4 <ble_sm_confirm_exec>:
{
   24bc4:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   24bc6:	7a03      	ldrb	r3, [r0, #8]
   24bc8:	f013 0f10 	tst.w	r3, #16
   24bcc:	d000      	beq.n	24bd0 <ble_sm_confirm_exec+0xc>
}
   24bce:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_confirm_exec(proc, res);
   24bd0:	f001 f90c 	bl	25dec <ble_sm_lgcy_confirm_exec>
}
   24bd4:	e7fb      	b.n	24bce <ble_sm_confirm_exec+0xa>

00024bd6 <ble_sm_proc_set_timer>:
{
   24bd6:	b510      	push	{r4, lr}
   24bd8:	4604      	mov	r4, r0
   24bda:	f7e9 fbef 	bl	e3bc <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   24bde:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   24be2:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   24be4:	f7fc ff32 	bl	21a4c <ble_hs_timer_resched>
}
   24be8:	bd10      	pop	{r4, pc}
	...

00024bec <ble_sm_extract_expired>:
{
   24bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bee:	4605      	mov	r5, r0
   24bf0:	f7e9 fbe4 	bl	e3bc <os_time_get>
   24bf4:	4606      	mov	r6, r0
    STAILQ_INIT(dst_list);
   24bf6:	2400      	movs	r4, #0
   24bf8:	602c      	str	r4, [r5, #0]
   24bfa:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   24bfc:	f7fc fe36 	bl	2186c <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   24c00:	4b15      	ldr	r3, [pc, #84]	; (24c58 <ble_sm_extract_expired+0x6c>)
   24c02:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   24c04:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
    while (proc != NULL) {
   24c08:	e00a      	b.n	24c20 <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   24c0a:	b19c      	cbz	r4, 24c34 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   24c0c:	6822      	ldr	r2, [r4, #0]
   24c0e:	6812      	ldr	r2, [r2, #0]
   24c10:	6022      	str	r2, [r4, #0]
   24c12:	b1ba      	cbz	r2, 24c44 <ble_sm_extract_expired+0x58>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   24c14:	682a      	ldr	r2, [r5, #0]
   24c16:	601a      	str	r2, [r3, #0]
   24c18:	b1ba      	cbz	r2, 24c4a <ble_sm_extract_expired+0x5e>
   24c1a:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   24c1c:	461c      	mov	r4, r3
   24c1e:	4603      	mov	r3, r0
    while (proc != NULL) {
   24c20:	b1ab      	cbz	r3, 24c4e <ble_sm_extract_expired+0x62>
        next = STAILQ_NEXT(proc, next);
   24c22:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   24c24:	685a      	ldr	r2, [r3, #4]
   24c26:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   24c28:	2a00      	cmp	r2, #0
   24c2a:	ddee      	ble.n	24c0a <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   24c2c:	4297      	cmp	r7, r2
   24c2e:	ddf5      	ble.n	24c1c <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   24c30:	4617      	mov	r7, r2
   24c32:	e7f3      	b.n	24c1c <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   24c34:	4908      	ldr	r1, [pc, #32]	; (24c58 <ble_sm_extract_expired+0x6c>)
   24c36:	680a      	ldr	r2, [r1, #0]
   24c38:	6812      	ldr	r2, [r2, #0]
   24c3a:	600a      	str	r2, [r1, #0]
   24c3c:	2a00      	cmp	r2, #0
   24c3e:	d1e9      	bne.n	24c14 <ble_sm_extract_expired+0x28>
   24c40:	6049      	str	r1, [r1, #4]
   24c42:	e7e7      	b.n	24c14 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   24c44:	4a04      	ldr	r2, [pc, #16]	; (24c58 <ble_sm_extract_expired+0x6c>)
   24c46:	6054      	str	r4, [r2, #4]
   24c48:	e7e4      	b.n	24c14 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   24c4a:	606b      	str	r3, [r5, #4]
   24c4c:	e7e5      	b.n	24c1a <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   24c4e:	f7fc fe11 	bl	21874 <ble_hs_unlock>
}
   24c52:	4638      	mov	r0, r7
   24c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c56:	bf00      	nop
   24c58:	200038ac 	.word	0x200038ac

00024c5c <ble_sm_pair_fail_tx>:
{
   24c5c:	b530      	push	{r4, r5, lr}
   24c5e:	b083      	sub	sp, #12
   24c60:	4604      	mov	r4, r0
   24c62:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   24c64:	aa01      	add	r2, sp, #4
   24c66:	2101      	movs	r1, #1
   24c68:	2005      	movs	r0, #5
   24c6a:	f001 f813 	bl	25c94 <ble_sm_cmd_get>
    if (cmd) {
   24c6e:	b130      	cbz	r0, 24c7e <ble_sm_pair_fail_tx+0x22>
        cmd->reason = reason;
   24c70:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   24c72:	9901      	ldr	r1, [sp, #4]
   24c74:	4620      	mov	r0, r4
   24c76:	f001 f827 	bl	25cc8 <ble_sm_tx>
        if (rc) {
   24c7a:	4603      	mov	r3, r0
   24c7c:	b908      	cbnz	r0, 24c82 <ble_sm_pair_fail_tx+0x26>
}
   24c7e:	b003      	add	sp, #12
   24c80:	bd30      	pop	{r4, r5, pc}
            BLE_HS_LOG(ERROR, "ble_sm_pair_fail_tx failed, rc = %d\n", rc);
   24c82:	4a03      	ldr	r2, [pc, #12]	; (24c90 <ble_sm_pair_fail_tx+0x34>)
   24c84:	2103      	movs	r1, #3
   24c86:	2004      	movs	r0, #4
   24c88:	f7ec fcd6 	bl	11638 <modlog_printf>
}
   24c8c:	e7f7      	b.n	24c7e <ble_sm_pair_fail_tx+0x22>
   24c8e:	bf00      	nop
   24c90:	0002e53c 	.word	0x0002e53c

00024c94 <ble_sm_persist_keys>:
{
   24c94:	b570      	push	{r4, r5, r6, lr}
   24c96:	b09a      	sub	sp, #104	; 0x68
   24c98:	4604      	mov	r4, r0
    ble_hs_lock();
   24c9a:	f7fc fde7 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   24c9e:	8960      	ldrh	r0, [r4, #10]
   24ca0:	f7fd fc42 	bl	22528 <ble_hs_conn_find>
   24ca4:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   24ca6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   24caa:	f013 0f10 	tst.w	r3, #16
   24cae:	d053      	beq.n	24d58 <ble_sm_persist_keys+0xc4>
        peer_addr.type = proc->peer_keys.addr_type;
   24cb0:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   24cb4:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   24cb8:	4623      	mov	r3, r4
   24cba:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   24cbe:	f8cd 2009 	str.w	r2, [sp, #9]
   24cc2:	889b      	ldrh	r3, [r3, #4]
   24cc4:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   24cc8:	9802      	ldr	r0, [sp, #8]
   24cca:	f8c5 0007 	str.w	r0, [r5, #7]
   24cce:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   24cd2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   24cd6:	f8a5 200b 	strh.w	r2, [r5, #11]
   24cda:	736b      	strb	r3, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   24cdc:	2300      	movs	r3, #0
   24cde:	9318      	str	r3, [sp, #96]	; 0x60
   24ce0:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   24ce4:	2206      	movs	r2, #6
   24ce6:	f105 0116 	add.w	r1, r5, #22
   24cea:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   24cee:	f7e9 fe3f 	bl	e970 <memcmp>
   24cf2:	b128      	cbz	r0, 24d00 <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   24cf4:	2e03      	cmp	r6, #3
   24cf6:	d808      	bhi.n	24d0a <ble_sm_persist_keys+0x76>
   24cf8:	e8df f006 	tbb	[pc, r6]
   24cfc:	2b052b05 	.word	0x2b052b05
    ble_hs_unlock();
   24d00:	f7fc fdb8 	bl	21874 <ble_hs_unlock>
    if (identity_ev) {
   24d04:	e006      	b.n	24d14 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   24d06:	2302      	movs	r3, #2
   24d08:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   24d0a:	f7fc fdb3 	bl	21874 <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   24d0e:	8960      	ldrh	r0, [r4, #10]
   24d10:	f7fa fba8 	bl	1f464 <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   24d14:	7a25      	ldrb	r5, [r4, #8]
   24d16:	f005 0608 	and.w	r6, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   24d1a:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   24d1e:	ab04      	add	r3, sp, #16
   24d20:	9300      	str	r3, [sp, #0]
   24d22:	f104 0370 	add.w	r3, r4, #112	; 0x70
   24d26:	462a      	mov	r2, r5
   24d28:	4631      	mov	r1, r6
   24d2a:	a802      	add	r0, sp, #8
   24d2c:	f7ff fc88 	bl	24640 <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   24d30:	a804      	add	r0, sp, #16
   24d32:	f001 f9a6 	bl	26082 <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   24d36:	ab04      	add	r3, sp, #16
   24d38:	9300      	str	r3, [sp, #0]
   24d3a:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   24d3e:	462a      	mov	r2, r5
   24d40:	4631      	mov	r1, r6
   24d42:	a802      	add	r0, sp, #8
   24d44:	f7ff fc7c 	bl	24640 <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   24d48:	a804      	add	r0, sp, #16
   24d4a:	f001 f9a7 	bl	2609c <ble_store_write_peer_sec>
}
   24d4e:	b01a      	add	sp, #104	; 0x68
   24d50:	bd70      	pop	{r4, r5, r6, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   24d52:	2303      	movs	r3, #3
   24d54:	71eb      	strb	r3, [r5, #7]
                break;
   24d56:	e7d8      	b.n	24d0a <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   24d58:	4603      	mov	r3, r0
   24d5a:	f853 0f07 	ldr.w	r0, [r3, #7]!
   24d5e:	9002      	str	r0, [sp, #8]
   24d60:	889a      	ldrh	r2, [r3, #4]
   24d62:	799b      	ldrb	r3, [r3, #6]
   24d64:	f8ad 200c 	strh.w	r2, [sp, #12]
   24d68:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   24d6c:	79e8      	ldrb	r0, [r5, #7]
   24d6e:	f7fe fbd8 	bl	23522 <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   24d72:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   24d76:	f7fc fd7d 	bl	21874 <ble_hs_unlock>
    if (identity_ev) {
   24d7a:	e7cb      	b.n	24d14 <ble_sm_persist_keys+0x80>

00024d7c <ble_sm_proc_free>:
    if (proc != NULL) {
   24d7c:	b128      	cbz	r0, 24d8a <ble_sm_proc_free+0xe>
{
   24d7e:	b508      	push	{r3, lr}
   24d80:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   24d82:	4802      	ldr	r0, [pc, #8]	; (24d8c <ble_sm_proc_free+0x10>)
   24d84:	f7e8 ff7b 	bl	dc7e <os_memblock_put>
}
   24d88:	bd08      	pop	{r3, pc}
   24d8a:	4770      	bx	lr
   24d8c:	20003890 	.word	0x20003890

00024d90 <ble_sm_proc_alloc>:
{
   24d90:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   24d92:	4806      	ldr	r0, [pc, #24]	; (24dac <ble_sm_proc_alloc+0x1c>)
   24d94:	f7e8 ff4b 	bl	dc2e <os_memblock_get>
    if (proc != NULL) {
   24d98:	4604      	mov	r4, r0
   24d9a:	b120      	cbz	r0, 24da6 <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   24d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
   24da0:	2100      	movs	r1, #0
   24da2:	f7e9 fe2e 	bl	ea02 <memset>
}
   24da6:	4620      	mov	r0, r4
   24da8:	bd10      	pop	{r4, pc}
   24daa:	bf00      	nop
   24dac:	20003890 	.word	0x20003890

00024db0 <ble_sm_retrieve_ltk>:
{
   24db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24db2:	b089      	sub	sp, #36	; 0x24
   24db4:	4606      	mov	r6, r0
   24db6:	4615      	mov	r5, r2
   24db8:	461c      	mov	r4, r3
   24dba:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   24dbc:	2220      	movs	r2, #32
   24dbe:	2100      	movs	r1, #0
   24dc0:	4668      	mov	r0, sp
   24dc2:	f7e9 fe1e 	bl	ea02 <memset>
    key_sec.peer_addr.type = peer_addr_type;
   24dc6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   24dca:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   24dce:	683b      	ldr	r3, [r7, #0]
   24dd0:	f8cd 3001 	str.w	r3, [sp, #1]
   24dd4:	88bb      	ldrh	r3, [r7, #4]
   24dd6:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   24dda:	f8ad 6008 	strh.w	r6, [sp, #8]
    key_sec.rand_num = rand;
   24dde:	9504      	str	r5, [sp, #16]
   24de0:	9405      	str	r4, [sp, #20]
    key_sec.ediv_rand_present = 1;
   24de2:	2301      	movs	r3, #1
   24de4:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   24de8:	9910      	ldr	r1, [sp, #64]	; 0x40
   24dea:	4668      	mov	r0, sp
   24dec:	f001 f942 	bl	26074 <ble_store_read_our_sec>
}
   24df0:	b009      	add	sp, #36	; 0x24
   24df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024df4 <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   24df4:	b538      	push	{r3, r4, r5, lr}
   24df6:	460d      	mov	r5, r1
   24df8:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   24dfa:	7d13      	ldrb	r3, [r2, #20]
   24dfc:	f043 0302 	orr.w	r3, r3, #2
   24e00:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   24e02:	2101      	movs	r1, #1
   24e04:	4628      	mov	r0, r5
   24e06:	f7fe fb30 	bl	2346a <ble_hs_mbuf_pullup_base>
   24e0a:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   24e0c:	b930      	cbnz	r0, 24e1c <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   24e0e:	682b      	ldr	r3, [r5, #0]
   24e10:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   24e12:	781b      	ldrb	r3, [r3, #0]
   24e14:	b10b      	cbz	r3, 24e1a <ble_sm_fail_rx+0x26>
   24e16:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   24e1a:	6020      	str	r0, [r4, #0]
    }
}
   24e1c:	bd38      	pop	{r3, r4, r5, pc}

00024e1e <ble_sm_read_bond>:
{
   24e1e:	b510      	push	{r4, lr}
   24e20:	b094      	sub	sp, #80	; 0x50
   24e22:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   24e24:	a901      	add	r1, sp, #4
   24e26:	f7f9 fd93 	bl	1e950 <ble_gap_conn_find>
    if (rc != 0) {
   24e2a:	b108      	cbz	r0, 24e30 <ble_sm_read_bond+0x12>
}
   24e2c:	b014      	add	sp, #80	; 0x50
   24e2e:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   24e30:	900d      	str	r0, [sp, #52]	; 0x34
   24e32:	900e      	str	r0, [sp, #56]	; 0x38
   24e34:	900f      	str	r0, [sp, #60]	; 0x3c
   24e36:	9010      	str	r0, [sp, #64]	; 0x40
   24e38:	9011      	str	r0, [sp, #68]	; 0x44
   24e3a:	9012      	str	r0, [sp, #72]	; 0x48
   24e3c:	9013      	str	r0, [sp, #76]	; 0x4c
    key_sec.peer_addr = desc.peer_id_addr;
   24e3e:	f8dd 000f 	ldr.w	r0, [sp, #15]
   24e42:	900c      	str	r0, [sp, #48]	; 0x30
   24e44:	f8bd 2013 	ldrh.w	r2, [sp, #19]
   24e48:	f89d 3015 	ldrb.w	r3, [sp, #21]
   24e4c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   24e50:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   24e54:	4621      	mov	r1, r4
   24e56:	a80c      	add	r0, sp, #48	; 0x30
   24e58:	f001 f919 	bl	2608e <ble_store_read_peer_sec>
    return rc;
   24e5c:	e7e6      	b.n	24e2c <ble_sm_read_bond+0xe>

00024e5e <ble_sm_chk_repeat_pairing>:
{
   24e5e:	b570      	push	{r4, r5, r6, lr}
   24e60:	b096      	sub	sp, #88	; 0x58
   24e62:	4604      	mov	r4, r0
   24e64:	460d      	mov	r5, r1
   24e66:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   24e68:	4669      	mov	r1, sp
   24e6a:	4620      	mov	r0, r4
   24e6c:	f7ff ffd7 	bl	24e1e <ble_sm_read_bond>
        switch (rc) {
   24e70:	4603      	mov	r3, r0
   24e72:	b120      	cbz	r0, 24e7e <ble_sm_chk_repeat_pairing+0x20>
   24e74:	2805      	cmp	r0, #5
   24e76:	d02f      	beq.n	24ed8 <ble_sm_chk_repeat_pairing+0x7a>
}
   24e78:	4618      	mov	r0, r3
   24e7a:	b016      	add	sp, #88	; 0x58
   24e7c:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   24e7e:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   24e82:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24e86:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   24e8a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   24e8e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   24e92:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   24e96:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   24e9a:	f3c2 0280 	ubfx	r2, r2, #2, #1
   24e9e:	f362 0341 	bfi	r3, r2, #1, #1
   24ea2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   24ea6:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   24eaa:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   24eae:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   24eb2:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   24eb6:	f3c5 1200 	ubfx	r2, r5, #4, #1
   24eba:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   24ebe:	f3c5 1240 	ubfx	r2, r5, #5, #1
   24ec2:	f362 0382 	bfi	r3, r2, #2, #1
   24ec6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   24eca:	a814      	add	r0, sp, #80	; 0x50
   24ecc:	f7fa fadd 	bl	1f48a <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   24ed0:	2801      	cmp	r0, #1
   24ed2:	d0c9      	beq.n	24e68 <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   24ed4:	2302      	movs	r3, #2
   24ed6:	e7cf      	b.n	24e78 <ble_sm_chk_repeat_pairing+0x1a>
        switch (rc) {
   24ed8:	2300      	movs	r3, #0
   24eda:	e7cd      	b.n	24e78 <ble_sm_chk_repeat_pairing+0x1a>

00024edc <ble_sm_gen_pair_rand>:
{
   24edc:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   24ede:	2110      	movs	r1, #16
   24ee0:	f7fe f93a 	bl	23158 <ble_hs_hci_util_rand>
}
   24ee4:	bd08      	pop	{r3, pc}

00024ee6 <ble_sm_ia_ra>:
{
   24ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24eea:	b088      	sub	sp, #32
   24eec:	4605      	mov	r5, r0
   24eee:	460f      	mov	r7, r1
   24ef0:	4614      	mov	r4, r2
   24ef2:	461e      	mov	r6, r3
   24ef4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   24ef8:	8940      	ldrh	r0, [r0, #10]
   24efa:	f7fd fb2d 	bl	22558 <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   24efe:	a901      	add	r1, sp, #4
   24f00:	f7fd fb4a 	bl	22598 <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   24f04:	7a2b      	ldrb	r3, [r5, #8]
   24f06:	f013 0f01 	tst.w	r3, #1
   24f0a:	d016      	beq.n	24f3a <ble_sm_ia_ra+0x54>
        *out_iat = addrs.our_ota_addr.type;
   24f0c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   24f10:	703b      	strb	r3, [r7, #0]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   24f12:	f8dd 3013 	ldr.w	r3, [sp, #19]
   24f16:	6023      	str	r3, [r4, #0]
   24f18:	f8bd 3017 	ldrh.w	r3, [sp, #23]
   24f1c:	80a3      	strh	r3, [r4, #4]
        *out_rat = addrs.peer_ota_addr.type;
   24f1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   24f22:	7033      	strb	r3, [r6, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   24f24:	f8dd 301a 	ldr.w	r3, [sp, #26]
   24f28:	f8c8 3000 	str.w	r3, [r8]
   24f2c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   24f30:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   24f34:	b008      	add	sp, #32
   24f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.peer_ota_addr.type;
   24f3a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   24f3e:	703b      	strb	r3, [r7, #0]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   24f40:	f8dd 301a 	ldr.w	r3, [sp, #26]
   24f44:	6023      	str	r3, [r4, #0]
   24f46:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   24f4a:	80a3      	strh	r3, [r4, #4]
        *out_rat = addrs.our_ota_addr.type;
   24f4c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   24f50:	7033      	strb	r3, [r6, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   24f52:	f8dd 3013 	ldr.w	r3, [sp, #19]
   24f56:	f8c8 3000 	str.w	r3, [r8]
   24f5a:	f8bd 3017 	ldrh.w	r3, [sp, #23]
   24f5e:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   24f62:	e7e7      	b.n	24f34 <ble_sm_ia_ra+0x4e>

00024f64 <ble_sm_proc_find>:
{
   24f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f68:	4607      	mov	r7, r0
   24f6a:	460e      	mov	r6, r1
   24f6c:	4615      	mov	r5, r2
   24f6e:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   24f70:	4b0b      	ldr	r3, [pc, #44]	; (24fa0 <ble_sm_proc_find+0x3c>)
   24f72:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   24f74:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   24f78:	b174      	cbz	r4, 24f98 <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   24f7a:	462b      	mov	r3, r5
   24f7c:	4632      	mov	r2, r6
   24f7e:	4639      	mov	r1, r7
   24f80:	4620      	mov	r0, r4
   24f82:	f7ff f9fb 	bl	2437c <ble_sm_proc_matches>
   24f86:	b910      	cbnz	r0, 24f8e <ble_sm_proc_find+0x2a>
        prev = proc;
   24f88:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   24f8a:	6824      	ldr	r4, [r4, #0]
   24f8c:	e7f4      	b.n	24f78 <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   24f8e:	f1b9 0f00 	cmp.w	r9, #0
   24f92:	d001      	beq.n	24f98 <ble_sm_proc_find+0x34>
                *out_prev = prev;
   24f94:	f8c9 8000 	str.w	r8, [r9]
}
   24f98:	4620      	mov	r0, r4
   24f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24f9e:	bf00      	nop
   24fa0:	200038ac 	.word	0x200038ac

00024fa4 <ble_sm_sign_info_rx>:
{
   24fa4:	b570      	push	{r4, r5, r6, lr}
   24fa6:	4606      	mov	r6, r0
   24fa8:	460d      	mov	r5, r1
   24faa:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   24fac:	2110      	movs	r1, #16
   24fae:	4628      	mov	r0, r5
   24fb0:	f7fe fa5b 	bl	2346a <ble_hs_mbuf_pullup_base>
   24fb4:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   24fb6:	b130      	cbz	r0, 24fc6 <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   24fb8:	2308      	movs	r3, #8
   24fba:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   24fbc:	7d23      	ldrb	r3, [r4, #20]
   24fbe:	f043 0302 	orr.w	r3, r3, #2
   24fc2:	7523      	strb	r3, [r4, #20]
}
   24fc4:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   24fc6:	682b      	ldr	r3, [r5, #0]
   24fc8:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   24fca:	f7fc fc4f 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   24fce:	2300      	movs	r3, #0
   24fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24fd4:	2107      	movs	r1, #7
   24fd6:	4630      	mov	r0, r6
   24fd8:	f7ff ffc4 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   24fdc:	4603      	mov	r3, r0
   24fde:	b1e0      	cbz	r0, 2501a <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   24fe0:	7b82      	ldrb	r2, [r0, #14]
   24fe2:	f022 0210 	bic.w	r2, r2, #16
   24fe6:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   24fe8:	682e      	ldr	r6, [r5, #0]
   24fea:	6868      	ldr	r0, [r5, #4]
   24fec:	68a9      	ldr	r1, [r5, #8]
   24fee:	68ea      	ldr	r2, [r5, #12]
   24ff0:	f8c3 60ea 	str.w	r6, [r3, #234]	; 0xea
   24ff4:	f8c3 00ee 	str.w	r0, [r3, #238]	; 0xee
   24ff8:	f8c3 10f2 	str.w	r1, [r3, #242]	; 0xf2
   24ffc:	f8c3 20f6 	str.w	r2, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   25000:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   25004:	f042 0208 	orr.w	r2, r2, #8
   25008:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   2500c:	4621      	mov	r1, r4
   2500e:	4618      	mov	r0, r3
   25010:	f7ff fd05 	bl	24a1e <ble_sm_key_rxed>
    ble_hs_unlock();
   25014:	f7fc fc2e 	bl	21874 <ble_hs_unlock>
   25018:	e7d4      	b.n	24fc4 <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2501a:	2305      	movs	r3, #5
   2501c:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2501e:	2308      	movs	r3, #8
   25020:	7123      	strb	r3, [r4, #4]
   25022:	e7f7      	b.n	25014 <ble_sm_sign_info_rx+0x70>

00025024 <ble_sm_id_addr_info_rx>:
{
   25024:	b570      	push	{r4, r5, r6, lr}
   25026:	4606      	mov	r6, r0
   25028:	460d      	mov	r5, r1
   2502a:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2502c:	2107      	movs	r1, #7
   2502e:	4628      	mov	r0, r5
   25030:	f7fe fa1b 	bl	2346a <ble_hs_mbuf_pullup_base>
   25034:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25036:	b130      	cbz	r0, 25046 <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25038:	2308      	movs	r3, #8
   2503a:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2503c:	7d23      	ldrb	r3, [r4, #20]
   2503e:	f043 0302 	orr.w	r3, r3, #2
   25042:	7523      	strb	r3, [r4, #20]
}
   25044:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   25046:	682b      	ldr	r3, [r5, #0]
   25048:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2504a:	f7fc fc0f 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2504e:	2300      	movs	r3, #0
   25050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25054:	2107      	movs	r1, #7
   25056:	4630      	mov	r0, r6
   25058:	f7ff ff84 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   2505c:	b1d0      	cbz	r0, 25094 <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   2505e:	7b82      	ldrb	r2, [r0, #14]
   25060:	f022 0208 	bic.w	r2, r2, #8
   25064:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   25066:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   2506a:	f042 0210 	orr.w	r2, r2, #16
   2506e:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   25072:	782a      	ldrb	r2, [r5, #0]
   25074:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   25078:	462a      	mov	r2, r5
   2507a:	f852 1f01 	ldr.w	r1, [r2, #1]!
   2507e:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   25082:	8892      	ldrh	r2, [r2, #4]
   25084:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   25088:	4621      	mov	r1, r4
   2508a:	f7ff fcc8 	bl	24a1e <ble_sm_key_rxed>
    ble_hs_unlock();
   2508e:	f7fc fbf1 	bl	21874 <ble_hs_unlock>
   25092:	e7d7      	b.n	25044 <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25094:	2305      	movs	r3, #5
   25096:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25098:	2308      	movs	r3, #8
   2509a:	7123      	strb	r3, [r4, #4]
   2509c:	e7f7      	b.n	2508e <ble_sm_id_addr_info_rx+0x6a>

0002509e <ble_sm_id_info_rx>:
{
   2509e:	b570      	push	{r4, r5, r6, lr}
   250a0:	4606      	mov	r6, r0
   250a2:	460d      	mov	r5, r1
   250a4:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   250a6:	2110      	movs	r1, #16
   250a8:	4628      	mov	r0, r5
   250aa:	f7fe f9de 	bl	2346a <ble_hs_mbuf_pullup_base>
   250ae:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   250b0:	b130      	cbz	r0, 250c0 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   250b2:	2308      	movs	r3, #8
   250b4:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   250b6:	7d23      	ldrb	r3, [r4, #20]
   250b8:	f043 0302 	orr.w	r3, r3, #2
   250bc:	7523      	strb	r3, [r4, #20]
}
   250be:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   250c0:	682b      	ldr	r3, [r5, #0]
   250c2:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   250c4:	f7fc fbd2 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   250c8:	2300      	movs	r3, #0
   250ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   250ce:	2107      	movs	r1, #7
   250d0:	4630      	mov	r0, r6
   250d2:	f7ff ff47 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   250d6:	4603      	mov	r3, r0
   250d8:	b1e0      	cbz	r0, 25114 <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   250da:	7b82      	ldrb	r2, [r0, #14]
   250dc:	f022 0204 	bic.w	r2, r2, #4
   250e0:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   250e2:	682e      	ldr	r6, [r5, #0]
   250e4:	6868      	ldr	r0, [r5, #4]
   250e6:	68a9      	ldr	r1, [r5, #8]
   250e8:	68ea      	ldr	r2, [r5, #12]
   250ea:	f8c3 60da 	str.w	r6, [r3, #218]	; 0xda
   250ee:	f8c3 00de 	str.w	r0, [r3, #222]	; 0xde
   250f2:	f8c3 10e2 	str.w	r1, [r3, #226]	; 0xe2
   250f6:	f8c3 20e6 	str.w	r2, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   250fa:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   250fe:	f042 0204 	orr.w	r2, r2, #4
   25102:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   25106:	4621      	mov	r1, r4
   25108:	4618      	mov	r0, r3
   2510a:	f7ff fc88 	bl	24a1e <ble_sm_key_rxed>
    ble_hs_unlock();
   2510e:	f7fc fbb1 	bl	21874 <ble_hs_unlock>
   25112:	e7d4      	b.n	250be <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25114:	2305      	movs	r3, #5
   25116:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25118:	2308      	movs	r3, #8
   2511a:	7123      	strb	r3, [r4, #4]
   2511c:	e7f7      	b.n	2510e <ble_sm_id_info_rx+0x70>

0002511e <ble_sm_master_id_rx>:
{
   2511e:	b570      	push	{r4, r5, r6, lr}
   25120:	4606      	mov	r6, r0
   25122:	460d      	mov	r5, r1
   25124:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   25126:	210a      	movs	r1, #10
   25128:	4628      	mov	r0, r5
   2512a:	f7fe f99e 	bl	2346a <ble_hs_mbuf_pullup_base>
   2512e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25130:	b130      	cbz	r0, 25140 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25132:	2308      	movs	r3, #8
   25134:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   25136:	7d23      	ldrb	r3, [r4, #20]
   25138:	f043 0302 	orr.w	r3, r3, #2
   2513c:	7523      	strb	r3, [r4, #20]
}
   2513e:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   25140:	682b      	ldr	r3, [r5, #0]
   25142:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   25144:	f7fc fb92 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   25148:	2300      	movs	r3, #0
   2514a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2514e:	2107      	movs	r1, #7
   25150:	4630      	mov	r0, r6
   25152:	f7ff ff07 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   25156:	b1d0      	cbz	r0, 2518e <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   25158:	7b82      	ldrb	r2, [r0, #14]
   2515a:	f022 0202 	bic.w	r2, r2, #2
   2515e:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   25160:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   25164:	f042 0202 	orr.w	r2, r2, #2
   25168:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   2516c:	882a      	ldrh	r2, [r5, #0]
   2516e:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   25172:	f8d5 1002 	ldr.w	r1, [r5, #2]
   25176:	f8d5 2006 	ldr.w	r2, [r5, #6]
   2517a:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   2517e:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   25182:	4621      	mov	r1, r4
   25184:	f7ff fc4b 	bl	24a1e <ble_sm_key_rxed>
    ble_hs_unlock();
   25188:	f7fc fb74 	bl	21874 <ble_hs_unlock>
   2518c:	e7d7      	b.n	2513e <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2518e:	2305      	movs	r3, #5
   25190:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25192:	2308      	movs	r3, #8
   25194:	7123      	strb	r3, [r4, #4]
   25196:	e7f7      	b.n	25188 <ble_sm_master_id_rx+0x6a>

00025198 <ble_sm_enc_info_rx>:
{
   25198:	b570      	push	{r4, r5, r6, lr}
   2519a:	4606      	mov	r6, r0
   2519c:	460d      	mov	r5, r1
   2519e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   251a0:	2110      	movs	r1, #16
   251a2:	4628      	mov	r0, r5
   251a4:	f7fe f961 	bl	2346a <ble_hs_mbuf_pullup_base>
   251a8:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   251aa:	b130      	cbz	r0, 251ba <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   251ac:	2308      	movs	r3, #8
   251ae:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   251b0:	7d23      	ldrb	r3, [r4, #20]
   251b2:	f043 0302 	orr.w	r3, r3, #2
   251b6:	7523      	strb	r3, [r4, #20]
}
   251b8:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   251ba:	682b      	ldr	r3, [r5, #0]
   251bc:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   251be:	f7fc fb55 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   251c2:	2300      	movs	r3, #0
   251c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   251c8:	2107      	movs	r1, #7
   251ca:	4630      	mov	r0, r6
   251cc:	f7ff feca 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   251d0:	4603      	mov	r3, r0
   251d2:	b1f8      	cbz	r0, 25214 <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   251d4:	7b82      	ldrb	r2, [r0, #14]
   251d6:	f022 0201 	bic.w	r2, r2, #1
   251da:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   251dc:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   251e0:	f042 0201 	orr.w	r2, r2, #1
   251e4:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   251e8:	682e      	ldr	r6, [r5, #0]
   251ea:	6868      	ldr	r0, [r5, #4]
   251ec:	68a9      	ldr	r1, [r5, #8]
   251ee:	68ea      	ldr	r2, [r5, #12]
   251f0:	f8c3 60ca 	str.w	r6, [r3, #202]	; 0xca
   251f4:	f8c3 00ce 	str.w	r0, [r3, #206]	; 0xce
   251f8:	f8c3 10d2 	str.w	r1, [r3, #210]	; 0xd2
   251fc:	f8c3 20d6 	str.w	r2, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   25200:	7bda      	ldrb	r2, [r3, #15]
   25202:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   25206:	4621      	mov	r1, r4
   25208:	4618      	mov	r0, r3
   2520a:	f7ff fc08 	bl	24a1e <ble_sm_key_rxed>
    ble_hs_unlock();
   2520e:	f7fc fb31 	bl	21874 <ble_hs_unlock>
   25212:	e7d1      	b.n	251b8 <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   25214:	2305      	movs	r3, #5
   25216:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25218:	2308      	movs	r3, #8
   2521a:	7123      	strb	r3, [r4, #4]
   2521c:	e7f7      	b.n	2520e <ble_sm_enc_info_rx+0x76>

0002521e <ble_sm_pair_req_rx>:
{
   2521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25222:	b082      	sub	sp, #8
   25224:	4606      	mov	r6, r0
   25226:	460d      	mov	r5, r1
   25228:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   2522a:	2106      	movs	r1, #6
   2522c:	4628      	mov	r0, r5
   2522e:	f7fe f91c 	bl	2346a <ble_hs_mbuf_pullup_base>
   25232:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25234:	b110      	cbz	r0, 2523c <ble_sm_pair_req_rx+0x1e>
}
   25236:	b002      	add	sp, #8
   25238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   2523c:	682b      	ldr	r3, [r5, #0]
   2523e:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   25240:	f7fc fb14 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   25244:	ab01      	add	r3, sp, #4
   25246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2524a:	21ff      	movs	r1, #255	; 0xff
   2524c:	4630      	mov	r0, r6
   2524e:	f7ff fe89 	bl	24f64 <ble_sm_proc_find>
    if (proc != NULL) {
   25252:	4605      	mov	r5, r0
   25254:	b180      	cbz	r0, 25278 <ble_sm_pair_req_rx+0x5a>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   25256:	7b43      	ldrb	r3, [r0, #13]
   25258:	2b08      	cmp	r3, #8
   2525a:	d007      	beq.n	2526c <ble_sm_pair_req_rx+0x4e>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2525c:	2308      	movs	r3, #8
   2525e:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   25260:	f44f 6381 	mov.w	r3, #1032	; 0x408
   25264:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   25266:	f7fc fb05 	bl	21874 <ble_hs_unlock>
            return;
   2526a:	e7e4      	b.n	25236 <ble_sm_pair_req_rx+0x18>
        ble_sm_proc_remove(proc, prev);
   2526c:	9901      	ldr	r1, [sp, #4]
   2526e:	f7ff f871 	bl	24354 <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   25272:	4628      	mov	r0, r5
   25274:	f7ff fd82 	bl	24d7c <ble_sm_proc_free>
    ble_hs_unlock();
   25278:	f7fc fafc 	bl	21874 <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   2527c:	4630      	mov	r0, r6
   2527e:	f7ff f8d2 	bl	24426 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   25282:	b118      	cbz	r0, 2528c <ble_sm_pair_req_rx+0x6e>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25284:	2208      	movs	r2, #8
   25286:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   25288:	6020      	str	r0, [r4, #0]
        return;
   2528a:	e7d4      	b.n	25236 <ble_sm_pair_req_rx+0x18>
    ble_hs_lock();
   2528c:	f7fc faee 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   25290:	f7ff fd7e 	bl	24d90 <ble_sm_proc_alloc>
    if (proc != NULL) {
   25294:	4605      	mov	r5, r0
   25296:	2800      	cmp	r0, #0
   25298:	d048      	beq.n	2532c <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   2529a:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   2529c:	2300      	movs	r3, #0
   2529e:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   252a0:	f7ff f888 	bl	243b4 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   252a4:	2301      	movs	r3, #1
   252a6:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   252a8:	683b      	ldr	r3, [r7, #0]
   252aa:	f8c5 3011 	str.w	r3, [r5, #17]
   252ae:	88bb      	ldrh	r3, [r7, #4]
   252b0:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   252b4:	8968      	ldrh	r0, [r5, #10]
   252b6:	f7fd f94f 	bl	22558 <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   252ba:	f890 8028 	ldrb.w	r8, [r0, #40]	; 0x28
   252be:	f018 0801 	ands.w	r8, r8, #1
   252c2:	d007      	beq.n	252d4 <ble_sm_pair_req_rx+0xb6>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   252c4:	2307      	movs	r3, #7
   252c6:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   252c8:	f240 4307 	movw	r3, #1031	; 0x407
   252cc:	6023      	str	r3, [r4, #0]
    key_size = 0;
   252ce:	2500      	movs	r5, #0
    proc_flags = 0;
   252d0:	46a8      	mov	r8, r5
   252d2:	e02d      	b.n	25330 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   252d4:	78fb      	ldrb	r3, [r7, #3]
   252d6:	2b06      	cmp	r3, #6
   252d8:	d806      	bhi.n	252e8 <ble_sm_pair_req_rx+0xca>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   252da:	2306      	movs	r3, #6
   252dc:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   252de:	f240 4306 	movw	r3, #1030	; 0x406
   252e2:	6023      	str	r3, [r4, #0]
    key_size = 0;
   252e4:	4645      	mov	r5, r8
   252e6:	e023      	b.n	25330 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   252e8:	2b10      	cmp	r3, #16
   252ea:	d906      	bls.n	252fa <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   252ec:	230a      	movs	r3, #10
   252ee:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   252f0:	f240 430a 	movw	r3, #1034	; 0x40a
   252f4:	6023      	str	r3, [r4, #0]
    key_size = 0;
   252f6:	4645      	mov	r5, r8
   252f8:	e01a      	b.n	25330 <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   252fa:	78b8      	ldrb	r0, [r7, #2]
   252fc:	f7ff f8de 	bl	244bc <ble_sm_verify_auth_requirements>
   25300:	b930      	cbnz	r0, 25310 <ble_sm_pair_req_rx+0xf2>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   25302:	2303      	movs	r3, #3
   25304:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   25306:	f240 4303 	movw	r3, #1027	; 0x403
   2530a:	6023      	str	r3, [r4, #0]
    key_size = 0;
   2530c:	4645      	mov	r5, r8
   2530e:	e00f      	b.n	25330 <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   25310:	4628      	mov	r0, r5
   25312:	f7ff f8bf 	bl	24494 <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   25316:	4628      	mov	r0, r5
   25318:	f7ff f8ed 	bl	244f6 <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   2531c:	f895 8008 	ldrb.w	r8, [r5, #8]
            key_size = proc->key_size;
   25320:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   25322:	7d23      	ldrb	r3, [r4, #20]
   25324:	f043 0301 	orr.w	r3, r3, #1
   25328:	7523      	strb	r3, [r4, #20]
   2532a:	e001      	b.n	25330 <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   2532c:	2500      	movs	r5, #0
    proc_flags = 0;
   2532e:	46a8      	mov	r8, r5
    ble_hs_unlock();
   25330:	f7fc faa0 	bl	21874 <ble_hs_unlock>
    if (res->app_status == 0) {
   25334:	6823      	ldr	r3, [r4, #0]
   25336:	2b00      	cmp	r3, #0
   25338:	f47f af7d 	bne.w	25236 <ble_sm_pair_req_rx+0x18>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   2533c:	462a      	mov	r2, r5
   2533e:	4641      	mov	r1, r8
   25340:	4630      	mov	r0, r6
   25342:	f7ff fd8c 	bl	24e5e <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   25346:	2800      	cmp	r0, #0
   25348:	f43f af75 	beq.w	25236 <ble_sm_pair_req_rx+0x18>
            res->app_status = rc;
   2534c:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   2534e:	7d23      	ldrb	r3, [r4, #20]
   25350:	f36f 0300 	bfc	r3, #0, #1
   25354:	7523      	strb	r3, [r4, #20]
   25356:	e76e      	b.n	25236 <ble_sm_pair_req_rx+0x18>

00025358 <ble_sm_ioact_state>:
    switch (action) {
   25358:	2804      	cmp	r0, #4
   2535a:	d00c      	beq.n	25376 <ble_sm_ioact_state+0x1e>
   2535c:	d807      	bhi.n	2536e <ble_sm_ioact_state+0x16>
   2535e:	3801      	subs	r0, #1
   25360:	b2c0      	uxtb	r0, r0
   25362:	2802      	cmp	r0, #2
   25364:	d801      	bhi.n	2536a <ble_sm_ioact_state+0x12>
        return BLE_SM_PROC_STATE_CONFIRM;
   25366:	2001      	movs	r0, #1
   25368:	4770      	bx	lr
    switch (action) {
   2536a:	20ff      	movs	r0, #255	; 0xff
   2536c:	4770      	bx	lr
   2536e:	2805      	cmp	r0, #5
   25370:	d103      	bne.n	2537a <ble_sm_ioact_state+0x22>
        return BLE_SM_PROC_STATE_RANDOM;
   25372:	2002      	movs	r0, #2
   25374:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   25376:	200a      	movs	r0, #10
   25378:	4770      	bx	lr
    switch (action) {
   2537a:	20ff      	movs	r0, #255	; 0xff
}
   2537c:	4770      	bx	lr

0002537e <ble_sm_proc_can_advance>:
{
   2537e:	b510      	push	{r4, lr}
   25380:	b082      	sub	sp, #8
   25382:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   25384:	f10d 0107 	add.w	r1, sp, #7
   25388:	f7ff f8ab 	bl	244e2 <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   2538c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25390:	f7ff ffe2 	bl	25358 <ble_sm_ioact_state>
   25394:	7b63      	ldrb	r3, [r4, #13]
   25396:	4298      	cmp	r0, r3
   25398:	d106      	bne.n	253a8 <ble_sm_proc_can_advance+0x2a>
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   2539a:	7a23      	ldrb	r3, [r4, #8]
   2539c:	f003 0306 	and.w	r3, r3, #6
   253a0:	2b06      	cmp	r3, #6
   253a2:	d004      	beq.n	253ae <ble_sm_proc_can_advance+0x30>
    return 0;
   253a4:	2000      	movs	r0, #0
   253a6:	e000      	b.n	253aa <ble_sm_proc_can_advance+0x2c>
        return 1;
   253a8:	2001      	movs	r0, #1
}
   253aa:	b002      	add	sp, #8
   253ac:	bd10      	pop	{r4, pc}
        return 1;
   253ae:	2001      	movs	r0, #1
   253b0:	e7fb      	b.n	253aa <ble_sm_proc_can_advance+0x2c>

000253b2 <ble_sm_confirm_rx>:
{
   253b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   253b4:	b083      	sub	sp, #12
   253b6:	4606      	mov	r6, r0
   253b8:	460d      	mov	r5, r1
   253ba:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   253bc:	2110      	movs	r1, #16
   253be:	4628      	mov	r0, r5
   253c0:	f7fe f853 	bl	2346a <ble_hs_mbuf_pullup_base>
   253c4:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   253c6:	b138      	cbz	r0, 253d8 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   253c8:	2308      	movs	r3, #8
   253ca:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   253cc:	7d23      	ldrb	r3, [r4, #20]
   253ce:	f043 0302 	orr.w	r3, r3, #2
   253d2:	7523      	strb	r3, [r4, #20]
}
   253d4:	b003      	add	sp, #12
   253d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   253d8:	682b      	ldr	r3, [r5, #0]
   253da:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   253dc:	f7fc fa46 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   253e0:	2300      	movs	r3, #0
   253e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   253e6:	2101      	movs	r1, #1
   253e8:	4630      	mov	r0, r6
   253ea:	f7ff fdbb 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   253ee:	4605      	mov	r5, r0
   253f0:	b1b0      	cbz	r0, 25420 <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   253f2:	6838      	ldr	r0, [r7, #0]
   253f4:	6879      	ldr	r1, [r7, #4]
   253f6:	68ba      	ldr	r2, [r7, #8]
   253f8:	68fb      	ldr	r3, [r7, #12]
   253fa:	f8c5 002e 	str.w	r0, [r5, #46]	; 0x2e
   253fe:	f8c5 1032 	str.w	r1, [r5, #50]	; 0x32
   25402:	f8c5 2036 	str.w	r2, [r5, #54]	; 0x36
   25406:	f8c5 303a 	str.w	r3, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2540a:	7a2b      	ldrb	r3, [r5, #8]
   2540c:	f013 0f01 	tst.w	r3, #1
   25410:	d00b      	beq.n	2542a <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   25412:	2302      	movs	r3, #2
   25414:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   25416:	7d23      	ldrb	r3, [r4, #20]
   25418:	f043 0301 	orr.w	r3, r3, #1
   2541c:	7523      	strb	r3, [r4, #20]
   2541e:	e001      	b.n	25424 <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   25420:	2305      	movs	r3, #5
   25422:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   25424:	f7fc fa26 	bl	21874 <ble_hs_unlock>
   25428:	e7d4      	b.n	253d4 <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   2542a:	f10d 0107 	add.w	r1, sp, #7
   2542e:	4628      	mov	r0, r5
   25430:	f7ff f857 	bl	244e2 <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   25434:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25438:	f7ff ff8e 	bl	25358 <ble_sm_ioact_state>
   2543c:	7b6b      	ldrb	r3, [r5, #13]
   2543e:	4298      	cmp	r0, r3
   25440:	d009      	beq.n	25456 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   25442:	4628      	mov	r0, r5
   25444:	f7ff ff9b 	bl	2537e <ble_sm_proc_can_advance>
   25448:	2800      	cmp	r0, #0
   2544a:	d0eb      	beq.n	25424 <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   2544c:	7d23      	ldrb	r3, [r4, #20]
   2544e:	f043 0301 	orr.w	r3, r3, #1
   25452:	7523      	strb	r3, [r4, #20]
   25454:	e7e6      	b.n	25424 <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   25456:	7a2b      	ldrb	r3, [r5, #8]
   25458:	f043 0304 	orr.w	r3, r3, #4
   2545c:	722b      	strb	r3, [r5, #8]
   2545e:	e7f0      	b.n	25442 <ble_sm_confirm_rx+0x90>

00025460 <ble_sm_pair_rsp_rx>:
{
   25460:	b5f0      	push	{r4, r5, r6, r7, lr}
   25462:	b083      	sub	sp, #12
   25464:	4606      	mov	r6, r0
   25466:	460d      	mov	r5, r1
   25468:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   2546a:	2106      	movs	r1, #6
   2546c:	4628      	mov	r0, r5
   2546e:	f7fd fffc 	bl	2346a <ble_hs_mbuf_pullup_base>
   25472:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25474:	b128      	cbz	r0, 25482 <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   25476:	7d23      	ldrb	r3, [r4, #20]
   25478:	f043 0302 	orr.w	r3, r3, #2
   2547c:	7523      	strb	r3, [r4, #20]
}
   2547e:	b003      	add	sp, #12
   25480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   25482:	682b      	ldr	r3, [r5, #0]
   25484:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   25486:	f7fc f9f1 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   2548a:	2300      	movs	r3, #0
   2548c:	2201      	movs	r2, #1
   2548e:	4619      	mov	r1, r3
   25490:	4630      	mov	r0, r6
   25492:	f7ff fd67 	bl	24f64 <ble_sm_proc_find>
    if (proc != NULL) {
   25496:	4605      	mov	r5, r0
   25498:	b168      	cbz	r0, 254b6 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   2549a:	2302      	movs	r3, #2
   2549c:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   2549e:	683b      	ldr	r3, [r7, #0]
   254a0:	6183      	str	r3, [r0, #24]
   254a2:	88bb      	ldrh	r3, [r7, #4]
   254a4:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   254a6:	78fb      	ldrb	r3, [r7, #3]
   254a8:	2b06      	cmp	r3, #6
   254aa:	d807      	bhi.n	254bc <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   254ac:	2306      	movs	r3, #6
   254ae:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   254b0:	f240 4306 	movw	r3, #1030	; 0x406
   254b4:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   254b6:	f7fc f9dd 	bl	21874 <ble_hs_unlock>
   254ba:	e7e0      	b.n	2547e <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   254bc:	2b10      	cmp	r3, #16
   254be:	d905      	bls.n	254cc <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   254c0:	230a      	movs	r3, #10
   254c2:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   254c4:	f240 430a 	movw	r3, #1034	; 0x40a
   254c8:	6023      	str	r3, [r4, #0]
   254ca:	e7f4      	b.n	254b6 <ble_sm_pair_rsp_rx+0x56>
        } else if (!ble_sm_verify_auth_requirements(rsp->authreq)) {
   254cc:	78b8      	ldrb	r0, [r7, #2]
   254ce:	f7fe fff5 	bl	244bc <ble_sm_verify_auth_requirements>
   254d2:	b928      	cbnz	r0, 254e0 <ble_sm_pair_rsp_rx+0x80>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   254d4:	2303      	movs	r3, #3
   254d6:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   254d8:	f240 4303 	movw	r3, #1027	; 0x403
   254dc:	6023      	str	r3, [r4, #0]
   254de:	e7ea      	b.n	254b6 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   254e0:	4628      	mov	r0, r5
   254e2:	f7ff f808 	bl	244f6 <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   254e6:	f10d 0107 	add.w	r1, sp, #7
   254ea:	4628      	mov	r0, r5
   254ec:	f7fe fff9 	bl	244e2 <ble_sm_io_action>
            if (rc != 0) {
   254f0:	b148      	cbz	r0, 25506 <ble_sm_pair_rsp_rx+0xa6>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   254f2:	2303      	movs	r3, #3
   254f4:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   254f6:	f240 4303 	movw	r3, #1027	; 0x403
   254fa:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   254fc:	7d23      	ldrb	r3, [r4, #20]
   254fe:	f043 0302 	orr.w	r3, r3, #2
   25502:	7523      	strb	r3, [r4, #20]
   25504:	e7d7      	b.n	254b6 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   25506:	4628      	mov	r0, r5
   25508:	f7fe ff99 	bl	2443e <ble_sm_state_after_pair>
   2550c:	4606      	mov	r6, r0
   2550e:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   25510:	f89d 7007 	ldrb.w	r7, [sp, #7]
   25514:	4638      	mov	r0, r7
   25516:	f7ff ff1f 	bl	25358 <ble_sm_ioact_state>
   2551a:	42b0      	cmp	r0, r6
   2551c:	d009      	beq.n	25532 <ble_sm_pair_rsp_rx+0xd2>
                if (ble_sm_proc_can_advance(proc)) {
   2551e:	4628      	mov	r0, r5
   25520:	f7ff ff2d 	bl	2537e <ble_sm_proc_can_advance>
   25524:	2800      	cmp	r0, #0
   25526:	d0c6      	beq.n	254b6 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   25528:	7d23      	ldrb	r3, [r4, #20]
   2552a:	f043 0301 	orr.w	r3, r3, #1
   2552e:	7523      	strb	r3, [r4, #20]
   25530:	e7c1      	b.n	254b6 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   25532:	7227      	strb	r7, [r4, #8]
   25534:	e7f3      	b.n	2551e <ble_sm_pair_rsp_rx+0xbe>

00025536 <ble_sm_process_result>:
{
   25536:	b5f0      	push	{r4, r5, r6, r7, lr}
   25538:	b083      	sub	sp, #12
   2553a:	4607      	mov	r7, r0
   2553c:	460c      	mov	r4, r1
    rm = 0;
   2553e:	2600      	movs	r6, #0
   25540:	e032      	b.n	255a8 <ble_sm_process_result+0x72>
                ble_sm_exec(proc, res, res->state_arg);
   25542:	6922      	ldr	r2, [r4, #16]
   25544:	4621      	mov	r1, r4
   25546:	f7ff f843 	bl	245d0 <ble_sm_exec>
   2554a:	e03c      	b.n	255c6 <ble_sm_process_result+0x90>
                rm = 1;
   2554c:	2601      	movs	r6, #1
   2554e:	e042      	b.n	255d6 <ble_sm_process_result+0xa0>
                ble_sm_proc_set_timer(proc);
   25550:	4628      	mov	r0, r5
   25552:	f7ff fb40 	bl	24bd6 <ble_sm_proc_set_timer>
   25556:	e042      	b.n	255de <ble_sm_process_result+0xa8>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   25558:	4638      	mov	r0, r7
   2555a:	f7ff fb7f 	bl	24c5c <ble_sm_pair_fail_tx>
   2555e:	e041      	b.n	255e4 <ble_sm_process_result+0xae>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore, res->bonded);
   25560:	461a      	mov	r2, r3
   25562:	f3c3 0380 	ubfx	r3, r3, #2, #1
   25566:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   2556a:	6821      	ldr	r1, [r4, #0]
   2556c:	4638      	mov	r0, r7
   2556e:	f7f9 ff54 	bl	1f41a <ble_gap_enc_event>
   25572:	e03e      	b.n	255f2 <ble_sm_process_result+0xbc>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   25574:	f104 0108 	add.w	r1, r4, #8
   25578:	4638      	mov	r0, r7
   2557a:	f7f9 ff35 	bl	1f3e8 <ble_gap_passkey_event>
   2557e:	e03d      	b.n	255fc <ble_sm_process_result+0xc6>
            ble_sm_persist_keys(proc);
   25580:	4628      	mov	r0, r5
   25582:	f7ff fb87 	bl	24c94 <ble_sm_persist_keys>
        if (rm) {
   25586:	2e00      	cmp	r6, #0
   25588:	d142      	bne.n	25610 <ble_sm_process_result+0xda>
        if (!res->execute) {
   2558a:	7d23      	ldrb	r3, [r4, #20]
   2558c:	f013 0f01 	tst.w	r3, #1
   25590:	d041      	beq.n	25616 <ble_sm_process_result+0xe0>
        memset(res, 0, sizeof *res);
   25592:	2300      	movs	r3, #0
   25594:	6023      	str	r3, [r4, #0]
   25596:	6063      	str	r3, [r4, #4]
   25598:	60a3      	str	r3, [r4, #8]
   2559a:	60e3      	str	r3, [r4, #12]
   2559c:	6123      	str	r3, [r4, #16]
   2559e:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   255a0:	7d23      	ldrb	r3, [r4, #20]
   255a2:	f043 0301 	orr.w	r3, r3, #1
   255a6:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   255a8:	f7fc f960 	bl	2186c <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   255ac:	ab01      	add	r3, sp, #4
   255ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   255b2:	21ff      	movs	r1, #255	; 0xff
   255b4:	4638      	mov	r0, r7
   255b6:	f7ff fcd5 	bl	24f64 <ble_sm_proc_find>
        if (proc != NULL) {
   255ba:	4605      	mov	r5, r0
   255bc:	b178      	cbz	r0, 255de <ble_sm_process_result+0xa8>
            if (res->execute) {
   255be:	7d23      	ldrb	r3, [r4, #20]
   255c0:	f013 0f01 	tst.w	r3, #1
   255c4:	d1bd      	bne.n	25542 <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   255c6:	6823      	ldr	r3, [r4, #0]
   255c8:	b103      	cbz	r3, 255cc <ble_sm_process_result+0x96>
                rm = 1;
   255ca:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   255cc:	7b6b      	ldrb	r3, [r5, #13]
   255ce:	2bff      	cmp	r3, #255	; 0xff
   255d0:	d0bc      	beq.n	2554c <ble_sm_process_result+0x16>
            if (rm) {
   255d2:	2e00      	cmp	r6, #0
   255d4:	d0bc      	beq.n	25550 <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   255d6:	9901      	ldr	r1, [sp, #4]
   255d8:	4628      	mov	r0, r5
   255da:	f7fe febb 	bl	24354 <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   255de:	7921      	ldrb	r1, [r4, #4]
   255e0:	2900      	cmp	r1, #0
   255e2:	d1b9      	bne.n	25558 <ble_sm_process_result+0x22>
        ble_hs_unlock();
   255e4:	f7fc f946 	bl	21874 <ble_hs_unlock>
        if (proc == NULL) {
   255e8:	b1ad      	cbz	r5, 25616 <ble_sm_process_result+0xe0>
        if (res->enc_cb) {
   255ea:	7d23      	ldrb	r3, [r4, #20]
   255ec:	f013 0f02 	tst.w	r3, #2
   255f0:	d1b6      	bne.n	25560 <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   255f2:	6823      	ldr	r3, [r4, #0]
   255f4:	b913      	cbnz	r3, 255fc <ble_sm_process_result+0xc6>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   255f6:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   255f8:	2b00      	cmp	r3, #0
   255fa:	d1bb      	bne.n	25574 <ble_sm_process_result+0x3e>
        if (res->app_status == 0    &&
   255fc:	6823      	ldr	r3, [r4, #0]
   255fe:	2b00      	cmp	r3, #0
   25600:	d1c1      	bne.n	25586 <ble_sm_process_result+0x50>
   25602:	2e00      	cmp	r6, #0
   25604:	d0bf      	beq.n	25586 <ble_sm_process_result+0x50>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   25606:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   25608:	f013 0f20 	tst.w	r3, #32
   2560c:	d0bb      	beq.n	25586 <ble_sm_process_result+0x50>
   2560e:	e7b7      	b.n	25580 <ble_sm_process_result+0x4a>
            ble_sm_proc_free(proc);
   25610:	4628      	mov	r0, r5
   25612:	f7ff fbb3 	bl	24d7c <ble_sm_proc_free>
}
   25616:	b003      	add	sp, #12
   25618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002561a <ble_sm_enc_event_rx>:
{
   2561a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2561e:	b088      	sub	sp, #32
   25620:	4606      	mov	r6, r0
   25622:	460d      	mov	r5, r1
   25624:	4617      	mov	r7, r2
    memset(&res, 0, sizeof res);
   25626:	2400      	movs	r4, #0
   25628:	9402      	str	r4, [sp, #8]
   2562a:	9403      	str	r4, [sp, #12]
   2562c:	9404      	str	r4, [sp, #16]
   2562e:	9405      	str	r4, [sp, #20]
   25630:	9406      	str	r4, [sp, #24]
   25632:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   25634:	f7fc f91a 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   25638:	4623      	mov	r3, r4
   2563a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2563e:	21ff      	movs	r1, #255	; 0xff
   25640:	4630      	mov	r0, r6
   25642:	f7ff fc8f 	bl	24f64 <ble_sm_proc_find>
    if (proc != NULL) {
   25646:	4604      	mov	r4, r0
   25648:	2800      	cmp	r0, #0
   2564a:	d03c      	beq.n	256c6 <ble_sm_enc_event_rx+0xac>
        switch (proc->state) {
   2564c:	7b43      	ldrb	r3, [r0, #13]
   2564e:	2b05      	cmp	r3, #5
   25650:	d00a      	beq.n	25668 <ble_sm_enc_event_rx+0x4e>
   25652:	2b06      	cmp	r3, #6
   25654:	d024      	beq.n	256a0 <ble_sm_enc_event_rx+0x86>
            proc->state = BLE_SM_PROC_STATE_NONE;
   25656:	23ff      	movs	r3, #255	; 0xff
   25658:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   2565a:	2308      	movs	r3, #8
   2565c:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   25660:	2300      	movs	r3, #0
    bonded = 0;
   25662:	4698      	mov	r8, r3
    authenticated = 0;
   25664:	461a      	mov	r2, r3
            break;
   25666:	e031      	b.n	256cc <ble_sm_enc_event_rx+0xb2>
            if (evt_status == 0) {
   25668:	b9b5      	cbnz	r5, 25698 <ble_sm_enc_event_rx+0x7e>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   2566a:	2307      	movs	r3, #7
   2566c:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   2566e:	7a03      	ldrb	r3, [r0, #8]
   25670:	f013 0f01 	tst.w	r3, #1
   25674:	d001      	beq.n	2567a <ble_sm_enc_event_rx+0x60>
                    proc->rx_key_flags == 0) {
   25676:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   25678:	b92b      	cbnz	r3, 25686 <ble_sm_enc_event_rx+0x6c>
                    res.execute = 1;
   2567a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2567e:	f043 0301 	orr.w	r3, r3, #1
   25682:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   25686:	7be3      	ldrb	r3, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   25688:	7a22      	ldrb	r2, [r4, #8]
   2568a:	f012 0f08 	tst.w	r2, #8
   2568e:	d12c      	bne.n	256ea <ble_sm_enc_event_rx+0xd0>
    bonded = 0;
   25690:	f04f 0800 	mov.w	r8, #0
    authenticated = 0;
   25694:	4642      	mov	r2, r8
   25696:	e019      	b.n	256cc <ble_sm_enc_event_rx+0xb2>
                proc->state = BLE_SM_PROC_STATE_NONE;
   25698:	23ff      	movs	r3, #255	; 0xff
   2569a:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   2569c:	2300      	movs	r3, #0
   2569e:	e7f3      	b.n	25688 <ble_sm_enc_event_rx+0x6e>
            proc->state = BLE_SM_PROC_STATE_NONE;
   256a0:	23ff      	movs	r3, #255	; 0xff
   256a2:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   256a4:	7a03      	ldrb	r3, [r0, #8]
   256a6:	f013 0f08 	tst.w	r3, #8
   256aa:	d10a      	bne.n	256c2 <ble_sm_enc_event_rx+0xa8>
    authenticated = 0;
   256ac:	2200      	movs	r2, #0
            res.restore = 1;
   256ae:	f89d 301c 	ldrb.w	r3, [sp, #28]
   256b2:	f043 0308 	orr.w	r3, r3, #8
   256b6:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   256ba:	7be3      	ldrb	r3, [r4, #15]
            bonded = 1;
   256bc:	f04f 0801 	mov.w	r8, #1
            break;
   256c0:	e004      	b.n	256cc <ble_sm_enc_event_rx+0xb2>
                authenticated = 1;
   256c2:	2201      	movs	r2, #1
   256c4:	e7f3      	b.n	256ae <ble_sm_enc_event_rx+0x94>
    key_size = 0;
   256c6:	2300      	movs	r3, #0
    bonded = 0;
   256c8:	4698      	mov	r8, r3
    authenticated = 0;
   256ca:	461a      	mov	r2, r3
    if (evt_status == 0) {
   256cc:	b18d      	cbz	r5, 256f2 <ble_sm_enc_event_rx+0xd8>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   256ce:	b114      	cbz	r4, 256d6 <ble_sm_enc_event_rx+0xbc>
   256d0:	7b63      	ldrb	r3, [r4, #13]
   256d2:	2bff      	cmp	r3, #255	; 0xff
   256d4:	d116      	bne.n	25704 <ble_sm_enc_event_rx+0xea>
        res.enc_cb = 1;
   256d6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   256da:	f043 0302 	orr.w	r3, r3, #2
   256de:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   256e2:	b16d      	cbz	r5, 25700 <ble_sm_enc_event_rx+0xe6>
   256e4:	f505 7500 	add.w	r5, r5, #512	; 0x200
   256e8:	e00b      	b.n	25702 <ble_sm_enc_event_rx+0xe8>
    bonded = 0;
   256ea:	f04f 0800 	mov.w	r8, #0
                authenticated = 1;
   256ee:	2201      	movs	r2, #1
   256f0:	e7ec      	b.n	256cc <ble_sm_enc_event_rx+0xb2>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   256f2:	9300      	str	r3, [sp, #0]
   256f4:	4643      	mov	r3, r8
   256f6:	4639      	mov	r1, r7
   256f8:	4630      	mov	r0, r6
   256fa:	f7ff f814 	bl	24726 <ble_sm_update_sec_state>
   256fe:	e7e6      	b.n	256ce <ble_sm_enc_event_rx+0xb4>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   25700:	2500      	movs	r5, #0
   25702:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   25704:	f7fc f8b6 	bl	21874 <ble_hs_unlock>
    res.bonded = bonded;
   25708:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2570c:	f368 0382 	bfi	r3, r8, #2, #1
   25710:	f88d 301c 	strb.w	r3, [sp, #28]
    ble_sm_process_result(conn_handle, &res);
   25714:	a902      	add	r1, sp, #8
   25716:	4630      	mov	r0, r6
   25718:	f7ff ff0d 	bl	25536 <ble_sm_process_result>
}
   2571c:	b008      	add	sp, #32
   2571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00025724 <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   25724:	b570      	push	{r4, r5, r6, lr}
   25726:	b088      	sub	sp, #32
   25728:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);
   2572a:	4a1b      	ldr	r2, [pc, #108]	; (25798 <ble_sm_rx+0x74>)
   2572c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2572e:	3301      	adds	r3, #1
   25730:	6313      	str	r3, [r2, #48]	; 0x30

    conn_handle = ble_l2cap_get_conn_handle(chan);
   25732:	f7fe fa3c 	bl	23bae <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   25736:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2573a:	4298      	cmp	r0, r3
   2573c:	d026      	beq.n	2578c <ble_sm_rx+0x68>
   2573e:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   25740:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   25744:	f10d 0307 	add.w	r3, sp, #7
   25748:	2201      	movs	r2, #1
   2574a:	2100      	movs	r1, #0
   2574c:	6920      	ldr	r0, [r4, #16]
   2574e:	f7e7 ff3b 	bl	d5c8 <os_mbuf_copydata>
    if (rc != 0) {
   25752:	b9e8      	cbnz	r0, 25790 <ble_sm_rx+0x6c>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   25754:	2101      	movs	r1, #1
   25756:	6920      	ldr	r0, [r4, #16]
   25758:	f7e7 ff63 	bl	d622 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   2575c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25760:	f7fe fdee 	bl	24340 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   25764:	4604      	mov	r4, r0
   25766:	b1a8      	cbz	r0, 25794 <ble_sm_rx+0x70>
        memset(&res, 0, sizeof res);
   25768:	2300      	movs	r3, #0
   2576a:	9302      	str	r3, [sp, #8]
   2576c:	9303      	str	r3, [sp, #12]
   2576e:	9304      	str	r3, [sp, #16]
   25770:	9305      	str	r3, [sp, #20]
   25772:	9306      	str	r3, [sp, #24]
   25774:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   25776:	aa02      	add	r2, sp, #8
   25778:	4631      	mov	r1, r6
   2577a:	4628      	mov	r0, r5
   2577c:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   2577e:	a902      	add	r1, sp, #8
   25780:	4628      	mov	r0, r5
   25782:	f7ff fed8 	bl	25536 <ble_sm_process_result>
        rc = res.app_status;
   25786:	9802      	ldr	r0, [sp, #8]
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   25788:	b008      	add	sp, #32
   2578a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
   2578c:	2007      	movs	r0, #7
   2578e:	e7fb      	b.n	25788 <ble_sm_rx+0x64>
        return BLE_HS_EBADDATA;
   25790:	200a      	movs	r0, #10
   25792:	e7f9      	b.n	25788 <ble_sm_rx+0x64>
        rc = BLE_HS_ENOTSUP;
   25794:	2008      	movs	r0, #8
   25796:	e7f7      	b.n	25788 <ble_sm_rx+0x64>
   25798:	20003720 	.word	0x20003720

0002579c <ble_sm_enc_change_rx>:
{
   2579c:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   2579e:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   257a0:	f002 0201 	and.w	r2, r2, #1
   257a4:	7801      	ldrb	r1, [r0, #0]
   257a6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   257aa:	f7ff ff36 	bl	2561a <ble_sm_enc_event_rx>
}
   257ae:	bd08      	pop	{r3, pc}

000257b0 <ble_sm_enc_key_refresh_rx>:
{
   257b0:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   257b2:	2201      	movs	r2, #1
   257b4:	7801      	ldrb	r1, [r0, #0]
   257b6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   257ba:	f7ff ff2e 	bl	2561a <ble_sm_enc_event_rx>
}
   257be:	bd08      	pop	{r3, pc}

000257c0 <ble_sm_ltk_req_rx>:
{
   257c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   257c2:	b0a9      	sub	sp, #164	; 0xa4
   257c4:	4605      	mov	r5, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   257c6:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   257ca:	b2be      	uxth	r6, r7
    memset(&res, 0, sizeof res);
   257cc:	2400      	movs	r4, #0
   257ce:	9407      	str	r4, [sp, #28]
   257d0:	9408      	str	r4, [sp, #32]
   257d2:	9409      	str	r4, [sp, #36]	; 0x24
   257d4:	940a      	str	r4, [sp, #40]	; 0x28
   257d6:	940b      	str	r4, [sp, #44]	; 0x2c
   257d8:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   257da:	f7fc f847 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   257de:	4623      	mov	r3, r4
   257e0:	4622      	mov	r2, r4
   257e2:	21ff      	movs	r1, #255	; 0xff
   257e4:	4630      	mov	r0, r6
   257e6:	f7ff fbbd 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   257ea:	b168      	cbz	r0, 25808 <ble_sm_ltk_req_rx+0x48>
   257ec:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   257ee:	7b43      	ldrb	r3, [r0, #13]
   257f0:	2b08      	cmp	r3, #8
   257f2:	d01c      	beq.n	2582e <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   257f4:	2b03      	cmp	r3, #3
   257f6:	d13b      	bne.n	25870 <ble_sm_ltk_req_rx+0xb0>
        res.execute = 1;
   257f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   257fc:	f043 0301 	orr.w	r3, r3, #1
   25800:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   25804:	2700      	movs	r7, #0
   25806:	e026      	b.n	25856 <ble_sm_ltk_req_rx+0x96>
        proc = ble_sm_proc_alloc();
   25808:	f7ff fac2 	bl	24d90 <ble_sm_proc_alloc>
        if (proc == NULL) {
   2580c:	4604      	mov	r4, r0
   2580e:	b158      	cbz	r0, 25828 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   25810:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   25812:	2304      	movs	r3, #4
   25814:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   25816:	f7fe fdcd 	bl	243b4 <ble_sm_insert>
            res.execute = 1;
   2581a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2581e:	f043 0301 	orr.w	r3, r3, #1
   25822:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    if (restore) {
   25826:	e00a      	b.n	2583e <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   25828:	2306      	movs	r3, #6
   2582a:	9307      	str	r3, [sp, #28]
    if (restore) {
   2582c:	e007      	b.n	2583e <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   2582e:	2304      	movs	r3, #4
   25830:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   25832:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   25836:	f043 0301 	orr.w	r3, r3, #1
   2583a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   2583e:	4630      	mov	r0, r6
   25840:	f7fc fe8a 	bl	22558 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   25844:	a90d      	add	r1, sp, #52	; 0x34
   25846:	f7fc fea7 	bl	22598 <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   2584a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2584c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   2584e:	9005      	str	r0, [sp, #20]
   25850:	f8ad 1018 	strh.w	r1, [sp, #24]
   25854:	2701      	movs	r7, #1
    ble_hs_unlock();
   25856:	f7fc f80d 	bl	21874 <ble_hs_unlock>
    if (proc == NULL) {
   2585a:	b17c      	cbz	r4, 2587c <ble_sm_ltk_req_rx+0xbc>
    if (res.app_status == 0) {
   2585c:	9b07      	ldr	r3, [sp, #28]
   2585e:	b903      	cbnz	r3, 25862 <ble_sm_ltk_req_rx+0xa2>
        if (restore) {
   25860:	b977      	cbnz	r7, 25880 <ble_sm_ltk_req_rx+0xc0>
    ble_sm_process_result(conn_handle, &res);
   25862:	a907      	add	r1, sp, #28
   25864:	4630      	mov	r0, r6
   25866:	f7ff fe66 	bl	25536 <ble_sm_process_result>
    return 0;
   2586a:	2000      	movs	r0, #0
}
   2586c:	b029      	add	sp, #164	; 0xa4
   2586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   25870:	4630      	mov	r0, r6
   25872:	f7ff f961 	bl	24b38 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   25876:	2700      	movs	r7, #0
        proc = NULL;
   25878:	463c      	mov	r4, r7
   2587a:	e7ec      	b.n	25856 <ble_sm_ltk_req_rx+0x96>
        return res.app_status;
   2587c:	9807      	ldr	r0, [sp, #28]
   2587e:	e7f5      	b.n	2586c <ble_sm_ltk_req_rx+0xac>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   25880:	ab14      	add	r3, sp, #80	; 0x50
   25882:	9302      	str	r3, [sp, #8]
   25884:	ab05      	add	r3, sp, #20
   25886:	9301      	str	r3, [sp, #4]
   25888:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   2588c:	9300      	str	r3, [sp, #0]
   2588e:	f8d5 2003 	ldr.w	r2, [r5, #3]
   25892:	f8d5 3007 	ldr.w	r3, [r5, #7]
   25896:	f8b5 000b 	ldrh.w	r0, [r5, #11]
   2589a:	f7ff fa89 	bl	24db0 <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   2589e:	b910      	cbnz	r0, 258a6 <ble_sm_ltk_req_rx+0xe6>
                res.state_arg = &value_sec;
   258a0:	ab14      	add	r3, sp, #80	; 0x50
   258a2:	930b      	str	r3, [sp, #44]	; 0x2c
   258a4:	e7dd      	b.n	25862 <ble_sm_ltk_req_rx+0xa2>
                res.state_arg = NULL;
   258a6:	2300      	movs	r3, #0
   258a8:	930b      	str	r3, [sp, #44]	; 0x2c
   258aa:	e7da      	b.n	25862 <ble_sm_ltk_req_rx+0xa2>

000258ac <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   258ac:	7a03      	ldrb	r3, [r0, #8]
   258ae:	f013 0f01 	tst.w	r3, #1
   258b2:	d001      	beq.n	258b8 <ble_sm_our_pair_rand+0xc>
        return proc->randm;
   258b4:	303e      	adds	r0, #62	; 0x3e
   258b6:	4770      	bx	lr
        return proc->rands;
   258b8:	304e      	adds	r0, #78	; 0x4e
}
   258ba:	4770      	bx	lr

000258bc <ble_sm_pair_exec>:
{
   258bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   258be:	b083      	sub	sp, #12
   258c0:	4604      	mov	r4, r0
   258c2:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   258c4:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   258c6:	f013 0501 	ands.w	r5, r3, #1
   258ca:	d01d      	beq.n	25908 <ble_sm_pair_exec+0x4c>
   258cc:	2001      	movs	r0, #1
   258ce:	aa01      	add	r2, sp, #4
   258d0:	2106      	movs	r1, #6
   258d2:	f000 f9df 	bl	25c94 <ble_sm_cmd_get>
    if (cmd == NULL) {
   258d6:	4607      	mov	r7, r0
   258d8:	2800      	cmp	r0, #0
   258da:	d03f      	beq.n	2595c <ble_sm_pair_exec+0xa0>
    if (is_req) {
   258dc:	b1b5      	cbz	r5, 2590c <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   258de:	4620      	mov	r0, r4
   258e0:	f7fe fdc8 	bl	24474 <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   258e4:	4623      	mov	r3, r4
   258e6:	f853 2f11 	ldr.w	r2, [r3, #17]!
   258ea:	603a      	str	r2, [r7, #0]
   258ec:	889b      	ldrh	r3, [r3, #4]
   258ee:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   258f0:	9901      	ldr	r1, [sp, #4]
   258f2:	8960      	ldrh	r0, [r4, #10]
   258f4:	f000 f9e8 	bl	25cc8 <ble_sm_tx>
    if (rc != 0) {
   258f8:	4603      	mov	r3, r0
   258fa:	b300      	cbz	r0, 2593e <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   258fc:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   258fe:	b90d      	cbnz	r5, 25904 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25900:	2308      	movs	r3, #8
   25902:	7133      	strb	r3, [r6, #4]
}
   25904:	b003      	add	sp, #12
   25906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   25908:	2002      	movs	r0, #2
   2590a:	e7e0      	b.n	258ce <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   2590c:	4623      	mov	r3, r4
   2590e:	f853 2f18 	ldr.w	r2, [r3, #24]!
   25912:	6002      	str	r2, [r0, #0]
   25914:	889b      	ldrh	r3, [r3, #4]
   25916:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   25918:	4620      	mov	r0, r4
   2591a:	f7fe fd90 	bl	2443e <ble_sm_state_after_pair>
   2591e:	7360      	strb	r0, [r4, #13]
        rc = ble_sm_io_action(proc, &ioact);
   25920:	f10d 0103 	add.w	r1, sp, #3
   25924:	4620      	mov	r0, r4
   25926:	f7fe fddc 	bl	244e2 <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   2592a:	f89d 7003 	ldrb.w	r7, [sp, #3]
   2592e:	4638      	mov	r0, r7
   25930:	f7ff fd12 	bl	25358 <ble_sm_ioact_state>
   25934:	7b63      	ldrb	r3, [r4, #13]
   25936:	4298      	cmp	r0, r3
   25938:	d1da      	bne.n	258f0 <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   2593a:	7237      	strb	r7, [r6, #8]
   2593c:	e7d8      	b.n	258f0 <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   2593e:	4620      	mov	r0, r4
   25940:	f7ff ffb4 	bl	258ac <ble_sm_our_pair_rand>
   25944:	f7ff faca 	bl	24edc <ble_sm_gen_pair_rand>
   25948:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   2594a:	2800      	cmp	r0, #0
   2594c:	d0da      	beq.n	25904 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2594e:	2308      	movs	r3, #8
   25950:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   25952:	7d33      	ldrb	r3, [r6, #20]
   25954:	f043 0302 	orr.w	r3, r3, #2
   25958:	7533      	strb	r3, [r6, #20]
        return;
   2595a:	e7d3      	b.n	25904 <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   2595c:	2306      	movs	r3, #6
   2595e:	e7cd      	b.n	258fc <ble_sm_pair_exec+0x40>

00025960 <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25960:	7a03      	ldrb	r3, [r0, #8]
   25962:	f013 0f01 	tst.w	r3, #1
   25966:	d001      	beq.n	2596c <ble_sm_peer_pair_rand+0xc>
        return proc->rands;
   25968:	304e      	adds	r0, #78	; 0x4e
   2596a:	4770      	bx	lr
        return proc->randm;
   2596c:	303e      	adds	r0, #62	; 0x3e
}
   2596e:	4770      	bx	lr

00025970 <ble_sm_random_rx>:
{
   25970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25972:	4606      	mov	r6, r0
   25974:	460d      	mov	r5, r1
   25976:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   25978:	2110      	movs	r1, #16
   2597a:	4628      	mov	r0, r5
   2597c:	f7fd fd75 	bl	2346a <ble_hs_mbuf_pullup_base>
   25980:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25982:	b130      	cbz	r0, 25992 <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25984:	2308      	movs	r3, #8
   25986:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   25988:	7d23      	ldrb	r3, [r4, #20]
   2598a:	f043 0302 	orr.w	r3, r3, #2
   2598e:	7523      	strb	r3, [r4, #20]
}
   25990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   25992:	682b      	ldr	r3, [r5, #0]
   25994:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   25996:	f7fb ff69 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   2599a:	2300      	movs	r3, #0
   2599c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   259a0:	2102      	movs	r1, #2
   259a2:	4630      	mov	r0, r6
   259a4:	f7ff fade 	bl	24f64 <ble_sm_proc_find>
    if (proc == NULL) {
   259a8:	4606      	mov	r6, r0
   259aa:	b190      	cbz	r0, 259d2 <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   259ac:	f7ff ffd8 	bl	25960 <ble_sm_peer_pair_rand>
   259b0:	682f      	ldr	r7, [r5, #0]
   259b2:	6869      	ldr	r1, [r5, #4]
   259b4:	68aa      	ldr	r2, [r5, #8]
   259b6:	68eb      	ldr	r3, [r5, #12]
   259b8:	6007      	str	r7, [r0, #0]
   259ba:	6041      	str	r1, [r0, #4]
   259bc:	6082      	str	r2, [r0, #8]
   259be:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   259c0:	7a33      	ldrb	r3, [r6, #8]
   259c2:	f013 0f10 	tst.w	r3, #16
   259c6:	d106      	bne.n	259d6 <ble_sm_random_rx+0x66>
            ble_sm_lgcy_random_rx(proc, res);
   259c8:	4621      	mov	r1, r4
   259ca:	4630      	mov	r0, r6
   259cc:	f000 fa93 	bl	25ef6 <ble_sm_lgcy_random_rx>
   259d0:	e001      	b.n	259d6 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   259d2:	2305      	movs	r3, #5
   259d4:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   259d6:	f7fb ff4d 	bl	21874 <ble_hs_unlock>
   259da:	e7d9      	b.n	25990 <ble_sm_random_rx+0x20>

000259dc <ble_sm_timer>:
{
   259dc:	b530      	push	{r4, r5, lr}
   259de:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   259e0:	4668      	mov	r0, sp
   259e2:	f7ff f903 	bl	24bec <ble_sm_extract_expired>
   259e6:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   259e8:	e004      	b.n	259f4 <ble_sm_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   259ea:	f8cd d004 	str.w	sp, [sp, #4]
        ble_sm_proc_free(proc);
   259ee:	4620      	mov	r0, r4
   259f0:	f7ff f9c4 	bl	24d7c <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   259f4:	9c00      	ldr	r4, [sp, #0]
   259f6:	b15c      	cbz	r4, 25a10 <ble_sm_timer+0x34>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0, 0);
   259f8:	2300      	movs	r3, #0
   259fa:	461a      	mov	r2, r3
   259fc:	210d      	movs	r1, #13
   259fe:	8960      	ldrh	r0, [r4, #10]
   25a00:	f7f9 fd0b 	bl	1f41a <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   25a04:	9b00      	ldr	r3, [sp, #0]
   25a06:	681b      	ldr	r3, [r3, #0]
   25a08:	9300      	str	r3, [sp, #0]
   25a0a:	2b00      	cmp	r3, #0
   25a0c:	d1ef      	bne.n	259ee <ble_sm_timer+0x12>
   25a0e:	e7ec      	b.n	259ea <ble_sm_timer+0xe>
}
   25a10:	4628      	mov	r0, r5
   25a12:	b003      	add	sp, #12
   25a14:	bd30      	pop	{r4, r5, pc}

00025a16 <ble_sm_pair_initiate>:
{
   25a16:	b530      	push	{r4, r5, lr}
   25a18:	b087      	sub	sp, #28
   25a1a:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   25a1c:	2400      	movs	r4, #0
   25a1e:	9400      	str	r4, [sp, #0]
   25a20:	9401      	str	r4, [sp, #4]
   25a22:	9402      	str	r4, [sp, #8]
   25a24:	9403      	str	r4, [sp, #12]
   25a26:	9404      	str	r4, [sp, #16]
   25a28:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   25a2a:	f7fb ff1f 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   25a2e:	4623      	mov	r3, r4
   25a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25a34:	21ff      	movs	r1, #255	; 0xff
   25a36:	4628      	mov	r0, r5
   25a38:	f7ff fa94 	bl	24f64 <ble_sm_proc_find>
   25a3c:	4604      	mov	r4, r0
    ble_hs_unlock();
   25a3e:	f7fb ff19 	bl	21874 <ble_hs_unlock>
    if (proc != NULL) {
   25a42:	bb2c      	cbnz	r4, 25a90 <ble_sm_pair_initiate+0x7a>
    rc = ble_sm_chk_store_overflow(conn_handle);
   25a44:	4628      	mov	r0, r5
   25a46:	f7fe fcee 	bl	24426 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   25a4a:	bb10      	cbnz	r0, 25a92 <ble_sm_pair_initiate+0x7c>
    proc = ble_sm_proc_alloc();
   25a4c:	f7ff f9a0 	bl	24d90 <ble_sm_proc_alloc>
    if (proc == NULL) {
   25a50:	4604      	mov	r4, r0
   25a52:	b1d0      	cbz	r0, 25a8a <ble_sm_pair_initiate+0x74>
        proc->conn_handle = conn_handle;
   25a54:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   25a56:	2300      	movs	r3, #0
   25a58:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   25a5a:	7a03      	ldrb	r3, [r0, #8]
   25a5c:	f043 0301 	orr.w	r3, r3, #1
   25a60:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   25a62:	f7fb ff03 	bl	2186c <ble_hs_lock>
        ble_sm_insert(proc);
   25a66:	4620      	mov	r0, r4
   25a68:	f7fe fca4 	bl	243b4 <ble_sm_insert>
        ble_hs_unlock();
   25a6c:	f7fb ff02 	bl	21874 <ble_hs_unlock>
        res.execute = 1;
   25a70:	f89d 3014 	ldrb.w	r3, [sp, #20]
   25a74:	f043 0301 	orr.w	r3, r3, #1
   25a78:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   25a7c:	b11c      	cbz	r4, 25a86 <ble_sm_pair_initiate+0x70>
        ble_sm_process_result(conn_handle, &res);
   25a7e:	4669      	mov	r1, sp
   25a80:	4628      	mov	r0, r5
   25a82:	f7ff fd58 	bl	25536 <ble_sm_process_result>
    return res.app_status;
   25a86:	9800      	ldr	r0, [sp, #0]
   25a88:	e003      	b.n	25a92 <ble_sm_pair_initiate+0x7c>
        res.app_status = BLE_HS_ENOMEM;
   25a8a:	2306      	movs	r3, #6
   25a8c:	9300      	str	r3, [sp, #0]
   25a8e:	e7f5      	b.n	25a7c <ble_sm_pair_initiate+0x66>
        return BLE_HS_EALREADY;
   25a90:	2002      	movs	r0, #2
}
   25a92:	b007      	add	sp, #28
   25a94:	bd30      	pop	{r4, r5, pc}

00025a96 <ble_sm_enc_initiate>:
{
   25a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a9a:	b08e      	sub	sp, #56	; 0x38
   25a9c:	4605      	mov	r5, r0
   25a9e:	4688      	mov	r8, r1
   25aa0:	4617      	mov	r7, r2
   25aa2:	461e      	mov	r6, r3
    memset(&res, 0, sizeof res);
   25aa4:	2400      	movs	r4, #0
   25aa6:	9408      	str	r4, [sp, #32]
   25aa8:	9409      	str	r4, [sp, #36]	; 0x24
   25aaa:	940a      	str	r4, [sp, #40]	; 0x28
   25aac:	940b      	str	r4, [sp, #44]	; 0x2c
   25aae:	940c      	str	r4, [sp, #48]	; 0x30
   25ab0:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   25ab2:	f7fb fedb 	bl	2186c <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   25ab6:	4623      	mov	r3, r4
   25ab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25abc:	21ff      	movs	r1, #255	; 0xff
   25abe:	4628      	mov	r0, r5
   25ac0:	f7ff fa50 	bl	24f64 <ble_sm_proc_find>
    if (proc != NULL) {
   25ac4:	b158      	cbz	r0, 25ade <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   25ac6:	2302      	movs	r3, #2
   25ac8:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   25aca:	f7fb fed3 	bl	21874 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   25ace:	a908      	add	r1, sp, #32
   25ad0:	4628      	mov	r0, r5
   25ad2:	f7ff fd30 	bl	25536 <ble_sm_process_result>
}
   25ad6:	9808      	ldr	r0, [sp, #32]
   25ad8:	b00e      	add	sp, #56	; 0x38
   25ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   25ade:	f7ff f957 	bl	24d90 <ble_sm_proc_alloc>
        if (proc == NULL) {
   25ae2:	4603      	mov	r3, r0
   25ae4:	b338      	cbz	r0, 25b36 <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   25ae6:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   25ae8:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   25aec:	2206      	movs	r2, #6
   25aee:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   25af0:	7a02      	ldrb	r2, [r0, #8]
   25af2:	f042 0201 	orr.w	r2, r2, #1
   25af6:	7202      	strb	r2, [r0, #8]
            if (auth) {
   25af8:	9916      	ldr	r1, [sp, #88]	; 0x58
   25afa:	b111      	cbz	r1, 25b02 <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   25afc:	f042 0208 	orr.w	r2, r2, #8
   25b00:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   25b02:	4618      	mov	r0, r3
   25b04:	f7fe fc56 	bl	243b4 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   25b08:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   25b0c:	f8ad 6002 	strh.w	r6, [sp, #2]
            cmd.random_number = rand_val;
   25b10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   25b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   25b18:	ac04      	add	r4, sp, #16
   25b1a:	6838      	ldr	r0, [r7, #0]
   25b1c:	6879      	ldr	r1, [r7, #4]
   25b1e:	68ba      	ldr	r2, [r7, #8]
   25b20:	68fb      	ldr	r3, [r7, #12]
   25b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   25b24:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   25b28:	f043 0301 	orr.w	r3, r3, #1
   25b2c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   25b30:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   25b34:	e7c9      	b.n	25aca <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   25b36:	2306      	movs	r3, #6
   25b38:	9308      	str	r3, [sp, #32]
   25b3a:	e7c6      	b.n	25aca <ble_sm_enc_initiate+0x34>

00025b3c <ble_sm_sec_req_rx>:
{
   25b3c:	b570      	push	{r4, r5, r6, lr}
   25b3e:	b0a8      	sub	sp, #160	; 0xa0
   25b40:	4606      	mov	r6, r0
   25b42:	460d      	mov	r5, r1
   25b44:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   25b46:	2101      	movs	r1, #1
   25b48:	4628      	mov	r0, r5
   25b4a:	f7fd fc8e 	bl	2346a <ble_hs_mbuf_pullup_base>
   25b4e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   25b50:	b108      	cbz	r0, 25b56 <ble_sm_sec_req_rx+0x1a>
}
   25b52:	b028      	add	sp, #160	; 0xa0
   25b54:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   25b56:	682b      	ldr	r3, [r5, #0]
   25b58:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   25b5a:	f7fb fe87 	bl	2186c <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   25b5e:	4630      	mov	r0, r6
   25b60:	f7fc fcfa 	bl	22558 <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   25b64:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   25b68:	f013 0f01 	tst.w	r3, #1
   25b6c:	d132      	bne.n	25bd4 <ble_sm_sec_req_rx+0x98>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   25b6e:	f240 4307 	movw	r3, #1031	; 0x407
   25b72:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   25b74:	2307      	movs	r3, #7
   25b76:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   25b78:	f7fb fe7c 	bl	21874 <ble_hs_unlock>
    if (res->app_status == 0) {
   25b7c:	6823      	ldr	r3, [r4, #0]
   25b7e:	2b00      	cmp	r3, #0
   25b80:	d1e7      	bne.n	25b52 <ble_sm_sec_req_rx+0x16>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   25b82:	782b      	ldrb	r3, [r5, #0]
   25b84:	f013 0f01 	tst.w	r3, #1
   25b88:	d13b      	bne.n	25c02 <ble_sm_sec_req_rx+0xc6>
            res->app_status = BLE_HS_ENOENT;
   25b8a:	2305      	movs	r3, #5
   25b8c:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   25b8e:	6823      	ldr	r3, [r4, #0]
   25b90:	b953      	cbnz	r3, 25ba8 <ble_sm_sec_req_rx+0x6c>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   25b92:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   25b94:	f013 0f04 	tst.w	r3, #4
   25b98:	d006      	beq.n	25ba8 <ble_sm_sec_req_rx+0x6c>
   25b9a:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   25b9e:	f013 0f02 	tst.w	r3, #2
   25ba2:	d101      	bne.n	25ba8 <ble_sm_sec_req_rx+0x6c>
                res->app_status = BLE_HS_EREJECT;
   25ba4:	2310      	movs	r3, #16
   25ba6:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   25ba8:	6823      	ldr	r3, [r4, #0]
   25baa:	2b00      	cmp	r3, #0
   25bac:	d12f      	bne.n	25c0e <ble_sm_sec_req_rx+0xd2>
                                                  value_sec.authenticated);
   25bae:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   25bb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   25bb6:	9302      	str	r3, [sp, #8]
   25bb8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   25bbc:	e9cd 2300 	strd	r2, r3, [sp]
   25bc0:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   25bc4:	aa1a      	add	r2, sp, #104	; 0x68
   25bc6:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   25bca:	4630      	mov	r0, r6
   25bcc:	f7ff ff63 	bl	25a96 <ble_sm_enc_initiate>
   25bd0:	6020      	str	r0, [r4, #0]
   25bd2:	e7be      	b.n	25b52 <ble_sm_sec_req_rx+0x16>
        ble_hs_conn_addrs(conn, &addrs);
   25bd4:	a905      	add	r1, sp, #20
   25bd6:	f7fc fcdf 	bl	22598 <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   25bda:	2300      	movs	r3, #0
   25bdc:	930d      	str	r3, [sp, #52]	; 0x34
   25bde:	930e      	str	r3, [sp, #56]	; 0x38
   25be0:	930f      	str	r3, [sp, #60]	; 0x3c
   25be2:	9310      	str	r3, [sp, #64]	; 0x40
   25be4:	9311      	str	r3, [sp, #68]	; 0x44
   25be6:	9312      	str	r3, [sp, #72]	; 0x48
   25be8:	9313      	str	r3, [sp, #76]	; 0x4c
        key_sec.peer_addr = addrs.peer_id_addr;
   25bea:	f8dd 001b 	ldr.w	r0, [sp, #27]
   25bee:	900c      	str	r0, [sp, #48]	; 0x30
   25bf0:	f8bd 201f 	ldrh.w	r2, [sp, #31]
   25bf4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25bf8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   25bfc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   25c00:	e7ba      	b.n	25b78 <ble_sm_sec_req_rx+0x3c>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   25c02:	a914      	add	r1, sp, #80	; 0x50
   25c04:	a80c      	add	r0, sp, #48	; 0x30
   25c06:	f000 fa42 	bl	2608e <ble_store_read_peer_sec>
   25c0a:	6020      	str	r0, [r4, #0]
   25c0c:	e7bf      	b.n	25b8e <ble_sm_sec_req_rx+0x52>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   25c0e:	4630      	mov	r0, r6
   25c10:	f7ff ff01 	bl	25a16 <ble_sm_pair_initiate>
   25c14:	6020      	str	r0, [r4, #0]
   25c16:	e79c      	b.n	25b52 <ble_sm_sec_req_rx+0x16>

00025c18 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   25c18:	b500      	push	{lr}
   25c1a:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   25c1c:	2300      	movs	r3, #0
   25c1e:	9301      	str	r3, [sp, #4]
   25c20:	9302      	str	r3, [sp, #8]
   25c22:	9303      	str	r3, [sp, #12]
   25c24:	9304      	str	r3, [sp, #16]
   25c26:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   25c28:	2307      	movs	r3, #7
   25c2a:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   25c2c:	2302      	movs	r3, #2
   25c2e:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   25c32:	4669      	mov	r1, sp
   25c34:	f7ff fc7f 	bl	25536 <ble_sm_process_result>
}
   25c38:	b007      	add	sp, #28
   25c3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00025c40 <ble_sm_init>:

int
ble_sm_init(void)
{
   25c40:	b500      	push	{lr}
   25c42:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   25c44:	4b07      	ldr	r3, [pc, #28]	; (25c64 <ble_sm_init+0x24>)
   25c46:	2200      	movs	r2, #0
   25c48:	601a      	str	r2, [r3, #0]
   25c4a:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   25c4c:	4b06      	ldr	r3, [pc, #24]	; (25c68 <ble_sm_init+0x28>)
   25c4e:	9300      	str	r3, [sp, #0]
   25c50:	4b06      	ldr	r3, [pc, #24]	; (25c6c <ble_sm_init+0x2c>)
   25c52:	f44f 7280 	mov.w	r2, #256	; 0x100
   25c56:	2101      	movs	r1, #1
   25c58:	4805      	ldr	r0, [pc, #20]	; (25c70 <ble_sm_init+0x30>)
   25c5a:	f7e7 ffb1 	bl	dbc0 <os_mempool_init>
    }

    ble_sm_sc_init();

    return 0;
}
   25c5e:	b003      	add	sp, #12
   25c60:	f85d fb04 	ldr.w	pc, [sp], #4
   25c64:	200038ac 	.word	0x200038ac
   25c68:	0002e564 	.word	0x0002e564
   25c6c:	20003790 	.word	0x20003790
   25c70:	20003890 	.word	0x20003890

00025c74 <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   25c74:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   25c76:	f7fd ff3b 	bl	23af0 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   25c7a:	4603      	mov	r3, r0
   25c7c:	b130      	cbz	r0, 25c8c <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   25c7e:	2206      	movs	r2, #6
   25c80:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   25c82:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   25c84:	2241      	movs	r2, #65	; 0x41
   25c86:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   25c88:	4a01      	ldr	r2, [pc, #4]	; (25c90 <ble_sm_create_chan+0x1c>)
   25c8a:	6182      	str	r2, [r0, #24]

    return chan;
}
   25c8c:	4618      	mov	r0, r3
   25c8e:	bd08      	pop	{r3, pc}
   25c90:	00025725 	.word	0x00025725

00025c94 <ble_sm_cmd_get>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   25c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c96:	4607      	mov	r7, r0
   25c98:	460d      	mov	r5, r1
   25c9a:	4616      	mov	r6, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   25c9c:	f7fd fbc6 	bl	2342c <ble_hs_mbuf_l2cap_pkt>
   25ca0:	4604      	mov	r4, r0
   25ca2:	6030      	str	r0, [r6, #0]
    if (*txom == NULL) {
   25ca4:	b148      	cbz	r0, 25cba <ble_sm_cmd_get+0x26>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   25ca6:	1c69      	adds	r1, r5, #1
   25ca8:	b289      	uxth	r1, r1
   25caa:	f7e7 fe10 	bl	d8ce <os_mbuf_extend>
   25cae:	4604      	mov	r4, r0
   25cb0:	b128      	cbz	r0, 25cbe <ble_sm_cmd_get+0x2a>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   25cb2:	6833      	ldr	r3, [r6, #0]

    hdr->opcode = opcode;
   25cb4:	681c      	ldr	r4, [r3, #0]
   25cb6:	f804 7b01 	strb.w	r7, [r4], #1

    return hdr->data;
}
   25cba:	4620      	mov	r0, r4
   25cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mbuf_free_chain(*txom);
   25cbe:	6830      	ldr	r0, [r6, #0]
   25cc0:	f7e7 fbd8 	bl	d474 <os_mbuf_free_chain>
        return NULL;
   25cc4:	e7f9      	b.n	25cba <ble_sm_cmd_get+0x26>
	...

00025cc8 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   25cc8:	b530      	push	{r4, r5, lr}
   25cca:	b083      	sub	sp, #12
   25ccc:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   25cce:	4a0c      	ldr	r2, [pc, #48]	; (25d00 <ble_sm_tx+0x38>)
   25cd0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   25cd2:	3301      	adds	r3, #1
   25cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   25cd6:	ab01      	add	r3, sp, #4
   25cd8:	466a      	mov	r2, sp
   25cda:	2106      	movs	r1, #6
   25cdc:	f7fd fc08 	bl	234f0 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   25ce0:	b940      	cbnz	r0, 25cf4 <ble_sm_tx+0x2c>
        rc = ble_l2cap_tx(conn, chan, txom);
   25ce2:	4622      	mov	r2, r4
   25ce4:	9901      	ldr	r1, [sp, #4]
   25ce6:	9800      	ldr	r0, [sp, #0]
   25ce8:	f7fd fffc 	bl	23ce4 <ble_l2cap_tx>
   25cec:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }

    return rc;
}
   25cee:	4628      	mov	r0, r5
   25cf0:	b003      	add	sp, #12
   25cf2:	bd30      	pop	{r4, r5, pc}
   25cf4:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   25cf6:	4620      	mov	r0, r4
   25cf8:	f7e7 fbbc 	bl	d474 <os_mbuf_free_chain>
    return rc;
   25cfc:	e7f7      	b.n	25cee <ble_sm_tx+0x26>
   25cfe:	bf00      	nop
   25d00:	20003720 	.word	0x20003720

00025d04 <ble_sm_gen_stk>:
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
}

static int
ble_sm_gen_stk(struct ble_sm_proc *proc)
{
   25d04:	b570      	push	{r4, r5, r6, lr}
   25d06:	b084      	sub	sp, #16
   25d08:	4604      	mov	r4, r0
    uint8_t key[16];
    int rc;

    rc = ble_sm_alg_s1(proc->tk, proc->rands, proc->randm, key);
   25d0a:	466b      	mov	r3, sp
   25d0c:	f100 023e 	add.w	r2, r0, #62	; 0x3e
   25d10:	f100 014e 	add.w	r1, r0, #78	; 0x4e
   25d14:	301e      	adds	r0, #30
   25d16:	f000 fc46 	bl	265a6 <ble_sm_alg_s1>
    if (rc != 0) {
   25d1a:	4605      	mov	r5, r0
   25d1c:	b110      	cbz	r0, 25d24 <ble_sm_gen_stk+0x20>

    /* Ensure proper key size */
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);

    return 0;
}
   25d1e:	4628      	mov	r0, r5
   25d20:	b004      	add	sp, #16
   25d22:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(proc->ltk, key, proc->key_size);
   25d24:	f104 065e 	add.w	r6, r4, #94	; 0x5e
   25d28:	7be4      	ldrb	r4, [r4, #15]
   25d2a:	4622      	mov	r2, r4
   25d2c:	4669      	mov	r1, sp
   25d2e:	4630      	mov	r0, r6
   25d30:	f7e8 fe42 	bl	e9b8 <memcpy>
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);
   25d34:	f1c4 0210 	rsb	r2, r4, #16
   25d38:	2100      	movs	r1, #0
   25d3a:	1930      	adds	r0, r6, r4
   25d3c:	f7e8 fe61 	bl	ea02 <memset>
    return 0;
   25d40:	e7ed      	b.n	25d1e <ble_sm_gen_stk+0x1a>
	...

00025d44 <ble_sm_lgcy_io_action>:
{
   25d44:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   25d46:	7c83      	ldrb	r3, [r0, #18]
   25d48:	2b01      	cmp	r3, #1
   25d4a:	d00a      	beq.n	25d62 <ble_sm_lgcy_io_action+0x1e>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   25d4c:	7cc3      	ldrb	r3, [r0, #19]
   25d4e:	f013 0f04 	tst.w	r3, #4
   25d52:	d10b      	bne.n	25d6c <ble_sm_lgcy_io_action+0x28>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   25d54:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   25d56:	f013 0f04 	tst.w	r3, #4
   25d5a:	d107      	bne.n	25d6c <ble_sm_lgcy_io_action+0x28>
        *action = BLE_SM_IOACT_NONE;
   25d5c:	2300      	movs	r3, #0
   25d5e:	700b      	strb	r3, [r1, #0]
   25d60:	e00c      	b.n	25d7c <ble_sm_lgcy_io_action+0x38>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   25d62:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   25d64:	2b01      	cmp	r3, #1
   25d66:	d1f1      	bne.n	25d4c <ble_sm_lgcy_io_action+0x8>
        *action = BLE_SM_IOACT_OOB;
   25d68:	700b      	strb	r3, [r1, #0]
   25d6a:	e007      	b.n	25d7c <ble_sm_lgcy_io_action+0x38>
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   25d6c:	7c43      	ldrb	r3, [r0, #17]
   25d6e:	2b04      	cmp	r3, #4
   25d70:	d802      	bhi.n	25d78 <ble_sm_lgcy_io_action+0x34>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   25d72:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   25d74:	2a04      	cmp	r2, #4
   25d76:	d90a      	bls.n	25d8e <ble_sm_lgcy_io_action+0x4a>
        *action = BLE_SM_IOACT_NONE;
   25d78:	2300      	movs	r3, #0
   25d7a:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   25d7c:	780b      	ldrb	r3, [r1, #0]
   25d7e:	2b01      	cmp	r3, #1
   25d80:	d026      	beq.n	25dd0 <ble_sm_lgcy_io_action+0x8c>
   25d82:	d819      	bhi.n	25db8 <ble_sm_lgcy_io_action+0x74>
   25d84:	b9ab      	cbnz	r3, 25db2 <ble_sm_lgcy_io_action+0x6e>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   25d86:	2300      	movs	r3, #0
   25d88:	7303      	strb	r3, [r0, #12]
    return 0;
   25d8a:	4618      	mov	r0, r3
        break;
   25d8c:	e012      	b.n	25db4 <ble_sm_lgcy_io_action+0x70>
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25d8e:	7a04      	ldrb	r4, [r0, #8]
   25d90:	f014 0f01 	tst.w	r4, #1
   25d94:	d006      	beq.n	25da4 <ble_sm_lgcy_io_action+0x60>
        *action = ble_sm_lgcy_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   25d96:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   25d9a:	4c12      	ldr	r4, [pc, #72]	; (25de4 <ble_sm_lgcy_io_action+0xa0>)
   25d9c:	4422      	add	r2, r4
   25d9e:	5cd3      	ldrb	r3, [r2, r3]
   25da0:	700b      	strb	r3, [r1, #0]
   25da2:	e7eb      	b.n	25d7c <ble_sm_lgcy_io_action+0x38>
        *action = ble_sm_lgcy_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   25da4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   25da8:	4c0f      	ldr	r4, [pc, #60]	; (25de8 <ble_sm_lgcy_io_action+0xa4>)
   25daa:	4422      	add	r2, r4
   25dac:	5cd3      	ldrb	r3, [r2, r3]
   25dae:	700b      	strb	r3, [r1, #0]
   25db0:	e7e4      	b.n	25d7c <ble_sm_lgcy_io_action+0x38>
    switch (*action) {
   25db2:	2003      	movs	r0, #3
}
   25db4:	bc10      	pop	{r4}
   25db6:	4770      	bx	lr
    switch (*action) {
   25db8:	3b02      	subs	r3, #2
   25dba:	b2db      	uxtb	r3, r3
   25dbc:	2b01      	cmp	r3, #1
   25dbe:	d80f      	bhi.n	25de0 <ble_sm_lgcy_io_action+0x9c>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   25dc0:	2301      	movs	r3, #1
   25dc2:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   25dc4:	7a03      	ldrb	r3, [r0, #8]
   25dc6:	f043 0308 	orr.w	r3, r3, #8
   25dca:	7203      	strb	r3, [r0, #8]
    return 0;
   25dcc:	2000      	movs	r0, #0
        break;
   25dce:	e7f1      	b.n	25db4 <ble_sm_lgcy_io_action+0x70>
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   25dd0:	2302      	movs	r3, #2
   25dd2:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   25dd4:	7a03      	ldrb	r3, [r0, #8]
   25dd6:	f043 0308 	orr.w	r3, r3, #8
   25dda:	7203      	strb	r3, [r0, #8]
    return 0;
   25ddc:	2000      	movs	r0, #0
        break;
   25dde:	e7e9      	b.n	25db4 <ble_sm_lgcy_io_action+0x70>
    switch (*action) {
   25de0:	2003      	movs	r0, #3
   25de2:	e7e7      	b.n	25db4 <ble_sm_lgcy_io_action+0x70>
   25de4:	0002e5e0 	.word	0x0002e5e0
   25de8:	0002e5fc 	.word	0x0002e5fc

00025dec <ble_sm_lgcy_confirm_exec>:
{
   25dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25df0:	b08d      	sub	sp, #52	; 0x34
   25df2:	4604      	mov	r4, r0
   25df4:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   25df6:	aa0b      	add	r2, sp, #44	; 0x2c
   25df8:	2110      	movs	r1, #16
   25dfa:	2003      	movs	r0, #3
   25dfc:	f7ff ff4a 	bl	25c94 <ble_sm_cmd_get>
    if (cmd == NULL) {
   25e00:	2800      	cmp	r0, #0
   25e02:	d042      	beq.n	25e8a <ble_sm_lgcy_confirm_exec+0x9e>
   25e04:	4681      	mov	r9, r0
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   25e06:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   25e0a:	af07      	add	r7, sp, #28
   25e0c:	9700      	str	r7, [sp, #0]
   25e0e:	f10d 031a 	add.w	r3, sp, #26
   25e12:	4642      	mov	r2, r8
   25e14:	f10d 011b 	add.w	r1, sp, #27
   25e18:	4620      	mov	r0, r4
   25e1a:	f7ff f864 	bl	24ee6 <ble_sm_ia_ra>
    rc = ble_sm_alg_c1(proc->tk, ble_sm_our_pair_rand(proc), proc->pair_req,
   25e1e:	f104 061e 	add.w	r6, r4, #30
   25e22:	4620      	mov	r0, r4
   25e24:	f7ff fd42 	bl	258ac <ble_sm_our_pair_rand>
   25e28:	4601      	mov	r1, r0
   25e2a:	f8cd 9010 	str.w	r9, [sp, #16]
   25e2e:	9703      	str	r7, [sp, #12]
   25e30:	f8cd 8008 	str.w	r8, [sp, #8]
   25e34:	f89d 301a 	ldrb.w	r3, [sp, #26]
   25e38:	9301      	str	r3, [sp, #4]
   25e3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   25e3e:	9300      	str	r3, [sp, #0]
   25e40:	f104 0317 	add.w	r3, r4, #23
   25e44:	f104 0210 	add.w	r2, r4, #16
   25e48:	4630      	mov	r0, r6
   25e4a:	f000 fbd4 	bl	265f6 <ble_sm_alg_c1>
    if (rc != 0) {
   25e4e:	4606      	mov	r6, r0
   25e50:	b168      	cbz	r0, 25e6e <ble_sm_lgcy_confirm_exec+0x82>
    if (txom) {
   25e52:	980b      	ldr	r0, [sp, #44]	; 0x2c
   25e54:	b108      	cbz	r0, 25e5a <ble_sm_lgcy_confirm_exec+0x6e>
        os_mbuf_free_chain(txom);
   25e56:	f7e7 fb0d 	bl	d474 <os_mbuf_free_chain>
    res->app_status = rc;
   25e5a:	602e      	str	r6, [r5, #0]
    res->enc_cb = 1;
   25e5c:	7d2b      	ldrb	r3, [r5, #20]
   25e5e:	f043 0302 	orr.w	r3, r3, #2
   25e62:	752b      	strb	r3, [r5, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25e64:	2308      	movs	r3, #8
   25e66:	712b      	strb	r3, [r5, #4]
}
   25e68:	b00d      	add	sp, #52	; 0x34
   25e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = ble_sm_tx(proc->conn_handle, txom);
   25e6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25e70:	8960      	ldrh	r0, [r4, #10]
   25e72:	f7ff ff29 	bl	25cc8 <ble_sm_tx>
    if (rc != 0) {
   25e76:	4606      	mov	r6, r0
   25e78:	2800      	cmp	r0, #0
   25e7a:	d1ea      	bne.n	25e52 <ble_sm_lgcy_confirm_exec+0x66>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   25e7c:	7a23      	ldrb	r3, [r4, #8]
   25e7e:	f013 0f01 	tst.w	r3, #1
   25e82:	d1f1      	bne.n	25e68 <ble_sm_lgcy_confirm_exec+0x7c>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   25e84:	2302      	movs	r3, #2
   25e86:	7363      	strb	r3, [r4, #13]
   25e88:	e7ee      	b.n	25e68 <ble_sm_lgcy_confirm_exec+0x7c>
        rc = BLE_HS_ENOMEM;
   25e8a:	2606      	movs	r6, #6
   25e8c:	e7e1      	b.n	25e52 <ble_sm_lgcy_confirm_exec+0x66>

00025e8e <ble_sm_lgcy_random_exec>:

void
ble_sm_lgcy_random_exec(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   25e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e90:	b083      	sub	sp, #12
   25e92:	4606      	mov	r6, r0
   25e94:	460c      	mov	r4, r1
    struct ble_sm_pair_random *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   25e96:	aa01      	add	r2, sp, #4
   25e98:	2110      	movs	r1, #16
   25e9a:	2004      	movs	r0, #4
   25e9c:	f7ff fefa 	bl	25c94 <ble_sm_cmd_get>
    if (cmd == NULL) {
   25ea0:	b1b8      	cbz	r0, 25ed2 <ble_sm_lgcy_random_exec+0x44>
   25ea2:	4605      	mov	r5, r0
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   25ea4:	4630      	mov	r0, r6
   25ea6:	f7ff fd01 	bl	258ac <ble_sm_our_pair_rand>
   25eaa:	6807      	ldr	r7, [r0, #0]
   25eac:	6841      	ldr	r1, [r0, #4]
   25eae:	6882      	ldr	r2, [r0, #8]
   25eb0:	68c3      	ldr	r3, [r0, #12]
   25eb2:	602f      	str	r7, [r5, #0]
   25eb4:	6069      	str	r1, [r5, #4]
   25eb6:	60aa      	str	r2, [r5, #8]
   25eb8:	60eb      	str	r3, [r5, #12]

    rc = ble_sm_tx(proc->conn_handle, txom);
   25eba:	9901      	ldr	r1, [sp, #4]
   25ebc:	8970      	ldrh	r0, [r6, #10]
   25ebe:	f7ff ff03 	bl	25cc8 <ble_sm_tx>
    if (rc != 0) {
   25ec2:	b980      	cbnz	r0, 25ee6 <ble_sm_lgcy_random_exec+0x58>
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   25ec4:	7a33      	ldrb	r3, [r6, #8]
   25ec6:	f013 0f01 	tst.w	r3, #1
   25eca:	d10a      	bne.n	25ee2 <ble_sm_lgcy_random_exec+0x54>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   25ecc:	2303      	movs	r3, #3
   25ece:	7373      	strb	r3, [r6, #13]
   25ed0:	e007      	b.n	25ee2 <ble_sm_lgcy_random_exec+0x54>
        res->app_status = BLE_HS_ENOMEM;
   25ed2:	2306      	movs	r3, #6
   25ed4:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   25ed6:	7d23      	ldrb	r3, [r4, #20]
   25ed8:	f043 0302 	orr.w	r3, r3, #2
   25edc:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25ede:	2308      	movs	r3, #8
   25ee0:	7123      	strb	r3, [r4, #4]
    }
}
   25ee2:	b003      	add	sp, #12
   25ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        res->app_status = rc;
   25ee6:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   25ee8:	7d23      	ldrb	r3, [r4, #20]
   25eea:	f043 0302 	orr.w	r3, r3, #2
   25eee:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25ef0:	2308      	movs	r3, #8
   25ef2:	7123      	strb	r3, [r4, #4]
        return;
   25ef4:	e7f5      	b.n	25ee2 <ble_sm_lgcy_random_exec+0x54>

00025ef6 <ble_sm_lgcy_random_rx>:

void
ble_sm_lgcy_random_rx(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   25ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25efa:	b090      	sub	sp, #64	; 0x40
   25efc:	4604      	mov	r4, r0
   25efe:	460d      	mov	r5, r1
    uint8_t ra[6];
    uint8_t iat;
    uint8_t rat;
    int rc;

    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   25f00:	ae0a      	add	r6, sp, #40	; 0x28
   25f02:	af08      	add	r7, sp, #32
   25f04:	9700      	str	r7, [sp, #0]
   25f06:	f10d 031e 	add.w	r3, sp, #30
   25f0a:	4632      	mov	r2, r6
   25f0c:	f10d 011f 	add.w	r1, sp, #31
   25f10:	f7fe ffe9 	bl	24ee6 <ble_sm_ia_ra>

    rc = ble_sm_alg_c1(proc->tk, ble_sm_peer_pair_rand(proc), proc->pair_req,
   25f14:	f104 081e 	add.w	r8, r4, #30
   25f18:	4620      	mov	r0, r4
   25f1a:	f7ff fd21 	bl	25960 <ble_sm_peer_pair_rand>
   25f1e:	4601      	mov	r1, r0
   25f20:	ab0c      	add	r3, sp, #48	; 0x30
   25f22:	9304      	str	r3, [sp, #16]
   25f24:	9703      	str	r7, [sp, #12]
   25f26:	9602      	str	r6, [sp, #8]
   25f28:	f89d 301e 	ldrb.w	r3, [sp, #30]
   25f2c:	9301      	str	r3, [sp, #4]
   25f2e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   25f32:	9300      	str	r3, [sp, #0]
   25f34:	f104 0317 	add.w	r3, r4, #23
   25f38:	f104 0210 	add.w	r2, r4, #16
   25f3c:	4640      	mov	r0, r8
   25f3e:	f000 fb5a 	bl	265f6 <ble_sm_alg_c1>
                       proc->pair_rsp, iat, rat, ia, ra, confirm_val);
    if (rc != 0) {
   25f42:	b980      	cbnz	r0, 25f66 <ble_sm_lgcy_random_rx+0x70>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        res->enc_cb = 1;
        return;
    }

    if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   25f44:	2210      	movs	r2, #16
   25f46:	a90c      	add	r1, sp, #48	; 0x30
   25f48:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   25f4c:	f7e8 fd10 	bl	e970 <memcmp>
   25f50:	b198      	cbz	r0, 25f7a <ble_sm_lgcy_random_rx+0x84>
        /* Random number mismatch. */
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   25f52:	f240 4304 	movw	r3, #1028	; 0x404
   25f56:	602b      	str	r3, [r5, #0]
        res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   25f58:	2304      	movs	r3, #4
   25f5a:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   25f5c:	7d2b      	ldrb	r3, [r5, #20]
   25f5e:	f043 0302 	orr.w	r3, r3, #2
   25f62:	752b      	strb	r3, [r5, #20]
        return;
   25f64:	e006      	b.n	25f74 <ble_sm_lgcy_random_rx+0x7e>
        res->app_status = rc;
   25f66:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25f68:	2308      	movs	r3, #8
   25f6a:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   25f6c:	7d2b      	ldrb	r3, [r5, #20]
   25f6e:	f043 0302 	orr.w	r3, r3, #2
   25f72:	752b      	strb	r3, [r5, #20]
         */
        proc->state = BLE_SM_PROC_STATE_ENC_START;
    }

    res->execute = 1;
}
   25f74:	b010      	add	sp, #64	; 0x40
   25f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_sm_gen_stk(proc);
   25f7a:	4620      	mov	r0, r4
   25f7c:	f7ff fec2 	bl	25d04 <ble_sm_gen_stk>
    if (rc != 0) {
   25f80:	b950      	cbnz	r0, 25f98 <ble_sm_lgcy_random_rx+0xa2>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   25f82:	7a23      	ldrb	r3, [r4, #8]
   25f84:	f013 0f01 	tst.w	r3, #1
   25f88:	d001      	beq.n	25f8e <ble_sm_lgcy_random_rx+0x98>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   25f8a:	2305      	movs	r3, #5
   25f8c:	7363      	strb	r3, [r4, #13]
    res->execute = 1;
   25f8e:	7d2b      	ldrb	r3, [r5, #20]
   25f90:	f043 0301 	orr.w	r3, r3, #1
   25f94:	752b      	strb	r3, [r5, #20]
   25f96:	e7ed      	b.n	25f74 <ble_sm_lgcy_random_rx+0x7e>
        res->app_status = rc;
   25f98:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   25f9a:	2308      	movs	r3, #8
   25f9c:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   25f9e:	7d2b      	ldrb	r3, [r5, #20]
   25fa0:	f043 0302 	orr.w	r3, r3, #2
   25fa4:	752b      	strb	r3, [r5, #20]
        return;
   25fa6:	e7e5      	b.n	25f74 <ble_sm_lgcy_random_rx+0x7e>

00025fa8 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   25fa8:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   25faa:	4b04      	ldr	r3, [pc, #16]	; (25fbc <ble_store_status+0x14>)
   25fac:	6a1b      	ldr	r3, [r3, #32]
   25fae:	b11b      	cbz	r3, 25fb8 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   25fb0:	4a02      	ldr	r2, [pc, #8]	; (25fbc <ble_store_status+0x14>)
   25fb2:	6a51      	ldr	r1, [r2, #36]	; 0x24
   25fb4:	4798      	blx	r3
    }

    return rc;
}
   25fb6:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   25fb8:	2008      	movs	r0, #8
    return rc;
   25fba:	e7fc      	b.n	25fb6 <ble_store_status+0xe>
   25fbc:	200002d8 	.word	0x200002d8

00025fc0 <ble_store_read>:
{
   25fc0:	b570      	push	{r4, r5, r6, lr}
   25fc2:	4604      	mov	r4, r0
   25fc4:	460d      	mov	r5, r1
   25fc6:	4616      	mov	r6, r2
    ble_hs_lock();
   25fc8:	f7fb fc50 	bl	2186c <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   25fcc:	4b06      	ldr	r3, [pc, #24]	; (25fe8 <ble_store_read+0x28>)
   25fce:	695b      	ldr	r3, [r3, #20]
   25fd0:	b143      	cbz	r3, 25fe4 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   25fd2:	4632      	mov	r2, r6
   25fd4:	4629      	mov	r1, r5
   25fd6:	4620      	mov	r0, r4
   25fd8:	4798      	blx	r3
   25fda:	4604      	mov	r4, r0
    ble_hs_unlock();
   25fdc:	f7fb fc4a 	bl	21874 <ble_hs_unlock>
}
   25fe0:	4620      	mov	r0, r4
   25fe2:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   25fe4:	2408      	movs	r4, #8
   25fe6:	e7f9      	b.n	25fdc <ble_store_read+0x1c>
   25fe8:	200002d8 	.word	0x200002d8

00025fec <ble_store_delete>:
{
   25fec:	b538      	push	{r3, r4, r5, lr}
   25fee:	4604      	mov	r4, r0
   25ff0:	460d      	mov	r5, r1
    ble_hs_lock();
   25ff2:	f7fb fc3b 	bl	2186c <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   25ff6:	4b06      	ldr	r3, [pc, #24]	; (26010 <ble_store_delete+0x24>)
   25ff8:	69db      	ldr	r3, [r3, #28]
   25ffa:	b13b      	cbz	r3, 2600c <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   25ffc:	4629      	mov	r1, r5
   25ffe:	4620      	mov	r0, r4
   26000:	4798      	blx	r3
   26002:	4604      	mov	r4, r0
    ble_hs_unlock();
   26004:	f7fb fc36 	bl	21874 <ble_hs_unlock>
}
   26008:	4620      	mov	r0, r4
   2600a:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   2600c:	2408      	movs	r4, #8
   2600e:	e7f9      	b.n	26004 <ble_store_delete+0x18>
   26010:	200002d8 	.word	0x200002d8

00026014 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   26014:	b500      	push	{lr}
   26016:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   26018:	2301      	movs	r3, #1
   2601a:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   2601c:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   2601e:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   26020:	a801      	add	r0, sp, #4
   26022:	f7ff ffc1 	bl	25fa8 <ble_store_status>
}
   26026:	b005      	add	sp, #20
   26028:	f85d fb04 	ldr.w	pc, [sp], #4

0002602c <ble_store_write>:
{
   2602c:	b570      	push	{r4, r5, r6, lr}
   2602e:	4606      	mov	r6, r0
   26030:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   26032:	4b0d      	ldr	r3, [pc, #52]	; (26068 <ble_store_write+0x3c>)
   26034:	699b      	ldr	r3, [r3, #24]
   26036:	b1a3      	cbz	r3, 26062 <ble_store_write+0x36>
        ble_hs_lock();
   26038:	f7fb fc18 	bl	2186c <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   2603c:	4b0a      	ldr	r3, [pc, #40]	; (26068 <ble_store_write+0x3c>)
   2603e:	699b      	ldr	r3, [r3, #24]
   26040:	4629      	mov	r1, r5
   26042:	4630      	mov	r0, r6
   26044:	4798      	blx	r3
   26046:	4604      	mov	r4, r0
        ble_hs_unlock();
   26048:	f7fb fc14 	bl	21874 <ble_hs_unlock>
        switch (rc) {
   2604c:	b154      	cbz	r4, 26064 <ble_store_write+0x38>
   2604e:	2c1b      	cmp	r4, #27
   26050:	d108      	bne.n	26064 <ble_store_write+0x38>
            rc = ble_store_overflow_event(obj_type, val);
   26052:	4629      	mov	r1, r5
   26054:	4630      	mov	r0, r6
   26056:	f7ff ffdd 	bl	26014 <ble_store_overflow_event>
            if (rc != 0) {
   2605a:	4604      	mov	r4, r0
   2605c:	2800      	cmp	r0, #0
   2605e:	d0eb      	beq.n	26038 <ble_store_write+0xc>
   26060:	e000      	b.n	26064 <ble_store_write+0x38>
        return BLE_HS_ENOTSUP;
   26062:	2408      	movs	r4, #8
}
   26064:	4620      	mov	r0, r4
   26066:	bd70      	pop	{r4, r5, r6, pc}
   26068:	200002d8 	.word	0x200002d8

0002606c <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   2606c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   2606e:	f7ff ffdd 	bl	2602c <ble_store_write>
    return rc;
}
   26072:	bd08      	pop	{r3, pc}

00026074 <ble_store_read_our_sec>:
{
   26074:	b508      	push	{r3, lr}
   26076:	460a      	mov	r2, r1
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   26078:	4601      	mov	r1, r0
   2607a:	2001      	movs	r0, #1
   2607c:	f7ff ffa0 	bl	25fc0 <ble_store_read>
}
   26080:	bd08      	pop	{r3, pc}

00026082 <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   26082:	b508      	push	{r3, lr}
   26084:	4601      	mov	r1, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   26086:	2001      	movs	r0, #1
   26088:	f7ff fff0 	bl	2606c <ble_store_persist_sec>
    return rc;
}
   2608c:	bd08      	pop	{r3, pc}

0002608e <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   2608e:	b508      	push	{r3, lr}
   26090:	460a      	mov	r2, r1
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   26092:	4601      	mov	r1, r0
   26094:	2002      	movs	r0, #2
   26096:	f7ff ff93 	bl	25fc0 <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2609a:	bd08      	pop	{r3, pc}

0002609c <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   2609c:	b570      	push	{r4, r5, r6, lr}
   2609e:	b082      	sub	sp, #8
   260a0:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   260a2:	4601      	mov	r1, r0
   260a4:	2002      	movs	r0, #2
   260a6:	f7ff ffe1 	bl	2606c <ble_store_persist_sec>
    if (rc != 0) {
   260aa:	4606      	mov	r6, r0
   260ac:	b990      	cbnz	r0, 260d4 <ble_store_write_peer_sec+0x38>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   260ae:	2300      	movs	r3, #0
   260b0:	9300      	str	r3, [sp, #0]
   260b2:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   260b6:	7825      	ldrb	r5, [r4, #0]
   260b8:	4628      	mov	r0, r5
    if (type_diff != 0) {
   260ba:	b92d      	cbnz	r5, 260c8 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   260bc:	2206      	movs	r2, #6
   260be:	f10d 0101 	add.w	r1, sp, #1
   260c2:	1c60      	adds	r0, r4, #1
   260c4:	f7e8 fc54 	bl	e970 <memcmp>
   260c8:	b120      	cbz	r0, 260d4 <ble_store_write_peer_sec+0x38>
   260ca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   260ce:	f013 0f01 	tst.w	r3, #1
   260d2:	d102      	bne.n	260da <ble_store_write_peer_sec+0x3e>
            return rc;
        }
    }

    return 0;
}
   260d4:	4630      	mov	r0, r6
   260d6:	b002      	add	sp, #8
   260d8:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   260da:	f104 0229 	add.w	r2, r4, #41	; 0x29
   260de:	4629      	mov	r1, r5
   260e0:	1c60      	adds	r0, r4, #1
   260e2:	f7fd fb31 	bl	23748 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   260e6:	2800      	cmp	r0, #0
   260e8:	d0f4      	beq.n	260d4 <ble_store_write_peer_sec+0x38>
            return rc;
   260ea:	4606      	mov	r6, r0
   260ec:	e7f2      	b.n	260d4 <ble_store_write_peer_sec+0x38>

000260ee <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   260ee:	b508      	push	{r3, lr}
   260f0:	460a      	mov	r2, r1
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   260f2:	4601      	mov	r1, r0
   260f4:	2003      	movs	r0, #3
   260f6:	f7ff ff63 	bl	25fc0 <ble_store_read>
    return rc;
}
   260fa:	bd08      	pop	{r3, pc}

000260fc <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   260fc:	b508      	push	{r3, lr}
   260fe:	4601      	mov	r1, r0
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   26100:	2003      	movs	r0, #3
   26102:	f7ff ff93 	bl	2602c <ble_store_write>
    return rc;
}
   26106:	bd08      	pop	{r3, pc}

00026108 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   26108:	b508      	push	{r3, lr}
   2610a:	4601      	mov	r1, r0
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   2610c:	2003      	movs	r0, #3
   2610e:	f7ff ff6d 	bl	25fec <ble_store_delete>
    return rc;
}
   26112:	bd08      	pop	{r3, pc}

00026114 <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   26114:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   26116:	6808      	ldr	r0, [r1, #0]
   26118:	6018      	str	r0, [r3, #0]
   2611a:	8888      	ldrh	r0, [r1, #4]
   2611c:	798a      	ldrb	r2, [r1, #6]
   2611e:	8098      	strh	r0, [r3, #4]
   26120:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   26122:	890a      	ldrh	r2, [r1, #8]
   26124:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   26126:	2200      	movs	r2, #0
   26128:	729a      	strb	r2, [r3, #10]
}
   2612a:	4770      	bx	lr

0002612c <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   2612c:	4603      	mov	r3, r0
   2612e:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   26130:	e9d1 0100 	ldrd	r0, r1, [r1]
   26134:	6018      	str	r0, [r3, #0]
   26136:	8099      	strh	r1, [r3, #4]
   26138:	0c09      	lsrs	r1, r1, #16
   2613a:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   2613c:	8911      	ldrh	r1, [r2, #8]
   2613e:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   26140:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   26144:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   26148:	7e1a      	ldrb	r2, [r3, #24]
   2614a:	f042 0201 	orr.w	r2, r2, #1
   2614e:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   26150:	2200      	movs	r2, #0
   26152:	765a      	strb	r2, [r3, #25]
}
   26154:	4770      	bx	lr

00026156 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   26156:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2615a:	b09d      	sub	sp, #116	; 0x74
   2615c:	4604      	mov	r4, r0
   2615e:	4688      	mov	r8, r1
   26160:	4617      	mov	r7, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   26162:	2220      	movs	r2, #32
   26164:	2100      	movs	r1, #0
   26166:	a814      	add	r0, sp, #80	; 0x50
   26168:	f7e8 fc4b 	bl	ea02 <memset>
    switch(obj_type) {
   2616c:	2c02      	cmp	r4, #2
   2616e:	dd08      	ble.n	26182 <ble_store_iterate+0x2c>
   26170:	2c03      	cmp	r4, #3
   26172:	d108      	bne.n	26186 <ble_store_iterate+0x30>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   26174:	2300      	movs	r3, #0
   26176:	9314      	str	r3, [sp, #80]	; 0x50
   26178:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   2617c:	f10d 095a 	add.w	r9, sp, #90	; 0x5a
            break;
   26180:	e009      	b.n	26196 <ble_store_iterate+0x40>
    switch(obj_type) {
   26182:	2c00      	cmp	r4, #0
   26184:	dc01      	bgt.n	2618a <ble_store_iterate+0x34>
        default:
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
   26186:	2503      	movs	r5, #3
   26188:	e011      	b.n	261ae <ble_store_iterate+0x58>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   2618a:	2300      	movs	r3, #0
   2618c:	9314      	str	r3, [sp, #80]	; 0x50
   2618e:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   26192:	f10d 0969 	add.w	r9, sp, #105	; 0x69
    int idx = 0;
   26196:	2600      	movs	r6, #0
    }

    while (1) {
        *pidx = idx;
   26198:	f889 6000 	strb.w	r6, [r9]
        rc = ble_store_read(obj_type, &key, &value);
   2619c:	466a      	mov	r2, sp
   2619e:	a914      	add	r1, sp, #80	; 0x50
   261a0:	4620      	mov	r0, r4
   261a2:	f7ff ff0d 	bl	25fc0 <ble_store_read>
        switch (rc) {
   261a6:	4605      	mov	r5, r0
   261a8:	b128      	cbz	r0, 261b6 <ble_store_iterate+0x60>
   261aa:	2805      	cmp	r0, #5
   261ac:	d00e      	beq.n	261cc <ble_store_iterate+0x76>
            return rc;
        }

        idx++;
    }
}
   261ae:	4628      	mov	r0, r5
   261b0:	b01d      	add	sp, #116	; 0x74
   261b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (callback != NULL) {
   261b6:	f1b8 0f00 	cmp.w	r8, #0
   261ba:	d005      	beq.n	261c8 <ble_store_iterate+0x72>
                rc = callback(obj_type, &value, cookie);
   261bc:	463a      	mov	r2, r7
   261be:	4669      	mov	r1, sp
   261c0:	4620      	mov	r0, r4
   261c2:	47c0      	blx	r8
                if (rc != 0) {
   261c4:	2800      	cmp	r0, #0
   261c6:	d1f2      	bne.n	261ae <ble_store_iterate+0x58>
        idx++;
   261c8:	3601      	adds	r6, #1
        *pidx = idx;
   261ca:	e7e5      	b.n	26198 <ble_store_iterate+0x42>
        switch (rc) {
   261cc:	2500      	movs	r5, #0
   261ce:	e7ee      	b.n	261ae <ble_store_iterate+0x58>

000261d0 <ble_store_util_iter_unique_peer>:

static int
ble_store_util_iter_unique_peer(int obj_type,
                                union ble_store_value *val,
                                void *arg)
{
   261d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   261d2:	460e      	mov	r6, r1
   261d4:	4615      	mov	r5, r2
                      obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    set = arg;

    /* Do nothing if this peer is a duplicate. */
    for (i = 0; i < set->num_peers; i++) {
   261d6:	2400      	movs	r4, #0
   261d8:	e006      	b.n	261e8 <ble_store_util_iter_unique_peer+0x18>
   261da:	2206      	movs	r2, #6
   261dc:	1c71      	adds	r1, r6, #1
   261de:	1c78      	adds	r0, r7, #1
   261e0:	f7e8 fbc6 	bl	e970 <memcmp>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   261e4:	b1e8      	cbz	r0, 26222 <ble_store_util_iter_unique_peer+0x52>
    for (i = 0; i < set->num_peers; i++) {
   261e6:	3401      	adds	r4, #1
   261e8:	686b      	ldr	r3, [r5, #4]
   261ea:	42a3      	cmp	r3, r4
   261ec:	dd08      	ble.n	26200 <ble_store_util_iter_unique_peer+0x30>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   261ee:	682a      	ldr	r2, [r5, #0]
   261f0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   261f4:	18d7      	adds	r7, r2, r3
    type_diff = a->type - b->type;
   261f6:	5cd3      	ldrb	r3, [r2, r3]
   261f8:	7830      	ldrb	r0, [r6, #0]
    if (type_diff != 0) {
   261fa:	1a18      	subs	r0, r3, r0
   261fc:	d0ed      	beq.n	261da <ble_store_util_iter_unique_peer+0xa>
   261fe:	e7f1      	b.n	261e4 <ble_store_util_iter_unique_peer+0x14>
            return 0;
        }
    }

    if (set->num_peers >= set->max_peers) {
   26200:	68aa      	ldr	r2, [r5, #8]
   26202:	4293      	cmp	r3, r2
   26204:	da0e      	bge.n	26224 <ble_store_util_iter_unique_peer+0x54>
        /* Overflow; abort the iterate procedure. */
        set->status = BLE_HS_ENOMEM;
        return 1;
    }

    set->peer_id_addrs[set->num_peers] = val->sec.peer_addr;
   26206:	6829      	ldr	r1, [r5, #0]
   26208:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2620c:	18ca      	adds	r2, r1, r3
   2620e:	6830      	ldr	r0, [r6, #0]
   26210:	50c8      	str	r0, [r1, r3]
   26212:	88b1      	ldrh	r1, [r6, #4]
   26214:	79b3      	ldrb	r3, [r6, #6]
   26216:	8091      	strh	r1, [r2, #4]
   26218:	7193      	strb	r3, [r2, #6]
    set->num_peers++;
   2621a:	686b      	ldr	r3, [r5, #4]
   2621c:	3301      	adds	r3, #1
   2621e:	606b      	str	r3, [r5, #4]

    return 0;
   26220:	2000      	movs	r0, #0
}
   26222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        set->status = BLE_HS_ENOMEM;
   26224:	2306      	movs	r3, #6
   26226:	60eb      	str	r3, [r5, #12]
        return 1;
   26228:	2001      	movs	r0, #1
   2622a:	e7fa      	b.n	26222 <ble_store_util_iter_unique_peer+0x52>

0002622c <ble_store_util_bonded_peers>:
 *                              Other nonzero on error.
 */
int
ble_store_util_bonded_peers(ble_addr_t *out_peer_id_addrs, int *out_num_peers,
                            int max_peers)
{
   2622c:	b510      	push	{r4, lr}
   2622e:	b084      	sub	sp, #16
   26230:	460c      	mov	r4, r1
    struct ble_store_util_peer_set set = {
   26232:	9000      	str	r0, [sp, #0]
   26234:	2300      	movs	r3, #0
   26236:	9301      	str	r3, [sp, #4]
   26238:	9202      	str	r2, [sp, #8]
   2623a:	9303      	str	r3, [sp, #12]
        .max_peers = max_peers,
        .status = 0,
    };
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_OUR_SEC,
   2623c:	466a      	mov	r2, sp
   2623e:	4906      	ldr	r1, [pc, #24]	; (26258 <ble_store_util_bonded_peers+0x2c>)
   26240:	2001      	movs	r0, #1
   26242:	f7ff ff88 	bl	26156 <ble_store_iterate>
                           ble_store_util_iter_unique_peer,
                           &set);
    if (rc != 0) {
   26246:	4603      	mov	r3, r0
   26248:	b918      	cbnz	r0, 26252 <ble_store_util_bonded_peers+0x26>
        return rc;
    }
    if (set.status != 0) {
   2624a:	9b03      	ldr	r3, [sp, #12]
   2624c:	b90b      	cbnz	r3, 26252 <ble_store_util_bonded_peers+0x26>
        return set.status;
    }

    *out_num_peers = set.num_peers;
   2624e:	9a01      	ldr	r2, [sp, #4]
   26250:	6022      	str	r2, [r4, #0]
    return 0;
}
   26252:	4618      	mov	r0, r3
   26254:	b004      	add	sp, #16
   26256:	bd10      	pop	{r4, pc}
   26258:	000261d1 	.word	0x000261d1

0002625c <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   2625c:	b538      	push	{r3, r4, r5, lr}
   2625e:	4605      	mov	r5, r0
   26260:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   26262:	4621      	mov	r1, r4
   26264:	4628      	mov	r0, r5
   26266:	f7ff fec1 	bl	25fec <ble_store_delete>
    } while (rc == 0);
   2626a:	4603      	mov	r3, r0
   2626c:	2800      	cmp	r0, #0
   2626e:	d0f8      	beq.n	26262 <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   26270:	2805      	cmp	r0, #5
   26272:	d100      	bne.n	26276 <ble_store_util_delete_all+0x1a>
        return rc;
    }

    return 0;
   26274:	2300      	movs	r3, #0
}
   26276:	4618      	mov	r0, r3
   26278:	bd38      	pop	{r3, r4, r5, pc}

0002627a <ble_store_util_delete_peer>:
{
   2627a:	b510      	push	{r4, lr}
   2627c:	b088      	sub	sp, #32
   2627e:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   26280:	2220      	movs	r2, #32
   26282:	2100      	movs	r1, #0
   26284:	4668      	mov	r0, sp
   26286:	f7e8 fbbc 	bl	ea02 <memset>
    key.sec.peer_addr = *peer_id_addr;
   2628a:	6820      	ldr	r0, [r4, #0]
   2628c:	9000      	str	r0, [sp, #0]
   2628e:	88a2      	ldrh	r2, [r4, #4]
   26290:	79a3      	ldrb	r3, [r4, #6]
   26292:	f8ad 2004 	strh.w	r2, [sp, #4]
   26296:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   2629a:	4669      	mov	r1, sp
   2629c:	2001      	movs	r0, #1
   2629e:	f7ff ffdd 	bl	2625c <ble_store_util_delete_all>
    if (rc != 0) {
   262a2:	4603      	mov	r3, r0
   262a4:	b110      	cbz	r0, 262ac <ble_store_util_delete_peer+0x32>
}
   262a6:	4618      	mov	r0, r3
   262a8:	b008      	add	sp, #32
   262aa:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   262ac:	4669      	mov	r1, sp
   262ae:	2002      	movs	r0, #2
   262b0:	f7ff ffd4 	bl	2625c <ble_store_util_delete_all>
    if (rc != 0) {
   262b4:	4603      	mov	r3, r0
   262b6:	2800      	cmp	r0, #0
   262b8:	d1f5      	bne.n	262a6 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   262ba:	2220      	movs	r2, #32
   262bc:	2100      	movs	r1, #0
   262be:	4668      	mov	r0, sp
   262c0:	f7e8 fb9f 	bl	ea02 <memset>
    key.cccd.peer_addr = *peer_id_addr;
   262c4:	6820      	ldr	r0, [r4, #0]
   262c6:	9000      	str	r0, [sp, #0]
   262c8:	88a2      	ldrh	r2, [r4, #4]
   262ca:	79a3      	ldrb	r3, [r4, #6]
   262cc:	f8ad 2004 	strh.w	r2, [sp, #4]
   262d0:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   262d4:	4669      	mov	r1, sp
   262d6:	2003      	movs	r0, #3
   262d8:	f7ff ffc0 	bl	2625c <ble_store_util_delete_all>
   262dc:	4603      	mov	r3, r0
    if (rc != 0) {
   262de:	e7e2      	b.n	262a6 <ble_store_util_delete_peer+0x2c>

000262e0 <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   262e0:	b508      	push	{r3, lr}
    switch (event->event_code) {
   262e2:	6803      	ldr	r3, [r0, #0]
   262e4:	2b01      	cmp	r3, #1
   262e6:	d003      	beq.n	262f0 <ble_store_util_status_rr+0x10>
   262e8:	2b02      	cmp	r3, #2
   262ea:	d113      	bne.n	26314 <ble_store_util_status_rr+0x34>
   262ec:	2000      	movs	r0, #0
        return 0;

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   262ee:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   262f0:	6843      	ldr	r3, [r0, #4]
   262f2:	2b02      	cmp	r3, #2
   262f4:	dd05      	ble.n	26302 <ble_store_util_status_rr+0x22>
   262f6:	2b03      	cmp	r3, #3
   262f8:	d107      	bne.n	2630a <ble_store_util_status_rr+0x2a>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   262fa:	6880      	ldr	r0, [r0, #8]
   262fc:	f7f9 f841 	bl	1f382 <ble_gap_unpair_oldest_except>
   26300:	e7f5      	b.n	262ee <ble_store_util_status_rr+0xe>
        switch (event->overflow.obj_type) {
   26302:	2b00      	cmp	r3, #0
   26304:	dc03      	bgt.n	2630e <ble_store_util_status_rr+0x2e>
   26306:	2011      	movs	r0, #17
   26308:	e7f1      	b.n	262ee <ble_store_util_status_rr+0xe>
   2630a:	2011      	movs	r0, #17
   2630c:	e7ef      	b.n	262ee <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   2630e:	f7f9 f826 	bl	1f35e <ble_gap_unpair_oldest_peer>
   26312:	e7ec      	b.n	262ee <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   26314:	2011      	movs	r0, #17
   26316:	e7ea      	b.n	262ee <ble_store_util_status_rr+0xe>

00026318 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   26318:	b570      	push	{r4, r5, r6, lr}
   2631a:	4604      	mov	r4, r0
   2631c:	4608      	mov	r0, r1
    switch (len) {
   2631e:	2a04      	cmp	r2, #4
   26320:	d00c      	beq.n	2633c <ble_uuid_init_from_buf+0x24>
   26322:	2a10      	cmp	r2, #16
   26324:	d011      	beq.n	2634a <ble_uuid_init_from_buf+0x32>
   26326:	2a02      	cmp	r2, #2
   26328:	d001      	beq.n	2632e <ble_uuid_init_from_buf+0x16>
   2632a:	2003      	movs	r0, #3
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
}
   2632c:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   2632e:	2310      	movs	r3, #16
   26330:	7023      	strb	r3, [r4, #0]
        uuid->u16.value = get_le16(buf);
   26332:	f004 fc52 	bl	2abda <get_le16>
   26336:	8060      	strh	r0, [r4, #2]
        return 0;
   26338:	2000      	movs	r0, #0
   2633a:	e7f7      	b.n	2632c <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_32;
   2633c:	2320      	movs	r3, #32
   2633e:	7023      	strb	r3, [r4, #0]
        uuid->u32.value = get_le32(buf);
   26340:	f004 fc50 	bl	2abe4 <get_le32>
   26344:	6060      	str	r0, [r4, #4]
        return 0;
   26346:	2000      	movs	r0, #0
   26348:	e7f0      	b.n	2632c <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
   2634a:	4623      	mov	r3, r4
   2634c:	2280      	movs	r2, #128	; 0x80
   2634e:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   26352:	680e      	ldr	r6, [r1, #0]
   26354:	684d      	ldr	r5, [r1, #4]
   26356:	6889      	ldr	r1, [r1, #8]
   26358:	68c2      	ldr	r2, [r0, #12]
   2635a:	f8c4 6001 	str.w	r6, [r4, #1]
   2635e:	605d      	str	r5, [r3, #4]
   26360:	6099      	str	r1, [r3, #8]
   26362:	60da      	str	r2, [r3, #12]
        return 0;
   26364:	2000      	movs	r0, #0
   26366:	e7e1      	b.n	2632c <ble_uuid_init_from_buf+0x14>

00026368 <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   26368:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   2636a:	7803      	ldrb	r3, [r0, #0]
   2636c:	780a      	ldrb	r2, [r1, #0]
   2636e:	4293      	cmp	r3, r2
   26370:	d001      	beq.n	26376 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   26372:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   26374:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   26376:	2b20      	cmp	r3, #32
   26378:	d00a      	beq.n	26390 <ble_uuid_cmp+0x28>
   2637a:	2b80      	cmp	r3, #128	; 0x80
   2637c:	d00c      	beq.n	26398 <ble_uuid_cmp+0x30>
   2637e:	2b10      	cmp	r3, #16
   26380:	d002      	beq.n	26388 <ble_uuid_cmp+0x20>
   26382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26386:	e7f5      	b.n	26374 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   26388:	8840      	ldrh	r0, [r0, #2]
   2638a:	884b      	ldrh	r3, [r1, #2]
   2638c:	1ac0      	subs	r0, r0, r3
   2638e:	e7f1      	b.n	26374 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   26390:	6840      	ldr	r0, [r0, #4]
   26392:	684b      	ldr	r3, [r1, #4]
   26394:	1ac0      	subs	r0, r0, r3
   26396:	e7ed      	b.n	26374 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   26398:	2210      	movs	r2, #16
   2639a:	3101      	adds	r1, #1
   2639c:	3001      	adds	r0, #1
   2639e:	f7e8 fae7 	bl	e970 <memcmp>
   263a2:	e7e7      	b.n	26374 <ble_uuid_cmp+0xc>

000263a4 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   263a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   263a8:	b091      	sub	sp, #68	; 0x44
   263aa:	4688      	mov	r8, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   263ac:	7803      	ldrb	r3, [r0, #0]
   263ae:	2b20      	cmp	r3, #32
   263b0:	d00f      	beq.n	263d2 <ble_uuid_to_str+0x2e>
   263b2:	2b80      	cmp	r3, #128	; 0x80
   263b4:	d013      	beq.n	263de <ble_uuid_to_str+0x3a>
   263b6:	2b10      	cmp	r3, #16
   263b8:	d002      	beq.n	263c0 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   263ba:	2300      	movs	r3, #0
   263bc:	700b      	strb	r3, [r1, #0]
        break;
   263be:	e004      	b.n	263ca <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   263c0:	8842      	ldrh	r2, [r0, #2]
   263c2:	491f      	ldr	r1, [pc, #124]	; (26440 <ble_uuid_to_str+0x9c>)
   263c4:	4640      	mov	r0, r8
   263c6:	f004 fe4f 	bl	2b068 <sprintf>
    }

    return dst;
}
   263ca:	4640      	mov	r0, r8
   263cc:	b011      	add	sp, #68	; 0x44
   263ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   263d2:	6842      	ldr	r2, [r0, #4]
   263d4:	491b      	ldr	r1, [pc, #108]	; (26444 <ble_uuid_to_str+0xa0>)
   263d6:	4640      	mov	r0, r8
   263d8:	f004 fe46 	bl	2b068 <sprintf>
        break;
   263dc:	e7f5      	b.n	263ca <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   263de:	7b83      	ldrb	r3, [r0, #14]
   263e0:	930e      	str	r3, [sp, #56]	; 0x38
   263e2:	7b42      	ldrb	r2, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   263e4:	7b01      	ldrb	r1, [r0, #12]
   263e6:	7ac4      	ldrb	r4, [r0, #11]
   263e8:	940f      	str	r4, [sp, #60]	; 0x3c
   263ea:	7a84      	ldrb	r4, [r0, #10]
   263ec:	7a45      	ldrb	r5, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   263ee:	7a06      	ldrb	r6, [r0, #8]
   263f0:	79c7      	ldrb	r7, [r0, #7]
   263f2:	f890 c006 	ldrb.w	ip, [r0, #6]
   263f6:	f890 e005 	ldrb.w	lr, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   263fa:	7903      	ldrb	r3, [r0, #4]
   263fc:	f890 9003 	ldrb.w	r9, [r0, #3]
   26400:	f890 a002 	ldrb.w	sl, [r0, #2]
   26404:	f890 b001 	ldrb.w	fp, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   26408:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   2640c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   26410:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   26414:	930a      	str	r3, [sp, #40]	; 0x28
   26416:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   2641a:	f8cd c020 	str.w	ip, [sp, #32]
   2641e:	9707      	str	r7, [sp, #28]
   26420:	9606      	str	r6, [sp, #24]
   26422:	9505      	str	r5, [sp, #20]
   26424:	9404      	str	r4, [sp, #16]
   26426:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   26428:	9403      	str	r4, [sp, #12]
   2642a:	9102      	str	r1, [sp, #8]
   2642c:	9201      	str	r2, [sp, #4]
   2642e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26430:	9300      	str	r3, [sp, #0]
   26432:	7bc3      	ldrb	r3, [r0, #15]
   26434:	7c02      	ldrb	r2, [r0, #16]
   26436:	4904      	ldr	r1, [pc, #16]	; (26448 <ble_uuid_to_str+0xa4>)
   26438:	4640      	mov	r0, r8
   2643a:	f004 fe15 	bl	2b068 <sprintf>
        break;
   2643e:	e7c4      	b.n	263ca <ble_uuid_to_str+0x26>
   26440:	0002e618 	.word	0x0002e618
   26444:	0002e620 	.word	0x0002e620
   26448:	0002e628 	.word	0x0002e628

0002644c <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   2644c:	7803      	ldrb	r3, [r0, #0]
   2644e:	2b10      	cmp	r3, #16
   26450:	d001      	beq.n	26456 <ble_uuid_u16+0xa>
   26452:	2000      	movs	r0, #0
}
   26454:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   26456:	8840      	ldrh	r0, [r0, #2]
   26458:	4770      	bx	lr

0002645a <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   2645a:	b570      	push	{r4, r5, r6, lr}
   2645c:	4604      	mov	r4, r0
    int rc = 0;

    if (len == 2) {
   2645e:	2a02      	cmp	r2, #2
   26460:	d003      	beq.n	2646a <ble_uuid_init_from_att_buf+0x10>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   26462:	2a10      	cmp	r2, #16
   26464:	d009      	beq.n	2647a <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   26466:	2003      	movs	r0, #3
    }

    return rc;
}
   26468:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   2646a:	2310      	movs	r3, #16
   2646c:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   2646e:	4608      	mov	r0, r1
   26470:	f004 fbb3 	bl	2abda <get_le16>
   26474:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   26476:	2000      	movs	r0, #0
   26478:	e7f6      	b.n	26468 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_128;
   2647a:	4603      	mov	r3, r0
   2647c:	2280      	movs	r2, #128	; 0x80
   2647e:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   26482:	680e      	ldr	r6, [r1, #0]
   26484:	684d      	ldr	r5, [r1, #4]
   26486:	6888      	ldr	r0, [r1, #8]
   26488:	68ca      	ldr	r2, [r1, #12]
   2648a:	f8c4 6001 	str.w	r6, [r4, #1]
   2648e:	605d      	str	r5, [r3, #4]
   26490:	6098      	str	r0, [r3, #8]
   26492:	60da      	str	r2, [r3, #12]
    int rc = 0;
   26494:	2000      	movs	r0, #0
   26496:	e7e7      	b.n	26468 <ble_uuid_init_from_att_buf+0xe>

00026498 <ble_uuid_init_from_att_mbuf>:
{
   26498:	b530      	push	{r4, r5, lr}
   2649a:	b085      	sub	sp, #20
   2649c:	4605      	mov	r5, r0
   2649e:	4608      	mov	r0, r1
   264a0:	4611      	mov	r1, r2
   264a2:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   264a4:	466b      	mov	r3, sp
   264a6:	4622      	mov	r2, r4
   264a8:	f7e7 f88e 	bl	d5c8 <os_mbuf_copydata>
    if (rc != 0) {
   264ac:	b108      	cbz	r0, 264b2 <ble_uuid_init_from_att_mbuf+0x1a>
}
   264ae:	b005      	add	sp, #20
   264b0:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   264b2:	4622      	mov	r2, r4
   264b4:	4669      	mov	r1, sp
   264b6:	4628      	mov	r0, r5
   264b8:	f7ff ffcf 	bl	2645a <ble_uuid_init_from_att_buf>
    return rc;
   264bc:	e7f7      	b.n	264ae <ble_uuid_init_from_att_mbuf+0x16>
	...

000264c0 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   264c0:	b570      	push	{r4, r5, r6, lr}
   264c2:	4605      	mov	r5, r0
   264c4:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   264c6:	7803      	ldrb	r3, [r0, #0]
   264c8:	2b20      	cmp	r3, #32
   264ca:	d00b      	beq.n	264e4 <ble_uuid_flat+0x24>
   264cc:	2b80      	cmp	r3, #128	; 0x80
   264ce:	d016      	beq.n	264fe <ble_uuid_flat+0x3e>
   264d0:	2b10      	cmp	r3, #16
   264d2:	d001      	beq.n	264d8 <ble_uuid_flat+0x18>
   264d4:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   264d6:	bd70      	pop	{r4, r5, r6, pc}
        put_le16(dst, BLE_UUID16(uuid)->value);
   264d8:	8841      	ldrh	r1, [r0, #2]
   264da:	4620      	mov	r0, r4
   264dc:	f004 fb5c 	bl	2ab98 <put_le16>
    return 0;
   264e0:	2000      	movs	r0, #0
        break;
   264e2:	e7f8      	b.n	264d6 <ble_uuid_flat+0x16>
        memcpy(dst, ble_uuid_base, 16);
   264e4:	4e0b      	ldr	r6, [pc, #44]	; (26514 <ble_uuid_flat+0x54>)
   264e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   264e8:	6020      	str	r0, [r4, #0]
   264ea:	6061      	str	r1, [r4, #4]
   264ec:	60a2      	str	r2, [r4, #8]
   264ee:	4620      	mov	r0, r4
   264f0:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   264f4:	6869      	ldr	r1, [r5, #4]
   264f6:	f004 fb53 	bl	2aba0 <put_le32>
    return 0;
   264fa:	2000      	movs	r0, #0
        break;
   264fc:	e7eb      	b.n	264d6 <ble_uuid_flat+0x16>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   264fe:	f855 0f01 	ldr.w	r0, [r5, #1]!
   26502:	6869      	ldr	r1, [r5, #4]
   26504:	68aa      	ldr	r2, [r5, #8]
   26506:	68eb      	ldr	r3, [r5, #12]
   26508:	6020      	str	r0, [r4, #0]
   2650a:	6061      	str	r1, [r4, #4]
   2650c:	60a2      	str	r2, [r4, #8]
   2650e:	60e3      	str	r3, [r4, #12]
    return 0;
   26510:	2000      	movs	r0, #0
        break;
   26512:	e7e0      	b.n	264d6 <ble_uuid_flat+0x16>
   26514:	0002e670 	.word	0x0002e670

00026518 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   26518:	7800      	ldrb	r0, [r0, #0]
}
   2651a:	08c0      	lsrs	r0, r0, #3
   2651c:	4770      	bx	lr

0002651e <ble_uuid_to_mbuf>:
{
   2651e:	b538      	push	{r3, r4, r5, lr}
   26520:	4605      	mov	r5, r0
   26522:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   26524:	f7ff fff8 	bl	26518 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   26528:	b281      	uxth	r1, r0
   2652a:	4620      	mov	r0, r4
   2652c:	f7e7 f9cf 	bl	d8ce <os_mbuf_extend>
    if (buf == NULL) {
   26530:	b128      	cbz	r0, 2653e <ble_uuid_to_mbuf+0x20>
   26532:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   26534:	4628      	mov	r0, r5
   26536:	f7ff ffc3 	bl	264c0 <ble_uuid_flat>
    return 0;
   2653a:	2000      	movs	r0, #0
}
   2653c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   2653e:	2006      	movs	r0, #6
   26540:	e7fc      	b.n	2653c <ble_uuid_to_mbuf+0x1e>

00026542 <ble_sm_alg_xor_128>:
static void
ble_sm_alg_xor_128(const uint8_t *p, const uint8_t *q, uint8_t *r)
{
    int i;

    for (i = 0; i < 16; i++) {
   26542:	2300      	movs	r3, #0
   26544:	2b0f      	cmp	r3, #15
   26546:	dc09      	bgt.n	2655c <ble_sm_alg_xor_128+0x1a>
{
   26548:	b430      	push	{r4, r5}
        r[i] = p[i] ^ q[i];
   2654a:	5cc4      	ldrb	r4, [r0, r3]
   2654c:	5ccd      	ldrb	r5, [r1, r3]
   2654e:	406c      	eors	r4, r5
   26550:	54d4      	strb	r4, [r2, r3]
    for (i = 0; i < 16; i++) {
   26552:	3301      	adds	r3, #1
   26554:	2b0f      	cmp	r3, #15
   26556:	ddf8      	ble.n	2654a <ble_sm_alg_xor_128+0x8>
    }
}
   26558:	bc30      	pop	{r4, r5}
   2655a:	4770      	bx	lr
   2655c:	4770      	bx	lr

0002655e <ble_sm_alg_encrypt>:

static int
ble_sm_alg_encrypt(const uint8_t *key, const uint8_t *plaintext,
                   uint8_t *enc_data)
{
   2655e:	b530      	push	{r4, r5, lr}
   26560:	b0b1      	sub	sp, #196	; 0xc4
   26562:	460d      	mov	r5, r1
   26564:	4614      	mov	r4, r2
    struct tc_aes_key_sched_struct s;
    uint8_t tmp[16];

    swap_buf(tmp, key, 16);
   26566:	2210      	movs	r2, #16
   26568:	4601      	mov	r1, r0
   2656a:	4668      	mov	r0, sp
   2656c:	f004 fb6c 	bl	2ac48 <swap_buf>

    if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   26570:	4669      	mov	r1, sp
   26572:	a804      	add	r0, sp, #16
   26574:	f001 f9aa 	bl	278cc <tc_aes128_set_encrypt_key>
   26578:	b188      	cbz	r0, 2659e <ble_sm_alg_encrypt+0x40>
        return BLE_HS_EUNKNOWN;
    }

    swap_buf(tmp, plaintext, 16);
   2657a:	2210      	movs	r2, #16
   2657c:	4629      	mov	r1, r5
   2657e:	4668      	mov	r0, sp
   26580:	f004 fb62 	bl	2ac48 <swap_buf>

    if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   26584:	aa04      	add	r2, sp, #16
   26586:	4669      	mov	r1, sp
   26588:	4620      	mov	r0, r4
   2658a:	f001 f9fd 	bl	27988 <tc_aes_encrypt>
   2658e:	b140      	cbz	r0, 265a2 <ble_sm_alg_encrypt+0x44>
        return BLE_HS_EUNKNOWN;
    }

    swap_in_place(enc_data, 16);
   26590:	2110      	movs	r1, #16
   26592:	4620      	mov	r0, r4
   26594:	f004 fb48 	bl	2ac28 <swap_in_place>

    return 0;
   26598:	2000      	movs	r0, #0
}
   2659a:	b031      	add	sp, #196	; 0xc4
   2659c:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EUNKNOWN;
   2659e:	2011      	movs	r0, #17
   265a0:	e7fb      	b.n	2659a <ble_sm_alg_encrypt+0x3c>
        return BLE_HS_EUNKNOWN;
   265a2:	2011      	movs	r0, #17
   265a4:	e7f9      	b.n	2659a <ble_sm_alg_encrypt+0x3c>

000265a6 <ble_sm_alg_s1>:

int
ble_sm_alg_s1(const uint8_t *k, const uint8_t *r1, const uint8_t *r2,
              uint8_t *out)
{
   265a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265aa:	4607      	mov	r7, r0
   265ac:	460e      	mov	r6, r1
   265ae:	4615      	mov	r5, r2
   265b0:	461c      	mov	r4, r3
     * r1' is concatenated with r2' to generate r' which is used as
     * the 128-bit input parameter plaintextData to security function e:
     *
     *    r' = r1' || r2'
     */
    memcpy(out, r2, 8);
   265b2:	6812      	ldr	r2, [r2, #0]
   265b4:	686b      	ldr	r3, [r5, #4]
   265b6:	6022      	str	r2, [r4, #0]
   265b8:	6063      	str	r3, [r4, #4]
    memcpy(out + 8, r1, 8);
   265ba:	680a      	ldr	r2, [r1, #0]
   265bc:	684b      	ldr	r3, [r1, #4]
   265be:	60a2      	str	r2, [r4, #8]
   265c0:	60e3      	str	r3, [r4, #12]

    /* s1(k, r1 , r2) = e(k, r') */
    rc = ble_sm_alg_encrypt(k, out, out);
   265c2:	4622      	mov	r2, r4
   265c4:	4621      	mov	r1, r4
   265c6:	f7ff ffca 	bl	2655e <ble_sm_alg_encrypt>
    if (rc != 0) {
   265ca:	4680      	mov	r8, r0
   265cc:	b110      	cbz	r0, 265d4 <ble_sm_alg_s1+0x2e>
    BLE_HS_LOG(DEBUG, "\n    out=");
    ble_hs_log_flat_buf(out, 16);
    BLE_HS_LOG(DEBUG, "\n");

    return 0;
}
   265ce:	4640      	mov	r0, r8
   265d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_flat_buf(k, 16);
   265d4:	2110      	movs	r1, #16
   265d6:	4638      	mov	r0, r7
   265d8:	f7fc ff08 	bl	233ec <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r1, 16);
   265dc:	2110      	movs	r1, #16
   265de:	4630      	mov	r0, r6
   265e0:	f7fc ff04 	bl	233ec <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r2, 16);
   265e4:	2110      	movs	r1, #16
   265e6:	4628      	mov	r0, r5
   265e8:	f7fc ff00 	bl	233ec <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(out, 16);
   265ec:	2110      	movs	r1, #16
   265ee:	4620      	mov	r0, r4
   265f0:	f7fc fefc 	bl	233ec <ble_hs_log_flat_buf>
    return 0;
   265f4:	e7eb      	b.n	265ce <ble_sm_alg_s1+0x28>

000265f6 <ble_sm_alg_c1>:
ble_sm_alg_c1(const uint8_t *k, const uint8_t *r,
              const uint8_t *preq, const uint8_t *pres,
              uint8_t iat, uint8_t rat,
              const uint8_t *ia, const uint8_t *ra,
              uint8_t *out_enc_data)
{
   265f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   265fa:	b088      	sub	sp, #32
   265fc:	4680      	mov	r8, r0
   265fe:	460f      	mov	r7, r1
   26600:	4615      	mov	r5, r2
   26602:	461c      	mov	r4, r3
   26604:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   26608:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2660c:	9e14      	ldr	r6, [sp, #80]	; 0x50
    uint8_t p1[16], p2[16];
    int rc;

    BLE_HS_LOG(DEBUG, "ble_sm_alg_c1()\n    k=");
    ble_hs_log_flat_buf(k, 16);
   2660e:	2110      	movs	r1, #16
   26610:	f7fc feec 	bl	233ec <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    r=");
    ble_hs_log_flat_buf(r, 16);
   26614:	2110      	movs	r1, #16
   26616:	4638      	mov	r0, r7
   26618:	f7fc fee8 	bl	233ec <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    iat=%d rat=%d", iat, rat);
    BLE_HS_LOG(DEBUG, "\n    ia=");
    ble_hs_log_flat_buf(ia, 6);
   2661c:	2106      	movs	r1, #6
   2661e:	4648      	mov	r0, r9
   26620:	f7fc fee4 	bl	233ec <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    ra=");
    ble_hs_log_flat_buf(ra, 6);
   26624:	2106      	movs	r1, #6
   26626:	4650      	mov	r0, sl
   26628:	f7fc fee0 	bl	233ec <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    preq=");
    ble_hs_log_flat_buf(preq, 7);
   2662c:	2107      	movs	r1, #7
   2662e:	4628      	mov	r0, r5
   26630:	f7fc fedc 	bl	233ec <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    pres=");
    ble_hs_log_flat_buf(pres, 7);
   26634:	2107      	movs	r1, #7
   26636:	4620      	mov	r0, r4
   26638:	f7fc fed8 	bl	233ec <ble_hs_log_flat_buf>

    /* pres, preq, rat and iat are concatenated to generate p1 */
    p1[0] = iat;
   2663c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   26640:	f88d 3010 	strb.w	r3, [sp, #16]
    p1[1] = rat;
   26644:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   26648:	f88d 3011 	strb.w	r3, [sp, #17]
    memcpy(p1 + 2, preq, 7);
   2664c:	682b      	ldr	r3, [r5, #0]
   2664e:	f8cd 3012 	str.w	r3, [sp, #18]
   26652:	88aa      	ldrh	r2, [r5, #4]
   26654:	79ab      	ldrb	r3, [r5, #6]
   26656:	f8ad 2016 	strh.w	r2, [sp, #22]
   2665a:	f88d 3018 	strb.w	r3, [sp, #24]
    memcpy(p1 + 9, pres, 7);
   2665e:	6823      	ldr	r3, [r4, #0]
   26660:	f8cd 3019 	str.w	r3, [sp, #25]
   26664:	88a2      	ldrh	r2, [r4, #4]
   26666:	79a3      	ldrb	r3, [r4, #6]
   26668:	f8ad 201d 	strh.w	r2, [sp, #29]
   2666c:	f88d 301f 	strb.w	r3, [sp, #31]

    BLE_HS_LOG(DEBUG, "\n    p1=");
    ble_hs_log_flat_buf(p1, sizeof p1);
   26670:	2110      	movs	r1, #16
   26672:	eb0d 0001 	add.w	r0, sp, r1
   26676:	f7fc feb9 	bl	233ec <ble_hs_log_flat_buf>

    /* c1 = e(k, e(k, r XOR p1) XOR p2) */

    /* Using out_enc_data as temporary output buffer */
    ble_sm_alg_xor_128(r, p1, out_enc_data);
   2667a:	4632      	mov	r2, r6
   2667c:	a904      	add	r1, sp, #16
   2667e:	4638      	mov	r0, r7
   26680:	f7ff ff5f 	bl	26542 <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   26684:	4632      	mov	r2, r6
   26686:	4631      	mov	r1, r6
   26688:	4640      	mov	r0, r8
   2668a:	f7ff ff68 	bl	2655e <ble_sm_alg_encrypt>
    if (rc != 0) {
   2668e:	bb40      	cbnz	r0, 266e2 <ble_sm_alg_c1+0xec>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    /* ra is concatenated with ia and padding to generate p2 */
    memcpy(p2, ra, 6);
   26690:	f8da 0000 	ldr.w	r0, [sl]
   26694:	9000      	str	r0, [sp, #0]
   26696:	f8ba 3004 	ldrh.w	r3, [sl, #4]
   2669a:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(p2 + 6, ia, 6);
   2669e:	f8d9 3000 	ldr.w	r3, [r9]
   266a2:	f8cd 3006 	str.w	r3, [sp, #6]
   266a6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   266aa:	f8ad 300a 	strh.w	r3, [sp, #10]
    memset(p2 + 12, 0, 4);
   266ae:	2300      	movs	r3, #0
   266b0:	9303      	str	r3, [sp, #12]

    BLE_HS_LOG(DEBUG, "\n    p2=");
    ble_hs_log_flat_buf(p2, sizeof p2);
   266b2:	2110      	movs	r1, #16
   266b4:	4668      	mov	r0, sp
   266b6:	f7fc fe99 	bl	233ec <ble_hs_log_flat_buf>

    ble_sm_alg_xor_128(out_enc_data, p2, out_enc_data);
   266ba:	4632      	mov	r2, r6
   266bc:	4669      	mov	r1, sp
   266be:	4630      	mov	r0, r6
   266c0:	f7ff ff3f 	bl	26542 <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   266c4:	4632      	mov	r2, r6
   266c6:	4631      	mov	r1, r6
   266c8:	4640      	mov	r0, r8
   266ca:	f7ff ff48 	bl	2655e <ble_sm_alg_encrypt>
    if (rc != 0) {
   266ce:	4604      	mov	r4, r0
   266d0:	b948      	cbnz	r0, 266e6 <ble_sm_alg_c1+0xf0>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    BLE_HS_LOG(DEBUG, "\n    out_enc_data=");
    ble_hs_log_flat_buf(out_enc_data, 16);
   266d2:	2110      	movs	r1, #16
   266d4:	4630      	mov	r0, r6
   266d6:	f7fc fe89 	bl	233ec <ble_hs_log_flat_buf>
    rc = 0;

done:
    BLE_HS_LOG(DEBUG, "\n    rc=%d\n", rc);
    return rc;
}
   266da:	4620      	mov	r0, r4
   266dc:	b008      	add	sp, #32
   266de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_HS_EUNKNOWN;
   266e2:	2411      	movs	r4, #17
   266e4:	e7f9      	b.n	266da <ble_sm_alg_c1+0xe4>
        rc = BLE_HS_EUNKNOWN;
   266e6:	2411      	movs	r4, #17
    return rc;
   266e8:	e7f7      	b.n	266da <ble_sm_alg_c1+0xe4>
	...

000266ec <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   266ec:	b538      	push	{r3, r4, r5, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   266ee:	4b17      	ldr	r3, [pc, #92]	; (2674c <ble_svc_ans_new_alert_notify+0x60>)
   266f0:	2200      	movs	r2, #0
   266f2:	601a      	str	r2, [r3, #0]
   266f4:	605a      	str	r2, [r3, #4]
   266f6:	609a      	str	r2, [r3, #8]
   266f8:	60da      	str	r2, [r3, #12]
   266fa:	611a      	str	r2, [r3, #16]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   266fc:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   266fe:	4a14      	ldr	r2, [pc, #80]	; (26750 <ble_svc_ans_new_alert_notify+0x64>)
   26700:	5c12      	ldrb	r2, [r2, r0]
   26702:	705a      	strb	r2, [r3, #1]

    if (info_str) {
   26704:	b1a9      	cbz	r1, 26732 <ble_svc_ans_new_alert_notify+0x46>
   26706:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   26708:	4608      	mov	r0, r1
   2670a:	f7e8 f9a2 	bl	ea52 <strlen>
   2670e:	4602      	mov	r2, r0
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   26710:	2812      	cmp	r0, #18
   26712:	dd15      	ble.n	26740 <ble_svc_ans_new_alert_notify+0x54>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   26714:	4b0d      	ldr	r3, [pc, #52]	; (2674c <ble_svc_ans_new_alert_notify+0x60>)
   26716:	6825      	ldr	r5, [r4, #0]
   26718:	6860      	ldr	r0, [r4, #4]
   2671a:	68a1      	ldr	r1, [r4, #8]
   2671c:	68e2      	ldr	r2, [r4, #12]
   2671e:	f8c3 5002 	str.w	r5, [r3, #2]
   26722:	f8c3 0006 	str.w	r0, [r3, #6]
   26726:	f8c3 100a 	str.w	r1, [r3, #10]
   2672a:	f8c3 200e 	str.w	r2, [r3, #14]
   2672e:	8a22      	ldrh	r2, [r4, #16]
   26730:	825a      	strh	r2, [r3, #18]
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
        }
    }
    return ble_gatts_notify(ble_svc_ans_conn_handle,
   26732:	4b08      	ldr	r3, [pc, #32]	; (26754 <ble_svc_ans_new_alert_notify+0x68>)
   26734:	8819      	ldrh	r1, [r3, #0]
   26736:	4b08      	ldr	r3, [pc, #32]	; (26758 <ble_svc_ans_new_alert_notify+0x6c>)
   26738:	8818      	ldrh	r0, [r3, #0]
   2673a:	f7f9 feb5 	bl	204a8 <ble_gatts_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   2673e:	bd38      	pop	{r3, r4, r5, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   26740:	4621      	mov	r1, r4
   26742:	4806      	ldr	r0, [pc, #24]	; (2675c <ble_svc_ans_new_alert_notify+0x70>)
   26744:	f7e8 f938 	bl	e9b8 <memcpy>
   26748:	e7f3      	b.n	26732 <ble_svc_ans_new_alert_notify+0x46>
   2674a:	bf00      	nop
   2674c:	200038c4 	.word	0x200038c4
   26750:	200038bc 	.word	0x200038bc
   26754:	200038d8 	.word	0x200038d8
   26758:	200038b6 	.word	0x200038b6
   2675c:	200038c6 	.word	0x200038c6

00026760 <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   26760:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   26762:	4b06      	ldr	r3, [pc, #24]	; (2677c <ble_svc_ans_unr_alert_notify+0x1c>)
   26764:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   26766:	4a06      	ldr	r2, [pc, #24]	; (26780 <ble_svc_ans_unr_alert_notify+0x20>)
   26768:	5c12      	ldrb	r2, [r2, r0]
   2676a:	705a      	strb	r2, [r3, #1]
    return ble_gatts_notify(ble_svc_ans_conn_handle,
   2676c:	4b05      	ldr	r3, [pc, #20]	; (26784 <ble_svc_ans_unr_alert_notify+0x24>)
   2676e:	8819      	ldrh	r1, [r3, #0]
   26770:	4b05      	ldr	r3, [pc, #20]	; (26788 <ble_svc_ans_unr_alert_notify+0x28>)
   26772:	8818      	ldrh	r0, [r3, #0]
   26774:	f7f9 fe98 	bl	204a8 <ble_gatts_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   26778:	bd08      	pop	{r3, pc}
   2677a:	bf00      	nop
   2677c:	200038e8 	.word	0x200038e8
   26780:	200038e0 	.word	0x200038e0
   26784:	200038ea 	.word	0x200038ea
   26788:	200038b6 	.word	0x200038b6

0002678c <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   2678c:	b510      	push	{r4, lr}
   2678e:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   26790:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   26792:	428b      	cmp	r3, r1
   26794:	d307      	bcc.n	267a6 <ble_svc_ans_chr_write+0x1a>
   26796:	4293      	cmp	r3, r2
   26798:	d807      	bhi.n	267aa <ble_svc_ans_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   2679a:	9b02      	ldr	r3, [sp, #8]
   2679c:	4621      	mov	r1, r4
   2679e:	f7fc fe4f 	bl	23440 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   267a2:	b920      	cbnz	r0, 267ae <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   267a4:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   267a6:	200d      	movs	r0, #13
   267a8:	e7fc      	b.n	267a4 <ble_svc_ans_chr_write+0x18>
   267aa:	200d      	movs	r0, #13
   267ac:	e7fa      	b.n	267a4 <ble_svc_ans_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   267ae:	200e      	movs	r0, #14
   267b0:	e7f8      	b.n	267a4 <ble_svc_ans_chr_write+0x18>
	...

000267b4 <ble_svc_ans_access>:
{
   267b4:	b530      	push	{r4, r5, lr}
   267b6:	b083      	sub	sp, #12
   267b8:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   267ba:	6893      	ldr	r3, [r2, #8]
   267bc:	6818      	ldr	r0, [r3, #0]
   267be:	f7ff fe45 	bl	2644c <ble_uuid_u16>
    assert(uuid16 != 0);
   267c2:	b150      	cbz	r0, 267da <ble_svc_ans_access+0x26>
    switch (uuid16) {
   267c4:	f5a0 5329 	sub.w	r3, r0, #10816	; 0x2a40
   267c8:	3b04      	subs	r3, #4
   267ca:	2b04      	cmp	r3, #4
   267cc:	f200 80d7 	bhi.w	2697e <ble_svc_ans_access+0x1ca>
   267d0:	e8df f003 	tbb	[pc, r3]
   267d4:	0d235a70 	.word	0x0d235a70
   267d8:	45          	.byte	0x45
   267d9:	00          	.byte	0x00
    assert(uuid16 != 0);
   267da:	f7e5 fcdf 	bl	c19c <hal_debugger_connected>
   267de:	b100      	cbz	r0, 267e2 <ble_svc_ans_access+0x2e>
   267e0:	be01      	bkpt	0x0001
   267e2:	2300      	movs	r3, #0
   267e4:	461a      	mov	r2, r3
   267e6:	4619      	mov	r1, r3
   267e8:	4618      	mov	r0, r3
   267ea:	f7e6 f9db 	bl	cba4 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   267ee:	7823      	ldrb	r3, [r4, #0]
   267f0:	b94b      	cbnz	r3, 26806 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   267f2:	2201      	movs	r2, #1
   267f4:	4969      	ldr	r1, [pc, #420]	; (2699c <ble_svc_ans_access+0x1e8>)
   267f6:	6860      	ldr	r0, [r4, #4]
   267f8:	f7e6 fe55 	bl	d4a6 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   267fc:	4604      	mov	r4, r0
   267fe:	2800      	cmp	r0, #0
   26800:	d05c      	beq.n	268bc <ble_svc_ans_access+0x108>
   26802:	2411      	movs	r4, #17
   26804:	e05a      	b.n	268bc <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26806:	f7e5 fcc9 	bl	c19c <hal_debugger_connected>
   2680a:	b100      	cbz	r0, 2680e <ble_svc_ans_access+0x5a>
   2680c:	be01      	bkpt	0x0001
   2680e:	2300      	movs	r3, #0
   26810:	461a      	mov	r2, r3
   26812:	4619      	mov	r1, r3
   26814:	4618      	mov	r0, r3
   26816:	f7e6 f9c5 	bl	cba4 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2681a:	7823      	ldrb	r3, [r4, #0]
   2681c:	2b01      	cmp	r3, #1
   2681e:	d00a      	beq.n	26836 <ble_svc_ans_access+0x82>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   26820:	b99b      	cbnz	r3, 2684a <ble_svc_ans_access+0x96>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   26822:	2214      	movs	r2, #20
   26824:	495e      	ldr	r1, [pc, #376]	; (269a0 <ble_svc_ans_access+0x1ec>)
   26826:	6860      	ldr	r0, [r4, #4]
   26828:	f7e6 fe3d 	bl	d4a6 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2682c:	4604      	mov	r4, r0
   2682e:	2800      	cmp	r0, #0
   26830:	d044      	beq.n	268bc <ble_svc_ans_access+0x108>
   26832:	2411      	movs	r4, #17
   26834:	e042      	b.n	268bc <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   26836:	4b5b      	ldr	r3, [pc, #364]	; (269a4 <ble_svc_ans_access+0x1f0>)
   26838:	9300      	str	r3, [sp, #0]
   2683a:	4b59      	ldr	r3, [pc, #356]	; (269a0 <ble_svc_ans_access+0x1ec>)
   2683c:	2214      	movs	r2, #20
   2683e:	2100      	movs	r1, #0
   26840:	6860      	ldr	r0, [r4, #4]
   26842:	f7ff ffa3 	bl	2678c <ble_svc_ans_chr_write>
   26846:	4604      	mov	r4, r0
            return rc;
   26848:	e038      	b.n	268bc <ble_svc_ans_access+0x108>
        assert(0);
   2684a:	f7e5 fca7 	bl	c19c <hal_debugger_connected>
   2684e:	b100      	cbz	r0, 26852 <ble_svc_ans_access+0x9e>
   26850:	be01      	bkpt	0x0001
   26852:	2300      	movs	r3, #0
   26854:	461a      	mov	r2, r3
   26856:	4619      	mov	r1, r3
   26858:	4618      	mov	r0, r3
   2685a:	f7e6 f9a3 	bl	cba4 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2685e:	7823      	ldrb	r3, [r4, #0]
   26860:	b943      	cbnz	r3, 26874 <ble_svc_ans_access+0xc0>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   26862:	2201      	movs	r2, #1
   26864:	4950      	ldr	r1, [pc, #320]	; (269a8 <ble_svc_ans_access+0x1f4>)
   26866:	6860      	ldr	r0, [r4, #4]
   26868:	f7e6 fe1d 	bl	d4a6 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2686c:	4604      	mov	r4, r0
   2686e:	b328      	cbz	r0, 268bc <ble_svc_ans_access+0x108>
   26870:	2411      	movs	r4, #17
   26872:	e023      	b.n	268bc <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26874:	f7e5 fc92 	bl	c19c <hal_debugger_connected>
   26878:	b100      	cbz	r0, 2687c <ble_svc_ans_access+0xc8>
   2687a:	be01      	bkpt	0x0001
   2687c:	2300      	movs	r3, #0
   2687e:	461a      	mov	r2, r3
   26880:	4619      	mov	r1, r3
   26882:	4618      	mov	r0, r3
   26884:	f7e6 f98e 	bl	cba4 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26888:	7823      	ldrb	r3, [r4, #0]
   2688a:	2b01      	cmp	r3, #1
   2688c:	d008      	beq.n	268a0 <ble_svc_ans_access+0xec>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   2688e:	2202      	movs	r2, #2
   26890:	4946      	ldr	r1, [pc, #280]	; (269ac <ble_svc_ans_access+0x1f8>)
   26892:	6860      	ldr	r0, [r4, #4]
   26894:	f7e6 fe07 	bl	d4a6 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26898:	4604      	mov	r4, r0
   2689a:	b178      	cbz	r0, 268bc <ble_svc_ans_access+0x108>
   2689c:	2411      	movs	r4, #17
   2689e:	e00d      	b.n	268bc <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om,
   268a0:	2300      	movs	r3, #0
   268a2:	9300      	str	r3, [sp, #0]
   268a4:	4b41      	ldr	r3, [pc, #260]	; (269ac <ble_svc_ans_access+0x1f8>)
   268a6:	2202      	movs	r2, #2
   268a8:	4611      	mov	r1, r2
   268aa:	6860      	ldr	r0, [r4, #4]
   268ac:	f7ff ff6e 	bl	2678c <ble_svc_ans_chr_write>
   268b0:	4604      	mov	r4, r0
            return rc;
   268b2:	e003      	b.n	268bc <ble_svc_ans_access+0x108>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   268b4:	7823      	ldrb	r3, [r4, #0]
   268b6:	2b01      	cmp	r3, #1
   268b8:	d003      	beq.n	268c2 <ble_svc_ans_access+0x10e>
        return rc;
   268ba:	240e      	movs	r4, #14
}
   268bc:	4620      	mov	r0, r4
   268be:	b003      	add	sp, #12
   268c0:	bd30      	pop	{r4, r5, pc}
            rc = ble_svc_ans_chr_write(ctxt->om,
   268c2:	2300      	movs	r3, #0
   268c4:	9300      	str	r3, [sp, #0]
   268c6:	4b3a      	ldr	r3, [pc, #232]	; (269b0 <ble_svc_ans_access+0x1fc>)
   268c8:	2202      	movs	r2, #2
   268ca:	4611      	mov	r1, r2
   268cc:	6860      	ldr	r0, [r4, #4]
   268ce:	f7ff ff5d 	bl	2678c <ble_svc_ans_chr_write>
            if (rc != 0) {
   268d2:	4604      	mov	r4, r0
   268d4:	2800      	cmp	r0, #0
   268d6:	d1f1      	bne.n	268bc <ble_svc_ans_access+0x108>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   268d8:	4b35      	ldr	r3, [pc, #212]	; (269b0 <ble_svc_ans_access+0x1fc>)
   268da:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   268dc:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   268de:	2807      	cmp	r0, #7
   268e0:	d809      	bhi.n	268f6 <ble_svc_ans_access+0x142>
                cat_bit_mask = (1 << cat_id);
   268e2:	2301      	movs	r3, #1
   268e4:	4083      	lsls	r3, r0
   268e6:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   268e8:	2a05      	cmp	r2, #5
   268ea:	d854      	bhi.n	26996 <ble_svc_ans_access+0x1e2>
   268ec:	e8df f002 	tbb	[pc, r2]
   268f0:	17110c07 	.word	0x17110c07
   268f4:	331d      	.short	0x331d
            } else if (cat_id == 0xff) {
   268f6:	28ff      	cmp	r0, #255	; 0xff
   268f8:	d14b      	bne.n	26992 <ble_svc_ans_access+0x1de>
                cat_bit_mask = cat_id;
   268fa:	4603      	mov	r3, r0
   268fc:	e7f4      	b.n	268e8 <ble_svc_ans_access+0x134>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   268fe:	4a27      	ldr	r2, [pc, #156]	; (2699c <ble_svc_ans_access+0x1e8>)
   26900:	7811      	ldrb	r1, [r2, #0]
   26902:	430b      	orrs	r3, r1
   26904:	7013      	strb	r3, [r2, #0]
                break;
   26906:	e7d9      	b.n	268bc <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   26908:	4a27      	ldr	r2, [pc, #156]	; (269a8 <ble_svc_ans_access+0x1f4>)
   2690a:	7811      	ldrb	r1, [r2, #0]
   2690c:	430b      	orrs	r3, r1
   2690e:	7013      	strb	r3, [r2, #0]
                break;
   26910:	e7d4      	b.n	268bc <ble_svc_ans_access+0x108>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   26912:	4922      	ldr	r1, [pc, #136]	; (2699c <ble_svc_ans_access+0x1e8>)
   26914:	780a      	ldrb	r2, [r1, #0]
   26916:	ea22 0303 	bic.w	r3, r2, r3
   2691a:	700b      	strb	r3, [r1, #0]
                break;
   2691c:	e7ce      	b.n	268bc <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   2691e:	4922      	ldr	r1, [pc, #136]	; (269a8 <ble_svc_ans_access+0x1f4>)
   26920:	780a      	ldrb	r2, [r1, #0]
   26922:	ea22 0303 	bic.w	r3, r2, r3
   26926:	700b      	strb	r3, [r1, #0]
                break;
   26928:	e7c8      	b.n	268bc <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   2692a:	28ff      	cmp	r0, #255	; 0xff
   2692c:	d10f      	bne.n	2694e <ble_svc_ans_access+0x19a>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2692e:	2507      	movs	r5, #7
   26930:	e000      	b.n	26934 <ble_svc_ans_access+0x180>
   26932:	3d01      	subs	r5, #1
   26934:	2d00      	cmp	r5, #0
   26936:	ddc1      	ble.n	268bc <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   26938:	4b18      	ldr	r3, [pc, #96]	; (2699c <ble_svc_ans_access+0x1e8>)
   2693a:	781b      	ldrb	r3, [r3, #0]
   2693c:	412b      	asrs	r3, r5
   2693e:	f013 0f01 	tst.w	r3, #1
   26942:	d0f6      	beq.n	26932 <ble_svc_ans_access+0x17e>
                            ble_svc_ans_new_alert_notify(i, NULL);
   26944:	2100      	movs	r1, #0
   26946:	b2e8      	uxtb	r0, r5
   26948:	f7ff fed0 	bl	266ec <ble_svc_ans_new_alert_notify>
   2694c:	e7f1      	b.n	26932 <ble_svc_ans_access+0x17e>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   2694e:	2100      	movs	r1, #0
   26950:	f7ff fecc 	bl	266ec <ble_svc_ans_new_alert_notify>
   26954:	e7b2      	b.n	268bc <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   26956:	28ff      	cmp	r0, #255	; 0xff
   26958:	d10e      	bne.n	26978 <ble_svc_ans_access+0x1c4>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2695a:	2507      	movs	r5, #7
   2695c:	e000      	b.n	26960 <ble_svc_ans_access+0x1ac>
   2695e:	3d01      	subs	r5, #1
   26960:	2d00      	cmp	r5, #0
   26962:	ddab      	ble.n	268bc <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   26964:	4b10      	ldr	r3, [pc, #64]	; (269a8 <ble_svc_ans_access+0x1f4>)
   26966:	781b      	ldrb	r3, [r3, #0]
   26968:	412b      	asrs	r3, r5
   2696a:	f013 0f01 	tst.w	r3, #1
   2696e:	d0f6      	beq.n	2695e <ble_svc_ans_access+0x1aa>
                            ble_svc_ans_unr_alert_notify(i);
   26970:	b2e8      	uxtb	r0, r5
   26972:	f7ff fef5 	bl	26760 <ble_svc_ans_unr_alert_notify>
   26976:	e7f2      	b.n	2695e <ble_svc_ans_access+0x1aa>
                    ble_svc_ans_unr_alert_notify(cat_id);
   26978:	f7ff fef2 	bl	26760 <ble_svc_ans_unr_alert_notify>
            return 0;
   2697c:	e79e      	b.n	268bc <ble_svc_ans_access+0x108>
        assert(0);
   2697e:	f7e5 fc0d 	bl	c19c <hal_debugger_connected>
   26982:	b100      	cbz	r0, 26986 <ble_svc_ans_access+0x1d2>
   26984:	be01      	bkpt	0x0001
   26986:	2300      	movs	r3, #0
   26988:	461a      	mov	r2, r3
   2698a:	4619      	mov	r1, r3
   2698c:	4618      	mov	r0, r3
   2698e:	f7e6 f909 	bl	cba4 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   26992:	240e      	movs	r4, #14
   26994:	e792      	b.n	268bc <ble_svc_ans_access+0x108>
   26996:	24a0      	movs	r4, #160	; 0xa0
   26998:	e790      	b.n	268bc <ble_svc_ans_access+0x108>
   2699a:	bf00      	nop
   2699c:	200038b8 	.word	0x200038b8
   269a0:	200038c4 	.word	0x200038c4
   269a4:	200038da 	.word	0x200038da
   269a8:	200038dc 	.word	0x200038dc
   269ac:	200038e8 	.word	0x200038e8
   269b0:	200038b4 	.word	0x200038b4

000269b4 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   269b4:	b510      	push	{r4, lr}
   269b6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   269b8:	4b1a      	ldr	r3, [pc, #104]	; (26a24 <ble_svc_ans_init+0x70>)
   269ba:	781b      	ldrb	r3, [r3, #0]
   269bc:	b173      	cbz	r3, 269dc <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   269be:	481a      	ldr	r0, [pc, #104]	; (26a28 <ble_svc_ans_init+0x74>)
   269c0:	f7fa fe7a 	bl	216b8 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   269c4:	b9a0      	cbnz	r0, 269f0 <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   269c6:	4818      	ldr	r0, [pc, #96]	; (26a28 <ble_svc_ans_init+0x74>)
   269c8:	f7fa fe52 	bl	21670 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   269cc:	b9e8      	cbnz	r0, 26a0a <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   269ce:	2300      	movs	r3, #0
   269d0:	4a16      	ldr	r2, [pc, #88]	; (26a2c <ble_svc_ans_init+0x78>)
   269d2:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   269d4:	4a16      	ldr	r2, [pc, #88]	; (26a30 <ble_svc_ans_init+0x7c>)
   269d6:	7013      	strb	r3, [r2, #0]
}
   269d8:	b002      	add	sp, #8
   269da:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   269dc:	f7e5 fbde 	bl	c19c <hal_debugger_connected>
   269e0:	b100      	cbz	r0, 269e4 <ble_svc_ans_init+0x30>
   269e2:	be01      	bkpt	0x0001
   269e4:	2300      	movs	r3, #0
   269e6:	461a      	mov	r2, r3
   269e8:	4619      	mov	r1, r3
   269ea:	4618      	mov	r0, r3
   269ec:	f7e6 f8da 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   269f0:	f7e5 fbd4 	bl	c19c <hal_debugger_connected>
   269f4:	b100      	cbz	r0, 269f8 <ble_svc_ans_init+0x44>
   269f6:	be01      	bkpt	0x0001
   269f8:	2000      	movs	r0, #0
   269fa:	9000      	str	r0, [sp, #0]
   269fc:	4b0d      	ldr	r3, [pc, #52]	; (26a34 <ble_svc_ans_init+0x80>)
   269fe:	681c      	ldr	r4, [r3, #0]
   26a00:	4603      	mov	r3, r0
   26a02:	4602      	mov	r2, r0
   26a04:	4601      	mov	r1, r0
   26a06:	47a0      	blx	r4
   26a08:	e7dd      	b.n	269c6 <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a0a:	f7e5 fbc7 	bl	c19c <hal_debugger_connected>
   26a0e:	b100      	cbz	r0, 26a12 <ble_svc_ans_init+0x5e>
   26a10:	be01      	bkpt	0x0001
   26a12:	2000      	movs	r0, #0
   26a14:	9000      	str	r0, [sp, #0]
   26a16:	4b07      	ldr	r3, [pc, #28]	; (26a34 <ble_svc_ans_init+0x80>)
   26a18:	681c      	ldr	r4, [r3, #0]
   26a1a:	4603      	mov	r3, r0
   26a1c:	4602      	mov	r2, r0
   26a1e:	4601      	mov	r1, r0
   26a20:	47a0      	blx	r4
   26a22:	e7d4      	b.n	269ce <ble_svc_ans_init+0x1a>
   26a24:	20001e3c 	.word	0x20001e3c
   26a28:	0002e680 	.word	0x0002e680
   26a2c:	200038b8 	.word	0x200038b8
   26a30:	200038dc 	.word	0x200038dc
   26a34:	2000028c 	.word	0x2000028c

00026a38 <ble_svc_dis_access>:
    (MYNEWT_VAL(BLE_SVC_DIS_MANUFACTURER_NAME_READ_PERM) >= 0) || \
    (MYNEWT_VAL(BLE_SVC_DIS_SYSTEM_ID_READ_PERM) >= 0)
static int
ble_svc_dis_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   26a38:	b538      	push	{r3, r4, r5, lr}
   26a3a:	4614      	mov	r4, r2
    uint16_t uuid    = ble_uuid_u16(ctxt->chr->uuid);
   26a3c:	6893      	ldr	r3, [r2, #8]
   26a3e:	6818      	ldr	r0, [r3, #0]
   26a40:	f7ff fd04 	bl	2644c <ble_uuid_u16>
    const char *info = NULL;

    switch(uuid) {
   26a44:	f642 2324 	movw	r3, #10788	; 0x2a24
   26a48:	4298      	cmp	r0, r3
   26a4a:	d008      	beq.n	26a5e <ble_svc_dis_access+0x26>
   26a4c:	f642 2326 	movw	r3, #10790	; 0x2a26
   26a50:	4298      	cmp	r0, r3
   26a52:	d109      	bne.n	26a68 <ble_svc_dis_access+0x30>
#endif
        break;
#endif
#if (MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0)
    case BLE_SVC_DIS_CHR_UUID16_FIRMWARE_REVISION:
        info = ble_svc_dis_data.firmware_revision;
   26a54:	4b0f      	ldr	r3, [pc, #60]	; (26a94 <ble_svc_dis_access+0x5c>)
   26a56:	689d      	ldr	r5, [r3, #8]
#ifdef MYNEWT_VAL_BLE_SVC_DIS_FIRMWARE_REVISION_DEFAULT
        if (info == NULL) {
   26a58:	b91d      	cbnz	r5, 26a62 <ble_svc_dis_access+0x2a>
    if (info != NULL) {
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    }

    return 0;
   26a5a:	2000      	movs	r0, #0
   26a5c:	e003      	b.n	26a66 <ble_svc_dis_access+0x2e>
        info = ble_svc_dis_data.model_number;
   26a5e:	4b0d      	ldr	r3, [pc, #52]	; (26a94 <ble_svc_dis_access+0x5c>)
   26a60:	681d      	ldr	r5, [r3, #0]
    if (info != NULL) {
   26a62:	b95d      	cbnz	r5, 26a7c <ble_svc_dis_access+0x44>
    return 0;
   26a64:	2000      	movs	r0, #0
}
   26a66:	bd38      	pop	{r3, r4, r5, pc}
        assert(0);
   26a68:	f7e5 fb98 	bl	c19c <hal_debugger_connected>
   26a6c:	b100      	cbz	r0, 26a70 <ble_svc_dis_access+0x38>
   26a6e:	be01      	bkpt	0x0001
   26a70:	2300      	movs	r3, #0
   26a72:	461a      	mov	r2, r3
   26a74:	4619      	mov	r1, r3
   26a76:	4618      	mov	r0, r3
   26a78:	f7e6 f894 	bl	cba4 <__assert_func>
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
   26a7c:	4628      	mov	r0, r5
   26a7e:	f7e7 ffe8 	bl	ea52 <strlen>
   26a82:	b282      	uxth	r2, r0
   26a84:	4629      	mov	r1, r5
   26a86:	6860      	ldr	r0, [r4, #4]
   26a88:	f7e6 fd0d 	bl	d4a6 <os_mbuf_append>
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26a8c:	2800      	cmp	r0, #0
   26a8e:	d0ea      	beq.n	26a66 <ble_svc_dis_access+0x2e>
   26a90:	2011      	movs	r0, #17
   26a92:	e7e8      	b.n	26a66 <ble_svc_dis_access+0x2e>
   26a94:	200003fc 	.word	0x200003fc

00026a98 <ble_svc_dis_firmware_revision_set>:
}

int
ble_svc_dis_firmware_revision_set(const char *value)
{
    ble_svc_dis_data.firmware_revision = value;
   26a98:	4b01      	ldr	r3, [pc, #4]	; (26aa0 <ble_svc_dis_firmware_revision_set+0x8>)
   26a9a:	6098      	str	r0, [r3, #8]
    return 0;
}
   26a9c:	2000      	movs	r0, #0
   26a9e:	4770      	bx	lr
   26aa0:	200003fc 	.word	0x200003fc

00026aa4 <ble_svc_dis_init>:
/**
 * Initialize the DIS package.
 */
void
ble_svc_dis_init(void)
{
   26aa4:	b510      	push	{r4, lr}
   26aa6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26aa8:	4b18      	ldr	r3, [pc, #96]	; (26b0c <ble_svc_dis_init+0x68>)
   26aaa:	781b      	ldrb	r3, [r3, #0]
   26aac:	b14b      	cbz	r3, 26ac2 <ble_svc_dis_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_dis_defs);
   26aae:	4818      	ldr	r0, [pc, #96]	; (26b10 <ble_svc_dis_init+0x6c>)
   26ab0:	f7fa fe02 	bl	216b8 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26ab4:	b978      	cbnz	r0, 26ad6 <ble_svc_dis_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_dis_defs);
   26ab6:	4816      	ldr	r0, [pc, #88]	; (26b10 <ble_svc_dis_init+0x6c>)
   26ab8:	f7fa fdda 	bl	21670 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26abc:	b9c0      	cbnz	r0, 26af0 <ble_svc_dis_init+0x4c>
}
   26abe:	b002      	add	sp, #8
   26ac0:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26ac2:	f7e5 fb6b 	bl	c19c <hal_debugger_connected>
   26ac6:	b100      	cbz	r0, 26aca <ble_svc_dis_init+0x26>
   26ac8:	be01      	bkpt	0x0001
   26aca:	2300      	movs	r3, #0
   26acc:	461a      	mov	r2, r3
   26ace:	4619      	mov	r1, r3
   26ad0:	4618      	mov	r0, r3
   26ad2:	f7e6 f867 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26ad6:	f7e5 fb61 	bl	c19c <hal_debugger_connected>
   26ada:	b100      	cbz	r0, 26ade <ble_svc_dis_init+0x3a>
   26adc:	be01      	bkpt	0x0001
   26ade:	2000      	movs	r0, #0
   26ae0:	9000      	str	r0, [sp, #0]
   26ae2:	4b0c      	ldr	r3, [pc, #48]	; (26b14 <ble_svc_dis_init+0x70>)
   26ae4:	681c      	ldr	r4, [r3, #0]
   26ae6:	4603      	mov	r3, r0
   26ae8:	4602      	mov	r2, r0
   26aea:	4601      	mov	r1, r0
   26aec:	47a0      	blx	r4
   26aee:	e7e2      	b.n	26ab6 <ble_svc_dis_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26af0:	f7e5 fb54 	bl	c19c <hal_debugger_connected>
   26af4:	b100      	cbz	r0, 26af8 <ble_svc_dis_init+0x54>
   26af6:	be01      	bkpt	0x0001
   26af8:	2000      	movs	r0, #0
   26afa:	9000      	str	r0, [sp, #0]
   26afc:	4b05      	ldr	r3, [pc, #20]	; (26b14 <ble_svc_dis_init+0x70>)
   26afe:	681c      	ldr	r4, [r3, #0]
   26b00:	4603      	mov	r3, r0
   26b02:	4602      	mov	r2, r0
   26b04:	4601      	mov	r1, r0
   26b06:	47a0      	blx	r4
}
   26b08:	e7d9      	b.n	26abe <ble_svc_dis_init+0x1a>
   26b0a:	bf00      	nop
   26b0c:	20001e3c 	.word	0x20001e3c
   26b10:	0002e6b8 	.word	0x0002e6b8
   26b14:	2000028c 	.word	0x2000028c

00026b18 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   26b18:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   26b1a:	f7e5 fb3f 	bl	c19c <hal_debugger_connected>
   26b1e:	b100      	cbz	r0, 26b22 <ble_svc_gap_device_name_write_access+0xa>
   26b20:	be01      	bkpt	0x0001
   26b22:	2300      	movs	r3, #0
   26b24:	461a      	mov	r2, r3
   26b26:	4619      	mov	r1, r3
   26b28:	4618      	mov	r0, r3
   26b2a:	f7e6 f83b 	bl	cba4 <__assert_func>

00026b2e <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   26b2e:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   26b30:	f7e5 fb34 	bl	c19c <hal_debugger_connected>
   26b34:	b100      	cbz	r0, 26b38 <ble_svc_gap_appearance_write_access+0xa>
   26b36:	be01      	bkpt	0x0001
   26b38:	2300      	movs	r3, #0
   26b3a:	461a      	mov	r2, r3
   26b3c:	4619      	mov	r1, r3
   26b3e:	4618      	mov	r0, r3
   26b40:	f7e6 f830 	bl	cba4 <__assert_func>

00026b44 <ble_svc_gap_device_name_read_access>:
{
   26b44:	b538      	push	{r3, r4, r5, lr}
   26b46:	4604      	mov	r4, r0
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   26b48:	4d06      	ldr	r5, [pc, #24]	; (26b64 <ble_svc_gap_device_name_read_access+0x20>)
   26b4a:	4628      	mov	r0, r5
   26b4c:	f7e7 ff81 	bl	ea52 <strlen>
   26b50:	b282      	uxth	r2, r0
   26b52:	4629      	mov	r1, r5
   26b54:	6860      	ldr	r0, [r4, #4]
   26b56:	f7e6 fca6 	bl	d4a6 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26b5a:	b900      	cbnz	r0, 26b5e <ble_svc_gap_device_name_read_access+0x1a>
}
   26b5c:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26b5e:	2011      	movs	r0, #17
   26b60:	e7fc      	b.n	26b5c <ble_svc_gap_device_name_read_access+0x18>
   26b62:	bf00      	nop
   26b64:	2000046c 	.word	0x2000046c

00026b68 <ble_svc_gap_appearance_read_access>:
{
   26b68:	b500      	push	{lr}
   26b6a:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   26b6c:	4b07      	ldr	r3, [pc, #28]	; (26b8c <ble_svc_gap_appearance_read_access+0x24>)
   26b6e:	881b      	ldrh	r3, [r3, #0]
   26b70:	f8ad 3006 	strh.w	r3, [sp, #6]
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   26b74:	2202      	movs	r2, #2
   26b76:	f10d 0106 	add.w	r1, sp, #6
   26b7a:	6840      	ldr	r0, [r0, #4]
   26b7c:	f7e6 fc93 	bl	d4a6 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26b80:	b910      	cbnz	r0, 26b88 <ble_svc_gap_appearance_read_access+0x20>
}
   26b82:	b003      	add	sp, #12
   26b84:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26b88:	2011      	movs	r0, #17
   26b8a:	e7fa      	b.n	26b82 <ble_svc_gap_appearance_read_access+0x1a>
   26b8c:	200038ec 	.word	0x200038ec

00026b90 <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   26b90:	b510      	push	{r4, lr}
   26b92:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   26b94:	6893      	ldr	r3, [r2, #8]
   26b96:	6818      	ldr	r0, [r3, #0]
   26b98:	f7ff fc58 	bl	2644c <ble_uuid_u16>
    assert(uuid16 != 0);
   26b9c:	b1a0      	cbz	r0, 26bc8 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   26b9e:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   26ba2:	d01b      	beq.n	26bdc <ble_svc_gap_access+0x4c>
   26ba4:	f642 2201 	movw	r2, #10753	; 0x2a01
   26ba8:	4290      	cmp	r0, r2
   26baa:	d133      	bne.n	26c14 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   26bac:	7823      	ldrb	r3, [r4, #0]
   26bae:	b353      	cbz	r3, 26c06 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26bb0:	2b01      	cmp	r3, #1
   26bb2:	d02c      	beq.n	26c0e <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   26bb4:	f7e5 faf2 	bl	c19c <hal_debugger_connected>
   26bb8:	b100      	cbz	r0, 26bbc <ble_svc_gap_access+0x2c>
   26bba:	be01      	bkpt	0x0001
   26bbc:	2300      	movs	r3, #0
   26bbe:	461a      	mov	r2, r3
   26bc0:	4619      	mov	r1, r3
   26bc2:	4618      	mov	r0, r3
   26bc4:	f7e5 ffee 	bl	cba4 <__assert_func>
    assert(uuid16 != 0);
   26bc8:	f7e5 fae8 	bl	c19c <hal_debugger_connected>
   26bcc:	b100      	cbz	r0, 26bd0 <ble_svc_gap_access+0x40>
   26bce:	be01      	bkpt	0x0001
   26bd0:	2300      	movs	r3, #0
   26bd2:	461a      	mov	r2, r3
   26bd4:	4619      	mov	r1, r3
   26bd6:	4618      	mov	r0, r3
   26bd8:	f7e5 ffe4 	bl	cba4 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   26bdc:	7823      	ldrb	r3, [r4, #0]
   26bde:	b15b      	cbz	r3, 26bf8 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26be0:	2b01      	cmp	r3, #1
   26be2:	d00d      	beq.n	26c00 <ble_svc_gap_access+0x70>
            assert(0);
   26be4:	f7e5 fada 	bl	c19c <hal_debugger_connected>
   26be8:	b100      	cbz	r0, 26bec <ble_svc_gap_access+0x5c>
   26bea:	be01      	bkpt	0x0001
   26bec:	2300      	movs	r3, #0
   26bee:	461a      	mov	r2, r3
   26bf0:	4619      	mov	r1, r3
   26bf2:	4618      	mov	r0, r3
   26bf4:	f7e5 ffd6 	bl	cba4 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   26bf8:	4620      	mov	r0, r4
   26bfa:	f7ff ffa3 	bl	26b44 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   26bfe:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   26c00:	4620      	mov	r0, r4
   26c02:	f7ff ff89 	bl	26b18 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   26c06:	4620      	mov	r0, r4
   26c08:	f7ff ffae 	bl	26b68 <ble_svc_gap_appearance_read_access>
        return rc;
   26c0c:	e7f7      	b.n	26bfe <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   26c0e:	4620      	mov	r0, r4
   26c10:	f7ff ff8d 	bl	26b2e <ble_svc_gap_appearance_write_access>
        assert(0);
   26c14:	f7e5 fac2 	bl	c19c <hal_debugger_connected>
   26c18:	b100      	cbz	r0, 26c1c <ble_svc_gap_access+0x8c>
   26c1a:	be01      	bkpt	0x0001
   26c1c:	2300      	movs	r3, #0
   26c1e:	461a      	mov	r2, r3
   26c20:	4619      	mov	r1, r3
   26c22:	4618      	mov	r0, r3
   26c24:	f7e5 ffbe 	bl	cba4 <__assert_func>

00026c28 <ble_svc_gap_device_name>:

const char *
ble_svc_gap_device_name(void)
{
    return ble_svc_gap_name;
}
   26c28:	4800      	ldr	r0, [pc, #0]	; (26c2c <ble_svc_gap_device_name+0x4>)
   26c2a:	4770      	bx	lr
   26c2c:	2000046c 	.word	0x2000046c

00026c30 <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   26c30:	b510      	push	{r4, lr}
   26c32:	b082      	sub	sp, #8
#if NIMBLE_BLE_CONNECT
    int rc;
#endif

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26c34:	4b18      	ldr	r3, [pc, #96]	; (26c98 <ble_svc_gap_init+0x68>)
   26c36:	781b      	ldrb	r3, [r3, #0]
   26c38:	b14b      	cbz	r3, 26c4e <ble_svc_gap_init+0x1e>

#if NIMBLE_BLE_CONNECT
    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   26c3a:	4818      	ldr	r0, [pc, #96]	; (26c9c <ble_svc_gap_init+0x6c>)
   26c3c:	f7fa fd3c 	bl	216b8 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26c40:	b978      	cbnz	r0, 26c62 <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   26c42:	4816      	ldr	r0, [pc, #88]	; (26c9c <ble_svc_gap_init+0x6c>)
   26c44:	f7fa fd14 	bl	21670 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26c48:	b9c0      	cbnz	r0, 26c7c <ble_svc_gap_init+0x4c>
#endif
}
   26c4a:	b002      	add	sp, #8
   26c4c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26c4e:	f7e5 faa5 	bl	c19c <hal_debugger_connected>
   26c52:	b100      	cbz	r0, 26c56 <ble_svc_gap_init+0x26>
   26c54:	be01      	bkpt	0x0001
   26c56:	2300      	movs	r3, #0
   26c58:	461a      	mov	r2, r3
   26c5a:	4619      	mov	r1, r3
   26c5c:	4618      	mov	r0, r3
   26c5e:	f7e5 ffa1 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26c62:	f7e5 fa9b 	bl	c19c <hal_debugger_connected>
   26c66:	b100      	cbz	r0, 26c6a <ble_svc_gap_init+0x3a>
   26c68:	be01      	bkpt	0x0001
   26c6a:	2000      	movs	r0, #0
   26c6c:	9000      	str	r0, [sp, #0]
   26c6e:	4b0c      	ldr	r3, [pc, #48]	; (26ca0 <ble_svc_gap_init+0x70>)
   26c70:	681c      	ldr	r4, [r3, #0]
   26c72:	4603      	mov	r3, r0
   26c74:	4602      	mov	r2, r0
   26c76:	4601      	mov	r1, r0
   26c78:	47a0      	blx	r4
   26c7a:	e7e2      	b.n	26c42 <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26c7c:	f7e5 fa8e 	bl	c19c <hal_debugger_connected>
   26c80:	b100      	cbz	r0, 26c84 <ble_svc_gap_init+0x54>
   26c82:	be01      	bkpt	0x0001
   26c84:	2000      	movs	r0, #0
   26c86:	9000      	str	r0, [sp, #0]
   26c88:	4b05      	ldr	r3, [pc, #20]	; (26ca0 <ble_svc_gap_init+0x70>)
   26c8a:	681c      	ldr	r4, [r3, #0]
   26c8c:	4603      	mov	r3, r0
   26c8e:	4602      	mov	r2, r0
   26c90:	4601      	mov	r1, r0
   26c92:	47a0      	blx	r4
}
   26c94:	e7d9      	b.n	26c4a <ble_svc_gap_init+0x1a>
   26c96:	bf00      	nop
   26c98:	20001e3c 	.word	0x20001e3c
   26c9c:	0002e6d8 	.word	0x0002e6d8
   26ca0:	2000028c 	.word	0x2000028c

00026ca4 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   26ca4:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26ca6:	7813      	ldrb	r3, [r2, #0]
   26ca8:	b9a3      	cbnz	r3, 26cd4 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   26caa:	6891      	ldr	r1, [r2, #8]
   26cac:	4b14      	ldr	r3, [pc, #80]	; (26d00 <ble_svc_gatt_access+0x5c>)
   26cae:	4299      	cmp	r1, r3
   26cb0:	d11a      	bne.n	26ce8 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   26cb2:	2104      	movs	r1, #4
   26cb4:	6850      	ldr	r0, [r2, #4]
   26cb6:	f7e6 fe0a 	bl	d8ce <os_mbuf_extend>
    if (u8p == NULL) {
   26cba:	4604      	mov	r4, r0
   26cbc:	b1f0      	cbz	r0, 26cfc <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   26cbe:	4b11      	ldr	r3, [pc, #68]	; (26d04 <ble_svc_gatt_access+0x60>)
   26cc0:	8819      	ldrh	r1, [r3, #0]
   26cc2:	f003 ff69 	bl	2ab98 <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   26cc6:	4b10      	ldr	r3, [pc, #64]	; (26d08 <ble_svc_gatt_access+0x64>)
   26cc8:	8819      	ldrh	r1, [r3, #0]
   26cca:	1ca0      	adds	r0, r4, #2
   26ccc:	f003 ff64 	bl	2ab98 <put_le16>

    return 0;
   26cd0:	2000      	movs	r0, #0
}
   26cd2:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26cd4:	f7e5 fa62 	bl	c19c <hal_debugger_connected>
   26cd8:	b100      	cbz	r0, 26cdc <ble_svc_gatt_access+0x38>
   26cda:	be01      	bkpt	0x0001
   26cdc:	2300      	movs	r3, #0
   26cde:	461a      	mov	r2, r3
   26ce0:	4619      	mov	r1, r3
   26ce2:	4618      	mov	r0, r3
   26ce4:	f7e5 ff5e 	bl	cba4 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   26ce8:	f7e5 fa58 	bl	c19c <hal_debugger_connected>
   26cec:	b100      	cbz	r0, 26cf0 <ble_svc_gatt_access+0x4c>
   26cee:	be01      	bkpt	0x0001
   26cf0:	2300      	movs	r3, #0
   26cf2:	461a      	mov	r2, r3
   26cf4:	4619      	mov	r1, r3
   26cf6:	4618      	mov	r0, r3
   26cf8:	f7e5 ff54 	bl	cba4 <__assert_func>
        return BLE_HS_ENOMEM;
   26cfc:	2006      	movs	r0, #6
   26cfe:	e7e8      	b.n	26cd2 <ble_svc_gatt_access+0x2e>
   26d00:	20000494 	.word	0x20000494
   26d04:	200038f2 	.word	0x200038f2
   26d08:	200038f0 	.word	0x200038f0

00026d0c <ble_svc_gatt_init>:
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
}

void
ble_svc_gatt_init(void)
{
   26d0c:	b510      	push	{r4, lr}
   26d0e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26d10:	4b18      	ldr	r3, [pc, #96]	; (26d74 <ble_svc_gatt_init+0x68>)
   26d12:	781b      	ldrb	r3, [r3, #0]
   26d14:	b14b      	cbz	r3, 26d2a <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   26d16:	4818      	ldr	r0, [pc, #96]	; (26d78 <ble_svc_gatt_init+0x6c>)
   26d18:	f7fa fcce 	bl	216b8 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26d1c:	b978      	cbnz	r0, 26d3e <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   26d1e:	4816      	ldr	r0, [pc, #88]	; (26d78 <ble_svc_gatt_init+0x6c>)
   26d20:	f7fa fca6 	bl	21670 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26d24:	b9c0      	cbnz	r0, 26d58 <ble_svc_gatt_init+0x4c>
}
   26d26:	b002      	add	sp, #8
   26d28:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26d2a:	f7e5 fa37 	bl	c19c <hal_debugger_connected>
   26d2e:	b100      	cbz	r0, 26d32 <ble_svc_gatt_init+0x26>
   26d30:	be01      	bkpt	0x0001
   26d32:	2300      	movs	r3, #0
   26d34:	461a      	mov	r2, r3
   26d36:	4619      	mov	r1, r3
   26d38:	4618      	mov	r0, r3
   26d3a:	f7e5 ff33 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26d3e:	f7e5 fa2d 	bl	c19c <hal_debugger_connected>
   26d42:	b100      	cbz	r0, 26d46 <ble_svc_gatt_init+0x3a>
   26d44:	be01      	bkpt	0x0001
   26d46:	2000      	movs	r0, #0
   26d48:	9000      	str	r0, [sp, #0]
   26d4a:	4b0c      	ldr	r3, [pc, #48]	; (26d7c <ble_svc_gatt_init+0x70>)
   26d4c:	681c      	ldr	r4, [r3, #0]
   26d4e:	4603      	mov	r3, r0
   26d50:	4602      	mov	r2, r0
   26d52:	4601      	mov	r1, r0
   26d54:	47a0      	blx	r4
   26d56:	e7e2      	b.n	26d1e <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26d58:	f7e5 fa20 	bl	c19c <hal_debugger_connected>
   26d5c:	b100      	cbz	r0, 26d60 <ble_svc_gatt_init+0x54>
   26d5e:	be01      	bkpt	0x0001
   26d60:	2000      	movs	r0, #0
   26d62:	9000      	str	r0, [sp, #0]
   26d64:	4b05      	ldr	r3, [pc, #20]	; (26d7c <ble_svc_gatt_init+0x70>)
   26d66:	681c      	ldr	r4, [r3, #0]
   26d68:	4603      	mov	r3, r0
   26d6a:	4602      	mov	r2, r0
   26d6c:	4601      	mov	r1, r0
   26d6e:	47a0      	blx	r4
}
   26d70:	e7d9      	b.n	26d26 <ble_svc_gatt_init+0x1a>
   26d72:	bf00      	nop
   26d74:	20001e3c 	.word	0x20001e3c
   26d78:	0002e6f8 	.word	0x0002e6f8
   26d7c:	2000028c 	.word	0x2000028c

00026d80 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   26d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d84:	b083      	sub	sp, #12
   26d86:	4605      	mov	r5, r0
   26d88:	460f      	mov	r7, r1
   26d8a:	4690      	mov	r8, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   26d8c:	2400      	movs	r4, #0
    skipped = 0;
   26d8e:	46a1      	mov	r9, r4
    for (i = 0; i < num_value_secs; i++) {
   26d90:	e004      	b.n	26d9c <ble_store_config_find_sec+0x1c>
        return type_diff;
   26d92:	4650      	mov	r0, sl
   26d94:	e019      	b.n	26dca <ble_store_config_find_sec+0x4a>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   26d96:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < num_value_secs; i++) {
   26d9a:	3401      	adds	r4, #1
   26d9c:	4544      	cmp	r4, r8
   26d9e:	da38      	bge.n	26e12 <ble_store_config_find_sec+0x92>
        cur = value_secs + i;
   26da0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   26da4:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   26da8:	eb07 1606 	add.w	r6, r7, r6, lsl #4
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   26dac:	2300      	movs	r3, #0
   26dae:	9300      	str	r3, [sp, #0]
   26db0:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26db4:	f895 a000 	ldrb.w	sl, [r5]
    if (type_diff != 0) {
   26db8:	f1ba 0f00 	cmp.w	sl, #0
   26dbc:	d1e9      	bne.n	26d92 <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   26dbe:	2206      	movs	r2, #6
   26dc0:	f10d 0101 	add.w	r1, sp, #1
   26dc4:	1c68      	adds	r0, r5, #1
   26dc6:	f7e7 fdd3 	bl	e970 <memcmp>
   26dca:	b158      	cbz	r0, 26de4 <ble_store_config_find_sec+0x64>
    type_diff = a->type - b->type;
   26dcc:	f817 000b 	ldrb.w	r0, [r7, fp]
    if (type_diff != 0) {
   26dd0:	ebb0 000a 	subs.w	r0, r0, sl
   26dd4:	d104      	bne.n	26de0 <ble_store_config_find_sec+0x60>
    return memcmp(a->val, b->val, sizeof(a->val));
   26dd6:	2206      	movs	r2, #6
   26dd8:	1c69      	adds	r1, r5, #1
   26dda:	1c70      	adds	r0, r6, #1
   26ddc:	f7e7 fdc8 	bl	e970 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   26de0:	2800      	cmp	r0, #0
   26de2:	d1da      	bne.n	26d9a <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   26de4:	7e2b      	ldrb	r3, [r5, #24]
   26de6:	f013 0f01 	tst.w	r3, #1
   26dea:	d00b      	beq.n	26e04 <ble_store_config_find_sec+0x84>
            if (cur->ediv != key_sec->ediv) {
   26dec:	8932      	ldrh	r2, [r6, #8]
   26dee:	892b      	ldrh	r3, [r5, #8]
   26df0:	429a      	cmp	r2, r3
   26df2:	d1d2      	bne.n	26d9a <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   26df4:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   26df8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   26dfc:	4299      	cmp	r1, r3
   26dfe:	bf08      	it	eq
   26e00:	4290      	cmpeq	r0, r2
   26e02:	d1ca      	bne.n	26d9a <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   26e04:	7e6b      	ldrb	r3, [r5, #25]
   26e06:	454b      	cmp	r3, r9
   26e08:	dcc5      	bgt.n	26d96 <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   26e0a:	4620      	mov	r0, r4
   26e0c:	b003      	add	sp, #12
   26e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   26e12:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26e16:	e7f8      	b.n	26e0a <ble_store_config_find_sec+0x8a>

00026e18 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   26e18:	b510      	push	{r4, lr}
   26e1a:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   26e1c:	4b0a      	ldr	r3, [pc, #40]	; (26e48 <ble_store_config_read_peer_sec+0x30>)
   26e1e:	681a      	ldr	r2, [r3, #0]
   26e20:	490a      	ldr	r1, [pc, #40]	; (26e4c <ble_store_config_read_peer_sec+0x34>)
   26e22:	f7ff ffad 	bl	26d80 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   26e26:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e2a:	d00a      	beq.n	26e42 <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   26e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26e30:	2250      	movs	r2, #80	; 0x50
   26e32:	4906      	ldr	r1, [pc, #24]	; (26e4c <ble_store_config_read_peer_sec+0x34>)
   26e34:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   26e38:	4620      	mov	r0, r4
   26e3a:	f7e7 fdbd 	bl	e9b8 <memcpy>
    return 0;
   26e3e:	2000      	movs	r0, #0
}
   26e40:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26e42:	2005      	movs	r0, #5
   26e44:	e7fc      	b.n	26e40 <ble_store_config_read_peer_sec+0x28>
   26e46:	bf00      	nop
   26e48:	2000397c 	.word	0x2000397c
   26e4c:	20003a70 	.word	0x20003a70

00026e50 <ble_store_config_read_our_sec>:
{
   26e50:	b510      	push	{r4, lr}
   26e52:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   26e54:	4b0a      	ldr	r3, [pc, #40]	; (26e80 <ble_store_config_read_our_sec+0x30>)
   26e56:	681a      	ldr	r2, [r3, #0]
   26e58:	490a      	ldr	r1, [pc, #40]	; (26e84 <ble_store_config_read_our_sec+0x34>)
   26e5a:	f7ff ff91 	bl	26d80 <ble_store_config_find_sec>
    if (idx == -1) {
   26e5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e62:	d00a      	beq.n	26e7a <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   26e64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26e68:	2250      	movs	r2, #80	; 0x50
   26e6a:	4906      	ldr	r1, [pc, #24]	; (26e84 <ble_store_config_read_our_sec+0x34>)
   26e6c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   26e70:	4620      	mov	r0, r4
   26e72:	f7e7 fda1 	bl	e9b8 <memcpy>
    return 0;
   26e76:	2000      	movs	r0, #0
}
   26e78:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26e7a:	2005      	movs	r0, #5
   26e7c:	e7fc      	b.n	26e78 <ble_store_config_read_our_sec+0x28>
   26e7e:	bf00      	nop
   26e80:	20003978 	.word	0x20003978
   26e84:	20003980 	.word	0x20003980

00026e88 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   26e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26e8c:	b082      	sub	sp, #8
   26e8e:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26e90:	2400      	movs	r4, #0
    skipped = 0;
   26e92:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26e94:	e004      	b.n	26ea0 <ble_store_config_find_cccd+0x18>
        return type_diff;
   26e96:	4630      	mov	r0, r6
   26e98:	e019      	b.n	26ece <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   26e9a:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26e9e:	3401      	adds	r4, #1
   26ea0:	4b18      	ldr	r3, [pc, #96]	; (26f04 <ble_store_config_find_cccd+0x7c>)
   26ea2:	681b      	ldr	r3, [r3, #0]
   26ea4:	42a3      	cmp	r3, r4
   26ea6:	dd2a      	ble.n	26efe <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   26ea8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   26eac:	f8df 9058 	ldr.w	r9, [pc, #88]	; 26f08 <ble_store_config_find_cccd+0x80>
   26eb0:	eb09 1704 	add.w	r7, r9, r4, lsl #4
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   26eb4:	2300      	movs	r3, #0
   26eb6:	9300      	str	r3, [sp, #0]
   26eb8:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26ebc:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   26ebe:	2e00      	cmp	r6, #0
   26ec0:	d1e9      	bne.n	26e96 <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   26ec2:	2206      	movs	r2, #6
   26ec4:	f10d 0101 	add.w	r1, sp, #1
   26ec8:	1c68      	adds	r0, r5, #1
   26eca:	f7e7 fd51 	bl	e970 <memcmp>
   26ece:	b150      	cbz	r0, 26ee6 <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   26ed0:	f819 000a 	ldrb.w	r0, [r9, sl]
    if (type_diff != 0) {
   26ed4:	1b80      	subs	r0, r0, r6
   26ed6:	d104      	bne.n	26ee2 <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   26ed8:	2206      	movs	r2, #6
   26eda:	1c69      	adds	r1, r5, #1
   26edc:	1c78      	adds	r0, r7, #1
   26ede:	f7e7 fd47 	bl	e970 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   26ee2:	2800      	cmp	r0, #0
   26ee4:	d1db      	bne.n	26e9e <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   26ee6:	892b      	ldrh	r3, [r5, #8]
   26ee8:	b113      	cbz	r3, 26ef0 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   26eea:	893a      	ldrh	r2, [r7, #8]
   26eec:	4293      	cmp	r3, r2
   26eee:	d1d6      	bne.n	26e9e <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   26ef0:	7aab      	ldrb	r3, [r5, #10]
   26ef2:	4543      	cmp	r3, r8
   26ef4:	dcd1      	bgt.n	26e9a <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   26ef6:	4620      	mov	r0, r4
   26ef8:	b002      	add	sp, #8
   26efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   26efe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26f02:	e7f8      	b.n	26ef6 <ble_store_config_find_cccd+0x6e>
   26f04:	20003974 	.word	0x20003974
   26f08:	200038f4 	.word	0x200038f4

00026f0c <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   26f0c:	b510      	push	{r4, lr}
   26f0e:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   26f10:	f7ff ffba 	bl	26e88 <ble_store_config_find_cccd>
    if (idx == -1) {
   26f14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f18:	d007      	beq.n	26f2a <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   26f1a:	4b05      	ldr	r3, [pc, #20]	; (26f30 <ble_store_config_read_cccd+0x24>)
   26f1c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   26f20:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   26f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   26f26:	2000      	movs	r0, #0
}
   26f28:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26f2a:	2005      	movs	r0, #5
   26f2c:	e7fc      	b.n	26f28 <ble_store_config_read_cccd+0x1c>
   26f2e:	bf00      	nop
   26f30:	200038f4 	.word	0x200038f4

00026f34 <ble_store_config_print_key_sec>:
{
   26f34:	b510      	push	{r4, lr}
   26f36:	b082      	sub	sp, #8
   26f38:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   26f3a:	2300      	movs	r3, #0
   26f3c:	9300      	str	r3, [sp, #0]
   26f3e:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26f42:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   26f44:	b928      	cbnz	r0, 26f52 <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   26f46:	2206      	movs	r2, #6
   26f48:	f10d 0101 	add.w	r1, sp, #1
   26f4c:	1c60      	adds	r0, r4, #1
   26f4e:	f7e7 fd0f 	bl	e970 <memcmp>
   26f52:	b908      	cbnz	r0, 26f58 <ble_store_config_print_key_sec+0x24>
}
   26f54:	b002      	add	sp, #8
   26f56:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   26f58:	2106      	movs	r1, #6
   26f5a:	1c60      	adds	r0, r4, #1
   26f5c:	f7fc fa46 	bl	233ec <ble_hs_log_flat_buf>
}
   26f60:	e7f8      	b.n	26f54 <ble_store_config_print_key_sec+0x20>

00026f62 <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   26f62:	b538      	push	{r3, r4, r5, lr}
   26f64:	460c      	mov	r4, r1
   26f66:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   26f68:	2802      	cmp	r0, #2
   26f6a:	d005      	beq.n	26f78 <ble_store_config_read+0x16>
   26f6c:	2803      	cmp	r0, #3
   26f6e:	d013      	beq.n	26f98 <ble_store_config_read+0x36>
   26f70:	2801      	cmp	r0, #1
   26f72:	d009      	beq.n	26f88 <ble_store_config_read+0x26>
   26f74:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   26f76:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   26f78:	4608      	mov	r0, r1
   26f7a:	f7ff ffdb 	bl	26f34 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   26f7e:	4629      	mov	r1, r5
   26f80:	4620      	mov	r0, r4
   26f82:	f7ff ff49 	bl	26e18 <ble_store_config_read_peer_sec>
        return rc;
   26f86:	e7f6      	b.n	26f76 <ble_store_config_read+0x14>
        ble_store_config_print_key_sec(&key->sec);
   26f88:	4608      	mov	r0, r1
   26f8a:	f7ff ffd3 	bl	26f34 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   26f8e:	4629      	mov	r1, r5
   26f90:	4620      	mov	r0, r4
   26f92:	f7ff ff5d 	bl	26e50 <ble_store_config_read_our_sec>
        return rc;
   26f96:	e7ee      	b.n	26f76 <ble_store_config_read+0x14>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   26f98:	4611      	mov	r1, r2
   26f9a:	4620      	mov	r0, r4
   26f9c:	f7ff ffb6 	bl	26f0c <ble_store_config_read_cccd>
        return rc;
   26fa0:	e7e9      	b.n	26f76 <ble_store_config_read+0x14>

00026fa2 <ble_store_config_print_value_sec>:
{
   26fa2:	b510      	push	{r4, lr}
   26fa4:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   26fa6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   26faa:	f013 0f01 	tst.w	r3, #1
   26fae:	d10a      	bne.n	26fc6 <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   26fb0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   26fb4:	f013 0f01 	tst.w	r3, #1
   26fb8:	d10a      	bne.n	26fd0 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   26fba:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   26fbe:	f013 0f01 	tst.w	r3, #1
   26fc2:	d10b      	bne.n	26fdc <ble_store_config_print_value_sec+0x3a>
}
   26fc4:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   26fc6:	2110      	movs	r1, #16
   26fc8:	3018      	adds	r0, #24
   26fca:	f7fc fa0f 	bl	233ec <ble_hs_log_flat_buf>
   26fce:	e7ef      	b.n	26fb0 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   26fd0:	2110      	movs	r1, #16
   26fd2:	f104 0029 	add.w	r0, r4, #41	; 0x29
   26fd6:	f7fc fa09 	bl	233ec <ble_hs_log_flat_buf>
   26fda:	e7ee      	b.n	26fba <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   26fdc:	2110      	movs	r1, #16
   26fde:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   26fe2:	f7fc fa03 	bl	233ec <ble_hs_log_flat_buf>
}
   26fe6:	e7ed      	b.n	26fc4 <ble_store_config_print_value_sec+0x22>

00026fe8 <ble_store_config_write_peer_sec>:
{
   26fe8:	b530      	push	{r4, r5, lr}
   26fea:	b089      	sub	sp, #36	; 0x24
   26fec:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   26fee:	f7ff ffd8 	bl	26fa2 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   26ff2:	4621      	mov	r1, r4
   26ff4:	4668      	mov	r0, sp
   26ff6:	f7ff f899 	bl	2612c <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   26ffa:	4b0f      	ldr	r3, [pc, #60]	; (27038 <ble_store_config_write_peer_sec+0x50>)
   26ffc:	681d      	ldr	r5, [r3, #0]
   26ffe:	462a      	mov	r2, r5
   27000:	490e      	ldr	r1, [pc, #56]	; (2703c <ble_store_config_write_peer_sec+0x54>)
   27002:	4668      	mov	r0, sp
   27004:	f7ff febc 	bl	26d80 <ble_store_config_find_sec>
    if (idx == -1) {
   27008:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2700c:	d00b      	beq.n	27026 <ble_store_config_write_peer_sec+0x3e>
    ble_store_config_peer_secs[idx] = *value_sec;
   2700e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   27012:	2250      	movs	r2, #80	; 0x50
   27014:	4621      	mov	r1, r4
   27016:	4b09      	ldr	r3, [pc, #36]	; (2703c <ble_store_config_write_peer_sec+0x54>)
   27018:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2701c:	f7e7 fccc 	bl	e9b8 <memcpy>
    return 0;
   27020:	2000      	movs	r0, #0
}
   27022:	b009      	add	sp, #36	; 0x24
   27024:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   27026:	2d02      	cmp	r5, #2
   27028:	dc04      	bgt.n	27034 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   2702a:	1c6a      	adds	r2, r5, #1
   2702c:	4b02      	ldr	r3, [pc, #8]	; (27038 <ble_store_config_write_peer_sec+0x50>)
   2702e:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   27030:	4628      	mov	r0, r5
   27032:	e7ec      	b.n	2700e <ble_store_config_write_peer_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   27034:	201b      	movs	r0, #27
   27036:	e7f4      	b.n	27022 <ble_store_config_write_peer_sec+0x3a>
   27038:	2000397c 	.word	0x2000397c
   2703c:	20003a70 	.word	0x20003a70

00027040 <ble_store_config_write_our_sec>:
{
   27040:	b530      	push	{r4, r5, lr}
   27042:	b089      	sub	sp, #36	; 0x24
   27044:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   27046:	f7ff ffac 	bl	26fa2 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2704a:	4621      	mov	r1, r4
   2704c:	4668      	mov	r0, sp
   2704e:	f7ff f86d 	bl	2612c <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   27052:	4b0f      	ldr	r3, [pc, #60]	; (27090 <ble_store_config_write_our_sec+0x50>)
   27054:	681d      	ldr	r5, [r3, #0]
   27056:	462a      	mov	r2, r5
   27058:	490e      	ldr	r1, [pc, #56]	; (27094 <ble_store_config_write_our_sec+0x54>)
   2705a:	4668      	mov	r0, sp
   2705c:	f7ff fe90 	bl	26d80 <ble_store_config_find_sec>
    if (idx == -1) {
   27060:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27064:	d00b      	beq.n	2707e <ble_store_config_write_our_sec+0x3e>
    ble_store_config_our_secs[idx] = *value_sec;
   27066:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2706a:	2250      	movs	r2, #80	; 0x50
   2706c:	4621      	mov	r1, r4
   2706e:	4b09      	ldr	r3, [pc, #36]	; (27094 <ble_store_config_write_our_sec+0x54>)
   27070:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   27074:	f7e7 fca0 	bl	e9b8 <memcpy>
    return 0;
   27078:	2000      	movs	r0, #0
}
   2707a:	b009      	add	sp, #36	; 0x24
   2707c:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2707e:	2d02      	cmp	r5, #2
   27080:	dc04      	bgt.n	2708c <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   27082:	1c6a      	adds	r2, r5, #1
   27084:	4b02      	ldr	r3, [pc, #8]	; (27090 <ble_store_config_write_our_sec+0x50>)
   27086:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   27088:	4628      	mov	r0, r5
   2708a:	e7ec      	b.n	27066 <ble_store_config_write_our_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2708c:	201b      	movs	r0, #27
   2708e:	e7f4      	b.n	2707a <ble_store_config_write_our_sec+0x3a>
   27090:	20003978 	.word	0x20003978
   27094:	20003980 	.word	0x20003980

00027098 <ble_store_config_write_cccd>:
{
   27098:	b530      	push	{r4, r5, lr}
   2709a:	b085      	sub	sp, #20
   2709c:	4604      	mov	r4, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   2709e:	4601      	mov	r1, r0
   270a0:	a801      	add	r0, sp, #4
   270a2:	f7ff f837 	bl	26114 <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   270a6:	a801      	add	r0, sp, #4
   270a8:	f7ff feee 	bl	26e88 <ble_store_config_find_cccd>
    if (idx == -1) {
   270ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   270b0:	d009      	beq.n	270c6 <ble_store_config_write_cccd+0x2e>
    ble_store_config_cccds[idx] = *value_cccd;
   270b2:	4d0a      	ldr	r5, [pc, #40]	; (270dc <ble_store_config_write_cccd+0x44>)
   270b4:	eb05 1500 	add.w	r5, r5, r0, lsl #4
   270b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   270bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 0;
   270c0:	2000      	movs	r0, #0
}
   270c2:	b005      	add	sp, #20
   270c4:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   270c6:	4b06      	ldr	r3, [pc, #24]	; (270e0 <ble_store_config_write_cccd+0x48>)
   270c8:	6818      	ldr	r0, [r3, #0]
   270ca:	2807      	cmp	r0, #7
   270cc:	dc03      	bgt.n	270d6 <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   270ce:	1c43      	adds	r3, r0, #1
   270d0:	4a03      	ldr	r2, [pc, #12]	; (270e0 <ble_store_config_write_cccd+0x48>)
   270d2:	6013      	str	r3, [r2, #0]
   270d4:	e7ed      	b.n	270b2 <ble_store_config_write_cccd+0x1a>
            return BLE_HS_ESTORE_CAP;
   270d6:	201b      	movs	r0, #27
   270d8:	e7f3      	b.n	270c2 <ble_store_config_write_cccd+0x2a>
   270da:	bf00      	nop
   270dc:	200038f4 	.word	0x200038f4
   270e0:	20003974 	.word	0x20003974

000270e4 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   270e4:	b508      	push	{r3, lr}
   270e6:	4603      	mov	r3, r0
   270e8:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   270ea:	2b02      	cmp	r3, #2
   270ec:	d005      	beq.n	270fa <ble_store_config_write+0x16>
   270ee:	2b03      	cmp	r3, #3
   270f0:	d009      	beq.n	27106 <ble_store_config_write+0x22>
   270f2:	2b01      	cmp	r3, #1
   270f4:	d004      	beq.n	27100 <ble_store_config_write+0x1c>
   270f6:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   270f8:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_peer_sec(&val->sec);
   270fa:	f7ff ff75 	bl	26fe8 <ble_store_config_write_peer_sec>
        return rc;
   270fe:	e7fb      	b.n	270f8 <ble_store_config_write+0x14>
        rc = ble_store_config_write_our_sec(&val->sec);
   27100:	f7ff ff9e 	bl	27040 <ble_store_config_write_our_sec>
        return rc;
   27104:	e7f8      	b.n	270f8 <ble_store_config_write+0x14>
        rc = ble_store_config_write_cccd(&val->cccd);
   27106:	f7ff ffc7 	bl	27098 <ble_store_config_write_cccd>
        return rc;
   2710a:	e7f5      	b.n	270f8 <ble_store_config_write+0x14>

0002710c <ble_store_config_delete_obj>:
{
   2710c:	b510      	push	{r4, lr}
    (*num_values)--;
   2710e:	681c      	ldr	r4, [r3, #0]
   27110:	3c01      	subs	r4, #1
   27112:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   27114:	4294      	cmp	r4, r2
   27116:	dc01      	bgt.n	2711c <ble_store_config_delete_obj+0x10>
}
   27118:	2000      	movs	r0, #0
   2711a:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   2711c:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   27120:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   27122:	fb02 f201 	mul.w	r2, r2, r1
   27126:	4401      	add	r1, r0
   27128:	f7e7 fc53 	bl	e9d2 <memmove>
   2712c:	e7f4      	b.n	27118 <ble_store_config_delete_obj+0xc>

0002712e <ble_store_config_delete_sec>:
{
   2712e:	b538      	push	{r3, r4, r5, lr}
   27130:	460d      	mov	r5, r1
   27132:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   27134:	6812      	ldr	r2, [r2, #0]
   27136:	f7ff fe23 	bl	26d80 <ble_store_config_find_sec>
    if (idx == -1) {
   2713a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2713e:	d006      	beq.n	2714e <ble_store_config_delete_sec+0x20>
   27140:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   27142:	4623      	mov	r3, r4
   27144:	2150      	movs	r1, #80	; 0x50
   27146:	4628      	mov	r0, r5
   27148:	f7ff ffe0 	bl	2710c <ble_store_config_delete_obj>
}
   2714c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   2714e:	2005      	movs	r0, #5
   27150:	e7fc      	b.n	2714c <ble_store_config_delete_sec+0x1e>
	...

00027154 <ble_store_config_delete_peer_sec>:
{
   27154:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   27156:	4a02      	ldr	r2, [pc, #8]	; (27160 <ble_store_config_delete_peer_sec+0xc>)
   27158:	4902      	ldr	r1, [pc, #8]	; (27164 <ble_store_config_delete_peer_sec+0x10>)
   2715a:	f7ff ffe8 	bl	2712e <ble_store_config_delete_sec>
}
   2715e:	bd08      	pop	{r3, pc}
   27160:	2000397c 	.word	0x2000397c
   27164:	20003a70 	.word	0x20003a70

00027168 <ble_store_config_delete_our_sec>:
{
   27168:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   2716a:	4a02      	ldr	r2, [pc, #8]	; (27174 <ble_store_config_delete_our_sec+0xc>)
   2716c:	4902      	ldr	r1, [pc, #8]	; (27178 <ble_store_config_delete_our_sec+0x10>)
   2716e:	f7ff ffde 	bl	2712e <ble_store_config_delete_sec>
}
   27172:	bd08      	pop	{r3, pc}
   27174:	20003978 	.word	0x20003978
   27178:	20003980 	.word	0x20003980

0002717c <ble_store_config_delete_cccd>:
{
   2717c:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   2717e:	f7ff fe83 	bl	26e88 <ble_store_config_find_cccd>
    if (idx == -1) {
   27182:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27186:	d006      	beq.n	27196 <ble_store_config_delete_cccd+0x1a>
   27188:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   2718a:	4b04      	ldr	r3, [pc, #16]	; (2719c <ble_store_config_delete_cccd+0x20>)
   2718c:	2110      	movs	r1, #16
   2718e:	4804      	ldr	r0, [pc, #16]	; (271a0 <ble_store_config_delete_cccd+0x24>)
   27190:	f7ff ffbc 	bl	2710c <ble_store_config_delete_obj>
}
   27194:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOENT;
   27196:	2005      	movs	r0, #5
   27198:	e7fc      	b.n	27194 <ble_store_config_delete_cccd+0x18>
   2719a:	bf00      	nop
   2719c:	20003974 	.word	0x20003974
   271a0:	200038f4 	.word	0x200038f4

000271a4 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   271a4:	b508      	push	{r3, lr}
   271a6:	4603      	mov	r3, r0
   271a8:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   271aa:	2b02      	cmp	r3, #2
   271ac:	d005      	beq.n	271ba <ble_store_config_delete+0x16>
   271ae:	2b03      	cmp	r3, #3
   271b0:	d009      	beq.n	271c6 <ble_store_config_delete+0x22>
   271b2:	2b01      	cmp	r3, #1
   271b4:	d004      	beq.n	271c0 <ble_store_config_delete+0x1c>
   271b6:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   271b8:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_peer_sec(&key->sec);
   271ba:	f7ff ffcb 	bl	27154 <ble_store_config_delete_peer_sec>
        return rc;
   271be:	e7fb      	b.n	271b8 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_our_sec(&key->sec);
   271c0:	f7ff ffd2 	bl	27168 <ble_store_config_delete_our_sec>
        return rc;
   271c4:	e7f8      	b.n	271b8 <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_cccd(&key->cccd);
   271c6:	f7ff ffd9 	bl	2717c <ble_store_config_delete_cccd>
        return rc;
   271ca:	e7f5      	b.n	271b8 <ble_store_config_delete+0x14>

000271cc <ble_store_config_init>:

void
ble_store_config_init(void)
{
   271cc:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   271ce:	4b0e      	ldr	r3, [pc, #56]	; (27208 <ble_store_config_init+0x3c>)
   271d0:	781b      	ldrb	r3, [r3, #0]
   271d2:	b173      	cbz	r3, 271f2 <ble_store_config_init+0x26>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   271d4:	4b0d      	ldr	r3, [pc, #52]	; (2720c <ble_store_config_init+0x40>)
   271d6:	4a0e      	ldr	r2, [pc, #56]	; (27210 <ble_store_config_init+0x44>)
   271d8:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   271da:	4a0e      	ldr	r2, [pc, #56]	; (27214 <ble_store_config_init+0x48>)
   271dc:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   271de:	4a0e      	ldr	r2, [pc, #56]	; (27218 <ble_store_config_init+0x4c>)
   271e0:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   271e2:	2300      	movs	r3, #0
   271e4:	4a0d      	ldr	r2, [pc, #52]	; (2721c <ble_store_config_init+0x50>)
   271e6:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   271e8:	4a0d      	ldr	r2, [pc, #52]	; (27220 <ble_store_config_init+0x54>)
   271ea:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   271ec:	4a0d      	ldr	r2, [pc, #52]	; (27224 <ble_store_config_init+0x58>)
   271ee:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
}
   271f0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   271f2:	f7e4 ffd3 	bl	c19c <hal_debugger_connected>
   271f6:	b100      	cbz	r0, 271fa <ble_store_config_init+0x2e>
   271f8:	be01      	bkpt	0x0001
   271fa:	2300      	movs	r3, #0
   271fc:	461a      	mov	r2, r3
   271fe:	4619      	mov	r1, r3
   27200:	4618      	mov	r0, r3
   27202:	f7e5 fccf 	bl	cba4 <__assert_func>
   27206:	bf00      	nop
   27208:	20001e3c 	.word	0x20001e3c
   2720c:	200002d8 	.word	0x200002d8
   27210:	00026f63 	.word	0x00026f63
   27214:	000270e5 	.word	0x000270e5
   27218:	000271a5 	.word	0x000271a5
   2721c:	20003978 	.word	0x20003978
   27220:	2000397c 	.word	0x2000397c
   27224:	20003974 	.word	0x20003974

00027228 <ble_hs_util_load_rand_addr>:
#include "host/util/util.h"
#include "../src/ble_hs_hci_priv.h"

static int
ble_hs_util_load_rand_addr(ble_addr_t *addr)
{
   27228:	b510      	push	{r4, lr}
   2722a:	b084      	sub	sp, #16
   2722c:	4604      	mov	r4, r0
#if MYNEWT_VAL(BLE_HCI_VS)
    struct ble_hci_vs_rd_static_addr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_VENDOR,
   2722e:	2306      	movs	r3, #6
   27230:	9300      	str	r3, [sp, #0]
   27232:	ab02      	add	r3, sp, #8
   27234:	2200      	movs	r2, #0
   27236:	4611      	mov	r1, r2
   27238:	f64f 4001 	movw	r0, #64513	; 0xfc01
   2723c:	f7fb fbcc 	bl	229d8 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_VS_RD_STATIC_ADDR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc == 0) {
   27240:	b118      	cbz	r0, 2724a <ble_hs_util_load_rand_addr+0x22>
        memcpy(addr->val, rsp.addr, sizeof(addr->val));
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
   27242:	2315      	movs	r3, #21
}
   27244:	4618      	mov	r0, r3
   27246:	b004      	add	sp, #16
   27248:	bd10      	pop	{r4, pc}
   2724a:	4603      	mov	r3, r0
        addr->type = BLE_ADDR_RANDOM;
   2724c:	4622      	mov	r2, r4
   2724e:	2101      	movs	r1, #1
   27250:	f802 1b01 	strb.w	r1, [r2], #1
        memcpy(addr->val, rsp.addr, sizeof(addr->val));
   27254:	9802      	ldr	r0, [sp, #8]
   27256:	f8c4 0001 	str.w	r0, [r4, #1]
   2725a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2725e:	8091      	strh	r1, [r2, #4]
        return 0;
   27260:	e7f0      	b.n	27244 <ble_hs_util_load_rand_addr+0x1c>

00027262 <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   27262:	b500      	push	{lr}
   27264:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   27266:	2200      	movs	r2, #0
   27268:	4611      	mov	r1, r2
   2726a:	2001      	movs	r0, #1
   2726c:	f7fc f852 	bl	23314 <ble_hs_id_copy_addr>
    if (rc == 0) {
   27270:	4603      	mov	r3, r0
   27272:	b918      	cbnz	r0, 2727c <ble_hs_util_ensure_rand_addr+0x1a>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   27274:	4618      	mov	r0, r3
   27276:	b003      	add	sp, #12
   27278:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_util_load_rand_addr(&addr);
   2727c:	4668      	mov	r0, sp
   2727e:	f7ff ffd3 	bl	27228 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   27282:	4603      	mov	r3, r0
   27284:	2800      	cmp	r0, #0
   27286:	d1f5      	bne.n	27274 <ble_hs_util_ensure_rand_addr+0x12>
    rc = ble_hs_id_set_rnd(addr.val);
   27288:	f10d 0001 	add.w	r0, sp, #1
   2728c:	f7fb ffc2 	bl	23214 <ble_hs_id_set_rnd>
   27290:	4603      	mov	r3, r0
    if (rc != 0) {
   27292:	e7ef      	b.n	27274 <ble_hs_util_ensure_rand_addr+0x12>

00027294 <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   27294:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   27296:	b150      	cbz	r0, 272ae <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   27298:	f7ff ffe3 	bl	27262 <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   2729c:	2815      	cmp	r0, #21
   2729e:	d000      	beq.n	272a2 <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   272a0:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   272a2:	2200      	movs	r2, #0
   272a4:	4611      	mov	r1, r2
   272a6:	4610      	mov	r0, r2
   272a8:	f7fc f834 	bl	23314 <ble_hs_id_copy_addr>
   272ac:	e7f8      	b.n	272a0 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   272ae:	2200      	movs	r2, #0
   272b0:	4611      	mov	r1, r2
   272b2:	4610      	mov	r0, r2
   272b4:	f7fc f82e 	bl	23314 <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   272b8:	2815      	cmp	r0, #21
   272ba:	d1f1      	bne.n	272a0 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   272bc:	f7ff ffd1 	bl	27262 <ble_hs_util_ensure_rand_addr>
    return rc;
   272c0:	e7ee      	b.n	272a0 <ble_hs_util_ensure_addr+0xc>
	...

000272c4 <ble_transport_acl_put>:
    }
}

static os_error_t
ble_transport_acl_put(struct os_mempool_ext *mpe, void *data, void *arg)
{
   272c4:	b508      	push	{r3, lr}

    om = data;
    pkthdr = OS_MBUF_PKTHDR(om);

    do_put = true;
    from_ll = (pkthdr->omp_flags & OMP_FLAG_FROM_MASK) == OMP_FLAG_FROM_LL;
   272c6:	8a4b      	ldrh	r3, [r1, #18]
    err = 0;

    if (from_ll && transport_put_acl_from_ll_cb) {
   272c8:	f003 0303 	and.w	r3, r3, #3
   272cc:	2b02      	cmp	r3, #2
   272ce:	d104      	bne.n	272da <ble_transport_acl_put+0x16>
   272d0:	4b03      	ldr	r3, [pc, #12]	; (272e0 <ble_transport_acl_put+0x1c>)
   272d2:	681b      	ldr	r3, [r3, #0]
   272d4:	b10b      	cbz	r3, 272da <ble_transport_acl_put+0x16>
        err = transport_put_acl_from_ll_cb(mpe, data, arg);
   272d6:	4798      	blx	r3
        do_put = false;
    }

    if (do_put) {
   272d8:	e001      	b.n	272de <ble_transport_acl_put+0x1a>
        err = os_memblock_put_from_cb(&mpe->mpe_mp, data);
   272da:	f7e6 fcc1 	bl	dc60 <os_memblock_put_from_cb>
        ble_transport_int_flow_ctl_put();
    }
#endif

    return err;
}
   272de:	bd08      	pop	{r3, pc}
   272e0:	20005138 	.word	0x20005138

000272e4 <ble_transport_alloc_cmd>:
{
   272e4:	b508      	push	{r3, lr}
    return os_memblock_get(&pool_cmd);
   272e6:	4802      	ldr	r0, [pc, #8]	; (272f0 <ble_transport_alloc_cmd+0xc>)
   272e8:	f7e6 fca1 	bl	dc2e <os_memblock_get>
}
   272ec:	bd08      	pop	{r3, pc}
   272ee:	bf00      	nop
   272f0:	20003b90 	.word	0x20003b90

000272f4 <ble_transport_alloc_evt>:
{
   272f4:	b508      	push	{r3, lr}
    if (discardable) {
   272f6:	b118      	cbz	r0, 27300 <ble_transport_alloc_evt+0xc>
        buf = os_memblock_get(&pool_evt_lo);
   272f8:	4806      	ldr	r0, [pc, #24]	; (27314 <ble_transport_alloc_evt+0x20>)
   272fa:	f7e6 fc98 	bl	dc2e <os_memblock_get>
}
   272fe:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&pool_evt);
   27300:	4805      	ldr	r0, [pc, #20]	; (27318 <ble_transport_alloc_evt+0x24>)
   27302:	f7e6 fc94 	bl	dc2e <os_memblock_get>
        if (!buf) {
   27306:	2800      	cmp	r0, #0
   27308:	d1f9      	bne.n	272fe <ble_transport_alloc_evt+0xa>
            buf = os_memblock_get(&pool_evt_lo);
   2730a:	4802      	ldr	r0, [pc, #8]	; (27314 <ble_transport_alloc_evt+0x20>)
   2730c:	f7e6 fc8f 	bl	dc2e <os_memblock_get>
    return buf;
   27310:	e7f5      	b.n	272fe <ble_transport_alloc_evt+0xa>
   27312:	bf00      	nop
   27314:	200040dc 	.word	0x200040dc
   27318:	20003cb0 	.word	0x20003cb0

0002731c <ble_transport_free>:
{
   2731c:	b510      	push	{r4, lr}
   2731e:	4604      	mov	r4, r0
    if (os_memblock_from(&pool_cmd, buf)) {
   27320:	4601      	mov	r1, r0
   27322:	4813      	ldr	r0, [pc, #76]	; (27370 <ble_transport_free+0x54>)
   27324:	f7e6 fc64 	bl	dbf0 <os_memblock_from>
   27328:	b120      	cbz	r0, 27334 <ble_transport_free+0x18>
        os_memblock_put(&pool_cmd, buf);
   2732a:	4621      	mov	r1, r4
   2732c:	4810      	ldr	r0, [pc, #64]	; (27370 <ble_transport_free+0x54>)
   2732e:	f7e6 fca6 	bl	dc7e <os_memblock_put>
}
   27332:	bd10      	pop	{r4, pc}
    } else if (os_memblock_from(&pool_evt, buf)) {
   27334:	4621      	mov	r1, r4
   27336:	480f      	ldr	r0, [pc, #60]	; (27374 <ble_transport_free+0x58>)
   27338:	f7e6 fc5a 	bl	dbf0 <os_memblock_from>
   2733c:	b120      	cbz	r0, 27348 <ble_transport_free+0x2c>
        os_memblock_put(&pool_evt, buf);
   2733e:	4621      	mov	r1, r4
   27340:	480c      	ldr	r0, [pc, #48]	; (27374 <ble_transport_free+0x58>)
   27342:	f7e6 fc9c 	bl	dc7e <os_memblock_put>
   27346:	e7f4      	b.n	27332 <ble_transport_free+0x16>
    } else if (os_memblock_from(&pool_evt_lo, buf)) {
   27348:	4621      	mov	r1, r4
   2734a:	480b      	ldr	r0, [pc, #44]	; (27378 <ble_transport_free+0x5c>)
   2734c:	f7e6 fc50 	bl	dbf0 <os_memblock_from>
   27350:	b120      	cbz	r0, 2735c <ble_transport_free+0x40>
        os_memblock_put(&pool_evt_lo, buf);
   27352:	4621      	mov	r1, r4
   27354:	4808      	ldr	r0, [pc, #32]	; (27378 <ble_transport_free+0x5c>)
   27356:	f7e6 fc92 	bl	dc7e <os_memblock_put>
   2735a:	e7ea      	b.n	27332 <ble_transport_free+0x16>
        assert(0);
   2735c:	f7e4 ff1e 	bl	c19c <hal_debugger_connected>
   27360:	b100      	cbz	r0, 27364 <ble_transport_free+0x48>
   27362:	be01      	bkpt	0x0001
   27364:	2300      	movs	r3, #0
   27366:	461a      	mov	r2, r3
   27368:	4619      	mov	r1, r3
   2736a:	4618      	mov	r0, r3
   2736c:	f7e5 fc1a 	bl	cba4 <__assert_func>
   27370:	20003b90 	.word	0x20003b90
   27374:	20003cb0 	.word	0x20003cb0
   27378:	200040dc 	.word	0x200040dc

0002737c <ble_transport_init>:

void
ble_transport_init(void)
{
   2737c:	b510      	push	{r4, lr}
   2737e:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   27380:	4b44      	ldr	r3, [pc, #272]	; (27494 <ble_transport_init+0x118>)
   27382:	781b      	ldrb	r3, [r3, #0]
   27384:	2b00      	cmp	r3, #0
   27386:	d039      	beq.n	273fc <ble_transport_init+0x80>

    rc = os_mempool_init(&pool_cmd, POOL_CMD_COUNT, POOL_CMD_SIZE,
   27388:	4b43      	ldr	r3, [pc, #268]	; (27498 <ble_transport_init+0x11c>)
   2738a:	9300      	str	r3, [sp, #0]
   2738c:	4b43      	ldr	r3, [pc, #268]	; (2749c <ble_transport_init+0x120>)
   2738e:	f44f 7281 	mov.w	r2, #258	; 0x102
   27392:	2101      	movs	r1, #1
   27394:	4842      	ldr	r0, [pc, #264]	; (274a0 <ble_transport_init+0x124>)
   27396:	f7e6 fc13 	bl	dbc0 <os_mempool_init>
                         pool_cmd_buf, "transport_pool_cmd");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2739a:	2800      	cmp	r0, #0
   2739c:	d138      	bne.n	27410 <ble_transport_init+0x94>

    rc = os_mempool_init(&pool_evt, POOL_EVT_COUNT, POOL_EVT_SIZE,
   2739e:	4b41      	ldr	r3, [pc, #260]	; (274a4 <ble_transport_init+0x128>)
   273a0:	9300      	str	r3, [sp, #0]
   273a2:	4b41      	ldr	r3, [pc, #260]	; (274a8 <ble_transport_init+0x12c>)
   273a4:	f240 1201 	movw	r2, #257	; 0x101
   273a8:	2104      	movs	r1, #4
   273aa:	4840      	ldr	r0, [pc, #256]	; (274ac <ble_transport_init+0x130>)
   273ac:	f7e6 fc08 	bl	dbc0 <os_mempool_init>
                         pool_evt_buf, "transport_pool_evt");
    SYSINIT_PANIC_ASSERT(rc == 0);
   273b0:	2800      	cmp	r0, #0
   273b2:	d13a      	bne.n	2742a <ble_transport_init+0xae>

    rc = os_mempool_init(&pool_evt_lo, POOL_EVT_LO_COUNT, POOL_EVT_SIZE,
   273b4:	4b3e      	ldr	r3, [pc, #248]	; (274b0 <ble_transport_init+0x134>)
   273b6:	9300      	str	r3, [sp, #0]
   273b8:	4b3e      	ldr	r3, [pc, #248]	; (274b4 <ble_transport_init+0x138>)
   273ba:	f240 1201 	movw	r2, #257	; 0x101
   273be:	2110      	movs	r1, #16
   273c0:	483d      	ldr	r0, [pc, #244]	; (274b8 <ble_transport_init+0x13c>)
   273c2:	f7e6 fbfd 	bl	dbc0 <os_mempool_init>
                         pool_evt_lo_buf, "transport_pool_evt_lo");
    SYSINIT_PANIC_ASSERT(rc == 0);
   273c6:	2800      	cmp	r0, #0
   273c8:	d13c      	bne.n	27444 <ble_transport_init+0xc8>

    rc = os_mempool_ext_init(&pool_acl, POOL_ACL_COUNT, POOL_ACL_SIZE,
   273ca:	4b3c      	ldr	r3, [pc, #240]	; (274bc <ble_transport_init+0x140>)
   273cc:	9300      	str	r3, [sp, #0]
   273ce:	4b3c      	ldr	r3, [pc, #240]	; (274c0 <ble_transport_init+0x144>)
   273d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
   273d4:	2100      	movs	r1, #0
   273d6:	483b      	ldr	r0, [pc, #236]	; (274c4 <ble_transport_init+0x148>)
   273d8:	f7e6 fbfc 	bl	dbd4 <os_mempool_ext_init>
                             pool_acl_buf, "transport_pool_acl");
    SYSINIT_PANIC_ASSERT(rc == 0);
   273dc:	2800      	cmp	r0, #0
   273de:	d13e      	bne.n	2745e <ble_transport_init+0xe2>

    rc = os_mbuf_pool_init(&mpool_acl, &pool_acl.mpe_mp,
   273e0:	2300      	movs	r3, #0
   273e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
   273e6:	4937      	ldr	r1, [pc, #220]	; (274c4 <ble_transport_init+0x148>)
   273e8:	4837      	ldr	r0, [pc, #220]	; (274c8 <ble_transport_init+0x14c>)
   273ea:	f7e6 f804 	bl	d3f6 <os_mbuf_pool_init>
                           POOL_ACL_SIZE, POOL_ACL_COUNT);
    SYSINIT_PANIC_ASSERT(rc == 0);
   273ee:	2800      	cmp	r0, #0
   273f0:	d142      	bne.n	27478 <ble_transport_init+0xfc>

    pool_acl.mpe_put_cb = ble_transport_acl_put;
   273f2:	4b34      	ldr	r3, [pc, #208]	; (274c4 <ble_transport_init+0x148>)
   273f4:	4a35      	ldr	r2, [pc, #212]	; (274cc <ble_transport_init+0x150>)
   273f6:	61da      	str	r2, [r3, #28]
}
   273f8:	b002      	add	sp, #8
   273fa:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   273fc:	f7e4 fece 	bl	c19c <hal_debugger_connected>
   27400:	b100      	cbz	r0, 27404 <ble_transport_init+0x88>
   27402:	be01      	bkpt	0x0001
   27404:	2300      	movs	r3, #0
   27406:	461a      	mov	r2, r3
   27408:	4619      	mov	r1, r3
   2740a:	4618      	mov	r0, r3
   2740c:	f7e5 fbca 	bl	cba4 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27410:	f7e4 fec4 	bl	c19c <hal_debugger_connected>
   27414:	b100      	cbz	r0, 27418 <ble_transport_init+0x9c>
   27416:	be01      	bkpt	0x0001
   27418:	2000      	movs	r0, #0
   2741a:	9000      	str	r0, [sp, #0]
   2741c:	4b2c      	ldr	r3, [pc, #176]	; (274d0 <ble_transport_init+0x154>)
   2741e:	681c      	ldr	r4, [r3, #0]
   27420:	4603      	mov	r3, r0
   27422:	4602      	mov	r2, r0
   27424:	4601      	mov	r1, r0
   27426:	47a0      	blx	r4
   27428:	e7b9      	b.n	2739e <ble_transport_init+0x22>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2742a:	f7e4 feb7 	bl	c19c <hal_debugger_connected>
   2742e:	b100      	cbz	r0, 27432 <ble_transport_init+0xb6>
   27430:	be01      	bkpt	0x0001
   27432:	2000      	movs	r0, #0
   27434:	9000      	str	r0, [sp, #0]
   27436:	4b26      	ldr	r3, [pc, #152]	; (274d0 <ble_transport_init+0x154>)
   27438:	681c      	ldr	r4, [r3, #0]
   2743a:	4603      	mov	r3, r0
   2743c:	4602      	mov	r2, r0
   2743e:	4601      	mov	r1, r0
   27440:	47a0      	blx	r4
   27442:	e7b7      	b.n	273b4 <ble_transport_init+0x38>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27444:	f7e4 feaa 	bl	c19c <hal_debugger_connected>
   27448:	b100      	cbz	r0, 2744c <ble_transport_init+0xd0>
   2744a:	be01      	bkpt	0x0001
   2744c:	2000      	movs	r0, #0
   2744e:	9000      	str	r0, [sp, #0]
   27450:	4b1f      	ldr	r3, [pc, #124]	; (274d0 <ble_transport_init+0x154>)
   27452:	681c      	ldr	r4, [r3, #0]
   27454:	4603      	mov	r3, r0
   27456:	4602      	mov	r2, r0
   27458:	4601      	mov	r1, r0
   2745a:	47a0      	blx	r4
   2745c:	e7b5      	b.n	273ca <ble_transport_init+0x4e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2745e:	f7e4 fe9d 	bl	c19c <hal_debugger_connected>
   27462:	b100      	cbz	r0, 27466 <ble_transport_init+0xea>
   27464:	be01      	bkpt	0x0001
   27466:	2000      	movs	r0, #0
   27468:	9000      	str	r0, [sp, #0]
   2746a:	4b19      	ldr	r3, [pc, #100]	; (274d0 <ble_transport_init+0x154>)
   2746c:	681c      	ldr	r4, [r3, #0]
   2746e:	4603      	mov	r3, r0
   27470:	4602      	mov	r2, r0
   27472:	4601      	mov	r1, r0
   27474:	47a0      	blx	r4
   27476:	e7b3      	b.n	273e0 <ble_transport_init+0x64>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27478:	f7e4 fe90 	bl	c19c <hal_debugger_connected>
   2747c:	b100      	cbz	r0, 27480 <ble_transport_init+0x104>
   2747e:	be01      	bkpt	0x0001
   27480:	2000      	movs	r0, #0
   27482:	9000      	str	r0, [sp, #0]
   27484:	4b12      	ldr	r3, [pc, #72]	; (274d0 <ble_transport_init+0x154>)
   27486:	681c      	ldr	r4, [r3, #0]
   27488:	4603      	mov	r3, r0
   2748a:	4602      	mov	r2, r0
   2748c:	4601      	mov	r1, r0
   2748e:	47a0      	blx	r4
   27490:	e7af      	b.n	273f2 <ble_transport_init+0x76>
   27492:	bf00      	nop
   27494:	20001e3c 	.word	0x20001e3c
   27498:	0002e718 	.word	0x0002e718
   2749c:	20003bac 	.word	0x20003bac
   274a0:	20003b90 	.word	0x20003b90
   274a4:	0002e72c 	.word	0x0002e72c
   274a8:	20003ccc 	.word	0x20003ccc
   274ac:	20003cb0 	.word	0x20003cb0
   274b0:	0002e740 	.word	0x0002e740
   274b4:	200040f8 	.word	0x200040f8
   274b8:	200040dc 	.word	0x200040dc
   274bc:	0002e758 	.word	0x0002e758
   274c0:	20003b90 	.word	0x20003b90
   274c4:	20003b6c 	.word	0x20003b6c
   274c8:	20003b60 	.word	0x20003b60
   274cc:	000272c5 	.word	0x000272c5
   274d0:	2000028c 	.word	0x2000028c

000274d4 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   274d4:	2801      	cmp	r0, #1
   274d6:	d100      	bne.n	274da <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
   274d8:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   274da:	2002      	movs	r0, #2
   274dc:	e7fc      	b.n	274d8 <boot_flag_decode+0x4>
	...

000274e0 <boot_magic_decode>:
{
   274e0:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   274e2:	2210      	movs	r2, #16
   274e4:	4903      	ldr	r1, [pc, #12]	; (274f4 <boot_magic_decode+0x14>)
   274e6:	f7e7 fa43 	bl	e970 <memcmp>
   274ea:	b108      	cbz	r0, 274f0 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
   274ec:	2002      	movs	r0, #2
}
   274ee:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   274f0:	2001      	movs	r0, #1
   274f2:	e7fc      	b.n	274ee <boot_magic_decode+0xe>
   274f4:	0002e76c 	.word	0x0002e76c

000274f8 <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   274f8:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
   274fa:	3828      	subs	r0, #40	; 0x28
   274fc:	4770      	bx	lr

000274fe <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
   274fe:	2804      	cmp	r0, #4
   27500:	d00a      	beq.n	27518 <boot_magic_compatible_check+0x1a>
   27502:	2805      	cmp	r0, #5
   27504:	d103      	bne.n	2750e <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
   27506:	1e48      	subs	r0, r1, #1
   27508:	bf18      	it	ne
   2750a:	2001      	movne	r0, #1
   2750c:	4770      	bx	lr

    default:
        return tbl_val == val;
   2750e:	4288      	cmp	r0, r1
   27510:	bf14      	ite	ne
   27512:	2000      	movne	r0, #0
   27514:	2001      	moveq	r0, #1
   27516:	4770      	bx	lr
    switch (tbl_val) {
   27518:	2001      	movs	r0, #1
    }
}
   2751a:	4770      	bx	lr

0002751c <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
   2751c:	b191      	cbz	r1, 27544 <bootutil_buffer_is_erased+0x28>
{
   2751e:	b538      	push	{r3, r4, r5, lr}
   27520:	4614      	mov	r4, r2
   27522:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
   27524:	b90a      	cbnz	r2, 2752a <bootutil_buffer_is_erased+0xe>
        return false;
   27526:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
   27528:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
   2752a:	f7e9 faaf 	bl	10a8c <flash_area_erased_val>
   2752e:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   27530:	2300      	movs	r3, #0
   27532:	42a3      	cmp	r3, r4
   27534:	d204      	bcs.n	27540 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
   27536:	5cea      	ldrb	r2, [r5, r3]
   27538:	4282      	cmp	r2, r0
   2753a:	d105      	bne.n	27548 <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   2753c:	3301      	adds	r3, #1
   2753e:	e7f8      	b.n	27532 <bootutil_buffer_is_erased+0x16>
    return true;
   27540:	2001      	movs	r0, #1
   27542:	e7f1      	b.n	27528 <bootutil_buffer_is_erased+0xc>
        return false;
   27544:	2000      	movs	r0, #0
}
   27546:	4770      	bx	lr
            return false;
   27548:	2000      	movs	r0, #0
   2754a:	e7ed      	b.n	27528 <bootutil_buffer_is_erased+0xc>

0002754c <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
   2754c:	b538      	push	{r3, r4, r5, lr}
   2754e:	4605      	mov	r5, r0
   27550:	460c      	mov	r4, r1
   27552:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
   27554:	2301      	movs	r3, #1
   27556:	4622      	mov	r2, r4
   27558:	f7e9 fa5a 	bl	10a10 <flash_area_read>
    if (rc < 0) {
   2755c:	2800      	cmp	r0, #0
   2755e:	db0f      	blt.n	27580 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   27560:	2201      	movs	r2, #1
   27562:	4621      	mov	r1, r4
   27564:	4628      	mov	r0, r5
   27566:	f7ff ffd9 	bl	2751c <bootutil_buffer_is_erased>
   2756a:	b118      	cbz	r0, 27574 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   2756c:	2303      	movs	r3, #3
   2756e:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
   27570:	2000      	movs	r0, #0
   27572:	e006      	b.n	27582 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
   27574:	7820      	ldrb	r0, [r4, #0]
   27576:	f7ff ffad 	bl	274d4 <boot_flag_decode>
   2757a:	7020      	strb	r0, [r4, #0]
    return 0;
   2757c:	2000      	movs	r0, #0
   2757e:	e000      	b.n	27582 <boot_read_flag+0x36>
        return BOOT_EFLASH;
   27580:	2001      	movs	r0, #1
}
   27582:	bd38      	pop	{r3, r4, r5, pc}

00027584 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   27584:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   27586:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   27588:	2310      	movs	r3, #16
   2758a:	4a04      	ldr	r2, [pc, #16]	; (2759c <boot_write_magic+0x18>)
   2758c:	3910      	subs	r1, #16
   2758e:	f7e9 fa52 	bl	10a36 <flash_area_write>
    if (rc != 0) {
   27592:	b900      	cbnz	r0, 27596 <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
   27594:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   27596:	2001      	movs	r0, #1
   27598:	e7fc      	b.n	27594 <boot_write_magic+0x10>
   2759a:	bf00      	nop
   2759c:	0002e76c 	.word	0x0002e76c

000275a0 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   275a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   275a4:	b083      	sub	sp, #12
   275a6:	4606      	mov	r6, r0
   275a8:	460f      	mov	r7, r1
   275aa:	4690      	mov	r8, r2
   275ac:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   275ae:	f7e9 fa68 	bl	10a82 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
   275b2:	1944      	adds	r4, r0, r5
   275b4:	b2e4      	uxtb	r4, r4
   275b6:	3c01      	subs	r4, #1
   275b8:	b264      	sxtb	r4, r4
   275ba:	4240      	negs	r0, r0
   275bc:	4004      	ands	r4, r0
   275be:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   275c0:	2c08      	cmp	r4, #8
   275c2:	d904      	bls.n	275ce <boot_write_trailer+0x2e>
        return -1;
   275c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   275c8:	b003      	add	sp, #12
   275ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
   275ce:	4630      	mov	r0, r6
   275d0:	f7e9 fa5c 	bl	10a8c <flash_area_erased_val>
   275d4:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   275d6:	462a      	mov	r2, r5
   275d8:	4641      	mov	r1, r8
   275da:	4668      	mov	r0, sp
   275dc:	f7e7 f9ec 	bl	e9b8 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   275e0:	1b62      	subs	r2, r4, r5
   275e2:	fa5f f189 	uxtb.w	r1, r9
   275e6:	eb0d 0005 	add.w	r0, sp, r5
   275ea:	f7e7 fa0a 	bl	ea02 <memset>
    rc = flash_area_write(fap, off, buf, align);
   275ee:	4623      	mov	r3, r4
   275f0:	466a      	mov	r2, sp
   275f2:	4639      	mov	r1, r7
   275f4:	4630      	mov	r0, r6
   275f6:	f7e9 fa1e 	bl	10a36 <flash_area_write>
    if (rc != 0) {
   275fa:	2800      	cmp	r0, #0
   275fc:	d0e4      	beq.n	275c8 <boot_write_trailer+0x28>
        return BOOT_EFLASH;
   275fe:	2001      	movs	r0, #1
   27600:	e7e2      	b.n	275c8 <boot_write_trailer+0x28>

00027602 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   27602:	b500      	push	{lr}
   27604:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
   27606:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   2760a:	2301      	movs	r3, #1
   2760c:	aa01      	add	r2, sp, #4
   2760e:	f7ff ffc7 	bl	275a0 <boot_write_trailer>
}
   27612:	b003      	add	sp, #12
   27614:	f85d fb04 	ldr.w	pc, [sp], #4

00027618 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
   27618:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   2761a:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   2761c:	2201      	movs	r2, #1
   2761e:	3918      	subs	r1, #24
   27620:	f7ff ffef 	bl	27602 <boot_write_trailer_flag>
}
   27624:	bd08      	pop	{r3, pc}

00027626 <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
   27626:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   27628:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   2762a:	3a18      	subs	r2, #24
   2762c:	f7ff ff8e 	bl	2754c <boot_read_flag>
}
   27630:	bd08      	pop	{r3, pc}

00027632 <boot_read_swap_state>:
{
   27632:	b530      	push	{r4, r5, lr}
   27634:	b087      	sub	sp, #28
   27636:	4604      	mov	r4, r0
   27638:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   2763a:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   2763c:	2310      	movs	r3, #16
   2763e:	aa02      	add	r2, sp, #8
   27640:	3910      	subs	r1, #16
   27642:	f7e9 f9e5 	bl	10a10 <flash_area_read>
    if (rc < 0) {
   27646:	2800      	cmp	r0, #0
   27648:	db3b      	blt.n	276c2 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   2764a:	2210      	movs	r2, #16
   2764c:	a902      	add	r1, sp, #8
   2764e:	4620      	mov	r0, r4
   27650:	f7ff ff64 	bl	2751c <bootutil_buffer_is_erased>
   27654:	b358      	cbz	r0, 276ae <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
   27656:	2303      	movs	r3, #3
   27658:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
   2765a:	4620      	mov	r0, r4
   2765c:	f7ff ff4c 	bl	274f8 <boot_swap_info_off>
   27660:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   27662:	2301      	movs	r3, #1
   27664:	f10d 0207 	add.w	r2, sp, #7
   27668:	4620      	mov	r0, r4
   2766a:	f7e9 f9d1 	bl	10a10 <flash_area_read>
    if (rc < 0) {
   2766e:	2800      	cmp	r0, #0
   27670:	db2a      	blt.n	276c8 <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   27672:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27676:	f003 020f 	and.w	r2, r3, #15
   2767a:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2767c:	091b      	lsrs	r3, r3, #4
   2767e:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   27680:	2201      	movs	r2, #1
   27682:	f10d 0107 	add.w	r1, sp, #7
   27686:	4620      	mov	r0, r4
   27688:	f7ff ff48 	bl	2751c <bootutil_buffer_is_erased>
   2768c:	b910      	cbnz	r0, 27694 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   2768e:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   27690:	2b04      	cmp	r3, #4
   27692:	d903      	bls.n	2769c <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   27694:	2301      	movs	r3, #1
   27696:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   27698:	2300      	movs	r3, #0
   2769a:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
   2769c:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   2769e:	3a20      	subs	r2, #32
   276a0:	1ca9      	adds	r1, r5, #2
   276a2:	4620      	mov	r0, r4
   276a4:	f7ff ff52 	bl	2754c <boot_read_flag>
    if (rc) {
   276a8:	b130      	cbz	r0, 276b8 <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
   276aa:	2001      	movs	r0, #1
   276ac:	e00a      	b.n	276c4 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
   276ae:	a802      	add	r0, sp, #8
   276b0:	f7ff ff16 	bl	274e0 <boot_magic_decode>
   276b4:	7028      	strb	r0, [r5, #0]
   276b6:	e7d0      	b.n	2765a <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
   276b8:	1ce9      	adds	r1, r5, #3
   276ba:	4620      	mov	r0, r4
   276bc:	f7ff ffb3 	bl	27626 <boot_read_image_ok>
   276c0:	e000      	b.n	276c4 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
   276c2:	2001      	movs	r0, #1
}
   276c4:	b007      	add	sp, #28
   276c6:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   276c8:	2001      	movs	r0, #1
   276ca:	e7fb      	b.n	276c4 <boot_read_swap_state+0x92>

000276cc <boot_read_swap_state_by_id>:
{
   276cc:	b510      	push	{r4, lr}
   276ce:	b082      	sub	sp, #8
   276d0:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   276d2:	a901      	add	r1, sp, #4
   276d4:	b2c0      	uxtb	r0, r0
   276d6:	f7e9 f943 	bl	10960 <flash_area_open>
    if (rc != 0) {
   276da:	b110      	cbz	r0, 276e2 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
   276dc:	2001      	movs	r0, #1
}
   276de:	b002      	add	sp, #8
   276e0:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   276e2:	4621      	mov	r1, r4
   276e4:	9801      	ldr	r0, [sp, #4]
   276e6:	f7ff ffa4 	bl	27632 <boot_read_swap_state>
    return rc;
   276ea:	e7f8      	b.n	276de <boot_read_swap_state_by_id+0x12>

000276ec <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   276ec:	b510      	push	{r4, lr}
   276ee:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   276f0:	2a0e      	cmp	r2, #14
   276f2:	d811      	bhi.n	27718 <boot_write_swap_info+0x2c>
   276f4:	4604      	mov	r4, r0
   276f6:	290e      	cmp	r1, #14
   276f8:	d818      	bhi.n	2772c <boot_write_swap_info+0x40>
   276fa:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   276fe:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   27702:	f7ff fef9 	bl	274f8 <boot_swap_info_off>
   27706:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   27708:	2301      	movs	r3, #1
   2770a:	f10d 0207 	add.w	r2, sp, #7
   2770e:	4620      	mov	r0, r4
   27710:	f7ff ff46 	bl	275a0 <boot_write_trailer>
}
   27714:	b002      	add	sp, #8
   27716:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   27718:	f7e4 fd40 	bl	c19c <hal_debugger_connected>
   2771c:	b100      	cbz	r0, 27720 <boot_write_swap_info+0x34>
   2771e:	be01      	bkpt	0x0001
   27720:	2300      	movs	r3, #0
   27722:	461a      	mov	r2, r3
   27724:	4619      	mov	r1, r3
   27726:	4618      	mov	r0, r3
   27728:	f7e5 fa3c 	bl	cba4 <__assert_func>
   2772c:	f7e4 fd36 	bl	c19c <hal_debugger_connected>
   27730:	b100      	cbz	r0, 27734 <boot_write_swap_info+0x48>
   27732:	be01      	bkpt	0x0001
   27734:	2300      	movs	r3, #0
   27736:	461a      	mov	r2, r3
   27738:	4619      	mov	r1, r3
   2773a:	4618      	mov	r0, r3
   2773c:	f7e5 fa32 	bl	cba4 <__assert_func>

00027740 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
   27740:	b530      	push	{r4, r5, lr}
   27742:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   27744:	a902      	add	r1, sp, #8
   27746:	2001      	movs	r0, #1
   27748:	f7ff ffc0 	bl	276cc <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
   2774c:	2800      	cmp	r0, #0
   2774e:	d13e      	bne.n	277ce <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   27750:	4669      	mov	r1, sp
   27752:	2002      	movs	r0, #2
   27754:	f7ff ffba 	bl	276cc <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   27758:	2800      	cmp	r0, #0
   2775a:	d13a      	bne.n	277d2 <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2775c:	2400      	movs	r4, #0
   2775e:	e007      	b.n	27770 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   27760:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   27762:	2b04      	cmp	r3, #4
   27764:	d029      	beq.n	277ba <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   27766:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2776a:	4293      	cmp	r3, r2
   2776c:	d025      	beq.n	277ba <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2776e:	3401      	adds	r4, #1
   27770:	2c02      	cmp	r4, #2
   27772:	d829      	bhi.n	277c8 <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
   27774:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   27778:	4a17      	ldr	r2, [pc, #92]	; (277d8 <boot_swap_type_multi+0x98>)
   2777a:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
   2777e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   27782:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
   27786:	f7ff feba 	bl	274fe <boot_magic_compatible_check>
   2778a:	2800      	cmp	r0, #0
   2778c:	d0ef      	beq.n	2776e <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   2778e:	f89d 1000 	ldrb.w	r1, [sp]
   27792:	7868      	ldrb	r0, [r5, #1]
   27794:	f7ff feb3 	bl	274fe <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   27798:	2800      	cmp	r0, #0
   2779a:	d0e8      	beq.n	2776e <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2779c:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   2779e:	2b04      	cmp	r3, #4
   277a0:	d003      	beq.n	277aa <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   277a2:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   277a6:	4293      	cmp	r3, r2
   277a8:	d1e1      	bne.n	2776e <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   277aa:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   277ac:	2b04      	cmp	r3, #4
   277ae:	d0d7      	beq.n	27760 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   277b0:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   277b4:	4293      	cmp	r3, r2
   277b6:	d1da      	bne.n	2776e <boot_swap_type_multi+0x2e>
   277b8:	e7d2      	b.n	27760 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
   277ba:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
   277bc:	1e83      	subs	r3, r0, #2
   277be:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   277c0:	2b02      	cmp	r3, #2
   277c2:	d902      	bls.n	277ca <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
   277c4:	20ff      	movs	r0, #255	; 0xff
   277c6:	e000      	b.n	277ca <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   277c8:	2001      	movs	r0, #1
}
   277ca:	b005      	add	sp, #20
   277cc:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   277ce:	20ff      	movs	r0, #255	; 0xff
   277d0:	e7fb      	b.n	277ca <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
   277d2:	20ff      	movs	r0, #255	; 0xff
   277d4:	e7f9      	b.n	277ca <boot_swap_type_multi+0x8a>
   277d6:	bf00      	nop
   277d8:	0002e77c 	.word	0x0002e77c

000277dc <boot_swap_type>:
 * This function is not used by the bootloader itself, but its required API
 * by external tooling like mcumgr.
 */
int
boot_swap_type(void)
{
   277dc:	b508      	push	{r3, lr}
    return boot_swap_type_multi(0);
   277de:	2000      	movs	r0, #0
   277e0:	f7ff ffae 	bl	27740 <boot_swap_type_multi>
}
   277e4:	bd08      	pop	{r3, pc}

000277e6 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   277e6:	b530      	push	{r4, r5, lr}
   277e8:	b085      	sub	sp, #20
   277ea:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   277ec:	a901      	add	r1, sp, #4
   277ee:	2002      	movs	r0, #2
   277f0:	f7ff ff6c 	bl	276cc <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   277f4:	4603      	mov	r3, r0
   277f6:	bba0      	cbnz	r0, 27862 <boot_set_pending_multi+0x7c>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   277f8:	f89d 5004 	ldrb.w	r5, [sp, #4]
   277fc:	2d02      	cmp	r5, #2
   277fe:	d02a      	beq.n	27856 <boot_set_pending_multi+0x70>
   27800:	2d03      	cmp	r5, #3
   27802:	d00b      	beq.n	2781c <boot_set_pending_multi+0x36>
   27804:	2d01      	cmp	r5, #1
   27806:	d02c      	beq.n	27862 <boot_set_pending_multi+0x7c>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   27808:	f7e4 fcc8 	bl	c19c <hal_debugger_connected>
   2780c:	b100      	cbz	r0, 27810 <boot_set_pending_multi+0x2a>
   2780e:	be01      	bkpt	0x0001
   27810:	2300      	movs	r3, #0
   27812:	461a      	mov	r2, r3
   27814:	4619      	mov	r1, r3
   27816:	4618      	mov	r0, r3
   27818:	f7e5 f9c4 	bl	cba4 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   2781c:	a903      	add	r1, sp, #12
   2781e:	2002      	movs	r0, #2
   27820:	f7e9 f89e 	bl	10960 <flash_area_open>
        if (rc != 0) {
   27824:	b150      	cbz	r0, 2783c <boot_set_pending_multi+0x56>
            rc = BOOT_EFLASH;
   27826:	2301      	movs	r3, #1
        if (rc == 0) {
   27828:	b9db      	cbnz	r3, 27862 <boot_set_pending_multi+0x7c>
            if (permanent) {
   2782a:	b904      	cbnz	r4, 2782e <boot_set_pending_multi+0x48>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2782c:	2502      	movs	r5, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   2782e:	2200      	movs	r2, #0
   27830:	4629      	mov	r1, r5
   27832:	9803      	ldr	r0, [sp, #12]
   27834:	f7ff ff5a 	bl	276ec <boot_write_swap_info>
   27838:	4603      	mov	r3, r0
   2783a:	e012      	b.n	27862 <boot_set_pending_multi+0x7c>
            rc = boot_write_magic(fap);
   2783c:	9803      	ldr	r0, [sp, #12]
   2783e:	f7ff fea1 	bl	27584 <boot_write_magic>
        if (rc == 0 && permanent) {
   27842:	4603      	mov	r3, r0
   27844:	2800      	cmp	r0, #0
   27846:	d1ef      	bne.n	27828 <boot_set_pending_multi+0x42>
   27848:	2c00      	cmp	r4, #0
   2784a:	d0ed      	beq.n	27828 <boot_set_pending_multi+0x42>
            rc = boot_write_image_ok(fap);
   2784c:	9803      	ldr	r0, [sp, #12]
   2784e:	f7ff fee3 	bl	27618 <boot_write_image_ok>
   27852:	4603      	mov	r3, r0
   27854:	e7e8      	b.n	27828 <boot_set_pending_multi+0x42>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   27856:	a903      	add	r1, sp, #12
   27858:	2002      	movs	r0, #2
   2785a:	f7e9 f881 	bl	10960 <flash_area_open>
        if (rc != 0) {
   2785e:	b118      	cbz	r0, 27868 <boot_set_pending_multi+0x82>
            return BOOT_EFLASH;
   27860:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   27862:	4618      	mov	r0, r3
   27864:	b005      	add	sp, #20
   27866:	bd30      	pop	{r4, r5, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   27868:	9803      	ldr	r0, [sp, #12]
   2786a:	6882      	ldr	r2, [r0, #8]
   2786c:	2100      	movs	r1, #0
   2786e:	f7e9 f8f5 	bl	10a5c <flash_area_erase>
        return BOOT_EBADIMAGE;
   27872:	2303      	movs	r3, #3
   27874:	e7f5      	b.n	27862 <boot_set_pending_multi+0x7c>

00027876 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   27876:	b508      	push	{r3, lr}
   27878:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   2787a:	2000      	movs	r0, #0
   2787c:	f7ff ffb3 	bl	277e6 <boot_set_pending_multi>
}
   27880:	bd08      	pop	{r3, pc}

00027882 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   27882:	b500      	push	{lr}
   27884:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   27886:	a901      	add	r1, sp, #4
   27888:	2001      	movs	r0, #1
   2788a:	f7ff ff1f 	bl	276cc <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   2788e:	b998      	cbnz	r0, 278b8 <boot_set_confirmed_multi+0x36>
        return rc;
    }

    switch (state_primary_slot.magic) {
   27890:	f89d 3004 	ldrb.w	r3, [sp, #4]
   27894:	2b02      	cmp	r3, #2
   27896:	d00e      	beq.n	278b6 <boot_set_confirmed_multi+0x34>
   27898:	2b03      	cmp	r3, #3
   2789a:	d00d      	beq.n	278b8 <boot_set_confirmed_multi+0x36>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   2789c:	a903      	add	r1, sp, #12
   2789e:	2001      	movs	r0, #1
   278a0:	f7e9 f85e 	bl	10960 <flash_area_open>
    if (rc) {
   278a4:	b958      	cbnz	r0, 278be <boot_set_confirmed_multi+0x3c>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   278a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   278aa:	2b03      	cmp	r3, #3
   278ac:	d104      	bne.n	278b8 <boot_set_confirmed_multi+0x36>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   278ae:	9803      	ldr	r0, [sp, #12]
   278b0:	f7ff feb2 	bl	27618 <boot_write_image_ok>
   278b4:	e000      	b.n	278b8 <boot_set_confirmed_multi+0x36>
        return BOOT_EBADVECT;
   278b6:	2004      	movs	r0, #4

done:
    flash_area_close(fap);
    return rc;
}
   278b8:	b005      	add	sp, #20
   278ba:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   278be:	2001      	movs	r0, #1
   278c0:	e7fa      	b.n	278b8 <boot_set_confirmed_multi+0x36>

000278c2 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   278c2:	b508      	push	{r3, lr}
    return boot_set_confirmed_multi(0);
   278c4:	2000      	movs	r0, #0
   278c6:	f7ff ffdc 	bl	27882 <boot_set_confirmed_multi>
}
   278ca:	bd08      	pop	{r3, pc}

000278cc <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   278cc:	b4f0      	push	{r4, r5, r6, r7}
   278ce:	b08c      	sub	sp, #48	; 0x30
   278d0:	4607      	mov	r7, r0
   278d2:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   278d4:	ac01      	add	r4, sp, #4
   278d6:	4d2a      	ldr	r5, [pc, #168]	; (27980 <tc_aes128_set_encrypt_key+0xb4>)
   278d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   278da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   278dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   278de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   278e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   278e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   278e8:	2f00      	cmp	r7, #0
   278ea:	d045      	beq.n	27978 <tc_aes128_set_encrypt_key+0xac>
   278ec:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   278ee:	2e00      	cmp	r6, #0
   278f0:	d044      	beq.n	2797c <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   278f2:	2300      	movs	r3, #0
   278f4:	e00f      	b.n	27916 <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   278f6:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   278fa:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   278fe:	784a      	ldrb	r2, [r1, #1]
   27900:	0412      	lsls	r2, r2, #16
   27902:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   27906:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   27908:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2790c:	78c9      	ldrb	r1, [r1, #3]
   2790e:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   27910:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   27914:	3301      	adds	r3, #1
   27916:	2b03      	cmp	r3, #3
   27918:	d9ed      	bls.n	278f6 <tc_aes128_set_encrypt_key+0x2a>
   2791a:	e006      	b.n	2792a <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   2791c:	1f19      	subs	r1, r3, #4
   2791e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   27922:	404a      	eors	r2, r1
   27924:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   27928:	3301      	adds	r3, #1
   2792a:	2b2b      	cmp	r3, #43	; 0x2b
   2792c:	d820      	bhi.n	27970 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   2792e:	1e5a      	subs	r2, r3, #1
   27930:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   27934:	f013 0f03 	tst.w	r3, #3
   27938:	d1f0      	bne.n	2791c <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   2793a:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2793e:	0e11      	lsrs	r1, r2, #24
   27940:	4c10      	ldr	r4, [pc, #64]	; (27984 <tc_aes128_set_encrypt_key+0xb8>)
   27942:	5c65      	ldrb	r5, [r4, r1]
   27944:	f3c2 4107 	ubfx	r1, r2, #16, #8
   27948:	5c61      	ldrb	r1, [r4, r1]
   2794a:	0409      	lsls	r1, r1, #16
   2794c:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   27950:	f3c2 2507 	ubfx	r5, r2, #8, #8
   27954:	5d65      	ldrb	r5, [r4, r5]
   27956:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   2795a:	b2d2      	uxtb	r2, r2
   2795c:	5ca2      	ldrb	r2, [r4, r2]
   2795e:	4311      	orrs	r1, r2
   27960:	f023 0203 	bic.w	r2, r3, #3
   27964:	ac0c      	add	r4, sp, #48	; 0x30
   27966:	4422      	add	r2, r4
   27968:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   2796c:	404a      	eors	r2, r1
   2796e:	e7d5      	b.n	2791c <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   27970:	2001      	movs	r0, #1
}
   27972:	b00c      	add	sp, #48	; 0x30
   27974:	bcf0      	pop	{r4, r5, r6, r7}
   27976:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   27978:	2000      	movs	r0, #0
   2797a:	e7fa      	b.n	27972 <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   2797c:	2000      	movs	r0, #0
   2797e:	e7f8      	b.n	27972 <tc_aes128_set_encrypt_key+0xa6>
   27980:	0002e7d8 	.word	0x0002e7d8
   27984:	0002e804 	.word	0x0002e804

00027988 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   27988:	2800      	cmp	r0, #0
   2798a:	f000 839a 	beq.w	280c2 <tc_aes_encrypt+0x73a>
{
   2798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27992:	b088      	sub	sp, #32
   27994:	4616      	mov	r6, r2
   27996:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   27998:	2900      	cmp	r1, #0
   2799a:	f000 8394 	beq.w	280c6 <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2799e:	2a00      	cmp	r2, #0
   279a0:	f000 8393 	beq.w	280ca <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   279a4:	2310      	movs	r3, #16
   279a6:	460a      	mov	r2, r1
   279a8:	4619      	mov	r1, r3
   279aa:	eb0d 0003 	add.w	r0, sp, r3
   279ae:	f000 fb91 	bl	280d4 <_copy>
	add_round_key(state, s->words);
   279b2:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   279b4:	6833      	ldr	r3, [r6, #0]
   279b6:	f89d 2010 	ldrb.w	r2, [sp, #16]
   279ba:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   279be:	f88d 2010 	strb.w	r2, [sp, #16]
   279c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
   279c6:	f89d 1011 	ldrb.w	r1, [sp, #17]
   279ca:	404a      	eors	r2, r1
   279cc:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   279d0:	f3c3 2207 	ubfx	r2, r3, #8, #8
   279d4:	f89d 1012 	ldrb.w	r1, [sp, #18]
   279d8:	404a      	eors	r2, r1
   279da:	f88d 2012 	strb.w	r2, [sp, #18]
   279de:	b2db      	uxtb	r3, r3
   279e0:	f89d 2013 	ldrb.w	r2, [sp, #19]
   279e4:	4053      	eors	r3, r2
   279e6:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   279ea:	6873      	ldr	r3, [r6, #4]
   279ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
   279f0:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   279f4:	f88d 2014 	strb.w	r2, [sp, #20]
   279f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
   279fc:	f89d 1015 	ldrb.w	r1, [sp, #21]
   27a00:	404a      	eors	r2, r1
   27a02:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27a06:	f3c3 2207 	ubfx	r2, r3, #8, #8
   27a0a:	f89d 1016 	ldrb.w	r1, [sp, #22]
   27a0e:	404a      	eors	r2, r1
   27a10:	f88d 2016 	strb.w	r2, [sp, #22]
   27a14:	b2db      	uxtb	r3, r3
   27a16:	f89d 2017 	ldrb.w	r2, [sp, #23]
   27a1a:	4053      	eors	r3, r2
   27a1c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27a20:	68b3      	ldr	r3, [r6, #8]
   27a22:	f89d 2018 	ldrb.w	r2, [sp, #24]
   27a26:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   27a2a:	f88d 2018 	strb.w	r2, [sp, #24]
   27a2e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   27a32:	f89d 1019 	ldrb.w	r1, [sp, #25]
   27a36:	404a      	eors	r2, r1
   27a38:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27a3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   27a40:	f89d 101a 	ldrb.w	r1, [sp, #26]
   27a44:	404a      	eors	r2, r1
   27a46:	f88d 201a 	strb.w	r2, [sp, #26]
   27a4a:	b2db      	uxtb	r3, r3
   27a4c:	f89d 201b 	ldrb.w	r2, [sp, #27]
   27a50:	4053      	eors	r3, r2
   27a52:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27a56:	68f3      	ldr	r3, [r6, #12]
   27a58:	f89d 201c 	ldrb.w	r2, [sp, #28]
   27a5c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   27a60:	f88d 201c 	strb.w	r2, [sp, #28]
   27a64:	f3c3 4207 	ubfx	r2, r3, #16, #8
   27a68:	f89d 101d 	ldrb.w	r1, [sp, #29]
   27a6c:	404a      	eors	r2, r1
   27a6e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   27a72:	f3c3 2207 	ubfx	r2, r3, #8, #8
   27a76:	f89d 101e 	ldrb.w	r1, [sp, #30]
   27a7a:	404a      	eors	r2, r1
   27a7c:	f88d 201e 	strb.w	r2, [sp, #30]
   27a80:	b2db      	uxtb	r3, r3
   27a82:	f89d 201f 	ldrb.w	r2, [sp, #31]
   27a86:	4053      	eors	r3, r2
   27a88:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   27a8c:	2400      	movs	r4, #0
}
   27a8e:	e239      	b.n	27f04 <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27a90:	f89d 3010 	ldrb.w	r3, [sp, #16]
   27a94:	f88d 3000 	strb.w	r3, [sp]
   27a98:	f89d 3015 	ldrb.w	r3, [sp, #21]
   27a9c:	f88d 3001 	strb.w	r3, [sp, #1]
   27aa0:	f89d 301a 	ldrb.w	r3, [sp, #26]
   27aa4:	f88d 3002 	strb.w	r3, [sp, #2]
   27aa8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27aac:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   27ab0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   27ab4:	f88d 3004 	strb.w	r3, [sp, #4]
   27ab8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   27abc:	f88d 3005 	strb.w	r3, [sp, #5]
   27ac0:	f89d 301e 	ldrb.w	r3, [sp, #30]
   27ac4:	f88d 3006 	strb.w	r3, [sp, #6]
   27ac8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   27acc:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27ad0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   27ad4:	f88d 3008 	strb.w	r3, [sp, #8]
   27ad8:	f89d 301d 	ldrb.w	r3, [sp, #29]
   27adc:	f88d 3009 	strb.w	r3, [sp, #9]
   27ae0:	f89d 3012 	ldrb.w	r3, [sp, #18]
   27ae4:	f88d 300a 	strb.w	r3, [sp, #10]
   27ae8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27aec:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27af0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   27af4:	f88d 300c 	strb.w	r3, [sp, #12]
   27af8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   27afc:	f88d 300d 	strb.w	r3, [sp, #13]
   27b00:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27b04:	f88d 300e 	strb.w	r3, [sp, #14]
   27b08:	f89d 301b 	ldrb.w	r3, [sp, #27]
   27b0c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27b10:	2310      	movs	r3, #16
   27b12:	466a      	mov	r2, sp
   27b14:	4619      	mov	r1, r3
   27b16:	eb0d 0003 	add.w	r0, sp, r3
   27b1a:	f000 fadb 	bl	280d4 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27b1e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   27b22:	f000 fae8 	bl	280f6 <_double_byte>
   27b26:	4680      	mov	r8, r0
   27b28:	f89d 0011 	ldrb.w	r0, [sp, #17]
   27b2c:	f000 fae3 	bl	280f6 <_double_byte>
   27b30:	4601      	mov	r1, r0
   27b32:	f89d 0011 	ldrb.w	r0, [sp, #17]
   27b36:	f89d 2012 	ldrb.w	r2, [sp, #18]
   27b3a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   27b3e:	4041      	eors	r1, r0
   27b40:	ea88 0801 	eor.w	r8, r8, r1
   27b44:	ea82 0208 	eor.w	r2, r2, r8
   27b48:	4053      	eors	r3, r2
   27b4a:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27b4e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   27b52:	f000 fad0 	bl	280f6 <_double_byte>
   27b56:	ea88 0800 	eor.w	r8, r8, r0
   27b5a:	fa5f f888 	uxtb.w	r8, r8
   27b5e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   27b62:	f000 fac8 	bl	280f6 <_double_byte>
   27b66:	4602      	mov	r2, r0
   27b68:	f89d 0012 	ldrb.w	r0, [sp, #18]
   27b6c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   27b70:	4042      	eors	r2, r0
   27b72:	ea88 0802 	eor.w	r8, r8, r2
   27b76:	ea83 0308 	eor.w	r3, r3, r8
   27b7a:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27b7e:	f89d 8010 	ldrb.w	r8, [sp, #16]
   27b82:	f89d 3011 	ldrb.w	r3, [sp, #17]
   27b86:	ea88 0803 	eor.w	r8, r8, r3
   27b8a:	f000 fab4 	bl	280f6 <_double_byte>
   27b8e:	ea88 0800 	eor.w	r8, r8, r0
   27b92:	fa5f f888 	uxtb.w	r8, r8
   27b96:	f89d 0013 	ldrb.w	r0, [sp, #19]
   27b9a:	f000 faac 	bl	280f6 <_double_byte>
   27b9e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   27ba2:	4058      	eors	r0, r3
   27ba4:	ea88 0800 	eor.w	r8, r8, r0
   27ba8:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27bac:	f89d 0010 	ldrb.w	r0, [sp, #16]
   27bb0:	f000 faa1 	bl	280f6 <_double_byte>
   27bb4:	f89d 2010 	ldrb.w	r2, [sp, #16]
   27bb8:	f89d 3011 	ldrb.w	r3, [sp, #17]
   27bbc:	f89d 8012 	ldrb.w	r8, [sp, #18]
   27bc0:	4050      	eors	r0, r2
   27bc2:	4043      	eors	r3, r0
   27bc4:	ea88 0803 	eor.w	r8, r8, r3
   27bc8:	fa5f f888 	uxtb.w	r8, r8
   27bcc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   27bd0:	f000 fa91 	bl	280f6 <_double_byte>
   27bd4:	ea88 0800 	eor.w	r8, r8, r0
   27bd8:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27bdc:	f89d 0014 	ldrb.w	r0, [sp, #20]
   27be0:	f000 fa89 	bl	280f6 <_double_byte>
   27be4:	4680      	mov	r8, r0
   27be6:	f89d 0015 	ldrb.w	r0, [sp, #21]
   27bea:	f000 fa84 	bl	280f6 <_double_byte>
   27bee:	4601      	mov	r1, r0
   27bf0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   27bf4:	f89d 2016 	ldrb.w	r2, [sp, #22]
   27bf8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27bfc:	4041      	eors	r1, r0
   27bfe:	ea88 0801 	eor.w	r8, r8, r1
   27c02:	ea82 0208 	eor.w	r2, r2, r8
   27c06:	4053      	eors	r3, r2
   27c08:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27c0c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   27c10:	f000 fa71 	bl	280f6 <_double_byte>
   27c14:	ea88 0800 	eor.w	r8, r8, r0
   27c18:	fa5f f888 	uxtb.w	r8, r8
   27c1c:	f89d 0016 	ldrb.w	r0, [sp, #22]
   27c20:	f000 fa69 	bl	280f6 <_double_byte>
   27c24:	4602      	mov	r2, r0
   27c26:	f89d 0016 	ldrb.w	r0, [sp, #22]
   27c2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27c2e:	4042      	eors	r2, r0
   27c30:	ea88 0802 	eor.w	r8, r8, r2
   27c34:	ea83 0308 	eor.w	r3, r3, r8
   27c38:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27c3c:	f89d 8014 	ldrb.w	r8, [sp, #20]
   27c40:	f89d 3015 	ldrb.w	r3, [sp, #21]
   27c44:	ea88 0803 	eor.w	r8, r8, r3
   27c48:	f000 fa55 	bl	280f6 <_double_byte>
   27c4c:	ea88 0800 	eor.w	r8, r8, r0
   27c50:	fa5f f888 	uxtb.w	r8, r8
   27c54:	f89d 0017 	ldrb.w	r0, [sp, #23]
   27c58:	f000 fa4d 	bl	280f6 <_double_byte>
   27c5c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27c60:	4058      	eors	r0, r3
   27c62:	ea88 0800 	eor.w	r8, r8, r0
   27c66:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27c6a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   27c6e:	f000 fa42 	bl	280f6 <_double_byte>
   27c72:	f89d 2014 	ldrb.w	r2, [sp, #20]
   27c76:	f89d 3015 	ldrb.w	r3, [sp, #21]
   27c7a:	f89d 8016 	ldrb.w	r8, [sp, #22]
   27c7e:	4050      	eors	r0, r2
   27c80:	4043      	eors	r3, r0
   27c82:	ea88 0803 	eor.w	r8, r8, r3
   27c86:	fa5f f888 	uxtb.w	r8, r8
   27c8a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   27c8e:	f000 fa32 	bl	280f6 <_double_byte>
   27c92:	ea88 0800 	eor.w	r8, r8, r0
   27c96:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27c9a:	f89d 0018 	ldrb.w	r0, [sp, #24]
   27c9e:	f000 fa2a 	bl	280f6 <_double_byte>
   27ca2:	4680      	mov	r8, r0
   27ca4:	f89d 0019 	ldrb.w	r0, [sp, #25]
   27ca8:	f000 fa25 	bl	280f6 <_double_byte>
   27cac:	4601      	mov	r1, r0
   27cae:	f89d 0019 	ldrb.w	r0, [sp, #25]
   27cb2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   27cb6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   27cba:	4041      	eors	r1, r0
   27cbc:	ea88 0801 	eor.w	r8, r8, r1
   27cc0:	ea82 0208 	eor.w	r2, r2, r8
   27cc4:	4053      	eors	r3, r2
   27cc6:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27cca:	f89d 8018 	ldrb.w	r8, [sp, #24]
   27cce:	f000 fa12 	bl	280f6 <_double_byte>
   27cd2:	ea88 0800 	eor.w	r8, r8, r0
   27cd6:	fa5f f888 	uxtb.w	r8, r8
   27cda:	f89d 001a 	ldrb.w	r0, [sp, #26]
   27cde:	f000 fa0a 	bl	280f6 <_double_byte>
   27ce2:	4602      	mov	r2, r0
   27ce4:	f89d 001a 	ldrb.w	r0, [sp, #26]
   27ce8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   27cec:	4042      	eors	r2, r0
   27cee:	ea88 0802 	eor.w	r8, r8, r2
   27cf2:	ea83 0308 	eor.w	r3, r3, r8
   27cf6:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27cfa:	f89d 8018 	ldrb.w	r8, [sp, #24]
   27cfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
   27d02:	ea88 0803 	eor.w	r8, r8, r3
   27d06:	f000 f9f6 	bl	280f6 <_double_byte>
   27d0a:	ea88 0800 	eor.w	r8, r8, r0
   27d0e:	fa5f f888 	uxtb.w	r8, r8
   27d12:	f89d 001b 	ldrb.w	r0, [sp, #27]
   27d16:	f000 f9ee 	bl	280f6 <_double_byte>
   27d1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   27d1e:	4058      	eors	r0, r3
   27d20:	ea88 0800 	eor.w	r8, r8, r0
   27d24:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27d28:	f89d 0018 	ldrb.w	r0, [sp, #24]
   27d2c:	f000 f9e3 	bl	280f6 <_double_byte>
   27d30:	f89d 2018 	ldrb.w	r2, [sp, #24]
   27d34:	f89d 3019 	ldrb.w	r3, [sp, #25]
   27d38:	f89d 801a 	ldrb.w	r8, [sp, #26]
   27d3c:	4050      	eors	r0, r2
   27d3e:	4043      	eors	r3, r0
   27d40:	ea88 0803 	eor.w	r8, r8, r3
   27d44:	fa5f f888 	uxtb.w	r8, r8
   27d48:	f89d 001b 	ldrb.w	r0, [sp, #27]
   27d4c:	f000 f9d3 	bl	280f6 <_double_byte>
   27d50:	ea88 0800 	eor.w	r8, r8, r0
   27d54:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   27d58:	f89d 001c 	ldrb.w	r0, [sp, #28]
   27d5c:	f000 f9cb 	bl	280f6 <_double_byte>
   27d60:	4680      	mov	r8, r0
   27d62:	f89d 001d 	ldrb.w	r0, [sp, #29]
   27d66:	f000 f9c6 	bl	280f6 <_double_byte>
   27d6a:	4601      	mov	r1, r0
   27d6c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   27d70:	f89d 201e 	ldrb.w	r2, [sp, #30]
   27d74:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27d78:	4041      	eors	r1, r0
   27d7a:	ea88 0801 	eor.w	r8, r8, r1
   27d7e:	ea82 0208 	eor.w	r2, r2, r8
   27d82:	4053      	eors	r3, r2
   27d84:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   27d88:	f89d 801c 	ldrb.w	r8, [sp, #28]
   27d8c:	f000 f9b3 	bl	280f6 <_double_byte>
   27d90:	ea88 0800 	eor.w	r8, r8, r0
   27d94:	fa5f f888 	uxtb.w	r8, r8
   27d98:	f89d 001e 	ldrb.w	r0, [sp, #30]
   27d9c:	f000 f9ab 	bl	280f6 <_double_byte>
   27da0:	4602      	mov	r2, r0
   27da2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   27da6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27daa:	4042      	eors	r2, r0
   27dac:	ea88 0802 	eor.w	r8, r8, r2
   27db0:	ea83 0308 	eor.w	r3, r3, r8
   27db4:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27db8:	f89d 801c 	ldrb.w	r8, [sp, #28]
   27dbc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   27dc0:	ea88 0803 	eor.w	r8, r8, r3
   27dc4:	f000 f997 	bl	280f6 <_double_byte>
   27dc8:	ea88 0800 	eor.w	r8, r8, r0
   27dcc:	fa5f f888 	uxtb.w	r8, r8
   27dd0:	f89d 001f 	ldrb.w	r0, [sp, #31]
   27dd4:	f000 f98f 	bl	280f6 <_double_byte>
   27dd8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27ddc:	4058      	eors	r0, r3
   27dde:	ea88 0800 	eor.w	r8, r8, r0
   27de2:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   27de6:	f89d 001c 	ldrb.w	r0, [sp, #28]
   27dea:	f000 f984 	bl	280f6 <_double_byte>
   27dee:	f89d 201c 	ldrb.w	r2, [sp, #28]
   27df2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   27df6:	f89d 801e 	ldrb.w	r8, [sp, #30]
   27dfa:	4050      	eors	r0, r2
   27dfc:	4043      	eors	r3, r0
   27dfe:	ea88 0803 	eor.w	r8, r8, r3
   27e02:	fa5f f888 	uxtb.w	r8, r8
   27e06:	f89d 001f 	ldrb.w	r0, [sp, #31]
   27e0a:	f000 f974 	bl	280f6 <_double_byte>
   27e0e:	ea88 0800 	eor.w	r8, r8, r0
   27e12:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27e16:	2310      	movs	r3, #16
   27e18:	466a      	mov	r2, sp
   27e1a:	4619      	mov	r1, r3
   27e1c:	eb0d 0003 	add.w	r0, sp, r3
   27e20:	f000 f958 	bl	280d4 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   27e24:	3401      	adds	r4, #1
   27e26:	0123      	lsls	r3, r4, #4
   27e28:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27e2c:	58eb      	ldr	r3, [r5, r3]
   27e2e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   27e32:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   27e36:	f88d 1010 	strb.w	r1, [sp, #16]
   27e3a:	f3c3 4107 	ubfx	r1, r3, #16, #8
   27e3e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   27e42:	4041      	eors	r1, r0
   27e44:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27e48:	f3c3 2107 	ubfx	r1, r3, #8, #8
   27e4c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   27e50:	4041      	eors	r1, r0
   27e52:	f88d 1012 	strb.w	r1, [sp, #18]
   27e56:	b2db      	uxtb	r3, r3
   27e58:	f89d 1013 	ldrb.w	r1, [sp, #19]
   27e5c:	404b      	eors	r3, r1
   27e5e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27e62:	6853      	ldr	r3, [r2, #4]
   27e64:	f89d 1014 	ldrb.w	r1, [sp, #20]
   27e68:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   27e6c:	f88d 1014 	strb.w	r1, [sp, #20]
   27e70:	f3c3 4107 	ubfx	r1, r3, #16, #8
   27e74:	f89d 0015 	ldrb.w	r0, [sp, #21]
   27e78:	4041      	eors	r1, r0
   27e7a:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   27e7e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   27e82:	f89d 0016 	ldrb.w	r0, [sp, #22]
   27e86:	4041      	eors	r1, r0
   27e88:	f88d 1016 	strb.w	r1, [sp, #22]
   27e8c:	b2db      	uxtb	r3, r3
   27e8e:	f89d 1017 	ldrb.w	r1, [sp, #23]
   27e92:	404b      	eors	r3, r1
   27e94:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   27e98:	6893      	ldr	r3, [r2, #8]
   27e9a:	f89d 1018 	ldrb.w	r1, [sp, #24]
   27e9e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   27ea2:	f88d 1018 	strb.w	r1, [sp, #24]
   27ea6:	f3c3 4107 	ubfx	r1, r3, #16, #8
   27eaa:	f89d 0019 	ldrb.w	r0, [sp, #25]
   27eae:	4041      	eors	r1, r0
   27eb0:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   27eb4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   27eb8:	f89d 001a 	ldrb.w	r0, [sp, #26]
   27ebc:	4041      	eors	r1, r0
   27ebe:	f88d 101a 	strb.w	r1, [sp, #26]
   27ec2:	b2db      	uxtb	r3, r3
   27ec4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   27ec8:	404b      	eors	r3, r1
   27eca:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   27ece:	68d3      	ldr	r3, [r2, #12]
   27ed0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   27ed4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   27ed8:	f88d 201c 	strb.w	r2, [sp, #28]
   27edc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   27ee0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   27ee4:	404a      	eors	r2, r1
   27ee6:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   27eea:	f3c3 2207 	ubfx	r2, r3, #8, #8
   27eee:	f89d 101e 	ldrb.w	r1, [sp, #30]
   27ef2:	404a      	eors	r2, r1
   27ef4:	f88d 201e 	strb.w	r2, [sp, #30]
   27ef8:	b2db      	uxtb	r3, r3
   27efa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   27efe:	4053      	eors	r3, r2
   27f00:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   27f04:	2c08      	cmp	r4, #8
   27f06:	d80a      	bhi.n	27f1e <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   27f08:	2300      	movs	r3, #0
   27f0a:	2b0f      	cmp	r3, #15
   27f0c:	f63f adc0 	bhi.w	27a90 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   27f10:	a904      	add	r1, sp, #16
   27f12:	5cc8      	ldrb	r0, [r1, r3]
   27f14:	4a6e      	ldr	r2, [pc, #440]	; (280d0 <tc_aes_encrypt+0x748>)
   27f16:	5c10      	ldrb	r0, [r2, r0]
   27f18:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   27f1a:	3301      	adds	r3, #1
   27f1c:	e7f5      	b.n	27f0a <tc_aes_encrypt+0x582>
   27f1e:	2300      	movs	r3, #0
   27f20:	e005      	b.n	27f2e <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   27f22:	aa04      	add	r2, sp, #16
   27f24:	5cd1      	ldrb	r1, [r2, r3]
   27f26:	486a      	ldr	r0, [pc, #424]	; (280d0 <tc_aes_encrypt+0x748>)
   27f28:	5c41      	ldrb	r1, [r0, r1]
   27f2a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   27f2c:	3301      	adds	r3, #1
   27f2e:	2b0f      	cmp	r3, #15
   27f30:	d9f7      	bls.n	27f22 <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   27f32:	f89d 3010 	ldrb.w	r3, [sp, #16]
   27f36:	f88d 3000 	strb.w	r3, [sp]
   27f3a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   27f3e:	f88d 3001 	strb.w	r3, [sp, #1]
   27f42:	f89d 301a 	ldrb.w	r3, [sp, #26]
   27f46:	f88d 3002 	strb.w	r3, [sp, #2]
   27f4a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27f4e:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   27f52:	f89d 3014 	ldrb.w	r3, [sp, #20]
   27f56:	f88d 3004 	strb.w	r3, [sp, #4]
   27f5a:	f89d 3019 	ldrb.w	r3, [sp, #25]
   27f5e:	f88d 3005 	strb.w	r3, [sp, #5]
   27f62:	f89d 301e 	ldrb.w	r3, [sp, #30]
   27f66:	f88d 3006 	strb.w	r3, [sp, #6]
   27f6a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   27f6e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27f72:	f89d 3018 	ldrb.w	r3, [sp, #24]
   27f76:	f88d 3008 	strb.w	r3, [sp, #8]
   27f7a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   27f7e:	f88d 3009 	strb.w	r3, [sp, #9]
   27f82:	f89d 3012 	ldrb.w	r3, [sp, #18]
   27f86:	f88d 300a 	strb.w	r3, [sp, #10]
   27f8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   27f8e:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   27f92:	f89d 301c 	ldrb.w	r3, [sp, #28]
   27f96:	f88d 300c 	strb.w	r3, [sp, #12]
   27f9a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   27f9e:	f88d 300d 	strb.w	r3, [sp, #13]
   27fa2:	f89d 3016 	ldrb.w	r3, [sp, #22]
   27fa6:	f88d 300e 	strb.w	r3, [sp, #14]
   27faa:	f89d 301b 	ldrb.w	r3, [sp, #27]
   27fae:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27fb2:	2310      	movs	r3, #16
   27fb4:	466a      	mov	r2, sp
   27fb6:	4619      	mov	r1, r3
   27fb8:	eb0d 0003 	add.w	r0, sp, r3
   27fbc:	f000 f88a 	bl	280d4 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   27fc0:	1c63      	adds	r3, r4, #1
   27fc2:	011a      	lsls	r2, r3, #4
   27fc4:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   27fc8:	58b2      	ldr	r2, [r6, r2]
   27fca:	f89d 1010 	ldrb.w	r1, [sp, #16]
   27fce:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   27fd2:	f88d 1010 	strb.w	r1, [sp, #16]
   27fd6:	f3c2 4107 	ubfx	r1, r2, #16, #8
   27fda:	f89d 0011 	ldrb.w	r0, [sp, #17]
   27fde:	4041      	eors	r1, r0
   27fe0:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   27fe4:	f3c2 2107 	ubfx	r1, r2, #8, #8
   27fe8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   27fec:	4041      	eors	r1, r0
   27fee:	f88d 1012 	strb.w	r1, [sp, #18]
   27ff2:	b2d2      	uxtb	r2, r2
   27ff4:	f89d 1013 	ldrb.w	r1, [sp, #19]
   27ff8:	404a      	eors	r2, r1
   27ffa:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   27ffe:	685a      	ldr	r2, [r3, #4]
   28000:	f89d 1014 	ldrb.w	r1, [sp, #20]
   28004:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   28008:	f88d 1014 	strb.w	r1, [sp, #20]
   2800c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   28010:	f89d 0015 	ldrb.w	r0, [sp, #21]
   28014:	4041      	eors	r1, r0
   28016:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2801a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2801e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   28022:	4041      	eors	r1, r0
   28024:	f88d 1016 	strb.w	r1, [sp, #22]
   28028:	b2d2      	uxtb	r2, r2
   2802a:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2802e:	404a      	eors	r2, r1
   28030:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   28034:	689a      	ldr	r2, [r3, #8]
   28036:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2803a:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   2803e:	f88d 1018 	strb.w	r1, [sp, #24]
   28042:	f3c2 4107 	ubfx	r1, r2, #16, #8
   28046:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2804a:	4041      	eors	r1, r0
   2804c:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   28050:	f3c2 2107 	ubfx	r1, r2, #8, #8
   28054:	f89d 001a 	ldrb.w	r0, [sp, #26]
   28058:	4041      	eors	r1, r0
   2805a:	f88d 101a 	strb.w	r1, [sp, #26]
   2805e:	b2d2      	uxtb	r2, r2
   28060:	f89d 101b 	ldrb.w	r1, [sp, #27]
   28064:	404a      	eors	r2, r1
   28066:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2806a:	68db      	ldr	r3, [r3, #12]
   2806c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   28070:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   28074:	f88d 201c 	strb.w	r2, [sp, #28]
   28078:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2807c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   28080:	404a      	eors	r2, r1
   28082:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   28086:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2808a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2808e:	404a      	eors	r2, r1
   28090:	f88d 201e 	strb.w	r2, [sp, #30]
   28094:	b2db      	uxtb	r3, r3
   28096:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2809a:	4053      	eors	r3, r2
   2809c:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   280a0:	2310      	movs	r3, #16
   280a2:	eb0d 0203 	add.w	r2, sp, r3
   280a6:	4619      	mov	r1, r3
   280a8:	4638      	mov	r0, r7
   280aa:	f000 f813 	bl	280d4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   280ae:	2210      	movs	r2, #16
   280b0:	2100      	movs	r1, #0
   280b2:	eb0d 0002 	add.w	r0, sp, r2
   280b6:	f000 f81a 	bl	280ee <_set>

	return TC_CRYPTO_SUCCESS;
   280ba:	2001      	movs	r0, #1
}
   280bc:	b008      	add	sp, #32
   280be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   280c2:	2000      	movs	r0, #0
}
   280c4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   280c6:	2000      	movs	r0, #0
   280c8:	e7f8      	b.n	280bc <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   280ca:	2000      	movs	r0, #0
   280cc:	e7f6      	b.n	280bc <tc_aes_encrypt+0x734>
   280ce:	bf00      	nop
   280d0:	0002e804 	.word	0x0002e804

000280d4 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   280d4:	428b      	cmp	r3, r1
   280d6:	d901      	bls.n	280dc <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   280d8:	2000      	movs	r0, #0
	}
}
   280da:	4770      	bx	lr
{
   280dc:	b538      	push	{r3, r4, r5, lr}
   280de:	4615      	mov	r5, r2
   280e0:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   280e2:	461a      	mov	r2, r3
   280e4:	4629      	mov	r1, r5
   280e6:	f7e6 fc67 	bl	e9b8 <memcpy>
		return from_len;
   280ea:	4620      	mov	r0, r4
}
   280ec:	bd38      	pop	{r3, r4, r5, pc}

000280ee <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   280ee:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   280f0:	f7e6 fc87 	bl	ea02 <memset>
}
   280f4:	bd08      	pop	{r3, pc}

000280f6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   280f6:	09c3      	lsrs	r3, r0, #7
   280f8:	005a      	lsls	r2, r3, #1
   280fa:	4413      	add	r3, r2
   280fc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28100:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28104:	b2c0      	uxtb	r0, r0
   28106:	4770      	bx	lr

00028108 <base64_encode>:
    return -1;
}

int
base64_encode(const void *data, int size, char *s, uint8_t should_pad)
{
   28108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2810a:	4616      	mov	r6, r2
    int c;
    const unsigned char *q;
    char *last;
    int diff;

    p = s;
   2810c:	4615      	mov	r5, r2

    q = (const unsigned char *) data;
    last = NULL;
   2810e:	2400      	movs	r4, #0
    i = 0;
   28110:	4622      	mov	r2, r4
    while (i < size) {
   28112:	e019      	b.n	28148 <base64_encode+0x40>
            c += q[i];
        i++;
        c *= 256;
        if (i < size)
            c += q[i];
        i++;
   28114:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   28116:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   2811a:	4f1d      	ldr	r7, [pc, #116]	; (28190 <base64_encode+0x88>)
   2811c:	f817 c00c 	ldrb.w	ip, [r7, ip]
   28120:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   28124:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   28128:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2812c:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   28130:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   28134:	f817 c00c 	ldrb.w	ip, [r7, ip]
   28138:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   2813c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   28140:	5d3c      	ldrb	r4, [r7, r4]
   28142:	70ec      	strb	r4, [r5, #3]
        last = p;
   28144:	462c      	mov	r4, r5
        p += 4;
   28146:	3504      	adds	r5, #4
    while (i < size) {
   28148:	428a      	cmp	r2, r1
   2814a:	da0d      	bge.n	28168 <base64_encode+0x60>
        c = q[i++];
   2814c:	1c57      	adds	r7, r2, #1
   2814e:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   28150:	0224      	lsls	r4, r4, #8
        if (i < size)
   28152:	42b9      	cmp	r1, r7
   28154:	dd01      	ble.n	2815a <base64_encode+0x52>
            c += q[i];
   28156:	5dc7      	ldrb	r7, [r0, r7]
   28158:	443c      	add	r4, r7
        i++;
   2815a:	1c97      	adds	r7, r2, #2
        c *= 256;
   2815c:	0224      	lsls	r4, r4, #8
        if (i < size)
   2815e:	42b9      	cmp	r1, r7
   28160:	ddd8      	ble.n	28114 <base64_encode+0xc>
            c += q[i];
   28162:	5dc7      	ldrb	r7, [r0, r7]
   28164:	443c      	add	r4, r7
   28166:	e7d5      	b.n	28114 <base64_encode+0xc>
    }

    if (last) {
   28168:	b134      	cbz	r4, 28178 <base64_encode+0x70>
        diff = i - size;
   2816a:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   2816c:	2a00      	cmp	r2, #0
   2816e:	dd03      	ble.n	28178 <base64_encode+0x70>
            if (should_pad) {
   28170:	b933      	cbnz	r3, 28180 <base64_encode+0x78>
                memset(last + (4 - diff), '=', diff);
            } else {
                p = last + (4 - diff);
   28172:	f1c2 0304 	rsb	r3, r2, #4
   28176:	18e5      	adds	r5, r4, r3
            }
        }
    }

    *p = 0;
   28178:	2300      	movs	r3, #0
   2817a:	702b      	strb	r3, [r5, #0]

    return (p - s);
}
   2817c:	1ba8      	subs	r0, r5, r6
   2817e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   28180:	f1c2 0004 	rsb	r0, r2, #4
   28184:	213d      	movs	r1, #61	; 0x3d
   28186:	4420      	add	r0, r4
   28188:	f7e6 fc3b 	bl	ea02 <memset>
   2818c:	e7f4      	b.n	28178 <base64_encode+0x70>
   2818e:	bf00      	nop
   28190:	0002e904 	.word	0x0002e904

00028194 <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   28194:	69c3      	ldr	r3, [r0, #28]
}
   28196:	5c58      	ldrb	r0, [r3, r1]
   28198:	4770      	bx	lr

0002819a <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   2819a:	b510      	push	{r4, lr}
   2819c:	4604      	mov	r4, r0
   2819e:	4608      	mov	r0, r1
   281a0:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   281a2:	69e4      	ldr	r4, [r4, #28]
   281a4:	461a      	mov	r2, r3
   281a6:	4421      	add	r1, r4
   281a8:	f7e6 fc06 	bl	e9b8 <memcpy>
}
   281ac:	bd10      	pop	{r4, pc}

000281ae <cbor_buf_reader_cmp>:
{
   281ae:	b510      	push	{r4, lr}
   281b0:	4604      	mov	r4, r0
   281b2:	4608      	mov	r0, r1
   281b4:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   281b6:	69e4      	ldr	r4, [r4, #28]
   281b8:	461a      	mov	r2, r3
   281ba:	4421      	add	r1, r4
   281bc:	f7e6 fbd8 	bl	e970 <memcmp>
}
   281c0:	fab0 f080 	clz	r0, r0
   281c4:	0940      	lsrs	r0, r0, #5
   281c6:	bd10      	pop	{r4, pc}

000281c8 <cbuf_buf_reader_get64>:
{
   281c8:	b410      	push	{r4}
   281ca:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   281cc:	69c2      	ldr	r2, [r0, #28]
   281ce:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   281d0:	466b      	mov	r3, sp
   281d2:	5850      	ldr	r0, [r2, r1]
   281d4:	6861      	ldr	r1, [r4, #4]
   281d6:	c303      	stmia	r3!, {r0, r1}
}
   281d8:	ba08      	rev	r0, r1
   281da:	9900      	ldr	r1, [sp, #0]
   281dc:	ba09      	rev	r1, r1
   281de:	b003      	add	sp, #12
   281e0:	bc10      	pop	{r4}
   281e2:	4770      	bx	lr

000281e4 <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   281e4:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   281e6:	5858      	ldr	r0, [r3, r1]
}
   281e8:	ba00      	rev	r0, r0
   281ea:	4770      	bx	lr

000281ec <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   281ec:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   281ee:	5a58      	ldrh	r0, [r3, r1]
   281f0:	ba40      	rev16	r0, r0
}
   281f2:	b280      	uxth	r0, r0
   281f4:	4770      	bx	lr
	...

000281f8 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   281f8:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   281fa:	4b07      	ldr	r3, [pc, #28]	; (28218 <cbor_buf_reader_init+0x20>)
   281fc:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   281fe:	4b07      	ldr	r3, [pc, #28]	; (2821c <cbor_buf_reader_init+0x24>)
   28200:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   28202:	4b07      	ldr	r3, [pc, #28]	; (28220 <cbor_buf_reader_init+0x28>)
   28204:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   28206:	4b07      	ldr	r3, [pc, #28]	; (28224 <cbor_buf_reader_init+0x2c>)
   28208:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   2820a:	4b07      	ldr	r3, [pc, #28]	; (28228 <cbor_buf_reader_init+0x30>)
   2820c:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   2820e:	4b07      	ldr	r3, [pc, #28]	; (2822c <cbor_buf_reader_init+0x34>)
   28210:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   28212:	6182      	str	r2, [r0, #24]
}
   28214:	4770      	bx	lr
   28216:	bf00      	nop
   28218:	00028195 	.word	0x00028195
   2821c:	000281ed 	.word	0x000281ed
   28220:	000281e5 	.word	0x000281e5
   28224:	000281c9 	.word	0x000281c9
   28228:	000281af 	.word	0x000281af
   2822c:	0002819b 	.word	0x0002819b

00028230 <cbor_buf_writer>:
    return (remaining < 0);
}

int
cbor_buf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   28230:	b538      	push	{r3, r4, r5, lr}
   28232:	4604      	mov	r4, r0
    ptrdiff_t remaining = (ptrdiff_t)cb->end;
   28234:	68c3      	ldr	r3, [r0, #12]
    remaining -= (ptrdiff_t)cb->ptr;
   28236:	6880      	ldr	r0, [r0, #8]
   28238:	1a1b      	subs	r3, r3, r0
    remaining -= (ptrdiff_t)len;
   2823a:	1a9b      	subs	r3, r3, r2
    struct cbor_buf_writer *cb = (struct cbor_buf_writer *) arg;

    if (would_overflow(cb, len)) {
   2823c:	2b00      	cmp	r3, #0
   2823e:	db0a      	blt.n	28256 <cbor_buf_writer+0x26>
   28240:	4615      	mov	r5, r2
        return CborErrorOutOfMemory;
    }

    memcpy(cb->ptr, data, len);
   28242:	f7e6 fbb9 	bl	e9b8 <memcpy>
    cb->ptr += len;
   28246:	68a3      	ldr	r3, [r4, #8]
   28248:	442b      	add	r3, r5
   2824a:	60a3      	str	r3, [r4, #8]
    cb->enc.bytes_written += len;
   2824c:	6862      	ldr	r2, [r4, #4]
   2824e:	442a      	add	r2, r5
   28250:	6062      	str	r2, [r4, #4]
    return CborNoError;
   28252:	2000      	movs	r0, #0
}
   28254:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   28256:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2825a:	e7fb      	b.n	28254 <cbor_buf_writer+0x24>

0002825c <cbor_buf_writer_init>:

void
cbor_buf_writer_init(struct cbor_buf_writer *cb, uint8_t *buffer, size_t size)
{
    cb->ptr = buffer;
   2825c:	6081      	str	r1, [r0, #8]
    cb->end = buffer + size;
   2825e:	4411      	add	r1, r2
   28260:	60c1      	str	r1, [r0, #12]
    cb->enc.bytes_written = 0;
   28262:	2300      	movs	r3, #0
   28264:	6043      	str	r3, [r0, #4]
    cb->enc.write = cbor_buf_writer;
   28266:	4b01      	ldr	r3, [pc, #4]	; (2826c <cbor_buf_writer_init+0x10>)
   28268:	6003      	str	r3, [r0, #0]
}
   2826a:	4770      	bx	lr
   2826c:	00028231 	.word	0x00028231

00028270 <cbor_buf_writer_buffer_size>:

size_t
cbor_buf_writer_buffer_size(struct cbor_buf_writer *cb, const uint8_t *buffer)
{
    return (size_t)(cb->ptr - buffer);
   28270:	6880      	ldr	r0, [r0, #8]
}
   28272:	1a40      	subs	r0, r0, r1
   28274:	4770      	bx	lr

00028276 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   28276:	b538      	push	{r3, r4, r5, lr}
   28278:	4614      	mov	r4, r2
   2827a:	461a      	mov	r2, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   2827c:	69c5      	ldr	r5, [r0, #28]
   2827e:	460b      	mov	r3, r1
   28280:	1929      	adds	r1, r5, r4
   28282:	6a00      	ldr	r0, [r0, #32]
   28284:	f7e5 f9a0 	bl	d5c8 <os_mbuf_copydata>
    if (rc == 0) {
   28288:	b108      	cbz	r0, 2828e <cbor_mbuf_reader_cpy+0x18>
        return true;
    }
    return false;
   2828a:	2000      	movs	r0, #0
}
   2828c:	bd38      	pop	{r3, r4, r5, pc}
        return true;
   2828e:	2001      	movs	r0, #1
   28290:	e7fc      	b.n	2828c <cbor_mbuf_reader_cpy+0x16>

00028292 <cbor_mbuf_reader_get8>:
{
   28292:	b510      	push	{r4, lr}
   28294:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28296:	69c4      	ldr	r4, [r0, #28]
   28298:	f10d 0307 	add.w	r3, sp, #7
   2829c:	2201      	movs	r2, #1
   2829e:	4421      	add	r1, r4
   282a0:	6a00      	ldr	r0, [r0, #32]
   282a2:	f7e5 f991 	bl	d5c8 <os_mbuf_copydata>
}
   282a6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   282aa:	b002      	add	sp, #8
   282ac:	bd10      	pop	{r4, pc}

000282ae <cbor_mbuf_reader_cmp>:
{
   282ae:	b538      	push	{r3, r4, r5, lr}
   282b0:	4614      	mov	r4, r2
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   282b2:	69c5      	ldr	r5, [r0, #28]
   282b4:	460a      	mov	r2, r1
   282b6:	1929      	adds	r1, r5, r4
   282b8:	6a00      	ldr	r0, [r0, #32]
   282ba:	f7e5 fa03 	bl	d6c4 <os_mbuf_cmpf>
}
   282be:	fab0 f080 	clz	r0, r0
   282c2:	0940      	lsrs	r0, r0, #5
   282c4:	bd38      	pop	{r3, r4, r5, pc}

000282c6 <cbor_mbuf_reader_get64>:
{
   282c6:	b510      	push	{r4, lr}
   282c8:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   282ca:	69c4      	ldr	r4, [r0, #28]
   282cc:	466b      	mov	r3, sp
   282ce:	2208      	movs	r2, #8
   282d0:	4421      	add	r1, r4
   282d2:	6a00      	ldr	r0, [r0, #32]
   282d4:	f7e5 f978 	bl	d5c8 <os_mbuf_copydata>
}
   282d8:	9801      	ldr	r0, [sp, #4]
   282da:	ba00      	rev	r0, r0
   282dc:	9900      	ldr	r1, [sp, #0]
   282de:	ba09      	rev	r1, r1
   282e0:	b002      	add	sp, #8
   282e2:	bd10      	pop	{r4, pc}

000282e4 <cbor_mbuf_reader_get32>:
{
   282e4:	b510      	push	{r4, lr}
   282e6:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   282e8:	69c4      	ldr	r4, [r0, #28]
   282ea:	ab01      	add	r3, sp, #4
   282ec:	2204      	movs	r2, #4
   282ee:	4421      	add	r1, r4
   282f0:	6a00      	ldr	r0, [r0, #32]
   282f2:	f7e5 f969 	bl	d5c8 <os_mbuf_copydata>
}
   282f6:	9801      	ldr	r0, [sp, #4]
   282f8:	ba00      	rev	r0, r0
   282fa:	b002      	add	sp, #8
   282fc:	bd10      	pop	{r4, pc}

000282fe <cbor_mbuf_reader_get16>:
{
   282fe:	b510      	push	{r4, lr}
   28300:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28302:	69c4      	ldr	r4, [r0, #28]
   28304:	f10d 0306 	add.w	r3, sp, #6
   28308:	2202      	movs	r2, #2
   2830a:	4421      	add	r1, r4
   2830c:	6a00      	ldr	r0, [r0, #32]
   2830e:	f7e5 f95b 	bl	d5c8 <os_mbuf_copydata>
    return cbor_ntohs(val);
   28312:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   28316:	ba40      	rev16	r0, r0
}
   28318:	b280      	uxth	r0, r0
   2831a:	b002      	add	sp, #8
   2831c:	bd10      	pop	{r4, pc}
	...

00028320 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   28320:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   28322:	4b0f      	ldr	r3, [pc, #60]	; (28360 <cbor_mbuf_reader_init+0x40>)
   28324:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   28326:	4b0f      	ldr	r3, [pc, #60]	; (28364 <cbor_mbuf_reader_init+0x44>)
   28328:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   2832a:	4b0f      	ldr	r3, [pc, #60]	; (28368 <cbor_mbuf_reader_init+0x48>)
   2832c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   2832e:	4b0f      	ldr	r3, [pc, #60]	; (2836c <cbor_mbuf_reader_init+0x4c>)
   28330:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   28332:	4b0f      	ldr	r3, [pc, #60]	; (28370 <cbor_mbuf_reader_init+0x50>)
   28334:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   28336:	4b0f      	ldr	r3, [pc, #60]	; (28374 <cbor_mbuf_reader_init+0x54>)
   28338:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   2833a:	794b      	ldrb	r3, [r1, #5]
   2833c:	2b07      	cmp	r3, #7
   2833e:	d905      	bls.n	2834c <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   28340:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   28342:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   28344:	8a0b      	ldrh	r3, [r1, #16]
   28346:	1a9a      	subs	r2, r3, r2
   28348:	6182      	str	r2, [r0, #24]
}
   2834a:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   2834c:	f7e3 ff26 	bl	c19c <hal_debugger_connected>
   28350:	b100      	cbz	r0, 28354 <cbor_mbuf_reader_init+0x34>
   28352:	be01      	bkpt	0x0001
   28354:	2300      	movs	r3, #0
   28356:	461a      	mov	r2, r3
   28358:	4619      	mov	r1, r3
   2835a:	4618      	mov	r0, r3
   2835c:	f7e4 fc22 	bl	cba4 <__assert_func>
   28360:	00028293 	.word	0x00028293
   28364:	000282ff 	.word	0x000282ff
   28368:	000282e5 	.word	0x000282e5
   2836c:	000282c7 	.word	0x000282c7
   28370:	000282af 	.word	0x000282af
   28374:	00028277 	.word	0x00028277

00028378 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   28378:	b538      	push	{r3, r4, r5, lr}
   2837a:	4604      	mov	r4, r0
   2837c:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   2837e:	b292      	uxth	r2, r2
   28380:	6880      	ldr	r0, [r0, #8]
   28382:	f7e5 f890 	bl	d4a6 <os_mbuf_append>
    if (rc) {
   28386:	b918      	cbnz	r0, 28390 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   28388:	6862      	ldr	r2, [r4, #4]
   2838a:	442a      	add	r2, r5
   2838c:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   2838e:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   28390:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28394:	e7fb      	b.n	2838e <cbor_mbuf_writer+0x16>
	...

00028398 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   28398:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   2839a:	2300      	movs	r3, #0
   2839c:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   2839e:	4b01      	ldr	r3, [pc, #4]	; (283a4 <cbor_mbuf_writer_init+0xc>)
   283a0:	6003      	str	r3, [r0, #0]
}
   283a2:	4770      	bx	lr
   283a4:	00028379 	.word	0x00028379

000283a8 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   283a8:	b5d0      	push	{r4, r6, r7, lr}
   283aa:	b084      	sub	sp, #16
   283ac:	460c      	mov	r4, r1
    CborError err;
    container->writer = encoder->writer;
   283ae:	6801      	ldr	r1, [r0, #0]
   283b0:	6021      	str	r1, [r4, #0]
    ++encoder->added;
   283b2:	6881      	ldr	r1, [r0, #8]
   283b4:	3101      	adds	r1, #1
   283b6:	6081      	str	r1, [r0, #8]
    container->added = 0;
   283b8:	2100      	movs	r1, #0
   283ba:	60a1      	str	r1, [r4, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   283bc:	f003 0120 	and.w	r1, r3, #32
   283c0:	60e1      	str	r1, [r4, #12]

    if (length == CborIndefiniteLength) {
   283c2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   283c6:	d10d      	bne.n	283e4 <create_container+0x3c>
        container->flags |= CborIteratorFlag_UnknownLength;
   283c8:	f041 0104 	orr.w	r1, r1, #4
   283cc:	60e1      	str	r1, [r4, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   283ce:	331f      	adds	r3, #31
   283d0:	f88d 3000 	strb.w	r3, [sp]
    return encoder->writer->write(encoder->writer, data, len);
   283d4:	6820      	ldr	r0, [r4, #0]
   283d6:	6803      	ldr	r3, [r0, #0]
   283d8:	2201      	movs	r2, #1
   283da:	4669      	mov	r1, sp
   283dc:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   283de:	2000      	movs	r0, #0
   283e0:	b004      	add	sp, #16
   283e2:	bdd0      	pop	{r4, r6, r7, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   283e4:	4616      	mov	r6, r2
   283e6:	2700      	movs	r7, #0
    v = cbor_htonll(v);
   283e8:	ba11      	rev	r1, r2
   283ea:	2000      	movs	r0, #0
    memcpy(where, &v, sizeof(v));
   283ec:	9002      	str	r0, [sp, #8]
   283ee:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   283f0:	2a17      	cmp	r2, #23
   283f2:	d80b      	bhi.n	2840c <create_container+0x64>
        *bufstart += shiftedMajorType;
   283f4:	eb03 6311 	add.w	r3, r3, r1, lsr #24
   283f8:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   283fc:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28400:	6820      	ldr	r0, [r4, #0]
   28402:	6803      	ldr	r3, [r0, #0]
   28404:	aa04      	add	r2, sp, #16
   28406:	1a52      	subs	r2, r2, r1
   28408:	4798      	blx	r3
    return append_to_buffer(encoder, bufstart, bufend - bufstart);
   2840a:	e7e8      	b.n	283de <create_container+0x36>
        if (ui > 0xffU)
   2840c:	2f00      	cmp	r7, #0
   2840e:	bf08      	it	eq
   28410:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   28414:	d210      	bcs.n	28438 <create_container+0x90>
        unsigned more = 0;
   28416:	2200      	movs	r2, #0
        if (ui > 0xffffU)
   28418:	2f00      	cmp	r7, #0
   2841a:	bf08      	it	eq
   2841c:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   28420:	d300      	bcc.n	28424 <create_container+0x7c>
            ++more;
   28422:	3201      	adds	r2, #1
        bufstart -= (size_t)1 << more;
   28424:	2101      	movs	r1, #1
   28426:	fa01 f002 	lsl.w	r0, r1, r2
   2842a:	f10d 010f 	add.w	r1, sp, #15
   2842e:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   28430:	4413      	add	r3, r2
   28432:	3318      	adds	r3, #24
   28434:	700b      	strb	r3, [r1, #0]
   28436:	e7e3      	b.n	28400 <create_container+0x58>
            ++more;
   28438:	2201      	movs	r2, #1
   2843a:	e7ed      	b.n	28418 <create_container+0x70>

0002843c <encode_string>:
{
   2843c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2843e:	b085      	sub	sp, #20
   28440:	4605      	mov	r5, r0
   28442:	460c      	mov	r4, r1
   28444:	461e      	mov	r6, r3
    ++encoder->added;
   28446:	68ab      	ldr	r3, [r5, #8]
   28448:	3301      	adds	r3, #1
   2844a:	60ab      	str	r3, [r5, #8]
    v = cbor_htonll(v);
   2844c:	ba23      	rev	r3, r4
   2844e:	2700      	movs	r7, #0
    memcpy(where, &v, sizeof(v));
   28450:	9702      	str	r7, [sp, #8]
   28452:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   28454:	2c17      	cmp	r4, #23
   28456:	d811      	bhi.n	2847c <encode_string+0x40>
        *bufstart += shiftedMajorType;
   28458:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   2845c:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   28460:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28464:	6828      	ldr	r0, [r5, #0]
   28466:	6803      	ldr	r3, [r0, #0]
   28468:	aa04      	add	r2, sp, #16
   2846a:	1a52      	subs	r2, r2, r1
   2846c:	4798      	blx	r3
   2846e:	6828      	ldr	r0, [r5, #0]
   28470:	6803      	ldr	r3, [r0, #0]
   28472:	4622      	mov	r2, r4
   28474:	4631      	mov	r1, r6
   28476:	4798      	blx	r3
}
   28478:	b005      	add	sp, #20
   2847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2847c:	4620      	mov	r0, r4
   2847e:	2100      	movs	r1, #0
        if (ui > 0xffU)
   28480:	2900      	cmp	r1, #0
   28482:	bf08      	it	eq
   28484:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   28488:	d210      	bcs.n	284ac <encode_string+0x70>
        unsigned more = 0;
   2848a:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   2848c:	2900      	cmp	r1, #0
   2848e:	bf08      	it	eq
   28490:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   28494:	d300      	bcc.n	28498 <encode_string+0x5c>
            ++more;
   28496:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   28498:	2101      	movs	r1, #1
   2849a:	fa01 f003 	lsl.w	r0, r1, r3
   2849e:	f10d 010f 	add.w	r1, sp, #15
   284a2:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   284a4:	441a      	add	r2, r3
   284a6:	3218      	adds	r2, #24
   284a8:	700a      	strb	r2, [r1, #0]
   284aa:	e7db      	b.n	28464 <encode_string+0x28>
            ++more;
   284ac:	2301      	movs	r3, #1
   284ae:	e7ed      	b.n	2848c <encode_string+0x50>

000284b0 <cbor_encoder_init>:
    encoder->writer = writer;
   284b0:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   284b2:	2300      	movs	r3, #0
   284b4:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   284b6:	60c2      	str	r2, [r0, #12]
}
   284b8:	4770      	bx	lr

000284ba <cbor_encode_uint>:
{
   284ba:	b530      	push	{r4, r5, lr}
   284bc:	b085      	sub	sp, #20
   284be:	4614      	mov	r4, r2
   284c0:	461d      	mov	r5, r3
    ++encoder->added;
   284c2:	6883      	ldr	r3, [r0, #8]
   284c4:	3301      	adds	r3, #1
   284c6:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   284c8:	ba13      	rev	r3, r2
   284ca:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
   284cc:	9202      	str	r2, [sp, #8]
   284ce:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   284d0:	2d00      	cmp	r5, #0
   284d2:	bf08      	it	eq
   284d4:	2c18      	cmpeq	r4, #24
   284d6:	d20c      	bcs.n	284f2 <cbor_encode_uint+0x38>
        *bufstart += shiftedMajorType;
   284d8:	f3c3 6307 	ubfx	r3, r3, #24, #8
   284dc:	f88d 300f 	strb.w	r3, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   284e0:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   284e4:	6800      	ldr	r0, [r0, #0]
   284e6:	6803      	ldr	r3, [r0, #0]
   284e8:	aa04      	add	r2, sp, #16
   284ea:	1a52      	subs	r2, r2, r1
   284ec:	4798      	blx	r3
}
   284ee:	b005      	add	sp, #20
   284f0:	bd30      	pop	{r4, r5, pc}
        if (ui > 0xffU)
   284f2:	2d00      	cmp	r5, #0
   284f4:	bf08      	it	eq
   284f6:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   284fa:	d214      	bcs.n	28526 <cbor_encode_uint+0x6c>
        unsigned more = 0;
   284fc:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   284fe:	2d00      	cmp	r5, #0
   28500:	bf08      	it	eq
   28502:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   28506:	d300      	bcc.n	2850a <cbor_encode_uint+0x50>
            ++more;
   28508:	3301      	adds	r3, #1
        if (ui > 0xffffffffU)
   2850a:	2d01      	cmp	r5, #1
   2850c:	bf08      	it	eq
   2850e:	2c00      	cmpeq	r4, #0
   28510:	d300      	bcc.n	28514 <cbor_encode_uint+0x5a>
            ++more;
   28512:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   28514:	2101      	movs	r1, #1
   28516:	fa01 f203 	lsl.w	r2, r1, r3
   2851a:	f10d 010f 	add.w	r1, sp, #15
   2851e:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   28520:	3318      	adds	r3, #24
   28522:	700b      	strb	r3, [r1, #0]
   28524:	e7de      	b.n	284e4 <cbor_encode_uint+0x2a>
            ++more;
   28526:	2301      	movs	r3, #1
   28528:	e7e9      	b.n	284fe <cbor_encode_uint+0x44>

0002852a <cbor_encode_int>:
{
   2852a:	b570      	push	{r4, r5, r6, lr}
   2852c:	b084      	sub	sp, #16
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   2852e:	17d9      	asrs	r1, r3, #31
    uint8_t majorType = ui & 0x20;          /* extract major type */
   28530:	b2ce      	uxtb	r6, r1
   28532:	f006 0620 	and.w	r6, r6, #32
    ui ^= value;                            /* complement negatives */
   28536:	ea82 0401 	eor.w	r4, r2, r1
   2853a:	ea83 0501 	eor.w	r5, r3, r1
    ++encoder->added;
   2853e:	6883      	ldr	r3, [r0, #8]
   28540:	3301      	adds	r3, #1
   28542:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   28544:	ba23      	rev	r3, r4
   28546:	ba2a      	rev	r2, r5
    memcpy(where, &v, sizeof(v));
   28548:	9202      	str	r2, [sp, #8]
   2854a:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   2854c:	2d00      	cmp	r5, #0
   2854e:	bf08      	it	eq
   28550:	2c18      	cmpeq	r4, #24
   28552:	d20c      	bcs.n	2856e <cbor_encode_int+0x44>
        *bufstart += shiftedMajorType;
   28554:	eb06 6613 	add.w	r6, r6, r3, lsr #24
   28558:	f88d 600f 	strb.w	r6, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   2855c:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   28560:	6800      	ldr	r0, [r0, #0]
   28562:	6803      	ldr	r3, [r0, #0]
   28564:	aa04      	add	r2, sp, #16
   28566:	1a52      	subs	r2, r2, r1
   28568:	4798      	blx	r3
}
   2856a:	b004      	add	sp, #16
   2856c:	bd70      	pop	{r4, r5, r6, pc}
        if (ui > 0xffU)
   2856e:	2d00      	cmp	r5, #0
   28570:	bf08      	it	eq
   28572:	f5b4 7f80 	cmpeq.w	r4, #256	; 0x100
   28576:	d215      	bcs.n	285a4 <cbor_encode_int+0x7a>
        unsigned more = 0;
   28578:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   2857a:	2d00      	cmp	r5, #0
   2857c:	bf08      	it	eq
   2857e:	f5b4 3f80 	cmpeq.w	r4, #65536	; 0x10000
   28582:	d300      	bcc.n	28586 <cbor_encode_int+0x5c>
            ++more;
   28584:	3301      	adds	r3, #1
        if (ui > 0xffffffffU)
   28586:	2d01      	cmp	r5, #1
   28588:	bf08      	it	eq
   2858a:	2c00      	cmpeq	r4, #0
   2858c:	d300      	bcc.n	28590 <cbor_encode_int+0x66>
            ++more;
   2858e:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   28590:	2101      	movs	r1, #1
   28592:	fa01 f203 	lsl.w	r2, r1, r3
   28596:	f10d 010f 	add.w	r1, sp, #15
   2859a:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   2859c:	441e      	add	r6, r3
   2859e:	3618      	adds	r6, #24
   285a0:	700e      	strb	r6, [r1, #0]
   285a2:	e7dd      	b.n	28560 <cbor_encode_int+0x36>
            ++more;
   285a4:	2301      	movs	r3, #1
   285a6:	e7e8      	b.n	2857a <cbor_encode_int+0x50>

000285a8 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   285a8:	f1a1 0319 	sub.w	r3, r1, #25
   285ac:	b2db      	uxtb	r3, r3
   285ae:	2b06      	cmp	r3, #6
   285b0:	d926      	bls.n	28600 <cbor_encode_simple_value+0x58>
{
   285b2:	b530      	push	{r4, r5, lr}
   285b4:	b085      	sub	sp, #20
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   285b6:	b2cc      	uxtb	r4, r1
   285b8:	2500      	movs	r5, #0
    ++encoder->added;
   285ba:	6883      	ldr	r3, [r0, #8]
   285bc:	3301      	adds	r3, #1
   285be:	6083      	str	r3, [r0, #8]
    v = cbor_htonll(v);
   285c0:	ba09      	rev	r1, r1
   285c2:	2300      	movs	r3, #0
    memcpy(where, &v, sizeof(v));
   285c4:	9302      	str	r3, [sp, #8]
   285c6:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   285c8:	2d00      	cmp	r5, #0
   285ca:	bf08      	it	eq
   285cc:	2c18      	cmpeq	r4, #24
   285ce:	d20d      	bcs.n	285ec <cbor_encode_simple_value+0x44>
        *bufstart += shiftedMajorType;
   285d0:	f3c1 6107 	ubfx	r1, r1, #24, #8
   285d4:	3920      	subs	r1, #32
   285d6:	f88d 100f 	strb.w	r1, [sp, #15]
    uint8_t *bufstart = bufend - 1;
   285da:	f10d 010f 	add.w	r1, sp, #15
    return encoder->writer->write(encoder->writer, data, len);
   285de:	6800      	ldr	r0, [r0, #0]
   285e0:	6803      	ldr	r3, [r0, #0]
   285e2:	aa04      	add	r2, sp, #16
   285e4:	1a52      	subs	r2, r2, r1
   285e6:	4798      	blx	r3
}
   285e8:	b005      	add	sp, #20
   285ea:	bd30      	pop	{r4, r5, pc}
        unsigned more = 0;
   285ec:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   285ee:	2101      	movs	r1, #1
   285f0:	fa01 f203 	lsl.w	r2, r1, r3
   285f4:	f10d 010f 	add.w	r1, sp, #15
   285f8:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   285fa:	3b08      	subs	r3, #8
   285fc:	700b      	strb	r3, [r1, #0]
   285fe:	e7ee      	b.n	285de <cbor_encode_simple_value+0x36>
        return CborErrorIllegalSimpleType;
   28600:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   28604:	4770      	bx	lr

00028606 <cbor_encode_byte_string>:
{
   28606:	b508      	push	{r3, lr}
   28608:	460b      	mov	r3, r1
   2860a:	4611      	mov	r1, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   2860c:	2240      	movs	r2, #64	; 0x40
   2860e:	f7ff ff15 	bl	2843c <encode_string>
}
   28612:	bd08      	pop	{r3, pc}

00028614 <cbor_encode_text_string>:
{
   28614:	b508      	push	{r3, lr}
   28616:	460b      	mov	r3, r1
   28618:	4611      	mov	r1, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   2861a:	2260      	movs	r2, #96	; 0x60
   2861c:	f7ff ff0e 	bl	2843c <encode_string>
}
   28620:	bd08      	pop	{r3, pc}

00028622 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   28622:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   28624:	2380      	movs	r3, #128	; 0x80
   28626:	f7ff febf 	bl	283a8 <create_container>
}
   2862a:	bd08      	pop	{r3, pc}

0002862c <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   2862c:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   2862e:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
   28632:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   28636:	429c      	cmp	r4, r3
   28638:	d303      	bcc.n	28642 <cbor_encoder_create_map+0x16>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   2863a:	23a0      	movs	r3, #160	; 0xa0
   2863c:	f7ff feb4 	bl	283a8 <create_container>
}
   28640:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
   28642:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28646:	e7fb      	b.n	28640 <cbor_encoder_create_map+0x14>

00028648 <cbor_encoder_create_indef_byte_string>:
 * \a stringEncoder parameters.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_indef_byte_string(CborEncoder *encoder, CborEncoder *stringEncoder)
{
   28648:	b508      	push	{r3, lr}
    return create_container(encoder, stringEncoder, CborIndefiniteLength, ByteStringType << MajorTypeShift);
   2864a:	2340      	movs	r3, #64	; 0x40
   2864c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28650:	f7ff feaa 	bl	283a8 <create_container>
}
   28654:	bd08      	pop	{r3, pc}

00028656 <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   28656:	680b      	ldr	r3, [r1, #0]
   28658:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   2865a:	68cb      	ldr	r3, [r1, #12]
   2865c:	f013 0f04 	tst.w	r3, #4
   28660:	d101      	bne.n	28666 <cbor_encoder_close_container+0x10>
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
   28662:	2000      	movs	r0, #0
}
   28664:	4770      	bx	lr
{
   28666:	b500      	push	{lr}
   28668:	b083      	sub	sp, #12
        return append_byte_to_buffer(encoder, BreakByte);
   2866a:	23ff      	movs	r3, #255	; 0xff
   2866c:	f88d 3007 	strb.w	r3, [sp, #7]
    return encoder->writer->write(encoder->writer, data, len);
   28670:	6800      	ldr	r0, [r0, #0]
   28672:	6803      	ldr	r3, [r0, #0]
   28674:	2201      	movs	r2, #1
   28676:	f10d 0107 	add.w	r1, sp, #7
   2867a:	4798      	blx	r3
}
   2867c:	b003      	add	sp, #12
   2867e:	f85d fb04 	ldr.w	pc, [sp], #4

00028682 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   28682:	2860      	cmp	r0, #96	; 0x60
   28684:	d009      	beq.n	2869a <is_fixed_type+0x18>
   28686:	2840      	cmp	r0, #64	; 0x40
   28688:	d009      	beq.n	2869e <is_fixed_type+0x1c>
   2868a:	2880      	cmp	r0, #128	; 0x80
   2868c:	d009      	beq.n	286a2 <is_fixed_type+0x20>
   2868e:	28a0      	cmp	r0, #160	; 0xa0
   28690:	d001      	beq.n	28696 <is_fixed_type+0x14>
   28692:	2001      	movs	r0, #1
           type != CborMapType;
}
   28694:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   28696:	2000      	movs	r0, #0
   28698:	4770      	bx	lr
   2869a:	2000      	movs	r0, #0
   2869c:	4770      	bx	lr
   2869e:	2000      	movs	r0, #0
   286a0:	4770      	bx	lr
   286a2:	2000      	movs	r0, #0
   286a4:	4770      	bx	lr

000286a6 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   286a6:	2001      	movs	r0, #1
   286a8:	4770      	bx	lr

000286aa <preparse_value>:
{
   286aa:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   286ac:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   286ae:	23ff      	movs	r3, #255	; 0xff
   286b0:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   286b2:	6841      	ldr	r1, [r0, #4]
   286b4:	686b      	ldr	r3, [r5, #4]
   286b6:	4299      	cmp	r1, r3
   286b8:	f000 808d 	beq.w	287d6 <preparse_value+0x12c>
   286bc:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   286be:	6828      	ldr	r0, [r5, #0]
   286c0:	6803      	ldr	r3, [r0, #0]
   286c2:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   286c4:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   286c8:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   286ca:	2300      	movs	r3, #0
   286cc:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   286ce:	f000 031f 	and.w	r3, r0, #31
   286d2:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   286d4:	2b1b      	cmp	r3, #27
   286d6:	d91d      	bls.n	28714 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   286d8:	2b1f      	cmp	r3, #31
   286da:	d10b      	bne.n	286f4 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   286dc:	4630      	mov	r0, r6
   286de:	f7ff ffd0 	bl	28682 <is_fixed_type>
   286e2:	f080 0001 	eor.w	r0, r0, #1
   286e6:	f010 0fff 	tst.w	r0, #255	; 0xff
   286ea:	d00b      	beq.n	28704 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   286ec:	2304      	movs	r3, #4
   286ee:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   286f0:	2000      	movs	r0, #0
}
   286f2:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   286f4:	2ee0      	cmp	r6, #224	; 0xe0
   286f6:	d002      	beq.n	286fe <preparse_value+0x54>
   286f8:	f240 1005 	movw	r0, #261	; 0x105
   286fc:	e7f9      	b.n	286f2 <preparse_value+0x48>
   286fe:	f240 1003 	movw	r0, #259	; 0x103
   28702:	e7f6      	b.n	286f2 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   28704:	2ee0      	cmp	r6, #224	; 0xe0
   28706:	d002      	beq.n	2870e <preparse_value+0x64>
   28708:	f240 1005 	movw	r0, #261	; 0x105
   2870c:	e7f1      	b.n	286f2 <preparse_value+0x48>
   2870e:	f44f 7081 	mov.w	r0, #258	; 0x102
   28712:	e7ee      	b.n	286f2 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   28714:	2b17      	cmp	r3, #23
   28716:	d91a      	bls.n	2874e <preparse_value+0xa4>
   28718:	f1a3 0118 	sub.w	r1, r3, #24
   2871c:	2201      	movs	r2, #1
   2871e:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   28720:	3201      	adds	r2, #1
   28722:	6868      	ldr	r0, [r5, #4]
   28724:	6861      	ldr	r1, [r4, #4]
   28726:	1a40      	subs	r0, r0, r1
   28728:	4282      	cmp	r2, r0
   2872a:	d857      	bhi.n	287dc <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   2872c:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   2872e:	2e20      	cmp	r6, #32
   28730:	d00f      	beq.n	28752 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   28732:	2a07      	cmp	r2, #7
   28734:	d012      	beq.n	2875c <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   28736:	2b17      	cmp	r3, #23
   28738:	d953      	bls.n	287e2 <preparse_value+0x138>
    if (descriptor == Value8Bit)
   2873a:	2b18      	cmp	r3, #24
   2873c:	d03d      	beq.n	287ba <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   2873e:	2b19      	cmp	r3, #25
   28740:	d042      	beq.n	287c8 <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   28742:	7be3      	ldrb	r3, [r4, #15]
   28744:	f043 0301 	orr.w	r3, r3, #1
   28748:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   2874a:	2000      	movs	r0, #0
   2874c:	e7d1      	b.n	286f2 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2874e:	2200      	movs	r2, #0
   28750:	e7e6      	b.n	28720 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   28752:	2202      	movs	r2, #2
   28754:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   28756:	2200      	movs	r2, #0
   28758:	73a2      	strb	r2, [r4, #14]
   2875a:	e7ec      	b.n	28736 <preparse_value+0x8c>
        switch (descriptor) {
   2875c:	3b14      	subs	r3, #20
   2875e:	2b0b      	cmp	r3, #11
   28760:	d812      	bhi.n	28788 <preparse_value+0xde>
   28762:	e8df f003 	tbb	[pc, r3]
   28766:	0d06      	.short	0x0d06
   28768:	0d130d0d 	.word	0x0d130d0d
   2876c:	20200b0b 	.word	0x20200b0b
   28770:	2020      	.short	0x2020
            it->extra = false;
   28772:	2300      	movs	r3, #0
   28774:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   28776:	23f5      	movs	r3, #245	; 0xf5
   28778:	73a3      	strb	r3, [r4, #14]
            break;
   2877a:	e005      	b.n	28788 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   2877c:	2301      	movs	r3, #1
   2877e:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   28780:	6828      	ldr	r0, [r5, #0]
   28782:	6803      	ldr	r3, [r0, #0]
   28784:	4798      	blx	r3
   28786:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   28788:	2000      	movs	r0, #0
   2878a:	e7b2      	b.n	286f2 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2878c:	6828      	ldr	r0, [r5, #0]
   2878e:	6803      	ldr	r3, [r0, #0]
   28790:	3101      	adds	r1, #1
   28792:	4798      	blx	r3
   28794:	b283      	uxth	r3, r0
   28796:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   28798:	2b1f      	cmp	r3, #31
   2879a:	d8f5      	bhi.n	28788 <preparse_value+0xde>
                it->type = CborInvalidType;
   2879c:	23ff      	movs	r3, #255	; 0xff
   2879e:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   287a0:	f44f 7083 	mov.w	r0, #262	; 0x106
   287a4:	e7a5      	b.n	286f2 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   287a6:	f7e3 fcf9 	bl	c19c <hal_debugger_connected>
   287aa:	b100      	cbz	r0, 287ae <preparse_value+0x104>
   287ac:	be01      	bkpt	0x0001
   287ae:	2300      	movs	r3, #0
   287b0:	461a      	mov	r2, r3
   287b2:	4619      	mov	r1, r3
   287b4:	4618      	mov	r0, r3
   287b6:	f7e4 f9f5 	bl	cba4 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   287ba:	6828      	ldr	r0, [r5, #0]
   287bc:	6803      	ldr	r3, [r0, #0]
   287be:	3101      	adds	r1, #1
   287c0:	4798      	blx	r3
   287c2:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   287c4:	2000      	movs	r0, #0
   287c6:	e794      	b.n	286f2 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   287c8:	6828      	ldr	r0, [r5, #0]
   287ca:	6843      	ldr	r3, [r0, #4]
   287cc:	3101      	adds	r1, #1
   287ce:	4798      	blx	r3
   287d0:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   287d2:	2000      	movs	r0, #0
   287d4:	e78d      	b.n	286f2 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   287d6:	f240 1001 	movw	r0, #257	; 0x101
   287da:	e78a      	b.n	286f2 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   287dc:	f240 1001 	movw	r0, #257	; 0x101
   287e0:	e787      	b.n	286f2 <preparse_value+0x48>
        return CborNoError;
   287e2:	2000      	movs	r0, #0
   287e4:	e785      	b.n	286f2 <preparse_value+0x48>

000287e6 <preparse_next_value>:
{
   287e6:	b510      	push	{r4, lr}
   287e8:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   287ea:	6880      	ldr	r0, [r0, #8]
   287ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   287f0:	d00c      	beq.n	2880c <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   287f2:	7ba2      	ldrb	r2, [r4, #14]
   287f4:	2ac0      	cmp	r2, #192	; 0xc0
   287f6:	d002      	beq.n	287fe <preparse_next_value+0x18>
   287f8:	3801      	subs	r0, #1
   287fa:	60a0      	str	r0, [r4, #8]
   287fc:	b118      	cbz	r0, 28806 <preparse_next_value+0x20>
    return preparse_value(it);
   287fe:	4620      	mov	r0, r4
   28800:	f7ff ff53 	bl	286aa <preparse_value>
}
   28804:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   28806:	23ff      	movs	r3, #255	; 0xff
   28808:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   2880a:	e7fb      	b.n	28804 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2880c:	6861      	ldr	r1, [r4, #4]
   2880e:	6823      	ldr	r3, [r4, #0]
   28810:	685a      	ldr	r2, [r3, #4]
   28812:	4291      	cmp	r1, r2
   28814:	d0f3      	beq.n	287fe <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   28816:	6818      	ldr	r0, [r3, #0]
   28818:	6803      	ldr	r3, [r0, #0]
   2881a:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2881c:	28ff      	cmp	r0, #255	; 0xff
   2881e:	d1ee      	bne.n	287fe <preparse_next_value+0x18>
        ++it->offset;
   28820:	6863      	ldr	r3, [r4, #4]
   28822:	3301      	adds	r3, #1
   28824:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   28826:	23ff      	movs	r3, #255	; 0xff
   28828:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   2882a:	2000      	movs	r0, #0
   2882c:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   2882e:	e7e9      	b.n	28804 <preparse_next_value+0x1e>

00028830 <extract_length>:
{
   28830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28834:	4605      	mov	r5, r0
   28836:	460e      	mov	r6, r1
   28838:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2883a:	6800      	ldr	r0, [r0, #0]
   2883c:	6803      	ldr	r3, [r0, #0]
   2883e:	6809      	ldr	r1, [r1, #0]
   28840:	4798      	blx	r3
   28842:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   28846:	6833      	ldr	r3, [r6, #0]
   28848:	3301      	adds	r3, #1
   2884a:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   2884c:	2c17      	cmp	r4, #23
   2884e:	d91a      	bls.n	28886 <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   28850:	2c1b      	cmp	r4, #27
   28852:	d83a      	bhi.n	288ca <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   28854:	3c18      	subs	r4, #24
   28856:	f04f 0801 	mov.w	r8, #1
   2885a:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2885e:	686b      	ldr	r3, [r5, #4]
   28860:	6831      	ldr	r1, [r6, #0]
   28862:	1a5b      	subs	r3, r3, r1
   28864:	4598      	cmp	r8, r3
   28866:	d835      	bhi.n	288d4 <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   28868:	f1b8 0f01 	cmp.w	r8, #1
   2886c:	d00f      	beq.n	2888e <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   2886e:	f1b8 0f02 	cmp.w	r8, #2
   28872:	d01e      	beq.n	288b2 <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   28874:	f1b8 0f04 	cmp.w	r8, #4
   28878:	d021      	beq.n	288be <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   2887a:	6828      	ldr	r0, [r5, #0]
   2887c:	68c3      	ldr	r3, [r0, #12]
   2887e:	4798      	blx	r3
   28880:	4604      	mov	r4, r0
   28882:	460d      	mov	r5, r1
   28884:	e008      	b.n	28898 <extract_length+0x68>
        *len = additional_information;
   28886:	b2e4      	uxtb	r4, r4
   28888:	2500      	movs	r5, #0
        return CborNoError;
   2888a:	2000      	movs	r0, #0
   2888c:	e008      	b.n	288a0 <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   2888e:	6828      	ldr	r0, [r5, #0]
   28890:	6803      	ldr	r3, [r0, #0]
   28892:	4798      	blx	r3
   28894:	4604      	mov	r4, r0
   28896:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   28898:	6833      	ldr	r3, [r6, #0]
   2889a:	4443      	add	r3, r8
   2889c:	6033      	str	r3, [r6, #0]
    return CborNoError;
   2889e:	2000      	movs	r0, #0
    if (err) {
   288a0:	b9e8      	cbnz	r0, 288de <extract_length+0xae>
    *len = v;
   288a2:	603c      	str	r4, [r7, #0]
    if (v != *len)
   288a4:	2300      	movs	r3, #0
   288a6:	42ab      	cmp	r3, r5
   288a8:	bf08      	it	eq
   288aa:	42a4      	cmpeq	r4, r4
   288ac:	d11a      	bne.n	288e4 <extract_length+0xb4>
}
   288ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   288b2:	6828      	ldr	r0, [r5, #0]
   288b4:	6843      	ldr	r3, [r0, #4]
   288b6:	4798      	blx	r3
   288b8:	4604      	mov	r4, r0
   288ba:	2500      	movs	r5, #0
   288bc:	e7ec      	b.n	28898 <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   288be:	6828      	ldr	r0, [r5, #0]
   288c0:	6883      	ldr	r3, [r0, #8]
   288c2:	4798      	blx	r3
   288c4:	4604      	mov	r4, r0
   288c6:	2500      	movs	r5, #0
   288c8:	e7e6      	b.n	28898 <extract_length+0x68>
    *len = 1;
   288ca:	2401      	movs	r4, #1
   288cc:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   288ce:	f240 1005 	movw	r0, #261	; 0x105
   288d2:	e7e5      	b.n	288a0 <extract_length+0x70>
    *len = 1;
   288d4:	2401      	movs	r4, #1
   288d6:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   288d8:	f240 1001 	movw	r0, #257	; 0x101
   288dc:	e7e0      	b.n	288a0 <extract_length+0x70>
        *len = 0;
   288de:	2300      	movs	r3, #0
   288e0:	603b      	str	r3, [r7, #0]
        return err;
   288e2:	e7e4      	b.n	288ae <extract_length+0x7e>
        return CborErrorDataTooLarge;
   288e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   288e8:	e7e1      	b.n	288ae <extract_length+0x7e>

000288ea <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   288ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   288ee:	b085      	sub	sp, #20
   288f0:	4604      	mov	r4, r0
   288f2:	4689      	mov	r9, r1
   288f4:	4616      	mov	r6, r2
   288f6:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   288f8:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   288fa:	2b40      	cmp	r3, #64	; 0x40
   288fc:	d001      	beq.n	28902 <iterate_string_chunks+0x18>
   288fe:	2b60      	cmp	r3, #96	; 0x60
   28900:	d10c      	bne.n	2891c <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   28902:	6863      	ldr	r3, [r4, #4]
   28904:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   28906:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   28908:	f012 0f04 	tst.w	r2, #4
   2890c:	d010      	beq.n	28930 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   2890e:	3301      	adds	r3, #1
   28910:	9302      	str	r3, [sp, #8]
        total = 0;
   28912:	2300      	movs	r3, #0
   28914:	9303      	str	r3, [sp, #12]
        *result = true;
   28916:	2301      	movs	r3, #1
   28918:	702b      	strb	r3, [r5, #0]
   2891a:	e04c      	b.n	289b6 <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2891c:	f7e3 fc3e 	bl	c19c <hal_debugger_connected>
   28920:	b100      	cbz	r0, 28924 <iterate_string_chunks+0x3a>
   28922:	be01      	bkpt	0x0001
   28924:	2300      	movs	r3, #0
   28926:	461a      	mov	r2, r3
   28928:	4619      	mov	r1, r3
   2892a:	4618      	mov	r0, r3
   2892c:	f7e4 f93a 	bl	cba4 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   28930:	aa03      	add	r2, sp, #12
   28932:	a902      	add	r1, sp, #8
   28934:	6820      	ldr	r0, [r4, #0]
   28936:	f7ff ff7b 	bl	28830 <extract_length>
        if (err)
   2893a:	4603      	mov	r3, r0
   2893c:	2800      	cmp	r0, #0
   2893e:	d177      	bne.n	28a30 <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   28940:	6820      	ldr	r0, [r4, #0]
   28942:	6843      	ldr	r3, [r0, #4]
   28944:	9a02      	ldr	r2, [sp, #8]
   28946:	1a99      	subs	r1, r3, r2
   28948:	9b03      	ldr	r3, [sp, #12]
   2894a:	4299      	cmp	r1, r3
   2894c:	f0c0 8083 	bcc.w	28a56 <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   28950:	6831      	ldr	r1, [r6, #0]
   28952:	428b      	cmp	r3, r1
   28954:	d81e      	bhi.n	28994 <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   28956:	4649      	mov	r1, r9
   28958:	6800      	ldr	r0, [r0, #0]
   2895a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2895c:	47b8      	blx	r7
   2895e:	3800      	subs	r0, #0
   28960:	bf18      	it	ne
   28962:	2001      	movne	r0, #1
   28964:	7028      	strb	r0, [r5, #0]
        offset += total;
   28966:	9b02      	ldr	r3, [sp, #8]
   28968:	9a03      	ldr	r2, [sp, #12]
   2896a:	4413      	add	r3, r2
   2896c:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   2896e:	782b      	ldrb	r3, [r5, #0]
   28970:	b14b      	cbz	r3, 28986 <iterate_string_chunks+0x9c>
   28972:	6832      	ldr	r2, [r6, #0]
   28974:	9b03      	ldr	r3, [sp, #12]
   28976:	429a      	cmp	r2, r3
   28978:	d905      	bls.n	28986 <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   2897a:	f1b9 0f00 	cmp.w	r9, #0
   2897e:	d002      	beq.n	28986 <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   28980:	2200      	movs	r2, #0
   28982:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   28986:	9b03      	ldr	r3, [sp, #12]
   28988:	6033      	str	r3, [r6, #0]

    if (next) {
   2898a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2898c:	2b00      	cmp	r3, #0
   2898e:	d156      	bne.n	28a3e <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   28990:	2300      	movs	r3, #0
   28992:	e04d      	b.n	28a30 <iterate_string_chunks+0x146>
            *result = false;
   28994:	2300      	movs	r3, #0
   28996:	702b      	strb	r3, [r5, #0]
   28998:	e7e5      	b.n	28966 <iterate_string_chunks+0x7c>
                ++offset;
   2899a:	9b02      	ldr	r3, [sp, #8]
   2899c:	3301      	adds	r3, #1
   2899e:	9302      	str	r3, [sp, #8]
                break;
   289a0:	e7e5      	b.n	2896e <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   289a2:	2201      	movs	r2, #1
   289a4:	e023      	b.n	289ee <iterate_string_chunks+0x104>
                *result = false;
   289a6:	2300      	movs	r3, #0
   289a8:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   289aa:	9b02      	ldr	r3, [sp, #8]
   289ac:	9a01      	ldr	r2, [sp, #4]
   289ae:	4413      	add	r3, r2
   289b0:	9302      	str	r3, [sp, #8]
            total = newTotal;
   289b2:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   289b6:	6823      	ldr	r3, [r4, #0]
   289b8:	685a      	ldr	r2, [r3, #4]
   289ba:	9902      	ldr	r1, [sp, #8]
   289bc:	428a      	cmp	r2, r1
   289be:	d02f      	beq.n	28a20 <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   289c0:	6818      	ldr	r0, [r3, #0]
   289c2:	6803      	ldr	r3, [r0, #0]
   289c4:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   289c6:	28ff      	cmp	r0, #255	; 0xff
   289c8:	d0e7      	beq.n	2899a <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   289ca:	f020 001f 	bic.w	r0, r0, #31
   289ce:	7ba3      	ldrb	r3, [r4, #14]
   289d0:	4298      	cmp	r0, r3
   289d2:	d128      	bne.n	28a26 <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   289d4:	aa01      	add	r2, sp, #4
   289d6:	a902      	add	r1, sp, #8
   289d8:	6820      	ldr	r0, [r4, #0]
   289da:	f7ff ff29 	bl	28830 <extract_length>
            if (err)
   289de:	4603      	mov	r3, r0
   289e0:	bb30      	cbnz	r0, 28a30 <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   289e2:	9903      	ldr	r1, [sp, #12]
   289e4:	9b01      	ldr	r3, [sp, #4]
   289e6:	2200      	movs	r2, #0
   289e8:	eb11 0803 	adds.w	r8, r1, r3
   289ec:	d2d9      	bcs.n	289a2 <iterate_string_chunks+0xb8>
   289ee:	b9ea      	cbnz	r2, 28a2c <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   289f0:	f8d4 c000 	ldr.w	ip, [r4]
   289f4:	f8dc 0004 	ldr.w	r0, [ip, #4]
   289f8:	9a02      	ldr	r2, [sp, #8]
   289fa:	1a80      	subs	r0, r0, r2
   289fc:	4283      	cmp	r3, r0
   289fe:	d81b      	bhi.n	28a38 <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   28a00:	7828      	ldrb	r0, [r5, #0]
   28a02:	2800      	cmp	r0, #0
   28a04:	d0cf      	beq.n	289a6 <iterate_string_chunks+0xbc>
   28a06:	6830      	ldr	r0, [r6, #0]
   28a08:	4540      	cmp	r0, r8
   28a0a:	d3cc      	bcc.n	289a6 <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   28a0c:	4449      	add	r1, r9
   28a0e:	f8dc 0000 	ldr.w	r0, [ip]
   28a12:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   28a14:	47b8      	blx	r7
   28a16:	3800      	subs	r0, #0
   28a18:	bf18      	it	ne
   28a1a:	2001      	movne	r0, #1
   28a1c:	7028      	strb	r0, [r5, #0]
   28a1e:	e7c4      	b.n	289aa <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   28a20:	f240 1301 	movw	r3, #257	; 0x101
   28a24:	e004      	b.n	28a30 <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   28a26:	f44f 7382 	mov.w	r3, #260	; 0x104
   28a2a:	e001      	b.n	28a30 <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   28a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   28a30:	4618      	mov	r0, r3
   28a32:	b005      	add	sp, #20
   28a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   28a38:	f240 1301 	movw	r3, #257	; 0x101
   28a3c:	e7f8      	b.n	28a30 <iterate_string_chunks+0x146>
        *next = *value;
   28a3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   28a42:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   28a48:	9b02      	ldr	r3, [sp, #8]
   28a4a:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   28a4c:	4620      	mov	r0, r4
   28a4e:	f7ff feca 	bl	287e6 <preparse_next_value>
   28a52:	4603      	mov	r3, r0
   28a54:	e7ec      	b.n	28a30 <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   28a56:	f240 1301 	movw	r3, #257	; 0x101
   28a5a:	e7e9      	b.n	28a30 <iterate_string_chunks+0x146>

00028a5c <advance_internal>:
{
   28a5c:	b570      	push	{r4, r5, r6, lr}
   28a5e:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   28a60:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   28a62:	6830      	ldr	r0, [r6, #0]
   28a64:	6803      	ldr	r3, [r0, #0]
   28a66:	6861      	ldr	r1, [r4, #4]
   28a68:	4798      	blx	r3
   28a6a:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   28a6e:	6863      	ldr	r3, [r4, #4]
   28a70:	3301      	adds	r3, #1
   28a72:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   28a74:	2817      	cmp	r0, #23
   28a76:	d915      	bls.n	28aa4 <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   28a78:	281b      	cmp	r0, #27
   28a7a:	d842      	bhi.n	28b02 <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   28a7c:	3818      	subs	r0, #24
   28a7e:	2501      	movs	r5, #1
   28a80:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   28a82:	6873      	ldr	r3, [r6, #4]
   28a84:	6861      	ldr	r1, [r4, #4]
   28a86:	1a5b      	subs	r3, r3, r1
   28a88:	429d      	cmp	r5, r3
   28a8a:	d83f      	bhi.n	28b0c <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   28a8c:	2d01      	cmp	r5, #1
   28a8e:	d00d      	beq.n	28aac <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   28a90:	2d02      	cmp	r5, #2
   28a92:	d02a      	beq.n	28aea <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   28a94:	2d04      	cmp	r5, #4
   28a96:	d02e      	beq.n	28af6 <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   28a98:	6830      	ldr	r0, [r6, #0]
   28a9a:	68c3      	ldr	r3, [r0, #12]
   28a9c:	4798      	blx	r3
   28a9e:	4602      	mov	r2, r0
   28aa0:	460b      	mov	r3, r1
   28aa2:	e008      	b.n	28ab6 <advance_internal+0x5a>
        *len = additional_information;
   28aa4:	b2c2      	uxtb	r2, r0
   28aa6:	2300      	movs	r3, #0
        return CborNoError;
   28aa8:	2100      	movs	r1, #0
   28aaa:	e008      	b.n	28abe <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   28aac:	6830      	ldr	r0, [r6, #0]
   28aae:	6803      	ldr	r3, [r0, #0]
   28ab0:	4798      	blx	r3
   28ab2:	4602      	mov	r2, r0
   28ab4:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   28ab6:	6860      	ldr	r0, [r4, #4]
   28ab8:	4428      	add	r0, r5
   28aba:	6060      	str	r0, [r4, #4]
    return CborNoError;
   28abc:	2100      	movs	r1, #0
    assert(err == CborNoError);
   28abe:	bb51      	cbnz	r1, 28b16 <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   28ac0:	7ba1      	ldrb	r1, [r4, #14]
   28ac2:	2940      	cmp	r1, #64	; 0x40
   28ac4:	d001      	beq.n	28aca <advance_internal+0x6e>
   28ac6:	2960      	cmp	r1, #96	; 0x60
   28ac8:	d10b      	bne.n	28ae2 <advance_internal+0x86>
        assert(length == (size_t)length);
   28aca:	2100      	movs	r1, #0
   28acc:	4299      	cmp	r1, r3
   28ace:	bf08      	it	eq
   28ad0:	4292      	cmpeq	r2, r2
   28ad2:	d12a      	bne.n	28b2a <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   28ad4:	7be3      	ldrb	r3, [r4, #15]
   28ad6:	f013 0f04 	tst.w	r3, #4
   28ada:	d130      	bne.n	28b3e <advance_internal+0xe2>
        it->offset += length;
   28adc:	6863      	ldr	r3, [r4, #4]
   28ade:	4413      	add	r3, r2
   28ae0:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   28ae2:	4620      	mov	r0, r4
   28ae4:	f7ff fe7f 	bl	287e6 <preparse_next_value>
}
   28ae8:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   28aea:	6830      	ldr	r0, [r6, #0]
   28aec:	6843      	ldr	r3, [r0, #4]
   28aee:	4798      	blx	r3
   28af0:	4602      	mov	r2, r0
   28af2:	2300      	movs	r3, #0
   28af4:	e7df      	b.n	28ab6 <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   28af6:	6830      	ldr	r0, [r6, #0]
   28af8:	6883      	ldr	r3, [r0, #8]
   28afa:	4798      	blx	r3
   28afc:	4602      	mov	r2, r0
   28afe:	2300      	movs	r3, #0
   28b00:	e7d9      	b.n	28ab6 <advance_internal+0x5a>
    *len = 1;
   28b02:	2201      	movs	r2, #1
   28b04:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   28b06:	f240 1105 	movw	r1, #261	; 0x105
   28b0a:	e7d8      	b.n	28abe <advance_internal+0x62>
    *len = 1;
   28b0c:	2201      	movs	r2, #1
   28b0e:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   28b10:	f240 1101 	movw	r1, #257	; 0x101
   28b14:	e7d3      	b.n	28abe <advance_internal+0x62>
    assert(err == CborNoError);
   28b16:	f7e3 fb41 	bl	c19c <hal_debugger_connected>
   28b1a:	b100      	cbz	r0, 28b1e <advance_internal+0xc2>
   28b1c:	be01      	bkpt	0x0001
   28b1e:	2300      	movs	r3, #0
   28b20:	461a      	mov	r2, r3
   28b22:	4619      	mov	r1, r3
   28b24:	4618      	mov	r0, r3
   28b26:	f7e4 f83d 	bl	cba4 <__assert_func>
        assert(length == (size_t)length);
   28b2a:	f7e3 fb37 	bl	c19c <hal_debugger_connected>
   28b2e:	b100      	cbz	r0, 28b32 <advance_internal+0xd6>
   28b30:	be01      	bkpt	0x0001
   28b32:	2300      	movs	r3, #0
   28b34:	461a      	mov	r2, r3
   28b36:	4619      	mov	r1, r3
   28b38:	4618      	mov	r0, r3
   28b3a:	f7e4 f833 	bl	cba4 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   28b3e:	f7e3 fb2d 	bl	c19c <hal_debugger_connected>
   28b42:	b100      	cbz	r0, 28b46 <advance_internal+0xea>
   28b44:	be01      	bkpt	0x0001
   28b46:	2300      	movs	r3, #0
   28b48:	461a      	mov	r2, r3
   28b4a:	4619      	mov	r1, r3
   28b4c:	4618      	mov	r0, r3
   28b4e:	f7e4 f829 	bl	cba4 <__assert_func>

00028b52 <_cbor_value_decode_int64_internal>:
{
   28b52:	b510      	push	{r4, lr}
   28b54:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   28b56:	6803      	ldr	r3, [r0, #0]
   28b58:	6818      	ldr	r0, [r3, #0]
   28b5a:	6803      	ldr	r3, [r0, #0]
   28b5c:	6861      	ldr	r1, [r4, #4]
   28b5e:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   28b60:	7be3      	ldrb	r3, [r4, #15]
   28b62:	f013 0f01 	tst.w	r3, #1
   28b66:	d104      	bne.n	28b72 <_cbor_value_decode_int64_internal+0x20>
   28b68:	7ba3      	ldrb	r3, [r4, #14]
   28b6a:	2bfa      	cmp	r3, #250	; 0xfa
   28b6c:	d001      	beq.n	28b72 <_cbor_value_decode_int64_internal+0x20>
   28b6e:	2bfb      	cmp	r3, #251	; 0xfb
   28b70:	d111      	bne.n	28b96 <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   28b72:	f000 031e 	and.w	r3, r0, #30
   28b76:	2b1a      	cmp	r3, #26
   28b78:	d117      	bne.n	28baa <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   28b7a:	f010 0f01 	tst.w	r0, #1
   28b7e:	d01e      	beq.n	28bbe <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   28b80:	f000 001f 	and.w	r0, r0, #31
   28b84:	281b      	cmp	r0, #27
   28b86:	d122      	bne.n	28bce <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   28b88:	6823      	ldr	r3, [r4, #0]
   28b8a:	6818      	ldr	r0, [r3, #0]
   28b8c:	68c3      	ldr	r3, [r0, #12]
   28b8e:	6861      	ldr	r1, [r4, #4]
   28b90:	3101      	adds	r1, #1
   28b92:	4798      	blx	r3
}
   28b94:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   28b96:	f7e3 fb01 	bl	c19c <hal_debugger_connected>
   28b9a:	b100      	cbz	r0, 28b9e <_cbor_value_decode_int64_internal+0x4c>
   28b9c:	be01      	bkpt	0x0001
   28b9e:	2300      	movs	r3, #0
   28ba0:	461a      	mov	r2, r3
   28ba2:	4619      	mov	r1, r3
   28ba4:	4618      	mov	r0, r3
   28ba6:	f7e3 fffd 	bl	cba4 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   28baa:	f7e3 faf7 	bl	c19c <hal_debugger_connected>
   28bae:	b100      	cbz	r0, 28bb2 <_cbor_value_decode_int64_internal+0x60>
   28bb0:	be01      	bkpt	0x0001
   28bb2:	2300      	movs	r3, #0
   28bb4:	461a      	mov	r2, r3
   28bb6:	4619      	mov	r1, r3
   28bb8:	4618      	mov	r0, r3
   28bba:	f7e3 fff3 	bl	cba4 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   28bbe:	6823      	ldr	r3, [r4, #0]
   28bc0:	6818      	ldr	r0, [r3, #0]
   28bc2:	6883      	ldr	r3, [r0, #8]
   28bc4:	6861      	ldr	r1, [r4, #4]
   28bc6:	3101      	adds	r1, #1
   28bc8:	4798      	blx	r3
   28bca:	2100      	movs	r1, #0
   28bcc:	e7e2      	b.n	28b94 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   28bce:	f7e3 fae5 	bl	c19c <hal_debugger_connected>
   28bd2:	b100      	cbz	r0, 28bd6 <_cbor_value_decode_int64_internal+0x84>
   28bd4:	be01      	bkpt	0x0001
   28bd6:	2300      	movs	r3, #0
   28bd8:	461a      	mov	r2, r3
   28bda:	4619      	mov	r1, r3
   28bdc:	4618      	mov	r0, r3
   28bde:	f7e3 ffe1 	bl	cba4 <__assert_func>

00028be2 <cbor_parser_init>:
{
   28be2:	b510      	push	{r4, lr}
   28be4:	4604      	mov	r4, r0
   28be6:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   28be8:	2300      	movs	r3, #0
   28bea:	6053      	str	r3, [r2, #4]
   28bec:	6093      	str	r3, [r2, #8]
    parser->d = d;
   28bee:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   28bf0:	69a4      	ldr	r4, [r4, #24]
   28bf2:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   28bf4:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   28bf6:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   28bf8:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   28bfa:	2301      	movs	r3, #1
   28bfc:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   28bfe:	f7ff fd54 	bl	286aa <preparse_value>
}
   28c02:	bd10      	pop	{r4, pc}

00028c04 <cbor_value_advance_fixed>:
{
   28c04:	b510      	push	{r4, lr}
   28c06:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   28c08:	7b80      	ldrb	r0, [r0, #14]
   28c0a:	28ff      	cmp	r0, #255	; 0xff
   28c0c:	d008      	beq.n	28c20 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   28c0e:	f7ff fd38 	bl	28682 <is_fixed_type>
   28c12:	b178      	cbz	r0, 28c34 <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   28c14:	68a3      	ldr	r3, [r4, #8]
   28c16:	b1bb      	cbz	r3, 28c48 <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   28c18:	4620      	mov	r0, r4
   28c1a:	f7ff ff1f 	bl	28a5c <advance_internal>
}
   28c1e:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   28c20:	f7e3 fabc 	bl	c19c <hal_debugger_connected>
   28c24:	b100      	cbz	r0, 28c28 <cbor_value_advance_fixed+0x24>
   28c26:	be01      	bkpt	0x0001
   28c28:	2300      	movs	r3, #0
   28c2a:	461a      	mov	r2, r3
   28c2c:	4619      	mov	r1, r3
   28c2e:	4618      	mov	r0, r3
   28c30:	f7e3 ffb8 	bl	cba4 <__assert_func>
    assert(is_fixed_type(it->type));
   28c34:	f7e3 fab2 	bl	c19c <hal_debugger_connected>
   28c38:	b100      	cbz	r0, 28c3c <cbor_value_advance_fixed+0x38>
   28c3a:	be01      	bkpt	0x0001
   28c3c:	2300      	movs	r3, #0
   28c3e:	461a      	mov	r2, r3
   28c40:	4619      	mov	r1, r3
   28c42:	4618      	mov	r0, r3
   28c44:	f7e3 ffae 	bl	cba4 <__assert_func>
        return CborErrorAdvancePastEOF;
   28c48:	2003      	movs	r0, #3
   28c4a:	e7e8      	b.n	28c1e <cbor_value_advance_fixed+0x1a>

00028c4c <cbor_value_enter_container>:
{
   28c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c4e:	4605      	mov	r5, r0
   28c50:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   28c52:	7b83      	ldrb	r3, [r0, #14]
   28c54:	2b80      	cmp	r3, #128	; 0x80
   28c56:	d021      	beq.n	28c9c <cbor_value_enter_container+0x50>
   28c58:	2ba0      	cmp	r3, #160	; 0xa0
   28c5a:	d01d      	beq.n	28c98 <cbor_value_enter_container+0x4c>
   28c5c:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   28c5e:	b1fb      	cbz	r3, 28ca0 <cbor_value_enter_container+0x54>
    *recursed = *it;
   28c60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   28c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   28c68:	7beb      	ldrb	r3, [r5, #15]
   28c6a:	f013 0f04 	tst.w	r3, #4
   28c6e:	d021      	beq.n	28cb4 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   28c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28c74:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   28c76:	460b      	mov	r3, r1
   28c78:	3301      	adds	r3, #1
   28c7a:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   28c7c:	4620      	mov	r0, r4
   28c7e:	f7ff fd14 	bl	286aa <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   28c82:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   28c86:	d106      	bne.n	28c96 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   28c88:	6863      	ldr	r3, [r4, #4]
   28c8a:	3301      	adds	r3, #1
   28c8c:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   28c8e:	23ff      	movs	r3, #255	; 0xff
   28c90:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   28c92:	2000      	movs	r0, #0
   28c94:	60a0      	str	r0, [r4, #8]
}
   28c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28c98:	2301      	movs	r3, #1
   28c9a:	e7e0      	b.n	28c5e <cbor_value_enter_container+0x12>
   28c9c:	2301      	movs	r3, #1
   28c9e:	e7de      	b.n	28c5e <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   28ca0:	f7e3 fa7c 	bl	c19c <hal_debugger_connected>
   28ca4:	b100      	cbz	r0, 28ca8 <cbor_value_enter_container+0x5c>
   28ca6:	be01      	bkpt	0x0001
   28ca8:	2300      	movs	r3, #0
   28caa:	461a      	mov	r2, r3
   28cac:	4619      	mov	r1, r3
   28cae:	4618      	mov	r0, r3
   28cb0:	f7e3 ff78 	bl	cba4 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   28cb4:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   28cb6:	6838      	ldr	r0, [r7, #0]
   28cb8:	6803      	ldr	r3, [r0, #0]
   28cba:	6861      	ldr	r1, [r4, #4]
   28cbc:	4798      	blx	r3
   28cbe:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   28cc2:	6863      	ldr	r3, [r4, #4]
   28cc4:	3301      	adds	r3, #1
   28cc6:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   28cc8:	2817      	cmp	r0, #23
   28cca:	d915      	bls.n	28cf8 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   28ccc:	281b      	cmp	r0, #27
   28cce:	d841      	bhi.n	28d54 <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   28cd0:	3818      	subs	r0, #24
   28cd2:	2601      	movs	r6, #1
   28cd4:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   28cd6:	687b      	ldr	r3, [r7, #4]
   28cd8:	6861      	ldr	r1, [r4, #4]
   28cda:	1a5b      	subs	r3, r3, r1
   28cdc:	429e      	cmp	r6, r3
   28cde:	d83e      	bhi.n	28d5e <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   28ce0:	2e01      	cmp	r6, #1
   28ce2:	d00d      	beq.n	28d00 <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   28ce4:	2e02      	cmp	r6, #2
   28ce6:	d029      	beq.n	28d3c <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   28ce8:	2e04      	cmp	r6, #4
   28cea:	d02d      	beq.n	28d48 <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   28cec:	6838      	ldr	r0, [r7, #0]
   28cee:	68c3      	ldr	r3, [r0, #12]
   28cf0:	4798      	blx	r3
   28cf2:	4602      	mov	r2, r0
   28cf4:	460b      	mov	r3, r1
   28cf6:	e008      	b.n	28d0a <cbor_value_enter_container+0xbe>
        *len = additional_information;
   28cf8:	b2c2      	uxtb	r2, r0
   28cfa:	2300      	movs	r3, #0
        return CborNoError;
   28cfc:	2100      	movs	r1, #0
   28cfe:	e008      	b.n	28d12 <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   28d00:	6838      	ldr	r0, [r7, #0]
   28d02:	6803      	ldr	r3, [r0, #0]
   28d04:	4798      	blx	r3
   28d06:	4602      	mov	r2, r0
   28d08:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   28d0a:	6860      	ldr	r0, [r4, #4]
   28d0c:	4430      	add	r0, r6
   28d0e:	6060      	str	r0, [r4, #4]
    return CborNoError;
   28d10:	2100      	movs	r1, #0
        assert(err == CborNoError);
   28d12:	bb49      	cbnz	r1, 28d68 <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   28d14:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   28d16:	2100      	movs	r1, #0
   28d18:	4299      	cmp	r1, r3
   28d1a:	bf08      	it	eq
   28d1c:	4292      	cmpeq	r2, r2
   28d1e:	d12d      	bne.n	28d7c <cbor_value_enter_container+0x130>
   28d20:	2b00      	cmp	r3, #0
   28d22:	bf08      	it	eq
   28d24:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   28d28:	d028      	beq.n	28d7c <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   28d2a:	7ba1      	ldrb	r1, [r4, #14]
   28d2c:	29a0      	cmp	r1, #160	; 0xa0
   28d2e:	d02a      	beq.n	28d86 <cbor_value_enter_container+0x13a>
        if (len != 0)
   28d30:	4313      	orrs	r3, r2
   28d32:	d0ac      	beq.n	28c8e <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   28d34:	4620      	mov	r0, r4
   28d36:	f7ff fcb8 	bl	286aa <preparse_value>
   28d3a:	e7ac      	b.n	28c96 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   28d3c:	6838      	ldr	r0, [r7, #0]
   28d3e:	6843      	ldr	r3, [r0, #4]
   28d40:	4798      	blx	r3
   28d42:	4602      	mov	r2, r0
   28d44:	2300      	movs	r3, #0
   28d46:	e7e0      	b.n	28d0a <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   28d48:	6838      	ldr	r0, [r7, #0]
   28d4a:	6883      	ldr	r3, [r0, #8]
   28d4c:	4798      	blx	r3
   28d4e:	4602      	mov	r2, r0
   28d50:	2300      	movs	r3, #0
   28d52:	e7da      	b.n	28d0a <cbor_value_enter_container+0xbe>
    *len = 1;
   28d54:	2201      	movs	r2, #1
   28d56:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   28d58:	f240 1105 	movw	r1, #261	; 0x105
   28d5c:	e7d9      	b.n	28d12 <cbor_value_enter_container+0xc6>
    *len = 1;
   28d5e:	2201      	movs	r2, #1
   28d60:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   28d62:	f240 1101 	movw	r1, #257	; 0x101
   28d66:	e7d4      	b.n	28d12 <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   28d68:	f7e3 fa18 	bl	c19c <hal_debugger_connected>
   28d6c:	b100      	cbz	r0, 28d70 <cbor_value_enter_container+0x124>
   28d6e:	be01      	bkpt	0x0001
   28d70:	2300      	movs	r3, #0
   28d72:	461a      	mov	r2, r3
   28d74:	4619      	mov	r1, r3
   28d76:	4618      	mov	r0, r3
   28d78:	f7e3 ff14 	bl	cba4 <__assert_func>
            recursed->offset = it->offset;
   28d7c:	686b      	ldr	r3, [r5, #4]
   28d7e:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   28d80:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28d84:	e787      	b.n	28c96 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   28d86:	2a00      	cmp	r2, #0
   28d88:	db02      	blt.n	28d90 <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   28d8a:	0056      	lsls	r6, r2, #1
   28d8c:	60a6      	str	r6, [r4, #8]
   28d8e:	e7cf      	b.n	28d30 <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   28d90:	686b      	ldr	r3, [r5, #4]
   28d92:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   28d94:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28d98:	e77d      	b.n	28c96 <cbor_value_enter_container+0x4a>

00028d9a <cbor_value_leave_container>:
{
   28d9a:	b508      	push	{r3, lr}
   28d9c:	7b83      	ldrb	r3, [r0, #14]
   28d9e:	2b80      	cmp	r3, #128	; 0x80
   28da0:	d00d      	beq.n	28dbe <cbor_value_leave_container+0x24>
   28da2:	2ba0      	cmp	r3, #160	; 0xa0
   28da4:	d009      	beq.n	28dba <cbor_value_leave_container+0x20>
   28da6:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   28da8:	b15b      	cbz	r3, 28dc2 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   28daa:	7b8b      	ldrb	r3, [r1, #14]
   28dac:	2bff      	cmp	r3, #255	; 0xff
   28dae:	d112      	bne.n	28dd6 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   28db0:	684b      	ldr	r3, [r1, #4]
   28db2:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   28db4:	f7ff fd17 	bl	287e6 <preparse_next_value>
}
   28db8:	bd08      	pop	{r3, pc}
   28dba:	2301      	movs	r3, #1
   28dbc:	e7f4      	b.n	28da8 <cbor_value_leave_container+0xe>
   28dbe:	2301      	movs	r3, #1
   28dc0:	e7f2      	b.n	28da8 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   28dc2:	f7e3 f9eb 	bl	c19c <hal_debugger_connected>
   28dc6:	b100      	cbz	r0, 28dca <cbor_value_leave_container+0x30>
   28dc8:	be01      	bkpt	0x0001
   28dca:	2300      	movs	r3, #0
   28dcc:	461a      	mov	r2, r3
   28dce:	4619      	mov	r1, r3
   28dd0:	4618      	mov	r0, r3
   28dd2:	f7e3 fee7 	bl	cba4 <__assert_func>
    assert(recursed->type == CborInvalidType);
   28dd6:	f7e3 f9e1 	bl	c19c <hal_debugger_connected>
   28dda:	b100      	cbz	r0, 28dde <cbor_value_leave_container+0x44>
   28ddc:	be01      	bkpt	0x0001
   28dde:	2300      	movs	r3, #0
   28de0:	461a      	mov	r2, r3
   28de2:	4619      	mov	r1, r3
   28de4:	4618      	mov	r0, r3
   28de6:	f7e3 fedd 	bl	cba4 <__assert_func>
	...

00028dec <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   28dec:	b510      	push	{r4, lr}
   28dee:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   28df0:	460c      	mov	r4, r1
   28df2:	b179      	cbz	r1, 28e14 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   28df4:	6801      	ldr	r1, [r0, #0]
   28df6:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   28df8:	6949      	ldr	r1, [r1, #20]
   28dfa:	9101      	str	r1, [sp, #4]
   28dfc:	9300      	str	r3, [sp, #0]
   28dfe:	f10d 030f 	add.w	r3, sp, #15
   28e02:	4621      	mov	r1, r4
   28e04:	f7ff fd71 	bl	288ea <iterate_string_chunks>
    return err ? err :
   28e08:	b910      	cbnz	r0, 28e10 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   28e0a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   28e0e:	b11b      	cbz	r3, 28e18 <_cbor_value_copy_string+0x2c>
}
   28e10:	b004      	add	sp, #16
   28e12:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   28e14:	4902      	ldr	r1, [pc, #8]	; (28e20 <_cbor_value_copy_string+0x34>)
   28e16:	e7f0      	b.n	28dfa <_cbor_value_copy_string+0xe>
    return err ? err :
   28e18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28e1c:	e7f8      	b.n	28e10 <_cbor_value_copy_string+0x24>
   28e1e:	bf00      	nop
   28e20:	000286a7 	.word	0x000286a7

00028e24 <advance_recursive>:
{
   28e24:	b570      	push	{r4, r5, r6, lr}
   28e26:	b086      	sub	sp, #24
   28e28:	4604      	mov	r4, r0
   28e2a:	460d      	mov	r5, r1
    if (is_fixed_type(it->type))
   28e2c:	7b86      	ldrb	r6, [r0, #14]
   28e2e:	4630      	mov	r0, r6
   28e30:	f7ff fc27 	bl	28682 <is_fixed_type>
   28e34:	b9c0      	cbnz	r0, 28e68 <advance_recursive+0x44>
   28e36:	2e80      	cmp	r6, #128	; 0x80
   28e38:	d01f      	beq.n	28e7a <advance_recursive+0x56>
   28e3a:	2ea0      	cmp	r6, #160	; 0xa0
   28e3c:	d01b      	beq.n	28e76 <advance_recursive+0x52>
   28e3e:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   28e40:	b1eb      	cbz	r3, 28e7e <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   28e42:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   28e46:	d02b      	beq.n	28ea0 <advance_recursive+0x7c>
    err = cbor_value_enter_container(it, &recursed);
   28e48:	a902      	add	r1, sp, #8
   28e4a:	4620      	mov	r0, r4
   28e4c:	f7ff fefe 	bl	28c4c <cbor_value_enter_container>
    if (err)
   28e50:	4603      	mov	r3, r0
   28e52:	b968      	cbnz	r0, 28e70 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   28e54:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   28e56:	b1eb      	cbz	r3, 28e94 <advance_recursive+0x70>
        err = advance_recursive(&recursed, nestingLevel + 1);
   28e58:	1c69      	adds	r1, r5, #1
   28e5a:	a802      	add	r0, sp, #8
   28e5c:	f7ff ffe2 	bl	28e24 <advance_recursive>
        if (err)
   28e60:	4603      	mov	r3, r0
   28e62:	2800      	cmp	r0, #0
   28e64:	d0f6      	beq.n	28e54 <advance_recursive+0x30>
   28e66:	e003      	b.n	28e70 <advance_recursive+0x4c>
        return advance_internal(it);
   28e68:	4620      	mov	r0, r4
   28e6a:	f7ff fdf7 	bl	28a5c <advance_internal>
   28e6e:	4603      	mov	r3, r0
}
   28e70:	4618      	mov	r0, r3
   28e72:	b006      	add	sp, #24
   28e74:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   28e76:	2301      	movs	r3, #1
   28e78:	e7e2      	b.n	28e40 <advance_recursive+0x1c>
   28e7a:	2301      	movs	r3, #1
   28e7c:	e7e0      	b.n	28e40 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   28e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28e82:	9301      	str	r3, [sp, #4]
        return _cbor_value_copy_string(it, NULL, &len, it);
   28e84:	4623      	mov	r3, r4
   28e86:	aa01      	add	r2, sp, #4
   28e88:	2100      	movs	r1, #0
   28e8a:	4620      	mov	r0, r4
   28e8c:	f7ff ffae 	bl	28dec <_cbor_value_copy_string>
   28e90:	4603      	mov	r3, r0
   28e92:	e7ed      	b.n	28e70 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   28e94:	a902      	add	r1, sp, #8
   28e96:	4620      	mov	r0, r4
   28e98:	f7ff ff7f 	bl	28d9a <cbor_value_leave_container>
   28e9c:	4603      	mov	r3, r0
   28e9e:	e7e7      	b.n	28e70 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   28ea0:	f240 4301 	movw	r3, #1025	; 0x401
   28ea4:	e7e4      	b.n	28e70 <advance_recursive+0x4c>

00028ea6 <cbor_value_advance>:
{
   28ea6:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   28ea8:	7b83      	ldrb	r3, [r0, #14]
   28eaa:	2bff      	cmp	r3, #255	; 0xff
   28eac:	d005      	beq.n	28eba <cbor_value_advance+0x14>
    if (!it->remaining)
   28eae:	6883      	ldr	r3, [r0, #8]
   28eb0:	b16b      	cbz	r3, 28ece <cbor_value_advance+0x28>
    return advance_recursive(it, 0);
   28eb2:	2100      	movs	r1, #0
   28eb4:	f7ff ffb6 	bl	28e24 <advance_recursive>
}
   28eb8:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   28eba:	f7e3 f96f 	bl	c19c <hal_debugger_connected>
   28ebe:	b100      	cbz	r0, 28ec2 <cbor_value_advance+0x1c>
   28ec0:	be01      	bkpt	0x0001
   28ec2:	2300      	movs	r3, #0
   28ec4:	461a      	mov	r2, r3
   28ec6:	4619      	mov	r1, r3
   28ec8:	4618      	mov	r0, r3
   28eca:	f7e3 fe6b 	bl	cba4 <__assert_func>
        return CborErrorAdvancePastEOF;
   28ece:	2003      	movs	r0, #3
   28ed0:	e7f2      	b.n	28eb8 <cbor_value_advance+0x12>

00028ed2 <cbor_value_calculate_string_length>:
{
   28ed2:	b508      	push	{r3, lr}
   28ed4:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   28ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28eda:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   28edc:	2300      	movs	r3, #0
   28ede:	4619      	mov	r1, r3
   28ee0:	f7ff ff84 	bl	28dec <_cbor_value_copy_string>
}
   28ee4:	bd08      	pop	{r3, pc}
	...

00028ee8 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   28ee8:	b570      	push	{r4, r5, r6, lr}
   28eea:	4606      	mov	r6, r0
   28eec:	460c      	mov	r4, r1
   28eee:	4615      	mov	r5, r2
    while (n--) {
   28ef0:	462b      	mov	r3, r5
   28ef2:	3d01      	subs	r5, #1
   28ef4:	b143      	cbz	r3, 28f08 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   28ef6:	f814 2b01 	ldrb.w	r2, [r4], #1
   28efa:	4904      	ldr	r1, [pc, #16]	; (28f0c <hexDump+0x24>)
   28efc:	4630      	mov	r0, r6
   28efe:	f002 fc27 	bl	2b750 <fprintf>
        if (r < 0)
   28f02:	2800      	cmp	r0, #0
   28f04:	daf4      	bge.n	28ef0 <hexDump+0x8>
   28f06:	e000      	b.n	28f0a <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   28f08:	2000      	movs	r0, #0
}
   28f0a:	bd70      	pop	{r4, r5, r6, pc}
   28f0c:	0002e948 	.word	0x0002e948

00028f10 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   28f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28f12:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   28f14:	e07e      	b.n	29014 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   28f16:	4985      	ldr	r1, [pc, #532]	; (2912c <utf8EscapedDump+0x21c>)
   28f18:	4630      	mov	r0, r6
   28f1a:	f002 fc19 	bl	2b750 <fprintf>
   28f1e:	2800      	cmp	r0, #0
   28f20:	f2c0 80e0 	blt.w	290e4 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   28f24:	4629      	mov	r1, r5
   28f26:	e074      	b.n	29012 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   28f28:	2a5c      	cmp	r2, #92	; 0x5c
   28f2a:	d169      	bne.n	29000 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   28f2c:	4980      	ldr	r1, [pc, #512]	; (29130 <utf8EscapedDump+0x220>)
   28f2e:	4630      	mov	r0, r6
   28f30:	f002 fc0e 	bl	2b750 <fprintf>
   28f34:	2800      	cmp	r0, #0
   28f36:	f2c0 80d7 	blt.w	290e8 <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   28f3a:	4629      	mov	r1, r5
   28f3c:	e069      	b.n	29012 <utf8EscapedDump+0x102>
                escaped = 'f';
   28f3e:	2266      	movs	r2, #102	; 0x66
                break;
   28f40:	e7f4      	b.n	28f2c <utf8EscapedDump+0x1c>
                escaped = 'n';
   28f42:	226e      	movs	r2, #110	; 0x6e
                break;
   28f44:	e7f2      	b.n	28f2c <utf8EscapedDump+0x1c>
                escaped = 'r';
   28f46:	2272      	movs	r2, #114	; 0x72
                break;
   28f48:	e7f0      	b.n	28f2c <utf8EscapedDump+0x1c>
                escaped = 't';
   28f4a:	2274      	movs	r2, #116	; 0x74
                break;
   28f4c:	e7ee      	b.n	28f2c <utf8EscapedDump+0x1c>
                escaped = 'b';
   28f4e:	2262      	movs	r2, #98	; 0x62
   28f50:	e7ec      	b.n	28f2c <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   28f52:	2ac1      	cmp	r2, #193	; 0xc1
   28f54:	f240 80ca 	bls.w	290ec <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   28f58:	2adf      	cmp	r2, #223	; 0xdf
   28f5a:	d830      	bhi.n	28fbe <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   28f5c:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   28f60:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   28f64:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   28f66:	1e58      	subs	r0, r3, #1
   28f68:	42b8      	cmp	r0, r7
   28f6a:	f200 80c5 	bhi.w	290f8 <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   28f6e:	3102      	adds	r1, #2
   28f70:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   28f72:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   28f76:	2880      	cmp	r0, #128	; 0x80
   28f78:	f040 80c1 	bne.w	290fe <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   28f7c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   28f80:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   28f84:	2b02      	cmp	r3, #2
   28f86:	d92b      	bls.n	28fe0 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   28f88:	1ca8      	adds	r0, r5, #2
   28f8a:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   28f8c:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   28f90:	2980      	cmp	r1, #128	; 0x80
   28f92:	f040 80b7 	bne.w	29104 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   28f96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   28f9a:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   28f9e:	2b03      	cmp	r3, #3
   28fa0:	f240 808c 	bls.w	290bc <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   28fa4:	1ce8      	adds	r0, r5, #3
   28fa6:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   28fa8:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   28fac:	2980      	cmp	r1, #128	; 0x80
   28fae:	f040 80ac 	bne.w	2910a <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   28fb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   28fb6:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   28fba:	4605      	mov	r5, r0
   28fbc:	e011      	b.n	28fe2 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   28fbe:	2aef      	cmp	r2, #239	; 0xef
   28fc0:	d805      	bhi.n	28fce <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   28fc2:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   28fc6:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   28fca:	2303      	movs	r3, #3
   28fcc:	e7cb      	b.n	28f66 <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   28fce:	2af4      	cmp	r2, #244	; 0xf4
   28fd0:	f200 808f 	bhi.w	290f2 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   28fd4:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   28fd8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   28fdc:	2304      	movs	r3, #4
   28fde:	e7c2      	b.n	28f66 <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   28fe0:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   28fe2:	4564      	cmp	r4, ip
   28fe4:	f0c0 8094 	bcc.w	29110 <utf8EscapedDump+0x200>
   28fe8:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   28fec:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   28ff0:	f0c0 8091 	bcc.w	29116 <utf8EscapedDump+0x206>
   28ff4:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   28ff8:	f080 8090 	bcs.w	2911c <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   28ffc:	2b03      	cmp	r3, #3
   28ffe:	d85f      	bhi.n	290c0 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   29000:	4622      	mov	r2, r4
   29002:	494c      	ldr	r1, [pc, #304]	; (29134 <utf8EscapedDump+0x224>)
   29004:	4630      	mov	r0, r6
   29006:	f002 fba3 	bl	2b750 <fprintf>
   2900a:	2800      	cmp	r0, #0
   2900c:	f2c0 808b 	blt.w	29126 <utf8EscapedDump+0x216>
   29010:	4629      	mov	r1, r5
   29012:	463a      	mov	r2, r7
    while (n--) {
   29014:	1e57      	subs	r7, r2, #1
   29016:	2a00      	cmp	r2, #0
   29018:	d062      	beq.n	290e0 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   2901a:	460d      	mov	r5, r1
   2901c:	f815 2b01 	ldrb.w	r2, [r5], #1
   29020:	4614      	mov	r4, r2
        if (uc < 0x80) {
   29022:	2a7f      	cmp	r2, #127	; 0x7f
   29024:	d895      	bhi.n	28f52 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   29026:	f1a2 0320 	sub.w	r3, r2, #32
   2902a:	2b5e      	cmp	r3, #94	; 0x5e
   2902c:	d804      	bhi.n	29038 <utf8EscapedDump+0x128>
   2902e:	2a5c      	cmp	r2, #92	; 0x5c
   29030:	d002      	beq.n	29038 <utf8EscapedDump+0x128>
   29032:	2a22      	cmp	r2, #34	; 0x22
   29034:	f47f af6f 	bne.w	28f16 <utf8EscapedDump+0x6>
            switch (uc) {
   29038:	2a22      	cmp	r2, #34	; 0x22
   2903a:	f63f af75 	bhi.w	28f28 <utf8EscapedDump+0x18>
   2903e:	2a08      	cmp	r2, #8
   29040:	d3de      	bcc.n	29000 <utf8EscapedDump+0xf0>
   29042:	f1a2 0308 	sub.w	r3, r2, #8
   29046:	2b1a      	cmp	r3, #26
   29048:	d8da      	bhi.n	29000 <utf8EscapedDump+0xf0>
   2904a:	a101      	add	r1, pc, #4	; (adr r1, 29050 <utf8EscapedDump+0x140>)
   2904c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   29050:	00028f4f 	.word	0x00028f4f
   29054:	00028f4b 	.word	0x00028f4b
   29058:	00028f43 	.word	0x00028f43
   2905c:	00029001 	.word	0x00029001
   29060:	00028f3f 	.word	0x00028f3f
   29064:	00028f47 	.word	0x00028f47
   29068:	00029001 	.word	0x00029001
   2906c:	00029001 	.word	0x00029001
   29070:	00029001 	.word	0x00029001
   29074:	00029001 	.word	0x00029001
   29078:	00029001 	.word	0x00029001
   2907c:	00029001 	.word	0x00029001
   29080:	00029001 	.word	0x00029001
   29084:	00029001 	.word	0x00029001
   29088:	00029001 	.word	0x00029001
   2908c:	00029001 	.word	0x00029001
   29090:	00029001 	.word	0x00029001
   29094:	00029001 	.word	0x00029001
   29098:	00029001 	.word	0x00029001
   2909c:	00029001 	.word	0x00029001
   290a0:	00029001 	.word	0x00029001
   290a4:	00029001 	.word	0x00029001
   290a8:	00029001 	.word	0x00029001
   290ac:	00029001 	.word	0x00029001
   290b0:	00029001 	.word	0x00029001
   290b4:	00029001 	.word	0x00029001
   290b8:	00028f2d 	.word	0x00028f2d
            b = (uint8_t)*buffer++;
   290bc:	4605      	mov	r5, r0
   290be:	e790      	b.n	28fe2 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   290c0:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   290c4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   290c8:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   290cc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   290d0:	4919      	ldr	r1, [pc, #100]	; (29138 <utf8EscapedDump+0x228>)
   290d2:	4630      	mov	r0, r6
   290d4:	f002 fb3c 	bl	2b750 <fprintf>
   290d8:	2800      	cmp	r0, #0
   290da:	db22      	blt.n	29122 <utf8EscapedDump+0x212>
   290dc:	4629      	mov	r1, r5
   290de:	e798      	b.n	29012 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   290e0:	2000      	movs	r0, #0
   290e2:	e002      	b.n	290ea <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   290e4:	2004      	movs	r0, #4
   290e6:	e000      	b.n	290ea <utf8EscapedDump+0x1da>
                return CborErrorIO;
   290e8:	2004      	movs	r0, #4
}
   290ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   290ec:	f44f 7001 	mov.w	r0, #516	; 0x204
   290f0:	e7fb      	b.n	290ea <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   290f2:	f44f 7001 	mov.w	r0, #516	; 0x204
   290f6:	e7f8      	b.n	290ea <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   290f8:	f44f 7001 	mov.w	r0, #516	; 0x204
   290fc:	e7f5      	b.n	290ea <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   290fe:	f44f 7001 	mov.w	r0, #516	; 0x204
   29102:	e7f2      	b.n	290ea <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   29104:	f44f 7001 	mov.w	r0, #516	; 0x204
   29108:	e7ef      	b.n	290ea <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   2910a:	f44f 7001 	mov.w	r0, #516	; 0x204
   2910e:	e7ec      	b.n	290ea <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   29110:	f44f 7001 	mov.w	r0, #516	; 0x204
   29114:	e7e9      	b.n	290ea <utf8EscapedDump+0x1da>
   29116:	f44f 7001 	mov.w	r0, #516	; 0x204
   2911a:	e7e6      	b.n	290ea <utf8EscapedDump+0x1da>
   2911c:	f44f 7001 	mov.w	r0, #516	; 0x204
   29120:	e7e3      	b.n	290ea <utf8EscapedDump+0x1da>
                return CborErrorIO;
   29122:	2004      	movs	r0, #4
   29124:	e7e1      	b.n	290ea <utf8EscapedDump+0x1da>
                return CborErrorIO;
   29126:	2004      	movs	r0, #4
   29128:	e7df      	b.n	290ea <utf8EscapedDump+0x1da>
   2912a:	bf00      	nop
   2912c:	0002e950 	.word	0x0002e950
   29130:	0002e954 	.word	0x0002e954
   29134:	0002e968 	.word	0x0002e968
   29138:	0002e958 	.word	0x0002e958

0002913c <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   2913c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2913e:	b087      	sub	sp, #28
   29140:	4607      	mov	r7, r0
   29142:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   29144:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   29146:	2cc0      	cmp	r4, #192	; 0xc0
   29148:	f000 8138 	beq.w	293bc <value_to_pretty+0x280>
   2914c:	d849      	bhi.n	291e2 <value_to_pretty+0xa6>
   2914e:	2c60      	cmp	r4, #96	; 0x60
   29150:	f000 80f5 	beq.w	2933e <value_to_pretty+0x202>
   29154:	d920      	bls.n	29198 <value_to_pretty+0x5c>
   29156:	2c80      	cmp	r4, #128	; 0x80
   29158:	d002      	beq.n	29160 <value_to_pretty+0x24>
   2915a:	2ca0      	cmp	r4, #160	; 0xa0
   2915c:	f040 81c2 	bne.w	294e4 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   29160:	2c80      	cmp	r4, #128	; 0x80
   29162:	d062      	beq.n	2922a <value_to_pretty+0xee>
   29164:	49ac      	ldr	r1, [pc, #688]	; (29418 <value_to_pretty+0x2dc>)
   29166:	4638      	mov	r0, r7
   29168:	f002 faf2 	bl	2b750 <fprintf>
   2916c:	2800      	cmp	r0, #0
   2916e:	db7d      	blt.n	2926c <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   29170:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   29172:	f013 0f04 	tst.w	r3, #4
   29176:	d005      	beq.n	29184 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   29178:	49a8      	ldr	r1, [pc, #672]	; (2941c <value_to_pretty+0x2e0>)
   2917a:	4638      	mov	r0, r7
   2917c:	f002 fae8 	bl	2b750 <fprintf>
   29180:	2800      	cmp	r0, #0
   29182:	db75      	blt.n	29270 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   29184:	a902      	add	r1, sp, #8
   29186:	4628      	mov	r0, r5
   29188:	f7ff fd60 	bl	28c4c <cbor_value_enter_container>
        if (err) {
   2918c:	4606      	mov	r6, r0
   2918e:	2800      	cmp	r0, #0
   29190:	d04d      	beq.n	2922e <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   29192:	9b03      	ldr	r3, [sp, #12]
   29194:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   29196:	e181      	b.n	2949c <value_to_pretty+0x360>
    switch (type) {
   29198:	2c00      	cmp	r4, #0
   2919a:	d06b      	beq.n	29274 <value_to_pretty+0x138>
   2919c:	2c40      	cmp	r4, #64	; 0x40
   2919e:	f040 81a1 	bne.w	294e4 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   291a2:	2300      	movs	r3, #0
   291a4:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   291a6:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   291a8:	2b40      	cmp	r3, #64	; 0x40
   291aa:	f040 80ab 	bne.w	29304 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   291ae:	460b      	mov	r3, r1
   291b0:	aa01      	add	r2, sp, #4
   291b2:	a902      	add	r1, sp, #8
   291b4:	4628      	mov	r0, r5
   291b6:	f000 f9e5 	bl	29584 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   291ba:	4606      	mov	r6, r0
   291bc:	2800      	cmp	r0, #0
   291be:	f040 816d 	bne.w	2949c <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   291c2:	4997      	ldr	r1, [pc, #604]	; (29420 <value_to_pretty+0x2e4>)
   291c4:	4638      	mov	r0, r7
   291c6:	f002 fac3 	bl	2b750 <fprintf>
   291ca:	2800      	cmp	r0, #0
   291cc:	f280 80a4 	bge.w	29318 <value_to_pretty+0x1dc>
   291d0:	2401      	movs	r4, #1
        free(buffer);
   291d2:	9802      	ldr	r0, [sp, #8]
   291d4:	f001 fef8 	bl	2afc8 <free>
        return failed ? CborErrorIO : CborNoError;
   291d8:	2c00      	cmp	r4, #0
   291da:	f000 815f 	beq.w	2949c <value_to_pretty+0x360>
   291de:	2604      	movs	r6, #4
   291e0:	e15c      	b.n	2949c <value_to_pretty+0x360>
    switch (type) {
   291e2:	2cf7      	cmp	r4, #247	; 0xf7
   291e4:	f200 817e 	bhi.w	294e4 <value_to_pretty+0x3a8>
   291e8:	2ce0      	cmp	r4, #224	; 0xe0
   291ea:	f0c0 817b 	bcc.w	294e4 <value_to_pretty+0x3a8>
   291ee:	3ce0      	subs	r4, #224	; 0xe0
   291f0:	2c17      	cmp	r4, #23
   291f2:	f200 8177 	bhi.w	294e4 <value_to_pretty+0x3a8>
   291f6:	e8df f014 	tbh	[pc, r4, lsl #1]
   291fa:	0131      	.short	0x0131
   291fc:	01750175 	.word	0x01750175
   29200:	01750175 	.word	0x01750175
   29204:	01750175 	.word	0x01750175
   29208:	01750175 	.word	0x01750175
   2920c:	01750175 	.word	0x01750175
   29210:	01750175 	.word	0x01750175
   29214:	01750175 	.word	0x01750175
   29218:	01750175 	.word	0x01750175
   2921c:	01750175 	.word	0x01750175
   29220:	01750175 	.word	0x01750175
   29224:	0147015c 	.word	0x0147015c
   29228:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2922a:	497e      	ldr	r1, [pc, #504]	; (29424 <value_to_pretty+0x2e8>)
   2922c:	e79b      	b.n	29166 <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   2922e:	4622      	mov	r2, r4
   29230:	a902      	add	r1, sp, #8
   29232:	4638      	mov	r0, r7
   29234:	f000 f970 	bl	29518 <container_to_pretty>
        if (err) {
   29238:	4606      	mov	r6, r0
   2923a:	b110      	cbz	r0, 29242 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   2923c:	9b03      	ldr	r3, [sp, #12]
   2923e:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   29240:	e12c      	b.n	2949c <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   29242:	a902      	add	r1, sp, #8
   29244:	4628      	mov	r0, r5
   29246:	f7ff fda8 	bl	28d9a <cbor_value_leave_container>
        if (err)
   2924a:	4606      	mov	r6, r0
   2924c:	2800      	cmp	r0, #0
   2924e:	f040 8125 	bne.w	2949c <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   29252:	2c80      	cmp	r4, #128	; 0x80
   29254:	d008      	beq.n	29268 <value_to_pretty+0x12c>
   29256:	4974      	ldr	r1, [pc, #464]	; (29428 <value_to_pretty+0x2ec>)
   29258:	4638      	mov	r0, r7
   2925a:	f002 fa79 	bl	2b750 <fprintf>
   2925e:	2800      	cmp	r0, #0
   29260:	f280 811c 	bge.w	2949c <value_to_pretty+0x360>
            return CborErrorIO;
   29264:	2604      	movs	r6, #4
   29266:	e119      	b.n	2949c <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   29268:	4970      	ldr	r1, [pc, #448]	; (2942c <value_to_pretty+0x2f0>)
   2926a:	e7f5      	b.n	29258 <value_to_pretty+0x11c>
            return CborErrorIO;
   2926c:	2604      	movs	r6, #4
   2926e:	e115      	b.n	2949c <value_to_pretty+0x360>
                return CborErrorIO;
   29270:	2604      	movs	r6, #4
   29272:	e113      	b.n	2949c <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   29274:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   29276:	b96b      	cbnz	r3, 29294 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   29278:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2927a:	f013 0f01 	tst.w	r3, #1
   2927e:	d113      	bne.n	292a8 <value_to_pretty+0x16c>
   29280:	898a      	ldrh	r2, [r1, #12]
   29282:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   29284:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   29286:	b9a9      	cbnz	r1, 292b4 <value_to_pretty+0x178>
   29288:	7be9      	ldrb	r1, [r5, #15]
   2928a:	f011 0f02 	tst.w	r1, #2
   2928e:	d027      	beq.n	292e0 <value_to_pretty+0x1a4>
   29290:	2100      	movs	r1, #0
   29292:	e010      	b.n	292b6 <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   29294:	f7e2 ff82 	bl	c19c <hal_debugger_connected>
   29298:	b100      	cbz	r0, 2929c <value_to_pretty+0x160>
   2929a:	be01      	bkpt	0x0001
   2929c:	2300      	movs	r3, #0
   2929e:	461a      	mov	r2, r3
   292a0:	4619      	mov	r1, r3
   292a2:	4618      	mov	r0, r3
   292a4:	f7e3 fc7e 	bl	cba4 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   292a8:	4608      	mov	r0, r1
   292aa:	f7ff fc52 	bl	28b52 <_cbor_value_decode_int64_internal>
   292ae:	4602      	mov	r2, r0
   292b0:	460b      	mov	r3, r1
   292b2:	e7e7      	b.n	29284 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   292b4:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   292b6:	b9a9      	cbnz	r1, 292e4 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   292b8:	1c50      	adds	r0, r2, #1
   292ba:	f143 0100 	adc.w	r1, r3, #0
   292be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   292c2:	bf08      	it	eq
   292c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   292c8:	d014      	beq.n	292f4 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   292ca:	4602      	mov	r2, r0
   292cc:	460b      	mov	r3, r1
   292ce:	4958      	ldr	r1, [pc, #352]	; (29430 <value_to_pretty+0x2f4>)
   292d0:	4638      	mov	r0, r7
   292d2:	f002 fa3d 	bl	2b750 <fprintf>
   292d6:	2800      	cmp	r0, #0
   292d8:	f280 80dc 	bge.w	29494 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   292dc:	2604      	movs	r6, #4
   292de:	e0dd      	b.n	2949c <value_to_pretty+0x360>
   292e0:	2101      	movs	r1, #1
   292e2:	e7e8      	b.n	292b6 <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   292e4:	4953      	ldr	r1, [pc, #332]	; (29434 <value_to_pretty+0x2f8>)
   292e6:	4638      	mov	r0, r7
   292e8:	f002 fa32 	bl	2b750 <fprintf>
   292ec:	2800      	cmp	r0, #0
   292ee:	f280 80d1 	bge.w	29494 <value_to_pretty+0x358>
   292f2:	e7f3      	b.n	292dc <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   292f4:	4950      	ldr	r1, [pc, #320]	; (29438 <value_to_pretty+0x2fc>)
   292f6:	4638      	mov	r0, r7
   292f8:	f002 fa2a 	bl	2b750 <fprintf>
   292fc:	2800      	cmp	r0, #0
   292fe:	f280 80c9 	bge.w	29494 <value_to_pretty+0x358>
   29302:	e7eb      	b.n	292dc <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   29304:	f7e2 ff4a 	bl	c19c <hal_debugger_connected>
   29308:	b100      	cbz	r0, 2930c <value_to_pretty+0x1d0>
   2930a:	be01      	bkpt	0x0001
   2930c:	2300      	movs	r3, #0
   2930e:	461a      	mov	r2, r3
   29310:	4619      	mov	r1, r3
   29312:	4618      	mov	r0, r3
   29314:	f7e3 fc46 	bl	cba4 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   29318:	9a01      	ldr	r2, [sp, #4]
   2931a:	9902      	ldr	r1, [sp, #8]
   2931c:	4638      	mov	r0, r7
   2931e:	f7ff fde3 	bl	28ee8 <hexDump>
   29322:	2800      	cmp	r0, #0
   29324:	da01      	bge.n	2932a <value_to_pretty+0x1ee>
   29326:	2401      	movs	r4, #1
   29328:	e753      	b.n	291d2 <value_to_pretty+0x96>
   2932a:	4944      	ldr	r1, [pc, #272]	; (2943c <value_to_pretty+0x300>)
   2932c:	4638      	mov	r0, r7
   2932e:	f002 fa0f 	bl	2b750 <fprintf>
   29332:	2800      	cmp	r0, #0
   29334:	db01      	blt.n	2933a <value_to_pretty+0x1fe>
   29336:	2400      	movs	r4, #0
   29338:	e74b      	b.n	291d2 <value_to_pretty+0x96>
   2933a:	2401      	movs	r4, #1
   2933c:	e749      	b.n	291d2 <value_to_pretty+0x96>
        size_t n = 0;
   2933e:	2300      	movs	r3, #0
   29340:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   29342:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   29344:	2b60      	cmp	r3, #96	; 0x60
   29346:	d11c      	bne.n	29382 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   29348:	460b      	mov	r3, r1
   2934a:	aa01      	add	r2, sp, #4
   2934c:	a902      	add	r1, sp, #8
   2934e:	4628      	mov	r0, r5
   29350:	f000 f918 	bl	29584 <_cbor_value_dup_string>
        if (err)
   29354:	4606      	mov	r6, r0
   29356:	2800      	cmp	r0, #0
   29358:	f040 80a0 	bne.w	2949c <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   2935c:	4938      	ldr	r1, [pc, #224]	; (29440 <value_to_pretty+0x304>)
   2935e:	4638      	mov	r0, r7
   29360:	f002 f9f6 	bl	2b750 <fprintf>
                      || fprintf(out, "\"") < 0;
   29364:	2800      	cmp	r0, #0
   29366:	da16      	bge.n	29396 <value_to_pretty+0x25a>
   29368:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   2936a:	461c      	mov	r4, r3
        free(buffer);
   2936c:	9802      	ldr	r0, [sp, #8]
   2936e:	f001 fe2b 	bl	2afc8 <free>
        return err != CborNoError ? err :
   29372:	2e00      	cmp	r6, #0
   29374:	f040 8092 	bne.w	2949c <value_to_pretty+0x360>
   29378:	2c00      	cmp	r4, #0
   2937a:	f000 808f 	beq.w	2949c <value_to_pretty+0x360>
   2937e:	2604      	movs	r6, #4
   29380:	e08c      	b.n	2949c <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   29382:	f7e2 ff0b 	bl	c19c <hal_debugger_connected>
   29386:	b100      	cbz	r0, 2938a <value_to_pretty+0x24e>
   29388:	be01      	bkpt	0x0001
   2938a:	2300      	movs	r3, #0
   2938c:	461a      	mov	r2, r3
   2938e:	4619      	mov	r1, r3
   29390:	4618      	mov	r0, r3
   29392:	f7e3 fc07 	bl	cba4 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   29396:	9a01      	ldr	r2, [sp, #4]
   29398:	9902      	ldr	r1, [sp, #8]
   2939a:	4638      	mov	r0, r7
   2939c:	f7ff fdb8 	bl	28f10 <utf8EscapedDump>
   293a0:	4606      	mov	r6, r0
   293a2:	b108      	cbz	r0, 293a8 <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   293a4:	2301      	movs	r3, #1
   293a6:	e7e0      	b.n	2936a <value_to_pretty+0x22e>
   293a8:	4925      	ldr	r1, [pc, #148]	; (29440 <value_to_pretty+0x304>)
   293aa:	4638      	mov	r0, r7
   293ac:	f002 f9d0 	bl	2b750 <fprintf>
   293b0:	2800      	cmp	r0, #0
   293b2:	db01      	blt.n	293b8 <value_to_pretty+0x27c>
   293b4:	2300      	movs	r3, #0
   293b6:	e7d8      	b.n	2936a <value_to_pretty+0x22e>
   293b8:	2301      	movs	r3, #1
   293ba:	e7d6      	b.n	2936a <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   293bc:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   293be:	2bc0      	cmp	r3, #192	; 0xc0
   293c0:	d120      	bne.n	29404 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   293c2:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   293c4:	f013 0f01 	tst.w	r3, #1
   293c8:	d140      	bne.n	2944c <value_to_pretty+0x310>
   293ca:	898a      	ldrh	r2, [r1, #12]
   293cc:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   293ce:	491d      	ldr	r1, [pc, #116]	; (29444 <value_to_pretty+0x308>)
   293d0:	4638      	mov	r0, r7
   293d2:	f002 f9bd 	bl	2b750 <fprintf>
   293d6:	2800      	cmp	r0, #0
   293d8:	db3e      	blt.n	29458 <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   293da:	4628      	mov	r0, r5
   293dc:	f7ff fc12 	bl	28c04 <cbor_value_advance_fixed>
        if (err)
   293e0:	4606      	mov	r6, r0
   293e2:	2800      	cmp	r0, #0
   293e4:	d15a      	bne.n	2949c <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   293e6:	4629      	mov	r1, r5
   293e8:	4638      	mov	r0, r7
   293ea:	f7ff fea7 	bl	2913c <value_to_pretty>
        if (err)
   293ee:	4606      	mov	r6, r0
   293f0:	2800      	cmp	r0, #0
   293f2:	d153      	bne.n	2949c <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   293f4:	4914      	ldr	r1, [pc, #80]	; (29448 <value_to_pretty+0x30c>)
   293f6:	4638      	mov	r0, r7
   293f8:	f002 f9aa 	bl	2b750 <fprintf>
   293fc:	2800      	cmp	r0, #0
   293fe:	da4d      	bge.n	2949c <value_to_pretty+0x360>
            return CborErrorIO;
   29400:	2604      	movs	r6, #4
   29402:	e04b      	b.n	2949c <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   29404:	f7e2 feca 	bl	c19c <hal_debugger_connected>
   29408:	b100      	cbz	r0, 2940c <value_to_pretty+0x2d0>
   2940a:	be01      	bkpt	0x0001
   2940c:	2300      	movs	r3, #0
   2940e:	461a      	mov	r2, r3
   29410:	4619      	mov	r1, r3
   29412:	4618      	mov	r0, r3
   29414:	f7e3 fbc6 	bl	cba4 <__assert_func>
   29418:	0002e970 	.word	0x0002e970
   2941c:	0002e98c 	.word	0x0002e98c
   29420:	0002e9b0 	.word	0x0002e9b0
   29424:	0002e974 	.word	0x0002e974
   29428:	0002e978 	.word	0x0002e978
   2942c:	0002da14 	.word	0x0002da14
   29430:	0002e990 	.word	0x0002e990
   29434:	0002d930 	.word	0x0002d930
   29438:	0002e998 	.word	0x0002e998
   2943c:	0002e9b4 	.word	0x0002e9b4
   29440:	0002e9b8 	.word	0x0002e9b8
   29444:	0002e9bc 	.word	0x0002e9bc
   29448:	0002e9c4 	.word	0x0002e9c4
                _cbor_value_decode_int64_internal(value) : value->extra;
   2944c:	4608      	mov	r0, r1
   2944e:	f7ff fb80 	bl	28b52 <_cbor_value_decode_int64_internal>
   29452:	4602      	mov	r2, r0
   29454:	460b      	mov	r3, r1
   29456:	e7ba      	b.n	293ce <value_to_pretty+0x292>
            return CborErrorIO;
   29458:	2604      	movs	r6, #4
   2945a:	e01f      	b.n	2949c <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   2945c:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   2945e:	2be0      	cmp	r3, #224	; 0xe0
   29460:	d108      	bne.n	29474 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   29462:	7b2a      	ldrb	r2, [r5, #12]
   29464:	4926      	ldr	r1, [pc, #152]	; (29500 <value_to_pretty+0x3c4>)
   29466:	4638      	mov	r0, r7
   29468:	f002 f972 	bl	2b750 <fprintf>
   2946c:	2800      	cmp	r0, #0
   2946e:	da11      	bge.n	29494 <value_to_pretty+0x358>
            return CborErrorIO;
   29470:	2604      	movs	r6, #4
   29472:	e013      	b.n	2949c <value_to_pretty+0x360>
   29474:	f7e2 fe92 	bl	c19c <hal_debugger_connected>
   29478:	b100      	cbz	r0, 2947c <value_to_pretty+0x340>
   2947a:	be01      	bkpt	0x0001
   2947c:	2300      	movs	r3, #0
   2947e:	461a      	mov	r2, r3
   29480:	4619      	mov	r1, r3
   29482:	4618      	mov	r0, r3
   29484:	f7e3 fb8e 	bl	cba4 <__assert_func>
        if (fprintf(out, "null") < 0)
   29488:	491e      	ldr	r1, [pc, #120]	; (29504 <value_to_pretty+0x3c8>)
   2948a:	4638      	mov	r0, r7
   2948c:	f002 f960 	bl	2b750 <fprintf>
   29490:	2800      	cmp	r0, #0
   29492:	db30      	blt.n	294f6 <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   29494:	4628      	mov	r0, r5
   29496:	f7ff fbb5 	bl	28c04 <cbor_value_advance_fixed>
   2949a:	4606      	mov	r6, r0
    return err;
}
   2949c:	4630      	mov	r0, r6
   2949e:	b007      	add	sp, #28
   294a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   294a2:	4919      	ldr	r1, [pc, #100]	; (29508 <value_to_pretty+0x3cc>)
   294a4:	4638      	mov	r0, r7
   294a6:	f002 f953 	bl	2b750 <fprintf>
   294aa:	2800      	cmp	r0, #0
   294ac:	daf2      	bge.n	29494 <value_to_pretty+0x358>
            return CborErrorIO;
   294ae:	2604      	movs	r6, #4
   294b0:	e7f4      	b.n	2949c <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   294b2:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   294b4:	2bf5      	cmp	r3, #245	; 0xf5
   294b6:	d109      	bne.n	294cc <value_to_pretty+0x390>
    *result = !!value->extra;
   294b8:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   294ba:	b18b      	cbz	r3, 294e0 <value_to_pretty+0x3a4>
   294bc:	4913      	ldr	r1, [pc, #76]	; (2950c <value_to_pretty+0x3d0>)
   294be:	4638      	mov	r0, r7
   294c0:	f002 f946 	bl	2b750 <fprintf>
   294c4:	2800      	cmp	r0, #0
   294c6:	dae5      	bge.n	29494 <value_to_pretty+0x358>
            return CborErrorIO;
   294c8:	2604      	movs	r6, #4
   294ca:	e7e7      	b.n	2949c <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   294cc:	f7e2 fe66 	bl	c19c <hal_debugger_connected>
   294d0:	b100      	cbz	r0, 294d4 <value_to_pretty+0x398>
   294d2:	be01      	bkpt	0x0001
   294d4:	2300      	movs	r3, #0
   294d6:	461a      	mov	r2, r3
   294d8:	4619      	mov	r1, r3
   294da:	4618      	mov	r0, r3
   294dc:	f7e3 fb62 	bl	cba4 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   294e0:	490b      	ldr	r1, [pc, #44]	; (29510 <value_to_pretty+0x3d4>)
   294e2:	e7ec      	b.n	294be <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   294e4:	490b      	ldr	r1, [pc, #44]	; (29514 <value_to_pretty+0x3d8>)
   294e6:	4638      	mov	r0, r7
   294e8:	f002 f932 	bl	2b750 <fprintf>
   294ec:	2800      	cmp	r0, #0
   294ee:	db04      	blt.n	294fa <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   294f0:	f240 1603 	movw	r6, #259	; 0x103
   294f4:	e7d2      	b.n	2949c <value_to_pretty+0x360>
            return CborErrorIO;
   294f6:	2604      	movs	r6, #4
   294f8:	e7d0      	b.n	2949c <value_to_pretty+0x360>
            return CborErrorIO;
   294fa:	2604      	movs	r6, #4
   294fc:	e7ce      	b.n	2949c <value_to_pretty+0x360>
   294fe:	bf00      	nop
   29500:	0002e9c8 	.word	0x0002e9c8
   29504:	0002e9d8 	.word	0x0002e9d8
   29508:	0002e9e0 	.word	0x0002e9e0
   2950c:	0002e984 	.word	0x0002e984
   29510:	0002e97c 	.word	0x0002e97c
   29514:	0002e9ec 	.word	0x0002e9ec

00029518 <container_to_pretty>:
{
   29518:	b570      	push	{r4, r5, r6, lr}
   2951a:	4604      	mov	r4, r0
   2951c:	460d      	mov	r5, r1
   2951e:	4616      	mov	r6, r2
    const char *comma = "";
   29520:	4a12      	ldr	r2, [pc, #72]	; (2956c <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   29522:	e000      	b.n	29526 <container_to_pretty+0xe>
{
   29524:	4a12      	ldr	r2, [pc, #72]	; (29570 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   29526:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   29528:	b1e3      	cbz	r3, 29564 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   2952a:	4912      	ldr	r1, [pc, #72]	; (29574 <container_to_pretty+0x5c>)
   2952c:	4620      	mov	r0, r4
   2952e:	f002 f90f 	bl	2b750 <fprintf>
   29532:	2800      	cmp	r0, #0
   29534:	db15      	blt.n	29562 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   29536:	4629      	mov	r1, r5
   29538:	4620      	mov	r0, r4
   2953a:	f7ff fdff 	bl	2913c <value_to_pretty>
        if (err)
   2953e:	4603      	mov	r3, r0
   29540:	b980      	cbnz	r0, 29564 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   29542:	2e80      	cmp	r6, #128	; 0x80
   29544:	d0ee      	beq.n	29524 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   29546:	490c      	ldr	r1, [pc, #48]	; (29578 <container_to_pretty+0x60>)
   29548:	4620      	mov	r0, r4
   2954a:	f002 f901 	bl	2b750 <fprintf>
   2954e:	2800      	cmp	r0, #0
   29550:	db0a      	blt.n	29568 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   29552:	4629      	mov	r1, r5
   29554:	4620      	mov	r0, r4
   29556:	f7ff fdf1 	bl	2913c <value_to_pretty>
        if (err)
   2955a:	4603      	mov	r3, r0
   2955c:	2800      	cmp	r0, #0
   2955e:	d0e1      	beq.n	29524 <container_to_pretty+0xc>
   29560:	e000      	b.n	29564 <container_to_pretty+0x4c>
            return CborErrorIO;
   29562:	2304      	movs	r3, #4
}
   29564:	4618      	mov	r0, r3
   29566:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   29568:	2304      	movs	r3, #4
   2956a:	e7fb      	b.n	29564 <container_to_pretty+0x4c>
   2956c:	0002e494 	.word	0x0002e494
   29570:	0002e9f4 	.word	0x0002e9f4
   29574:	0002e9f8 	.word	0x0002e9f8
   29578:	0002e9fc 	.word	0x0002e9fc

0002957c <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   2957c:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   2957e:	f7ff fddd 	bl	2913c <value_to_pretty>
}
   29582:	bd08      	pop	{r3, pc}

00029584 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   29584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   29588:	b181      	cbz	r1, 295ac <_cbor_value_dup_string+0x28>
   2958a:	4605      	mov	r5, r0
   2958c:	4614      	mov	r4, r2
   2958e:	461e      	mov	r6, r3
   29590:	460f      	mov	r7, r1
    assert(buflen);
   29592:	b1aa      	cbz	r2, 295c0 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   29594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29598:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   2959a:	2300      	movs	r3, #0
   2959c:	4619      	mov	r1, r3
   2959e:	f7ff fc25 	bl	28dec <_cbor_value_copy_string>
    if (err)
   295a2:	4680      	mov	r8, r0
   295a4:	b1b0      	cbz	r0, 295d4 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   295a6:	4640      	mov	r0, r8
   295a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   295ac:	f7e2 fdf6 	bl	c19c <hal_debugger_connected>
   295b0:	b100      	cbz	r0, 295b4 <_cbor_value_dup_string+0x30>
   295b2:	be01      	bkpt	0x0001
   295b4:	2300      	movs	r3, #0
   295b6:	461a      	mov	r2, r3
   295b8:	4619      	mov	r1, r3
   295ba:	4618      	mov	r0, r3
   295bc:	f7e3 faf2 	bl	cba4 <__assert_func>
    assert(buflen);
   295c0:	f7e2 fdec 	bl	c19c <hal_debugger_connected>
   295c4:	b100      	cbz	r0, 295c8 <_cbor_value_dup_string+0x44>
   295c6:	be01      	bkpt	0x0001
   295c8:	2300      	movs	r3, #0
   295ca:	461a      	mov	r2, r3
   295cc:	4619      	mov	r1, r3
   295ce:	4618      	mov	r0, r3
   295d0:	f7e3 fae8 	bl	cba4 <__assert_func>
    ++*buflen;
   295d4:	6820      	ldr	r0, [r4, #0]
   295d6:	3001      	adds	r0, #1
   295d8:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   295da:	f001 fcbf 	bl	2af5c <malloc>
   295de:	4601      	mov	r1, r0
   295e0:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   295e2:	b158      	cbz	r0, 295fc <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   295e4:	4633      	mov	r3, r6
   295e6:	4622      	mov	r2, r4
   295e8:	4628      	mov	r0, r5
   295ea:	f7ff fbff 	bl	28dec <_cbor_value_copy_string>
    if (err) {
   295ee:	4680      	mov	r8, r0
   295f0:	2800      	cmp	r0, #0
   295f2:	d0d8      	beq.n	295a6 <_cbor_value_dup_string+0x22>
        free(*buffer);
   295f4:	6838      	ldr	r0, [r7, #0]
   295f6:	f001 fce7 	bl	2afc8 <free>
        return err;
   295fa:	e7d4      	b.n	295a6 <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   295fc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   29600:	e7d1      	b.n	295a6 <_cbor_value_dup_string+0x22>

00029602 <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   29602:	b538      	push	{r3, r4, r5, lr}
   29604:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   29606:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   29608:	2500      	movs	r5, #0
   2960a:	7963      	ldrb	r3, [r4, #5]
   2960c:	42ab      	cmp	r3, r5
   2960e:	dd08      	ble.n	29622 <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   29610:	4620      	mov	r0, r4
   29612:	f000 fac7 	bl	29ba4 <fcb_getnext_area>
   29616:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   29618:	69a3      	ldr	r3, [r4, #24]
   2961a:	4283      	cmp	r3, r0
   2961c:	d001      	beq.n	29622 <fcb_free_sector_cnt+0x20>
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2961e:	3501      	adds	r5, #1
   29620:	e7f3      	b.n	2960a <fcb_free_sector_cnt+0x8>
            break;
        }
    }
    return i;
}
   29622:	4628      	mov	r0, r5
   29624:	bd38      	pop	{r3, r4, r5, pc}

00029626 <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   29626:	69c2      	ldr	r2, [r0, #28]
   29628:	6983      	ldr	r3, [r0, #24]
   2962a:	429a      	cmp	r2, r3
   2962c:	d001      	beq.n	29632 <fcb_is_empty+0xc>
   2962e:	2000      	movs	r0, #0
   29630:	4770      	bx	lr
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
   29632:	6a03      	ldr	r3, [r0, #32]
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   29634:	2b08      	cmp	r3, #8
   29636:	d001      	beq.n	2963c <fcb_is_empty+0x16>
   29638:	2000      	movs	r0, #0
   2963a:	4770      	bx	lr
   2963c:	2001      	movs	r0, #1
}
   2963e:	4770      	bx	lr

00029640 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   29640:	297f      	cmp	r1, #127	; 0x7f
   29642:	d90a      	bls.n	2965a <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   29644:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   29648:	4299      	cmp	r1, r3
   2964a:	d809      	bhi.n	29660 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   2964c:	f061 037f 	orn	r3, r1, #127	; 0x7f
   29650:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   29652:	09c9      	lsrs	r1, r1, #7
   29654:	7041      	strb	r1, [r0, #1]
        return 2;
   29656:	2002      	movs	r0, #2
   29658:	4770      	bx	lr
        buf[0] = len;
   2965a:	7001      	strb	r1, [r0, #0]
        return 1;
   2965c:	2001      	movs	r0, #1
   2965e:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   29660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   29664:	4770      	bx	lr

00029666 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   29666:	7803      	ldrb	r3, [r0, #0]
   29668:	f990 2000 	ldrsb.w	r2, [r0]
   2966c:	2a00      	cmp	r2, #0
   2966e:	db02      	blt.n	29676 <fcb_get_len+0x10>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   29670:	800b      	strh	r3, [r1, #0]
        rc = 1;
   29672:	2001      	movs	r0, #1
    }
    return rc;
}
   29674:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   29676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2967a:	7842      	ldrb	r2, [r0, #1]
   2967c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   29680:	800b      	strh	r3, [r1, #0]
        rc = 2;
   29682:	2002      	movs	r0, #2
   29684:	4770      	bx	lr

00029686 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   29686:	b500      	push	{lr}
   29688:	b083      	sub	sp, #12
   2968a:	4603      	mov	r3, r0
   2968c:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   2968e:	6819      	ldr	r1, [r3, #0]
   29690:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   29692:	791b      	ldrb	r3, [r3, #4]
   29694:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   29698:	23ff      	movs	r3, #255	; 0xff
   2969a:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   2969e:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   296a2:	2308      	movs	r3, #8
   296a4:	466a      	mov	r2, sp
   296a6:	2100      	movs	r1, #0
   296a8:	f7e7 f9c5 	bl	10a36 <flash_area_write>
    if (rc) {
   296ac:	b910      	cbnz	r0, 296b4 <fcb_sector_hdr_init+0x2e>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   296ae:	b003      	add	sp, #12
   296b0:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   296b4:	f06f 0001 	mvn.w	r0, #1
   296b8:	e7f9      	b.n	296ae <fcb_sector_hdr_init+0x28>

000296ba <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   296ba:	b530      	push	{r4, r5, lr}
   296bc:	b083      	sub	sp, #12
   296be:	4604      	mov	r4, r0
   296c0:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   296c2:	4615      	mov	r5, r2
   296c4:	b19a      	cbz	r2, 296ee <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   296c6:	2308      	movs	r3, #8
   296c8:	462a      	mov	r2, r5
   296ca:	2100      	movs	r1, #0
   296cc:	f7e7 f9f6 	bl	10abc <flash_area_read_is_empty>
    if (rc < 0) {
   296d0:	1e03      	subs	r3, r0, #0
   296d2:	db0e      	blt.n	296f2 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   296d4:	2b01      	cmp	r3, #1
   296d6:	d00f      	beq.n	296f8 <fcb_sector_hdr_read+0x3e>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   296d8:	682a      	ldr	r2, [r5, #0]
   296da:	6823      	ldr	r3, [r4, #0]
   296dc:	429a      	cmp	r2, r3
   296de:	d10d      	bne.n	296fc <fcb_sector_hdr_read+0x42>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   296e0:	792a      	ldrb	r2, [r5, #4]
   296e2:	7923      	ldrb	r3, [r4, #4]
   296e4:	429a      	cmp	r2, r3
   296e6:	d10c      	bne.n	29702 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_VERSION;
    }
    return 1;
   296e8:	2001      	movs	r0, #1
}
   296ea:	b003      	add	sp, #12
   296ec:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   296ee:	466d      	mov	r5, sp
   296f0:	e7e9      	b.n	296c6 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_FLASH;
   296f2:	f06f 0001 	mvn.w	r0, #1
   296f6:	e7f8      	b.n	296ea <fcb_sector_hdr_read+0x30>
        return 0;
   296f8:	2000      	movs	r0, #0
   296fa:	e7f6      	b.n	296ea <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   296fc:	f06f 0006 	mvn.w	r0, #6
   29700:	e7f3      	b.n	296ea <fcb_sector_hdr_read+0x30>
        return FCB_ERR_VERSION;
   29702:	f06f 0007 	mvn.w	r0, #7
   29706:	e7f0      	b.n	296ea <fcb_sector_hdr_read+0x30>

00029708 <fcb_init>:
{
   29708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2970c:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   2970e:	6883      	ldr	r3, [r0, #8]
   29710:	2b00      	cmp	r3, #0
   29712:	f000 8087 	beq.w	29824 <fcb_init+0x11c>
   29716:	4606      	mov	r6, r0
   29718:	7943      	ldrb	r3, [r0, #5]
   2971a:	7982      	ldrb	r2, [r0, #6]
   2971c:	1a9b      	subs	r3, r3, r2
   2971e:	2b00      	cmp	r3, #0
   29720:	f340 8083 	ble.w	2982a <fcb_init+0x122>
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   29724:	f04f 0b00 	mov.w	fp, #0
   29728:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   2972c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   29730:	46d1      	mov	r9, sl
    int max_align = 1;
   29732:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   29736:	465f      	mov	r7, fp
   29738:	e00a      	b.n	29750 <fcb_init+0x48>
            max_align = flash_area_align(fap);
   2973a:	4620      	mov	r0, r4
   2973c:	f7e7 f9a1 	bl	10a82 <flash_area_align>
   29740:	4680      	mov	r8, r0
   29742:	e012      	b.n	2976a <fcb_init+0x62>
            oldest = newest = fda.fd_id;
   29744:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   29748:	46a3      	mov	fp, r4
   2974a:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   2974c:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2974e:	3701      	adds	r7, #1
   29750:	7973      	ldrb	r3, [r6, #5]
   29752:	42bb      	cmp	r3, r7
   29754:	dd29      	ble.n	297aa <fcb_init+0xa2>
        fap = &fcb->f_sectors[i];
   29756:	68b4      	ldr	r4, [r6, #8]
   29758:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2975c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        align = flash_area_align(fap);
   29760:	4620      	mov	r0, r4
   29762:	f7e7 f98e 	bl	10a82 <flash_area_align>
        if (align > max_align) {
   29766:	4580      	cmp	r8, r0
   29768:	dbe7      	blt.n	2973a <fcb_init+0x32>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   2976a:	aa02      	add	r2, sp, #8
   2976c:	4621      	mov	r1, r4
   2976e:	4630      	mov	r0, r6
   29770:	f7ff ffa3 	bl	296ba <fcb_sector_hdr_read>
        if (rc < 0) {
   29774:	1e05      	subs	r5, r0, #0
   29776:	db3b      	blt.n	297f0 <fcb_init+0xe8>
        if (rc == 0) {
   29778:	2d00      	cmp	r5, #0
   2977a:	d0e8      	beq.n	2974e <fcb_init+0x46>
        if (oldest < 0) {
   2977c:	f1b9 0f00 	cmp.w	r9, #0
   29780:	dbe0      	blt.n	29744 <fcb_init+0x3c>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   29782:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   29786:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
   2978a:	fa0f f38a 	sxth.w	r3, sl
   2978e:	1ad3      	subs	r3, r2, r3
   29790:	2b00      	cmp	r3, #0
   29792:	dd02      	ble.n	2979a <fcb_init+0x92>
            newest = fda.fd_id;
   29794:	468a      	mov	sl, r1
            newest_fap = fap;
   29796:	46a3      	mov	fp, r4
   29798:	e7d9      	b.n	2974e <fcb_init+0x46>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2979a:	fa0f f389 	sxth.w	r3, r9
   2979e:	1a9a      	subs	r2, r3, r2
   297a0:	2a00      	cmp	r2, #0
   297a2:	ddd4      	ble.n	2974e <fcb_init+0x46>
            oldest = fda.fd_id;
   297a4:	4689      	mov	r9, r1
            oldest_fap = fap;
   297a6:	9401      	str	r4, [sp, #4]
   297a8:	e7d1      	b.n	2974e <fcb_init+0x46>
    if (oldest < 0) {
   297aa:	f1b9 0f00 	cmp.w	r9, #0
   297ae:	db23      	blt.n	297f8 <fcb_init+0xf0>
    fcb->f_align = max_align;
   297b0:	fa5f f888 	uxtb.w	r8, r8
   297b4:	f886 802e 	strb.w	r8, [r6, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   297b8:	9b01      	ldr	r3, [sp, #4]
   297ba:	61b3      	str	r3, [r6, #24]
    fcb->f_active.fe_area = newest_fap;
   297bc:	f8c6 b01c 	str.w	fp, [r6, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   297c0:	2308      	movs	r3, #8
   297c2:	6233      	str	r3, [r6, #32]
    fcb->f_active_id = newest;
   297c4:	f8a6 a02c 	strh.w	sl, [r6, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   297c8:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
   297cc:	ea18 0505 	ands.w	r5, r8, r5
   297d0:	d11e      	bne.n	29810 <fcb_init+0x108>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   297d2:	f106 011c 	add.w	r1, r6, #28
   297d6:	4630      	mov	r0, r6
   297d8:	f000 f9c0 	bl	29b5c <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   297dc:	f110 0f03 	cmn.w	r0, #3
   297e0:	d002      	beq.n	297e8 <fcb_init+0xe0>
        if (rc != 0) {
   297e2:	2800      	cmp	r0, #0
   297e4:	d0f5      	beq.n	297d2 <fcb_init+0xca>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   297e6:	4605      	mov	r5, r0
    os_mutex_init(&fcb->f_mtx);
   297e8:	f106 000c 	add.w	r0, r6, #12
   297ec:	f7e4 ff7a 	bl	e6e4 <os_mutex_init>
}
   297f0:	4628      	mov	r0, r5
   297f2:	b005      	add	sp, #20
   297f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   297f8:	68b3      	ldr	r3, [r6, #8]
   297fa:	461c      	mov	r4, r3
   297fc:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   297fe:	2200      	movs	r2, #0
   29800:	4619      	mov	r1, r3
   29802:	4630      	mov	r0, r6
   29804:	f7ff ff3f 	bl	29686 <fcb_sector_hdr_init>
        if (rc) {
   29808:	4682      	mov	sl, r0
   2980a:	b988      	cbnz	r0, 29830 <fcb_init+0x128>
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   2980c:	46a3      	mov	fp, r4
   2980e:	e7cf      	b.n	297b0 <fcb_init+0xa8>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   29810:	f7e2 fcc4 	bl	c19c <hal_debugger_connected>
   29814:	b100      	cbz	r0, 29818 <fcb_init+0x110>
   29816:	be01      	bkpt	0x0001
   29818:	2300      	movs	r3, #0
   2981a:	461a      	mov	r2, r3
   2981c:	4619      	mov	r1, r3
   2981e:	4618      	mov	r0, r3
   29820:	f7e3 f9c0 	bl	cba4 <__assert_func>
        return FCB_ERR_ARGS;
   29824:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   29828:	e7e2      	b.n	297f0 <fcb_init+0xe8>
   2982a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2982e:	e7df      	b.n	297f0 <fcb_init+0xe8>
            return rc;
   29830:	4605      	mov	r5, r0
   29832:	e7dd      	b.n	297f0 <fcb_init+0xe8>

00029834 <fcb_offset_last_n>:
 * @return 0 on there are any fcbs aviable; FCB_ERR_NOVAR otherwise
 */
int
fcb_offset_last_n(struct fcb *fcb, uint8_t entries,
        struct fcb_entry *last_n_entry)
{
   29834:	b5f0      	push	{r4, r5, r6, r7, lr}
   29836:	b085      	sub	sp, #20
   29838:	4606      	mov	r6, r0
   2983a:	4615      	mov	r5, r2
    struct fcb_entry loc;
    int i;

    /* assure a minimum amount of entries */
    if (!entries) {
   2983c:	460f      	mov	r7, r1
   2983e:	b901      	cbnz	r1, 29842 <fcb_offset_last_n+0xe>
        entries = 1;
   29840:	2701      	movs	r7, #1
    }

    i = 0;
    memset(&loc, 0, sizeof(loc));
   29842:	2400      	movs	r4, #0
   29844:	9400      	str	r4, [sp, #0]
   29846:	9401      	str	r4, [sp, #4]
   29848:	9402      	str	r4, [sp, #8]
   2984a:	9403      	str	r4, [sp, #12]
    while (!fcb_getnext(fcb, &loc)) {
   2984c:	e002      	b.n	29854 <fcb_offset_last_n+0x20>
        if (i == 0) {
            /* Start from the beginning of fcb entries */
            *last_n_entry = loc;
        } else if (i > (entries - 1)) {
   2984e:	42a7      	cmp	r7, r4
   29850:	dd0d      	ble.n	2986e <fcb_offset_last_n+0x3a>
            /* Update last_n_entry after n entries and keep updating */
            fcb_getnext(fcb, last_n_entry);
        }
        i++;
   29852:	3401      	adds	r4, #1
    while (!fcb_getnext(fcb, &loc)) {
   29854:	4669      	mov	r1, sp
   29856:	4630      	mov	r0, r6
   29858:	f000 f9f4 	bl	29c44 <fcb_getnext>
   2985c:	b960      	cbnz	r0, 29878 <fcb_offset_last_n+0x44>
        if (i == 0) {
   2985e:	2c00      	cmp	r4, #0
   29860:	d1f5      	bne.n	2984e <fcb_offset_last_n+0x1a>
            *last_n_entry = loc;
   29862:	ab04      	add	r3, sp, #16
   29864:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   29868:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2986c:	e7f1      	b.n	29852 <fcb_offset_last_n+0x1e>
            fcb_getnext(fcb, last_n_entry);
   2986e:	4629      	mov	r1, r5
   29870:	4630      	mov	r0, r6
   29872:	f000 f9e7 	bl	29c44 <fcb_getnext>
   29876:	e7ec      	b.n	29852 <fcb_offset_last_n+0x1e>
    }

    return (i == 0) ? FCB_ERR_NOVAR : 0;
   29878:	b114      	cbz	r4, 29880 <fcb_offset_last_n+0x4c>
   2987a:	2000      	movs	r0, #0
}
   2987c:	b005      	add	sp, #20
   2987e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (i == 0) ? FCB_ERR_NOVAR : 0;
   29880:	f06f 0002 	mvn.w	r0, #2
   29884:	e7fa      	b.n	2987c <fcb_offset_last_n+0x48>

00029886 <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   29886:	b538      	push	{r3, r4, r5, lr}
   29888:	4604      	mov	r4, r0
    int rc;

    rc = 0;
   2988a:	2500      	movs	r5, #0
    while (!fcb_is_empty(fcb)) {
   2988c:	4620      	mov	r0, r4
   2988e:	f7ff feca 	bl	29626 <fcb_is_empty>
   29892:	b928      	cbnz	r0, 298a0 <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   29894:	4620      	mov	r0, r4
   29896:	f000 f9ef 	bl	29c78 <fcb_rotate>
        if (rc) {
   2989a:	4605      	mov	r5, r0
   2989c:	2800      	cmp	r0, #0
   2989e:	d0f5      	beq.n	2988c <fcb_clear+0x6>
            break;
        }
    }
    return rc;
}
   298a0:	4628      	mov	r0, r5
   298a2:	bd38      	pop	{r3, r4, r5, pc}

000298a4 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   298a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   298a6:	4605      	mov	r5, r0
   298a8:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   298aa:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   298ac:	2400      	movs	r4, #0
    rfa = NULL;
   298ae:	4626      	mov	r6, r4
   298b0:	e006      	b.n	298c0 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   298b2:	69ab      	ldr	r3, [r5, #24]
   298b4:	428b      	cmp	r3, r1
   298b6:	d00b      	beq.n	298d0 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   298b8:	1c63      	adds	r3, r4, #1
   298ba:	42bc      	cmp	r4, r7
   298bc:	da09      	bge.n	298d2 <fcb_new_area+0x2e>
   298be:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   298c0:	4628      	mov	r0, r5
   298c2:	f000 f96f 	bl	29ba4 <fcb_getnext_area>
   298c6:	4601      	mov	r1, r0
        if (!rfa) {
   298c8:	2e00      	cmp	r6, #0
   298ca:	d1f2      	bne.n	298b2 <fcb_new_area+0xe>
            rfa = fa;
   298cc:	4606      	mov	r6, r0
   298ce:	e7f0      	b.n	298b2 <fcb_new_area+0xe>
            return NULL;
   298d0:	2600      	movs	r6, #0
    return rfa;
}
   298d2:	4630      	mov	r0, r6
   298d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000298d6 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   298d6:	b538      	push	{r3, r4, r5, lr}
   298d8:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   298da:	2100      	movs	r1, #0
   298dc:	f7ff ffe2 	bl	298a4 <fcb_new_area>
    if (!fa) {
   298e0:	b178      	cbz	r0, 29902 <fcb_append_to_scratch+0x2c>
   298e2:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   298e4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   298e6:	3201      	adds	r2, #1
   298e8:	b292      	uxth	r2, r2
   298ea:	4601      	mov	r1, r0
   298ec:	4620      	mov	r0, r4
   298ee:	f7ff feca 	bl	29686 <fcb_sector_hdr_init>
    if (rc) {
   298f2:	b928      	cbnz	r0, 29900 <fcb_append_to_scratch+0x2a>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   298f4:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   298f6:	2308      	movs	r3, #8
   298f8:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   298fa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   298fc:	3301      	adds	r3, #1
   298fe:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   29900:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   29902:	f06f 0003 	mvn.w	r0, #3
   29906:	e7fb      	b.n	29900 <fcb_append_to_scratch+0x2a>

00029908 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   29908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2990c:	b082      	sub	sp, #8
   2990e:	4605      	mov	r5, r0
   29910:	460c      	mov	r4, r1
   29912:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   29914:	a801      	add	r0, sp, #4
   29916:	f7ff fe93 	bl	29640 <fcb_put_len>
    if (cnt < 0) {
   2991a:	1e06      	subs	r6, r0, #0
   2991c:	db58      	blt.n	299d0 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   2991e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   29922:	2b01      	cmp	r3, #1
   29924:	d933      	bls.n	2998e <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29926:	1e58      	subs	r0, r3, #1
   29928:	fa10 f686 	uxtah	r6, r0, r6
   2992c:	4258      	negs	r0, r3
   2992e:	4006      	ands	r6, r0
    if (fcb->f_align <= 1) {
   29930:	2b01      	cmp	r3, #1
   29932:	d903      	bls.n	2993c <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29934:	1e59      	subs	r1, r3, #1
   29936:	440c      	add	r4, r1
   29938:	4259      	negs	r1, r3
   2993a:	400c      	ands	r4, r1
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2993c:	b2a1      	uxth	r1, r4
    if (fcb->f_align <= 1) {
   2993e:	2b01      	cmp	r3, #1
   29940:	d927      	bls.n	29992 <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29942:	425c      	negs	r4, r3
   29944:	401c      	ands	r4, r3
   29946:	440c      	add	r4, r1
   29948:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2994a:	f105 080c 	add.w	r8, r5, #12
   2994e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29952:	4640      	mov	r0, r8
   29954:	f7e4 ff30 	bl	e7b8 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   29958:	b108      	cbz	r0, 2995e <fcb_append+0x56>
   2995a:	2809      	cmp	r0, #9
   2995c:	d14e      	bne.n	299fc <fcb_append+0xf4>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   2995e:	6a2b      	ldr	r3, [r5, #32]
   29960:	4423      	add	r3, r4
   29962:	46b1      	mov	r9, r6
   29964:	441e      	add	r6, r3
   29966:	69eb      	ldr	r3, [r5, #28]
   29968:	689b      	ldr	r3, [r3, #8]
   2996a:	429e      	cmp	r6, r3
   2996c:	d923      	bls.n	299b6 <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   2996e:	79a9      	ldrb	r1, [r5, #6]
   29970:	4628      	mov	r0, r5
   29972:	f7ff ff97 	bl	298a4 <fcb_new_area>
        if (!fa || (fa->fa_size <
   29976:	4682      	mov	sl, r0
   29978:	2800      	cmp	r0, #0
   2997a:	d03c      	beq.n	299f6 <fcb_append+0xee>
   2997c:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   2997e:	eb04 0309 	add.w	r3, r4, r9
   29982:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   29984:	429a      	cmp	r2, r3
   29986:	d206      	bcs.n	29996 <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   29988:	f06f 0603 	mvn.w	r6, #3
   2998c:	e01d      	b.n	299ca <fcb_append+0xc2>
        return len;
   2998e:	b2b6      	uxth	r6, r6
   29990:	e7ce      	b.n	29930 <fcb_append+0x28>
   29992:	2401      	movs	r4, #1
   29994:	e7d7      	b.n	29946 <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   29996:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   29998:	3201      	adds	r2, #1
   2999a:	b292      	uxth	r2, r2
   2999c:	4601      	mov	r1, r0
   2999e:	4628      	mov	r0, r5
   299a0:	f7ff fe71 	bl	29686 <fcb_sector_hdr_init>
        if (rc) {
   299a4:	4606      	mov	r6, r0
   299a6:	b980      	cbnz	r0, 299ca <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   299a8:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   299ac:	2308      	movs	r3, #8
   299ae:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   299b0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   299b2:	3301      	adds	r3, #1
   299b4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   299b6:	464b      	mov	r3, r9
   299b8:	aa01      	add	r2, sp, #4
   299ba:	6a29      	ldr	r1, [r5, #32]
   299bc:	69e8      	ldr	r0, [r5, #28]
   299be:	f7e7 f83a 	bl	10a36 <flash_area_write>
    if (rc) {
   299c2:	4606      	mov	r6, r0
   299c4:	b140      	cbz	r0, 299d8 <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   299c6:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   299ca:	4640      	mov	r0, r8
   299cc:	f7e4 fe94 	bl	e6f8 <os_mutex_release>
    return rc;
}
   299d0:	4630      	mov	r0, r6
   299d2:	b002      	add	sp, #8
   299d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   299d8:	69eb      	ldr	r3, [r5, #28]
   299da:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   299dc:	6a2b      	ldr	r3, [r5, #32]
   299de:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   299e0:	444b      	add	r3, r9
   299e2:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   299e4:	4423      	add	r3, r4
   299e6:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   299e8:	68bb      	ldr	r3, [r7, #8]
   299ea:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   299ec:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   299ee:	4640      	mov	r0, r8
   299f0:	f7e4 fe82 	bl	e6f8 <os_mutex_release>
    return FCB_OK;
   299f4:	e7ec      	b.n	299d0 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   299f6:	f06f 0603 	mvn.w	r6, #3
   299fa:	e7e6      	b.n	299ca <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   299fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   29a00:	e7e6      	b.n	299d0 <fcb_append+0xc8>

00029a02 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   29a02:	b530      	push	{r4, r5, lr}
   29a04:	b083      	sub	sp, #12
   29a06:	4605      	mov	r5, r0
   29a08:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   29a0a:	f10d 0207 	add.w	r2, sp, #7
   29a0e:	f000 f818 	bl	29a42 <fcb_elem_crc8>
    if (rc) {
   29a12:	b988      	cbnz	r0, 29a38 <fcb_append_finish+0x36>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   29a14:	68a0      	ldr	r0, [r4, #8]
   29a16:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   29a18:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   29a1c:	2b01      	cmp	r3, #1
   29a1e:	d903      	bls.n	29a28 <fcb_append_finish+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29a20:	1e5a      	subs	r2, r3, #1
   29a22:	4411      	add	r1, r2
   29a24:	425b      	negs	r3, r3
   29a26:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   29a28:	2301      	movs	r3, #1
   29a2a:	f10d 0207 	add.w	r2, sp, #7
   29a2e:	4401      	add	r1, r0
   29a30:	6820      	ldr	r0, [r4, #0]
   29a32:	f7e7 f800 	bl	10a36 <flash_area_write>
    if (rc) {
   29a36:	b908      	cbnz	r0, 29a3c <fcb_append_finish+0x3a>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   29a38:	b003      	add	sp, #12
   29a3a:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   29a3c:	f06f 0001 	mvn.w	r0, #1
   29a40:	e7fa      	b.n	29a38 <fcb_append_finish+0x36>

00029a42 <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   29a42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29a46:	b08b      	sub	sp, #44	; 0x2c
   29a48:	4605      	mov	r5, r0
   29a4a:	4688      	mov	r8, r1
   29a4c:	4691      	mov	r9, r2
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   29a4e:	6849      	ldr	r1, [r1, #4]
   29a50:	1c8a      	adds	r2, r1, #2
   29a52:	f8d8 0000 	ldr.w	r0, [r8]
   29a56:	6883      	ldr	r3, [r0, #8]
   29a58:	429a      	cmp	r2, r3
   29a5a:	d84a      	bhi.n	29af2 <fcb_elem_crc8+0xb0>
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   29a5c:	2302      	movs	r3, #2
   29a5e:	aa02      	add	r2, sp, #8
   29a60:	f7e7 f82c 	bl	10abc <flash_area_read_is_empty>
    if (rc < 0) {
   29a64:	1e03      	subs	r3, r0, #0
   29a66:	db47      	blt.n	29af8 <fcb_elem_crc8+0xb6>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   29a68:	2b01      	cmp	r3, #1
   29a6a:	d048      	beq.n	29afe <fcb_elem_crc8+0xbc>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   29a6c:	f10d 0106 	add.w	r1, sp, #6
   29a70:	a802      	add	r0, sp, #8
   29a72:	f7ff fdf8 	bl	29666 <fcb_get_len>
   29a76:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   29a78:	f8d8 1004 	ldr.w	r1, [r8, #4]
    if (fcb->f_align <= 1) {
   29a7c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   29a80:	2b01      	cmp	r3, #1
   29a82:	d918      	bls.n	29ab6 <fcb_elem_crc8+0x74>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29a84:	1e5a      	subs	r2, r3, #1
   29a86:	fa12 f280 	uxtah	r2, r2, r0
   29a8a:	425b      	negs	r3, r3
   29a8c:	4013      	ands	r3, r2
   29a8e:	440b      	add	r3, r1
   29a90:	f8c8 3008 	str.w	r3, [r8, #8]
    loc->fe_data_len = len;
   29a94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   29a98:	f8a8 300c 	strh.w	r3, [r8, #12]

    crc8 = crc8_init();
   29a9c:	f002 fa96 	bl	2bfcc <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   29aa0:	4622      	mov	r2, r4
   29aa2:	a902      	add	r1, sp, #8
   29aa4:	f002 fa94 	bl	2bfd0 <crc8_calc>
   29aa8:	4606      	mov	r6, r0

    off = loc->fe_data_off;
   29aaa:	f8d8 5008 	ldr.w	r5, [r8, #8]
    end = loc->fe_data_off + len;
   29aae:	f8bd 7006 	ldrh.w	r7, [sp, #6]
   29ab2:	442f      	add	r7, r5
    for (; off < end; off += blk_sz) {
   29ab4:	e010      	b.n	29ad8 <fcb_elem_crc8+0x96>
        return len;
   29ab6:	b283      	uxth	r3, r0
   29ab8:	e7e9      	b.n	29a8e <fcb_elem_crc8+0x4c>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   29aba:	4623      	mov	r3, r4
   29abc:	aa02      	add	r2, sp, #8
   29abe:	4629      	mov	r1, r5
   29ac0:	f8d8 0000 	ldr.w	r0, [r8]
   29ac4:	f7e6 ffa4 	bl	10a10 <flash_area_read>
        if (rc) {
   29ac8:	b9e0      	cbnz	r0, 29b04 <fcb_elem_crc8+0xc2>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   29aca:	4622      	mov	r2, r4
   29acc:	a902      	add	r1, sp, #8
   29ace:	4630      	mov	r0, r6
   29ad0:	f002 fa7e 	bl	2bfd0 <crc8_calc>
   29ad4:	4606      	mov	r6, r0
    for (; off < end; off += blk_sz) {
   29ad6:	4425      	add	r5, r4
   29ad8:	42bd      	cmp	r5, r7
   29ada:	d204      	bcs.n	29ae6 <fcb_elem_crc8+0xa4>
        blk_sz = end - off;
   29adc:	1b7c      	subs	r4, r7, r5
        if (blk_sz > sizeof(tmp_str)) {
   29ade:	2c20      	cmp	r4, #32
   29ae0:	d9eb      	bls.n	29aba <fcb_elem_crc8+0x78>
            blk_sz = sizeof(tmp_str);
   29ae2:	2420      	movs	r4, #32
   29ae4:	e7e9      	b.n	29aba <fcb_elem_crc8+0x78>
    }
    *c8p = crc8;
   29ae6:	f889 6000 	strb.w	r6, [r9]

    return 0;
   29aea:	2000      	movs	r0, #0
}
   29aec:	b00b      	add	sp, #44	; 0x2c
   29aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   29af2:	f06f 0002 	mvn.w	r0, #2
   29af6:	e7f9      	b.n	29aec <fcb_elem_crc8+0xaa>
        return FCB_ERR_FLASH;
   29af8:	f06f 0001 	mvn.w	r0, #1
   29afc:	e7f6      	b.n	29aec <fcb_elem_crc8+0xaa>
        return FCB_ERR_NOVAR;
   29afe:	f06f 0002 	mvn.w	r0, #2
   29b02:	e7f3      	b.n	29aec <fcb_elem_crc8+0xaa>
            return FCB_ERR_FLASH;
   29b04:	f06f 0001 	mvn.w	r0, #1
   29b08:	e7f0      	b.n	29aec <fcb_elem_crc8+0xaa>

00029b0a <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   29b0a:	b530      	push	{r4, r5, lr}
   29b0c:	b083      	sub	sp, #12
   29b0e:	4605      	mov	r5, r0
   29b10:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   29b12:	f10d 0207 	add.w	r2, sp, #7
   29b16:	f7ff ff94 	bl	29a42 <fcb_elem_crc8>
    if (rc) {
   29b1a:	b9b8      	cbnz	r0, 29b4c <fcb_elem_info+0x42>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   29b1c:	68a0      	ldr	r0, [r4, #8]
   29b1e:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   29b20:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   29b24:	2b01      	cmp	r3, #1
   29b26:	d903      	bls.n	29b30 <fcb_elem_info+0x26>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29b28:	1e5a      	subs	r2, r3, #1
   29b2a:	4411      	add	r1, r2
   29b2c:	425b      	negs	r3, r3
   29b2e:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   29b30:	2301      	movs	r3, #1
   29b32:	f10d 0206 	add.w	r2, sp, #6
   29b36:	4401      	add	r1, r0
   29b38:	6820      	ldr	r0, [r4, #0]
   29b3a:	f7e6 ff69 	bl	10a10 <flash_area_read>
    if (rc) {
   29b3e:	b938      	cbnz	r0, 29b50 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   29b40:	f89d 2006 	ldrb.w	r2, [sp, #6]
   29b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29b48:	429a      	cmp	r2, r3
   29b4a:	d104      	bne.n	29b56 <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   29b4c:	b003      	add	sp, #12
   29b4e:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   29b50:	f06f 0001 	mvn.w	r0, #1
   29b54:	e7fa      	b.n	29b4c <fcb_elem_info+0x42>
        return FCB_ERR_CRC;
   29b56:	f06f 0005 	mvn.w	r0, #5
   29b5a:	e7f7      	b.n	29b4c <fcb_elem_info+0x42>

00029b5c <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   29b5c:	b570      	push	{r4, r5, r6, lr}
   29b5e:	4606      	mov	r6, r0
   29b60:	460d      	mov	r5, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   29b62:	f7ff ffd2 	bl	29b0a <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   29b66:	b168      	cbz	r0, 29b84 <fcb_getnext_in_area+0x28>
   29b68:	f110 0f06 	cmn.w	r0, #6
   29b6c:	d00a      	beq.n	29b84 <fcb_getnext_in_area+0x28>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   29b6e:	bd70      	pop	{r4, r5, r6, pc}
        return len;
   29b70:	2301      	movs	r3, #1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   29b72:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   29b74:	606b      	str	r3, [r5, #4]
            rc = fcb_elem_info(fcb, loc);
   29b76:	4629      	mov	r1, r5
   29b78:	4630      	mov	r0, r6
   29b7a:	f7ff ffc6 	bl	29b0a <fcb_elem_info>
            if (rc != FCB_ERR_CRC) {
   29b7e:	f110 0f06 	cmn.w	r0, #6
   29b82:	d1f4      	bne.n	29b6e <fcb_getnext_in_area+0x12>
            loc->fe_elem_off = loc->fe_data_off +
   29b84:	68ac      	ldr	r4, [r5, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   29b86:	89aa      	ldrh	r2, [r5, #12]
    if (fcb->f_align <= 1) {
   29b88:	f896 302e 	ldrb.w	r3, [r6, #46]	; 0x2e
   29b8c:	2b01      	cmp	r3, #1
   29b8e:	d903      	bls.n	29b98 <fcb_getnext_in_area+0x3c>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29b90:	1e59      	subs	r1, r3, #1
   29b92:	440a      	add	r2, r1
   29b94:	4259      	negs	r1, r3
   29b96:	400a      	ands	r2, r1
            loc->fe_elem_off = loc->fe_data_off +
   29b98:	4422      	add	r2, r4
    if (fcb->f_align <= 1) {
   29b9a:	2b01      	cmp	r3, #1
   29b9c:	d9e8      	bls.n	29b70 <fcb_getnext_in_area+0x14>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   29b9e:	4259      	negs	r1, r3
   29ba0:	400b      	ands	r3, r1
   29ba2:	e7e6      	b.n	29b72 <fcb_getnext_in_area+0x16>

00029ba4 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   29ba4:	4603      	mov	r3, r0
    fap++;
   29ba6:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   29ba8:	6880      	ldr	r0, [r0, #8]
   29baa:	795b      	ldrb	r3, [r3, #5]
   29bac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29bb0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   29bb4:	428b      	cmp	r3, r1
   29bb6:	d900      	bls.n	29bba <fcb_getnext_area+0x16>
    fap++;
   29bb8:	4608      	mov	r0, r1
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   29bba:	4770      	bx	lr

00029bbc <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   29bbc:	b538      	push	{r3, r4, r5, lr}
   29bbe:	4605      	mov	r5, r0
   29bc0:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   29bc2:	680b      	ldr	r3, [r1, #0]
   29bc4:	b313      	cbz	r3, 29c0c <fcb_getnext_nolock+0x50>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   29bc6:	6863      	ldr	r3, [r4, #4]
   29bc8:	bb1b      	cbnz	r3, 29c12 <fcb_getnext_nolock+0x56>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   29bca:	2308      	movs	r3, #8
   29bcc:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   29bce:	4621      	mov	r1, r4
   29bd0:	4628      	mov	r0, r5
   29bd2:	f7ff ff9a 	bl	29b0a <fcb_elem_info>
   29bd6:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   29bd8:	f113 0f06 	cmn.w	r3, #6
   29bdc:	d01f      	beq.n	29c1e <fcb_getnext_nolock+0x62>
   29bde:	b19b      	cbz	r3, 29c08 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   29be0:	6821      	ldr	r1, [r4, #0]
   29be2:	69eb      	ldr	r3, [r5, #28]
   29be4:	4299      	cmp	r1, r3
   29be6:	d02a      	beq.n	29c3e <fcb_getnext_nolock+0x82>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   29be8:	4628      	mov	r0, r5
   29bea:	f7ff ffdb 	bl	29ba4 <fcb_getnext_area>
   29bee:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   29bf0:	2308      	movs	r3, #8
   29bf2:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   29bf4:	4621      	mov	r1, r4
   29bf6:	4628      	mov	r0, r5
   29bf8:	f7ff ff87 	bl	29b0a <fcb_elem_info>
   29bfc:	4603      	mov	r3, r0
            switch (rc) {
   29bfe:	f110 0f06 	cmn.w	r0, #6
   29c02:	d00c      	beq.n	29c1e <fcb_getnext_nolock+0x62>
   29c04:	2800      	cmp	r0, #0
   29c06:	d1eb      	bne.n	29be0 <fcb_getnext_nolock+0x24>
            }
        }
    }

    return 0;
}
   29c08:	4618      	mov	r0, r3
   29c0a:	bd38      	pop	{r3, r4, r5, pc}
        loc->fe_area = fcb->f_oldest;
   29c0c:	6983      	ldr	r3, [r0, #24]
   29c0e:	600b      	str	r3, [r1, #0]
   29c10:	e7d9      	b.n	29bc6 <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   29c12:	4621      	mov	r1, r4
   29c14:	4628      	mov	r0, r5
   29c16:	f7ff ffa1 	bl	29b5c <fcb_getnext_in_area>
   29c1a:	4603      	mov	r3, r0
   29c1c:	e7dc      	b.n	29bd8 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   29c1e:	f113 0f06 	cmn.w	r3, #6
   29c22:	d10a      	bne.n	29c3a <fcb_getnext_nolock+0x7e>
        rc = fcb_getnext_in_area(fcb, loc);
   29c24:	4621      	mov	r1, r4
   29c26:	4628      	mov	r0, r5
   29c28:	f7ff ff98 	bl	29b5c <fcb_getnext_in_area>
        if (rc == 0) {
   29c2c:	4603      	mov	r3, r0
   29c2e:	2800      	cmp	r0, #0
   29c30:	d0ea      	beq.n	29c08 <fcb_getnext_nolock+0x4c>
        if (rc != FCB_ERR_CRC) {
   29c32:	f110 0f06 	cmn.w	r0, #6
   29c36:	d0f2      	beq.n	29c1e <fcb_getnext_nolock+0x62>
next_sector:
   29c38:	e7d2      	b.n	29be0 <fcb_getnext_nolock+0x24>
    return 0;
   29c3a:	2300      	movs	r3, #0
   29c3c:	e7e4      	b.n	29c08 <fcb_getnext_nolock+0x4c>
                return FCB_ERR_NOVAR;
   29c3e:	f06f 0302 	mvn.w	r3, #2
   29c42:	e7e1      	b.n	29c08 <fcb_getnext_nolock+0x4c>

00029c44 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   29c44:	b570      	push	{r4, r5, r6, lr}
   29c46:	4604      	mov	r4, r0
   29c48:	460d      	mov	r5, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   29c4a:	f100 060c 	add.w	r6, r0, #12
   29c4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29c52:	4630      	mov	r0, r6
   29c54:	f7e4 fdb0 	bl	e7b8 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   29c58:	b108      	cbz	r0, 29c5e <fcb_getnext+0x1a>
   29c5a:	2809      	cmp	r0, #9
   29c5c:	d109      	bne.n	29c72 <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   29c5e:	4629      	mov	r1, r5
   29c60:	4620      	mov	r0, r4
   29c62:	f7ff ffab 	bl	29bbc <fcb_getnext_nolock>
   29c66:	4604      	mov	r4, r0
    os_mutex_release(&fcb->f_mtx);
   29c68:	4630      	mov	r0, r6
   29c6a:	f7e4 fd45 	bl	e6f8 <os_mutex_release>

    return rc;
}
   29c6e:	4620      	mov	r0, r4
   29c70:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   29c72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29c76:	e7fa      	b.n	29c6e <fcb_getnext+0x2a>

00029c78 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   29c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c7a:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   29c7c:	f100 050c 	add.w	r5, r0, #12
   29c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29c84:	4628      	mov	r0, r5
   29c86:	f7e4 fd97 	bl	e7b8 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   29c8a:	b108      	cbz	r0, 29c90 <fcb_rotate+0x18>
   29c8c:	2809      	cmp	r0, #9
   29c8e:	d12c      	bne.n	29cea <fcb_rotate+0x72>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   29c90:	69a0      	ldr	r0, [r4, #24]
   29c92:	6882      	ldr	r2, [r0, #8]
   29c94:	2100      	movs	r1, #0
   29c96:	f7e6 fee1 	bl	10a5c <flash_area_erase>
    if (rc) {
   29c9a:	4606      	mov	r6, r0
   29c9c:	bb10      	cbnz	r0, 29ce4 <fcb_rotate+0x6c>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   29c9e:	69a1      	ldr	r1, [r4, #24]
   29ca0:	69e3      	ldr	r3, [r4, #28]
   29ca2:	4299      	cmp	r1, r3
   29ca4:	d009      	beq.n	29cba <fcb_rotate+0x42>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   29ca6:	69a1      	ldr	r1, [r4, #24]
   29ca8:	4620      	mov	r0, r4
   29caa:	f7ff ff7b 	bl	29ba4 <fcb_getnext_area>
   29cae:	61a0      	str	r0, [r4, #24]
out:
    os_mutex_release(&fcb->f_mtx);
   29cb0:	4628      	mov	r0, r5
   29cb2:	f7e4 fd21 	bl	e6f8 <os_mutex_release>
    return rc;
}
   29cb6:	4630      	mov	r0, r6
   29cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   29cba:	4620      	mov	r0, r4
   29cbc:	f7ff ff72 	bl	29ba4 <fcb_getnext_area>
   29cc0:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   29cc2:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   29cc4:	3201      	adds	r2, #1
   29cc6:	b292      	uxth	r2, r2
   29cc8:	4601      	mov	r1, r0
   29cca:	4620      	mov	r0, r4
   29ccc:	f7ff fcdb 	bl	29686 <fcb_sector_hdr_init>
        if (rc) {
   29cd0:	4606      	mov	r6, r0
   29cd2:	2800      	cmp	r0, #0
   29cd4:	d1ec      	bne.n	29cb0 <fcb_rotate+0x38>
        fcb->f_active.fe_area = fap;
   29cd6:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   29cd8:	2308      	movs	r3, #8
   29cda:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   29cdc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   29cde:	3301      	adds	r3, #1
   29ce0:	85a3      	strh	r3, [r4, #44]	; 0x2c
   29ce2:	e7e0      	b.n	29ca6 <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   29ce4:	f06f 0601 	mvn.w	r6, #1
   29ce8:	e7e2      	b.n	29cb0 <fcb_rotate+0x38>
        return FCB_ERR_ARGS;
   29cea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   29cee:	e7e2      	b.n	29cb6 <fcb_rotate+0x3e>

00029cf0 <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   29cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29cf4:	b084      	sub	sp, #16
   29cf6:	4606      	mov	r6, r0
   29cf8:	460d      	mov	r5, r1
   29cfa:	4617      	mov	r7, r2
   29cfc:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   29cfe:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   29d00:	2300      	movs	r3, #0
   29d02:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   29d04:	f100 040c 	add.w	r4, r0, #12
   29d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29d0c:	4620      	mov	r0, r4
   29d0e:	f7e4 fd53 	bl	e7b8 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   29d12:	b170      	cbz	r0, 29d32 <fcb_walk+0x42>
   29d14:	2809      	cmp	r0, #9
   29d16:	d00c      	beq.n	29d32 <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   29d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d1c:	e01e      	b.n	29d5c <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   29d1e:	4641      	mov	r1, r8
   29d20:	4668      	mov	r0, sp
   29d22:	47b8      	blx	r7
        if (rc) {
   29d24:	4603      	mov	r3, r0
   29d26:	b9c8      	cbnz	r0, 29d5c <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   29d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29d2c:	4620      	mov	r0, r4
   29d2e:	f7e4 fd43 	bl	e7b8 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   29d32:	4669      	mov	r1, sp
   29d34:	4630      	mov	r0, r6
   29d36:	f7ff ff41 	bl	29bbc <fcb_getnext_nolock>
   29d3a:	f110 0f03 	cmn.w	r0, #3
   29d3e:	d009      	beq.n	29d54 <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   29d40:	4620      	mov	r0, r4
   29d42:	f7e4 fcd9 	bl	e6f8 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   29d46:	2d00      	cmp	r5, #0
   29d48:	d0e9      	beq.n	29d1e <fcb_walk+0x2e>
   29d4a:	9900      	ldr	r1, [sp, #0]
   29d4c:	42a9      	cmp	r1, r5
   29d4e:	d0e6      	beq.n	29d1e <fcb_walk+0x2e>
            return 0;
   29d50:	2300      	movs	r3, #0
   29d52:	e003      	b.n	29d5c <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   29d54:	4620      	mov	r0, r4
   29d56:	f7e4 fccf 	bl	e6f8 <os_mutex_release>
    return 0;
   29d5a:	2300      	movs	r3, #0
}
   29d5c:	4618      	mov	r0, r3
   29d5e:	b004      	add	sp, #16
   29d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029d64 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   29d64:	b908      	cbnz	r0, 29d6a <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   29d66:	4802      	ldr	r0, [pc, #8]	; (29d70 <hal_bsp_flash_dev+0xc>)
    if (id == 1) {
        return &nrf52k_qspi_dev;
    }
#endif
    return NULL;
}
   29d68:	4770      	bx	lr
    return NULL;
   29d6a:	2000      	movs	r0, #0
   29d6c:	4770      	bx	lr
   29d6e:	bf00      	nop
   29d70:	0002ea00 	.word	0x0002ea00

00029d74 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   29d74:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   29d76:	f7e2 fa2f 	bl	c1d8 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   29d7a:	f000 fc73 	bl	2a664 <nrf52_periph_create>
}
   29d7e:	bd08      	pop	{r3, pc}

00029d80 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   29d80:	6843      	ldr	r3, [r0, #4]
   29d82:	428b      	cmp	r3, r1
   29d84:	d805      	bhi.n	29d92 <hal_flash_check_addr+0x12>
   29d86:	6882      	ldr	r2, [r0, #8]
   29d88:	4413      	add	r3, r2
   29d8a:	428b      	cmp	r3, r1
   29d8c:	d304      	bcc.n	29d98 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
   29d8e:	2000      	movs	r0, #0
   29d90:	4770      	bx	lr
        return SYS_EINVAL;
   29d92:	f06f 0001 	mvn.w	r0, #1
   29d96:	4770      	bx	lr
   29d98:	f06f 0001 	mvn.w	r0, #1
}
   29d9c:	4770      	bx	lr

00029d9e <hal_flash_init>:
{
   29d9e:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   29da0:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
   29da2:	462c      	mov	r4, r5
   29da4:	e001      	b.n	29daa <hal_flash_init+0xc>
   29da6:	3401      	adds	r4, #1
   29da8:	b2e4      	uxtb	r4, r4
   29daa:	2cff      	cmp	r4, #255	; 0xff
   29dac:	d00b      	beq.n	29dc6 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   29dae:	4620      	mov	r0, r4
   29db0:	f7ff ffd8 	bl	29d64 <hal_bsp_flash_dev>
        if (!hf) {
   29db4:	b138      	cbz	r0, 29dc6 <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
   29db6:	6802      	ldr	r2, [r0, #0]
   29db8:	6952      	ldr	r2, [r2, #20]
   29dba:	4790      	blx	r2
   29dbc:	2800      	cmp	r0, #0
   29dbe:	d0f2      	beq.n	29da6 <hal_flash_init+0x8>
            rc = SYS_EIO;
   29dc0:	f06f 0504 	mvn.w	r5, #4
   29dc4:	e7ef      	b.n	29da6 <hal_flash_init+0x8>
}
   29dc6:	4628      	mov	r0, r5
   29dc8:	bd38      	pop	{r3, r4, r5, pc}

00029dca <hal_flash_align>:
{
   29dca:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   29dcc:	f7ff ffca 	bl	29d64 <hal_bsp_flash_dev>
    if (!hf) {
   29dd0:	b108      	cbz	r0, 29dd6 <hal_flash_align+0xc>
    return hf->hf_align;
   29dd2:	7c00      	ldrb	r0, [r0, #16]
}
   29dd4:	bd08      	pop	{r3, pc}
        return 1;
   29dd6:	2001      	movs	r0, #1
   29dd8:	e7fc      	b.n	29dd4 <hal_flash_align+0xa>

00029dda <hal_flash_erased_val>:
{
   29dda:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   29ddc:	f7ff ffc2 	bl	29d64 <hal_bsp_flash_dev>
    if (!hf) {
   29de0:	b108      	cbz	r0, 29de6 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   29de2:	7d00      	ldrb	r0, [r0, #20]
}
   29de4:	bd08      	pop	{r3, pc}
        return 1;
   29de6:	2001      	movs	r0, #1
   29de8:	e7fc      	b.n	29de4 <hal_flash_erased_val+0xa>

00029dea <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   29dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29dee:	460c      	mov	r4, r1
   29df0:	4617      	mov	r7, r2
   29df2:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   29df4:	f7ff ffb6 	bl	29d64 <hal_bsp_flash_dev>
    if (!hf) {
   29df8:	b1a0      	cbz	r0, 29e24 <hal_flash_read+0x3a>
   29dfa:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   29dfc:	4621      	mov	r1, r4
   29dfe:	f7ff ffbf 	bl	29d80 <hal_flash_check_addr>
   29e02:	b990      	cbnz	r0, 29e2a <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
   29e04:	1961      	adds	r1, r4, r5
   29e06:	4630      	mov	r0, r6
   29e08:	f7ff ffba 	bl	29d80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   29e0c:	b980      	cbnz	r0, 29e30 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   29e0e:	6833      	ldr	r3, [r6, #0]
   29e10:	f8d3 8000 	ldr.w	r8, [r3]
   29e14:	462b      	mov	r3, r5
   29e16:	463a      	mov	r2, r7
   29e18:	4621      	mov	r1, r4
   29e1a:	4630      	mov	r0, r6
   29e1c:	47c0      	blx	r8
    if (rc != 0) {
   29e1e:	b950      	cbnz	r0, 29e36 <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
   29e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   29e24:	f06f 0001 	mvn.w	r0, #1
   29e28:	e7fa      	b.n	29e20 <hal_flash_read+0x36>
        return SYS_EINVAL;
   29e2a:	f06f 0001 	mvn.w	r0, #1
   29e2e:	e7f7      	b.n	29e20 <hal_flash_read+0x36>
   29e30:	f06f 0001 	mvn.w	r0, #1
   29e34:	e7f4      	b.n	29e20 <hal_flash_read+0x36>
        return SYS_EIO;
   29e36:	f06f 0004 	mvn.w	r0, #4
   29e3a:	e7f1      	b.n	29e20 <hal_flash_read+0x36>

00029e3c <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   29e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e40:	4604      	mov	r4, r0
   29e42:	460d      	mov	r5, r1
   29e44:	4690      	mov	r8, r2
   29e46:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   29e48:	f7ff ff8c 	bl	29d64 <hal_bsp_flash_dev>
    if (!hf) {
   29e4c:	b1e8      	cbz	r0, 29e8a <hal_flash_write+0x4e>
   29e4e:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   29e50:	4629      	mov	r1, r5
   29e52:	f7ff ff95 	bl	29d80 <hal_flash_check_addr>
   29e56:	b9d8      	cbnz	r0, 29e90 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
   29e58:	19a9      	adds	r1, r5, r6
   29e5a:	4638      	mov	r0, r7
   29e5c:	f7ff ff90 	bl	29d80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   29e60:	b9c8      	cbnz	r0, 29e96 <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   29e62:	08e3      	lsrs	r3, r4, #3
   29e64:	4a10      	ldr	r2, [pc, #64]	; (29ea8 <hal_flash_write+0x6c>)
   29e66:	5cd0      	ldrb	r0, [r2, r3]
   29e68:	f004 0407 	and.w	r4, r4, #7
   29e6c:	fa40 f404 	asr.w	r4, r0, r4
   29e70:	f014 0f01 	tst.w	r4, #1
   29e74:	d112      	bne.n	29e9c <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   29e76:	683b      	ldr	r3, [r7, #0]
   29e78:	685c      	ldr	r4, [r3, #4]
   29e7a:	4633      	mov	r3, r6
   29e7c:	4642      	mov	r2, r8
   29e7e:	4629      	mov	r1, r5
   29e80:	4638      	mov	r0, r7
   29e82:	47a0      	blx	r4
    if (rc != 0) {
   29e84:	b968      	cbnz	r0, 29ea2 <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   29e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   29e8a:	f06f 0001 	mvn.w	r0, #1
   29e8e:	e7fa      	b.n	29e86 <hal_flash_write+0x4a>
        return SYS_EINVAL;
   29e90:	f06f 0001 	mvn.w	r0, #1
   29e94:	e7f7      	b.n	29e86 <hal_flash_write+0x4a>
   29e96:	f06f 0001 	mvn.w	r0, #1
   29e9a:	e7f4      	b.n	29e86 <hal_flash_write+0x4a>
        return SYS_EACCES;
   29e9c:	f06f 0006 	mvn.w	r0, #6
   29ea0:	e7f1      	b.n	29e86 <hal_flash_write+0x4a>
        return SYS_EIO;
   29ea2:	f06f 0004 	mvn.w	r0, #4
   29ea6:	e7ee      	b.n	29e86 <hal_flash_write+0x4a>
   29ea8:	20005140 	.word	0x20005140

00029eac <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   29eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29eb0:	b082      	sub	sp, #8
   29eb2:	4605      	mov	r5, r0
   29eb4:	460e      	mov	r6, r1
   29eb6:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   29eb8:	f7ff ff54 	bl	29d64 <hal_bsp_flash_dev>
    if (!hf) {
   29ebc:	2800      	cmp	r0, #0
   29ebe:	d051      	beq.n	29f64 <hal_flash_erase+0xb8>
   29ec0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   29ec2:	4631      	mov	r1, r6
   29ec4:	f7ff ff5c 	bl	29d80 <hal_flash_check_addr>
   29ec8:	2800      	cmp	r0, #0
   29eca:	d14e      	bne.n	29f6a <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
   29ecc:	eb06 0809 	add.w	r8, r6, r9
   29ed0:	4641      	mov	r1, r8
   29ed2:	4620      	mov	r0, r4
   29ed4:	f7ff ff54 	bl	29d80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   29ed8:	2800      	cmp	r0, #0
   29eda:	d149      	bne.n	29f70 <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   29edc:	08eb      	lsrs	r3, r5, #3
   29ede:	4a2a      	ldr	r2, [pc, #168]	; (29f88 <hal_flash_erase+0xdc>)
   29ee0:	5cd7      	ldrb	r7, [r2, r3]
   29ee2:	f005 0507 	and.w	r5, r5, #7
   29ee6:	fa47 f505 	asr.w	r5, r7, r5
   29eea:	f015 0a01 	ands.w	sl, r5, #1
   29eee:	d142      	bne.n	29f76 <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   29ef0:	45b0      	cmp	r8, r6
   29ef2:	d943      	bls.n	29f7c <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   29ef4:	6823      	ldr	r3, [r4, #0]
   29ef6:	699b      	ldr	r3, [r3, #24]
   29ef8:	2b00      	cmp	r3, #0
   29efa:	d031      	beq.n	29f60 <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
   29efc:	464a      	mov	r2, r9
   29efe:	4631      	mov	r1, r6
   29f00:	4620      	mov	r0, r4
   29f02:	4798      	blx	r3
   29f04:	4682      	mov	sl, r0
   29f06:	2800      	cmp	r0, #0
   29f08:	d13b      	bne.n	29f82 <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
   29f0a:	4650      	mov	r0, sl
   29f0c:	b002      	add	sp, #8
   29f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
   29f12:	f7e2 f943 	bl	c19c <hal_debugger_connected>
   29f16:	b100      	cbz	r0, 29f1a <hal_flash_erase+0x6e>
   29f18:	be01      	bkpt	0x0001
   29f1a:	2300      	movs	r3, #0
   29f1c:	461a      	mov	r2, r3
   29f1e:	4619      	mov	r1, r3
   29f20:	4618      	mov	r0, r3
   29f22:	f7e2 fe3f 	bl	cba4 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   29f26:	3501      	adds	r5, #1
   29f28:	68e3      	ldr	r3, [r4, #12]
   29f2a:	42ab      	cmp	r3, r5
   29f2c:	dded      	ble.n	29f0a <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   29f2e:	6823      	ldr	r3, [r4, #0]
   29f30:	68df      	ldr	r7, [r3, #12]
   29f32:	466b      	mov	r3, sp
   29f34:	aa01      	add	r2, sp, #4
   29f36:	4629      	mov	r1, r5
   29f38:	4620      	mov	r0, r4
   29f3a:	47b8      	blx	r7
            assert(rc == 0);
   29f3c:	2800      	cmp	r0, #0
   29f3e:	d1e8      	bne.n	29f12 <hal_flash_erase+0x66>
            end_area = start + size;
   29f40:	9901      	ldr	r1, [sp, #4]
   29f42:	9b00      	ldr	r3, [sp, #0]
   29f44:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   29f46:	429e      	cmp	r6, r3
   29f48:	d2ed      	bcs.n	29f26 <hal_flash_erase+0x7a>
   29f4a:	4588      	cmp	r8, r1
   29f4c:	d9eb      	bls.n	29f26 <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   29f4e:	6823      	ldr	r3, [r4, #0]
   29f50:	689b      	ldr	r3, [r3, #8]
   29f52:	4620      	mov	r0, r4
   29f54:	4798      	blx	r3
   29f56:	2800      	cmp	r0, #0
   29f58:	d0e5      	beq.n	29f26 <hal_flash_erase+0x7a>
                    return SYS_EIO;
   29f5a:	f06f 0a04 	mvn.w	sl, #4
   29f5e:	e7d4      	b.n	29f0a <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   29f60:	4655      	mov	r5, sl
   29f62:	e7e1      	b.n	29f28 <hal_flash_erase+0x7c>
        return SYS_EINVAL;
   29f64:	f06f 0a01 	mvn.w	sl, #1
   29f68:	e7cf      	b.n	29f0a <hal_flash_erase+0x5e>
        return SYS_EINVAL;
   29f6a:	f06f 0a01 	mvn.w	sl, #1
   29f6e:	e7cc      	b.n	29f0a <hal_flash_erase+0x5e>
   29f70:	f06f 0a01 	mvn.w	sl, #1
   29f74:	e7c9      	b.n	29f0a <hal_flash_erase+0x5e>
        return SYS_EACCES;
   29f76:	f06f 0a06 	mvn.w	sl, #6
   29f7a:	e7c6      	b.n	29f0a <hal_flash_erase+0x5e>
        return SYS_EINVAL;
   29f7c:	f06f 0a01 	mvn.w	sl, #1
   29f80:	e7c3      	b.n	29f0a <hal_flash_erase+0x5e>
            return SYS_EIO;
   29f82:	f06f 0a04 	mvn.w	sl, #4
   29f86:	e7c0      	b.n	29f0a <hal_flash_erase+0x5e>
   29f88:	20005140 	.word	0x20005140

00029f8c <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   29f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f90:	4606      	mov	r6, r0
   29f92:	4690      	mov	r8, r2
   29f94:	461f      	mov	r7, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   29f96:	6804      	ldr	r4, [r0, #0]
   29f98:	6824      	ldr	r4, [r4, #0]
   29f9a:	47a0      	blx	r4
    if (rc != 0) {
   29f9c:	b960      	cbnz	r0, 29fb8 <hal_flash_is_erased+0x2c>
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   29f9e:	2100      	movs	r1, #0
   29fa0:	42b9      	cmp	r1, r7
   29fa2:	d206      	bcs.n	29fb2 <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
   29fa4:	f818 5001 	ldrb.w	r5, [r8, r1]
   29fa8:	7d34      	ldrb	r4, [r6, #20]
   29faa:	42a5      	cmp	r5, r4
   29fac:	d102      	bne.n	29fb4 <hal_flash_is_erased+0x28>
    for (i = 0; i < num_bytes; i++) {
   29fae:	3101      	adds	r1, #1
   29fb0:	e7f6      	b.n	29fa0 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
   29fb2:	2001      	movs	r0, #1
}
   29fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   29fb8:	f06f 0004 	mvn.w	r0, #4
   29fbc:	e7fa      	b.n	29fb4 <hal_flash_is_erased+0x28>

00029fbe <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   29fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29fc2:	460c      	mov	r4, r1
   29fc4:	4690      	mov	r8, r2
   29fc6:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   29fc8:	f7ff fecc 	bl	29d64 <hal_bsp_flash_dev>
    if (!hf) {
   29fcc:	b1f8      	cbz	r0, 2a00e <hal_flash_isempty+0x50>
   29fce:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   29fd0:	4621      	mov	r1, r4
   29fd2:	f7ff fed5 	bl	29d80 <hal_flash_check_addr>
   29fd6:	b9e8      	cbnz	r0, 2a014 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   29fd8:	1961      	adds	r1, r4, r5
   29fda:	4630      	mov	r0, r6
   29fdc:	f7ff fed0 	bl	29d80 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   29fe0:	b9d8      	cbnz	r0, 2a01a <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   29fe2:	6833      	ldr	r3, [r6, #0]
   29fe4:	691f      	ldr	r7, [r3, #16]
   29fe6:	b15f      	cbz	r7, 2a000 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   29fe8:	462b      	mov	r3, r5
   29fea:	4642      	mov	r2, r8
   29fec:	4621      	mov	r1, r4
   29fee:	4630      	mov	r0, r6
   29ff0:	47b8      	blx	r7
        if (rc < 0) {
   29ff2:	2800      	cmp	r0, #0
   29ff4:	db01      	blt.n	29ffa <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   29ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   29ffa:	f06f 0004 	mvn.w	r0, #4
   29ffe:	e7fa      	b.n	29ff6 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   2a000:	462b      	mov	r3, r5
   2a002:	4642      	mov	r2, r8
   2a004:	4621      	mov	r1, r4
   2a006:	4630      	mov	r0, r6
   2a008:	f7ff ffc0 	bl	29f8c <hal_flash_is_erased>
   2a00c:	e7f3      	b.n	29ff6 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   2a00e:	f06f 0001 	mvn.w	r0, #1
   2a012:	e7f0      	b.n	29ff6 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   2a014:	f06f 0001 	mvn.w	r0, #1
   2a018:	e7ed      	b.n	29ff6 <hal_flash_isempty+0x38>
   2a01a:	f06f 0001 	mvn.w	r0, #1
   2a01e:	e7ea      	b.n	29ff6 <hal_flash_isempty+0x38>

0002a020 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   2a020:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a022:	b085      	sub	sp, #20
   2a024:	4607      	mov	r7, r0
   2a026:	460e      	mov	r6, r1
   2a028:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   2a02a:	2400      	movs	r4, #0
   2a02c:	e007      	b.n	2a03e <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   2a02e:	466a      	mov	r2, sp
   2a030:	19a1      	adds	r1, r4, r6
   2a032:	4638      	mov	r0, r7
   2a034:	f7ff ffc3 	bl	29fbe <hal_flash_isempty>
        if (empty != 1) {
   2a038:	2801      	cmp	r0, #1
   2a03a:	d108      	bne.n	2a04e <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   2a03c:	3410      	adds	r4, #16
   2a03e:	42ac      	cmp	r4, r5
   2a040:	d204      	bcs.n	2a04c <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   2a042:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   2a044:	2b0f      	cmp	r3, #15
   2a046:	d9f2      	bls.n	2a02e <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   2a048:	2310      	movs	r3, #16
   2a04a:	e7f0      	b.n	2a02e <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   2a04c:	2001      	movs	r0, #1
}
   2a04e:	b005      	add	sp, #20
   2a050:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0002a054 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   2a054:	2300      	movs	r3, #0
   2a056:	e000      	b.n	2a05a <nrf52k_flash_wait_ready+0x6>
   2a058:	3301      	adds	r3, #1
   2a05a:	4a06      	ldr	r2, [pc, #24]	; (2a074 <nrf52k_flash_wait_ready+0x20>)
   2a05c:	4293      	cmp	r3, r2
   2a05e:	dc06      	bgt.n	2a06e <nrf52k_flash_wait_ready+0x1a>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   2a060:	4a05      	ldr	r2, [pc, #20]	; (2a078 <nrf52k_flash_wait_ready+0x24>)
   2a062:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   2a066:	2a01      	cmp	r2, #1
   2a068:	d1f6      	bne.n	2a058 <nrf52k_flash_wait_ready+0x4>
            return 0;
   2a06a:	2000      	movs	r0, #0
        }
    }
    return -1;
}
   2a06c:	4770      	bx	lr
    return -1;
   2a06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a072:	4770      	bx	lr
   2a074:	0001869f 	.word	0x0001869f
   2a078:	4001e000 	.word	0x4001e000

0002a07c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   2a07c:	b538      	push	{r3, r4, r5, lr}
   2a07e:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   2a080:	f7ff ffe8 	bl	2a054 <nrf52k_flash_wait_ready>
   2a084:	b9e0      	cbnz	r0, 2a0c0 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a086:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a08a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   2a08c:	4b0e      	ldr	r3, [pc, #56]	; (2a0c8 <nrf52k_flash_erase_sector+0x4c>)
   2a08e:	2202      	movs	r2, #2
   2a090:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   2a094:	f7ff ffde 	bl	2a054 <nrf52k_flash_wait_ready>
   2a098:	b140      	cbz	r0, 2a0ac <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
   2a09a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   2a09e:	4b0a      	ldr	r3, [pc, #40]	; (2a0c8 <nrf52k_flash_erase_sector+0x4c>)
   2a0a0:	2200      	movs	r2, #0
   2a0a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   2a0a6:	b905      	cbnz	r5, 2a0aa <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   2a0a8:	b662      	cpsie	i
    return rc;
}
   2a0aa:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   2a0ac:	4b06      	ldr	r3, [pc, #24]	; (2a0c8 <nrf52k_flash_erase_sector+0x4c>)
   2a0ae:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   2a0b2:	f7ff ffcf 	bl	2a054 <nrf52k_flash_wait_ready>
   2a0b6:	2800      	cmp	r0, #0
   2a0b8:	d0f1      	beq.n	2a09e <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   2a0ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a0be:	e7ee      	b.n	2a09e <nrf52k_flash_erase_sector+0x22>
        return -1;
   2a0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a0c4:	e7f1      	b.n	2a0aa <nrf52k_flash_erase_sector+0x2e>
   2a0c6:	bf00      	nop
   2a0c8:	4001e000 	.word	0x4001e000

0002a0cc <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   2a0cc:	2000      	movs	r0, #0
   2a0ce:	4770      	bx	lr

0002a0d0 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   2a0d0:	29ff      	cmp	r1, #255	; 0xff
   2a0d2:	dc06      	bgt.n	2a0e2 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   2a0d4:	0309      	lsls	r1, r1, #12
   2a0d6:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   2a0d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2a0dc:	601a      	str	r2, [r3, #0]
}
   2a0de:	2000      	movs	r0, #0
   2a0e0:	4770      	bx	lr
{
   2a0e2:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   2a0e4:	f7e2 f85a 	bl	c19c <hal_debugger_connected>
   2a0e8:	b100      	cbz	r0, 2a0ec <nrf52k_flash_sector_info+0x1c>
   2a0ea:	be01      	bkpt	0x0001
   2a0ec:	2300      	movs	r3, #0
   2a0ee:	461a      	mov	r2, r3
   2a0f0:	4619      	mov	r1, r3
   2a0f2:	4618      	mov	r0, r3
   2a0f4:	f7e2 fd56 	bl	cba4 <__assert_func>

0002a0f8 <nrf52k_flash_write>:
{
   2a0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a0fc:	b082      	sub	sp, #8
   2a0fe:	460d      	mov	r5, r1
   2a100:	4616      	mov	r6, r2
   2a102:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   2a104:	f7ff ffa6 	bl	2a054 <nrf52k_flash_wait_ready>
   2a108:	2800      	cmp	r0, #0
   2a10a:	d154      	bne.n	2a1b6 <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a10c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a110:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   2a112:	4b2a      	ldr	r3, [pc, #168]	; (2a1bc <nrf52k_flash_write+0xc4>)
   2a114:	2201      	movs	r2, #1
   2a116:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   2a11a:	f015 0803 	ands.w	r8, r5, #3
   2a11e:	d10a      	bne.n	2a136 <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
   2a120:	2c03      	cmp	r4, #3
   2a122:	d924      	bls.n	2a16e <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
   2a124:	f7ff ff96 	bl	2a054 <nrf52k_flash_wait_ready>
   2a128:	bbb8      	cbnz	r0, 2a19a <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
   2a12a:	f856 3b04 	ldr.w	r3, [r6], #4
   2a12e:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   2a132:	3c04      	subs	r4, #4
   2a134:	e7f4      	b.n	2a120 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   2a136:	f7ff ff8d 	bl	2a054 <nrf52k_flash_wait_ready>
   2a13a:	bb58      	cbnz	r0, 2a194 <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
   2a13c:	f025 0a03 	bic.w	sl, r5, #3
   2a140:	f8da 3000 	ldr.w	r3, [sl]
   2a144:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   2a146:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   2a14a:	45a1      	cmp	r9, r4
   2a14c:	d900      	bls.n	2a150 <nrf52k_flash_write+0x58>
            cnt = num_bytes;
   2a14e:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   2a150:	464a      	mov	r2, r9
   2a152:	4631      	mov	r1, r6
   2a154:	ab01      	add	r3, sp, #4
   2a156:	eb03 0008 	add.w	r0, r3, r8
   2a15a:	f7e4 fc2d 	bl	e9b8 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   2a15e:	9b01      	ldr	r3, [sp, #4]
   2a160:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   2a164:	444d      	add	r5, r9
        num_bytes -= cnt;
   2a166:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   2a16a:	444e      	add	r6, r9
   2a16c:	e7d8      	b.n	2a120 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   2a16e:	b15c      	cbz	r4, 2a188 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
   2a170:	682b      	ldr	r3, [r5, #0]
   2a172:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
   2a174:	4622      	mov	r2, r4
   2a176:	4631      	mov	r1, r6
   2a178:	a801      	add	r0, sp, #4
   2a17a:	f7e4 fc1d 	bl	e9b8 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   2a17e:	f7ff ff69 	bl	2a054 <nrf52k_flash_wait_ready>
   2a182:	b9a8      	cbnz	r0, 2a1b0 <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
   2a184:	9b01      	ldr	r3, [sp, #4]
   2a186:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   2a188:	f7ff ff64 	bl	2a054 <nrf52k_flash_wait_ready>
   2a18c:	b138      	cbz	r0, 2a19e <nrf52k_flash_write+0xa6>
        rc = -1;
   2a18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a192:	e004      	b.n	2a19e <nrf52k_flash_write+0xa6>
    int rc = -1;
   2a194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a198:	e001      	b.n	2a19e <nrf52k_flash_write+0xa6>
   2a19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   2a19e:	4b07      	ldr	r3, [pc, #28]	; (2a1bc <nrf52k_flash_write+0xc4>)
   2a1a0:	2200      	movs	r2, #0
   2a1a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   2a1a6:	b907      	cbnz	r7, 2a1aa <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
   2a1a8:	b662      	cpsie	i
}
   2a1aa:	b002      	add	sp, #8
   2a1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   2a1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a1b4:	e7f3      	b.n	2a19e <nrf52k_flash_write+0xa6>
        return -1;
   2a1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a1ba:	e7f6      	b.n	2a1aa <nrf52k_flash_write+0xb2>
   2a1bc:	4001e000 	.word	0x4001e000

0002a1c0 <nrf52k_flash_read>:
{
   2a1c0:	b508      	push	{r3, lr}
   2a1c2:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   2a1c4:	461a      	mov	r2, r3
   2a1c6:	f7e4 fbf7 	bl	e9b8 <memcpy>
}
   2a1ca:	2000      	movs	r0, #0
   2a1cc:	bd08      	pop	{r3, pc}
	...

0002a1d0 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   2a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   2a1d2:	f7e4 f9b9 	bl	e548 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   2a1d6:	4b39      	ldr	r3, [pc, #228]	; (2a2bc <nrf52_timer_handler+0xec>)
   2a1d8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   2a1dc:	4a38      	ldr	r2, [pc, #224]	; (2a2c0 <nrf52_timer_handler+0xf0>)
   2a1de:	6895      	ldr	r5, [r2, #8]
    assert(x <= 0xffffff);
   2a1e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2a1e4:	d22b      	bcs.n	2a23e <nrf52_timer_handler+0x6e>
   2a1e6:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   2a1e8:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   2a1ec:	d231      	bcs.n	2a252 <nrf52_timer_handler+0x82>
    result = x - y;
   2a1ee:	1b5b      	subs	r3, r3, r5
    if (result & 0x800000) {
   2a1f0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   2a1f4:	d037      	beq.n	2a266 <nrf52_timer_handler+0x96>
        return (result | 0xff800000);
   2a1f6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   2a1fa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   2a1fe:	4f30      	ldr	r7, [pc, #192]	; (2a2c0 <nrf52_timer_handler+0xf0>)
   2a200:	683d      	ldr	r5, [r7, #0]
   2a202:	fb93 f5f5 	sdiv	r5, r3, r5
    os_time_advance(ticks);
   2a206:	4628      	mov	r0, r5
   2a208:	f7e4 f8de 	bl	e3c8 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   2a20c:	4b2b      	ldr	r3, [pc, #172]	; (2a2bc <nrf52_timer_handler+0xec>)
   2a20e:	2200      	movs	r2, #0
   2a210:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   2a214:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   2a216:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   2a218:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   2a21c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   2a220:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   2a222:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   2a224:	f7e4 f999 	bl	e55a <os_arch_in_critical>
   2a228:	bb88      	cbnz	r0, 2a28e <nrf52_timer_handler+0xbe>
   2a22a:	f7e1 ffb7 	bl	c19c <hal_debugger_connected>
   2a22e:	b100      	cbz	r0, 2a232 <nrf52_timer_handler+0x62>
   2a230:	be01      	bkpt	0x0001
   2a232:	2300      	movs	r3, #0
   2a234:	461a      	mov	r2, r3
   2a236:	4619      	mov	r1, r3
   2a238:	4618      	mov	r0, r3
   2a23a:	f7e2 fcb3 	bl	cba4 <__assert_func>
    assert(x <= 0xffffff);
   2a23e:	f7e1 ffad 	bl	c19c <hal_debugger_connected>
   2a242:	b100      	cbz	r0, 2a246 <nrf52_timer_handler+0x76>
   2a244:	be01      	bkpt	0x0001
   2a246:	2300      	movs	r3, #0
   2a248:	461a      	mov	r2, r3
   2a24a:	4619      	mov	r1, r3
   2a24c:	4618      	mov	r0, r3
   2a24e:	f7e2 fca9 	bl	cba4 <__assert_func>
    assert(y <= 0xffffff);
   2a252:	f7e1 ffa3 	bl	c19c <hal_debugger_connected>
   2a256:	b100      	cbz	r0, 2a25a <nrf52_timer_handler+0x8a>
   2a258:	be01      	bkpt	0x0001
   2a25a:	2300      	movs	r3, #0
   2a25c:	461a      	mov	r2, r3
   2a25e:	4619      	mov	r1, r3
   2a260:	4618      	mov	r0, r3
   2a262:	f7e2 fc9f 	bl	cba4 <__assert_func>
        return (result & 0x007fffff);
   2a266:	f3c3 0316 	ubfx	r3, r3, #0, #23
   2a26a:	e7c8      	b.n	2a1fe <nrf52_timer_handler+0x2e>
    assert(y <= 0xffffff);
   2a26c:	f7e1 ff96 	bl	c19c <hal_debugger_connected>
   2a270:	b100      	cbz	r0, 2a274 <nrf52_timer_handler+0xa4>
   2a272:	be01      	bkpt	0x0001
   2a274:	2300      	movs	r3, #0
   2a276:	461a      	mov	r2, r3
   2a278:	4619      	mov	r1, r3
   2a27a:	4618      	mov	r0, r3
   2a27c:	f7e2 fc92 	bl	cba4 <__assert_func>
        return (result & 0x007fffff);
   2a280:	f3c2 0216 	ubfx	r2, r2, #0, #23
        if (delta > 2) {
   2a284:	2a02      	cmp	r2, #2
   2a286:	dc15      	bgt.n	2a2b4 <nrf52_timer_handler+0xe4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   2a288:	4a0d      	ldr	r2, [pc, #52]	; (2a2c0 <nrf52_timer_handler+0xf0>)
   2a28a:	6814      	ldr	r4, [r2, #0]
   2a28c:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   2a28e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   2a292:	4a0a      	ldr	r2, [pc, #40]	; (2a2bc <nrf52_timer_handler+0xec>)
   2a294:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   2a298:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   2a29c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   2a2a0:	d2e4      	bcs.n	2a26c <nrf52_timer_handler+0x9c>
    result = x - y;
   2a2a2:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   2a2a4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   2a2a8:	d0ea      	beq.n	2a280 <nrf52_timer_handler+0xb0>
        return (result | 0xff800000);
   2a2aa:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   2a2ae:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   2a2b2:	e7e7      	b.n	2a284 <nrf52_timer_handler+0xb4>

    OS_EXIT_CRITICAL(sr);
   2a2b4:	4630      	mov	r0, r6
   2a2b6:	f7e4 f94d 	bl	e554 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   2a2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a2bc:	40011000 	.word	0x40011000
   2a2c0:	20005144 	.word	0x20005144

0002a2c4 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   2a2c4:	b538      	push	{r3, r4, r5, lr}
   2a2c6:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   2a2c8:	f7e4 f947 	bl	e55a <os_arch_in_critical>
   2a2cc:	b1c0      	cbz	r0, 2a300 <os_tick_idle+0x3c>

    if (ticks > 0) {
   2a2ce:	2d00      	cmp	r5, #0
   2a2d0:	d044      	beq.n	2a35c <os_tick_idle+0x98>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   2a2d2:	4b26      	ldr	r3, [pc, #152]	; (2a36c <os_tick_idle+0xa8>)
   2a2d4:	685b      	ldr	r3, [r3, #4]
   2a2d6:	42ab      	cmp	r3, r5
   2a2d8:	d200      	bcs.n	2a2dc <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   2a2da:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   2a2dc:	4b23      	ldr	r3, [pc, #140]	; (2a36c <os_tick_idle+0xa8>)
   2a2de:	689c      	ldr	r4, [r3, #8]
   2a2e0:	681a      	ldr	r2, [r3, #0]
   2a2e2:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   2a2e6:	f7e4 f938 	bl	e55a <os_arch_in_critical>
   2a2ea:	bb20      	cbnz	r0, 2a336 <os_tick_idle+0x72>
   2a2ec:	f7e1 ff56 	bl	c19c <hal_debugger_connected>
   2a2f0:	b100      	cbz	r0, 2a2f4 <os_tick_idle+0x30>
   2a2f2:	be01      	bkpt	0x0001
   2a2f4:	2300      	movs	r3, #0
   2a2f6:	461a      	mov	r2, r3
   2a2f8:	4619      	mov	r1, r3
   2a2fa:	4618      	mov	r0, r3
   2a2fc:	f7e2 fc52 	bl	cba4 <__assert_func>
    OS_ASSERT_CRITICAL();
   2a300:	f7e1 ff4c 	bl	c19c <hal_debugger_connected>
   2a304:	b100      	cbz	r0, 2a308 <os_tick_idle+0x44>
   2a306:	be01      	bkpt	0x0001
   2a308:	2300      	movs	r3, #0
   2a30a:	461a      	mov	r2, r3
   2a30c:	4619      	mov	r1, r3
   2a30e:	4618      	mov	r0, r3
   2a310:	f7e2 fc48 	bl	cba4 <__assert_func>
    assert(y <= 0xffffff);
   2a314:	f7e1 ff42 	bl	c19c <hal_debugger_connected>
   2a318:	b100      	cbz	r0, 2a31c <os_tick_idle+0x58>
   2a31a:	be01      	bkpt	0x0001
   2a31c:	2300      	movs	r3, #0
   2a31e:	461a      	mov	r2, r3
   2a320:	4619      	mov	r1, r3
   2a322:	4618      	mov	r0, r3
   2a324:	f7e2 fc3e 	bl	cba4 <__assert_func>
        return (result & 0x007fffff);
   2a328:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (delta > 2) {
   2a32c:	2b02      	cmp	r3, #2
   2a32e:	dc15      	bgt.n	2a35c <os_tick_idle+0x98>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   2a330:	4b0e      	ldr	r3, [pc, #56]	; (2a36c <os_tick_idle+0xa8>)
   2a332:	681c      	ldr	r4, [r3, #0]
   2a334:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   2a336:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   2a33a:	4b0d      	ldr	r3, [pc, #52]	; (2a370 <os_tick_idle+0xac>)
   2a33c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   2a340:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   2a344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2a348:	d2e4      	bcs.n	2a314 <os_tick_idle+0x50>
    result = x - y;
   2a34a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   2a34c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   2a350:	d0ea      	beq.n	2a328 <os_tick_idle+0x64>
        return (result | 0xff800000);
   2a352:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   2a356:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2a35a:	e7e7      	b.n	2a32c <os_tick_idle+0x68>
  __ASM volatile ("dsb 0xF":::"memory");
   2a35c:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   2a360:	bf30      	wfi

    if (ticks > 0) {
   2a362:	b905      	cbnz	r5, 2a366 <os_tick_idle+0xa2>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   2a364:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   2a366:	f7ff ff33 	bl	2a1d0 <nrf52_timer_handler>
}
   2a36a:	e7fb      	b.n	2a364 <os_tick_idle+0xa0>
   2a36c:	20005144 	.word	0x20005144
   2a370:	40011000 	.word	0x40011000

0002a374 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   2a374:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   2a376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2a37a:	fbb3 f3f0 	udiv	r3, r3, r0
   2a37e:	fb00 f303 	mul.w	r3, r0, r3
   2a382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2a386:	d136      	bne.n	2a3f6 <os_tick_init+0x82>
   2a388:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   2a38a:	4d20      	ldr	r5, [pc, #128]	; (2a40c <os_tick_init+0x98>)
   2a38c:	2600      	movs	r6, #0
   2a38e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   2a390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2a394:	fbb3 f0f0 	udiv	r0, r3, r0
   2a398:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   2a39a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2a39e:	fbb3 f0f0 	udiv	r0, r3, r0
   2a3a2:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   2a3a4:	f7e4 f8d0 	bl	e548 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a3a8:	0164      	lsls	r4, r4, #5
   2a3aa:	b2e4      	uxtb	r4, r4
   2a3ac:	4b18      	ldr	r3, [pc, #96]	; (2a410 <os_tick_init+0x9c>)
   2a3ae:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2a3b2:	4a18      	ldr	r2, [pc, #96]	; (2a414 <os_tick_init+0xa0>)
   2a3b4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2a3b6:	4918      	ldr	r1, [pc, #96]	; (2a418 <os_tick_init+0xa4>)
   2a3b8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a3bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2a3c0:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   2a3c2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   2a3c6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   2a3ca:	2201      	movs	r2, #1
   2a3cc:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   2a3ce:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   2a3d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a3d4:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   2a3d8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   2a3dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   2a3e0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   2a3e4:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   2a3e8:	6829      	ldr	r1, [r5, #0]
   2a3ea:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   2a3ee:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   2a3f0:	f7e4 f8b0 	bl	e554 <os_arch_restore_sr>
}
   2a3f4:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   2a3f6:	f7e1 fed1 	bl	c19c <hal_debugger_connected>
   2a3fa:	b100      	cbz	r0, 2a3fe <os_tick_init+0x8a>
   2a3fc:	be01      	bkpt	0x0001
   2a3fe:	2300      	movs	r3, #0
   2a400:	461a      	mov	r2, r3
   2a402:	4619      	mov	r1, r3
   2a404:	4618      	mov	r0, r3
   2a406:	f7e2 fbcd 	bl	cba4 <__assert_func>
   2a40a:	bf00      	nop
   2a40c:	20005144 	.word	0x20005144
   2a410:	e000e100 	.word	0xe000e100
   2a414:	e000ed00 	.word	0xe000ed00
   2a418:	0002a1d1 	.word	0x0002a1d1

0002a41c <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   2a41c:	b508      	push	{r3, lr}
    assert(0);
   2a41e:	f7e1 febd 	bl	c19c <hal_debugger_connected>
   2a422:	b100      	cbz	r0, 2a426 <nrf52_hal_wdt_default_handler+0xa>
   2a424:	be01      	bkpt	0x0001
   2a426:	2300      	movs	r3, #0
   2a428:	461a      	mov	r2, r3
   2a42a:	4619      	mov	r1, r3
   2a42c:	4618      	mov	r0, r3
   2a42e:	f7e2 fbb9 	bl	cba4 <__assert_func>
	...

0002a434 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   2a434:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   2a436:	4b06      	ldr	r3, [pc, #24]	; (2a450 <nrf52_wdt_irq_handler+0x1c>)
   2a438:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   2a43c:	f013 0f01 	tst.w	r3, #1
   2a440:	d100      	bne.n	2a444 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   2a442:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   2a444:	4b02      	ldr	r3, [pc, #8]	; (2a450 <nrf52_wdt_irq_handler+0x1c>)
   2a446:	2200      	movs	r2, #0
   2a448:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   2a44c:	f7ff ffe6 	bl	2a41c <nrf52_hal_wdt_default_handler>
   2a450:	40010000 	.word	0x40010000

0002a454 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   2a454:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   2a456:	4b19      	ldr	r3, [pc, #100]	; (2a4bc <hal_watchdog_init+0x68>)
   2a458:	2201      	movs	r2, #1
   2a45a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   2a45e:	4b18      	ldr	r3, [pc, #96]	; (2a4c0 <hal_watchdog_init+0x6c>)
   2a460:	4298      	cmp	r0, r3
   2a462:	d821      	bhi.n	2a4a8 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   2a464:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2a468:	015b      	lsls	r3, r3, #5
   2a46a:	4a16      	ldr	r2, [pc, #88]	; (2a4c4 <hal_watchdog_init+0x70>)
   2a46c:	fba2 2303 	umull	r2, r3, r2, r3
   2a470:	08db      	lsrs	r3, r3, #3
   2a472:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2a476:	4b11      	ldr	r3, [pc, #68]	; (2a4bc <hal_watchdog_init+0x68>)
   2a478:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2a47c:	4a12      	ldr	r2, [pc, #72]	; (2a4c8 <hal_watchdog_init+0x74>)
   2a47e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2a480:	4912      	ldr	r1, [pc, #72]	; (2a4cc <hal_watchdog_init+0x78>)
   2a482:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a486:	4a12      	ldr	r2, [pc, #72]	; (2a4d0 <hal_watchdog_init+0x7c>)
   2a488:	21e0      	movs	r1, #224	; 0xe0
   2a48a:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a48e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   2a492:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a496:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   2a498:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   2a49c:	f042 0201 	orr.w	r2, r2, #1
   2a4a0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   2a4a4:	2000      	movs	r0, #0
   2a4a6:	bd08      	pop	{r3, pc}
        assert(0);
   2a4a8:	f7e1 fe78 	bl	c19c <hal_debugger_connected>
   2a4ac:	b100      	cbz	r0, 2a4b0 <hal_watchdog_init+0x5c>
   2a4ae:	be01      	bkpt	0x0001
   2a4b0:	2300      	movs	r3, #0
   2a4b2:	461a      	mov	r2, r3
   2a4b4:	4619      	mov	r1, r3
   2a4b6:	4618      	mov	r0, r3
   2a4b8:	f7e2 fb74 	bl	cba4 <__assert_func>
   2a4bc:	40010000 	.word	0x40010000
   2a4c0:	02aaaaaa 	.word	0x02aaaaaa
   2a4c4:	10624dd3 	.word	0x10624dd3
   2a4c8:	e000ed00 	.word	0xe000ed00
   2a4cc:	0002a435 	.word	0x0002a435
   2a4d0:	e000e100 	.word	0xe000e100

0002a4d4 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   2a4d4:	4b02      	ldr	r3, [pc, #8]	; (2a4e0 <hal_watchdog_enable+0xc>)
   2a4d6:	2201      	movs	r2, #1
   2a4d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   2a4dc:	601a      	str	r2, [r3, #0]
}
   2a4de:	4770      	bx	lr
   2a4e0:	40010000 	.word	0x40010000

0002a4e4 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   2a4e4:	4b02      	ldr	r3, [pc, #8]	; (2a4f0 <hal_watchdog_tickle+0xc>)
   2a4e6:	4a03      	ldr	r2, [pc, #12]	; (2a4f4 <hal_watchdog_tickle+0x10>)
   2a4e8:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   2a4ec:	4770      	bx	lr
   2a4ee:	bf00      	nop
   2a4f0:	40010000 	.word	0x40010000
   2a4f4:	6e524635 	.word	0x6e524635

0002a4f8 <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
   2a4f8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a4fa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a4fe:	b672      	cpsid	i
    assert(0);
#endif

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   2a500:	4b18      	ldr	r3, [pc, #96]	; (2a564 <nrf52_clock_hfxo_request+0x6c>)
   2a502:	781b      	ldrb	r3, [r3, #0]
   2a504:	2bff      	cmp	r3, #255	; 0xff
   2a506:	d018      	beq.n	2a53a <nrf52_clock_hfxo_request+0x42>
    if (nrf52_clock_hfxo_refcnt == 0) {
   2a508:	bb0b      	cbnz	r3, 2a54e <nrf52_clock_hfxo_request+0x56>
        /* Check the current STATE and SRC of HFCLK */
        if ((NRF_CLOCK->HFCLKSTAT &
   2a50a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a50e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   2a512:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
   2a516:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
   2a51a:	d020      	beq.n	2a55e <nrf52_clock_hfxo_request+0x66>
             (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
            (CLOCK_HFCLKSTAT_SRC_Xtal << CLOCK_HFCLKSTAT_SRC_Pos |
             CLOCK_HFCLKSTAT_STATE_Running << CLOCK_HFCLKSTAT_STATE_Pos)) {
            NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   2a51c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a520:	2200      	movs	r2, #0
   2a522:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            NRF_CLOCK->TASKS_HFCLKSTART = 1;
   2a526:	2201      	movs	r2, #1
   2a528:	601a      	str	r2, [r3, #0]
            while (!NRF_CLOCK->EVENTS_HFCLKSTARTED) {
   2a52a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a52e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2a532:	2b00      	cmp	r3, #0
   2a534:	d0f9      	beq.n	2a52a <nrf52_clock_hfxo_request+0x32>
            }
        }
        started = 1;
   2a536:	2001      	movs	r0, #1
   2a538:	e00a      	b.n	2a550 <nrf52_clock_hfxo_request+0x58>
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   2a53a:	f7e1 fe2f 	bl	c19c <hal_debugger_connected>
   2a53e:	b100      	cbz	r0, 2a542 <nrf52_clock_hfxo_request+0x4a>
   2a540:	be01      	bkpt	0x0001
   2a542:	2300      	movs	r3, #0
   2a544:	461a      	mov	r2, r3
   2a546:	4619      	mov	r1, r3
   2a548:	4618      	mov	r0, r3
   2a54a:	f7e2 fb2b 	bl	cba4 <__assert_func>
    started = 0;
   2a54e:	2000      	movs	r0, #0
    }
    ++nrf52_clock_hfxo_refcnt;
   2a550:	4a04      	ldr	r2, [pc, #16]	; (2a564 <nrf52_clock_hfxo_request+0x6c>)
   2a552:	7813      	ldrb	r3, [r2, #0]
   2a554:	3301      	adds	r3, #1
   2a556:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
   2a558:	b901      	cbnz	r1, 2a55c <nrf52_clock_hfxo_request+0x64>
  __ASM volatile ("cpsie i" : : : "memory");
   2a55a:	b662      	cpsie	i

    return started;
}
   2a55c:	bd08      	pop	{r3, pc}
        started = 1;
   2a55e:	2001      	movs	r0, #1
   2a560:	e7f6      	b.n	2a550 <nrf52_clock_hfxo_request+0x58>
   2a562:	bf00      	nop
   2a564:	20005150 	.word	0x20005150

0002a568 <nrf52_clock_hfxo_release>:
 * @return int 0: HFXO not stopped by this call (others using it) 1: HFXO
 *         stopped.
 */
int
nrf52_clock_hfxo_release(void)
{
   2a568:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a56a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a56e:	b672      	cpsid	i
    assert(0);
#endif

    stopped = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt != 0);
   2a570:	4b0d      	ldr	r3, [pc, #52]	; (2a5a8 <nrf52_clock_hfxo_release+0x40>)
   2a572:	781b      	ldrb	r3, [r3, #0]
   2a574:	b15b      	cbz	r3, 2a58e <nrf52_clock_hfxo_release+0x26>
    --nrf52_clock_hfxo_refcnt;
   2a576:	3b01      	subs	r3, #1
   2a578:	b2db      	uxtb	r3, r3
   2a57a:	490b      	ldr	r1, [pc, #44]	; (2a5a8 <nrf52_clock_hfxo_release+0x40>)
   2a57c:	700b      	strb	r3, [r1, #0]
    if (nrf52_clock_hfxo_refcnt == 0) {
   2a57e:	b983      	cbnz	r3, 2a5a2 <nrf52_clock_hfxo_release+0x3a>
        NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   2a580:	2001      	movs	r0, #1
   2a582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a586:	6058      	str	r0, [r3, #4]
        stopped = 1;
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   2a588:	b902      	cbnz	r2, 2a58c <nrf52_clock_hfxo_release+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   2a58a:	b662      	cpsie	i

    return stopped;
}
   2a58c:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt != 0);
   2a58e:	f7e1 fe05 	bl	c19c <hal_debugger_connected>
   2a592:	b100      	cbz	r0, 2a596 <nrf52_clock_hfxo_release+0x2e>
   2a594:	be01      	bkpt	0x0001
   2a596:	2300      	movs	r3, #0
   2a598:	461a      	mov	r2, r3
   2a59a:	4619      	mov	r1, r3
   2a59c:	4618      	mov	r0, r3
   2a59e:	f7e2 fb01 	bl	cba4 <__assert_func>
    stopped = 0;
   2a5a2:	2000      	movs	r0, #0
   2a5a4:	e7f0      	b.n	2a588 <nrf52_clock_hfxo_release+0x20>
   2a5a6:	bf00      	nop
   2a5a8:	20005150 	.word	0x20005150

0002a5ac <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   2a5ac:	b570      	push	{r4, r5, r6, lr}
   2a5ae:	4606      	mov	r6, r0
   2a5b0:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   2a5b2:	460d      	mov	r5, r1
   2a5b4:	2908      	cmp	r1, #8
   2a5b6:	bf28      	it	cs
   2a5b8:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   2a5ba:	462a      	mov	r2, r5
   2a5bc:	4906      	ldr	r1, [pc, #24]	; (2a5d8 <hal_bsp_hw_id+0x2c>)
   2a5be:	f7e4 f9fb 	bl	e9b8 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   2a5c2:	1b64      	subs	r4, r4, r5
   2a5c4:	2c08      	cmp	r4, #8
   2a5c6:	bf28      	it	cs
   2a5c8:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   2a5ca:	4622      	mov	r2, r4
   2a5cc:	4903      	ldr	r1, [pc, #12]	; (2a5dc <hal_bsp_hw_id+0x30>)
   2a5ce:	1970      	adds	r0, r6, r5
   2a5d0:	f7e4 f9f2 	bl	e9b8 <memcpy>

    return len + cnt;
}
   2a5d4:	1928      	adds	r0, r5, r4
   2a5d6:	bd70      	pop	{r4, r5, r6, pc}
   2a5d8:	10000060 	.word	0x10000060
   2a5dc:	100000a4 	.word	0x100000a4

0002a5e0 <nrf52_periph_create_timers>:
static struct temperature_dev os_bsp_temp;
#endif

static void
nrf52_periph_create_timers(void)
{
   2a5e0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TIMER_4)
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif
#if MYNEWT_VAL(TIMER_5)
    rc = hal_timer_init(5, NULL);
   2a5e2:	2100      	movs	r1, #0
   2a5e4:	2005      	movs	r0, #5
   2a5e6:	f000 f95d 	bl	2a8a4 <hal_timer_init>
    assert(rc == 0);
   2a5ea:	b928      	cbnz	r0, 2a5f8 <nrf52_periph_create_timers+0x18>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   2a5ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2a5f0:	f000 fb38 	bl	2ac64 <os_cputime_init>
    assert(rc == 0);
   2a5f4:	b950      	cbnz	r0, 2a60c <nrf52_periph_create_timers+0x2c>
#endif
}
   2a5f6:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   2a5f8:	f7e1 fdd0 	bl	c19c <hal_debugger_connected>
   2a5fc:	b100      	cbz	r0, 2a600 <nrf52_periph_create_timers+0x20>
   2a5fe:	be01      	bkpt	0x0001
   2a600:	2300      	movs	r3, #0
   2a602:	461a      	mov	r2, r3
   2a604:	4619      	mov	r1, r3
   2a606:	4618      	mov	r0, r3
   2a608:	f7e2 facc 	bl	cba4 <__assert_func>
    assert(rc == 0);
   2a60c:	f7e1 fdc6 	bl	c19c <hal_debugger_connected>
   2a610:	b100      	cbz	r0, 2a614 <nrf52_periph_create_timers+0x34>
   2a612:	be01      	bkpt	0x0001
   2a614:	2300      	movs	r3, #0
   2a616:	461a      	mov	r2, r3
   2a618:	4619      	mov	r1, r3
   2a61a:	4618      	mov	r0, r3
   2a61c:	f7e2 fac2 	bl	cba4 <__assert_func>

0002a620 <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
   2a620:	b500      	push	{lr}
   2a622:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   2a624:	4b0b      	ldr	r3, [pc, #44]	; (2a654 <nrf52_periph_create_uart+0x34>)
   2a626:	9301      	str	r3, [sp, #4]
   2a628:	4b0b      	ldr	r3, [pc, #44]	; (2a658 <nrf52_periph_create_uart+0x38>)
   2a62a:	9300      	str	r3, [sp, #0]
   2a62c:	2300      	movs	r3, #0
   2a62e:	2201      	movs	r2, #1
   2a630:	490a      	ldr	r1, [pc, #40]	; (2a65c <nrf52_periph_create_uart+0x3c>)
   2a632:	480b      	ldr	r0, [pc, #44]	; (2a660 <nrf52_periph_create_uart+0x40>)
   2a634:	f7e2 fd70 	bl	d118 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   2a638:	b910      	cbnz	r0, 2a640 <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
   2a63a:	b003      	add	sp, #12
   2a63c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2a640:	f7e1 fdac 	bl	c19c <hal_debugger_connected>
   2a644:	b100      	cbz	r0, 2a648 <nrf52_periph_create_uart+0x28>
   2a646:	be01      	bkpt	0x0001
   2a648:	2300      	movs	r3, #0
   2a64a:	461a      	mov	r2, r3
   2a64c:	4619      	mov	r1, r3
   2a64e:	4618      	mov	r0, r3
   2a650:	f7e2 faa8 	bl	cba4 <__assert_func>
   2a654:	0002ea34 	.word	0x0002ea34
   2a658:	0002ca9d 	.word	0x0002ca9d
   2a65c:	0002d954 	.word	0x0002d954
   2a660:	20005154 	.word	0x20005154

0002a664 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
   2a664:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   2a666:	f7ff ffbb 	bl	2a5e0 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
   2a66a:	f7ff ffd9 	bl	2a620 <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    nrf52_periph_create_temp();
}
   2a66e:	bd08      	pop	{r3, pc}

0002a670 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   2a670:	2301      	movs	r3, #1
   2a672:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   2a674:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   2a678:	4770      	bx	lr
	...

0002a67c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   2a67c:	b538      	push	{r3, r4, r5, lr}
   2a67e:	4604      	mov	r4, r0
   2a680:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   2a682:	7883      	ldrb	r3, [r0, #2]
   2a684:	2b00      	cmp	r3, #0
   2a686:	d052      	beq.n	2a72e <nrf_timer_set_ocmp+0xb2>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2a688:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2a68a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2a68e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   2a692:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   2a694:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   2a698:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
   2a69c:	b118      	cbz	r0, 2a6a6 <nrf_timer_set_ocmp+0x2a>
            temp += (1UL << 24);
   2a69e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   2a6a2:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   2a6a6:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
   2a6a8:	1aeb      	subs	r3, r5, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
   2a6aa:	2b00      	cmp	r3, #0
   2a6ac:	dd18      	ble.n	2a6e0 <nrf_timer_set_ocmp+0x64>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
   2a6ae:	2b02      	cmp	r3, #2
   2a6b0:	dc29      	bgt.n	2a706 <nrf_timer_set_ocmp+0x8a>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
   2a6b2:	2301      	movs	r3, #1
   2a6b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
   2a6b8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   2a6bc:	428b      	cmp	r3, r1
   2a6be:	d030      	beq.n	2a722 <nrf_timer_set_ocmp+0xa6>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2a6c0:	7862      	ldrb	r2, [r4, #1]
   2a6c2:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   2a6c6:	2b00      	cmp	r3, #0
   2a6c8:	db2b      	blt.n	2a722 <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a6ca:	f002 021f 	and.w	r2, r2, #31
   2a6ce:	095b      	lsrs	r3, r3, #5
   2a6d0:	2101      	movs	r1, #1
   2a6d2:	fa01 f202 	lsl.w	r2, r1, r2
   2a6d6:	3340      	adds	r3, #64	; 0x40
   2a6d8:	4925      	ldr	r1, [pc, #148]	; (2a770 <nrf_timer_set_ocmp+0xf4>)
   2a6da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2a6de:	e020      	b.n	2a722 <nrf_timer_set_ocmp+0xa6>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2a6e0:	2301      	movs	r3, #1
   2a6e2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2a6e6:	7862      	ldrb	r2, [r4, #1]
   2a6e8:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   2a6ec:	2b00      	cmp	r3, #0
   2a6ee:	db18      	blt.n	2a722 <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a6f0:	f002 021f 	and.w	r2, r2, #31
   2a6f4:	095b      	lsrs	r3, r3, #5
   2a6f6:	2101      	movs	r1, #1
   2a6f8:	fa01 f202 	lsl.w	r2, r1, r2
   2a6fc:	3340      	adds	r3, #64	; 0x40
   2a6fe:	491c      	ldr	r1, [pc, #112]	; (2a770 <nrf_timer_set_ocmp+0xf4>)
   2a700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2a704:	e00d      	b.n	2a722 <nrf_timer_set_ocmp+0xa6>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2a706:	2001      	movs	r0, #1
   2a708:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
   2a70c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2a710:	d208      	bcs.n	2a724 <nrf_timer_set_ocmp+0xa8>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   2a712:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   2a716:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2a71a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2a71e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   2a722:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   2a724:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
   2a728:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
   2a72c:	e7f5      	b.n	2a71a <nrf_timer_set_ocmp+0x9e>
        hwtimer = bsptimer->tmr_reg;
   2a72e:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   2a730:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2a734:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   2a738:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   2a73c:	2200      	movs	r2, #0
   2a73e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   2a742:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   2a746:	f7ff ff93 	bl	2a670 <nrf_read_timer_cntr>
   2a74a:	1b45      	subs	r5, r0, r5
   2a74c:	2d00      	cmp	r5, #0
   2a74e:	dbe8      	blt.n	2a722 <nrf_timer_set_ocmp+0xa6>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2a750:	7862      	ldrb	r2, [r4, #1]
   2a752:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
   2a756:	2b00      	cmp	r3, #0
   2a758:	dbe3      	blt.n	2a722 <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a75a:	f002 021f 	and.w	r2, r2, #31
   2a75e:	095b      	lsrs	r3, r3, #5
   2a760:	2101      	movs	r1, #1
   2a762:	fa01 f202 	lsl.w	r2, r1, r2
   2a766:	3340      	adds	r3, #64	; 0x40
   2a768:	4901      	ldr	r1, [pc, #4]	; (2a770 <nrf_timer_set_ocmp+0xf4>)
   2a76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   2a76e:	e7d8      	b.n	2a722 <nrf_timer_set_ocmp+0xa6>
   2a770:	e000e100 	.word	0xe000e100

0002a774 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   2a774:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2a778:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   2a77c:	4770      	bx	lr

0002a77e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2a77e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2a782:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2a786:	2301      	movs	r3, #1
   2a788:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   2a78c:	4770      	bx	lr
	...

0002a790 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   2a790:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2a792:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a794:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a798:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   2a79a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   2a79c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   2a7a0:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   2a7a4:	b1b5      	cbz	r5, 2a7d4 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
   2a7a6:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   2a7aa:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   2a7ac:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   2a7b0:	2500      	movs	r5, #0
   2a7b2:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2a7b6:	7845      	ldrb	r5, [r0, #1]
   2a7b8:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
   2a7bc:	2a00      	cmp	r2, #0
   2a7be:	db09      	blt.n	2a7d4 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a7c0:	f005 051f 	and.w	r5, r5, #31
   2a7c4:	0952      	lsrs	r2, r2, #5
   2a7c6:	2001      	movs	r0, #1
   2a7c8:	fa00 f505 	lsl.w	r5, r0, r5
   2a7cc:	3240      	adds	r2, #64	; 0x40
   2a7ce:	4804      	ldr	r0, [pc, #16]	; (2a7e0 <hal_timer_read_bsptimer+0x50>)
   2a7d0:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
   2a7d4:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   2a7d8:	b904      	cbnz	r4, 2a7dc <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
   2a7da:	b662      	cpsie	i

    return tcntr;
}
   2a7dc:	bc30      	pop	{r4, r5}
   2a7de:	4770      	bx	lr
   2a7e0:	e000e100 	.word	0xe000e100

0002a7e4 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   2a7e4:	b570      	push	{r4, r5, r6, lr}
   2a7e6:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a7e8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a7ec:	b672      	cpsid	i
}
   2a7ee:	e012      	b.n	2a816 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   2a7f0:	6928      	ldr	r0, [r5, #16]
   2a7f2:	f7ff ff3d 	bl	2a670 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
   2a7f6:	68e3      	ldr	r3, [r4, #12]
   2a7f8:	1ac0      	subs	r0, r0, r3
   2a7fa:	2800      	cmp	r0, #0
   2a7fc:	db17      	blt.n	2a82e <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2a7fe:	6923      	ldr	r3, [r4, #16]
   2a800:	b193      	cbz	r3, 2a828 <hal_timer_chk_queue+0x44>
   2a802:	6962      	ldr	r2, [r4, #20]
   2a804:	615a      	str	r2, [r3, #20]
   2a806:	6963      	ldr	r3, [r4, #20]
   2a808:	6922      	ldr	r2, [r4, #16]
   2a80a:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   2a80c:	2300      	movs	r3, #0
   2a80e:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   2a810:	6863      	ldr	r3, [r4, #4]
   2a812:	68a0      	ldr	r0, [r4, #8]
   2a814:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   2a816:	696c      	ldr	r4, [r5, #20]
   2a818:	b14c      	cbz	r4, 2a82e <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
   2a81a:	78ab      	ldrb	r3, [r5, #2]
   2a81c:	2b00      	cmp	r3, #0
   2a81e:	d0e7      	beq.n	2a7f0 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   2a820:	4628      	mov	r0, r5
   2a822:	f7ff ffb5 	bl	2a790 <hal_timer_read_bsptimer>
   2a826:	e7e6      	b.n	2a7f6 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2a828:	6963      	ldr	r3, [r4, #20]
   2a82a:	61ab      	str	r3, [r5, #24]
   2a82c:	e7eb      	b.n	2a806 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   2a82e:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   2a830:	b133      	cbz	r3, 2a840 <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   2a832:	68d9      	ldr	r1, [r3, #12]
   2a834:	4628      	mov	r0, r5
   2a836:	f7ff ff21 	bl	2a67c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   2a83a:	b906      	cbnz	r6, 2a83e <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
   2a83c:	b662      	cpsie	i
}
   2a83e:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   2a840:	78ab      	ldrb	r3, [r5, #2]
   2a842:	b11b      	cbz	r3, 2a84c <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   2a844:	6928      	ldr	r0, [r5, #16]
   2a846:	f7ff ff9a 	bl	2a77e <nrf_rtc_disable_ocmp>
   2a84a:	e7f6      	b.n	2a83a <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   2a84c:	6928      	ldr	r0, [r5, #16]
   2a84e:	f7ff ff91 	bl	2a774 <nrf_timer_disable_ocmp>
   2a852:	e7f2      	b.n	2a83a <hal_timer_chk_queue+0x56>

0002a854 <hal_rtc_timer_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
static void
hal_rtc_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   2a854:	b510      	push	{r4, lr}
    NRF_RTC_Type *rtctimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2a856:	6904      	ldr	r4, [r0, #16]
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   2a858:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (compare) {
   2a85c:	b113      	cbz	r3, 2a864 <hal_rtc_timer_irq_handler+0x10>
       rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT] = 0;
   2a85e:	2300      	movs	r3, #0
   2a860:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    }

    tick = rtctimer->EVENTS_TICK;
   2a864:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (tick) {
   2a868:	b113      	cbz	r3, 2a870 <hal_rtc_timer_irq_handler+0x1c>
        rtctimer->EVENTS_TICK = 0;
   2a86a:	2300      	movs	r3, #0
   2a86c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    }

    overflow = rtctimer->EVENTS_OVRFLW;
   2a870:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (overflow) {
   2a874:	b133      	cbz	r3, 2a884 <hal_rtc_timer_irq_handler+0x30>
        rtctimer->EVENTS_OVRFLW = 0;
   2a876:	2300      	movs	r3, #0
   2a878:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        bsptimer->tmr_cntr += (1UL << 24);
   2a87c:	6843      	ldr	r3, [r0, #4]
   2a87e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   2a882:	6043      	str	r3, [r0, #4]
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   2a884:	6883      	ldr	r3, [r0, #8]
   2a886:	3301      	adds	r3, #1
   2a888:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    hal_timer_chk_queue(bsptimer);
   2a88a:	f7ff ffab 	bl	2a7e4 <hal_timer_chk_queue>

    /* Recommended by nordic to make sure interrupts are cleared */
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   2a88e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148

    os_trace_isr_exit();
}
   2a892:	bd10      	pop	{r4, pc}

0002a894 <nrf52_timer5_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
void
nrf52_timer5_irq_handler(void)
{
   2a894:	b508      	push	{r3, lr}
    hal_rtc_timer_irq_handler(&nrf52_hal_timer5);
   2a896:	4802      	ldr	r0, [pc, #8]	; (2a8a0 <nrf52_timer5_irq_handler+0xc>)
   2a898:	f7ff ffdc 	bl	2a854 <hal_rtc_timer_irq_handler>
}
   2a89c:	bd08      	pop	{r3, pc}
   2a89e:	bf00      	nop
   2a8a0:	20005190 	.word	0x20005190

0002a8a4 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2a8a4:	2805      	cmp	r0, #5
   2a8a6:	dc20      	bgt.n	2a8ea <hal_timer_init+0x46>
   2a8a8:	4b14      	ldr	r3, [pc, #80]	; (2a8fc <hal_timer_init+0x58>)
   2a8aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2a8ae:	b1f3      	cbz	r3, 2a8ee <hal_timer_init+0x4a>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   2a8b0:	781a      	ldrb	r2, [r3, #0]
   2a8b2:	b9f2      	cbnz	r2, 2a8f2 <hal_timer_init+0x4e>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   2a8b4:	2805      	cmp	r0, #5
   2a8b6:	d11e      	bne.n	2a8f6 <hal_timer_init+0x52>
#if MYNEWT_VAL(TIMER_5)
    case 5:
        irq_num = RTC0_IRQn;
        hwtimer = NRF_RTC0;
        irq_isr = nrf52_timer5_irq_handler;
        bsptimer->tmr_rtc = 1;
   2a8b8:	2201      	movs	r2, #1
   2a8ba:	709a      	strb	r2, [r3, #2]
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   2a8bc:	4a10      	ldr	r2, [pc, #64]	; (2a900 <hal_timer_init+0x5c>)
   2a8be:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   2a8c0:	220b      	movs	r2, #11
   2a8c2:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a8c4:	4b0f      	ldr	r3, [pc, #60]	; (2a904 <hal_timer_init+0x60>)
   2a8c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2a8ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   2a8ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a8d2:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2a8d6:	22e0      	movs	r2, #224	; 0xe0
   2a8d8:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2a8dc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   2a8e0:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2a8e2:	4a09      	ldr	r2, [pc, #36]	; (2a908 <hal_timer_init+0x64>)
   2a8e4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   2a8e6:	2000      	movs	r0, #0
   2a8e8:	4770      	bx	lr

err:
    return rc;
   2a8ea:	2016      	movs	r0, #22
   2a8ec:	4770      	bx	lr
   2a8ee:	2016      	movs	r0, #22
   2a8f0:	4770      	bx	lr
   2a8f2:	2016      	movs	r0, #22
   2a8f4:	4770      	bx	lr
   2a8f6:	2016      	movs	r0, #22
}
   2a8f8:	4770      	bx	lr
   2a8fa:	bf00      	nop
   2a8fc:	0002ea38 	.word	0x0002ea38
   2a900:	4000b000 	.word	0x4000b000
   2a904:	e000e100 	.word	0xe000e100
   2a908:	0002a895 	.word	0x0002a895

0002a90c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2a90c:	2805      	cmp	r0, #5
   2a90e:	f300 8081 	bgt.w	2aa14 <hal_timer_config+0x108>
{
   2a912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2a914:	4b49      	ldr	r3, [pc, #292]	; (2aa3c <hal_timer_config+0x130>)
   2a916:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2a91a:	2d00      	cmp	r5, #0
   2a91c:	d07c      	beq.n	2aa18 <hal_timer_config+0x10c>

#if MYNEWT_VAL(TIMER_5)
    if (timer_num == 5) {
   2a91e:	2805      	cmp	r0, #5
   2a920:	d012      	beq.n	2a948 <hal_timer_config+0x3c>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   2a922:	4a47      	ldr	r2, [pc, #284]	; (2aa40 <hal_timer_config+0x134>)
   2a924:	fbb2 f2f1 	udiv	r2, r2, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   2a928:	782c      	ldrb	r4, [r5, #0]
   2a92a:	2c00      	cmp	r4, #0
   2a92c:	d17c      	bne.n	2aa28 <hal_timer_config+0x11c>
   2a92e:	4b44      	ldr	r3, [pc, #272]	; (2aa40 <hal_timer_config+0x134>)
   2a930:	4299      	cmp	r1, r3
   2a932:	d87b      	bhi.n	2aa2c <hal_timer_config+0x120>
   2a934:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2a938:	d87a      	bhi.n	2aa30 <hal_timer_config+0x124>
        (bsptimer->tmr_reg == NULL)) {
   2a93a:	692b      	ldr	r3, [r5, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   2a93c:	2b00      	cmp	r3, #0
   2a93e:	d079      	beq.n	2aa34 <hal_timer_config+0x128>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   2a940:	2a01      	cmp	r2, #1
   2a942:	d040      	beq.n	2a9c6 <hal_timer_config+0xba>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   2a944:	2401      	movs	r4, #1
   2a946:	e02e      	b.n	2a9a6 <hal_timer_config+0x9a>
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   2a948:	782b      	ldrb	r3, [r5, #0]
   2a94a:	2b00      	cmp	r3, #0
   2a94c:	d166      	bne.n	2aa1c <hal_timer_config+0x110>
   2a94e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2a952:	d165      	bne.n	2aa20 <hal_timer_config+0x114>
            (bsptimer->tmr_reg == NULL)) {
   2a954:	692b      	ldr	r3, [r5, #16]
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   2a956:	2b00      	cmp	r3, #0
   2a958:	d064      	beq.n	2aa24 <hal_timer_config+0x118>
        bsptimer->tmr_freq = freq_hz;
   2a95a:	60e9      	str	r1, [r5, #12]
        bsptimer->tmr_enabled = 1;
   2a95c:	2201      	movs	r2, #1
   2a95e:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a960:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a964:	b672      	cpsid	i
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2a966:	692b      	ldr	r3, [r5, #16]
        rtctimer->TASKS_STOP = 1;
   2a968:	605a      	str	r2, [r3, #4]
        rtctimer->TASKS_CLEAR = 1;
   2a96a:	609a      	str	r2, [r3, #8]
        rtctimer->PRESCALER = 0;
   2a96c:	2100      	movs	r1, #0
   2a96e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
        rtctimer->EVENTS_OVRFLW = 0;
   2a972:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        rtctimer->INTENSET = RTC_INTENSET_OVRFLW_Msk;
   2a976:	2102      	movs	r1, #2
   2a978:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
        rtctimer->TASKS_START = 1;
   2a97c:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   2a97e:	786a      	ldrb	r2, [r5, #1]
   2a980:	f995 3001 	ldrsb.w	r3, [r5, #1]
  if ((int32_t)(IRQn) >= 0)
   2a984:	2b00      	cmp	r3, #0
   2a986:	db08      	blt.n	2a99a <hal_timer_config+0x8e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a988:	f002 021f 	and.w	r2, r2, #31
   2a98c:	095b      	lsrs	r3, r3, #5
   2a98e:	2101      	movs	r1, #1
   2a990:	fa01 f202 	lsl.w	r2, r1, r2
   2a994:	492b      	ldr	r1, [pc, #172]	; (2aa44 <hal_timer_config+0x138>)
   2a996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_ENABLE_INTERRUPTS(ctx);
   2a99a:	b900      	cbnz	r0, 2a99e <hal_timer_config+0x92>
  __ASM volatile ("cpsie i" : : : "memory");
   2a99c:	b662      	cpsie	i
        return 0;
   2a99e:	2000      	movs	r0, #0
   2a9a0:	e043      	b.n	2aa2a <hal_timer_config+0x11e>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   2a9a2:	3401      	adds	r4, #1
   2a9a4:	b2e4      	uxtb	r4, r4
   2a9a6:	2c09      	cmp	r4, #9
   2a9a8:	d80d      	bhi.n	2a9c6 <hal_timer_config+0xba>
            if (div <= (1 << prescaler)) {
   2a9aa:	2301      	movs	r3, #1
   2a9ac:	40a3      	lsls	r3, r4
   2a9ae:	4293      	cmp	r3, r2
   2a9b0:	d3f7      	bcc.n	2a9a2 <hal_timer_config+0x96>
                min_delta = div - (1 << (prescaler - 1));
   2a9b2:	1e61      	subs	r1, r4, #1
   2a9b4:	2001      	movs	r0, #1
   2a9b6:	fa00 f101 	lsl.w	r1, r0, r1
   2a9ba:	1a51      	subs	r1, r2, r1
                max_delta = (1 << prescaler) - div;
   2a9bc:	1a9b      	subs	r3, r3, r2
                if (min_delta < max_delta) {
   2a9be:	4299      	cmp	r1, r3
   2a9c0:	d201      	bcs.n	2a9c6 <hal_timer_config+0xba>
                    prescaler -= 1;
   2a9c2:	3c01      	subs	r4, #1
   2a9c4:	b2e4      	uxtb	r4, r4
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   2a9c6:	4b1e      	ldr	r3, [pc, #120]	; (2aa40 <hal_timer_config+0x134>)
   2a9c8:	4123      	asrs	r3, r4
   2a9ca:	60eb      	str	r3, [r5, #12]
    bsptimer->tmr_enabled = 1;
   2a9cc:	2601      	movs	r6, #1
   2a9ce:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a9d0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a9d4:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    nrf52_clock_hfxo_request();
   2a9d6:	f7ff fd8f 	bl	2a4f8 <nrf52_clock_hfxo_request>
#endif
    hwtimer = bsptimer->tmr_reg;
   2a9da:	692b      	ldr	r3, [r5, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   2a9dc:	605e      	str	r6, [r3, #4]
    hwtimer->TASKS_CLEAR = 1;
   2a9de:	60de      	str	r6, [r3, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   2a9e0:	2200      	movs	r2, #0
   2a9e2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   2a9e6:	2203      	movs	r2, #3
   2a9e8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   2a9ec:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   2a9f0:	601e      	str	r6, [r3, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   2a9f2:	786a      	ldrb	r2, [r5, #1]
   2a9f4:	f995 3001 	ldrsb.w	r3, [r5, #1]
  if ((int32_t)(IRQn) >= 0)
   2a9f8:	2b00      	cmp	r3, #0
   2a9fa:	db07      	blt.n	2aa0c <hal_timer_config+0x100>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a9fc:	f002 021f 	and.w	r2, r2, #31
   2aa00:	095b      	lsrs	r3, r3, #5
   2aa02:	fa06 f202 	lsl.w	r2, r6, r2
   2aa06:	490f      	ldr	r1, [pc, #60]	; (2aa44 <hal_timer_config+0x138>)
   2aa08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   2aa0c:	b9a7      	cbnz	r7, 2aa38 <hal_timer_config+0x12c>
  __ASM volatile ("cpsie i" : : : "memory");
   2aa0e:	b662      	cpsie	i

    return 0;
   2aa10:	2000      	movs	r0, #0
}
   2aa12:	e00a      	b.n	2aa2a <hal_timer_config+0x11e>

err:
    return rc;
   2aa14:	2016      	movs	r0, #22
}
   2aa16:	4770      	bx	lr
    return rc;
   2aa18:	2016      	movs	r0, #22
   2aa1a:	e006      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa1c:	2016      	movs	r0, #22
   2aa1e:	e004      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa20:	2016      	movs	r0, #22
   2aa22:	e002      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa24:	2016      	movs	r0, #22
   2aa26:	e000      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa28:	2016      	movs	r0, #22
}
   2aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   2aa2c:	2016      	movs	r0, #22
   2aa2e:	e7fc      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa30:	2016      	movs	r0, #22
   2aa32:	e7fa      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa34:	2016      	movs	r0, #22
   2aa36:	e7f8      	b.n	2aa2a <hal_timer_config+0x11e>
    return 0;
   2aa38:	2000      	movs	r0, #0
   2aa3a:	e7f6      	b.n	2aa2a <hal_timer_config+0x11e>
   2aa3c:	0002ea38 	.word	0x0002ea38
   2aa40:	00f42400 	.word	0x00f42400
   2aa44:	e000e100 	.word	0xe000e100

0002aa48 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   2aa48:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2aa4a:	2805      	cmp	r0, #5
   2aa4c:	dc0c      	bgt.n	2aa68 <hal_timer_read+0x20>
   2aa4e:	4b0b      	ldr	r3, [pc, #44]	; (2aa7c <hal_timer_read+0x34>)
   2aa50:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2aa54:	b140      	cbz	r0, 2aa68 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   2aa56:	7883      	ldrb	r3, [r0, #2]
   2aa58:	b113      	cbz	r3, 2aa60 <hal_timer_read+0x18>
        tcntr = hal_timer_read_bsptimer(bsptimer);
   2aa5a:	f7ff fe99 	bl	2a790 <hal_timer_read_bsptimer>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   2aa5e:	bd08      	pop	{r3, pc}
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   2aa60:	6900      	ldr	r0, [r0, #16]
   2aa62:	f7ff fe05 	bl	2a670 <nrf_read_timer_cntr>
    return tcntr;
   2aa66:	e7fa      	b.n	2aa5e <hal_timer_read+0x16>
    assert(0);
   2aa68:	f7e1 fb98 	bl	c19c <hal_debugger_connected>
   2aa6c:	b100      	cbz	r0, 2aa70 <hal_timer_read+0x28>
   2aa6e:	be01      	bkpt	0x0001
   2aa70:	2300      	movs	r3, #0
   2aa72:	461a      	mov	r2, r3
   2aa74:	4619      	mov	r1, r3
   2aa76:	4618      	mov	r0, r3
   2aa78:	f7e2 f894 	bl	cba4 <__assert_func>
   2aa7c:	0002ea38 	.word	0x0002ea38

0002aa80 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2aa80:	2805      	cmp	r0, #5
   2aa82:	dc0b      	bgt.n	2aa9c <hal_timer_set_cb+0x1c>
{
   2aa84:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2aa86:	4c07      	ldr	r4, [pc, #28]	; (2aaa4 <hal_timer_set_cb+0x24>)
   2aa88:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   2aa8c:	b144      	cbz	r4, 2aaa0 <hal_timer_set_cb+0x20>

    timer->cb_func = cb_func;
   2aa8e:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   2aa90:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   2aa92:	2000      	movs	r0, #0
   2aa94:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   2aa96:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   2aa98:	bc10      	pop	{r4}
   2aa9a:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2aa9c:	2016      	movs	r0, #22
}
   2aa9e:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2aaa0:	2016      	movs	r0, #22
    return rc;
   2aaa2:	e7f9      	b.n	2aa98 <hal_timer_set_cb+0x18>
   2aaa4:	0002ea38 	.word	0x0002ea38

0002aaa8 <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2aaa8:	2800      	cmp	r0, #0
   2aaaa:	d03b      	beq.n	2ab24 <hal_timer_start_at+0x7c>
{
   2aaac:	b538      	push	{r3, r4, r5, lr}
   2aaae:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2aab0:	6943      	ldr	r3, [r0, #20]
   2aab2:	2b00      	cmp	r3, #0
   2aab4:	d138      	bne.n	2ab28 <hal_timer_start_at+0x80>
        (timer->cb_func == NULL)) {
   2aab6:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2aab8:	2b00      	cmp	r3, #0
   2aaba:	d037      	beq.n	2ab2c <hal_timer_start_at+0x84>
        return EINVAL;
    }
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   2aabc:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   2aabe:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2aac0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2aac4:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   2aac6:	6943      	ldr	r3, [r0, #20]
   2aac8:	b13b      	cbz	r3, 2aada <hal_timer_start_at+0x32>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
    } else {
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   2aaca:	b1bb      	cbz	r3, 2aafc <hal_timer_start_at+0x54>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   2aacc:	68e2      	ldr	r2, [r4, #12]
   2aace:	68d9      	ldr	r1, [r3, #12]
   2aad0:	1a52      	subs	r2, r2, r1
   2aad2:	2a00      	cmp	r2, #0
   2aad4:	db0a      	blt.n	2aaec <hal_timer_start_at+0x44>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   2aad6:	691b      	ldr	r3, [r3, #16]
   2aad8:	e7f7      	b.n	2aaca <hal_timer_start_at+0x22>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   2aada:	4622      	mov	r2, r4
   2aadc:	f842 3f10 	str.w	r3, [r2, #16]!
   2aae0:	6182      	str	r2, [r0, #24]
   2aae2:	4603      	mov	r3, r0
   2aae4:	f843 4f14 	str.w	r4, [r3, #20]!
   2aae8:	6163      	str	r3, [r4, #20]
   2aaea:	e008      	b.n	2aafe <hal_timer_start_at+0x56>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   2aaec:	695a      	ldr	r2, [r3, #20]
   2aaee:	6162      	str	r2, [r4, #20]
   2aaf0:	6123      	str	r3, [r4, #16]
   2aaf2:	695a      	ldr	r2, [r3, #20]
   2aaf4:	6014      	str	r4, [r2, #0]
   2aaf6:	f104 0210 	add.w	r2, r4, #16
   2aafa:	615a      	str	r2, [r3, #20]
                break;
            }
        }
        if (!entry) {
   2aafc:	b133      	cbz	r3, 2ab0c <hal_timer_start_at+0x64>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
        }
    }

    /* If this is the head, we need to set new OCMP */
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   2aafe:	6943      	ldr	r3, [r0, #20]
   2ab00:	42a3      	cmp	r3, r4
   2ab02:	d00b      	beq.n	2ab1c <hal_timer_start_at+0x74>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   2ab04:	b9a5      	cbnz	r5, 2ab30 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   2ab06:	b662      	cpsie	i

    return 0;
   2ab08:	2000      	movs	r0, #0
}
   2ab0a:	e00e      	b.n	2ab2a <hal_timer_start_at+0x82>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   2ab0c:	6123      	str	r3, [r4, #16]
   2ab0e:	6983      	ldr	r3, [r0, #24]
   2ab10:	6163      	str	r3, [r4, #20]
   2ab12:	601c      	str	r4, [r3, #0]
   2ab14:	f104 0310 	add.w	r3, r4, #16
   2ab18:	6183      	str	r3, [r0, #24]
   2ab1a:	e7f0      	b.n	2aafe <hal_timer_start_at+0x56>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   2ab1c:	68e1      	ldr	r1, [r4, #12]
   2ab1e:	f7ff fdad 	bl	2a67c <nrf_timer_set_ocmp>
   2ab22:	e7ef      	b.n	2ab04 <hal_timer_start_at+0x5c>
        return EINVAL;
   2ab24:	2016      	movs	r0, #22
}
   2ab26:	4770      	bx	lr
        return EINVAL;
   2ab28:	2016      	movs	r0, #22
}
   2ab2a:	bd38      	pop	{r3, r4, r5, pc}
        return EINVAL;
   2ab2c:	2016      	movs	r0, #22
   2ab2e:	e7fc      	b.n	2ab2a <hal_timer_start_at+0x82>
    return 0;
   2ab30:	2000      	movs	r0, #0
   2ab32:	e7fa      	b.n	2ab2a <hal_timer_start_at+0x82>

0002ab34 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   2ab34:	b360      	cbz	r0, 2ab90 <hal_timer_stop+0x5c>
{
   2ab36:	b570      	push	{r4, r5, r6, lr}
   2ab38:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   2ab3a:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2ab3c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2ab40:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   2ab42:	6942      	ldr	r2, [r0, #20]
   2ab44:	b18a      	cbz	r2, 2ab6a <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   2ab46:	6948      	ldr	r0, [r1, #20]
   2ab48:	4298      	cmp	r0, r3
   2ab4a:	d012      	beq.n	2ab72 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   2ab4c:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2ab4e:	6918      	ldr	r0, [r3, #16]
   2ab50:	b190      	cbz	r0, 2ab78 <hal_timer_stop+0x44>
   2ab52:	6142      	str	r2, [r0, #20]
   2ab54:	695a      	ldr	r2, [r3, #20]
   2ab56:	6918      	ldr	r0, [r3, #16]
   2ab58:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   2ab5a:	2200      	movs	r2, #0
   2ab5c:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   2ab5e:	b125      	cbz	r5, 2ab6a <hal_timer_stop+0x36>
            if (entry) {
   2ab60:	b166      	cbz	r6, 2ab7c <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   2ab62:	68f1      	ldr	r1, [r6, #12]
   2ab64:	6830      	ldr	r0, [r6, #0]
   2ab66:	f7ff fd89 	bl	2a67c <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   2ab6a:	b99c      	cbnz	r4, 2ab94 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   2ab6c:	b662      	cpsie	i

    return 0;
   2ab6e:	2000      	movs	r0, #0
}
   2ab70:	e011      	b.n	2ab96 <hal_timer_stop+0x62>
            entry = TAILQ_NEXT(timer, link);
   2ab72:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   2ab74:	2501      	movs	r5, #1
   2ab76:	e7ea      	b.n	2ab4e <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2ab78:	618a      	str	r2, [r1, #24]
   2ab7a:	e7eb      	b.n	2ab54 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   2ab7c:	788b      	ldrb	r3, [r1, #2]
   2ab7e:	b11b      	cbz	r3, 2ab88 <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   2ab80:	6908      	ldr	r0, [r1, #16]
   2ab82:	f7ff fdfc 	bl	2a77e <nrf_rtc_disable_ocmp>
   2ab86:	e7f0      	b.n	2ab6a <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   2ab88:	6908      	ldr	r0, [r1, #16]
   2ab8a:	f7ff fdf3 	bl	2a774 <nrf_timer_disable_ocmp>
   2ab8e:	e7ec      	b.n	2ab6a <hal_timer_stop+0x36>
        return EINVAL;
   2ab90:	2016      	movs	r0, #22
}
   2ab92:	4770      	bx	lr
    return 0;
   2ab94:	2000      	movs	r0, #0
}
   2ab96:	bd70      	pop	{r4, r5, r6, pc}

0002ab98 <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2ab98:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2ab9a:	0a09      	lsrs	r1, r1, #8
   2ab9c:	7041      	strb	r1, [r0, #1]
}
   2ab9e:	4770      	bx	lr

0002aba0 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2aba0:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2aba2:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2aba6:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   2aba8:	f3c1 4307 	ubfx	r3, r1, #16, #8
   2abac:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   2abae:	0e09      	lsrs	r1, r1, #24
   2abb0:	70c1      	strb	r1, [r0, #3]
}
   2abb2:	4770      	bx	lr

0002abb4 <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2abb4:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2abb6:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2abba:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   2abbc:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2abc0:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   2abc2:	0e12      	lsrs	r2, r2, #24
   2abc4:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   2abc6:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   2abc8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2abcc:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   2abce:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2abd2:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   2abd4:	0e1b      	lsrs	r3, r3, #24
   2abd6:	71c3      	strb	r3, [r0, #7]
}
   2abd8:	4770      	bx	lr

0002abda <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2abda:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   2abdc:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   2abde:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   2abe2:	4770      	bx	lr

0002abe4 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2abe4:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   2abe6:	7842      	ldrb	r2, [r0, #1]
   2abe8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   2abec:	7882      	ldrb	r2, [r0, #2]
   2abee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   2abf2:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   2abf4:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   2abf8:	4770      	bx	lr

0002abfa <get_le64>:

uint64_t
get_le64(const void *buf)
{
   2abfa:	b4f0      	push	{r4, r5, r6, r7}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2abfc:	7802      	ldrb	r2, [r0, #0]
    x |= (uint64_t)u8ptr[1] << 8;
   2abfe:	7844      	ldrb	r4, [r0, #1]
   2ac00:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    x |= (uint64_t)u8ptr[2] << 16;
   2ac04:	7884      	ldrb	r4, [r0, #2]
   2ac06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    x |= (uint64_t)u8ptr[3] << 24;
   2ac0a:	78c6      	ldrb	r6, [r0, #3]
    x |= (uint64_t)u8ptr[4] << 32;
   2ac0c:	7903      	ldrb	r3, [r0, #4]
    x |= (uint64_t)u8ptr[5] << 40;
   2ac0e:	7944      	ldrb	r4, [r0, #5]
   2ac10:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    x |= (uint64_t)u8ptr[6] << 48;
   2ac14:	7984      	ldrb	r4, [r0, #6]
   2ac16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
    x |= (uint64_t)u8ptr[7] << 56;
   2ac1a:	79c4      	ldrb	r4, [r0, #7]

    return x;
}
   2ac1c:	ea42 6006 	orr.w	r0, r2, r6, lsl #24
   2ac20:	ea43 6104 	orr.w	r1, r3, r4, lsl #24
   2ac24:	bcf0      	pop	{r4, r5, r6, r7}
   2ac26:	4770      	bx	lr

0002ac28 <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   2ac28:	3901      	subs	r1, #1
   2ac2a:	2300      	movs	r3, #0
   2ac2c:	428b      	cmp	r3, r1
   2ac2e:	da0a      	bge.n	2ac46 <swap_in_place+0x1e>
{
   2ac30:	b410      	push	{r4}
        tmp = u8ptr[i];
   2ac32:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   2ac34:	5c44      	ldrb	r4, [r0, r1]
   2ac36:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   2ac38:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   2ac3a:	3301      	adds	r3, #1
   2ac3c:	3901      	subs	r1, #1
   2ac3e:	428b      	cmp	r3, r1
   2ac40:	dbf7      	blt.n	2ac32 <swap_in_place+0xa>
    }
}
   2ac42:	bc10      	pop	{r4}
   2ac44:	4770      	bx	lr
   2ac46:	4770      	bx	lr

0002ac48 <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   2ac48:	2300      	movs	r3, #0
   2ac4a:	4293      	cmp	r3, r2
   2ac4c:	da09      	bge.n	2ac62 <swap_buf+0x1a>
{
   2ac4e:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   2ac50:	1e54      	subs	r4, r2, #1
   2ac52:	1ae4      	subs	r4, r4, r3
   2ac54:	5ccd      	ldrb	r5, [r1, r3]
   2ac56:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   2ac58:	3301      	adds	r3, #1
   2ac5a:	4293      	cmp	r3, r2
   2ac5c:	dbf8      	blt.n	2ac50 <swap_buf+0x8>
    }
}
   2ac5e:	bc30      	pop	{r4, r5}
   2ac60:	4770      	bx	lr
   2ac62:	4770      	bx	lr

0002ac64 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   2ac64:	b508      	push	{r3, lr}
   2ac66:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   2ac68:	2005      	movs	r0, #5
   2ac6a:	f7ff fe4f 	bl	2a90c <hal_timer_config>
    return rc;
}
   2ac6e:	bd08      	pop	{r3, pc}

0002ac70 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   2ac70:	b510      	push	{r4, lr}
    assert(timer != NULL);
   2ac72:	b140      	cbz	r0, 2ac86 <os_cputime_timer_init+0x16>
   2ac74:	460c      	mov	r4, r1
   2ac76:	4613      	mov	r3, r2
   2ac78:	4601      	mov	r1, r0
    assert(fp != NULL);
   2ac7a:	b174      	cbz	r4, 2ac9a <os_cputime_timer_init+0x2a>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   2ac7c:	4622      	mov	r2, r4
   2ac7e:	2005      	movs	r0, #5
   2ac80:	f7ff fefe 	bl	2aa80 <hal_timer_set_cb>
}
   2ac84:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   2ac86:	f7e1 fa89 	bl	c19c <hal_debugger_connected>
   2ac8a:	b100      	cbz	r0, 2ac8e <os_cputime_timer_init+0x1e>
   2ac8c:	be01      	bkpt	0x0001
   2ac8e:	2300      	movs	r3, #0
   2ac90:	461a      	mov	r2, r3
   2ac92:	4619      	mov	r1, r3
   2ac94:	4618      	mov	r0, r3
   2ac96:	f7e1 ff85 	bl	cba4 <__assert_func>
    assert(fp != NULL);
   2ac9a:	f7e1 fa7f 	bl	c19c <hal_debugger_connected>
   2ac9e:	b100      	cbz	r0, 2aca2 <os_cputime_timer_init+0x32>
   2aca0:	be01      	bkpt	0x0001
   2aca2:	2300      	movs	r3, #0
   2aca4:	461a      	mov	r2, r3
   2aca6:	4619      	mov	r1, r3
   2aca8:	4618      	mov	r0, r3
   2acaa:	f7e1 ff7b 	bl	cba4 <__assert_func>

0002acae <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   2acae:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   2acb0:	f7ff fefa 	bl	2aaa8 <hal_timer_start_at>
    return rc;
}
   2acb4:	bd08      	pop	{r3, pc}

0002acb6 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   2acb6:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   2acb8:	f7ff ff3c 	bl	2ab34 <hal_timer_stop>
}
   2acbc:	bd08      	pop	{r3, pc}

0002acbe <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   2acbe:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   2acc0:	2005      	movs	r0, #5
   2acc2:	f7ff fec1 	bl	2aa48 <hal_timer_read>
    return cpu_time;
}
   2acc6:	bd08      	pop	{r3, pc}

0002acc8 <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   2acc8:	4b02      	ldr	r3, [pc, #8]	; (2acd4 <os_cputime_usecs_to_ticks+0xc>)
   2acca:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   2acce:	4608      	mov	r0, r1
   2acd0:	4770      	bx	lr
   2acd2:	bf00      	nop
   2acd4:	08637bd0 	.word	0x08637bd0

0002acd8 <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   2acd8:	0a41      	lsrs	r1, r0, #9
   2acda:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   2acde:	f3c0 0308 	ubfx	r3, r0, #0, #9
   2ace2:	fb02 f303 	mul.w	r3, r2, r3
   2ace6:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   2ace8:	fb02 3001 	mla	r0, r2, r1, r3
   2acec:	4770      	bx	lr

0002acee <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   2acee:	280b      	cmp	r0, #11
   2acf0:	d818      	bhi.n	2ad24 <os_error_to_sys+0x36>
   2acf2:	e8df f000 	tbb	[pc, r0]
   2acf6:	1a06      	.short	0x1a06
   2acf8:	17170b08 	.word	0x17170b08
   2acfc:	1717170e 	.word	0x1717170e
   2ad00:	1411      	.short	0x1411
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
        case OS_INVALID_PARM:   return SYS_EINVAL; 
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
        case OS_ENOENT:         return SYS_ENOENT; 
        case OS_EBUSY:          return SYS_EBUSY; 
   2ad02:	2000      	movs	r0, #0
   2ad04:	4770      	bx	lr
        case OS_EINVAL:         return SYS_EINVAL; 
   2ad06:	f06f 0001 	mvn.w	r0, #1
   2ad0a:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   2ad0c:	f06f 0001 	mvn.w	r0, #1
   2ad10:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   2ad12:	f06f 0002 	mvn.w	r0, #2
   2ad16:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   2ad18:	f06f 0003 	mvn.w	r0, #3
   2ad1c:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   2ad1e:	f06f 0007 	mvn.w	r0, #7
   2ad22:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   2ad24:	f06f 000c 	mvn.w	r0, #12
   2ad28:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   2ad2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   2ad2e:	4770      	bx	lr

0002ad30 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   2ad30:	4603      	mov	r3, r0
   2ad32:	b118      	cbz	r0, 2ad3c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   2ad34:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   2ad36:	2000      	movs	r0, #0
   2ad38:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   2ad3a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   2ad3c:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   2ad3e:	4770      	bx	lr

0002ad40 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   2ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   2ad42:	4b17      	ldr	r3, [pc, #92]	; (2ada0 <os_sem_release+0x60>)
   2ad44:	681b      	ldr	r3, [r3, #0]
   2ad46:	b33b      	cbz	r3, 2ad98 <os_sem_release+0x58>
   2ad48:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2ad4a:	b338      	cbz	r0, 2ad9c <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   2ad4c:	f7e3 f928 	bl	dfa0 <os_sched_get_current_task>
   2ad50:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   2ad52:	f7e3 fbf9 	bl	e548 <os_arch_save_sr>
   2ad56:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   2ad58:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   2ad5a:	b165      	cbz	r5, 2ad76 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2ad5c:	7b6b      	ldrb	r3, [r5, #13]
   2ad5e:	f023 0302 	bic.w	r3, r3, #2
   2ad62:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   2ad64:	4628      	mov	r0, r5
   2ad66:	f7e3 f96f 	bl	e048 <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   2ad6a:	7afa      	ldrb	r2, [r7, #11]
   2ad6c:	7aeb      	ldrb	r3, [r5, #11]
   2ad6e:	429a      	cmp	r2, r3
   2ad70:	d20b      	bcs.n	2ad8a <os_sem_release+0x4a>
    resched = 0;
   2ad72:	2400      	movs	r4, #0
   2ad74:	e003      	b.n	2ad7e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   2ad76:	88e3      	ldrh	r3, [r4, #6]
   2ad78:	3301      	adds	r3, #1
   2ad7a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   2ad7c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   2ad7e:	4630      	mov	r0, r6
   2ad80:	f7e3 fbe8 	bl	e554 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   2ad84:	b91c      	cbnz	r4, 2ad8e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   2ad86:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   2ad88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   2ad8a:	2401      	movs	r4, #1
   2ad8c:	e7f7      	b.n	2ad7e <os_sem_release+0x3e>
        os_sched(rdy);
   2ad8e:	4628      	mov	r0, r5
   2ad90:	f7e3 f9e6 	bl	e160 <os_sched>
    ret = OS_OK;
   2ad94:	2000      	movs	r0, #0
   2ad96:	e7f7      	b.n	2ad88 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   2ad98:	2009      	movs	r0, #9
   2ad9a:	e7f5      	b.n	2ad88 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   2ad9c:	2003      	movs	r0, #3
   2ad9e:	e7f3      	b.n	2ad88 <os_sem_release+0x48>
   2ada0:	20000f40 	.word	0x20000f40

0002ada4 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   2ada4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   2ada6:	4b2b      	ldr	r3, [pc, #172]	; (2ae54 <os_sem_pend+0xb0>)
   2ada8:	681b      	ldr	r3, [r3, #0]
   2adaa:	2b00      	cmp	r3, #0
   2adac:	d04d      	beq.n	2ae4a <os_sem_pend+0xa6>
   2adae:	4604      	mov	r4, r0
   2adb0:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2adb2:	2800      	cmp	r0, #0
   2adb4:	d04b      	beq.n	2ae4e <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   2adb6:	f7e3 f8f3 	bl	dfa0 <os_sched_get_current_task>
   2adba:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   2adbc:	f7e3 fbc4 	bl	e548 <os_arch_save_sr>
   2adc0:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   2adc2:	88e3      	ldrh	r3, [r4, #6]
   2adc4:	b14b      	cbz	r3, 2adda <os_sem_pend+0x36>
        sem->sem_tokens--;
   2adc6:	3b01      	subs	r3, #1
   2adc8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   2adca:	2400      	movs	r4, #0
    sched = 0;
   2adcc:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   2adce:	4630      	mov	r0, r6
   2add0:	f7e3 fbc0 	bl	e554 <os_arch_restore_sr>

    if (sched) {
   2add4:	bb47      	cbnz	r7, 2ae28 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   2add6:	4620      	mov	r0, r4
   2add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   2adda:	b317      	cbz	r7, 2ae22 <os_sem_pend+0x7e>
        current->t_obj = sem;
   2addc:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   2adde:	7b6b      	ldrb	r3, [r5, #13]
   2ade0:	f043 0302 	orr.w	r3, r3, #2
   2ade4:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   2ade6:	f8d4 c000 	ldr.w	ip, [r4]
   2adea:	f1bc 0f00 	cmp.w	ip, #0
   2adee:	d00e      	beq.n	2ae0e <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2adf0:	4663      	mov	r3, ip
        last = NULL;
   2adf2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2adf4:	b133      	cbz	r3, 2ae04 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   2adf6:	7ae9      	ldrb	r1, [r5, #11]
   2adf8:	7ada      	ldrb	r2, [r3, #11]
   2adfa:	4291      	cmp	r1, r2
   2adfc:	d302      	bcc.n	2ae04 <os_sem_pend+0x60>
                last = entry;
   2adfe:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2ae00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2ae02:	e7f7      	b.n	2adf4 <os_sem_pend+0x50>
        if (last) {
   2ae04:	b118      	cbz	r0, 2ae0e <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   2ae06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2ae08:	64eb      	str	r3, [r5, #76]	; 0x4c
   2ae0a:	64c5      	str	r5, [r0, #76]	; 0x4c
   2ae0c:	e002      	b.n	2ae14 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   2ae0e:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   2ae12:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   2ae14:	4639      	mov	r1, r7
   2ae16:	4628      	mov	r0, r5
   2ae18:	f7e3 f8ce 	bl	dfb8 <os_sched_sleep>
        ret = OS_OK;
   2ae1c:	2400      	movs	r4, #0
        sched = 1;
   2ae1e:	2701      	movs	r7, #1
   2ae20:	e7d5      	b.n	2adce <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   2ae22:	2406      	movs	r4, #6
    sched = 0;
   2ae24:	2700      	movs	r7, #0
   2ae26:	e7d2      	b.n	2adce <os_sem_pend+0x2a>
        os_sched(NULL);
   2ae28:	2000      	movs	r0, #0
   2ae2a:	f7e3 f999 	bl	e160 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   2ae2e:	7b6c      	ldrb	r4, [r5, #13]
   2ae30:	f014 0402 	ands.w	r4, r4, #2
   2ae34:	d0cf      	beq.n	2add6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   2ae36:	f7e3 fb87 	bl	e548 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2ae3a:	7b6b      	ldrb	r3, [r5, #13]
   2ae3c:	f023 0302 	bic.w	r3, r3, #2
   2ae40:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   2ae42:	f7e3 fb87 	bl	e554 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   2ae46:	2406      	movs	r4, #6
   2ae48:	e7c5      	b.n	2add6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   2ae4a:	2409      	movs	r4, #9
   2ae4c:	e7c3      	b.n	2add6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   2ae4e:	2403      	movs	r4, #3
   2ae50:	e7c1      	b.n	2add6 <os_sem_pend+0x32>
   2ae52:	bf00      	nop
   2ae54:	20000f40 	.word	0x20000f40

0002ae58 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   2ae58:	2001      	movs	r0, #1
   2ae5a:	4770      	bx	lr

0002ae5c <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   2ae5c:	4770      	bx	lr

0002ae5e <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   2ae5e:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   2ae60:	f101 0320 	add.w	r3, r1, #32
   2ae64:	4293      	cmp	r3, r2
   2ae66:	d816      	bhi.n	2ae96 <__malloc_from_block+0x38>
{
   2ae68:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   2ae6a:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   2ae6c:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   2ae6e:	2501      	movs	r5, #1
   2ae70:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   2ae72:	1a52      	subs	r2, r2, r1
   2ae74:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   2ae76:	2200      	movs	r2, #0
   2ae78:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   2ae7a:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   2ae7c:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   2ae7e:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   2ae80:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   2ae82:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   2ae84:	6901      	ldr	r1, [r0, #16]
   2ae86:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   2ae88:	6942      	ldr	r2, [r0, #20]
   2ae8a:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   2ae8c:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   2ae8e:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   2ae90:	3010      	adds	r0, #16
   2ae92:	bc30      	pop	{r4, r5}
   2ae94:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   2ae96:	2300      	movs	r3, #0
   2ae98:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   2ae9a:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   2ae9c:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   2ae9e:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2aea0:	615a      	str	r2, [r3, #20]
}
   2aea2:	3010      	adds	r0, #16
   2aea4:	4770      	bx	lr
	...

0002aea8 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   2aea8:	b410      	push	{r4}
   2aeaa:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   2aeac:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   2aeae:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   2aeb0:	6802      	ldr	r2, [r0, #0]
   2aeb2:	2a01      	cmp	r2, #1
   2aeb4:	d00e      	beq.n	2aed4 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   2aeb6:	2201      	movs	r2, #1
   2aeb8:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   2aeba:	4a13      	ldr	r2, [pc, #76]	; (2af08 <__free_block+0x60>)
   2aebc:	6910      	ldr	r0, [r2, #16]
   2aebe:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   2aec0:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   2aec2:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   2aec4:	691a      	ldr	r2, [r3, #16]
   2aec6:	6153      	str	r3, [r2, #20]
   2aec8:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   2aeca:	680b      	ldr	r3, [r1, #0]
   2aecc:	2b01      	cmp	r3, #1
   2aece:	d00b      	beq.n	2aee8 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   2aed0:	bc10      	pop	{r4}
   2aed2:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   2aed4:	6842      	ldr	r2, [r0, #4]
   2aed6:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   2aed8:	429c      	cmp	r4, r3
   2aeda:	d1ec      	bne.n	2aeb6 <__free_block+0xe>
        pah->a.size += ah->a.size;
   2aedc:	685b      	ldr	r3, [r3, #4]
   2aede:	441a      	add	r2, r3
   2aee0:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   2aee2:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   2aee4:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   2aee6:	e7f0      	b.n	2aeca <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   2aee8:	6843      	ldr	r3, [r0, #4]
   2aeea:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   2aeec:	428a      	cmp	r2, r1
   2aeee:	d1ef      	bne.n	2aed0 <__free_block+0x28>
        ah->a.size += nah->a.size;
   2aef0:	684a      	ldr	r2, [r1, #4]
   2aef2:	4413      	add	r3, r2
   2aef4:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   2aef6:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   2aef8:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   2aefa:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2aefc:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   2aefe:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   2af00:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   2af02:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   2af04:	60da      	str	r2, [r3, #12]
    return ah;
   2af06:	e7e3      	b.n	2aed0 <__free_block+0x28>
   2af08:	200004c4 	.word	0x200004c4

0002af0c <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   2af0c:	2917      	cmp	r1, #23
   2af0e:	d91e      	bls.n	2af4e <add_malloc_block+0x42>
{
   2af10:	b510      	push	{r4, lr}
   2af12:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   2af14:	2301      	movs	r3, #1
   2af16:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   2af18:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   2af1a:	4b0d      	ldr	r3, [pc, #52]	; (2af50 <add_malloc_block+0x44>)
   2af1c:	681b      	ldr	r3, [r3, #0]
   2af1e:	4798      	blx	r3
   2af20:	b1a0      	cbz	r0, 2af4c <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   2af22:	4b0c      	ldr	r3, [pc, #48]	; (2af54 <add_malloc_block+0x48>)
   2af24:	68db      	ldr	r3, [r3, #12]
   2af26:	681a      	ldr	r2, [r3, #0]
   2af28:	2a02      	cmp	r2, #2
   2af2a:	d003      	beq.n	2af34 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   2af2c:	42a3      	cmp	r3, r4
   2af2e:	d301      	bcc.n	2af34 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   2af30:	68db      	ldr	r3, [r3, #12]
   2af32:	e7f8      	b.n	2af26 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   2af34:	689a      	ldr	r2, [r3, #8]
   2af36:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   2af38:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   2af3a:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   2af3c:	68a3      	ldr	r3, [r4, #8]
   2af3e:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   2af40:	4620      	mov	r0, r4
   2af42:	f7ff ffb1 	bl	2aea8 <__free_block>

    malloc_unlock();
   2af46:	4b04      	ldr	r3, [pc, #16]	; (2af58 <add_malloc_block+0x4c>)
   2af48:	681b      	ldr	r3, [r3, #0]
   2af4a:	4798      	blx	r3
}
   2af4c:	bd10      	pop	{r4, pc}
   2af4e:	4770      	bx	lr
   2af50:	200004dc 	.word	0x200004dc
   2af54:	200004c4 	.word	0x200004c4
   2af58:	200004e0 	.word	0x200004e0

0002af5c <malloc>:
{
   2af5c:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2af5e:	1e43      	subs	r3, r0, #1
   2af60:	f113 0f12 	cmn.w	r3, #18
   2af64:	d825      	bhi.n	2afb2 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2af66:	301f      	adds	r0, #31
   2af68:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   2af6c:	4b13      	ldr	r3, [pc, #76]	; (2afbc <malloc+0x60>)
   2af6e:	681b      	ldr	r3, [r3, #0]
   2af70:	4798      	blx	r3
   2af72:	b300      	cbz	r0, 2afb6 <malloc+0x5a>
    void *result = NULL;
   2af74:	2500      	movs	r5, #0
   2af76:	e00d      	b.n	2af94 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   2af78:	4621      	mov	r1, r4
   2af7a:	f7ff ff70 	bl	2ae5e <__malloc_from_block>
   2af7e:	4605      	mov	r5, r0
    if (result == NULL) {
   2af80:	b995      	cbnz	r5, 2afa8 <malloc+0x4c>
        more_mem = _sbrk(size);
   2af82:	4620      	mov	r0, r4
   2af84:	f7e1 fdf2 	bl	cb6c <_sbrk>
        if (more_mem != (void *)-1) {
   2af88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2af8c:	d00c      	beq.n	2afa8 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   2af8e:	4621      	mov	r1, r4
   2af90:	f7ff ffbc 	bl	2af0c <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   2af94:	4b0a      	ldr	r3, [pc, #40]	; (2afc0 <malloc+0x64>)
   2af96:	6918      	ldr	r0, [r3, #16]
   2af98:	6803      	ldr	r3, [r0, #0]
   2af9a:	2b02      	cmp	r3, #2
   2af9c:	d0f0      	beq.n	2af80 <malloc+0x24>
        if (fp->a.size >= size) {
   2af9e:	6843      	ldr	r3, [r0, #4]
   2afa0:	42a3      	cmp	r3, r4
   2afa2:	d2e9      	bcs.n	2af78 <malloc+0x1c>
         fp = fp->next_free) {
   2afa4:	6900      	ldr	r0, [r0, #16]
   2afa6:	e7f7      	b.n	2af98 <malloc+0x3c>
    malloc_unlock();
   2afa8:	4b06      	ldr	r3, [pc, #24]	; (2afc4 <malloc+0x68>)
   2afaa:	681b      	ldr	r3, [r3, #0]
   2afac:	4798      	blx	r3
}
   2afae:	4628      	mov	r0, r5
   2afb0:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   2afb2:	2500      	movs	r5, #0
   2afb4:	e7fb      	b.n	2afae <malloc+0x52>
        return NULL;
   2afb6:	2500      	movs	r5, #0
   2afb8:	e7f9      	b.n	2afae <malloc+0x52>
   2afba:	bf00      	nop
   2afbc:	200004dc 	.word	0x200004dc
   2afc0:	200004c4 	.word	0x200004c4
   2afc4:	200004e0 	.word	0x200004e0

0002afc8 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   2afc8:	b170      	cbz	r0, 2afe8 <free+0x20>
{
   2afca:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   2afcc:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   2afd0:	4b06      	ldr	r3, [pc, #24]	; (2afec <free+0x24>)
   2afd2:	681b      	ldr	r3, [r3, #0]
   2afd4:	4798      	blx	r3
   2afd6:	b900      	cbnz	r0, 2afda <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   2afd8:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   2afda:	4620      	mov	r0, r4
   2afdc:	f7ff ff64 	bl	2aea8 <__free_block>
    malloc_unlock();
   2afe0:	4b03      	ldr	r3, [pc, #12]	; (2aff0 <free+0x28>)
   2afe2:	681b      	ldr	r3, [r3, #0]
   2afe4:	4798      	blx	r3
   2afe6:	e7f7      	b.n	2afd8 <free+0x10>
   2afe8:	4770      	bx	lr
   2afea:	bf00      	nop
   2afec:	200004dc 	.word	0x200004dc
   2aff0:	200004e0 	.word	0x200004e0

0002aff4 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   2aff4:	2000      	movs	r0, #0
   2aff6:	4770      	bx	lr

0002aff8 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   2aff8:	b510      	push	{r4, lr}
   2affa:	4608      	mov	r0, r1
   2affc:	4614      	mov	r4, r2
    console_write(bp, n);
   2affe:	4611      	mov	r1, r2
   2b000:	f7e5 f95a 	bl	102b8 <console_write>
    return n;
}
   2b004:	4620      	mov	r0, r4
   2b006:	bd10      	pop	{r4, pc}

0002b008 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   2b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   2b00a:	b300      	cbz	r0, 2b04e <realloc+0x46>
   2b00c:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2b00e:	1e4b      	subs	r3, r1, #1
   2b010:	f113 0f12 	cmn.w	r3, #18
   2b014:	d820      	bhi.n	2b058 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2b016:	311f      	adds	r1, #31
   2b018:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   2b01c:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   2b020:	42a5      	cmp	r5, r4
   2b022:	d302      	bcc.n	2b02a <realloc+0x22>
   2b024:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   2b028:	d21c      	bcs.n	2b064 <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   2b02a:	3d10      	subs	r5, #16

		newptr = malloc(size);
   2b02c:	4620      	mov	r0, r4
   2b02e:	f7ff ff95 	bl	2af5c <malloc>
                if (newptr) {
   2b032:	4607      	mov	r7, r0
   2b034:	b1a0      	cbz	r0, 2b060 <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   2b036:	4622      	mov	r2, r4
   2b038:	42ac      	cmp	r4, r5
   2b03a:	bf28      	it	cs
   2b03c:	462a      	movcs	r2, r5
   2b03e:	4631      	mov	r1, r6
   2b040:	f7e3 fcba 	bl	e9b8 <memcpy>
                    free(ptr);
   2b044:	4630      	mov	r0, r6
   2b046:	f7ff ffbf 	bl	2afc8 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   2b04a:	4638      	mov	r0, r7
   2b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   2b04e:	4608      	mov	r0, r1
   2b050:	f7ff ff84 	bl	2af5c <malloc>
   2b054:	4607      	mov	r7, r0
   2b056:	e7f8      	b.n	2b04a <realloc+0x42>
		free(ptr);
   2b058:	f7ff ffb6 	bl	2afc8 <free>
		return NULL;
   2b05c:	2700      	movs	r7, #0
   2b05e:	e7f4      	b.n	2b04a <realloc+0x42>
                    newptr = ptr;
   2b060:	4637      	mov	r7, r6
		return newptr;
   2b062:	e7f2      	b.n	2b04a <realloc+0x42>
		return ptr;
   2b064:	4607      	mov	r7, r0
   2b066:	e7f0      	b.n	2b04a <realloc+0x42>

0002b068 <sprintf>:

#include <stdio.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   2b068:	b40e      	push	{r1, r2, r3}
   2b06a:	b500      	push	{lr}
   2b06c:	b082      	sub	sp, #8
   2b06e:	ab03      	add	r3, sp, #12
   2b070:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   2b074:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   2b076:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b07a:	f000 fb89 	bl	2b790 <vsnprintf>
	va_end(ap);

	return rv;
}
   2b07e:	b002      	add	sp, #8
   2b080:	f85d eb04 	ldr.w	lr, [sp], #4
   2b084:	b003      	add	sp, #12
   2b086:	4770      	bx	lr

0002b088 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   2b088:	b410      	push	{r4}
	char *q = dst;
   2b08a:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   2b08c:	780c      	ldrb	r4, [r1, #0]
   2b08e:	3101      	adds	r1, #1
   2b090:	7014      	strb	r4, [r2, #0]
   2b092:	3201      	adds	r2, #1
	} while (ch);
   2b094:	2c00      	cmp	r4, #0
   2b096:	d1f9      	bne.n	2b08c <strcpy+0x4>

	return dst;
}
   2b098:	bc10      	pop	{r4}
   2b09a:	4770      	bx	lr

0002b09c <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   2b09c:	b510      	push	{r4, lr}
   2b09e:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   2b0a0:	b132      	cbz	r2, 2b0b0 <strncpy+0x14>
		n--;
   2b0a2:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   2b0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
   2b0a8:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   2b0ac:	2b00      	cmp	r3, #0
   2b0ae:	d1f7      	bne.n	2b0a0 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   2b0b0:	2100      	movs	r1, #0
   2b0b2:	f7e3 fca6 	bl	ea02 <memset>

	return dst;
}
   2b0b6:	4620      	mov	r0, r4
   2b0b8:	bd10      	pop	{r4, pc}

0002b0ba <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   2b0ba:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   2b0bc:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   2b0be:	b14d      	cbz	r5, 2b0d4 <strsep+0x1a>
   2b0c0:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   2b0c2:	4628      	mov	r0, r5
   2b0c4:	f000 fc4c 	bl	2b960 <strpbrk>
	if (e)
   2b0c8:	4603      	mov	r3, r0
   2b0ca:	b110      	cbz	r0, 2b0d2 <strsep+0x18>
		*e++ = '\0';
   2b0cc:	2200      	movs	r2, #0
   2b0ce:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   2b0d2:	6023      	str	r3, [r4, #0]
	return s;
}
   2b0d4:	4628      	mov	r0, r5
   2b0d6:	bd38      	pop	{r3, r4, r5, pc}

0002b0d8 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   2b0d8:	b538      	push	{r3, r4, r5, lr}
   2b0da:	460d      	mov	r5, r1
   2b0dc:	4614      	mov	r4, r2
	if (s)
   2b0de:	b100      	cbz	r0, 2b0e2 <strtok_r+0xa>
		*holder = s;
   2b0e0:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   2b0e2:	4629      	mov	r1, r5
   2b0e4:	4620      	mov	r0, r4
   2b0e6:	f7ff ffe8 	bl	2b0ba <strsep>
	} while (s && !*s);
   2b0ea:	4603      	mov	r3, r0
   2b0ec:	b110      	cbz	r0, 2b0f4 <strtok_r+0x1c>
   2b0ee:	7800      	ldrb	r0, [r0, #0]
   2b0f0:	2800      	cmp	r0, #0
   2b0f2:	d0f6      	beq.n	2b0e2 <strtok_r+0xa>

	return s;
}
   2b0f4:	4618      	mov	r0, r3
   2b0f6:	bd38      	pop	{r3, r4, r5, pc}

0002b0f8 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   2b0f8:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   2b0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b0fe:	f000 fba1 	bl	2b844 <strntoumax>
}
   2b102:	bd08      	pop	{r3, pc}

0002b104 <strtoull>:
{
   2b104:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   2b106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b10a:	f000 fb9b 	bl	2b844 <strntoumax>
}
   2b10e:	bd08      	pop	{r3, pc}

0002b110 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   2b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b114:	b087      	sub	sp, #28
   2b116:	4604      	mov	r4, r0
   2b118:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   2b11a:	6853      	ldr	r3, [r2, #4]
   2b11c:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   2b11e:	7893      	ldrb	r3, [r2, #2]
   2b120:	f003 0330 	and.w	r3, r3, #48	; 0x30
   2b124:	2b10      	cmp	r3, #16
   2b126:	d018      	beq.n	2b15a <ui2a+0x4a>
   2b128:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   2b12a:	2b20      	cmp	r3, #32
   2b12c:	d019      	beq.n	2b162 <ui2a+0x52>
{
   2b12e:	2601      	movs	r6, #1
   2b130:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   2b132:	4632      	mov	r2, r6
   2b134:	463b      	mov	r3, r7
   2b136:	4620      	mov	r0, r4
   2b138:	4629      	mov	r1, r5
   2b13a:	f001 ff39 	bl	2cfb0 <__aeabi_uldivmod>
   2b13e:	f89a 8003 	ldrb.w	r8, [sl, #3]
   2b142:	f04f 0900 	mov.w	r9, #0
   2b146:	4549      	cmp	r1, r9
   2b148:	bf08      	it	eq
   2b14a:	4540      	cmpeq	r0, r8
   2b14c:	d30e      	bcc.n	2b16c <ui2a+0x5c>
        d *= p->base;
   2b14e:	fb08 f307 	mul.w	r3, r8, r7
   2b152:	fba6 6708 	umull	r6, r7, r6, r8
   2b156:	441f      	add	r7, r3
   2b158:	e7eb      	b.n	2b132 <ui2a+0x22>
        num = (unsigned short int)num;
   2b15a:	b283      	uxth	r3, r0
   2b15c:	461c      	mov	r4, r3
   2b15e:	2500      	movs	r5, #0
   2b160:	e7e5      	b.n	2b12e <ui2a+0x1e>
        num = (unsigned char)num;
   2b162:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   2b166:	461c      	mov	r4, r3
   2b168:	2500      	movs	r5, #0
   2b16a:	e7e0      	b.n	2b12e <ui2a+0x1e>
    int n = 0;
   2b16c:	f04f 0b00 	mov.w	fp, #0
   2b170:	f8cd a014 	str.w	sl, [sp, #20]
   2b174:	e00c      	b.n	2b190 <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2b176:	2230      	movs	r2, #48	; 0x30
   2b178:	9b04      	ldr	r3, [sp, #16]
   2b17a:	9c00      	ldr	r4, [sp, #0]
   2b17c:	4414      	add	r4, r2
   2b17e:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   2b182:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2b186:	9304      	str	r3, [sp, #16]
   2b188:	4606      	mov	r6, r0
   2b18a:	460f      	mov	r7, r1
   2b18c:	9c02      	ldr	r4, [sp, #8]
   2b18e:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   2b190:	ea56 0307 	orrs.w	r3, r6, r7
   2b194:	d034      	beq.n	2b200 <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   2b196:	4632      	mov	r2, r6
   2b198:	463b      	mov	r3, r7
   2b19a:	4620      	mov	r0, r4
   2b19c:	4629      	mov	r1, r5
   2b19e:	f001 ff07 	bl	2cfb0 <__aeabi_uldivmod>
   2b1a2:	9000      	str	r0, [sp, #0]
   2b1a4:	9101      	str	r1, [sp, #4]
        num %= d;
   2b1a6:	4632      	mov	r2, r6
   2b1a8:	463b      	mov	r3, r7
   2b1aa:	4620      	mov	r0, r4
   2b1ac:	4629      	mov	r1, r5
   2b1ae:	f001 feff 	bl	2cfb0 <__aeabi_uldivmod>
   2b1b2:	9202      	str	r2, [sp, #8]
   2b1b4:	9303      	str	r3, [sp, #12]
        d /= p->base;
   2b1b6:	9b05      	ldr	r3, [sp, #20]
   2b1b8:	f893 8003 	ldrb.w	r8, [r3, #3]
   2b1bc:	f04f 0900 	mov.w	r9, #0
   2b1c0:	4642      	mov	r2, r8
   2b1c2:	464b      	mov	r3, r9
   2b1c4:	4630      	mov	r0, r6
   2b1c6:	4639      	mov	r1, r7
   2b1c8:	f001 fef2 	bl	2cfb0 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   2b1cc:	f1bb 0f00 	cmp.w	fp, #0
   2b1d0:	d107      	bne.n	2b1e2 <ui2a+0xd2>
   2b1d2:	42bd      	cmp	r5, r7
   2b1d4:	bf08      	it	eq
   2b1d6:	42b4      	cmpeq	r4, r6
   2b1d8:	d203      	bcs.n	2b1e2 <ui2a+0xd2>
   2b1da:	454f      	cmp	r7, r9
   2b1dc:	bf08      	it	eq
   2b1de:	4546      	cmpeq	r6, r8
   2b1e0:	d2d2      	bcs.n	2b188 <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2b1e2:	e9dd 3400 	ldrd	r3, r4, [sp]
   2b1e6:	2c00      	cmp	r4, #0
   2b1e8:	bf08      	it	eq
   2b1ea:	2b0a      	cmpeq	r3, #10
   2b1ec:	d3c3      	bcc.n	2b176 <ui2a+0x66>
   2b1ee:	9b05      	ldr	r3, [sp, #20]
   2b1f0:	789b      	ldrb	r3, [r3, #2]
   2b1f2:	f013 0f04 	tst.w	r3, #4
   2b1f6:	d001      	beq.n	2b1fc <ui2a+0xec>
   2b1f8:	2237      	movs	r2, #55	; 0x37
   2b1fa:	e7bd      	b.n	2b178 <ui2a+0x68>
   2b1fc:	2257      	movs	r2, #87	; 0x57
   2b1fe:	e7bb      	b.n	2b178 <ui2a+0x68>
        }
    }
    *bf = 0;
   2b200:	2300      	movs	r3, #0
   2b202:	9a04      	ldr	r2, [sp, #16]
   2b204:	7013      	strb	r3, [r2, #0]
}
   2b206:	b007      	add	sp, #28
   2b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b20c <i2a>:

static void i2a(long long int num, struct param *p)
{
   2b20c:	b510      	push	{r4, lr}
   2b20e:	4604      	mov	r4, r0
   2b210:	460b      	mov	r3, r1
   2b212:	4620      	mov	r0, r4
   2b214:	4619      	mov	r1, r3
    if (num < 0) {
   2b216:	2c00      	cmp	r4, #0
   2b218:	f173 0300 	sbcs.w	r3, r3, #0
   2b21c:	db02      	blt.n	2b224 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   2b21e:	f7ff ff77 	bl	2b110 <ui2a>
}
   2b222:	bd10      	pop	{r4, pc}
        num = -num;
   2b224:	4260      	negs	r0, r4
   2b226:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   2b22a:	7893      	ldrb	r3, [r2, #2]
   2b22c:	f043 0301 	orr.w	r3, r3, #1
   2b230:	7093      	strb	r3, [r2, #2]
   2b232:	e7f4      	b.n	2b21e <i2a+0x12>

0002b234 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   2b234:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2b238:	b2db      	uxtb	r3, r3
   2b23a:	2b09      	cmp	r3, #9
   2b23c:	d90b      	bls.n	2b256 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   2b23e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2b242:	b2db      	uxtb	r3, r3
   2b244:	2b05      	cmp	r3, #5
   2b246:	d908      	bls.n	2b25a <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   2b248:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2b24c:	b2db      	uxtb	r3, r3
   2b24e:	2b05      	cmp	r3, #5
   2b250:	d805      	bhi.n	2b25e <a2d+0x2a>
        return ch - 'A' + 10;
   2b252:	3837      	subs	r0, #55	; 0x37
   2b254:	4770      	bx	lr
        return ch - '0';
   2b256:	3830      	subs	r0, #48	; 0x30
   2b258:	4770      	bx	lr
        return ch - 'a' + 10;
   2b25a:	3857      	subs	r0, #87	; 0x57
   2b25c:	4770      	bx	lr
    else
        return -1;
   2b25e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2b262:	4770      	bx	lr

0002b264 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   2b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b268:	4605      	mov	r5, r0
   2b26a:	4688      	mov	r8, r1
   2b26c:	4616      	mov	r6, r2
   2b26e:	4699      	mov	r9, r3
    const char *p = *src;
   2b270:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   2b272:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   2b274:	4628      	mov	r0, r5
   2b276:	f7ff ffdd 	bl	2b234 <a2d>
   2b27a:	2800      	cmp	r0, #0
   2b27c:	db06      	blt.n	2b28c <a2i+0x28>
        if (digit > base)
   2b27e:	42b0      	cmp	r0, r6
   2b280:	dc04      	bgt.n	2b28c <a2i+0x28>
            break;
        num = num * base + digit;
   2b282:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   2b286:	f814 5b01 	ldrb.w	r5, [r4], #1
   2b28a:	e7f3      	b.n	2b274 <a2i+0x10>
    }
    *src = p;
   2b28c:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   2b290:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   2b294:	4628      	mov	r0, r5
   2b296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b29a <putf>:

static int putf(FILE *putp, char c)
{
   2b29a:	b500      	push	{lr}
   2b29c:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   2b29e:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   2b2a2:	6803      	ldr	r3, [r0, #0]
   2b2a4:	681b      	ldr	r3, [r3, #0]
   2b2a6:	b143      	cbz	r3, 2b2ba <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   2b2a8:	2201      	movs	r2, #1
   2b2aa:	f10d 0107 	add.w	r1, sp, #7
   2b2ae:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   2b2b0:	2801      	cmp	r0, #1
   2b2b2:	d102      	bne.n	2b2ba <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   2b2b4:	b003      	add	sp, #12
   2b2b6:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   2b2ba:	2000      	movs	r0, #0
   2b2bc:	e7fa      	b.n	2b2b4 <putf+0x1a>
	...

0002b2c0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   2b2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b2c4:	4607      	mov	r7, r0
   2b2c6:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   2b2c8:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   2b2ca:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   2b2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b2d0:	b11a      	cbz	r2, 2b2da <putchw+0x1a>
   2b2d2:	2c00      	cmp	r4, #0
   2b2d4:	dd01      	ble.n	2b2da <putchw+0x1a>
        n--;
   2b2d6:	3c01      	subs	r4, #1
   2b2d8:	e7f8      	b.n	2b2cc <putchw+0xc>
    if (p->sign)
   2b2da:	f898 3002 	ldrb.w	r3, [r8, #2]
   2b2de:	f013 0f01 	tst.w	r3, #1
   2b2e2:	d000      	beq.n	2b2e6 <putchw+0x26>
        n--;
   2b2e4:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   2b2e6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   2b2ea:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2b2ee:	b29b      	uxth	r3, r3
   2b2f0:	f241 0202 	movw	r2, #4098	; 0x1002
   2b2f4:	4293      	cmp	r3, r2
   2b2f6:	d028      	beq.n	2b34a <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   2b2f8:	f640 0202 	movw	r2, #2050	; 0x802
   2b2fc:	4293      	cmp	r3, r2
   2b2fe:	d026      	beq.n	2b34e <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   2b300:	f8d8 3000 	ldr.w	r3, [r8]
   2b304:	4e36      	ldr	r6, [pc, #216]	; (2b3e0 <putchw+0x120>)
   2b306:	401e      	ands	r6, r3
   2b308:	b34e      	cbz	r6, 2b35e <putchw+0x9e>
    unsigned written = 0;
   2b30a:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   2b30c:	f898 3002 	ldrb.w	r3, [r8, #2]
   2b310:	f013 0f01 	tst.w	r3, #1
   2b314:	d128      	bne.n	2b368 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   2b316:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   2b31a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2b31e:	b29b      	uxth	r3, r3
   2b320:	f241 0202 	movw	r2, #4098	; 0x1002
   2b324:	4293      	cmp	r3, r2
   2b326:	d025      	beq.n	2b374 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   2b328:	f640 0202 	movw	r2, #2050	; 0x802
   2b32c:	4293      	cmp	r3, r2
   2b32e:	d033      	beq.n	2b398 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   2b330:	f898 3001 	ldrb.w	r3, [r8, #1]
   2b334:	bbe3      	cbnz	r3, 2b3b0 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   2b336:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   2b33a:	f815 1b01 	ldrb.w	r1, [r5], #1
   2b33e:	b3e1      	cbz	r1, 2b3ba <putchw+0xfa>
        written += putf(putp, ch);
   2b340:	4638      	mov	r0, r7
   2b342:	f7ff ffaa 	bl	2b29a <putf>
   2b346:	4406      	add	r6, r0
   2b348:	e7f7      	b.n	2b33a <putchw+0x7a>
        n -= 2;
   2b34a:	3c02      	subs	r4, #2
   2b34c:	e7d8      	b.n	2b300 <putchw+0x40>
        n--;
   2b34e:	3c01      	subs	r4, #1
   2b350:	e7d6      	b.n	2b300 <putchw+0x40>
            written += putf(putp, ' ');
   2b352:	2120      	movs	r1, #32
   2b354:	4638      	mov	r0, r7
   2b356:	f7ff ffa0 	bl	2b29a <putf>
   2b35a:	4406      	add	r6, r0
        while (n-- > 0)
   2b35c:	462c      	mov	r4, r5
   2b35e:	1e65      	subs	r5, r4, #1
   2b360:	2c00      	cmp	r4, #0
   2b362:	dcf6      	bgt.n	2b352 <putchw+0x92>
   2b364:	462c      	mov	r4, r5
   2b366:	e7d1      	b.n	2b30c <putchw+0x4c>
        written += putf(putp, '-');
   2b368:	212d      	movs	r1, #45	; 0x2d
   2b36a:	4638      	mov	r0, r7
   2b36c:	f7ff ff95 	bl	2b29a <putf>
   2b370:	4406      	add	r6, r0
   2b372:	e7d0      	b.n	2b316 <putchw+0x56>
        written += putf(putp, '0');
   2b374:	2130      	movs	r1, #48	; 0x30
   2b376:	4638      	mov	r0, r7
   2b378:	f7ff ff8f 	bl	2b29a <putf>
   2b37c:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   2b37e:	f898 3002 	ldrb.w	r3, [r8, #2]
   2b382:	f013 0f04 	tst.w	r3, #4
   2b386:	d005      	beq.n	2b394 <putchw+0xd4>
   2b388:	2158      	movs	r1, #88	; 0x58
   2b38a:	4638      	mov	r0, r7
   2b38c:	f7ff ff85 	bl	2b29a <putf>
   2b390:	4406      	add	r6, r0
   2b392:	e7cd      	b.n	2b330 <putchw+0x70>
   2b394:	2178      	movs	r1, #120	; 0x78
   2b396:	e7f8      	b.n	2b38a <putchw+0xca>
        written += putf(putp, '0');
   2b398:	2130      	movs	r1, #48	; 0x30
   2b39a:	4638      	mov	r0, r7
   2b39c:	f7ff ff7d 	bl	2b29a <putf>
   2b3a0:	4406      	add	r6, r0
   2b3a2:	e7c5      	b.n	2b330 <putchw+0x70>
            written += putf(putp, '0');
   2b3a4:	2130      	movs	r1, #48	; 0x30
   2b3a6:	4638      	mov	r0, r7
   2b3a8:	f7ff ff77 	bl	2b29a <putf>
   2b3ac:	4406      	add	r6, r0
        while (n-- > 0)
   2b3ae:	462c      	mov	r4, r5
   2b3b0:	1e65      	subs	r5, r4, #1
   2b3b2:	2c00      	cmp	r4, #0
   2b3b4:	dcf6      	bgt.n	2b3a4 <putchw+0xe4>
   2b3b6:	462c      	mov	r4, r5
   2b3b8:	e7bd      	b.n	2b336 <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   2b3ba:	f898 3002 	ldrb.w	r3, [r8, #2]
   2b3be:	f013 0f08 	tst.w	r3, #8
   2b3c2:	d102      	bne.n	2b3ca <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   2b3c4:	4630      	mov	r0, r6
   2b3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   2b3ca:	1e65      	subs	r5, r4, #1
   2b3cc:	2c00      	cmp	r4, #0
   2b3ce:	ddf9      	ble.n	2b3c4 <putchw+0x104>
            written += putf(putp, ' ');
   2b3d0:	2120      	movs	r1, #32
   2b3d2:	4638      	mov	r0, r7
   2b3d4:	f7ff ff61 	bl	2b29a <putf>
   2b3d8:	4406      	add	r6, r0
        while (n-- > 0)
   2b3da:	462c      	mov	r4, r5
   2b3dc:	e7f5      	b.n	2b3ca <putchw+0x10a>
   2b3de:	bf00      	nop
   2b3e0:	0008ff00 	.word	0x0008ff00

0002b3e4 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   2b3e4:	b160      	cbz	r0, 2b400 <intarg+0x1c>
   2b3e6:	2801      	cmp	r0, #1
   2b3e8:	d017      	beq.n	2b41a <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   2b3ea:	b319      	cbz	r1, 2b434 <intarg+0x50>
            val = va_arg(*va, long long);
   2b3ec:	6813      	ldr	r3, [r2, #0]
   2b3ee:	3307      	adds	r3, #7
   2b3f0:	f023 0307 	bic.w	r3, r3, #7
   2b3f4:	f103 0108 	add.w	r1, r3, #8
   2b3f8:	6011      	str	r1, [r2, #0]
   2b3fa:	e9d3 0100 	ldrd	r0, r1, [r3]
   2b3fe:	4770      	bx	lr
        if (sign) {
   2b400:	b129      	cbz	r1, 2b40e <intarg+0x2a>
            val = va_arg(*va, int);
   2b402:	6813      	ldr	r3, [r2, #0]
   2b404:	1d19      	adds	r1, r3, #4
   2b406:	6011      	str	r1, [r2, #0]
   2b408:	6818      	ldr	r0, [r3, #0]
   2b40a:	17c1      	asrs	r1, r0, #31
   2b40c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   2b40e:	6813      	ldr	r3, [r2, #0]
   2b410:	1d19      	adds	r1, r3, #4
   2b412:	6011      	str	r1, [r2, #0]
   2b414:	6818      	ldr	r0, [r3, #0]
   2b416:	2100      	movs	r1, #0
   2b418:	4770      	bx	lr
        if (sign) {
   2b41a:	b129      	cbz	r1, 2b428 <intarg+0x44>
            val = va_arg(*va, long);
   2b41c:	6813      	ldr	r3, [r2, #0]
   2b41e:	1d19      	adds	r1, r3, #4
   2b420:	6011      	str	r1, [r2, #0]
   2b422:	6818      	ldr	r0, [r3, #0]
   2b424:	17c1      	asrs	r1, r0, #31
   2b426:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   2b428:	6813      	ldr	r3, [r2, #0]
   2b42a:	1d19      	adds	r1, r3, #4
   2b42c:	6011      	str	r1, [r2, #0]
   2b42e:	6818      	ldr	r0, [r3, #0]
   2b430:	2100      	movs	r1, #0
   2b432:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   2b434:	6813      	ldr	r3, [r2, #0]
   2b436:	3307      	adds	r3, #7
   2b438:	f023 0307 	bic.w	r3, r3, #7
   2b43c:	f103 0108 	add.w	r1, r3, #8
   2b440:	6011      	str	r1, [r2, #0]
   2b442:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   2b446:	4770      	bx	lr

0002b448 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   2b448:	b570      	push	{r4, r5, r6, lr}
   2b44a:	b08a      	sub	sp, #40	; 0x28
   2b44c:	4606      	mov	r6, r0
   2b44e:	9101      	str	r1, [sp, #4]
   2b450:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   2b452:	ab02      	add	r3, sp, #8
   2b454:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   2b456:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   2b458:	9b01      	ldr	r3, [sp, #4]
   2b45a:	1c5a      	adds	r2, r3, #1
   2b45c:	9201      	str	r2, [sp, #4]
   2b45e:	7819      	ldrb	r1, [r3, #0]
   2b460:	2900      	cmp	r1, #0
   2b462:	f000 816e 	beq.w	2b742 <tfp_format+0x2fa>
        if (ch != '%') {
   2b466:	2925      	cmp	r1, #37	; 0x25
   2b468:	d004      	beq.n	2b474 <tfp_format+0x2c>
            written += putf(putp, ch);
   2b46a:	4630      	mov	r0, r6
   2b46c:	f7ff ff15 	bl	2b29a <putf>
   2b470:	4405      	add	r5, r0
   2b472:	e7f1      	b.n	2b458 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   2b474:	2200      	movs	r2, #0
   2b476:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   2b47a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   2b47e:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   2b482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2b486:	f362 1305 	bfi	r3, r2, #4, #2
   2b48a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   2b48e:	9b01      	ldr	r3, [sp, #4]
   2b490:	1c5a      	adds	r2, r3, #1
   2b492:	9201      	str	r2, [sp, #4]
   2b494:	781c      	ldrb	r4, [r3, #0]
   2b496:	b12c      	cbz	r4, 2b4a4 <tfp_format+0x5c>
                switch (ch) {
   2b498:	2c2d      	cmp	r4, #45	; 0x2d
   2b49a:	d073      	beq.n	2b584 <tfp_format+0x13c>
   2b49c:	2c30      	cmp	r4, #48	; 0x30
   2b49e:	d061      	beq.n	2b564 <tfp_format+0x11c>
   2b4a0:	2c23      	cmp	r4, #35	; 0x23
   2b4a2:	d068      	beq.n	2b576 <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   2b4a4:	2c2a      	cmp	r4, #42	; 0x2a
   2b4a6:	d077      	beq.n	2b598 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   2b4a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2b4ac:	b2db      	uxtb	r3, r3
   2b4ae:	2b09      	cmp	r3, #9
   2b4b0:	f240 8086 	bls.w	2b5c0 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   2b4b4:	2c6c      	cmp	r4, #108	; 0x6c
   2b4b6:	f000 808b 	beq.w	2b5d0 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   2b4ba:	2c68      	cmp	r4, #104	; 0x68
   2b4bc:	f000 8095 	beq.w	2b5ea <tfp_format+0x1a2>
            lng = 0;
   2b4c0:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   2b4c2:	2c7a      	cmp	r4, #122	; 0x7a
   2b4c4:	f000 80ab 	beq.w	2b61e <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   2b4c8:	2c78      	cmp	r4, #120	; 0x78
   2b4ca:	d8c5      	bhi.n	2b458 <tfp_format+0x10>
   2b4cc:	2c58      	cmp	r4, #88	; 0x58
   2b4ce:	f0c0 80ab 	bcc.w	2b628 <tfp_format+0x1e0>
   2b4d2:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   2b4d6:	2b20      	cmp	r3, #32
   2b4d8:	d8be      	bhi.n	2b458 <tfp_format+0x10>
   2b4da:	a201      	add	r2, pc, #4	; (adr r2, 2b4e0 <tfp_format+0x98>)
   2b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b4e0:	0002b681 	.word	0x0002b681
   2b4e4:	0002b459 	.word	0x0002b459
   2b4e8:	0002b459 	.word	0x0002b459
   2b4ec:	0002b459 	.word	0x0002b459
   2b4f0:	0002b459 	.word	0x0002b459
   2b4f4:	0002b459 	.word	0x0002b459
   2b4f8:	0002b459 	.word	0x0002b459
   2b4fc:	0002b459 	.word	0x0002b459
   2b500:	0002b459 	.word	0x0002b459
   2b504:	0002b459 	.word	0x0002b459
   2b508:	0002b459 	.word	0x0002b459
   2b50c:	0002b717 	.word	0x0002b717
   2b510:	0002b661 	.word	0x0002b661
   2b514:	0002b459 	.word	0x0002b459
   2b518:	0002b459 	.word	0x0002b459
   2b51c:	0002b459 	.word	0x0002b459
   2b520:	0002b459 	.word	0x0002b459
   2b524:	0002b661 	.word	0x0002b661
   2b528:	0002b459 	.word	0x0002b459
   2b52c:	0002b459 	.word	0x0002b459
   2b530:	0002b459 	.word	0x0002b459
   2b534:	0002b459 	.word	0x0002b459
   2b538:	0002b459 	.word	0x0002b459
   2b53c:	0002b6b5 	.word	0x0002b6b5
   2b540:	0002b6d5 	.word	0x0002b6d5
   2b544:	0002b459 	.word	0x0002b459
   2b548:	0002b459 	.word	0x0002b459
   2b54c:	0002b729 	.word	0x0002b729
   2b550:	0002b459 	.word	0x0002b459
   2b554:	0002b641 	.word	0x0002b641
   2b558:	0002b459 	.word	0x0002b459
   2b55c:	0002b459 	.word	0x0002b459
   2b560:	0002b681 	.word	0x0002b681
                    if (!p.left) {
   2b564:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2b568:	f013 0f08 	tst.w	r3, #8
   2b56c:	d18f      	bne.n	2b48e <tfp_format+0x46>
                        p.lz = 1;
   2b56e:	2301      	movs	r3, #1
   2b570:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2b574:	e78b      	b.n	2b48e <tfp_format+0x46>
                    p.alt = 1;
   2b576:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2b57a:	f043 0302 	orr.w	r3, r3, #2
   2b57e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   2b582:	e784      	b.n	2b48e <tfp_format+0x46>
                    p.left = 1;
   2b584:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2b588:	f043 0308 	orr.w	r3, r3, #8
   2b58c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   2b590:	2300      	movs	r3, #0
   2b592:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2b596:	e77a      	b.n	2b48e <tfp_format+0x46>
                i = intarg(0, 1, &va);
   2b598:	466a      	mov	r2, sp
   2b59a:	2101      	movs	r1, #1
   2b59c:	2000      	movs	r0, #0
   2b59e:	f7ff ff21 	bl	2b3e4 <intarg>
                if (i > UCHAR_MAX) {
   2b5a2:	28ff      	cmp	r0, #255	; 0xff
   2b5a4:	dd07      	ble.n	2b5b6 <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   2b5a6:	23ff      	movs	r3, #255	; 0xff
   2b5a8:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   2b5ac:	9b01      	ldr	r3, [sp, #4]
   2b5ae:	1c5a      	adds	r2, r3, #1
   2b5b0:	9201      	str	r2, [sp, #4]
   2b5b2:	781c      	ldrb	r4, [r3, #0]
   2b5b4:	e77e      	b.n	2b4b4 <tfp_format+0x6c>
                } else if (i > 0) {
   2b5b6:	2800      	cmp	r0, #0
   2b5b8:	ddf8      	ble.n	2b5ac <tfp_format+0x164>
                    p.width = i;
   2b5ba:	f88d 0020 	strb.w	r0, [sp, #32]
   2b5be:	e7f5      	b.n	2b5ac <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   2b5c0:	ab08      	add	r3, sp, #32
   2b5c2:	220a      	movs	r2, #10
   2b5c4:	a901      	add	r1, sp, #4
   2b5c6:	4620      	mov	r0, r4
   2b5c8:	f7ff fe4c 	bl	2b264 <a2i>
   2b5cc:	4604      	mov	r4, r0
   2b5ce:	e771      	b.n	2b4b4 <tfp_format+0x6c>
                ch = *(fmt++);
   2b5d0:	9b01      	ldr	r3, [sp, #4]
   2b5d2:	1c5a      	adds	r2, r3, #1
   2b5d4:	9201      	str	r2, [sp, #4]
   2b5d6:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   2b5d8:	2c6c      	cmp	r4, #108	; 0x6c
   2b5da:	d001      	beq.n	2b5e0 <tfp_format+0x198>
                lng = 1;
   2b5dc:	2001      	movs	r0, #1
   2b5de:	e770      	b.n	2b4c2 <tfp_format+0x7a>
                    ch = *(fmt++);
   2b5e0:	1c9a      	adds	r2, r3, #2
   2b5e2:	9201      	str	r2, [sp, #4]
   2b5e4:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   2b5e6:	2002      	movs	r0, #2
   2b5e8:	e76b      	b.n	2b4c2 <tfp_format+0x7a>
                ch = *(fmt++);
   2b5ea:	9b01      	ldr	r3, [sp, #4]
   2b5ec:	1c5a      	adds	r2, r3, #1
   2b5ee:	9201      	str	r2, [sp, #4]
   2b5f0:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   2b5f2:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   2b5f6:	2001      	movs	r0, #1
   2b5f8:	f360 1105 	bfi	r1, r0, #4, #2
   2b5fc:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   2b600:	2c68      	cmp	r4, #104	; 0x68
   2b602:	d001      	beq.n	2b608 <tfp_format+0x1c0>
            lng = 0;
   2b604:	2000      	movs	r0, #0
   2b606:	e75c      	b.n	2b4c2 <tfp_format+0x7a>
                    ch = *(fmt++);
   2b608:	4402      	add	r2, r0
   2b60a:	9201      	str	r2, [sp, #4]
   2b60c:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   2b60e:	b2cb      	uxtb	r3, r1
   2b610:	2202      	movs	r2, #2
   2b612:	f362 1305 	bfi	r3, r2, #4, #2
   2b616:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   2b61a:	2000      	movs	r0, #0
   2b61c:	e751      	b.n	2b4c2 <tfp_format+0x7a>
                ch = *(fmt++);
   2b61e:	9b01      	ldr	r3, [sp, #4]
   2b620:	1c5a      	adds	r2, r3, #1
   2b622:	9201      	str	r2, [sp, #4]
   2b624:	781c      	ldrb	r4, [r3, #0]
   2b626:	e74f      	b.n	2b4c8 <tfp_format+0x80>
            switch (ch) {
   2b628:	2c00      	cmp	r4, #0
   2b62a:	f000 808a 	beq.w	2b742 <tfp_format+0x2fa>
   2b62e:	2c25      	cmp	r4, #37	; 0x25
   2b630:	f47f af12 	bne.w	2b458 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   2b634:	4621      	mov	r1, r4
   2b636:	4630      	mov	r0, r6
   2b638:	f7ff fe2f 	bl	2b29a <putf>
   2b63c:	4405      	add	r5, r0
                break;
   2b63e:	e70b      	b.n	2b458 <tfp_format+0x10>
                p.base = 10;
   2b640:	230a      	movs	r3, #10
   2b642:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2b646:	466a      	mov	r2, sp
   2b648:	2100      	movs	r1, #0
   2b64a:	f7ff fecb 	bl	2b3e4 <intarg>
   2b64e:	aa08      	add	r2, sp, #32
   2b650:	f7ff fd5e 	bl	2b110 <ui2a>
                written += putchw(putp, &p);
   2b654:	a908      	add	r1, sp, #32
   2b656:	4630      	mov	r0, r6
   2b658:	f7ff fe32 	bl	2b2c0 <putchw>
   2b65c:	4405      	add	r5, r0
                break;
   2b65e:	e6fb      	b.n	2b458 <tfp_format+0x10>
                p.base = 10;
   2b660:	230a      	movs	r3, #10
   2b662:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   2b666:	466a      	mov	r2, sp
   2b668:	2101      	movs	r1, #1
   2b66a:	f7ff febb 	bl	2b3e4 <intarg>
   2b66e:	aa08      	add	r2, sp, #32
   2b670:	f7ff fdcc 	bl	2b20c <i2a>
                written += putchw(putp, &p);
   2b674:	a908      	add	r1, sp, #32
   2b676:	4630      	mov	r0, r6
   2b678:	f7ff fe22 	bl	2b2c0 <putchw>
   2b67c:	4405      	add	r5, r0
                break;
   2b67e:	e6eb      	b.n	2b458 <tfp_format+0x10>
                p.base = 16;
   2b680:	2310      	movs	r3, #16
   2b682:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   2b686:	2c58      	cmp	r4, #88	; 0x58
   2b688:	bf14      	ite	ne
   2b68a:	2400      	movne	r4, #0
   2b68c:	2401      	moveq	r4, #1
   2b68e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2b692:	f364 0382 	bfi	r3, r4, #2, #1
   2b696:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   2b69a:	466a      	mov	r2, sp
   2b69c:	2100      	movs	r1, #0
   2b69e:	f7ff fea1 	bl	2b3e4 <intarg>
   2b6a2:	aa08      	add	r2, sp, #32
   2b6a4:	f7ff fd34 	bl	2b110 <ui2a>
                written += putchw(putp, &p);
   2b6a8:	a908      	add	r1, sp, #32
   2b6aa:	4630      	mov	r0, r6
   2b6ac:	f7ff fe08 	bl	2b2c0 <putchw>
   2b6b0:	4405      	add	r5, r0
                break;
   2b6b2:	e6d1      	b.n	2b458 <tfp_format+0x10>
                p.base = 8;
   2b6b4:	2308      	movs	r3, #8
   2b6b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2b6ba:	466a      	mov	r2, sp
   2b6bc:	2100      	movs	r1, #0
   2b6be:	f7ff fe91 	bl	2b3e4 <intarg>
   2b6c2:	aa08      	add	r2, sp, #32
   2b6c4:	f7ff fd24 	bl	2b110 <ui2a>
                written += putchw(putp, &p);
   2b6c8:	a908      	add	r1, sp, #32
   2b6ca:	4630      	mov	r0, r6
   2b6cc:	f7ff fdf8 	bl	2b2c0 <putchw>
   2b6d0:	4405      	add	r5, r0
                break;
   2b6d2:	e6c1      	b.n	2b458 <tfp_format+0x10>
                v = va_arg(va, void *);
   2b6d4:	9b00      	ldr	r3, [sp, #0]
   2b6d6:	1d1a      	adds	r2, r3, #4
   2b6d8:	9200      	str	r2, [sp, #0]
   2b6da:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   2b6dc:	2310      	movs	r3, #16
   2b6de:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   2b6e2:	aa08      	add	r2, sp, #32
   2b6e4:	2100      	movs	r1, #0
   2b6e6:	f7ff fd13 	bl	2b110 <ui2a>
                p.width = 2 * sizeof(void*);
   2b6ea:	2308      	movs	r3, #8
   2b6ec:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   2b6f0:	2301      	movs	r3, #1
   2b6f2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   2b6f6:	2130      	movs	r1, #48	; 0x30
   2b6f8:	4630      	mov	r0, r6
   2b6fa:	f7ff fdce 	bl	2b29a <putf>
   2b6fe:	4405      	add	r5, r0
                written += putf(putp, 'x');
   2b700:	2178      	movs	r1, #120	; 0x78
   2b702:	4630      	mov	r0, r6
   2b704:	f7ff fdc9 	bl	2b29a <putf>
   2b708:	4405      	add	r5, r0
                written += putchw(putp, &p);
   2b70a:	a908      	add	r1, sp, #32
   2b70c:	4630      	mov	r0, r6
   2b70e:	f7ff fdd7 	bl	2b2c0 <putchw>
   2b712:	4405      	add	r5, r0
                break;
   2b714:	e6a0      	b.n	2b458 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   2b716:	9b00      	ldr	r3, [sp, #0]
   2b718:	1d1a      	adds	r2, r3, #4
   2b71a:	9200      	str	r2, [sp, #0]
   2b71c:	7819      	ldrb	r1, [r3, #0]
   2b71e:	4630      	mov	r0, r6
   2b720:	f7ff fdbb 	bl	2b29a <putf>
   2b724:	4405      	add	r5, r0
                break;
   2b726:	e697      	b.n	2b458 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   2b728:	9b00      	ldr	r3, [sp, #0]
   2b72a:	1d1a      	adds	r2, r3, #4
   2b72c:	9200      	str	r2, [sp, #0]
   2b72e:	681b      	ldr	r3, [r3, #0]
   2b730:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   2b732:	a908      	add	r1, sp, #32
   2b734:	4630      	mov	r0, r6
   2b736:	f7ff fdc3 	bl	2b2c0 <putchw>
   2b73a:	4405      	add	r5, r0
                p.bf = bf;
   2b73c:	ab02      	add	r3, sp, #8
   2b73e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   2b740:	e68a      	b.n	2b458 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   2b742:	4628      	mov	r0, r5
   2b744:	b00a      	add	sp, #40	; 0x28
   2b746:	bd70      	pop	{r4, r5, r6, pc}

0002b748 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   2b748:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   2b74a:	f7ff fe7d 	bl	2b448 <tfp_format>
}
   2b74e:	bd08      	pop	{r3, pc}

0002b750 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   2b750:	b40e      	push	{r1, r2, r3}
   2b752:	b500      	push	{lr}
   2b754:	b082      	sub	sp, #8
   2b756:	aa03      	add	r2, sp, #12
   2b758:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2b75c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   2b75e:	f7ff fff3 	bl	2b748 <vfprintf>
    va_end(va);
    return rv;
}
   2b762:	b002      	add	sp, #8
   2b764:	f85d eb04 	ldr.w	lr, [sp], #4
   2b768:	b003      	add	sp, #12
   2b76a:	4770      	bx	lr

0002b76c <printf>:

int printf(const char *fmt, ...)
{
   2b76c:	b40f      	push	{r0, r1, r2, r3}
   2b76e:	b500      	push	{lr}
   2b770:	b083      	sub	sp, #12
   2b772:	aa04      	add	r2, sp, #16
   2b774:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2b778:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   2b77a:	4b04      	ldr	r3, [pc, #16]	; (2b78c <printf+0x20>)
   2b77c:	6818      	ldr	r0, [r3, #0]
   2b77e:	f7ff ffe3 	bl	2b748 <vfprintf>
    va_end(va);
    return rv;
}
   2b782:	b003      	add	sp, #12
   2b784:	f85d eb04 	ldr.w	lr, [sp], #4
   2b788:	b004      	add	sp, #16
   2b78a:	4770      	bx	lr
   2b78c:	0002ea50 	.word	0x0002ea50

0002b790 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   2b790:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b792:	b085      	sub	sp, #20
   2b794:	4605      	mov	r5, r0
   2b796:	460c      	mov	r4, r1
   2b798:	4616      	mov	r6, r2
   2b79a:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   2b79c:	460a      	mov	r2, r1
   2b79e:	4601      	mov	r1, r0
   2b7a0:	4668      	mov	r0, sp
   2b7a2:	f000 f843 	bl	2b82c <fmemopen_w>
    tfp_format(f, fmt, va);
   2b7a6:	463a      	mov	r2, r7
   2b7a8:	4631      	mov	r1, r6
   2b7aa:	f7ff fe4d 	bl	2b448 <tfp_format>
    if (size > 0) {
   2b7ae:	b12c      	cbz	r4, 2b7bc <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   2b7b0:	9b02      	ldr	r3, [sp, #8]
   2b7b2:	42a3      	cmp	r3, r4
   2b7b4:	d205      	bcs.n	2b7c2 <vsnprintf+0x32>
            *(state.buffer) = '\0';
   2b7b6:	9b01      	ldr	r3, [sp, #4]
   2b7b8:	2200      	movs	r2, #0
   2b7ba:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   2b7bc:	9802      	ldr	r0, [sp, #8]
   2b7be:	b005      	add	sp, #20
   2b7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   2b7c2:	3c01      	subs	r4, #1
   2b7c4:	2300      	movs	r3, #0
   2b7c6:	552b      	strb	r3, [r5, r4]
   2b7c8:	e7f8      	b.n	2b7bc <vsnprintf+0x2c>

0002b7ca <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   2b7ca:	b40c      	push	{r2, r3}
   2b7cc:	b500      	push	{lr}
   2b7ce:	b083      	sub	sp, #12
   2b7d0:	ab04      	add	r3, sp, #16
   2b7d2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   2b7d6:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   2b7d8:	f7ff ffda 	bl	2b790 <vsnprintf>
    va_end(va);
    return rv;
}
   2b7dc:	b003      	add	sp, #12
   2b7de:	f85d eb04 	ldr.w	lr, [sp], #4
   2b7e2:	b002      	add	sp, #8
   2b7e4:	4770      	bx	lr
	...

0002b7e8 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   2b7e8:	b508      	push	{r3, lr}
   2b7ea:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   2b7ec:	4601      	mov	r1, r0
   2b7ee:	4b02      	ldr	r3, [pc, #8]	; (2b7f8 <vprintf+0x10>)
   2b7f0:	6818      	ldr	r0, [r3, #0]
   2b7f2:	f7ff ffa9 	bl	2b748 <vfprintf>
}
   2b7f6:	bd08      	pop	{r3, pc}
   2b7f8:	0002ea50 	.word	0x0002ea50

0002b7fc <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   2b7fc:	b430      	push	{r4, r5}
   2b7fe:	4604      	mov	r4, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   2b800:	2000      	movs	r0, #0
    
    while (n--)
   2b802:	e000      	b.n	2b806 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   2b804:	462a      	mov	r2, r5
    while (n--)
   2b806:	1e55      	subs	r5, r2, #1
   2b808:	b16a      	cbz	r2, 2b826 <memfile_write+0x2a>
        f->bytes_written++;
   2b80a:	68a3      	ldr	r3, [r4, #8]
   2b80c:	3301      	adds	r3, #1
   2b80e:	60a3      	str	r3, [r4, #8]
        if (f->bytes_written <= f->size)
   2b810:	68e2      	ldr	r2, [r4, #12]
   2b812:	4293      	cmp	r3, r2
   2b814:	d8f6      	bhi.n	2b804 <memfile_write+0x8>
            *f->buffer++ = *bp++;
   2b816:	6863      	ldr	r3, [r4, #4]
   2b818:	1c5a      	adds	r2, r3, #1
   2b81a:	6062      	str	r2, [r4, #4]
   2b81c:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b820:	701a      	strb	r2, [r3, #0]
            i++;
   2b822:	3001      	adds	r0, #1
   2b824:	e7ee      	b.n	2b804 <memfile_write+0x8>
        }
    }
    
    return i;
}
   2b826:	bc30      	pop	{r4, r5}
   2b828:	4770      	bx	lr
	...

0002b82c <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   2b82c:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   2b82e:	4c04      	ldr	r4, [pc, #16]	; (2b840 <fmemopen_w+0x14>)
   2b830:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   2b832:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   2b834:	2100      	movs	r1, #0
   2b836:	6081      	str	r1, [r0, #8]
    storage->size = size;
   2b838:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   2b83a:	bc10      	pop	{r4}
   2b83c:	4770      	bx	lr
   2b83e:	bf00      	nop
   2b840:	0002ea54 	.word	0x0002ea54

0002b844 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   2b844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b848:	4605      	mov	r5, r0
   2b84a:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   2b84c:	e001      	b.n	2b852 <strntoumax+0xe>
		nptr++;
   2b84e:	3501      	adds	r5, #1
		n--;
   2b850:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   2b852:	b143      	cbz	r3, 2b866 <strntoumax+0x22>
   2b854:	7829      	ldrb	r1, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   2b856:	2920      	cmp	r1, #32
   2b858:	d0f9      	beq.n	2b84e <strntoumax+0xa>
   2b85a:	290a      	cmp	r1, #10
   2b85c:	d0f7      	beq.n	2b84e <strntoumax+0xa>
   2b85e:	2909      	cmp	r1, #9
   2b860:	d0f5      	beq.n	2b84e <strntoumax+0xa>
   2b862:	290d      	cmp	r1, #13
   2b864:	d0f3      	beq.n	2b84e <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   2b866:	b1a3      	cbz	r3, 2b892 <strntoumax+0x4e>
		char c = *nptr;
   2b868:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   2b86c:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   2b870:	d005      	beq.n	2b87e <strntoumax+0x3a>
   2b872:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   2b876:	d002      	beq.n	2b87e <strntoumax+0x3a>
	int minus = 0;
   2b878:	f04f 0e00 	mov.w	lr, #0
   2b87c:	e00b      	b.n	2b896 <strntoumax+0x52>
			minus = (c == '-');
   2b87e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   2b882:	bf14      	ite	ne
   2b884:	f04f 0e00 	movne.w	lr, #0
   2b888:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   2b88c:	3501      	adds	r5, #1
			n--;
   2b88e:	3b01      	subs	r3, #1
   2b890:	e001      	b.n	2b896 <strntoumax+0x52>
	int minus = 0;
   2b892:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   2b896:	b9ba      	cbnz	r2, 2b8c8 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   2b898:	2b01      	cmp	r3, #1
   2b89a:	d902      	bls.n	2b8a2 <strntoumax+0x5e>
   2b89c:	782a      	ldrb	r2, [r5, #0]
   2b89e:	2a30      	cmp	r2, #48	; 0x30
   2b8a0:	d005      	beq.n	2b8ae <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   2b8a2:	b32b      	cbz	r3, 2b8f0 <strntoumax+0xac>
   2b8a4:	782a      	ldrb	r2, [r5, #0]
   2b8a6:	2a30      	cmp	r2, #48	; 0x30
   2b8a8:	d00a      	beq.n	2b8c0 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   2b8aa:	220a      	movs	r2, #10
   2b8ac:	e00e      	b.n	2b8cc <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2b8ae:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   2b8b0:	2a78      	cmp	r2, #120	; 0x78
   2b8b2:	d001      	beq.n	2b8b8 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2b8b4:	2a58      	cmp	r2, #88	; 0x58
   2b8b6:	d1f4      	bne.n	2b8a2 <strntoumax+0x5e>
			n -= 2;
   2b8b8:	3b02      	subs	r3, #2
			nptr += 2;
   2b8ba:	3502      	adds	r5, #2
			base = 16;
   2b8bc:	2210      	movs	r2, #16
   2b8be:	e005      	b.n	2b8cc <strntoumax+0x88>
			n--;
   2b8c0:	3b01      	subs	r3, #1
			nptr++;
   2b8c2:	3501      	adds	r5, #1
			base = 8;
   2b8c4:	2208      	movs	r2, #8
   2b8c6:	e001      	b.n	2b8cc <strntoumax+0x88>
		}
	} else if (base == 16) {
   2b8c8:	2a10      	cmp	r2, #16
   2b8ca:	d004      	beq.n	2b8d6 <strntoumax+0x92>
			base = 16;
   2b8cc:	f04f 0800 	mov.w	r8, #0
   2b8d0:	f04f 0900 	mov.w	r9, #0
   2b8d4:	e026      	b.n	2b924 <strntoumax+0xe0>
		if (n >= 2 && nptr[0] == '0' &&
   2b8d6:	2b01      	cmp	r3, #1
   2b8d8:	d9f8      	bls.n	2b8cc <strntoumax+0x88>
   2b8da:	7829      	ldrb	r1, [r5, #0]
   2b8dc:	2930      	cmp	r1, #48	; 0x30
   2b8de:	d1f5      	bne.n	2b8cc <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2b8e0:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   2b8e2:	2978      	cmp	r1, #120	; 0x78
   2b8e4:	d001      	beq.n	2b8ea <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2b8e6:	2958      	cmp	r1, #88	; 0x58
   2b8e8:	d1f0      	bne.n	2b8cc <strntoumax+0x88>
			n -= 2;
   2b8ea:	3b02      	subs	r3, #2
			nptr += 2;
   2b8ec:	3502      	adds	r5, #2
   2b8ee:	e7ed      	b.n	2b8cc <strntoumax+0x88>
			base = 10;
   2b8f0:	220a      	movs	r2, #10
   2b8f2:	e7eb      	b.n	2b8cc <strntoumax+0x88>
		return ch - '0';
   2b8f4:	4634      	mov	r4, r6
   2b8f6:	e002      	b.n	2b8fe <strntoumax+0xba>
		return ch - 'A' + 10;
   2b8f8:	3c37      	subs	r4, #55	; 0x37
   2b8fa:	e000      	b.n	2b8fe <strntoumax+0xba>
		return ch - 'a' + 10;
   2b8fc:	3c57      	subs	r4, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   2b8fe:	2c00      	cmp	r4, #0
   2b900:	db1e      	blt.n	2b940 <strntoumax+0xfc>
   2b902:	42a2      	cmp	r2, r4
   2b904:	dd1c      	ble.n	2b940 <strntoumax+0xfc>
		v = v * base + d;
   2b906:	fb02 f109 	mul.w	r1, r2, r9
   2b90a:	17d7      	asrs	r7, r2, #31
   2b90c:	fb08 1607 	mla	r6, r8, r7, r1
   2b910:	fba2 0108 	umull	r0, r1, r2, r8
   2b914:	4431      	add	r1, r6
   2b916:	1900      	adds	r0, r0, r4
   2b918:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2b91c:	4680      	mov	r8, r0
   2b91e:	4689      	mov	r9, r1
		n--;
   2b920:	3b01      	subs	r3, #1
		nptr++;
   2b922:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   2b924:	b163      	cbz	r3, 2b940 <strntoumax+0xfc>
   2b926:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   2b928:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2b92c:	2e09      	cmp	r6, #9
   2b92e:	d9e1      	bls.n	2b8f4 <strntoumax+0xb0>
	} else if (ch >= 'A' && ch <= 'Z') {
   2b930:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2b934:	2e19      	cmp	r6, #25
   2b936:	d9df      	bls.n	2b8f8 <strntoumax+0xb4>
	} else if (ch >= 'a' && ch <= 'z') {
   2b938:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2b93c:	2e19      	cmp	r6, #25
   2b93e:	d9dd      	bls.n	2b8fc <strntoumax+0xb8>
	}

	if (endptr)
   2b940:	f1bc 0f00 	cmp.w	ip, #0
   2b944:	d001      	beq.n	2b94a <strntoumax+0x106>
		*endptr = (char *)nptr;
   2b946:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   2b94a:	f1be 0f00 	cmp.w	lr, #0
   2b94e:	d003      	beq.n	2b958 <strntoumax+0x114>
   2b950:	f1d8 0800 	rsbs	r8, r8, #0
   2b954:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   2b958:	4640      	mov	r0, r8
   2b95a:	4649      	mov	r1, r9
   2b95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002b960 <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   2b960:	7803      	ldrb	r3, [r0, #0]
   2b962:	b193      	cbz	r3, 2b98a <strpbrk+0x2a>
{
   2b964:	b410      	push	{r4}
  const char *c = s2;
   2b966:	460a      	mov	r2, r1
   2b968:	e001      	b.n	2b96e <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   2b96a:	b953      	cbnz	r3, 2b982 <strpbrk+0x22>
	break;
      s1++;
   2b96c:	3001      	adds	r0, #1
  while (*s1)
   2b96e:	7804      	ldrb	r4, [r0, #0]
   2b970:	b13c      	cbz	r4, 2b982 <strpbrk+0x22>
      for (c = s2; *c; c++)
   2b972:	460a      	mov	r2, r1
   2b974:	7813      	ldrb	r3, [r2, #0]
   2b976:	2b00      	cmp	r3, #0
   2b978:	d0f7      	beq.n	2b96a <strpbrk+0xa>
	  if (*s1 == *c)
   2b97a:	42a3      	cmp	r3, r4
   2b97c:	d0f5      	beq.n	2b96a <strpbrk+0xa>
      for (c = s2; *c; c++)
   2b97e:	3201      	adds	r2, #1
   2b980:	e7f8      	b.n	2b974 <strpbrk+0x14>
    }

  if (*c == '\0')
   2b982:	7813      	ldrb	r3, [r2, #0]
   2b984:	b11b      	cbz	r3, 2b98e <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   2b986:	bc10      	pop	{r4}
   2b988:	4770      	bx	lr
    return (char *) NULL;
   2b98a:	2000      	movs	r0, #0
}
   2b98c:	4770      	bx	lr
    s1 = NULL;
   2b98e:	2000      	movs	r0, #0
   2b990:	e7f9      	b.n	2b986 <strpbrk+0x26>

0002b992 <log_fcb_registered>:
    /* Initialize watermark to designated unknown value*/
    fl->fl_watermark_off = 0xffffffff;
#endif
#endif
    return 0;
}
   2b992:	2000      	movs	r0, #0
   2b994:	4770      	bx	lr

0002b996 <log_fcb_flush>:
{
   2b996:	b508      	push	{r3, lr}
    return fcb_clear(fcb);
   2b998:	6880      	ldr	r0, [r0, #8]
   2b99a:	f7fd ff74 	bl	29886 <fcb_clear>
}
   2b99e:	bd08      	pop	{r3, pc}

0002b9a0 <fcb_get_fa_hdr>:
{
   2b9a0:	b570      	push	{r4, r5, r6, lr}
   2b9a2:	460d      	mov	r5, r1
   2b9a4:	4614      	mov	r4, r2
   2b9a6:	461e      	mov	r6, r3
    rc = fcb_getnext(fcb, fcb_entry);
   2b9a8:	4611      	mov	r1, r2
   2b9aa:	f7fe f94b 	bl	29c44 <fcb_getnext>
    if (rc == 0) {
   2b9ae:	b100      	cbz	r0, 2b9b2 <fcb_get_fa_hdr+0x12>
}
   2b9b0:	bd70      	pop	{r4, r5, r6, pc}
        return log_read_hdr(log, fcb_entry, hdr);
   2b9b2:	4632      	mov	r2, r6
   2b9b4:	4621      	mov	r1, r4
   2b9b6:	4628      	mov	r0, r5
   2b9b8:	f7e5 fbd0 	bl	1115c <log_read_hdr>
   2b9bc:	e7f8      	b.n	2b9b0 <fcb_get_fa_hdr+0x10>

0002b9be <fcb_walk_back_find_start>:
{
   2b9be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b9c2:	b08a      	sub	sp, #40	; 0x28
   2b9c4:	4606      	mov	r6, r0
   2b9c6:	4688      	mov	r8, r1
   2b9c8:	4617      	mov	r7, r2
   2b9ca:	4699      	mov	r9, r3
    struct fcb_entry iter_entry = {0};
   2b9cc:	2300      	movs	r3, #0
   2b9ce:	9302      	str	r3, [sp, #8]
   2b9d0:	9303      	str	r3, [sp, #12]
   2b9d2:	9304      	str	r3, [sp, #16]
    iter_entry.fe_area = fcb->f_oldest;
   2b9d4:	6983      	ldr	r3, [r0, #24]
   2b9d6:	9301      	str	r3, [sp, #4]
    rc = fcb_get_fa_hdr(fcb, log, &iter_entry, &hdr);
   2b9d8:	ab05      	add	r3, sp, #20
   2b9da:	aa01      	add	r2, sp, #4
   2b9dc:	f7ff ffe0 	bl	2b9a0 <fcb_get_fa_hdr>
    if (rc != 0) {
   2b9e0:	4682      	mov	sl, r0
   2b9e2:	bb58      	cbnz	r0, 2ba3c <fcb_walk_back_find_start+0x7e>
    if (hdr.ue_index >= log_offset->lo_index) {
   2b9e4:	68bb      	ldr	r3, [r7, #8]
   2b9e6:	9a07      	ldr	r2, [sp, #28]
   2b9e8:	429a      	cmp	r2, r3
   2b9ea:	d21d      	bcs.n	2ba28 <fcb_walk_back_find_start+0x6a>
    fap = fcb->f_active.fe_area;
   2b9ec:	69f4      	ldr	r4, [r6, #28]
    for (hdr.ue_index = log_offset->lo_index; hdr.ue_index >= log_offset->lo_index;) {
   2b9ee:	9307      	str	r3, [sp, #28]
   2b9f0:	e005      	b.n	2b9fe <fcb_walk_back_find_start+0x40>
            fap = &(fcb->f_sectors[fcb->f_sector_cnt-1]);
   2b9f2:	7974      	ldrb	r4, [r6, #5]
   2b9f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2b9f8:	00a4      	lsls	r4, r4, #2
   2b9fa:	3c0c      	subs	r4, #12
   2b9fc:	441c      	add	r4, r3
    for (hdr.ue_index = log_offset->lo_index; hdr.ue_index >= log_offset->lo_index;) {
   2b9fe:	68bb      	ldr	r3, [r7, #8]
   2ba00:	9a07      	ldr	r2, [sp, #28]
   2ba02:	429a      	cmp	r2, r3
   2ba04:	d310      	bcc.n	2ba28 <fcb_walk_back_find_start+0x6a>
        memset(&iter_entry, 0, sizeof(iter_entry));
   2ba06:	2500      	movs	r5, #0
   2ba08:	9502      	str	r5, [sp, #8]
   2ba0a:	9503      	str	r5, [sp, #12]
   2ba0c:	9504      	str	r5, [sp, #16]
        iter_entry.fe_area = fap;
   2ba0e:	9401      	str	r4, [sp, #4]
        rc = fcb_get_fa_hdr(fcb, log, &iter_entry, &hdr);
   2ba10:	ab05      	add	r3, sp, #20
   2ba12:	aa01      	add	r2, sp, #4
   2ba14:	4641      	mov	r1, r8
   2ba16:	4630      	mov	r0, r6
   2ba18:	f7ff ffc2 	bl	2b9a0 <fcb_get_fa_hdr>
        if (rc != 0) {
   2ba1c:	b990      	cbnz	r0, 2ba44 <fcb_walk_back_find_start+0x86>
        if (fap == &fcb->f_sectors[0]) {
   2ba1e:	68b3      	ldr	r3, [r6, #8]
   2ba20:	42a3      	cmp	r3, r4
   2ba22:	d0e6      	beq.n	2b9f2 <fcb_walk_back_find_start+0x34>
            fap--;
   2ba24:	3c0c      	subs	r4, #12
   2ba26:	e7ea      	b.n	2b9fe <fcb_walk_back_find_start+0x40>
    memcpy(fcb_entry, &iter_entry, sizeof(struct fcb_entry));
   2ba28:	ac01      	add	r4, sp, #4
   2ba2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2ba2c:	f8c9 0000 	str.w	r0, [r9]
   2ba30:	f8c9 1004 	str.w	r1, [r9, #4]
   2ba34:	f8c9 2008 	str.w	r2, [r9, #8]
   2ba38:	f8c9 300c 	str.w	r3, [r9, #12]
}
   2ba3c:	4650      	mov	r0, sl
   2ba3e:	b00a      	add	sp, #40	; 0x28
   2ba40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return rc;
   2ba44:	4682      	mov	sl, r0
   2ba46:	e7f9      	b.n	2ba3c <fcb_walk_back_find_start+0x7e>

0002ba48 <log_fcb_find_gte>:
{
   2ba48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ba4c:	b087      	sub	sp, #28
   2ba4e:	4606      	mov	r6, r0
   2ba50:	460f      	mov	r7, r1
   2ba52:	4614      	mov	r4, r2
    fcb_log = log->l_arg;
   2ba54:	f8d0 9008 	ldr.w	r9, [r0, #8]
    memset(out_entry, 0, sizeof *out_entry);
   2ba58:	2300      	movs	r3, #0
   2ba5a:	6013      	str	r3, [r2, #0]
   2ba5c:	6053      	str	r3, [r2, #4]
   2ba5e:	6093      	str	r3, [r2, #8]
   2ba60:	60d3      	str	r3, [r2, #12]
    rc = fcb_getnext(fcb, out_entry);
   2ba62:	4611      	mov	r1, r2
   2ba64:	4648      	mov	r0, r9
   2ba66:	f7fe f8ed 	bl	29c44 <fcb_getnext>
    if (rc == FCB_ERR_NOVAR) {
   2ba6a:	f110 0f03 	cmn.w	r0, #3
   2ba6e:	d03d      	beq.n	2baec <log_fcb_find_gte+0xa4>
   2ba70:	46c8      	mov	r8, r9
   2ba72:	4605      	mov	r5, r0
    } else if (rc != 0) {
   2ba74:	2800      	cmp	r0, #0
   2ba76:	d13c      	bne.n	2baf2 <log_fcb_find_gte+0xaa>
    if (log_offset->lo_ts < 0) {
   2ba78:	e9d7 2300 	ldrd	r2, r3, [r7]
   2ba7c:	2a00      	cmp	r2, #0
   2ba7e:	f173 0300 	sbcs.w	r3, r3, #0
   2ba82:	db20      	blt.n	2bac6 <log_fcb_find_gte+0x7e>
    rc = log_read_hdr(log, &fcb->f_active, &hdr);
   2ba84:	aa01      	add	r2, sp, #4
   2ba86:	f109 011c 	add.w	r1, r9, #28
   2ba8a:	4630      	mov	r0, r6
   2ba8c:	f7e5 fb66 	bl	1115c <log_read_hdr>
    if (rc != 0) {
   2ba90:	4605      	mov	r5, r0
   2ba92:	b9e8      	cbnz	r0, 2bad0 <log_fcb_find_gte+0x88>
    if (log_offset->lo_index > hdr.ue_index) {
   2ba94:	68bb      	ldr	r3, [r7, #8]
   2ba96:	9a03      	ldr	r2, [sp, #12]
   2ba98:	4293      	cmp	r3, r2
   2ba9a:	d82d      	bhi.n	2baf8 <log_fcb_find_gte+0xb0>
    if ((bmark_found == false) && (log_offset->lo_index != 0)) {
   2ba9c:	b9e3      	cbnz	r3, 2bad8 <log_fcb_find_gte+0x90>
        rc = log_read_hdr(log, out_entry, &hdr);
   2ba9e:	aa01      	add	r2, sp, #4
   2baa0:	4621      	mov	r1, r4
   2baa2:	4630      	mov	r0, r6
   2baa4:	f7e5 fb5a 	bl	1115c <log_read_hdr>
        if (rc != 0) {
   2baa8:	4605      	mov	r5, r0
   2baaa:	b988      	cbnz	r0, 2bad0 <log_fcb_find_gte+0x88>
        if (hdr.ue_index >= log_offset->lo_index) {
   2baac:	68bb      	ldr	r3, [r7, #8]
   2baae:	9a03      	ldr	r2, [sp, #12]
   2bab0:	429a      	cmp	r2, r3
   2bab2:	d20d      	bcs.n	2bad0 <log_fcb_find_gte+0x88>
    } while (fcb_getnext(fcb, out_entry) == 0);
   2bab4:	4621      	mov	r1, r4
   2bab6:	4640      	mov	r0, r8
   2bab8:	f7fe f8c4 	bl	29c44 <fcb_getnext>
   2babc:	2800      	cmp	r0, #0
   2babe:	d0ee      	beq.n	2ba9e <log_fcb_find_gte+0x56>
    return SYS_ENOENT;
   2bac0:	f06f 0503 	mvn.w	r5, #3
   2bac4:	e004      	b.n	2bad0 <log_fcb_find_gte+0x88>
        *out_entry = fcb->f_active;
   2bac6:	f109 001c 	add.w	r0, r9, #28
   2baca:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2bacc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   2bad0:	4628      	mov	r0, r5
   2bad2:	b007      	add	sp, #28
   2bad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = fcb_walk_back_find_start(fcb, log, log_offset, out_entry);
   2bad8:	4623      	mov	r3, r4
   2bada:	463a      	mov	r2, r7
   2badc:	4631      	mov	r1, r6
   2bade:	4648      	mov	r0, r9
   2bae0:	f7ff ff6d 	bl	2b9be <fcb_walk_back_find_start>
        if (rc != 0) {
   2bae4:	4605      	mov	r5, r0
   2bae6:	2800      	cmp	r0, #0
   2bae8:	d0d9      	beq.n	2ba9e <log_fcb_find_gte+0x56>
   2baea:	e7f1      	b.n	2bad0 <log_fcb_find_gte+0x88>
        return SYS_ENOENT;
   2baec:	f06f 0503 	mvn.w	r5, #3
   2baf0:	e7ee      	b.n	2bad0 <log_fcb_find_gte+0x88>
        return SYS_EUNKNOWN;
   2baf2:	f06f 050c 	mvn.w	r5, #12
   2baf6:	e7eb      	b.n	2bad0 <log_fcb_find_gte+0x88>
        return SYS_ENOENT;
   2baf8:	f06f 0503 	mvn.w	r5, #3
   2bafc:	e7e8      	b.n	2bad0 <log_fcb_find_gte+0x88>

0002bafe <log_fcb_walk_impl>:
{
   2bafe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bb02:	b085      	sub	sp, #20
   2bb04:	4604      	mov	r4, r0
   2bb06:	460f      	mov	r7, r1
   2bb08:	4615      	mov	r5, r2
   2bb0a:	461e      	mov	r6, r3
    fcb_log = log->l_arg;
   2bb0c:	f8d0 9008 	ldr.w	r9, [r0, #8]
    rc = log_fcb_find_gte(log, log_offset, &loc);
   2bb10:	466a      	mov	r2, sp
   2bb12:	4629      	mov	r1, r5
   2bb14:	f7ff ff98 	bl	2ba48 <log_fcb_find_gte>
    switch (rc) {
   2bb18:	f110 0f04 	cmn.w	r0, #4
   2bb1c:	d01d      	beq.n	2bb5a <log_fcb_walk_impl+0x5c>
   2bb1e:	4680      	mov	r8, r0
   2bb20:	b9e8      	cbnz	r0, 2bb5e <log_fcb_walk_impl+0x60>
    fap = loc.fe_area;
   2bb22:	f8dd b000 	ldr.w	fp, [sp]
   2bb26:	e00c      	b.n	2bb42 <log_fcb_walk_impl+0x44>
        rc = walk_func(log, log_offset, &loc, loc.fe_data_len);
   2bb28:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2bb2c:	466a      	mov	r2, sp
   2bb2e:	4629      	mov	r1, r5
   2bb30:	4620      	mov	r0, r4
   2bb32:	47b8      	blx	r7
        if (rc != 0) {
   2bb34:	4682      	mov	sl, r0
   2bb36:	b950      	cbnz	r0, 2bb4e <log_fcb_walk_impl+0x50>
    } while (fcb_getnext(fcb, &loc) == 0);
   2bb38:	4669      	mov	r1, sp
   2bb3a:	4648      	mov	r0, r9
   2bb3c:	f7fe f882 	bl	29c44 <fcb_getnext>
   2bb40:	b948      	cbnz	r0, 2bb56 <log_fcb_walk_impl+0x58>
        if (area) {
   2bb42:	2e00      	cmp	r6, #0
   2bb44:	d0f0      	beq.n	2bb28 <log_fcb_walk_impl+0x2a>
            if (fap != loc.fe_area) {
   2bb46:	9b00      	ldr	r3, [sp, #0]
   2bb48:	455b      	cmp	r3, fp
   2bb4a:	d0ed      	beq.n	2bb28 <log_fcb_walk_impl+0x2a>
   2bb4c:	e007      	b.n	2bb5e <log_fcb_walk_impl+0x60>
            if (rc < 0) {
   2bb4e:	2800      	cmp	r0, #0
   2bb50:	da05      	bge.n	2bb5e <log_fcb_walk_impl+0x60>
                return rc;
   2bb52:	4680      	mov	r8, r0
   2bb54:	e003      	b.n	2bb5e <log_fcb_walk_impl+0x60>
    return 0;
   2bb56:	46d0      	mov	r8, sl
   2bb58:	e001      	b.n	2bb5e <log_fcb_walk_impl+0x60>
    switch (rc) {
   2bb5a:	f04f 0800 	mov.w	r8, #0
}
   2bb5e:	4640      	mov	r0, r8
   2bb60:	b005      	add	sp, #20
   2bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bb66 <log_fcb_walk_area>:
{
   2bb66:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, true);
   2bb68:	2301      	movs	r3, #1
   2bb6a:	f7ff ffc8 	bl	2bafe <log_fcb_walk_impl>
}
   2bb6e:	bd08      	pop	{r3, pc}

0002bb70 <log_fcb_walk>:
{
   2bb70:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, false);
   2bb72:	2300      	movs	r3, #0
   2bb74:	f7ff ffc3 	bl	2bafe <log_fcb_walk_impl>
}
   2bb78:	bd08      	pop	{r3, pc}

0002bb7a <log_fcb_write_mbuf>:
{
   2bb7a:	b538      	push	{r3, r4, r5, lr}
   2bb7c:	4605      	mov	r5, r0
   2bb7e:	460c      	mov	r4, r1
    while (om) {
   2bb80:	b164      	cbz	r4, 2bb9c <log_fcb_write_mbuf+0x22>
        rc = flash_area_write(loc->fe_area, loc->fe_data_off, om->om_data,
   2bb82:	88e3      	ldrh	r3, [r4, #6]
   2bb84:	6822      	ldr	r2, [r4, #0]
   2bb86:	68a9      	ldr	r1, [r5, #8]
   2bb88:	6828      	ldr	r0, [r5, #0]
   2bb8a:	f7e4 ff54 	bl	10a36 <flash_area_write>
        if (rc != 0) {
   2bb8e:	b938      	cbnz	r0, 2bba0 <log_fcb_write_mbuf+0x26>
        loc->fe_data_off += om->om_len;
   2bb90:	88e2      	ldrh	r2, [r4, #6]
   2bb92:	68ab      	ldr	r3, [r5, #8]
   2bb94:	4413      	add	r3, r2
   2bb96:	60ab      	str	r3, [r5, #8]
        om = SLIST_NEXT(om, om_next);
   2bb98:	68e4      	ldr	r4, [r4, #12]
   2bb9a:	e7f1      	b.n	2bb80 <log_fcb_write_mbuf+0x6>
    return 0;
   2bb9c:	2000      	movs	r0, #0
}
   2bb9e:	bd38      	pop	{r3, r4, r5, pc}
            return SYS_EIO;
   2bba0:	f06f 0004 	mvn.w	r0, #4
   2bba4:	e7fb      	b.n	2bb9e <log_fcb_write_mbuf+0x24>

0002bba6 <log_fcb_hdr_body_bytes>:
{
   2bba6:	b508      	push	{r3, lr}
   2bba8:	4603      	mov	r3, r0
    assert((align & (align - 1)) == 0);
   2bbaa:	3801      	subs	r0, #1
   2bbac:	4018      	ands	r0, r3
   2bbae:	d105      	bne.n	2bbbc <log_fcb_hdr_body_bytes+0x16>
    mod = hdr_len & (align - 1);
   2bbb0:	1e5a      	subs	r2, r3, #1
   2bbb2:	b252      	sxtb	r2, r2
    if (mod == 0) {
   2bbb4:	400a      	ands	r2, r1
   2bbb6:	d000      	beq.n	2bbba <log_fcb_hdr_body_bytes+0x14>
    return align - mod;
   2bbb8:	1a98      	subs	r0, r3, r2
}
   2bbba:	bd08      	pop	{r3, pc}
    assert((align & (align - 1)) == 0);
   2bbbc:	f7e0 faee 	bl	c19c <hal_debugger_connected>
   2bbc0:	b100      	cbz	r0, 2bbc4 <log_fcb_hdr_body_bytes+0x1e>
   2bbc2:	be01      	bkpt	0x0001
   2bbc4:	2300      	movs	r3, #0
   2bbc6:	461a      	mov	r2, r3
   2bbc8:	4619      	mov	r1, r3
   2bbca:	4618      	mov	r0, r3
   2bbcc:	f7e0 ffea 	bl	cba4 <__assert_func>

0002bbd0 <log_fcb_read>:
{
   2bbd0:	b538      	push	{r3, r4, r5, lr}
   2bbd2:	460d      	mov	r5, r1
   2bbd4:	4619      	mov	r1, r3
   2bbd6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    if (offset + len > loc->fe_data_len) {
   2bbda:	4423      	add	r3, r4
   2bbdc:	89a8      	ldrh	r0, [r5, #12]
   2bbde:	4283      	cmp	r3, r0
   2bbe0:	dd01      	ble.n	2bbe6 <log_fcb_read+0x16>
        len = loc->fe_data_len - offset;
   2bbe2:	1a40      	subs	r0, r0, r1
   2bbe4:	b284      	uxth	r4, r0
    rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, buf, len);
   2bbe6:	68a8      	ldr	r0, [r5, #8]
   2bbe8:	4623      	mov	r3, r4
   2bbea:	4401      	add	r1, r0
   2bbec:	6828      	ldr	r0, [r5, #0]
   2bbee:	f7e4 ff0f 	bl	10a10 <flash_area_read>
    if (rc == 0) {
   2bbf2:	b908      	cbnz	r0, 2bbf8 <log_fcb_read+0x28>
        return len;
   2bbf4:	4620      	mov	r0, r4
}
   2bbf6:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   2bbf8:	2000      	movs	r0, #0
   2bbfa:	e7fc      	b.n	2bbf6 <log_fcb_read+0x26>

0002bbfc <log_fcb_copy_entry>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy_entry(struct log *log, struct fcb_entry *entry,
                   struct fcb *dst_fcb)
{
   2bbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bbfe:	b0cd      	sub	sp, #308	; 0x134
   2bc00:	4604      	mov	r4, r0
   2bc02:	460e      	mov	r6, r1
   2bc04:	4615      	mov	r5, r2
    uint16_t hdr_len;
    int dlen;
    int rc;
    struct fcb *fcb_tmp;

    rc = log_fcb_read(log, entry, &ueh, 0, LOG_BASE_ENTRY_HDR_SIZE);
   2bc06:	230f      	movs	r3, #15
   2bc08:	9300      	str	r3, [sp, #0]
   2bc0a:	2300      	movs	r3, #0
   2bc0c:	aa47      	add	r2, sp, #284	; 0x11c
   2bc0e:	f7ff ffdf 	bl	2bbd0 <log_fcb_read>

    if (rc != LOG_BASE_ENTRY_HDR_SIZE) {
   2bc12:	280f      	cmp	r0, #15
   2bc14:	d001      	beq.n	2bc1a <log_fcb_copy_entry+0x1e>
        goto err;
    }

err:
    return (rc);
}
   2bc16:	b04d      	add	sp, #308	; 0x134
   2bc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr_len = log_hdr_len(&ueh);
   2bc1a:	a847      	add	r0, sp, #284	; 0x11c
   2bc1c:	f7e5 f9c0 	bl	10fa0 <log_hdr_len>
    dlen = min(entry->fe_data_len, MYNEWT_VAL(LOG_FCB_COPY_MAX_ENTRY_LEN) +
   2bc20:	f100 03ff 	add.w	r3, r0, #255	; 0xff
   2bc24:	89b7      	ldrh	r7, [r6, #12]
   2bc26:	42bb      	cmp	r3, r7
   2bc28:	da01      	bge.n	2bc2e <log_fcb_copy_entry+0x32>
   2bc2a:	f500 7780 	add.w	r7, r0, #256	; 0x100
    rc = log_fcb_read(log, entry, data, 0, dlen);
   2bc2e:	b2bb      	uxth	r3, r7
   2bc30:	9300      	str	r3, [sp, #0]
   2bc32:	2300      	movs	r3, #0
   2bc34:	aa02      	add	r2, sp, #8
   2bc36:	4631      	mov	r1, r6
   2bc38:	4620      	mov	r0, r4
   2bc3a:	f7ff ffc9 	bl	2bbd0 <log_fcb_read>
    if (rc < 0) {
   2bc3e:	2800      	cmp	r0, #0
   2bc40:	dbe9      	blt.n	2bc16 <log_fcb_copy_entry+0x1a>
    fcb_tmp = &((struct fcb_log *)log->l_arg)->fl_fcb;
   2bc42:	68a6      	ldr	r6, [r4, #8]
    log->l_arg = dst_fcb;
   2bc44:	60a5      	str	r5, [r4, #8]
    rc = log_fcb_append(log, data, dlen);
   2bc46:	463a      	mov	r2, r7
   2bc48:	a902      	add	r1, sp, #8
   2bc4a:	4620      	mov	r0, r4
   2bc4c:	f000 f97f 	bl	2bf4e <log_fcb_append>
    log->l_arg = fcb_tmp;
   2bc50:	60a6      	str	r6, [r4, #8]
    return (rc);
   2bc52:	e7e0      	b.n	2bc16 <log_fcb_copy_entry+0x1a>

0002bc54 <log_fcb_copy>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy(struct log *log, struct fcb *src_fcb, struct fcb *dst_fcb,
             uint32_t offset)
{
   2bc54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bc58:	b085      	sub	sp, #20
   2bc5a:	4681      	mov	r9, r0
   2bc5c:	460d      	mov	r5, r1
   2bc5e:	4690      	mov	r8, r2
   2bc60:	461e      	mov	r6, r3
    struct fcb_entry entry;
    int rc;

    rc = 0;
    memset(&entry, 0, sizeof(entry));
   2bc62:	2700      	movs	r7, #0
   2bc64:	9700      	str	r7, [sp, #0]
   2bc66:	9701      	str	r7, [sp, #4]
   2bc68:	9702      	str	r7, [sp, #8]
   2bc6a:	9703      	str	r7, [sp, #12]
    while (!fcb_getnext(src_fcb, &entry)) {
   2bc6c:	4669      	mov	r1, sp
   2bc6e:	4628      	mov	r0, r5
   2bc70:	f7fd ffe8 	bl	29c44 <fcb_getnext>
   2bc74:	b950      	cbnz	r0, 2bc8c <log_fcb_copy+0x38>
        if (entry.fe_elem_off < offset) {
   2bc76:	9c01      	ldr	r4, [sp, #4]
   2bc78:	42b4      	cmp	r4, r6
   2bc7a:	d3f7      	bcc.n	2bc6c <log_fcb_copy+0x18>
            continue;
        }
        rc = log_fcb_copy_entry(log, &entry, dst_fcb);
   2bc7c:	4642      	mov	r2, r8
   2bc7e:	4669      	mov	r1, sp
   2bc80:	4648      	mov	r0, r9
   2bc82:	f7ff ffbb 	bl	2bbfc <log_fcb_copy_entry>
        if (rc) {
   2bc86:	4607      	mov	r7, r0
   2bc88:	2800      	cmp	r0, #0
   2bc8a:	d0ef      	beq.n	2bc6c <log_fcb_copy+0x18>
            break;
        }
    }

    return (rc);
}
   2bc8c:	4638      	mov	r0, r7
   2bc8e:	b005      	add	sp, #20
   2bc90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002bc94 <log_fcb_rtr_erase>:
    struct fcb_entry entry;
    int rc;
    struct flash_area sector;

    rc = 0;
    if (!log) {
   2bc94:	2800      	cmp	r0, #0
   2bc96:	d045      	beq.n	2bd24 <log_fcb_rtr_erase+0x90>
{
   2bc98:	b530      	push	{r4, r5, lr}
   2bc9a:	b095      	sub	sp, #84	; 0x54
   2bc9c:	4604      	mov	r4, r0
        rc = -1;
        goto err;
    }

    fcb_log = log->l_arg;
   2bc9e:	6885      	ldr	r5, [r0, #8]
    fcb = &fcb_log->fl_fcb;

    memset(&fcb_scratch, 0, sizeof(fcb_scratch));
   2bca0:	2230      	movs	r2, #48	; 0x30
   2bca2:	2100      	movs	r1, #0
   2bca4:	a808      	add	r0, sp, #32
   2bca6:	f7e2 feac 	bl	ea02 <memset>

    if (flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &ptr)) {
   2bcaa:	a907      	add	r1, sp, #28
   2bcac:	2003      	movs	r0, #3
   2bcae:	f7e4 fe57 	bl	10960 <flash_area_open>
   2bcb2:	b110      	cbz	r0, 2bcba <log_fcb_rtr_erase+0x26>
    rc = 0;
   2bcb4:	2000      	movs	r0, #0
    /* Copy back from scratch */
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);

err:
    return (rc);
}
   2bcb6:	b015      	add	sp, #84	; 0x54
   2bcb8:	bd30      	pop	{r4, r5, pc}
    sector = *ptr;
   2bcba:	9a07      	ldr	r2, [sp, #28]
   2bcbc:	466b      	mov	r3, sp
   2bcbe:	ca07      	ldmia	r2, {r0, r1, r2}
   2bcc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    fcb_scratch.f_sectors = &sector;
   2bcc4:	930a      	str	r3, [sp, #40]	; 0x28
    fcb_scratch.f_sector_cnt = 1;
   2bcc6:	2201      	movs	r2, #1
   2bcc8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    fcb_scratch.f_magic = 0x7EADBADF;
   2bccc:	4a17      	ldr	r2, [pc, #92]	; (2bd2c <log_fcb_rtr_erase+0x98>)
   2bcce:	9208      	str	r2, [sp, #32]
    fcb_scratch.f_version = g_log_info.li_version;
   2bcd0:	4a17      	ldr	r2, [pc, #92]	; (2bd30 <log_fcb_rtr_erase+0x9c>)
   2bcd2:	7912      	ldrb	r2, [r2, #4]
   2bcd4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    flash_area_erase(&sector, 0, sector.fa_size);
   2bcd8:	9a02      	ldr	r2, [sp, #8]
   2bcda:	2100      	movs	r1, #0
   2bcdc:	4618      	mov	r0, r3
   2bcde:	f7e4 febd 	bl	10a5c <flash_area_erase>
    rc = fcb_init(&fcb_scratch);
   2bce2:	a808      	add	r0, sp, #32
   2bce4:	f7fd fd10 	bl	29708 <fcb_init>
    if (rc) {
   2bce8:	2800      	cmp	r0, #0
   2bcea:	d1e4      	bne.n	2bcb6 <log_fcb_rtr_erase+0x22>
    rc = fcb_offset_last_n(fcb, fcb_log->fl_entries, &entry);
   2bcec:	aa03      	add	r2, sp, #12
   2bcee:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   2bcf2:	4628      	mov	r0, r5
   2bcf4:	f7fd fd9e 	bl	29834 <fcb_offset_last_n>
    if (rc) {
   2bcf8:	2800      	cmp	r0, #0
   2bcfa:	d1dc      	bne.n	2bcb6 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, fcb, &fcb_scratch, entry.fe_elem_off);
   2bcfc:	9b04      	ldr	r3, [sp, #16]
   2bcfe:	aa08      	add	r2, sp, #32
   2bd00:	4629      	mov	r1, r5
   2bd02:	4620      	mov	r0, r4
   2bd04:	f7ff ffa6 	bl	2bc54 <log_fcb_copy>
    if (rc) {
   2bd08:	2800      	cmp	r0, #0
   2bd0a:	d1d4      	bne.n	2bcb6 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_flush(log);
   2bd0c:	4620      	mov	r0, r4
   2bd0e:	f7ff fe42 	bl	2b996 <log_fcb_flush>
   2bd12:	4603      	mov	r3, r0
    if (rc) {
   2bd14:	2800      	cmp	r0, #0
   2bd16:	d1ce      	bne.n	2bcb6 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);
   2bd18:	462a      	mov	r2, r5
   2bd1a:	a908      	add	r1, sp, #32
   2bd1c:	4620      	mov	r0, r4
   2bd1e:	f7ff ff99 	bl	2bc54 <log_fcb_copy>
   2bd22:	e7c8      	b.n	2bcb6 <log_fcb_rtr_erase+0x22>
        rc = -1;
   2bd24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2bd28:	4770      	bx	lr
   2bd2a:	bf00      	nop
   2bd2c:	7eadbadf 	.word	0x7eadbadf
   2bd30:	20001bd0 	.word	0x20001bd0

0002bd34 <log_fcb_start_append>:
{
   2bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd38:	4604      	mov	r4, r0
   2bd3a:	460f      	mov	r7, r1
   2bd3c:	4616      	mov	r6, r2
    fcb_log = (struct fcb_log *)log->l_arg;
   2bd3e:	f8d0 8008 	ldr.w	r8, [r0, #8]
    fcb = &fcb_log->fl_fcb;
   2bd42:	4645      	mov	r5, r8
   2bd44:	e00d      	b.n	2bd62 <log_fcb_start_append+0x2e>
            rc = log_fcb_rtr_erase(log);
   2bd46:	4620      	mov	r0, r4
   2bd48:	f7ff ffa4 	bl	2bc94 <log_fcb_rtr_erase>
            if (rc) {
   2bd4c:	4603      	mov	r3, r0
   2bd4e:	b140      	cbz	r0, 2bd62 <log_fcb_start_append+0x2e>
}
   2bd50:	4618      	mov	r0, r3
   2bd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = fcb_rotate(fcb);
   2bd56:	4628      	mov	r0, r5
   2bd58:	f7fd ff8e 	bl	29c78 <fcb_rotate>
        if (rc) {
   2bd5c:	4603      	mov	r3, r0
   2bd5e:	2800      	cmp	r0, #0
   2bd60:	d1f6      	bne.n	2bd50 <log_fcb_start_append+0x1c>
        rc = fcb_append(fcb, len, loc);
   2bd62:	4632      	mov	r2, r6
   2bd64:	b2b9      	uxth	r1, r7
   2bd66:	4628      	mov	r0, r5
   2bd68:	f7fd fdce 	bl	29908 <fcb_append>
        if (rc == 0) {
   2bd6c:	4603      	mov	r3, r0
   2bd6e:	2800      	cmp	r0, #0
   2bd70:	d0ee      	beq.n	2bd50 <log_fcb_start_append+0x1c>
        if (rc != FCB_ERR_NOSPACE) {
   2bd72:	f110 0f04 	cmn.w	r0, #4
   2bd76:	d1eb      	bne.n	2bd50 <log_fcb_start_append+0x1c>
        if (fcb_log->fl_entries) {
   2bd78:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
   2bd7c:	2b00      	cmp	r3, #0
   2bd7e:	d1e2      	bne.n	2bd46 <log_fcb_start_append+0x12>
        if (log->l_rotate_notify_cb != NULL) {
   2bd80:	6963      	ldr	r3, [r4, #20]
   2bd82:	2b00      	cmp	r3, #0
   2bd84:	d0e7      	beq.n	2bd56 <log_fcb_start_append+0x22>
            fcb_append_to_scratch(fcb);
   2bd86:	4628      	mov	r0, r5
   2bd88:	f7fd fda5 	bl	298d6 <fcb_append_to_scratch>
            log->l_rotate_notify_cb(log);
   2bd8c:	6963      	ldr	r3, [r4, #20]
   2bd8e:	4620      	mov	r0, r4
   2bd90:	4798      	blx	r3
   2bd92:	e7e0      	b.n	2bd56 <log_fcb_start_append+0x22>

0002bd94 <log_fcb_append_mbuf_body>:
{
   2bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bd98:	b084      	sub	sp, #16
    fcb_log = (struct fcb_log *)log->l_arg;
   2bd9a:	f8d0 8008 	ldr.w	r8, [r0, #8]
    if (fcb->f_align != 1) {
   2bd9e:	f898 302e 	ldrb.w	r3, [r8, #46]	; 0x2e
   2bda2:	2b01      	cmp	r3, #1
   2bda4:	d13d      	bne.n	2be22 <log_fcb_append_mbuf_body+0x8e>
   2bda6:	4604      	mov	r4, r0
   2bda8:	460d      	mov	r5, r1
   2bdaa:	4616      	mov	r6, r2
    len = log_hdr_len(hdr) + os_mbuf_len(om);
   2bdac:	4608      	mov	r0, r1
   2bdae:	f7e5 f8f7 	bl	10fa0 <log_hdr_len>
   2bdb2:	4607      	mov	r7, r0
   2bdb4:	4630      	mov	r0, r6
   2bdb6:	f7e1 fb6d 	bl	d494 <os_mbuf_len>
    rc = log_fcb_start_append(log, len, &loc);
   2bdba:	466a      	mov	r2, sp
   2bdbc:	1839      	adds	r1, r7, r0
   2bdbe:	4620      	mov	r0, r4
   2bdc0:	f7ff ffb8 	bl	2bd34 <log_fcb_start_append>
    if (rc != 0) {
   2bdc4:	4603      	mov	r3, r0
   2bdc6:	b118      	cbz	r0, 2bdd0 <log_fcb_append_mbuf_body+0x3c>
}
   2bdc8:	4618      	mov	r0, r3
   2bdca:	b004      	add	sp, #16
   2bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr,
   2bdd0:	230f      	movs	r3, #15
   2bdd2:	462a      	mov	r2, r5
   2bdd4:	9902      	ldr	r1, [sp, #8]
   2bdd6:	9800      	ldr	r0, [sp, #0]
   2bdd8:	f7e4 fe2d 	bl	10a36 <flash_area_write>
    if (rc != 0) {
   2bddc:	4603      	mov	r3, r0
   2bdde:	2800      	cmp	r0, #0
   2bde0:	d1f2      	bne.n	2bdc8 <log_fcb_append_mbuf_body+0x34>
    loc.fe_data_off += LOG_BASE_ENTRY_HDR_SIZE;
   2bde2:	9902      	ldr	r1, [sp, #8]
   2bde4:	310f      	adds	r1, #15
   2bde6:	9102      	str	r1, [sp, #8]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2bde8:	7bab      	ldrb	r3, [r5, #14]
   2bdea:	f013 0f10 	tst.w	r3, #16
   2bdee:	d00b      	beq.n	2be08 <log_fcb_append_mbuf_body+0x74>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr->ue_imghash,
   2bdf0:	2304      	movs	r3, #4
   2bdf2:	f105 020f 	add.w	r2, r5, #15
   2bdf6:	9800      	ldr	r0, [sp, #0]
   2bdf8:	f7e4 fe1d 	bl	10a36 <flash_area_write>
        if (rc != 0) {
   2bdfc:	4603      	mov	r3, r0
   2bdfe:	2800      	cmp	r0, #0
   2be00:	d1e2      	bne.n	2bdc8 <log_fcb_append_mbuf_body+0x34>
        loc.fe_data_off += LOG_IMG_HASHLEN;
   2be02:	9b02      	ldr	r3, [sp, #8]
   2be04:	3304      	adds	r3, #4
   2be06:	9302      	str	r3, [sp, #8]
    rc = log_fcb_write_mbuf(&loc, om);
   2be08:	4631      	mov	r1, r6
   2be0a:	4668      	mov	r0, sp
   2be0c:	f7ff feb5 	bl	2bb7a <log_fcb_write_mbuf>
    if (rc != 0) {
   2be10:	4603      	mov	r3, r0
   2be12:	2800      	cmp	r0, #0
   2be14:	d1d8      	bne.n	2bdc8 <log_fcb_append_mbuf_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   2be16:	4669      	mov	r1, sp
   2be18:	4640      	mov	r0, r8
   2be1a:	f7fd fdf2 	bl	29a02 <fcb_append_finish>
   2be1e:	4603      	mov	r3, r0
    if (rc != 0) {
   2be20:	e7d2      	b.n	2bdc8 <log_fcb_append_mbuf_body+0x34>
        return SYS_ENOTSUP;
   2be22:	f06f 030b 	mvn.w	r3, #11
   2be26:	e7cf      	b.n	2bdc8 <log_fcb_append_mbuf_body+0x34>

0002be28 <log_fcb_append_mbuf>:
{
   2be28:	b570      	push	{r4, r5, r6, lr}
   2be2a:	b086      	sub	sp, #24
   2be2c:	4606      	mov	r6, r0
   2be2e:	460c      	mov	r4, r1
    mlen = os_mbuf_len(om);
   2be30:	4608      	mov	r0, r1
   2be32:	f7e1 fb2f 	bl	d494 <os_mbuf_len>
    if (mlen < LOG_BASE_ENTRY_HDR_SIZE) {
   2be36:	280e      	cmp	r0, #14
   2be38:	d928      	bls.n	2be8c <log_fcb_append_mbuf+0x64>
    om = os_mbuf_pullup(om, LOG_BASE_ENTRY_HDR_SIZE);
   2be3a:	210f      	movs	r1, #15
   2be3c:	4620      	mov	r0, r4
   2be3e:	f7e1 fd74 	bl	d92a <os_mbuf_pullup>
   2be42:	4604      	mov	r4, r0
    hdr_len = log_hdr_len((struct log_entry_hdr *)om->om_data);
   2be44:	6800      	ldr	r0, [r0, #0]
   2be46:	f7e5 f8ab 	bl	10fa0 <log_hdr_len>
   2be4a:	4605      	mov	r5, r0
    om = os_mbuf_pullup(om, hdr_len);
   2be4c:	4601      	mov	r1, r0
   2be4e:	4620      	mov	r0, r4
   2be50:	f7e1 fd6b 	bl	d92a <os_mbuf_pullup>
   2be54:	4604      	mov	r4, r0
    memcpy(&hdr, om->om_data, hdr_len);
   2be56:	462a      	mov	r2, r5
   2be58:	6801      	ldr	r1, [r0, #0]
   2be5a:	a801      	add	r0, sp, #4
   2be5c:	f7e2 fdac 	bl	e9b8 <memcpy>
    os_mbuf_adj(om, hdr_len);
   2be60:	4629      	mov	r1, r5
   2be62:	4620      	mov	r0, r4
   2be64:	f7e1 fbdd 	bl	d622 <os_mbuf_adj>
    rc = log_fcb_append_mbuf_body(log, &hdr, om);
   2be68:	4622      	mov	r2, r4
   2be6a:	a901      	add	r1, sp, #4
   2be6c:	4630      	mov	r0, r6
   2be6e:	f7ff ff91 	bl	2bd94 <log_fcb_append_mbuf_body>
   2be72:	4606      	mov	r6, r0
    os_mbuf_prepend(om, hdr_len);
   2be74:	4629      	mov	r1, r5
   2be76:	4620      	mov	r0, r4
   2be78:	f7e1 fc61 	bl	d73e <os_mbuf_prepend>
    memcpy(om->om_data, &hdr, hdr_len);
   2be7c:	462a      	mov	r2, r5
   2be7e:	a901      	add	r1, sp, #4
   2be80:	6820      	ldr	r0, [r4, #0]
   2be82:	f7e2 fd99 	bl	e9b8 <memcpy>
}
   2be86:	4630      	mov	r0, r6
   2be88:	b006      	add	sp, #24
   2be8a:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_ENOMEM;
   2be8c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2be90:	e7f9      	b.n	2be86 <log_fcb_append_mbuf+0x5e>

0002be92 <log_fcb_append_body>:
{
   2be92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be96:	b08d      	sub	sp, #52	; 0x34
   2be98:	461d      	mov	r5, r3
    fcb_log = (struct fcb_log *)log->l_arg;
   2be9a:	f8d0 9008 	ldr.w	r9, [r0, #8]
    if (fcb->f_align > LOG_FCB_MAX_ALIGN) {
   2be9e:	f899 302e 	ldrb.w	r3, [r9, #46]	; 0x2e
   2bea2:	2b08      	cmp	r3, #8
   2bea4:	d850      	bhi.n	2bf48 <log_fcb_append_body+0xb6>
   2bea6:	4606      	mov	r6, r0
   2bea8:	460c      	mov	r4, r1
   2beaa:	4690      	mov	r8, r2
    hdr_len = log_hdr_len(hdr);
   2beac:	4608      	mov	r0, r1
   2beae:	f7e5 f877 	bl	10fa0 <log_hdr_len>
   2beb2:	4607      	mov	r7, r0
    rc = log_fcb_start_append(log, hdr_len + body_len, &loc);
   2beb4:	eb00 0a05 	add.w	sl, r0, r5
   2beb8:	aa01      	add	r2, sp, #4
   2beba:	4651      	mov	r1, sl
   2bebc:	4630      	mov	r0, r6
   2bebe:	f7ff ff39 	bl	2bd34 <log_fcb_start_append>
    if (rc != 0) {
   2bec2:	4603      	mov	r3, r0
   2bec4:	b118      	cbz	r0, 2bece <log_fcb_append_body+0x3c>
}
   2bec6:	4618      	mov	r0, r3
   2bec8:	b00d      	add	sp, #52	; 0x34
   2beca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdr_alignment = log_fcb_hdr_body_bytes(fcb->f_align, hdr_len);
   2bece:	b2f9      	uxtb	r1, r7
   2bed0:	f899 002e 	ldrb.w	r0, [r9, #46]	; 0x2e
   2bed4:	f7ff fe67 	bl	2bba6 <log_fcb_hdr_body_bytes>
   2bed8:	4683      	mov	fp, r0
    if (hdr_alignment > body_len) {
   2beda:	4285      	cmp	r5, r0
   2bedc:	db01      	blt.n	2bee2 <log_fcb_append_body+0x50>
        chunk_sz = hdr_len + hdr_alignment;
   2bede:	eb07 0a00 	add.w	sl, r7, r0
    memcpy(buf, hdr, LOG_BASE_ENTRY_HDR_SIZE);
   2bee2:	ae05      	add	r6, sp, #20
   2bee4:	6820      	ldr	r0, [r4, #0]
   2bee6:	6861      	ldr	r1, [r4, #4]
   2bee8:	68a2      	ldr	r2, [r4, #8]
   2beea:	c607      	stmia	r6!, {r0, r1, r2}
   2beec:	89a2      	ldrh	r2, [r4, #12]
   2beee:	7ba3      	ldrb	r3, [r4, #14]
   2bef0:	8032      	strh	r2, [r6, #0]
   2bef2:	70b3      	strb	r3, [r6, #2]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2bef4:	f013 0f10 	tst.w	r3, #16
   2bef8:	d003      	beq.n	2bf02 <log_fcb_append_body+0x70>
        memcpy(buf + LOG_BASE_ENTRY_HDR_SIZE, hdr->ue_imghash, LOG_IMG_HASHLEN);
   2befa:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2befe:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    memcpy(buf + hdr_len, u8p, hdr_alignment);
   2bf02:	465a      	mov	r2, fp
   2bf04:	4641      	mov	r1, r8
   2bf06:	ab05      	add	r3, sp, #20
   2bf08:	19d8      	adds	r0, r3, r7
   2bf0a:	f7e2 fd55 	bl	e9b8 <memcpy>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, chunk_sz);
   2bf0e:	4653      	mov	r3, sl
   2bf10:	aa05      	add	r2, sp, #20
   2bf12:	9903      	ldr	r1, [sp, #12]
   2bf14:	9801      	ldr	r0, [sp, #4]
   2bf16:	f7e4 fd8e 	bl	10a36 <flash_area_write>
    if (rc != 0) {
   2bf1a:	4603      	mov	r3, r0
   2bf1c:	2800      	cmp	r0, #0
   2bf1e:	d1d2      	bne.n	2bec6 <log_fcb_append_body+0x34>
    u8p += hdr_alignment;
   2bf20:	eb08 020b 	add.w	r2, r8, fp
    body_len -= hdr_alignment;
   2bf24:	eba5 030b 	sub.w	r3, r5, fp
    if (body_len > 0) {
   2bf28:	2b00      	cmp	r3, #0
   2bf2a:	dd07      	ble.n	2bf3c <log_fcb_append_body+0xaa>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off + chunk_sz, u8p,
   2bf2c:	9903      	ldr	r1, [sp, #12]
   2bf2e:	4451      	add	r1, sl
   2bf30:	9801      	ldr	r0, [sp, #4]
   2bf32:	f7e4 fd80 	bl	10a36 <flash_area_write>
        if (rc != 0) {
   2bf36:	4603      	mov	r3, r0
   2bf38:	2800      	cmp	r0, #0
   2bf3a:	d1c4      	bne.n	2bec6 <log_fcb_append_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   2bf3c:	a901      	add	r1, sp, #4
   2bf3e:	4648      	mov	r0, r9
   2bf40:	f7fd fd5f 	bl	29a02 <fcb_append_finish>
   2bf44:	4603      	mov	r3, r0
    if (rc != 0) {
   2bf46:	e7be      	b.n	2bec6 <log_fcb_append_body+0x34>
        return SYS_ENOTSUP;
   2bf48:	f06f 030b 	mvn.w	r3, #11
   2bf4c:	e7bb      	b.n	2bec6 <log_fcb_append_body+0x34>

0002bf4e <log_fcb_append>:
{
   2bf4e:	b570      	push	{r4, r5, r6, lr}
   2bf50:	4605      	mov	r5, r0
   2bf52:	460c      	mov	r4, r1
   2bf54:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   2bf56:	4608      	mov	r0, r1
   2bf58:	f7e5 f822 	bl	10fa0 <log_hdr_len>
    return log_fcb_append_body(log, buf, (uint8_t *)buf + hdr_len,
   2bf5c:	1a33      	subs	r3, r6, r0
   2bf5e:	1822      	adds	r2, r4, r0
   2bf60:	4621      	mov	r1, r4
   2bf62:	4628      	mov	r0, r5
   2bf64:	f7ff ff95 	bl	2be92 <log_fcb_append_body>
}
   2bf68:	bd70      	pop	{r4, r5, r6, pc}

0002bf6a <log_fcb_read_mbuf>:
{
   2bf6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bf6e:	b0a1      	sub	sp, #132	; 0x84
   2bf70:	460f      	mov	r7, r1
   2bf72:	4690      	mov	r8, r2
   2bf74:	461e      	mov	r6, r3
   2bf76:	f8bd 90a0 	ldrh.w	r9, [sp, #160]	; 0xa0
    if (offset + len > loc->fe_data_len) {
   2bf7a:	eb03 0209 	add.w	r2, r3, r9
   2bf7e:	898b      	ldrh	r3, [r1, #12]
   2bf80:	429a      	cmp	r2, r3
   2bf82:	dd03      	ble.n	2bf8c <log_fcb_read_mbuf+0x22>
        len = loc->fe_data_len - offset;
   2bf84:	eba3 0906 	sub.w	r9, r3, r6
   2bf88:	fa1f f989 	uxth.w	r9, r9
    rem_len = len;
   2bf8c:	464d      	mov	r5, r9
    while (rem_len > 0) {
   2bf8e:	e003      	b.n	2bf98 <log_fcb_read_mbuf+0x2e>
        rem_len -= read_len;
   2bf90:	1b2d      	subs	r5, r5, r4
   2bf92:	b2ad      	uxth	r5, r5
        offset += read_len;
   2bf94:	4434      	add	r4, r6
   2bf96:	b2a6      	uxth	r6, r4
    while (rem_len > 0) {
   2bf98:	b19d      	cbz	r5, 2bfc2 <log_fcb_read_mbuf+0x58>
        read_len = min(rem_len, sizeof(data));
   2bf9a:	462c      	mov	r4, r5
   2bf9c:	2d80      	cmp	r5, #128	; 0x80
   2bf9e:	bf28      	it	cs
   2bfa0:	2480      	movcs	r4, #128	; 0x80
   2bfa2:	b2a4      	uxth	r4, r4
        rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, data,
   2bfa4:	68b9      	ldr	r1, [r7, #8]
   2bfa6:	4623      	mov	r3, r4
   2bfa8:	466a      	mov	r2, sp
   2bfaa:	4431      	add	r1, r6
   2bfac:	6838      	ldr	r0, [r7, #0]
   2bfae:	f7e4 fd2f 	bl	10a10 <flash_area_read>
        if (rc) {
   2bfb2:	b930      	cbnz	r0, 2bfc2 <log_fcb_read_mbuf+0x58>
        rc = os_mbuf_append(om, data, read_len);
   2bfb4:	4622      	mov	r2, r4
   2bfb6:	4669      	mov	r1, sp
   2bfb8:	4640      	mov	r0, r8
   2bfba:	f7e1 fa74 	bl	d4a6 <os_mbuf_append>
        if (rc) {
   2bfbe:	2800      	cmp	r0, #0
   2bfc0:	d0e6      	beq.n	2bf90 <log_fcb_read_mbuf+0x26>
}
   2bfc2:	eba9 0005 	sub.w	r0, r9, r5
   2bfc6:	b021      	add	sp, #132	; 0x84
   2bfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002bfcc <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   2bfcc:	20ff      	movs	r0, #255	; 0xff
   2bfce:	4770      	bx	lr

0002bfd0 <crc8_calc>:

uint8_t
crc8_calc(uint8_t val, void *buf, int cnt)
{
   2bfd0:	b430      	push	{r4, r5}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   2bfd2:	2400      	movs	r4, #0
   2bfd4:	4294      	cmp	r4, r2
   2bfd6:	da0f      	bge.n	2bff8 <crc8_calc+0x28>
		val ^= p[i];
   2bfd8:	5d0b      	ldrb	r3, [r1, r4]
   2bfda:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   2bfdc:	0918      	lsrs	r0, r3, #4
   2bfde:	4d07      	ldr	r5, [pc, #28]	; (2bffc <crc8_calc+0x2c>)
   2bfe0:	5628      	ldrsb	r0, [r5, r0]
   2bfe2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2bfe6:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   2bfe8:	f3c0 1003 	ubfx	r0, r0, #4, #4
   2bfec:	5628      	ldrsb	r0, [r5, r0]
   2bfee:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2bff2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   2bff4:	3401      	adds	r4, #1
   2bff6:	e7ed      	b.n	2bfd4 <crc8_calc+0x4>
	}
	return val;
}
   2bff8:	bc30      	pop	{r4, r5}
   2bffa:	4770      	bx	lr
   2bffc:	0002ea88 	.word	0x0002ea88

0002c000 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   2c000:	6843      	ldr	r3, [r0, #4]
   2c002:	4413      	add	r3, r2
   2c004:	6043      	str	r3, [r0, #4]
    return CborNoError;
}
   2c006:	2000      	movs	r0, #0
   2c008:	4770      	bx	lr
	...

0002c00c <log_mgmt_logs_list>:
/**
 * Command handler: log list
 */
static int
log_mgmt_logs_list(struct mgmt_ctxt *ctxt)
{
   2c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c00e:	b087      	sub	sp, #28
   2c010:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2c012:	2202      	movs	r2, #2
   2c014:	4921      	ldr	r1, [pc, #132]	; (2c09c <log_mgmt_logs_list+0x90>)
   2c016:	f7fc fafd 	bl	28614 <cbor_encode_text_string>
   2c01a:	4606      	mov	r6, r0
    int log_idx;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   2c01c:	2200      	movs	r2, #0
   2c01e:	2300      	movs	r3, #0
   2c020:	4638      	mov	r0, r7
   2c022:	f7fc fa82 	bl	2852a <cbor_encode_int>
   2c026:	4306      	orrs	r6, r0
   2c028:	2208      	movs	r2, #8
   2c02a:	491d      	ldr	r1, [pc, #116]	; (2c0a0 <log_mgmt_logs_list+0x94>)
   2c02c:	4638      	mov	r0, r7
   2c02e:	f7fc faf1 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "log_list");
   2c032:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &log_list,
   2c034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c038:	4669      	mov	r1, sp
   2c03a:	4638      	mov	r0, r7
   2c03c:	f7fc faf1 	bl	28622 <cbor_encoder_create_array>
   2c040:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    for (log_idx = 0; ; log_idx++) {
   2c042:	2500      	movs	r5, #0
   2c044:	e011      	b.n	2c06a <log_mgmt_logs_list+0x5e>
        rc = log_mgmt_impl_get_log(log_idx, &log);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &log_list);
   2c046:	4669      	mov	r1, sp
   2c048:	4638      	mov	r0, r7
   2c04a:	f7fc fb04 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   2c04e:	4620      	mov	r0, r4
   2c050:	b007      	add	sp, #28
   2c052:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err |= cbor_encode_text_stringz(&log_list, log.name);
   2c054:	9c04      	ldr	r4, [sp, #16]
   2c056:	4620      	mov	r0, r4
   2c058:	f7e2 fcfb 	bl	ea52 <strlen>
   2c05c:	4602      	mov	r2, r0
   2c05e:	4621      	mov	r1, r4
   2c060:	4668      	mov	r0, sp
   2c062:	f7fc fad7 	bl	28614 <cbor_encode_text_string>
   2c066:	4306      	orrs	r6, r0
    for (log_idx = 0; ; log_idx++) {
   2c068:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   2c06a:	a904      	add	r1, sp, #16
   2c06c:	4628      	mov	r0, r5
   2c06e:	f7e7 fc8c 	bl	1398a <log_mgmt_impl_get_log>
   2c072:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2c074:	2805      	cmp	r0, #5
   2c076:	d005      	beq.n	2c084 <log_mgmt_logs_list+0x78>
        if (rc != 0) {
   2c078:	2800      	cmp	r0, #0
   2c07a:	d1e4      	bne.n	2c046 <log_mgmt_logs_list+0x3a>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   2c07c:	9b05      	ldr	r3, [sp, #20]
   2c07e:	2b00      	cmp	r3, #0
   2c080:	d0f2      	beq.n	2c068 <log_mgmt_logs_list+0x5c>
   2c082:	e7e7      	b.n	2c054 <log_mgmt_logs_list+0x48>
    err |= cbor_encoder_close_container(&ctxt->encoder, &log_list);
   2c084:	4669      	mov	r1, sp
   2c086:	4638      	mov	r0, r7
   2c088:	f7fc fae5 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c08c:	ea56 0300 	orrs.w	r3, r6, r0
   2c090:	d101      	bne.n	2c096 <log_mgmt_logs_list+0x8a>
    return 0;
   2c092:	2400      	movs	r4, #0
   2c094:	e7db      	b.n	2c04e <log_mgmt_logs_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   2c096:	2402      	movs	r4, #2
   2c098:	e7d9      	b.n	2c04e <log_mgmt_logs_list+0x42>
   2c09a:	bf00      	nop
   2c09c:	0002d868 	.word	0x0002d868
   2c0a0:	0002ea98 	.word	0x0002ea98

0002c0a4 <log_mgmt_level_list>:
/**
 * Command handler: log level_list
 */
static int
log_mgmt_level_list(struct mgmt_ctxt *ctxt)
{
   2c0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c0a6:	b087      	sub	sp, #28
   2c0a8:	4607      	mov	r7, r0
   2c0aa:	2202      	movs	r2, #2
   2c0ac:	4923      	ldr	r1, [pc, #140]	; (2c13c <log_mgmt_level_list+0x98>)
   2c0ae:	f7fc fab1 	bl	28614 <cbor_encode_text_string>
   2c0b2:	4606      	mov	r6, r0
    int level;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   2c0b4:	2200      	movs	r2, #0
   2c0b6:	2300      	movs	r3, #0
   2c0b8:	4638      	mov	r0, r7
   2c0ba:	f7fc fa36 	bl	2852a <cbor_encode_int>
   2c0be:	4306      	orrs	r6, r0
   2c0c0:	2209      	movs	r2, #9
   2c0c2:	491f      	ldr	r1, [pc, #124]	; (2c140 <log_mgmt_level_list+0x9c>)
   2c0c4:	4638      	mov	r0, r7
   2c0c6:	f7fc faa5 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "level_map");
   2c0ca:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &level_map,
   2c0cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c0d0:	a901      	add	r1, sp, #4
   2c0d2:	4638      	mov	r0, r7
   2c0d4:	f7fc faaa 	bl	2862c <cbor_encoder_create_map>
   2c0d8:	4306      	orrs	r6, r0
                                   CborIndefiniteLength);

    for (level = 0; ; level++) {
   2c0da:	2500      	movs	r5, #0
   2c0dc:	e016      	b.n	2c10c <log_mgmt_level_list+0x68>
        rc = log_mgmt_impl_get_level(level, &level_name);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &level_map);
   2c0de:	a901      	add	r1, sp, #4
   2c0e0:	4638      	mov	r0, r7
   2c0e2:	f7fc fab8 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   2c0e6:	4620      	mov	r0, r4
   2c0e8:	b007      	add	sp, #28
   2c0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c0ec:	4620      	mov	r0, r4
   2c0ee:	f7e2 fcb0 	bl	ea52 <strlen>
   2c0f2:	4602      	mov	r2, r0
   2c0f4:	4621      	mov	r1, r4
   2c0f6:	a801      	add	r0, sp, #4
   2c0f8:	f7fc fa8c 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&level_map, level_name);
   2c0fc:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&level_map, level);
   2c0fe:	462a      	mov	r2, r5
   2c100:	17eb      	asrs	r3, r5, #31
   2c102:	a801      	add	r0, sp, #4
   2c104:	f7fc f9d9 	bl	284ba <cbor_encode_uint>
   2c108:	4306      	orrs	r6, r0
    for (level = 0; ; level++) {
   2c10a:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_level(level, &level_name);
   2c10c:	a905      	add	r1, sp, #20
   2c10e:	4628      	mov	r0, r5
   2c110:	f7e7 fc5c 	bl	139cc <log_mgmt_impl_get_level>
   2c114:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2c116:	2805      	cmp	r0, #5
   2c118:	d005      	beq.n	2c126 <log_mgmt_level_list+0x82>
        if (rc != 0) {
   2c11a:	2800      	cmp	r0, #0
   2c11c:	d1df      	bne.n	2c0de <log_mgmt_level_list+0x3a>
        if (level_name != NULL) {
   2c11e:	9c05      	ldr	r4, [sp, #20]
   2c120:	2c00      	cmp	r4, #0
   2c122:	d1e3      	bne.n	2c0ec <log_mgmt_level_list+0x48>
   2c124:	e7f1      	b.n	2c10a <log_mgmt_level_list+0x66>
    err |= cbor_encoder_close_container(&ctxt->encoder, &level_map);
   2c126:	a901      	add	r1, sp, #4
   2c128:	4638      	mov	r0, r7
   2c12a:	f7fc fa94 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c12e:	ea56 0300 	orrs.w	r3, r6, r0
   2c132:	d101      	bne.n	2c138 <log_mgmt_level_list+0x94>
    return 0;
   2c134:	2400      	movs	r4, #0
   2c136:	e7d6      	b.n	2c0e6 <log_mgmt_level_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   2c138:	2402      	movs	r4, #2
   2c13a:	e7d4      	b.n	2c0e6 <log_mgmt_level_list+0x42>
   2c13c:	0002d868 	.word	0x0002d868
   2c140:	0002eaa4 	.word	0x0002eaa4

0002c144 <log_mgmt_module_list>:
{
   2c144:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c146:	b087      	sub	sp, #28
   2c148:	4607      	mov	r7, r0
   2c14a:	2202      	movs	r2, #2
   2c14c:	4923      	ldr	r1, [pc, #140]	; (2c1dc <log_mgmt_module_list+0x98>)
   2c14e:	f7fc fa61 	bl	28614 <cbor_encode_text_string>
   2c152:	4606      	mov	r6, r0
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   2c154:	2200      	movs	r2, #0
   2c156:	2300      	movs	r3, #0
   2c158:	4638      	mov	r0, r7
   2c15a:	f7fc f9e6 	bl	2852a <cbor_encode_int>
   2c15e:	4306      	orrs	r6, r0
   2c160:	220a      	movs	r2, #10
   2c162:	491f      	ldr	r1, [pc, #124]	; (2c1e0 <log_mgmt_module_list+0x9c>)
   2c164:	4638      	mov	r0, r7
   2c166:	f7fc fa55 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "module_map");
   2c16a:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &modules,
   2c16c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c170:	a901      	add	r1, sp, #4
   2c172:	4638      	mov	r0, r7
   2c174:	f7fc fa5a 	bl	2862c <cbor_encoder_create_map>
   2c178:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   2c17a:	2500      	movs	r5, #0
   2c17c:	e016      	b.n	2c1ac <log_mgmt_module_list+0x68>
            cbor_encoder_close_container(&ctxt->encoder, &modules);
   2c17e:	a901      	add	r1, sp, #4
   2c180:	4638      	mov	r0, r7
   2c182:	f7fc fa68 	bl	28656 <cbor_encoder_close_container>
}
   2c186:	4620      	mov	r0, r4
   2c188:	b007      	add	sp, #28
   2c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c18c:	4620      	mov	r0, r4
   2c18e:	f7e2 fc60 	bl	ea52 <strlen>
   2c192:	4602      	mov	r2, r0
   2c194:	4621      	mov	r1, r4
   2c196:	a801      	add	r0, sp, #4
   2c198:	f7fc fa3c 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&modules, module_name);
   2c19c:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&modules, module);
   2c19e:	462a      	mov	r2, r5
   2c1a0:	17eb      	asrs	r3, r5, #31
   2c1a2:	a801      	add	r0, sp, #4
   2c1a4:	f7fc f989 	bl	284ba <cbor_encode_uint>
   2c1a8:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   2c1aa:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_module(module, &module_name);
   2c1ac:	a905      	add	r1, sp, #20
   2c1ae:	4628      	mov	r0, r5
   2c1b0:	f7e7 fc00 	bl	139b4 <log_mgmt_impl_get_module>
   2c1b4:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2c1b6:	2805      	cmp	r0, #5
   2c1b8:	d005      	beq.n	2c1c6 <log_mgmt_module_list+0x82>
        if (rc != 0) {
   2c1ba:	2800      	cmp	r0, #0
   2c1bc:	d1df      	bne.n	2c17e <log_mgmt_module_list+0x3a>
        if (module_name != NULL) {
   2c1be:	9c05      	ldr	r4, [sp, #20]
   2c1c0:	2c00      	cmp	r4, #0
   2c1c2:	d1e3      	bne.n	2c18c <log_mgmt_module_list+0x48>
   2c1c4:	e7f1      	b.n	2c1aa <log_mgmt_module_list+0x66>
    err |= cbor_encoder_close_container(&ctxt->encoder, &modules);
   2c1c6:	a901      	add	r1, sp, #4
   2c1c8:	4638      	mov	r0, r7
   2c1ca:	f7fc fa44 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c1ce:	ea56 0300 	orrs.w	r3, r6, r0
   2c1d2:	d101      	bne.n	2c1d8 <log_mgmt_module_list+0x94>
    return 0;
   2c1d4:	2400      	movs	r4, #0
   2c1d6:	e7d6      	b.n	2c186 <log_mgmt_module_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   2c1d8:	2402      	movs	r4, #2
   2c1da:	e7d4      	b.n	2c186 <log_mgmt_module_list+0x42>
   2c1dc:	0002d868 	.word	0x0002d868
   2c1e0:	0002eab0 	.word	0x0002eab0

0002c1e4 <log_mgmt_clear>:
/**
 * Command handler: log clear
 */
static int
log_mgmt_clear(struct mgmt_ctxt *ctxt)
{
   2c1e4:	b570      	push	{r4, r5, r6, lr}
   2c1e6:	b0aa      	sub	sp, #168	; 0xa8
   2c1e8:	4605      	mov	r5, r0
    struct log_mgmt_log log;
    char name[LOG_MGMT_NAME_LEN] = {0};
   2c1ea:	2400      	movs	r4, #0
   2c1ec:	9418      	str	r4, [sp, #96]	; 0x60
   2c1ee:	223c      	movs	r2, #60	; 0x3c
   2c1f0:	4621      	mov	r1, r4
   2c1f2:	a819      	add	r0, sp, #100	; 0x64
   2c1f4:	f7e2 fc05 	bl	ea02 <memset>
    int name_len;
    int log_idx;
    int rc;

    const struct cbor_attr_t attr[] = {
   2c1f8:	225c      	movs	r2, #92	; 0x5c
   2c1fa:	4621      	mov	r1, r4
   2c1fc:	a801      	add	r0, sp, #4
   2c1fe:	f7e2 fc00 	bl	ea02 <memset>
   2c202:	4b1d      	ldr	r3, [pc, #116]	; (2c278 <log_mgmt_clear+0x94>)
   2c204:	9300      	str	r3, [sp, #0]
   2c206:	2304      	movs	r3, #4
   2c208:	f88d 3004 	strb.w	r3, [sp, #4]
   2c20c:	ab18      	add	r3, sp, #96	; 0x60
   2c20e:	9302      	str	r3, [sp, #8]
   2c210:	2340      	movs	r3, #64	; 0x40
   2c212:	930a      	str	r3, [sp, #40]	; 0x28
        {
            .attribute = NULL
        },
    };

    name[0] = '\0';
   2c214:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    rc = cbor_read_object(&ctxt->it, attr);
   2c218:	4669      	mov	r1, sp
   2c21a:	f105 001c 	add.w	r0, r5, #28
   2c21e:	f7e6 fc72 	bl	12b06 <cbor_read_object>
    if (rc != 0) {
   2c222:	b9f8      	cbnz	r0, 2c264 <log_mgmt_clear+0x80>
   2c224:	4606      	mov	r6, r0
        return LOG_MGMT_ERR_EINVAL;
    }
    name_len = strlen(name);
   2c226:	a818      	add	r0, sp, #96	; 0x60
   2c228:	f7e2 fc13 	bl	ea52 <strlen>
   2c22c:	4605      	mov	r5, r0

    for (log_idx = 0; ; log_idx++) {
   2c22e:	4634      	mov	r4, r6
   2c230:	e005      	b.n	2c23e <log_mgmt_clear+0x5a>
            return rc;
        }

        if (log.type != LOG_MGMT_TYPE_STREAM) {
            if (name_len == 0 || strcmp(log.name, name) == 0) {
                rc = log_mgmt_impl_clear(log.name);
   2c232:	9828      	ldr	r0, [sp, #160]	; 0xa0
   2c234:	f7e7 fc30 	bl	13a98 <log_mgmt_impl_clear>
                if (rc != 0) {
   2c238:	b9d0      	cbnz	r0, 2c270 <log_mgmt_clear+0x8c>
                    return rc;
                }

                if (name_len != 0) {
   2c23a:	b9dd      	cbnz	r5, 2c274 <log_mgmt_clear+0x90>
    for (log_idx = 0; ; log_idx++) {
   2c23c:	3401      	adds	r4, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   2c23e:	a928      	add	r1, sp, #160	; 0xa0
   2c240:	4620      	mov	r0, r4
   2c242:	f7e7 fba2 	bl	1398a <log_mgmt_impl_get_log>
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2c246:	2805      	cmp	r0, #5
   2c248:	d00f      	beq.n	2c26a <log_mgmt_clear+0x86>
        if (rc != 0) {
   2c24a:	b968      	cbnz	r0, 2c268 <log_mgmt_clear+0x84>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   2c24c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2c24e:	2b00      	cmp	r3, #0
   2c250:	d0f4      	beq.n	2c23c <log_mgmt_clear+0x58>
            if (name_len == 0 || strcmp(log.name, name) == 0) {
   2c252:	2d00      	cmp	r5, #0
   2c254:	d0ed      	beq.n	2c232 <log_mgmt_clear+0x4e>
   2c256:	a918      	add	r1, sp, #96	; 0x60
   2c258:	9828      	ldr	r0, [sp, #160]	; 0xa0
   2c25a:	f7e2 fbee 	bl	ea3a <strcmp>
   2c25e:	2800      	cmp	r0, #0
   2c260:	d1ec      	bne.n	2c23c <log_mgmt_clear+0x58>
   2c262:	e7e6      	b.n	2c232 <log_mgmt_clear+0x4e>
        return LOG_MGMT_ERR_EINVAL;
   2c264:	2603      	movs	r6, #3
   2c266:	e000      	b.n	2c26a <log_mgmt_clear+0x86>
            return rc;
   2c268:	4606      	mov	r6, r0
    if (name_len != 0) {
        return LOG_MGMT_ERR_ENOENT;
    }

    return 0;
}
   2c26a:	4630      	mov	r0, r6
   2c26c:	b02a      	add	sp, #168	; 0xa8
   2c26e:	bd70      	pop	{r4, r5, r6, pc}
                    return rc;
   2c270:	4606      	mov	r6, r0
   2c272:	e7fa      	b.n	2c26a <log_mgmt_clear+0x86>
                    return 0;
   2c274:	4606      	mov	r6, r0
   2c276:	e7f8      	b.n	2c26a <log_mgmt_clear+0x86>
   2c278:	0002eabc 	.word	0x0002eabc

0002c27c <log_encode_entries>:
{
   2c27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c280:	b09b      	sub	sp, #108	; 0x6c
   2c282:	4606      	mov	r6, r0
   2c284:	460d      	mov	r5, r1
   2c286:	4690      	mov	r8, r2
   2c288:	461f      	mov	r7, r3

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   2c28a:	2200      	movs	r2, #0
   2c28c:	9219      	str	r2, [sp, #100]	; 0x64
    cb->enc.write = &cbor_cnt_writer;
   2c28e:	4b2b      	ldr	r3, [pc, #172]	; (2c33c <log_encode_entries+0xc0>)
   2c290:	9318      	str	r3, [sp, #96]	; 0x60
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   2c292:	a918      	add	r1, sp, #96	; 0x60
   2c294:	a804      	add	r0, sp, #16
   2c296:	f7fc f90b 	bl	284b0 <cbor_encoder_init>
   2c29a:	2207      	movs	r2, #7
   2c29c:	4928      	ldr	r1, [pc, #160]	; (2c340 <log_encode_entries+0xc4>)
   2c29e:	a804      	add	r0, sp, #16
   2c2a0:	f7fc f9b8 	bl	28614 <cbor_encode_text_string>
   2c2a4:	4604      	mov	r4, r0
    err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   2c2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c2aa:	4669      	mov	r1, sp
   2c2ac:	a804      	add	r0, sp, #16
   2c2ae:	f7fc f9b8 	bl	28622 <cbor_encoder_create_array>
   2c2b2:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   2c2b4:	4669      	mov	r1, sp
   2c2b6:	a804      	add	r0, sp, #16
   2c2b8:	f7fc f9cd 	bl	28656 <cbor_encoder_close_container>
   2c2bc:	ea44 0900 	orr.w	r9, r4, r0
{   return encoder->writer->bytes_written; }
   2c2c0:	682b      	ldr	r3, [r5, #0]
   2c2c2:	685b      	ldr	r3, [r3, #4]
   2c2c4:	9a04      	ldr	r2, [sp, #16]
   2c2c6:	6854      	ldr	r4, [r2, #4]
    rsp_len = cbor_encode_bytes_written(enc) +
   2c2c8:	441c      	add	r4, r3
    if (rsp_len > LOG_MGMT_MAX_RSP_LEN) {
   2c2ca:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
   2c2ce:	dd04      	ble.n	2c2da <log_encode_entries+0x5e>
        rc = LOG_MGMT_ERR_EUNKNOWN;
   2c2d0:	2601      	movs	r6, #1
}
   2c2d2:	4630      	mov	r0, r6
   2c2d4:	b01b      	add	sp, #108	; 0x6c
   2c2d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2c2da:	2207      	movs	r2, #7
   2c2dc:	4918      	ldr	r1, [pc, #96]	; (2c340 <log_encode_entries+0xc4>)
   2c2de:	4628      	mov	r0, r5
   2c2e0:	f7fc f998 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(enc, "entries");
   2c2e4:	ea49 0400 	orr.w	r4, r9, r0
    err |= cbor_encoder_create_array(enc, &entries, CborIndefiniteLength);
   2c2e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c2ec:	4669      	mov	r1, sp
   2c2ee:	4628      	mov	r0, r5
   2c2f0:	f7fc f997 	bl	28622 <cbor_encoder_create_array>
   2c2f4:	4304      	orrs	r4, r0
    filter = (struct log_mgmt_filter) {
   2c2f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2c2fa:	9715      	str	r7, [sp, #84]	; 0x54
   2c2fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2c2fe:	9316      	str	r3, [sp, #88]	; 0x58
{   return encoder->writer->bytes_written; }
   2c300:	682b      	ldr	r3, [r5, #0]
   2c302:	685f      	ldr	r7, [r3, #4]
    ctxt = (struct log_walk_ctxt) {
   2c304:	2230      	movs	r2, #48	; 0x30
   2c306:	2100      	movs	r1, #0
   2c308:	a808      	add	r0, sp, #32
   2c30a:	f7e2 fb7a 	bl	ea02 <memset>
   2c30e:	9709      	str	r7, [sp, #36]	; 0x24
   2c310:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
    rc = log_mgmt_impl_foreach_entry(log->name, &filter,
   2c314:	ab08      	add	r3, sp, #32
   2c316:	4a0b      	ldr	r2, [pc, #44]	; (2c344 <log_encode_entries+0xc8>)
   2c318:	a914      	add	r1, sp, #80	; 0x50
   2c31a:	6830      	ldr	r0, [r6, #0]
   2c31c:	f7e7 fb8e 	bl	13a3c <log_mgmt_impl_foreach_entry>
    if (rc < 0) {
   2c320:	1e06      	subs	r6, r0, #0
   2c322:	db08      	blt.n	2c336 <log_encode_entries+0xba>
    err |= cbor_encoder_close_container(enc, &entries);
   2c324:	4669      	mov	r1, sp
   2c326:	4628      	mov	r0, r5
   2c328:	f7fc f995 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c32c:	ea54 0300 	orrs.w	r3, r4, r0
   2c330:	d0cf      	beq.n	2c2d2 <log_encode_entries+0x56>
        return LOG_MGMT_ERR_ENOMEM;
   2c332:	2602      	movs	r6, #2
   2c334:	e7cd      	b.n	2c2d2 <log_encode_entries+0x56>
        rc = -1 * rc;
   2c336:	4276      	negs	r6, r6
   2c338:	e7f4      	b.n	2c324 <log_encode_entries+0xa8>
   2c33a:	bf00      	nop
   2c33c:	0002c001 	.word	0x0002c001
   2c340:	0002eac8 	.word	0x0002eac8
   2c344:	0002c725 	.word	0x0002c725

0002c348 <log_encode>:
{
   2c348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c34c:	b087      	sub	sp, #28
   2c34e:	4605      	mov	r5, r0
   2c350:	460e      	mov	r6, r1
   2c352:	4690      	mov	r8, r2
   2c354:	461f      	mov	r7, r3
    err |= cbor_encoder_create_map(ctxt, &logs, CborIndefiniteLength);
   2c356:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c35a:	a902      	add	r1, sp, #8
   2c35c:	4630      	mov	r0, r6
   2c35e:	f7fc f965 	bl	2862c <cbor_encoder_create_map>
   2c362:	4604      	mov	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2c364:	2204      	movs	r2, #4
   2c366:	491c      	ldr	r1, [pc, #112]	; (2c3d8 <log_encode+0x90>)
   2c368:	a802      	add	r0, sp, #8
   2c36a:	f7fc f953 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "name");
   2c36e:	4304      	orrs	r4, r0
    err |= cbor_encode_text_stringz(&logs, log->name);
   2c370:	f8d5 9000 	ldr.w	r9, [r5]
   2c374:	4648      	mov	r0, r9
   2c376:	f7e2 fb6c 	bl	ea52 <strlen>
   2c37a:	4602      	mov	r2, r0
   2c37c:	4649      	mov	r1, r9
   2c37e:	a802      	add	r0, sp, #8
   2c380:	f7fc f948 	bl	28614 <cbor_encode_text_string>
   2c384:	4304      	orrs	r4, r0
   2c386:	2204      	movs	r2, #4
   2c388:	4914      	ldr	r1, [pc, #80]	; (2c3dc <log_encode+0x94>)
   2c38a:	a802      	add	r0, sp, #8
   2c38c:	f7fc f942 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "type");
   2c390:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&logs, log->type);
   2c392:	686a      	ldr	r2, [r5, #4]
   2c394:	17d3      	asrs	r3, r2, #31
   2c396:	a802      	add	r0, sp, #8
   2c398:	f7fc f88f 	bl	284ba <cbor_encode_uint>
   2c39c:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, timestamp, index);
   2c39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c3a0:	9300      	str	r3, [sp, #0]
   2c3a2:	4642      	mov	r2, r8
   2c3a4:	463b      	mov	r3, r7
   2c3a6:	a902      	add	r1, sp, #8
   2c3a8:	4628      	mov	r0, r5
   2c3aa:	f7ff ff67 	bl	2c27c <log_encode_entries>
    if (rc != 0) {
   2c3ae:	4605      	mov	r5, r0
   2c3b0:	b950      	cbnz	r0, 2c3c8 <log_encode+0x80>
    err |= cbor_encoder_close_container(ctxt, &logs);
   2c3b2:	a902      	add	r1, sp, #8
   2c3b4:	4630      	mov	r0, r6
   2c3b6:	f7fc f94e 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c3ba:	ea54 0300 	orrs.w	r3, r4, r0
   2c3be:	d108      	bne.n	2c3d2 <log_encode+0x8a>
}
   2c3c0:	4628      	mov	r0, r5
   2c3c2:	b007      	add	sp, #28
   2c3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        cbor_encoder_close_container(ctxt, &logs);
   2c3c8:	a902      	add	r1, sp, #8
   2c3ca:	4630      	mov	r0, r6
   2c3cc:	f7fc f943 	bl	28656 <cbor_encoder_close_container>
        return rc;
   2c3d0:	e7f6      	b.n	2c3c0 <log_encode+0x78>
        return LOG_MGMT_ERR_ENOMEM;
   2c3d2:	2502      	movs	r5, #2
   2c3d4:	e7f4      	b.n	2c3c0 <log_encode+0x78>
   2c3d6:	bf00      	nop
   2c3d8:	0002eac0 	.word	0x0002eac0
   2c3dc:	0002ead0 	.word	0x0002ead0

0002c3e0 <log_mgmt_show>:
{
   2c3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c3e4:	b0ce      	sub	sp, #312	; 0x138
   2c3e6:	4606      	mov	r6, r0
    const struct cbor_attr_t attr[] = {
   2c3e8:	22bc      	movs	r2, #188	; 0xbc
   2c3ea:	2100      	movs	r1, #0
   2c3ec:	a803      	add	r0, sp, #12
   2c3ee:	f7e2 fb08 	bl	ea02 <memset>
   2c3f2:	4b4b      	ldr	r3, [pc, #300]	; (2c520 <log_mgmt_show+0x140>)
   2c3f4:	9302      	str	r3, [sp, #8]
   2c3f6:	2304      	movs	r3, #4
   2c3f8:	f88d 300c 	strb.w	r3, [sp, #12]
   2c3fc:	ab3e      	add	r3, sp, #248	; 0xf8
   2c3fe:	9304      	str	r3, [sp, #16]
   2c400:	2340      	movs	r3, #64	; 0x40
   2c402:	930c      	str	r3, [sp, #48]	; 0x30
   2c404:	4b47      	ldr	r3, [pc, #284]	; (2c524 <log_mgmt_show+0x144>)
   2c406:	930e      	str	r3, [sp, #56]	; 0x38
   2c408:	2301      	movs	r3, #1
   2c40a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   2c40e:	ab32      	add	r3, sp, #200	; 0xc8
   2c410:	9310      	str	r3, [sp, #64]	; 0x40
   2c412:	4b45      	ldr	r3, [pc, #276]	; (2c528 <log_mgmt_show+0x148>)
   2c414:	931a      	str	r3, [sp, #104]	; 0x68
   2c416:	2302      	movs	r3, #2
   2c418:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   2c41c:	ab36      	add	r3, sp, #216	; 0xd8
   2c41e:	931c      	str	r3, [sp, #112]	; 0x70
    name[0] = '\0';
   2c420:	2300      	movs	r3, #0
   2c422:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    rc = cbor_read_object(&ctxt->it, attr);
   2c426:	a902      	add	r1, sp, #8
   2c428:	f106 001c 	add.w	r0, r6, #28
   2c42c:	f7e6 fb6b 	bl	12b06 <cbor_read_object>
    if (rc != 0) {
   2c430:	2800      	cmp	r0, #0
   2c432:	d16e      	bne.n	2c512 <log_mgmt_show+0x132>
    name_len = strlen(name);
   2c434:	a83e      	add	r0, sp, #248	; 0xf8
   2c436:	f7e2 fb0c 	bl	ea52 <strlen>
   2c43a:	4682      	mov	sl, r0
   2c43c:	4607      	mov	r7, r0
    rc = log_mgmt_impl_get_next_idx(&next_idx);
   2c43e:	a835      	add	r0, sp, #212	; 0xd4
   2c440:	f7e7 faf4 	bl	13a2c <log_mgmt_impl_get_next_idx>
    if (rc != 0) {
   2c444:	4681      	mov	r9, r0
   2c446:	b110      	cbz	r0, 2c44e <log_mgmt_show+0x6e>
        return LOG_MGMT_ERR_EUNKNOWN;
   2c448:	f04f 0901 	mov.w	r9, #1
   2c44c:	e063      	b.n	2c516 <log_mgmt_show+0x136>
   2c44e:	220a      	movs	r2, #10
   2c450:	4936      	ldr	r1, [pc, #216]	; (2c52c <log_mgmt_show+0x14c>)
   2c452:	4630      	mov	r0, r6
   2c454:	f7fc f8de 	bl	28614 <cbor_encode_text_string>
   2c458:	4680      	mov	r8, r0
    err |= cbor_encode_uint(&ctxt->encoder, next_idx);
   2c45a:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   2c45c:	2300      	movs	r3, #0
   2c45e:	4630      	mov	r0, r6
   2c460:	f7fc f82b 	bl	284ba <cbor_encode_uint>
   2c464:	ea40 0808 	orr.w	r8, r0, r8
   2c468:	2204      	movs	r2, #4
   2c46a:	4931      	ldr	r1, [pc, #196]	; (2c530 <log_mgmt_show+0x150>)
   2c46c:	4630      	mov	r0, r6
   2c46e:	f7fc f8d1 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "logs");
   2c472:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &logs,
   2c476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c47a:	a938      	add	r1, sp, #224	; 0xe0
   2c47c:	4630      	mov	r0, r6
   2c47e:	f7fc f8d0 	bl	28622 <cbor_encoder_create_array>
   2c482:	ea48 0800 	orr.w	r8, r8, r0
    for (log_idx = 0; ; log_idx++) {
   2c486:	464d      	mov	r5, r9
   2c488:	e02e      	b.n	2c4e8 <log_mgmt_show+0x108>
            if (name_len != 0) {
   2c48a:	f1ba 0f00 	cmp.w	sl, #0
   2c48e:	d117      	bne.n	2c4c0 <log_mgmt_show+0xe0>
    err |= cbor_encoder_close_container(&ctxt->encoder, &logs);
   2c490:	a938      	add	r1, sp, #224	; 0xe0
   2c492:	4630      	mov	r0, r6
   2c494:	f7fc f8df 	bl	28656 <cbor_encoder_close_container>
   2c498:	ea48 0800 	orr.w	r8, r8, r0
   2c49c:	2202      	movs	r2, #2
   2c49e:	4925      	ldr	r1, [pc, #148]	; (2c534 <log_mgmt_show+0x154>)
   2c4a0:	4630      	mov	r0, r6
   2c4a2:	f7fc f8b7 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   2c4a6:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   2c4aa:	4622      	mov	r2, r4
   2c4ac:	17e3      	asrs	r3, r4, #31
   2c4ae:	4630      	mov	r0, r6
   2c4b0:	f7fc f83b 	bl	2852a <cbor_encode_int>
    if (err != 0) {
   2c4b4:	ea58 0300 	orrs.w	r3, r8, r0
   2c4b8:	d02d      	beq.n	2c516 <log_mgmt_show+0x136>
        return LOG_MGMT_ERR_ENOMEM;
   2c4ba:	f04f 0902 	mov.w	r9, #2
   2c4be:	e02a      	b.n	2c516 <log_mgmt_show+0x136>
                cbor_encoder_close_container(&ctxt->encoder, &logs);
   2c4c0:	a938      	add	r1, sp, #224	; 0xe0
   2c4c2:	4630      	mov	r0, r6
   2c4c4:	f7fc f8c7 	bl	28656 <cbor_encoder_close_container>
                return LOG_MGMT_ERR_ENOENT;
   2c4c8:	46a1      	mov	r9, r4
   2c4ca:	e024      	b.n	2c516 <log_mgmt_show+0x136>
                rc = log_encode(&log, &logs, timestamp, index);
   2c4cc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c4ce:	9300      	str	r3, [sp, #0]
   2c4d0:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
   2c4d4:	a938      	add	r1, sp, #224	; 0xe0
   2c4d6:	a83c      	add	r0, sp, #240	; 0xf0
   2c4d8:	f7ff ff36 	bl	2c348 <log_encode>
                if (rc) {
   2c4dc:	4604      	mov	r4, r0
   2c4de:	2800      	cmp	r0, #0
   2c4e0:	d1d6      	bne.n	2c490 <log_mgmt_show+0xb0>
                if (name_len > 0) {
   2c4e2:	2f00      	cmp	r7, #0
   2c4e4:	dcd4      	bgt.n	2c490 <log_mgmt_show+0xb0>
    for (log_idx = 0; ; log_idx++) {
   2c4e6:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   2c4e8:	a93c      	add	r1, sp, #240	; 0xf0
   2c4ea:	4628      	mov	r0, r5
   2c4ec:	f7e7 fa4d 	bl	1398a <log_mgmt_impl_get_log>
   2c4f0:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   2c4f2:	2805      	cmp	r0, #5
   2c4f4:	d0c9      	beq.n	2c48a <log_mgmt_show+0xaa>
        } else if (rc != 0) {
   2c4f6:	2800      	cmp	r0, #0
   2c4f8:	d1ca      	bne.n	2c490 <log_mgmt_show+0xb0>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   2c4fa:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   2c4fc:	2b00      	cmp	r3, #0
   2c4fe:	d0f2      	beq.n	2c4e6 <log_mgmt_show+0x106>
            if (name_len == 0 || strcmp(name, log.name) == 0) {
   2c500:	2f00      	cmp	r7, #0
   2c502:	d0e3      	beq.n	2c4cc <log_mgmt_show+0xec>
   2c504:	993c      	ldr	r1, [sp, #240]	; 0xf0
   2c506:	a83e      	add	r0, sp, #248	; 0xf8
   2c508:	f7e2 fa97 	bl	ea3a <strcmp>
   2c50c:	2800      	cmp	r0, #0
   2c50e:	d1ea      	bne.n	2c4e6 <log_mgmt_show+0x106>
   2c510:	e7dc      	b.n	2c4cc <log_mgmt_show+0xec>
        return LOG_MGMT_ERR_EINVAL;
   2c512:	f04f 0903 	mov.w	r9, #3
}
   2c516:	4648      	mov	r0, r9
   2c518:	b04e      	add	sp, #312	; 0x138
   2c51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c51e:	bf00      	nop
   2c520:	0002eabc 	.word	0x0002eabc
   2c524:	0002ead8 	.word	0x0002ead8
   2c528:	0002eadc 	.word	0x0002eadc
   2c52c:	0002eae4 	.word	0x0002eae4
   2c530:	0002eaf0 	.word	0x0002eaf0
   2c534:	0002d868 	.word	0x0002d868

0002c538 <log_mgmt_encode_entry>:
{
   2c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c53c:	b083      	sub	sp, #12
   2c53e:	4681      	mov	r9, r0
   2c540:	460e      	mov	r6, r1
   2c542:	9200      	str	r2, [sp, #0]
   2c544:	4698      	mov	r8, r3
{   return encoder->writer->bytes_written; }
   2c546:	6803      	ldr	r3, [r0, #0]
   2c548:	685b      	ldr	r3, [r3, #4]
   2c54a:	9301      	str	r3, [sp, #4]
    if (entry->offset == 0) {
   2c54c:	69cb      	ldr	r3, [r1, #28]
   2c54e:	2b00      	cmp	r3, #0
   2c550:	f040 80ab 	bne.w	2c6aa <log_mgmt_encode_entry+0x172>
        err |= cbor_encoder_create_map(enc, &lmec->mapenc, CborIndefiniteLength);
   2c554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c558:	4641      	mov	r1, r8
   2c55a:	f7fc f867 	bl	2862c <cbor_encoder_create_map>
   2c55e:	4607      	mov	r7, r0
        switch (entry->type) {
   2c560:	7db3      	ldrb	r3, [r6, #22]
   2c562:	f003 030f 	and.w	r3, r3, #15
   2c566:	2b01      	cmp	r3, #1
   2c568:	d005      	beq.n	2c576 <log_mgmt_encode_entry+0x3e>
   2c56a:	2b02      	cmp	r3, #2
   2c56c:	d056      	beq.n	2c61c <log_mgmt_encode_entry+0xe4>
   2c56e:	2b00      	cmp	r3, #0
   2c570:	d061      	beq.n	2c636 <log_mgmt_encode_entry+0xfe>
   2c572:	2007      	movs	r0, #7
   2c574:	e0b1      	b.n	2c6da <log_mgmt_encode_entry+0x1a2>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2c576:	2204      	movs	r2, #4
   2c578:	4960      	ldr	r1, [pc, #384]	; (2c6fc <log_mgmt_encode_entry+0x1c4>)
   2c57a:	4640      	mov	r0, r8
   2c57c:	f7fc f84a 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   2c580:	4307      	orrs	r7, r0
   2c582:	2204      	movs	r2, #4
   2c584:	495e      	ldr	r1, [pc, #376]	; (2c700 <log_mgmt_encode_entry+0x1c8>)
   2c586:	4640      	mov	r0, r8
   2c588:	f7fc f844 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "cbor");
   2c58c:	4307      	orrs	r7, r0
   2c58e:	2202      	movs	r2, #2
   2c590:	495c      	ldr	r1, [pc, #368]	; (2c704 <log_mgmt_encode_entry+0x1cc>)
   2c592:	4640      	mov	r0, r8
   2c594:	f7fc f83e 	bl	28614 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "ts");
   2c598:	4307      	orrs	r7, r0
        err |= cbor_encode_int(&lmec->mapenc, entry->ts);
   2c59a:	e9d6 2300 	ldrd	r2, r3, [r6]
   2c59e:	4640      	mov	r0, r8
   2c5a0:	f7fb ffc3 	bl	2852a <cbor_encode_int>
   2c5a4:	4307      	orrs	r7, r0
   2c5a6:	2205      	movs	r2, #5
   2c5a8:	4957      	ldr	r1, [pc, #348]	; (2c708 <log_mgmt_encode_entry+0x1d0>)
   2c5aa:	4640      	mov	r0, r8
   2c5ac:	f7fc f832 	bl	28614 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "level");
   2c5b0:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->level);
   2c5b2:	7d72      	ldrb	r2, [r6, #21]
   2c5b4:	2300      	movs	r3, #0
   2c5b6:	4640      	mov	r0, r8
   2c5b8:	f7fb ff7f 	bl	284ba <cbor_encode_uint>
   2c5bc:	4307      	orrs	r7, r0
   2c5be:	2205      	movs	r2, #5
   2c5c0:	4952      	ldr	r1, [pc, #328]	; (2c70c <log_mgmt_encode_entry+0x1d4>)
   2c5c2:	4640      	mov	r0, r8
   2c5c4:	f7fc f826 	bl	28614 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "index");
   2c5c8:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->index);
   2c5ca:	68b2      	ldr	r2, [r6, #8]
   2c5cc:	2300      	movs	r3, #0
   2c5ce:	4640      	mov	r0, r8
   2c5d0:	f7fb ff73 	bl	284ba <cbor_encode_uint>
   2c5d4:	4307      	orrs	r7, r0
   2c5d6:	2206      	movs	r2, #6
   2c5d8:	494d      	ldr	r1, [pc, #308]	; (2c710 <log_mgmt_encode_entry+0x1d8>)
   2c5da:	4640      	mov	r0, r8
   2c5dc:	f7fc f81a 	bl	28614 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "module");
   2c5e0:	4307      	orrs	r7, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->module);
   2c5e2:	7d32      	ldrb	r2, [r6, #20]
   2c5e4:	2300      	movs	r3, #0
   2c5e6:	4640      	mov	r0, r8
   2c5e8:	f7fb ff67 	bl	284ba <cbor_encode_uint>
   2c5ec:	4307      	orrs	r7, r0
        if (entry->flags & LOG_MGMT_FLAGS_IMG_HASH) {
   2c5ee:	7db3      	ldrb	r3, [r6, #22]
   2c5f0:	f013 0f10 	tst.w	r3, #16
   2c5f4:	d12c      	bne.n	2c650 <log_mgmt_encode_entry+0x118>
   2c5f6:	2203      	movs	r2, #3
   2c5f8:	4946      	ldr	r1, [pc, #280]	; (2c714 <log_mgmt_encode_entry+0x1dc>)
   2c5fa:	4640      	mov	r0, r8
   2c5fc:	f7fc f80a 	bl	28614 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "msg");
   2c600:	4307      	orrs	r7, r0
        err |= cbor_encoder_create_indef_byte_string(&lmec->mapenc, &lmec->msgenc);
   2c602:	f108 0b10 	add.w	fp, r8, #16
   2c606:	4659      	mov	r1, fp
   2c608:	4640      	mov	r0, r8
   2c60a:	f7fc f81d 	bl	28648 <cbor_encoder_create_indef_byte_string>
   2c60e:	4307      	orrs	r7, r0
        if (out_len != NULL) {
   2c610:	9b00      	ldr	r3, [sp, #0]
   2c612:	2b00      	cmp	r3, #0
   2c614:	d041      	beq.n	2c69a <log_mgmt_encode_entry+0x162>
    bytes_encoded = 0;
   2c616:	2500      	movs	r5, #0
            for (off = 0; off < entry->len; off += entry->chunklen) {
   2c618:	462b      	mov	r3, r5
   2c61a:	e030      	b.n	2c67e <log_mgmt_encode_entry+0x146>
   2c61c:	2204      	movs	r2, #4
   2c61e:	4937      	ldr	r1, [pc, #220]	; (2c6fc <log_mgmt_encode_entry+0x1c4>)
   2c620:	4640      	mov	r0, r8
   2c622:	f7fb fff7 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   2c626:	4307      	orrs	r7, r0
   2c628:	2203      	movs	r2, #3
   2c62a:	493b      	ldr	r1, [pc, #236]	; (2c718 <log_mgmt_encode_entry+0x1e0>)
   2c62c:	4640      	mov	r0, r8
   2c62e:	f7fb fff1 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "bin");
   2c632:	4307      	orrs	r7, r0
            break;
   2c634:	e7ab      	b.n	2c58e <log_mgmt_encode_entry+0x56>
   2c636:	2204      	movs	r2, #4
   2c638:	4930      	ldr	r1, [pc, #192]	; (2c6fc <log_mgmt_encode_entry+0x1c4>)
   2c63a:	4640      	mov	r0, r8
   2c63c:	f7fb ffea 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   2c640:	4307      	orrs	r7, r0
   2c642:	2203      	movs	r2, #3
   2c644:	4935      	ldr	r1, [pc, #212]	; (2c71c <log_mgmt_encode_entry+0x1e4>)
   2c646:	4640      	mov	r0, r8
   2c648:	f7fb ffe4 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "str");
   2c64c:	4307      	orrs	r7, r0
            break;
   2c64e:	e79e      	b.n	2c58e <log_mgmt_encode_entry+0x56>
   2c650:	2207      	movs	r2, #7
   2c652:	4933      	ldr	r1, [pc, #204]	; (2c720 <log_mgmt_encode_entry+0x1e8>)
   2c654:	4640      	mov	r0, r8
   2c656:	f7fb ffdd 	bl	28614 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "imghash");
   2c65a:	4307      	orrs	r7, r0
            err |= cbor_encode_byte_string(&lmec->mapenc, entry->imghash,
   2c65c:	2204      	movs	r2, #4
   2c65e:	69b1      	ldr	r1, [r6, #24]
   2c660:	4640      	mov	r0, r8
   2c662:	f7fb ffd0 	bl	28606 <cbor_encode_byte_string>
   2c666:	4307      	orrs	r7, r0
   2c668:	e7c5      	b.n	2c5f6 <log_mgmt_encode_entry+0xbe>
                err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, chunklen);
   2c66a:	4622      	mov	r2, r4
   2c66c:	68f1      	ldr	r1, [r6, #12]
   2c66e:	4658      	mov	r0, fp
   2c670:	f7fb ffc9 	bl	28606 <cbor_encode_byte_string>
   2c674:	4307      	orrs	r7, r0
                bytes_encoded += chunklen;
   2c676:	4425      	add	r5, r4
   2c678:	b2ad      	uxth	r5, r5
            for (off = 0; off < entry->len; off += entry->chunklen) {
   2c67a:	6a33      	ldr	r3, [r6, #32]
   2c67c:	4453      	add	r3, sl
   2c67e:	6932      	ldr	r2, [r6, #16]
   2c680:	469a      	mov	sl, r3
   2c682:	429a      	cmp	r2, r3
   2c684:	d919      	bls.n	2c6ba <log_mgmt_encode_entry+0x182>
                chunklen = entry->chunklen;
   2c686:	6a31      	ldr	r1, [r6, #32]
   2c688:	b28c      	uxth	r4, r1
                if (entry->chunklen > entry->len - off) {
   2c68a:	1ad0      	subs	r0, r2, r3
   2c68c:	4281      	cmp	r1, r0
   2c68e:	d9ec      	bls.n	2c66a <log_mgmt_encode_entry+0x132>
                    chunklen = entry->len - off;
   2c690:	b294      	uxth	r4, r2
   2c692:	b29b      	uxth	r3, r3
   2c694:	1ae3      	subs	r3, r4, r3
   2c696:	b29c      	uxth	r4, r3
   2c698:	e7e7      	b.n	2c66a <log_mgmt_encode_entry+0x132>
            err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   2c69a:	6a32      	ldr	r2, [r6, #32]
   2c69c:	68f1      	ldr	r1, [r6, #12]
   2c69e:	4658      	mov	r0, fp
   2c6a0:	f7fb ffb1 	bl	28606 <cbor_encode_byte_string>
   2c6a4:	4307      	orrs	r7, r0
            bytes_encoded = entry->chunklen;
   2c6a6:	8c35      	ldrh	r5, [r6, #32]
   2c6a8:	e007      	b.n	2c6ba <log_mgmt_encode_entry+0x182>
        err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   2c6aa:	6a0a      	ldr	r2, [r1, #32]
   2c6ac:	68c9      	ldr	r1, [r1, #12]
   2c6ae:	f108 0010 	add.w	r0, r8, #16
   2c6b2:	f7fb ffa8 	bl	28606 <cbor_encode_byte_string>
   2c6b6:	4607      	mov	r7, r0
        bytes_encoded = entry->chunklen;
   2c6b8:	8c35      	ldrh	r5, [r6, #32]
   if (entry->offset + bytes_encoded >= entry->len) {
   2c6ba:	69f4      	ldr	r4, [r6, #28]
   2c6bc:	4425      	add	r5, r4
   2c6be:	6933      	ldr	r3, [r6, #16]
   2c6c0:	429d      	cmp	r5, r3
   2c6c2:	d20d      	bcs.n	2c6e0 <log_mgmt_encode_entry+0x1a8>
   if (out_len) {
   2c6c4:	9900      	ldr	r1, [sp, #0]
   2c6c6:	b131      	cbz	r1, 2c6d6 <log_mgmt_encode_entry+0x19e>
{   return encoder->writer->bytes_written; }
   2c6c8:	f8d9 3000 	ldr.w	r3, [r9]
   2c6cc:	685a      	ldr	r2, [r3, #4]
       *out_len = cbor_encode_bytes_written(enc) - len;
   2c6ce:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2c6d2:	1ad3      	subs	r3, r2, r3
   2c6d4:	600b      	str	r3, [r1, #0]
   if (err != 0) {
   2c6d6:	b97f      	cbnz	r7, 2c6f8 <log_mgmt_encode_entry+0x1c0>
   return LOG_MGMT_ERR_EOK;
   2c6d8:	2000      	movs	r0, #0
}
   2c6da:	b003      	add	sp, #12
   2c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err |= cbor_encoder_close_container(&lmec->mapenc, &lmec->msgenc);
   2c6e0:	f108 0110 	add.w	r1, r8, #16
   2c6e4:	4640      	mov	r0, r8
   2c6e6:	f7fb ffb6 	bl	28656 <cbor_encoder_close_container>
   2c6ea:	4307      	orrs	r7, r0
       err |= cbor_encoder_close_container(enc, &lmec->mapenc);
   2c6ec:	4641      	mov	r1, r8
   2c6ee:	4648      	mov	r0, r9
   2c6f0:	f7fb ffb1 	bl	28656 <cbor_encoder_close_container>
   2c6f4:	4307      	orrs	r7, r0
   2c6f6:	e7e5      	b.n	2c6c4 <log_mgmt_encode_entry+0x18c>
       return LOG_MGMT_ERR_ENOMEM;
   2c6f8:	2002      	movs	r0, #2
   2c6fa:	e7ee      	b.n	2c6da <log_mgmt_encode_entry+0x1a2>
   2c6fc:	0002ead0 	.word	0x0002ead0
   2c700:	0002eaf8 	.word	0x0002eaf8
   2c704:	0002ead8 	.word	0x0002ead8
   2c708:	0002eb08 	.word	0x0002eb08
   2c70c:	0002eadc 	.word	0x0002eadc
   2c710:	0002eb10 	.word	0x0002eb10
   2c714:	0002eb20 	.word	0x0002eb20
   2c718:	0002eb00 	.word	0x0002eb00
   2c71c:	0002eb04 	.word	0x0002eb04
   2c720:	0002eb18 	.word	0x0002eb18

0002c724 <log_mgmt_cb_encode>:
{
   2c724:	b570      	push	{r4, r5, r6, lr}
   2c726:	b088      	sub	sp, #32
   2c728:	4605      	mov	r5, r0
   2c72a:	460c      	mov	r4, r1
    lmec = &ctxt->lmec;
   2c72c:	f101 0610 	add.w	r6, r1, #16
    if (entry->offset == 0) {
   2c730:	69c3      	ldr	r3, [r0, #28]
   2c732:	b9b3      	cbnz	r3, 2c762 <log_mgmt_cb_encode+0x3e>
    cb->enc.bytes_written = 0;
   2c734:	2200      	movs	r2, #0
   2c736:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   2c738:	4b19      	ldr	r3, [pc, #100]	; (2c7a0 <log_mgmt_cb_encode+0x7c>)
   2c73a:	9306      	str	r3, [sp, #24]
        cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   2c73c:	a906      	add	r1, sp, #24
   2c73e:	a802      	add	r0, sp, #8
   2c740:	f7fb feb6 	bl	284b0 <cbor_encoder_init>
        rc = log_mgmt_encode_entry(&cnt_encoder, entry, &entry_len, lmec);
   2c744:	4633      	mov	r3, r6
   2c746:	aa01      	add	r2, sp, #4
   2c748:	4629      	mov	r1, r5
   2c74a:	a802      	add	r0, sp, #8
   2c74c:	f7ff fef4 	bl	2c538 <log_mgmt_encode_entry>
        if (rc != 0) {
   2c750:	b998      	cbnz	r0, 2c77a <log_mgmt_cb_encode+0x56>
        if (ctxt->rsp_len + entry_len + 1 > LOG_MGMT_MAX_RSP_LEN) {
   2c752:	6862      	ldr	r2, [r4, #4]
   2c754:	9b01      	ldr	r3, [sp, #4]
   2c756:	441a      	add	r2, r3
   2c758:	1c51      	adds	r1, r2, #1
   2c75a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2c75e:	d80e      	bhi.n	2c77e <log_mgmt_cb_encode+0x5a>
        ctxt->rsp_len += entry_len;
   2c760:	6062      	str	r2, [r4, #4]
    rc = log_mgmt_encode_entry(ctxt->enc, entry, NULL, lmec);
   2c762:	4633      	mov	r3, r6
   2c764:	2200      	movs	r2, #0
   2c766:	4629      	mov	r1, r5
   2c768:	68a0      	ldr	r0, [r4, #8]
   2c76a:	f7ff fee5 	bl	2c538 <log_mgmt_encode_entry>
    if (rc != 0) {
   2c76e:	b920      	cbnz	r0, 2c77a <log_mgmt_cb_encode+0x56>
    ctxt->counter++;
   2c770:	68e3      	ldr	r3, [r4, #12]
   2c772:	3301      	adds	r3, #1
   2c774:	60e3      	str	r3, [r4, #12]
    ctxt->last_enc_index = entry->index;
   2c776:	68ab      	ldr	r3, [r5, #8]
   2c778:	6023      	str	r3, [r4, #0]
}
   2c77a:	b008      	add	sp, #32
   2c77c:	bd70      	pop	{r4, r5, r6, pc}
            if (ctxt->counter == 0) {
   2c77e:	68e2      	ldr	r2, [r4, #12]
   2c780:	b112      	cbz	r2, 2c788 <log_mgmt_cb_encode+0x64>
            return -1 * LOG_MGMT_ERR_EUNKNOWN;
   2c782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c786:	e7f8      	b.n	2c77a <log_mgmt_cb_encode+0x56>
                entry->type = LOG_ETYPE_STRING;
   2c788:	7daa      	ldrb	r2, [r5, #22]
   2c78a:	f36f 0203 	bfc	r2, #0, #4
   2c78e:	75aa      	strb	r2, [r5, #22]
                snprintf((char *)entry->data, LOG_MGMT_MAX_RSP_LEN,
   2c790:	4a04      	ldr	r2, [pc, #16]	; (2c7a4 <log_mgmt_cb_encode+0x80>)
   2c792:	f44f 7100 	mov.w	r1, #512	; 0x200
   2c796:	68e8      	ldr	r0, [r5, #12]
   2c798:	f7ff f817 	bl	2b7ca <snprintf>
   2c79c:	e7f1      	b.n	2c782 <log_mgmt_cb_encode+0x5e>
   2c79e:	bf00      	nop
   2c7a0:	0002c001 	.word	0x0002c001
   2c7a4:	0002eb24 	.word	0x0002eb24

0002c7a8 <log_mgmt_register_group>:

void
log_mgmt_register_group(void)
{
   2c7a8:	b508      	push	{r3, lr}
    mgmt_register_group(&log_mgmt_group);
   2c7aa:	4802      	ldr	r0, [pc, #8]	; (2c7b4 <log_mgmt_register_group+0xc>)
   2c7ac:	f7e7 fbea 	bl	13f84 <mgmt_register_group>
}
   2c7b0:	bd08      	pop	{r3, pc}
   2c7b2:	bf00      	nop
   2c7b4:	200004f0 	.word	0x200004f0

0002c7b8 <stat_mgmt_list>:
/**
 * Command handler: stat list
 */
static int
stat_mgmt_list(struct mgmt_ctxt *ctxt)
{
   2c7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c7ba:	b087      	sub	sp, #28
   2c7bc:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   2c7be:	2202      	movs	r2, #2
   2c7c0:	491e      	ldr	r1, [pc, #120]	; (2c83c <stat_mgmt_list+0x84>)
   2c7c2:	f7fb ff27 	bl	28614 <cbor_encode_text_string>
   2c7c6:	4606      	mov	r6, r0
    int rc;
    int i;

    err = CborNoError;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   2c7c8:	2200      	movs	r2, #0
   2c7ca:	2300      	movs	r3, #0
   2c7cc:	4638      	mov	r0, r7
   2c7ce:	f7fb feac 	bl	2852a <cbor_encode_int>
   2c7d2:	4306      	orrs	r6, r0
   2c7d4:	2209      	movs	r2, #9
   2c7d6:	491a      	ldr	r1, [pc, #104]	; (2c840 <stat_mgmt_list+0x88>)
   2c7d8:	4638      	mov	r0, r7
   2c7da:	f7fb ff1b 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "stat_list");
   2c7de:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &arr_enc,
   2c7e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c7e4:	a901      	add	r1, sp, #4
   2c7e6:	4638      	mov	r0, r7
   2c7e8:	f7fb ff1b 	bl	28622 <cbor_encoder_create_array>
   2c7ec:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    /* Iterate the list of stat groups, encoding each group's name in the CBOR
     * array.
     */
    for (i = 0; ; i++) {
   2c7ee:	2500      	movs	r5, #0
        rc = stat_mgmt_impl_get_group(i, &group_name);
   2c7f0:	a905      	add	r1, sp, #20
   2c7f2:	4628      	mov	r0, r5
   2c7f4:	f7e7 fb2a 	bl	13e4c <stat_mgmt_impl_get_group>
   2c7f8:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   2c7fa:	2805      	cmp	r0, #5
   2c7fc:	d013      	beq.n	2c826 <stat_mgmt_list+0x6e>
            /* No more stat groups. */
            break;
        } else if (rc != 0) {
   2c7fe:	b958      	cbnz	r0, 2c818 <stat_mgmt_list+0x60>
            /* Error. */
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
            return rc;
        }

        err |= cbor_encode_text_stringz(&ctxt->encoder, group_name);
   2c800:	9c05      	ldr	r4, [sp, #20]
   2c802:	4620      	mov	r0, r4
   2c804:	f7e2 f925 	bl	ea52 <strlen>
   2c808:	4602      	mov	r2, r0
   2c80a:	4621      	mov	r1, r4
   2c80c:	4638      	mov	r0, r7
   2c80e:	f7fb ff01 	bl	28614 <cbor_encode_text_string>
   2c812:	4306      	orrs	r6, r0
    for (i = 0; ; i++) {
   2c814:	3501      	adds	r5, #1
        rc = stat_mgmt_impl_get_group(i, &group_name);
   2c816:	e7eb      	b.n	2c7f0 <stat_mgmt_list+0x38>
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   2c818:	a901      	add	r1, sp, #4
   2c81a:	4638      	mov	r0, r7
   2c81c:	f7fb ff1b 	bl	28656 <cbor_encoder_close_container>

    if (err != 0) {
        return MGMT_ERR_ENOMEM;
    }
    return 0;
}
   2c820:	4620      	mov	r0, r4
   2c822:	b007      	add	sp, #28
   2c824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err |= cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   2c826:	a901      	add	r1, sp, #4
   2c828:	4638      	mov	r0, r7
   2c82a:	f7fb ff14 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c82e:	ea56 0300 	orrs.w	r3, r6, r0
   2c832:	d101      	bne.n	2c838 <stat_mgmt_list+0x80>
    return 0;
   2c834:	2400      	movs	r4, #0
   2c836:	e7f3      	b.n	2c820 <stat_mgmt_list+0x68>
        return MGMT_ERR_ENOMEM;
   2c838:	2402      	movs	r4, #2
   2c83a:	e7f1      	b.n	2c820 <stat_mgmt_list+0x68>
   2c83c:	0002d868 	.word	0x0002d868
   2c840:	0002eb48 	.word	0x0002eb48

0002c844 <stat_mgmt_show>:
{
   2c844:	b570      	push	{r4, r5, r6, lr}
   2c846:	b0a4      	sub	sp, #144	; 0x90
   2c848:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   2c84a:	225c      	movs	r2, #92	; 0x5c
   2c84c:	2100      	movs	r1, #0
   2c84e:	a801      	add	r0, sp, #4
   2c850:	f7e2 f8d7 	bl	ea02 <memset>
   2c854:	4b26      	ldr	r3, [pc, #152]	; (2c8f0 <stat_mgmt_show+0xac>)
   2c856:	9300      	str	r3, [sp, #0]
   2c858:	2304      	movs	r3, #4
   2c85a:	f88d 3004 	strb.w	r3, [sp, #4]
   2c85e:	ab1c      	add	r3, sp, #112	; 0x70
   2c860:	9302      	str	r3, [sp, #8]
   2c862:	2320      	movs	r3, #32
   2c864:	930a      	str	r3, [sp, #40]	; 0x28
    err = cbor_read_object(&ctxt->it, attrs);
   2c866:	4669      	mov	r1, sp
   2c868:	f105 001c 	add.w	r0, r5, #28
   2c86c:	f7e6 f94b 	bl	12b06 <cbor_read_object>
    if (err != 0) {
   2c870:	2800      	cmp	r0, #0
   2c872:	d138      	bne.n	2c8e6 <stat_mgmt_show+0xa2>
   2c874:	4604      	mov	r4, r0
   2c876:	2202      	movs	r2, #2
   2c878:	491e      	ldr	r1, [pc, #120]	; (2c8f4 <stat_mgmt_show+0xb0>)
   2c87a:	4628      	mov	r0, r5
   2c87c:	f7fb feca 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   2c880:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   2c882:	2200      	movs	r2, #0
   2c884:	2300      	movs	r3, #0
   2c886:	4628      	mov	r0, r5
   2c888:	f7fb fe4f 	bl	2852a <cbor_encode_int>
   2c88c:	4304      	orrs	r4, r0
   2c88e:	2204      	movs	r2, #4
   2c890:	4917      	ldr	r1, [pc, #92]	; (2c8f0 <stat_mgmt_show+0xac>)
   2c892:	4628      	mov	r0, r5
   2c894:	f7fb febe 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "name");
   2c898:	4304      	orrs	r4, r0
   2c89a:	a81c      	add	r0, sp, #112	; 0x70
   2c89c:	f7e2 f8d9 	bl	ea52 <strlen>
   2c8a0:	4602      	mov	r2, r0
   2c8a2:	a91c      	add	r1, sp, #112	; 0x70
   2c8a4:	4628      	mov	r0, r5
   2c8a6:	f7fb feb5 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, stat_name);
   2c8aa:	4304      	orrs	r4, r0
   2c8ac:	2206      	movs	r2, #6
   2c8ae:	4912      	ldr	r1, [pc, #72]	; (2c8f8 <stat_mgmt_show+0xb4>)
   2c8b0:	4628      	mov	r0, r5
   2c8b2:	f7fb feaf 	bl	28614 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "fields");
   2c8b6:	4304      	orrs	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &map_enc,
   2c8b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c8bc:	a918      	add	r1, sp, #96	; 0x60
   2c8be:	4628      	mov	r0, r5
   2c8c0:	f7fb feb4 	bl	2862c <cbor_encoder_create_map>
   2c8c4:	4304      	orrs	r4, r0
    rc = stat_mgmt_impl_foreach_entry(stat_name, stat_mgmt_cb_encode,
   2c8c6:	aa18      	add	r2, sp, #96	; 0x60
   2c8c8:	490c      	ldr	r1, [pc, #48]	; (2c8fc <stat_mgmt_show+0xb8>)
   2c8ca:	a81c      	add	r0, sp, #112	; 0x70
   2c8cc:	f7e7 fad0 	bl	13e70 <stat_mgmt_impl_foreach_entry>
   2c8d0:	4606      	mov	r6, r0
    err |= cbor_encoder_close_container(&ctxt->encoder, &map_enc);
   2c8d2:	a918      	add	r1, sp, #96	; 0x60
   2c8d4:	4628      	mov	r0, r5
   2c8d6:	f7fb febe 	bl	28656 <cbor_encoder_close_container>
    if (err != 0) {
   2c8da:	ea54 0300 	orrs.w	r3, r4, r0
   2c8de:	d104      	bne.n	2c8ea <stat_mgmt_show+0xa6>
}
   2c8e0:	4630      	mov	r0, r6
   2c8e2:	b024      	add	sp, #144	; 0x90
   2c8e4:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_EINVAL;
   2c8e6:	2603      	movs	r6, #3
   2c8e8:	e7fa      	b.n	2c8e0 <stat_mgmt_show+0x9c>
        rc = MGMT_ERR_ENOMEM;
   2c8ea:	2602      	movs	r6, #2
   2c8ec:	e7f8      	b.n	2c8e0 <stat_mgmt_show+0x9c>
   2c8ee:	bf00      	nop
   2c8f0:	0002eac0 	.word	0x0002eac0
   2c8f4:	0002d868 	.word	0x0002d868
   2c8f8:	0002eb54 	.word	0x0002eb54
   2c8fc:	0002c901 	.word	0x0002c901

0002c900 <stat_mgmt_cb_encode>:
{
   2c900:	b570      	push	{r4, r5, r6, lr}
   2c902:	4605      	mov	r5, r0
   2c904:	460c      	mov	r4, r1
    err |= cbor_encode_text_stringz(enc, entry->name);
   2c906:	6806      	ldr	r6, [r0, #0]
   2c908:	4630      	mov	r0, r6
   2c90a:	f7e2 f8a2 	bl	ea52 <strlen>
   2c90e:	4602      	mov	r2, r0
   2c910:	4631      	mov	r1, r6
   2c912:	4620      	mov	r0, r4
   2c914:	f7fb fe7e 	bl	28614 <cbor_encode_text_string>
   2c918:	4606      	mov	r6, r0
    err |= cbor_encode_uint(enc, entry->value);
   2c91a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   2c91e:	4620      	mov	r0, r4
   2c920:	f7fb fdcb 	bl	284ba <cbor_encode_uint>
    if (err != 0) {
   2c924:	ea50 0306 	orrs.w	r3, r0, r6
   2c928:	d101      	bne.n	2c92e <stat_mgmt_cb_encode+0x2e>
    return 0;
   2c92a:	2000      	movs	r0, #0
}
   2c92c:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   2c92e:	2002      	movs	r0, #2
   2c930:	e7fc      	b.n	2c92c <stat_mgmt_cb_encode+0x2c>
	...

0002c934 <stat_mgmt_register_group>:

void
stat_mgmt_register_group(void)
{
   2c934:	b508      	push	{r3, lr}
    mgmt_register_group(&stat_mgmt_group);
   2c936:	4802      	ldr	r0, [pc, #8]	; (2c940 <stat_mgmt_register_group+0xc>)
   2c938:	f7e7 fb24 	bl	13f84 <mgmt_register_group>
}
   2c93c:	bd08      	pop	{r3, pc}
   2c93e:	bf00      	nop
   2c940:	2000052c 	.word	0x2000052c

0002c944 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   2c944:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2c946:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2c948:	b118      	cbz	r0, 2c952 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   2c94a:	3801      	subs	r0, #1
   2c94c:	f000 fa2e 	bl	2cdac <hal_uart_blocking_tx>
}
   2c950:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2c952:	f7df fc23 	bl	c19c <hal_debugger_connected>
   2c956:	b100      	cbz	r0, 2c95a <uart_hal_blocking_tx+0x16>
   2c958:	be01      	bkpt	0x0001
   2c95a:	2300      	movs	r3, #0
   2c95c:	461a      	mov	r2, r3
   2c95e:	4619      	mov	r1, r3
   2c960:	4618      	mov	r0, r3
   2c962:	f7e0 f91f 	bl	cba4 <__assert_func>

0002c966 <uart_hal_start_rx>:
{
   2c966:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2c968:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2c96a:	b118      	cbz	r0, 2c974 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   2c96c:	3801      	subs	r0, #1
   2c96e:	f000 f9f7 	bl	2cd60 <hal_uart_start_rx>
}
   2c972:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2c974:	f7df fc12 	bl	c19c <hal_debugger_connected>
   2c978:	b100      	cbz	r0, 2c97c <uart_hal_start_rx+0x16>
   2c97a:	be01      	bkpt	0x0001
   2c97c:	2300      	movs	r3, #0
   2c97e:	461a      	mov	r2, r3
   2c980:	4619      	mov	r1, r3
   2c982:	4618      	mov	r0, r3
   2c984:	f7e0 f90e 	bl	cba4 <__assert_func>

0002c988 <uart_hal_start_tx>:
{
   2c988:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2c98a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2c98c:	b118      	cbz	r0, 2c996 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   2c98e:	3801      	subs	r0, #1
   2c990:	f000 f9b6 	bl	2cd00 <hal_uart_start_tx>
}
   2c994:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2c996:	f7df fc01 	bl	c19c <hal_debugger_connected>
   2c99a:	b100      	cbz	r0, 2c99e <uart_hal_start_tx+0x16>
   2c99c:	be01      	bkpt	0x0001
   2c99e:	2300      	movs	r3, #0
   2c9a0:	461a      	mov	r2, r3
   2c9a2:	4619      	mov	r1, r3
   2c9a4:	4618      	mov	r0, r3
   2c9a6:	f7e0 f8fd 	bl	cba4 <__assert_func>

0002c9aa <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   2c9aa:	b510      	push	{r4, lr}
   2c9ac:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   2c9ae:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   2c9b0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   2c9b4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   2c9b8:	9201      	str	r2, [sp, #4]
   2c9ba:	9300      	str	r3, [sp, #0]
   2c9bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   2c9c0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   2c9c4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2c9c6:	1e60      	subs	r0, r4, #1
   2c9c8:	f000 fa50 	bl	2ce6c <hal_uart_config>
    if (rc) {
   2c9cc:	b908      	cbnz	r0, 2c9d2 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   2c9ce:	b002      	add	sp, #8
   2c9d0:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   2c9d2:	2002      	movs	r0, #2
   2c9d4:	e7fb      	b.n	2c9ce <uart_hal_resume+0x24>

0002c9d6 <uart_hal_suspend>:
{
   2c9d6:	b570      	push	{r4, r5, r6, lr}
   2c9d8:	4606      	mov	r6, r0
   2c9da:	460c      	mov	r4, r1
   2c9dc:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   2c9de:	f7e1 fced 	bl	e3bc <os_time_get>
   2c9e2:	1a24      	subs	r4, r4, r0
   2c9e4:	2c00      	cmp	r4, #0
   2c9e6:	dc06      	bgt.n	2c9f6 <uart_hal_suspend+0x20>
   2c9e8:	b13d      	cbz	r5, 2c9fa <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   2c9ea:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2c9ec:	3801      	subs	r0, #1
   2c9ee:	f000 fabb 	bl	2cf68 <hal_uart_close>
    if (rc) {
   2c9f2:	b920      	cbnz	r0, 2c9fe <uart_hal_suspend+0x28>
}
   2c9f4:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2c9f6:	2002      	movs	r0, #2
   2c9f8:	e7fc      	b.n	2c9f4 <uart_hal_suspend+0x1e>
   2c9fa:	2002      	movs	r0, #2
   2c9fc:	e7fa      	b.n	2c9f4 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   2c9fe:	2002      	movs	r0, #2
   2ca00:	e7f8      	b.n	2c9f4 <uart_hal_suspend+0x1e>

0002ca02 <uart_hal_close>:
{
   2ca02:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   2ca04:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2ca06:	3801      	subs	r0, #1
   2ca08:	f000 faae 	bl	2cf68 <hal_uart_close>
    if (rc) {
   2ca0c:	b900      	cbnz	r0, 2ca10 <uart_hal_close+0xe>
}
   2ca0e:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   2ca10:	2002      	movs	r0, #2
   2ca12:	e7fc      	b.n	2ca0e <uart_hal_close+0xc>

0002ca14 <uart_hal_open>:
{
   2ca14:	b550      	push	{r4, r6, lr}
   2ca16:	b083      	sub	sp, #12
   2ca18:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   2ca1a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2ca1c:	2800      	cmp	r0, #0
   2ca1e:	d02b      	beq.n	2ca78 <uart_hal_open+0x64>
   2ca20:	4614      	mov	r4, r2
    if (!uc) {
   2ca22:	2a00      	cmp	r2, #0
   2ca24:	d032      	beq.n	2ca8c <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   2ca26:	7ef3      	ldrb	r3, [r6, #27]
   2ca28:	f013 0f02 	tst.w	r3, #2
   2ca2c:	d130      	bne.n	2ca90 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   2ca2e:	7913      	ldrb	r3, [r2, #4]
   2ca30:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   2ca34:	79d3      	ldrb	r3, [r2, #7]
   2ca36:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   2ca3a:	7993      	ldrb	r3, [r2, #6]
   2ca3c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   2ca40:	6813      	ldr	r3, [r2, #0]
   2ca42:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   2ca44:	7953      	ldrb	r3, [r2, #5]
   2ca46:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   2ca4a:	6953      	ldr	r3, [r2, #20]
   2ca4c:	9300      	str	r3, [sp, #0]
   2ca4e:	68d3      	ldr	r3, [r2, #12]
   2ca50:	6912      	ldr	r2, [r2, #16]
   2ca52:	68a1      	ldr	r1, [r4, #8]
   2ca54:	3801      	subs	r0, #1
   2ca56:	f000 f935 	bl	2ccc4 <hal_uart_init_cbs>
    if (rc) {
   2ca5a:	b9e0      	cbnz	r0, 2ca96 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   2ca5c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   2ca5e:	79a3      	ldrb	r3, [r4, #6]
   2ca60:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   2ca62:	9201      	str	r2, [sp, #4]
   2ca64:	9300      	str	r3, [sp, #0]
   2ca66:	7963      	ldrb	r3, [r4, #5]
   2ca68:	7922      	ldrb	r2, [r4, #4]
   2ca6a:	6821      	ldr	r1, [r4, #0]
   2ca6c:	3801      	subs	r0, #1
   2ca6e:	f000 f9fd 	bl	2ce6c <hal_uart_config>
    if (rc) {
   2ca72:	b170      	cbz	r0, 2ca92 <uart_hal_open+0x7e>
        return OS_EINVAL;
   2ca74:	2002      	movs	r0, #2
   2ca76:	e00c      	b.n	2ca92 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   2ca78:	f7df fb90 	bl	c19c <hal_debugger_connected>
   2ca7c:	b100      	cbz	r0, 2ca80 <uart_hal_open+0x6c>
   2ca7e:	be01      	bkpt	0x0001
   2ca80:	2300      	movs	r3, #0
   2ca82:	461a      	mov	r2, r3
   2ca84:	4619      	mov	r1, r3
   2ca86:	4618      	mov	r0, r3
   2ca88:	f7e0 f88c 	bl	cba4 <__assert_func>
        return OS_EINVAL;
   2ca8c:	2002      	movs	r0, #2
   2ca8e:	e000      	b.n	2ca92 <uart_hal_open+0x7e>
        return OS_EBUSY;
   2ca90:	200b      	movs	r0, #11
}
   2ca92:	b003      	add	sp, #12
   2ca94:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   2ca96:	2002      	movs	r0, #2
   2ca98:	e7fb      	b.n	2ca92 <uart_hal_open+0x7e>
	...

0002ca9c <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   2ca9c:	b570      	push	{r4, r5, r6, lr}
   2ca9e:	4604      	mov	r4, r0
   2caa0:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   2caa2:	69c5      	ldr	r5, [r0, #28]
   2caa4:	4628      	mov	r0, r5
   2caa6:	f7e1 ffd4 	bl	ea52 <strlen>
   2caaa:	3801      	subs	r0, #1
   2caac:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   2caae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2cab2:	2b09      	cmp	r3, #9
   2cab4:	d816      	bhi.n	2cae4 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   2cab6:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   2caba:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   2cabc:	4b0a      	ldr	r3, [pc, #40]	; (2cae8 <uart_hal_init+0x4c>)
   2cabe:	6023      	str	r3, [r4, #0]
   2cac0:	4b0a      	ldr	r3, [pc, #40]	; (2caec <uart_hal_init+0x50>)
   2cac2:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   2cac4:	4b0a      	ldr	r3, [pc, #40]	; (2caf0 <uart_hal_init+0x54>)
   2cac6:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   2cac8:	4b0a      	ldr	r3, [pc, #40]	; (2caf4 <uart_hal_init+0x58>)
   2caca:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   2cacc:	4b0a      	ldr	r3, [pc, #40]	; (2caf8 <uart_hal_init+0x5c>)
   2cace:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   2cad0:	4b0a      	ldr	r3, [pc, #40]	; (2cafc <uart_hal_init+0x60>)
   2cad2:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   2cad4:	4b0a      	ldr	r3, [pc, #40]	; (2cb00 <uart_hal_init+0x64>)
   2cad6:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   2cad8:	4631      	mov	r1, r6
   2cada:	3830      	subs	r0, #48	; 0x30
   2cadc:	f000 f998 	bl	2ce10 <hal_uart_init>

    return OS_OK;
   2cae0:	2000      	movs	r0, #0
}
   2cae2:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2cae4:	2002      	movs	r0, #2
   2cae6:	e7fc      	b.n	2cae2 <uart_hal_init+0x46>
   2cae8:	0002ca15 	.word	0x0002ca15
   2caec:	0002ca03 	.word	0x0002ca03
   2caf0:	0002c9d7 	.word	0x0002c9d7
   2caf4:	0002c9ab 	.word	0x0002c9ab
   2caf8:	0002c989 	.word	0x0002c989
   2cafc:	0002c967 	.word	0x0002c967
   2cb00:	0002c945 	.word	0x0002c945

0002cb04 <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
   2cb04:	b538      	push	{r3, r4, r5, lr}
   2cb06:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   2cb08:	2400      	movs	r4, #0
   2cb0a:	e002      	b.n	2cb12 <hal_uart_tx_fill_buf+0xe>
        data = u->u_tx_func(u->u_func_arg);
        if (data < 0) {
            break;
        }
        u->u_tx_buf[i] = data;
   2cb0c:	192b      	adds	r3, r5, r4
   2cb0e:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   2cb10:	3401      	adds	r4, #1
   2cb12:	2c07      	cmp	r4, #7
   2cb14:	d804      	bhi.n	2cb20 <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
   2cb16:	692b      	ldr	r3, [r5, #16]
   2cb18:	69a8      	ldr	r0, [r5, #24]
   2cb1a:	4798      	blx	r3
        if (data < 0) {
   2cb1c:	2800      	cmp	r0, #0
   2cb1e:	daf5      	bge.n	2cb0c <hal_uart_tx_fill_buf+0x8>
    }
    return i;
}
   2cb20:	4620      	mov	r0, r4
   2cb22:	bd38      	pop	{r3, r4, r5, pc}

0002cb24 <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
   2cb24:	b538      	push	{r3, r4, r5, lr}
   2cb26:	4604      	mov	r4, r0
   2cb28:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
   2cb2a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   2cb2e:	b973      	cbnz	r3, 2cb4e <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
   2cb30:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   2cb34:	b153      	cbz	r3, 2cb4c <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
   2cb36:	2300      	movs	r3, #0
   2cb38:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2cb3c:	68eb      	ldr	r3, [r5, #12]
   2cb3e:	7869      	ldrb	r1, [r5, #1]
   2cb40:	69a8      	ldr	r0, [r5, #24]
   2cb42:	4798      	blx	r3
        if (rc < 0) {
   2cb44:	2800      	cmp	r0, #0
   2cb46:	db21      	blt.n	2cb8c <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
   2cb48:	2301      	movs	r3, #1
   2cb4a:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
   2cb4c:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
   2cb4e:	2300      	movs	r3, #0
   2cb50:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
   2cb54:	4608      	mov	r0, r1
   2cb56:	f7ff ffd5 	bl	2cb04 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   2cb5a:	2800      	cmp	r0, #0
   2cb5c:	dd07      	ble.n	2cb6e <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   2cb5e:	1cab      	adds	r3, r5, #2
   2cb60:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   2cb64:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   2cb68:	2301      	movs	r3, #1
   2cb6a:	60a3      	str	r3, [r4, #8]
   2cb6c:	e7e0      	b.n	2cb30 <uart_irq_handler+0xc>
            if (u->u_tx_done) {
   2cb6e:	696b      	ldr	r3, [r5, #20]
   2cb70:	b10b      	cbz	r3, 2cb76 <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
   2cb72:	69a8      	ldr	r0, [r5, #24]
   2cb74:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
   2cb76:	f44f 7380 	mov.w	r3, #256	; 0x100
   2cb7a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
   2cb7e:	2301      	movs	r3, #1
   2cb80:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
   2cb82:	782b      	ldrb	r3, [r5, #0]
   2cb84:	f36f 0382 	bfc	r3, #2, #1
   2cb88:	702b      	strb	r3, [r5, #0]
   2cb8a:	e7d1      	b.n	2cb30 <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
   2cb8c:	782b      	ldrb	r3, [r5, #0]
   2cb8e:	f043 0302 	orr.w	r3, r3, #2
   2cb92:	702b      	strb	r3, [r5, #0]
   2cb94:	e7da      	b.n	2cb4c <uart_irq_handler+0x28>
	...

0002cb98 <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
   2cb98:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
   2cb9a:	4902      	ldr	r1, [pc, #8]	; (2cba4 <uart0_irq_handler+0xc>)
   2cb9c:	4802      	ldr	r0, [pc, #8]	; (2cba8 <uart0_irq_handler+0x10>)
   2cb9e:	f7ff ffc1 	bl	2cb24 <uart_irq_handler>
}
   2cba2:	bd08      	pop	{r3, pc}
   2cba4:	200051ac 	.word	0x200051ac
   2cba8:	40002000 	.word	0x40002000

0002cbac <uart1_irq_handler>:

#if defined(NRF52840_XXAA)
static void
uart1_irq_handler(void)
{
   2cbac:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE1, &uart1);
   2cbae:	4902      	ldr	r1, [pc, #8]	; (2cbb8 <uart1_irq_handler+0xc>)
   2cbb0:	4802      	ldr	r0, [pc, #8]	; (2cbbc <uart1_irq_handler+0x10>)
   2cbb2:	f7ff ffb7 	bl	2cb24 <uart_irq_handler>
}
   2cbb6:	bd08      	pop	{r3, pc}
   2cbb8:	200051c8 	.word	0x200051c8
   2cbbc:	40028000 	.word	0x40028000

0002cbc0 <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
   2cbc0:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   2cbc4:	4298      	cmp	r0, r3
   2cbc6:	d049      	beq.n	2cc5c <hal_uart_baudrate+0x9c>
   2cbc8:	dc23      	bgt.n	2cc12 <hal_uart_baudrate+0x52>
   2cbca:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   2cbce:	d048      	beq.n	2cc62 <hal_uart_baudrate+0xa2>
   2cbd0:	dd08      	ble.n	2cbe4 <hal_uart_baudrate+0x24>
   2cbd2:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
   2cbd6:	d04f      	beq.n	2cc78 <hal_uart_baudrate+0xb8>
   2cbd8:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
   2cbdc:	d114      	bne.n	2cc08 <hal_uart_baudrate+0x48>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
   2cbde:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
   2cbe2:	4770      	bx	lr
    switch (baudrate) {
   2cbe4:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
   2cbe8:	d03d      	beq.n	2cc66 <hal_uart_baudrate+0xa6>
   2cbea:	dd04      	ble.n	2cbf6 <hal_uart_baudrate+0x36>
   2cbec:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
   2cbf0:	d140      	bne.n	2cc74 <hal_uart_baudrate+0xb4>
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
   2cbf2:	482c      	ldr	r0, [pc, #176]	; (2cca4 <hal_uart_baudrate+0xe4>)
   2cbf4:	4770      	bx	lr
    switch (baudrate) {
   2cbf6:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   2cbfa:	d036      	beq.n	2cc6a <hal_uart_baudrate+0xaa>
   2cbfc:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   2cc00:	d136      	bne.n	2cc70 <hal_uart_baudrate+0xb0>
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
   2cc02:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
   2cc06:	4770      	bx	lr
    switch (baudrate) {
   2cc08:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
   2cc0c:	d136      	bne.n	2cc7c <hal_uart_baudrate+0xbc>
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
   2cc0e:	4826      	ldr	r0, [pc, #152]	; (2cca8 <hal_uart_baudrate+0xe8>)
   2cc10:	4770      	bx	lr
    switch (baudrate) {
   2cc12:	4b26      	ldr	r3, [pc, #152]	; (2ccac <hal_uart_baudrate+0xec>)
   2cc14:	4298      	cmp	r0, r3
   2cc16:	d033      	beq.n	2cc80 <hal_uart_baudrate+0xc0>
   2cc18:	dd08      	ble.n	2cc2c <hal_uart_baudrate+0x6c>
   2cc1a:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
   2cc1e:	d03c      	beq.n	2cc9a <hal_uart_baudrate+0xda>
   2cc20:	4b23      	ldr	r3, [pc, #140]	; (2ccb0 <hal_uart_baudrate+0xf0>)
   2cc22:	4298      	cmp	r0, r3
   2cc24:	d114      	bne.n	2cc50 <hal_uart_baudrate+0x90>
    case 460800:
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
   2cc26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   2cc2a:	4770      	bx	lr
    switch (baudrate) {
   2cc2c:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
   2cc30:	d029      	beq.n	2cc86 <hal_uart_baudrate+0xc6>
   2cc32:	dd05      	ble.n	2cc40 <hal_uart_baudrate+0x80>
   2cc34:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
   2cc38:	d12d      	bne.n	2cc96 <hal_uart_baudrate+0xd6>
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
   2cc3a:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
   2cc3e:	4770      	bx	lr
    switch (baudrate) {
   2cc40:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
   2cc44:	d022      	beq.n	2cc8c <hal_uart_baudrate+0xcc>
   2cc46:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   2cc4a:	d122      	bne.n	2cc92 <hal_uart_baudrate+0xd2>
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
   2cc4c:	4819      	ldr	r0, [pc, #100]	; (2ccb4 <hal_uart_baudrate+0xf4>)
   2cc4e:	4770      	bx	lr
    switch (baudrate) {
   2cc50:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
   2cc54:	d124      	bne.n	2cca0 <hal_uart_baudrate+0xe0>
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
   2cc56:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
   2cc5a:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
   2cc5c:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
   2cc60:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
   2cc62:	4815      	ldr	r0, [pc, #84]	; (2ccb8 <hal_uart_baudrate+0xf8>)
   2cc64:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
   2cc66:	4815      	ldr	r0, [pc, #84]	; (2ccbc <hal_uart_baudrate+0xfc>)
   2cc68:	4770      	bx	lr
    switch (baudrate) {
   2cc6a:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
   2cc6e:	4770      	bx	lr
    default:
        return 0;
   2cc70:	2000      	movs	r0, #0
   2cc72:	4770      	bx	lr
   2cc74:	2000      	movs	r0, #0
   2cc76:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
   2cc78:	4811      	ldr	r0, [pc, #68]	; (2ccc0 <hal_uart_baudrate+0x100>)
   2cc7a:	4770      	bx	lr
        return 0;
   2cc7c:	2000      	movs	r0, #0
   2cc7e:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
   2cc80:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   2cc84:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
   2cc86:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
   2cc8a:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
   2cc8c:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
   2cc90:	4770      	bx	lr
        return 0;
   2cc92:	2000      	movs	r0, #0
   2cc94:	4770      	bx	lr
   2cc96:	2000      	movs	r0, #0
   2cc98:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
   2cc9a:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
   2cc9e:	4770      	bx	lr
        return 0;
   2cca0:	2000      	movs	r0, #0
    }
}
   2cca2:	4770      	bx	lr
   2cca4:	00275000 	.word	0x00275000
   2cca8:	004ea000 	.word	0x004ea000
   2ccac:	0003d090 	.word	0x0003d090
   2ccb0:	000f4240 	.word	0x000f4240
   2ccb4:	013a9000 	.word	0x013a9000
   2ccb8:	003af000 	.word	0x003af000
   2ccbc:	0013b000 	.word	0x0013b000
   2ccc0:	0075c000 	.word	0x0075c000

0002ccc4 <hal_uart_init_cbs>:
{
   2ccc4:	b410      	push	{r4}
    if (port == 0) {
   2ccc6:	b118      	cbz	r0, 2ccd0 <hal_uart_init_cbs+0xc>
    } else if (port == 1) {
   2ccc8:	2801      	cmp	r0, #1
   2ccca:	d10e      	bne.n	2ccea <hal_uart_init_cbs+0x26>
        u = &uart1;
   2cccc:	480a      	ldr	r0, [pc, #40]	; (2ccf8 <hal_uart_init_cbs+0x34>)
   2ccce:	e000      	b.n	2ccd2 <hal_uart_init_cbs+0xe>
        u = &uart0;
   2ccd0:	480a      	ldr	r0, [pc, #40]	; (2ccfc <hal_uart_init_cbs+0x38>)
    if (u->u_open) {
   2ccd2:	7804      	ldrb	r4, [r0, #0]
   2ccd4:	f014 0f01 	tst.w	r4, #1
   2ccd8:	d10a      	bne.n	2ccf0 <hal_uart_init_cbs+0x2c>
    u->u_rx_func = rx_func;
   2ccda:	60c3      	str	r3, [r0, #12]
    u->u_tx_func = tx_func;
   2ccdc:	6101      	str	r1, [r0, #16]
    u->u_tx_done = tx_done;
   2ccde:	6142      	str	r2, [r0, #20]
    u->u_func_arg = arg;
   2cce0:	9b01      	ldr	r3, [sp, #4]
   2cce2:	6183      	str	r3, [r0, #24]
    return 0;
   2cce4:	2000      	movs	r0, #0
}
   2cce6:	bc10      	pop	{r4}
   2cce8:	4770      	bx	lr
        return -1;
   2ccea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ccee:	e7fa      	b.n	2cce6 <hal_uart_init_cbs+0x22>
        return -1;
   2ccf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ccf4:	e7f7      	b.n	2cce6 <hal_uart_init_cbs+0x22>
   2ccf6:	bf00      	nop
   2ccf8:	200051c8 	.word	0x200051c8
   2ccfc:	200051ac 	.word	0x200051ac

0002cd00 <hal_uart_start_tx>:
{
   2cd00:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
   2cd02:	b120      	cbz	r0, 2cd0e <hal_uart_start_tx+0xe>
    } else if (port == 1) {
   2cd04:	2801      	cmp	r0, #1
   2cd06:	d10d      	bne.n	2cd24 <hal_uart_start_tx+0x24>
        u = &uart1;
   2cd08:	4c11      	ldr	r4, [pc, #68]	; (2cd50 <hal_uart_start_tx+0x50>)
        nrf_uart = NRF_UARTE1;
   2cd0a:	4e12      	ldr	r6, [pc, #72]	; (2cd54 <hal_uart_start_tx+0x54>)
   2cd0c:	e001      	b.n	2cd12 <hal_uart_start_tx+0x12>
        u = &uart0;
   2cd0e:	4c12      	ldr	r4, [pc, #72]	; (2cd58 <hal_uart_start_tx+0x58>)
        nrf_uart = NRF_UARTE0;
   2cd10:	4e12      	ldr	r6, [pc, #72]	; (2cd5c <hal_uart_start_tx+0x5c>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2cd12:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2cd16:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
   2cd18:	7823      	ldrb	r3, [r4, #0]
   2cd1a:	f013 0f04 	tst.w	r3, #4
   2cd1e:	d002      	beq.n	2cd26 <hal_uart_start_tx+0x26>
    __HAL_ENABLE_INTERRUPTS(sr);
   2cd20:	b905      	cbnz	r5, 2cd24 <hal_uart_start_tx+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   2cd22:	b662      	cpsie	i
}
   2cd24:	bd70      	pop	{r4, r5, r6, pc}
        rc = hal_uart_tx_fill_buf(u);
   2cd26:	4620      	mov	r0, r4
   2cd28:	f7ff feec 	bl	2cb04 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   2cd2c:	2800      	cmp	r0, #0
   2cd2e:	ddf7      	ble.n	2cd20 <hal_uart_start_tx+0x20>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
   2cd30:	f44f 7380 	mov.w	r3, #256	; 0x100
   2cd34:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   2cd38:	1ca3      	adds	r3, r4, #2
   2cd3a:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   2cd3e:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   2cd42:	2301      	movs	r3, #1
   2cd44:	60b3      	str	r3, [r6, #8]
            u->u_tx_started = 1;
   2cd46:	7823      	ldrb	r3, [r4, #0]
   2cd48:	f043 0304 	orr.w	r3, r3, #4
   2cd4c:	7023      	strb	r3, [r4, #0]
   2cd4e:	e7e7      	b.n	2cd20 <hal_uart_start_tx+0x20>
   2cd50:	200051c8 	.word	0x200051c8
   2cd54:	40028000 	.word	0x40028000
   2cd58:	200051ac 	.word	0x200051ac
   2cd5c:	40002000 	.word	0x40002000

0002cd60 <hal_uart_start_rx>:
{
   2cd60:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
   2cd62:	b120      	cbz	r0, 2cd6e <hal_uart_start_rx+0xe>
    } else if (port == 1) {
   2cd64:	2801      	cmp	r0, #1
   2cd66:	d118      	bne.n	2cd9a <hal_uart_start_rx+0x3a>
        u = &uart1;
   2cd68:	4c0c      	ldr	r4, [pc, #48]	; (2cd9c <hal_uart_start_rx+0x3c>)
        nrf_uart = NRF_UARTE1;
   2cd6a:	4d0d      	ldr	r5, [pc, #52]	; (2cda0 <hal_uart_start_rx+0x40>)
   2cd6c:	e001      	b.n	2cd72 <hal_uart_start_rx+0x12>
        u = &uart0;
   2cd6e:	4c0d      	ldr	r4, [pc, #52]	; (2cda4 <hal_uart_start_rx+0x44>)
        nrf_uart = NRF_UARTE0;
   2cd70:	4d0d      	ldr	r5, [pc, #52]	; (2cda8 <hal_uart_start_rx+0x48>)
    if (u->u_rx_stall) {
   2cd72:	7823      	ldrb	r3, [r4, #0]
   2cd74:	f013 0f02 	tst.w	r3, #2
   2cd78:	d00f      	beq.n	2cd9a <hal_uart_start_rx+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2cd7a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2cd7e:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2cd80:	68e3      	ldr	r3, [r4, #12]
   2cd82:	7861      	ldrb	r1, [r4, #1]
   2cd84:	69a0      	ldr	r0, [r4, #24]
   2cd86:	4798      	blx	r3
        if (rc == 0) {
   2cd88:	b928      	cbnz	r0, 2cd96 <hal_uart_start_rx+0x36>
            u->u_rx_stall = 0;
   2cd8a:	7823      	ldrb	r3, [r4, #0]
   2cd8c:	f36f 0341 	bfc	r3, #1, #1
   2cd90:	7023      	strb	r3, [r4, #0]
            nrf_uart->TASKS_STARTRX = 1;
   2cd92:	2301      	movs	r3, #1
   2cd94:	602b      	str	r3, [r5, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
   2cd96:	b906      	cbnz	r6, 2cd9a <hal_uart_start_rx+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
   2cd98:	b662      	cpsie	i
}
   2cd9a:	bd70      	pop	{r4, r5, r6, pc}
   2cd9c:	200051c8 	.word	0x200051c8
   2cda0:	40028000 	.word	0x40028000
   2cda4:	200051ac 	.word	0x200051ac
   2cda8:	40002000 	.word	0x40002000

0002cdac <hal_uart_blocking_tx>:
{
   2cdac:	b082      	sub	sp, #8
   2cdae:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port == 0) {
   2cdb2:	b120      	cbz	r0, 2cdbe <hal_uart_blocking_tx+0x12>
    } else if (port == 1) {
   2cdb4:	2801      	cmp	r0, #1
   2cdb6:	d120      	bne.n	2cdfa <hal_uart_blocking_tx+0x4e>
        nrf_uart = NRF_UARTE1;
   2cdb8:	4b11      	ldr	r3, [pc, #68]	; (2ce00 <hal_uart_blocking_tx+0x54>)
        u = &uart1;
   2cdba:	4a12      	ldr	r2, [pc, #72]	; (2ce04 <hal_uart_blocking_tx+0x58>)
   2cdbc:	e001      	b.n	2cdc2 <hal_uart_blocking_tx+0x16>
        nrf_uart = NRF_UARTE0;
   2cdbe:	4b12      	ldr	r3, [pc, #72]	; (2ce08 <hal_uart_blocking_tx+0x5c>)
        u = &uart0;
   2cdc0:	4a12      	ldr	r2, [pc, #72]	; (2ce0c <hal_uart_blocking_tx+0x60>)
    if (!u->u_open) {
   2cdc2:	7812      	ldrb	r2, [r2, #0]
   2cdc4:	f012 0f01 	tst.w	r2, #1
   2cdc8:	d017      	beq.n	2cdfa <hal_uart_blocking_tx+0x4e>
    if (u->u_tx_started) {
   2cdca:	f012 0f04 	tst.w	r2, #4
   2cdce:	d003      	beq.n	2cdd8 <hal_uart_blocking_tx+0x2c>
        while (nrf_uart->EVENTS_ENDTX == 0) {
   2cdd0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2cdd4:	2a00      	cmp	r2, #0
   2cdd6:	d0fb      	beq.n	2cdd0 <hal_uart_blocking_tx+0x24>
    nrf_uart->EVENTS_ENDTX = 0;
   2cdd8:	2200      	movs	r2, #0
   2cdda:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
   2cdde:	f10d 0207 	add.w	r2, sp, #7
   2cde2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
   2cde6:	2201      	movs	r2, #1
   2cde8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
   2cdec:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
   2cdee:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2cdf2:	2a00      	cmp	r2, #0
   2cdf4:	d0fb      	beq.n	2cdee <hal_uart_blocking_tx+0x42>
    nrf_uart->TASKS_STOPTX = 1;
   2cdf6:	2201      	movs	r2, #1
   2cdf8:	60da      	str	r2, [r3, #12]
}
   2cdfa:	b002      	add	sp, #8
   2cdfc:	4770      	bx	lr
   2cdfe:	bf00      	nop
   2ce00:	40028000 	.word	0x40028000
   2ce04:	200051c8 	.word	0x200051c8
   2ce08:	40002000 	.word	0x40002000
   2ce0c:	200051ac 	.word	0x200051ac

0002ce10 <hal_uart_init>:
{
    struct nrf52_uart_cfg *cfg;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   2ce10:	b9b0      	cbnz	r0, 2ce40 <hal_uart_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2ce12:	4b11      	ldr	r3, [pc, #68]	; (2ce58 <hal_uart_init+0x48>)
   2ce14:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2ce16:	4a11      	ldr	r2, [pc, #68]	; (2ce5c <hal_uart_init+0x4c>)
   2ce18:	649a      	str	r2, [r3, #72]	; 0x48
        nrf_uart = NRF_UARTE0;
   2ce1a:	4b11      	ldr	r3, [pc, #68]	; (2ce60 <hal_uart_init+0x50>)
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
   2ce1c:	f991 2000 	ldrsb.w	r2, [r1]
   2ce20:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
   2ce24:	f991 2001 	ldrsb.w	r2, [r1, #1]
   2ce28:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
   2ce2c:	f991 2002 	ldrsb.w	r2, [r1, #2]
   2ce30:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
   2ce34:	f991 2003 	ldrsb.w	r2, [r1, #3]
   2ce38:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

    return 0;
   2ce3c:	2000      	movs	r0, #0
   2ce3e:	4770      	bx	lr
    } else if (port == 1) {
   2ce40:	2801      	cmp	r0, #1
   2ce42:	d106      	bne.n	2ce52 <hal_uart_init+0x42>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2ce44:	4b04      	ldr	r3, [pc, #16]	; (2ce58 <hal_uart_init+0x48>)
   2ce46:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2ce48:	4a06      	ldr	r2, [pc, #24]	; (2ce64 <hal_uart_init+0x54>)
   2ce4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        nrf_uart = NRF_UARTE1;
   2ce4e:	4b06      	ldr	r3, [pc, #24]	; (2ce68 <hal_uart_init+0x58>)
}
   2ce50:	e7e4      	b.n	2ce1c <hal_uart_init+0xc>
        return -1;
   2ce52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2ce56:	4770      	bx	lr
   2ce58:	e000ed00 	.word	0xe000ed00
   2ce5c:	0002cb99 	.word	0x0002cb99
   2ce60:	40002000 	.word	0x40002000
   2ce64:	0002cbad 	.word	0x0002cbad
   2ce68:	40028000 	.word	0x40028000

0002ce6c <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   2ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ce6e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    uint32_t baud_reg;
    NRF_UARTE_Type *nrf_uart;
    IRQn_Type irqnum;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   2ce72:	b128      	cbz	r0, 2ce80 <hal_uart_config+0x14>
        nrf_uart = NRF_UARTE0;
        irqnum = UARTE0_UART0_IRQn;
        u = &uart0;
    } else if (port == 1) {
   2ce74:	2801      	cmp	r0, #1
   2ce76:	d15b      	bne.n	2cf30 <hal_uart_config+0xc4>
        nrf_uart = NRF_UARTE1;
        irqnum = UARTE1_IRQn;
   2ce78:	2728      	movs	r7, #40	; 0x28
        nrf_uart = NRF_UARTE1;
   2ce7a:	4c36      	ldr	r4, [pc, #216]	; (2cf54 <hal_uart_config+0xe8>)
        u = &uart1;
   2ce7c:	4d36      	ldr	r5, [pc, #216]	; (2cf58 <hal_uart_config+0xec>)
   2ce7e:	e002      	b.n	2ce86 <hal_uart_config+0x1a>
        irqnum = UARTE0_UART0_IRQn;
   2ce80:	2702      	movs	r7, #2
        nrf_uart = NRF_UARTE0;
   2ce82:	4c36      	ldr	r4, [pc, #216]	; (2cf5c <hal_uart_config+0xf0>)
        u = &uart0;
   2ce84:	4d36      	ldr	r5, [pc, #216]	; (2cf60 <hal_uart_config+0xf4>)
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
   2ce86:	7828      	ldrb	r0, [r5, #0]
   2ce88:	f010 0f01 	tst.w	r0, #1
   2ce8c:	d153      	bne.n	2cf36 <hal_uart_config+0xca>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
   2ce8e:	2a08      	cmp	r2, #8
   2ce90:	d154      	bne.n	2cf3c <hal_uart_config+0xd0>
        return -1;
    }
    if (stopbits != 1) {
   2ce92:	2b01      	cmp	r3, #1
   2ce94:	d155      	bne.n	2cf42 <hal_uart_config+0xd6>
        return -1;
    }

    switch (parity) {
   2ce96:	2e01      	cmp	r6, #1
   2ce98:	d056      	beq.n	2cf48 <hal_uart_config+0xdc>
   2ce9a:	2e02      	cmp	r6, #2
   2ce9c:	d130      	bne.n	2cf00 <hal_uart_config+0x94>
    case HAL_UART_PARITY_NONE:
        break;
    case HAL_UART_PARITY_ODD:
        return -1;
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
   2ce9e:	260e      	movs	r6, #14
        break;
    }

    switch (flow_ctl) {
   2cea0:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2cea4:	2b01      	cmp	r3, #1
   2cea6:	d02d      	beq.n	2cf04 <hal_uart_config+0x98>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
   2cea8:	4608      	mov	r0, r1
   2ceaa:	f7ff fe89 	bl	2cbc0 <hal_uart_baudrate>
    if (baud_reg == 0) {
   2ceae:	4603      	mov	r3, r0
   2ceb0:	2800      	cmp	r0, #0
   2ceb2:	d04c      	beq.n	2cf4e <hal_uart_config+0xe2>
        return -1;
    }
    nrf_uart->ENABLE = 0;
   2ceb4:	2000      	movs	r0, #0
   2ceb6:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   2ceba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cebe:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
   2cec2:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
   2cec6:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ceca:	f007 010a 	and.w	r1, r7, #10
   2cece:	097b      	lsrs	r3, r7, #5
   2ced0:	2201      	movs	r2, #1
   2ced2:	fa02 f101 	lsl.w	r1, r2, r1
   2ced6:	4e23      	ldr	r6, [pc, #140]	; (2cf64 <hal_uart_config+0xf8>)
   2ced8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
   2cedc:	2308      	movs	r3, #8
   2cede:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
   2cee2:	2310      	movs	r3, #16
   2cee4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
   2cee8:	18ab      	adds	r3, r5, r2
   2ceea:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
   2ceee:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
   2cef2:	6022      	str	r2, [r4, #0]

    u->u_rx_stall = 0;
   2cef4:	782b      	ldrb	r3, [r5, #0]
    u->u_tx_started = 0;
    u->u_open = 1;
   2cef6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   2cefa:	4313      	orrs	r3, r2
   2cefc:	702b      	strb	r3, [r5, #0]

    return 0;
}
   2cefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (parity) {
   2cf00:	2600      	movs	r6, #0
   2cf02:	e7cd      	b.n	2cea0 <hal_uart_config+0x34>
        cfg_reg |= UARTE_CONFIG_HWFC;
   2cf04:	f046 0601 	orr.w	r6, r6, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   2cf08:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
   2cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2cf10:	d004      	beq.n	2cf1c <hal_uart_config+0xb0>
          nrf_uart->PSEL.CTS == 0xffffffff) {
   2cf12:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   2cf16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2cf1a:	d1c5      	bne.n	2cea8 <hal_uart_config+0x3c>
            assert(0);
   2cf1c:	f7df f93e 	bl	c19c <hal_debugger_connected>
   2cf20:	b100      	cbz	r0, 2cf24 <hal_uart_config+0xb8>
   2cf22:	be01      	bkpt	0x0001
   2cf24:	2300      	movs	r3, #0
   2cf26:	461a      	mov	r2, r3
   2cf28:	4619      	mov	r1, r3
   2cf2a:	4618      	mov	r0, r3
   2cf2c:	f7df fe3a 	bl	cba4 <__assert_func>
        return -1;
   2cf30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf34:	e7e3      	b.n	2cefe <hal_uart_config+0x92>
        return -1;
   2cf36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf3a:	e7e0      	b.n	2cefe <hal_uart_config+0x92>
        return -1;
   2cf3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf40:	e7dd      	b.n	2cefe <hal_uart_config+0x92>
        return -1;
   2cf42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf46:	e7da      	b.n	2cefe <hal_uart_config+0x92>
    switch (parity) {
   2cf48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf4c:	e7d7      	b.n	2cefe <hal_uart_config+0x92>
        return -1;
   2cf4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cf52:	e7d4      	b.n	2cefe <hal_uart_config+0x92>
   2cf54:	40028000 	.word	0x40028000
   2cf58:	200051c8 	.word	0x200051c8
   2cf5c:	40002000 	.word	0x40002000
   2cf60:	200051ac 	.word	0x200051ac
   2cf64:	e000e100 	.word	0xe000e100

0002cf68 <hal_uart_close>:
{
    volatile struct hal_uart *u;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   2cf68:	b120      	cbz	r0, 2cf74 <hal_uart_close+0xc>
        nrf_uart = NRF_UARTE0;
        u = &uart0;
    } else if (port == 1) {
   2cf6a:	2801      	cmp	r0, #1
   2cf6c:	d114      	bne.n	2cf98 <hal_uart_close+0x30>
        nrf_uart = NRF_UARTE1;
   2cf6e:	490c      	ldr	r1, [pc, #48]	; (2cfa0 <hal_uart_close+0x38>)
        u = &uart1;
   2cf70:	4a0c      	ldr	r2, [pc, #48]	; (2cfa4 <hal_uart_close+0x3c>)
   2cf72:	e001      	b.n	2cf78 <hal_uart_close+0x10>
        nrf_uart = NRF_UARTE0;
   2cf74:	490c      	ldr	r1, [pc, #48]	; (2cfa8 <hal_uart_close+0x40>)
        u = &uart0;
   2cf76:	4a0d      	ldr	r2, [pc, #52]	; (2cfac <hal_uart_close+0x44>)
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
   2cf78:	7813      	ldrb	r3, [r2, #0]
   2cf7a:	f36f 0300 	bfc	r3, #0, #1
   2cf7e:	7013      	strb	r3, [r2, #0]
    while (u->u_tx_started) {
   2cf80:	7813      	ldrb	r3, [r2, #0]
   2cf82:	f013 0f04 	tst.w	r3, #4
   2cf86:	d1fb      	bne.n	2cf80 <hal_uart_close+0x18>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
   2cf88:	2000      	movs	r0, #0
   2cf8a:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   2cf8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cf92:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    return 0;
   2cf96:	4770      	bx	lr
        return -1;
   2cf98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2cf9c:	4770      	bx	lr
   2cf9e:	bf00      	nop
   2cfa0:	40028000 	.word	0x40028000
   2cfa4:	200051c8 	.word	0x200051c8
   2cfa8:	40002000 	.word	0x40002000
   2cfac:	200051ac 	.word	0x200051ac

0002cfb0 <__aeabi_uldivmod>:
   2cfb0:	b953      	cbnz	r3, 2cfc8 <__aeabi_uldivmod+0x18>
   2cfb2:	b94a      	cbnz	r2, 2cfc8 <__aeabi_uldivmod+0x18>
   2cfb4:	2900      	cmp	r1, #0
   2cfb6:	bf08      	it	eq
   2cfb8:	2800      	cmpeq	r0, #0
   2cfba:	bf1c      	itt	ne
   2cfbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   2cfc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2cfc4:	f000 b980 	b.w	2d2c8 <__aeabi_idiv0>
   2cfc8:	f1ad 0c08 	sub.w	ip, sp, #8
   2cfcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2cfd0:	f000 f81a 	bl	2d008 <__udivmoddi4>
   2cfd4:	f8dd e004 	ldr.w	lr, [sp, #4]
   2cfd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2cfdc:	b004      	add	sp, #16
   2cfde:	4770      	bx	lr

0002cfe0 <__popcountsi2>:
   2cfe0:	0843      	lsrs	r3, r0, #1
   2cfe2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   2cfe6:	1ac0      	subs	r0, r0, r3
   2cfe8:	0883      	lsrs	r3, r0, #2
   2cfea:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   2cfee:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   2cff2:	4418      	add	r0, r3
   2cff4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   2cff8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   2cffc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   2d000:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   2d004:	0e00      	lsrs	r0, r0, #24
   2d006:	4770      	bx	lr

0002d008 <__udivmoddi4>:
   2d008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d00c:	9e08      	ldr	r6, [sp, #32]
   2d00e:	460d      	mov	r5, r1
   2d010:	4604      	mov	r4, r0
   2d012:	468e      	mov	lr, r1
   2d014:	2b00      	cmp	r3, #0
   2d016:	f040 8082 	bne.w	2d11e <__udivmoddi4+0x116>
   2d01a:	428a      	cmp	r2, r1
   2d01c:	4617      	mov	r7, r2
   2d01e:	d946      	bls.n	2d0ae <__udivmoddi4+0xa6>
   2d020:	fab2 f282 	clz	r2, r2
   2d024:	b14a      	cbz	r2, 2d03a <__udivmoddi4+0x32>
   2d026:	f1c2 0120 	rsb	r1, r2, #32
   2d02a:	fa05 f302 	lsl.w	r3, r5, r2
   2d02e:	fa20 f101 	lsr.w	r1, r0, r1
   2d032:	4097      	lsls	r7, r2
   2d034:	ea41 0e03 	orr.w	lr, r1, r3
   2d038:	4094      	lsls	r4, r2
   2d03a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   2d03e:	0c23      	lsrs	r3, r4, #16
   2d040:	fbbe fcf8 	udiv	ip, lr, r8
   2d044:	b2b9      	uxth	r1, r7
   2d046:	fb08 ee1c 	mls	lr, r8, ip, lr
   2d04a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   2d04e:	fb0c f001 	mul.w	r0, ip, r1
   2d052:	4298      	cmp	r0, r3
   2d054:	d90a      	bls.n	2d06c <__udivmoddi4+0x64>
   2d056:	18fb      	adds	r3, r7, r3
   2d058:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   2d05c:	f080 8116 	bcs.w	2d28c <__udivmoddi4+0x284>
   2d060:	4298      	cmp	r0, r3
   2d062:	f240 8113 	bls.w	2d28c <__udivmoddi4+0x284>
   2d066:	f1ac 0c02 	sub.w	ip, ip, #2
   2d06a:	443b      	add	r3, r7
   2d06c:	1a1b      	subs	r3, r3, r0
   2d06e:	b2a4      	uxth	r4, r4
   2d070:	fbb3 f0f8 	udiv	r0, r3, r8
   2d074:	fb08 3310 	mls	r3, r8, r0, r3
   2d078:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2d07c:	fb00 f101 	mul.w	r1, r0, r1
   2d080:	42a1      	cmp	r1, r4
   2d082:	d909      	bls.n	2d098 <__udivmoddi4+0x90>
   2d084:	193c      	adds	r4, r7, r4
   2d086:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2d08a:	f080 8101 	bcs.w	2d290 <__udivmoddi4+0x288>
   2d08e:	42a1      	cmp	r1, r4
   2d090:	f240 80fe 	bls.w	2d290 <__udivmoddi4+0x288>
   2d094:	3802      	subs	r0, #2
   2d096:	443c      	add	r4, r7
   2d098:	1a64      	subs	r4, r4, r1
   2d09a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2d09e:	2100      	movs	r1, #0
   2d0a0:	b11e      	cbz	r6, 2d0aa <__udivmoddi4+0xa2>
   2d0a2:	40d4      	lsrs	r4, r2
   2d0a4:	2300      	movs	r3, #0
   2d0a6:	e9c6 4300 	strd	r4, r3, [r6]
   2d0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d0ae:	b902      	cbnz	r2, 2d0b2 <__udivmoddi4+0xaa>
   2d0b0:	deff      	udf	#255	; 0xff
   2d0b2:	fab2 f282 	clz	r2, r2
   2d0b6:	2a00      	cmp	r2, #0
   2d0b8:	d14f      	bne.n	2d15a <__udivmoddi4+0x152>
   2d0ba:	1bcb      	subs	r3, r1, r7
   2d0bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   2d0c0:	fa1f f887 	uxth.w	r8, r7
   2d0c4:	2101      	movs	r1, #1
   2d0c6:	fbb3 fcfe 	udiv	ip, r3, lr
   2d0ca:	0c25      	lsrs	r5, r4, #16
   2d0cc:	fb0e 331c 	mls	r3, lr, ip, r3
   2d0d0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   2d0d4:	fb08 f30c 	mul.w	r3, r8, ip
   2d0d8:	42ab      	cmp	r3, r5
   2d0da:	d907      	bls.n	2d0ec <__udivmoddi4+0xe4>
   2d0dc:	197d      	adds	r5, r7, r5
   2d0de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   2d0e2:	d202      	bcs.n	2d0ea <__udivmoddi4+0xe2>
   2d0e4:	42ab      	cmp	r3, r5
   2d0e6:	f200 80e7 	bhi.w	2d2b8 <__udivmoddi4+0x2b0>
   2d0ea:	4684      	mov	ip, r0
   2d0ec:	1aed      	subs	r5, r5, r3
   2d0ee:	b2a3      	uxth	r3, r4
   2d0f0:	fbb5 f0fe 	udiv	r0, r5, lr
   2d0f4:	fb0e 5510 	mls	r5, lr, r0, r5
   2d0f8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   2d0fc:	fb08 f800 	mul.w	r8, r8, r0
   2d100:	45a0      	cmp	r8, r4
   2d102:	d907      	bls.n	2d114 <__udivmoddi4+0x10c>
   2d104:	193c      	adds	r4, r7, r4
   2d106:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2d10a:	d202      	bcs.n	2d112 <__udivmoddi4+0x10a>
   2d10c:	45a0      	cmp	r8, r4
   2d10e:	f200 80d7 	bhi.w	2d2c0 <__udivmoddi4+0x2b8>
   2d112:	4618      	mov	r0, r3
   2d114:	eba4 0408 	sub.w	r4, r4, r8
   2d118:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2d11c:	e7c0      	b.n	2d0a0 <__udivmoddi4+0x98>
   2d11e:	428b      	cmp	r3, r1
   2d120:	d908      	bls.n	2d134 <__udivmoddi4+0x12c>
   2d122:	2e00      	cmp	r6, #0
   2d124:	f000 80af 	beq.w	2d286 <__udivmoddi4+0x27e>
   2d128:	2100      	movs	r1, #0
   2d12a:	e9c6 0500 	strd	r0, r5, [r6]
   2d12e:	4608      	mov	r0, r1
   2d130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d134:	fab3 f183 	clz	r1, r3
   2d138:	2900      	cmp	r1, #0
   2d13a:	d14b      	bne.n	2d1d4 <__udivmoddi4+0x1cc>
   2d13c:	42ab      	cmp	r3, r5
   2d13e:	d302      	bcc.n	2d146 <__udivmoddi4+0x13e>
   2d140:	4282      	cmp	r2, r0
   2d142:	f200 80b7 	bhi.w	2d2b4 <__udivmoddi4+0x2ac>
   2d146:	1a84      	subs	r4, r0, r2
   2d148:	eb65 0303 	sbc.w	r3, r5, r3
   2d14c:	2001      	movs	r0, #1
   2d14e:	469e      	mov	lr, r3
   2d150:	2e00      	cmp	r6, #0
   2d152:	d0aa      	beq.n	2d0aa <__udivmoddi4+0xa2>
   2d154:	e9c6 4e00 	strd	r4, lr, [r6]
   2d158:	e7a7      	b.n	2d0aa <__udivmoddi4+0xa2>
   2d15a:	f1c2 0c20 	rsb	ip, r2, #32
   2d15e:	fa01 f302 	lsl.w	r3, r1, r2
   2d162:	4097      	lsls	r7, r2
   2d164:	fa20 f00c 	lsr.w	r0, r0, ip
   2d168:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   2d16c:	fa21 fc0c 	lsr.w	ip, r1, ip
   2d170:	4318      	orrs	r0, r3
   2d172:	fbbc f1fe 	udiv	r1, ip, lr
   2d176:	0c05      	lsrs	r5, r0, #16
   2d178:	fb0e cc11 	mls	ip, lr, r1, ip
   2d17c:	fa1f f887 	uxth.w	r8, r7
   2d180:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   2d184:	fb01 f308 	mul.w	r3, r1, r8
   2d188:	42ab      	cmp	r3, r5
   2d18a:	fa04 f402 	lsl.w	r4, r4, r2
   2d18e:	d909      	bls.n	2d1a4 <__udivmoddi4+0x19c>
   2d190:	197d      	adds	r5, r7, r5
   2d192:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   2d196:	f080 808b 	bcs.w	2d2b0 <__udivmoddi4+0x2a8>
   2d19a:	42ab      	cmp	r3, r5
   2d19c:	f240 8088 	bls.w	2d2b0 <__udivmoddi4+0x2a8>
   2d1a0:	3902      	subs	r1, #2
   2d1a2:	443d      	add	r5, r7
   2d1a4:	1aeb      	subs	r3, r5, r3
   2d1a6:	b285      	uxth	r5, r0
   2d1a8:	fbb3 f0fe 	udiv	r0, r3, lr
   2d1ac:	fb0e 3310 	mls	r3, lr, r0, r3
   2d1b0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   2d1b4:	fb00 f308 	mul.w	r3, r0, r8
   2d1b8:	42ab      	cmp	r3, r5
   2d1ba:	d907      	bls.n	2d1cc <__udivmoddi4+0x1c4>
   2d1bc:	197d      	adds	r5, r7, r5
   2d1be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   2d1c2:	d271      	bcs.n	2d2a8 <__udivmoddi4+0x2a0>
   2d1c4:	42ab      	cmp	r3, r5
   2d1c6:	d96f      	bls.n	2d2a8 <__udivmoddi4+0x2a0>
   2d1c8:	3802      	subs	r0, #2
   2d1ca:	443d      	add	r5, r7
   2d1cc:	1aeb      	subs	r3, r5, r3
   2d1ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   2d1d2:	e778      	b.n	2d0c6 <__udivmoddi4+0xbe>
   2d1d4:	f1c1 0c20 	rsb	ip, r1, #32
   2d1d8:	408b      	lsls	r3, r1
   2d1da:	fa22 f70c 	lsr.w	r7, r2, ip
   2d1de:	431f      	orrs	r7, r3
   2d1e0:	fa20 f40c 	lsr.w	r4, r0, ip
   2d1e4:	fa05 f301 	lsl.w	r3, r5, r1
   2d1e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   2d1ec:	fa25 f50c 	lsr.w	r5, r5, ip
   2d1f0:	431c      	orrs	r4, r3
   2d1f2:	0c23      	lsrs	r3, r4, #16
   2d1f4:	fbb5 f9fe 	udiv	r9, r5, lr
   2d1f8:	fa1f f887 	uxth.w	r8, r7
   2d1fc:	fb0e 5519 	mls	r5, lr, r9, r5
   2d200:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   2d204:	fb09 fa08 	mul.w	sl, r9, r8
   2d208:	45aa      	cmp	sl, r5
   2d20a:	fa02 f201 	lsl.w	r2, r2, r1
   2d20e:	fa00 f301 	lsl.w	r3, r0, r1
   2d212:	d908      	bls.n	2d226 <__udivmoddi4+0x21e>
   2d214:	197d      	adds	r5, r7, r5
   2d216:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   2d21a:	d247      	bcs.n	2d2ac <__udivmoddi4+0x2a4>
   2d21c:	45aa      	cmp	sl, r5
   2d21e:	d945      	bls.n	2d2ac <__udivmoddi4+0x2a4>
   2d220:	f1a9 0902 	sub.w	r9, r9, #2
   2d224:	443d      	add	r5, r7
   2d226:	eba5 050a 	sub.w	r5, r5, sl
   2d22a:	b2a4      	uxth	r4, r4
   2d22c:	fbb5 f0fe 	udiv	r0, r5, lr
   2d230:	fb0e 5510 	mls	r5, lr, r0, r5
   2d234:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   2d238:	fb00 f808 	mul.w	r8, r0, r8
   2d23c:	45a0      	cmp	r8, r4
   2d23e:	d907      	bls.n	2d250 <__udivmoddi4+0x248>
   2d240:	193c      	adds	r4, r7, r4
   2d242:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   2d246:	d22d      	bcs.n	2d2a4 <__udivmoddi4+0x29c>
   2d248:	45a0      	cmp	r8, r4
   2d24a:	d92b      	bls.n	2d2a4 <__udivmoddi4+0x29c>
   2d24c:	3802      	subs	r0, #2
   2d24e:	443c      	add	r4, r7
   2d250:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   2d254:	eba4 0408 	sub.w	r4, r4, r8
   2d258:	fba0 8902 	umull	r8, r9, r0, r2
   2d25c:	454c      	cmp	r4, r9
   2d25e:	46c6      	mov	lr, r8
   2d260:	464d      	mov	r5, r9
   2d262:	d319      	bcc.n	2d298 <__udivmoddi4+0x290>
   2d264:	d016      	beq.n	2d294 <__udivmoddi4+0x28c>
   2d266:	b15e      	cbz	r6, 2d280 <__udivmoddi4+0x278>
   2d268:	ebb3 020e 	subs.w	r2, r3, lr
   2d26c:	eb64 0405 	sbc.w	r4, r4, r5
   2d270:	fa04 fc0c 	lsl.w	ip, r4, ip
   2d274:	40ca      	lsrs	r2, r1
   2d276:	ea4c 0202 	orr.w	r2, ip, r2
   2d27a:	40cc      	lsrs	r4, r1
   2d27c:	e9c6 2400 	strd	r2, r4, [r6]
   2d280:	2100      	movs	r1, #0
   2d282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d286:	4631      	mov	r1, r6
   2d288:	4630      	mov	r0, r6
   2d28a:	e70e      	b.n	2d0aa <__udivmoddi4+0xa2>
   2d28c:	46ac      	mov	ip, r5
   2d28e:	e6ed      	b.n	2d06c <__udivmoddi4+0x64>
   2d290:	4618      	mov	r0, r3
   2d292:	e701      	b.n	2d098 <__udivmoddi4+0x90>
   2d294:	4543      	cmp	r3, r8
   2d296:	d2e6      	bcs.n	2d266 <__udivmoddi4+0x25e>
   2d298:	ebb8 0e02 	subs.w	lr, r8, r2
   2d29c:	eb69 0507 	sbc.w	r5, r9, r7
   2d2a0:	3801      	subs	r0, #1
   2d2a2:	e7e0      	b.n	2d266 <__udivmoddi4+0x25e>
   2d2a4:	4628      	mov	r0, r5
   2d2a6:	e7d3      	b.n	2d250 <__udivmoddi4+0x248>
   2d2a8:	4660      	mov	r0, ip
   2d2aa:	e78f      	b.n	2d1cc <__udivmoddi4+0x1c4>
   2d2ac:	4681      	mov	r9, r0
   2d2ae:	e7ba      	b.n	2d226 <__udivmoddi4+0x21e>
   2d2b0:	4661      	mov	r1, ip
   2d2b2:	e777      	b.n	2d1a4 <__udivmoddi4+0x19c>
   2d2b4:	4608      	mov	r0, r1
   2d2b6:	e74b      	b.n	2d150 <__udivmoddi4+0x148>
   2d2b8:	f1ac 0c02 	sub.w	ip, ip, #2
   2d2bc:	443d      	add	r5, r7
   2d2be:	e715      	b.n	2d0ec <__udivmoddi4+0xe4>
   2d2c0:	3802      	subs	r0, #2
   2d2c2:	443c      	add	r4, r7
   2d2c4:	e726      	b.n	2d114 <__udivmoddi4+0x10c>
   2d2c6:	bf00      	nop

0002d2c8 <__aeabi_idiv0>:
   2d2c8:	4770      	bx	lr
   2d2ca:	bf00      	nop

0002d2cc <__init_array_end>:
   2d2cc:	65736552 	.word	0x65736552
   2d2d0:	6e697474 	.word	0x6e697474
   2d2d4:	74732067 	.word	0x74732067
   2d2d8:	3b657461 	.word	0x3b657461
   2d2dc:	61657220 	.word	0x61657220
   2d2e0:	3d6e6f73 	.word	0x3d6e6f73
   2d2e4:	000a6425 	.word	0x000a6425
   2d2e8:	6f727265 	.word	0x6f727265
   2d2ec:	65642072 	.word	0x65642072
   2d2f0:	6d726574 	.word	0x6d726574
   2d2f4:	6e696e69 	.word	0x6e696e69
   2d2f8:	64612067 	.word	0x64612067
   2d2fc:	73657264 	.word	0x73657264
   2d300:	79742073 	.word	0x79742073
   2d304:	203b6570 	.word	0x203b6570
   2d308:	253d6372 	.word	0x253d6372
   2d30c:	00000a64 	.word	0x00000a64
   2d310:	6f727265 	.word	0x6f727265
   2d314:	65732072 	.word	0x65732072
   2d318:	6e697474 	.word	0x6e697474
   2d31c:	64612067 	.word	0x64612067
   2d320:	74726576 	.word	0x74726576
   2d324:	6d657369 	.word	0x6d657369
   2d328:	20746e65 	.word	0x20746e65
   2d32c:	61746164 	.word	0x61746164
   2d330:	6372203b 	.word	0x6372203b
   2d334:	0a64253d 	.word	0x0a64253d
   2d338:	00000000 	.word	0x00000000
   2d33c:	6f727265 	.word	0x6f727265
   2d340:	6e652072 	.word	0x6e652072
   2d344:	696c6261 	.word	0x696c6261
   2d348:	6120676e 	.word	0x6120676e
   2d34c:	72657664 	.word	0x72657664
   2d350:	65736974 	.word	0x65736974
   2d354:	746e656d 	.word	0x746e656d
   2d358:	6372203b 	.word	0x6372203b
   2d35c:	0a64253d 	.word	0x0a64253d
   2d360:	00000000 	.word	0x00000000
   2d364:	646e6168 	.word	0x646e6168
   2d368:	253d656c 	.word	0x253d656c
   2d36c:	756f2064 	.word	0x756f2064
   2d370:	746f5f72 	.word	0x746f5f72
   2d374:	64615f61 	.word	0x64615f61
   2d378:	745f7264 	.word	0x745f7264
   2d37c:	3d657079 	.word	0x3d657079
   2d380:	6f206425 	.word	0x6f206425
   2d384:	6f5f7275 	.word	0x6f5f7275
   2d388:	615f6174 	.word	0x615f6174
   2d38c:	3d726464 	.word	0x3d726464
   2d390:	00000000 	.word	0x00000000
   2d394:	72756f20 	.word	0x72756f20
   2d398:	5f64695f 	.word	0x5f64695f
   2d39c:	72646461 	.word	0x72646461
   2d3a0:	7079745f 	.word	0x7079745f
   2d3a4:	64253d65 	.word	0x64253d65
   2d3a8:	72756f20 	.word	0x72756f20
   2d3ac:	5f64695f 	.word	0x5f64695f
   2d3b0:	72646461 	.word	0x72646461
   2d3b4:	0000003d 	.word	0x0000003d
   2d3b8:	65657020 	.word	0x65657020
   2d3bc:	746f5f72 	.word	0x746f5f72
   2d3c0:	64615f61 	.word	0x64615f61
   2d3c4:	745f7264 	.word	0x745f7264
   2d3c8:	3d657079 	.word	0x3d657079
   2d3cc:	70206425 	.word	0x70206425
   2d3d0:	5f726565 	.word	0x5f726565
   2d3d4:	5f61746f 	.word	0x5f61746f
   2d3d8:	72646461 	.word	0x72646461
   2d3dc:	0000003d 	.word	0x0000003d
   2d3e0:	65657020 	.word	0x65657020
   2d3e4:	64695f72 	.word	0x64695f72
   2d3e8:	6464615f 	.word	0x6464615f
   2d3ec:	79745f72 	.word	0x79745f72
   2d3f0:	253d6570 	.word	0x253d6570
   2d3f4:	65702064 	.word	0x65702064
   2d3f8:	695f7265 	.word	0x695f7265
   2d3fc:	64615f64 	.word	0x64615f64
   2d400:	003d7264 	.word	0x003d7264
   2d404:	6e6f6320 	.word	0x6e6f6320
   2d408:	74695f6e 	.word	0x74695f6e
   2d40c:	253d6c76 	.word	0x253d6c76
   2d410:	6f632064 	.word	0x6f632064
   2d414:	6c5f6e6e 	.word	0x6c5f6e6e
   2d418:	6e657461 	.word	0x6e657461
   2d41c:	253d7963 	.word	0x253d7963
   2d420:	75732064 	.word	0x75732064
   2d424:	76726570 	.word	0x76726570
   2d428:	6f697369 	.word	0x6f697369
   2d42c:	69745f6e 	.word	0x69745f6e
   2d430:	756f656d 	.word	0x756f656d
   2d434:	64253d74 	.word	0x64253d74
   2d438:	636e6520 	.word	0x636e6520
   2d43c:	74707972 	.word	0x74707972
   2d440:	253d6465 	.word	0x253d6465
   2d444:	75612064 	.word	0x75612064
   2d448:	6e656874 	.word	0x6e656874
   2d44c:	61636974 	.word	0x61636974
   2d450:	3d646574 	.word	0x3d646574
   2d454:	62206425 	.word	0x62206425
   2d458:	65646e6f 	.word	0x65646e6f
   2d45c:	64253d64 	.word	0x64253d64
   2d460:	0000000a 	.word	0x0000000a
   2d464:	6c696166 	.word	0x6c696166
   2d468:	00006465 	.word	0x00006465
   2d46c:	61747365 	.word	0x61747365
   2d470:	73696c62 	.word	0x73696c62
   2d474:	00646568 	.word	0x00646568
   2d478:	6e6e6f63 	.word	0x6e6e6f63
   2d47c:	69746365 	.word	0x69746365
   2d480:	25206e6f 	.word	0x25206e6f
   2d484:	73203b73 	.word	0x73203b73
   2d488:	75746174 	.word	0x75746174
   2d48c:	64253d73 	.word	0x64253d73
   2d490:	00000020 	.word	0x00000020
   2d494:	63736964 	.word	0x63736964
   2d498:	656e6e6f 	.word	0x656e6e6f
   2d49c:	203b7463 	.word	0x203b7463
   2d4a0:	73616572 	.word	0x73616572
   2d4a4:	253d6e6f 	.word	0x253d6e6f
   2d4a8:	00002064 	.word	0x00002064
   2d4ac:	6e6e6f63 	.word	0x6e6e6f63
   2d4b0:	69746365 	.word	0x69746365
   2d4b4:	75206e6f 	.word	0x75206e6f
   2d4b8:	74616470 	.word	0x74616470
   2d4bc:	203b6465 	.word	0x203b6465
   2d4c0:	74617473 	.word	0x74617473
   2d4c4:	253d7375 	.word	0x253d7375
   2d4c8:	00002064 	.word	0x00002064
   2d4cc:	65766461 	.word	0x65766461
   2d4d0:	73697472 	.word	0x73697472
   2d4d4:	6f632065 	.word	0x6f632065
   2d4d8:	656c706d 	.word	0x656c706d
   2d4dc:	203b6574 	.word	0x203b6574
   2d4e0:	73616572 	.word	0x73616572
   2d4e4:	253d6e6f 	.word	0x253d6e6f
   2d4e8:	00000064 	.word	0x00000064
   2d4ec:	72636e65 	.word	0x72636e65
   2d4f0:	69747079 	.word	0x69747079
   2d4f4:	63206e6f 	.word	0x63206e6f
   2d4f8:	676e6168 	.word	0x676e6168
   2d4fc:	76652065 	.word	0x76652065
   2d500:	3b746e65 	.word	0x3b746e65
   2d504:	61747320 	.word	0x61747320
   2d508:	3d737574 	.word	0x3d737574
   2d50c:	00206425 	.word	0x00206425
   2d510:	73627573 	.word	0x73627573
   2d514:	62697263 	.word	0x62697263
   2d518:	76652065 	.word	0x76652065
   2d51c:	3b746e65 	.word	0x3b746e65
   2d520:	6e6f6320 	.word	0x6e6f6320
   2d524:	61685f6e 	.word	0x61685f6e
   2d528:	656c646e 	.word	0x656c646e
   2d52c:	2064253d 	.word	0x2064253d
   2d530:	72747461 	.word	0x72747461
   2d534:	6e61685f 	.word	0x6e61685f
   2d538:	3d656c64 	.word	0x3d656c64
   2d53c:	72206425 	.word	0x72206425
   2d540:	6f736165 	.word	0x6f736165
   2d544:	64253d6e 	.word	0x64253d6e
   2d548:	65727020 	.word	0x65727020
   2d54c:	253d6e76 	.word	0x253d6e76
   2d550:	75632064 	.word	0x75632064
   2d554:	253d6e72 	.word	0x253d6e72
   2d558:	72702064 	.word	0x72702064
   2d55c:	3d697665 	.word	0x3d697665
   2d560:	63206425 	.word	0x63206425
   2d564:	3d697275 	.word	0x3d697275
   2d568:	000a6425 	.word	0x000a6425
   2d56c:	2075746d 	.word	0x2075746d
   2d570:	61647075 	.word	0x61647075
   2d574:	65206574 	.word	0x65206574
   2d578:	746e6576 	.word	0x746e6576
   2d57c:	6f63203b 	.word	0x6f63203b
   2d580:	685f6e6e 	.word	0x685f6e6e
   2d584:	6c646e61 	.word	0x6c646e61
   2d588:	64253d65 	.word	0x64253d65
   2d58c:	64696320 	.word	0x64696320
   2d590:	2064253d 	.word	0x2064253d
   2d594:	3d75746d 	.word	0x3d75746d
   2d598:	000a6425 	.word	0x000a6425
   2d59c:	18110010 	.word	0x18110010
   2d5a0:	78323025 	.word	0x78323025
   2d5a4:	3230253a 	.word	0x3230253a
   2d5a8:	30253a78 	.word	0x30253a78
   2d5ac:	253a7832 	.word	0x253a7832
   2d5b0:	3a783230 	.word	0x3a783230
   2d5b4:	78323025 	.word	0x78323025
   2d5b8:	3230253a 	.word	0x3230253a
   2d5bc:	00000078 	.word	0x00000078
   2d5c0:	69676572 	.word	0x69676572
   2d5c4:	72657473 	.word	0x72657473
   2d5c8:	73206465 	.word	0x73206465
   2d5cc:	69767265 	.word	0x69767265
   2d5d0:	25206563 	.word	0x25206563
   2d5d4:	69772073 	.word	0x69772073
   2d5d8:	68206874 	.word	0x68206874
   2d5dc:	6c646e61 	.word	0x6c646e61
   2d5e0:	64253d65 	.word	0x64253d65
   2d5e4:	0000000a 	.word	0x0000000a
   2d5e8:	69676572 	.word	0x69676572
   2d5ec:	72657473 	.word	0x72657473
   2d5f0:	20676e69 	.word	0x20676e69
   2d5f4:	72616863 	.word	0x72616863
   2d5f8:	65746361 	.word	0x65746361
   2d5fc:	74736972 	.word	0x74736972
   2d600:	25206369 	.word	0x25206369
   2d604:	69772073 	.word	0x69772073
   2d608:	64206874 	.word	0x64206874
   2d60c:	685f6665 	.word	0x685f6665
   2d610:	6c646e61 	.word	0x6c646e61
   2d614:	64253d65 	.word	0x64253d65
   2d618:	6c617620 	.word	0x6c617620
   2d61c:	6e61685f 	.word	0x6e61685f
   2d620:	3d656c64 	.word	0x3d656c64
   2d624:	000a6425 	.word	0x000a6425
   2d628:	69676572 	.word	0x69676572
   2d62c:	72657473 	.word	0x72657473
   2d630:	20676e69 	.word	0x20676e69
   2d634:	63736564 	.word	0x63736564
   2d638:	74706972 	.word	0x74706972
   2d63c:	2520726f 	.word	0x2520726f
   2d640:	69772073 	.word	0x69772073
   2d644:	68206874 	.word	0x68206874
   2d648:	6c646e61 	.word	0x6c646e61
   2d64c:	64253d65 	.word	0x64253d65
   2d650:	0000000a 	.word	0x0000000a

0002d654 <gatt_svr_chr_sec_test_rand_uuid>:
   2d654:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   2d664:	0000005c                                \...

0002d668 <gatt_svr_chr_sec_test_static_uuid>:
   2d668:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   2d678:	0000005c                                \...

0002d67c <gatt_svr_svc_sec_test_uuid>:
   2d67c:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   2d68c:	00000059                                Y...

0002d690 <gatt_svr_svcs>:
   2d690:	00000001 0002d67c 00000000 20000104     ....|.......... 
	...
   2d6b0:	696c7073 00000074 74617473 00007375     split...status..

0002d6c0 <__compound_literal.0>:
   2d6c0:	0002d6b8 2000058b 00000000 00000002     ....... ........
	...
   2d6e0:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   2d6f0:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   2d700:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   2d710:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   2d720:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   2d730:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   2d740:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   2d750:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   2d760:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   2d770:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   2d780:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   2d790:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   2d7a0:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   2d7b0:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   2d7c0:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   2d7d0:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   2d7e0:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   2d7f0:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   2d800:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   2d810:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   2d820:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   2d830:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   2d840:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   2d850:	656c6469 00000000 6e69616d 00000000     idle....main....
   2d860:	7379736d 0000315f 00006372              msys_1..rc..

0002d86c <imgr_mgmt_handlers>:
	...
   2d8a0:	0000eb3d 252e7525 75252e75 756c252e     =...%u.%u.%u.%lu
   2d8b0:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....

0002d8c0 <g_smp_cbor_cfg>:
   2d8c0:	0000ec6f 0000ec67 0000ec57 0000ec2f     o...g...W.../...
   2d8d0:	0000ec1d 0000ec0d 0000ec01              ............

0002d8dc <gatt_svr_chr_smp>:
   2d8dc:	997c4880 9e261174 ce4e01ae 2e7828fb     .H|.t.&...N..(x.
   2d8ec:	000000da                                ....

0002d8f0 <gatt_svr_svc_smp>:
   2d8f0:	60aa8480 8b8a5274 b74cd386 53dc1d1d     ...`tR....L....S
   2d900:	0000008d                                ....

0002d904 <gatt_svr_svcs>:
   2d904:	00000001 0002d8f0 00000000 20000194     ............... 
	...
   2d924:	0000002f 646c6c25 00000000 756c6c25     /...%lld....%llu
   2d934:	00000000 006c6176 65766173 00000000     ....val.save....

0002d944 <conf_mgmt_handlers>:
   2d944:	0000fb3d 0000fa85 6c363025 00002075     =.......%06lu ..
   2d954:	74726175 00000030 682f6469 00646977     uart0...id/hwid.
   2d964:	622f6469 00007073 612f6469 00007070     id/bsp..id/app..
   2d974:	6d2f6469 61686766 00006873 732f6469     id/mfghash..id/s
   2d984:	61697265 0000006c 64697768 00000000     erial...hwid....
   2d994:	00707362 00707061 69726573 00006c61     bsp.app.serial..
   2d9a4:	6867666d 00687361 00006469 70656c62     mfghash.id..blep
   2d9b4:	00687072 64726f6e 705f6369 30316163     rph.nordic_pca10
   2d9c4:	00363530 4f424552 0000544f 41464544     056.REBOOT..DEFA
   2d9d4:	00544c55 424d494e 485f454c 0054534f     ULT.NIMBLE_HOST.
   2d9e4:	3d73745b 756c6c25 202c7375 3d646f6d     [ts=%lluus, mod=
   2d9f4:	6c207525 6c657665 2075253d 00000000     %u level=%u ....
   2da04:	303d6869 25782578 25782578 00000078     ih=0x%x%x%x%x...
   2da14:	0000005d 736e6f63 00656c6f              ]...console.

0002da20 <log_console_handler>:
   2da20:	00000000 0001127b 00000000 00011359     ....{.......Y...
   2da30:	00011319 00000000 00000000 0001127f     ................
   2da40:	00000000 00011283 00000000 6c646f6d     ............modl
   2da50:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   2da60:	6f626572 722f746f 6f6f6265 6e635f74     reboot/reboot_cn
   2da70:	00000074 6f626572 772f746f 74746972     t...reboot/writt
   2da80:	00006e65 6f626572 635f746f 0000746e     en..reboot_cnt..
   2da90:	74697277 006e6574 6f626572 6c5f746f     written.reboot_l
   2daa0:	0000676f 45534552 49505f54 0000004e     og..RESET_PIN...
   2dab0:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   2dac0:	574f5242 54554f4e 00000000 55514552     BROWNOUT....REQU
   2dad0:	45545345 00000044 54535953 4f5f4d45     ESTED...SYSTEM_O
   2dae0:	495f4646 0000544e 00554644 44524148     FF_INT..DFU.HARD
   2daf0:	00000000 4548544f 30203a52 00582578     ....OTHER: 0x%X.
   2db00:	4e4b4e55 204e574f 00006425 006e7372     UNKNOWN %d..rsn.
   2db10:	00746e63 00676d69 252e7525 75252e75     cnt.img.%u.%u.%u
   2db20:	0075252e 68736168 00000000 00656964     .%u.hash....die.
   2db30:	253a7325 00000064 00006370 67616c66     %s:%d...pc..flag
   2db40:	00000073 69746361 00006576 00207325     s...active..%s .
   2db50:	746f6f62 656c6261 00000000 666e6f63     bootable....conf
   2db60:	656d7269 00000064 646e6570 00676e69     irmed...pending.
   2db70:	00000031 6f626572 0000746f 00642573     1...reboot..s%d.
   2db80:	74617473 00000000 7465733c 0000003e     stat....<set>...
   2db90:	0066666f 67616d69 00000065 61746164     off.image...data
   2dba0:	00000000 006e656c 00616873 72677075     ....len.sha.upgr
   2dbb0:	00656461                                ade.

0002dbb4 <img_mgmt_handlers>:
   2dbb4:	00013165 00013305 00000000 00012ddd     e1...3.......-..
	...
   2dbe0:	00012d5d 67616d69 00007365 746f6c73     ]-..images..slot
   2dbf0:	00000000 73726576 006e6f69 6d726570     ....version.perm
   2dc00:	6e656e61 00000074 696c7073 61745374     anent...splitSta
   2dc10:	00737574 666e6f63 006d7269 74737075     tus.confirm.upst
   2dc20:	00747261 6f647075 0000656e 646e6570     art.updone..pend
   2dc30:	00000000 666e6f63 00000000 55424544     ....conf....DEBU
   2dc40:	00000047 4f525245 00000052 4f464e49     G...ERROR...INFO
   2dc50:	00000000 4e524157 00000000 4e4b4e55     ....WARN....UNKN
   2dc60:	004e574f 54495243 4c414349 00000000     OWN.CRITICAL....
   2dc70:	6f697270 00000000 00646974 74617473     prio....tid.stat
   2dc80:	00000065 756b7473 00006573 736b7473     e...stkuse..stks
   2dc90:	00007a69 63777363 0000746e 746e7572     iz..cswcnt..runt
   2dca0:	00656d69 7473616c 6568635f 6e696b63     ime.last_checkin
   2dcb0:	00000000 7478656e 6568635f 6e696b63     ....next_checkin
   2dcc0:	00000000 6b736174 00000073 00000072     ....tasks...r...

0002dcd0 <os_mgmt_group_handlers>:
   2dcd0:	00013c99 00013c99 00000000 00000000     .<...<..........
   2dce0:	00013c29 00000000 00000000 00000000     )<..............
	...
   2dcfc:	00013ad9 5f656c62 00006c6c              .:..ble_ll..

0002dd08 <g_ble_ll_pdu_header_tx_time>:
   2dd08:	005001ce 02d0002c 5f656c62 635f6c6c     ..P.,...ble_ll_c
   2dd18:	006e6e6f                                onn.

0002dd1c <g_ble_ll_ctrl_pkt_lengths>:
   2dd1c:	1601070b 0100000c 00000808 17080105     ................
   2dd2c:	00000217 02020808 00010204 2a010122     ............"..*
   2dd3c:	03030f08 0a0a0404 00000a03              ............

0002dd48 <g_ble_ll_supp_cmds>:
   2dd48:	00000020 0000c000 00000000 22280000      .............("
	...
   2dd60:	ffc3f700 0000000e 0ff9f000 07800000     ................
	...

0002dd78 <g_ble_sca_ppm_tbl>:
   2dd78:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....
   2dd88:	5f656c62 00796870                       ble_phy.

0002dd90 <g_ble_phy_chan_freq>:
   2dd90:	0a080604 12100e0c 1c181614 2422201e     ............. "$
   2dda0:	2c2a2826 3432302e 3c3a3836 4442403e     &(*,.02468:<>@BD
   2ddb0:	4c4a4846 501a024e                       FHJLN..P

0002ddb8 <g_ble_phy_t_rxaddrdelay>:
   2ddb8:	11020611                                ....

0002ddbc <g_ble_phy_t_rxenddelay>:
   2ddbc:	1b020616                                ....

0002ddc0 <g_ble_phy_t_txdelay>:
   2ddc0:	05030405                                ....

0002ddc4 <g_ble_phy_t_txenddelay>:
   2ddc4:	09030403 5f656c62 00747461              ....ble_att.

0002ddd0 <ble_att_rx_dispatch>:
   2ddd0:	00000001 0001c80d 00000002 0001d8a1     ................
   2dde0:	00000003 0001c835 00000004 0001d935     ....5.......5...
   2ddf0:	00000005 0001c89d 00000006 0001d9a3     ................
   2de00:	00000007 0001c8a5 00000008 0001da1f     ................
   2de10:	00000009 0001c8ad 0000000a 0001dac5     ................
   2de20:	0000000b 0001c8b5 0000000c 0001db43     ............C...
   2de30:	0000000d 0001c8bd 0000000e 0001dbc5     ................
   2de40:	0000000f 0001c8c1 00000010 0001dc03     ................
   2de50:	00000011 0001c8c9 00000012 0001dcc5     ................
   2de60:	00000013 0001c8cd 00000016 0001dd87     ................
   2de70:	00000017 0001c8d5 00000018 0001de39     ............9...
   2de80:	00000019 0001c8dd 0000001b 0001deed     ................
   2de90:	0000001d 0001df2b 0000001e 0001c961     ....+.......a...
   2dea0:	00000052 0001dd33 5f656c62 5f747461     R...3...ble_att_
   2deb0:	5f727673 72746e65 6f705f79 00006c6f     svr_entry_pool..
   2dec0:	5f656c62 5f747461 5f727673 70657270     ble_att_svr_prep
   2ded0:	746e655f 705f7972 006c6f6f 6e756f63     _entry_pool.coun
   2dee0:	64253d74 00000020 72746e65 64252d79     t=%d ...entry-%d
   2def0:	64617b3d 745f7264 3d657079 61206425     ={addr_type=%d a
   2df00:	3d726464 00000000 0000207d 63736964     ddr=....} ..disc
   2df10:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   2df20:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   2df30:	72696420 5f746365 72646461 0000003d      direct_addr=...
   2df40:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   2df50:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   2df60:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   2df70:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   2df80:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   2df90:	6d5f6c76 253d7861 00000064 6e6e6f63     vl_max=%d...conn
   2dfa0:	69746365 70206e6f 6d617261 72657465     ection parameter
   2dfb0:	64707520 3b657461 6e6f6320 61685f6e      update; conn_ha
   2dfc0:	656c646e 2064253d 6c767469 6e696d5f     ndle=%d itvl_min
   2dfd0:	2064253d 6c767469 78616d5f 2064253d     =%d itvl_max=%d 
   2dfe0:	6574616c 3d79636e 73206425 72657075     latency=%d super
   2dff0:	69736976 745f6e6f 6f656d69 253d7475     vision_timeout=%
   2e000:	696d2064 65635f6e 6e656c5f 2064253d     d min_ce_len=%d 
   2e010:	5f78616d 6c5f6563 253d6e65 00000064     max_ce_len=%d...
   2e020:	20504147 636f7270 72756465 6e692065     GAP procedure in
   2e030:	61697469 3a646574 74657320 69687720     itiated: set whi
   2e040:	696c6574 203b7473 00000000 20504147     telist; ....GAP 
   2e050:	636f7270 72756465 6e692065 61697469     procedure initia
   2e060:	3a646574 76646120 69747265 203b6573     ted: advertise; 
   2e070:	00000000 746e6f63 6c6c6f72 72207265     ....controller r
   2e080:	726f7065 20646574 61766e69 2064696c     eported invalid 
   2e090:	6f727265 6f632072 69206564 6f63206e     error code in co
   2e0a0:	6f636e6e 656c706d 65206574 746e6576     nncomplete event
   2e0b0:	7525203a 00000000 20504147 636f7270     : %u....GAP proc
   2e0c0:	72756465 6e692065 61697469 3a646574     edure initiated:
   2e0d0:	6f747320 64612070 74726576 6e697369      stop advertisin
   2e0e0:	000a2e67 20504147 636f7270 72756465     g...GAP procedur
   2e0f0:	6e692065 61697469 3a646574 6e616320     e initiated: can
   2e100:	206c6563 6e6e6f63 69746365 000a6e6f     cel connection..
   2e110:	20504147 636f7270 72756465 6e692065     GAP procedure in
   2e120:	61697469 3a646574 72657420 616e696d     itiated: termina
   2e130:	63206574 656e6e6f 6f697463 63203b6e     te connection; c
   2e140:	5f6e6e6f 646e6168 253d656c 63682064     onn_handle=%d hc
   2e150:	65725f69 6e6f7361 0a64253d 00000000     i_reason=%d.....
   2e160:	20504147 636f7270 72756465 6e692065     GAP procedure in
   2e170:	61697469 3a646574 00000020 5f656c62     itiated: ...ble_
   2e180:	5f706167 61647075 00006574 5f656c62     gap_update..ble_
   2e190:	00706167 54544147 6f727020 75646563     gap.GATT procedu
   2e1a0:	69206572 6974696e 64657461 7325203a     re initiated: %s
   2e1b0:	00000000 69746f6e 203b7966 00000000     ....notify; ....
   2e1c0:	5f747461 646e6168 253d656c 00000a64     att_handle=%d...
   2e1d0:	69646e69 65746163 0000203b 5f656c62     indicate; ..ble_
   2e1e0:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.
   2e1f0:	5f656c62 74746167 00000063 28030010     ble_gattc......(
   2e200:	28020010 28000010                       ...(...(

0002e208 <ble_gattc_err_dispatch>:
   2e208:	0001f893 0001f8e3 0001f93f 0001f99b     ........?.......
   2e218:	0001f9fb 0001fa57 0001fabb 0001fb17     ....W...........
   2e228:	0001fb67 0001fbb7 0001fc23 0001fea5     g.......#.......
   2e238:	0001ff1f 0001feff 0002036d              ........m...

0002e244 <ble_gattc_resume_dispatch>:
   2e244:	00000000 00020275 00020227 000201c9     ....u...'.......
   2e254:	00020171 00020125 000200db 00000000     q...%...........
   2e264:	00000000 000200a3 00000000 00000000     ................
   2e274:	00020065 0001ffd3 00000000              e...........

0002e280 <ble_gattc_tmo_dispatch>:
   2e280:	0001f885 0001f8d5 0001f931 0001f98d     ........1.......
   2e290:	0001f9ed 0001fa49 0001faad 0001fb09     ....I...........
   2e2a0:	0001fb59 0001fba9 0001fc15 0001fe99     Y...............
   2e2b0:	0001fc65 0001fcb5 0001fe45 5f656c62     e.......E...ble_
   2e2c0:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   2e2d0:	00006c6f 5f656c62 74746167 00000073     ol..ble_gatts...
   2e2e0:	28030010 6c696146 74206465 6572206f     ...(Failed to re
   2e2f0:	726f7473 52492065 6620734b 206d6f72     store IRKs from 
   2e300:	726f7473 73203b65 75746174 64253d73     store; status=%d
   2e310:	0000000a 5f656c62 685f7368 655f6963     ....ble_hs_hci_e
   2e320:	6f705f76 00006c6f 5f656c62 00007368     v_pool..ble_hs..
   2e330:	5f656c62 635f7368 5f6e6e6f 6c6f6f70     ble_hs_conn_pool
   2e340:	00000000                                ....

0002e344 <ble_hs_conn_null_addr>:
	...
   2e34c:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

0002e35c <ble_hs_hci_evt_dispatch>:
   2e35c:	0000003e 00022c79 00000013 00022d79     >...y,......y-..
   2e36c:	00000005 00022d47 00000008 00022d33     ....G-......3-..
   2e37c:	00000030 00022d1f 00000010 00022d0b     0....-.......-..

0002e38c <ble_hs_hci_evt_le_dispatch>:
   2e38c:	00000000 00022f75 00022e71 00023017     ....u/..q....0..
   2e39c:	00023003 00022fef 00022fdb 00000000     .0.../.../......
	...
   2e3b4:	00022eef 00022def 00022ddb 00022ceb     .....-...-...,..
   2e3c4:	00022cef 00022cf3 00022cf7 00022cff     .,...,...,...,..
   2e3d4:	00022d03 00022d07 00000000 00000000     .-...-..........
	...
   2e3ec:	00022cfb 65766461 73697472 74207265     .,..advertiser t
   2e3fc:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   2e40c:	00000a65                                e...

0002e410 <priv_addr_types.12274>:
   2e410:	00000203                                ....

0002e414 <pub_addr_types.12273>:
   2e414:	00000001 6c696166 74206465 6f63206f     ....failed to co
   2e424:	6769666e 20657275 74736572 6465726f     nfigure restored
   2e434:	4b524920 0000000a                        IRK....

0002e43c <ble_hs_misc_null_addr>:
	...
   2e444:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   2e454:	00000000 5f656c62 735f7368 5f706f74     ....ble_hs_stop_
   2e464:	6d726574 74616e69 69745f65 756f656d     terminate_timeou
   2e474:	62635f74 2064252c 6e6e6f63 69746365     t_cb,%d connecti
   2e484:	73286e6f 74732029 206c6c69 0a207075     on(s) still up .
   2e494:	00000000 5f656c62 6163326c 68635f70     ....ble_l2cap_ch
   2e4a4:	705f6e61 006c6f6f 5f656c62 6163326c     an_pool.ble_l2ca
   2e4b4:	00000070 5f656c62 6163326c 69735f70     p...ble_l2cap_si
   2e4c4:	72705f67 705f636f 006c6f6f              g_proc_pool.

0002e4d0 <ble_l2cap_sig_dispatch>:
   2e4d0:	00000000 00023f49 00000000 00023de1     ....I?.......=..
   2e4e0:	00000000 00023de1 00023de1 00023de1     .....=...=...=..
   2e4f0:	00000000 00023de1 00000000 00023de1     .....=.......=..
   2e500:	00000000 00023de1 00000000 00023de1     .....=.......=..
   2e510:	00000000 00023de1 0002402d 00023f5d     .....=..-@..]?..
   2e520:	00023de1 00023de1 00023de1 00023de1     .=...=...=...=..
   2e530:	00023de1 00023de1 00023de1 5f656c62     .=...=...=..ble_
   2e540:	705f6d73 5f726961 6c696166 2078745f     sm_pair_fail_tx 
   2e550:	6c696166 202c6465 3d206372 0a642520     failed, rc = %d.
   2e560:	00000000 5f656c62 705f6d73 5f636f72     ....ble_sm_proc_
   2e570:	6c6f6f70 00000000                       pool....

0002e578 <ble_sm_dispatch>:
   2e578:	00000000 0002521f 00025461 000253b3     .....R..aT...S..
   2e588:	00025971 00024df5 00025199 0002511f     qY...M...Q...Q..
   2e598:	0002509f 00025025 00024fa5 00025b3d     .P..%P...O..=[..
   2e5a8:	000243cd 000243cd 000243cd              .C...C...C..

0002e5b4 <ble_sm_state_dispatch>:
   2e5b4:	000258bd 00024bc5 00024bb3 00024b15     .X...K...K...K..
   2e5c4:	00024b65 00024a8b 00024a7d 000247a3     eK...J..}J...G..
   2e5d4:	0002460d 00000000 00000000              .F..........

0002e5e0 <ble_sm_lgcy_init_ioa>:
   2e5e0:	00020000 02000002 03030200 00030002     ................
   2e5f0:	00000000 00020303 00000003              ............

0002e5fc <ble_sm_lgcy_resp_ioa>:
   2e5fc:	00030000 03000003 02020300 00020002     ................
   2e60c:	00000000 00030202 00000002 30257830     ............0x%0
   2e61c:	00786834 30257830 00786c38 78323025     4hx.0x%08lx.%02x
   2e62c:	78323025 78323025 78323025 3230252d     %02x%02x%02x-%02
   2e63c:	32302578 30252d78 30257832 252d7832     x%02x-%02x%02x-%
   2e64c:	25783230 2d783230 78323025 78323025     02x%02x-%02x%02x
   2e65c:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   2e66c:	00000000                                ....

0002e670 <ble_uuid_base>:
   2e670:	5f9b34fb 80000080 00001000 00000000     .4._............

0002e680 <ble_svc_ans_defs>:
   2e680:	00000001 20000300 00000000 20000318     ....... ....... 
	...
   2e6a0:	63617041 4d206568 77656e79 694e2074     Apache Mynewt Ni
   2e6b0:	454c426d 00000000                       mBLE....

0002e6b8 <ble_svc_dis_defs>:
   2e6b8:	00000001 200003a8 00000000 200003b4     ....... ....... 
	...

0002e6d8 <ble_svc_gap_defs>:
   2e6d8:	00000001 20000418 00000000 20000424     ....... ....$.. 
	...

0002e6f8 <ble_svc_gatt_defs>:
   2e6f8:	00000001 2000048c 00000000 20000494     ....... ....... 
	...
   2e718:	6e617274 726f7073 6f705f74 635f6c6f     transport_pool_c
   2e728:	0000646d 6e617274 726f7073 6f705f74     md..transport_po
   2e738:	655f6c6f 00007476 6e617274 726f7073     ol_evt..transpor
   2e748:	6f705f74 655f6c6f 6c5f7476 0000006f     t_pool_evt_lo...
   2e758:	6e617274 726f7073 6f705f74 615f6c6f     transport_pool_a
   2e768:	00006c63                                cl..

0002e76c <boot_img_magic>:
   2e76c:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

0002e77c <boot_swap_tables>:
   2e77c:	03040104 01040204 03040104 04030301     ................
   2e78c:	00000401                                ....

0002e790 <sysflash_map_dflt>:
	...
   2e798:	00008000 00000001 0000c000 00076000     .............`..
   2e7a8:	00000002 00082000 00076000 00000003     ..... ...`......
   2e7b8:	000f8000 00004000 00000010 00008000     .....@..........
   2e7c8:	00004000 00000011 000fc000 00004000     .@...........@..
   2e7d8:	00000000 01000000 02000000 04000000     ................
   2e7e8:	08000000 10000000 20000000 40000000     ........... ...@
   2e7f8:	80000000 1b000000 36000000              ...........6

0002e804 <sbox>:
   2e804:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   2e814:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   2e824:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   2e834:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   2e844:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   2e854:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   2e864:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   2e874:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   2e884:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   2e894:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   2e8a4:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   2e8b4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   2e8c4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   2e8d4:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   2e8e4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   2e8f4:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

0002e904 <base64_chars>:
   2e904:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   2e914:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   2e924:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   2e934:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   2e944:	00000000 68323025 00007868 00006325     ....%02hhx..%c..
   2e954:	0063255c 3025755c 5c586c34 34302575     \%c.\u%04lX\u%04
   2e964:	0000586c 3025755c 00586c34 0000007b     lX..\u%04lX.{...
   2e974:	0000005b 0000007d 736c6166 00000065     [...}...false...
   2e984:	65757274 00000000 0000205f 6c6c252d     true...._ ..-%ll
   2e994:	00000075 3438312d 34373634 33373034     u...-18446744073
   2e9a4:	35393037 31363135 00000036 00002768     709551616...h'..
   2e9b4:	00000027 00000022 756c6c25 00000028     '..."...%llu(...
   2e9c4:	00000029 706d6973 2528656c 29756868     )...simple(%hhu)
   2e9d4:	00000000 6c6c756e 00000000 65646e75     ....null....unde
   2e9e4:	656e6966 00000064 61766e69 0064696c     fined...invalid.
   2e9f4:	0000202c 00007325 0000203a              , ..%s..: ..

0002ea00 <nrf52k_flash_dev>:
   2ea00:	0002ea18 00000000 00100000 00000100     ................
   2ea10:	00000001 000000ff                       ........

0002ea18 <nrf52k_flash_funcs>:
   2ea18:	0002a1c1 0002a0f9 0002a07d 0002a0d1     ........}.......
   2ea28:	00000000 0002a0cd 00000000              ............

0002ea34 <os_bsp_uart0_cfg>:
   2ea34:	07050806                                ....

0002ea38 <nrf52_hal_timers>:
	...
   2ea4c:	20005190                                .Q. 

0002ea50 <stdout>:
   2ea50:	200004e4                                ... 

0002ea54 <MemFile_methods>:
   2ea54:	0002b7fd 00000000                       ........

0002ea5c <log_fcb_handler>:
   2ea5c:	00000002 0002bbd1 0002bf6b 0002bf4f     ........k...O...
   2ea6c:	0002be93 0002be29 0002bd95 0002bb71     ....).......q...
   2ea7c:	0002bb67 0002b997 0002b993              g...........

0002ea88 <crc8_small_table>:
   2ea88:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
   2ea98:	5f676f6c 7473696c 00000000 6576656c     log_list....leve
   2eaa8:	616d5f6c 00000070 75646f6d 6d5f656c     l_map...module_m
   2eab8:	00007061 5f676f6c 656d616e 00000000     ap..log_name....
   2eac8:	72746e65 00736569 65707974 00000000     entries.type....
   2ead8:	00007374 65646e69 00000078 7478656e     ts..index...next
   2eae8:	646e695f 00007865 73676f6c 00000000     _index..logs....
   2eaf8:	726f6263 00000000 006e6962 00727473     cbor....bin.str.
   2eb08:	6576656c 0000006c 75646f6d 0000656c     level...module..
   2eb18:	68676d69 00687361 0067736d 6f727265     imghash.msg.erro
   2eb28:	65203a72 7972746e 6f6f7420 72616c20     r: entry too lar
   2eb38:	28206567 20757a25 65747962 00002973     ge (%zu bytes)..
   2eb48:	74617473 73696c5f 00000074 6c656966     stat_list...fiel
   2eb58:	00007364                                ds..

/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 142164	   1096	  19896	 163156	  27d54	/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/apps/bleprph/bleprph.elf
